var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20482197858734755 ± 0.001485346714927143\n   G2(1) = 0.9204998316041583 ± 0.0005836761169776101\n   G2(2) = 0.982298867853397 ± 0.0005558515933405501\n   G2(3) = 0.9895806224975424 ± 0.0010393584798109104\n   G2(4) = 0.982298867853397 ± 0.0005558515933405501\n   G2(5) = 0.9204998316041583 ± 0.0005836761169776101\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9805483010236093 ± 0.132554727526549\n   Replica 2: -4.000632410644033 ± 0.14312603713250988\n   Replica 3: -3.9605541792695074 ± 0.11607038281716549\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip330\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip330)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip331\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip330)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip332\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.26 2211.02,1003.26 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.684 2211.02,745.684 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.111 2211.02,488.111 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.537 2211.02,230.537 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.26 423.181,1003.26 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.684 423.181,745.684 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.111 423.181,488.111 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.537 423.181,230.537 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M290.043 1016.6 L306.363 1016.6 L306.363 1020.54 L284.418 1020.54 L284.418 1016.6 Q287.08 1013.85 291.664 1009.22 Q296.27 1004.57 297.451 1003.22 Q299.696 1000.7 300.576 998.964 Q301.478 997.205 301.478 995.515 Q301.478 992.76 299.534 991.024 Q297.613 989.288 294.511 989.288 Q292.312 989.288 289.858 990.052 Q287.427 990.816 284.65 992.367 L284.65 987.645 Q287.474 986.51 289.927 985.932 Q292.381 985.353 294.418 985.353 Q299.789 985.353 302.983 988.038 Q306.177 990.723 306.177 995.214 Q306.177 997.344 305.367 999.265 Q304.58 1001.16 302.474 1003.76 Q301.895 1004.43 298.793 1007.64 Q295.691 1010.84 290.043 1016.6 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M316.224 985.978 L334.58 985.978 L334.58 989.913 L320.506 989.913 L320.506 998.385 Q321.524 998.038 322.543 997.876 Q323.562 997.691 324.58 997.691 Q330.367 997.691 333.747 1000.86 Q337.126 1004.03 337.126 1009.45 Q337.126 1015.03 333.654 1018.13 Q330.182 1021.21 323.862 1021.21 Q321.687 1021.21 319.418 1020.84 Q317.173 1020.47 314.765 1019.73 L314.765 1015.03 Q316.849 1016.16 319.071 1016.72 Q321.293 1017.27 323.77 1017.27 Q327.774 1017.27 330.112 1015.17 Q332.45 1013.06 332.45 1009.45 Q332.45 1005.84 330.112 1003.73 Q327.774 1001.63 323.77 1001.63 Q321.895 1001.63 320.02 1002.04 Q318.168 1002.46 316.224 1003.34 L316.224 985.978 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M356.339 989.057 Q352.728 989.057 350.899 992.621 Q349.094 996.163 349.094 1003.29 Q349.094 1010.4 350.899 1013.96 Q352.728 1017.51 356.339 1017.51 Q359.973 1017.51 361.779 1013.96 Q363.608 1010.4 363.608 1003.29 Q363.608 996.163 361.779 992.621 Q359.973 989.057 356.339 989.057 M356.339 985.353 Q362.149 985.353 365.205 989.959 Q368.284 994.543 368.284 1003.29 Q368.284 1012.02 365.205 1016.63 Q362.149 1021.21 356.339 1021.21 Q350.529 1021.21 347.45 1016.63 Q344.395 1012.02 344.395 1003.29 Q344.395 994.543 347.45 989.959 Q350.529 985.353 356.339 985.353 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M286.062 728.404 L304.418 728.404 L304.418 732.339 L290.344 732.339 L290.344 740.812 Q291.363 740.464 292.381 740.302 Q293.4 740.117 294.418 740.117 Q300.205 740.117 303.585 743.288 Q306.964 746.46 306.964 751.876 Q306.964 757.455 303.492 760.557 Q300.02 763.636 293.701 763.636 Q291.525 763.636 289.256 763.265 Q287.011 762.895 284.603 762.154 L284.603 757.455 Q286.687 758.589 288.909 759.145 Q291.131 759.7 293.608 759.7 Q297.613 759.7 299.951 757.594 Q302.288 755.487 302.288 751.876 Q302.288 748.265 299.951 746.159 Q297.613 744.052 293.608 744.052 Q291.733 744.052 289.858 744.469 Q288.006 744.886 286.062 745.765 L286.062 728.404 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M326.177 731.483 Q322.566 731.483 320.737 735.048 Q318.932 738.589 318.932 745.719 Q318.932 752.825 320.737 756.39 Q322.566 759.932 326.177 759.932 Q329.811 759.932 331.617 756.39 Q333.446 752.825 333.446 745.719 Q333.446 738.589 331.617 735.048 Q329.811 731.483 326.177 731.483 M326.177 727.779 Q331.987 727.779 335.043 732.386 Q338.122 736.969 338.122 745.719 Q338.122 754.446 335.043 759.052 Q331.987 763.636 326.177 763.636 Q320.367 763.636 317.288 759.052 Q314.233 754.446 314.233 745.719 Q314.233 736.969 317.288 732.386 Q320.367 727.779 326.177 727.779 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M356.339 731.483 Q352.728 731.483 350.899 735.048 Q349.094 738.589 349.094 745.719 Q349.094 752.825 350.899 756.39 Q352.728 759.932 356.339 759.932 Q359.973 759.932 361.779 756.39 Q363.608 752.825 363.608 745.719 Q363.608 738.589 361.779 735.048 Q359.973 731.483 356.339 731.483 M356.339 727.779 Q362.149 727.779 365.205 732.386 Q368.284 736.969 368.284 745.719 Q368.284 754.446 365.205 759.052 Q362.149 763.636 356.339 763.636 Q350.529 763.636 347.45 759.052 Q344.395 754.446 344.395 745.719 Q344.395 736.969 347.45 732.386 Q350.529 727.779 356.339 727.779 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M284.835 470.831 L307.057 470.831 L307.057 472.821 L294.511 505.391 L289.627 505.391 L301.432 474.766 L284.835 474.766 L284.835 470.831 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M316.224 470.831 L334.58 470.831 L334.58 474.766 L320.506 474.766 L320.506 483.238 Q321.524 482.891 322.543 482.729 Q323.562 482.544 324.58 482.544 Q330.367 482.544 333.747 485.715 Q337.126 488.886 337.126 494.303 Q337.126 499.881 333.654 502.983 Q330.182 506.062 323.862 506.062 Q321.687 506.062 319.418 505.692 Q317.173 505.321 314.765 504.58 L314.765 499.881 Q316.849 501.016 319.071 501.571 Q321.293 502.127 323.77 502.127 Q327.774 502.127 330.112 500.02 Q332.45 497.914 332.45 494.303 Q332.45 490.692 330.112 488.585 Q327.774 486.479 323.77 486.479 Q321.895 486.479 320.02 486.895 Q318.168 487.312 316.224 488.192 L316.224 470.831 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M356.339 473.909 Q352.728 473.909 350.899 477.474 Q349.094 481.016 349.094 488.145 Q349.094 495.252 350.899 498.817 Q352.728 502.358 356.339 502.358 Q359.973 502.358 361.779 498.817 Q363.608 495.252 363.608 488.145 Q363.608 481.016 361.779 477.474 Q359.973 473.909 356.339 473.909 M356.339 470.206 Q362.149 470.206 365.205 474.812 Q368.284 479.395 368.284 488.145 Q368.284 496.872 365.205 501.479 Q362.149 506.062 356.339 506.062 Q350.529 506.062 347.45 501.479 Q344.395 496.872 344.395 488.145 Q344.395 479.395 347.45 474.812 Q350.529 470.206 356.339 470.206 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M256.664 243.882 L264.303 243.882 L264.303 217.516 L255.992 219.183 L255.992 214.924 L264.256 213.257 L268.932 213.257 L268.932 243.882 L276.571 243.882 L276.571 247.817 L256.664 247.817 L256.664 243.882 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M296.015 216.336 Q292.404 216.336 290.576 219.901 Q288.77 223.442 288.77 230.572 Q288.77 237.678 290.576 241.243 Q292.404 244.785 296.015 244.785 Q299.65 244.785 301.455 241.243 Q303.284 237.678 303.284 230.572 Q303.284 223.442 301.455 219.901 Q299.65 216.336 296.015 216.336 M296.015 212.632 Q301.826 212.632 304.881 217.239 Q307.96 221.822 307.96 230.572 Q307.96 239.299 304.881 243.905 Q301.826 248.488 296.015 248.488 Q290.205 248.488 287.127 243.905 Q284.071 239.299 284.071 230.572 Q284.071 221.822 287.127 217.239 Q290.205 212.632 296.015 212.632 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M326.177 216.336 Q322.566 216.336 320.737 219.901 Q318.932 223.442 318.932 230.572 Q318.932 237.678 320.737 241.243 Q322.566 244.785 326.177 244.785 Q329.811 244.785 331.617 241.243 Q333.446 237.678 333.446 230.572 Q333.446 223.442 331.617 219.901 Q329.811 216.336 326.177 216.336 M326.177 212.632 Q331.987 212.632 335.043 217.239 Q338.122 221.822 338.122 230.572 Q338.122 239.299 335.043 243.905 Q331.987 248.488 326.177 248.488 Q320.367 248.488 317.288 243.905 Q314.233 239.299 314.233 230.572 Q314.233 221.822 317.288 217.239 Q320.367 212.632 326.177 212.632 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M356.339 216.336 Q352.728 216.336 350.899 219.901 Q349.094 223.442 349.094 230.572 Q349.094 237.678 350.899 241.243 Q352.728 244.785 356.339 244.785 Q359.973 244.785 361.779 241.243 Q363.608 237.678 363.608 230.572 Q363.608 223.442 361.779 219.901 Q359.973 216.336 356.339 216.336 M356.339 212.632 Q362.149 212.632 365.205 217.239 Q368.284 221.822 368.284 230.572 Q368.284 239.299 365.205 243.905 Q362.149 248.488 356.339 248.488 Q350.529 248.488 347.45 243.905 Q344.395 239.299 344.395 230.572 Q344.395 221.822 347.45 217.239 Q350.529 212.632 356.339 212.632 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip332)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.537 4017.76,230.537 \"/>\n<polyline clip-path=\"url(#clip332)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1248.78 458.259,1248.48 458.828,1248.11 459.396,1247.65 459.964,1247.14 460.533,1246.56 461.101,1245.9 461.669,1243.11 462.238,1242.34 462.806,1241.47 463.375,1240.51 463.943,1239.47 464.511,1238.32 465.08,1237.07 465.648,1235.71 466.216,1234.23 466.785,1232.61 467.353,1230.89 467.921,1226.97 468.49,1225.02 469.058,1222.92 469.626,1220.67 470.195,1218.29 470.763,1215.73 471.331,1210.89 471.9,1207.96 472.468,1203.78 473.036,1200.46 473.605,1196.96 474.173,1193.24 474.741,1186.24 475.31,1181.99 475.878,1177.54 476.446,1172.86 477.015,1168.01 477.583,1162.85 478.152,1156.49 478.72,1151.03 479.288,1144.31 479.857,1137.28 480.425,1129 480.993,1120.45 481.562,1114 482.13,1105.22 482.698,1096.31 483.267,1088.15 483.835,1080.92 484.403,1073.39 484.972,1065.66 485.54,1057.78 486.108,1048.64 486.677,1036.26 487.245,1025.97 487.813,1015.64 488.382,1007.17 488.95,997.561 489.518,987.713 490.087,978.735 490.655,968.713 491.224,958.553 491.792,946.074 492.36,935.821 492.929,926.536 493.497,916.011 494.065,906.596 494.634,897.106 495.202,885.428 495.77,874.793 496.339,865.305 496.907,853.577 497.475,842.85 498.044,832.268 498.612,822.683 499.18,810.952 499.749,801.402 500.317,790.89 500.885,779.318 501.454,768.959 502.022,757.728 502.59,748.498 503.159,737.189 503.727,727.167 504.295,718.155 504.864,709.103 505.432,701.276 506.001,688.248 506.569,675.459 507.137,665.926 507.706,653.459 508.274,645.268 508.842,635.07 509.411,625.025 509.979,617.204 510.547,607.358 511.116,597.74 511.684,589.557 512.252,579.201 512.821,571.368 513.389,563.387 513.957,554.668 514.526,546.121 515.094,538.967 515.662,530.667 516.231,521.433 516.799,515.813 517.367,509.178 517.936,503.578 518.504,497.094 519.072,489.829 519.641,483.754 520.209,477.667 520.778,471.757 521.346,467.015 521.914,460.3 522.483,452.722 523.051,449.358 523.619,444.198 524.188,438.906 524.756,434.823 525.324,429.62 525.893,422.647 526.461,416.733 527.029,413.099 527.598,404.33 528.166,402.124 528.734,397.764 529.303,395.65 529.871,392.446 530.439,386.135 531.008,383.284 531.576,379.335 532.144,374.312 532.713,369.558 533.281,368.164 533.85,363.498 534.418,361.927 534.986,358.406 535.555,356.072 536.123,352.638 536.691,349.386 537.26,347.227 537.828,344.023 538.396,339.052 538.965,334.132 539.533,332.44 540.101,328.775 540.67,327.273 541.238,326.812 541.806,323.278 542.375,318.656 542.943,314.419 543.511,313.327 544.08,311.241 544.648,312.362 545.216,309.169 545.785,307.048 546.353,307.042 546.921,304.217 547.49,302.331 548.058,301.483 548.627,299.651 549.195,298.626 549.763,297.66 550.332,295.782 550.9,292.091 551.468,290.346 552.037,289.675 552.605,284.997 553.173,283.548 553.742,283.309 554.31,282.903 554.878,282.778 555.447,282.404 556.015,283.007 556.583,281.27 557.152,279.813 557.72,278.287 558.288,278.189 558.857,275.806 559.425,273.601 559.993,272.597 560.562,271.692 561.13,270.83 561.698,270.89 562.267,269.829 562.835,269.825 563.404,269.94 563.972,267.817 564.54,270.989 565.109,271.647 565.677,271.265 566.245,268.722 566.814,270.738 567.382,268.27 567.95,267.92 568.519,267.79 569.087,267.281 569.655,264.975 570.224,262.707 570.792,261.671 571.36,260.735 571.929,259.664 572.497,260.657 573.065,260.803 573.634,259.574 574.202,262.706 574.77,263.369 575.339,261.881 575.907,260.554 576.476,261.339 577.044,260.856 577.612,257.399 578.181,256.249 578.749,255.173 579.317,252.245 579.886,251.285 580.454,250.554 581.022,252.826 581.591,251.095 582.159,252.168 582.727,251.163 583.296,251.291 583.864,250.4 584.432,250.391 585.001,250.641 585.569,250.874 586.137,250.997 586.706,251.195 587.274,249.926 587.842,252.115 588.411,250.996 588.979,251.988 589.547,250.839 590.116,252.957 590.684,253.931 591.253,252.522 591.821,248.337 592.389,247.252 592.958,247.502 593.526,246.291 594.094,246.302 594.663,244.572 595.231,243.901 595.799,242.972 596.368,240.212 596.936,240.745 597.504,241.238 598.073,240.554 598.641,242.037 599.209,242.287 599.778,242.889 600.346,244.19 600.914,247.448 601.483,248.337 602.051,248.144 602.619,249.159 603.188,245.86 603.756,245.548 604.325,245.767 604.893,245.774 605.461,246.811 606.03,245.554 606.598,243.268 607.166,243.247 607.735,243.462 608.303,243.434 608.871,243.615 609.44,243.812 610.008,240.907 610.576,241.06 611.145,241.242 611.713,241.377 612.281,242.452 612.85,242.477 613.418,239.4 613.986,238.66 614.555,237.817 615.123,236.189 615.691,237.717 616.26,237.07 616.828,239.546 617.396,241.762 617.965,242.891 618.533,242.661 619.102,242.728 619.67,243.659 620.238,242.635 620.807,241.54 621.375,241.441 621.943,240.464 622.512,240.546 623.08,240.457 623.648,239.296 624.217,239.336 624.785,239.506 625.353,240.605 625.922,242.845 626.49,241.598 627.058,242.545 627.627,240.307 628.195,239.429 628.763,239.537 629.332,237.725 629.9,237.824 630.468,238.104 631.037,238.421 631.605,239.416 632.173,239.476 632.742,239.414 633.31,240.368 633.879,239.367 634.447,239.423 635.015,237.512 635.584,236.81 636.152,237.173 636.72,234.083 637.289,237.506 637.857,236.681 638.425,236.986 638.994,238.068 639.562,238.079 640.13,238.468 640.699,238.454 641.267,238.463 641.835,238.412 642.404,238.367 642.972,238.552 643.54,237.485 644.109,237.361 644.677,236.465 645.245,236.444 645.814,237.309 646.382,237.48 646.951,236.589 647.519,237.651 648.087,236.733 648.656,236.013 649.224,234.084 649.792,235.457 650.361,236.407 650.929,236.575 651.497,235.735 652.066,231.973 652.634,236.406 653.202,237.694 653.771,236.68 654.339,235.322 654.907,235.374 655.476,234.472 656.044,233.64 656.612,236.001 657.181,234.176 657.749,234.398 658.317,235.675 658.886,232.649 659.454,231.81 660.022,232.19 660.591,233.814 661.159,232.911 661.728,234.39 662.296,235.694 662.864,237.942 663.433,237.758 664.001,237.737 664.569,237.757 665.138,236.649 665.706,237.907 666.274,236.778 666.843,234.804 667.411,234.184 667.979,234.517 668.548,232.767 669.116,231.839 669.684,231.281 670.253,231.845 670.821,233.102 671.389,232.333 671.958,234.847 672.526,234.901 673.094,235.155 673.663,233.313 674.231,230.643 674.799,231.089 675.368,231.54 675.936,232.152 676.505,232.617 677.073,231.742 677.641,231.047 678.21,231.446 678.778,233.813 679.346,232.757 679.915,232.953 680.483,234.113 681.051,234.235 681.62,235.704 682.188,237.159 682.756,237.08 683.325,237.218 683.893,237.105 684.461,240.096 685.03,239.97 685.598,239.317 686.166,237.991 686.735,237.712 687.303,240.555 687.871,240.98 688.44,239.679 689.008,239.221 689.577,239.911 690.145,239.589 690.713,237.003 691.282,236.923 691.85,235.691 692.418,237.655 692.987,238.481 693.555,238.044 694.123,238.986 694.692,237.547 695.26,236.207 695.828,236.244 696.397,235.003 696.965,233.912 697.533,233.7 698.102,233.854 698.67,232.886 699.238,231.853 699.807,232.029 700.375,235.997 700.943,235.833 701.512,237.871 702.08,234.384 702.648,233.352 703.217,232.34 703.785,234.35 704.354,232.227 704.922,231.293 705.49,233.489 706.059,233.529 706.627,232.498 707.195,231.405 707.764,233.627 708.332,233.705 708.9,232.625 709.469,231.744 710.037,231.816 710.605,230.053 711.174,230.307 711.742,227.337 712.31,228.802 712.879,230.418 713.447,230.521 714.015,230.773 714.584,230.982 715.152,232.153 715.72,231.147 716.289,230.205 716.857,231.453 717.425,232.865 717.994,234.013 718.562,232.206 719.131,232.557 719.699,232.842 720.267,233.997 720.836,233.854 721.404,233.776 721.972,233.838 722.541,233.88 723.109,233.941 723.677,234.962 724.246,233.891 724.814,232.631 725.382,233.771 725.951,234.966 726.519,234.826 727.087,234.701 727.656,233.523 728.224,234.632 728.792,233.624 729.361,234.889 729.929,235.584 730.497,235.52 731.066,235.556 731.634,235.303 732.203,234.386 732.771,234.441 733.339,232.321 733.908,232.371 734.476,231.447 735.044,232.518 735.613,231.546 736.181,231.659 736.749,230.803 737.318,230.871 737.886,229.941 738.454,231.379 739.023,231.517 739.591,231.659 740.159,229.573 740.728,229.747 741.296,229.014 741.864,229.505 742.433,231.772 743.001,230.921 743.569,230.025 744.138,229.122 744.706,229.461 745.274,229.815 745.843,229.94 746.411,229.24 746.98,231.383 747.548,229.359 748.116,231.734 748.685,230.796 749.253,230.986 749.821,232.177 750.39,230.311 750.958,230.5 751.526,229.732 752.095,227.906 752.663,228.28 753.231,225.634 753.8,226.003 754.368,227.765 754.936,228.233 755.505,228.726 756.073,229.134 756.641,231.524 757.21,231.744 757.778,230.821 758.346,233.153 758.915,232.134 759.483,232.1 760.052,235.199 760.62,236.128 761.188,235.885 761.757,235.601 762.325,233.559 762.893,233.342 763.462,232.136 764.03,231.347 764.598,230.546 765.167,230.702 765.735,231.822 766.303,230.966 766.872,230.015 767.44,231.215 768.008,233.383 768.577,233.565 769.145,232.603 769.713,233.781 770.282,233.645 770.85,232.765 771.418,232.686 771.987,231.87 772.555,230.896 773.123,234.047 773.692,232.975 774.26,232.069 774.829,232.945 775.397,232.889 775.965,233.1 776.534,235.352 777.102,236.211 777.67,236.905 778.239,237.732 778.807,237.372 779.375,235.978 779.944,237.856 780.512,236.666 781.08,235.242 781.649,236.024 782.217,232.987 782.785,231.034 783.354,232.179 783.922,233.262 784.49,231.05 785.059,230.869 785.627,232.997 786.195,233.808 786.764,231.791 787.332,234.136 787.9,234.013 788.469,233.873 789.037,234.721 789.606,232.442 790.174,231.441 790.742,231.506 791.311,232.704 791.879,232.651 792.447,232.373 793.016,231.225 793.584,231.104 794.152,229.128 794.721,231.57 795.289,232.693 795.857,232.496 796.426,233.52 796.994,233.427 797.562,234.3 798.131,232.014 798.699,232.934 799.267,233.623 799.836,232.572 800.404,232.575 800.972,230.387 801.541,231.677 802.109,231.803 802.678,231.606 803.246,231.571 803.814,231.594 804.383,233.459 804.951,236.29 805.519,236.055 806.088,236.917 806.656,238.529 807.224,238.003 807.793,235.284 808.361,236.04 808.929,235.98 809.498,238.697 810.066,239.038 810.634,237.206 811.203,234.816 811.771,235.599 812.339,236.169 812.908,234.58 813.476,235.282 814.044,230.829 814.613,230.644 815.181,229.61 815.749,229.657 816.318,228.844 816.886,227.911 817.455,227.978 818.023,227.884 818.591,227.965 819.16,228.237 819.728,227.412 820.296,227.555 820.865,227.75 821.433,226.83 822.001,223.778 822.57,223.307 823.138,222.657 823.706,223.986 824.275,226.381 824.843,225.639 825.411,227.114 825.98,229.466 826.548,229.668 827.116,228.872 827.685,227.936 828.253,226.188 828.821,225.419 829.39,225.963 829.958,225.063 830.526,225.482 831.095,225.784 831.663,226.335 832.232,226.8 832.8,228.023 833.368,226.139 833.937,226.37 834.505,225.954 835.073,224.368 835.642,223.943 836.21,224.407 836.778,225.065 837.347,226.784 837.915,227.233 838.483,227.658 839.052,228.247 839.62,228.616 840.188,230.914 840.757,231.275 841.325,232.36 841.893,231.597 842.462,231.707 843.03,230.671 843.598,231.76 844.167,232.942 844.735,234.893 845.304,236.625 845.872,237.278 846.44,236.975 847.009,237.577 847.577,235.995 848.145,236.857 848.714,236.518 849.282,235.084 849.85,232.751 850.419,231.715 850.987,230.691 851.555,230.798 852.124,232.06 852.692,231.1 853.26,232.281 853.829,233.303 854.397,233.051 854.965,233.183 855.534,233.076 856.102,232.226 856.67,232.216 857.239,233.341 857.807,232.521 858.375,233.646 858.944,235.542 859.512,235.381 860.081,235.041 860.649,230.475 861.217,229.439 861.786,229.598 862.354,229.981 862.922,227.171 863.491,228.598 864.059,226.644 864.627,227.932 865.196,228.301 865.764,231.783 866.332,232.89 866.901,231.457 867.469,233.568 868.037,232.412 868.606,233.297 869.174,233.325 869.742,232.187 870.311,232.088 870.879,230.96 871.447,232.071 872.016,231.084 872.584,231.037 873.152,228.887 873.721,229.181 874.289,231.359 874.858,231.463 875.426,230.675 875.994,229.838 876.563,231.001 877.131,230.963 877.699,231.148 878.268,231.15 878.836,231.224 879.404,232.437 879.973,235.551 880.541,236.258 881.109,236.986 881.678,235.3 882.246,233.972 882.814,233.756 883.383,230.301 883.951,229.198 884.519,228.368 885.088,230.526 885.656,232.508 886.224,232.49 886.793,235.116 887.361,234.692 887.93,234.44 888.498,234.335 889.066,233.969 889.635,233.923 890.203,233.549 890.771,235.218 891.34,234.812 891.908,231.36 892.476,231.297 893.045,232.306 893.613,231.079 894.181,233.004 894.75,232.883 895.318,232.738 895.886,233.779 896.455,229.579 897.023,228.711 897.591,227.856 898.16,226.927 898.728,229.39 899.296,228.428 899.865,227.491 900.433,227.752 901.001,228.058 901.57,227.291 902.138,230.515 902.707,230.646 903.275,227.777 903.843,227.118 904.412,228.549 904.98,228.831 905.548,231.142 906.117,230.456 906.685,229.444 907.253,228.575 907.822,227.628 908.39,230.898 908.958,230.941 909.527,230.931 910.095,230.87 910.663,229.959 911.232,230.088 911.8,229.187 912.368,229.301 912.937,229.255 913.505,231.35 914.073,234.449 914.642,235.223 915.21,235.056 915.779,234.801 916.347,233.682 916.915,233.505 917.484,232.088 918.052,232.008 918.62,231.041 919.189,230.886 919.757,230.039 920.325,230.136 920.894,230.21 921.462,231.376 922.03,230.387 922.599,230.679 923.167,231.77 923.735,230.844 924.304,232.1 924.872,231.171 925.44,231.282 926.009,230.271 926.577,228.238 927.145,228.468 927.714,225.61 928.282,226.993 928.85,227.53 929.419,227.721 929.987,227.915 930.556,228.253 931.124,227.331 931.692,225.683 932.261,224.984 932.829,226.472 933.397,227.94 933.966,227.239 934.534,226.301 935.102,227.866 935.671,230.283 936.239,231.567 936.807,231.457 937.376,231.57 937.944,231.638 938.512,232.662 939.081,231.689 939.649,231.658 940.217,229.823 940.786,230.048 941.354,231.438 941.922,231.402 942.491,229.497 943.059,229.96 943.627,231.118 944.196,232.166 944.764,230.941 945.333,230.9 945.901,228.873 946.469,229.174 947.038,230.544 947.606,231.66 948.174,230.787 948.743,232.978 949.311,235.156 949.879,235.096 950.448,234.951 951.016,230.793 951.584,230.821 952.153,230.89 952.721,231.862 953.289,234.123 953.858,231.892 954.426,230.677 954.994,229.538 955.563,229.533 956.131,231.891 956.699,229.828 957.268,231 957.836,230.078 958.405,228.224 958.973,228.377 959.541,228.557 960.11,229.768 960.678,231.109 961.246,229.151 961.815,228.207 962.383,228.393 962.951,227.587 963.52,229.001 964.088,228.993 964.656,234.304 965.225,234.912 965.793,235.825 966.361,235.63 966.93,234.392 967.498,234.245 968.066,235.152 968.635,234.946 969.203,233.825 969.771,231.632 970.34,231.721 970.908,230.891 971.476,231.868 972.045,232.869 972.613,232.875 973.182,232.625 973.75,231.389 974.318,232.524 974.887,233.526 975.455,232.351 976.023,232.182 976.592,235.244 977.16,234.837 977.728,234.667 978.297,235.645 978.865,234.262 979.433,235.024 980.002,233.608 980.57,232.481 981.138,232.576 981.707,232.591 982.275,232.431 982.843,233.332 983.412,233.009 983.98,230.756 984.548,232.582 985.117,233.218 985.685,231.738 986.253,230.544 986.822,229.554 987.39,230.734 987.959,230.644 988.527,229.755 989.095,228.793 989.664,223.767 990.232,225.045 990.8,228.717 991.369,228.793 991.937,228.674 992.505,228.973 993.074,229.186 993.642,231.388 994.21,231.301 994.779,230.414 995.347,231.433 995.915,230.353 996.484,231.285 997.052,231.176 997.62,233.219 998.189,231.067 998.757,230.213 999.325,229.198 999.894,230.417 1000.46,231.44 1001.03,227.418 1001.6,227.854 1002.17,227.207 1002.74,230.441 1003.3,231.521 1003.87,231.629 1004.44,234.815 1005.01,233.624 1005.58,235.51 1006.15,234.055 1006.71,231.904 1007.28,230.523 1007.85,230.613 1008.42,230.746 1008.99,229.553 1009.56,230.768 1010.12,230.773 1010.69,231.744 1011.26,230.561 1011.83,228.713 1012.4,229.804 1012.97,228.997 1013.53,229.178 1014.1,230.281 1014.67,231.451 1015.24,230.433 1015.81,229.233 1016.38,229.653 1016.94,229.976 1017.51,226.919 1018.08,229.366 1018.65,229.35 1019.22,229.488 1019.79,230.569 1020.35,229.631 1020.92,230.884 1021.49,231.652 1022.06,232.687 1022.63,233.488 1023.2,232.213 1023.76,231.281 1024.33,234.37 1024.9,235.192 1025.47,232.968 1026.04,229.768 1026.61,228.845 1027.17,229.027 1027.74,230.136 1028.31,229.079 1028.88,229.143 1029.45,228.212 1030.02,228.342 1030.58,225.661 1031.15,227.151 1031.72,227.526 1032.29,227.82 1032.86,227 1033.43,228.724 1033.99,228.965 1034.56,228.092 1035.13,229.368 1035.7,229.682 1036.27,230.782 1036.84,229.824 1037.4,231.038 1037.97,230.12 1038.54,231.208 1039.11,232.219 1039.68,232.136 1040.25,233.236 1040.81,233.888 1041.38,233.589 1041.95,232.557 1042.52,232.215 1043.09,230.179 1043.66,229.58 1044.22,225.749 1044.79,227.182 1045.36,228.628 1045.93,229.776 1046.5,229.914 1047.07,231.168 1047.63,229.953 1048.2,231.126 1048.77,232.071 1049.34,233.203 1049.91,231.895 1050.48,230.85 1051.05,233.841 1051.61,231.48 1052.18,231.503 1052.75,231.388 1053.32,230.625 1053.89,231.821 1054.46,231.888 1055.02,230.946 1055.59,228.805 1056.16,228.879 1056.73,230.981 1057.3,229.881 1057.87,229.846 1058.43,229.891 1059,228.766 1059.57,231.031 1060.14,232.031 1060.71,231.052 1061.28,231.248 1061.84,232.466 1062.41,233.17 1062.98,232.068 1063.55,229.947 1064.12,230.146 1064.69,230.246 1065.25,230.288 1065.82,231.298 1066.39,231.524 1066.96,230.678 1067.53,230.935 1068.1,230.832 1068.66,232.962 1069.23,231.751 1069.8,231.546 1070.37,233.695 1070.94,233.538 1071.51,234.341 1072.07,232.933 1072.64,231.641 1073.21,232.965 1073.78,233.836 1074.35,234.791 1074.92,233.56 1075.48,234.337 1076.05,238.451 1076.62,237.725 1077.19,236.066 1077.76,234.509 1078.33,235.174 1078.89,234.78 1079.46,235.475 1080.03,235.006 1080.6,233.65 1081.17,233.139 1081.74,232.801 1082.3,232.566 1082.87,231.289 1083.44,231.235 1084.01,230.086 1084.58,230.115 1085.15,228.018 1085.71,229.264 1086.28,231.141 1086.85,232.063 1087.42,232.758 1087.99,234.617 1088.56,234.272 1089.12,234.898 1089.69,232.289 1090.26,233.116 1090.83,232.037 1091.4,231.916 1091.97,231.524 1092.53,231.321 1093.1,233.301 1093.67,230.959 1094.24,230.74 1094.81,230.674 1095.38,229.551 1095.94,230.526 1096.51,230.473 1097.08,229.216 1097.65,229.196 1098.22,230.31 1098.79,231.099 1099.35,229.888 1099.92,229.676 1100.49,230.631 1101.06,232.613 1101.63,231.556 1102.2,231.538 1102.76,230.58 1103.33,228.54 1103.9,228.565 1104.47,228.447 1105.04,228.687 1105.61,228.702 1106.17,228.695 1106.74,229.68 1107.31,231.65 1107.88,232.291 1108.45,231.988 1109.02,231.628 1109.58,232.431 1110.15,229.25 1110.72,230.332 1111.29,231.219 1111.86,231.116 1112.43,230.016 1112.99,228.918 1113.56,227.994 1114.13,228.045 1114.7,227.989 1115.27,228.075 1115.84,229.424 1116.4,230.441 1116.97,230.3 1117.54,228.198 1118.11,229.365 1118.68,229.321 1119.25,230.426 1119.81,231.365 1120.38,230.971 1120.95,229.896 1121.52,227.643 1122.09,227.777 1122.66,230.211 1123.23,231.217 1123.79,231.409 1124.36,231.259 1124.93,232.186 1125.5,230.892 1126.07,232.905 1126.64,233.862 1127.2,232.562 1127.77,231.443 1128.34,231.412 1128.91,230.214 1129.48,231.071 1130.05,228.917 1130.61,225.745 1131.18,223.957 1131.75,223.307 1132.32,224.943 1132.89,226.496 1133.46,226.949 1134.02,227.116 1134.59,230.601 1135.16,230.749 1135.73,230.66 1136.3,230.746 1136.87,229.767 1137.43,228.651 1138,229.795 1138.57,227.662 1139.14,230.683 1139.71,230.593 1140.28,230.532 1140.84,229.535 1141.41,231.462 1141.98,232.402 1142.55,231.343 1143.12,231.515 1143.69,230.422 1144.25,230.561 1144.82,231.74 1145.39,232.514 1145.96,230.315 1146.53,230.511 1147.1,230.459 1147.66,228.36 1148.23,227.334 1148.8,227.494 1149.37,223.85 1149.94,224.404 1150.51,224.796 1151.07,225.26 1151.64,221.673 1152.21,224.375 1152.78,226.111 1153.35,230.515 1153.92,230.417 1154.48,231.485 1155.05,232.457 1155.62,231.849 1156.19,232.962 1156.76,232.93 1157.33,231.922 1157.89,230.577 1158.46,231.673 1159.03,231.558 1159.6,232.655 1160.17,232.698 1160.74,234.73 1161.3,233.328 1161.87,232.113 1162.44,230.083 1163.01,229.153 1163.58,228.255 1164.15,229.33 1164.71,230.469 1165.28,229.403 1165.85,230.94 1166.42,232.119 1166.99,229.986 1167.56,229.037 1168.12,229.249 1168.69,231.382 1169.26,230.349 1169.83,232.453 1170.4,230.436 1170.97,230.305 1171.53,229.369 1172.1,229.382 1172.67,232.447 1173.24,232.308 1173.81,235.444 1174.38,236.218 1174.94,234.735 1175.51,234.506 1176.08,235.239 1176.65,235.97 1177.22,236.507 1177.79,236.837 1178.35,236.297 1178.92,235.04 1179.49,233.429 1180.06,231.873 1180.63,231.668 1181.2,231.616 1181.76,229.283 1182.33,229.458 1182.9,230.325 1183.47,228.259 1184.04,227.191 1184.61,226.425 1185.17,227.889 1185.74,230.098 1186.31,232.342 1186.88,232.088 1187.45,231.073 1188.02,229.913 1188.58,229.13 1189.15,229.193 1189.72,228.258 1190.29,227.466 1190.86,228.61 1191.43,230.066 1192,232.175 1192.56,229.921 1193.13,229.151 1193.7,230.525 1194.27,228.366 1194.84,227.54 1195.41,226.671 1195.97,226.934 1196.54,225.952 1197.11,226.259 1197.68,225.373 1198.25,226.757 1198.82,226.867 1199.38,226.288 1199.95,228.626 1200.52,228.868 1201.09,226.965 1201.66,228.296 1202.23,225.294 1202.79,225.769 1203.36,222.945 1203.93,222.392 1204.5,223.835 1205.07,225.278 1205.64,226.997 1206.2,228.512 1206.77,225.591 1207.34,223.223 1207.91,224.72 1208.48,225.241 1209.05,226.909 1209.61,226.142 1210.18,227.735 1210.75,230.227 1211.32,228.397 1211.89,227.52 1212.46,228.737 1213.02,230.102 1213.59,232.499 1214.16,230.421 1214.73,230.575 1215.3,229.669 1215.87,232.028 1216.43,229.827 1217,231.126 1217.57,232.303 1218.14,230.046 1218.71,232.229 1219.28,231.342 1219.84,232.535 1220.41,233.541 1220.98,235.399 1221.55,235.33 1222.12,236.102 1222.69,235.566 1223.25,236.28 1223.82,236.076 1224.39,236.644 1224.96,235.248 1225.53,237.074 1226.1,236.544 1226.66,235.345 1227.23,235.009 1227.8,236.673 1228.37,236.016 1228.94,235.702 1229.51,237.548 1230.07,238.065 1230.64,236.681 1231.21,234.185 1231.78,233.906 1232.35,233.839 1232.92,234.615 1233.48,234.433 1234.05,234.041 1234.62,233.8 1235.19,232.486 1235.76,231.329 1236.33,231.324 1236.89,233.256 1237.46,232.008 1238.03,232.683 1238.6,232.353 1239.17,233.398 1239.74,231.189 1240.3,232.229 1240.87,234.096 1241.44,233.903 1242.01,231.4 1242.58,231.204 1243.15,231.185 1243.71,233.219 1244.28,234.255 1244.85,234.911 1245.42,232.625 1245.99,230.404 1246.56,230.354 1247.12,232.426 1247.69,231.882 1248.26,232.906 1248.83,234.921 1249.4,234.55 1249.97,235.295 1250.53,232.906 1251.1,232.949 1251.67,232.829 1252.24,232.868 1252.81,232.674 1253.38,230.502 1253.94,235.446 1254.51,235.035 1255.08,232.54 1255.65,231.202 1256.22,231.01 1256.79,232.075 1257.35,234.825 1257.92,233.279 1258.49,234.052 1259.06,233.496 1259.63,233.359 1260.2,230.884 1260.76,231.779 1261.33,232.668 1261.9,231.481 1262.47,232.09 1263.04,230.565 1263.61,230.418 1264.18,229.069 1264.74,228.915 1265.31,229.001 1265.88,228.066 1266.45,228.068 1267.02,228.014 1267.59,229.2 1268.15,229.224 1268.72,231.074 1269.29,231.079 1269.86,230.143 1270.43,230.204 1271,228.863 1271.56,228.771 1272.13,228.558 1272.7,228.525 1273.27,227.447 1273.84,225.523 1274.41,225.836 1274.97,223.174 1275.54,223.64 1276.11,225.146 1276.68,224.393 1277.25,226.752 1277.82,228.099 1278.38,229.288 1278.95,228.295 1279.52,228.489 1280.09,228.603 1280.66,228.478 1281.23,227.77 1281.79,227.998 1282.36,228.389 1282.93,226.302 1283.5,226.686 1284.07,225.031 1284.64,225.548 1285.2,227.919 1285.77,229.45 1286.34,229.572 1286.91,231.622 1287.48,232.496 1288.05,233.317 1288.61,231.962 1289.18,229.867 1289.75,229.789 1290.32,229.976 1290.89,231.127 1291.46,230.172 1292.02,230.996 1292.59,229.047 1293.16,228.073 1293.73,226.085 1294.3,226.341 1294.87,225.333 1295.43,228.792 1296,229.088 1296.57,229.468 1297.14,231.593 1297.71,229.506 1298.28,229.732 1298.84,230.861 1299.41,231.645 1299.98,233.641 1300.55,232.454 1301.12,234.319 1301.69,232.84 1302.25,232.822 1302.82,228.536 1303.39,228.664 1303.96,228.689 1304.53,228.838 1305.1,229.114 1305.66,231.113 1306.23,230.99 1306.8,231.92 1307.37,231.895 1307.94,230.683 1308.51,228.715 1309.07,228.696 1309.64,227.685 1310.21,228.012 1310.78,229.165 1311.35,231.331 1311.92,231.54 1312.48,229.636 1313.05,231.874 1313.62,230.826 1314.19,231.975 1314.76,230.863 1315.33,231.651 1315.89,231.409 1316.46,233.478 1317.03,234.495 1317.6,234.495 1318.17,235.238 1318.74,235.989 1319.3,235.338 1319.87,240.014 1320.44,239.227 1321.01,238.564 1321.58,235.888 1322.15,233.099 1322.71,231.833 1323.28,233.636 1323.85,234.298 1324.42,232.908 1324.99,233.682 1325.56,230.107 1326.12,229.121 1326.69,230.048 1327.26,229.098 1327.83,229.123 1328.4,227.113 1328.97,225.99 1329.53,226.273 1330.1,225.414 1330.67,223.556 1331.24,222.93 1331.81,223.273 1332.38,226.894 1332.94,228.343 1333.51,228.192 1334.08,228.306 1334.65,228.304 1335.22,228.274 1335.79,226.394 1336.36,227.765 1336.92,226.664 1337.49,226.826 1338.06,225.883 1338.63,226.392 1339.2,226.546 1339.77,228.977 1340.33,229.073 1340.9,229.332 1341.47,230.492 1342.04,226.41 1342.61,226.932 1343.18,228.515 1343.74,229.546 1344.31,229.701 1344.88,229.718 1345.45,228.603 1346.02,229.806 1346.59,229.86 1347.15,231.857 1347.72,232.709 1348.29,232.601 1348.86,231.233 1349.43,233.277 1350,232.988 1350.56,233.898 1351.13,233.48 1351.7,233.292 1352.27,235.078 1352.84,234.483 1353.41,235.298 1353.97,234.065 1354.54,233.729 1355.11,233.461 1355.68,232.405 1356.25,232.243 1356.82,233.146 1357.38,232.063 1357.95,231.983 1358.52,230.857 1359.09,230.917 1359.66,229.777 1360.23,230.766 1360.79,231.617 1361.36,231.517 1361.93,228.18 1362.5,228.375 1363.07,227.453 1363.64,225.653 1364.2,226.868 1364.77,226.946 1365.34,227.469 1365.91,227.799 1366.48,229.878 1367.05,228.757 1367.61,228.969 1368.18,227.048 1368.75,229.42 1369.32,230.604 1369.89,230.45 1370.46,232.549 1371.02,233.588 1371.59,232.248 1372.16,231.094 1372.73,234.259 1373.3,233.01 1373.87,230.541 1374.43,230.559 1375,230.48 1375.57,231.669 1376.14,230.644 1376.71,227.623 1377.28,227.894 1377.84,226.99 1378.41,225.222 1378.98,224.424 1379.55,223.887 1380.12,222.359 1380.69,223.009 1381.25,223.675 1381.82,229.445 1382.39,230.479 1382.96,231.632 1383.53,231.648 1384.1,230.495 1384.66,232.778 1385.23,234.651 1385.8,233.091 1386.37,232.123 1386.94,236.343 1387.51,237.014 1388.07,236.523 1388.64,235.908 1389.21,235.559 1389.78,234.315 1390.35,231.944 1390.92,228.924 1391.48,227.981 1392.05,230.168 1392.62,231.51 1393.19,230.425 1393.76,230.449 1394.33,229.542 1394.89,229.783 1395.46,228.88 1396.03,230.019 1396.6,231.979 1397.17,231.899 1397.74,230.943 1398.3,230.973 1398.87,229.812 1399.44,231.979 1400.01,232.17 1400.58,232.045 1401.15,231.904 1401.71,230.601 1402.28,230.499 1402.85,231.592 1403.42,232.453 1403.99,232.582 1404.56,232.473 1405.13,234.318 1405.69,231.066 1406.26,229.774 1406.83,228.891 1407.4,229.075 1407.97,227.197 1408.54,227.493 1409.1,229.541 1409.67,226.73 1410.24,228.105 1410.81,228.514 1411.38,226.955 1411.95,226.259 1412.51,228.679 1413.08,230.919 1413.65,231.028 1414.22,230.077 1414.79,231.175 1415.36,230.31 1415.92,228.479 1416.49,227.541 1417.06,226.649 1417.63,225.21 1418.2,225.847 1418.77,225.133 1419.33,225.381 1419.9,223.758 1420.47,224.176 1421.04,223.691 1421.61,224.24 1422.18,224.755 1422.74,225.443 1423.31,227.981 1423.88,228.297 1424.45,227.565 1425.02,230.016 1425.59,229.104 1426.15,229.425 1426.72,230.763 1427.29,230.997 1427.86,235.159 1428.43,233.936 1429,233.836 1429.56,233.776 1430.13,233.851 1430.7,233.592 1431.27,230.566 1431.84,232.608 1432.41,232.6 1432.97,233.684 1433.54,233.782 1434.11,233.757 1434.68,232.659 1435.25,233.639 1435.82,233.41 1436.38,234.32 1436.95,235.3 1437.52,233.967 1438.09,234.975 1438.66,234.777 1439.23,234.287 1439.79,231.697 1440.36,233.803 1440.93,234.615 1441.5,234.508 1442.07,235.193 1442.64,235.893 1443.2,236.526 1443.77,234.93 1444.34,235.508 1444.91,235.129 1445.48,234.72 1446.05,234.579 1446.61,233.113 1447.18,233.926 1447.75,233.755 1448.32,233.373 1448.89,230.979 1449.46,231.683 1450.02,232.528 1450.59,233.493 1451.16,234.496 1451.73,232.054 1452.3,231.956 1452.87,230.758 1453.43,231.742 1454,231.818 1454.57,232.806 1455.14,232.644 1455.71,233.203 1456.28,230.825 1456.84,230.537 1457.41,229.299 1457.98,227.253 1458.55,228.389 1459.12,227.441 1459.69,228.879 1460.25,230.018 1460.82,229.107 1461.39,229.158 1461.96,226.986 1462.53,227.217 1463.1,227.278 1463.66,226.65 1464.23,225.063 1464.8,224.457 1465.37,224.981 1465.94,226.502 1466.51,224.652 1467.07,225.849 1467.64,225.211 1468.21,225.721 1468.78,227.061 1469.35,224.253 1469.92,225.627 1470.48,228.252 1471.05,227.62 1471.62,227.778 1472.19,229.073 1472.76,230.366 1473.33,232.351 1473.89,232.199 1474.46,230.955 1475.03,231.72 1475.6,230.449 1476.17,228.351 1476.74,228.774 1477.31,226.925 1477.87,228.346 1478.44,228.46 1479.01,228.666 1479.58,231.937 1480.15,232.087 1480.72,233.036 1481.28,233.011 1481.85,232.909 1482.42,231.774 1482.99,231.85 1483.56,231.984 1484.13,233.124 1484.69,234.022 1485.26,233.84 1485.83,233.533 1486.4,234.415 1486.97,234.313 1487.54,234.991 1488.1,234.801 1488.67,234.274 1489.24,233.973 1489.81,234.988 1490.38,233.327 1490.95,232.158 1491.51,233.003 1492.08,231.926 1492.65,232.849 1493.22,232.59 1493.79,232.249 1494.36,230.887 1494.92,230.768 1495.49,232.113 1496.06,234.217 1496.63,233.853 1497.2,235.621 1497.77,234.061 1498.33,233.644 1498.9,234.184 1499.47,232.922 1500.04,232.723 1500.61,232.421 1501.18,232.205 1501.74,231.879 1502.31,232.663 1502.88,230.474 1503.45,230.499 1504.02,228.421 1504.59,227.39 1505.15,228.545 1505.72,228.595 1506.29,227.296 1506.86,227.52 1507.43,228.124 1508,228.158 1508.56,227.903 1509.13,229.068 1509.7,228.083 1510.27,228.098 1510.84,229.249 1511.41,229.179 1511.97,230.311 1512.54,231.457 1513.11,230.434 1513.68,230.396 1514.25,229.319 1514.82,229.287 1515.38,229.376 1515.95,229.491 1516.52,227.392 1517.09,228.852 1517.66,231.187 1518.23,228.961 1518.79,229.258 1519.36,229.429 1519.93,227.278 1520.5,229.648 1521.07,229.933 1521.64,228.963 1522.2,229.106 1522.77,226.006 1523.34,227.469 1523.91,225.582 1524.48,226.866 1525.05,229.247 1525.61,227.162 1526.18,226.407 1526.75,223.649 1527.32,221.156 1527.89,224.012 1528.46,226.757 1529.02,227.242 1529.59,227.633 1530.16,230.083 1530.73,227.974 1531.3,230.24 1531.87,231.347 1532.43,231.411 1533,232.372 1533.57,230.171 1534.14,229.215 1534.71,228.414 1535.28,227.623 1535.84,227.799 1536.41,227.969 1536.98,226.259 1537.55,227.658 1538.12,228 1538.69,227.899 1539.25,224.154 1539.82,225.511 1540.39,230 1540.96,231.334 1541.53,231.252 1542.1,232.382 1542.66,231.295 1543.23,230.618 1543.8,230.889 1544.37,231.05 1544.94,233.197 1545.51,233.009 1546.08,236.955 1546.64,236.516 1547.21,237.323 1547.78,235.871 1548.35,236.605 1548.92,232.168 1549.49,231.115 1550.05,231.172 1550.62,232.965 1551.19,232.676 1551.76,232.612 1552.33,233.584 1552.9,235.249 1553.46,233.835 1554.03,234.643 1554.6,233.113 1555.17,232.914 1555.74,233.847 1556.31,234.624 1556.87,233.17 1557.44,234.152 1558.01,234.918 1558.58,233.593 1559.15,233.513 1559.72,233.114 1560.28,234.879 1560.85,234.701 1561.42,234.214 1561.99,233.588 1562.56,232.221 1563.13,232.066 1563.69,231.87 1564.26,232.582 1564.83,231.402 1565.4,231.362 1565.97,231.112 1566.54,231.083 1567.1,230.954 1567.67,229.593 1568.24,230.604 1568.81,229.477 1569.38,231.614 1569.95,231.412 1570.51,231.184 1571.08,231.042 1571.65,231.975 1572.22,234.714 1572.79,234.285 1573.36,231.946 1573.92,230.706 1574.49,229.7 1575.06,228.752 1575.63,229.95 1576.2,230.888 1576.77,230.943 1577.33,231.862 1577.9,230.789 1578.47,229.709 1579.04,229.676 1579.61,228.882 1580.18,228.994 1580.74,229.993 1581.31,231.022 1581.88,228.033 1582.45,227.144 1583.02,226.452 1583.59,226.511 1584.15,227.759 1584.72,230.817 1585.29,232.76 1585.86,235.651 1586.43,236.533 1587,235.013 1587.56,235.725 1588.13,236.515 1588.7,236.922 1589.27,235.341 1589.84,233.666 1590.41,232.182 1590.97,231.948 1591.54,232.799 1592.11,231.692 1592.68,232.614 1593.25,232.195 1593.82,231.795 1594.38,230.467 1594.95,230.32 1595.52,230.251 1596.09,232.205 1596.66,230.977 1597.23,232.024 1597.79,232.7 1598.36,233.563 1598.93,233.32 1599.5,233.135 1600.07,229.67 1600.64,227.652 1601.2,227.551 1601.77,227.662 1602.34,227.697 1602.91,227.979 1603.48,228.863 1604.05,227.812 1604.61,228.228 1605.18,229.278 1605.75,229.31 1606.32,228.219 1606.89,227.275 1607.46,227.409 1608.02,224.482 1608.59,223.602 1609.16,220.777 1609.73,221.62 1610.3,222.326 1610.87,222.885 1611.43,221.305 1612,219.895 1612.57,220.726 1613.14,220.516 1613.71,221.267 1614.28,223.008 1614.84,226.59 1615.41,223.584 1615.98,225.081 1616.55,224.633 1617.12,226.316 1617.69,228.839 1618.26,229.972 1618.82,231.017 1619.39,232.975 1619.96,232.737 1620.53,233.466 1621.1,234.508 1621.67,230.022 1622.23,230.307 1622.8,231.506 1623.37,230.258 1623.94,229.499 1624.51,229.594 1625.08,228.718 1625.64,226.923 1626.21,228.134 1626.78,229.398 1627.35,229.417 1627.92,230.872 1628.49,231.065 1629.05,230.039 1629.62,230.353 1630.19,230.489 1630.76,226.53 1631.33,228.122 1631.9,231.517 1632.46,230.482 1633.03,230.569 1633.6,231.737 1634.17,231.821 1634.74,233.123 1635.31,234.162 1635.87,233.944 1636.44,235.612 1637.01,237.212 1637.58,234.755 1638.15,234.859 1638.72,232.647 1639.28,231.779 1639.85,230.738 1640.42,229.795 1640.99,229.925 1641.56,229.835 1642.13,232.172 1642.69,231.95 1643.26,231.841 1643.83,232.664 1644.4,232.633 1644.97,234.626 1645.54,235.496 1646.1,235.333 1646.67,235.218 1647.24,233.94 1647.81,233.872 1648.38,233.483 1648.95,231.27 1649.51,230.207 1650.08,230.23 1650.65,232.218 1651.22,234.16 1651.79,235.873 1652.36,236.625 1652.92,235.114 1653.49,233.822 1654.06,233.52 1654.63,233.107 1655.2,232.984 1655.77,231.666 1656.33,233.466 1656.9,233.038 1657.47,231.587 1658.04,231.625 1658.61,232.558 1659.18,232.402 1659.74,229.93 1660.31,231.037 1660.88,229.892 1661.45,232.166 1662.02,231.88 1662.59,230.628 1663.15,232.568 1663.72,233.215 1664.29,231.84 1664.86,230.571 1665.43,229.575 1666,231.555 1666.56,231.22 1667.13,232.156 1667.7,232.109 1668.27,232.984 1668.84,234.02 1669.41,231.418 1669.97,232.344 1670.54,231.059 1671.11,228.045 1671.68,231.397 1672.25,231.221 1672.82,229.991 1673.38,230.816 1673.95,230.738 1674.52,230.512 1675.09,230.502 1675.66,230.322 1676.23,232.388 1676.79,231.204 1677.36,229.757 1677.93,229.021 1678.5,228.033 1679.07,228.331 1679.64,229.544 1680.2,229.419 1680.77,230.685 1681.34,230.568 1681.91,231.527 1682.48,231.364 1683.05,232.457 1683.61,233.357 1684.18,232.079 1684.75,230.873 1685.32,229.723 1685.89,231.626 1686.46,230.314 1687.02,229.365 1687.59,230.548 1688.16,230.495 1688.73,230.218 1689.3,231.269 1689.87,231.075 1690.44,231.837 1691,229.422 1691.57,226.391 1692.14,226.568 1692.71,225.897 1693.28,226.195 1693.85,227.373 1694.41,228.521 1694.98,227.528 1695.55,227.832 1696.12,228.828 1696.69,230.913 1697.26,230.932 1697.82,231.047 1698.39,230.131 1698.96,227.078 1699.53,226.192 1700.1,224.71 1700.67,224.98 1701.23,225.406 1701.8,226.844 1702.37,227.187 1702.94,226.457 1703.51,227.507 1704.08,228.865 1704.64,228.051 1705.21,227.397 1705.78,227.339 1706.35,228.306 1706.92,228.19 1707.49,225.088 1708.05,225.415 1708.62,224.602 1709.19,226.047 1709.76,229.37 1710.33,229.161 1710.9,231.725 1711.46,227.532 1712.03,225.484 1712.6,223.848 1713.17,224.37 1713.74,224.854 1714.31,224.153 1714.87,224.856 1715.44,225.412 1716.01,228.063 1716.58,226.964 1717.15,226.453 1717.72,227.772 1718.28,228.2 1718.85,229.685 1719.42,232.913 1719.99,232.841 1720.56,233.876 1721.13,232.895 1721.69,234.009 1722.26,234.765 1722.83,234.523 1723.4,236.198 1723.97,235.966 1724.54,235.597 1725.1,236.457 1725.67,235.056 1726.24,234.712 1726.81,231.41 1727.38,231.227 1727.95,231.077 1728.51,230.835 1729.08,230.763 1729.65,230.636 1730.22,232.68 1730.79,233.467 1731.36,233.471 1731.92,234.155 1732.49,233.925 1733.06,233.349 1733.63,232.17 1734.2,231.964 1734.77,230.672 1735.33,229.592 1735.9,229.543 1736.47,228.682 1737.04,230.048 1737.61,228.166 1738.18,227.339 1738.74,225.659 1739.31,227.208 1739.88,228.513 1740.45,231.743 1741.02,231.808 1741.59,233.829 1742.15,231.607 1742.72,232.316 1743.29,231.232 1743.86,233.188 1744.43,233.1 1745,233.024 1745.56,232.63 1746.13,233.453 1746.7,232.17 1747.27,231.901 1747.84,230.726 1748.41,230.689 1748.97,230.668 1749.54,229.576 1750.11,230.49 1750.68,229.507 1751.25,227.503 1751.82,228.682 1752.38,226.478 1752.95,224.75 1753.52,224.116 1754.09,221.517 1754.66,221.213 1755.23,224.019 1755.79,224.613 1756.36,227.039 1756.93,228.61 1757.5,227.986 1758.07,230.352 1758.64,232.372 1759.21,230.461 1759.77,229.606 1760.34,230.642 1760.91,231.629 1761.48,233.798 1762.05,233.895 1762.62,233.679 1763.18,232.338 1763.75,231.225 1764.32,232.243 1764.89,232.164 1765.46,231.119 1766.03,233.395 1766.59,238.275 1767.16,236.824 1767.73,236.411 1768.3,235.807 1768.87,235.512 1769.44,234.161 1770,233.747 1770.57,233.548 1771.14,233.456 1771.71,234.347 1772.28,233.185 1772.85,231.97 1773.41,228.798 1773.98,227.921 1774.55,228.165 1775.12,230.415 1775.69,232.296 1776.26,232.2 1776.82,234.362 1777.39,235.105 1777.96,234.829 1778.53,234.491 1779.1,233.141 1779.67,230.831 1780.23,229.788 1780.8,229.193 1781.37,229.107 1781.94,231.33 1782.51,227.466 1783.08,230.01 1783.64,230.945 1784.21,233.163 1784.78,236.188 1785.35,236.041 1785.92,235.536 1786.49,236.132 1787.05,234.858 1787.62,234.53 1788.19,234.073 1788.76,232.934 1789.33,232.791 1789.9,231.522 1790.46,230.472 1791.03,229.389 1791.6,228.296 1792.17,227.379 1792.74,225.565 1793.31,227.949 1793.87,229.02 1794.44,230.239 1795.01,231.245 1795.58,231.225 1796.15,231.167 1796.72,233.149 1797.28,235.069 1797.85,234.644 1798.42,235.271 1798.99,233.759 1799.56,233.255 1800.13,235.108 1800.69,233.888 1801.26,233.854 1801.83,232.723 1802.4,230.601 1802.97,230.527 1803.54,231.344 1804.1,229.003 1804.67,227.947 1805.24,228.115 1805.81,228.443 1806.38,227.504 1806.95,226.596 1807.51,227.772 1808.08,229.077 1808.65,228.102 1809.22,230.152 1809.79,232.007 1810.36,231.665 1810.92,229.346 1811.49,228.597 1812.06,229.791 1812.63,228.698 1813.2,226.904 1813.77,227.06 1814.33,226.149 1814.9,225.504 1815.47,223.913 1816.04,224.592 1816.61,224.928 1817.18,223.151 1817.74,224.463 1818.31,223.964 1818.88,223.396 1819.45,221.968 1820.02,220.536 1820.59,222.418 1821.15,224.942 1821.72,226.595 1822.29,226.867 1822.86,228.249 1823.43,229.737 1824,232.129 1824.56,232.188 1825.13,234.118 1825.7,233.896 1826.27,234.65 1826.84,234.229 1827.41,235.116 1827.97,235.093 1828.54,237.018 1829.11,238.83 1829.68,238.3 1830.25,236.758 1830.82,237.199 1831.39,235.823 1831.95,235.527 1832.52,233.209 1833.09,233.875 1833.66,232.556 1834.23,233.405 1834.8,235.075 1835.36,234.473 1835.93,233.03 1836.5,234.686 1837.07,234.248 1837.64,232.844 1838.21,233.602 1838.77,232.333 1839.34,231.201 1839.91,231.13 1840.48,232.076 1841.05,233.052 1841.62,232.913 1842.18,231.642 1842.75,232.312 1843.32,230.895 1843.89,227.748 1844.46,226.806 1845.03,226.07 1845.59,227.391 1846.16,226.493 1846.73,225.701 1847.3,227.053 1847.87,226.41 1848.44,229.862 1849,229.728 1849.57,229.768 1850.14,231.185 1850.71,230.313 1851.28,230.261 1851.85,228.343 1852.41,229.371 1852.98,230.294 1853.55,231.281 1854.12,233.447 1854.69,233.003 1855.26,232.736 1855.82,230.532 1856.39,230.374 1856.96,230.715 1857.53,232.822 1858.1,233.576 1858.67,233.275 1859.23,230.896 1859.8,230.664 1860.37,230.677 1860.94,230.738 1861.51,230.518 1862.08,230.494 1862.64,231.389 1863.21,231.123 1863.78,231.102 1864.35,230.204 1864.92,229.115 1865.49,229.026 1866.05,228.948 1866.62,226.97 1867.19,227.403 1867.76,229.431 1868.33,230.508 1868.9,230.61 1869.46,230.466 1870.03,227.395 1870.6,227.792 1871.17,229.96 1871.74,230.051 1872.31,229.071 1872.87,231.247 1873.44,231.276 1874.01,231.262 1874.58,230.048 1875.15,230.059 1875.72,231.104 1876.28,229.797 1876.85,229.006 1877.42,227.828 1877.99,225.982 1878.56,228.294 1879.13,228.476 1879.69,230.835 1880.26,230.972 1880.83,231.948 1881.4,230.729 1881.97,231.738 1882.54,230.755 1883.1,229.879 1883.67,230.056 1884.24,227.929 1884.81,228.053 1885.38,227.168 1885.95,227.456 1886.51,226.854 1887.08,225.96 1887.65,227.338 1888.22,227.843 1888.79,226.967 1889.36,228.409 1889.92,229.462 1890.49,231.693 1891.06,232.813 1891.63,231.668 1892.2,232.585 1892.77,232.509 1893.33,231.468 1893.9,232.588 1894.47,230.632 1895.04,230.846 1895.61,230.959 1896.18,231.176 1896.74,229.891 1897.31,229.09 1897.88,227.455 1898.45,228.6 1899.02,229.015 1899.59,229.155 1900.16,230.289 1900.72,232.451 1901.29,234.36 1901.86,235.141 1902.43,234.83 1903,234.314 1903.57,234.092 1904.13,233.9 1904.7,234.831 1905.27,234.452 1905.84,234.035 1906.41,232.879 1906.98,231.607 1907.54,230.742 1908.11,231.412 1908.68,230.384 1909.25,230.503 1909.82,232.63 1910.39,231.288 1910.95,229.174 1911.52,228.207 1912.09,226.283 1912.66,227.832 1913.23,229.791 1913.8,231.712 1914.36,231.625 1914.93,231.603 1915.5,231.371 1916.07,232.326 1916.64,231.199 1917.21,231.171 1917.77,231.138 1918.34,230.973 1918.91,231.882 1919.48,233.023 1920.05,232.098 1920.62,231.02 1921.18,231.094 1921.75,231.099 1922.32,231.106 1922.89,231.931 1923.46,231.815 1924.03,228.585 1924.59,227.572 1925.16,227.813 1925.73,227.192 1926.3,229.373 1926.87,231.441 1927.44,231.386 1928,232.39 1928.57,235.399 1929.14,235.268 1929.71,235.983 1930.28,233.383 1930.85,233.066 1931.41,232.888 1931.98,233.654 1932.55,232.367 1933.12,231.072 1933.69,233.117 1934.26,232.808 1934.82,232.31 1935.39,231.22 1935.96,229.101 1936.53,228.143 1937.1,227.226 1937.67,228.412 1938.23,227.484 1938.8,227.649 1939.37,225.74 1939.94,230.976 1940.51,233.938 1941.08,232.903 1941.64,232.602 1942.21,233.396 1942.78,234.389 1943.35,231.984 1943.92,229.945 1944.49,231.104 1945.05,229.917 1945.62,228.82 1946.19,226.858 1946.76,228.167 1947.33,230.243 1947.9,229.303 1948.46,228.482 1949.03,229.626 1949.6,226.605 1950.17,223.715 1950.74,224.11 1951.31,226.446 1951.87,229.908 1952.44,229.923 1953.01,232.033 1953.58,233.621 1954.15,231.411 1954.72,230.335 1955.28,231.252 1955.85,231.116 1956.42,232.015 1956.99,232.799 1957.56,231.397 1958.13,231.433 1958.69,231.44 1959.26,231.24 1959.83,234.968 1960.4,232.649 1960.97,228.192 1961.54,228.368 1962.1,228.245 1962.67,228.364 1963.24,228.481 1963.81,227.661 1964.38,230.006 1964.95,232.048 1965.51,230.852 1966.08,230.811 1966.65,229.926 1967.22,228.984 1967.79,226.982 1968.36,228.247 1968.92,228.626 1969.49,228.82 1970.06,227.963 1970.63,229.996 1971.2,231.037 1971.77,230.723 1972.34,232.686 1972.9,232.567 1973.47,232.359 1974.04,232.1 1974.61,231.771 1975.18,232.563 1975.75,229.426 1976.31,229.463 1976.88,230.503 1977.45,232.272 1978.02,232.216 1978.59,231.826 1979.16,230.757 1979.72,232.658 1980.29,232.463 1980.86,233.429 1981.43,233.113 1982,232.804 1982.57,232.744 1983.13,230.539 1983.7,229.375 1984.27,229.543 1984.84,229.593 1985.41,230.54 1985.98,230.499 1986.54,230.335 1987.11,232.541 1987.68,232.36 1988.25,233.177 1988.82,233.805 1989.39,231.431 1989.95,230.359 1990.52,230.282 1991.09,228.001 1991.66,225.982 1992.23,224.304 1992.8,224.953 1993.36,223.333 1993.93,223.844 1994.5,224.285 1995.07,222.643 1995.64,223.159 1996.21,223.684 1996.77,225.267 1997.34,225.654 1997.91,226.004 1998.48,230.392 1999.05,230.318 1999.62,230.431 2000.18,229.409 2000.75,229.567 2001.32,230.67 2001.89,231.556 2002.46,232.658 2003.03,233.669 2003.59,232.482 2004.16,233.501 2004.73,233.248 2005.3,234.273 2005.87,231.885 2006.44,230.55 2007,230.732 2007.57,229.85 2008.14,231.18 2008.71,228.067 2009.28,230.281 2009.85,229.39 2010.41,229.39 2010.98,229.582 2011.55,230.657 2012.12,231.739 2012.69,230.851 2013.26,230.984 2013.82,232.301 2014.39,233.247 2014.96,234.017 2015.53,231.531 2016.1,229.339 2016.67,231.475 2017.23,232.426 2017.8,232.304 2018.37,232.231 2018.94,230.157 2019.51,230.211 2020.08,230.094 2020.64,232.155 2021.21,229.846 2021.78,229.841 2022.35,231.797 2022.92,230.663 2023.49,230.69 2024.05,230.758 2024.62,229.778 2025.19,230.778 2025.76,230.67 2026.33,232.848 2026.9,231.437 2027.46,231.103 2028.03,231.008 2028.6,229.876 2029.17,231.122 2029.74,234.164 2030.31,235.103 2030.87,234.087 2031.44,235.151 2032.01,235.844 2032.58,234.573 2033.15,236.517 2033.72,236.009 2034.28,236.624 2034.85,234.215 2035.42,232.928 2035.99,231.598 2036.56,231.601 2037.13,230.59 2037.69,231.402 2038.26,230.177 2038.83,228.26 2039.4,228.659 2039.97,226.948 2040.54,227.248 2041.11,226.31 2041.67,226.44 2042.24,227.7 2042.81,228.828 2043.38,228.034 2043.95,228.262 2044.52,229.354 2045.08,229.276 2045.65,229.428 2046.22,228.493 2046.79,226.503 2047.36,226.81 2047.93,225.211 2048.49,222.657 2049.06,222.276 2049.63,222.864 2050.2,223.571 2050.77,223.017 2051.34,225.482 2051.9,223.869 2052.47,225.126 2053.04,225.448 2053.61,224.908 2054.18,226.445 2054.75,223.718 2055.31,224.186 2055.88,225.668 2056.45,225.043 2057.02,225.311 2057.59,225.782 2058.16,224.346 2058.72,226.096 2059.29,226.491 2059.86,227.971 2060.43,229.372 2061,232.809 2061.57,233.93 2062.13,232.865 2062.7,231.904 2063.27,234.172 2063.84,233.96 2064.41,235.14 2064.98,236.088 2065.54,235.693 2066.11,236.288 2066.68,236.113 2067.25,234.864 2067.82,233.684 2068.39,233.653 2068.95,234.811 2069.52,235.643 2070.09,235.654 2070.66,235.328 2071.23,236.135 2071.8,235.692 2072.36,236.296 2072.93,235.922 2073.5,236.5 2074.07,236.933 2074.64,237.659 2075.21,235.271 2075.77,232.868 2076.34,233.914 2076.91,232.578 2077.48,232.519 2078.05,231.446 2078.62,233.332 2079.18,232.971 2079.75,233.664 2080.32,232.358 2080.89,232.331 2081.46,233.207 2082.03,232.991 2082.59,230.71 2083.16,232.66 2083.73,233.528 2084.3,234.294 2084.87,234.949 2085.44,235.843 2086,234.343 2086.57,234.067 2087.14,233.787 2087.71,232.309 2088.28,234.107 2088.85,234.006 2089.41,232.693 2089.98,233.568 2090.55,234.375 2091.12,234.036 2091.69,232.49 2092.26,232.099 2092.82,231.004 2093.39,235.101 2093.96,230.597 2094.53,230.56 2095.1,230.422 2095.67,231.537 2096.23,230.301 2096.8,230.114 2097.37,231.089 2097.94,232.048 2098.51,231 2099.08,231.887 2099.64,231.661 2100.21,230.449 2100.78,231.621 2101.35,232.654 2101.92,232.183 2102.49,233.132 2103.05,232.543 2103.62,228.251 2104.19,229.43 2104.76,230.422 2105.33,230.335 2105.9,229.122 2106.46,231.139 2107.03,231.122 2107.6,227.947 2108.17,225.801 2108.74,226.37 2109.31,225.68 2109.87,224.806 2110.44,225.202 2111.01,226.73 2111.58,224.923 2112.15,225.261 2112.72,224.678 2113.29,225.917 2113.85,225.104 2114.42,225.292 2114.99,228.582 2115.56,230.709 2116.13,229.589 2116.7,230.531 2117.26,231.447 2117.83,231.389 2118.4,230.275 2118.97,230.376 2119.54,226.284 2120.11,226.728 2120.67,227.11 2121.24,227.36 2121.81,229.538 2122.38,230.569 2122.95,230.506 2123.52,230.38 2124.08,230.187 2124.65,229.343 2125.22,229.524 2125.79,229.441 2126.36,228.552 2126.93,228.701 2127.49,228.84 2128.06,227.916 2128.63,228.096 2129.2,228.215 2129.77,224.455 2130.34,226.123 2130.9,225.449 2131.47,224.927 2132.04,226.538 2132.61,225.841 2133.18,225.128 2133.75,227.369 2134.31,226.805 2134.88,224.97 2135.45,224.576 2136.02,225.009 2136.59,225.647 2137.16,225.977 2137.72,226.416 2138.29,223.74 2138.86,224.456 2139.43,226.095 2140,228.3 2140.57,228.61 2141.13,230.794 2141.7,229.872 2142.27,231.186 2142.84,229.111 2143.41,229.079 2143.98,226.072 2144.54,227.448 2145.11,229.098 2145.68,227.306 2146.25,226.71 2146.82,227.055 2147.39,227.423 2147.95,228.806 2148.52,229.836 2149.09,230.103 2149.66,229.198 2150.23,230.538 2150.8,231.583 2151.36,232.865 2151.93,234.862 2152.5,234.731 2153.07,233.461 2153.64,234.321 2154.21,233.091 2154.77,233.309 2155.34,236.33 2155.91,237.028 2156.48,237.664 2157.05,237.504 2157.62,236.204 2158.18,236.842 2158.75,236.662 2159.32,237.35 2159.89,240.061 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip330)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip330)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip330)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip330)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.026 ± 0.022\n  with uncertainty of ± 0.001958325530306081\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01278 ± (0.00248941, 0.00248637) (MC)\n  95% confidence interval: [-4.01776, -4.00809] (MC)\n  linear error propagation: -4.01276 ± 0.00247408\n  |δ_y| = |0.00107556| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.012776137976389, val_l = 0.00497906759582456, val_u = 0.004690169579150805)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip360\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip360)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip361\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip360)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip362\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1150.46 2211.02,1150.46 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,995.051 2211.02,995.051 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,839.645 2211.02,839.645 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,684.239 2211.02,684.239 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,528.833 2211.02,528.833 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,373.427 2211.02,373.427 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,218.021 2211.02,218.021 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1150.46 365.751,1150.46 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,995.051 365.751,995.051 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,839.645 365.751,839.645 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,684.239 365.751,684.239 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,528.833 365.751,528.833 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,373.427 365.751,373.427 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,218.021 365.751,218.021 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M298.909 1136.26 Q295.298 1136.26 293.469 1139.82 Q291.664 1143.36 291.664 1150.49 Q291.664 1157.6 293.469 1161.16 Q295.298 1164.71 298.909 1164.71 Q302.543 1164.71 304.349 1161.16 Q306.177 1157.6 306.177 1150.49 Q306.177 1143.36 304.349 1139.82 Q302.543 1136.26 298.909 1136.26 M298.909 1132.55 Q304.719 1132.55 307.775 1137.16 Q310.853 1141.74 310.853 1150.49 Q310.853 1159.22 307.775 1163.83 Q304.719 1168.41 298.909 1168.41 Q293.099 1168.41 290.02 1163.83 Q286.964 1159.22 286.964 1150.49 Q286.964 1141.74 290.02 1137.16 Q293.099 1132.55 298.909 1132.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M259.557 1008.4 L267.196 1008.4 L267.196 982.031 L258.886 983.697 L258.886 979.438 L267.15 977.771 L271.826 977.771 L271.826 1008.4 L279.465 1008.4 L279.465 1012.33 L259.557 1012.33 L259.557 1008.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M298.909 980.85 Q295.298 980.85 293.469 984.415 Q291.664 987.957 291.664 995.086 Q291.664 1002.19 293.469 1005.76 Q295.298 1009.3 298.909 1009.3 Q302.543 1009.3 304.349 1005.76 Q306.177 1002.19 306.177 995.086 Q306.177 987.957 304.349 984.415 Q302.543 980.85 298.909 980.85 M298.909 977.146 Q304.719 977.146 307.775 981.753 Q310.853 986.336 310.853 995.086 Q310.853 1003.81 307.775 1008.42 Q304.719 1013 298.909 1013 Q293.099 1013 290.02 1008.42 Q286.964 1003.81 286.964 995.086 Q286.964 986.336 290.02 981.753 Q293.099 977.146 298.909 977.146 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M262.775 852.99 L279.094 852.99 L279.094 856.925 L257.15 856.925 L257.15 852.99 Q259.812 850.236 264.395 845.606 Q269.002 840.953 270.182 839.611 Q272.428 837.087 273.307 835.351 Q274.21 833.592 274.21 831.902 Q274.21 829.148 272.266 827.412 Q270.344 825.675 267.242 825.675 Q265.043 825.675 262.59 826.439 Q260.159 827.203 257.381 828.754 L257.381 824.032 Q260.205 822.898 262.659 822.319 Q265.113 821.74 267.15 821.74 Q272.52 821.74 275.715 824.426 Q278.909 827.111 278.909 831.601 Q278.909 833.731 278.099 835.652 Q277.312 837.55 275.205 840.143 Q274.627 840.814 271.525 844.032 Q268.423 847.226 262.775 852.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M298.909 825.444 Q295.298 825.444 293.469 829.009 Q291.664 832.55 291.664 839.68 Q291.664 846.786 293.469 850.351 Q295.298 853.893 298.909 853.893 Q302.543 853.893 304.349 850.351 Q306.177 846.786 306.177 839.68 Q306.177 832.55 304.349 829.009 Q302.543 825.444 298.909 825.444 M298.909 821.74 Q304.719 821.74 307.775 826.347 Q310.853 830.93 310.853 839.68 Q310.853 848.407 307.775 853.013 Q304.719 857.597 298.909 857.597 Q293.099 857.597 290.02 853.013 Q286.964 848.407 286.964 839.68 Q286.964 830.93 290.02 826.347 Q293.099 821.74 298.909 821.74 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M272.914 682.885 Q276.27 683.603 278.145 685.871 Q280.043 688.14 280.043 691.473 Q280.043 696.589 276.525 699.39 Q273.006 702.19 266.525 702.19 Q264.349 702.19 262.034 701.751 Q259.742 701.334 257.289 700.478 L257.289 695.964 Q259.233 697.098 261.548 697.677 Q263.863 698.255 266.386 698.255 Q270.784 698.255 273.076 696.519 Q275.39 694.783 275.39 691.473 Q275.39 688.417 273.238 686.704 Q271.108 684.968 267.289 684.968 L263.261 684.968 L263.261 681.126 L267.474 681.126 Q270.923 681.126 272.752 679.76 Q274.58 678.371 274.58 675.779 Q274.58 673.117 272.682 671.705 Q270.807 670.269 267.289 670.269 Q265.367 670.269 263.168 670.686 Q260.969 671.103 258.33 671.982 L258.33 667.816 Q260.992 667.075 263.307 666.705 Q265.645 666.334 267.705 666.334 Q273.029 666.334 276.131 668.765 Q279.233 671.172 279.233 675.292 Q279.233 678.163 277.59 680.154 Q275.946 682.121 272.914 682.885 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M298.909 670.038 Q295.298 670.038 293.469 673.603 Q291.664 677.144 291.664 684.274 Q291.664 691.38 293.469 694.945 Q295.298 698.487 298.909 698.487 Q302.543 698.487 304.349 694.945 Q306.177 691.38 306.177 684.274 Q306.177 677.144 304.349 673.603 Q302.543 670.038 298.909 670.038 M298.909 666.334 Q304.719 666.334 307.775 670.941 Q310.853 675.524 310.853 684.274 Q310.853 693.001 307.775 697.607 Q304.719 702.19 298.909 702.19 Q293.099 702.19 290.02 697.607 Q286.964 693.001 286.964 684.274 Q286.964 675.524 290.02 670.941 Q293.099 666.334 298.909 666.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M271.594 515.627 L259.789 534.076 L271.594 534.076 L271.594 515.627 M270.367 511.553 L276.247 511.553 L276.247 534.076 L281.177 534.076 L281.177 537.965 L276.247 537.965 L276.247 546.113 L271.594 546.113 L271.594 537.965 L255.992 537.965 L255.992 533.451 L270.367 511.553 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M298.909 514.632 Q295.298 514.632 293.469 518.197 Q291.664 521.738 291.664 528.868 Q291.664 535.974 293.469 539.539 Q295.298 543.081 298.909 543.081 Q302.543 543.081 304.349 539.539 Q306.177 535.974 306.177 528.868 Q306.177 521.738 304.349 518.197 Q302.543 514.632 298.909 514.632 M298.909 510.928 Q304.719 510.928 307.775 515.535 Q310.853 520.118 310.853 528.868 Q310.853 537.595 307.775 542.201 Q304.719 546.784 298.909 546.784 Q293.099 546.784 290.02 542.201 Q286.964 537.595 286.964 528.868 Q286.964 520.118 290.02 515.535 Q293.099 510.928 298.909 510.928 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M258.793 356.147 L277.15 356.147 L277.15 360.082 L263.076 360.082 L263.076 368.554 Q264.094 368.207 265.113 368.045 Q266.131 367.86 267.15 367.86 Q272.937 367.86 276.316 371.031 Q279.696 374.202 279.696 379.619 Q279.696 385.198 276.224 388.3 Q272.752 391.378 266.432 391.378 Q264.256 391.378 261.988 391.008 Q259.742 390.638 257.335 389.897 L257.335 385.198 Q259.418 386.332 261.641 386.888 Q263.863 387.443 266.34 387.443 Q270.344 387.443 272.682 385.337 Q275.02 383.23 275.02 379.619 Q275.02 376.008 272.682 373.901 Q270.344 371.795 266.34 371.795 Q264.465 371.795 262.59 372.212 Q260.738 372.628 258.793 373.508 L258.793 356.147 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M298.909 359.226 Q295.298 359.226 293.469 362.79 Q291.664 366.332 291.664 373.462 Q291.664 380.568 293.469 384.133 Q295.298 387.675 298.909 387.675 Q302.543 387.675 304.349 384.133 Q306.177 380.568 306.177 373.462 Q306.177 366.332 304.349 362.79 Q302.543 359.226 298.909 359.226 M298.909 355.522 Q304.719 355.522 307.775 360.128 Q310.853 364.712 310.853 373.462 Q310.853 382.188 307.775 386.795 Q304.719 391.378 298.909 391.378 Q293.099 391.378 290.02 386.795 Q286.964 382.188 286.964 373.462 Q286.964 364.712 290.02 360.128 Q293.099 355.522 298.909 355.522 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M269.326 216.157 Q266.178 216.157 264.326 218.31 Q262.497 220.463 262.497 224.213 Q262.497 227.94 264.326 230.116 Q266.178 232.268 269.326 232.268 Q272.474 232.268 274.303 230.116 Q276.154 227.94 276.154 224.213 Q276.154 220.463 274.303 218.31 Q272.474 216.157 269.326 216.157 M278.608 201.505 L278.608 205.764 Q276.849 204.931 275.043 204.491 Q273.261 204.051 271.502 204.051 Q266.872 204.051 264.418 207.176 Q261.988 210.301 261.641 216.62 Q263.006 214.606 265.066 213.542 Q267.127 212.454 269.603 212.454 Q274.812 212.454 277.821 215.625 Q280.853 218.773 280.853 224.213 Q280.853 229.537 277.705 232.755 Q274.557 235.972 269.326 235.972 Q263.33 235.972 260.159 231.389 Q256.988 226.782 256.988 218.056 Q256.988 209.861 260.877 205 Q264.766 200.116 271.316 200.116 Q273.076 200.116 274.858 200.463 Q276.664 200.81 278.608 201.505 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M298.909 203.82 Q295.298 203.82 293.469 207.384 Q291.664 210.926 291.664 218.056 Q291.664 225.162 293.469 228.727 Q295.298 232.268 298.909 232.268 Q302.543 232.268 304.349 228.727 Q306.177 225.162 306.177 218.056 Q306.177 210.926 304.349 207.384 Q302.543 203.82 298.909 203.82 M298.909 200.116 Q304.719 200.116 307.775 204.722 Q310.853 209.306 310.853 218.056 Q310.853 226.782 307.775 231.389 Q304.719 235.972 298.909 235.972 Q293.099 235.972 290.02 231.389 Q286.964 226.782 286.964 218.056 Q286.964 209.306 290.02 204.722 Q293.099 200.116 298.909 200.116 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip362)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1035.95 400.199,930.752 400.786,834.23 401.372,745.799 401.958,778.268 402.545,698.953 403.131,626.542 403.718,561.923 404.304,501.747 404.891,447.085 405.477,397.723 406.063,510.066 406.65,462.966 407.236,421.587 407.823,383.553 408.409,349.645 408.995,319.595 409.582,293.15 410.168,270.074 410.755,250.143 411.341,234.212 411.927,219.895 412.514,287.756 413.1,274.028 413.687,262.719 414.273,253.575 414.86,245.994 415.446,240.951 416.032,292.23 416.619,289.405 417.205,312.039 417.792,311.81 418.378,312.72 418.964,315.411 419.551,372.549 420.137,377.568 420.724,383.24 421.31,390.074 421.896,396.901 422.483,405.69 423.069,426.884 423.656,434.68 424.242,454.346 424.829,474.384 425.415,503.979 426.001,532.492 426.588,539.9 427.174,565.153 427.761,588.756 428.347,604.464 428.933,612.12 429.52,620.715 430.106,629.599 430.693,638.41 431.279,653.85 431.865,686.495 432.452,705.406 433.038,723.233 433.625,730.605 434.211,742.892 434.798,755.538 435.384,763.538 435.97,775.601 436.557,787.615 437.143,808.423 437.73,819.589 438.316,826.621 438.902,837.943 439.489,844.887 440.075,851.867 440.662,866.052 441.248,876.373 441.835,882.756 442.421,896.006 443.007,905.895 443.594,915.17 444.18,921.406 444.767,933.653 445.353,939.687 445.939,948.292 446.526,959.622 447.112,967.702 447.699,977.947 448.285,983.176 448.871,993.493 449.458,1000.7 450.044,1005.59 450.631,1010.62 451.217,1012.96 451.804,1026.96 452.39,1040.37 452.976,1046.8 453.563,1059.44 454.149,1063.29 454.736,1071.32 455.322,1079.11 455.908,1082.62 456.495,1090.17 457.081,1097.38 457.668,1101.97 458.254,1110.73 458.84,1114.95 459.427,1119.56 460.013,1125.61 460.6,1131.48 461.186,1135.01 461.773,1140.66 462.359,1148.04 462.945,1149.39 463.532,1152.57 464.118,1154.15 464.705,1157.3 465.291,1161.87 465.877,1164.61 466.464,1167.49 467.05,1170.2 467.637,1171.17 468.223,1175.37 468.809,1181.04 469.396,1180.27 469.982,1182.37 470.569,1184.79 471.155,1185.45 471.742,1187.92 472.328,1193.17 472.914,1196.96 473.501,1197.45 474.087,1205.65 474.674,1204.32 475.26,1206.21 475.846,1204.91 476.433,1205.25 477.019,1210.19 477.606,1210.24 478.192,1211.95 478.778,1215.27 479.365,1218.32 479.951,1216.7 480.538,1219.74 481.124,1218.52 481.711,1220.09 482.297,1220.07 482.883,1221.64 483.47,1223.04 484.056,1222.99 484.643,1224.44 485.229,1228.4 485.815,1232.38 486.402,1232.06 486.988,1234.47 487.575,1234.02 488.161,1232.19 488.748,1234.54 489.334,1238.43 489.92,1241.9 490.507,1241.25 491.093,1241.96 491.68,1238.43 492.266,1240.63 492.852,1241.48 493.439,1239.57 494.025,1241.4 494.612,1242.06 495.198,1241.38 495.784,1242.03 496.371,1241.65 496.957,1241.22 497.544,1242.02 498.13,1245.23 498.717,1245.98 499.303,1245.37 499.889,1250 500.476,1250.53 501.062,1249.53 501.649,1248.74 502.235,1247.61 502.821,1246.8 503.408,1244.73 503.994,1245.68 504.581,1246.31 505.167,1247.07 505.753,1246.01 506.34,1247.91 506.926,1249.63 507.513,1249.85 508.099,1249.98 508.686,1250.07 509.272,1249 509.858,1249.36 510.445,1248.4 511.031,1247.29 511.618,1249.03 512.204,1244.06 512.79,1242.22 513.377,1241.7 513.963,1243.95 514.55,1240.43 515.136,1242.6 515.722,1242.12 516.309,1241.37 516.895,1241.1 517.482,1243.14 518.068,1245.18 518.655,1245.7 519.241,1246.13 519.827,1246.74 520.414,1244.77 521,1243.85 521.587,1244.67 522.173,1239.98 522.759,1238.35 523.346,1239.44 523.932,1240.35 524.519,1238.62 525.105,1238.48 525.691,1242.11 526.278,1242.91 526.864,1243.64 527.451,1246.72 528.037,1247.4 528.624,1247.81 529.21,1244.47 529.796,1246.1 530.383,1244.25 530.969,1244.99 531.556,1244.32 532.142,1244.93 532.728,1244.46 533.315,1243.66 533.901,1242.88 534.488,1242.23 535.074,1241.48 535.661,1242.57 536.247,1239.35 536.833,1240.23 537.42,1238.49 538.006,1239.41 538.593,1236.25 539.179,1234.48 539.765,1235.68 540.352,1240.39 540.938,1241.32 541.525,1240.6 542.111,1241.7 542.697,1241.3 543.284,1243.08 543.87,1243.58 544.457,1244.41 545.043,1247.54 545.63,1246.65 546.216,1245.79 546.802,1246.38 547.389,1244.29 547.975,1243.7 548.562,1242.66 549.148,1240.74 549.734,1236.34 550.321,1234.82 550.907,1234.62 551.494,1232.92 552.08,1236.6 552.666,1236.62 553.253,1235.98 553.839,1235.6 554.426,1233.93 555.012,1235.11 555.599,1237.59 556.185,1237.31 556.771,1236.73 557.358,1236.46 557.944,1235.92 558.531,1235.35 559.117,1238.65 559.703,1238.21 560.29,1237.72 560.876,1237.3 561.463,1235.7 562.049,1235.38 562.635,1238.91 563.222,1239.62 563.808,1240.46 564.395,1242.3 564.981,1240.28 565.568,1240.9 566.154,1237.67 566.74,1234.7 567.327,1233.02 567.913,1233.01 568.5,1232.63 569.086,1231.18 569.672,1232.13 570.259,1233.2 570.845,1233.06 571.432,1234.01 572.018,1233.67 572.605,1233.53 573.191,1234.73 573.777,1234.47 574.364,1234.05 574.95,1232.47 575.537,1229.44 576.123,1230.69 576.709,1229.24 577.296,1231.73 577.882,1232.59 578.469,1232.24 579.055,1234.27 579.641,1233.97 580.228,1233.45 580.814,1232.87 581.401,1231.45 581.987,1231.16 582.574,1231.02 583.16,1229.61 583.746,1230.62 584.333,1230.34 584.919,1232.49 585.506,1233.19 586.092,1232.59 586.678,1236.25 587.265,1231.93 587.851,1232.78 588.438,1232.26 589.024,1230.76 589.61,1230.57 590.197,1229.9 590.783,1229.73 591.37,1229.52 591.956,1229.39 592.543,1229.26 593.129,1228.84 593.715,1229.97 594.302,1229.95 594.888,1230.9 595.475,1230.78 596.061,1229.57 596.647,1229.19 597.234,1230.13 597.82,1228.66 598.407,1229.63 598.993,1230.37 599.579,1232.62 600.166,1230.84 600.752,1229.55 601.339,1229.2 601.925,1230.09 602.512,1234.61 603.098,1229.1 603.684,1227.36 604.271,1228.44 604.857,1229.98 605.444,1229.8 606.03,1230.79 606.616,1231.73 607.203,1228.73 607.789,1230.86 608.376,1230.49 608.962,1228.82 609.548,1232.44 610.135,1233.42 610.721,1232.92 611.308,1230.88 611.894,1231.91 612.481,1230.03 613.067,1228.32 613.653,1225.41 614.24,1225.46 614.826,1225.31 615.413,1225.12 615.999,1226.31 616.585,1224.61 617.172,1225.83 617.758,1228.12 618.345,1228.78 618.931,1228.28 619.518,1230.35 620.104,1231.44 620.69,1232.09 621.277,1231.38 621.863,1229.8 622.45,1230.68 623.036,1227.54 623.622,1227.37 624.209,1226.95 624.795,1229.11 625.382,1232.33 625.968,1231.78 626.554,1231.21 627.141,1230.43 627.727,1229.82 628.314,1230.85 628.9,1231.68 629.487,1231.17 630.073,1228.23 630.659,1229.46 631.246,1229.16 631.832,1227.67 632.419,1227.43 633.005,1225.53 633.591,1223.6 634.178,1223.54 634.764,1223.21 635.351,1223.19 635.937,1219.32 636.523,1219.24 637.11,1219.83 637.696,1221.26 638.283,1221.42 638.869,1217.72 639.456,1216.95 640.042,1218.31 640.628,1218.66 641.215,1217.59 641.801,1217.77 642.388,1220.75 642.974,1220.7 643.56,1222.07 644.147,1219.51 644.733,1218.31 645.32,1218.66 645.906,1217.31 646.492,1218.89 647.079,1220.38 647.665,1220.2 648.252,1221.6 648.838,1222.84 649.425,1223.02 650.011,1222.75 650.597,1223.86 651.184,1225.08 651.77,1224.83 652.357,1219.9 652.943,1219.97 653.529,1217.32 654.116,1221.45 654.702,1222.63 655.289,1223.81 655.875,1221.29 656.462,1223.82 657.048,1224.93 657.634,1222.2 658.221,1222.08 658.807,1223.28 659.394,1224.58 659.98,1221.82 660.566,1221.65 661.153,1222.9 661.739,1223.94 662.326,1223.82 662.912,1225.96 663.498,1225.66 664.085,1229.32 664.671,1227.59 665.258,1225.65 665.844,1225.53 666.431,1225.22 667.017,1224.95 667.603,1223.5 668.19,1224.7 668.776,1225.84 669.363,1224.32 669.949,1222.55 670.535,1221.08 671.122,1223.23 671.708,1222.75 672.295,1222.35 672.881,1220.87 673.467,1220.96 674.054,1220.98 674.64,1220.83 675.227,1220.69 675.813,1220.54 676.4,1219.19 676.986,1220.41 677.572,1221.88 678.159,1220.43 678.745,1218.87 679.332,1218.94 679.918,1218.99 680.504,1220.34 681.091,1218.9 681.677,1220.05 682.264,1218.41 682.85,1217.44 683.436,1217.4 684.023,1217.24 684.609,1217.43 685.196,1218.45 685.782,1218.29 686.369,1220.81 686.955,1220.7 687.541,1221.8 688.128,1220.46 688.714,1221.61 689.301,1221.44 689.887,1222.47 690.473,1222.38 691.06,1223.52 691.646,1221.76 692.233,1221.57 692.819,1221.37 693.405,1223.91 693.992,1223.72 694.578,1224.64 695.165,1224.07 695.751,1221.31 696.338,1222.33 696.924,1223.42 697.51,1224.54 698.097,1224.16 698.683,1223.75 699.27,1223.62 699.856,1224.49 700.442,1221.88 701.029,1224.35 701.615,1221.46 702.202,1222.59 702.788,1222.35 703.375,1220.87 703.961,1223.13 704.547,1222.9 705.134,1223.84 705.72,1226.11 706.307,1225.71 706.893,1229.01 707.479,1228.68 708.066,1226.63 708.652,1226.12 709.239,1225.57 709.825,1225.11 710.411,1222.2 710.998,1221.91 711.584,1223.02 712.171,1220.13 712.757,1221.33 713.344,1221.33 713.93,1217.47 714.516,1216.21 715.103,1216.37 715.689,1216.59 716.276,1219 716.862,1219.19 717.448,1220.61 718.035,1221.54 718.621,1222.51 719.208,1222.32 719.794,1220.93 720.38,1221.96 720.967,1223.12 721.553,1221.65 722.14,1218.96 722.726,1218.67 723.313,1219.78 723.899,1218.28 724.485,1218.37 725.072,1219.38 725.658,1219.42 726.245,1220.38 726.831,1221.55 727.417,1217.65 728.004,1218.89 728.59,1219.95 729.177,1218.83 729.763,1218.84 730.349,1218.53 730.936,1215.68 731.522,1214.5 732.109,1213.51 732.695,1212.33 733.282,1212.6 733.868,1214.16 734.454,1211.7 735.041,1213 735.627,1214.61 736.214,1213.53 736.8,1217.15 737.386,1219.5 737.973,1218.08 738.559,1216.7 739.146,1219.36 739.732,1219.57 740.318,1216.94 740.905,1215.88 741.491,1218.29 742.078,1215.37 742.664,1215.43 743.251,1215.52 743.837,1214.39 744.423,1217.11 745.01,1218.29 745.596,1218.19 746.183,1216.69 746.769,1216.7 747.355,1217 747.942,1218.37 748.528,1218.5 749.115,1220.92 749.701,1217.94 750.288,1216.54 750.874,1216.73 751.46,1215.41 752.047,1215.46 752.633,1214.31 753.22,1217.04 753.806,1215.87 754.392,1214.96 754.979,1216.18 755.565,1216.13 756.152,1218.78 756.738,1217.19 757.324,1217.01 757.911,1217.22 758.497,1217.24 759.084,1217.19 759.67,1214.86 760.257,1211.29 760.843,1211.44 761.429,1210.24 762.016,1208.09 762.602,1208.55 763.189,1211.73 763.775,1210.68 764.361,1210.62 764.948,1207.13 765.534,1206.51 766.121,1208.57 766.707,1211.37 767.293,1210.29 767.88,1209.47 768.466,1211.3 769.053,1210.33 769.639,1215.71 770.226,1215.93 770.812,1217.2 771.398,1217.16 771.985,1218.19 772.571,1219.37 773.158,1219.35 773.744,1219.53 774.33,1219.5 774.917,1219.22 775.503,1220.29 776.09,1220.19 776.676,1220.02 777.262,1221.22 777.849,1225.05 778.435,1225.78 779.022,1226.75 779.608,1225.32 780.195,1222.54 780.781,1223.55 781.367,1221.86 781.954,1219.06 782.54,1218.83 783.127,1219.83 783.713,1221.02 784.299,1223.23 784.886,1224.28 785.472,1223.73 786.059,1224.95 786.645,1224.57 787.232,1224.32 787.818,1223.76 788.404,1223.29 788.991,1221.88 789.577,1224.25 790.164,1224.07 790.75,1224.68 791.336,1226.73 791.923,1227.4 792.509,1226.99 793.096,1226.33 793.682,1224.36 794.268,1223.9 794.855,1223.46 795.441,1222.8 796.028,1222.41 796.614,1219.63 797.201,1219.17 797.787,1217.82 798.373,1218.71 798.96,1218.55 799.546,1219.8 800.133,1218.46 800.719,1216.97 801.305,1214.5 801.892,1212.25 802.478,1211.3 803.065,1211.51 803.651,1210.61 804.237,1212.4 804.824,1211.2 805.41,1211.46 805.997,1213.09 806.583,1215.86 807.17,1217.09 807.756,1218.32 808.342,1218.19 808.929,1216.62 809.515,1217.77 810.102,1216.3 810.688,1215 811.274,1215.24 811.861,1215.02 812.447,1215.09 813.034,1216.07 813.62,1216.05 814.206,1214.62 814.793,1215.56 815.379,1214.12 815.966,1211.71 816.552,1211.79 817.139,1212.09 817.725,1217.61 818.311,1218.89 818.898,1218.72 819.484,1218.27 820.071,1221.74 820.657,1220.06 821.243,1222.51 821.83,1221.02 822.416,1220.63 823.003,1216.4 823.589,1215.01 824.175,1216.72 824.762,1214.09 825.348,1215.45 825.935,1214.31 826.521,1214.21 827.108,1215.54 827.694,1215.63 828.28,1216.98 828.867,1215.6 829.453,1216.78 830.04,1216.82 830.626,1219.46 831.212,1219.13 831.799,1216.49 832.385,1216.34 832.972,1217.29 833.558,1218.31 834.145,1216.9 834.731,1216.93 835.317,1216.7 835.904,1216.68 836.49,1216.57 837.077,1215.06 837.663,1211.17 838.249,1210.17 838.836,1209.13 839.422,1211.06 840.009,1212.59 840.595,1212.77 841.181,1216.96 841.768,1218.32 842.354,1219.37 842.941,1216.77 843.527,1214.33 844.114,1214.3 844.7,1211.01 845.286,1211.43 845.873,1211.64 846.459,1211.67 847.046,1212.03 847.632,1212.01 848.218,1212.39 848.805,1210.25 849.391,1210.64 849.978,1214.8 850.564,1214.85 851.15,1213.59 851.737,1215.06 852.323,1212.68 852.91,1212.76 853.496,1212.89 854.083,1211.55 854.669,1216.65 855.255,1217.74 855.842,1218.83 856.428,1220.03 857.015,1217.1 857.601,1218.31 858.187,1219.51 858.774,1219.26 859.36,1218.95 859.947,1219.95 860.533,1216.07 861.119,1215.91 861.706,1219.43 862.292,1220.31 862.879,1218.63 863.465,1218.34 864.052,1215.53 864.638,1216.36 865.224,1217.61 865.811,1218.71 866.397,1219.92 866.984,1215.96 867.57,1215.9 868.156,1215.91 868.743,1215.97 869.329,1217.09 869.916,1216.94 870.502,1218.06 871.089,1217.95 871.675,1218.04 872.261,1215.49 872.848,1211.65 873.434,1210.6 874.021,1210.69 874.607,1210.9 875.193,1212.17 875.78,1212.32 876.366,1213.99 876.953,1214.05 877.539,1215.21 878.125,1215.39 878.712,1216.42 879.298,1216.32 879.885,1216.23 880.471,1214.81 881.058,1216 881.644,1215.65 882.23,1214.3 882.817,1215.41 883.403,1213.86 883.99,1214.96 884.576,1214.81 885.162,1216.04 885.749,1218.54 886.335,1218.32 886.922,1221.87 887.508,1220.3 888.094,1219.72 888.681,1219.56 889.267,1219.39 889.854,1219.04 890.44,1220.23 891.027,1222.32 891.613,1223.3 892.199,1221.61 892.786,1219.9 893.372,1220.83 893.959,1222.06 894.545,1220.24 895.131,1217.33 895.718,1215.76 896.304,1215.87 896.891,1215.71 897.477,1215.6 898.063,1214.31 898.65,1215.46 899.236,1215.47 899.823,1217.7 900.409,1217.44 900.996,1215.74 901.582,1215.76 902.168,1218.09 902.755,1217.54 903.341,1216.13 903.928,1214.83 904.514,1216.3 905.1,1216.34 905.687,1218.82 906.273,1218.49 906.86,1216.84 907.446,1215.47 908.032,1216.51 908.619,1213.81 909.205,1211.06 909.792,1211.02 910.378,1211.09 910.965,1216.11 911.551,1216.07 912.137,1215.98 912.724,1214.77 913.31,1211.95 913.897,1214.62 914.483,1216.08 915.069,1217.48 915.656,1217.51 916.242,1214.63 916.829,1217.14 917.415,1215.71 918.002,1216.84 918.588,1219.13 919.174,1218.99 919.761,1218.83 920.347,1217.38 920.934,1215.75 921.52,1218.15 922.106,1219.34 922.693,1219.17 923.279,1220.21 923.866,1218.55 924.452,1218.59 925.038,1212.09 925.625,1211.24 926.211,1210.01 926.798,1210.12 927.384,1211.53 927.971,1211.62 928.557,1210.41 929.143,1210.55 929.73,1211.83 930.316,1214.45 930.903,1214.32 931.489,1215.31 932.075,1214.1 932.662,1212.83 933.248,1212.77 933.835,1213.02 934.421,1214.49 935.007,1213.07 935.594,1211.79 936.18,1213.17 936.767,1213.33 937.353,1209.51 937.94,1209.9 938.526,1210.01 939.112,1208.7 939.699,1210.28 940.285,1209.25 940.872,1210.89 941.458,1212.21 942.044,1212.04 942.631,1211.98 943.217,1212.13 943.804,1210.97 944.39,1211.3 944.976,1214.02 945.563,1211.76 946.149,1210.93 946.736,1212.69 947.322,1214.13 947.909,1215.35 948.495,1213.92 949.081,1214.02 949.668,1215.11 950.254,1216.32 950.841,1222.52 951.427,1221.12 952.013,1216.75 952.6,1216.7 953.186,1216.89 953.773,1216.56 954.359,1216.34 954.945,1213.66 955.532,1213.75 956.118,1214.82 956.705,1213.57 957.291,1214.88 957.878,1213.74 958.464,1213.85 959.05,1211.32 959.637,1213.91 960.223,1214.95 960.81,1216.2 961.396,1214.73 961.982,1213.48 962.569,1218.4 963.155,1217.94 963.742,1218.8 964.328,1214.9 964.915,1213.58 965.501,1213.42 966.087,1209.46 966.674,1210.83 967.26,1208.43 967.847,1210.1 968.433,1212.67 969.019,1214.34 969.606,1214.23 970.192,1214.06 970.779,1215.53 971.365,1214.06 971.951,1214.04 972.538,1212.84 973.124,1214.27 973.711,1216.54 974.297,1215.24 974.884,1216.25 975.47,1216.07 976.056,1214.75 976.643,1213.31 977.229,1214.54 977.816,1216.02 978.402,1215.54 978.988,1215.16 979.575,1218.93 980.161,1216.01 980.748,1216.06 981.334,1215.92 981.92,1214.61 982.507,1215.77 983.093,1214.25 983.68,1213.29 984.266,1211.99 984.853,1210.95 985.439,1212.45 986.025,1213.56 986.612,1209.73 987.198,1208.62 987.785,1211.26 988.371,1215.14 988.957,1216.29 989.544,1216.11 990.13,1214.78 990.717,1216.09 991.303,1216.05 991.889,1217.23 992.476,1217.12 993.062,1220.46 993.649,1218.75 994.235,1218.38 994.822,1218.09 995.408,1219.16 995.994,1217.13 996.581,1216.87 997.167,1217.99 997.754,1216.48 998.34,1216.12 998.926,1214.79 999.513,1215.96 1000.1,1214.48 1000.69,1215.6 1001.27,1214.27 1001.86,1213.01 1002.44,1213.07 1003.03,1211.68 1003.62,1210.81 1004.2,1211.09 1004.79,1212.29 1005.38,1212.67 1005.96,1215.13 1006.55,1215.88 1007.14,1220.6 1007.72,1218.96 1008.31,1217.27 1008.9,1215.9 1009.48,1215.75 1010.07,1214.22 1010.65,1215.7 1011.24,1214.27 1011.83,1213.09 1012.41,1211.66 1013,1213.21 1013.59,1214.46 1014.17,1210.77 1014.76,1213.6 1015.35,1213.55 1015.93,1213.67 1016.52,1214.59 1017.11,1213.11 1017.69,1213 1018.28,1214.13 1018.86,1216.75 1019.45,1216.7 1020.04,1214.16 1020.62,1215.5 1021.21,1215.56 1021.8,1215.52 1022.38,1216.92 1022.97,1214.17 1023.56,1212.93 1024.14,1214.1 1024.73,1213.85 1025.32,1212.33 1025.9,1211.41 1026.49,1212.71 1027.07,1215.28 1027.66,1215.05 1028.25,1214.94 1028.83,1214.89 1029.42,1213.66 1030.01,1213.36 1030.59,1214.38 1031.18,1214.06 1031.77,1214.18 1032.35,1211.54 1032.94,1212.98 1033.52,1213.2 1034.11,1210.53 1034.7,1210.64 1035.28,1209.58 1035.87,1211.23 1036.46,1212.76 1037.04,1211.1 1037.63,1209.97 1038.22,1208.71 1038.8,1210.13 1039.39,1209.09 1039.98,1203.91 1040.56,1204.62 1041.15,1206.5 1041.73,1208.29 1042.32,1207.37 1042.91,1207.75 1043.49,1206.78 1044.08,1207.24 1044.67,1208.81 1045.25,1209.37 1045.84,1209.72 1046.43,1209.96 1047.01,1211.48 1047.6,1211.53 1048.19,1212.93 1048.77,1212.9 1049.36,1215.49 1049.94,1214.02 1050.53,1211.74 1051.12,1210.59 1051.7,1209.7 1052.29,1207.35 1052.88,1207.68 1053.46,1206.81 1054.05,1209.93 1054.64,1208.86 1055.22,1210.13 1055.81,1210.25 1056.39,1210.7 1056.98,1210.92 1057.57,1208.46 1058.15,1211.28 1058.74,1211.54 1059.33,1211.62 1059.91,1213 1060.5,1211.82 1061.09,1211.89 1061.67,1213.43 1062.26,1213.49 1062.85,1212.15 1063.43,1211.19 1064.02,1212.66 1064.6,1212.94 1065.19,1211.79 1065.78,1209.34 1066.36,1210.59 1066.95,1210.59 1067.54,1211.75 1068.12,1214.26 1068.71,1214.27 1069.3,1214.46 1069.88,1214.22 1070.47,1214.25 1071.06,1214.3 1071.64,1213.13 1072.23,1210.73 1072.81,1209.91 1073.4,1210.24 1073.99,1210.65 1074.57,1209.64 1075.16,1213.51 1075.75,1212.21 1076.33,1211.12 1076.92,1211.23 1077.51,1212.57 1078.09,1213.93 1078.68,1215.11 1079.26,1215.11 1079.85,1215.23 1080.44,1215.19 1081.02,1213.59 1081.61,1212.37 1082.2,1212.54 1082.78,1215.13 1083.37,1213.76 1083.96,1213.84 1084.54,1212.51 1085.13,1211.35 1085.72,1211.82 1086.3,1213.13 1086.89,1215.92 1087.47,1215.82 1088.06,1212.9 1088.65,1211.67 1089.23,1211.41 1089.82,1211.58 1090.41,1210.42 1090.99,1211.97 1091.58,1209.48 1092.17,1208.24 1092.75,1209.77 1093.34,1211.1 1093.93,1211.11 1094.51,1212.57 1095.1,1211.52 1095.68,1214.16 1096.27,1218.09 1096.86,1220.39 1097.44,1221.35 1098.03,1219.52 1098.62,1217.75 1099.2,1217.29 1099.79,1217.17 1100.38,1212.97 1100.96,1212.79 1101.55,1212.89 1102.14,1212.79 1102.72,1213.99 1103.31,1215.38 1103.89,1214.01 1104.48,1216.65 1105.07,1213.01 1105.65,1213.12 1106.24,1213.19 1106.83,1214.42 1107.41,1212.07 1108,1210.89 1108.59,1212.15 1109.17,1211.92 1109.76,1213.24 1110.34,1213.07 1110.93,1211.62 1111.52,1210.64 1112.1,1213.3 1112.69,1213.06 1113.28,1213.13 1113.86,1215.71 1114.45,1217.02 1115.04,1216.9 1115.62,1221.44 1116.21,1220.92 1116.8,1220.59 1117.38,1220.16 1117.97,1224.67 1118.55,1221.58 1119.14,1219.61 1119.73,1214.3 1120.31,1214.42 1120.9,1213.11 1121.49,1211.89 1122.07,1212.59 1122.66,1211.19 1123.25,1211.17 1123.83,1212.36 1124.42,1213.98 1125.01,1212.63 1125.59,1212.74 1126.18,1211.37 1126.76,1211.26 1127.35,1208.7 1127.94,1210.33 1128.52,1211.76 1129.11,1214.22 1129.7,1215.38 1130.28,1216.52 1130.87,1215.25 1131.46,1213.88 1132.04,1215.19 1132.63,1213.33 1133.21,1211.86 1133.8,1214.45 1134.39,1215.63 1134.97,1215.41 1135.56,1212.82 1136.15,1214.07 1136.73,1211.48 1137.32,1213.92 1137.91,1214.08 1138.49,1215.24 1139.08,1215.25 1139.67,1211.5 1140.25,1211.63 1140.84,1207.71 1141.42,1206.64 1142.01,1208.33 1142.6,1208.52 1143.18,1207.51 1143.77,1206.5 1144.36,1205.7 1144.94,1205.15 1145.53,1205.66 1146.12,1207.08 1146.7,1208.96 1147.29,1210.81 1147.88,1211.03 1148.46,1211.07 1149.05,1213.91 1149.63,1213.73 1150.22,1212.69 1150.81,1215.23 1151.39,1216.6 1151.98,1217.62 1152.57,1215.92 1153.15,1213.27 1153.74,1210.52 1154.33,1210.79 1154.91,1212 1155.5,1213.41 1156.09,1214.39 1156.67,1214.35 1157.26,1215.53 1157.84,1216.56 1158.43,1215.23 1159.02,1213.48 1159.6,1210.9 1160.19,1213.63 1160.78,1214.59 1161.36,1212.94 1161.95,1215.59 1162.54,1216.66 1163.12,1217.8 1163.71,1217.57 1164.29,1218.86 1164.88,1218.59 1165.47,1219.78 1166.05,1218.21 1166.64,1218.16 1167.23,1218.96 1167.81,1216.2 1168.4,1215.94 1168.99,1218.32 1169.57,1216.77 1170.16,1220.51 1170.75,1220.05 1171.33,1223.62 1171.92,1224.48 1172.5,1222.91 1173.09,1221.31 1173.68,1219.33 1174.26,1217.56 1174.85,1221.19 1175.44,1224.2 1176.02,1222.55 1176.61,1222.05 1177.2,1220.13 1177.78,1221.16 1178.37,1219.31 1178.96,1216.32 1179.54,1218.58 1180.13,1219.7 1180.71,1218.28 1181.3,1216.65 1181.89,1213.71 1182.47,1216.22 1183.06,1216.03 1183.65,1217.15 1184.23,1214.26 1184.82,1216.94 1185.41,1215.35 1185.99,1213.89 1186.58,1216.63 1187.16,1213.95 1187.75,1215 1188.34,1213.51 1188.92,1212.22 1189.51,1209.85 1190.1,1209.82 1190.68,1208.75 1191.27,1209.28 1191.86,1208.28 1192.44,1208.39 1193.03,1207.55 1193.62,1209.13 1194.2,1206.76 1194.79,1207.26 1195.37,1208.59 1195.96,1208.89 1196.55,1206.73 1197.13,1207.39 1197.72,1207.65 1198.31,1205.24 1198.89,1204.43 1199.48,1205.96 1200.07,1208.9 1200.65,1209.15 1201.24,1209.15 1201.83,1208.11 1202.41,1208.24 1203,1208.63 1203.58,1208.84 1204.17,1210.39 1204.76,1211.77 1205.34,1211.75 1205.93,1209.35 1206.52,1210.83 1207.1,1209.96 1207.69,1210.31 1208.28,1208.98 1208.86,1211.63 1209.45,1210.34 1210.03,1207.99 1210.62,1208.14 1211.21,1211.15 1211.79,1211.37 1212.38,1211.38 1212.97,1208.85 1213.55,1207.51 1214.14,1206.61 1214.73,1209.33 1215.31,1212.01 1215.9,1212.08 1216.49,1209.53 1217.07,1210.15 1217.66,1208.86 1218.24,1206.31 1218.83,1206.67 1219.42,1205.65 1220,1208.48 1220.59,1208.37 1221.18,1208.46 1221.76,1208.36 1222.35,1208.54 1222.94,1211.17 1223.52,1205.07 1224.11,1205.46 1224.7,1208.43 1225.28,1210.03 1225.87,1210.25 1226.45,1208.93 1227.04,1205.5 1227.63,1207.3 1228.21,1206.28 1228.8,1206.88 1229.39,1206.98 1229.97,1209.96 1230.56,1208.85 1231.15,1207.73 1231.73,1209.14 1232.32,1208.36 1232.91,1210.21 1233.49,1210.39 1234.08,1212.05 1234.66,1212.27 1235.25,1212.21 1235.84,1213.39 1236.42,1213.45 1237.01,1213.57 1237.6,1212.18 1238.18,1212.18 1238.77,1209.94 1239.36,1209.92 1239.94,1211.06 1240.53,1210.99 1241.11,1212.65 1241.7,1212.8 1242.29,1213.11 1242.87,1213.19 1243.46,1214.57 1244.05,1217 1244.63,1216.74 1245.22,1220.11 1245.81,1219.71 1246.39,1218.04 1246.98,1219.09 1247.57,1216.35 1248.15,1214.79 1248.74,1213.38 1249.32,1214.63 1249.91,1214.45 1250.5,1214.36 1251.08,1214.56 1251.67,1215.48 1252.26,1215.27 1252.84,1214.85 1253.43,1217.46 1254.02,1217.09 1254.6,1219.21 1255.19,1218.71 1255.78,1215.92 1256.36,1214.1 1256.95,1213.98 1257.53,1211.48 1258.12,1210.38 1258.71,1209.32 1259.29,1210.92 1259.88,1213.47 1260.47,1213.58 1261.05,1213.37 1261.64,1211.96 1262.23,1213.12 1262.81,1212.12 1263.4,1214.51 1263.98,1215.74 1264.57,1218.24 1265.16,1218.03 1265.74,1219.37 1266.33,1215.25 1266.92,1214.93 1267.5,1214.49 1268.09,1211.9 1268.68,1214.45 1269.26,1214.19 1269.85,1212.82 1270.44,1211.85 1271.02,1209.36 1271.61,1210.75 1272.19,1208.4 1272.78,1210.14 1273.37,1210.1 1273.95,1215.33 1274.54,1215.22 1275.13,1215.23 1275.71,1215.09 1276.3,1214.79 1276.89,1212.37 1277.47,1212.51 1278.06,1211.35 1278.65,1211.35 1279.23,1212.81 1279.82,1215.22 1280.4,1215.29 1280.99,1216.58 1281.58,1216.24 1282.16,1214.89 1282.75,1212.26 1283.34,1211.98 1283.92,1214.3 1284.51,1211.57 1285.1,1212.82 1285.68,1211.4 1286.27,1212.74 1286.86,1211.76 1287.44,1212.03 1288.03,1209.46 1288.61,1208.13 1289.2,1208.04 1289.79,1207.02 1290.37,1205.98 1290.96,1206.65 1291.55,1200.74 1292.13,1201.49 1292.72,1202.1 1293.31,1205.22 1293.89,1208.54 1294.48,1210.04 1295.06,1207.78 1295.65,1206.89 1296.24,1208.51 1296.82,1207.5 1297.41,1211.83 1298,1213.05 1298.58,1211.95 1299.17,1213.13 1299.76,1213.13 1300.34,1215.63 1300.93,1217.09 1301.52,1216.86 1302.1,1218.01 1302.69,1220.41 1303.27,1221.34 1303.86,1221.11 1304.45,1216.85 1305.03,1215.16 1305.62,1215.39 1306.21,1215.31 1306.79,1215.37 1307.38,1215.46 1307.97,1217.82 1308.55,1216.24 1309.14,1217.65 1309.73,1217.55 1310.31,1218.8 1310.9,1218.28 1311.48,1218.19 1312.07,1215.31 1312.66,1215.23 1313.24,1214.94 1313.83,1213.54 1314.42,1218.56 1315,1218.02 1315.59,1216.16 1316.18,1214.95 1316.76,1214.78 1317.35,1214.78 1317.93,1216.17 1318.52,1214.74 1319.11,1214.69 1319.69,1212.24 1320.28,1211.16 1320.87,1211.24 1321.45,1212.88 1322.04,1210.34 1322.63,1210.63 1323.21,1209.45 1323.8,1209.89 1324.39,1210.05 1324.97,1207.77 1325.56,1208.4 1326.14,1207.3 1326.73,1208.7 1327.32,1209.03 1327.9,1209.29 1328.49,1210.52 1329.08,1210.67 1329.66,1209.52 1330.25,1210.79 1330.84,1210.85 1331.42,1212.21 1332.01,1212.12 1332.6,1213.52 1333.18,1212.32 1333.77,1211.27 1334.35,1211.36 1334.94,1215.44 1335.53,1215.26 1336.11,1216.45 1336.7,1218.73 1337.29,1217.36 1337.87,1217.35 1338.46,1216.79 1339.05,1216.46 1339.63,1213.97 1340.22,1215.37 1340.8,1215.15 1341.39,1217.55 1341.98,1214.72 1342.56,1213.29 1343.15,1213.48 1343.74,1210.89 1344.32,1209.56 1344.91,1211.14 1345.5,1212.52 1346.08,1208.6 1346.67,1210.06 1347.26,1213.04 1347.84,1213.02 1348.43,1213.11 1349.01,1211.65 1349.6,1212.88 1350.19,1216.6 1350.77,1216.33 1351.36,1217.51 1351.95,1219.76 1352.53,1220.86 1353.12,1221.67 1353.71,1223.69 1354.29,1223.1 1354.88,1222.46 1355.47,1215.55 1356.05,1214.31 1356.64,1212.89 1357.22,1212.84 1357.81,1214.24 1358.4,1211.43 1358.98,1209.06 1359.57,1210.89 1360.16,1212.02 1360.74,1206.77 1361.33,1205.8 1361.92,1206.25 1362.5,1206.86 1363.09,1207.17 1363.68,1208.58 1364.26,1211.42 1364.85,1215.1 1365.43,1216.29 1366.02,1213.67 1366.61,1212.03 1367.19,1213.34 1367.78,1213.31 1368.37,1214.43 1368.95,1214.16 1369.54,1215.29 1370.13,1213.92 1370.71,1211.52 1371.3,1211.59 1371.88,1212.73 1372.47,1212.68 1373.06,1214.1 1373.64,1211.45 1374.23,1211.18 1374.82,1211.3 1375.4,1211.43 1375.99,1213.01 1376.58,1213.13 1377.16,1211.78 1377.75,1210.7 1378.34,1210.49 1378.92,1210.58 1379.51,1208.25 1380.09,1212.17 1380.68,1213.75 1381.27,1214.86 1381.85,1214.67 1382.44,1217.01 1383.03,1216.73 1383.61,1214.29 1384.2,1217.76 1384.79,1216.16 1385.37,1215.72 1385.96,1217.68 1386.55,1218.62 1387.13,1215.76 1387.72,1213.05 1388.3,1212.9 1388.89,1214.06 1389.48,1212.72 1390.06,1213.77 1390.65,1216.03 1391.24,1217.23 1391.82,1218.4 1392.41,1220.25 1393,1219.6 1393.58,1220.59 1394.17,1220.41 1394.75,1222.52 1395.34,1222.18 1395.93,1222.92 1396.51,1222.42 1397.1,1221.94 1397.69,1221.23 1398.27,1218.24 1398.86,1217.92 1399.45,1218.87 1400.03,1215.93 1400.62,1217.06 1401.21,1216.7 1401.79,1215.08 1402.38,1214.79 1402.96,1209.65 1403.55,1211.04 1404.14,1211.09 1404.72,1211.08 1405.31,1210.91 1405.9,1211.15 1406.48,1214.81 1407.07,1212.29 1407.66,1212.25 1408.24,1210.86 1408.83,1210.66 1409.42,1210.62 1410,1211.89 1410.59,1210.63 1411.17,1210.84 1411.76,1209.65 1412.35,1208.34 1412.93,1209.88 1413.52,1208.55 1414.11,1208.69 1414.69,1209.19 1415.28,1212.29 1415.87,1209.67 1416.45,1208.59 1417.04,1208.62 1417.63,1207.68 1418.21,1206.7 1418.8,1205.79 1419.38,1207.61 1419.97,1206.79 1420.56,1207.14 1421.14,1207.54 1421.73,1207.61 1422.32,1209.32 1422.9,1208.26 1423.49,1208.39 1424.08,1208.78 1424.66,1211.66 1425.25,1210.78 1425.83,1209.72 1426.42,1208.48 1427.01,1207.17 1427.59,1210.08 1428.18,1210.17 1428.77,1211.61 1429.35,1210.39 1429.94,1210.27 1430.53,1209.02 1431.11,1209.17 1431.7,1208.42 1432.29,1211.29 1432.87,1211.64 1433.46,1213.16 1434.04,1215.7 1434.63,1214.39 1435.22,1215.61 1435.8,1213.91 1436.39,1212.55 1436.98,1213.69 1437.56,1213.66 1438.15,1216.36 1438.74,1216.16 1439.32,1216.16 1439.91,1217.01 1440.5,1219.05 1441.08,1219.93 1441.67,1219.43 1442.25,1217.7 1442.84,1220.06 1443.43,1218.74 1444.01,1219.63 1444.6,1219.14 1445.19,1217.61 1445.77,1221.14 1446.36,1219.6 1446.95,1216.5 1447.53,1217.33 1448.12,1217.21 1448.7,1215.69 1449.29,1214.13 1449.88,1211.69 1450.46,1211.83 1451.05,1213.33 1451.64,1212.37 1452.22,1213.91 1452.81,1216.49 1453.4,1216.03 1453.98,1218.34 1454.57,1216.68 1455.16,1216.59 1455.74,1216.39 1456.33,1212.41 1456.91,1212.19 1457.5,1210.98 1458.09,1210.95 1458.67,1211.02 1459.26,1212.36 1459.85,1212.24 1460.43,1212.04 1461.02,1210.6 1461.61,1209.43 1462.19,1209.57 1462.78,1209.87 1463.37,1208.71 1463.95,1208.74 1464.54,1207.81 1465.12,1207.94 1465.71,1208.49 1466.3,1208.77 1466.88,1207.43 1467.47,1209.37 1468.06,1210.75 1468.64,1209.67 1469.23,1210.94 1469.82,1209.77 1470.4,1210.03 1470.99,1210.4 1471.57,1212.04 1472.16,1212.17 1472.75,1210.51 1473.33,1207.88 1473.92,1208.24 1474.51,1205.97 1475.09,1207.78 1475.68,1208.21 1476.27,1207.47 1476.85,1208.94 1477.44,1209.12 1478.03,1209.44 1478.61,1209.66 1479.2,1210.03 1479.78,1209.03 1480.37,1211.67 1480.96,1211.64 1481.54,1214.2 1482.13,1215.51 1482.72,1214.17 1483.3,1214.16 1483.89,1215.8 1484.48,1215.6 1485.06,1214.94 1485.65,1214.95 1486.24,1215.32 1486.82,1213.95 1487.41,1215.2 1487.99,1215.24 1488.58,1213.89 1489.17,1214 1489.75,1212.64 1490.34,1211.24 1490.93,1212.48 1491.51,1212.52 1492.1,1213.85 1492.69,1213.92 1493.27,1213.84 1493.86,1213.73 1494.45,1216.33 1495.03,1214.61 1495.62,1211.78 1496.2,1214.51 1496.79,1214.18 1497.38,1214 1497.96,1216.67 1498.55,1213.84 1499.14,1213.51 1499.72,1214.71 1500.31,1214.58 1500.9,1218.42 1501.48,1216.73 1502.07,1219.12 1502.65,1217.66 1503.24,1214.83 1503.83,1217.42 1504.41,1218.43 1505,1221.9 1505.59,1225.11 1506.17,1221.85 1506.76,1218.65 1507.35,1218.14 1507.93,1217.74 1508.52,1214.8 1509.11,1217.4 1509.69,1214.68 1510.28,1213.32 1510.86,1213.23 1511.45,1212.02 1512.04,1214.69 1512.62,1215.87 1513.21,1216.89 1513.8,1217.91 1514.38,1217.76 1514.97,1217.62 1515.56,1219.78 1516.14,1218.17 1516.73,1217.82 1517.32,1218 1517.9,1222.66 1518.49,1221.15 1519.07,1215.76 1519.66,1214.13 1520.25,1214.21 1520.83,1212.8 1521.42,1214.1 1522.01,1214.91 1522.59,1214.58 1523.18,1214.37 1523.77,1211.71 1524.35,1211.88 1524.94,1206.94 1525.52,1207.33 1526.11,1206.18 1526.7,1207.82 1527.28,1206.78 1527.87,1212.11 1528.46,1213.37 1529.04,1213.29 1529.63,1211.06 1530.22,1211.36 1530.8,1211.39 1531.39,1210.14 1531.98,1208.01 1532.56,1209.64 1533.15,1208.56 1533.73,1210.35 1534.32,1210.54 1534.91,1209.33 1535.49,1208.29 1536.08,1209.99 1536.67,1208.71 1537.25,1207.68 1537.84,1209.21 1538.43,1209.23 1539.01,1209.65 1539.6,1207.41 1540.19,1207.52 1540.77,1208.03 1541.36,1208.71 1541.94,1210.32 1542.53,1210.47 1543.12,1210.68 1543.7,1209.77 1544.29,1211.17 1544.88,1211.2 1545.46,1211.49 1546.05,1211.51 1546.64,1211.66 1547.22,1213.32 1547.81,1212.1 1548.4,1213.49 1548.98,1210.88 1549.57,1211.1 1550.15,1211.36 1550.74,1211.52 1551.33,1210.36 1551.91,1206.95 1552.5,1207.37 1553.09,1210.17 1553.67,1211.66 1554.26,1212.9 1554.85,1214.08 1555.43,1212.65 1556.02,1211.51 1556.6,1211.44 1557.19,1210.29 1557.78,1211.58 1558.36,1212.91 1558.95,1212.97 1559.54,1213.96 1560.12,1213.87 1560.71,1212.68 1561.3,1211.42 1561.88,1215.09 1562.47,1216.24 1563.06,1217.17 1563.64,1217.19 1564.23,1215.76 1564.81,1212.07 1565.4,1209.67 1565.99,1206.04 1566.57,1204.83 1567.16,1206.56 1567.75,1205.57 1568.33,1204.47 1568.92,1203.82 1569.51,1205.62 1570.09,1207.58 1570.68,1209.33 1571.27,1209.58 1571.85,1208.5 1572.44,1209.81 1573.02,1208.64 1573.61,1209.11 1574.2,1209.56 1574.78,1211.17 1575.37,1211.35 1575.96,1211.44 1576.54,1209.04 1577.13,1210.51 1577.72,1209.21 1578.3,1208.34 1578.89,1207.23 1579.47,1207.45 1580.06,1207.61 1580.65,1211.82 1581.23,1214.32 1581.82,1214.51 1582.41,1214.45 1582.99,1214.48 1583.58,1214.2 1584.17,1213.17 1584.75,1214.5 1585.34,1214.06 1585.93,1212.82 1586.51,1212.82 1587.1,1214.19 1587.68,1215.4 1588.27,1215.31 1588.86,1218.98 1589.44,1220.2 1590.03,1223.81 1590.62,1223.02 1591.2,1222.37 1591.79,1221.89 1592.38,1224 1592.96,1225.94 1593.55,1225.18 1594.14,1225.68 1594.72,1225 1595.31,1223.1 1595.89,1218.89 1596.48,1222.67 1597.07,1221.01 1597.65,1221.69 1598.24,1219.77 1598.83,1216.77 1599.41,1215.42 1600,1214.15 1600.59,1211.72 1601.17,1211.96 1601.76,1211 1602.34,1209.65 1602.93,1215.08 1603.52,1214.74 1604.1,1213.27 1604.69,1214.78 1605.28,1215.73 1605.86,1215.63 1606.45,1216.73 1607.04,1218.98 1607.62,1217.58 1608.21,1216.09 1608.8,1216.09 1609.38,1214.33 1609.97,1214.08 1610.55,1215.33 1611.14,1214.96 1611.73,1214.79 1612.31,1219.66 1612.9,1217.8 1613.49,1213.68 1614.07,1214.94 1614.66,1214.83 1615.25,1213.39 1615.83,1213.26 1616.42,1211.62 1617.01,1210.28 1617.59,1210.46 1618.18,1208.31 1618.76,1206.21 1619.35,1209.09 1619.94,1208.86 1620.52,1211.49 1621.11,1212.5 1621.7,1213.76 1622.28,1214.91 1622.87,1214.77 1623.46,1214.9 1624.04,1212.03 1624.63,1212.27 1625.22,1212.37 1625.8,1211.32 1626.39,1211.31 1626.97,1208.8 1627.56,1207.62 1628.15,1207.71 1628.73,1207.73 1629.32,1209.2 1629.91,1209.2 1630.49,1209.6 1631.08,1212.26 1631.67,1213.55 1632.25,1213.53 1632.84,1211.09 1633.42,1208.65 1634.01,1206.44 1634.6,1205.38 1635.18,1207.11 1635.77,1208.59 1636.36,1208.88 1636.94,1209.32 1637.53,1209.41 1638.12,1210.98 1638.7,1208.73 1639.29,1209.19 1639.88,1210.92 1640.46,1210.84 1641.05,1209.67 1641.63,1209.81 1642.22,1212.81 1642.81,1211.46 1643.39,1212.86 1643.98,1210.08 1644.57,1210.39 1645.15,1211.9 1645.74,1209.51 1646.33,1208.66 1646.91,1210.29 1647.5,1211.82 1648.09,1213.05 1648.67,1210.63 1649.26,1211.02 1649.84,1209.85 1650.43,1209.87 1651.02,1208.75 1651.6,1207.41 1652.19,1210.54 1652.78,1209.38 1653.36,1210.92 1653.95,1214.61 1654.54,1210.55 1655.12,1210.74 1655.71,1212.24 1656.29,1211.24 1656.88,1211.33 1657.47,1211.6 1658.05,1211.62 1658.64,1211.84 1659.23,1209.3 1659.81,1210.71 1660.4,1212.48 1660.99,1213.4 1661.57,1214.65 1662.16,1214.34 1662.75,1212.91 1663.33,1213.09 1663.92,1211.56 1664.5,1211.7 1665.09,1210.51 1665.68,1210.69 1666.26,1209.32 1666.85,1208.17 1667.44,1209.68 1668.02,1211.12 1668.61,1212.53 1669.2,1210.21 1669.78,1211.8 1670.37,1212.97 1670.96,1211.54 1671.54,1211.61 1672.13,1211.95 1672.71,1210.66 1673.3,1210.88 1673.89,1209.93 1674.47,1212.87 1675.06,1216.62 1675.65,1216.51 1676.23,1217.42 1676.82,1217.17 1677.41,1215.83 1677.99,1214.5 1678.58,1215.76 1679.17,1215.46 1679.75,1214.31 1680.34,1211.78 1680.92,1211.75 1681.51,1211.6 1682.1,1212.71 1682.68,1216.47 1683.27,1217.64 1683.86,1219.56 1684.44,1219.37 1685.03,1218.99 1685.62,1217.35 1686.2,1217.01 1686.79,1217.99 1687.37,1216.8 1687.96,1215.21 1688.55,1216.25 1689.13,1217.11 1689.72,1217.26 1690.31,1216.15 1690.89,1216.34 1691.48,1220.2 1692.07,1219.93 1692.65,1221.05 1693.24,1219.43 1693.83,1215.45 1694.41,1215.74 1695,1212.62 1695.58,1217.75 1696.17,1220.33 1696.76,1222.45 1697.34,1221.97 1697.93,1221.53 1698.52,1222.53 1699.1,1221.82 1699.69,1221.28 1700.28,1218.15 1700.86,1219.56 1701.45,1220.27 1702.04,1218.75 1702.62,1218.29 1703.21,1216.52 1703.79,1212.57 1704.38,1212.6 1704.97,1211.26 1705.55,1212.39 1706.14,1210.96 1706.73,1209.94 1707.31,1210.14 1707.9,1207.97 1708.49,1208.12 1709.07,1208.45 1709.66,1207.26 1710.24,1208.85 1710.83,1209.17 1711.42,1213.14 1712,1213.34 1712.59,1213.51 1713.18,1213.8 1713.76,1213.88 1714.35,1214.03 1714.94,1211.51 1715.52,1210.49 1716.11,1210.41 1716.7,1209.49 1717.28,1209.69 1717.87,1210.32 1718.45,1211.71 1719.04,1211.92 1719.63,1213.48 1720.21,1214.8 1720.8,1214.89 1721.39,1215.97 1721.97,1214.34 1722.56,1216.66 1723.15,1217.73 1723.73,1219.87 1724.32,1218.09 1724.91,1216.57 1725.49,1212.64 1726.08,1212.53 1726.66,1210.01 1727.25,1212.67 1727.84,1211.77 1728.42,1213.06 1729.01,1210.63 1729.6,1210.68 1730.18,1210.71 1730.77,1211.14 1731.36,1210.07 1731.94,1211.58 1732.53,1211.87 1733.11,1213.29 1733.7,1213.33 1734.29,1213.35 1734.87,1214.69 1735.46,1213.59 1736.05,1214.8 1736.63,1217.29 1737.22,1215.91 1737.81,1218.66 1738.39,1220.88 1738.98,1221.79 1739.57,1225.12 1740.15,1225.71 1740.74,1222.51 1741.32,1221.94 1741.91,1219.11 1742.5,1217.26 1743.08,1218.08 1743.67,1215.23 1744.26,1212.75 1744.84,1215.05 1745.43,1216.11 1746.02,1214.86 1746.6,1213.64 1747.19,1210.94 1747.78,1210.74 1748.36,1210.92 1748.95,1212.5 1749.53,1213.83 1750.12,1212.56 1750.71,1212.61 1751.29,1213.86 1751.88,1211.04 1752.47,1204.94 1753.05,1206.55 1753.64,1206.91 1754.23,1207.51 1754.81,1207.75 1755.4,1209.3 1755.99,1209.72 1756.57,1209.89 1757.16,1209.93 1757.74,1208.76 1758.33,1210.1 1758.92,1211.54 1759.5,1215.41 1760.09,1216.53 1760.68,1216.29 1761.26,1213.58 1761.85,1211.27 1762.44,1211.34 1763.02,1208.63 1763.61,1207.62 1764.19,1207.85 1764.78,1208.17 1765.37,1209.74 1765.95,1212.52 1766.54,1213.8 1767.13,1214.55 1767.71,1214.69 1768.3,1211.99 1768.89,1216.72 1769.47,1213.67 1770.06,1212.53 1770.65,1209.78 1771.23,1205.98 1771.82,1206.03 1772.4,1206.52 1772.99,1205.66 1773.58,1207.1 1774.16,1207.4 1774.75,1207.87 1775.34,1209.19 1775.92,1209.31 1776.51,1210.82 1777.1,1212.09 1777.68,1213.42 1778.27,1214.79 1778.86,1215.97 1779.44,1218.27 1780.03,1215.47 1780.61,1214.22 1781.2,1212.75 1781.79,1211.52 1782.37,1211.53 1782.96,1211.58 1783.55,1209.13 1784.13,1206.69 1784.72,1207.11 1785.31,1206.23 1785.89,1207.99 1786.48,1208.53 1787.06,1206.18 1787.65,1207.57 1788.24,1207.53 1788.82,1208.85 1789.41,1211.41 1790,1211.5 1790.58,1210.49 1791.17,1213.36 1791.76,1214.69 1792.34,1214.55 1792.93,1214.2 1793.52,1215.4 1794.1,1216.59 1794.69,1215.24 1795.27,1213.71 1795.86,1214.94 1796.45,1212.48 1797.03,1210.21 1797.62,1210.59 1798.21,1213.42 1798.79,1214.37 1799.38,1212.95 1799.97,1214.31 1800.55,1216.55 1801.14,1216.45 1801.73,1217.65 1802.31,1218.55 1802.9,1220.62 1803.48,1219.94 1804.07,1219.68 1804.66,1221.98 1805.24,1220.56 1805.83,1221.31 1806.42,1222.17 1807,1224.08 1807.59,1226.04 1808.18,1223.98 1808.76,1221.09 1809.35,1219.2 1809.94,1218.96 1810.52,1217.35 1811.11,1215.58 1811.69,1212.65 1812.28,1212.54 1812.87,1210.12 1813.45,1210.31 1814.04,1209.29 1814.63,1209.71 1815.21,1208.53 1815.8,1208.45 1816.39,1205.96 1816.97,1203.55 1817.56,1204.01 1818.14,1205.73 1818.73,1205.03 1819.32,1206.58 1819.9,1206.82 1820.49,1209.56 1821.08,1208.67 1821.66,1210.22 1822.25,1209.12 1822.84,1206.99 1823.42,1207.62 1824.01,1209.31 1824.6,1207.21 1825.18,1207.65 1825.77,1209.29 1826.35,1208.3 1826.94,1209.79 1827.53,1211.14 1828.11,1211.21 1828.7,1210.03 1829.29,1208.79 1829.87,1208.9 1830.46,1210.41 1831.05,1209.56 1831.63,1211.26 1832.22,1215.12 1832.81,1216.35 1833.39,1217.34 1833.98,1215.83 1834.56,1217 1835.15,1218.07 1835.74,1216.53 1836.32,1217.4 1836.91,1213.26 1837.5,1213.44 1838.08,1213.41 1838.67,1211.69 1839.26,1212.75 1839.84,1212.82 1840.43,1215.18 1841.01,1213.97 1841.6,1212.86 1842.19,1211.65 1842.77,1208.97 1843.36,1209.44 1843.95,1209.71 1844.53,1212.38 1845.12,1212.57 1845.71,1212.15 1846.29,1209.55 1846.88,1208.57 1847.47,1208.87 1848.05,1211.73 1848.64,1212.01 1849.22,1211.99 1849.81,1211.91 1850.4,1212.18 1850.98,1212.21 1851.57,1211.11 1852.16,1211.41 1852.74,1211.43 1853.33,1212.52 1853.92,1213.87 1854.5,1214.01 1855.09,1214.14 1855.68,1216.61 1856.26,1216.16 1856.85,1213.75 1857.43,1212.45 1858.02,1212.32 1858.61,1212.5 1859.19,1216.27 1859.78,1215.86 1860.37,1213.27 1860.95,1213.17 1861.54,1214.39 1862.13,1211.74 1862.71,1211.69 1863.3,1211.69 1863.88,1213.17 1864.47,1213.16 1865.06,1211.89 1865.64,1213.48 1866.23,1214.47 1866.82,1215.96 1867.4,1218.29 1867.99,1215.56 1868.58,1215.39 1869.16,1212.54 1869.75,1212.36 1870.34,1211.15 1870.92,1212.62 1871.51,1211.37 1872.09,1212.55 1872.68,1213.63 1873.27,1213.43 1873.85,1216.05 1874.44,1215.96 1875.03,1217.11 1875.61,1216.83 1876.2,1217.65 1876.79,1218.83 1877.37,1217.25 1877.96,1216.71 1878.55,1217.85 1879.13,1216.17 1879.72,1214.92 1880.3,1212.2 1880.89,1210.79 1881.48,1212.15 1882.06,1210.99 1882.65,1211.04 1883.24,1212.27 1883.82,1210.87 1884.41,1213.23 1885,1212.96 1885.58,1212.82 1886.17,1212.54 1886.76,1214.11 1887.34,1215.11 1887.93,1217.15 1888.51,1215.82 1889.1,1215.35 1889.69,1215.22 1890.27,1213.86 1890.86,1211.2 1891.45,1208.8 1892.03,1207.74 1892.62,1208.01 1893.21,1208.55 1893.79,1208.73 1894.38,1208.88 1894.96,1207.65 1895.55,1208.02 1896.14,1208.44 1896.72,1209.78 1897.31,1211.29 1897.9,1212.33 1898.48,1211.5 1899.07,1212.74 1899.66,1212.6 1900.24,1209.98 1900.83,1211.58 1901.42,1214.17 1902,1215.39 1902.59,1217.81 1903.17,1216.01 1903.76,1213.67 1904.35,1211.32 1904.93,1211.4 1905.52,1211.4 1906.11,1211.66 1906.69,1210.46 1907.28,1211.81 1907.87,1211.83 1908.45,1211.85 1909.04,1212.04 1909.63,1210.91 1910.21,1209.47 1910.8,1210.55 1911.38,1211.84 1911.97,1211.74 1912.56,1211.72 1913.14,1211.7 1913.73,1210.67 1914.32,1210.78 1914.9,1214.72 1915.49,1216.01 1916.08,1215.79 1916.66,1216.61 1917.25,1214.02 1917.83,1211.5 1918.42,1211.55 1919.01,1210.29 1919.59,1206.53 1920.18,1206.57 1920.77,1205.57 1921.35,1208.65 1921.94,1208.97 1922.53,1209.13 1923.11,1208.13 1923.7,1209.64 1924.29,1211.2 1924.87,1208.66 1925.46,1208.98 1926.04,1209.54 1926.63,1210.84 1927.22,1213.43 1927.8,1214.64 1928.39,1215.83 1928.98,1214.45 1929.56,1215.64 1930.15,1215.51 1930.74,1217.92 1931.32,1211.61 1931.91,1207.94 1932.5,1209.14 1933.08,1209.45 1933.67,1208.42 1934.25,1207.13 1934.84,1210 1935.43,1212.48 1936.01,1211.07 1936.6,1212.51 1937.19,1213.88 1937.77,1216.33 1938.36,1214.81 1938.95,1212.31 1939.53,1213.48 1940.12,1214.52 1940.71,1213.16 1941.29,1216.89 1941.88,1220.53 1942.46,1220.21 1943.05,1217.5 1943.64,1213.35 1944.22,1213.34 1944.81,1210.76 1945.4,1208.77 1945.98,1211.42 1946.57,1212.72 1947.16,1211.6 1947.74,1211.75 1948.33,1210.62 1948.91,1209.62 1949.5,1211.3 1950.09,1211.23 1950.67,1211.2 1951.26,1211.42 1951.85,1206.81 1952.43,1209.56 1953.02,1215 1953.61,1214.84 1954.19,1215.04 1954.78,1214.95 1955.37,1214.86 1955.95,1215.92 1956.54,1213.1 1957.12,1210.6 1957.71,1212.04 1958.3,1212.08 1958.88,1213.16 1959.47,1214.34 1960.06,1216.83 1960.64,1215.37 1961.23,1214.96 1961.82,1214.76 1962.4,1215.86 1962.99,1213.42 1963.58,1212.15 1964.16,1212.53 1964.75,1210.1 1965.33,1210.2 1965.92,1210.41 1966.51,1210.68 1967.09,1211.05 1967.68,1210.04 1968.27,1213.86 1968.85,1213.84 1969.44,1212.58 1970.03,1210.41 1970.61,1210.43 1971.2,1210.87 1971.78,1212.16 1972.37,1209.81 1972.96,1210 1973.54,1208.76 1974.13,1209.08 1974.72,1209.4 1975.3,1209.42 1975.89,1212.08 1976.48,1213.52 1977.06,1213.34 1977.65,1213.3 1978.24,1212.16 1978.82,1212.21 1979.41,1212.41 1979.99,1209.7 1980.58,1209.87 1981.17,1208.82 1981.75,1207.98 1982.34,1210.83 1982.93,1212.13 1983.51,1212.23 1984.1,1215.04 1984.69,1217.58 1985.27,1219.74 1985.86,1219.1 1986.45,1221.21 1987.03,1220.76 1987.62,1220.38 1988.2,1222.54 1988.79,1222.1 1989.38,1221.64 1989.96,1219.86 1990.55,1219.52 1991.14,1219.2 1991.72,1213.93 1992.31,1214.02 1992.9,1213.89 1993.48,1215.15 1994.07,1214.98 1994.65,1213.65 1995.24,1212.55 1995.83,1211.17 1996.41,1209.87 1997,1211.26 1997.59,1209.95 1998.17,1210.19 1998.76,1208.86 1999.35,1211.72 1999.93,1213.33 2000.52,1213.11 2001.11,1214.19 2001.69,1212.57 2002.28,1216.38 2002.86,1213.72 2003.45,1214.82 2004.04,1214.85 2004.62,1214.64 2005.21,1213.34 2005.8,1212 2006.38,1213.07 2006.97,1212.9 2007.56,1211.26 2008.14,1210.05 2008.73,1209.04 2009.32,1212.02 2009.9,1214.69 2010.49,1212.09 2011.07,1210.9 2011.66,1211 2012.25,1211.05 2012.83,1213.57 2013.42,1213.51 2014.01,1213.66 2014.59,1211.13 2015.18,1213.94 2015.77,1213.96 2016.35,1211.57 2016.94,1212.93 2017.53,1212.9 2018.11,1212.81 2018.7,1214.01 2019.28,1212.8 2019.87,1212.93 2020.46,1210.24 2021.04,1211.92 2021.63,1212.31 2022.22,1212.42 2022.8,1213.8 2023.39,1212.28 2023.98,1208.51 2024.56,1207.27 2025.15,1208.41 2025.73,1207.01 2026.32,1206.04 2026.91,1207.48 2027.49,1204.98 2028.08,1205.47 2028.67,1204.57 2029.25,1207.4 2029.84,1208.9 2030.43,1210.49 2031.01,1210.46 2031.6,1211.68 2032.19,1210.68 2032.77,1212.16 2033.36,1214.53 2033.94,1214.09 2034.53,1216.24 2035.12,1215.96 2035.7,1217.19 2036.29,1217.13 2036.88,1215.68 2037.46,1214.36 2038.05,1215.38 2038.64,1215.16 2039.22,1213.87 2039.81,1214 2040.4,1213.84 2040.98,1215.02 2041.57,1217.51 2042.15,1217.23 2042.74,1219.28 2043.33,1222.53 2043.91,1223.19 2044.5,1222.67 2045.09,1221.99 2045.67,1222.83 2046.26,1220 2046.85,1222.09 2047.43,1220.72 2048.02,1220.45 2048.6,1221.23 2049.19,1219.49 2049.78,1222.92 2050.36,1222.52 2050.95,1220.86 2051.54,1221.74 2052.12,1221.54 2052.71,1221.09 2053.3,1222.96 2053.88,1220.97 2054.47,1220.59 2055.06,1218.87 2055.64,1217.21 2056.23,1213.01 2056.81,1211.57 2057.4,1212.8 2057.99,1213.93 2058.57,1211.1 2059.16,1211.27 2059.75,1209.73 2060.33,1208.45 2060.92,1208.8 2061.51,1207.94 2062.09,1208.02 2062.68,1209.43 2063.27,1210.78 2063.85,1210.75 2064.44,1209.24 2065.02,1208.11 2065.61,1207.97 2066.2,1208.25 2066.78,1207.14 2067.37,1207.55 2067.96,1206.68 2068.54,1207 2069.13,1206.15 2069.72,1205.47 2070.3,1204.42 2070.89,1207.2 2071.48,1210.06 2072.06,1208.71 2072.65,1210.28 2073.23,1210.3 2073.82,1211.57 2074.41,1209.23 2074.99,1209.6 2075.58,1208.69 2076.17,1210.23 2076.75,1210.22 2077.34,1209.09 2077.93,1209.29 2078.51,1212.05 2079.1,1209.64 2079.68,1208.52 2080.27,1207.5 2080.86,1206.6 2081.44,1205.39 2082.03,1207.11 2082.62,1207.36 2083.2,1207.62 2083.79,1209.37 2084.38,1207.11 2084.96,1207.14 2085.55,1208.68 2086.14,1207.55 2086.72,1206.48 2087.31,1206.8 2087.89,1208.63 2088.48,1209.06 2089.07,1210.37 2089.65,1205.31 2090.24,1210.75 2090.83,1210.8 2091.41,1210.97 2092,1209.6 2092.59,1211.09 2093.17,1211.33 2093.76,1210.14 2094.35,1208.95 2094.93,1210.2 2095.52,1209.1 2096.1,1209.34 2096.69,1210.81 2097.28,1209.37 2097.86,1208.07 2098.45,1208.6 2099.04,1207.39 2099.62,1208.05 2100.21,1213.28 2100.8,1211.89 2101.38,1210.7 2101.97,1210.81 2102.55,1212.3 2103.14,1209.85 2103.73,1209.86 2104.31,1213.75 2104.9,1216.45 2105.49,1215.86 2106.07,1216.81 2106.66,1218 2107.25,1217.65 2107.83,1215.9 2108.42,1218.21 2109.01,1217.93 2109.59,1218.77 2110.18,1217.4 2110.76,1218.5 2111.35,1218.4 2111.94,1214.49 2112.52,1211.93 2113.11,1213.3 2113.7,1212.16 2114.28,1211.04 2114.87,1211.09 2115.46,1212.44 2116.04,1212.32 2116.63,1217.35 2117.22,1216.91 2117.8,1216.53 2118.39,1216.31 2118.97,1213.71 2119.56,1212.46 2120.15,1212.54 2120.73,1212.7 2121.32,1212.94 2121.91,1213.98 2122.49,1213.79 2123.08,1213.92 2123.67,1215.04 2124.25,1214.9 2124.84,1214.77 2125.42,1215.95 2126.01,1215.79 2126.6,1215.7 2127.18,1220.37 2127.77,1218.47 2128.36,1219.41 2128.94,1220.17 2129.53,1218.33 2130.12,1219.28 2130.7,1220.27 2131.29,1217.65 2131.88,1218.42 2132.46,1220.75 2133.05,1221.37 2133.63,1220.98 2134.22,1220.34 2134.81,1220.05 2135.39,1219.62 2135.98,1223 2136.57,1222.28 2137.15,1220.42 2137.74,1217.83 2138.33,1217.5 2138.91,1214.86 2139.5,1215.99 2140.09,1214.39 2140.67,1216.92 2141.26,1217 2141.84,1220.72 2142.43,1219.14 2143.02,1217.19 2143.6,1219.43 2144.19,1220.24 2144.78,1219.9 2145.36,1219.54 2145.95,1217.91 2146.54,1216.69 2147.12,1216.38 2147.71,1217.5 2148.3,1215.89 2148.88,1214.6 2149.47,1212.99 2150.05,1210.47 2150.64,1210.53 2151.23,1212 2151.81,1210.86 2152.4,1212.29 2152.99,1211.96 2153.57,1208.16 2154.16,1207.15 2154.75,1206.21 2155.33,1206.23 2155.92,1207.68 2156.5,1206.75 2157.09,1206.82 2157.68,1205.82 2158.26,1202.29 \"/>\n<path clip-path=\"url(#clip362)\" d=\"M986.025 1213.36 L986.612 1213.36 L987.198 1213.36 L987.785 1213.36 L988.371 1213.36 L988.957 1213.36 L989.544 1213.36 L990.13 1213.36 L990.717 1213.36 L991.303 1213.36 L991.889 1213.36 L992.476 1213.36 L993.062 1213.36 L993.649 1213.36 L994.235 1213.36 L994.822 1213.36 L995.408 1213.36 L995.994 1213.36 L996.581 1213.36 L997.167 1213.36 L997.754 1213.36 L998.34 1213.36 L998.926 1213.36 L999.513 1213.36 L1000.1 1213.36 L1000.69 1213.36 L1001.27 1213.36 L1001.86 1213.36 L1002.44 1213.36 L1003.03 1213.36 L1003.62 1213.36 L1004.2 1213.36 L1004.79 1213.36 L1005.38 1213.36 L1005.96 1213.36 L1006.55 1213.36 L1007.14 1213.36 L1007.72 1213.36 L1008.31 1213.36 L1008.9 1213.36 L1009.48 1213.36 L1010.07 1213.36 L1010.65 1213.36 L1011.24 1213.36 L1011.83 1213.36 L1012.41 1213.36 L1013 1213.36 L1013.59 1213.36 L1014.17 1213.36 L1014.76 1213.36 L1015.35 1213.36 L1015.93 1213.36 L1016.52 1213.36 L1017.11 1213.36 L1017.69 1213.36 L1018.28 1213.36 L1018.86 1213.36 L1019.45 1213.36 L1020.04 1213.36 L1020.62 1213.36 L1021.21 1213.36 L1021.8 1213.36 L1022.38 1213.36 L1022.97 1213.36 L1023.56 1213.36 L1024.14 1213.36 L1024.73 1213.36 L1025.32 1213.36 L1025.9 1213.36 L1026.49 1213.36 L1027.07 1213.36 L1027.66 1213.36 L1028.25 1213.36 L1028.83 1213.36 L1029.42 1213.36 L1030.01 1213.36 L1030.59 1213.36 L1031.18 1213.36 L1031.77 1213.36 L1032.35 1213.36 L1032.94 1213.36 L1033.52 1213.36 L1034.11 1213.36 L1034.7 1213.36 L1035.28 1213.36 L1035.87 1213.36 L1036.46 1213.36 L1037.04 1213.36 L1037.63 1213.36 L1038.22 1213.36 L1038.8 1213.36 L1039.39 1213.36 L1039.98 1213.36 L1040.56 1213.36 L1041.15 1213.36 L1041.73 1213.36 L1042.32 1213.36 L1042.91 1213.36 L1043.49 1213.36 L1044.08 1213.36 L1044.67 1213.36 L1045.25 1213.36 L1045.84 1213.36 L1046.43 1213.36 L1047.01 1213.36 L1047.6 1213.36 L1048.19 1213.36 L1048.77 1213.36 L1049.36 1213.36 L1049.94 1213.36 L1050.53 1213.36 L1051.12 1213.36 L1051.7 1213.36 L1052.29 1213.36 L1052.88 1213.36 L1053.46 1213.36 L1054.05 1213.36 L1054.64 1213.36 L1055.22 1213.36 L1055.81 1213.36 L1056.39 1213.36 L1056.98 1213.36 L1057.57 1213.36 L1058.15 1213.36 L1058.74 1213.36 L1059.33 1213.36 L1059.91 1213.36 L1060.5 1213.36 L1061.09 1213.36 L1061.67 1213.36 L1062.26 1213.36 L1062.85 1213.36 L1063.43 1213.36 L1064.02 1213.36 L1064.6 1213.36 L1065.19 1213.36 L1065.78 1213.36 L1066.36 1213.36 L1066.95 1213.36 L1067.54 1213.36 L1068.12 1213.36 L1068.71 1213.36 L1069.3 1213.36 L1069.88 1213.36 L1070.47 1213.36 L1071.06 1213.36 L1071.64 1213.36 L1072.23 1213.36 L1072.81 1213.36 L1073.4 1213.36 L1073.99 1213.36 L1074.57 1213.36 L1075.16 1213.36 L1075.75 1213.36 L1076.33 1213.36 L1076.92 1213.36 L1077.51 1213.36 L1078.09 1213.36 L1078.68 1213.36 L1079.26 1213.36 L1079.85 1213.36 L1080.44 1213.36 L1081.02 1213.36 L1081.61 1213.36 L1082.2 1213.36 L1082.78 1213.36 L1083.37 1213.36 L1083.96 1213.36 L1084.54 1213.36 L1085.13 1213.36 L1085.72 1213.36 L1086.3 1213.36 L1086.89 1213.36 L1087.47 1213.36 L1088.06 1213.36 L1088.65 1213.36 L1089.23 1213.36 L1089.82 1213.36 L1090.41 1213.36 L1090.99 1213.36 L1091.58 1213.36 L1092.17 1213.36 L1092.75 1213.36 L1093.34 1213.36 L1093.93 1213.36 L1094.51 1213.36 L1095.1 1213.36 L1095.68 1213.36 L1096.27 1213.36 L1096.86 1213.36 L1097.44 1213.36 L1098.03 1213.36 L1098.62 1213.36 L1099.2 1213.36 L1099.79 1213.36 L1100.38 1213.36 L1100.96 1213.36 L1101.55 1213.36 L1102.14 1213.36 L1102.72 1213.36 L1103.31 1213.36 L1103.89 1213.36 L1104.48 1213.36 L1105.07 1213.36 L1105.65 1213.36 L1106.24 1213.36 L1106.83 1213.36 L1107.41 1213.36 L1108 1213.36 L1108.59 1213.36 L1109.17 1213.36 L1109.76 1213.36 L1110.34 1213.36 L1110.93 1213.36 L1111.52 1213.36 L1112.1 1213.36 L1112.69 1213.36 L1113.28 1213.36 L1113.86 1213.36 L1114.45 1213.36 L1115.04 1213.36 L1115.62 1213.36 L1116.21 1213.36 L1116.8 1213.36 L1117.38 1213.36 L1117.97 1213.36 L1118.55 1213.36 L1119.14 1213.36 L1119.73 1213.36 L1120.31 1213.36 L1120.9 1213.36 L1121.49 1213.36 L1122.07 1213.36 L1122.66 1213.36 L1123.25 1213.36 L1123.83 1213.36 L1124.42 1213.36 L1125.01 1213.36 L1125.59 1213.36 L1126.18 1213.36 L1126.76 1213.36 L1127.35 1213.36 L1127.94 1213.36 L1128.52 1213.36 L1129.11 1213.36 L1129.7 1213.36 L1130.28 1213.36 L1130.87 1213.36 L1131.46 1213.36 L1132.04 1213.36 L1132.63 1213.36 L1133.21 1213.36 L1133.8 1213.36 L1134.39 1213.36 L1134.97 1213.36 L1135.56 1213.36 L1136.15 1213.36 L1136.73 1213.36 L1137.32 1213.36 L1137.91 1213.36 L1138.49 1213.36 L1139.08 1213.36 L1139.67 1213.36 L1140.25 1213.36 L1140.84 1213.36 L1141.42 1213.36 L1142.01 1213.36 L1142.6 1213.36 L1143.18 1213.36 L1143.77 1213.36 L1144.36 1213.36 L1144.94 1213.36 L1145.53 1213.36 L1146.12 1213.36 L1146.7 1213.36 L1147.29 1213.36 L1147.88 1213.36 L1148.46 1213.36 L1149.05 1213.36 L1149.63 1213.36 L1150.22 1213.36 L1150.81 1213.36 L1151.39 1213.36 L1151.98 1213.36 L1152.57 1213.36 L1153.15 1213.36 L1153.74 1213.36 L1154.33 1213.36 L1154.91 1213.36 L1155.5 1213.36 L1156.09 1213.36 L1156.67 1213.36 L1157.26 1213.36 L1157.84 1213.36 L1158.43 1213.36 L1159.02 1213.36 L1159.6 1213.36 L1160.19 1213.36 L1160.78 1213.36 L1161.36 1213.36 L1161.95 1213.36 L1162.54 1213.36 L1163.12 1213.36 L1163.71 1213.36 L1164.29 1213.36 L1164.88 1213.36 L1165.47 1213.36 L1166.05 1213.36 L1166.64 1213.36 L1167.23 1213.36 L1167.81 1213.36 L1168.4 1213.36 L1168.99 1213.36 L1169.57 1213.36 L1170.16 1213.36 L1170.75 1213.36 L1171.33 1213.36 L1171.92 1213.36 L1172.5 1213.36 L1173.09 1213.36 L1173.68 1213.36 L1174.26 1213.36 L1174.85 1213.36 L1175.44 1213.36 L1176.02 1213.36 L1176.61 1213.36 L1177.2 1213.36 L1177.78 1213.36 L1178.37 1213.36 L1178.96 1213.36 L1179.54 1213.36 L1180.13 1213.36 L1180.71 1213.36 L1181.3 1213.36 L1181.89 1213.36 L1182.47 1213.36 L1183.06 1213.36 L1183.65 1213.36 L1184.23 1213.36 L1184.82 1213.36 L1185.41 1213.36 L1185.99 1213.36 L1186.58 1213.36 L1187.16 1213.36 L1187.75 1213.36 L1188.34 1213.36 L1188.92 1213.36 L1189.51 1213.36 L1190.1 1213.36 L1190.68 1213.36 L1191.27 1213.36 L1191.86 1213.36 L1192.44 1213.36 L1193.03 1213.36 L1193.62 1213.36 L1194.2 1213.36 L1194.79 1213.36 L1195.37 1213.36 L1195.96 1213.36 L1196.55 1213.36 L1197.13 1213.36 L1197.72 1213.36 L1198.31 1213.36 L1198.89 1213.36 L1199.48 1213.36 L1200.07 1213.36 L1200.65 1213.36 L1201.24 1213.36 L1201.83 1213.36 L1202.41 1213.36 L1203 1213.36 L1203.58 1213.36 L1204.17 1213.36 L1204.76 1213.36 L1205.34 1213.36 L1205.93 1213.36 L1206.52 1213.36 L1207.1 1213.36 L1207.69 1213.36 L1208.28 1213.36 L1208.86 1213.36 L1209.45 1213.36 L1210.03 1213.36 L1210.62 1213.36 L1211.21 1213.36 L1211.79 1213.36 L1212.38 1213.36 L1212.97 1213.36 L1213.55 1213.36 L1214.14 1213.36 L1214.73 1213.36 L1215.31 1213.36 L1215.9 1213.36 L1216.49 1213.36 L1217.07 1213.36 L1217.66 1213.36 L1218.24 1213.36 L1218.83 1213.36 L1219.42 1213.36 L1220 1213.36 L1220.59 1213.36 L1221.18 1213.36 L1221.76 1213.36 L1222.35 1213.36 L1222.94 1213.36 L1223.52 1213.36 L1224.11 1213.36 L1224.7 1213.36 L1225.28 1213.36 L1225.87 1213.36 L1226.45 1213.36 L1227.04 1213.36 L1227.63 1213.36 L1228.21 1213.36 L1228.8 1213.36 L1229.39 1213.36 L1229.97 1213.36 L1230.56 1213.36 L1231.15 1213.36 L1231.73 1213.36 L1232.32 1213.36 L1232.91 1213.36 L1233.49 1213.36 L1234.08 1213.36 L1234.66 1213.36 L1235.25 1213.36 L1235.84 1213.36 L1236.42 1213.36 L1237.01 1213.36 L1237.6 1213.36 L1238.18 1213.36 L1238.77 1213.36 L1239.36 1213.36 L1239.94 1213.36 L1240.53 1213.36 L1241.11 1213.36 L1241.7 1213.36 L1242.29 1213.36 L1242.87 1213.36 L1243.46 1213.36 L1244.05 1213.36 L1244.63 1213.36 L1245.22 1213.36 L1245.81 1213.36 L1246.39 1213.36 L1246.98 1213.36 L1247.57 1213.36 L1248.15 1213.36 L1248.74 1213.36 L1249.32 1213.36 L1249.91 1213.36 L1250.5 1213.36 L1251.08 1213.36 L1251.67 1213.36 L1252.26 1213.36 L1252.84 1213.36 L1253.43 1213.36 L1254.02 1213.36 L1254.6 1213.36 L1255.19 1213.36 L1255.78 1213.36 L1256.36 1213.36 L1256.95 1213.36 L1257.53 1213.36 L1258.12 1213.36 L1258.71 1213.36 L1259.29 1213.36 L1259.88 1213.36 L1260.47 1213.36 L1261.05 1213.36 L1261.64 1213.36 L1262.23 1213.36 L1262.81 1213.36 L1263.4 1213.36 L1263.98 1213.36 L1264.57 1213.36 L1265.16 1213.36 L1265.74 1213.36 L1266.33 1213.36 L1266.92 1213.36 L1267.5 1213.36 L1268.09 1213.36 L1268.68 1213.36 L1269.26 1213.36 L1269.85 1213.36 L1270.44 1213.36 L1271.02 1213.36 L1271.61 1213.36 L1272.19 1213.36 L1272.78 1213.36 L1273.37 1213.36 L1273.95 1213.36 L1274.54 1213.36 L1275.13 1213.36 L1275.71 1213.36 L1276.3 1213.36 L1276.89 1213.36 L1277.47 1213.36 L1278.06 1213.36 L1278.65 1213.36 L1279.23 1213.36 L1279.82 1213.36 L1280.4 1213.36 L1280.99 1213.36 L1281.58 1213.36 L1282.16 1213.36 L1282.75 1213.36 L1283.34 1213.36 L1283.92 1213.36 L1284.51 1213.36 L1285.1 1213.36 L1285.68 1213.36 L1286.27 1213.36 L1286.86 1213.36 L1287.44 1213.36 L1288.03 1213.36 L1288.61 1213.36 L1289.2 1213.36 L1289.79 1213.36 L1290.37 1213.36 L1290.96 1213.36 L1291.55 1213.36 L1292.13 1213.36 L1292.72 1213.36 L1293.31 1213.36 L1293.89 1213.36 L1294.48 1213.36 L1295.06 1213.36 L1295.65 1213.36 L1296.24 1213.36 L1296.82 1213.36 L1297.41 1213.36 L1298 1213.36 L1298.58 1213.36 L1299.17 1213.36 L1299.76 1213.36 L1300.34 1213.36 L1300.93 1213.36 L1301.52 1213.36 L1302.1 1213.36 L1302.69 1213.36 L1303.27 1213.36 L1303.86 1213.36 L1304.45 1213.36 L1305.03 1213.36 L1305.62 1213.36 L1306.21 1213.36 L1306.79 1213.36 L1307.38 1213.36 L1307.97 1213.36 L1308.55 1213.36 L1309.14 1213.36 L1309.73 1213.36 L1310.31 1213.36 L1310.9 1213.36 L1311.48 1213.36 L1312.07 1213.36 L1312.66 1213.36 L1313.24 1213.36 L1313.83 1213.36 L1314.42 1213.36 L1315 1213.36 L1315.59 1213.36 L1316.18 1213.36 L1316.76 1213.36 L1317.35 1213.36 L1317.93 1213.36 L1318.52 1213.36 L1319.11 1213.36 L1319.69 1213.36 L1320.28 1213.36 L1320.87 1213.36 L1321.45 1213.36 L1322.04 1213.36 L1322.63 1213.36 L1323.21 1213.36 L1323.8 1213.36 L1324.39 1213.36 L1324.97 1213.36 L1325.56 1213.36 L1326.14 1213.36 L1326.73 1213.36 L1327.32 1213.36 L1327.9 1213.36 L1328.49 1213.36 L1329.08 1213.36 L1329.66 1213.36 L1330.25 1213.36 L1330.84 1213.36 L1331.42 1213.36 L1332.01 1213.36 L1332.6 1213.36 L1333.18 1213.36 L1333.77 1213.36 L1334.35 1213.36 L1334.94 1213.36 L1335.53 1213.36 L1336.11 1213.36 L1336.7 1213.36 L1337.29 1213.36 L1337.87 1213.36 L1338.46 1213.36 L1339.05 1213.36 L1339.63 1213.36 L1340.22 1213.36 L1340.8 1213.36 L1341.39 1213.36 L1341.98 1213.36 L1342.56 1213.36 L1343.15 1213.36 L1343.74 1213.36 L1344.32 1213.36 L1344.91 1213.36 L1345.5 1213.36 L1346.08 1213.36 L1346.67 1213.36 L1347.26 1213.36 L1347.84 1213.36 L1348.43 1213.36 L1349.01 1213.36 L1349.6 1213.36 L1350.19 1213.36 L1350.77 1213.36 L1351.36 1213.36 L1351.95 1213.36 L1352.53 1213.36 L1353.12 1213.36 L1353.71 1213.36 L1354.29 1213.36 L1354.88 1213.36 L1355.47 1213.36 L1356.05 1213.36 L1356.64 1213.36 L1357.22 1213.36 L1357.81 1213.36 L1358.4 1213.36 L1358.98 1213.36 L1359.57 1213.36 L1360.16 1213.36 L1360.74 1213.36 L1361.33 1213.36 L1361.92 1213.36 L1362.5 1213.36 L1363.09 1213.36 L1363.68 1213.36 L1364.26 1213.36 L1364.85 1213.36 L1365.43 1213.36 L1366.02 1213.36 L1366.61 1213.36 L1367.19 1213.36 L1367.78 1213.36 L1368.37 1213.36 L1368.95 1213.36 L1369.54 1213.36 L1370.13 1213.36 L1370.71 1213.36 L1371.3 1213.36 L1371.88 1213.36 L1372.47 1213.36 L1373.06 1213.36 L1373.64 1213.36 L1374.23 1213.36 L1374.82 1213.36 L1375.4 1213.36 L1375.99 1213.36 L1376.58 1213.36 L1377.16 1213.36 L1377.75 1213.36 L1378.34 1213.36 L1378.92 1213.36 L1379.51 1213.36 L1380.09 1213.36 L1380.68 1213.36 L1381.27 1213.36 L1381.85 1213.36 L1382.44 1213.36 L1383.03 1213.36 L1383.61 1213.36 L1384.2 1213.36 L1384.79 1213.36 L1385.37 1213.36 L1385.96 1213.36 L1386.55 1213.36 L1387.13 1213.36 L1387.72 1213.36 L1388.3 1213.36 L1388.89 1213.36 L1389.48 1213.36 L1390.06 1213.36 L1390.65 1213.36 L1391.24 1213.36 L1391.82 1213.36 L1392.41 1213.36 L1393 1213.36 L1393.58 1213.36 L1394.17 1213.36 L1394.75 1213.36 L1395.34 1213.36 L1395.93 1213.36 L1396.51 1213.36 L1397.1 1213.36 L1397.69 1213.36 L1398.27 1213.36 L1398.86 1213.36 L1399.45 1213.36 L1400.03 1213.36 L1400.62 1213.36 L1401.21 1213.36 L1401.79 1213.36 L1402.38 1213.36 L1402.96 1213.36 L1403.55 1213.36 L1404.14 1213.36 L1404.72 1213.36 L1405.31 1213.36 L1405.9 1213.36 L1406.48 1213.36 L1407.07 1213.36 L1407.66 1213.36 L1408.24 1213.36 L1408.83 1213.36 L1409.42 1213.36 L1410 1213.36 L1410.59 1213.36 L1411.17 1213.36 L1411.76 1213.36 L1412.35 1213.36 L1412.93 1213.36 L1413.52 1213.36 L1414.11 1213.36 L1414.69 1213.36 L1415.28 1213.36 L1415.87 1213.36 L1416.45 1213.36 L1417.04 1213.36 L1417.63 1213.36 L1418.21 1213.36 L1418.8 1213.36 L1419.38 1213.36 L1419.97 1213.36 L1420.56 1213.36 L1421.14 1213.36 L1421.73 1213.36 L1422.32 1213.36 L1422.9 1213.36 L1423.49 1213.36 L1424.08 1213.36 L1424.66 1213.36 L1425.25 1213.36 L1425.83 1213.36 L1426.42 1213.36 L1427.01 1213.36 L1427.59 1213.36 L1428.18 1213.36 L1428.77 1213.36 L1429.35 1213.36 L1429.94 1213.36 L1430.53 1213.36 L1431.11 1213.36 L1431.7 1213.36 L1432.29 1213.36 L1432.87 1213.36 L1433.46 1213.36 L1434.04 1213.36 L1434.63 1213.36 L1435.22 1213.36 L1435.8 1213.36 L1436.39 1213.36 L1436.98 1213.36 L1437.56 1213.36 L1438.15 1213.36 L1438.74 1213.36 L1439.32 1213.36 L1439.91 1213.36 L1440.5 1213.36 L1441.08 1213.36 L1441.67 1213.36 L1442.25 1213.36 L1442.84 1213.36 L1443.43 1213.36 L1444.01 1213.36 L1444.6 1213.36 L1445.19 1213.36 L1445.77 1213.36 L1446.36 1213.36 L1446.95 1213.36 L1447.53 1213.36 L1448.12 1213.36 L1448.7 1213.36 L1449.29 1213.36 L1449.88 1213.36 L1450.46 1213.36 L1451.05 1213.36 L1451.64 1213.36 L1452.22 1213.36 L1452.81 1213.36 L1453.4 1213.36 L1453.98 1213.36 L1454.57 1213.36 L1455.16 1213.36 L1455.74 1213.36 L1456.33 1213.36 L1456.91 1213.36 L1457.5 1213.36 L1458.09 1213.36 L1458.67 1213.36 L1459.26 1213.36 L1459.85 1213.36 L1460.43 1213.36 L1461.02 1213.36 L1461.61 1213.36 L1462.19 1213.36 L1462.78 1213.36 L1463.37 1213.36 L1463.95 1213.36 L1464.54 1213.36 L1465.12 1213.36 L1465.71 1213.36 L1466.3 1213.36 L1466.88 1213.36 L1467.47 1213.36 L1468.06 1213.36 L1468.64 1213.36 L1469.23 1213.36 L1469.82 1213.36 L1470.4 1213.36 L1470.99 1213.36 L1471.57 1213.36 L1472.16 1213.36 L1472.75 1213.36 L1473.33 1213.36 L1473.92 1213.36 L1474.51 1213.36 L1475.09 1213.36 L1475.68 1213.36 L1476.27 1213.36 L1476.85 1213.36 L1477.44 1213.36 L1478.03 1213.36 L1478.61 1213.36 L1479.2 1213.36 L1479.78 1213.36 L1480.37 1213.36 L1480.96 1213.36 L1481.54 1213.36 L1482.13 1213.36 L1482.72 1213.36 L1483.3 1213.36 L1483.89 1213.36 L1484.48 1213.36 L1485.06 1213.36 L1485.65 1213.36 L1486.24 1213.36 L1486.82 1213.36 L1487.41 1213.36 L1487.99 1213.36 L1488.58 1213.36 L1489.17 1213.36 L1489.75 1213.36 L1490.34 1213.36 L1490.93 1213.36 L1491.51 1213.36 L1492.1 1213.36 L1492.69 1213.36 L1493.27 1213.36 L1493.86 1213.36 L1494.45 1213.36 L1495.03 1213.36 L1495.62 1213.36 L1496.2 1213.36 L1496.79 1213.36 L1497.38 1213.36 L1497.96 1213.36 L1498.55 1213.36 L1499.14 1213.36 L1499.72 1213.36 L1500.31 1213.36 L1500.9 1213.36 L1501.48 1213.36 L1502.07 1213.36 L1502.65 1213.36 L1503.24 1213.36 L1503.83 1213.36 L1504.41 1213.36 L1505 1213.36 L1505.59 1213.36 L1506.17 1213.36 L1506.76 1213.36 L1507.35 1213.36 L1507.93 1213.36 L1508.52 1213.36 L1509.11 1213.36 L1509.69 1213.36 L1510.28 1213.36 L1510.86 1213.36 L1511.45 1213.36 L1512.04 1213.36 L1512.62 1213.36 L1513.21 1213.36 L1513.8 1213.36 L1514.38 1213.36 L1514.97 1213.36 L1515.56 1213.36 L1516.14 1213.36 L1516.73 1213.36 L1517.32 1213.36 L1517.9 1213.36 L1518.49 1213.36 L1519.07 1213.36 L1519.66 1213.36 L1520.25 1213.36 L1520.83 1213.36 L1521.42 1213.36 L1522.01 1213.36 L1522.59 1213.36 L1523.18 1213.36 L1523.77 1213.36 L1524.35 1213.36 L1524.94 1213.36 L1525.52 1213.36 L1526.11 1213.36 L1526.7 1213.36 L1527.28 1213.36 L1527.87 1213.36 L1528.46 1213.36 L1529.04 1213.36 L1529.63 1213.36 L1530.22 1213.36 L1530.8 1213.36 L1531.39 1213.36 L1531.98 1213.36 L1532.56 1213.36 L1533.15 1213.36 L1533.73 1213.36 L1534.32 1213.36 L1534.91 1213.36 L1535.49 1213.36 L1536.08 1213.36 L1536.67 1213.36 L1537.25 1213.36 L1537.84 1213.36 L1538.43 1213.36 L1539.01 1213.36 L1539.6 1213.36 L1540.19 1213.36 L1540.77 1213.36 L1541.36 1213.36 L1541.94 1213.36 L1542.53 1213.36 L1543.12 1213.36 L1543.7 1213.36 L1544.29 1213.36 L1544.88 1213.36 L1545.46 1213.36 L1546.05 1213.36 L1546.64 1213.36 L1547.22 1213.36 L1547.81 1213.36 L1548.4 1213.36 L1548.98 1213.36 L1549.57 1213.36 L1550.15 1213.36 L1550.74 1213.36 L1551.33 1213.36 L1551.91 1213.36 L1552.5 1213.36 L1553.09 1213.36 L1553.67 1213.36 L1554.26 1213.36 L1554.85 1213.36 L1555.43 1213.36 L1556.02 1213.36 L1556.6 1213.36 L1557.19 1213.36 L1557.78 1213.36 L1558.36 1213.36 L1558.95 1213.36 L1559.54 1213.36 L1560.12 1213.36 L1560.71 1213.36 L1561.3 1213.36 L1561.88 1213.36 L1562.47 1213.36 L1563.06 1213.36 L1563.64 1213.36 L1564.23 1213.36 L1564.81 1213.36 L1565.4 1213.36 L1565.99 1213.36 L1566.57 1213.36 L1567.16 1213.36 L1567.75 1213.36 L1568.33 1213.36 L1568.92 1213.36 L1569.51 1213.36 L1570.09 1213.36 L1570.68 1213.36 L1571.27 1213.36 L1571.85 1213.36 L1572.44 1213.36 L1573.02 1213.36 L1573.61 1213.36 L1574.2 1213.36 L1574.78 1213.36 L1575.37 1213.36 L1575.96 1213.36 L1576.54 1213.36 L1577.13 1213.36 L1577.72 1213.36 L1578.3 1213.36 L1578.89 1213.36 L1579.47 1213.36 L1580.06 1213.36 L1580.65 1213.36 L1581.23 1213.36 L1581.82 1213.36 L1582.41 1213.36 L1582.99 1213.36 L1583.58 1213.36 L1584.17 1213.36 L1584.75 1213.36 L1585.34 1213.36 L1585.93 1213.36 L1586.51 1213.36 L1587.1 1213.36 L1587.68 1213.36 L1588.27 1213.36 L1588.86 1213.36 L1589.44 1213.36 L1590.03 1213.36 L1590.62 1213.36 L1591.2 1213.36 L1591.79 1213.36 L1592.38 1213.36 L1592.96 1213.36 L1593.55 1213.36 L1594.14 1213.36 L1594.72 1213.36 L1595.31 1213.36 L1595.89 1213.36 L1596.48 1213.36 L1597.07 1213.36 L1597.65 1213.36 L1598.24 1213.36 L1598.83 1213.36 L1599.41 1213.36 L1600 1213.36 L1600.59 1213.36 L1601.17 1213.36 L1601.76 1213.36 L1602.34 1213.36 L1602.93 1213.36 L1603.52 1213.36 L1604.1 1213.36 L1604.69 1213.36 L1605.28 1213.36 L1605.86 1213.36 L1606.45 1213.36 L1607.04 1213.36 L1607.62 1213.36 L1608.21 1213.36 L1608.8 1213.36 L1609.38 1213.36 L1609.97 1213.36 L1610.55 1213.36 L1611.14 1213.36 L1611.73 1213.36 L1612.31 1213.36 L1612.9 1213.36 L1613.49 1213.36 L1614.07 1213.36 L1614.66 1213.36 L1615.25 1213.36 L1615.83 1213.36 L1616.42 1213.36 L1617.01 1213.36 L1617.59 1213.36 L1618.18 1213.36 L1618.76 1213.36 L1619.35 1213.36 L1619.94 1213.36 L1620.52 1213.36 L1621.11 1213.36 L1621.7 1213.36 L1622.28 1213.36 L1622.87 1213.36 L1623.46 1213.36 L1624.04 1213.36 L1624.63 1213.36 L1625.22 1213.36 L1625.8 1213.36 L1626.39 1213.36 L1626.97 1213.36 L1627.56 1213.36 L1628.15 1213.36 L1628.73 1213.36 L1629.32 1213.36 L1629.91 1213.36 L1630.49 1213.36 L1631.08 1213.36 L1631.67 1213.36 L1632.25 1213.36 L1632.84 1213.36 L1633.42 1213.36 L1634.01 1213.36 L1634.6 1213.36 L1635.18 1213.36 L1635.77 1213.36 L1636.36 1213.36 L1636.94 1213.36 L1637.53 1213.36 L1638.12 1213.36 L1638.7 1213.36 L1639.29 1213.36 L1639.88 1213.36 L1640.46 1213.36 L1641.05 1213.36 L1641.63 1213.36 L1642.22 1213.36 L1642.81 1213.36 L1643.39 1213.36 L1643.98 1213.36 L1644.57 1213.36 L1645.15 1213.36 L1645.74 1213.36 L1646.33 1213.36 L1646.91 1213.36 L1647.5 1213.36 L1648.09 1213.36 L1648.67 1213.36 L1649.26 1213.36 L1649.84 1213.36 L1650.43 1213.36 L1651.02 1213.36 L1651.6 1213.36 L1652.19 1213.36 L1652.78 1213.36 L1653.36 1213.36 L1653.95 1213.36 L1654.54 1213.36 L1655.12 1213.36 L1655.71 1213.36 L1656.29 1213.36 L1656.88 1213.36 L1657.47 1213.36 L1658.05 1213.36 L1658.64 1213.36 L1659.23 1213.36 L1659.81 1213.36 L1660.4 1213.36 L1660.99 1213.36 L1661.57 1213.36 L1662.16 1213.36 L1662.75 1213.36 L1663.33 1213.36 L1663.92 1213.36 L1664.5 1213.36 L1665.09 1213.36 L1665.68 1213.36 L1666.26 1213.36 L1666.85 1213.36 L1667.44 1213.36 L1668.02 1213.36 L1668.61 1213.36 L1669.2 1213.36 L1669.78 1213.36 L1670.37 1213.36 L1670.96 1213.36 L1671.54 1213.36 L1672.13 1213.36 L1672.71 1213.36 L1673.3 1213.36 L1673.89 1213.36 L1674.47 1213.36 L1675.06 1213.36 L1675.65 1213.36 L1676.23 1213.36 L1676.82 1213.36 L1677.41 1213.36 L1677.99 1213.36 L1678.58 1213.36 L1679.17 1213.36 L1679.75 1213.36 L1680.34 1213.36 L1680.92 1213.36 L1681.51 1213.36 L1682.1 1213.36 L1682.68 1213.36 L1683.27 1213.36 L1683.86 1213.36 L1684.44 1213.36 L1685.03 1213.36 L1685.62 1213.36 L1686.2 1213.36 L1686.79 1213.36 L1687.37 1213.36 L1687.96 1213.36 L1688.55 1213.36 L1689.13 1213.36 L1689.72 1213.36 L1690.31 1213.36 L1690.89 1213.36 L1691.48 1213.36 L1692.07 1213.36 L1692.65 1213.36 L1693.24 1213.36 L1693.83 1213.36 L1694.41 1213.36 L1695 1213.36 L1695.58 1213.36 L1696.17 1213.36 L1696.76 1213.36 L1697.34 1213.36 L1697.93 1213.36 L1698.52 1213.36 L1699.1 1213.36 L1699.69 1213.36 L1700.28 1213.36 L1700.86 1213.36 L1701.45 1213.36 L1702.04 1213.36 L1702.62 1213.36 L1703.21 1213.36 L1703.79 1213.36 L1704.38 1213.36 L1704.97 1213.36 L1705.55 1213.36 L1706.14 1213.36 L1706.73 1213.36 L1707.31 1213.36 L1707.9 1213.36 L1708.49 1213.36 L1709.07 1213.36 L1709.66 1213.36 L1710.24 1213.36 L1710.83 1213.36 L1711.42 1213.36 L1712 1213.36 L1712.59 1213.36 L1713.18 1213.36 L1713.76 1213.36 L1714.35 1213.36 L1714.94 1213.36 L1715.52 1213.36 L1716.11 1213.36 L1716.7 1213.36 L1717.28 1213.36 L1717.87 1213.36 L1718.45 1213.36 L1719.04 1213.36 L1719.63 1213.36 L1720.21 1213.36 L1720.8 1213.36 L1721.39 1213.36 L1721.97 1213.36 L1722.56 1213.36 L1723.15 1213.36 L1723.73 1213.36 L1724.32 1213.36 L1724.91 1213.36 L1725.49 1213.36 L1726.08 1213.36 L1726.66 1213.36 L1727.25 1213.36 L1727.84 1213.36 L1728.42 1213.36 L1729.01 1213.36 L1729.6 1213.36 L1730.18 1213.36 L1730.77 1213.36 L1731.36 1213.36 L1731.94 1213.36 L1732.53 1213.36 L1733.11 1213.36 L1733.7 1213.36 L1734.29 1213.36 L1734.87 1213.36 L1735.46 1213.36 L1736.05 1213.36 L1736.63 1213.36 L1737.22 1213.36 L1737.81 1213.36 L1738.39 1213.36 L1738.98 1213.36 L1739.57 1213.36 L1740.15 1213.36 L1740.74 1213.36 L1741.32 1213.36 L1741.91 1213.36 L1742.5 1213.36 L1743.08 1213.36 L1743.67 1213.36 L1744.26 1213.36 L1744.84 1213.36 L1745.43 1213.36 L1746.02 1213.36 L1746.6 1213.36 L1747.19 1213.36 L1747.78 1213.36 L1748.36 1213.36 L1748.95 1213.36 L1749.53 1213.36 L1750.12 1213.36 L1750.71 1213.36 L1751.29 1213.36 L1751.88 1213.36 L1752.47 1213.36 L1753.05 1213.36 L1753.64 1213.36 L1754.23 1213.36 L1754.81 1213.36 L1755.4 1213.36 L1755.99 1213.36 L1756.57 1213.36 L1757.16 1213.36 L1757.74 1213.36 L1758.33 1213.36 L1758.92 1213.36 L1759.5 1213.36 L1760.09 1213.36 L1760.68 1213.36 L1761.26 1213.36 L1761.85 1213.36 L1762.44 1213.36 L1763.02 1213.36 L1763.61 1213.36 L1764.19 1213.36 L1764.78 1213.36 L1765.37 1213.36 L1765.95 1213.36 L1766.54 1213.36 L1767.13 1213.36 L1767.71 1213.36 L1768.3 1213.36 L1768.89 1213.36 L1769.47 1213.36 L1770.06 1213.36 L1770.65 1213.36 L1771.23 1213.36 L1771.82 1213.36 L1772.4 1213.36 L1772.99 1213.36 L1773.58 1213.36 L1774.16 1213.36 L1774.75 1213.36 L1775.34 1213.36 L1775.92 1213.36 L1776.51 1213.36 L1777.1 1213.36 L1777.68 1213.36 L1778.27 1213.36 L1778.86 1213.36 L1779.44 1213.36 L1780.03 1213.36 L1780.61 1213.36 L1781.2 1213.36 L1781.79 1213.36 L1782.37 1213.36 L1782.96 1213.36 L1783.55 1213.36 L1784.13 1213.36 L1784.72 1213.36 L1785.31 1213.36 L1785.89 1213.36 L1786.48 1213.36 L1787.06 1213.36 L1787.65 1213.36 L1788.24 1213.36 L1788.82 1213.36 L1789.41 1213.36 L1790 1213.36 L1790.58 1213.36 L1791.17 1213.36 L1791.76 1213.36 L1792.34 1213.36 L1792.93 1213.36 L1793.52 1213.36 L1794.1 1213.36 L1794.69 1213.36 L1795.27 1213.36 L1795.86 1213.36 L1796.45 1213.36 L1797.03 1213.36 L1797.62 1213.36 L1798.21 1213.36 L1798.79 1213.36 L1799.38 1213.36 L1799.97 1213.36 L1800.55 1213.36 L1801.14 1213.36 L1801.73 1213.36 L1802.31 1213.36 L1802.9 1213.36 L1803.48 1213.36 L1804.07 1213.36 L1804.66 1213.36 L1805.24 1213.36 L1805.83 1213.36 L1806.42 1213.36 L1807 1213.36 L1807.59 1213.36 L1808.18 1213.36 L1808.76 1213.36 L1809.35 1213.36 L1809.94 1213.36 L1810.52 1213.36 L1811.11 1213.36 L1811.69 1213.36 L1812.28 1213.36 L1812.87 1213.36 L1813.45 1213.36 L1814.04 1213.36 L1814.63 1213.36 L1815.21 1213.36 L1815.8 1213.36 L1816.39 1213.36 L1816.97 1213.36 L1817.56 1213.36 L1818.14 1213.36 L1818.73 1213.36 L1819.32 1213.36 L1819.9 1213.36 L1820.49 1213.36 L1821.08 1213.36 L1821.66 1213.36 L1822.25 1213.36 L1822.84 1213.36 L1823.42 1213.36 L1824.01 1213.36 L1824.6 1213.36 L1825.18 1213.36 L1825.77 1213.36 L1826.35 1213.36 L1826.94 1213.36 L1827.53 1213.36 L1828.11 1213.36 L1828.7 1213.36 L1829.29 1213.36 L1829.87 1213.36 L1830.46 1213.36 L1831.05 1213.36 L1831.63 1213.36 L1832.22 1213.36 L1832.81 1213.36 L1833.39 1213.36 L1833.98 1213.36 L1834.56 1213.36 L1835.15 1213.36 L1835.74 1213.36 L1836.32 1213.36 L1836.91 1213.36 L1837.5 1213.36 L1838.08 1213.36 L1838.67 1213.36 L1839.26 1213.36 L1839.84 1213.36 L1840.43 1213.36 L1841.01 1213.36 L1841.6 1213.36 L1842.19 1213.36 L1842.77 1213.36 L1843.36 1213.36 L1843.95 1213.36 L1844.53 1213.36 L1845.12 1213.36 L1845.71 1213.36 L1846.29 1213.36 L1846.88 1213.36 L1847.47 1213.36 L1848.05 1213.36 L1848.64 1213.36 L1849.22 1213.36 L1849.81 1213.36 L1850.4 1213.36 L1850.98 1213.36 L1851.57 1213.36 L1852.16 1213.36 L1852.74 1213.36 L1853.33 1213.36 L1853.92 1213.36 L1854.5 1213.36 L1855.09 1213.36 L1855.68 1213.36 L1856.26 1213.36 L1856.85 1213.36 L1857.43 1213.36 L1858.02 1213.36 L1858.61 1213.36 L1859.19 1213.36 L1859.78 1213.36 L1860.37 1213.36 L1860.95 1213.36 L1861.54 1213.36 L1862.13 1213.36 L1862.71 1213.36 L1863.3 1213.36 L1863.88 1213.36 L1864.47 1213.36 L1865.06 1213.36 L1865.64 1213.36 L1866.23 1213.36 L1866.82 1213.36 L1867.4 1213.36 L1867.99 1213.36 L1868.58 1213.36 L1869.16 1213.36 L1869.75 1213.36 L1870.34 1213.36 L1870.92 1213.36 L1871.51 1213.36 L1872.09 1213.36 L1872.68 1213.36 L1873.27 1213.36 L1873.85 1213.36 L1874.44 1213.36 L1875.03 1213.36 L1875.61 1213.36 L1876.2 1213.36 L1876.79 1213.36 L1877.37 1213.36 L1877.96 1213.36 L1878.55 1213.36 L1879.13 1213.36 L1879.72 1213.36 L1880.3 1213.36 L1880.89 1213.36 L1881.48 1213.36 L1882.06 1213.36 L1882.65 1213.36 L1883.24 1213.36 L1883.82 1213.36 L1884.41 1213.36 L1885 1213.36 L1885.58 1213.36 L1886.17 1213.36 L1886.76 1213.36 L1887.34 1213.36 L1887.93 1213.36 L1888.51 1213.36 L1889.1 1213.36 L1889.69 1213.36 L1890.27 1213.36 L1890.86 1213.36 L1891.45 1213.36 L1892.03 1213.36 L1892.62 1213.36 L1893.21 1213.36 L1893.79 1213.36 L1894.38 1213.36 L1894.96 1213.36 L1895.55 1213.36 L1896.14 1213.36 L1896.72 1213.36 L1897.31 1213.36 L1897.9 1213.36 L1898.48 1213.36 L1899.07 1213.36 L1899.66 1213.36 L1900.24 1213.36 L1900.83 1213.36 L1901.42 1213.36 L1902 1213.36 L1902.59 1213.36 L1903.17 1213.36 L1903.76 1213.36 L1904.35 1213.36 L1904.93 1213.36 L1905.52 1213.36 L1906.11 1213.36 L1906.69 1213.36 L1907.28 1213.36 L1907.87 1213.36 L1908.45 1213.36 L1909.04 1213.36 L1909.63 1213.36 L1910.21 1213.36 L1910.8 1213.36 L1911.38 1213.36 L1911.97 1213.36 L1912.56 1213.36 L1913.14 1213.36 L1913.73 1213.36 L1914.32 1213.36 L1914.9 1213.36 L1915.49 1213.36 L1916.08 1213.36 L1916.66 1213.36 L1917.25 1213.36 L1917.83 1213.36 L1918.42 1213.36 L1919.01 1213.36 L1919.59 1213.36 L1920.18 1213.36 L1920.77 1213.36 L1921.35 1213.36 L1921.94 1213.36 L1922.53 1213.36 L1923.11 1213.36 L1923.7 1213.36 L1924.29 1213.36 L1924.87 1213.36 L1925.46 1213.36 L1926.04 1213.36 L1926.63 1213.36 L1927.22 1213.36 L1927.8 1213.36 L1928.39 1213.36 L1928.98 1213.36 L1929.56 1213.36 L1930.15 1213.36 L1930.74 1213.36 L1931.32 1213.36 L1931.91 1213.36 L1932.5 1213.36 L1933.08 1213.36 L1933.67 1213.36 L1934.25 1213.36 L1934.84 1213.36 L1935.43 1213.36 L1936.01 1213.36 L1936.6 1213.36 L1937.19 1213.36 L1937.77 1213.36 L1938.36 1213.36 L1938.95 1213.36 L1939.53 1213.36 L1940.12 1213.36 L1940.71 1213.36 L1941.29 1213.36 L1941.88 1213.36 L1942.46 1213.36 L1943.05 1213.36 L1943.64 1213.36 L1944.22 1213.36 L1944.81 1213.36 L1945.4 1213.36 L1945.98 1213.36 L1946.57 1213.36 L1947.16 1213.36 L1947.74 1213.36 L1948.33 1213.36 L1948.91 1213.36 L1949.5 1213.36 L1950.09 1213.36 L1950.67 1213.36 L1951.26 1213.36 L1951.85 1213.36 L1952.43 1213.36 L1953.02 1213.36 L1953.61 1213.36 L1954.19 1213.36 L1954.78 1213.36 L1955.37 1213.36 L1955.95 1213.36 L1956.54 1213.36 L1957.12 1213.36 L1957.71 1213.36 L1958.3 1213.36 L1958.88 1213.36 L1959.47 1213.36 L1960.06 1213.36 L1960.64 1213.36 L1961.23 1213.36 L1961.82 1213.36 L1962.4 1213.36 L1962.99 1213.36 L1963.58 1213.36 L1964.16 1213.36 L1964.75 1213.36 L1965.33 1213.36 L1965.92 1213.36 L1966.51 1213.36 L1967.09 1213.36 L1967.68 1213.36 L1968.27 1213.36 L1968.85 1213.36 L1969.44 1213.36 L1970.03 1213.36 L1970.61 1213.36 L1971.2 1213.36 L1971.78 1213.36 L1972.37 1213.36 L1972.96 1213.36 L1973.54 1213.36 L1974.13 1213.36 L1974.72 1213.36 L1975.3 1213.36 L1975.89 1213.36 L1976.48 1213.36 L1977.06 1213.36 L1977.65 1213.36 L1978.24 1213.36 L1978.82 1213.36 L1979.41 1213.36 L1979.99 1213.36 L1980.58 1213.36 L1981.17 1213.36 L1981.75 1213.36 L1982.34 1213.36 L1982.93 1213.36 L1983.51 1213.36 L1984.1 1213.36 L1984.69 1213.36 L1985.27 1213.36 L1985.86 1213.36 L1986.45 1213.36 L1987.03 1213.36 L1987.62 1213.36 L1988.2 1213.36 L1988.79 1213.36 L1989.38 1213.36 L1989.96 1213.36 L1990.55 1213.36 L1991.14 1213.36 L1991.72 1213.36 L1992.31 1213.36 L1992.9 1213.36 L1993.48 1213.36 L1994.07 1213.36 L1994.65 1213.36 L1995.24 1213.36 L1995.83 1213.36 L1996.41 1213.36 L1997 1213.36 L1997.59 1213.36 L1998.17 1213.36 L1998.76 1213.36 L1999.35 1213.36 L1999.93 1213.36 L2000.52 1213.36 L2001.11 1213.36 L2001.69 1213.36 L2002.28 1213.36 L2002.86 1213.36 L2003.45 1213.36 L2004.04 1213.36 L2004.62 1213.36 L2005.21 1213.36 L2005.8 1213.36 L2006.38 1213.36 L2006.97 1213.36 L2007.56 1213.36 L2008.14 1213.36 L2008.73 1213.36 L2009.32 1213.36 L2009.9 1213.36 L2010.49 1213.36 L2011.07 1213.36 L2011.66 1213.36 L2012.25 1213.36 L2012.83 1213.36 L2013.42 1213.36 L2014.01 1213.36 L2014.59 1213.36 L2015.18 1213.36 L2015.77 1213.36 L2016.35 1213.36 L2016.94 1213.36 L2017.53 1213.36 L2018.11 1213.36 L2018.7 1213.36 L2019.28 1213.36 L2019.87 1213.36 L2020.46 1213.36 L2021.04 1213.36 L2021.63 1213.36 L2022.22 1213.36 L2022.8 1213.36 L2023.39 1213.36 L2023.98 1213.36 L2024.56 1213.36 L2025.15 1213.36 L2025.73 1213.36 L2026.32 1213.36 L2026.91 1213.36 L2027.49 1213.36 L2028.08 1213.36 L2028.67 1213.36 L2029.25 1213.36 L2029.84 1213.36 L2030.43 1213.36 L2031.01 1213.36 L2031.6 1213.36 L2032.19 1213.36 L2032.77 1213.36 L2033.36 1213.36 L2033.94 1213.36 L2034.53 1213.36 L2035.12 1213.36 L2035.7 1213.36 L2036.29 1213.36 L2036.88 1213.36 L2037.46 1213.36 L2038.05 1213.36 L2038.64 1213.36 L2039.22 1213.36 L2039.81 1213.36 L2040.4 1213.36 L2040.98 1213.36 L2041.57 1213.36 L2042.15 1213.36 L2042.74 1213.36 L2043.33 1213.36 L2043.91 1213.36 L2044.5 1213.36 L2045.09 1213.36 L2045.67 1213.36 L2046.26 1213.36 L2046.85 1213.36 L2047.43 1213.36 L2048.02 1213.36 L2048.6 1213.36 L2049.19 1213.36 L2049.78 1213.36 L2050.36 1213.36 L2050.95 1213.36 L2051.54 1213.36 L2052.12 1213.36 L2052.71 1213.36 L2053.3 1213.36 L2053.88 1213.36 L2054.47 1213.36 L2055.06 1213.36 L2055.64 1213.36 L2056.23 1213.36 L2056.81 1213.36 L2057.4 1213.36 L2057.99 1213.36 L2058.57 1213.36 L2059.16 1213.36 L2059.75 1213.36 L2060.33 1213.36 L2060.92 1213.36 L2061.51 1213.36 L2062.09 1213.36 L2062.68 1213.36 L2063.27 1213.36 L2063.85 1213.36 L2064.44 1213.36 L2065.02 1213.36 L2065.61 1213.36 L2066.2 1213.36 L2066.78 1213.36 L2067.37 1213.36 L2067.96 1213.36 L2068.54 1213.36 L2069.13 1213.36 L2069.72 1213.36 L2070.3 1213.36 L2070.89 1213.36 L2071.48 1213.36 L2072.06 1213.36 L2072.65 1213.36 L2073.23 1213.36 L2073.82 1213.36 L2074.41 1213.36 L2074.99 1213.36 L2075.58 1213.36 L2076.17 1213.36 L2076.75 1213.36 L2077.34 1213.36 L2077.93 1213.36 L2078.51 1213.36 L2079.1 1213.36 L2079.68 1213.36 L2080.27 1213.36 L2080.86 1213.36 L2081.44 1213.36 L2082.03 1213.36 L2082.62 1213.36 L2083.2 1213.36 L2083.79 1213.36 L2084.38 1213.36 L2084.96 1213.36 L2085.55 1213.36 L2086.14 1213.36 L2086.72 1213.36 L2087.31 1213.36 L2087.89 1213.36 L2088.48 1213.36 L2089.07 1213.36 L2089.65 1213.36 L2090.24 1213.36 L2090.83 1213.36 L2091.41 1213.36 L2092 1213.36 L2092.59 1213.36 L2093.17 1213.36 L2093.76 1213.36 L2094.35 1213.36 L2094.93 1213.36 L2095.52 1213.36 L2096.1 1213.36 L2096.69 1213.36 L2097.28 1213.36 L2097.86 1213.36 L2098.45 1213.36 L2099.04 1213.36 L2099.62 1213.36 L2100.21 1213.36 L2100.8 1213.36 L2101.38 1213.36 L2101.97 1213.36 L2102.55 1213.36 L2103.14 1213.36 L2103.73 1213.36 L2104.31 1213.36 L2104.9 1213.36 L2105.49 1213.36 L2106.07 1213.36 L2106.66 1213.36 L2107.25 1213.36 L2107.83 1213.36 L2108.42 1213.36 L2109.01 1213.36 L2109.59 1213.36 L2110.18 1213.36 L2110.76 1213.36 L2111.35 1213.36 L2111.94 1213.36 L2112.52 1213.36 L2113.11 1213.36 L2113.7 1213.36 L2114.28 1213.36 L2114.87 1213.36 L2115.46 1213.36 L2116.04 1213.36 L2116.63 1213.36 L2117.22 1213.36 L2117.8 1213.36 L2118.39 1213.36 L2118.97 1213.36 L2119.56 1213.36 L2120.15 1213.36 L2120.73 1213.36 L2121.32 1213.36 L2121.91 1213.36 L2122.49 1213.36 L2123.08 1213.36 L2123.67 1213.36 L2124.25 1213.36 L2124.84 1213.36 L2125.42 1213.36 L2126.01 1213.36 L2126.6 1213.36 L2127.18 1213.36 L2127.77 1213.36 L2128.36 1213.36 L2128.94 1213.36 L2129.53 1213.36 L2130.12 1213.36 L2130.7 1213.36 L2131.29 1213.36 L2131.88 1213.36 L2132.46 1213.36 L2133.05 1213.36 L2133.63 1213.36 L2134.22 1213.36 L2134.81 1213.36 L2135.39 1213.36 L2135.98 1213.36 L2136.57 1213.36 L2137.15 1213.36 L2137.74 1213.36 L2138.33 1213.36 L2138.91 1213.36 L2139.5 1213.36 L2140.09 1213.36 L2140.67 1213.36 L2141.26 1213.36 L2141.84 1213.36 L2142.43 1213.36 L2143.02 1213.36 L2143.6 1213.36 L2144.19 1213.36 L2144.78 1213.36 L2145.36 1213.36 L2145.95 1213.36 L2146.54 1213.36 L2147.12 1213.36 L2147.71 1213.36 L2148.3 1213.36 L2148.88 1213.36 L2149.47 1213.36 L2150.05 1213.36 L2150.64 1213.36 L2151.23 1213.36 L2151.81 1213.36 L2152.4 1213.36 L2152.99 1213.36 L2153.57 1213.36 L2154.16 1213.36 L2154.75 1213.36 L2155.33 1213.36 L2155.92 1213.36 L2156.5 1213.36 L2157.09 1213.36 L2157.68 1213.36 L2158.26 1213.36 L2158.26 1212.69 L2157.68 1212.69 L2157.09 1212.69 L2156.5 1212.69 L2155.92 1212.69 L2155.33 1212.69 L2154.75 1212.69 L2154.16 1212.69 L2153.57 1212.69 L2152.99 1212.69 L2152.4 1212.69 L2151.81 1212.69 L2151.23 1212.69 L2150.64 1212.69 L2150.05 1212.69 L2149.47 1212.69 L2148.88 1212.69 L2148.3 1212.69 L2147.71 1212.69 L2147.12 1212.69 L2146.54 1212.69 L2145.95 1212.69 L2145.36 1212.69 L2144.78 1212.69 L2144.19 1212.69 L2143.6 1212.69 L2143.02 1212.69 L2142.43 1212.69 L2141.84 1212.69 L2141.26 1212.69 L2140.67 1212.69 L2140.09 1212.69 L2139.5 1212.69 L2138.91 1212.69 L2138.33 1212.69 L2137.74 1212.69 L2137.15 1212.69 L2136.57 1212.69 L2135.98 1212.69 L2135.39 1212.69 L2134.81 1212.69 L2134.22 1212.69 L2133.63 1212.69 L2133.05 1212.69 L2132.46 1212.69 L2131.88 1212.69 L2131.29 1212.69 L2130.7 1212.69 L2130.12 1212.69 L2129.53 1212.69 L2128.94 1212.69 L2128.36 1212.69 L2127.77 1212.69 L2127.18 1212.69 L2126.6 1212.69 L2126.01 1212.69 L2125.42 1212.69 L2124.84 1212.69 L2124.25 1212.69 L2123.67 1212.69 L2123.08 1212.69 L2122.49 1212.69 L2121.91 1212.69 L2121.32 1212.69 L2120.73 1212.69 L2120.15 1212.69 L2119.56 1212.69 L2118.97 1212.69 L2118.39 1212.69 L2117.8 1212.69 L2117.22 1212.69 L2116.63 1212.69 L2116.04 1212.69 L2115.46 1212.69 L2114.87 1212.69 L2114.28 1212.69 L2113.7 1212.69 L2113.11 1212.69 L2112.52 1212.69 L2111.94 1212.69 L2111.35 1212.69 L2110.76 1212.69 L2110.18 1212.69 L2109.59 1212.69 L2109.01 1212.69 L2108.42 1212.69 L2107.83 1212.69 L2107.25 1212.69 L2106.66 1212.69 L2106.07 1212.69 L2105.49 1212.69 L2104.9 1212.69 L2104.31 1212.69 L2103.73 1212.69 L2103.14 1212.69 L2102.55 1212.69 L2101.97 1212.69 L2101.38 1212.69 L2100.8 1212.69 L2100.21 1212.69 L2099.62 1212.69 L2099.04 1212.69 L2098.45 1212.69 L2097.86 1212.69 L2097.28 1212.69 L2096.69 1212.69 L2096.1 1212.69 L2095.52 1212.69 L2094.93 1212.69 L2094.35 1212.69 L2093.76 1212.69 L2093.17 1212.69 L2092.59 1212.69 L2092 1212.69 L2091.41 1212.69 L2090.83 1212.69 L2090.24 1212.69 L2089.65 1212.69 L2089.07 1212.69 L2088.48 1212.69 L2087.89 1212.69 L2087.31 1212.69 L2086.72 1212.69 L2086.14 1212.69 L2085.55 1212.69 L2084.96 1212.69 L2084.38 1212.69 L2083.79 1212.69 L2083.2 1212.69 L2082.62 1212.69 L2082.03 1212.69 L2081.44 1212.69 L2080.86 1212.69 L2080.27 1212.69 L2079.68 1212.69 L2079.1 1212.69 L2078.51 1212.69 L2077.93 1212.69 L2077.34 1212.69 L2076.75 1212.69 L2076.17 1212.69 L2075.58 1212.69 L2074.99 1212.69 L2074.41 1212.69 L2073.82 1212.69 L2073.23 1212.69 L2072.65 1212.69 L2072.06 1212.69 L2071.48 1212.69 L2070.89 1212.69 L2070.3 1212.69 L2069.72 1212.69 L2069.13 1212.69 L2068.54 1212.69 L2067.96 1212.69 L2067.37 1212.69 L2066.78 1212.69 L2066.2 1212.69 L2065.61 1212.69 L2065.02 1212.69 L2064.44 1212.69 L2063.85 1212.69 L2063.27 1212.69 L2062.68 1212.69 L2062.09 1212.69 L2061.51 1212.69 L2060.92 1212.69 L2060.33 1212.69 L2059.75 1212.69 L2059.16 1212.69 L2058.57 1212.69 L2057.99 1212.69 L2057.4 1212.69 L2056.81 1212.69 L2056.23 1212.69 L2055.64 1212.69 L2055.06 1212.69 L2054.47 1212.69 L2053.88 1212.69 L2053.3 1212.69 L2052.71 1212.69 L2052.12 1212.69 L2051.54 1212.69 L2050.95 1212.69 L2050.36 1212.69 L2049.78 1212.69 L2049.19 1212.69 L2048.6 1212.69 L2048.02 1212.69 L2047.43 1212.69 L2046.85 1212.69 L2046.26 1212.69 L2045.67 1212.69 L2045.09 1212.69 L2044.5 1212.69 L2043.91 1212.69 L2043.33 1212.69 L2042.74 1212.69 L2042.15 1212.69 L2041.57 1212.69 L2040.98 1212.69 L2040.4 1212.69 L2039.81 1212.69 L2039.22 1212.69 L2038.64 1212.69 L2038.05 1212.69 L2037.46 1212.69 L2036.88 1212.69 L2036.29 1212.69 L2035.7 1212.69 L2035.12 1212.69 L2034.53 1212.69 L2033.94 1212.69 L2033.36 1212.69 L2032.77 1212.69 L2032.19 1212.69 L2031.6 1212.69 L2031.01 1212.69 L2030.43 1212.69 L2029.84 1212.69 L2029.25 1212.69 L2028.67 1212.69 L2028.08 1212.69 L2027.49 1212.69 L2026.91 1212.69 L2026.32 1212.69 L2025.73 1212.69 L2025.15 1212.69 L2024.56 1212.69 L2023.98 1212.69 L2023.39 1212.69 L2022.8 1212.69 L2022.22 1212.69 L2021.63 1212.69 L2021.04 1212.69 L2020.46 1212.69 L2019.87 1212.69 L2019.28 1212.69 L2018.7 1212.69 L2018.11 1212.69 L2017.53 1212.69 L2016.94 1212.69 L2016.35 1212.69 L2015.77 1212.69 L2015.18 1212.69 L2014.59 1212.69 L2014.01 1212.69 L2013.42 1212.69 L2012.83 1212.69 L2012.25 1212.69 L2011.66 1212.69 L2011.07 1212.69 L2010.49 1212.69 L2009.9 1212.69 L2009.32 1212.69 L2008.73 1212.69 L2008.14 1212.69 L2007.56 1212.69 L2006.97 1212.69 L2006.38 1212.69 L2005.8 1212.69 L2005.21 1212.69 L2004.62 1212.69 L2004.04 1212.69 L2003.45 1212.69 L2002.86 1212.69 L2002.28 1212.69 L2001.69 1212.69 L2001.11 1212.69 L2000.52 1212.69 L1999.93 1212.69 L1999.35 1212.69 L1998.76 1212.69 L1998.17 1212.69 L1997.59 1212.69 L1997 1212.69 L1996.41 1212.69 L1995.83 1212.69 L1995.24 1212.69 L1994.65 1212.69 L1994.07 1212.69 L1993.48 1212.69 L1992.9 1212.69 L1992.31 1212.69 L1991.72 1212.69 L1991.14 1212.69 L1990.55 1212.69 L1989.96 1212.69 L1989.38 1212.69 L1988.79 1212.69 L1988.2 1212.69 L1987.62 1212.69 L1987.03 1212.69 L1986.45 1212.69 L1985.86 1212.69 L1985.27 1212.69 L1984.69 1212.69 L1984.1 1212.69 L1983.51 1212.69 L1982.93 1212.69 L1982.34 1212.69 L1981.75 1212.69 L1981.17 1212.69 L1980.58 1212.69 L1979.99 1212.69 L1979.41 1212.69 L1978.82 1212.69 L1978.24 1212.69 L1977.65 1212.69 L1977.06 1212.69 L1976.48 1212.69 L1975.89 1212.69 L1975.3 1212.69 L1974.72 1212.69 L1974.13 1212.69 L1973.54 1212.69 L1972.96 1212.69 L1972.37 1212.69 L1971.78 1212.69 L1971.2 1212.69 L1970.61 1212.69 L1970.03 1212.69 L1969.44 1212.69 L1968.85 1212.69 L1968.27 1212.69 L1967.68 1212.69 L1967.09 1212.69 L1966.51 1212.69 L1965.92 1212.69 L1965.33 1212.69 L1964.75 1212.69 L1964.16 1212.69 L1963.58 1212.69 L1962.99 1212.69 L1962.4 1212.69 L1961.82 1212.69 L1961.23 1212.69 L1960.64 1212.69 L1960.06 1212.69 L1959.47 1212.69 L1958.88 1212.69 L1958.3 1212.69 L1957.71 1212.69 L1957.12 1212.69 L1956.54 1212.69 L1955.95 1212.69 L1955.37 1212.69 L1954.78 1212.69 L1954.19 1212.69 L1953.61 1212.69 L1953.02 1212.69 L1952.43 1212.69 L1951.85 1212.69 L1951.26 1212.69 L1950.67 1212.69 L1950.09 1212.69 L1949.5 1212.69 L1948.91 1212.69 L1948.33 1212.69 L1947.74 1212.69 L1947.16 1212.69 L1946.57 1212.69 L1945.98 1212.69 L1945.4 1212.69 L1944.81 1212.69 L1944.22 1212.69 L1943.64 1212.69 L1943.05 1212.69 L1942.46 1212.69 L1941.88 1212.69 L1941.29 1212.69 L1940.71 1212.69 L1940.12 1212.69 L1939.53 1212.69 L1938.95 1212.69 L1938.36 1212.69 L1937.77 1212.69 L1937.19 1212.69 L1936.6 1212.69 L1936.01 1212.69 L1935.43 1212.69 L1934.84 1212.69 L1934.25 1212.69 L1933.67 1212.69 L1933.08 1212.69 L1932.5 1212.69 L1931.91 1212.69 L1931.32 1212.69 L1930.74 1212.69 L1930.15 1212.69 L1929.56 1212.69 L1928.98 1212.69 L1928.39 1212.69 L1927.8 1212.69 L1927.22 1212.69 L1926.63 1212.69 L1926.04 1212.69 L1925.46 1212.69 L1924.87 1212.69 L1924.29 1212.69 L1923.7 1212.69 L1923.11 1212.69 L1922.53 1212.69 L1921.94 1212.69 L1921.35 1212.69 L1920.77 1212.69 L1920.18 1212.69 L1919.59 1212.69 L1919.01 1212.69 L1918.42 1212.69 L1917.83 1212.69 L1917.25 1212.69 L1916.66 1212.69 L1916.08 1212.69 L1915.49 1212.69 L1914.9 1212.69 L1914.32 1212.69 L1913.73 1212.69 L1913.14 1212.69 L1912.56 1212.69 L1911.97 1212.69 L1911.38 1212.69 L1910.8 1212.69 L1910.21 1212.69 L1909.63 1212.69 L1909.04 1212.69 L1908.45 1212.69 L1907.87 1212.69 L1907.28 1212.69 L1906.69 1212.69 L1906.11 1212.69 L1905.52 1212.69 L1904.93 1212.69 L1904.35 1212.69 L1903.76 1212.69 L1903.17 1212.69 L1902.59 1212.69 L1902 1212.69 L1901.42 1212.69 L1900.83 1212.69 L1900.24 1212.69 L1899.66 1212.69 L1899.07 1212.69 L1898.48 1212.69 L1897.9 1212.69 L1897.31 1212.69 L1896.72 1212.69 L1896.14 1212.69 L1895.55 1212.69 L1894.96 1212.69 L1894.38 1212.69 L1893.79 1212.69 L1893.21 1212.69 L1892.62 1212.69 L1892.03 1212.69 L1891.45 1212.69 L1890.86 1212.69 L1890.27 1212.69 L1889.69 1212.69 L1889.1 1212.69 L1888.51 1212.69 L1887.93 1212.69 L1887.34 1212.69 L1886.76 1212.69 L1886.17 1212.69 L1885.58 1212.69 L1885 1212.69 L1884.41 1212.69 L1883.82 1212.69 L1883.24 1212.69 L1882.65 1212.69 L1882.06 1212.69 L1881.48 1212.69 L1880.89 1212.69 L1880.3 1212.69 L1879.72 1212.69 L1879.13 1212.69 L1878.55 1212.69 L1877.96 1212.69 L1877.37 1212.69 L1876.79 1212.69 L1876.2 1212.69 L1875.61 1212.69 L1875.03 1212.69 L1874.44 1212.69 L1873.85 1212.69 L1873.27 1212.69 L1872.68 1212.69 L1872.09 1212.69 L1871.51 1212.69 L1870.92 1212.69 L1870.34 1212.69 L1869.75 1212.69 L1869.16 1212.69 L1868.58 1212.69 L1867.99 1212.69 L1867.4 1212.69 L1866.82 1212.69 L1866.23 1212.69 L1865.64 1212.69 L1865.06 1212.69 L1864.47 1212.69 L1863.88 1212.69 L1863.3 1212.69 L1862.71 1212.69 L1862.13 1212.69 L1861.54 1212.69 L1860.95 1212.69 L1860.37 1212.69 L1859.78 1212.69 L1859.19 1212.69 L1858.61 1212.69 L1858.02 1212.69 L1857.43 1212.69 L1856.85 1212.69 L1856.26 1212.69 L1855.68 1212.69 L1855.09 1212.69 L1854.5 1212.69 L1853.92 1212.69 L1853.33 1212.69 L1852.74 1212.69 L1852.16 1212.69 L1851.57 1212.69 L1850.98 1212.69 L1850.4 1212.69 L1849.81 1212.69 L1849.22 1212.69 L1848.64 1212.69 L1848.05 1212.69 L1847.47 1212.69 L1846.88 1212.69 L1846.29 1212.69 L1845.71 1212.69 L1845.12 1212.69 L1844.53 1212.69 L1843.95 1212.69 L1843.36 1212.69 L1842.77 1212.69 L1842.19 1212.69 L1841.6 1212.69 L1841.01 1212.69 L1840.43 1212.69 L1839.84 1212.69 L1839.26 1212.69 L1838.67 1212.69 L1838.08 1212.69 L1837.5 1212.69 L1836.91 1212.69 L1836.32 1212.69 L1835.74 1212.69 L1835.15 1212.69 L1834.56 1212.69 L1833.98 1212.69 L1833.39 1212.69 L1832.81 1212.69 L1832.22 1212.69 L1831.63 1212.69 L1831.05 1212.69 L1830.46 1212.69 L1829.87 1212.69 L1829.29 1212.69 L1828.7 1212.69 L1828.11 1212.69 L1827.53 1212.69 L1826.94 1212.69 L1826.35 1212.69 L1825.77 1212.69 L1825.18 1212.69 L1824.6 1212.69 L1824.01 1212.69 L1823.42 1212.69 L1822.84 1212.69 L1822.25 1212.69 L1821.66 1212.69 L1821.08 1212.69 L1820.49 1212.69 L1819.9 1212.69 L1819.32 1212.69 L1818.73 1212.69 L1818.14 1212.69 L1817.56 1212.69 L1816.97 1212.69 L1816.39 1212.69 L1815.8 1212.69 L1815.21 1212.69 L1814.63 1212.69 L1814.04 1212.69 L1813.45 1212.69 L1812.87 1212.69 L1812.28 1212.69 L1811.69 1212.69 L1811.11 1212.69 L1810.52 1212.69 L1809.94 1212.69 L1809.35 1212.69 L1808.76 1212.69 L1808.18 1212.69 L1807.59 1212.69 L1807 1212.69 L1806.42 1212.69 L1805.83 1212.69 L1805.24 1212.69 L1804.66 1212.69 L1804.07 1212.69 L1803.48 1212.69 L1802.9 1212.69 L1802.31 1212.69 L1801.73 1212.69 L1801.14 1212.69 L1800.55 1212.69 L1799.97 1212.69 L1799.38 1212.69 L1798.79 1212.69 L1798.21 1212.69 L1797.62 1212.69 L1797.03 1212.69 L1796.45 1212.69 L1795.86 1212.69 L1795.27 1212.69 L1794.69 1212.69 L1794.1 1212.69 L1793.52 1212.69 L1792.93 1212.69 L1792.34 1212.69 L1791.76 1212.69 L1791.17 1212.69 L1790.58 1212.69 L1790 1212.69 L1789.41 1212.69 L1788.82 1212.69 L1788.24 1212.69 L1787.65 1212.69 L1787.06 1212.69 L1786.48 1212.69 L1785.89 1212.69 L1785.31 1212.69 L1784.72 1212.69 L1784.13 1212.69 L1783.55 1212.69 L1782.96 1212.69 L1782.37 1212.69 L1781.79 1212.69 L1781.2 1212.69 L1780.61 1212.69 L1780.03 1212.69 L1779.44 1212.69 L1778.86 1212.69 L1778.27 1212.69 L1777.68 1212.69 L1777.1 1212.69 L1776.51 1212.69 L1775.92 1212.69 L1775.34 1212.69 L1774.75 1212.69 L1774.16 1212.69 L1773.58 1212.69 L1772.99 1212.69 L1772.4 1212.69 L1771.82 1212.69 L1771.23 1212.69 L1770.65 1212.69 L1770.06 1212.69 L1769.47 1212.69 L1768.89 1212.69 L1768.3 1212.69 L1767.71 1212.69 L1767.13 1212.69 L1766.54 1212.69 L1765.95 1212.69 L1765.37 1212.69 L1764.78 1212.69 L1764.19 1212.69 L1763.61 1212.69 L1763.02 1212.69 L1762.44 1212.69 L1761.85 1212.69 L1761.26 1212.69 L1760.68 1212.69 L1760.09 1212.69 L1759.5 1212.69 L1758.92 1212.69 L1758.33 1212.69 L1757.74 1212.69 L1757.16 1212.69 L1756.57 1212.69 L1755.99 1212.69 L1755.4 1212.69 L1754.81 1212.69 L1754.23 1212.69 L1753.64 1212.69 L1753.05 1212.69 L1752.47 1212.69 L1751.88 1212.69 L1751.29 1212.69 L1750.71 1212.69 L1750.12 1212.69 L1749.53 1212.69 L1748.95 1212.69 L1748.36 1212.69 L1747.78 1212.69 L1747.19 1212.69 L1746.6 1212.69 L1746.02 1212.69 L1745.43 1212.69 L1744.84 1212.69 L1744.26 1212.69 L1743.67 1212.69 L1743.08 1212.69 L1742.5 1212.69 L1741.91 1212.69 L1741.32 1212.69 L1740.74 1212.69 L1740.15 1212.69 L1739.57 1212.69 L1738.98 1212.69 L1738.39 1212.69 L1737.81 1212.69 L1737.22 1212.69 L1736.63 1212.69 L1736.05 1212.69 L1735.46 1212.69 L1734.87 1212.69 L1734.29 1212.69 L1733.7 1212.69 L1733.11 1212.69 L1732.53 1212.69 L1731.94 1212.69 L1731.36 1212.69 L1730.77 1212.69 L1730.18 1212.69 L1729.6 1212.69 L1729.01 1212.69 L1728.42 1212.69 L1727.84 1212.69 L1727.25 1212.69 L1726.66 1212.69 L1726.08 1212.69 L1725.49 1212.69 L1724.91 1212.69 L1724.32 1212.69 L1723.73 1212.69 L1723.15 1212.69 L1722.56 1212.69 L1721.97 1212.69 L1721.39 1212.69 L1720.8 1212.69 L1720.21 1212.69 L1719.63 1212.69 L1719.04 1212.69 L1718.45 1212.69 L1717.87 1212.69 L1717.28 1212.69 L1716.7 1212.69 L1716.11 1212.69 L1715.52 1212.69 L1714.94 1212.69 L1714.35 1212.69 L1713.76 1212.69 L1713.18 1212.69 L1712.59 1212.69 L1712 1212.69 L1711.42 1212.69 L1710.83 1212.69 L1710.24 1212.69 L1709.66 1212.69 L1709.07 1212.69 L1708.49 1212.69 L1707.9 1212.69 L1707.31 1212.69 L1706.73 1212.69 L1706.14 1212.69 L1705.55 1212.69 L1704.97 1212.69 L1704.38 1212.69 L1703.79 1212.69 L1703.21 1212.69 L1702.62 1212.69 L1702.04 1212.69 L1701.45 1212.69 L1700.86 1212.69 L1700.28 1212.69 L1699.69 1212.69 L1699.1 1212.69 L1698.52 1212.69 L1697.93 1212.69 L1697.34 1212.69 L1696.76 1212.69 L1696.17 1212.69 L1695.58 1212.69 L1695 1212.69 L1694.41 1212.69 L1693.83 1212.69 L1693.24 1212.69 L1692.65 1212.69 L1692.07 1212.69 L1691.48 1212.69 L1690.89 1212.69 L1690.31 1212.69 L1689.72 1212.69 L1689.13 1212.69 L1688.55 1212.69 L1687.96 1212.69 L1687.37 1212.69 L1686.79 1212.69 L1686.2 1212.69 L1685.62 1212.69 L1685.03 1212.69 L1684.44 1212.69 L1683.86 1212.69 L1683.27 1212.69 L1682.68 1212.69 L1682.1 1212.69 L1681.51 1212.69 L1680.92 1212.69 L1680.34 1212.69 L1679.75 1212.69 L1679.17 1212.69 L1678.58 1212.69 L1677.99 1212.69 L1677.41 1212.69 L1676.82 1212.69 L1676.23 1212.69 L1675.65 1212.69 L1675.06 1212.69 L1674.47 1212.69 L1673.89 1212.69 L1673.3 1212.69 L1672.71 1212.69 L1672.13 1212.69 L1671.54 1212.69 L1670.96 1212.69 L1670.37 1212.69 L1669.78 1212.69 L1669.2 1212.69 L1668.61 1212.69 L1668.02 1212.69 L1667.44 1212.69 L1666.85 1212.69 L1666.26 1212.69 L1665.68 1212.69 L1665.09 1212.69 L1664.5 1212.69 L1663.92 1212.69 L1663.33 1212.69 L1662.75 1212.69 L1662.16 1212.69 L1661.57 1212.69 L1660.99 1212.69 L1660.4 1212.69 L1659.81 1212.69 L1659.23 1212.69 L1658.64 1212.69 L1658.05 1212.69 L1657.47 1212.69 L1656.88 1212.69 L1656.29 1212.69 L1655.71 1212.69 L1655.12 1212.69 L1654.54 1212.69 L1653.95 1212.69 L1653.36 1212.69 L1652.78 1212.69 L1652.19 1212.69 L1651.6 1212.69 L1651.02 1212.69 L1650.43 1212.69 L1649.84 1212.69 L1649.26 1212.69 L1648.67 1212.69 L1648.09 1212.69 L1647.5 1212.69 L1646.91 1212.69 L1646.33 1212.69 L1645.74 1212.69 L1645.15 1212.69 L1644.57 1212.69 L1643.98 1212.69 L1643.39 1212.69 L1642.81 1212.69 L1642.22 1212.69 L1641.63 1212.69 L1641.05 1212.69 L1640.46 1212.69 L1639.88 1212.69 L1639.29 1212.69 L1638.7 1212.69 L1638.12 1212.69 L1637.53 1212.69 L1636.94 1212.69 L1636.36 1212.69 L1635.77 1212.69 L1635.18 1212.69 L1634.6 1212.69 L1634.01 1212.69 L1633.42 1212.69 L1632.84 1212.69 L1632.25 1212.69 L1631.67 1212.69 L1631.08 1212.69 L1630.49 1212.69 L1629.91 1212.69 L1629.32 1212.69 L1628.73 1212.69 L1628.15 1212.69 L1627.56 1212.69 L1626.97 1212.69 L1626.39 1212.69 L1625.8 1212.69 L1625.22 1212.69 L1624.63 1212.69 L1624.04 1212.69 L1623.46 1212.69 L1622.87 1212.69 L1622.28 1212.69 L1621.7 1212.69 L1621.11 1212.69 L1620.52 1212.69 L1619.94 1212.69 L1619.35 1212.69 L1618.76 1212.69 L1618.18 1212.69 L1617.59 1212.69 L1617.01 1212.69 L1616.42 1212.69 L1615.83 1212.69 L1615.25 1212.69 L1614.66 1212.69 L1614.07 1212.69 L1613.49 1212.69 L1612.9 1212.69 L1612.31 1212.69 L1611.73 1212.69 L1611.14 1212.69 L1610.55 1212.69 L1609.97 1212.69 L1609.38 1212.69 L1608.8 1212.69 L1608.21 1212.69 L1607.62 1212.69 L1607.04 1212.69 L1606.45 1212.69 L1605.86 1212.69 L1605.28 1212.69 L1604.69 1212.69 L1604.1 1212.69 L1603.52 1212.69 L1602.93 1212.69 L1602.34 1212.69 L1601.76 1212.69 L1601.17 1212.69 L1600.59 1212.69 L1600 1212.69 L1599.41 1212.69 L1598.83 1212.69 L1598.24 1212.69 L1597.65 1212.69 L1597.07 1212.69 L1596.48 1212.69 L1595.89 1212.69 L1595.31 1212.69 L1594.72 1212.69 L1594.14 1212.69 L1593.55 1212.69 L1592.96 1212.69 L1592.38 1212.69 L1591.79 1212.69 L1591.2 1212.69 L1590.62 1212.69 L1590.03 1212.69 L1589.44 1212.69 L1588.86 1212.69 L1588.27 1212.69 L1587.68 1212.69 L1587.1 1212.69 L1586.51 1212.69 L1585.93 1212.69 L1585.34 1212.69 L1584.75 1212.69 L1584.17 1212.69 L1583.58 1212.69 L1582.99 1212.69 L1582.41 1212.69 L1581.82 1212.69 L1581.23 1212.69 L1580.65 1212.69 L1580.06 1212.69 L1579.47 1212.69 L1578.89 1212.69 L1578.3 1212.69 L1577.72 1212.69 L1577.13 1212.69 L1576.54 1212.69 L1575.96 1212.69 L1575.37 1212.69 L1574.78 1212.69 L1574.2 1212.69 L1573.61 1212.69 L1573.02 1212.69 L1572.44 1212.69 L1571.85 1212.69 L1571.27 1212.69 L1570.68 1212.69 L1570.09 1212.69 L1569.51 1212.69 L1568.92 1212.69 L1568.33 1212.69 L1567.75 1212.69 L1567.16 1212.69 L1566.57 1212.69 L1565.99 1212.69 L1565.4 1212.69 L1564.81 1212.69 L1564.23 1212.69 L1563.64 1212.69 L1563.06 1212.69 L1562.47 1212.69 L1561.88 1212.69 L1561.3 1212.69 L1560.71 1212.69 L1560.12 1212.69 L1559.54 1212.69 L1558.95 1212.69 L1558.36 1212.69 L1557.78 1212.69 L1557.19 1212.69 L1556.6 1212.69 L1556.02 1212.69 L1555.43 1212.69 L1554.85 1212.69 L1554.26 1212.69 L1553.67 1212.69 L1553.09 1212.69 L1552.5 1212.69 L1551.91 1212.69 L1551.33 1212.69 L1550.74 1212.69 L1550.15 1212.69 L1549.57 1212.69 L1548.98 1212.69 L1548.4 1212.69 L1547.81 1212.69 L1547.22 1212.69 L1546.64 1212.69 L1546.05 1212.69 L1545.46 1212.69 L1544.88 1212.69 L1544.29 1212.69 L1543.7 1212.69 L1543.12 1212.69 L1542.53 1212.69 L1541.94 1212.69 L1541.36 1212.69 L1540.77 1212.69 L1540.19 1212.69 L1539.6 1212.69 L1539.01 1212.69 L1538.43 1212.69 L1537.84 1212.69 L1537.25 1212.69 L1536.67 1212.69 L1536.08 1212.69 L1535.49 1212.69 L1534.91 1212.69 L1534.32 1212.69 L1533.73 1212.69 L1533.15 1212.69 L1532.56 1212.69 L1531.98 1212.69 L1531.39 1212.69 L1530.8 1212.69 L1530.22 1212.69 L1529.63 1212.69 L1529.04 1212.69 L1528.46 1212.69 L1527.87 1212.69 L1527.28 1212.69 L1526.7 1212.69 L1526.11 1212.69 L1525.52 1212.69 L1524.94 1212.69 L1524.35 1212.69 L1523.77 1212.69 L1523.18 1212.69 L1522.59 1212.69 L1522.01 1212.69 L1521.42 1212.69 L1520.83 1212.69 L1520.25 1212.69 L1519.66 1212.69 L1519.07 1212.69 L1518.49 1212.69 L1517.9 1212.69 L1517.32 1212.69 L1516.73 1212.69 L1516.14 1212.69 L1515.56 1212.69 L1514.97 1212.69 L1514.38 1212.69 L1513.8 1212.69 L1513.21 1212.69 L1512.62 1212.69 L1512.04 1212.69 L1511.45 1212.69 L1510.86 1212.69 L1510.28 1212.69 L1509.69 1212.69 L1509.11 1212.69 L1508.52 1212.69 L1507.93 1212.69 L1507.35 1212.69 L1506.76 1212.69 L1506.17 1212.69 L1505.59 1212.69 L1505 1212.69 L1504.41 1212.69 L1503.83 1212.69 L1503.24 1212.69 L1502.65 1212.69 L1502.07 1212.69 L1501.48 1212.69 L1500.9 1212.69 L1500.31 1212.69 L1499.72 1212.69 L1499.14 1212.69 L1498.55 1212.69 L1497.96 1212.69 L1497.38 1212.69 L1496.79 1212.69 L1496.2 1212.69 L1495.62 1212.69 L1495.03 1212.69 L1494.45 1212.69 L1493.86 1212.69 L1493.27 1212.69 L1492.69 1212.69 L1492.1 1212.69 L1491.51 1212.69 L1490.93 1212.69 L1490.34 1212.69 L1489.75 1212.69 L1489.17 1212.69 L1488.58 1212.69 L1487.99 1212.69 L1487.41 1212.69 L1486.82 1212.69 L1486.24 1212.69 L1485.65 1212.69 L1485.06 1212.69 L1484.48 1212.69 L1483.89 1212.69 L1483.3 1212.69 L1482.72 1212.69 L1482.13 1212.69 L1481.54 1212.69 L1480.96 1212.69 L1480.37 1212.69 L1479.78 1212.69 L1479.2 1212.69 L1478.61 1212.69 L1478.03 1212.69 L1477.44 1212.69 L1476.85 1212.69 L1476.27 1212.69 L1475.68 1212.69 L1475.09 1212.69 L1474.51 1212.69 L1473.92 1212.69 L1473.33 1212.69 L1472.75 1212.69 L1472.16 1212.69 L1471.57 1212.69 L1470.99 1212.69 L1470.4 1212.69 L1469.82 1212.69 L1469.23 1212.69 L1468.64 1212.69 L1468.06 1212.69 L1467.47 1212.69 L1466.88 1212.69 L1466.3 1212.69 L1465.71 1212.69 L1465.12 1212.69 L1464.54 1212.69 L1463.95 1212.69 L1463.37 1212.69 L1462.78 1212.69 L1462.19 1212.69 L1461.61 1212.69 L1461.02 1212.69 L1460.43 1212.69 L1459.85 1212.69 L1459.26 1212.69 L1458.67 1212.69 L1458.09 1212.69 L1457.5 1212.69 L1456.91 1212.69 L1456.33 1212.69 L1455.74 1212.69 L1455.16 1212.69 L1454.57 1212.69 L1453.98 1212.69 L1453.4 1212.69 L1452.81 1212.69 L1452.22 1212.69 L1451.64 1212.69 L1451.05 1212.69 L1450.46 1212.69 L1449.88 1212.69 L1449.29 1212.69 L1448.7 1212.69 L1448.12 1212.69 L1447.53 1212.69 L1446.95 1212.69 L1446.36 1212.69 L1445.77 1212.69 L1445.19 1212.69 L1444.6 1212.69 L1444.01 1212.69 L1443.43 1212.69 L1442.84 1212.69 L1442.25 1212.69 L1441.67 1212.69 L1441.08 1212.69 L1440.5 1212.69 L1439.91 1212.69 L1439.32 1212.69 L1438.74 1212.69 L1438.15 1212.69 L1437.56 1212.69 L1436.98 1212.69 L1436.39 1212.69 L1435.8 1212.69 L1435.22 1212.69 L1434.63 1212.69 L1434.04 1212.69 L1433.46 1212.69 L1432.87 1212.69 L1432.29 1212.69 L1431.7 1212.69 L1431.11 1212.69 L1430.53 1212.69 L1429.94 1212.69 L1429.35 1212.69 L1428.77 1212.69 L1428.18 1212.69 L1427.59 1212.69 L1427.01 1212.69 L1426.42 1212.69 L1425.83 1212.69 L1425.25 1212.69 L1424.66 1212.69 L1424.08 1212.69 L1423.49 1212.69 L1422.9 1212.69 L1422.32 1212.69 L1421.73 1212.69 L1421.14 1212.69 L1420.56 1212.69 L1419.97 1212.69 L1419.38 1212.69 L1418.8 1212.69 L1418.21 1212.69 L1417.63 1212.69 L1417.04 1212.69 L1416.45 1212.69 L1415.87 1212.69 L1415.28 1212.69 L1414.69 1212.69 L1414.11 1212.69 L1413.52 1212.69 L1412.93 1212.69 L1412.35 1212.69 L1411.76 1212.69 L1411.17 1212.69 L1410.59 1212.69 L1410 1212.69 L1409.42 1212.69 L1408.83 1212.69 L1408.24 1212.69 L1407.66 1212.69 L1407.07 1212.69 L1406.48 1212.69 L1405.9 1212.69 L1405.31 1212.69 L1404.72 1212.69 L1404.14 1212.69 L1403.55 1212.69 L1402.96 1212.69 L1402.38 1212.69 L1401.79 1212.69 L1401.21 1212.69 L1400.62 1212.69 L1400.03 1212.69 L1399.45 1212.69 L1398.86 1212.69 L1398.27 1212.69 L1397.69 1212.69 L1397.1 1212.69 L1396.51 1212.69 L1395.93 1212.69 L1395.34 1212.69 L1394.75 1212.69 L1394.17 1212.69 L1393.58 1212.69 L1393 1212.69 L1392.41 1212.69 L1391.82 1212.69 L1391.24 1212.69 L1390.65 1212.69 L1390.06 1212.69 L1389.48 1212.69 L1388.89 1212.69 L1388.3 1212.69 L1387.72 1212.69 L1387.13 1212.69 L1386.55 1212.69 L1385.96 1212.69 L1385.37 1212.69 L1384.79 1212.69 L1384.2 1212.69 L1383.61 1212.69 L1383.03 1212.69 L1382.44 1212.69 L1381.85 1212.69 L1381.27 1212.69 L1380.68 1212.69 L1380.09 1212.69 L1379.51 1212.69 L1378.92 1212.69 L1378.34 1212.69 L1377.75 1212.69 L1377.16 1212.69 L1376.58 1212.69 L1375.99 1212.69 L1375.4 1212.69 L1374.82 1212.69 L1374.23 1212.69 L1373.64 1212.69 L1373.06 1212.69 L1372.47 1212.69 L1371.88 1212.69 L1371.3 1212.69 L1370.71 1212.69 L1370.13 1212.69 L1369.54 1212.69 L1368.95 1212.69 L1368.37 1212.69 L1367.78 1212.69 L1367.19 1212.69 L1366.61 1212.69 L1366.02 1212.69 L1365.43 1212.69 L1364.85 1212.69 L1364.26 1212.69 L1363.68 1212.69 L1363.09 1212.69 L1362.5 1212.69 L1361.92 1212.69 L1361.33 1212.69 L1360.74 1212.69 L1360.16 1212.69 L1359.57 1212.69 L1358.98 1212.69 L1358.4 1212.69 L1357.81 1212.69 L1357.22 1212.69 L1356.64 1212.69 L1356.05 1212.69 L1355.47 1212.69 L1354.88 1212.69 L1354.29 1212.69 L1353.71 1212.69 L1353.12 1212.69 L1352.53 1212.69 L1351.95 1212.69 L1351.36 1212.69 L1350.77 1212.69 L1350.19 1212.69 L1349.6 1212.69 L1349.01 1212.69 L1348.43 1212.69 L1347.84 1212.69 L1347.26 1212.69 L1346.67 1212.69 L1346.08 1212.69 L1345.5 1212.69 L1344.91 1212.69 L1344.32 1212.69 L1343.74 1212.69 L1343.15 1212.69 L1342.56 1212.69 L1341.98 1212.69 L1341.39 1212.69 L1340.8 1212.69 L1340.22 1212.69 L1339.63 1212.69 L1339.05 1212.69 L1338.46 1212.69 L1337.87 1212.69 L1337.29 1212.69 L1336.7 1212.69 L1336.11 1212.69 L1335.53 1212.69 L1334.94 1212.69 L1334.35 1212.69 L1333.77 1212.69 L1333.18 1212.69 L1332.6 1212.69 L1332.01 1212.69 L1331.42 1212.69 L1330.84 1212.69 L1330.25 1212.69 L1329.66 1212.69 L1329.08 1212.69 L1328.49 1212.69 L1327.9 1212.69 L1327.32 1212.69 L1326.73 1212.69 L1326.14 1212.69 L1325.56 1212.69 L1324.97 1212.69 L1324.39 1212.69 L1323.8 1212.69 L1323.21 1212.69 L1322.63 1212.69 L1322.04 1212.69 L1321.45 1212.69 L1320.87 1212.69 L1320.28 1212.69 L1319.69 1212.69 L1319.11 1212.69 L1318.52 1212.69 L1317.93 1212.69 L1317.35 1212.69 L1316.76 1212.69 L1316.18 1212.69 L1315.59 1212.69 L1315 1212.69 L1314.42 1212.69 L1313.83 1212.69 L1313.24 1212.69 L1312.66 1212.69 L1312.07 1212.69 L1311.48 1212.69 L1310.9 1212.69 L1310.31 1212.69 L1309.73 1212.69 L1309.14 1212.69 L1308.55 1212.69 L1307.97 1212.69 L1307.38 1212.69 L1306.79 1212.69 L1306.21 1212.69 L1305.62 1212.69 L1305.03 1212.69 L1304.45 1212.69 L1303.86 1212.69 L1303.27 1212.69 L1302.69 1212.69 L1302.1 1212.69 L1301.52 1212.69 L1300.93 1212.69 L1300.34 1212.69 L1299.76 1212.69 L1299.17 1212.69 L1298.58 1212.69 L1298 1212.69 L1297.41 1212.69 L1296.82 1212.69 L1296.24 1212.69 L1295.65 1212.69 L1295.06 1212.69 L1294.48 1212.69 L1293.89 1212.69 L1293.31 1212.69 L1292.72 1212.69 L1292.13 1212.69 L1291.55 1212.69 L1290.96 1212.69 L1290.37 1212.69 L1289.79 1212.69 L1289.2 1212.69 L1288.61 1212.69 L1288.03 1212.69 L1287.44 1212.69 L1286.86 1212.69 L1286.27 1212.69 L1285.68 1212.69 L1285.1 1212.69 L1284.51 1212.69 L1283.92 1212.69 L1283.34 1212.69 L1282.75 1212.69 L1282.16 1212.69 L1281.58 1212.69 L1280.99 1212.69 L1280.4 1212.69 L1279.82 1212.69 L1279.23 1212.69 L1278.65 1212.69 L1278.06 1212.69 L1277.47 1212.69 L1276.89 1212.69 L1276.3 1212.69 L1275.71 1212.69 L1275.13 1212.69 L1274.54 1212.69 L1273.95 1212.69 L1273.37 1212.69 L1272.78 1212.69 L1272.19 1212.69 L1271.61 1212.69 L1271.02 1212.69 L1270.44 1212.69 L1269.85 1212.69 L1269.26 1212.69 L1268.68 1212.69 L1268.09 1212.69 L1267.5 1212.69 L1266.92 1212.69 L1266.33 1212.69 L1265.74 1212.69 L1265.16 1212.69 L1264.57 1212.69 L1263.98 1212.69 L1263.4 1212.69 L1262.81 1212.69 L1262.23 1212.69 L1261.64 1212.69 L1261.05 1212.69 L1260.47 1212.69 L1259.88 1212.69 L1259.29 1212.69 L1258.71 1212.69 L1258.12 1212.69 L1257.53 1212.69 L1256.95 1212.69 L1256.36 1212.69 L1255.78 1212.69 L1255.19 1212.69 L1254.6 1212.69 L1254.02 1212.69 L1253.43 1212.69 L1252.84 1212.69 L1252.26 1212.69 L1251.67 1212.69 L1251.08 1212.69 L1250.5 1212.69 L1249.91 1212.69 L1249.32 1212.69 L1248.74 1212.69 L1248.15 1212.69 L1247.57 1212.69 L1246.98 1212.69 L1246.39 1212.69 L1245.81 1212.69 L1245.22 1212.69 L1244.63 1212.69 L1244.05 1212.69 L1243.46 1212.69 L1242.87 1212.69 L1242.29 1212.69 L1241.7 1212.69 L1241.11 1212.69 L1240.53 1212.69 L1239.94 1212.69 L1239.36 1212.69 L1238.77 1212.69 L1238.18 1212.69 L1237.6 1212.69 L1237.01 1212.69 L1236.42 1212.69 L1235.84 1212.69 L1235.25 1212.69 L1234.66 1212.69 L1234.08 1212.69 L1233.49 1212.69 L1232.91 1212.69 L1232.32 1212.69 L1231.73 1212.69 L1231.15 1212.69 L1230.56 1212.69 L1229.97 1212.69 L1229.39 1212.69 L1228.8 1212.69 L1228.21 1212.69 L1227.63 1212.69 L1227.04 1212.69 L1226.45 1212.69 L1225.87 1212.69 L1225.28 1212.69 L1224.7 1212.69 L1224.11 1212.69 L1223.52 1212.69 L1222.94 1212.69 L1222.35 1212.69 L1221.76 1212.69 L1221.18 1212.69 L1220.59 1212.69 L1220 1212.69 L1219.42 1212.69 L1218.83 1212.69 L1218.24 1212.69 L1217.66 1212.69 L1217.07 1212.69 L1216.49 1212.69 L1215.9 1212.69 L1215.31 1212.69 L1214.73 1212.69 L1214.14 1212.69 L1213.55 1212.69 L1212.97 1212.69 L1212.38 1212.69 L1211.79 1212.69 L1211.21 1212.69 L1210.62 1212.69 L1210.03 1212.69 L1209.45 1212.69 L1208.86 1212.69 L1208.28 1212.69 L1207.69 1212.69 L1207.1 1212.69 L1206.52 1212.69 L1205.93 1212.69 L1205.34 1212.69 L1204.76 1212.69 L1204.17 1212.69 L1203.58 1212.69 L1203 1212.69 L1202.41 1212.69 L1201.83 1212.69 L1201.24 1212.69 L1200.65 1212.69 L1200.07 1212.69 L1199.48 1212.69 L1198.89 1212.69 L1198.31 1212.69 L1197.72 1212.69 L1197.13 1212.69 L1196.55 1212.69 L1195.96 1212.69 L1195.37 1212.69 L1194.79 1212.69 L1194.2 1212.69 L1193.62 1212.69 L1193.03 1212.69 L1192.44 1212.69 L1191.86 1212.69 L1191.27 1212.69 L1190.68 1212.69 L1190.1 1212.69 L1189.51 1212.69 L1188.92 1212.69 L1188.34 1212.69 L1187.75 1212.69 L1187.16 1212.69 L1186.58 1212.69 L1185.99 1212.69 L1185.41 1212.69 L1184.82 1212.69 L1184.23 1212.69 L1183.65 1212.69 L1183.06 1212.69 L1182.47 1212.69 L1181.89 1212.69 L1181.3 1212.69 L1180.71 1212.69 L1180.13 1212.69 L1179.54 1212.69 L1178.96 1212.69 L1178.37 1212.69 L1177.78 1212.69 L1177.2 1212.69 L1176.61 1212.69 L1176.02 1212.69 L1175.44 1212.69 L1174.85 1212.69 L1174.26 1212.69 L1173.68 1212.69 L1173.09 1212.69 L1172.5 1212.69 L1171.92 1212.69 L1171.33 1212.69 L1170.75 1212.69 L1170.16 1212.69 L1169.57 1212.69 L1168.99 1212.69 L1168.4 1212.69 L1167.81 1212.69 L1167.23 1212.69 L1166.64 1212.69 L1166.05 1212.69 L1165.47 1212.69 L1164.88 1212.69 L1164.29 1212.69 L1163.71 1212.69 L1163.12 1212.69 L1162.54 1212.69 L1161.95 1212.69 L1161.36 1212.69 L1160.78 1212.69 L1160.19 1212.69 L1159.6 1212.69 L1159.02 1212.69 L1158.43 1212.69 L1157.84 1212.69 L1157.26 1212.69 L1156.67 1212.69 L1156.09 1212.69 L1155.5 1212.69 L1154.91 1212.69 L1154.33 1212.69 L1153.74 1212.69 L1153.15 1212.69 L1152.57 1212.69 L1151.98 1212.69 L1151.39 1212.69 L1150.81 1212.69 L1150.22 1212.69 L1149.63 1212.69 L1149.05 1212.69 L1148.46 1212.69 L1147.88 1212.69 L1147.29 1212.69 L1146.7 1212.69 L1146.12 1212.69 L1145.53 1212.69 L1144.94 1212.69 L1144.36 1212.69 L1143.77 1212.69 L1143.18 1212.69 L1142.6 1212.69 L1142.01 1212.69 L1141.42 1212.69 L1140.84 1212.69 L1140.25 1212.69 L1139.67 1212.69 L1139.08 1212.69 L1138.49 1212.69 L1137.91 1212.69 L1137.32 1212.69 L1136.73 1212.69 L1136.15 1212.69 L1135.56 1212.69 L1134.97 1212.69 L1134.39 1212.69 L1133.8 1212.69 L1133.21 1212.69 L1132.63 1212.69 L1132.04 1212.69 L1131.46 1212.69 L1130.87 1212.69 L1130.28 1212.69 L1129.7 1212.69 L1129.11 1212.69 L1128.52 1212.69 L1127.94 1212.69 L1127.35 1212.69 L1126.76 1212.69 L1126.18 1212.69 L1125.59 1212.69 L1125.01 1212.69 L1124.42 1212.69 L1123.83 1212.69 L1123.25 1212.69 L1122.66 1212.69 L1122.07 1212.69 L1121.49 1212.69 L1120.9 1212.69 L1120.31 1212.69 L1119.73 1212.69 L1119.14 1212.69 L1118.55 1212.69 L1117.97 1212.69 L1117.38 1212.69 L1116.8 1212.69 L1116.21 1212.69 L1115.62 1212.69 L1115.04 1212.69 L1114.45 1212.69 L1113.86 1212.69 L1113.28 1212.69 L1112.69 1212.69 L1112.1 1212.69 L1111.52 1212.69 L1110.93 1212.69 L1110.34 1212.69 L1109.76 1212.69 L1109.17 1212.69 L1108.59 1212.69 L1108 1212.69 L1107.41 1212.69 L1106.83 1212.69 L1106.24 1212.69 L1105.65 1212.69 L1105.07 1212.69 L1104.48 1212.69 L1103.89 1212.69 L1103.31 1212.69 L1102.72 1212.69 L1102.14 1212.69 L1101.55 1212.69 L1100.96 1212.69 L1100.38 1212.69 L1099.79 1212.69 L1099.2 1212.69 L1098.62 1212.69 L1098.03 1212.69 L1097.44 1212.69 L1096.86 1212.69 L1096.27 1212.69 L1095.68 1212.69 L1095.1 1212.69 L1094.51 1212.69 L1093.93 1212.69 L1093.34 1212.69 L1092.75 1212.69 L1092.17 1212.69 L1091.58 1212.69 L1090.99 1212.69 L1090.41 1212.69 L1089.82 1212.69 L1089.23 1212.69 L1088.65 1212.69 L1088.06 1212.69 L1087.47 1212.69 L1086.89 1212.69 L1086.3 1212.69 L1085.72 1212.69 L1085.13 1212.69 L1084.54 1212.69 L1083.96 1212.69 L1083.37 1212.69 L1082.78 1212.69 L1082.2 1212.69 L1081.61 1212.69 L1081.02 1212.69 L1080.44 1212.69 L1079.85 1212.69 L1079.26 1212.69 L1078.68 1212.69 L1078.09 1212.69 L1077.51 1212.69 L1076.92 1212.69 L1076.33 1212.69 L1075.75 1212.69 L1075.16 1212.69 L1074.57 1212.69 L1073.99 1212.69 L1073.4 1212.69 L1072.81 1212.69 L1072.23 1212.69 L1071.64 1212.69 L1071.06 1212.69 L1070.47 1212.69 L1069.88 1212.69 L1069.3 1212.69 L1068.71 1212.69 L1068.12 1212.69 L1067.54 1212.69 L1066.95 1212.69 L1066.36 1212.69 L1065.78 1212.69 L1065.19 1212.69 L1064.6 1212.69 L1064.02 1212.69 L1063.43 1212.69 L1062.85 1212.69 L1062.26 1212.69 L1061.67 1212.69 L1061.09 1212.69 L1060.5 1212.69 L1059.91 1212.69 L1059.33 1212.69 L1058.74 1212.69 L1058.15 1212.69 L1057.57 1212.69 L1056.98 1212.69 L1056.39 1212.69 L1055.81 1212.69 L1055.22 1212.69 L1054.64 1212.69 L1054.05 1212.69 L1053.46 1212.69 L1052.88 1212.69 L1052.29 1212.69 L1051.7 1212.69 L1051.12 1212.69 L1050.53 1212.69 L1049.94 1212.69 L1049.36 1212.69 L1048.77 1212.69 L1048.19 1212.69 L1047.6 1212.69 L1047.01 1212.69 L1046.43 1212.69 L1045.84 1212.69 L1045.25 1212.69 L1044.67 1212.69 L1044.08 1212.69 L1043.49 1212.69 L1042.91 1212.69 L1042.32 1212.69 L1041.73 1212.69 L1041.15 1212.69 L1040.56 1212.69 L1039.98 1212.69 L1039.39 1212.69 L1038.8 1212.69 L1038.22 1212.69 L1037.63 1212.69 L1037.04 1212.69 L1036.46 1212.69 L1035.87 1212.69 L1035.28 1212.69 L1034.7 1212.69 L1034.11 1212.69 L1033.52 1212.69 L1032.94 1212.69 L1032.35 1212.69 L1031.77 1212.69 L1031.18 1212.69 L1030.59 1212.69 L1030.01 1212.69 L1029.42 1212.69 L1028.83 1212.69 L1028.25 1212.69 L1027.66 1212.69 L1027.07 1212.69 L1026.49 1212.69 L1025.9 1212.69 L1025.32 1212.69 L1024.73 1212.69 L1024.14 1212.69 L1023.56 1212.69 L1022.97 1212.69 L1022.38 1212.69 L1021.8 1212.69 L1021.21 1212.69 L1020.62 1212.69 L1020.04 1212.69 L1019.45 1212.69 L1018.86 1212.69 L1018.28 1212.69 L1017.69 1212.69 L1017.11 1212.69 L1016.52 1212.69 L1015.93 1212.69 L1015.35 1212.69 L1014.76 1212.69 L1014.17 1212.69 L1013.59 1212.69 L1013 1212.69 L1012.41 1212.69 L1011.83 1212.69 L1011.24 1212.69 L1010.65 1212.69 L1010.07 1212.69 L1009.48 1212.69 L1008.9 1212.69 L1008.31 1212.69 L1007.72 1212.69 L1007.14 1212.69 L1006.55 1212.69 L1005.96 1212.69 L1005.38 1212.69 L1004.79 1212.69 L1004.2 1212.69 L1003.62 1212.69 L1003.03 1212.69 L1002.44 1212.69 L1001.86 1212.69 L1001.27 1212.69 L1000.69 1212.69 L1000.1 1212.69 L999.513 1212.69 L998.926 1212.69 L998.34 1212.69 L997.754 1212.69 L997.167 1212.69 L996.581 1212.69 L995.994 1212.69 L995.408 1212.69 L994.822 1212.69 L994.235 1212.69 L993.649 1212.69 L993.062 1212.69 L992.476 1212.69 L991.889 1212.69 L991.303 1212.69 L990.717 1212.69 L990.13 1212.69 L989.544 1212.69 L988.957 1212.69 L988.371 1212.69 L987.785 1212.69 L987.198 1212.69 L986.612 1212.69 L986.025 1212.69  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.02 986.612,1213.02 987.198,1213.02 987.785,1213.02 988.371,1213.02 988.957,1213.02 989.544,1213.02 990.13,1213.02 990.717,1213.02 991.303,1213.02 991.889,1213.02 992.476,1213.02 993.062,1213.02 993.649,1213.02 994.235,1213.02 994.822,1213.02 995.408,1213.02 995.994,1213.02 996.581,1213.02 997.167,1213.02 997.754,1213.02 998.34,1213.02 998.926,1213.02 999.513,1213.02 1000.1,1213.02 1000.69,1213.02 1001.27,1213.02 1001.86,1213.02 1002.44,1213.02 1003.03,1213.02 1003.62,1213.02 1004.2,1213.02 1004.79,1213.02 1005.38,1213.02 1005.96,1213.02 1006.55,1213.02 1007.14,1213.02 1007.72,1213.02 1008.31,1213.02 1008.9,1213.02 1009.48,1213.02 1010.07,1213.02 1010.65,1213.02 1011.24,1213.02 1011.83,1213.02 1012.41,1213.02 1013,1213.02 1013.59,1213.02 1014.17,1213.02 1014.76,1213.02 1015.35,1213.02 1015.93,1213.02 1016.52,1213.02 1017.11,1213.02 1017.69,1213.02 1018.28,1213.02 1018.86,1213.02 1019.45,1213.02 1020.04,1213.02 1020.62,1213.02 1021.21,1213.02 1021.8,1213.02 1022.38,1213.02 1022.97,1213.02 1023.56,1213.02 1024.14,1213.02 1024.73,1213.02 1025.32,1213.02 1025.9,1213.02 1026.49,1213.02 1027.07,1213.02 1027.66,1213.02 1028.25,1213.02 1028.83,1213.02 1029.42,1213.02 1030.01,1213.02 1030.59,1213.02 1031.18,1213.02 1031.77,1213.02 1032.35,1213.02 1032.94,1213.02 1033.52,1213.02 1034.11,1213.02 1034.7,1213.02 1035.28,1213.02 1035.87,1213.02 1036.46,1213.02 1037.04,1213.02 1037.63,1213.02 1038.22,1213.02 1038.8,1213.02 1039.39,1213.02 1039.98,1213.02 1040.56,1213.02 1041.15,1213.02 1041.73,1213.02 1042.32,1213.02 1042.91,1213.02 1043.49,1213.02 1044.08,1213.02 1044.67,1213.02 1045.25,1213.02 1045.84,1213.02 1046.43,1213.02 1047.01,1213.02 1047.6,1213.02 1048.19,1213.02 1048.77,1213.02 1049.36,1213.02 1049.94,1213.02 1050.53,1213.02 1051.12,1213.02 1051.7,1213.02 1052.29,1213.02 1052.88,1213.02 1053.46,1213.02 1054.05,1213.02 1054.64,1213.02 1055.22,1213.02 1055.81,1213.02 1056.39,1213.02 1056.98,1213.02 1057.57,1213.02 1058.15,1213.02 1058.74,1213.02 1059.33,1213.02 1059.91,1213.02 1060.5,1213.02 1061.09,1213.02 1061.67,1213.02 1062.26,1213.02 1062.85,1213.02 1063.43,1213.02 1064.02,1213.02 1064.6,1213.02 1065.19,1213.02 1065.78,1213.02 1066.36,1213.02 1066.95,1213.02 1067.54,1213.02 1068.12,1213.02 1068.71,1213.02 1069.3,1213.02 1069.88,1213.02 1070.47,1213.02 1071.06,1213.02 1071.64,1213.02 1072.23,1213.02 1072.81,1213.02 1073.4,1213.02 1073.99,1213.02 1074.57,1213.02 1075.16,1213.02 1075.75,1213.02 1076.33,1213.02 1076.92,1213.02 1077.51,1213.02 1078.09,1213.02 1078.68,1213.02 1079.26,1213.02 1079.85,1213.02 1080.44,1213.02 1081.02,1213.02 1081.61,1213.02 1082.2,1213.02 1082.78,1213.02 1083.37,1213.02 1083.96,1213.02 1084.54,1213.02 1085.13,1213.02 1085.72,1213.02 1086.3,1213.02 1086.89,1213.02 1087.47,1213.02 1088.06,1213.02 1088.65,1213.02 1089.23,1213.02 1089.82,1213.02 1090.41,1213.02 1090.99,1213.02 1091.58,1213.02 1092.17,1213.02 1092.75,1213.02 1093.34,1213.02 1093.93,1213.02 1094.51,1213.02 1095.1,1213.02 1095.68,1213.02 1096.27,1213.02 1096.86,1213.02 1097.44,1213.02 1098.03,1213.02 1098.62,1213.02 1099.2,1213.02 1099.79,1213.02 1100.38,1213.02 1100.96,1213.02 1101.55,1213.02 1102.14,1213.02 1102.72,1213.02 1103.31,1213.02 1103.89,1213.02 1104.48,1213.02 1105.07,1213.02 1105.65,1213.02 1106.24,1213.02 1106.83,1213.02 1107.41,1213.02 1108,1213.02 1108.59,1213.02 1109.17,1213.02 1109.76,1213.02 1110.34,1213.02 1110.93,1213.02 1111.52,1213.02 1112.1,1213.02 1112.69,1213.02 1113.28,1213.02 1113.86,1213.02 1114.45,1213.02 1115.04,1213.02 1115.62,1213.02 1116.21,1213.02 1116.8,1213.02 1117.38,1213.02 1117.97,1213.02 1118.55,1213.02 1119.14,1213.02 1119.73,1213.02 1120.31,1213.02 1120.9,1213.02 1121.49,1213.02 1122.07,1213.02 1122.66,1213.02 1123.25,1213.02 1123.83,1213.02 1124.42,1213.02 1125.01,1213.02 1125.59,1213.02 1126.18,1213.02 1126.76,1213.02 1127.35,1213.02 1127.94,1213.02 1128.52,1213.02 1129.11,1213.02 1129.7,1213.02 1130.28,1213.02 1130.87,1213.02 1131.46,1213.02 1132.04,1213.02 1132.63,1213.02 1133.21,1213.02 1133.8,1213.02 1134.39,1213.02 1134.97,1213.02 1135.56,1213.02 1136.15,1213.02 1136.73,1213.02 1137.32,1213.02 1137.91,1213.02 1138.49,1213.02 1139.08,1213.02 1139.67,1213.02 1140.25,1213.02 1140.84,1213.02 1141.42,1213.02 1142.01,1213.02 1142.6,1213.02 1143.18,1213.02 1143.77,1213.02 1144.36,1213.02 1144.94,1213.02 1145.53,1213.02 1146.12,1213.02 1146.7,1213.02 1147.29,1213.02 1147.88,1213.02 1148.46,1213.02 1149.05,1213.02 1149.63,1213.02 1150.22,1213.02 1150.81,1213.02 1151.39,1213.02 1151.98,1213.02 1152.57,1213.02 1153.15,1213.02 1153.74,1213.02 1154.33,1213.02 1154.91,1213.02 1155.5,1213.02 1156.09,1213.02 1156.67,1213.02 1157.26,1213.02 1157.84,1213.02 1158.43,1213.02 1159.02,1213.02 1159.6,1213.02 1160.19,1213.02 1160.78,1213.02 1161.36,1213.02 1161.95,1213.02 1162.54,1213.02 1163.12,1213.02 1163.71,1213.02 1164.29,1213.02 1164.88,1213.02 1165.47,1213.02 1166.05,1213.02 1166.64,1213.02 1167.23,1213.02 1167.81,1213.02 1168.4,1213.02 1168.99,1213.02 1169.57,1213.02 1170.16,1213.02 1170.75,1213.02 1171.33,1213.02 1171.92,1213.02 1172.5,1213.02 1173.09,1213.02 1173.68,1213.02 1174.26,1213.02 1174.85,1213.02 1175.44,1213.02 1176.02,1213.02 1176.61,1213.02 1177.2,1213.02 1177.78,1213.02 1178.37,1213.02 1178.96,1213.02 1179.54,1213.02 1180.13,1213.02 1180.71,1213.02 1181.3,1213.02 1181.89,1213.02 1182.47,1213.02 1183.06,1213.02 1183.65,1213.02 1184.23,1213.02 1184.82,1213.02 1185.41,1213.02 1185.99,1213.02 1186.58,1213.02 1187.16,1213.02 1187.75,1213.02 1188.34,1213.02 1188.92,1213.02 1189.51,1213.02 1190.1,1213.02 1190.68,1213.02 1191.27,1213.02 1191.86,1213.02 1192.44,1213.02 1193.03,1213.02 1193.62,1213.02 1194.2,1213.02 1194.79,1213.02 1195.37,1213.02 1195.96,1213.02 1196.55,1213.02 1197.13,1213.02 1197.72,1213.02 1198.31,1213.02 1198.89,1213.02 1199.48,1213.02 1200.07,1213.02 1200.65,1213.02 1201.24,1213.02 1201.83,1213.02 1202.41,1213.02 1203,1213.02 1203.58,1213.02 1204.17,1213.02 1204.76,1213.02 1205.34,1213.02 1205.93,1213.02 1206.52,1213.02 1207.1,1213.02 1207.69,1213.02 1208.28,1213.02 1208.86,1213.02 1209.45,1213.02 1210.03,1213.02 1210.62,1213.02 1211.21,1213.02 1211.79,1213.02 1212.38,1213.02 1212.97,1213.02 1213.55,1213.02 1214.14,1213.02 1214.73,1213.02 1215.31,1213.02 1215.9,1213.02 1216.49,1213.02 1217.07,1213.02 1217.66,1213.02 1218.24,1213.02 1218.83,1213.02 1219.42,1213.02 1220,1213.02 1220.59,1213.02 1221.18,1213.02 1221.76,1213.02 1222.35,1213.02 1222.94,1213.02 1223.52,1213.02 1224.11,1213.02 1224.7,1213.02 1225.28,1213.02 1225.87,1213.02 1226.45,1213.02 1227.04,1213.02 1227.63,1213.02 1228.21,1213.02 1228.8,1213.02 1229.39,1213.02 1229.97,1213.02 1230.56,1213.02 1231.15,1213.02 1231.73,1213.02 1232.32,1213.02 1232.91,1213.02 1233.49,1213.02 1234.08,1213.02 1234.66,1213.02 1235.25,1213.02 1235.84,1213.02 1236.42,1213.02 1237.01,1213.02 1237.6,1213.02 1238.18,1213.02 1238.77,1213.02 1239.36,1213.02 1239.94,1213.02 1240.53,1213.02 1241.11,1213.02 1241.7,1213.02 1242.29,1213.02 1242.87,1213.02 1243.46,1213.02 1244.05,1213.02 1244.63,1213.02 1245.22,1213.02 1245.81,1213.02 1246.39,1213.02 1246.98,1213.02 1247.57,1213.02 1248.15,1213.02 1248.74,1213.02 1249.32,1213.02 1249.91,1213.02 1250.5,1213.02 1251.08,1213.02 1251.67,1213.02 1252.26,1213.02 1252.84,1213.02 1253.43,1213.02 1254.02,1213.02 1254.6,1213.02 1255.19,1213.02 1255.78,1213.02 1256.36,1213.02 1256.95,1213.02 1257.53,1213.02 1258.12,1213.02 1258.71,1213.02 1259.29,1213.02 1259.88,1213.02 1260.47,1213.02 1261.05,1213.02 1261.64,1213.02 1262.23,1213.02 1262.81,1213.02 1263.4,1213.02 1263.98,1213.02 1264.57,1213.02 1265.16,1213.02 1265.74,1213.02 1266.33,1213.02 1266.92,1213.02 1267.5,1213.02 1268.09,1213.02 1268.68,1213.02 1269.26,1213.02 1269.85,1213.02 1270.44,1213.02 1271.02,1213.02 1271.61,1213.02 1272.19,1213.02 1272.78,1213.02 1273.37,1213.02 1273.95,1213.02 1274.54,1213.02 1275.13,1213.02 1275.71,1213.02 1276.3,1213.02 1276.89,1213.02 1277.47,1213.02 1278.06,1213.02 1278.65,1213.02 1279.23,1213.02 1279.82,1213.02 1280.4,1213.02 1280.99,1213.02 1281.58,1213.02 1282.16,1213.02 1282.75,1213.02 1283.34,1213.02 1283.92,1213.02 1284.51,1213.02 1285.1,1213.02 1285.68,1213.02 1286.27,1213.02 1286.86,1213.02 1287.44,1213.02 1288.03,1213.02 1288.61,1213.02 1289.2,1213.02 1289.79,1213.02 1290.37,1213.02 1290.96,1213.02 1291.55,1213.02 1292.13,1213.02 1292.72,1213.02 1293.31,1213.02 1293.89,1213.02 1294.48,1213.02 1295.06,1213.02 1295.65,1213.02 1296.24,1213.02 1296.82,1213.02 1297.41,1213.02 1298,1213.02 1298.58,1213.02 1299.17,1213.02 1299.76,1213.02 1300.34,1213.02 1300.93,1213.02 1301.52,1213.02 1302.1,1213.02 1302.69,1213.02 1303.27,1213.02 1303.86,1213.02 1304.45,1213.02 1305.03,1213.02 1305.62,1213.02 1306.21,1213.02 1306.79,1213.02 1307.38,1213.02 1307.97,1213.02 1308.55,1213.02 1309.14,1213.02 1309.73,1213.02 1310.31,1213.02 1310.9,1213.02 1311.48,1213.02 1312.07,1213.02 1312.66,1213.02 1313.24,1213.02 1313.83,1213.02 1314.42,1213.02 1315,1213.02 1315.59,1213.02 1316.18,1213.02 1316.76,1213.02 1317.35,1213.02 1317.93,1213.02 1318.52,1213.02 1319.11,1213.02 1319.69,1213.02 1320.28,1213.02 1320.87,1213.02 1321.45,1213.02 1322.04,1213.02 1322.63,1213.02 1323.21,1213.02 1323.8,1213.02 1324.39,1213.02 1324.97,1213.02 1325.56,1213.02 1326.14,1213.02 1326.73,1213.02 1327.32,1213.02 1327.9,1213.02 1328.49,1213.02 1329.08,1213.02 1329.66,1213.02 1330.25,1213.02 1330.84,1213.02 1331.42,1213.02 1332.01,1213.02 1332.6,1213.02 1333.18,1213.02 1333.77,1213.02 1334.35,1213.02 1334.94,1213.02 1335.53,1213.02 1336.11,1213.02 1336.7,1213.02 1337.29,1213.02 1337.87,1213.02 1338.46,1213.02 1339.05,1213.02 1339.63,1213.02 1340.22,1213.02 1340.8,1213.02 1341.39,1213.02 1341.98,1213.02 1342.56,1213.02 1343.15,1213.02 1343.74,1213.02 1344.32,1213.02 1344.91,1213.02 1345.5,1213.02 1346.08,1213.02 1346.67,1213.02 1347.26,1213.02 1347.84,1213.02 1348.43,1213.02 1349.01,1213.02 1349.6,1213.02 1350.19,1213.02 1350.77,1213.02 1351.36,1213.02 1351.95,1213.02 1352.53,1213.02 1353.12,1213.02 1353.71,1213.02 1354.29,1213.02 1354.88,1213.02 1355.47,1213.02 1356.05,1213.02 1356.64,1213.02 1357.22,1213.02 1357.81,1213.02 1358.4,1213.02 1358.98,1213.02 1359.57,1213.02 1360.16,1213.02 1360.74,1213.02 1361.33,1213.02 1361.92,1213.02 1362.5,1213.02 1363.09,1213.02 1363.68,1213.02 1364.26,1213.02 1364.85,1213.02 1365.43,1213.02 1366.02,1213.02 1366.61,1213.02 1367.19,1213.02 1367.78,1213.02 1368.37,1213.02 1368.95,1213.02 1369.54,1213.02 1370.13,1213.02 1370.71,1213.02 1371.3,1213.02 1371.88,1213.02 1372.47,1213.02 1373.06,1213.02 1373.64,1213.02 1374.23,1213.02 1374.82,1213.02 1375.4,1213.02 1375.99,1213.02 1376.58,1213.02 1377.16,1213.02 1377.75,1213.02 1378.34,1213.02 1378.92,1213.02 1379.51,1213.02 1380.09,1213.02 1380.68,1213.02 1381.27,1213.02 1381.85,1213.02 1382.44,1213.02 1383.03,1213.02 1383.61,1213.02 1384.2,1213.02 1384.79,1213.02 1385.37,1213.02 1385.96,1213.02 1386.55,1213.02 1387.13,1213.02 1387.72,1213.02 1388.3,1213.02 1388.89,1213.02 1389.48,1213.02 1390.06,1213.02 1390.65,1213.02 1391.24,1213.02 1391.82,1213.02 1392.41,1213.02 1393,1213.02 1393.58,1213.02 1394.17,1213.02 1394.75,1213.02 1395.34,1213.02 1395.93,1213.02 1396.51,1213.02 1397.1,1213.02 1397.69,1213.02 1398.27,1213.02 1398.86,1213.02 1399.45,1213.02 1400.03,1213.02 1400.62,1213.02 1401.21,1213.02 1401.79,1213.02 1402.38,1213.02 1402.96,1213.02 1403.55,1213.02 1404.14,1213.02 1404.72,1213.02 1405.31,1213.02 1405.9,1213.02 1406.48,1213.02 1407.07,1213.02 1407.66,1213.02 1408.24,1213.02 1408.83,1213.02 1409.42,1213.02 1410,1213.02 1410.59,1213.02 1411.17,1213.02 1411.76,1213.02 1412.35,1213.02 1412.93,1213.02 1413.52,1213.02 1414.11,1213.02 1414.69,1213.02 1415.28,1213.02 1415.87,1213.02 1416.45,1213.02 1417.04,1213.02 1417.63,1213.02 1418.21,1213.02 1418.8,1213.02 1419.38,1213.02 1419.97,1213.02 1420.56,1213.02 1421.14,1213.02 1421.73,1213.02 1422.32,1213.02 1422.9,1213.02 1423.49,1213.02 1424.08,1213.02 1424.66,1213.02 1425.25,1213.02 1425.83,1213.02 1426.42,1213.02 1427.01,1213.02 1427.59,1213.02 1428.18,1213.02 1428.77,1213.02 1429.35,1213.02 1429.94,1213.02 1430.53,1213.02 1431.11,1213.02 1431.7,1213.02 1432.29,1213.02 1432.87,1213.02 1433.46,1213.02 1434.04,1213.02 1434.63,1213.02 1435.22,1213.02 1435.8,1213.02 1436.39,1213.02 1436.98,1213.02 1437.56,1213.02 1438.15,1213.02 1438.74,1213.02 1439.32,1213.02 1439.91,1213.02 1440.5,1213.02 1441.08,1213.02 1441.67,1213.02 1442.25,1213.02 1442.84,1213.02 1443.43,1213.02 1444.01,1213.02 1444.6,1213.02 1445.19,1213.02 1445.77,1213.02 1446.36,1213.02 1446.95,1213.02 1447.53,1213.02 1448.12,1213.02 1448.7,1213.02 1449.29,1213.02 1449.88,1213.02 1450.46,1213.02 1451.05,1213.02 1451.64,1213.02 1452.22,1213.02 1452.81,1213.02 1453.4,1213.02 1453.98,1213.02 1454.57,1213.02 1455.16,1213.02 1455.74,1213.02 1456.33,1213.02 1456.91,1213.02 1457.5,1213.02 1458.09,1213.02 1458.67,1213.02 1459.26,1213.02 1459.85,1213.02 1460.43,1213.02 1461.02,1213.02 1461.61,1213.02 1462.19,1213.02 1462.78,1213.02 1463.37,1213.02 1463.95,1213.02 1464.54,1213.02 1465.12,1213.02 1465.71,1213.02 1466.3,1213.02 1466.88,1213.02 1467.47,1213.02 1468.06,1213.02 1468.64,1213.02 1469.23,1213.02 1469.82,1213.02 1470.4,1213.02 1470.99,1213.02 1471.57,1213.02 1472.16,1213.02 1472.75,1213.02 1473.33,1213.02 1473.92,1213.02 1474.51,1213.02 1475.09,1213.02 1475.68,1213.02 1476.27,1213.02 1476.85,1213.02 1477.44,1213.02 1478.03,1213.02 1478.61,1213.02 1479.2,1213.02 1479.78,1213.02 1480.37,1213.02 1480.96,1213.02 1481.54,1213.02 1482.13,1213.02 1482.72,1213.02 1483.3,1213.02 1483.89,1213.02 1484.48,1213.02 1485.06,1213.02 1485.65,1213.02 1486.24,1213.02 1486.82,1213.02 1487.41,1213.02 1487.99,1213.02 1488.58,1213.02 1489.17,1213.02 1489.75,1213.02 1490.34,1213.02 1490.93,1213.02 1491.51,1213.02 1492.1,1213.02 1492.69,1213.02 1493.27,1213.02 1493.86,1213.02 1494.45,1213.02 1495.03,1213.02 1495.62,1213.02 1496.2,1213.02 1496.79,1213.02 1497.38,1213.02 1497.96,1213.02 1498.55,1213.02 1499.14,1213.02 1499.72,1213.02 1500.31,1213.02 1500.9,1213.02 1501.48,1213.02 1502.07,1213.02 1502.65,1213.02 1503.24,1213.02 1503.83,1213.02 1504.41,1213.02 1505,1213.02 1505.59,1213.02 1506.17,1213.02 1506.76,1213.02 1507.35,1213.02 1507.93,1213.02 1508.52,1213.02 1509.11,1213.02 1509.69,1213.02 1510.28,1213.02 1510.86,1213.02 1511.45,1213.02 1512.04,1213.02 1512.62,1213.02 1513.21,1213.02 1513.8,1213.02 1514.38,1213.02 1514.97,1213.02 1515.56,1213.02 1516.14,1213.02 1516.73,1213.02 1517.32,1213.02 1517.9,1213.02 1518.49,1213.02 1519.07,1213.02 1519.66,1213.02 1520.25,1213.02 1520.83,1213.02 1521.42,1213.02 1522.01,1213.02 1522.59,1213.02 1523.18,1213.02 1523.77,1213.02 1524.35,1213.02 1524.94,1213.02 1525.52,1213.02 1526.11,1213.02 1526.7,1213.02 1527.28,1213.02 1527.87,1213.02 1528.46,1213.02 1529.04,1213.02 1529.63,1213.02 1530.22,1213.02 1530.8,1213.02 1531.39,1213.02 1531.98,1213.02 1532.56,1213.02 1533.15,1213.02 1533.73,1213.02 1534.32,1213.02 1534.91,1213.02 1535.49,1213.02 1536.08,1213.02 1536.67,1213.02 1537.25,1213.02 1537.84,1213.02 1538.43,1213.02 1539.01,1213.02 1539.6,1213.02 1540.19,1213.02 1540.77,1213.02 1541.36,1213.02 1541.94,1213.02 1542.53,1213.02 1543.12,1213.02 1543.7,1213.02 1544.29,1213.02 1544.88,1213.02 1545.46,1213.02 1546.05,1213.02 1546.64,1213.02 1547.22,1213.02 1547.81,1213.02 1548.4,1213.02 1548.98,1213.02 1549.57,1213.02 1550.15,1213.02 1550.74,1213.02 1551.33,1213.02 1551.91,1213.02 1552.5,1213.02 1553.09,1213.02 1553.67,1213.02 1554.26,1213.02 1554.85,1213.02 1555.43,1213.02 1556.02,1213.02 1556.6,1213.02 1557.19,1213.02 1557.78,1213.02 1558.36,1213.02 1558.95,1213.02 1559.54,1213.02 1560.12,1213.02 1560.71,1213.02 1561.3,1213.02 1561.88,1213.02 1562.47,1213.02 1563.06,1213.02 1563.64,1213.02 1564.23,1213.02 1564.81,1213.02 1565.4,1213.02 1565.99,1213.02 1566.57,1213.02 1567.16,1213.02 1567.75,1213.02 1568.33,1213.02 1568.92,1213.02 1569.51,1213.02 1570.09,1213.02 1570.68,1213.02 1571.27,1213.02 1571.85,1213.02 1572.44,1213.02 1573.02,1213.02 1573.61,1213.02 1574.2,1213.02 1574.78,1213.02 1575.37,1213.02 1575.96,1213.02 1576.54,1213.02 1577.13,1213.02 1577.72,1213.02 1578.3,1213.02 1578.89,1213.02 1579.47,1213.02 1580.06,1213.02 1580.65,1213.02 1581.23,1213.02 1581.82,1213.02 1582.41,1213.02 1582.99,1213.02 1583.58,1213.02 1584.17,1213.02 1584.75,1213.02 1585.34,1213.02 1585.93,1213.02 1586.51,1213.02 1587.1,1213.02 1587.68,1213.02 1588.27,1213.02 1588.86,1213.02 1589.44,1213.02 1590.03,1213.02 1590.62,1213.02 1591.2,1213.02 1591.79,1213.02 1592.38,1213.02 1592.96,1213.02 1593.55,1213.02 1594.14,1213.02 1594.72,1213.02 1595.31,1213.02 1595.89,1213.02 1596.48,1213.02 1597.07,1213.02 1597.65,1213.02 1598.24,1213.02 1598.83,1213.02 1599.41,1213.02 1600,1213.02 1600.59,1213.02 1601.17,1213.02 1601.76,1213.02 1602.34,1213.02 1602.93,1213.02 1603.52,1213.02 1604.1,1213.02 1604.69,1213.02 1605.28,1213.02 1605.86,1213.02 1606.45,1213.02 1607.04,1213.02 1607.62,1213.02 1608.21,1213.02 1608.8,1213.02 1609.38,1213.02 1609.97,1213.02 1610.55,1213.02 1611.14,1213.02 1611.73,1213.02 1612.31,1213.02 1612.9,1213.02 1613.49,1213.02 1614.07,1213.02 1614.66,1213.02 1615.25,1213.02 1615.83,1213.02 1616.42,1213.02 1617.01,1213.02 1617.59,1213.02 1618.18,1213.02 1618.76,1213.02 1619.35,1213.02 1619.94,1213.02 1620.52,1213.02 1621.11,1213.02 1621.7,1213.02 1622.28,1213.02 1622.87,1213.02 1623.46,1213.02 1624.04,1213.02 1624.63,1213.02 1625.22,1213.02 1625.8,1213.02 1626.39,1213.02 1626.97,1213.02 1627.56,1213.02 1628.15,1213.02 1628.73,1213.02 1629.32,1213.02 1629.91,1213.02 1630.49,1213.02 1631.08,1213.02 1631.67,1213.02 1632.25,1213.02 1632.84,1213.02 1633.42,1213.02 1634.01,1213.02 1634.6,1213.02 1635.18,1213.02 1635.77,1213.02 1636.36,1213.02 1636.94,1213.02 1637.53,1213.02 1638.12,1213.02 1638.7,1213.02 1639.29,1213.02 1639.88,1213.02 1640.46,1213.02 1641.05,1213.02 1641.63,1213.02 1642.22,1213.02 1642.81,1213.02 1643.39,1213.02 1643.98,1213.02 1644.57,1213.02 1645.15,1213.02 1645.74,1213.02 1646.33,1213.02 1646.91,1213.02 1647.5,1213.02 1648.09,1213.02 1648.67,1213.02 1649.26,1213.02 1649.84,1213.02 1650.43,1213.02 1651.02,1213.02 1651.6,1213.02 1652.19,1213.02 1652.78,1213.02 1653.36,1213.02 1653.95,1213.02 1654.54,1213.02 1655.12,1213.02 1655.71,1213.02 1656.29,1213.02 1656.88,1213.02 1657.47,1213.02 1658.05,1213.02 1658.64,1213.02 1659.23,1213.02 1659.81,1213.02 1660.4,1213.02 1660.99,1213.02 1661.57,1213.02 1662.16,1213.02 1662.75,1213.02 1663.33,1213.02 1663.92,1213.02 1664.5,1213.02 1665.09,1213.02 1665.68,1213.02 1666.26,1213.02 1666.85,1213.02 1667.44,1213.02 1668.02,1213.02 1668.61,1213.02 1669.2,1213.02 1669.78,1213.02 1670.37,1213.02 1670.96,1213.02 1671.54,1213.02 1672.13,1213.02 1672.71,1213.02 1673.3,1213.02 1673.89,1213.02 1674.47,1213.02 1675.06,1213.02 1675.65,1213.02 1676.23,1213.02 1676.82,1213.02 1677.41,1213.02 1677.99,1213.02 1678.58,1213.02 1679.17,1213.02 1679.75,1213.02 1680.34,1213.02 1680.92,1213.02 1681.51,1213.02 1682.1,1213.02 1682.68,1213.02 1683.27,1213.02 1683.86,1213.02 1684.44,1213.02 1685.03,1213.02 1685.62,1213.02 1686.2,1213.02 1686.79,1213.02 1687.37,1213.02 1687.96,1213.02 1688.55,1213.02 1689.13,1213.02 1689.72,1213.02 1690.31,1213.02 1690.89,1213.02 1691.48,1213.02 1692.07,1213.02 1692.65,1213.02 1693.24,1213.02 1693.83,1213.02 1694.41,1213.02 1695,1213.02 1695.58,1213.02 1696.17,1213.02 1696.76,1213.02 1697.34,1213.02 1697.93,1213.02 1698.52,1213.02 1699.1,1213.02 1699.69,1213.02 1700.28,1213.02 1700.86,1213.02 1701.45,1213.02 1702.04,1213.02 1702.62,1213.02 1703.21,1213.02 1703.79,1213.02 1704.38,1213.02 1704.97,1213.02 1705.55,1213.02 1706.14,1213.02 1706.73,1213.02 1707.31,1213.02 1707.9,1213.02 1708.49,1213.02 1709.07,1213.02 1709.66,1213.02 1710.24,1213.02 1710.83,1213.02 1711.42,1213.02 1712,1213.02 1712.59,1213.02 1713.18,1213.02 1713.76,1213.02 1714.35,1213.02 1714.94,1213.02 1715.52,1213.02 1716.11,1213.02 1716.7,1213.02 1717.28,1213.02 1717.87,1213.02 1718.45,1213.02 1719.04,1213.02 1719.63,1213.02 1720.21,1213.02 1720.8,1213.02 1721.39,1213.02 1721.97,1213.02 1722.56,1213.02 1723.15,1213.02 1723.73,1213.02 1724.32,1213.02 1724.91,1213.02 1725.49,1213.02 1726.08,1213.02 1726.66,1213.02 1727.25,1213.02 1727.84,1213.02 1728.42,1213.02 1729.01,1213.02 1729.6,1213.02 1730.18,1213.02 1730.77,1213.02 1731.36,1213.02 1731.94,1213.02 1732.53,1213.02 1733.11,1213.02 1733.7,1213.02 1734.29,1213.02 1734.87,1213.02 1735.46,1213.02 1736.05,1213.02 1736.63,1213.02 1737.22,1213.02 1737.81,1213.02 1738.39,1213.02 1738.98,1213.02 1739.57,1213.02 1740.15,1213.02 1740.74,1213.02 1741.32,1213.02 1741.91,1213.02 1742.5,1213.02 1743.08,1213.02 1743.67,1213.02 1744.26,1213.02 1744.84,1213.02 1745.43,1213.02 1746.02,1213.02 1746.6,1213.02 1747.19,1213.02 1747.78,1213.02 1748.36,1213.02 1748.95,1213.02 1749.53,1213.02 1750.12,1213.02 1750.71,1213.02 1751.29,1213.02 1751.88,1213.02 1752.47,1213.02 1753.05,1213.02 1753.64,1213.02 1754.23,1213.02 1754.81,1213.02 1755.4,1213.02 1755.99,1213.02 1756.57,1213.02 1757.16,1213.02 1757.74,1213.02 1758.33,1213.02 1758.92,1213.02 1759.5,1213.02 1760.09,1213.02 1760.68,1213.02 1761.26,1213.02 1761.85,1213.02 1762.44,1213.02 1763.02,1213.02 1763.61,1213.02 1764.19,1213.02 1764.78,1213.02 1765.37,1213.02 1765.95,1213.02 1766.54,1213.02 1767.13,1213.02 1767.71,1213.02 1768.3,1213.02 1768.89,1213.02 1769.47,1213.02 1770.06,1213.02 1770.65,1213.02 1771.23,1213.02 1771.82,1213.02 1772.4,1213.02 1772.99,1213.02 1773.58,1213.02 1774.16,1213.02 1774.75,1213.02 1775.34,1213.02 1775.92,1213.02 1776.51,1213.02 1777.1,1213.02 1777.68,1213.02 1778.27,1213.02 1778.86,1213.02 1779.44,1213.02 1780.03,1213.02 1780.61,1213.02 1781.2,1213.02 1781.79,1213.02 1782.37,1213.02 1782.96,1213.02 1783.55,1213.02 1784.13,1213.02 1784.72,1213.02 1785.31,1213.02 1785.89,1213.02 1786.48,1213.02 1787.06,1213.02 1787.65,1213.02 1788.24,1213.02 1788.82,1213.02 1789.41,1213.02 1790,1213.02 1790.58,1213.02 1791.17,1213.02 1791.76,1213.02 1792.34,1213.02 1792.93,1213.02 1793.52,1213.02 1794.1,1213.02 1794.69,1213.02 1795.27,1213.02 1795.86,1213.02 1796.45,1213.02 1797.03,1213.02 1797.62,1213.02 1798.21,1213.02 1798.79,1213.02 1799.38,1213.02 1799.97,1213.02 1800.55,1213.02 1801.14,1213.02 1801.73,1213.02 1802.31,1213.02 1802.9,1213.02 1803.48,1213.02 1804.07,1213.02 1804.66,1213.02 1805.24,1213.02 1805.83,1213.02 1806.42,1213.02 1807,1213.02 1807.59,1213.02 1808.18,1213.02 1808.76,1213.02 1809.35,1213.02 1809.94,1213.02 1810.52,1213.02 1811.11,1213.02 1811.69,1213.02 1812.28,1213.02 1812.87,1213.02 1813.45,1213.02 1814.04,1213.02 1814.63,1213.02 1815.21,1213.02 1815.8,1213.02 1816.39,1213.02 1816.97,1213.02 1817.56,1213.02 1818.14,1213.02 1818.73,1213.02 1819.32,1213.02 1819.9,1213.02 1820.49,1213.02 1821.08,1213.02 1821.66,1213.02 1822.25,1213.02 1822.84,1213.02 1823.42,1213.02 1824.01,1213.02 1824.6,1213.02 1825.18,1213.02 1825.77,1213.02 1826.35,1213.02 1826.94,1213.02 1827.53,1213.02 1828.11,1213.02 1828.7,1213.02 1829.29,1213.02 1829.87,1213.02 1830.46,1213.02 1831.05,1213.02 1831.63,1213.02 1832.22,1213.02 1832.81,1213.02 1833.39,1213.02 1833.98,1213.02 1834.56,1213.02 1835.15,1213.02 1835.74,1213.02 1836.32,1213.02 1836.91,1213.02 1837.5,1213.02 1838.08,1213.02 1838.67,1213.02 1839.26,1213.02 1839.84,1213.02 1840.43,1213.02 1841.01,1213.02 1841.6,1213.02 1842.19,1213.02 1842.77,1213.02 1843.36,1213.02 1843.95,1213.02 1844.53,1213.02 1845.12,1213.02 1845.71,1213.02 1846.29,1213.02 1846.88,1213.02 1847.47,1213.02 1848.05,1213.02 1848.64,1213.02 1849.22,1213.02 1849.81,1213.02 1850.4,1213.02 1850.98,1213.02 1851.57,1213.02 1852.16,1213.02 1852.74,1213.02 1853.33,1213.02 1853.92,1213.02 1854.5,1213.02 1855.09,1213.02 1855.68,1213.02 1856.26,1213.02 1856.85,1213.02 1857.43,1213.02 1858.02,1213.02 1858.61,1213.02 1859.19,1213.02 1859.78,1213.02 1860.37,1213.02 1860.95,1213.02 1861.54,1213.02 1862.13,1213.02 1862.71,1213.02 1863.3,1213.02 1863.88,1213.02 1864.47,1213.02 1865.06,1213.02 1865.64,1213.02 1866.23,1213.02 1866.82,1213.02 1867.4,1213.02 1867.99,1213.02 1868.58,1213.02 1869.16,1213.02 1869.75,1213.02 1870.34,1213.02 1870.92,1213.02 1871.51,1213.02 1872.09,1213.02 1872.68,1213.02 1873.27,1213.02 1873.85,1213.02 1874.44,1213.02 1875.03,1213.02 1875.61,1213.02 1876.2,1213.02 1876.79,1213.02 1877.37,1213.02 1877.96,1213.02 1878.55,1213.02 1879.13,1213.02 1879.72,1213.02 1880.3,1213.02 1880.89,1213.02 1881.48,1213.02 1882.06,1213.02 1882.65,1213.02 1883.24,1213.02 1883.82,1213.02 1884.41,1213.02 1885,1213.02 1885.58,1213.02 1886.17,1213.02 1886.76,1213.02 1887.34,1213.02 1887.93,1213.02 1888.51,1213.02 1889.1,1213.02 1889.69,1213.02 1890.27,1213.02 1890.86,1213.02 1891.45,1213.02 1892.03,1213.02 1892.62,1213.02 1893.21,1213.02 1893.79,1213.02 1894.38,1213.02 1894.96,1213.02 1895.55,1213.02 1896.14,1213.02 1896.72,1213.02 1897.31,1213.02 1897.9,1213.02 1898.48,1213.02 1899.07,1213.02 1899.66,1213.02 1900.24,1213.02 1900.83,1213.02 1901.42,1213.02 1902,1213.02 1902.59,1213.02 1903.17,1213.02 1903.76,1213.02 1904.35,1213.02 1904.93,1213.02 1905.52,1213.02 1906.11,1213.02 1906.69,1213.02 1907.28,1213.02 1907.87,1213.02 1908.45,1213.02 1909.04,1213.02 1909.63,1213.02 1910.21,1213.02 1910.8,1213.02 1911.38,1213.02 1911.97,1213.02 1912.56,1213.02 1913.14,1213.02 1913.73,1213.02 1914.32,1213.02 1914.9,1213.02 1915.49,1213.02 1916.08,1213.02 1916.66,1213.02 1917.25,1213.02 1917.83,1213.02 1918.42,1213.02 1919.01,1213.02 1919.59,1213.02 1920.18,1213.02 1920.77,1213.02 1921.35,1213.02 1921.94,1213.02 1922.53,1213.02 1923.11,1213.02 1923.7,1213.02 1924.29,1213.02 1924.87,1213.02 1925.46,1213.02 1926.04,1213.02 1926.63,1213.02 1927.22,1213.02 1927.8,1213.02 1928.39,1213.02 1928.98,1213.02 1929.56,1213.02 1930.15,1213.02 1930.74,1213.02 1931.32,1213.02 1931.91,1213.02 1932.5,1213.02 1933.08,1213.02 1933.67,1213.02 1934.25,1213.02 1934.84,1213.02 1935.43,1213.02 1936.01,1213.02 1936.6,1213.02 1937.19,1213.02 1937.77,1213.02 1938.36,1213.02 1938.95,1213.02 1939.53,1213.02 1940.12,1213.02 1940.71,1213.02 1941.29,1213.02 1941.88,1213.02 1942.46,1213.02 1943.05,1213.02 1943.64,1213.02 1944.22,1213.02 1944.81,1213.02 1945.4,1213.02 1945.98,1213.02 1946.57,1213.02 1947.16,1213.02 1947.74,1213.02 1948.33,1213.02 1948.91,1213.02 1949.5,1213.02 1950.09,1213.02 1950.67,1213.02 1951.26,1213.02 1951.85,1213.02 1952.43,1213.02 1953.02,1213.02 1953.61,1213.02 1954.19,1213.02 1954.78,1213.02 1955.37,1213.02 1955.95,1213.02 1956.54,1213.02 1957.12,1213.02 1957.71,1213.02 1958.3,1213.02 1958.88,1213.02 1959.47,1213.02 1960.06,1213.02 1960.64,1213.02 1961.23,1213.02 1961.82,1213.02 1962.4,1213.02 1962.99,1213.02 1963.58,1213.02 1964.16,1213.02 1964.75,1213.02 1965.33,1213.02 1965.92,1213.02 1966.51,1213.02 1967.09,1213.02 1967.68,1213.02 1968.27,1213.02 1968.85,1213.02 1969.44,1213.02 1970.03,1213.02 1970.61,1213.02 1971.2,1213.02 1971.78,1213.02 1972.37,1213.02 1972.96,1213.02 1973.54,1213.02 1974.13,1213.02 1974.72,1213.02 1975.3,1213.02 1975.89,1213.02 1976.48,1213.02 1977.06,1213.02 1977.65,1213.02 1978.24,1213.02 1978.82,1213.02 1979.41,1213.02 1979.99,1213.02 1980.58,1213.02 1981.17,1213.02 1981.75,1213.02 1982.34,1213.02 1982.93,1213.02 1983.51,1213.02 1984.1,1213.02 1984.69,1213.02 1985.27,1213.02 1985.86,1213.02 1986.45,1213.02 1987.03,1213.02 1987.62,1213.02 1988.2,1213.02 1988.79,1213.02 1989.38,1213.02 1989.96,1213.02 1990.55,1213.02 1991.14,1213.02 1991.72,1213.02 1992.31,1213.02 1992.9,1213.02 1993.48,1213.02 1994.07,1213.02 1994.65,1213.02 1995.24,1213.02 1995.83,1213.02 1996.41,1213.02 1997,1213.02 1997.59,1213.02 1998.17,1213.02 1998.76,1213.02 1999.35,1213.02 1999.93,1213.02 2000.52,1213.02 2001.11,1213.02 2001.69,1213.02 2002.28,1213.02 2002.86,1213.02 2003.45,1213.02 2004.04,1213.02 2004.62,1213.02 2005.21,1213.02 2005.8,1213.02 2006.38,1213.02 2006.97,1213.02 2007.56,1213.02 2008.14,1213.02 2008.73,1213.02 2009.32,1213.02 2009.9,1213.02 2010.49,1213.02 2011.07,1213.02 2011.66,1213.02 2012.25,1213.02 2012.83,1213.02 2013.42,1213.02 2014.01,1213.02 2014.59,1213.02 2015.18,1213.02 2015.77,1213.02 2016.35,1213.02 2016.94,1213.02 2017.53,1213.02 2018.11,1213.02 2018.7,1213.02 2019.28,1213.02 2019.87,1213.02 2020.46,1213.02 2021.04,1213.02 2021.63,1213.02 2022.22,1213.02 2022.8,1213.02 2023.39,1213.02 2023.98,1213.02 2024.56,1213.02 2025.15,1213.02 2025.73,1213.02 2026.32,1213.02 2026.91,1213.02 2027.49,1213.02 2028.08,1213.02 2028.67,1213.02 2029.25,1213.02 2029.84,1213.02 2030.43,1213.02 2031.01,1213.02 2031.6,1213.02 2032.19,1213.02 2032.77,1213.02 2033.36,1213.02 2033.94,1213.02 2034.53,1213.02 2035.12,1213.02 2035.7,1213.02 2036.29,1213.02 2036.88,1213.02 2037.46,1213.02 2038.05,1213.02 2038.64,1213.02 2039.22,1213.02 2039.81,1213.02 2040.4,1213.02 2040.98,1213.02 2041.57,1213.02 2042.15,1213.02 2042.74,1213.02 2043.33,1213.02 2043.91,1213.02 2044.5,1213.02 2045.09,1213.02 2045.67,1213.02 2046.26,1213.02 2046.85,1213.02 2047.43,1213.02 2048.02,1213.02 2048.6,1213.02 2049.19,1213.02 2049.78,1213.02 2050.36,1213.02 2050.95,1213.02 2051.54,1213.02 2052.12,1213.02 2052.71,1213.02 2053.3,1213.02 2053.88,1213.02 2054.47,1213.02 2055.06,1213.02 2055.64,1213.02 2056.23,1213.02 2056.81,1213.02 2057.4,1213.02 2057.99,1213.02 2058.57,1213.02 2059.16,1213.02 2059.75,1213.02 2060.33,1213.02 2060.92,1213.02 2061.51,1213.02 2062.09,1213.02 2062.68,1213.02 2063.27,1213.02 2063.85,1213.02 2064.44,1213.02 2065.02,1213.02 2065.61,1213.02 2066.2,1213.02 2066.78,1213.02 2067.37,1213.02 2067.96,1213.02 2068.54,1213.02 2069.13,1213.02 2069.72,1213.02 2070.3,1213.02 2070.89,1213.02 2071.48,1213.02 2072.06,1213.02 2072.65,1213.02 2073.23,1213.02 2073.82,1213.02 2074.41,1213.02 2074.99,1213.02 2075.58,1213.02 2076.17,1213.02 2076.75,1213.02 2077.34,1213.02 2077.93,1213.02 2078.51,1213.02 2079.1,1213.02 2079.68,1213.02 2080.27,1213.02 2080.86,1213.02 2081.44,1213.02 2082.03,1213.02 2082.62,1213.02 2083.2,1213.02 2083.79,1213.02 2084.38,1213.02 2084.96,1213.02 2085.55,1213.02 2086.14,1213.02 2086.72,1213.02 2087.31,1213.02 2087.89,1213.02 2088.48,1213.02 2089.07,1213.02 2089.65,1213.02 2090.24,1213.02 2090.83,1213.02 2091.41,1213.02 2092,1213.02 2092.59,1213.02 2093.17,1213.02 2093.76,1213.02 2094.35,1213.02 2094.93,1213.02 2095.52,1213.02 2096.1,1213.02 2096.69,1213.02 2097.28,1213.02 2097.86,1213.02 2098.45,1213.02 2099.04,1213.02 2099.62,1213.02 2100.21,1213.02 2100.8,1213.02 2101.38,1213.02 2101.97,1213.02 2102.55,1213.02 2103.14,1213.02 2103.73,1213.02 2104.31,1213.02 2104.9,1213.02 2105.49,1213.02 2106.07,1213.02 2106.66,1213.02 2107.25,1213.02 2107.83,1213.02 2108.42,1213.02 2109.01,1213.02 2109.59,1213.02 2110.18,1213.02 2110.76,1213.02 2111.35,1213.02 2111.94,1213.02 2112.52,1213.02 2113.11,1213.02 2113.7,1213.02 2114.28,1213.02 2114.87,1213.02 2115.46,1213.02 2116.04,1213.02 2116.63,1213.02 2117.22,1213.02 2117.8,1213.02 2118.39,1213.02 2118.97,1213.02 2119.56,1213.02 2120.15,1213.02 2120.73,1213.02 2121.32,1213.02 2121.91,1213.02 2122.49,1213.02 2123.08,1213.02 2123.67,1213.02 2124.25,1213.02 2124.84,1213.02 2125.42,1213.02 2126.01,1213.02 2126.6,1213.02 2127.18,1213.02 2127.77,1213.02 2128.36,1213.02 2128.94,1213.02 2129.53,1213.02 2130.12,1213.02 2130.7,1213.02 2131.29,1213.02 2131.88,1213.02 2132.46,1213.02 2133.05,1213.02 2133.63,1213.02 2134.22,1213.02 2134.81,1213.02 2135.39,1213.02 2135.98,1213.02 2136.57,1213.02 2137.15,1213.02 2137.74,1213.02 2138.33,1213.02 2138.91,1213.02 2139.5,1213.02 2140.09,1213.02 2140.67,1213.02 2141.26,1213.02 2141.84,1213.02 2142.43,1213.02 2143.02,1213.02 2143.6,1213.02 2144.19,1213.02 2144.78,1213.02 2145.36,1213.02 2145.95,1213.02 2146.54,1213.02 2147.12,1213.02 2147.71,1213.02 2148.3,1213.02 2148.88,1213.02 2149.47,1213.02 2150.05,1213.02 2150.64,1213.02 2151.23,1213.02 2151.81,1213.02 2152.4,1213.02 2152.99,1213.02 2153.57,1213.02 2154.16,1213.02 2154.75,1213.02 2155.33,1213.02 2155.92,1213.02 2156.5,1213.02 2157.09,1213.02 2157.68,1213.02 2158.26,1213.02 \"/>\n<path clip-path=\"url(#clip362)\" d=\"M986.025 1212.9 L986.612 1212.9 L987.198 1212.9 L987.785 1212.9 L988.371 1212.9 L988.957 1212.9 L989.544 1212.9 L990.13 1212.9 L990.717 1212.9 L991.303 1212.9 L991.889 1212.9 L992.476 1212.9 L993.062 1212.9 L993.649 1212.9 L994.235 1212.9 L994.822 1212.9 L995.408 1212.9 L995.994 1212.9 L996.581 1212.9 L997.167 1212.9 L997.754 1212.9 L998.34 1212.9 L998.926 1212.9 L999.513 1212.9 L1000.1 1212.9 L1000.69 1212.9 L1001.27 1212.9 L1001.86 1212.9 L1002.44 1212.9 L1003.03 1212.9 L1003.62 1212.9 L1004.2 1212.9 L1004.79 1212.9 L1005.38 1212.9 L1005.96 1212.9 L1006.55 1212.9 L1007.14 1212.9 L1007.72 1212.9 L1008.31 1212.9 L1008.9 1212.9 L1009.48 1212.9 L1010.07 1212.9 L1010.65 1212.9 L1011.24 1212.9 L1011.83 1212.9 L1012.41 1212.9 L1013 1212.9 L1013.59 1212.9 L1014.17 1212.9 L1014.76 1212.9 L1015.35 1212.9 L1015.93 1212.9 L1016.52 1212.9 L1017.11 1212.9 L1017.69 1212.9 L1018.28 1212.9 L1018.86 1212.9 L1019.45 1212.9 L1020.04 1212.9 L1020.62 1212.9 L1021.21 1212.9 L1021.8 1212.9 L1022.38 1212.9 L1022.97 1212.9 L1023.56 1212.9 L1024.14 1212.9 L1024.73 1212.9 L1025.32 1212.9 L1025.9 1212.9 L1026.49 1212.9 L1027.07 1212.9 L1027.66 1212.9 L1028.25 1212.9 L1028.83 1212.9 L1029.42 1212.9 L1030.01 1212.9 L1030.59 1212.9 L1031.18 1212.9 L1031.77 1212.9 L1032.35 1212.9 L1032.94 1212.9 L1033.52 1212.9 L1034.11 1212.9 L1034.7 1212.9 L1035.28 1212.9 L1035.87 1212.9 L1036.46 1212.9 L1037.04 1212.9 L1037.63 1212.9 L1038.22 1212.9 L1038.8 1212.9 L1039.39 1212.9 L1039.98 1212.9 L1040.56 1212.9 L1041.15 1212.9 L1041.73 1212.9 L1042.32 1212.9 L1042.91 1212.9 L1043.49 1212.9 L1044.08 1212.9 L1044.67 1212.9 L1045.25 1212.9 L1045.84 1212.9 L1046.43 1212.9 L1047.01 1212.9 L1047.6 1212.9 L1048.19 1212.9 L1048.77 1212.9 L1049.36 1212.9 L1049.94 1212.9 L1050.53 1212.9 L1051.12 1212.9 L1051.7 1212.9 L1052.29 1212.9 L1052.88 1212.9 L1053.46 1212.9 L1054.05 1212.9 L1054.64 1212.9 L1055.22 1212.9 L1055.81 1212.9 L1056.39 1212.9 L1056.98 1212.9 L1057.57 1212.9 L1058.15 1212.9 L1058.74 1212.9 L1059.33 1212.9 L1059.91 1212.9 L1060.5 1212.9 L1061.09 1212.9 L1061.67 1212.9 L1062.26 1212.9 L1062.85 1212.9 L1063.43 1212.9 L1064.02 1212.9 L1064.6 1212.9 L1065.19 1212.9 L1065.78 1212.9 L1066.36 1212.9 L1066.95 1212.9 L1067.54 1212.9 L1068.12 1212.9 L1068.71 1212.9 L1069.3 1212.9 L1069.88 1212.9 L1070.47 1212.9 L1071.06 1212.9 L1071.64 1212.9 L1072.23 1212.9 L1072.81 1212.9 L1073.4 1212.9 L1073.99 1212.9 L1074.57 1212.9 L1075.16 1212.9 L1075.75 1212.9 L1076.33 1212.9 L1076.92 1212.9 L1077.51 1212.9 L1078.09 1212.9 L1078.68 1212.9 L1079.26 1212.9 L1079.85 1212.9 L1080.44 1212.9 L1081.02 1212.9 L1081.61 1212.9 L1082.2 1212.9 L1082.78 1212.9 L1083.37 1212.9 L1083.96 1212.9 L1084.54 1212.9 L1085.13 1212.9 L1085.72 1212.9 L1086.3 1212.9 L1086.89 1212.9 L1087.47 1212.9 L1088.06 1212.9 L1088.65 1212.9 L1089.23 1212.9 L1089.82 1212.9 L1090.41 1212.9 L1090.99 1212.9 L1091.58 1212.9 L1092.17 1212.9 L1092.75 1212.9 L1093.34 1212.9 L1093.93 1212.9 L1094.51 1212.9 L1095.1 1212.9 L1095.68 1212.9 L1096.27 1212.9 L1096.86 1212.9 L1097.44 1212.9 L1098.03 1212.9 L1098.62 1212.9 L1099.2 1212.9 L1099.79 1212.9 L1100.38 1212.9 L1100.96 1212.9 L1101.55 1212.9 L1102.14 1212.9 L1102.72 1212.9 L1103.31 1212.9 L1103.89 1212.9 L1104.48 1212.9 L1105.07 1212.9 L1105.65 1212.9 L1106.24 1212.9 L1106.83 1212.9 L1107.41 1212.9 L1108 1212.9 L1108.59 1212.9 L1109.17 1212.9 L1109.76 1212.9 L1110.34 1212.9 L1110.93 1212.9 L1111.52 1212.9 L1112.1 1212.9 L1112.69 1212.9 L1113.28 1212.9 L1113.86 1212.9 L1114.45 1212.9 L1115.04 1212.9 L1115.62 1212.9 L1116.21 1212.9 L1116.8 1212.9 L1117.38 1212.9 L1117.97 1212.9 L1118.55 1212.9 L1119.14 1212.9 L1119.73 1212.9 L1120.31 1212.9 L1120.9 1212.9 L1121.49 1212.9 L1122.07 1212.9 L1122.66 1212.9 L1123.25 1212.9 L1123.83 1212.9 L1124.42 1212.9 L1125.01 1212.9 L1125.59 1212.9 L1126.18 1212.9 L1126.76 1212.9 L1127.35 1212.9 L1127.94 1212.9 L1128.52 1212.9 L1129.11 1212.9 L1129.7 1212.9 L1130.28 1212.9 L1130.87 1212.9 L1131.46 1212.9 L1132.04 1212.9 L1132.63 1212.9 L1133.21 1212.9 L1133.8 1212.9 L1134.39 1212.9 L1134.97 1212.9 L1135.56 1212.9 L1136.15 1212.9 L1136.73 1212.9 L1137.32 1212.9 L1137.91 1212.9 L1138.49 1212.9 L1139.08 1212.9 L1139.67 1212.9 L1140.25 1212.9 L1140.84 1212.9 L1141.42 1212.9 L1142.01 1212.9 L1142.6 1212.9 L1143.18 1212.9 L1143.77 1212.9 L1144.36 1212.9 L1144.94 1212.9 L1145.53 1212.9 L1146.12 1212.9 L1146.7 1212.9 L1147.29 1212.9 L1147.88 1212.9 L1148.46 1212.9 L1149.05 1212.9 L1149.63 1212.9 L1150.22 1212.9 L1150.81 1212.9 L1151.39 1212.9 L1151.98 1212.9 L1152.57 1212.9 L1153.15 1212.9 L1153.74 1212.9 L1154.33 1212.9 L1154.91 1212.9 L1155.5 1212.9 L1156.09 1212.9 L1156.67 1212.9 L1157.26 1212.9 L1157.84 1212.9 L1158.43 1212.9 L1159.02 1212.9 L1159.6 1212.9 L1160.19 1212.9 L1160.78 1212.9 L1161.36 1212.9 L1161.95 1212.9 L1162.54 1212.9 L1163.12 1212.9 L1163.71 1212.9 L1164.29 1212.9 L1164.88 1212.9 L1165.47 1212.9 L1166.05 1212.9 L1166.64 1212.9 L1167.23 1212.9 L1167.81 1212.9 L1168.4 1212.9 L1168.99 1212.9 L1169.57 1212.9 L1170.16 1212.9 L1170.75 1212.9 L1171.33 1212.9 L1171.92 1212.9 L1172.5 1212.9 L1173.09 1212.9 L1173.68 1212.9 L1174.26 1212.9 L1174.85 1212.9 L1175.44 1212.9 L1176.02 1212.9 L1176.61 1212.9 L1177.2 1212.9 L1177.78 1212.9 L1178.37 1212.9 L1178.96 1212.9 L1179.54 1212.9 L1180.13 1212.9 L1180.71 1212.9 L1181.3 1212.9 L1181.89 1212.9 L1182.47 1212.9 L1183.06 1212.9 L1183.65 1212.9 L1184.23 1212.9 L1184.82 1212.9 L1185.41 1212.9 L1185.99 1212.9 L1186.58 1212.9 L1187.16 1212.9 L1187.75 1212.9 L1188.34 1212.9 L1188.92 1212.9 L1189.51 1212.9 L1190.1 1212.9 L1190.68 1212.9 L1191.27 1212.9 L1191.86 1212.9 L1192.44 1212.9 L1193.03 1212.9 L1193.62 1212.9 L1194.2 1212.9 L1194.79 1212.9 L1195.37 1212.9 L1195.96 1212.9 L1196.55 1212.9 L1197.13 1212.9 L1197.72 1212.9 L1198.31 1212.9 L1198.89 1212.9 L1199.48 1212.9 L1200.07 1212.9 L1200.65 1212.9 L1201.24 1212.9 L1201.83 1212.9 L1202.41 1212.9 L1203 1212.9 L1203.58 1212.9 L1204.17 1212.9 L1204.76 1212.9 L1205.34 1212.9 L1205.93 1212.9 L1206.52 1212.9 L1207.1 1212.9 L1207.69 1212.9 L1208.28 1212.9 L1208.86 1212.9 L1209.45 1212.9 L1210.03 1212.9 L1210.62 1212.9 L1211.21 1212.9 L1211.79 1212.9 L1212.38 1212.9 L1212.97 1212.9 L1213.55 1212.9 L1214.14 1212.9 L1214.73 1212.9 L1215.31 1212.9 L1215.9 1212.9 L1216.49 1212.9 L1217.07 1212.9 L1217.66 1212.9 L1218.24 1212.9 L1218.83 1212.9 L1219.42 1212.9 L1220 1212.9 L1220.59 1212.9 L1221.18 1212.9 L1221.76 1212.9 L1222.35 1212.9 L1222.94 1212.9 L1223.52 1212.9 L1224.11 1212.9 L1224.7 1212.9 L1225.28 1212.9 L1225.87 1212.9 L1226.45 1212.9 L1227.04 1212.9 L1227.63 1212.9 L1228.21 1212.9 L1228.8 1212.9 L1229.39 1212.9 L1229.97 1212.9 L1230.56 1212.9 L1231.15 1212.9 L1231.73 1212.9 L1232.32 1212.9 L1232.91 1212.9 L1233.49 1212.9 L1234.08 1212.9 L1234.66 1212.9 L1235.25 1212.9 L1235.84 1212.9 L1236.42 1212.9 L1237.01 1212.9 L1237.6 1212.9 L1238.18 1212.9 L1238.77 1212.9 L1239.36 1212.9 L1239.94 1212.9 L1240.53 1212.9 L1241.11 1212.9 L1241.7 1212.9 L1242.29 1212.9 L1242.87 1212.9 L1243.46 1212.9 L1244.05 1212.9 L1244.63 1212.9 L1245.22 1212.9 L1245.81 1212.9 L1246.39 1212.9 L1246.98 1212.9 L1247.57 1212.9 L1248.15 1212.9 L1248.74 1212.9 L1249.32 1212.9 L1249.91 1212.9 L1250.5 1212.9 L1251.08 1212.9 L1251.67 1212.9 L1252.26 1212.9 L1252.84 1212.9 L1253.43 1212.9 L1254.02 1212.9 L1254.6 1212.9 L1255.19 1212.9 L1255.78 1212.9 L1256.36 1212.9 L1256.95 1212.9 L1257.53 1212.9 L1258.12 1212.9 L1258.71 1212.9 L1259.29 1212.9 L1259.88 1212.9 L1260.47 1212.9 L1261.05 1212.9 L1261.64 1212.9 L1262.23 1212.9 L1262.81 1212.9 L1263.4 1212.9 L1263.98 1212.9 L1264.57 1212.9 L1265.16 1212.9 L1265.74 1212.9 L1266.33 1212.9 L1266.92 1212.9 L1267.5 1212.9 L1268.09 1212.9 L1268.68 1212.9 L1269.26 1212.9 L1269.85 1212.9 L1270.44 1212.9 L1271.02 1212.9 L1271.61 1212.9 L1272.19 1212.9 L1272.78 1212.9 L1273.37 1212.9 L1273.95 1212.9 L1274.54 1212.9 L1275.13 1212.9 L1275.71 1212.9 L1276.3 1212.9 L1276.89 1212.9 L1277.47 1212.9 L1278.06 1212.9 L1278.65 1212.9 L1279.23 1212.9 L1279.82 1212.9 L1280.4 1212.9 L1280.99 1212.9 L1281.58 1212.9 L1282.16 1212.9 L1282.75 1212.9 L1283.34 1212.9 L1283.92 1212.9 L1284.51 1212.9 L1285.1 1212.9 L1285.68 1212.9 L1286.27 1212.9 L1286.86 1212.9 L1287.44 1212.9 L1288.03 1212.9 L1288.61 1212.9 L1289.2 1212.9 L1289.79 1212.9 L1290.37 1212.9 L1290.96 1212.9 L1291.55 1212.9 L1292.13 1212.9 L1292.72 1212.9 L1293.31 1212.9 L1293.89 1212.9 L1294.48 1212.9 L1295.06 1212.9 L1295.65 1212.9 L1296.24 1212.9 L1296.82 1212.9 L1297.41 1212.9 L1298 1212.9 L1298.58 1212.9 L1299.17 1212.9 L1299.76 1212.9 L1300.34 1212.9 L1300.93 1212.9 L1301.52 1212.9 L1302.1 1212.9 L1302.69 1212.9 L1303.27 1212.9 L1303.86 1212.9 L1304.45 1212.9 L1305.03 1212.9 L1305.62 1212.9 L1306.21 1212.9 L1306.79 1212.9 L1307.38 1212.9 L1307.97 1212.9 L1308.55 1212.9 L1309.14 1212.9 L1309.73 1212.9 L1310.31 1212.9 L1310.9 1212.9 L1311.48 1212.9 L1312.07 1212.9 L1312.66 1212.9 L1313.24 1212.9 L1313.83 1212.9 L1314.42 1212.9 L1315 1212.9 L1315.59 1212.9 L1316.18 1212.9 L1316.76 1212.9 L1317.35 1212.9 L1317.93 1212.9 L1318.52 1212.9 L1319.11 1212.9 L1319.69 1212.9 L1320.28 1212.9 L1320.87 1212.9 L1321.45 1212.9 L1322.04 1212.9 L1322.63 1212.9 L1323.21 1212.9 L1323.8 1212.9 L1324.39 1212.9 L1324.97 1212.9 L1325.56 1212.9 L1326.14 1212.9 L1326.73 1212.9 L1327.32 1212.9 L1327.9 1212.9 L1328.49 1212.9 L1329.08 1212.9 L1329.66 1212.9 L1330.25 1212.9 L1330.84 1212.9 L1331.42 1212.9 L1332.01 1212.9 L1332.6 1212.9 L1333.18 1212.9 L1333.77 1212.9 L1334.35 1212.9 L1334.94 1212.9 L1335.53 1212.9 L1336.11 1212.9 L1336.7 1212.9 L1337.29 1212.9 L1337.87 1212.9 L1338.46 1212.9 L1339.05 1212.9 L1339.63 1212.9 L1340.22 1212.9 L1340.8 1212.9 L1341.39 1212.9 L1341.98 1212.9 L1342.56 1212.9 L1343.15 1212.9 L1343.74 1212.9 L1344.32 1212.9 L1344.91 1212.9 L1345.5 1212.9 L1346.08 1212.9 L1346.67 1212.9 L1347.26 1212.9 L1347.84 1212.9 L1348.43 1212.9 L1349.01 1212.9 L1349.6 1212.9 L1350.19 1212.9 L1350.77 1212.9 L1351.36 1212.9 L1351.95 1212.9 L1352.53 1212.9 L1353.12 1212.9 L1353.71 1212.9 L1354.29 1212.9 L1354.88 1212.9 L1355.47 1212.9 L1356.05 1212.9 L1356.64 1212.9 L1357.22 1212.9 L1357.81 1212.9 L1358.4 1212.9 L1358.98 1212.9 L1359.57 1212.9 L1360.16 1212.9 L1360.74 1212.9 L1361.33 1212.9 L1361.92 1212.9 L1362.5 1212.9 L1363.09 1212.9 L1363.68 1212.9 L1364.26 1212.9 L1364.85 1212.9 L1365.43 1212.9 L1366.02 1212.9 L1366.61 1212.9 L1367.19 1212.9 L1367.78 1212.9 L1368.37 1212.9 L1368.95 1212.9 L1369.54 1212.9 L1370.13 1212.9 L1370.71 1212.9 L1371.3 1212.9 L1371.88 1212.9 L1372.47 1212.9 L1373.06 1212.9 L1373.64 1212.9 L1374.23 1212.9 L1374.82 1212.9 L1375.4 1212.9 L1375.99 1212.9 L1376.58 1212.9 L1377.16 1212.9 L1377.75 1212.9 L1378.34 1212.9 L1378.92 1212.9 L1379.51 1212.9 L1380.09 1212.9 L1380.68 1212.9 L1381.27 1212.9 L1381.85 1212.9 L1382.44 1212.9 L1383.03 1212.9 L1383.61 1212.9 L1384.2 1212.9 L1384.79 1212.9 L1385.37 1212.9 L1385.96 1212.9 L1386.55 1212.9 L1387.13 1212.9 L1387.72 1212.9 L1388.3 1212.9 L1388.89 1212.9 L1389.48 1212.9 L1390.06 1212.9 L1390.65 1212.9 L1391.24 1212.9 L1391.82 1212.9 L1392.41 1212.9 L1393 1212.9 L1393.58 1212.9 L1394.17 1212.9 L1394.75 1212.9 L1395.34 1212.9 L1395.93 1212.9 L1396.51 1212.9 L1397.1 1212.9 L1397.69 1212.9 L1398.27 1212.9 L1398.86 1212.9 L1399.45 1212.9 L1400.03 1212.9 L1400.62 1212.9 L1401.21 1212.9 L1401.79 1212.9 L1402.38 1212.9 L1402.96 1212.9 L1403.55 1212.9 L1404.14 1212.9 L1404.72 1212.9 L1405.31 1212.9 L1405.9 1212.9 L1406.48 1212.9 L1407.07 1212.9 L1407.66 1212.9 L1408.24 1212.9 L1408.83 1212.9 L1409.42 1212.9 L1410 1212.9 L1410.59 1212.9 L1411.17 1212.9 L1411.76 1212.9 L1412.35 1212.9 L1412.93 1212.9 L1413.52 1212.9 L1414.11 1212.9 L1414.69 1212.9 L1415.28 1212.9 L1415.87 1212.9 L1416.45 1212.9 L1417.04 1212.9 L1417.63 1212.9 L1418.21 1212.9 L1418.8 1212.9 L1419.38 1212.9 L1419.97 1212.9 L1420.56 1212.9 L1421.14 1212.9 L1421.73 1212.9 L1422.32 1212.9 L1422.9 1212.9 L1423.49 1212.9 L1424.08 1212.9 L1424.66 1212.9 L1425.25 1212.9 L1425.83 1212.9 L1426.42 1212.9 L1427.01 1212.9 L1427.59 1212.9 L1428.18 1212.9 L1428.77 1212.9 L1429.35 1212.9 L1429.94 1212.9 L1430.53 1212.9 L1431.11 1212.9 L1431.7 1212.9 L1432.29 1212.9 L1432.87 1212.9 L1433.46 1212.9 L1434.04 1212.9 L1434.63 1212.9 L1435.22 1212.9 L1435.8 1212.9 L1436.39 1212.9 L1436.98 1212.9 L1437.56 1212.9 L1438.15 1212.9 L1438.74 1212.9 L1439.32 1212.9 L1439.91 1212.9 L1440.5 1212.9 L1441.08 1212.9 L1441.67 1212.9 L1442.25 1212.9 L1442.84 1212.9 L1443.43 1212.9 L1444.01 1212.9 L1444.6 1212.9 L1445.19 1212.9 L1445.77 1212.9 L1446.36 1212.9 L1446.95 1212.9 L1447.53 1212.9 L1448.12 1212.9 L1448.7 1212.9 L1449.29 1212.9 L1449.88 1212.9 L1450.46 1212.9 L1451.05 1212.9 L1451.64 1212.9 L1452.22 1212.9 L1452.81 1212.9 L1453.4 1212.9 L1453.98 1212.9 L1454.57 1212.9 L1455.16 1212.9 L1455.74 1212.9 L1456.33 1212.9 L1456.91 1212.9 L1457.5 1212.9 L1458.09 1212.9 L1458.67 1212.9 L1459.26 1212.9 L1459.85 1212.9 L1460.43 1212.9 L1461.02 1212.9 L1461.61 1212.9 L1462.19 1212.9 L1462.78 1212.9 L1463.37 1212.9 L1463.95 1212.9 L1464.54 1212.9 L1465.12 1212.9 L1465.71 1212.9 L1466.3 1212.9 L1466.88 1212.9 L1467.47 1212.9 L1468.06 1212.9 L1468.64 1212.9 L1469.23 1212.9 L1469.82 1212.9 L1470.4 1212.9 L1470.99 1212.9 L1471.57 1212.9 L1472.16 1212.9 L1472.75 1212.9 L1473.33 1212.9 L1473.92 1212.9 L1474.51 1212.9 L1475.09 1212.9 L1475.68 1212.9 L1476.27 1212.9 L1476.85 1212.9 L1477.44 1212.9 L1478.03 1212.9 L1478.61 1212.9 L1479.2 1212.9 L1479.78 1212.9 L1480.37 1212.9 L1480.96 1212.9 L1481.54 1212.9 L1482.13 1212.9 L1482.72 1212.9 L1483.3 1212.9 L1483.89 1212.9 L1484.48 1212.9 L1485.06 1212.9 L1485.65 1212.9 L1486.24 1212.9 L1486.82 1212.9 L1487.41 1212.9 L1487.99 1212.9 L1488.58 1212.9 L1489.17 1212.9 L1489.75 1212.9 L1490.34 1212.9 L1490.93 1212.9 L1491.51 1212.9 L1492.1 1212.9 L1492.69 1212.9 L1493.27 1212.9 L1493.86 1212.9 L1494.45 1212.9 L1495.03 1212.9 L1495.62 1212.9 L1496.2 1212.9 L1496.79 1212.9 L1497.38 1212.9 L1497.96 1212.9 L1498.55 1212.9 L1499.14 1212.9 L1499.72 1212.9 L1500.31 1212.9 L1500.9 1212.9 L1501.48 1212.9 L1502.07 1212.9 L1502.65 1212.9 L1503.24 1212.9 L1503.83 1212.9 L1504.41 1212.9 L1505 1212.9 L1505.59 1212.9 L1506.17 1212.9 L1506.76 1212.9 L1507.35 1212.9 L1507.93 1212.9 L1508.52 1212.9 L1509.11 1212.9 L1509.69 1212.9 L1510.28 1212.9 L1510.86 1212.9 L1511.45 1212.9 L1512.04 1212.9 L1512.62 1212.9 L1513.21 1212.9 L1513.8 1212.9 L1514.38 1212.9 L1514.97 1212.9 L1515.56 1212.9 L1516.14 1212.9 L1516.73 1212.9 L1517.32 1212.9 L1517.9 1212.9 L1518.49 1212.9 L1519.07 1212.9 L1519.66 1212.9 L1520.25 1212.9 L1520.83 1212.9 L1521.42 1212.9 L1522.01 1212.9 L1522.59 1212.9 L1523.18 1212.9 L1523.77 1212.9 L1524.35 1212.9 L1524.94 1212.9 L1525.52 1212.9 L1526.11 1212.9 L1526.7 1212.9 L1527.28 1212.9 L1527.87 1212.9 L1528.46 1212.9 L1529.04 1212.9 L1529.63 1212.9 L1530.22 1212.9 L1530.8 1212.9 L1531.39 1212.9 L1531.98 1212.9 L1532.56 1212.9 L1533.15 1212.9 L1533.73 1212.9 L1534.32 1212.9 L1534.91 1212.9 L1535.49 1212.9 L1536.08 1212.9 L1536.67 1212.9 L1537.25 1212.9 L1537.84 1212.9 L1538.43 1212.9 L1539.01 1212.9 L1539.6 1212.9 L1540.19 1212.9 L1540.77 1212.9 L1541.36 1212.9 L1541.94 1212.9 L1542.53 1212.9 L1543.12 1212.9 L1543.7 1212.9 L1544.29 1212.9 L1544.88 1212.9 L1545.46 1212.9 L1546.05 1212.9 L1546.64 1212.9 L1547.22 1212.9 L1547.81 1212.9 L1548.4 1212.9 L1548.98 1212.9 L1549.57 1212.9 L1550.15 1212.9 L1550.74 1212.9 L1551.33 1212.9 L1551.91 1212.9 L1552.5 1212.9 L1553.09 1212.9 L1553.67 1212.9 L1554.26 1212.9 L1554.85 1212.9 L1555.43 1212.9 L1556.02 1212.9 L1556.6 1212.9 L1557.19 1212.9 L1557.78 1212.9 L1558.36 1212.9 L1558.95 1212.9 L1559.54 1212.9 L1560.12 1212.9 L1560.71 1212.9 L1561.3 1212.9 L1561.88 1212.9 L1562.47 1212.9 L1563.06 1212.9 L1563.64 1212.9 L1564.23 1212.9 L1564.81 1212.9 L1565.4 1212.9 L1565.99 1212.9 L1566.57 1212.9 L1567.16 1212.9 L1567.75 1212.9 L1568.33 1212.9 L1568.92 1212.9 L1569.51 1212.9 L1570.09 1212.9 L1570.68 1212.9 L1571.27 1212.9 L1571.85 1212.9 L1572.44 1212.9 L1573.02 1212.9 L1573.61 1212.9 L1574.2 1212.9 L1574.78 1212.9 L1575.37 1212.9 L1575.96 1212.9 L1576.54 1212.9 L1577.13 1212.9 L1577.72 1212.9 L1578.3 1212.9 L1578.89 1212.9 L1579.47 1212.9 L1580.06 1212.9 L1580.65 1212.9 L1581.23 1212.9 L1581.82 1212.9 L1582.41 1212.9 L1582.99 1212.9 L1583.58 1212.9 L1584.17 1212.9 L1584.75 1212.9 L1585.34 1212.9 L1585.93 1212.9 L1586.51 1212.9 L1587.1 1212.9 L1587.68 1212.9 L1588.27 1212.9 L1588.86 1212.9 L1589.44 1212.9 L1590.03 1212.9 L1590.62 1212.9 L1591.2 1212.9 L1591.79 1212.9 L1592.38 1212.9 L1592.96 1212.9 L1593.55 1212.9 L1594.14 1212.9 L1594.72 1212.9 L1595.31 1212.9 L1595.89 1212.9 L1596.48 1212.9 L1597.07 1212.9 L1597.65 1212.9 L1598.24 1212.9 L1598.83 1212.9 L1599.41 1212.9 L1600 1212.9 L1600.59 1212.9 L1601.17 1212.9 L1601.76 1212.9 L1602.34 1212.9 L1602.93 1212.9 L1603.52 1212.9 L1604.1 1212.9 L1604.69 1212.9 L1605.28 1212.9 L1605.86 1212.9 L1606.45 1212.9 L1607.04 1212.9 L1607.62 1212.9 L1608.21 1212.9 L1608.8 1212.9 L1609.38 1212.9 L1609.97 1212.9 L1610.55 1212.9 L1611.14 1212.9 L1611.73 1212.9 L1612.31 1212.9 L1612.9 1212.9 L1613.49 1212.9 L1614.07 1212.9 L1614.66 1212.9 L1615.25 1212.9 L1615.83 1212.9 L1616.42 1212.9 L1617.01 1212.9 L1617.59 1212.9 L1618.18 1212.9 L1618.76 1212.9 L1619.35 1212.9 L1619.94 1212.9 L1620.52 1212.9 L1621.11 1212.9 L1621.7 1212.9 L1622.28 1212.9 L1622.87 1212.9 L1623.46 1212.9 L1624.04 1212.9 L1624.63 1212.9 L1625.22 1212.9 L1625.8 1212.9 L1626.39 1212.9 L1626.97 1212.9 L1627.56 1212.9 L1628.15 1212.9 L1628.73 1212.9 L1629.32 1212.9 L1629.91 1212.9 L1630.49 1212.9 L1631.08 1212.9 L1631.67 1212.9 L1632.25 1212.9 L1632.84 1212.9 L1633.42 1212.9 L1634.01 1212.9 L1634.6 1212.9 L1635.18 1212.9 L1635.77 1212.9 L1636.36 1212.9 L1636.94 1212.9 L1637.53 1212.9 L1638.12 1212.9 L1638.7 1212.9 L1639.29 1212.9 L1639.88 1212.9 L1640.46 1212.9 L1641.05 1212.9 L1641.63 1212.9 L1642.22 1212.9 L1642.81 1212.9 L1643.39 1212.9 L1643.98 1212.9 L1644.57 1212.9 L1645.15 1212.9 L1645.74 1212.9 L1646.33 1212.9 L1646.91 1212.9 L1647.5 1212.9 L1648.09 1212.9 L1648.67 1212.9 L1649.26 1212.9 L1649.84 1212.9 L1650.43 1212.9 L1651.02 1212.9 L1651.6 1212.9 L1652.19 1212.9 L1652.78 1212.9 L1653.36 1212.9 L1653.95 1212.9 L1654.54 1212.9 L1655.12 1212.9 L1655.71 1212.9 L1656.29 1212.9 L1656.88 1212.9 L1657.47 1212.9 L1658.05 1212.9 L1658.64 1212.9 L1659.23 1212.9 L1659.81 1212.9 L1660.4 1212.9 L1660.99 1212.9 L1661.57 1212.9 L1662.16 1212.9 L1662.75 1212.9 L1663.33 1212.9 L1663.92 1212.9 L1664.5 1212.9 L1665.09 1212.9 L1665.68 1212.9 L1666.26 1212.9 L1666.85 1212.9 L1667.44 1212.9 L1668.02 1212.9 L1668.61 1212.9 L1669.2 1212.9 L1669.78 1212.9 L1670.37 1212.9 L1670.96 1212.9 L1671.54 1212.9 L1672.13 1212.9 L1672.71 1212.9 L1673.3 1212.9 L1673.89 1212.9 L1674.47 1212.9 L1675.06 1212.9 L1675.65 1212.9 L1676.23 1212.9 L1676.82 1212.9 L1677.41 1212.9 L1677.99 1212.9 L1678.58 1212.9 L1679.17 1212.9 L1679.75 1212.9 L1680.34 1212.9 L1680.92 1212.9 L1681.51 1212.9 L1682.1 1212.9 L1682.68 1212.9 L1683.27 1212.9 L1683.86 1212.9 L1684.44 1212.9 L1685.03 1212.9 L1685.62 1212.9 L1686.2 1212.9 L1686.79 1212.9 L1687.37 1212.9 L1687.96 1212.9 L1688.55 1212.9 L1689.13 1212.9 L1689.72 1212.9 L1690.31 1212.9 L1690.89 1212.9 L1691.48 1212.9 L1692.07 1212.9 L1692.65 1212.9 L1693.24 1212.9 L1693.83 1212.9 L1694.41 1212.9 L1695 1212.9 L1695.58 1212.9 L1696.17 1212.9 L1696.76 1212.9 L1697.34 1212.9 L1697.93 1212.9 L1698.52 1212.9 L1699.1 1212.9 L1699.69 1212.9 L1700.28 1212.9 L1700.86 1212.9 L1701.45 1212.9 L1702.04 1212.9 L1702.62 1212.9 L1703.21 1212.9 L1703.79 1212.9 L1704.38 1212.9 L1704.97 1212.9 L1705.55 1212.9 L1706.14 1212.9 L1706.73 1212.9 L1707.31 1212.9 L1707.9 1212.9 L1708.49 1212.9 L1709.07 1212.9 L1709.66 1212.9 L1710.24 1212.9 L1710.83 1212.9 L1711.42 1212.9 L1712 1212.9 L1712.59 1212.9 L1713.18 1212.9 L1713.76 1212.9 L1714.35 1212.9 L1714.94 1212.9 L1715.52 1212.9 L1716.11 1212.9 L1716.7 1212.9 L1717.28 1212.9 L1717.87 1212.9 L1718.45 1212.9 L1719.04 1212.9 L1719.63 1212.9 L1720.21 1212.9 L1720.8 1212.9 L1721.39 1212.9 L1721.97 1212.9 L1722.56 1212.9 L1723.15 1212.9 L1723.73 1212.9 L1724.32 1212.9 L1724.91 1212.9 L1725.49 1212.9 L1726.08 1212.9 L1726.66 1212.9 L1727.25 1212.9 L1727.84 1212.9 L1728.42 1212.9 L1729.01 1212.9 L1729.6 1212.9 L1730.18 1212.9 L1730.77 1212.9 L1731.36 1212.9 L1731.94 1212.9 L1732.53 1212.9 L1733.11 1212.9 L1733.7 1212.9 L1734.29 1212.9 L1734.87 1212.9 L1735.46 1212.9 L1736.05 1212.9 L1736.63 1212.9 L1737.22 1212.9 L1737.81 1212.9 L1738.39 1212.9 L1738.98 1212.9 L1739.57 1212.9 L1740.15 1212.9 L1740.74 1212.9 L1741.32 1212.9 L1741.91 1212.9 L1742.5 1212.9 L1743.08 1212.9 L1743.67 1212.9 L1744.26 1212.9 L1744.84 1212.9 L1745.43 1212.9 L1746.02 1212.9 L1746.6 1212.9 L1747.19 1212.9 L1747.78 1212.9 L1748.36 1212.9 L1748.95 1212.9 L1749.53 1212.9 L1750.12 1212.9 L1750.71 1212.9 L1751.29 1212.9 L1751.88 1212.9 L1752.47 1212.9 L1753.05 1212.9 L1753.64 1212.9 L1754.23 1212.9 L1754.81 1212.9 L1755.4 1212.9 L1755.99 1212.9 L1756.57 1212.9 L1757.16 1212.9 L1757.74 1212.9 L1758.33 1212.9 L1758.92 1212.9 L1759.5 1212.9 L1760.09 1212.9 L1760.68 1212.9 L1761.26 1212.9 L1761.85 1212.9 L1762.44 1212.9 L1763.02 1212.9 L1763.61 1212.9 L1764.19 1212.9 L1764.78 1212.9 L1765.37 1212.9 L1765.95 1212.9 L1766.54 1212.9 L1767.13 1212.9 L1767.71 1212.9 L1768.3 1212.9 L1768.89 1212.9 L1769.47 1212.9 L1770.06 1212.9 L1770.65 1212.9 L1771.23 1212.9 L1771.82 1212.9 L1772.4 1212.9 L1772.99 1212.9 L1773.58 1212.9 L1774.16 1212.9 L1774.75 1212.9 L1775.34 1212.9 L1775.92 1212.9 L1776.51 1212.9 L1777.1 1212.9 L1777.68 1212.9 L1778.27 1212.9 L1778.86 1212.9 L1779.44 1212.9 L1780.03 1212.9 L1780.61 1212.9 L1781.2 1212.9 L1781.79 1212.9 L1782.37 1212.9 L1782.96 1212.9 L1783.55 1212.9 L1784.13 1212.9 L1784.72 1212.9 L1785.31 1212.9 L1785.89 1212.9 L1786.48 1212.9 L1787.06 1212.9 L1787.65 1212.9 L1788.24 1212.9 L1788.82 1212.9 L1789.41 1212.9 L1790 1212.9 L1790.58 1212.9 L1791.17 1212.9 L1791.76 1212.9 L1792.34 1212.9 L1792.93 1212.9 L1793.52 1212.9 L1794.1 1212.9 L1794.69 1212.9 L1795.27 1212.9 L1795.86 1212.9 L1796.45 1212.9 L1797.03 1212.9 L1797.62 1212.9 L1798.21 1212.9 L1798.79 1212.9 L1799.38 1212.9 L1799.97 1212.9 L1800.55 1212.9 L1801.14 1212.9 L1801.73 1212.9 L1802.31 1212.9 L1802.9 1212.9 L1803.48 1212.9 L1804.07 1212.9 L1804.66 1212.9 L1805.24 1212.9 L1805.83 1212.9 L1806.42 1212.9 L1807 1212.9 L1807.59 1212.9 L1808.18 1212.9 L1808.76 1212.9 L1809.35 1212.9 L1809.94 1212.9 L1810.52 1212.9 L1811.11 1212.9 L1811.69 1212.9 L1812.28 1212.9 L1812.87 1212.9 L1813.45 1212.9 L1814.04 1212.9 L1814.63 1212.9 L1815.21 1212.9 L1815.8 1212.9 L1816.39 1212.9 L1816.97 1212.9 L1817.56 1212.9 L1818.14 1212.9 L1818.73 1212.9 L1819.32 1212.9 L1819.9 1212.9 L1820.49 1212.9 L1821.08 1212.9 L1821.66 1212.9 L1822.25 1212.9 L1822.84 1212.9 L1823.42 1212.9 L1824.01 1212.9 L1824.6 1212.9 L1825.18 1212.9 L1825.77 1212.9 L1826.35 1212.9 L1826.94 1212.9 L1827.53 1212.9 L1828.11 1212.9 L1828.7 1212.9 L1829.29 1212.9 L1829.87 1212.9 L1830.46 1212.9 L1831.05 1212.9 L1831.63 1212.9 L1832.22 1212.9 L1832.81 1212.9 L1833.39 1212.9 L1833.98 1212.9 L1834.56 1212.9 L1835.15 1212.9 L1835.74 1212.9 L1836.32 1212.9 L1836.91 1212.9 L1837.5 1212.9 L1838.08 1212.9 L1838.67 1212.9 L1839.26 1212.9 L1839.84 1212.9 L1840.43 1212.9 L1841.01 1212.9 L1841.6 1212.9 L1842.19 1212.9 L1842.77 1212.9 L1843.36 1212.9 L1843.95 1212.9 L1844.53 1212.9 L1845.12 1212.9 L1845.71 1212.9 L1846.29 1212.9 L1846.88 1212.9 L1847.47 1212.9 L1848.05 1212.9 L1848.64 1212.9 L1849.22 1212.9 L1849.81 1212.9 L1850.4 1212.9 L1850.98 1212.9 L1851.57 1212.9 L1852.16 1212.9 L1852.74 1212.9 L1853.33 1212.9 L1853.92 1212.9 L1854.5 1212.9 L1855.09 1212.9 L1855.68 1212.9 L1856.26 1212.9 L1856.85 1212.9 L1857.43 1212.9 L1858.02 1212.9 L1858.61 1212.9 L1859.19 1212.9 L1859.78 1212.9 L1860.37 1212.9 L1860.95 1212.9 L1861.54 1212.9 L1862.13 1212.9 L1862.71 1212.9 L1863.3 1212.9 L1863.88 1212.9 L1864.47 1212.9 L1865.06 1212.9 L1865.64 1212.9 L1866.23 1212.9 L1866.82 1212.9 L1867.4 1212.9 L1867.99 1212.9 L1868.58 1212.9 L1869.16 1212.9 L1869.75 1212.9 L1870.34 1212.9 L1870.92 1212.9 L1871.51 1212.9 L1872.09 1212.9 L1872.68 1212.9 L1873.27 1212.9 L1873.85 1212.9 L1874.44 1212.9 L1875.03 1212.9 L1875.61 1212.9 L1876.2 1212.9 L1876.79 1212.9 L1877.37 1212.9 L1877.96 1212.9 L1878.55 1212.9 L1879.13 1212.9 L1879.72 1212.9 L1880.3 1212.9 L1880.89 1212.9 L1881.48 1212.9 L1882.06 1212.9 L1882.65 1212.9 L1883.24 1212.9 L1883.82 1212.9 L1884.41 1212.9 L1885 1212.9 L1885.58 1212.9 L1886.17 1212.9 L1886.76 1212.9 L1887.34 1212.9 L1887.93 1212.9 L1888.51 1212.9 L1889.1 1212.9 L1889.69 1212.9 L1890.27 1212.9 L1890.86 1212.9 L1891.45 1212.9 L1892.03 1212.9 L1892.62 1212.9 L1893.21 1212.9 L1893.79 1212.9 L1894.38 1212.9 L1894.96 1212.9 L1895.55 1212.9 L1896.14 1212.9 L1896.72 1212.9 L1897.31 1212.9 L1897.9 1212.9 L1898.48 1212.9 L1899.07 1212.9 L1899.66 1212.9 L1900.24 1212.9 L1900.83 1212.9 L1901.42 1212.9 L1902 1212.9 L1902.59 1212.9 L1903.17 1212.9 L1903.76 1212.9 L1904.35 1212.9 L1904.93 1212.9 L1905.52 1212.9 L1906.11 1212.9 L1906.69 1212.9 L1907.28 1212.9 L1907.87 1212.9 L1908.45 1212.9 L1909.04 1212.9 L1909.63 1212.9 L1910.21 1212.9 L1910.8 1212.9 L1911.38 1212.9 L1911.97 1212.9 L1912.56 1212.9 L1913.14 1212.9 L1913.73 1212.9 L1914.32 1212.9 L1914.9 1212.9 L1915.49 1212.9 L1916.08 1212.9 L1916.66 1212.9 L1917.25 1212.9 L1917.83 1212.9 L1918.42 1212.9 L1919.01 1212.9 L1919.59 1212.9 L1920.18 1212.9 L1920.77 1212.9 L1921.35 1212.9 L1921.94 1212.9 L1922.53 1212.9 L1923.11 1212.9 L1923.7 1212.9 L1924.29 1212.9 L1924.87 1212.9 L1925.46 1212.9 L1926.04 1212.9 L1926.63 1212.9 L1927.22 1212.9 L1927.8 1212.9 L1928.39 1212.9 L1928.98 1212.9 L1929.56 1212.9 L1930.15 1212.9 L1930.74 1212.9 L1931.32 1212.9 L1931.91 1212.9 L1932.5 1212.9 L1933.08 1212.9 L1933.67 1212.9 L1934.25 1212.9 L1934.84 1212.9 L1935.43 1212.9 L1936.01 1212.9 L1936.6 1212.9 L1937.19 1212.9 L1937.77 1212.9 L1938.36 1212.9 L1938.95 1212.9 L1939.53 1212.9 L1940.12 1212.9 L1940.71 1212.9 L1941.29 1212.9 L1941.88 1212.9 L1942.46 1212.9 L1943.05 1212.9 L1943.64 1212.9 L1944.22 1212.9 L1944.81 1212.9 L1945.4 1212.9 L1945.98 1212.9 L1946.57 1212.9 L1947.16 1212.9 L1947.74 1212.9 L1948.33 1212.9 L1948.91 1212.9 L1949.5 1212.9 L1950.09 1212.9 L1950.67 1212.9 L1951.26 1212.9 L1951.85 1212.9 L1952.43 1212.9 L1953.02 1212.9 L1953.61 1212.9 L1954.19 1212.9 L1954.78 1212.9 L1955.37 1212.9 L1955.95 1212.9 L1956.54 1212.9 L1957.12 1212.9 L1957.71 1212.9 L1958.3 1212.9 L1958.88 1212.9 L1959.47 1212.9 L1960.06 1212.9 L1960.64 1212.9 L1961.23 1212.9 L1961.82 1212.9 L1962.4 1212.9 L1962.99 1212.9 L1963.58 1212.9 L1964.16 1212.9 L1964.75 1212.9 L1965.33 1212.9 L1965.92 1212.9 L1966.51 1212.9 L1967.09 1212.9 L1967.68 1212.9 L1968.27 1212.9 L1968.85 1212.9 L1969.44 1212.9 L1970.03 1212.9 L1970.61 1212.9 L1971.2 1212.9 L1971.78 1212.9 L1972.37 1212.9 L1972.96 1212.9 L1973.54 1212.9 L1974.13 1212.9 L1974.72 1212.9 L1975.3 1212.9 L1975.89 1212.9 L1976.48 1212.9 L1977.06 1212.9 L1977.65 1212.9 L1978.24 1212.9 L1978.82 1212.9 L1979.41 1212.9 L1979.99 1212.9 L1980.58 1212.9 L1981.17 1212.9 L1981.75 1212.9 L1982.34 1212.9 L1982.93 1212.9 L1983.51 1212.9 L1984.1 1212.9 L1984.69 1212.9 L1985.27 1212.9 L1985.86 1212.9 L1986.45 1212.9 L1987.03 1212.9 L1987.62 1212.9 L1988.2 1212.9 L1988.79 1212.9 L1989.38 1212.9 L1989.96 1212.9 L1990.55 1212.9 L1991.14 1212.9 L1991.72 1212.9 L1992.31 1212.9 L1992.9 1212.9 L1993.48 1212.9 L1994.07 1212.9 L1994.65 1212.9 L1995.24 1212.9 L1995.83 1212.9 L1996.41 1212.9 L1997 1212.9 L1997.59 1212.9 L1998.17 1212.9 L1998.76 1212.9 L1999.35 1212.9 L1999.93 1212.9 L2000.52 1212.9 L2001.11 1212.9 L2001.69 1212.9 L2002.28 1212.9 L2002.86 1212.9 L2003.45 1212.9 L2004.04 1212.9 L2004.62 1212.9 L2005.21 1212.9 L2005.8 1212.9 L2006.38 1212.9 L2006.97 1212.9 L2007.56 1212.9 L2008.14 1212.9 L2008.73 1212.9 L2009.32 1212.9 L2009.9 1212.9 L2010.49 1212.9 L2011.07 1212.9 L2011.66 1212.9 L2012.25 1212.9 L2012.83 1212.9 L2013.42 1212.9 L2014.01 1212.9 L2014.59 1212.9 L2015.18 1212.9 L2015.77 1212.9 L2016.35 1212.9 L2016.94 1212.9 L2017.53 1212.9 L2018.11 1212.9 L2018.7 1212.9 L2019.28 1212.9 L2019.87 1212.9 L2020.46 1212.9 L2021.04 1212.9 L2021.63 1212.9 L2022.22 1212.9 L2022.8 1212.9 L2023.39 1212.9 L2023.98 1212.9 L2024.56 1212.9 L2025.15 1212.9 L2025.73 1212.9 L2026.32 1212.9 L2026.91 1212.9 L2027.49 1212.9 L2028.08 1212.9 L2028.67 1212.9 L2029.25 1212.9 L2029.84 1212.9 L2030.43 1212.9 L2031.01 1212.9 L2031.6 1212.9 L2032.19 1212.9 L2032.77 1212.9 L2033.36 1212.9 L2033.94 1212.9 L2034.53 1212.9 L2035.12 1212.9 L2035.7 1212.9 L2036.29 1212.9 L2036.88 1212.9 L2037.46 1212.9 L2038.05 1212.9 L2038.64 1212.9 L2039.22 1212.9 L2039.81 1212.9 L2040.4 1212.9 L2040.98 1212.9 L2041.57 1212.9 L2042.15 1212.9 L2042.74 1212.9 L2043.33 1212.9 L2043.91 1212.9 L2044.5 1212.9 L2045.09 1212.9 L2045.67 1212.9 L2046.26 1212.9 L2046.85 1212.9 L2047.43 1212.9 L2048.02 1212.9 L2048.6 1212.9 L2049.19 1212.9 L2049.78 1212.9 L2050.36 1212.9 L2050.95 1212.9 L2051.54 1212.9 L2052.12 1212.9 L2052.71 1212.9 L2053.3 1212.9 L2053.88 1212.9 L2054.47 1212.9 L2055.06 1212.9 L2055.64 1212.9 L2056.23 1212.9 L2056.81 1212.9 L2057.4 1212.9 L2057.99 1212.9 L2058.57 1212.9 L2059.16 1212.9 L2059.75 1212.9 L2060.33 1212.9 L2060.92 1212.9 L2061.51 1212.9 L2062.09 1212.9 L2062.68 1212.9 L2063.27 1212.9 L2063.85 1212.9 L2064.44 1212.9 L2065.02 1212.9 L2065.61 1212.9 L2066.2 1212.9 L2066.78 1212.9 L2067.37 1212.9 L2067.96 1212.9 L2068.54 1212.9 L2069.13 1212.9 L2069.72 1212.9 L2070.3 1212.9 L2070.89 1212.9 L2071.48 1212.9 L2072.06 1212.9 L2072.65 1212.9 L2073.23 1212.9 L2073.82 1212.9 L2074.41 1212.9 L2074.99 1212.9 L2075.58 1212.9 L2076.17 1212.9 L2076.75 1212.9 L2077.34 1212.9 L2077.93 1212.9 L2078.51 1212.9 L2079.1 1212.9 L2079.68 1212.9 L2080.27 1212.9 L2080.86 1212.9 L2081.44 1212.9 L2082.03 1212.9 L2082.62 1212.9 L2083.2 1212.9 L2083.79 1212.9 L2084.38 1212.9 L2084.96 1212.9 L2085.55 1212.9 L2086.14 1212.9 L2086.72 1212.9 L2087.31 1212.9 L2087.89 1212.9 L2088.48 1212.9 L2089.07 1212.9 L2089.65 1212.9 L2090.24 1212.9 L2090.83 1212.9 L2091.41 1212.9 L2092 1212.9 L2092.59 1212.9 L2093.17 1212.9 L2093.76 1212.9 L2094.35 1212.9 L2094.93 1212.9 L2095.52 1212.9 L2096.1 1212.9 L2096.69 1212.9 L2097.28 1212.9 L2097.86 1212.9 L2098.45 1212.9 L2099.04 1212.9 L2099.62 1212.9 L2100.21 1212.9 L2100.8 1212.9 L2101.38 1212.9 L2101.97 1212.9 L2102.55 1212.9 L2103.14 1212.9 L2103.73 1212.9 L2104.31 1212.9 L2104.9 1212.9 L2105.49 1212.9 L2106.07 1212.9 L2106.66 1212.9 L2107.25 1212.9 L2107.83 1212.9 L2108.42 1212.9 L2109.01 1212.9 L2109.59 1212.9 L2110.18 1212.9 L2110.76 1212.9 L2111.35 1212.9 L2111.94 1212.9 L2112.52 1212.9 L2113.11 1212.9 L2113.7 1212.9 L2114.28 1212.9 L2114.87 1212.9 L2115.46 1212.9 L2116.04 1212.9 L2116.63 1212.9 L2117.22 1212.9 L2117.8 1212.9 L2118.39 1212.9 L2118.97 1212.9 L2119.56 1212.9 L2120.15 1212.9 L2120.73 1212.9 L2121.32 1212.9 L2121.91 1212.9 L2122.49 1212.9 L2123.08 1212.9 L2123.67 1212.9 L2124.25 1212.9 L2124.84 1212.9 L2125.42 1212.9 L2126.01 1212.9 L2126.6 1212.9 L2127.18 1212.9 L2127.77 1212.9 L2128.36 1212.9 L2128.94 1212.9 L2129.53 1212.9 L2130.12 1212.9 L2130.7 1212.9 L2131.29 1212.9 L2131.88 1212.9 L2132.46 1212.9 L2133.05 1212.9 L2133.63 1212.9 L2134.22 1212.9 L2134.81 1212.9 L2135.39 1212.9 L2135.98 1212.9 L2136.57 1212.9 L2137.15 1212.9 L2137.74 1212.9 L2138.33 1212.9 L2138.91 1212.9 L2139.5 1212.9 L2140.09 1212.9 L2140.67 1212.9 L2141.26 1212.9 L2141.84 1212.9 L2142.43 1212.9 L2143.02 1212.9 L2143.6 1212.9 L2144.19 1212.9 L2144.78 1212.9 L2145.36 1212.9 L2145.95 1212.9 L2146.54 1212.9 L2147.12 1212.9 L2147.71 1212.9 L2148.3 1212.9 L2148.88 1212.9 L2149.47 1212.9 L2150.05 1212.9 L2150.64 1212.9 L2151.23 1212.9 L2151.81 1212.9 L2152.4 1212.9 L2152.99 1212.9 L2153.57 1212.9 L2154.16 1212.9 L2154.75 1212.9 L2155.33 1212.9 L2155.92 1212.9 L2156.5 1212.9 L2157.09 1212.9 L2157.68 1212.9 L2158.26 1212.9 L2158.26 1212.75 L2157.68 1212.75 L2157.09 1212.75 L2156.5 1212.75 L2155.92 1212.75 L2155.33 1212.75 L2154.75 1212.75 L2154.16 1212.75 L2153.57 1212.75 L2152.99 1212.75 L2152.4 1212.75 L2151.81 1212.75 L2151.23 1212.75 L2150.64 1212.75 L2150.05 1212.75 L2149.47 1212.75 L2148.88 1212.75 L2148.3 1212.75 L2147.71 1212.75 L2147.12 1212.75 L2146.54 1212.75 L2145.95 1212.75 L2145.36 1212.75 L2144.78 1212.75 L2144.19 1212.75 L2143.6 1212.75 L2143.02 1212.75 L2142.43 1212.75 L2141.84 1212.75 L2141.26 1212.75 L2140.67 1212.75 L2140.09 1212.75 L2139.5 1212.75 L2138.91 1212.75 L2138.33 1212.75 L2137.74 1212.75 L2137.15 1212.75 L2136.57 1212.75 L2135.98 1212.75 L2135.39 1212.75 L2134.81 1212.75 L2134.22 1212.75 L2133.63 1212.75 L2133.05 1212.75 L2132.46 1212.75 L2131.88 1212.75 L2131.29 1212.75 L2130.7 1212.75 L2130.12 1212.75 L2129.53 1212.75 L2128.94 1212.75 L2128.36 1212.75 L2127.77 1212.75 L2127.18 1212.75 L2126.6 1212.75 L2126.01 1212.75 L2125.42 1212.75 L2124.84 1212.75 L2124.25 1212.75 L2123.67 1212.75 L2123.08 1212.75 L2122.49 1212.75 L2121.91 1212.75 L2121.32 1212.75 L2120.73 1212.75 L2120.15 1212.75 L2119.56 1212.75 L2118.97 1212.75 L2118.39 1212.75 L2117.8 1212.75 L2117.22 1212.75 L2116.63 1212.75 L2116.04 1212.75 L2115.46 1212.75 L2114.87 1212.75 L2114.28 1212.75 L2113.7 1212.75 L2113.11 1212.75 L2112.52 1212.75 L2111.94 1212.75 L2111.35 1212.75 L2110.76 1212.75 L2110.18 1212.75 L2109.59 1212.75 L2109.01 1212.75 L2108.42 1212.75 L2107.83 1212.75 L2107.25 1212.75 L2106.66 1212.75 L2106.07 1212.75 L2105.49 1212.75 L2104.9 1212.75 L2104.31 1212.75 L2103.73 1212.75 L2103.14 1212.75 L2102.55 1212.75 L2101.97 1212.75 L2101.38 1212.75 L2100.8 1212.75 L2100.21 1212.75 L2099.62 1212.75 L2099.04 1212.75 L2098.45 1212.75 L2097.86 1212.75 L2097.28 1212.75 L2096.69 1212.75 L2096.1 1212.75 L2095.52 1212.75 L2094.93 1212.75 L2094.35 1212.75 L2093.76 1212.75 L2093.17 1212.75 L2092.59 1212.75 L2092 1212.75 L2091.41 1212.75 L2090.83 1212.75 L2090.24 1212.75 L2089.65 1212.75 L2089.07 1212.75 L2088.48 1212.75 L2087.89 1212.75 L2087.31 1212.75 L2086.72 1212.75 L2086.14 1212.75 L2085.55 1212.75 L2084.96 1212.75 L2084.38 1212.75 L2083.79 1212.75 L2083.2 1212.75 L2082.62 1212.75 L2082.03 1212.75 L2081.44 1212.75 L2080.86 1212.75 L2080.27 1212.75 L2079.68 1212.75 L2079.1 1212.75 L2078.51 1212.75 L2077.93 1212.75 L2077.34 1212.75 L2076.75 1212.75 L2076.17 1212.75 L2075.58 1212.75 L2074.99 1212.75 L2074.41 1212.75 L2073.82 1212.75 L2073.23 1212.75 L2072.65 1212.75 L2072.06 1212.75 L2071.48 1212.75 L2070.89 1212.75 L2070.3 1212.75 L2069.72 1212.75 L2069.13 1212.75 L2068.54 1212.75 L2067.96 1212.75 L2067.37 1212.75 L2066.78 1212.75 L2066.2 1212.75 L2065.61 1212.75 L2065.02 1212.75 L2064.44 1212.75 L2063.85 1212.75 L2063.27 1212.75 L2062.68 1212.75 L2062.09 1212.75 L2061.51 1212.75 L2060.92 1212.75 L2060.33 1212.75 L2059.75 1212.75 L2059.16 1212.75 L2058.57 1212.75 L2057.99 1212.75 L2057.4 1212.75 L2056.81 1212.75 L2056.23 1212.75 L2055.64 1212.75 L2055.06 1212.75 L2054.47 1212.75 L2053.88 1212.75 L2053.3 1212.75 L2052.71 1212.75 L2052.12 1212.75 L2051.54 1212.75 L2050.95 1212.75 L2050.36 1212.75 L2049.78 1212.75 L2049.19 1212.75 L2048.6 1212.75 L2048.02 1212.75 L2047.43 1212.75 L2046.85 1212.75 L2046.26 1212.75 L2045.67 1212.75 L2045.09 1212.75 L2044.5 1212.75 L2043.91 1212.75 L2043.33 1212.75 L2042.74 1212.75 L2042.15 1212.75 L2041.57 1212.75 L2040.98 1212.75 L2040.4 1212.75 L2039.81 1212.75 L2039.22 1212.75 L2038.64 1212.75 L2038.05 1212.75 L2037.46 1212.75 L2036.88 1212.75 L2036.29 1212.75 L2035.7 1212.75 L2035.12 1212.75 L2034.53 1212.75 L2033.94 1212.75 L2033.36 1212.75 L2032.77 1212.75 L2032.19 1212.75 L2031.6 1212.75 L2031.01 1212.75 L2030.43 1212.75 L2029.84 1212.75 L2029.25 1212.75 L2028.67 1212.75 L2028.08 1212.75 L2027.49 1212.75 L2026.91 1212.75 L2026.32 1212.75 L2025.73 1212.75 L2025.15 1212.75 L2024.56 1212.75 L2023.98 1212.75 L2023.39 1212.75 L2022.8 1212.75 L2022.22 1212.75 L2021.63 1212.75 L2021.04 1212.75 L2020.46 1212.75 L2019.87 1212.75 L2019.28 1212.75 L2018.7 1212.75 L2018.11 1212.75 L2017.53 1212.75 L2016.94 1212.75 L2016.35 1212.75 L2015.77 1212.75 L2015.18 1212.75 L2014.59 1212.75 L2014.01 1212.75 L2013.42 1212.75 L2012.83 1212.75 L2012.25 1212.75 L2011.66 1212.75 L2011.07 1212.75 L2010.49 1212.75 L2009.9 1212.75 L2009.32 1212.75 L2008.73 1212.75 L2008.14 1212.75 L2007.56 1212.75 L2006.97 1212.75 L2006.38 1212.75 L2005.8 1212.75 L2005.21 1212.75 L2004.62 1212.75 L2004.04 1212.75 L2003.45 1212.75 L2002.86 1212.75 L2002.28 1212.75 L2001.69 1212.75 L2001.11 1212.75 L2000.52 1212.75 L1999.93 1212.75 L1999.35 1212.75 L1998.76 1212.75 L1998.17 1212.75 L1997.59 1212.75 L1997 1212.75 L1996.41 1212.75 L1995.83 1212.75 L1995.24 1212.75 L1994.65 1212.75 L1994.07 1212.75 L1993.48 1212.75 L1992.9 1212.75 L1992.31 1212.75 L1991.72 1212.75 L1991.14 1212.75 L1990.55 1212.75 L1989.96 1212.75 L1989.38 1212.75 L1988.79 1212.75 L1988.2 1212.75 L1987.62 1212.75 L1987.03 1212.75 L1986.45 1212.75 L1985.86 1212.75 L1985.27 1212.75 L1984.69 1212.75 L1984.1 1212.75 L1983.51 1212.75 L1982.93 1212.75 L1982.34 1212.75 L1981.75 1212.75 L1981.17 1212.75 L1980.58 1212.75 L1979.99 1212.75 L1979.41 1212.75 L1978.82 1212.75 L1978.24 1212.75 L1977.65 1212.75 L1977.06 1212.75 L1976.48 1212.75 L1975.89 1212.75 L1975.3 1212.75 L1974.72 1212.75 L1974.13 1212.75 L1973.54 1212.75 L1972.96 1212.75 L1972.37 1212.75 L1971.78 1212.75 L1971.2 1212.75 L1970.61 1212.75 L1970.03 1212.75 L1969.44 1212.75 L1968.85 1212.75 L1968.27 1212.75 L1967.68 1212.75 L1967.09 1212.75 L1966.51 1212.75 L1965.92 1212.75 L1965.33 1212.75 L1964.75 1212.75 L1964.16 1212.75 L1963.58 1212.75 L1962.99 1212.75 L1962.4 1212.75 L1961.82 1212.75 L1961.23 1212.75 L1960.64 1212.75 L1960.06 1212.75 L1959.47 1212.75 L1958.88 1212.75 L1958.3 1212.75 L1957.71 1212.75 L1957.12 1212.75 L1956.54 1212.75 L1955.95 1212.75 L1955.37 1212.75 L1954.78 1212.75 L1954.19 1212.75 L1953.61 1212.75 L1953.02 1212.75 L1952.43 1212.75 L1951.85 1212.75 L1951.26 1212.75 L1950.67 1212.75 L1950.09 1212.75 L1949.5 1212.75 L1948.91 1212.75 L1948.33 1212.75 L1947.74 1212.75 L1947.16 1212.75 L1946.57 1212.75 L1945.98 1212.75 L1945.4 1212.75 L1944.81 1212.75 L1944.22 1212.75 L1943.64 1212.75 L1943.05 1212.75 L1942.46 1212.75 L1941.88 1212.75 L1941.29 1212.75 L1940.71 1212.75 L1940.12 1212.75 L1939.53 1212.75 L1938.95 1212.75 L1938.36 1212.75 L1937.77 1212.75 L1937.19 1212.75 L1936.6 1212.75 L1936.01 1212.75 L1935.43 1212.75 L1934.84 1212.75 L1934.25 1212.75 L1933.67 1212.75 L1933.08 1212.75 L1932.5 1212.75 L1931.91 1212.75 L1931.32 1212.75 L1930.74 1212.75 L1930.15 1212.75 L1929.56 1212.75 L1928.98 1212.75 L1928.39 1212.75 L1927.8 1212.75 L1927.22 1212.75 L1926.63 1212.75 L1926.04 1212.75 L1925.46 1212.75 L1924.87 1212.75 L1924.29 1212.75 L1923.7 1212.75 L1923.11 1212.75 L1922.53 1212.75 L1921.94 1212.75 L1921.35 1212.75 L1920.77 1212.75 L1920.18 1212.75 L1919.59 1212.75 L1919.01 1212.75 L1918.42 1212.75 L1917.83 1212.75 L1917.25 1212.75 L1916.66 1212.75 L1916.08 1212.75 L1915.49 1212.75 L1914.9 1212.75 L1914.32 1212.75 L1913.73 1212.75 L1913.14 1212.75 L1912.56 1212.75 L1911.97 1212.75 L1911.38 1212.75 L1910.8 1212.75 L1910.21 1212.75 L1909.63 1212.75 L1909.04 1212.75 L1908.45 1212.75 L1907.87 1212.75 L1907.28 1212.75 L1906.69 1212.75 L1906.11 1212.75 L1905.52 1212.75 L1904.93 1212.75 L1904.35 1212.75 L1903.76 1212.75 L1903.17 1212.75 L1902.59 1212.75 L1902 1212.75 L1901.42 1212.75 L1900.83 1212.75 L1900.24 1212.75 L1899.66 1212.75 L1899.07 1212.75 L1898.48 1212.75 L1897.9 1212.75 L1897.31 1212.75 L1896.72 1212.75 L1896.14 1212.75 L1895.55 1212.75 L1894.96 1212.75 L1894.38 1212.75 L1893.79 1212.75 L1893.21 1212.75 L1892.62 1212.75 L1892.03 1212.75 L1891.45 1212.75 L1890.86 1212.75 L1890.27 1212.75 L1889.69 1212.75 L1889.1 1212.75 L1888.51 1212.75 L1887.93 1212.75 L1887.34 1212.75 L1886.76 1212.75 L1886.17 1212.75 L1885.58 1212.75 L1885 1212.75 L1884.41 1212.75 L1883.82 1212.75 L1883.24 1212.75 L1882.65 1212.75 L1882.06 1212.75 L1881.48 1212.75 L1880.89 1212.75 L1880.3 1212.75 L1879.72 1212.75 L1879.13 1212.75 L1878.55 1212.75 L1877.96 1212.75 L1877.37 1212.75 L1876.79 1212.75 L1876.2 1212.75 L1875.61 1212.75 L1875.03 1212.75 L1874.44 1212.75 L1873.85 1212.75 L1873.27 1212.75 L1872.68 1212.75 L1872.09 1212.75 L1871.51 1212.75 L1870.92 1212.75 L1870.34 1212.75 L1869.75 1212.75 L1869.16 1212.75 L1868.58 1212.75 L1867.99 1212.75 L1867.4 1212.75 L1866.82 1212.75 L1866.23 1212.75 L1865.64 1212.75 L1865.06 1212.75 L1864.47 1212.75 L1863.88 1212.75 L1863.3 1212.75 L1862.71 1212.75 L1862.13 1212.75 L1861.54 1212.75 L1860.95 1212.75 L1860.37 1212.75 L1859.78 1212.75 L1859.19 1212.75 L1858.61 1212.75 L1858.02 1212.75 L1857.43 1212.75 L1856.85 1212.75 L1856.26 1212.75 L1855.68 1212.75 L1855.09 1212.75 L1854.5 1212.75 L1853.92 1212.75 L1853.33 1212.75 L1852.74 1212.75 L1852.16 1212.75 L1851.57 1212.75 L1850.98 1212.75 L1850.4 1212.75 L1849.81 1212.75 L1849.22 1212.75 L1848.64 1212.75 L1848.05 1212.75 L1847.47 1212.75 L1846.88 1212.75 L1846.29 1212.75 L1845.71 1212.75 L1845.12 1212.75 L1844.53 1212.75 L1843.95 1212.75 L1843.36 1212.75 L1842.77 1212.75 L1842.19 1212.75 L1841.6 1212.75 L1841.01 1212.75 L1840.43 1212.75 L1839.84 1212.75 L1839.26 1212.75 L1838.67 1212.75 L1838.08 1212.75 L1837.5 1212.75 L1836.91 1212.75 L1836.32 1212.75 L1835.74 1212.75 L1835.15 1212.75 L1834.56 1212.75 L1833.98 1212.75 L1833.39 1212.75 L1832.81 1212.75 L1832.22 1212.75 L1831.63 1212.75 L1831.05 1212.75 L1830.46 1212.75 L1829.87 1212.75 L1829.29 1212.75 L1828.7 1212.75 L1828.11 1212.75 L1827.53 1212.75 L1826.94 1212.75 L1826.35 1212.75 L1825.77 1212.75 L1825.18 1212.75 L1824.6 1212.75 L1824.01 1212.75 L1823.42 1212.75 L1822.84 1212.75 L1822.25 1212.75 L1821.66 1212.75 L1821.08 1212.75 L1820.49 1212.75 L1819.9 1212.75 L1819.32 1212.75 L1818.73 1212.75 L1818.14 1212.75 L1817.56 1212.75 L1816.97 1212.75 L1816.39 1212.75 L1815.8 1212.75 L1815.21 1212.75 L1814.63 1212.75 L1814.04 1212.75 L1813.45 1212.75 L1812.87 1212.75 L1812.28 1212.75 L1811.69 1212.75 L1811.11 1212.75 L1810.52 1212.75 L1809.94 1212.75 L1809.35 1212.75 L1808.76 1212.75 L1808.18 1212.75 L1807.59 1212.75 L1807 1212.75 L1806.42 1212.75 L1805.83 1212.75 L1805.24 1212.75 L1804.66 1212.75 L1804.07 1212.75 L1803.48 1212.75 L1802.9 1212.75 L1802.31 1212.75 L1801.73 1212.75 L1801.14 1212.75 L1800.55 1212.75 L1799.97 1212.75 L1799.38 1212.75 L1798.79 1212.75 L1798.21 1212.75 L1797.62 1212.75 L1797.03 1212.75 L1796.45 1212.75 L1795.86 1212.75 L1795.27 1212.75 L1794.69 1212.75 L1794.1 1212.75 L1793.52 1212.75 L1792.93 1212.75 L1792.34 1212.75 L1791.76 1212.75 L1791.17 1212.75 L1790.58 1212.75 L1790 1212.75 L1789.41 1212.75 L1788.82 1212.75 L1788.24 1212.75 L1787.65 1212.75 L1787.06 1212.75 L1786.48 1212.75 L1785.89 1212.75 L1785.31 1212.75 L1784.72 1212.75 L1784.13 1212.75 L1783.55 1212.75 L1782.96 1212.75 L1782.37 1212.75 L1781.79 1212.75 L1781.2 1212.75 L1780.61 1212.75 L1780.03 1212.75 L1779.44 1212.75 L1778.86 1212.75 L1778.27 1212.75 L1777.68 1212.75 L1777.1 1212.75 L1776.51 1212.75 L1775.92 1212.75 L1775.34 1212.75 L1774.75 1212.75 L1774.16 1212.75 L1773.58 1212.75 L1772.99 1212.75 L1772.4 1212.75 L1771.82 1212.75 L1771.23 1212.75 L1770.65 1212.75 L1770.06 1212.75 L1769.47 1212.75 L1768.89 1212.75 L1768.3 1212.75 L1767.71 1212.75 L1767.13 1212.75 L1766.54 1212.75 L1765.95 1212.75 L1765.37 1212.75 L1764.78 1212.75 L1764.19 1212.75 L1763.61 1212.75 L1763.02 1212.75 L1762.44 1212.75 L1761.85 1212.75 L1761.26 1212.75 L1760.68 1212.75 L1760.09 1212.75 L1759.5 1212.75 L1758.92 1212.75 L1758.33 1212.75 L1757.74 1212.75 L1757.16 1212.75 L1756.57 1212.75 L1755.99 1212.75 L1755.4 1212.75 L1754.81 1212.75 L1754.23 1212.75 L1753.64 1212.75 L1753.05 1212.75 L1752.47 1212.75 L1751.88 1212.75 L1751.29 1212.75 L1750.71 1212.75 L1750.12 1212.75 L1749.53 1212.75 L1748.95 1212.75 L1748.36 1212.75 L1747.78 1212.75 L1747.19 1212.75 L1746.6 1212.75 L1746.02 1212.75 L1745.43 1212.75 L1744.84 1212.75 L1744.26 1212.75 L1743.67 1212.75 L1743.08 1212.75 L1742.5 1212.75 L1741.91 1212.75 L1741.32 1212.75 L1740.74 1212.75 L1740.15 1212.75 L1739.57 1212.75 L1738.98 1212.75 L1738.39 1212.75 L1737.81 1212.75 L1737.22 1212.75 L1736.63 1212.75 L1736.05 1212.75 L1735.46 1212.75 L1734.87 1212.75 L1734.29 1212.75 L1733.7 1212.75 L1733.11 1212.75 L1732.53 1212.75 L1731.94 1212.75 L1731.36 1212.75 L1730.77 1212.75 L1730.18 1212.75 L1729.6 1212.75 L1729.01 1212.75 L1728.42 1212.75 L1727.84 1212.75 L1727.25 1212.75 L1726.66 1212.75 L1726.08 1212.75 L1725.49 1212.75 L1724.91 1212.75 L1724.32 1212.75 L1723.73 1212.75 L1723.15 1212.75 L1722.56 1212.75 L1721.97 1212.75 L1721.39 1212.75 L1720.8 1212.75 L1720.21 1212.75 L1719.63 1212.75 L1719.04 1212.75 L1718.45 1212.75 L1717.87 1212.75 L1717.28 1212.75 L1716.7 1212.75 L1716.11 1212.75 L1715.52 1212.75 L1714.94 1212.75 L1714.35 1212.75 L1713.76 1212.75 L1713.18 1212.75 L1712.59 1212.75 L1712 1212.75 L1711.42 1212.75 L1710.83 1212.75 L1710.24 1212.75 L1709.66 1212.75 L1709.07 1212.75 L1708.49 1212.75 L1707.9 1212.75 L1707.31 1212.75 L1706.73 1212.75 L1706.14 1212.75 L1705.55 1212.75 L1704.97 1212.75 L1704.38 1212.75 L1703.79 1212.75 L1703.21 1212.75 L1702.62 1212.75 L1702.04 1212.75 L1701.45 1212.75 L1700.86 1212.75 L1700.28 1212.75 L1699.69 1212.75 L1699.1 1212.75 L1698.52 1212.75 L1697.93 1212.75 L1697.34 1212.75 L1696.76 1212.75 L1696.17 1212.75 L1695.58 1212.75 L1695 1212.75 L1694.41 1212.75 L1693.83 1212.75 L1693.24 1212.75 L1692.65 1212.75 L1692.07 1212.75 L1691.48 1212.75 L1690.89 1212.75 L1690.31 1212.75 L1689.72 1212.75 L1689.13 1212.75 L1688.55 1212.75 L1687.96 1212.75 L1687.37 1212.75 L1686.79 1212.75 L1686.2 1212.75 L1685.62 1212.75 L1685.03 1212.75 L1684.44 1212.75 L1683.86 1212.75 L1683.27 1212.75 L1682.68 1212.75 L1682.1 1212.75 L1681.51 1212.75 L1680.92 1212.75 L1680.34 1212.75 L1679.75 1212.75 L1679.17 1212.75 L1678.58 1212.75 L1677.99 1212.75 L1677.41 1212.75 L1676.82 1212.75 L1676.23 1212.75 L1675.65 1212.75 L1675.06 1212.75 L1674.47 1212.75 L1673.89 1212.75 L1673.3 1212.75 L1672.71 1212.75 L1672.13 1212.75 L1671.54 1212.75 L1670.96 1212.75 L1670.37 1212.75 L1669.78 1212.75 L1669.2 1212.75 L1668.61 1212.75 L1668.02 1212.75 L1667.44 1212.75 L1666.85 1212.75 L1666.26 1212.75 L1665.68 1212.75 L1665.09 1212.75 L1664.5 1212.75 L1663.92 1212.75 L1663.33 1212.75 L1662.75 1212.75 L1662.16 1212.75 L1661.57 1212.75 L1660.99 1212.75 L1660.4 1212.75 L1659.81 1212.75 L1659.23 1212.75 L1658.64 1212.75 L1658.05 1212.75 L1657.47 1212.75 L1656.88 1212.75 L1656.29 1212.75 L1655.71 1212.75 L1655.12 1212.75 L1654.54 1212.75 L1653.95 1212.75 L1653.36 1212.75 L1652.78 1212.75 L1652.19 1212.75 L1651.6 1212.75 L1651.02 1212.75 L1650.43 1212.75 L1649.84 1212.75 L1649.26 1212.75 L1648.67 1212.75 L1648.09 1212.75 L1647.5 1212.75 L1646.91 1212.75 L1646.33 1212.75 L1645.74 1212.75 L1645.15 1212.75 L1644.57 1212.75 L1643.98 1212.75 L1643.39 1212.75 L1642.81 1212.75 L1642.22 1212.75 L1641.63 1212.75 L1641.05 1212.75 L1640.46 1212.75 L1639.88 1212.75 L1639.29 1212.75 L1638.7 1212.75 L1638.12 1212.75 L1637.53 1212.75 L1636.94 1212.75 L1636.36 1212.75 L1635.77 1212.75 L1635.18 1212.75 L1634.6 1212.75 L1634.01 1212.75 L1633.42 1212.75 L1632.84 1212.75 L1632.25 1212.75 L1631.67 1212.75 L1631.08 1212.75 L1630.49 1212.75 L1629.91 1212.75 L1629.32 1212.75 L1628.73 1212.75 L1628.15 1212.75 L1627.56 1212.75 L1626.97 1212.75 L1626.39 1212.75 L1625.8 1212.75 L1625.22 1212.75 L1624.63 1212.75 L1624.04 1212.75 L1623.46 1212.75 L1622.87 1212.75 L1622.28 1212.75 L1621.7 1212.75 L1621.11 1212.75 L1620.52 1212.75 L1619.94 1212.75 L1619.35 1212.75 L1618.76 1212.75 L1618.18 1212.75 L1617.59 1212.75 L1617.01 1212.75 L1616.42 1212.75 L1615.83 1212.75 L1615.25 1212.75 L1614.66 1212.75 L1614.07 1212.75 L1613.49 1212.75 L1612.9 1212.75 L1612.31 1212.75 L1611.73 1212.75 L1611.14 1212.75 L1610.55 1212.75 L1609.97 1212.75 L1609.38 1212.75 L1608.8 1212.75 L1608.21 1212.75 L1607.62 1212.75 L1607.04 1212.75 L1606.45 1212.75 L1605.86 1212.75 L1605.28 1212.75 L1604.69 1212.75 L1604.1 1212.75 L1603.52 1212.75 L1602.93 1212.75 L1602.34 1212.75 L1601.76 1212.75 L1601.17 1212.75 L1600.59 1212.75 L1600 1212.75 L1599.41 1212.75 L1598.83 1212.75 L1598.24 1212.75 L1597.65 1212.75 L1597.07 1212.75 L1596.48 1212.75 L1595.89 1212.75 L1595.31 1212.75 L1594.72 1212.75 L1594.14 1212.75 L1593.55 1212.75 L1592.96 1212.75 L1592.38 1212.75 L1591.79 1212.75 L1591.2 1212.75 L1590.62 1212.75 L1590.03 1212.75 L1589.44 1212.75 L1588.86 1212.75 L1588.27 1212.75 L1587.68 1212.75 L1587.1 1212.75 L1586.51 1212.75 L1585.93 1212.75 L1585.34 1212.75 L1584.75 1212.75 L1584.17 1212.75 L1583.58 1212.75 L1582.99 1212.75 L1582.41 1212.75 L1581.82 1212.75 L1581.23 1212.75 L1580.65 1212.75 L1580.06 1212.75 L1579.47 1212.75 L1578.89 1212.75 L1578.3 1212.75 L1577.72 1212.75 L1577.13 1212.75 L1576.54 1212.75 L1575.96 1212.75 L1575.37 1212.75 L1574.78 1212.75 L1574.2 1212.75 L1573.61 1212.75 L1573.02 1212.75 L1572.44 1212.75 L1571.85 1212.75 L1571.27 1212.75 L1570.68 1212.75 L1570.09 1212.75 L1569.51 1212.75 L1568.92 1212.75 L1568.33 1212.75 L1567.75 1212.75 L1567.16 1212.75 L1566.57 1212.75 L1565.99 1212.75 L1565.4 1212.75 L1564.81 1212.75 L1564.23 1212.75 L1563.64 1212.75 L1563.06 1212.75 L1562.47 1212.75 L1561.88 1212.75 L1561.3 1212.75 L1560.71 1212.75 L1560.12 1212.75 L1559.54 1212.75 L1558.95 1212.75 L1558.36 1212.75 L1557.78 1212.75 L1557.19 1212.75 L1556.6 1212.75 L1556.02 1212.75 L1555.43 1212.75 L1554.85 1212.75 L1554.26 1212.75 L1553.67 1212.75 L1553.09 1212.75 L1552.5 1212.75 L1551.91 1212.75 L1551.33 1212.75 L1550.74 1212.75 L1550.15 1212.75 L1549.57 1212.75 L1548.98 1212.75 L1548.4 1212.75 L1547.81 1212.75 L1547.22 1212.75 L1546.64 1212.75 L1546.05 1212.75 L1545.46 1212.75 L1544.88 1212.75 L1544.29 1212.75 L1543.7 1212.75 L1543.12 1212.75 L1542.53 1212.75 L1541.94 1212.75 L1541.36 1212.75 L1540.77 1212.75 L1540.19 1212.75 L1539.6 1212.75 L1539.01 1212.75 L1538.43 1212.75 L1537.84 1212.75 L1537.25 1212.75 L1536.67 1212.75 L1536.08 1212.75 L1535.49 1212.75 L1534.91 1212.75 L1534.32 1212.75 L1533.73 1212.75 L1533.15 1212.75 L1532.56 1212.75 L1531.98 1212.75 L1531.39 1212.75 L1530.8 1212.75 L1530.22 1212.75 L1529.63 1212.75 L1529.04 1212.75 L1528.46 1212.75 L1527.87 1212.75 L1527.28 1212.75 L1526.7 1212.75 L1526.11 1212.75 L1525.52 1212.75 L1524.94 1212.75 L1524.35 1212.75 L1523.77 1212.75 L1523.18 1212.75 L1522.59 1212.75 L1522.01 1212.75 L1521.42 1212.75 L1520.83 1212.75 L1520.25 1212.75 L1519.66 1212.75 L1519.07 1212.75 L1518.49 1212.75 L1517.9 1212.75 L1517.32 1212.75 L1516.73 1212.75 L1516.14 1212.75 L1515.56 1212.75 L1514.97 1212.75 L1514.38 1212.75 L1513.8 1212.75 L1513.21 1212.75 L1512.62 1212.75 L1512.04 1212.75 L1511.45 1212.75 L1510.86 1212.75 L1510.28 1212.75 L1509.69 1212.75 L1509.11 1212.75 L1508.52 1212.75 L1507.93 1212.75 L1507.35 1212.75 L1506.76 1212.75 L1506.17 1212.75 L1505.59 1212.75 L1505 1212.75 L1504.41 1212.75 L1503.83 1212.75 L1503.24 1212.75 L1502.65 1212.75 L1502.07 1212.75 L1501.48 1212.75 L1500.9 1212.75 L1500.31 1212.75 L1499.72 1212.75 L1499.14 1212.75 L1498.55 1212.75 L1497.96 1212.75 L1497.38 1212.75 L1496.79 1212.75 L1496.2 1212.75 L1495.62 1212.75 L1495.03 1212.75 L1494.45 1212.75 L1493.86 1212.75 L1493.27 1212.75 L1492.69 1212.75 L1492.1 1212.75 L1491.51 1212.75 L1490.93 1212.75 L1490.34 1212.75 L1489.75 1212.75 L1489.17 1212.75 L1488.58 1212.75 L1487.99 1212.75 L1487.41 1212.75 L1486.82 1212.75 L1486.24 1212.75 L1485.65 1212.75 L1485.06 1212.75 L1484.48 1212.75 L1483.89 1212.75 L1483.3 1212.75 L1482.72 1212.75 L1482.13 1212.75 L1481.54 1212.75 L1480.96 1212.75 L1480.37 1212.75 L1479.78 1212.75 L1479.2 1212.75 L1478.61 1212.75 L1478.03 1212.75 L1477.44 1212.75 L1476.85 1212.75 L1476.27 1212.75 L1475.68 1212.75 L1475.09 1212.75 L1474.51 1212.75 L1473.92 1212.75 L1473.33 1212.75 L1472.75 1212.75 L1472.16 1212.75 L1471.57 1212.75 L1470.99 1212.75 L1470.4 1212.75 L1469.82 1212.75 L1469.23 1212.75 L1468.64 1212.75 L1468.06 1212.75 L1467.47 1212.75 L1466.88 1212.75 L1466.3 1212.75 L1465.71 1212.75 L1465.12 1212.75 L1464.54 1212.75 L1463.95 1212.75 L1463.37 1212.75 L1462.78 1212.75 L1462.19 1212.75 L1461.61 1212.75 L1461.02 1212.75 L1460.43 1212.75 L1459.85 1212.75 L1459.26 1212.75 L1458.67 1212.75 L1458.09 1212.75 L1457.5 1212.75 L1456.91 1212.75 L1456.33 1212.75 L1455.74 1212.75 L1455.16 1212.75 L1454.57 1212.75 L1453.98 1212.75 L1453.4 1212.75 L1452.81 1212.75 L1452.22 1212.75 L1451.64 1212.75 L1451.05 1212.75 L1450.46 1212.75 L1449.88 1212.75 L1449.29 1212.75 L1448.7 1212.75 L1448.12 1212.75 L1447.53 1212.75 L1446.95 1212.75 L1446.36 1212.75 L1445.77 1212.75 L1445.19 1212.75 L1444.6 1212.75 L1444.01 1212.75 L1443.43 1212.75 L1442.84 1212.75 L1442.25 1212.75 L1441.67 1212.75 L1441.08 1212.75 L1440.5 1212.75 L1439.91 1212.75 L1439.32 1212.75 L1438.74 1212.75 L1438.15 1212.75 L1437.56 1212.75 L1436.98 1212.75 L1436.39 1212.75 L1435.8 1212.75 L1435.22 1212.75 L1434.63 1212.75 L1434.04 1212.75 L1433.46 1212.75 L1432.87 1212.75 L1432.29 1212.75 L1431.7 1212.75 L1431.11 1212.75 L1430.53 1212.75 L1429.94 1212.75 L1429.35 1212.75 L1428.77 1212.75 L1428.18 1212.75 L1427.59 1212.75 L1427.01 1212.75 L1426.42 1212.75 L1425.83 1212.75 L1425.25 1212.75 L1424.66 1212.75 L1424.08 1212.75 L1423.49 1212.75 L1422.9 1212.75 L1422.32 1212.75 L1421.73 1212.75 L1421.14 1212.75 L1420.56 1212.75 L1419.97 1212.75 L1419.38 1212.75 L1418.8 1212.75 L1418.21 1212.75 L1417.63 1212.75 L1417.04 1212.75 L1416.45 1212.75 L1415.87 1212.75 L1415.28 1212.75 L1414.69 1212.75 L1414.11 1212.75 L1413.52 1212.75 L1412.93 1212.75 L1412.35 1212.75 L1411.76 1212.75 L1411.17 1212.75 L1410.59 1212.75 L1410 1212.75 L1409.42 1212.75 L1408.83 1212.75 L1408.24 1212.75 L1407.66 1212.75 L1407.07 1212.75 L1406.48 1212.75 L1405.9 1212.75 L1405.31 1212.75 L1404.72 1212.75 L1404.14 1212.75 L1403.55 1212.75 L1402.96 1212.75 L1402.38 1212.75 L1401.79 1212.75 L1401.21 1212.75 L1400.62 1212.75 L1400.03 1212.75 L1399.45 1212.75 L1398.86 1212.75 L1398.27 1212.75 L1397.69 1212.75 L1397.1 1212.75 L1396.51 1212.75 L1395.93 1212.75 L1395.34 1212.75 L1394.75 1212.75 L1394.17 1212.75 L1393.58 1212.75 L1393 1212.75 L1392.41 1212.75 L1391.82 1212.75 L1391.24 1212.75 L1390.65 1212.75 L1390.06 1212.75 L1389.48 1212.75 L1388.89 1212.75 L1388.3 1212.75 L1387.72 1212.75 L1387.13 1212.75 L1386.55 1212.75 L1385.96 1212.75 L1385.37 1212.75 L1384.79 1212.75 L1384.2 1212.75 L1383.61 1212.75 L1383.03 1212.75 L1382.44 1212.75 L1381.85 1212.75 L1381.27 1212.75 L1380.68 1212.75 L1380.09 1212.75 L1379.51 1212.75 L1378.92 1212.75 L1378.34 1212.75 L1377.75 1212.75 L1377.16 1212.75 L1376.58 1212.75 L1375.99 1212.75 L1375.4 1212.75 L1374.82 1212.75 L1374.23 1212.75 L1373.64 1212.75 L1373.06 1212.75 L1372.47 1212.75 L1371.88 1212.75 L1371.3 1212.75 L1370.71 1212.75 L1370.13 1212.75 L1369.54 1212.75 L1368.95 1212.75 L1368.37 1212.75 L1367.78 1212.75 L1367.19 1212.75 L1366.61 1212.75 L1366.02 1212.75 L1365.43 1212.75 L1364.85 1212.75 L1364.26 1212.75 L1363.68 1212.75 L1363.09 1212.75 L1362.5 1212.75 L1361.92 1212.75 L1361.33 1212.75 L1360.74 1212.75 L1360.16 1212.75 L1359.57 1212.75 L1358.98 1212.75 L1358.4 1212.75 L1357.81 1212.75 L1357.22 1212.75 L1356.64 1212.75 L1356.05 1212.75 L1355.47 1212.75 L1354.88 1212.75 L1354.29 1212.75 L1353.71 1212.75 L1353.12 1212.75 L1352.53 1212.75 L1351.95 1212.75 L1351.36 1212.75 L1350.77 1212.75 L1350.19 1212.75 L1349.6 1212.75 L1349.01 1212.75 L1348.43 1212.75 L1347.84 1212.75 L1347.26 1212.75 L1346.67 1212.75 L1346.08 1212.75 L1345.5 1212.75 L1344.91 1212.75 L1344.32 1212.75 L1343.74 1212.75 L1343.15 1212.75 L1342.56 1212.75 L1341.98 1212.75 L1341.39 1212.75 L1340.8 1212.75 L1340.22 1212.75 L1339.63 1212.75 L1339.05 1212.75 L1338.46 1212.75 L1337.87 1212.75 L1337.29 1212.75 L1336.7 1212.75 L1336.11 1212.75 L1335.53 1212.75 L1334.94 1212.75 L1334.35 1212.75 L1333.77 1212.75 L1333.18 1212.75 L1332.6 1212.75 L1332.01 1212.75 L1331.42 1212.75 L1330.84 1212.75 L1330.25 1212.75 L1329.66 1212.75 L1329.08 1212.75 L1328.49 1212.75 L1327.9 1212.75 L1327.32 1212.75 L1326.73 1212.75 L1326.14 1212.75 L1325.56 1212.75 L1324.97 1212.75 L1324.39 1212.75 L1323.8 1212.75 L1323.21 1212.75 L1322.63 1212.75 L1322.04 1212.75 L1321.45 1212.75 L1320.87 1212.75 L1320.28 1212.75 L1319.69 1212.75 L1319.11 1212.75 L1318.52 1212.75 L1317.93 1212.75 L1317.35 1212.75 L1316.76 1212.75 L1316.18 1212.75 L1315.59 1212.75 L1315 1212.75 L1314.42 1212.75 L1313.83 1212.75 L1313.24 1212.75 L1312.66 1212.75 L1312.07 1212.75 L1311.48 1212.75 L1310.9 1212.75 L1310.31 1212.75 L1309.73 1212.75 L1309.14 1212.75 L1308.55 1212.75 L1307.97 1212.75 L1307.38 1212.75 L1306.79 1212.75 L1306.21 1212.75 L1305.62 1212.75 L1305.03 1212.75 L1304.45 1212.75 L1303.86 1212.75 L1303.27 1212.75 L1302.69 1212.75 L1302.1 1212.75 L1301.52 1212.75 L1300.93 1212.75 L1300.34 1212.75 L1299.76 1212.75 L1299.17 1212.75 L1298.58 1212.75 L1298 1212.75 L1297.41 1212.75 L1296.82 1212.75 L1296.24 1212.75 L1295.65 1212.75 L1295.06 1212.75 L1294.48 1212.75 L1293.89 1212.75 L1293.31 1212.75 L1292.72 1212.75 L1292.13 1212.75 L1291.55 1212.75 L1290.96 1212.75 L1290.37 1212.75 L1289.79 1212.75 L1289.2 1212.75 L1288.61 1212.75 L1288.03 1212.75 L1287.44 1212.75 L1286.86 1212.75 L1286.27 1212.75 L1285.68 1212.75 L1285.1 1212.75 L1284.51 1212.75 L1283.92 1212.75 L1283.34 1212.75 L1282.75 1212.75 L1282.16 1212.75 L1281.58 1212.75 L1280.99 1212.75 L1280.4 1212.75 L1279.82 1212.75 L1279.23 1212.75 L1278.65 1212.75 L1278.06 1212.75 L1277.47 1212.75 L1276.89 1212.75 L1276.3 1212.75 L1275.71 1212.75 L1275.13 1212.75 L1274.54 1212.75 L1273.95 1212.75 L1273.37 1212.75 L1272.78 1212.75 L1272.19 1212.75 L1271.61 1212.75 L1271.02 1212.75 L1270.44 1212.75 L1269.85 1212.75 L1269.26 1212.75 L1268.68 1212.75 L1268.09 1212.75 L1267.5 1212.75 L1266.92 1212.75 L1266.33 1212.75 L1265.74 1212.75 L1265.16 1212.75 L1264.57 1212.75 L1263.98 1212.75 L1263.4 1212.75 L1262.81 1212.75 L1262.23 1212.75 L1261.64 1212.75 L1261.05 1212.75 L1260.47 1212.75 L1259.88 1212.75 L1259.29 1212.75 L1258.71 1212.75 L1258.12 1212.75 L1257.53 1212.75 L1256.95 1212.75 L1256.36 1212.75 L1255.78 1212.75 L1255.19 1212.75 L1254.6 1212.75 L1254.02 1212.75 L1253.43 1212.75 L1252.84 1212.75 L1252.26 1212.75 L1251.67 1212.75 L1251.08 1212.75 L1250.5 1212.75 L1249.91 1212.75 L1249.32 1212.75 L1248.74 1212.75 L1248.15 1212.75 L1247.57 1212.75 L1246.98 1212.75 L1246.39 1212.75 L1245.81 1212.75 L1245.22 1212.75 L1244.63 1212.75 L1244.05 1212.75 L1243.46 1212.75 L1242.87 1212.75 L1242.29 1212.75 L1241.7 1212.75 L1241.11 1212.75 L1240.53 1212.75 L1239.94 1212.75 L1239.36 1212.75 L1238.77 1212.75 L1238.18 1212.75 L1237.6 1212.75 L1237.01 1212.75 L1236.42 1212.75 L1235.84 1212.75 L1235.25 1212.75 L1234.66 1212.75 L1234.08 1212.75 L1233.49 1212.75 L1232.91 1212.75 L1232.32 1212.75 L1231.73 1212.75 L1231.15 1212.75 L1230.56 1212.75 L1229.97 1212.75 L1229.39 1212.75 L1228.8 1212.75 L1228.21 1212.75 L1227.63 1212.75 L1227.04 1212.75 L1226.45 1212.75 L1225.87 1212.75 L1225.28 1212.75 L1224.7 1212.75 L1224.11 1212.75 L1223.52 1212.75 L1222.94 1212.75 L1222.35 1212.75 L1221.76 1212.75 L1221.18 1212.75 L1220.59 1212.75 L1220 1212.75 L1219.42 1212.75 L1218.83 1212.75 L1218.24 1212.75 L1217.66 1212.75 L1217.07 1212.75 L1216.49 1212.75 L1215.9 1212.75 L1215.31 1212.75 L1214.73 1212.75 L1214.14 1212.75 L1213.55 1212.75 L1212.97 1212.75 L1212.38 1212.75 L1211.79 1212.75 L1211.21 1212.75 L1210.62 1212.75 L1210.03 1212.75 L1209.45 1212.75 L1208.86 1212.75 L1208.28 1212.75 L1207.69 1212.75 L1207.1 1212.75 L1206.52 1212.75 L1205.93 1212.75 L1205.34 1212.75 L1204.76 1212.75 L1204.17 1212.75 L1203.58 1212.75 L1203 1212.75 L1202.41 1212.75 L1201.83 1212.75 L1201.24 1212.75 L1200.65 1212.75 L1200.07 1212.75 L1199.48 1212.75 L1198.89 1212.75 L1198.31 1212.75 L1197.72 1212.75 L1197.13 1212.75 L1196.55 1212.75 L1195.96 1212.75 L1195.37 1212.75 L1194.79 1212.75 L1194.2 1212.75 L1193.62 1212.75 L1193.03 1212.75 L1192.44 1212.75 L1191.86 1212.75 L1191.27 1212.75 L1190.68 1212.75 L1190.1 1212.75 L1189.51 1212.75 L1188.92 1212.75 L1188.34 1212.75 L1187.75 1212.75 L1187.16 1212.75 L1186.58 1212.75 L1185.99 1212.75 L1185.41 1212.75 L1184.82 1212.75 L1184.23 1212.75 L1183.65 1212.75 L1183.06 1212.75 L1182.47 1212.75 L1181.89 1212.75 L1181.3 1212.75 L1180.71 1212.75 L1180.13 1212.75 L1179.54 1212.75 L1178.96 1212.75 L1178.37 1212.75 L1177.78 1212.75 L1177.2 1212.75 L1176.61 1212.75 L1176.02 1212.75 L1175.44 1212.75 L1174.85 1212.75 L1174.26 1212.75 L1173.68 1212.75 L1173.09 1212.75 L1172.5 1212.75 L1171.92 1212.75 L1171.33 1212.75 L1170.75 1212.75 L1170.16 1212.75 L1169.57 1212.75 L1168.99 1212.75 L1168.4 1212.75 L1167.81 1212.75 L1167.23 1212.75 L1166.64 1212.75 L1166.05 1212.75 L1165.47 1212.75 L1164.88 1212.75 L1164.29 1212.75 L1163.71 1212.75 L1163.12 1212.75 L1162.54 1212.75 L1161.95 1212.75 L1161.36 1212.75 L1160.78 1212.75 L1160.19 1212.75 L1159.6 1212.75 L1159.02 1212.75 L1158.43 1212.75 L1157.84 1212.75 L1157.26 1212.75 L1156.67 1212.75 L1156.09 1212.75 L1155.5 1212.75 L1154.91 1212.75 L1154.33 1212.75 L1153.74 1212.75 L1153.15 1212.75 L1152.57 1212.75 L1151.98 1212.75 L1151.39 1212.75 L1150.81 1212.75 L1150.22 1212.75 L1149.63 1212.75 L1149.05 1212.75 L1148.46 1212.75 L1147.88 1212.75 L1147.29 1212.75 L1146.7 1212.75 L1146.12 1212.75 L1145.53 1212.75 L1144.94 1212.75 L1144.36 1212.75 L1143.77 1212.75 L1143.18 1212.75 L1142.6 1212.75 L1142.01 1212.75 L1141.42 1212.75 L1140.84 1212.75 L1140.25 1212.75 L1139.67 1212.75 L1139.08 1212.75 L1138.49 1212.75 L1137.91 1212.75 L1137.32 1212.75 L1136.73 1212.75 L1136.15 1212.75 L1135.56 1212.75 L1134.97 1212.75 L1134.39 1212.75 L1133.8 1212.75 L1133.21 1212.75 L1132.63 1212.75 L1132.04 1212.75 L1131.46 1212.75 L1130.87 1212.75 L1130.28 1212.75 L1129.7 1212.75 L1129.11 1212.75 L1128.52 1212.75 L1127.94 1212.75 L1127.35 1212.75 L1126.76 1212.75 L1126.18 1212.75 L1125.59 1212.75 L1125.01 1212.75 L1124.42 1212.75 L1123.83 1212.75 L1123.25 1212.75 L1122.66 1212.75 L1122.07 1212.75 L1121.49 1212.75 L1120.9 1212.75 L1120.31 1212.75 L1119.73 1212.75 L1119.14 1212.75 L1118.55 1212.75 L1117.97 1212.75 L1117.38 1212.75 L1116.8 1212.75 L1116.21 1212.75 L1115.62 1212.75 L1115.04 1212.75 L1114.45 1212.75 L1113.86 1212.75 L1113.28 1212.75 L1112.69 1212.75 L1112.1 1212.75 L1111.52 1212.75 L1110.93 1212.75 L1110.34 1212.75 L1109.76 1212.75 L1109.17 1212.75 L1108.59 1212.75 L1108 1212.75 L1107.41 1212.75 L1106.83 1212.75 L1106.24 1212.75 L1105.65 1212.75 L1105.07 1212.75 L1104.48 1212.75 L1103.89 1212.75 L1103.31 1212.75 L1102.72 1212.75 L1102.14 1212.75 L1101.55 1212.75 L1100.96 1212.75 L1100.38 1212.75 L1099.79 1212.75 L1099.2 1212.75 L1098.62 1212.75 L1098.03 1212.75 L1097.44 1212.75 L1096.86 1212.75 L1096.27 1212.75 L1095.68 1212.75 L1095.1 1212.75 L1094.51 1212.75 L1093.93 1212.75 L1093.34 1212.75 L1092.75 1212.75 L1092.17 1212.75 L1091.58 1212.75 L1090.99 1212.75 L1090.41 1212.75 L1089.82 1212.75 L1089.23 1212.75 L1088.65 1212.75 L1088.06 1212.75 L1087.47 1212.75 L1086.89 1212.75 L1086.3 1212.75 L1085.72 1212.75 L1085.13 1212.75 L1084.54 1212.75 L1083.96 1212.75 L1083.37 1212.75 L1082.78 1212.75 L1082.2 1212.75 L1081.61 1212.75 L1081.02 1212.75 L1080.44 1212.75 L1079.85 1212.75 L1079.26 1212.75 L1078.68 1212.75 L1078.09 1212.75 L1077.51 1212.75 L1076.92 1212.75 L1076.33 1212.75 L1075.75 1212.75 L1075.16 1212.75 L1074.57 1212.75 L1073.99 1212.75 L1073.4 1212.75 L1072.81 1212.75 L1072.23 1212.75 L1071.64 1212.75 L1071.06 1212.75 L1070.47 1212.75 L1069.88 1212.75 L1069.3 1212.75 L1068.71 1212.75 L1068.12 1212.75 L1067.54 1212.75 L1066.95 1212.75 L1066.36 1212.75 L1065.78 1212.75 L1065.19 1212.75 L1064.6 1212.75 L1064.02 1212.75 L1063.43 1212.75 L1062.85 1212.75 L1062.26 1212.75 L1061.67 1212.75 L1061.09 1212.75 L1060.5 1212.75 L1059.91 1212.75 L1059.33 1212.75 L1058.74 1212.75 L1058.15 1212.75 L1057.57 1212.75 L1056.98 1212.75 L1056.39 1212.75 L1055.81 1212.75 L1055.22 1212.75 L1054.64 1212.75 L1054.05 1212.75 L1053.46 1212.75 L1052.88 1212.75 L1052.29 1212.75 L1051.7 1212.75 L1051.12 1212.75 L1050.53 1212.75 L1049.94 1212.75 L1049.36 1212.75 L1048.77 1212.75 L1048.19 1212.75 L1047.6 1212.75 L1047.01 1212.75 L1046.43 1212.75 L1045.84 1212.75 L1045.25 1212.75 L1044.67 1212.75 L1044.08 1212.75 L1043.49 1212.75 L1042.91 1212.75 L1042.32 1212.75 L1041.73 1212.75 L1041.15 1212.75 L1040.56 1212.75 L1039.98 1212.75 L1039.39 1212.75 L1038.8 1212.75 L1038.22 1212.75 L1037.63 1212.75 L1037.04 1212.75 L1036.46 1212.75 L1035.87 1212.75 L1035.28 1212.75 L1034.7 1212.75 L1034.11 1212.75 L1033.52 1212.75 L1032.94 1212.75 L1032.35 1212.75 L1031.77 1212.75 L1031.18 1212.75 L1030.59 1212.75 L1030.01 1212.75 L1029.42 1212.75 L1028.83 1212.75 L1028.25 1212.75 L1027.66 1212.75 L1027.07 1212.75 L1026.49 1212.75 L1025.9 1212.75 L1025.32 1212.75 L1024.73 1212.75 L1024.14 1212.75 L1023.56 1212.75 L1022.97 1212.75 L1022.38 1212.75 L1021.8 1212.75 L1021.21 1212.75 L1020.62 1212.75 L1020.04 1212.75 L1019.45 1212.75 L1018.86 1212.75 L1018.28 1212.75 L1017.69 1212.75 L1017.11 1212.75 L1016.52 1212.75 L1015.93 1212.75 L1015.35 1212.75 L1014.76 1212.75 L1014.17 1212.75 L1013.59 1212.75 L1013 1212.75 L1012.41 1212.75 L1011.83 1212.75 L1011.24 1212.75 L1010.65 1212.75 L1010.07 1212.75 L1009.48 1212.75 L1008.9 1212.75 L1008.31 1212.75 L1007.72 1212.75 L1007.14 1212.75 L1006.55 1212.75 L1005.96 1212.75 L1005.38 1212.75 L1004.79 1212.75 L1004.2 1212.75 L1003.62 1212.75 L1003.03 1212.75 L1002.44 1212.75 L1001.86 1212.75 L1001.27 1212.75 L1000.69 1212.75 L1000.1 1212.75 L999.513 1212.75 L998.926 1212.75 L998.34 1212.75 L997.754 1212.75 L997.167 1212.75 L996.581 1212.75 L995.994 1212.75 L995.408 1212.75 L994.822 1212.75 L994.235 1212.75 L993.649 1212.75 L993.062 1212.75 L992.476 1212.75 L991.889 1212.75 L991.303 1212.75 L990.717 1212.75 L990.13 1212.75 L989.544 1212.75 L988.957 1212.75 L988.371 1212.75 L987.785 1212.75 L987.198 1212.75 L986.612 1212.75 L986.025 1212.75  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.82 986.612,1212.82 987.198,1212.82 987.785,1212.82 988.371,1212.82 988.957,1212.82 989.544,1212.82 990.13,1212.82 990.717,1212.82 991.303,1212.82 991.889,1212.82 992.476,1212.82 993.062,1212.82 993.649,1212.82 994.235,1212.82 994.822,1212.82 995.408,1212.82 995.994,1212.82 996.581,1212.82 997.167,1212.82 997.754,1212.82 998.34,1212.82 998.926,1212.82 999.513,1212.82 1000.1,1212.82 1000.69,1212.82 1001.27,1212.82 1001.86,1212.82 1002.44,1212.82 1003.03,1212.82 1003.62,1212.82 1004.2,1212.82 1004.79,1212.82 1005.38,1212.82 1005.96,1212.82 1006.55,1212.82 1007.14,1212.82 1007.72,1212.82 1008.31,1212.82 1008.9,1212.82 1009.48,1212.82 1010.07,1212.82 1010.65,1212.82 1011.24,1212.82 1011.83,1212.82 1012.41,1212.82 1013,1212.82 1013.59,1212.82 1014.17,1212.82 1014.76,1212.82 1015.35,1212.82 1015.93,1212.82 1016.52,1212.82 1017.11,1212.82 1017.69,1212.82 1018.28,1212.82 1018.86,1212.82 1019.45,1212.82 1020.04,1212.82 1020.62,1212.82 1021.21,1212.82 1021.8,1212.82 1022.38,1212.82 1022.97,1212.82 1023.56,1212.82 1024.14,1212.82 1024.73,1212.82 1025.32,1212.82 1025.9,1212.82 1026.49,1212.82 1027.07,1212.82 1027.66,1212.82 1028.25,1212.82 1028.83,1212.82 1029.42,1212.82 1030.01,1212.82 1030.59,1212.82 1031.18,1212.82 1031.77,1212.82 1032.35,1212.82 1032.94,1212.82 1033.52,1212.82 1034.11,1212.82 1034.7,1212.82 1035.28,1212.82 1035.87,1212.82 1036.46,1212.82 1037.04,1212.82 1037.63,1212.82 1038.22,1212.82 1038.8,1212.82 1039.39,1212.82 1039.98,1212.82 1040.56,1212.82 1041.15,1212.82 1041.73,1212.82 1042.32,1212.82 1042.91,1212.82 1043.49,1212.82 1044.08,1212.82 1044.67,1212.82 1045.25,1212.82 1045.84,1212.82 1046.43,1212.82 1047.01,1212.82 1047.6,1212.82 1048.19,1212.82 1048.77,1212.82 1049.36,1212.82 1049.94,1212.82 1050.53,1212.82 1051.12,1212.82 1051.7,1212.82 1052.29,1212.82 1052.88,1212.82 1053.46,1212.82 1054.05,1212.82 1054.64,1212.82 1055.22,1212.82 1055.81,1212.82 1056.39,1212.82 1056.98,1212.82 1057.57,1212.82 1058.15,1212.82 1058.74,1212.82 1059.33,1212.82 1059.91,1212.82 1060.5,1212.82 1061.09,1212.82 1061.67,1212.82 1062.26,1212.82 1062.85,1212.82 1063.43,1212.82 1064.02,1212.82 1064.6,1212.82 1065.19,1212.82 1065.78,1212.82 1066.36,1212.82 1066.95,1212.82 1067.54,1212.82 1068.12,1212.82 1068.71,1212.82 1069.3,1212.82 1069.88,1212.82 1070.47,1212.82 1071.06,1212.82 1071.64,1212.82 1072.23,1212.82 1072.81,1212.82 1073.4,1212.82 1073.99,1212.82 1074.57,1212.82 1075.16,1212.82 1075.75,1212.82 1076.33,1212.82 1076.92,1212.82 1077.51,1212.82 1078.09,1212.82 1078.68,1212.82 1079.26,1212.82 1079.85,1212.82 1080.44,1212.82 1081.02,1212.82 1081.61,1212.82 1082.2,1212.82 1082.78,1212.82 1083.37,1212.82 1083.96,1212.82 1084.54,1212.82 1085.13,1212.82 1085.72,1212.82 1086.3,1212.82 1086.89,1212.82 1087.47,1212.82 1088.06,1212.82 1088.65,1212.82 1089.23,1212.82 1089.82,1212.82 1090.41,1212.82 1090.99,1212.82 1091.58,1212.82 1092.17,1212.82 1092.75,1212.82 1093.34,1212.82 1093.93,1212.82 1094.51,1212.82 1095.1,1212.82 1095.68,1212.82 1096.27,1212.82 1096.86,1212.82 1097.44,1212.82 1098.03,1212.82 1098.62,1212.82 1099.2,1212.82 1099.79,1212.82 1100.38,1212.82 1100.96,1212.82 1101.55,1212.82 1102.14,1212.82 1102.72,1212.82 1103.31,1212.82 1103.89,1212.82 1104.48,1212.82 1105.07,1212.82 1105.65,1212.82 1106.24,1212.82 1106.83,1212.82 1107.41,1212.82 1108,1212.82 1108.59,1212.82 1109.17,1212.82 1109.76,1212.82 1110.34,1212.82 1110.93,1212.82 1111.52,1212.82 1112.1,1212.82 1112.69,1212.82 1113.28,1212.82 1113.86,1212.82 1114.45,1212.82 1115.04,1212.82 1115.62,1212.82 1116.21,1212.82 1116.8,1212.82 1117.38,1212.82 1117.97,1212.82 1118.55,1212.82 1119.14,1212.82 1119.73,1212.82 1120.31,1212.82 1120.9,1212.82 1121.49,1212.82 1122.07,1212.82 1122.66,1212.82 1123.25,1212.82 1123.83,1212.82 1124.42,1212.82 1125.01,1212.82 1125.59,1212.82 1126.18,1212.82 1126.76,1212.82 1127.35,1212.82 1127.94,1212.82 1128.52,1212.82 1129.11,1212.82 1129.7,1212.82 1130.28,1212.82 1130.87,1212.82 1131.46,1212.82 1132.04,1212.82 1132.63,1212.82 1133.21,1212.82 1133.8,1212.82 1134.39,1212.82 1134.97,1212.82 1135.56,1212.82 1136.15,1212.82 1136.73,1212.82 1137.32,1212.82 1137.91,1212.82 1138.49,1212.82 1139.08,1212.82 1139.67,1212.82 1140.25,1212.82 1140.84,1212.82 1141.42,1212.82 1142.01,1212.82 1142.6,1212.82 1143.18,1212.82 1143.77,1212.82 1144.36,1212.82 1144.94,1212.82 1145.53,1212.82 1146.12,1212.82 1146.7,1212.82 1147.29,1212.82 1147.88,1212.82 1148.46,1212.82 1149.05,1212.82 1149.63,1212.82 1150.22,1212.82 1150.81,1212.82 1151.39,1212.82 1151.98,1212.82 1152.57,1212.82 1153.15,1212.82 1153.74,1212.82 1154.33,1212.82 1154.91,1212.82 1155.5,1212.82 1156.09,1212.82 1156.67,1212.82 1157.26,1212.82 1157.84,1212.82 1158.43,1212.82 1159.02,1212.82 1159.6,1212.82 1160.19,1212.82 1160.78,1212.82 1161.36,1212.82 1161.95,1212.82 1162.54,1212.82 1163.12,1212.82 1163.71,1212.82 1164.29,1212.82 1164.88,1212.82 1165.47,1212.82 1166.05,1212.82 1166.64,1212.82 1167.23,1212.82 1167.81,1212.82 1168.4,1212.82 1168.99,1212.82 1169.57,1212.82 1170.16,1212.82 1170.75,1212.82 1171.33,1212.82 1171.92,1212.82 1172.5,1212.82 1173.09,1212.82 1173.68,1212.82 1174.26,1212.82 1174.85,1212.82 1175.44,1212.82 1176.02,1212.82 1176.61,1212.82 1177.2,1212.82 1177.78,1212.82 1178.37,1212.82 1178.96,1212.82 1179.54,1212.82 1180.13,1212.82 1180.71,1212.82 1181.3,1212.82 1181.89,1212.82 1182.47,1212.82 1183.06,1212.82 1183.65,1212.82 1184.23,1212.82 1184.82,1212.82 1185.41,1212.82 1185.99,1212.82 1186.58,1212.82 1187.16,1212.82 1187.75,1212.82 1188.34,1212.82 1188.92,1212.82 1189.51,1212.82 1190.1,1212.82 1190.68,1212.82 1191.27,1212.82 1191.86,1212.82 1192.44,1212.82 1193.03,1212.82 1193.62,1212.82 1194.2,1212.82 1194.79,1212.82 1195.37,1212.82 1195.96,1212.82 1196.55,1212.82 1197.13,1212.82 1197.72,1212.82 1198.31,1212.82 1198.89,1212.82 1199.48,1212.82 1200.07,1212.82 1200.65,1212.82 1201.24,1212.82 1201.83,1212.82 1202.41,1212.82 1203,1212.82 1203.58,1212.82 1204.17,1212.82 1204.76,1212.82 1205.34,1212.82 1205.93,1212.82 1206.52,1212.82 1207.1,1212.82 1207.69,1212.82 1208.28,1212.82 1208.86,1212.82 1209.45,1212.82 1210.03,1212.82 1210.62,1212.82 1211.21,1212.82 1211.79,1212.82 1212.38,1212.82 1212.97,1212.82 1213.55,1212.82 1214.14,1212.82 1214.73,1212.82 1215.31,1212.82 1215.9,1212.82 1216.49,1212.82 1217.07,1212.82 1217.66,1212.82 1218.24,1212.82 1218.83,1212.82 1219.42,1212.82 1220,1212.82 1220.59,1212.82 1221.18,1212.82 1221.76,1212.82 1222.35,1212.82 1222.94,1212.82 1223.52,1212.82 1224.11,1212.82 1224.7,1212.82 1225.28,1212.82 1225.87,1212.82 1226.45,1212.82 1227.04,1212.82 1227.63,1212.82 1228.21,1212.82 1228.8,1212.82 1229.39,1212.82 1229.97,1212.82 1230.56,1212.82 1231.15,1212.82 1231.73,1212.82 1232.32,1212.82 1232.91,1212.82 1233.49,1212.82 1234.08,1212.82 1234.66,1212.82 1235.25,1212.82 1235.84,1212.82 1236.42,1212.82 1237.01,1212.82 1237.6,1212.82 1238.18,1212.82 1238.77,1212.82 1239.36,1212.82 1239.94,1212.82 1240.53,1212.82 1241.11,1212.82 1241.7,1212.82 1242.29,1212.82 1242.87,1212.82 1243.46,1212.82 1244.05,1212.82 1244.63,1212.82 1245.22,1212.82 1245.81,1212.82 1246.39,1212.82 1246.98,1212.82 1247.57,1212.82 1248.15,1212.82 1248.74,1212.82 1249.32,1212.82 1249.91,1212.82 1250.5,1212.82 1251.08,1212.82 1251.67,1212.82 1252.26,1212.82 1252.84,1212.82 1253.43,1212.82 1254.02,1212.82 1254.6,1212.82 1255.19,1212.82 1255.78,1212.82 1256.36,1212.82 1256.95,1212.82 1257.53,1212.82 1258.12,1212.82 1258.71,1212.82 1259.29,1212.82 1259.88,1212.82 1260.47,1212.82 1261.05,1212.82 1261.64,1212.82 1262.23,1212.82 1262.81,1212.82 1263.4,1212.82 1263.98,1212.82 1264.57,1212.82 1265.16,1212.82 1265.74,1212.82 1266.33,1212.82 1266.92,1212.82 1267.5,1212.82 1268.09,1212.82 1268.68,1212.82 1269.26,1212.82 1269.85,1212.82 1270.44,1212.82 1271.02,1212.82 1271.61,1212.82 1272.19,1212.82 1272.78,1212.82 1273.37,1212.82 1273.95,1212.82 1274.54,1212.82 1275.13,1212.82 1275.71,1212.82 1276.3,1212.82 1276.89,1212.82 1277.47,1212.82 1278.06,1212.82 1278.65,1212.82 1279.23,1212.82 1279.82,1212.82 1280.4,1212.82 1280.99,1212.82 1281.58,1212.82 1282.16,1212.82 1282.75,1212.82 1283.34,1212.82 1283.92,1212.82 1284.51,1212.82 1285.1,1212.82 1285.68,1212.82 1286.27,1212.82 1286.86,1212.82 1287.44,1212.82 1288.03,1212.82 1288.61,1212.82 1289.2,1212.82 1289.79,1212.82 1290.37,1212.82 1290.96,1212.82 1291.55,1212.82 1292.13,1212.82 1292.72,1212.82 1293.31,1212.82 1293.89,1212.82 1294.48,1212.82 1295.06,1212.82 1295.65,1212.82 1296.24,1212.82 1296.82,1212.82 1297.41,1212.82 1298,1212.82 1298.58,1212.82 1299.17,1212.82 1299.76,1212.82 1300.34,1212.82 1300.93,1212.82 1301.52,1212.82 1302.1,1212.82 1302.69,1212.82 1303.27,1212.82 1303.86,1212.82 1304.45,1212.82 1305.03,1212.82 1305.62,1212.82 1306.21,1212.82 1306.79,1212.82 1307.38,1212.82 1307.97,1212.82 1308.55,1212.82 1309.14,1212.82 1309.73,1212.82 1310.31,1212.82 1310.9,1212.82 1311.48,1212.82 1312.07,1212.82 1312.66,1212.82 1313.24,1212.82 1313.83,1212.82 1314.42,1212.82 1315,1212.82 1315.59,1212.82 1316.18,1212.82 1316.76,1212.82 1317.35,1212.82 1317.93,1212.82 1318.52,1212.82 1319.11,1212.82 1319.69,1212.82 1320.28,1212.82 1320.87,1212.82 1321.45,1212.82 1322.04,1212.82 1322.63,1212.82 1323.21,1212.82 1323.8,1212.82 1324.39,1212.82 1324.97,1212.82 1325.56,1212.82 1326.14,1212.82 1326.73,1212.82 1327.32,1212.82 1327.9,1212.82 1328.49,1212.82 1329.08,1212.82 1329.66,1212.82 1330.25,1212.82 1330.84,1212.82 1331.42,1212.82 1332.01,1212.82 1332.6,1212.82 1333.18,1212.82 1333.77,1212.82 1334.35,1212.82 1334.94,1212.82 1335.53,1212.82 1336.11,1212.82 1336.7,1212.82 1337.29,1212.82 1337.87,1212.82 1338.46,1212.82 1339.05,1212.82 1339.63,1212.82 1340.22,1212.82 1340.8,1212.82 1341.39,1212.82 1341.98,1212.82 1342.56,1212.82 1343.15,1212.82 1343.74,1212.82 1344.32,1212.82 1344.91,1212.82 1345.5,1212.82 1346.08,1212.82 1346.67,1212.82 1347.26,1212.82 1347.84,1212.82 1348.43,1212.82 1349.01,1212.82 1349.6,1212.82 1350.19,1212.82 1350.77,1212.82 1351.36,1212.82 1351.95,1212.82 1352.53,1212.82 1353.12,1212.82 1353.71,1212.82 1354.29,1212.82 1354.88,1212.82 1355.47,1212.82 1356.05,1212.82 1356.64,1212.82 1357.22,1212.82 1357.81,1212.82 1358.4,1212.82 1358.98,1212.82 1359.57,1212.82 1360.16,1212.82 1360.74,1212.82 1361.33,1212.82 1361.92,1212.82 1362.5,1212.82 1363.09,1212.82 1363.68,1212.82 1364.26,1212.82 1364.85,1212.82 1365.43,1212.82 1366.02,1212.82 1366.61,1212.82 1367.19,1212.82 1367.78,1212.82 1368.37,1212.82 1368.95,1212.82 1369.54,1212.82 1370.13,1212.82 1370.71,1212.82 1371.3,1212.82 1371.88,1212.82 1372.47,1212.82 1373.06,1212.82 1373.64,1212.82 1374.23,1212.82 1374.82,1212.82 1375.4,1212.82 1375.99,1212.82 1376.58,1212.82 1377.16,1212.82 1377.75,1212.82 1378.34,1212.82 1378.92,1212.82 1379.51,1212.82 1380.09,1212.82 1380.68,1212.82 1381.27,1212.82 1381.85,1212.82 1382.44,1212.82 1383.03,1212.82 1383.61,1212.82 1384.2,1212.82 1384.79,1212.82 1385.37,1212.82 1385.96,1212.82 1386.55,1212.82 1387.13,1212.82 1387.72,1212.82 1388.3,1212.82 1388.89,1212.82 1389.48,1212.82 1390.06,1212.82 1390.65,1212.82 1391.24,1212.82 1391.82,1212.82 1392.41,1212.82 1393,1212.82 1393.58,1212.82 1394.17,1212.82 1394.75,1212.82 1395.34,1212.82 1395.93,1212.82 1396.51,1212.82 1397.1,1212.82 1397.69,1212.82 1398.27,1212.82 1398.86,1212.82 1399.45,1212.82 1400.03,1212.82 1400.62,1212.82 1401.21,1212.82 1401.79,1212.82 1402.38,1212.82 1402.96,1212.82 1403.55,1212.82 1404.14,1212.82 1404.72,1212.82 1405.31,1212.82 1405.9,1212.82 1406.48,1212.82 1407.07,1212.82 1407.66,1212.82 1408.24,1212.82 1408.83,1212.82 1409.42,1212.82 1410,1212.82 1410.59,1212.82 1411.17,1212.82 1411.76,1212.82 1412.35,1212.82 1412.93,1212.82 1413.52,1212.82 1414.11,1212.82 1414.69,1212.82 1415.28,1212.82 1415.87,1212.82 1416.45,1212.82 1417.04,1212.82 1417.63,1212.82 1418.21,1212.82 1418.8,1212.82 1419.38,1212.82 1419.97,1212.82 1420.56,1212.82 1421.14,1212.82 1421.73,1212.82 1422.32,1212.82 1422.9,1212.82 1423.49,1212.82 1424.08,1212.82 1424.66,1212.82 1425.25,1212.82 1425.83,1212.82 1426.42,1212.82 1427.01,1212.82 1427.59,1212.82 1428.18,1212.82 1428.77,1212.82 1429.35,1212.82 1429.94,1212.82 1430.53,1212.82 1431.11,1212.82 1431.7,1212.82 1432.29,1212.82 1432.87,1212.82 1433.46,1212.82 1434.04,1212.82 1434.63,1212.82 1435.22,1212.82 1435.8,1212.82 1436.39,1212.82 1436.98,1212.82 1437.56,1212.82 1438.15,1212.82 1438.74,1212.82 1439.32,1212.82 1439.91,1212.82 1440.5,1212.82 1441.08,1212.82 1441.67,1212.82 1442.25,1212.82 1442.84,1212.82 1443.43,1212.82 1444.01,1212.82 1444.6,1212.82 1445.19,1212.82 1445.77,1212.82 1446.36,1212.82 1446.95,1212.82 1447.53,1212.82 1448.12,1212.82 1448.7,1212.82 1449.29,1212.82 1449.88,1212.82 1450.46,1212.82 1451.05,1212.82 1451.64,1212.82 1452.22,1212.82 1452.81,1212.82 1453.4,1212.82 1453.98,1212.82 1454.57,1212.82 1455.16,1212.82 1455.74,1212.82 1456.33,1212.82 1456.91,1212.82 1457.5,1212.82 1458.09,1212.82 1458.67,1212.82 1459.26,1212.82 1459.85,1212.82 1460.43,1212.82 1461.02,1212.82 1461.61,1212.82 1462.19,1212.82 1462.78,1212.82 1463.37,1212.82 1463.95,1212.82 1464.54,1212.82 1465.12,1212.82 1465.71,1212.82 1466.3,1212.82 1466.88,1212.82 1467.47,1212.82 1468.06,1212.82 1468.64,1212.82 1469.23,1212.82 1469.82,1212.82 1470.4,1212.82 1470.99,1212.82 1471.57,1212.82 1472.16,1212.82 1472.75,1212.82 1473.33,1212.82 1473.92,1212.82 1474.51,1212.82 1475.09,1212.82 1475.68,1212.82 1476.27,1212.82 1476.85,1212.82 1477.44,1212.82 1478.03,1212.82 1478.61,1212.82 1479.2,1212.82 1479.78,1212.82 1480.37,1212.82 1480.96,1212.82 1481.54,1212.82 1482.13,1212.82 1482.72,1212.82 1483.3,1212.82 1483.89,1212.82 1484.48,1212.82 1485.06,1212.82 1485.65,1212.82 1486.24,1212.82 1486.82,1212.82 1487.41,1212.82 1487.99,1212.82 1488.58,1212.82 1489.17,1212.82 1489.75,1212.82 1490.34,1212.82 1490.93,1212.82 1491.51,1212.82 1492.1,1212.82 1492.69,1212.82 1493.27,1212.82 1493.86,1212.82 1494.45,1212.82 1495.03,1212.82 1495.62,1212.82 1496.2,1212.82 1496.79,1212.82 1497.38,1212.82 1497.96,1212.82 1498.55,1212.82 1499.14,1212.82 1499.72,1212.82 1500.31,1212.82 1500.9,1212.82 1501.48,1212.82 1502.07,1212.82 1502.65,1212.82 1503.24,1212.82 1503.83,1212.82 1504.41,1212.82 1505,1212.82 1505.59,1212.82 1506.17,1212.82 1506.76,1212.82 1507.35,1212.82 1507.93,1212.82 1508.52,1212.82 1509.11,1212.82 1509.69,1212.82 1510.28,1212.82 1510.86,1212.82 1511.45,1212.82 1512.04,1212.82 1512.62,1212.82 1513.21,1212.82 1513.8,1212.82 1514.38,1212.82 1514.97,1212.82 1515.56,1212.82 1516.14,1212.82 1516.73,1212.82 1517.32,1212.82 1517.9,1212.82 1518.49,1212.82 1519.07,1212.82 1519.66,1212.82 1520.25,1212.82 1520.83,1212.82 1521.42,1212.82 1522.01,1212.82 1522.59,1212.82 1523.18,1212.82 1523.77,1212.82 1524.35,1212.82 1524.94,1212.82 1525.52,1212.82 1526.11,1212.82 1526.7,1212.82 1527.28,1212.82 1527.87,1212.82 1528.46,1212.82 1529.04,1212.82 1529.63,1212.82 1530.22,1212.82 1530.8,1212.82 1531.39,1212.82 1531.98,1212.82 1532.56,1212.82 1533.15,1212.82 1533.73,1212.82 1534.32,1212.82 1534.91,1212.82 1535.49,1212.82 1536.08,1212.82 1536.67,1212.82 1537.25,1212.82 1537.84,1212.82 1538.43,1212.82 1539.01,1212.82 1539.6,1212.82 1540.19,1212.82 1540.77,1212.82 1541.36,1212.82 1541.94,1212.82 1542.53,1212.82 1543.12,1212.82 1543.7,1212.82 1544.29,1212.82 1544.88,1212.82 1545.46,1212.82 1546.05,1212.82 1546.64,1212.82 1547.22,1212.82 1547.81,1212.82 1548.4,1212.82 1548.98,1212.82 1549.57,1212.82 1550.15,1212.82 1550.74,1212.82 1551.33,1212.82 1551.91,1212.82 1552.5,1212.82 1553.09,1212.82 1553.67,1212.82 1554.26,1212.82 1554.85,1212.82 1555.43,1212.82 1556.02,1212.82 1556.6,1212.82 1557.19,1212.82 1557.78,1212.82 1558.36,1212.82 1558.95,1212.82 1559.54,1212.82 1560.12,1212.82 1560.71,1212.82 1561.3,1212.82 1561.88,1212.82 1562.47,1212.82 1563.06,1212.82 1563.64,1212.82 1564.23,1212.82 1564.81,1212.82 1565.4,1212.82 1565.99,1212.82 1566.57,1212.82 1567.16,1212.82 1567.75,1212.82 1568.33,1212.82 1568.92,1212.82 1569.51,1212.82 1570.09,1212.82 1570.68,1212.82 1571.27,1212.82 1571.85,1212.82 1572.44,1212.82 1573.02,1212.82 1573.61,1212.82 1574.2,1212.82 1574.78,1212.82 1575.37,1212.82 1575.96,1212.82 1576.54,1212.82 1577.13,1212.82 1577.72,1212.82 1578.3,1212.82 1578.89,1212.82 1579.47,1212.82 1580.06,1212.82 1580.65,1212.82 1581.23,1212.82 1581.82,1212.82 1582.41,1212.82 1582.99,1212.82 1583.58,1212.82 1584.17,1212.82 1584.75,1212.82 1585.34,1212.82 1585.93,1212.82 1586.51,1212.82 1587.1,1212.82 1587.68,1212.82 1588.27,1212.82 1588.86,1212.82 1589.44,1212.82 1590.03,1212.82 1590.62,1212.82 1591.2,1212.82 1591.79,1212.82 1592.38,1212.82 1592.96,1212.82 1593.55,1212.82 1594.14,1212.82 1594.72,1212.82 1595.31,1212.82 1595.89,1212.82 1596.48,1212.82 1597.07,1212.82 1597.65,1212.82 1598.24,1212.82 1598.83,1212.82 1599.41,1212.82 1600,1212.82 1600.59,1212.82 1601.17,1212.82 1601.76,1212.82 1602.34,1212.82 1602.93,1212.82 1603.52,1212.82 1604.1,1212.82 1604.69,1212.82 1605.28,1212.82 1605.86,1212.82 1606.45,1212.82 1607.04,1212.82 1607.62,1212.82 1608.21,1212.82 1608.8,1212.82 1609.38,1212.82 1609.97,1212.82 1610.55,1212.82 1611.14,1212.82 1611.73,1212.82 1612.31,1212.82 1612.9,1212.82 1613.49,1212.82 1614.07,1212.82 1614.66,1212.82 1615.25,1212.82 1615.83,1212.82 1616.42,1212.82 1617.01,1212.82 1617.59,1212.82 1618.18,1212.82 1618.76,1212.82 1619.35,1212.82 1619.94,1212.82 1620.52,1212.82 1621.11,1212.82 1621.7,1212.82 1622.28,1212.82 1622.87,1212.82 1623.46,1212.82 1624.04,1212.82 1624.63,1212.82 1625.22,1212.82 1625.8,1212.82 1626.39,1212.82 1626.97,1212.82 1627.56,1212.82 1628.15,1212.82 1628.73,1212.82 1629.32,1212.82 1629.91,1212.82 1630.49,1212.82 1631.08,1212.82 1631.67,1212.82 1632.25,1212.82 1632.84,1212.82 1633.42,1212.82 1634.01,1212.82 1634.6,1212.82 1635.18,1212.82 1635.77,1212.82 1636.36,1212.82 1636.94,1212.82 1637.53,1212.82 1638.12,1212.82 1638.7,1212.82 1639.29,1212.82 1639.88,1212.82 1640.46,1212.82 1641.05,1212.82 1641.63,1212.82 1642.22,1212.82 1642.81,1212.82 1643.39,1212.82 1643.98,1212.82 1644.57,1212.82 1645.15,1212.82 1645.74,1212.82 1646.33,1212.82 1646.91,1212.82 1647.5,1212.82 1648.09,1212.82 1648.67,1212.82 1649.26,1212.82 1649.84,1212.82 1650.43,1212.82 1651.02,1212.82 1651.6,1212.82 1652.19,1212.82 1652.78,1212.82 1653.36,1212.82 1653.95,1212.82 1654.54,1212.82 1655.12,1212.82 1655.71,1212.82 1656.29,1212.82 1656.88,1212.82 1657.47,1212.82 1658.05,1212.82 1658.64,1212.82 1659.23,1212.82 1659.81,1212.82 1660.4,1212.82 1660.99,1212.82 1661.57,1212.82 1662.16,1212.82 1662.75,1212.82 1663.33,1212.82 1663.92,1212.82 1664.5,1212.82 1665.09,1212.82 1665.68,1212.82 1666.26,1212.82 1666.85,1212.82 1667.44,1212.82 1668.02,1212.82 1668.61,1212.82 1669.2,1212.82 1669.78,1212.82 1670.37,1212.82 1670.96,1212.82 1671.54,1212.82 1672.13,1212.82 1672.71,1212.82 1673.3,1212.82 1673.89,1212.82 1674.47,1212.82 1675.06,1212.82 1675.65,1212.82 1676.23,1212.82 1676.82,1212.82 1677.41,1212.82 1677.99,1212.82 1678.58,1212.82 1679.17,1212.82 1679.75,1212.82 1680.34,1212.82 1680.92,1212.82 1681.51,1212.82 1682.1,1212.82 1682.68,1212.82 1683.27,1212.82 1683.86,1212.82 1684.44,1212.82 1685.03,1212.82 1685.62,1212.82 1686.2,1212.82 1686.79,1212.82 1687.37,1212.82 1687.96,1212.82 1688.55,1212.82 1689.13,1212.82 1689.72,1212.82 1690.31,1212.82 1690.89,1212.82 1691.48,1212.82 1692.07,1212.82 1692.65,1212.82 1693.24,1212.82 1693.83,1212.82 1694.41,1212.82 1695,1212.82 1695.58,1212.82 1696.17,1212.82 1696.76,1212.82 1697.34,1212.82 1697.93,1212.82 1698.52,1212.82 1699.1,1212.82 1699.69,1212.82 1700.28,1212.82 1700.86,1212.82 1701.45,1212.82 1702.04,1212.82 1702.62,1212.82 1703.21,1212.82 1703.79,1212.82 1704.38,1212.82 1704.97,1212.82 1705.55,1212.82 1706.14,1212.82 1706.73,1212.82 1707.31,1212.82 1707.9,1212.82 1708.49,1212.82 1709.07,1212.82 1709.66,1212.82 1710.24,1212.82 1710.83,1212.82 1711.42,1212.82 1712,1212.82 1712.59,1212.82 1713.18,1212.82 1713.76,1212.82 1714.35,1212.82 1714.94,1212.82 1715.52,1212.82 1716.11,1212.82 1716.7,1212.82 1717.28,1212.82 1717.87,1212.82 1718.45,1212.82 1719.04,1212.82 1719.63,1212.82 1720.21,1212.82 1720.8,1212.82 1721.39,1212.82 1721.97,1212.82 1722.56,1212.82 1723.15,1212.82 1723.73,1212.82 1724.32,1212.82 1724.91,1212.82 1725.49,1212.82 1726.08,1212.82 1726.66,1212.82 1727.25,1212.82 1727.84,1212.82 1728.42,1212.82 1729.01,1212.82 1729.6,1212.82 1730.18,1212.82 1730.77,1212.82 1731.36,1212.82 1731.94,1212.82 1732.53,1212.82 1733.11,1212.82 1733.7,1212.82 1734.29,1212.82 1734.87,1212.82 1735.46,1212.82 1736.05,1212.82 1736.63,1212.82 1737.22,1212.82 1737.81,1212.82 1738.39,1212.82 1738.98,1212.82 1739.57,1212.82 1740.15,1212.82 1740.74,1212.82 1741.32,1212.82 1741.91,1212.82 1742.5,1212.82 1743.08,1212.82 1743.67,1212.82 1744.26,1212.82 1744.84,1212.82 1745.43,1212.82 1746.02,1212.82 1746.6,1212.82 1747.19,1212.82 1747.78,1212.82 1748.36,1212.82 1748.95,1212.82 1749.53,1212.82 1750.12,1212.82 1750.71,1212.82 1751.29,1212.82 1751.88,1212.82 1752.47,1212.82 1753.05,1212.82 1753.64,1212.82 1754.23,1212.82 1754.81,1212.82 1755.4,1212.82 1755.99,1212.82 1756.57,1212.82 1757.16,1212.82 1757.74,1212.82 1758.33,1212.82 1758.92,1212.82 1759.5,1212.82 1760.09,1212.82 1760.68,1212.82 1761.26,1212.82 1761.85,1212.82 1762.44,1212.82 1763.02,1212.82 1763.61,1212.82 1764.19,1212.82 1764.78,1212.82 1765.37,1212.82 1765.95,1212.82 1766.54,1212.82 1767.13,1212.82 1767.71,1212.82 1768.3,1212.82 1768.89,1212.82 1769.47,1212.82 1770.06,1212.82 1770.65,1212.82 1771.23,1212.82 1771.82,1212.82 1772.4,1212.82 1772.99,1212.82 1773.58,1212.82 1774.16,1212.82 1774.75,1212.82 1775.34,1212.82 1775.92,1212.82 1776.51,1212.82 1777.1,1212.82 1777.68,1212.82 1778.27,1212.82 1778.86,1212.82 1779.44,1212.82 1780.03,1212.82 1780.61,1212.82 1781.2,1212.82 1781.79,1212.82 1782.37,1212.82 1782.96,1212.82 1783.55,1212.82 1784.13,1212.82 1784.72,1212.82 1785.31,1212.82 1785.89,1212.82 1786.48,1212.82 1787.06,1212.82 1787.65,1212.82 1788.24,1212.82 1788.82,1212.82 1789.41,1212.82 1790,1212.82 1790.58,1212.82 1791.17,1212.82 1791.76,1212.82 1792.34,1212.82 1792.93,1212.82 1793.52,1212.82 1794.1,1212.82 1794.69,1212.82 1795.27,1212.82 1795.86,1212.82 1796.45,1212.82 1797.03,1212.82 1797.62,1212.82 1798.21,1212.82 1798.79,1212.82 1799.38,1212.82 1799.97,1212.82 1800.55,1212.82 1801.14,1212.82 1801.73,1212.82 1802.31,1212.82 1802.9,1212.82 1803.48,1212.82 1804.07,1212.82 1804.66,1212.82 1805.24,1212.82 1805.83,1212.82 1806.42,1212.82 1807,1212.82 1807.59,1212.82 1808.18,1212.82 1808.76,1212.82 1809.35,1212.82 1809.94,1212.82 1810.52,1212.82 1811.11,1212.82 1811.69,1212.82 1812.28,1212.82 1812.87,1212.82 1813.45,1212.82 1814.04,1212.82 1814.63,1212.82 1815.21,1212.82 1815.8,1212.82 1816.39,1212.82 1816.97,1212.82 1817.56,1212.82 1818.14,1212.82 1818.73,1212.82 1819.32,1212.82 1819.9,1212.82 1820.49,1212.82 1821.08,1212.82 1821.66,1212.82 1822.25,1212.82 1822.84,1212.82 1823.42,1212.82 1824.01,1212.82 1824.6,1212.82 1825.18,1212.82 1825.77,1212.82 1826.35,1212.82 1826.94,1212.82 1827.53,1212.82 1828.11,1212.82 1828.7,1212.82 1829.29,1212.82 1829.87,1212.82 1830.46,1212.82 1831.05,1212.82 1831.63,1212.82 1832.22,1212.82 1832.81,1212.82 1833.39,1212.82 1833.98,1212.82 1834.56,1212.82 1835.15,1212.82 1835.74,1212.82 1836.32,1212.82 1836.91,1212.82 1837.5,1212.82 1838.08,1212.82 1838.67,1212.82 1839.26,1212.82 1839.84,1212.82 1840.43,1212.82 1841.01,1212.82 1841.6,1212.82 1842.19,1212.82 1842.77,1212.82 1843.36,1212.82 1843.95,1212.82 1844.53,1212.82 1845.12,1212.82 1845.71,1212.82 1846.29,1212.82 1846.88,1212.82 1847.47,1212.82 1848.05,1212.82 1848.64,1212.82 1849.22,1212.82 1849.81,1212.82 1850.4,1212.82 1850.98,1212.82 1851.57,1212.82 1852.16,1212.82 1852.74,1212.82 1853.33,1212.82 1853.92,1212.82 1854.5,1212.82 1855.09,1212.82 1855.68,1212.82 1856.26,1212.82 1856.85,1212.82 1857.43,1212.82 1858.02,1212.82 1858.61,1212.82 1859.19,1212.82 1859.78,1212.82 1860.37,1212.82 1860.95,1212.82 1861.54,1212.82 1862.13,1212.82 1862.71,1212.82 1863.3,1212.82 1863.88,1212.82 1864.47,1212.82 1865.06,1212.82 1865.64,1212.82 1866.23,1212.82 1866.82,1212.82 1867.4,1212.82 1867.99,1212.82 1868.58,1212.82 1869.16,1212.82 1869.75,1212.82 1870.34,1212.82 1870.92,1212.82 1871.51,1212.82 1872.09,1212.82 1872.68,1212.82 1873.27,1212.82 1873.85,1212.82 1874.44,1212.82 1875.03,1212.82 1875.61,1212.82 1876.2,1212.82 1876.79,1212.82 1877.37,1212.82 1877.96,1212.82 1878.55,1212.82 1879.13,1212.82 1879.72,1212.82 1880.3,1212.82 1880.89,1212.82 1881.48,1212.82 1882.06,1212.82 1882.65,1212.82 1883.24,1212.82 1883.82,1212.82 1884.41,1212.82 1885,1212.82 1885.58,1212.82 1886.17,1212.82 1886.76,1212.82 1887.34,1212.82 1887.93,1212.82 1888.51,1212.82 1889.1,1212.82 1889.69,1212.82 1890.27,1212.82 1890.86,1212.82 1891.45,1212.82 1892.03,1212.82 1892.62,1212.82 1893.21,1212.82 1893.79,1212.82 1894.38,1212.82 1894.96,1212.82 1895.55,1212.82 1896.14,1212.82 1896.72,1212.82 1897.31,1212.82 1897.9,1212.82 1898.48,1212.82 1899.07,1212.82 1899.66,1212.82 1900.24,1212.82 1900.83,1212.82 1901.42,1212.82 1902,1212.82 1902.59,1212.82 1903.17,1212.82 1903.76,1212.82 1904.35,1212.82 1904.93,1212.82 1905.52,1212.82 1906.11,1212.82 1906.69,1212.82 1907.28,1212.82 1907.87,1212.82 1908.45,1212.82 1909.04,1212.82 1909.63,1212.82 1910.21,1212.82 1910.8,1212.82 1911.38,1212.82 1911.97,1212.82 1912.56,1212.82 1913.14,1212.82 1913.73,1212.82 1914.32,1212.82 1914.9,1212.82 1915.49,1212.82 1916.08,1212.82 1916.66,1212.82 1917.25,1212.82 1917.83,1212.82 1918.42,1212.82 1919.01,1212.82 1919.59,1212.82 1920.18,1212.82 1920.77,1212.82 1921.35,1212.82 1921.94,1212.82 1922.53,1212.82 1923.11,1212.82 1923.7,1212.82 1924.29,1212.82 1924.87,1212.82 1925.46,1212.82 1926.04,1212.82 1926.63,1212.82 1927.22,1212.82 1927.8,1212.82 1928.39,1212.82 1928.98,1212.82 1929.56,1212.82 1930.15,1212.82 1930.74,1212.82 1931.32,1212.82 1931.91,1212.82 1932.5,1212.82 1933.08,1212.82 1933.67,1212.82 1934.25,1212.82 1934.84,1212.82 1935.43,1212.82 1936.01,1212.82 1936.6,1212.82 1937.19,1212.82 1937.77,1212.82 1938.36,1212.82 1938.95,1212.82 1939.53,1212.82 1940.12,1212.82 1940.71,1212.82 1941.29,1212.82 1941.88,1212.82 1942.46,1212.82 1943.05,1212.82 1943.64,1212.82 1944.22,1212.82 1944.81,1212.82 1945.4,1212.82 1945.98,1212.82 1946.57,1212.82 1947.16,1212.82 1947.74,1212.82 1948.33,1212.82 1948.91,1212.82 1949.5,1212.82 1950.09,1212.82 1950.67,1212.82 1951.26,1212.82 1951.85,1212.82 1952.43,1212.82 1953.02,1212.82 1953.61,1212.82 1954.19,1212.82 1954.78,1212.82 1955.37,1212.82 1955.95,1212.82 1956.54,1212.82 1957.12,1212.82 1957.71,1212.82 1958.3,1212.82 1958.88,1212.82 1959.47,1212.82 1960.06,1212.82 1960.64,1212.82 1961.23,1212.82 1961.82,1212.82 1962.4,1212.82 1962.99,1212.82 1963.58,1212.82 1964.16,1212.82 1964.75,1212.82 1965.33,1212.82 1965.92,1212.82 1966.51,1212.82 1967.09,1212.82 1967.68,1212.82 1968.27,1212.82 1968.85,1212.82 1969.44,1212.82 1970.03,1212.82 1970.61,1212.82 1971.2,1212.82 1971.78,1212.82 1972.37,1212.82 1972.96,1212.82 1973.54,1212.82 1974.13,1212.82 1974.72,1212.82 1975.3,1212.82 1975.89,1212.82 1976.48,1212.82 1977.06,1212.82 1977.65,1212.82 1978.24,1212.82 1978.82,1212.82 1979.41,1212.82 1979.99,1212.82 1980.58,1212.82 1981.17,1212.82 1981.75,1212.82 1982.34,1212.82 1982.93,1212.82 1983.51,1212.82 1984.1,1212.82 1984.69,1212.82 1985.27,1212.82 1985.86,1212.82 1986.45,1212.82 1987.03,1212.82 1987.62,1212.82 1988.2,1212.82 1988.79,1212.82 1989.38,1212.82 1989.96,1212.82 1990.55,1212.82 1991.14,1212.82 1991.72,1212.82 1992.31,1212.82 1992.9,1212.82 1993.48,1212.82 1994.07,1212.82 1994.65,1212.82 1995.24,1212.82 1995.83,1212.82 1996.41,1212.82 1997,1212.82 1997.59,1212.82 1998.17,1212.82 1998.76,1212.82 1999.35,1212.82 1999.93,1212.82 2000.52,1212.82 2001.11,1212.82 2001.69,1212.82 2002.28,1212.82 2002.86,1212.82 2003.45,1212.82 2004.04,1212.82 2004.62,1212.82 2005.21,1212.82 2005.8,1212.82 2006.38,1212.82 2006.97,1212.82 2007.56,1212.82 2008.14,1212.82 2008.73,1212.82 2009.32,1212.82 2009.9,1212.82 2010.49,1212.82 2011.07,1212.82 2011.66,1212.82 2012.25,1212.82 2012.83,1212.82 2013.42,1212.82 2014.01,1212.82 2014.59,1212.82 2015.18,1212.82 2015.77,1212.82 2016.35,1212.82 2016.94,1212.82 2017.53,1212.82 2018.11,1212.82 2018.7,1212.82 2019.28,1212.82 2019.87,1212.82 2020.46,1212.82 2021.04,1212.82 2021.63,1212.82 2022.22,1212.82 2022.8,1212.82 2023.39,1212.82 2023.98,1212.82 2024.56,1212.82 2025.15,1212.82 2025.73,1212.82 2026.32,1212.82 2026.91,1212.82 2027.49,1212.82 2028.08,1212.82 2028.67,1212.82 2029.25,1212.82 2029.84,1212.82 2030.43,1212.82 2031.01,1212.82 2031.6,1212.82 2032.19,1212.82 2032.77,1212.82 2033.36,1212.82 2033.94,1212.82 2034.53,1212.82 2035.12,1212.82 2035.7,1212.82 2036.29,1212.82 2036.88,1212.82 2037.46,1212.82 2038.05,1212.82 2038.64,1212.82 2039.22,1212.82 2039.81,1212.82 2040.4,1212.82 2040.98,1212.82 2041.57,1212.82 2042.15,1212.82 2042.74,1212.82 2043.33,1212.82 2043.91,1212.82 2044.5,1212.82 2045.09,1212.82 2045.67,1212.82 2046.26,1212.82 2046.85,1212.82 2047.43,1212.82 2048.02,1212.82 2048.6,1212.82 2049.19,1212.82 2049.78,1212.82 2050.36,1212.82 2050.95,1212.82 2051.54,1212.82 2052.12,1212.82 2052.71,1212.82 2053.3,1212.82 2053.88,1212.82 2054.47,1212.82 2055.06,1212.82 2055.64,1212.82 2056.23,1212.82 2056.81,1212.82 2057.4,1212.82 2057.99,1212.82 2058.57,1212.82 2059.16,1212.82 2059.75,1212.82 2060.33,1212.82 2060.92,1212.82 2061.51,1212.82 2062.09,1212.82 2062.68,1212.82 2063.27,1212.82 2063.85,1212.82 2064.44,1212.82 2065.02,1212.82 2065.61,1212.82 2066.2,1212.82 2066.78,1212.82 2067.37,1212.82 2067.96,1212.82 2068.54,1212.82 2069.13,1212.82 2069.72,1212.82 2070.3,1212.82 2070.89,1212.82 2071.48,1212.82 2072.06,1212.82 2072.65,1212.82 2073.23,1212.82 2073.82,1212.82 2074.41,1212.82 2074.99,1212.82 2075.58,1212.82 2076.17,1212.82 2076.75,1212.82 2077.34,1212.82 2077.93,1212.82 2078.51,1212.82 2079.1,1212.82 2079.68,1212.82 2080.27,1212.82 2080.86,1212.82 2081.44,1212.82 2082.03,1212.82 2082.62,1212.82 2083.2,1212.82 2083.79,1212.82 2084.38,1212.82 2084.96,1212.82 2085.55,1212.82 2086.14,1212.82 2086.72,1212.82 2087.31,1212.82 2087.89,1212.82 2088.48,1212.82 2089.07,1212.82 2089.65,1212.82 2090.24,1212.82 2090.83,1212.82 2091.41,1212.82 2092,1212.82 2092.59,1212.82 2093.17,1212.82 2093.76,1212.82 2094.35,1212.82 2094.93,1212.82 2095.52,1212.82 2096.1,1212.82 2096.69,1212.82 2097.28,1212.82 2097.86,1212.82 2098.45,1212.82 2099.04,1212.82 2099.62,1212.82 2100.21,1212.82 2100.8,1212.82 2101.38,1212.82 2101.97,1212.82 2102.55,1212.82 2103.14,1212.82 2103.73,1212.82 2104.31,1212.82 2104.9,1212.82 2105.49,1212.82 2106.07,1212.82 2106.66,1212.82 2107.25,1212.82 2107.83,1212.82 2108.42,1212.82 2109.01,1212.82 2109.59,1212.82 2110.18,1212.82 2110.76,1212.82 2111.35,1212.82 2111.94,1212.82 2112.52,1212.82 2113.11,1212.82 2113.7,1212.82 2114.28,1212.82 2114.87,1212.82 2115.46,1212.82 2116.04,1212.82 2116.63,1212.82 2117.22,1212.82 2117.8,1212.82 2118.39,1212.82 2118.97,1212.82 2119.56,1212.82 2120.15,1212.82 2120.73,1212.82 2121.32,1212.82 2121.91,1212.82 2122.49,1212.82 2123.08,1212.82 2123.67,1212.82 2124.25,1212.82 2124.84,1212.82 2125.42,1212.82 2126.01,1212.82 2126.6,1212.82 2127.18,1212.82 2127.77,1212.82 2128.36,1212.82 2128.94,1212.82 2129.53,1212.82 2130.12,1212.82 2130.7,1212.82 2131.29,1212.82 2131.88,1212.82 2132.46,1212.82 2133.05,1212.82 2133.63,1212.82 2134.22,1212.82 2134.81,1212.82 2135.39,1212.82 2135.98,1212.82 2136.57,1212.82 2137.15,1212.82 2137.74,1212.82 2138.33,1212.82 2138.91,1212.82 2139.5,1212.82 2140.09,1212.82 2140.67,1212.82 2141.26,1212.82 2141.84,1212.82 2142.43,1212.82 2143.02,1212.82 2143.6,1212.82 2144.19,1212.82 2144.78,1212.82 2145.36,1212.82 2145.95,1212.82 2146.54,1212.82 2147.12,1212.82 2147.71,1212.82 2148.3,1212.82 2148.88,1212.82 2149.47,1212.82 2150.05,1212.82 2150.64,1212.82 2151.23,1212.82 2151.81,1212.82 2152.4,1212.82 2152.99,1212.82 2153.57,1212.82 2154.16,1212.82 2154.75,1212.82 2155.33,1212.82 2155.92,1212.82 2156.5,1212.82 2157.09,1212.82 2157.68,1212.82 2158.26,1212.82 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.44,1195.53 1399.23,899.083 \"/>\n<polyline clip-path=\"url(#clip362)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.71 985.439,1195.53 2158.26,1195.53 2158.26,1229.71 985.439,1229.71 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip360)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip360)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip363\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip363)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip363)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip363)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip363)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip363)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip363)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip363)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip363)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip363)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip363)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip360)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip360)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip360)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip363)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-4871.05 163.792,-5884.8 164.351,-6810.32 164.91,-7636.24 165.469,-8405.38 166.029,-9104.04 166.588,-9734.96 167.147,-8299.06 167.706,-8901.06 168.266,-9429.94 168.825,-9916.07 169.384,-10349.5 169.943,-10733.5 170.503,-11071.5 171.062,-11366.5 171.621,-11621.2 172.18,-11824.9 172.74,-12007.8 173.299,-11140.5 173.858,-11315.9 174.417,-11460.5 174.977,-11577.4 175.536,-11674.3 176.095,-11738.7 176.655,-11083.3 177.214,-11119.4 177.773,-10830.1 178.332,-10833 178.892,-10821.4 179.451,-10787 180.01,-10056.7 180.569,-9992.57 181.129,-9920.06 181.688,-9832.72 182.247,-9745.46 182.806,-9633.13 183.366,-9362.24 183.925,-9262.59 184.484,-9011.24 185.043,-8755.12 185.603,-8376.85 186.162,-8012.42 186.721,-7917.73 187.28,-7594.97 187.84,-7293.29 188.399,-7092.51 188.958,-6994.65 189.517,-6884.8 190.077,-6771.26 190.636,-6658.63 191.195,-6461.29 191.754,-6044.03 192.314,-5802.33 192.873,-5574.48 193.432,-5480.25 193.991,-5323.21 194.551,-5161.57 195.11,-5059.32 195.669,-4905.14 196.228,-4751.58 196.788,-4485.63 197.347,-4342.91 197.906,-4253.03 198.465,-4108.31 199.025,-4019.56 199.584,-3930.35 200.143,-3749.05 200.702,-3617.13 201.262,-3535.55 201.821,-3366.19 202.38,-3239.79 202.939,-3121.25 203.499,-3041.54 204.058,-2885.01 204.617,-2807.88 205.176,-2697.9 205.736,-2553.08 206.295,-2449.81 206.854,-2318.87 207.413,-2252.03 207.973,-2120.17 208.532,-2027.99 209.091,-1965.61 209.65,-1901.24 210.21,-1871.41 210.769,-1692.36 211.328,-1521.02 211.887,-1438.85 212.447,-1277.23 213.006,-1228.07 213.565,-1125.45 214.124,-1025.8 214.684,-981.054 215.243,-884.498 215.802,-792.38 216.361,-733.632 216.921,-621.656 217.48,-567.73 218.039,-508.854 218.598,-431.477 219.158,-356.536 219.717,-311.34 220.276,-239.105 220.835,-144.842 221.395,-127.547 221.954,-86.8754 222.513,-66.7702 223.072,-26.4295 223.632,31.8777 224.191,66.9363 224.75,103.762 225.309,138.452 225.869,150.794 226.428,204.475 226.987,276.988 227.546,267.121 228.106,293.982 228.665,324.819 229.224,333.315 229.783,364.868 230.343,432.038 230.902,480.403 231.461,486.688 232.02,591.497 232.58,574.476 233.139,598.671 233.698,582.042 234.257,586.443 234.817,649.466 235.376,650.178 235.935,671.961 236.494,714.48 237.054,753.411 237.613,732.673 238.172,771.604 238.731,756.038 239.291,776.054 239.85,775.803 240.409,795.915 240.968,813.747 241.528,813.144 242.087,831.691 242.646,882.245 243.205,933.154 243.765,929.039 244.324,959.815 244.883,954.065 245.442,930.728 246.002,960.766 246.561,1010.48 247.12,1054.81 247.679,1046.5 248.239,1055.53 248.798,1010.45 249.357,1038.62 249.916,1049.49 250.476,1025.07 251.035,1048.48 251.594,1056.82 252.153,1048.2 252.713,1056.45 253.272,1051.66 253.831,1046.19 254.39,1056.34 254.95,1097.44 255.509,1107.02 256.068,1099.23 256.627,1158.33 257.187,1165.11 257.746,1152.29 258.305,1142.31 258.864,1127.8 259.424,1117.46 259.983,1091.06 260.542,1103.2 261.101,1111.25 261.661,1120.86 262.22,1107.4 262.779,1131.61 263.338,1153.57 263.898,1156.48 264.457,1158.07 265.016,1159.24 265.575,1145.57 266.135,1150.24 266.694,1137.94 267.253,1123.71 267.812,1146 268.372,1082.43 268.931,1058.93 269.49,1052.24 270.049,1081.02 270.609,1036.06 271.168,1063.75 271.727,1057.62 272.286,1047.99 272.846,1044.59 273.405,1070.62 273.964,1096.7 274.523,1103.42 275.083,1108.85 275.642,1116.74 276.201,1091.55 276.76,1079.75 277.32,1090.18 277.879,1030.32 278.438,1009.47 278.997,1023.34 279.557,1035.03 280.116,1012.91 280.675,1011.09 281.234,1057.53 281.794,1067.71 282.353,1077.02 282.912,1116.46 283.471,1125.11 284.031,1130.38 284.59,1087.64 285.149,1108.5 285.708,1084.86 286.268,1094.26 286.827,1085.78 287.386,1093.62 287.945,1087.57 288.505,1077.37 289.064,1067.38 289.623,1059.07 290.182,1049.51 290.742,1063.44 291.301,1022.27 291.86,1033.5 292.419,1011.21 292.979,1022.96 293.538,982.623 294.097,959.949 294.656,975.317 295.216,1035.59 295.775,1047.42 296.334,1038.23 296.893,1052.3 297.453,1047.22 298.012,1069.94 298.571,1076.29 299.13,1086.94 299.69,1126.96 300.249,1115.5 300.808,1104.5 301.368,1112.06 301.927,1085.37 302.486,1077.83 303.045,1064.59 303.605,1040.03 304.164,983.766 304.723,964.284 305.282,961.834 305.842,940.106 306.401,987.072 306.96,987.295 307.519,979.142 308.079,974.284 308.638,952.987 309.197,968.004 309.756,999.801 310.316,996.185 310.875,988.806 311.434,985.234 311.993,978.36 312.553,971.148 313.112,1013.26 313.671,1007.62 314.23,1001.46 314.79,995.997 315.349,975.534 315.908,971.442 316.467,1016.63 317.027,1025.63 317.586,1036.48 318.145,1059.99 318.704,1034.07 319.264,1042.08 319.823,1000.82 320.382,962.814 320.941,941.368 321.501,941.192 322.06,936.362 322.619,917.748 323.178,929.992 323.738,943.657 324.297,941.811 324.856,953.959 325.415,949.592 325.975,947.901 326.534,963.245 327.093,959.903 327.652,954.475 328.212,934.252 328.771,895.509 329.33,911.533 329.889,893.037 330.449,924.891 331.008,935.801 331.567,931.331 332.126,957.269 332.686,953.477 333.245,946.792 333.804,939.425 334.363,921.201 334.923,917.503 335.482,915.716 336.041,897.806 336.6,910.652 337.16,907.038 337.719,934.577 338.278,943.533 338.837,935.852 339.397,982.645 339.956,927.43 340.515,938.324 341.074,931.598 341.634,912.462 342.193,909.964 342.752,901.465 343.311,899.227 343.871,896.626 344.43,894.985 344.989,893.266 345.548,887.899 346.108,902.324 346.667,902.151 347.226,914.215 347.785,912.716 348.345,897.2 348.904,892.388 349.463,904.344 350.022,885.658 350.582,897.994 351.141,907.461 351.7,936.249 352.259,913.467 352.819,896.93 353.378,892.457 353.937,903.877 354.496,961.64 355.056,891.213 355.615,868.999 356.174,882.835 356.733,902.418 357.293,900.123 357.852,912.87 358.411,924.789 358.97,886.527 359.53,913.678 360.089,909.05 360.648,887.672 361.207,933.855 361.767,946.428 362.326,940.057 362.885,913.927 363.444,927.162 364.004,903.099 364.563,881.298 365.122,844.116 365.681,844.739 366.241,842.841 366.8,840.298 367.359,855.602 367.918,833.788 368.478,849.389 369.037,878.672 369.596,887.143 370.155,880.759 370.715,907.152 371.274,921.074 371.833,929.471 372.392,920.359 372.952,900.133 373.511,911.467 374.07,871.244 374.629,869.062 375.189,863.704 375.748,891.356 376.307,932.559 376.866,925.51 377.426,918.235 377.985,908.281 378.544,900.467 379.103,913.607 379.663,924.18 380.222,917.739 380.781,880.138 381.34,895.787 381.9,892.012 382.459,872.96 383.018,869.941 383.577,845.584 384.137,820.961 384.696,820.167 385.255,815.951 385.814,815.672 386.374,766.223 386.933,765.251 387.492,772.705 388.051,790.998 388.611,793.115 389.17,745.795 389.729,735.937 390.288,753.361 390.848,757.797 391.407,744.154 391.966,746.371 392.525,784.55 393.085,783.821 393.644,801.327 394.203,768.658 394.762,753.365 395.322,757.829 395.881,740.575 396.44,760.755 396.999,779.798 397.559,777.47 398.118,795.315 398.677,811.171 399.236,813.464 399.796,810.054 400.355,824.307 400.914,839.858 401.473,836.677 402.033,773.581 402.592,774.496 403.151,740.599 403.71,793.477 404.27,808.577 404.829,823.661 405.388,791.398 405.947,823.706 406.507,837.9 407.066,803.059 407.625,801.522 408.184,816.847 408.744,833.467 409.303,798.171 409.862,795.993 410.421,812.038 410.981,825.281 411.54,823.769 412.099,851.125 412.658,847.282 413.218,893.995 413.777,871.986 414.336,847.125 414.895,845.538 415.455,841.586 416.014,838.219 416.573,819.647 417.132,834.98 417.692,849.615 418.251,830.087 418.81,807.543 419.369,788.716 419.929,816.139 420.488,810.094 421.047,804.986 421.606,786.052 422.166,787.231 422.725,787.448 423.284,785.466 423.843,783.785 424.403,781.778 424.962,764.604 425.521,780.153 426.08,798.988 426.64,780.365 427.199,760.504 427.758,761.335 428.318,761.98 428.877,779.299 429.436,760.861 429.995,775.516 430.555,754.583 431.114,742.257 431.673,741.714 432.232,739.603 432.792,742.047 433.351,755.066 433.91,753.004 434.469,785.248 435.029,783.895 435.588,797.894 436.147,780.745 436.706,795.433 437.266,793.353 437.825,806.476 438.384,805.321 438.943,819.854 439.503,797.413 440.062,794.974 440.621,792.446 441.18,824.919 441.74,822.481 442.299,834.24 442.858,826.985 443.417,791.648 443.977,804.657 444.536,818.639 445.095,832.986 445.654,828.095 446.214,822.865 446.773,821.121 447.332,832.306 447.891,798.995 448.451,830.574 449.01,793.578 449.569,807.972 450.128,804.906 450.688,786.012 451.247,814.876 451.806,811.971 452.365,824.059 452.925,852.991 453.484,847.93 454.043,890.104 454.602,885.838 455.162,859.62 455.721,853.127 456.28,846.085 456.839,840.245 457.399,803.076 457.958,799.315 458.517,813.473 459.076,776.64 459.636,791.902 460.195,791.938 460.754,742.569 461.313,726.433 461.873,728.55 462.432,731.39 462.991,762.073 463.55,764.552 464.11,782.711 464.669,794.635 465.228,806.999 465.787,804.545 466.347,786.849 466.906,799.94 467.465,814.76 468.024,796.046 468.584,761.667 469.143,757.923 469.702,772.16 470.261,752.946 470.821,754.088 471.38,766.997 471.939,767.555 472.498,779.758 473.058,794.676 473.617,744.897 474.176,760.74 474.735,774.253 475.295,759.981 475.854,760.115 476.413,756.063 476.972,719.717 477.532,704.65 478.091,691.904 478.65,676.844 479.209,680.326 479.769,700.261 480.328,668.854 480.887,685.436 481.446,706.049 482.006,692.241 482.565,738.504 483.124,768.515 483.683,750.327 484.243,732.746 484.802,766.767 485.361,769.458 485.92,735.827 486.48,722.279 487.039,753.064 487.598,715.705 488.157,716.523 488.717,717.662 489.276,703.246 489.835,737.916 490.394,753.092 490.954,751.786 491.513,732.616 492.072,732.784 492.631,736.507 493.191,754.018 493.75,755.714 494.309,786.618 494.868,748.641 495.428,730.629 495.987,733.058 496.546,716.305 497.105,716.862 497.665,702.194 498.224,737.082 498.783,722.115 499.342,710.509 499.902,726.138 500.461,725.456 501.02,759.29 501.579,739.025 502.139,736.683 502.698,739.405 503.257,739.617 503.816,738.936 504.376,709.213 504.935,663.588 505.494,665.532 506.053,650.181 506.613,622.678 507.172,628.533 507.731,669.248 508.29,655.832 508.85,655.082 509.409,610.376 509.968,602.431 510.527,628.828 511.087,664.566 511.646,650.867 512.205,640.294 512.764,663.67 513.324,651.33 513.883,720.083 514.442,722.906 515.001,739.133 515.561,738.679 516.12,751.732 516.679,766.9 517.238,766.647 517.798,768.909 518.357,768.468 518.916,764.991 519.475,778.634 520.035,777.353 520.594,775.22 521.153,790.499 521.712,839.409 522.272,848.847 522.831,861.232 523.39,842.89 523.949,807.425 524.509,820.326 525.068,798.711 525.627,762.844 526.186,760.001 526.746,772.774 527.305,787.985 527.864,816.187 528.423,829.577 528.983,822.637 529.542,838.131 530.101,833.263 530.66,830.088 531.22,822.918 531.779,816.922 532.338,798.889 532.897,829.212 533.457,826.937 534.016,834.747 534.575,860.971 535.134,869.51 535.694,864.291 536.253,855.883 536.812,830.643 537.371,824.762 537.931,819.113 538.49,810.748 539.049,805.658 539.608,770.139 540.168,764.332 540.727,747.014 541.286,758.472 541.845,756.41 542.405,772.361 542.964,755.182 543.523,736.166 544.082,704.638 544.642,675.9 545.201,663.685 545.76,666.385 546.319,654.859 546.879,677.724 547.438,662.393 547.997,665.813 548.556,686.642 549.116,722.052 549.675,737.694 550.234,753.445 550.793,751.726 551.353,731.769 551.912,746.418 552.471,727.634 553.031,710.996 553.59,714.118 554.149,711.248 554.708,712.129 555.268,724.743 555.827,724.367 556.386,706.114 556.945,718.176 557.505,699.822 558.064,668.914 558.623,669.924 559.182,673.794 559.742,744.396 560.301,760.699 560.86,758.543 561.419,752.809 561.979,797.095 562.538,775.739 563.097,806.987 563.656,787.988 564.216,783.002 564.775,728.943 565.334,711.115 565.893,732.97 566.453,699.407 567.012,716.706 567.571,702.17 568.13,700.871 568.69,717.956 569.249,718.997 569.808,736.288 570.367,718.66 570.927,733.728 571.486,734.3 572.045,767.957 572.604,763.847 573.164,730.006 573.723,728.115 574.282,740.227 574.841,753.35 575.401,735.273 575.96,735.734 576.519,732.692 577.078,732.465 577.638,731.118 578.197,711.802 578.756,662.053 579.315,649.327 579.875,636.029 580.434,660.707 580.993,680.206 581.552,682.564 582.112,735.998 582.671,753.4 583.23,766.852 583.789,733.614 584.349,702.41 584.908,702.079 585.467,660.036 586.026,665.319 586.586,668.015 587.145,668.465 587.704,673.064 588.263,672.741 588.823,677.595 589.382,650.311 589.941,655.269 590.5,708.391 591.06,709.133 591.619,693.006 592.178,711.788 592.737,681.292 593.297,682.434 593.856,683.998 594.415,666.898 594.974,732.043 595.534,745.974 596.093,759.953 596.652,775.359 597.211,737.802 597.771,753.274 598.33,768.625 598.889,765.463 599.448,761.515 600.008,774.323 600.567,724.68 601.126,722.619 601.685,767.671 602.245,778.85 602.804,757.451 603.363,753.638 603.922,717.826 604.482,728.442 605.041,744.366 605.6,758.366 606.159,773.832 606.719,723.339 607.278,722.56 607.837,722.596 608.396,723.421 608.956,737.66 609.515,735.805 610.074,750.104 610.633,748.724 611.193,749.829 611.752,717.274 612.311,668.157 612.87,654.727 613.43,655.915 613.989,658.542 614.548,674.897 615.107,676.716 615.667,698.14 616.226,698.918 616.785,713.704 617.344,715.987 617.904,729.193 618.463,727.824 619.022,726.79 619.581,708.543 620.141,723.846 620.7,719.294 621.259,702.079 621.818,716.27 622.378,696.407 622.937,710.557 623.496,708.61 624.055,724.28 624.615,756.308 625.174,753.406 625.733,798.859 626.292,778.699 626.852,771.378 627.411,769.309 627.97,767.122 628.529,762.639 629.089,777.796 629.648,804.607 630.207,817.056 630.766,795.46 631.326,773.69 631.885,785.491 632.444,801.2 633.003,777.966 633.563,740.816 634.122,720.687 634.681,722.112 635.24,720.046 635.8,718.655 636.359,702.184 636.918,716.858 637.477,716.996 638.037,745.518 638.596,742.192 639.155,720.482 639.714,720.77 640.274,750.464 640.833,743.509 641.392,725.464 641.951,708.794 642.511,727.578 643.07,728.09 643.629,759.846 644.188,755.629 644.748,734.512 645.307,716.952 645.866,730.352 646.425,695.753 646.985,660.614 647.544,660.132 648.103,661.015 648.662,725.217 649.222,724.699 649.781,723.519 650.34,708.105 650.899,672.048 651.459,706.128 652.018,724.826 652.577,742.705 653.136,743.091 653.696,706.288 654.255,738.347 654.814,720.125 655.373,734.479 655.933,763.761 656.492,762.064 657.051,759.904 657.61,741.483 658.17,720.633 658.729,751.25 659.288,766.505 659.847,764.288 660.407,777.601 660.966,756.32 661.525,756.916 662.084,673.757 662.644,662.982 663.203,647.197 663.762,648.656 664.321,666.638 664.881,667.761 665.44,652.295 665.999,654.126 666.558,670.465 667.118,704.019 667.677,702.273 668.236,714.985 668.795,699.493 669.355,683.305 669.914,682.486 670.473,685.703 671.032,704.537 671.592,686.391 672.151,669.975 672.71,687.587 673.269,689.685 673.829,640.855 674.388,645.832 674.947,647.183 675.506,630.455 676.066,650.732 676.625,637.541 677.184,658.509 677.743,675.342 678.303,673.235 678.862,672.368 679.421,674.267 679.981,659.468 680.54,663.704 681.099,698.429 681.658,669.609 682.218,658.941 682.777,681.442 683.336,699.858 683.895,715.426 684.455,697.177 685.014,698.53 685.573,712.475 686.132,727.841 686.692,807.11 687.251,789.208 687.81,733.342 688.369,732.705 688.929,735.118 689.488,730.986 690.047,728.124 690.606,693.914 691.166,695.022 691.725,708.735 692.284,692.74 692.843,709.466 693.403,694.844 693.962,696.329 694.521,663.954 695.08,697.023 695.64,710.305 696.199,726.346 696.758,707.6 697.317,691.539 697.877,754.46 698.436,748.587 698.995,759.557 699.554,709.788 700.114,692.824 700.673,690.83 701.232,640.234 701.791,657.722 702.351,626.98 702.91,648.428 703.469,681.25 704.028,702.571 704.588,701.164 705.147,699.038 705.706,717.746 706.265,698.939 706.825,698.788 707.384,683.436 707.943,701.686 708.502,730.723 709.062,714.138 709.621,727.042 710.18,724.684 710.739,707.753 711.299,689.417 711.858,705.167 712.417,724.053 712.976,717.855 713.536,713.061 714.095,761.231 714.654,723.925 715.213,724.537 715.773,722.749 716.332,706.064 716.891,720.8 717.45,701.375 718.01,689.19 718.569,672.535 719.128,659.232 719.687,678.428 720.247,692.589 720.806,643.651 721.365,629.482 721.924,663.159 722.484,712.79 723.043,727.531 723.602,725.187 724.161,708.221 724.721,724.959 725.28,724.405 725.839,739.462 726.398,738.127 726.958,780.841 727.517,758.987 728.076,754.15 728.635,750.468 729.195,764.168 729.754,738.199 730.313,734.972 730.872,749.167 731.432,729.889 731.991,725.311 732.55,708.272 733.109,723.27 733.669,704.398 734.228,718.673 734.787,701.687 735.346,685.552 735.906,686.352 736.465,668.52 737.024,657.391 737.583,661.073 738.143,676.402 738.702,681.18 739.261,712.712 739.82,722.232 740.38,782.622 740.939,761.641 741.498,739.984 742.057,722.538 742.617,720.604 743.176,701.072 743.735,719.993 744.294,701.721 744.854,686.651 745.413,668.342 745.972,688.135 746.531,704.17 747.091,656.93 747.65,693.13 748.209,692.474 748.768,693.994 749.328,705.743 749.887,686.881 750.446,685.427 751.005,699.843 751.565,733.376 752.124,732.745 752.683,700.219 753.242,717.38 753.802,718.136 754.361,717.634 754.92,735.51 755.479,700.452 756.039,684.551 756.598,699.505 757.157,696.256 757.716,676.848 758.276,665.166 758.835,681.715 759.394,714.63 759.953,711.681 760.513,710.222 761.072,709.661 761.631,693.848 762.19,690.05 762.75,703.057 763.309,698.971 763.868,700.468 764.427,666.832 764.987,685.165 765.546,688.009 766.105,653.833 766.664,655.327 767.224,641.73 767.783,662.779 768.342,682.394 768.901,661.191 769.461,646.7 770.02,630.593 770.579,648.722 771.138,635.516 771.698,569.251 772.257,578.313 772.816,602.348 773.375,625.246 773.935,613.51 774.494,618.305 775.053,606.007 775.612,611.886 776.172,631.921 776.731,639.018 777.29,643.542 777.849,646.55 778.409,666.041 778.968,666.661 779.527,684.524 780.086,684.205 780.646,717.287 781.205,698.492 781.764,669.362 782.323,654.663 782.883,643.232 783.442,613.21 784.001,617.395 784.56,606.359 785.12,646.178 785.679,632.591 786.238,648.804 786.797,650.25 787.357,656.006 787.916,658.885 788.475,627.443 789.034,663.492 789.594,666.805 790.153,667.794 790.712,685.406 791.271,670.369 791.831,671.207 792.39,690.991 792.949,691.716 793.508,674.615 794.068,662.271 794.627,681.146 795.186,684.688 795.745,669.935 796.305,638.691 796.864,654.706 797.423,654.676 797.982,669.435 798.542,701.493 799.101,701.708 799.66,704.169 800.219,701.044 800.779,701.38 801.338,702.053 801.897,687.15 802.456,656.42 803.016,645.984 803.575,650.214 804.134,655.439 804.693,642.439 805.253,691.921 805.812,675.311 806.371,661.408 806.931,662.827 807.49,679.951 808.049,697.371 808.608,712.373 809.168,712.353 809.727,714 810.286,713.436 810.845,693.008 811.405,677.369 811.964,679.604 812.523,712.714 813.082,695.097 813.642,696.15 814.201,679.165 814.76,664.411 815.319,670.366 815.879,687.132 816.438,722.726 816.997,721.511 817.556,684.118 818.116,668.404 818.675,665.163 819.234,667.25 819.793,652.427 820.353,672.299 820.912,640.479 821.471,624.66 822.03,644.123 822.59,661.14 823.149,661.349 823.708,679.929 824.267,666.539 824.827,700.241 825.386,750.493 825.945,779.931 826.504,792.116 827.064,768.756 827.623,746.162 828.182,740.305 828.741,738.796 829.301,685.106 829.86,682.759 830.419,684.095 830.978,682.703 831.538,698.038 832.097,715.807 832.656,698.417 833.215,732.153 833.775,685.566 834.334,686.94 834.893,687.88 835.452,703.553 836.012,673.551 836.571,658.464 837.13,674.568 837.689,671.611 838.249,688.508 838.808,686.366 839.367,667.802 839.926,655.222 840.486,689.24 841.045,686.233 841.604,687.053 842.163,720.068 842.723,736.826 843.282,735.315 843.841,793.303 844.4,786.697 844.96,782.448 845.519,776.96 846.078,834.621 846.637,795.145 847.197,769.868 847.756,702.102 848.315,703.645 848.874,686.879 849.434,671.272 849.993,680.264 850.552,662.321 851.111,662.063 851.671,677.216 852.23,697.962 852.789,680.701 853.348,682.161 853.908,664.558 854.467,663.226 855.026,630.492 855.585,651.336 856.145,669.62 856.704,701.094 857.263,715.848 857.822,730.374 858.382,714.19 858.941,696.662 859.5,713.438 860.059,689.624 860.619,670.931 861.178,704.015 861.737,719.107 862.296,716.232 862.856,683.081 863.415,699.08 863.974,666.013 864.533,697.18 865.093,699.268 865.652,714.051 866.211,714.205 866.77,666.331 867.33,667.931 867.889,617.885 868.448,604.124 869.007,625.814 869.567,628.131 870.126,615.323 870.685,602.324 871.244,592.15 871.804,585.081 872.363,591.676 872.922,609.755 873.481,633.8 874.041,657.447 874.6,660.258 875.159,660.732 875.718,697.092 876.278,694.727 876.837,681.43 877.396,713.966 877.955,731.41 878.515,744.459 879.074,722.77 879.633,688.878 880.192,653.697 880.752,657.136 881.311,672.642 881.87,690.726 882.429,703.214 882.989,702.671 883.548,717.77 884.107,730.887 884.666,713.893 885.226,691.605 885.785,658.552 886.344,693.519 886.903,705.811 887.463,684.634 888.022,718.569 888.581,732.203 889.14,746.755 889.7,743.814 890.259,760.312 890.818,756.912 891.377,772.111 891.937,752.021 892.496,751.453 893.055,761.667 893.614,726.296 894.174,723.083 894.733,753.461 895.292,733.69 895.851,781.434 896.411,775.602 896.97,821.23 897.529,832.197 898.088,812.161 898.648,791.663 899.207,766.349 899.766,743.666 900.325,790.088 900.885,828.647 901.444,807.493 902.003,801.129 902.562,776.635 903.122,789.772 903.681,766.151 904.24,727.87 904.799,756.709 905.359,771.14 905.918,752.962 906.477,732.072 907.036,694.466 907.596,726.58 908.155,724.202 908.714,738.428 909.273,701.58 909.833,735.753 910.392,715.543 910.951,696.822 911.51,731.806 912.07,697.595 912.629,711.048 913.188,691.992 913.747,675.519 914.307,645.245 914.866,644.839 915.425,631.143 915.984,637.9 916.544,625.06 917.103,626.512 917.662,615.8 918.221,636 918.781,605.651 919.34,612.02 919.899,629.117 920.458,632.942 921.018,605.259 921.577,613.748 922.136,617.012 922.695,586.214 923.255,575.85 923.814,595.439 924.373,632.979 924.932,636.269 925.492,636.279 926.051,623.001 926.61,624.618 927.169,629.612 927.729,632.327 928.288,652.049 928.847,669.674 929.406,669.509 929.966,638.818 930.525,657.652 931.084,646.561 931.644,651.095 932.203,634.063 932.762,667.988 933.321,651.407 933.881,621.438 934.44,623.381 934.999,661.793 935.558,664.617 936.118,664.719 936.677,632.462 937.236,615.282 937.795,603.773 938.355,638.505 938.914,672.834 939.473,673.648 940.032,641.083 940.592,649.073 941.151,632.525 941.71,599.981 942.269,604.493 942.829,591.479 943.388,627.728 943.947,626.308 944.506,627.464 945.066,626.139 945.625,628.485 946.184,662.018 946.743,584.076 947.303,589.054 947.862,627.034 948.421,647.493 948.98,650.314 949.54,633.398 950.099,589.54 950.658,612.615 951.217,599.565 951.777,607.251 952.336,608.508 952.895,646.622 953.454,632.436 954.014,618.035 954.573,636.076 955.132,626.192 955.691,649.723 956.251,652.038 956.81,673.28 957.369,676.147 957.928,675.296 958.488,690.443 959.047,691.172 959.606,692.792 960.165,674.941 960.725,674.978 961.284,646.294 961.843,646.041 962.402,660.601 962.962,659.761 963.521,680.943 964.08,682.905 964.639,686.792 965.199,687.918 965.758,705.454 966.317,736.564 966.876,733.206 967.436,776.284 967.995,771.268 968.554,749.829 969.113,763.266 969.673,728.222 970.232,708.262 970.791,690.348 971.35,706.331 971.91,703.967 972.469,702.809 973.028,705.364 973.587,717.117 974.147,714.398 974.706,709.032 975.265,742.433 975.824,737.713 976.384,764.825 976.943,758.427 977.502,722.792 978.061,699.562 978.621,697.971 979.18,666.019 979.739,651.925 980.298,638.37 980.858,658.869 981.417,691.394 981.976,692.84 982.535,690.118 983.095,672.19 983.654,687.026 984.213,674.175 984.772,704.686 985.332,720.432 985.891,752.369 986.45,749.721 987.009,766.8 987.569,714.166 988.128,710.055 988.687,704.536 989.246,671.44 989.806,703.936 990.365,700.703 990.924,683.193 991.483,670.762 992.043,638.956 992.602,656.708 993.161,626.704 993.72,648.866 994.28,648.435 994.839,715.167 995.398,713.781 995.957,713.964 996.517,712.193 997.076,708.381 997.635,677.383 998.194,679.134 998.754,664.349 999.313,664.325 999.872,682.984 1000.43,713.876 1000.99,714.732 1001.55,731.165 1002.11,726.91 1002.67,709.599 1003.23,675.946 1003.79,672.414 1004.35,702.051 1004.91,667.121 1005.46,683.201 1006.02,665.022 1006.58,682.095 1007.14,669.592 1007.7,673.057 1008.26,640.183 1008.82,623.215 1009.38,621.99 1009.94,609.025 1010.5,595.698 1011.06,604.305 1011.62,528.751 1012.18,538.307 1012.73,546.126 1013.29,586.009 1013.85,628.401 1014.41,647.575 1014.97,618.75 1015.53,607.343 1016.09,628.108 1016.65,615.16 1017.21,670.51 1017.77,686.144 1018.33,672.011 1018.89,687.087 1019.45,687.136 1020.01,719.119 1020.56,737.776 1021.12,734.743 1021.68,749.506 1022.24,780.138 1022.8,792.062 1023.36,789.053 1023.92,734.612 1024.48,713.01 1025.04,716.049 1025.6,714.981 1026.16,715.702 1026.72,716.864 1027.28,747.042 1027.83,726.819 1028.39,744.939 1028.95,743.597 1029.51,759.516 1030.07,752.979 1030.63,751.833 1031.19,714.928 1031.75,713.896 1032.31,710.274 1032.87,692.405 1033.43,756.516 1033.99,749.601 1034.55,725.876 1035.1,710.311 1035.66,708.176 1036.22,708.166 1036.78,725.931 1037.34,707.633 1037.9,707.008 1038.46,675.788 1039.02,661.955 1039.58,662.985 1040.14,683.906 1040.7,651.47 1041.26,655.183 1041.82,640.069 1042.38,645.637 1042.93,647.694 1043.49,618.644 1044.05,626.631 1044.61,612.536 1045.17,630.541 1045.73,634.75 1046.29,638.003 1046.85,653.742 1047.41,655.72 1047.97,640.961 1048.53,657.232 1049.09,658.01 1049.65,675.305 1050.2,674.26 1050.76,692.077 1051.32,676.743 1051.88,663.288 1052.44,664.519 1053,716.686 1053.56,714.341 1054.12,729.48 1054.68,758.635 1055.24,741.11 1055.8,741.02 1056.36,733.928 1056.92,729.693 1057.48,697.872 1058.03,715.697 1058.59,712.923 1059.15,743.549 1059.71,707.381 1060.27,689.119 1060.83,691.518 1061.39,658.492 1061.95,641.489 1062.51,661.665 1063.07,679.319 1063.63,629.257 1064.19,647.813 1064.75,685.943 1065.3,685.649 1065.86,686.881 1066.42,668.192 1066.98,683.972 1067.54,731.408 1068.1,728.047 1068.66,743.042 1069.22,771.823 1069.78,785.941 1070.34,796.226 1070.9,822.133 1071.46,814.496 1072.02,806.407 1072.57,718.095 1073.13,702.179 1073.69,684.051 1074.25,683.459 1074.81,701.255 1075.37,665.323 1075.93,635.071 1076.49,658.424 1077.05,672.895 1077.61,605.773 1078.17,593.363 1078.73,599.128 1079.29,607.009 1079.85,610.866 1080.4,628.953 1080.96,665.189 1081.52,712.26 1082.08,727.556 1082.64,693.994 1083.2,672.985 1083.76,689.758 1084.32,689.416 1084.88,703.703 1085.44,700.229 1086,714.654 1086.56,697.266 1087.12,666.567 1087.67,667.386 1088.23,682.024 1088.79,681.417 1089.35,699.555 1089.91,665.67 1090.47,662.208 1091.03,663.682 1091.59,665.437 1092.15,685.525 1092.71,687.106 1093.27,669.913 1093.83,656.026 1094.39,653.411 1094.94,654.494 1095.5,624.785 1096.06,674.884 1096.62,695.047 1097.18,709.158 1097.74,706.777 1098.3,736.705 1098.86,733.09 1099.42,701.869 1099.98,746.288 1100.54,725.898 1101.1,720.234 1101.66,745.312 1102.22,757.322 1102.77,720.68 1103.33,686.035 1103.89,684.204 1104.45,699.014 1105.01,681.882 1105.57,695.3 1106.13,724.14 1106.69,739.493 1107.25,754.405 1107.81,778.141 1108.37,769.812 1108.93,782.421 1109.49,780.212 1110.04,807.175 1110.6,802.722 1111.16,812.261 1111.72,805.783 1112.28,799.674 1112.84,790.681 1113.4,752.472 1113.96,748.302 1114.52,760.476 1115.08,722.893 1115.64,737.394 1116.2,732.792 1116.76,712.089 1117.31,708.334 1117.87,642.568 1118.43,660.44 1118.99,660.981 1119.55,660.899 1120.11,658.712 1120.67,661.782 1121.23,708.52 1121.79,676.348 1122.35,675.842 1122.91,658.096 1123.47,655.578 1124.03,654.969 1124.59,671.299 1125.14,655.194 1125.7,657.842 1126.26,642.595 1126.82,625.942 1127.38,645.528 1127.94,628.551 1128.5,630.294 1129.06,636.733 1129.62,676.42 1130.18,642.85 1130.74,629.029 1131.3,629.446 1131.86,617.4 1132.41,604.896 1132.97,593.236 1133.53,616.609 1134.09,606.123 1134.65,610.577 1135.21,615.608 1135.77,616.542 1136.33,638.439 1136.89,624.809 1137.45,626.471 1138.01,631.492 1138.57,668.344 1139.13,657.128 1139.68,643.458 1140.24,627.621 1140.8,610.881 1141.36,648.168 1141.92,649.244 1142.48,667.681 1143.04,652.114 1143.6,650.55 1144.16,634.575 1144.72,636.434 1145.28,626.97 1145.84,663.606 1146.4,668.048 1146.96,687.513 1147.51,720.01 1148.07,703.199 1148.63,718.742 1149.19,697.12 1149.75,679.73 1150.31,694.206 1150.87,693.85 1151.43,728.359 1151.99,725.828 1152.55,725.897 1153.11,736.748 1153.67,762.808 1154.23,773.967 1154.78,767.636 1155.34,745.531 1155.9,775.736 1156.46,758.806 1157.02,770.24 1157.58,763.902 1158.14,744.386 1158.7,789.425 1159.26,769.848 1159.82,730.206 1160.38,740.833 1160.94,739.255 1161.5,719.772 1162.05,699.906 1162.61,668.708 1163.17,670.531 1163.73,689.616 1164.29,677.432 1164.85,697.073 1165.41,730.078 1165.97,724.109 1166.53,753.659 1167.09,732.49 1167.65,731.375 1168.21,728.77 1168.77,677.911 1169.33,675.111 1169.88,659.679 1170.44,659.291 1171,660.132 1171.56,677.301 1172.12,675.717 1172.68,673.191 1173.24,654.781 1173.8,639.817 1174.36,641.609 1174.92,645.438 1175.48,630.593 1176.04,630.994 1176.6,619.125 1177.15,620.749 1177.71,627.754 1178.27,631.348 1178.83,614.263 1179.39,639.11 1179.95,656.673 1180.51,642.855 1181.07,659.061 1181.63,644.099 1182.19,647.462 1182.75,652.2 1183.31,673.122 1183.87,674.891 1184.43,653.635 1184.98,619.963 1185.54,624.575 1186.1,595.623 1186.66,618.699 1187.22,624.182 1187.78,614.703 1188.34,633.494 1188.9,635.888 1189.46,639.981 1190.02,642.801 1190.58,647.422 1191.14,634.644 1191.7,668.459 1192.25,668.095 1192.81,700.761 1193.37,717.59 1193.93,700.429 1194.49,700.256 1195.05,721.24 1195.61,718.728 1196.17,710.189 1196.73,710.397 1197.29,715.122 1197.85,697.649 1198.41,713.565 1198.97,714.085 1199.52,696.765 1200.08,698.268 1200.64,680.892 1201.2,662.92 1201.76,678.739 1202.32,679.373 1202.88,696.336 1203.44,697.222 1204,696.209 1204.56,694.751 1205.12,728.035 1205.68,706.083 1206.24,669.897 1206.8,704.699 1207.35,700.511 1207.91,698.219 1208.47,732.326 1209.03,696.12 1209.59,691.919 1210.15,707.342 1210.71,705.59 1211.27,754.659 1211.83,733.121 1212.39,763.63 1212.95,745.038 1213.51,708.805 1214.07,741.935 1214.62,754.803 1215.18,799.23 1215.74,840.259 1216.3,798.559 1216.86,757.604 1217.42,751.163 1217.98,746.042 1218.54,708.459 1219.1,741.723 1219.66,706.912 1220.22,689.581 1220.78,688.337 1221.34,672.916 1221.89,707.009 1222.45,722.14 1223.01,735.127 1223.57,748.199 1224.13,746.334 1224.69,744.508 1225.25,772.118 1225.81,751.499 1226.37,747.015 1226.93,749.385 1227.49,808.866 1228.05,789.593 1228.61,720.71 1229.17,699.893 1229.72,700.929 1230.28,682.912 1230.84,699.47 1231.4,709.883 1231.96,705.587 1232.52,702.954 1233.08,668.967 1233.64,671.103 1234.2,607.996 1234.76,612.967 1235.32,598.331 1235.88,619.208 1236.44,605.948 1236.99,674.133 1237.55,690.22 1238.11,689.14 1238.67,660.704 1239.23,664.509 1239.79,664.849 1240.35,648.876 1240.91,621.649 1241.47,642.529 1242.03,628.744 1242.59,651.633 1243.15,653.976 1243.71,638.511 1244.26,625.234 1244.82,646.909 1245.38,630.61 1245.94,617.396 1246.5,636.953 1247.06,637.277 1247.62,642.649 1248.18,613.992 1248.74,615.462 1249.3,621.872 1249.86,630.616 1250.42,651.219 1250.98,653.151 1251.54,655.76 1252.09,644.136 1252.65,662.082 1253.21,662.447 1253.77,666.126 1254.33,666.412 1254.89,668.274 1255.45,689.547 1256.01,673.937 1256.57,691.644 1257.13,658.351 1257.69,661.202 1258.25,664.524 1258.81,666.554 1259.36,651.714 1259.92,608.059 1260.48,613.541 1261.04,649.264 1261.6,668.365 1262.16,684.13 1262.72,699.28 1263.28,680.999 1263.84,666.426 1264.4,665.462 1264.96,650.858 1265.52,667.34 1266.08,684.253 1266.63,685.025 1267.19,697.776 1267.75,696.52 1268.31,681.304 1268.87,665.274 1269.43,712.11 1269.99,726.824 1270.55,738.714 1271.11,739.042 1271.67,720.712 1272.23,673.518 1272.79,642.832 1273.35,596.5 1273.91,580.968 1274.46,603.147 1275.02,590.51 1275.58,576.418 1276.14,568.117 1276.7,591.152 1277.26,616.128 1277.82,638.55 1278.38,641.737 1278.94,627.881 1279.5,644.635 1280.06,629.752 1280.62,635.705 1281.18,641.499 1281.73,662.013 1282.29,664.346 1282.85,665.502 1283.41,634.837 1283.97,653.653 1284.53,637.034 1285.09,625.918 1285.65,611.641 1286.21,614.533 1286.77,616.598 1287.33,670.347 1287.89,702.299 1288.45,704.782 1289,703.962 1289.56,704.301 1290.12,700.739 1290.68,687.655 1291.24,704.665 1291.8,698.973 1292.36,683.195 1292.92,683.085 1293.48,700.593 1294.04,716.12 1294.6,715.029 1295.16,761.834 1295.72,777.445 1296.28,823.664 1296.83,813.52 1297.39,805.253 1297.95,799.042 1298.51,826.041 1299.07,850.847 1299.63,841.176 1300.19,847.455 1300.75,838.822 1301.31,814.514 1301.87,760.784 1302.43,809.033 1302.99,787.775 1303.55,796.455 1304.1,771.918 1304.66,733.642 1305.22,716.371 1305.78,700.102 1306.34,669.106 1306.9,672.1 1307.46,659.929 1308.02,642.575 1308.58,712.045 1309.14,707.714 1309.7,688.916 1310.26,708.254 1310.82,720.277 1311.38,719.107 1311.93,733.155 1312.49,761.886 1313.05,744.007 1313.61,724.89 1314.17,724.946 1314.73,702.4 1315.29,699.263 1315.85,715.251 1316.41,710.464 1316.97,708.371 1317.53,770.555 1318.09,746.814 1318.65,694.192 1319.2,710.179 1319.76,708.831 1320.32,690.435 1320.88,688.732 1321.44,667.821 1322,650.632 1322.56,652.952 1323.12,625.55 1323.68,598.668 1324.24,635.454 1324.8,632.503 1325.36,666.086 1325.92,679.109 1326.47,695.113 1327.03,709.874 1327.59,708.06 1328.15,709.669 1328.71,673.111 1329.27,676.095 1329.83,677.38 1330.39,664.009 1330.95,663.836 1331.51,631.742 1332.07,616.74 1332.63,617.779 1333.19,618.104 1333.75,636.841 1334.3,636.866 1334.86,641.972 1335.42,675.939 1335.98,692.441 1336.54,692.183 1337.1,660.975 1337.66,629.832 1338.22,601.642 1338.78,588.101 1339.34,610.117 1339.9,629.108 1340.46,632.843 1341.02,638.446 1341.57,639.587 1342.13,659.599 1342.69,630.881 1343.25,636.725 1343.81,658.829 1344.37,657.897 1344.93,642.87 1345.49,644.702 1346.05,683.04 1346.61,665.813 1347.17,683.666 1347.73,648.075 1348.29,652.079 1348.84,671.379 1349.4,640.796 1349.96,629.973 1350.52,650.815 1351.08,670.386 1351.64,686.034 1352.2,655.188 1352.76,660.145 1353.32,645.185 1353.88,645.425 1354.44,631.162 1355,614.06 1355.56,654.003 1356.12,639.148 1356.67,658.815 1357.23,706.032 1357.79,654.107 1358.35,656.618 1358.91,675.753 1359.47,662.943 1360.03,664.078 1360.59,667.578 1361.15,667.752 1361.71,670.589 1362.27,638.13 1362.83,656.198 1363.39,678.762 1363.94,690.574 1364.5,706.554 1365.06,702.636 1365.62,684.261 1366.18,686.537 1366.74,666.983 1367.3,668.769 1367.86,653.67 1368.42,655.935 1368.98,638.448 1369.54,623.671 1370.1,642.951 1370.66,661.467 1371.21,679.439 1371.77,649.761 1372.33,670.068 1372.89,685.053 1373.45,666.812 1374.01,667.644 1374.57,672.02 1375.13,655.579 1375.69,658.408 1376.25,646.248 1376.81,683.836 1377.37,731.747 1377.93,730.251 1378.49,741.984 1379.04,738.74 1379.6,721.61 1380.16,704.572 1380.72,720.781 1381.28,716.926 1381.84,702.13 1382.4,669.876 1382.96,669.459 1383.52,667.539 1384.08,681.792 1384.64,729.843 1385.2,744.799 1385.76,769.345 1386.31,766.913 1386.87,761.956 1387.43,740.999 1387.99,736.755 1388.55,749.235 1389.11,734.027 1389.67,713.642 1390.23,726.936 1390.79,737.972 1391.35,739.842 1391.91,725.651 1392.47,728.169 1393.03,777.498 1393.58,774.061 1394.14,788.363 1394.7,767.574 1395.26,716.823 1395.82,720.455 1396.38,680.554 1396.94,746.097 1397.5,779.118 1398.06,806.257 1398.62,800.154 1399.18,794.476 1399.74,807.191 1400.3,798.155 1400.86,791.211 1401.41,751.232 1401.97,769.238 1402.53,778.348 1403.09,758.909 1403.65,753.048 1404.21,730.452 1404.77,679.896 1405.33,680.286 1405.89,663.253 1406.45,677.703 1407.01,659.393 1407.57,646.385 1408.13,648.906 1408.68,621.196 1409.24,623.115 1409.8,627.272 1410.36,612.107 1410.92,632.418 1411.48,636.461 1412.04,687.245 1412.6,689.847 1413.16,692.001 1413.72,695.641 1414.28,696.681 1414.84,698.607 1415.4,666.392 1415.95,653.316 1416.51,652.358 1417.07,640.644 1417.63,643.159 1418.19,651.197 1418.75,668.924 1419.31,671.663 1419.87,691.565 1420.43,708.506 1420.99,709.57 1421.55,723.396 1422.11,702.511 1422.67,732.219 1423.23,745.937 1423.78,773.238 1424.34,750.466 1424.9,731.023 1425.46,680.854 1426.02,679.449 1426.58,647.194 1427.14,681.218 1427.7,669.704 1428.26,686.241 1428.82,655.193 1429.38,655.774 1429.94,656.17 1430.5,661.622 1431.05,647.988 1431.61,667.325 1432.17,671.063 1432.73,689.138 1433.29,689.658 1433.85,689.935 1434.41,707.079 1434.97,693 1435.53,708.463 1436.09,740.245 1436.65,722.684 1437.21,757.828 1437.77,786.13 1438.33,797.832 1438.88,840.389 1439.44,847.898 1440,806.958 1440.56,799.666 1441.12,763.497 1441.68,739.926 1442.24,750.312 1442.8,713.926 1443.36,682.189 1443.92,711.709 1444.48,725.175 1445.04,709.167 1445.6,693.594 1446.15,659.066 1446.71,656.53 1447.27,658.9 1447.83,679.077 1448.39,696.046 1448.95,679.802 1449.51,680.517 1450.07,696.485 1450.63,660.44 1451.19,582.378 1451.75,602.965 1452.31,607.564 1452.87,615.303 1453.42,618.327 1453.98,638.135 1454.54,643.548 1455.1,645.706 1455.66,646.226 1456.22,631.253 1456.78,648.41 1457.34,666.752 1457.9,716.209 1458.46,730.512 1459.02,727.479 1459.58,692.864 1460.14,663.277 1460.7,664.248 1461.25,629.636 1461.81,616.724 1462.37,619.666 1462.93,623.685 1463.49,643.754 1464.05,679.35 1464.61,695.664 1465.17,705.243 1465.73,707.009 1466.29,672.494 1466.85,732.971 1467.41,693.957 1467.97,679.421 1468.52,644.342 1469.08,595.749 1469.64,596.332 1470.2,602.611 1470.76,591.639 1471.32,610.055 1471.88,613.889 1472.44,619.877 1473,636.754 1473.56,638.277 1474.12,657.565 1474.68,673.784 1475.24,690.836 1475.79,708.354 1476.35,723.438 1476.91,752.831 1477.47,716.998 1478.03,700.984 1478.59,682.287 1479.15,666.548 1479.71,666.648 1480.27,667.354 1480.83,635.928 1481.39,604.812 1481.95,610.125 1482.51,598.943 1483.07,621.358 1483.62,628.315 1484.18,598.226 1484.74,616.068 1485.3,615.574 1485.86,632.386 1486.42,665.139 1486.98,666.286 1487.54,653.422 1488.1,689.99 1488.66,707.052 1489.22,705.2 1489.78,700.8 1490.34,716.182 1490.89,731.346 1491.45,714.124 1492.01,694.493 1492.57,710.248 1493.13,678.798 1493.69,649.722 1494.25,654.646 1494.81,690.78 1495.37,702.911 1495.93,684.746 1496.49,702.155 1497.05,730.863 1497.61,729.543 1498.16,744.888 1498.72,756.347 1499.28,782.783 1499.84,774.203 1500.4,770.779 1500.96,800.272 1501.52,782.047 1502.08,791.712 1502.64,802.609 1503.2,827.097 1503.76,852.059 1504.32,825.778 1504.88,788.824 1505.44,764.672 1505.99,761.616 1506.55,741.063 1507.11,718.392 1507.67,681.008 1508.23,679.585 1508.79,648.629 1509.35,651.022 1509.91,638.079 1510.47,643.456 1511.03,628.314 1511.59,627.258 1512.15,595.408 1512.71,564.682 1513.26,570.529 1513.82,592.54 1514.38,583.633 1514.94,603.341 1515.5,606.397 1516.06,641.459 1516.62,630.112 1517.18,649.893 1517.74,635.882 1518.3,608.623 1518.86,616.739 1519.42,638.29 1519.98,611.377 1520.53,617.023 1521.09,638.018 1521.65,625.357 1522.21,644.412 1522.77,661.687 1523.33,662.605 1523.89,647.524 1524.45,631.668 1525.01,633.088 1525.57,652.37 1526.13,641.475 1526.69,663.253 1527.25,712.59 1527.81,728.22 1528.36,740.894 1528.92,721.57 1529.48,736.62 1530.04,750.27 1530.6,730.57 1531.16,741.724 1531.72,688.81 1532.28,691.123 1532.84,690.745 1533.4,668.695 1533.96,682.224 1534.52,683.101 1535.08,713.331 1535.63,697.862 1536.19,683.712 1536.75,668.253 1537.31,633.882 1537.87,639.992 1538.43,643.444 1538.99,677.462 1539.55,679.961 1540.11,674.635 1540.67,641.396 1541.23,628.797 1541.79,632.617 1542.35,669.254 1542.9,672.789 1543.46,672.537 1544.02,671.548 1544.58,674.941 1545.14,675.321 1545.7,661.259 1546.26,665.184 1546.82,665.325 1547.38,679.282 1547.94,696.505 1548.5,698.338 1549.06,700.028 1549.62,731.558 1550.18,725.864 1550.73,694.99 1551.29,678.405 1551.85,676.799 1552.41,679.049 1552.97,727.299 1553.53,722.039 1554.09,688.846 1554.65,687.59 1555.21,703.148 1555.77,669.368 1556.33,668.703 1556.89,668.691 1557.45,687.56 1558,687.55 1558.56,671.244 1559.12,691.63 1559.68,704.296 1560.24,723.255 1560.8,753.034 1561.36,718.182 1561.92,716.017 1562.48,679.568 1563.04,677.327 1563.6,661.824 1564.16,680.572 1564.72,664.638 1565.28,679.739 1565.83,693.454 1566.39,690.878 1566.95,724.429 1567.51,723.293 1568.07,737.944 1568.63,734.454 1569.19,744.844 1569.75,759.99 1570.31,739.807 1570.87,732.859 1571.43,747.43 1571.99,725.912 1572.55,710.028 1573.1,675.255 1573.66,657.256 1574.22,674.599 1574.78,659.802 1575.34,660.366 1575.9,676.156 1576.46,658.224 1577.02,688.385 1577.58,684.995 1578.14,683.115 1578.7,679.577 1579.26,699.594 1579.82,712.378 1580.37,738.485 1580.93,721.476 1581.49,715.543 1582.05,713.827 1582.61,696.414 1583.17,662.462 1583.73,631.756 1584.29,618.226 1584.85,621.724 1585.41,628.541 1585.97,630.875 1586.53,632.816 1587.09,617.069 1587.65,621.733 1588.2,627.103 1588.76,644.262 1589.32,663.585 1589.88,676.874 1590.44,666.267 1591,682.171 1591.56,680.352 1592.12,646.861 1592.68,667.352 1593.24,700.37 1593.8,715.976 1594.36,746.872 1594.92,723.891 1595.47,693.949 1596.03,663.963 1596.59,664.972 1597.15,664.975 1597.71,668.305 1598.27,652.997 1598.83,670.199 1599.39,670.43 1599.95,670.767 1600.51,673.177 1601.07,658.723 1601.63,640.329 1602.19,654.142 1602.74,670.633 1603.3,669.322 1603.86,669.061 1604.42,668.791 1604.98,655.621 1605.54,657.019 1606.1,707.415 1606.66,723.92 1607.22,721.057 1607.78,731.632 1608.34,698.427 1608.9,666.248 1609.46,666.848 1610.02,650.757 1610.57,602.696 1611.13,603.267 1611.69,590.5 1612.25,629.888 1612.81,633.999 1613.37,636.027 1613.93,623.229 1614.49,642.554 1615.05,662.378 1615.61,629.996 1616.17,634.079 1616.73,641.226 1617.29,657.851 1617.84,690.963 1618.4,706.445 1618.96,721.562 1619.52,703.976 1620.08,719.201 1620.64,717.546 1621.2,748.353 1621.76,667.637 1622.32,620.819 1622.88,636.094 1623.44,640.111 1624,626.95 1624.56,610.401 1625.11,647.139 1625.67,678.774 1626.23,660.733 1626.79,679.235 1627.35,696.664 1627.91,727.968 1628.47,708.567 1629.03,676.69 1629.59,691.554 1630.15,704.832 1630.71,687.497 1631.27,735.191 1631.83,781.626 1632.39,777.553 1632.94,742.964 1633.5,689.877 1634.06,689.839 1634.62,656.827 1635.18,631.319 1635.74,665.204 1636.3,681.865 1636.86,667.504 1637.42,669.426 1637.98,655.089 1638.54,642.275 1639.1,663.657 1639.66,662.832 1640.21,662.444 1640.77,665.313 1641.33,606.309 1641.89,641.529 1642.45,710.988 1643.01,708.954 1643.57,711.539 1644.13,710.382 1644.69,709.214 1645.25,722.723 1645.81,686.775 1646.37,654.806 1646.93,673.168 1647.48,673.719 1648.04,687.546 1648.6,702.541 1649.16,734.437 1649.72,715.69 1650.28,710.448 1650.84,707.988 1651.4,721.974 1651.96,690.824 1652.52,674.615 1653.08,679.407 1653.64,648.43 1654.2,649.641 1654.76,652.3 1655.31,655.817 1655.87,660.514 1656.43,647.654 1656.99,696.408 1657.55,696.16 1658.11,680.136 1658.67,652.296 1659.23,652.638 1659.79,658.28 1660.35,674.699 1660.91,644.692 1661.47,647.111 1662.03,631.285 1662.58,635.372 1663.14,639.458 1663.7,639.7 1664.26,673.749 1664.82,692.043 1665.38,689.771 1665.94,689.284 1666.5,674.685 1667.06,675.322 1667.62,677.924 1668.18,643.249 1668.74,645.476 1669.3,632.045 1669.85,621.311 1670.41,657.735 1670.97,674.318 1671.53,675.582 1672.09,711.506 1672.65,743.935 1673.21,771.6 1673.77,763.358 1674.33,790.412 1674.89,784.645 1675.45,779.806 1676.01,807.388 1676.57,801.747 1677.13,795.821 1677.68,773.169 1678.24,768.723 1678.8,764.748 1679.36,697.272 1679.92,698.474 1680.48,696.767 1681.04,712.867 1681.6,710.73 1682.16,693.695 1682.72,679.705 1683.28,662.023 1683.84,645.425 1684.4,663.172 1684.95,646.503 1685.51,649.587 1686.07,632.565 1686.63,669.069 1687.19,689.673 1687.75,686.811 1688.31,700.624 1688.87,679.909 1689.43,728.631 1689.99,694.61 1690.55,708.71 1691.11,709.055 1691.67,706.389 1692.23,689.783 1692.78,672.719 1693.34,686.317 1693.9,684.135 1694.46,663.255 1695.02,647.793 1695.58,634.804 1696.14,672.922 1696.7,707.103 1697.26,673.875 1697.82,658.602 1698.38,659.935 1698.94,660.549 1699.5,692.668 1700.05,691.931 1700.61,693.885 1701.17,661.567 1701.73,697.407 1702.29,697.701 1702.85,667.139 1703.41,684.603 1703.97,684.138 1704.53,683.027 1705.09,698.366 1705.65,682.872 1706.21,684.497 1706.77,650.153 1707.32,671.668 1707.88,676.655 1708.44,677.97 1709,695.639 1709.56,676.231 1710.12,628.1 1710.68,612.157 1711.24,626.783 1711.8,608.88 1712.36,596.505 1712.92,614.948 1713.48,582.961 1714.04,589.16 1714.6,577.732 1715.15,613.93 1715.71,633.102 1716.27,653.325 1716.83,652.937 1717.39,668.521 1717.95,655.729 1718.51,674.742 1719.07,704.968 1719.63,699.412 1720.19,726.839 1720.75,723.237 1721.31,738.95 1721.87,738.21 1722.42,719.72 1722.98,702.89 1723.54,715.887 1724.1,713.077 1724.66,696.623 1725.22,698.211 1725.78,696.21 1726.34,711.247 1726.9,743.079 1727.46,739.524 1728.02,765.715 1728.58,807.273 1729.14,815.638 1729.69,808.998 1730.25,800.305 1730.81,811.115 1731.37,774.883 1731.93,801.657 1732.49,784.054 1733.05,780.679 1733.61,790.699 1734.17,768.368 1734.73,812.291 1735.29,807.07 1735.85,785.848 1736.41,797.12 1736.97,794.612 1737.52,788.845 1738.08,812.785 1738.64,787.31 1739.2,782.475 1739.76,760.518 1740.32,739.307 1740.88,685.564 1741.44,667.183 1742,682.932 1742.56,697.361 1743.12,661.169 1743.68,663.396 1744.24,643.7 1744.79,627.294 1745.35,631.82 1745.91,620.817 1746.47,621.803 1747.03,639.828 1747.59,657.117 1748.15,656.635 1748.71,637.39 1749.27,622.921 1749.83,621.176 1750.39,624.733 1750.95,610.495 1751.51,615.775 1752.06,604.619 1752.62,608.758 1753.18,597.956 1753.74,589.258 1754.3,575.772 1754.86,611.364 1755.42,647.825 1755.98,630.61 1756.54,650.642 1757.1,650.944 1757.66,667.228 1758.22,637.222 1758.78,642.05 1759.34,630.379 1759.89,650.003 1760.45,649.864 1761.01,635.495 1761.57,638.08 1762.13,673.248 1762.69,642.489 1763.25,628.148 1763.81,615.123 1764.37,603.625 1764.93,588.135 1765.49,610.195 1766.05,613.366 1766.61,616.693 1767.16,639.005 1767.72,610.1 1768.28,610.594 1768.84,630.224 1769.4,615.769 1769.96,602.097 1770.52,606.259 1771.08,629.563 1771.64,635.122 1772.2,651.888 1772.76,587.133 1773.32,656.737 1773.88,657.302 1774.43,659.46 1774.99,641.951 1775.55,661.093 1776.11,664.105 1776.67,648.896 1777.23,633.628 1777.79,649.659 1778.35,635.552 1778.91,638.685 1779.47,657.416 1780.03,638.994 1780.59,622.388 1781.15,629.155 1781.71,613.691 1782.26,622.174 1782.82,689.076 1783.38,671.26 1783.94,655.997 1784.5,657.405 1785.06,676.541 1785.62,645.247 1786.18,645.327 1786.74,695.055 1787.3,729.486 1787.86,722.04 1788.42,734.13 1788.98,749.308 1789.53,744.872 1790.09,722.57 1790.65,752.048 1791.21,748.487 1791.77,759.232 1792.33,741.64 1792.89,755.782 1793.45,754.517 1794.01,704.552 1794.57,671.728 1795.13,689.282 1795.69,674.763 1796.25,660.344 1796.8,660.984 1797.36,678.245 1797.92,676.746 1798.48,741.028 1799.04,735.382 1799.6,730.56 1800.16,727.693 1800.72,694.482 1801.28,678.582 1801.84,679.565 1802.4,681.552 1802.96,684.644 1803.52,698.008 1804.08,695.533 1804.63,697.144 1805.19,711.462 1805.75,709.719 1806.31,708.112 1806.87,723.135 1807.43,721.126 1807.99,720.008 1808.55,779.632 1809.11,755.398 1809.67,767.311 1810.23,777.043 1810.79,753.548 1811.35,765.696 1811.9,778.307 1812.46,744.857 1813.02,754.668 1813.58,784.561 1814.14,792.438 1814.7,787.495 1815.26,779.211 1815.82,775.548 1816.38,770.081 1816.94,813.217 1817.5,804.108 1818.06,780.339 1818.62,747.124 1819.18,742.951 1819.73,709.209 1820.29,723.627 1820.85,703.163 1821.41,735.594 1821.97,736.544 1822.53,784.163 1823.09,763.959 1823.65,739.022 1824.21,767.586 1824.77,777.932 1825.33,773.694 1825.89,768.992 1826.45,748.248 1827,732.596 1827.56,728.617 1828.12,742.979 1828.68,722.322 1829.24,705.874 1829.8,685.348 1830.36,653.114 1830.92,653.84 1831.48,672.603 1832.04,658.124 1832.6,676.366 1833.16,672.14 1833.72,623.551 1834.27,610.711 1834.83,598.642 1835.39,598.957 1835.95,617.385 1836.51,605.533 1837.07,606.435 1837.63,593.643 1838.19,548.544 \"/>\n<path clip-path=\"url(#clip363)\" d=\"M720.247 690.015 L720.806 690.015 L721.365 690.015 L721.924 690.015 L722.484 690.015 L723.043 690.015 L723.602 690.015 L724.161 690.015 L724.721 690.015 L725.28 690.015 L725.839 690.015 L726.398 690.015 L726.958 690.015 L727.517 690.015 L728.076 690.015 L728.635 690.015 L729.195 690.015 L729.754 690.015 L730.313 690.015 L730.872 690.015 L731.432 690.015 L731.991 690.015 L732.55 690.015 L733.109 690.015 L733.669 690.015 L734.228 690.015 L734.787 690.015 L735.346 690.015 L735.906 690.015 L736.465 690.015 L737.024 690.015 L737.583 690.015 L738.143 690.015 L738.702 690.015 L739.261 690.015 L739.82 690.015 L740.38 690.015 L740.939 690.015 L741.498 690.015 L742.057 690.015 L742.617 690.015 L743.176 690.015 L743.735 690.015 L744.294 690.015 L744.854 690.015 L745.413 690.015 L745.972 690.015 L746.531 690.015 L747.091 690.015 L747.65 690.015 L748.209 690.015 L748.768 690.015 L749.328 690.015 L749.887 690.015 L750.446 690.015 L751.005 690.015 L751.565 690.015 L752.124 690.015 L752.683 690.015 L753.242 690.015 L753.802 690.015 L754.361 690.015 L754.92 690.015 L755.479 690.015 L756.039 690.015 L756.598 690.015 L757.157 690.015 L757.716 690.015 L758.276 690.015 L758.835 690.015 L759.394 690.015 L759.953 690.015 L760.513 690.015 L761.072 690.015 L761.631 690.015 L762.19 690.015 L762.75 690.015 L763.309 690.015 L763.868 690.015 L764.427 690.015 L764.987 690.015 L765.546 690.015 L766.105 690.015 L766.664 690.015 L767.224 690.015 L767.783 690.015 L768.342 690.015 L768.901 690.015 L769.461 690.015 L770.02 690.015 L770.579 690.015 L771.138 690.015 L771.698 690.015 L772.257 690.015 L772.816 690.015 L773.375 690.015 L773.935 690.015 L774.494 690.015 L775.053 690.015 L775.612 690.015 L776.172 690.015 L776.731 690.015 L777.29 690.015 L777.849 690.015 L778.409 690.015 L778.968 690.015 L779.527 690.015 L780.086 690.015 L780.646 690.015 L781.205 690.015 L781.764 690.015 L782.323 690.015 L782.883 690.015 L783.442 690.015 L784.001 690.015 L784.56 690.015 L785.12 690.015 L785.679 690.015 L786.238 690.015 L786.797 690.015 L787.357 690.015 L787.916 690.015 L788.475 690.015 L789.034 690.015 L789.594 690.015 L790.153 690.015 L790.712 690.015 L791.271 690.015 L791.831 690.015 L792.39 690.015 L792.949 690.015 L793.508 690.015 L794.068 690.015 L794.627 690.015 L795.186 690.015 L795.745 690.015 L796.305 690.015 L796.864 690.015 L797.423 690.015 L797.982 690.015 L798.542 690.015 L799.101 690.015 L799.66 690.015 L800.219 690.015 L800.779 690.015 L801.338 690.015 L801.897 690.015 L802.456 690.015 L803.016 690.015 L803.575 690.015 L804.134 690.015 L804.693 690.015 L805.253 690.015 L805.812 690.015 L806.371 690.015 L806.931 690.015 L807.49 690.015 L808.049 690.015 L808.608 690.015 L809.168 690.015 L809.727 690.015 L810.286 690.015 L810.845 690.015 L811.405 690.015 L811.964 690.015 L812.523 690.015 L813.082 690.015 L813.642 690.015 L814.201 690.015 L814.76 690.015 L815.319 690.015 L815.879 690.015 L816.438 690.015 L816.997 690.015 L817.556 690.015 L818.116 690.015 L818.675 690.015 L819.234 690.015 L819.793 690.015 L820.353 690.015 L820.912 690.015 L821.471 690.015 L822.03 690.015 L822.59 690.015 L823.149 690.015 L823.708 690.015 L824.267 690.015 L824.827 690.015 L825.386 690.015 L825.945 690.015 L826.504 690.015 L827.064 690.015 L827.623 690.015 L828.182 690.015 L828.741 690.015 L829.301 690.015 L829.86 690.015 L830.419 690.015 L830.978 690.015 L831.538 690.015 L832.097 690.015 L832.656 690.015 L833.215 690.015 L833.775 690.015 L834.334 690.015 L834.893 690.015 L835.452 690.015 L836.012 690.015 L836.571 690.015 L837.13 690.015 L837.689 690.015 L838.249 690.015 L838.808 690.015 L839.367 690.015 L839.926 690.015 L840.486 690.015 L841.045 690.015 L841.604 690.015 L842.163 690.015 L842.723 690.015 L843.282 690.015 L843.841 690.015 L844.4 690.015 L844.96 690.015 L845.519 690.015 L846.078 690.015 L846.637 690.015 L847.197 690.015 L847.756 690.015 L848.315 690.015 L848.874 690.015 L849.434 690.015 L849.993 690.015 L850.552 690.015 L851.111 690.015 L851.671 690.015 L852.23 690.015 L852.789 690.015 L853.348 690.015 L853.908 690.015 L854.467 690.015 L855.026 690.015 L855.585 690.015 L856.145 690.015 L856.704 690.015 L857.263 690.015 L857.822 690.015 L858.382 690.015 L858.941 690.015 L859.5 690.015 L860.059 690.015 L860.619 690.015 L861.178 690.015 L861.737 690.015 L862.296 690.015 L862.856 690.015 L863.415 690.015 L863.974 690.015 L864.533 690.015 L865.093 690.015 L865.652 690.015 L866.211 690.015 L866.77 690.015 L867.33 690.015 L867.889 690.015 L868.448 690.015 L869.007 690.015 L869.567 690.015 L870.126 690.015 L870.685 690.015 L871.244 690.015 L871.804 690.015 L872.363 690.015 L872.922 690.015 L873.481 690.015 L874.041 690.015 L874.6 690.015 L875.159 690.015 L875.718 690.015 L876.278 690.015 L876.837 690.015 L877.396 690.015 L877.955 690.015 L878.515 690.015 L879.074 690.015 L879.633 690.015 L880.192 690.015 L880.752 690.015 L881.311 690.015 L881.87 690.015 L882.429 690.015 L882.989 690.015 L883.548 690.015 L884.107 690.015 L884.666 690.015 L885.226 690.015 L885.785 690.015 L886.344 690.015 L886.903 690.015 L887.463 690.015 L888.022 690.015 L888.581 690.015 L889.14 690.015 L889.7 690.015 L890.259 690.015 L890.818 690.015 L891.377 690.015 L891.937 690.015 L892.496 690.015 L893.055 690.015 L893.614 690.015 L894.174 690.015 L894.733 690.015 L895.292 690.015 L895.851 690.015 L896.411 690.015 L896.97 690.015 L897.529 690.015 L898.088 690.015 L898.648 690.015 L899.207 690.015 L899.766 690.015 L900.325 690.015 L900.885 690.015 L901.444 690.015 L902.003 690.015 L902.562 690.015 L903.122 690.015 L903.681 690.015 L904.24 690.015 L904.799 690.015 L905.359 690.015 L905.918 690.015 L906.477 690.015 L907.036 690.015 L907.596 690.015 L908.155 690.015 L908.714 690.015 L909.273 690.015 L909.833 690.015 L910.392 690.015 L910.951 690.015 L911.51 690.015 L912.07 690.015 L912.629 690.015 L913.188 690.015 L913.747 690.015 L914.307 690.015 L914.866 690.015 L915.425 690.015 L915.984 690.015 L916.544 690.015 L917.103 690.015 L917.662 690.015 L918.221 690.015 L918.781 690.015 L919.34 690.015 L919.899 690.015 L920.458 690.015 L921.018 690.015 L921.577 690.015 L922.136 690.015 L922.695 690.015 L923.255 690.015 L923.814 690.015 L924.373 690.015 L924.932 690.015 L925.492 690.015 L926.051 690.015 L926.61 690.015 L927.169 690.015 L927.729 690.015 L928.288 690.015 L928.847 690.015 L929.406 690.015 L929.966 690.015 L930.525 690.015 L931.084 690.015 L931.644 690.015 L932.203 690.015 L932.762 690.015 L933.321 690.015 L933.881 690.015 L934.44 690.015 L934.999 690.015 L935.558 690.015 L936.118 690.015 L936.677 690.015 L937.236 690.015 L937.795 690.015 L938.355 690.015 L938.914 690.015 L939.473 690.015 L940.032 690.015 L940.592 690.015 L941.151 690.015 L941.71 690.015 L942.269 690.015 L942.829 690.015 L943.388 690.015 L943.947 690.015 L944.506 690.015 L945.066 690.015 L945.625 690.015 L946.184 690.015 L946.743 690.015 L947.303 690.015 L947.862 690.015 L948.421 690.015 L948.98 690.015 L949.54 690.015 L950.099 690.015 L950.658 690.015 L951.217 690.015 L951.777 690.015 L952.336 690.015 L952.895 690.015 L953.454 690.015 L954.014 690.015 L954.573 690.015 L955.132 690.015 L955.691 690.015 L956.251 690.015 L956.81 690.015 L957.369 690.015 L957.928 690.015 L958.488 690.015 L959.047 690.015 L959.606 690.015 L960.165 690.015 L960.725 690.015 L961.284 690.015 L961.843 690.015 L962.402 690.015 L962.962 690.015 L963.521 690.015 L964.08 690.015 L964.639 690.015 L965.199 690.015 L965.758 690.015 L966.317 690.015 L966.876 690.015 L967.436 690.015 L967.995 690.015 L968.554 690.015 L969.113 690.015 L969.673 690.015 L970.232 690.015 L970.791 690.015 L971.35 690.015 L971.91 690.015 L972.469 690.015 L973.028 690.015 L973.587 690.015 L974.147 690.015 L974.706 690.015 L975.265 690.015 L975.824 690.015 L976.384 690.015 L976.943 690.015 L977.502 690.015 L978.061 690.015 L978.621 690.015 L979.18 690.015 L979.739 690.015 L980.298 690.015 L980.858 690.015 L981.417 690.015 L981.976 690.015 L982.535 690.015 L983.095 690.015 L983.654 690.015 L984.213 690.015 L984.772 690.015 L985.332 690.015 L985.891 690.015 L986.45 690.015 L987.009 690.015 L987.569 690.015 L988.128 690.015 L988.687 690.015 L989.246 690.015 L989.806 690.015 L990.365 690.015 L990.924 690.015 L991.483 690.015 L992.043 690.015 L992.602 690.015 L993.161 690.015 L993.72 690.015 L994.28 690.015 L994.839 690.015 L995.398 690.015 L995.957 690.015 L996.517 690.015 L997.076 690.015 L997.635 690.015 L998.194 690.015 L998.754 690.015 L999.313 690.015 L999.872 690.015 L1000.43 690.015 L1000.99 690.015 L1001.55 690.015 L1002.11 690.015 L1002.67 690.015 L1003.23 690.015 L1003.79 690.015 L1004.35 690.015 L1004.91 690.015 L1005.46 690.015 L1006.02 690.015 L1006.58 690.015 L1007.14 690.015 L1007.7 690.015 L1008.26 690.015 L1008.82 690.015 L1009.38 690.015 L1009.94 690.015 L1010.5 690.015 L1011.06 690.015 L1011.62 690.015 L1012.18 690.015 L1012.73 690.015 L1013.29 690.015 L1013.85 690.015 L1014.41 690.015 L1014.97 690.015 L1015.53 690.015 L1016.09 690.015 L1016.65 690.015 L1017.21 690.015 L1017.77 690.015 L1018.33 690.015 L1018.89 690.015 L1019.45 690.015 L1020.01 690.015 L1020.56 690.015 L1021.12 690.015 L1021.68 690.015 L1022.24 690.015 L1022.8 690.015 L1023.36 690.015 L1023.92 690.015 L1024.48 690.015 L1025.04 690.015 L1025.6 690.015 L1026.16 690.015 L1026.72 690.015 L1027.28 690.015 L1027.83 690.015 L1028.39 690.015 L1028.95 690.015 L1029.51 690.015 L1030.07 690.015 L1030.63 690.015 L1031.19 690.015 L1031.75 690.015 L1032.31 690.015 L1032.87 690.015 L1033.43 690.015 L1033.99 690.015 L1034.55 690.015 L1035.1 690.015 L1035.66 690.015 L1036.22 690.015 L1036.78 690.015 L1037.34 690.015 L1037.9 690.015 L1038.46 690.015 L1039.02 690.015 L1039.58 690.015 L1040.14 690.015 L1040.7 690.015 L1041.26 690.015 L1041.82 690.015 L1042.38 690.015 L1042.93 690.015 L1043.49 690.015 L1044.05 690.015 L1044.61 690.015 L1045.17 690.015 L1045.73 690.015 L1046.29 690.015 L1046.85 690.015 L1047.41 690.015 L1047.97 690.015 L1048.53 690.015 L1049.09 690.015 L1049.65 690.015 L1050.2 690.015 L1050.76 690.015 L1051.32 690.015 L1051.88 690.015 L1052.44 690.015 L1053 690.015 L1053.56 690.015 L1054.12 690.015 L1054.68 690.015 L1055.24 690.015 L1055.8 690.015 L1056.36 690.015 L1056.92 690.015 L1057.48 690.015 L1058.03 690.015 L1058.59 690.015 L1059.15 690.015 L1059.71 690.015 L1060.27 690.015 L1060.83 690.015 L1061.39 690.015 L1061.95 690.015 L1062.51 690.015 L1063.07 690.015 L1063.63 690.015 L1064.19 690.015 L1064.75 690.015 L1065.3 690.015 L1065.86 690.015 L1066.42 690.015 L1066.98 690.015 L1067.54 690.015 L1068.1 690.015 L1068.66 690.015 L1069.22 690.015 L1069.78 690.015 L1070.34 690.015 L1070.9 690.015 L1071.46 690.015 L1072.02 690.015 L1072.57 690.015 L1073.13 690.015 L1073.69 690.015 L1074.25 690.015 L1074.81 690.015 L1075.37 690.015 L1075.93 690.015 L1076.49 690.015 L1077.05 690.015 L1077.61 690.015 L1078.17 690.015 L1078.73 690.015 L1079.29 690.015 L1079.85 690.015 L1080.4 690.015 L1080.96 690.015 L1081.52 690.015 L1082.08 690.015 L1082.64 690.015 L1083.2 690.015 L1083.76 690.015 L1084.32 690.015 L1084.88 690.015 L1085.44 690.015 L1086 690.015 L1086.56 690.015 L1087.12 690.015 L1087.67 690.015 L1088.23 690.015 L1088.79 690.015 L1089.35 690.015 L1089.91 690.015 L1090.47 690.015 L1091.03 690.015 L1091.59 690.015 L1092.15 690.015 L1092.71 690.015 L1093.27 690.015 L1093.83 690.015 L1094.39 690.015 L1094.94 690.015 L1095.5 690.015 L1096.06 690.015 L1096.62 690.015 L1097.18 690.015 L1097.74 690.015 L1098.3 690.015 L1098.86 690.015 L1099.42 690.015 L1099.98 690.015 L1100.54 690.015 L1101.1 690.015 L1101.66 690.015 L1102.22 690.015 L1102.77 690.015 L1103.33 690.015 L1103.89 690.015 L1104.45 690.015 L1105.01 690.015 L1105.57 690.015 L1106.13 690.015 L1106.69 690.015 L1107.25 690.015 L1107.81 690.015 L1108.37 690.015 L1108.93 690.015 L1109.49 690.015 L1110.04 690.015 L1110.6 690.015 L1111.16 690.015 L1111.72 690.015 L1112.28 690.015 L1112.84 690.015 L1113.4 690.015 L1113.96 690.015 L1114.52 690.015 L1115.08 690.015 L1115.64 690.015 L1116.2 690.015 L1116.76 690.015 L1117.31 690.015 L1117.87 690.015 L1118.43 690.015 L1118.99 690.015 L1119.55 690.015 L1120.11 690.015 L1120.67 690.015 L1121.23 690.015 L1121.79 690.015 L1122.35 690.015 L1122.91 690.015 L1123.47 690.015 L1124.03 690.015 L1124.59 690.015 L1125.14 690.015 L1125.7 690.015 L1126.26 690.015 L1126.82 690.015 L1127.38 690.015 L1127.94 690.015 L1128.5 690.015 L1129.06 690.015 L1129.62 690.015 L1130.18 690.015 L1130.74 690.015 L1131.3 690.015 L1131.86 690.015 L1132.41 690.015 L1132.97 690.015 L1133.53 690.015 L1134.09 690.015 L1134.65 690.015 L1135.21 690.015 L1135.77 690.015 L1136.33 690.015 L1136.89 690.015 L1137.45 690.015 L1138.01 690.015 L1138.57 690.015 L1139.13 690.015 L1139.68 690.015 L1140.24 690.015 L1140.8 690.015 L1141.36 690.015 L1141.92 690.015 L1142.48 690.015 L1143.04 690.015 L1143.6 690.015 L1144.16 690.015 L1144.72 690.015 L1145.28 690.015 L1145.84 690.015 L1146.4 690.015 L1146.96 690.015 L1147.51 690.015 L1148.07 690.015 L1148.63 690.015 L1149.19 690.015 L1149.75 690.015 L1150.31 690.015 L1150.87 690.015 L1151.43 690.015 L1151.99 690.015 L1152.55 690.015 L1153.11 690.015 L1153.67 690.015 L1154.23 690.015 L1154.78 690.015 L1155.34 690.015 L1155.9 690.015 L1156.46 690.015 L1157.02 690.015 L1157.58 690.015 L1158.14 690.015 L1158.7 690.015 L1159.26 690.015 L1159.82 690.015 L1160.38 690.015 L1160.94 690.015 L1161.5 690.015 L1162.05 690.015 L1162.61 690.015 L1163.17 690.015 L1163.73 690.015 L1164.29 690.015 L1164.85 690.015 L1165.41 690.015 L1165.97 690.015 L1166.53 690.015 L1167.09 690.015 L1167.65 690.015 L1168.21 690.015 L1168.77 690.015 L1169.33 690.015 L1169.88 690.015 L1170.44 690.015 L1171 690.015 L1171.56 690.015 L1172.12 690.015 L1172.68 690.015 L1173.24 690.015 L1173.8 690.015 L1174.36 690.015 L1174.92 690.015 L1175.48 690.015 L1176.04 690.015 L1176.6 690.015 L1177.15 690.015 L1177.71 690.015 L1178.27 690.015 L1178.83 690.015 L1179.39 690.015 L1179.95 690.015 L1180.51 690.015 L1181.07 690.015 L1181.63 690.015 L1182.19 690.015 L1182.75 690.015 L1183.31 690.015 L1183.87 690.015 L1184.43 690.015 L1184.98 690.015 L1185.54 690.015 L1186.1 690.015 L1186.66 690.015 L1187.22 690.015 L1187.78 690.015 L1188.34 690.015 L1188.9 690.015 L1189.46 690.015 L1190.02 690.015 L1190.58 690.015 L1191.14 690.015 L1191.7 690.015 L1192.25 690.015 L1192.81 690.015 L1193.37 690.015 L1193.93 690.015 L1194.49 690.015 L1195.05 690.015 L1195.61 690.015 L1196.17 690.015 L1196.73 690.015 L1197.29 690.015 L1197.85 690.015 L1198.41 690.015 L1198.97 690.015 L1199.52 690.015 L1200.08 690.015 L1200.64 690.015 L1201.2 690.015 L1201.76 690.015 L1202.32 690.015 L1202.88 690.015 L1203.44 690.015 L1204 690.015 L1204.56 690.015 L1205.12 690.015 L1205.68 690.015 L1206.24 690.015 L1206.8 690.015 L1207.35 690.015 L1207.91 690.015 L1208.47 690.015 L1209.03 690.015 L1209.59 690.015 L1210.15 690.015 L1210.71 690.015 L1211.27 690.015 L1211.83 690.015 L1212.39 690.015 L1212.95 690.015 L1213.51 690.015 L1214.07 690.015 L1214.62 690.015 L1215.18 690.015 L1215.74 690.015 L1216.3 690.015 L1216.86 690.015 L1217.42 690.015 L1217.98 690.015 L1218.54 690.015 L1219.1 690.015 L1219.66 690.015 L1220.22 690.015 L1220.78 690.015 L1221.34 690.015 L1221.89 690.015 L1222.45 690.015 L1223.01 690.015 L1223.57 690.015 L1224.13 690.015 L1224.69 690.015 L1225.25 690.015 L1225.81 690.015 L1226.37 690.015 L1226.93 690.015 L1227.49 690.015 L1228.05 690.015 L1228.61 690.015 L1229.17 690.015 L1229.72 690.015 L1230.28 690.015 L1230.84 690.015 L1231.4 690.015 L1231.96 690.015 L1232.52 690.015 L1233.08 690.015 L1233.64 690.015 L1234.2 690.015 L1234.76 690.015 L1235.32 690.015 L1235.88 690.015 L1236.44 690.015 L1236.99 690.015 L1237.55 690.015 L1238.11 690.015 L1238.67 690.015 L1239.23 690.015 L1239.79 690.015 L1240.35 690.015 L1240.91 690.015 L1241.47 690.015 L1242.03 690.015 L1242.59 690.015 L1243.15 690.015 L1243.71 690.015 L1244.26 690.015 L1244.82 690.015 L1245.38 690.015 L1245.94 690.015 L1246.5 690.015 L1247.06 690.015 L1247.62 690.015 L1248.18 690.015 L1248.74 690.015 L1249.3 690.015 L1249.86 690.015 L1250.42 690.015 L1250.98 690.015 L1251.54 690.015 L1252.09 690.015 L1252.65 690.015 L1253.21 690.015 L1253.77 690.015 L1254.33 690.015 L1254.89 690.015 L1255.45 690.015 L1256.01 690.015 L1256.57 690.015 L1257.13 690.015 L1257.69 690.015 L1258.25 690.015 L1258.81 690.015 L1259.36 690.015 L1259.92 690.015 L1260.48 690.015 L1261.04 690.015 L1261.6 690.015 L1262.16 690.015 L1262.72 690.015 L1263.28 690.015 L1263.84 690.015 L1264.4 690.015 L1264.96 690.015 L1265.52 690.015 L1266.08 690.015 L1266.63 690.015 L1267.19 690.015 L1267.75 690.015 L1268.31 690.015 L1268.87 690.015 L1269.43 690.015 L1269.99 690.015 L1270.55 690.015 L1271.11 690.015 L1271.67 690.015 L1272.23 690.015 L1272.79 690.015 L1273.35 690.015 L1273.91 690.015 L1274.46 690.015 L1275.02 690.015 L1275.58 690.015 L1276.14 690.015 L1276.7 690.015 L1277.26 690.015 L1277.82 690.015 L1278.38 690.015 L1278.94 690.015 L1279.5 690.015 L1280.06 690.015 L1280.62 690.015 L1281.18 690.015 L1281.73 690.015 L1282.29 690.015 L1282.85 690.015 L1283.41 690.015 L1283.97 690.015 L1284.53 690.015 L1285.09 690.015 L1285.65 690.015 L1286.21 690.015 L1286.77 690.015 L1287.33 690.015 L1287.89 690.015 L1288.45 690.015 L1289 690.015 L1289.56 690.015 L1290.12 690.015 L1290.68 690.015 L1291.24 690.015 L1291.8 690.015 L1292.36 690.015 L1292.92 690.015 L1293.48 690.015 L1294.04 690.015 L1294.6 690.015 L1295.16 690.015 L1295.72 690.015 L1296.28 690.015 L1296.83 690.015 L1297.39 690.015 L1297.95 690.015 L1298.51 690.015 L1299.07 690.015 L1299.63 690.015 L1300.19 690.015 L1300.75 690.015 L1301.31 690.015 L1301.87 690.015 L1302.43 690.015 L1302.99 690.015 L1303.55 690.015 L1304.1 690.015 L1304.66 690.015 L1305.22 690.015 L1305.78 690.015 L1306.34 690.015 L1306.9 690.015 L1307.46 690.015 L1308.02 690.015 L1308.58 690.015 L1309.14 690.015 L1309.7 690.015 L1310.26 690.015 L1310.82 690.015 L1311.38 690.015 L1311.93 690.015 L1312.49 690.015 L1313.05 690.015 L1313.61 690.015 L1314.17 690.015 L1314.73 690.015 L1315.29 690.015 L1315.85 690.015 L1316.41 690.015 L1316.97 690.015 L1317.53 690.015 L1318.09 690.015 L1318.65 690.015 L1319.2 690.015 L1319.76 690.015 L1320.32 690.015 L1320.88 690.015 L1321.44 690.015 L1322 690.015 L1322.56 690.015 L1323.12 690.015 L1323.68 690.015 L1324.24 690.015 L1324.8 690.015 L1325.36 690.015 L1325.92 690.015 L1326.47 690.015 L1327.03 690.015 L1327.59 690.015 L1328.15 690.015 L1328.71 690.015 L1329.27 690.015 L1329.83 690.015 L1330.39 690.015 L1330.95 690.015 L1331.51 690.015 L1332.07 690.015 L1332.63 690.015 L1333.19 690.015 L1333.75 690.015 L1334.3 690.015 L1334.86 690.015 L1335.42 690.015 L1335.98 690.015 L1336.54 690.015 L1337.1 690.015 L1337.66 690.015 L1338.22 690.015 L1338.78 690.015 L1339.34 690.015 L1339.9 690.015 L1340.46 690.015 L1341.02 690.015 L1341.57 690.015 L1342.13 690.015 L1342.69 690.015 L1343.25 690.015 L1343.81 690.015 L1344.37 690.015 L1344.93 690.015 L1345.49 690.015 L1346.05 690.015 L1346.61 690.015 L1347.17 690.015 L1347.73 690.015 L1348.29 690.015 L1348.84 690.015 L1349.4 690.015 L1349.96 690.015 L1350.52 690.015 L1351.08 690.015 L1351.64 690.015 L1352.2 690.015 L1352.76 690.015 L1353.32 690.015 L1353.88 690.015 L1354.44 690.015 L1355 690.015 L1355.56 690.015 L1356.12 690.015 L1356.67 690.015 L1357.23 690.015 L1357.79 690.015 L1358.35 690.015 L1358.91 690.015 L1359.47 690.015 L1360.03 690.015 L1360.59 690.015 L1361.15 690.015 L1361.71 690.015 L1362.27 690.015 L1362.83 690.015 L1363.39 690.015 L1363.94 690.015 L1364.5 690.015 L1365.06 690.015 L1365.62 690.015 L1366.18 690.015 L1366.74 690.015 L1367.3 690.015 L1367.86 690.015 L1368.42 690.015 L1368.98 690.015 L1369.54 690.015 L1370.1 690.015 L1370.66 690.015 L1371.21 690.015 L1371.77 690.015 L1372.33 690.015 L1372.89 690.015 L1373.45 690.015 L1374.01 690.015 L1374.57 690.015 L1375.13 690.015 L1375.69 690.015 L1376.25 690.015 L1376.81 690.015 L1377.37 690.015 L1377.93 690.015 L1378.49 690.015 L1379.04 690.015 L1379.6 690.015 L1380.16 690.015 L1380.72 690.015 L1381.28 690.015 L1381.84 690.015 L1382.4 690.015 L1382.96 690.015 L1383.52 690.015 L1384.08 690.015 L1384.64 690.015 L1385.2 690.015 L1385.76 690.015 L1386.31 690.015 L1386.87 690.015 L1387.43 690.015 L1387.99 690.015 L1388.55 690.015 L1389.11 690.015 L1389.67 690.015 L1390.23 690.015 L1390.79 690.015 L1391.35 690.015 L1391.91 690.015 L1392.47 690.015 L1393.03 690.015 L1393.58 690.015 L1394.14 690.015 L1394.7 690.015 L1395.26 690.015 L1395.82 690.015 L1396.38 690.015 L1396.94 690.015 L1397.5 690.015 L1398.06 690.015 L1398.62 690.015 L1399.18 690.015 L1399.74 690.015 L1400.3 690.015 L1400.86 690.015 L1401.41 690.015 L1401.97 690.015 L1402.53 690.015 L1403.09 690.015 L1403.65 690.015 L1404.21 690.015 L1404.77 690.015 L1405.33 690.015 L1405.89 690.015 L1406.45 690.015 L1407.01 690.015 L1407.57 690.015 L1408.13 690.015 L1408.68 690.015 L1409.24 690.015 L1409.8 690.015 L1410.36 690.015 L1410.92 690.015 L1411.48 690.015 L1412.04 690.015 L1412.6 690.015 L1413.16 690.015 L1413.72 690.015 L1414.28 690.015 L1414.84 690.015 L1415.4 690.015 L1415.95 690.015 L1416.51 690.015 L1417.07 690.015 L1417.63 690.015 L1418.19 690.015 L1418.75 690.015 L1419.31 690.015 L1419.87 690.015 L1420.43 690.015 L1420.99 690.015 L1421.55 690.015 L1422.11 690.015 L1422.67 690.015 L1423.23 690.015 L1423.78 690.015 L1424.34 690.015 L1424.9 690.015 L1425.46 690.015 L1426.02 690.015 L1426.58 690.015 L1427.14 690.015 L1427.7 690.015 L1428.26 690.015 L1428.82 690.015 L1429.38 690.015 L1429.94 690.015 L1430.5 690.015 L1431.05 690.015 L1431.61 690.015 L1432.17 690.015 L1432.73 690.015 L1433.29 690.015 L1433.85 690.015 L1434.41 690.015 L1434.97 690.015 L1435.53 690.015 L1436.09 690.015 L1436.65 690.015 L1437.21 690.015 L1437.77 690.015 L1438.33 690.015 L1438.88 690.015 L1439.44 690.015 L1440 690.015 L1440.56 690.015 L1441.12 690.015 L1441.68 690.015 L1442.24 690.015 L1442.8 690.015 L1443.36 690.015 L1443.92 690.015 L1444.48 690.015 L1445.04 690.015 L1445.6 690.015 L1446.15 690.015 L1446.71 690.015 L1447.27 690.015 L1447.83 690.015 L1448.39 690.015 L1448.95 690.015 L1449.51 690.015 L1450.07 690.015 L1450.63 690.015 L1451.19 690.015 L1451.75 690.015 L1452.31 690.015 L1452.87 690.015 L1453.42 690.015 L1453.98 690.015 L1454.54 690.015 L1455.1 690.015 L1455.66 690.015 L1456.22 690.015 L1456.78 690.015 L1457.34 690.015 L1457.9 690.015 L1458.46 690.015 L1459.02 690.015 L1459.58 690.015 L1460.14 690.015 L1460.7 690.015 L1461.25 690.015 L1461.81 690.015 L1462.37 690.015 L1462.93 690.015 L1463.49 690.015 L1464.05 690.015 L1464.61 690.015 L1465.17 690.015 L1465.73 690.015 L1466.29 690.015 L1466.85 690.015 L1467.41 690.015 L1467.97 690.015 L1468.52 690.015 L1469.08 690.015 L1469.64 690.015 L1470.2 690.015 L1470.76 690.015 L1471.32 690.015 L1471.88 690.015 L1472.44 690.015 L1473 690.015 L1473.56 690.015 L1474.12 690.015 L1474.68 690.015 L1475.24 690.015 L1475.79 690.015 L1476.35 690.015 L1476.91 690.015 L1477.47 690.015 L1478.03 690.015 L1478.59 690.015 L1479.15 690.015 L1479.71 690.015 L1480.27 690.015 L1480.83 690.015 L1481.39 690.015 L1481.95 690.015 L1482.51 690.015 L1483.07 690.015 L1483.62 690.015 L1484.18 690.015 L1484.74 690.015 L1485.3 690.015 L1485.86 690.015 L1486.42 690.015 L1486.98 690.015 L1487.54 690.015 L1488.1 690.015 L1488.66 690.015 L1489.22 690.015 L1489.78 690.015 L1490.34 690.015 L1490.89 690.015 L1491.45 690.015 L1492.01 690.015 L1492.57 690.015 L1493.13 690.015 L1493.69 690.015 L1494.25 690.015 L1494.81 690.015 L1495.37 690.015 L1495.93 690.015 L1496.49 690.015 L1497.05 690.015 L1497.61 690.015 L1498.16 690.015 L1498.72 690.015 L1499.28 690.015 L1499.84 690.015 L1500.4 690.015 L1500.96 690.015 L1501.52 690.015 L1502.08 690.015 L1502.64 690.015 L1503.2 690.015 L1503.76 690.015 L1504.32 690.015 L1504.88 690.015 L1505.44 690.015 L1505.99 690.015 L1506.55 690.015 L1507.11 690.015 L1507.67 690.015 L1508.23 690.015 L1508.79 690.015 L1509.35 690.015 L1509.91 690.015 L1510.47 690.015 L1511.03 690.015 L1511.59 690.015 L1512.15 690.015 L1512.71 690.015 L1513.26 690.015 L1513.82 690.015 L1514.38 690.015 L1514.94 690.015 L1515.5 690.015 L1516.06 690.015 L1516.62 690.015 L1517.18 690.015 L1517.74 690.015 L1518.3 690.015 L1518.86 690.015 L1519.42 690.015 L1519.98 690.015 L1520.53 690.015 L1521.09 690.015 L1521.65 690.015 L1522.21 690.015 L1522.77 690.015 L1523.33 690.015 L1523.89 690.015 L1524.45 690.015 L1525.01 690.015 L1525.57 690.015 L1526.13 690.015 L1526.69 690.015 L1527.25 690.015 L1527.81 690.015 L1528.36 690.015 L1528.92 690.015 L1529.48 690.015 L1530.04 690.015 L1530.6 690.015 L1531.16 690.015 L1531.72 690.015 L1532.28 690.015 L1532.84 690.015 L1533.4 690.015 L1533.96 690.015 L1534.52 690.015 L1535.08 690.015 L1535.63 690.015 L1536.19 690.015 L1536.75 690.015 L1537.31 690.015 L1537.87 690.015 L1538.43 690.015 L1538.99 690.015 L1539.55 690.015 L1540.11 690.015 L1540.67 690.015 L1541.23 690.015 L1541.79 690.015 L1542.35 690.015 L1542.9 690.015 L1543.46 690.015 L1544.02 690.015 L1544.58 690.015 L1545.14 690.015 L1545.7 690.015 L1546.26 690.015 L1546.82 690.015 L1547.38 690.015 L1547.94 690.015 L1548.5 690.015 L1549.06 690.015 L1549.62 690.015 L1550.18 690.015 L1550.73 690.015 L1551.29 690.015 L1551.85 690.015 L1552.41 690.015 L1552.97 690.015 L1553.53 690.015 L1554.09 690.015 L1554.65 690.015 L1555.21 690.015 L1555.77 690.015 L1556.33 690.015 L1556.89 690.015 L1557.45 690.015 L1558 690.015 L1558.56 690.015 L1559.12 690.015 L1559.68 690.015 L1560.24 690.015 L1560.8 690.015 L1561.36 690.015 L1561.92 690.015 L1562.48 690.015 L1563.04 690.015 L1563.6 690.015 L1564.16 690.015 L1564.72 690.015 L1565.28 690.015 L1565.83 690.015 L1566.39 690.015 L1566.95 690.015 L1567.51 690.015 L1568.07 690.015 L1568.63 690.015 L1569.19 690.015 L1569.75 690.015 L1570.31 690.015 L1570.87 690.015 L1571.43 690.015 L1571.99 690.015 L1572.55 690.015 L1573.1 690.015 L1573.66 690.015 L1574.22 690.015 L1574.78 690.015 L1575.34 690.015 L1575.9 690.015 L1576.46 690.015 L1577.02 690.015 L1577.58 690.015 L1578.14 690.015 L1578.7 690.015 L1579.26 690.015 L1579.82 690.015 L1580.37 690.015 L1580.93 690.015 L1581.49 690.015 L1582.05 690.015 L1582.61 690.015 L1583.17 690.015 L1583.73 690.015 L1584.29 690.015 L1584.85 690.015 L1585.41 690.015 L1585.97 690.015 L1586.53 690.015 L1587.09 690.015 L1587.65 690.015 L1588.2 690.015 L1588.76 690.015 L1589.32 690.015 L1589.88 690.015 L1590.44 690.015 L1591 690.015 L1591.56 690.015 L1592.12 690.015 L1592.68 690.015 L1593.24 690.015 L1593.8 690.015 L1594.36 690.015 L1594.92 690.015 L1595.47 690.015 L1596.03 690.015 L1596.59 690.015 L1597.15 690.015 L1597.71 690.015 L1598.27 690.015 L1598.83 690.015 L1599.39 690.015 L1599.95 690.015 L1600.51 690.015 L1601.07 690.015 L1601.63 690.015 L1602.19 690.015 L1602.74 690.015 L1603.3 690.015 L1603.86 690.015 L1604.42 690.015 L1604.98 690.015 L1605.54 690.015 L1606.1 690.015 L1606.66 690.015 L1607.22 690.015 L1607.78 690.015 L1608.34 690.015 L1608.9 690.015 L1609.46 690.015 L1610.02 690.015 L1610.57 690.015 L1611.13 690.015 L1611.69 690.015 L1612.25 690.015 L1612.81 690.015 L1613.37 690.015 L1613.93 690.015 L1614.49 690.015 L1615.05 690.015 L1615.61 690.015 L1616.17 690.015 L1616.73 690.015 L1617.29 690.015 L1617.84 690.015 L1618.4 690.015 L1618.96 690.015 L1619.52 690.015 L1620.08 690.015 L1620.64 690.015 L1621.2 690.015 L1621.76 690.015 L1622.32 690.015 L1622.88 690.015 L1623.44 690.015 L1624 690.015 L1624.56 690.015 L1625.11 690.015 L1625.67 690.015 L1626.23 690.015 L1626.79 690.015 L1627.35 690.015 L1627.91 690.015 L1628.47 690.015 L1629.03 690.015 L1629.59 690.015 L1630.15 690.015 L1630.71 690.015 L1631.27 690.015 L1631.83 690.015 L1632.39 690.015 L1632.94 690.015 L1633.5 690.015 L1634.06 690.015 L1634.62 690.015 L1635.18 690.015 L1635.74 690.015 L1636.3 690.015 L1636.86 690.015 L1637.42 690.015 L1637.98 690.015 L1638.54 690.015 L1639.1 690.015 L1639.66 690.015 L1640.21 690.015 L1640.77 690.015 L1641.33 690.015 L1641.89 690.015 L1642.45 690.015 L1643.01 690.015 L1643.57 690.015 L1644.13 690.015 L1644.69 690.015 L1645.25 690.015 L1645.81 690.015 L1646.37 690.015 L1646.93 690.015 L1647.48 690.015 L1648.04 690.015 L1648.6 690.015 L1649.16 690.015 L1649.72 690.015 L1650.28 690.015 L1650.84 690.015 L1651.4 690.015 L1651.96 690.015 L1652.52 690.015 L1653.08 690.015 L1653.64 690.015 L1654.2 690.015 L1654.76 690.015 L1655.31 690.015 L1655.87 690.015 L1656.43 690.015 L1656.99 690.015 L1657.55 690.015 L1658.11 690.015 L1658.67 690.015 L1659.23 690.015 L1659.79 690.015 L1660.35 690.015 L1660.91 690.015 L1661.47 690.015 L1662.03 690.015 L1662.58 690.015 L1663.14 690.015 L1663.7 690.015 L1664.26 690.015 L1664.82 690.015 L1665.38 690.015 L1665.94 690.015 L1666.5 690.015 L1667.06 690.015 L1667.62 690.015 L1668.18 690.015 L1668.74 690.015 L1669.3 690.015 L1669.85 690.015 L1670.41 690.015 L1670.97 690.015 L1671.53 690.015 L1672.09 690.015 L1672.65 690.015 L1673.21 690.015 L1673.77 690.015 L1674.33 690.015 L1674.89 690.015 L1675.45 690.015 L1676.01 690.015 L1676.57 690.015 L1677.13 690.015 L1677.68 690.015 L1678.24 690.015 L1678.8 690.015 L1679.36 690.015 L1679.92 690.015 L1680.48 690.015 L1681.04 690.015 L1681.6 690.015 L1682.16 690.015 L1682.72 690.015 L1683.28 690.015 L1683.84 690.015 L1684.4 690.015 L1684.95 690.015 L1685.51 690.015 L1686.07 690.015 L1686.63 690.015 L1687.19 690.015 L1687.75 690.015 L1688.31 690.015 L1688.87 690.015 L1689.43 690.015 L1689.99 690.015 L1690.55 690.015 L1691.11 690.015 L1691.67 690.015 L1692.23 690.015 L1692.78 690.015 L1693.34 690.015 L1693.9 690.015 L1694.46 690.015 L1695.02 690.015 L1695.58 690.015 L1696.14 690.015 L1696.7 690.015 L1697.26 690.015 L1697.82 690.015 L1698.38 690.015 L1698.94 690.015 L1699.5 690.015 L1700.05 690.015 L1700.61 690.015 L1701.17 690.015 L1701.73 690.015 L1702.29 690.015 L1702.85 690.015 L1703.41 690.015 L1703.97 690.015 L1704.53 690.015 L1705.09 690.015 L1705.65 690.015 L1706.21 690.015 L1706.77 690.015 L1707.32 690.015 L1707.88 690.015 L1708.44 690.015 L1709 690.015 L1709.56 690.015 L1710.12 690.015 L1710.68 690.015 L1711.24 690.015 L1711.8 690.015 L1712.36 690.015 L1712.92 690.015 L1713.48 690.015 L1714.04 690.015 L1714.6 690.015 L1715.15 690.015 L1715.71 690.015 L1716.27 690.015 L1716.83 690.015 L1717.39 690.015 L1717.95 690.015 L1718.51 690.015 L1719.07 690.015 L1719.63 690.015 L1720.19 690.015 L1720.75 690.015 L1721.31 690.015 L1721.87 690.015 L1722.42 690.015 L1722.98 690.015 L1723.54 690.015 L1724.1 690.015 L1724.66 690.015 L1725.22 690.015 L1725.78 690.015 L1726.34 690.015 L1726.9 690.015 L1727.46 690.015 L1728.02 690.015 L1728.58 690.015 L1729.14 690.015 L1729.69 690.015 L1730.25 690.015 L1730.81 690.015 L1731.37 690.015 L1731.93 690.015 L1732.49 690.015 L1733.05 690.015 L1733.61 690.015 L1734.17 690.015 L1734.73 690.015 L1735.29 690.015 L1735.85 690.015 L1736.41 690.015 L1736.97 690.015 L1737.52 690.015 L1738.08 690.015 L1738.64 690.015 L1739.2 690.015 L1739.76 690.015 L1740.32 690.015 L1740.88 690.015 L1741.44 690.015 L1742 690.015 L1742.56 690.015 L1743.12 690.015 L1743.68 690.015 L1744.24 690.015 L1744.79 690.015 L1745.35 690.015 L1745.91 690.015 L1746.47 690.015 L1747.03 690.015 L1747.59 690.015 L1748.15 690.015 L1748.71 690.015 L1749.27 690.015 L1749.83 690.015 L1750.39 690.015 L1750.95 690.015 L1751.51 690.015 L1752.06 690.015 L1752.62 690.015 L1753.18 690.015 L1753.74 690.015 L1754.3 690.015 L1754.86 690.015 L1755.42 690.015 L1755.98 690.015 L1756.54 690.015 L1757.1 690.015 L1757.66 690.015 L1758.22 690.015 L1758.78 690.015 L1759.34 690.015 L1759.89 690.015 L1760.45 690.015 L1761.01 690.015 L1761.57 690.015 L1762.13 690.015 L1762.69 690.015 L1763.25 690.015 L1763.81 690.015 L1764.37 690.015 L1764.93 690.015 L1765.49 690.015 L1766.05 690.015 L1766.61 690.015 L1767.16 690.015 L1767.72 690.015 L1768.28 690.015 L1768.84 690.015 L1769.4 690.015 L1769.96 690.015 L1770.52 690.015 L1771.08 690.015 L1771.64 690.015 L1772.2 690.015 L1772.76 690.015 L1773.32 690.015 L1773.88 690.015 L1774.43 690.015 L1774.99 690.015 L1775.55 690.015 L1776.11 690.015 L1776.67 690.015 L1777.23 690.015 L1777.79 690.015 L1778.35 690.015 L1778.91 690.015 L1779.47 690.015 L1780.03 690.015 L1780.59 690.015 L1781.15 690.015 L1781.71 690.015 L1782.26 690.015 L1782.82 690.015 L1783.38 690.015 L1783.94 690.015 L1784.5 690.015 L1785.06 690.015 L1785.62 690.015 L1786.18 690.015 L1786.74 690.015 L1787.3 690.015 L1787.86 690.015 L1788.42 690.015 L1788.98 690.015 L1789.53 690.015 L1790.09 690.015 L1790.65 690.015 L1791.21 690.015 L1791.77 690.015 L1792.33 690.015 L1792.89 690.015 L1793.45 690.015 L1794.01 690.015 L1794.57 690.015 L1795.13 690.015 L1795.69 690.015 L1796.25 690.015 L1796.8 690.015 L1797.36 690.015 L1797.92 690.015 L1798.48 690.015 L1799.04 690.015 L1799.6 690.015 L1800.16 690.015 L1800.72 690.015 L1801.28 690.015 L1801.84 690.015 L1802.4 690.015 L1802.96 690.015 L1803.52 690.015 L1804.08 690.015 L1804.63 690.015 L1805.19 690.015 L1805.75 690.015 L1806.31 690.015 L1806.87 690.015 L1807.43 690.015 L1807.99 690.015 L1808.55 690.015 L1809.11 690.015 L1809.67 690.015 L1810.23 690.015 L1810.79 690.015 L1811.35 690.015 L1811.9 690.015 L1812.46 690.015 L1813.02 690.015 L1813.58 690.015 L1814.14 690.015 L1814.7 690.015 L1815.26 690.015 L1815.82 690.015 L1816.38 690.015 L1816.94 690.015 L1817.5 690.015 L1818.06 690.015 L1818.62 690.015 L1819.18 690.015 L1819.73 690.015 L1820.29 690.015 L1820.85 690.015 L1821.41 690.015 L1821.97 690.015 L1822.53 690.015 L1823.09 690.015 L1823.65 690.015 L1824.21 690.015 L1824.77 690.015 L1825.33 690.015 L1825.89 690.015 L1826.45 690.015 L1827 690.015 L1827.56 690.015 L1828.12 690.015 L1828.68 690.015 L1829.24 690.015 L1829.8 690.015 L1830.36 690.015 L1830.92 690.015 L1831.48 690.015 L1832.04 690.015 L1832.6 690.015 L1833.16 690.015 L1833.72 690.015 L1834.27 690.015 L1834.83 690.015 L1835.39 690.015 L1835.95 690.015 L1836.51 690.015 L1837.07 690.015 L1837.63 690.015 L1838.19 690.015 L1838.19 681.422 L1837.63 681.422 L1837.07 681.422 L1836.51 681.422 L1835.95 681.422 L1835.39 681.422 L1834.83 681.422 L1834.27 681.422 L1833.72 681.422 L1833.16 681.422 L1832.6 681.422 L1832.04 681.422 L1831.48 681.422 L1830.92 681.422 L1830.36 681.422 L1829.8 681.422 L1829.24 681.422 L1828.68 681.422 L1828.12 681.422 L1827.56 681.422 L1827 681.422 L1826.45 681.422 L1825.89 681.422 L1825.33 681.422 L1824.77 681.422 L1824.21 681.422 L1823.65 681.422 L1823.09 681.422 L1822.53 681.422 L1821.97 681.422 L1821.41 681.422 L1820.85 681.422 L1820.29 681.422 L1819.73 681.422 L1819.18 681.422 L1818.62 681.422 L1818.06 681.422 L1817.5 681.422 L1816.94 681.422 L1816.38 681.422 L1815.82 681.422 L1815.26 681.422 L1814.7 681.422 L1814.14 681.422 L1813.58 681.422 L1813.02 681.422 L1812.46 681.422 L1811.9 681.422 L1811.35 681.422 L1810.79 681.422 L1810.23 681.422 L1809.67 681.422 L1809.11 681.422 L1808.55 681.422 L1807.99 681.422 L1807.43 681.422 L1806.87 681.422 L1806.31 681.422 L1805.75 681.422 L1805.19 681.422 L1804.63 681.422 L1804.08 681.422 L1803.52 681.422 L1802.96 681.422 L1802.4 681.422 L1801.84 681.422 L1801.28 681.422 L1800.72 681.422 L1800.16 681.422 L1799.6 681.422 L1799.04 681.422 L1798.48 681.422 L1797.92 681.422 L1797.36 681.422 L1796.8 681.422 L1796.25 681.422 L1795.69 681.422 L1795.13 681.422 L1794.57 681.422 L1794.01 681.422 L1793.45 681.422 L1792.89 681.422 L1792.33 681.422 L1791.77 681.422 L1791.21 681.422 L1790.65 681.422 L1790.09 681.422 L1789.53 681.422 L1788.98 681.422 L1788.42 681.422 L1787.86 681.422 L1787.3 681.422 L1786.74 681.422 L1786.18 681.422 L1785.62 681.422 L1785.06 681.422 L1784.5 681.422 L1783.94 681.422 L1783.38 681.422 L1782.82 681.422 L1782.26 681.422 L1781.71 681.422 L1781.15 681.422 L1780.59 681.422 L1780.03 681.422 L1779.47 681.422 L1778.91 681.422 L1778.35 681.422 L1777.79 681.422 L1777.23 681.422 L1776.67 681.422 L1776.11 681.422 L1775.55 681.422 L1774.99 681.422 L1774.43 681.422 L1773.88 681.422 L1773.32 681.422 L1772.76 681.422 L1772.2 681.422 L1771.64 681.422 L1771.08 681.422 L1770.52 681.422 L1769.96 681.422 L1769.4 681.422 L1768.84 681.422 L1768.28 681.422 L1767.72 681.422 L1767.16 681.422 L1766.61 681.422 L1766.05 681.422 L1765.49 681.422 L1764.93 681.422 L1764.37 681.422 L1763.81 681.422 L1763.25 681.422 L1762.69 681.422 L1762.13 681.422 L1761.57 681.422 L1761.01 681.422 L1760.45 681.422 L1759.89 681.422 L1759.34 681.422 L1758.78 681.422 L1758.22 681.422 L1757.66 681.422 L1757.1 681.422 L1756.54 681.422 L1755.98 681.422 L1755.42 681.422 L1754.86 681.422 L1754.3 681.422 L1753.74 681.422 L1753.18 681.422 L1752.62 681.422 L1752.06 681.422 L1751.51 681.422 L1750.95 681.422 L1750.39 681.422 L1749.83 681.422 L1749.27 681.422 L1748.71 681.422 L1748.15 681.422 L1747.59 681.422 L1747.03 681.422 L1746.47 681.422 L1745.91 681.422 L1745.35 681.422 L1744.79 681.422 L1744.24 681.422 L1743.68 681.422 L1743.12 681.422 L1742.56 681.422 L1742 681.422 L1741.44 681.422 L1740.88 681.422 L1740.32 681.422 L1739.76 681.422 L1739.2 681.422 L1738.64 681.422 L1738.08 681.422 L1737.52 681.422 L1736.97 681.422 L1736.41 681.422 L1735.85 681.422 L1735.29 681.422 L1734.73 681.422 L1734.17 681.422 L1733.61 681.422 L1733.05 681.422 L1732.49 681.422 L1731.93 681.422 L1731.37 681.422 L1730.81 681.422 L1730.25 681.422 L1729.69 681.422 L1729.14 681.422 L1728.58 681.422 L1728.02 681.422 L1727.46 681.422 L1726.9 681.422 L1726.34 681.422 L1725.78 681.422 L1725.22 681.422 L1724.66 681.422 L1724.1 681.422 L1723.54 681.422 L1722.98 681.422 L1722.42 681.422 L1721.87 681.422 L1721.31 681.422 L1720.75 681.422 L1720.19 681.422 L1719.63 681.422 L1719.07 681.422 L1718.51 681.422 L1717.95 681.422 L1717.39 681.422 L1716.83 681.422 L1716.27 681.422 L1715.71 681.422 L1715.15 681.422 L1714.6 681.422 L1714.04 681.422 L1713.48 681.422 L1712.92 681.422 L1712.36 681.422 L1711.8 681.422 L1711.24 681.422 L1710.68 681.422 L1710.12 681.422 L1709.56 681.422 L1709 681.422 L1708.44 681.422 L1707.88 681.422 L1707.32 681.422 L1706.77 681.422 L1706.21 681.422 L1705.65 681.422 L1705.09 681.422 L1704.53 681.422 L1703.97 681.422 L1703.41 681.422 L1702.85 681.422 L1702.29 681.422 L1701.73 681.422 L1701.17 681.422 L1700.61 681.422 L1700.05 681.422 L1699.5 681.422 L1698.94 681.422 L1698.38 681.422 L1697.82 681.422 L1697.26 681.422 L1696.7 681.422 L1696.14 681.422 L1695.58 681.422 L1695.02 681.422 L1694.46 681.422 L1693.9 681.422 L1693.34 681.422 L1692.78 681.422 L1692.23 681.422 L1691.67 681.422 L1691.11 681.422 L1690.55 681.422 L1689.99 681.422 L1689.43 681.422 L1688.87 681.422 L1688.31 681.422 L1687.75 681.422 L1687.19 681.422 L1686.63 681.422 L1686.07 681.422 L1685.51 681.422 L1684.95 681.422 L1684.4 681.422 L1683.84 681.422 L1683.28 681.422 L1682.72 681.422 L1682.16 681.422 L1681.6 681.422 L1681.04 681.422 L1680.48 681.422 L1679.92 681.422 L1679.36 681.422 L1678.8 681.422 L1678.24 681.422 L1677.68 681.422 L1677.13 681.422 L1676.57 681.422 L1676.01 681.422 L1675.45 681.422 L1674.89 681.422 L1674.33 681.422 L1673.77 681.422 L1673.21 681.422 L1672.65 681.422 L1672.09 681.422 L1671.53 681.422 L1670.97 681.422 L1670.41 681.422 L1669.85 681.422 L1669.3 681.422 L1668.74 681.422 L1668.18 681.422 L1667.62 681.422 L1667.06 681.422 L1666.5 681.422 L1665.94 681.422 L1665.38 681.422 L1664.82 681.422 L1664.26 681.422 L1663.7 681.422 L1663.14 681.422 L1662.58 681.422 L1662.03 681.422 L1661.47 681.422 L1660.91 681.422 L1660.35 681.422 L1659.79 681.422 L1659.23 681.422 L1658.67 681.422 L1658.11 681.422 L1657.55 681.422 L1656.99 681.422 L1656.43 681.422 L1655.87 681.422 L1655.31 681.422 L1654.76 681.422 L1654.2 681.422 L1653.64 681.422 L1653.08 681.422 L1652.52 681.422 L1651.96 681.422 L1651.4 681.422 L1650.84 681.422 L1650.28 681.422 L1649.72 681.422 L1649.16 681.422 L1648.6 681.422 L1648.04 681.422 L1647.48 681.422 L1646.93 681.422 L1646.37 681.422 L1645.81 681.422 L1645.25 681.422 L1644.69 681.422 L1644.13 681.422 L1643.57 681.422 L1643.01 681.422 L1642.45 681.422 L1641.89 681.422 L1641.33 681.422 L1640.77 681.422 L1640.21 681.422 L1639.66 681.422 L1639.1 681.422 L1638.54 681.422 L1637.98 681.422 L1637.42 681.422 L1636.86 681.422 L1636.3 681.422 L1635.74 681.422 L1635.18 681.422 L1634.62 681.422 L1634.06 681.422 L1633.5 681.422 L1632.94 681.422 L1632.39 681.422 L1631.83 681.422 L1631.27 681.422 L1630.71 681.422 L1630.15 681.422 L1629.59 681.422 L1629.03 681.422 L1628.47 681.422 L1627.91 681.422 L1627.35 681.422 L1626.79 681.422 L1626.23 681.422 L1625.67 681.422 L1625.11 681.422 L1624.56 681.422 L1624 681.422 L1623.44 681.422 L1622.88 681.422 L1622.32 681.422 L1621.76 681.422 L1621.2 681.422 L1620.64 681.422 L1620.08 681.422 L1619.52 681.422 L1618.96 681.422 L1618.4 681.422 L1617.84 681.422 L1617.29 681.422 L1616.73 681.422 L1616.17 681.422 L1615.61 681.422 L1615.05 681.422 L1614.49 681.422 L1613.93 681.422 L1613.37 681.422 L1612.81 681.422 L1612.25 681.422 L1611.69 681.422 L1611.13 681.422 L1610.57 681.422 L1610.02 681.422 L1609.46 681.422 L1608.9 681.422 L1608.34 681.422 L1607.78 681.422 L1607.22 681.422 L1606.66 681.422 L1606.1 681.422 L1605.54 681.422 L1604.98 681.422 L1604.42 681.422 L1603.86 681.422 L1603.3 681.422 L1602.74 681.422 L1602.19 681.422 L1601.63 681.422 L1601.07 681.422 L1600.51 681.422 L1599.95 681.422 L1599.39 681.422 L1598.83 681.422 L1598.27 681.422 L1597.71 681.422 L1597.15 681.422 L1596.59 681.422 L1596.03 681.422 L1595.47 681.422 L1594.92 681.422 L1594.36 681.422 L1593.8 681.422 L1593.24 681.422 L1592.68 681.422 L1592.12 681.422 L1591.56 681.422 L1591 681.422 L1590.44 681.422 L1589.88 681.422 L1589.32 681.422 L1588.76 681.422 L1588.2 681.422 L1587.65 681.422 L1587.09 681.422 L1586.53 681.422 L1585.97 681.422 L1585.41 681.422 L1584.85 681.422 L1584.29 681.422 L1583.73 681.422 L1583.17 681.422 L1582.61 681.422 L1582.05 681.422 L1581.49 681.422 L1580.93 681.422 L1580.37 681.422 L1579.82 681.422 L1579.26 681.422 L1578.7 681.422 L1578.14 681.422 L1577.58 681.422 L1577.02 681.422 L1576.46 681.422 L1575.9 681.422 L1575.34 681.422 L1574.78 681.422 L1574.22 681.422 L1573.66 681.422 L1573.1 681.422 L1572.55 681.422 L1571.99 681.422 L1571.43 681.422 L1570.87 681.422 L1570.31 681.422 L1569.75 681.422 L1569.19 681.422 L1568.63 681.422 L1568.07 681.422 L1567.51 681.422 L1566.95 681.422 L1566.39 681.422 L1565.83 681.422 L1565.28 681.422 L1564.72 681.422 L1564.16 681.422 L1563.6 681.422 L1563.04 681.422 L1562.48 681.422 L1561.92 681.422 L1561.36 681.422 L1560.8 681.422 L1560.24 681.422 L1559.68 681.422 L1559.12 681.422 L1558.56 681.422 L1558 681.422 L1557.45 681.422 L1556.89 681.422 L1556.33 681.422 L1555.77 681.422 L1555.21 681.422 L1554.65 681.422 L1554.09 681.422 L1553.53 681.422 L1552.97 681.422 L1552.41 681.422 L1551.85 681.422 L1551.29 681.422 L1550.73 681.422 L1550.18 681.422 L1549.62 681.422 L1549.06 681.422 L1548.5 681.422 L1547.94 681.422 L1547.38 681.422 L1546.82 681.422 L1546.26 681.422 L1545.7 681.422 L1545.14 681.422 L1544.58 681.422 L1544.02 681.422 L1543.46 681.422 L1542.9 681.422 L1542.35 681.422 L1541.79 681.422 L1541.23 681.422 L1540.67 681.422 L1540.11 681.422 L1539.55 681.422 L1538.99 681.422 L1538.43 681.422 L1537.87 681.422 L1537.31 681.422 L1536.75 681.422 L1536.19 681.422 L1535.63 681.422 L1535.08 681.422 L1534.52 681.422 L1533.96 681.422 L1533.4 681.422 L1532.84 681.422 L1532.28 681.422 L1531.72 681.422 L1531.16 681.422 L1530.6 681.422 L1530.04 681.422 L1529.48 681.422 L1528.92 681.422 L1528.36 681.422 L1527.81 681.422 L1527.25 681.422 L1526.69 681.422 L1526.13 681.422 L1525.57 681.422 L1525.01 681.422 L1524.45 681.422 L1523.89 681.422 L1523.33 681.422 L1522.77 681.422 L1522.21 681.422 L1521.65 681.422 L1521.09 681.422 L1520.53 681.422 L1519.98 681.422 L1519.42 681.422 L1518.86 681.422 L1518.3 681.422 L1517.74 681.422 L1517.18 681.422 L1516.62 681.422 L1516.06 681.422 L1515.5 681.422 L1514.94 681.422 L1514.38 681.422 L1513.82 681.422 L1513.26 681.422 L1512.71 681.422 L1512.15 681.422 L1511.59 681.422 L1511.03 681.422 L1510.47 681.422 L1509.91 681.422 L1509.35 681.422 L1508.79 681.422 L1508.23 681.422 L1507.67 681.422 L1507.11 681.422 L1506.55 681.422 L1505.99 681.422 L1505.44 681.422 L1504.88 681.422 L1504.32 681.422 L1503.76 681.422 L1503.2 681.422 L1502.64 681.422 L1502.08 681.422 L1501.52 681.422 L1500.96 681.422 L1500.4 681.422 L1499.84 681.422 L1499.28 681.422 L1498.72 681.422 L1498.16 681.422 L1497.61 681.422 L1497.05 681.422 L1496.49 681.422 L1495.93 681.422 L1495.37 681.422 L1494.81 681.422 L1494.25 681.422 L1493.69 681.422 L1493.13 681.422 L1492.57 681.422 L1492.01 681.422 L1491.45 681.422 L1490.89 681.422 L1490.34 681.422 L1489.78 681.422 L1489.22 681.422 L1488.66 681.422 L1488.1 681.422 L1487.54 681.422 L1486.98 681.422 L1486.42 681.422 L1485.86 681.422 L1485.3 681.422 L1484.74 681.422 L1484.18 681.422 L1483.62 681.422 L1483.07 681.422 L1482.51 681.422 L1481.95 681.422 L1481.39 681.422 L1480.83 681.422 L1480.27 681.422 L1479.71 681.422 L1479.15 681.422 L1478.59 681.422 L1478.03 681.422 L1477.47 681.422 L1476.91 681.422 L1476.35 681.422 L1475.79 681.422 L1475.24 681.422 L1474.68 681.422 L1474.12 681.422 L1473.56 681.422 L1473 681.422 L1472.44 681.422 L1471.88 681.422 L1471.32 681.422 L1470.76 681.422 L1470.2 681.422 L1469.64 681.422 L1469.08 681.422 L1468.52 681.422 L1467.97 681.422 L1467.41 681.422 L1466.85 681.422 L1466.29 681.422 L1465.73 681.422 L1465.17 681.422 L1464.61 681.422 L1464.05 681.422 L1463.49 681.422 L1462.93 681.422 L1462.37 681.422 L1461.81 681.422 L1461.25 681.422 L1460.7 681.422 L1460.14 681.422 L1459.58 681.422 L1459.02 681.422 L1458.46 681.422 L1457.9 681.422 L1457.34 681.422 L1456.78 681.422 L1456.22 681.422 L1455.66 681.422 L1455.1 681.422 L1454.54 681.422 L1453.98 681.422 L1453.42 681.422 L1452.87 681.422 L1452.31 681.422 L1451.75 681.422 L1451.19 681.422 L1450.63 681.422 L1450.07 681.422 L1449.51 681.422 L1448.95 681.422 L1448.39 681.422 L1447.83 681.422 L1447.27 681.422 L1446.71 681.422 L1446.15 681.422 L1445.6 681.422 L1445.04 681.422 L1444.48 681.422 L1443.92 681.422 L1443.36 681.422 L1442.8 681.422 L1442.24 681.422 L1441.68 681.422 L1441.12 681.422 L1440.56 681.422 L1440 681.422 L1439.44 681.422 L1438.88 681.422 L1438.33 681.422 L1437.77 681.422 L1437.21 681.422 L1436.65 681.422 L1436.09 681.422 L1435.53 681.422 L1434.97 681.422 L1434.41 681.422 L1433.85 681.422 L1433.29 681.422 L1432.73 681.422 L1432.17 681.422 L1431.61 681.422 L1431.05 681.422 L1430.5 681.422 L1429.94 681.422 L1429.38 681.422 L1428.82 681.422 L1428.26 681.422 L1427.7 681.422 L1427.14 681.422 L1426.58 681.422 L1426.02 681.422 L1425.46 681.422 L1424.9 681.422 L1424.34 681.422 L1423.78 681.422 L1423.23 681.422 L1422.67 681.422 L1422.11 681.422 L1421.55 681.422 L1420.99 681.422 L1420.43 681.422 L1419.87 681.422 L1419.31 681.422 L1418.75 681.422 L1418.19 681.422 L1417.63 681.422 L1417.07 681.422 L1416.51 681.422 L1415.95 681.422 L1415.4 681.422 L1414.84 681.422 L1414.28 681.422 L1413.72 681.422 L1413.16 681.422 L1412.6 681.422 L1412.04 681.422 L1411.48 681.422 L1410.92 681.422 L1410.36 681.422 L1409.8 681.422 L1409.24 681.422 L1408.68 681.422 L1408.13 681.422 L1407.57 681.422 L1407.01 681.422 L1406.45 681.422 L1405.89 681.422 L1405.33 681.422 L1404.77 681.422 L1404.21 681.422 L1403.65 681.422 L1403.09 681.422 L1402.53 681.422 L1401.97 681.422 L1401.41 681.422 L1400.86 681.422 L1400.3 681.422 L1399.74 681.422 L1399.18 681.422 L1398.62 681.422 L1398.06 681.422 L1397.5 681.422 L1396.94 681.422 L1396.38 681.422 L1395.82 681.422 L1395.26 681.422 L1394.7 681.422 L1394.14 681.422 L1393.58 681.422 L1393.03 681.422 L1392.47 681.422 L1391.91 681.422 L1391.35 681.422 L1390.79 681.422 L1390.23 681.422 L1389.67 681.422 L1389.11 681.422 L1388.55 681.422 L1387.99 681.422 L1387.43 681.422 L1386.87 681.422 L1386.31 681.422 L1385.76 681.422 L1385.2 681.422 L1384.64 681.422 L1384.08 681.422 L1383.52 681.422 L1382.96 681.422 L1382.4 681.422 L1381.84 681.422 L1381.28 681.422 L1380.72 681.422 L1380.16 681.422 L1379.6 681.422 L1379.04 681.422 L1378.49 681.422 L1377.93 681.422 L1377.37 681.422 L1376.81 681.422 L1376.25 681.422 L1375.69 681.422 L1375.13 681.422 L1374.57 681.422 L1374.01 681.422 L1373.45 681.422 L1372.89 681.422 L1372.33 681.422 L1371.77 681.422 L1371.21 681.422 L1370.66 681.422 L1370.1 681.422 L1369.54 681.422 L1368.98 681.422 L1368.42 681.422 L1367.86 681.422 L1367.3 681.422 L1366.74 681.422 L1366.18 681.422 L1365.62 681.422 L1365.06 681.422 L1364.5 681.422 L1363.94 681.422 L1363.39 681.422 L1362.83 681.422 L1362.27 681.422 L1361.71 681.422 L1361.15 681.422 L1360.59 681.422 L1360.03 681.422 L1359.47 681.422 L1358.91 681.422 L1358.35 681.422 L1357.79 681.422 L1357.23 681.422 L1356.67 681.422 L1356.12 681.422 L1355.56 681.422 L1355 681.422 L1354.44 681.422 L1353.88 681.422 L1353.32 681.422 L1352.76 681.422 L1352.2 681.422 L1351.64 681.422 L1351.08 681.422 L1350.52 681.422 L1349.96 681.422 L1349.4 681.422 L1348.84 681.422 L1348.29 681.422 L1347.73 681.422 L1347.17 681.422 L1346.61 681.422 L1346.05 681.422 L1345.49 681.422 L1344.93 681.422 L1344.37 681.422 L1343.81 681.422 L1343.25 681.422 L1342.69 681.422 L1342.13 681.422 L1341.57 681.422 L1341.02 681.422 L1340.46 681.422 L1339.9 681.422 L1339.34 681.422 L1338.78 681.422 L1338.22 681.422 L1337.66 681.422 L1337.1 681.422 L1336.54 681.422 L1335.98 681.422 L1335.42 681.422 L1334.86 681.422 L1334.3 681.422 L1333.75 681.422 L1333.19 681.422 L1332.63 681.422 L1332.07 681.422 L1331.51 681.422 L1330.95 681.422 L1330.39 681.422 L1329.83 681.422 L1329.27 681.422 L1328.71 681.422 L1328.15 681.422 L1327.59 681.422 L1327.03 681.422 L1326.47 681.422 L1325.92 681.422 L1325.36 681.422 L1324.8 681.422 L1324.24 681.422 L1323.68 681.422 L1323.12 681.422 L1322.56 681.422 L1322 681.422 L1321.44 681.422 L1320.88 681.422 L1320.32 681.422 L1319.76 681.422 L1319.2 681.422 L1318.65 681.422 L1318.09 681.422 L1317.53 681.422 L1316.97 681.422 L1316.41 681.422 L1315.85 681.422 L1315.29 681.422 L1314.73 681.422 L1314.17 681.422 L1313.61 681.422 L1313.05 681.422 L1312.49 681.422 L1311.93 681.422 L1311.38 681.422 L1310.82 681.422 L1310.26 681.422 L1309.7 681.422 L1309.14 681.422 L1308.58 681.422 L1308.02 681.422 L1307.46 681.422 L1306.9 681.422 L1306.34 681.422 L1305.78 681.422 L1305.22 681.422 L1304.66 681.422 L1304.1 681.422 L1303.55 681.422 L1302.99 681.422 L1302.43 681.422 L1301.87 681.422 L1301.31 681.422 L1300.75 681.422 L1300.19 681.422 L1299.63 681.422 L1299.07 681.422 L1298.51 681.422 L1297.95 681.422 L1297.39 681.422 L1296.83 681.422 L1296.28 681.422 L1295.72 681.422 L1295.16 681.422 L1294.6 681.422 L1294.04 681.422 L1293.48 681.422 L1292.92 681.422 L1292.36 681.422 L1291.8 681.422 L1291.24 681.422 L1290.68 681.422 L1290.12 681.422 L1289.56 681.422 L1289 681.422 L1288.45 681.422 L1287.89 681.422 L1287.33 681.422 L1286.77 681.422 L1286.21 681.422 L1285.65 681.422 L1285.09 681.422 L1284.53 681.422 L1283.97 681.422 L1283.41 681.422 L1282.85 681.422 L1282.29 681.422 L1281.73 681.422 L1281.18 681.422 L1280.62 681.422 L1280.06 681.422 L1279.5 681.422 L1278.94 681.422 L1278.38 681.422 L1277.82 681.422 L1277.26 681.422 L1276.7 681.422 L1276.14 681.422 L1275.58 681.422 L1275.02 681.422 L1274.46 681.422 L1273.91 681.422 L1273.35 681.422 L1272.79 681.422 L1272.23 681.422 L1271.67 681.422 L1271.11 681.422 L1270.55 681.422 L1269.99 681.422 L1269.43 681.422 L1268.87 681.422 L1268.31 681.422 L1267.75 681.422 L1267.19 681.422 L1266.63 681.422 L1266.08 681.422 L1265.52 681.422 L1264.96 681.422 L1264.4 681.422 L1263.84 681.422 L1263.28 681.422 L1262.72 681.422 L1262.16 681.422 L1261.6 681.422 L1261.04 681.422 L1260.48 681.422 L1259.92 681.422 L1259.36 681.422 L1258.81 681.422 L1258.25 681.422 L1257.69 681.422 L1257.13 681.422 L1256.57 681.422 L1256.01 681.422 L1255.45 681.422 L1254.89 681.422 L1254.33 681.422 L1253.77 681.422 L1253.21 681.422 L1252.65 681.422 L1252.09 681.422 L1251.54 681.422 L1250.98 681.422 L1250.42 681.422 L1249.86 681.422 L1249.3 681.422 L1248.74 681.422 L1248.18 681.422 L1247.62 681.422 L1247.06 681.422 L1246.5 681.422 L1245.94 681.422 L1245.38 681.422 L1244.82 681.422 L1244.26 681.422 L1243.71 681.422 L1243.15 681.422 L1242.59 681.422 L1242.03 681.422 L1241.47 681.422 L1240.91 681.422 L1240.35 681.422 L1239.79 681.422 L1239.23 681.422 L1238.67 681.422 L1238.11 681.422 L1237.55 681.422 L1236.99 681.422 L1236.44 681.422 L1235.88 681.422 L1235.32 681.422 L1234.76 681.422 L1234.2 681.422 L1233.64 681.422 L1233.08 681.422 L1232.52 681.422 L1231.96 681.422 L1231.4 681.422 L1230.84 681.422 L1230.28 681.422 L1229.72 681.422 L1229.17 681.422 L1228.61 681.422 L1228.05 681.422 L1227.49 681.422 L1226.93 681.422 L1226.37 681.422 L1225.81 681.422 L1225.25 681.422 L1224.69 681.422 L1224.13 681.422 L1223.57 681.422 L1223.01 681.422 L1222.45 681.422 L1221.89 681.422 L1221.34 681.422 L1220.78 681.422 L1220.22 681.422 L1219.66 681.422 L1219.1 681.422 L1218.54 681.422 L1217.98 681.422 L1217.42 681.422 L1216.86 681.422 L1216.3 681.422 L1215.74 681.422 L1215.18 681.422 L1214.62 681.422 L1214.07 681.422 L1213.51 681.422 L1212.95 681.422 L1212.39 681.422 L1211.83 681.422 L1211.27 681.422 L1210.71 681.422 L1210.15 681.422 L1209.59 681.422 L1209.03 681.422 L1208.47 681.422 L1207.91 681.422 L1207.35 681.422 L1206.8 681.422 L1206.24 681.422 L1205.68 681.422 L1205.12 681.422 L1204.56 681.422 L1204 681.422 L1203.44 681.422 L1202.88 681.422 L1202.32 681.422 L1201.76 681.422 L1201.2 681.422 L1200.64 681.422 L1200.08 681.422 L1199.52 681.422 L1198.97 681.422 L1198.41 681.422 L1197.85 681.422 L1197.29 681.422 L1196.73 681.422 L1196.17 681.422 L1195.61 681.422 L1195.05 681.422 L1194.49 681.422 L1193.93 681.422 L1193.37 681.422 L1192.81 681.422 L1192.25 681.422 L1191.7 681.422 L1191.14 681.422 L1190.58 681.422 L1190.02 681.422 L1189.46 681.422 L1188.9 681.422 L1188.34 681.422 L1187.78 681.422 L1187.22 681.422 L1186.66 681.422 L1186.1 681.422 L1185.54 681.422 L1184.98 681.422 L1184.43 681.422 L1183.87 681.422 L1183.31 681.422 L1182.75 681.422 L1182.19 681.422 L1181.63 681.422 L1181.07 681.422 L1180.51 681.422 L1179.95 681.422 L1179.39 681.422 L1178.83 681.422 L1178.27 681.422 L1177.71 681.422 L1177.15 681.422 L1176.6 681.422 L1176.04 681.422 L1175.48 681.422 L1174.92 681.422 L1174.36 681.422 L1173.8 681.422 L1173.24 681.422 L1172.68 681.422 L1172.12 681.422 L1171.56 681.422 L1171 681.422 L1170.44 681.422 L1169.88 681.422 L1169.33 681.422 L1168.77 681.422 L1168.21 681.422 L1167.65 681.422 L1167.09 681.422 L1166.53 681.422 L1165.97 681.422 L1165.41 681.422 L1164.85 681.422 L1164.29 681.422 L1163.73 681.422 L1163.17 681.422 L1162.61 681.422 L1162.05 681.422 L1161.5 681.422 L1160.94 681.422 L1160.38 681.422 L1159.82 681.422 L1159.26 681.422 L1158.7 681.422 L1158.14 681.422 L1157.58 681.422 L1157.02 681.422 L1156.46 681.422 L1155.9 681.422 L1155.34 681.422 L1154.78 681.422 L1154.23 681.422 L1153.67 681.422 L1153.11 681.422 L1152.55 681.422 L1151.99 681.422 L1151.43 681.422 L1150.87 681.422 L1150.31 681.422 L1149.75 681.422 L1149.19 681.422 L1148.63 681.422 L1148.07 681.422 L1147.51 681.422 L1146.96 681.422 L1146.4 681.422 L1145.84 681.422 L1145.28 681.422 L1144.72 681.422 L1144.16 681.422 L1143.6 681.422 L1143.04 681.422 L1142.48 681.422 L1141.92 681.422 L1141.36 681.422 L1140.8 681.422 L1140.24 681.422 L1139.68 681.422 L1139.13 681.422 L1138.57 681.422 L1138.01 681.422 L1137.45 681.422 L1136.89 681.422 L1136.33 681.422 L1135.77 681.422 L1135.21 681.422 L1134.65 681.422 L1134.09 681.422 L1133.53 681.422 L1132.97 681.422 L1132.41 681.422 L1131.86 681.422 L1131.3 681.422 L1130.74 681.422 L1130.18 681.422 L1129.62 681.422 L1129.06 681.422 L1128.5 681.422 L1127.94 681.422 L1127.38 681.422 L1126.82 681.422 L1126.26 681.422 L1125.7 681.422 L1125.14 681.422 L1124.59 681.422 L1124.03 681.422 L1123.47 681.422 L1122.91 681.422 L1122.35 681.422 L1121.79 681.422 L1121.23 681.422 L1120.67 681.422 L1120.11 681.422 L1119.55 681.422 L1118.99 681.422 L1118.43 681.422 L1117.87 681.422 L1117.31 681.422 L1116.76 681.422 L1116.2 681.422 L1115.64 681.422 L1115.08 681.422 L1114.52 681.422 L1113.96 681.422 L1113.4 681.422 L1112.84 681.422 L1112.28 681.422 L1111.72 681.422 L1111.16 681.422 L1110.6 681.422 L1110.04 681.422 L1109.49 681.422 L1108.93 681.422 L1108.37 681.422 L1107.81 681.422 L1107.25 681.422 L1106.69 681.422 L1106.13 681.422 L1105.57 681.422 L1105.01 681.422 L1104.45 681.422 L1103.89 681.422 L1103.33 681.422 L1102.77 681.422 L1102.22 681.422 L1101.66 681.422 L1101.1 681.422 L1100.54 681.422 L1099.98 681.422 L1099.42 681.422 L1098.86 681.422 L1098.3 681.422 L1097.74 681.422 L1097.18 681.422 L1096.62 681.422 L1096.06 681.422 L1095.5 681.422 L1094.94 681.422 L1094.39 681.422 L1093.83 681.422 L1093.27 681.422 L1092.71 681.422 L1092.15 681.422 L1091.59 681.422 L1091.03 681.422 L1090.47 681.422 L1089.91 681.422 L1089.35 681.422 L1088.79 681.422 L1088.23 681.422 L1087.67 681.422 L1087.12 681.422 L1086.56 681.422 L1086 681.422 L1085.44 681.422 L1084.88 681.422 L1084.32 681.422 L1083.76 681.422 L1083.2 681.422 L1082.64 681.422 L1082.08 681.422 L1081.52 681.422 L1080.96 681.422 L1080.4 681.422 L1079.85 681.422 L1079.29 681.422 L1078.73 681.422 L1078.17 681.422 L1077.61 681.422 L1077.05 681.422 L1076.49 681.422 L1075.93 681.422 L1075.37 681.422 L1074.81 681.422 L1074.25 681.422 L1073.69 681.422 L1073.13 681.422 L1072.57 681.422 L1072.02 681.422 L1071.46 681.422 L1070.9 681.422 L1070.34 681.422 L1069.78 681.422 L1069.22 681.422 L1068.66 681.422 L1068.1 681.422 L1067.54 681.422 L1066.98 681.422 L1066.42 681.422 L1065.86 681.422 L1065.3 681.422 L1064.75 681.422 L1064.19 681.422 L1063.63 681.422 L1063.07 681.422 L1062.51 681.422 L1061.95 681.422 L1061.39 681.422 L1060.83 681.422 L1060.27 681.422 L1059.71 681.422 L1059.15 681.422 L1058.59 681.422 L1058.03 681.422 L1057.48 681.422 L1056.92 681.422 L1056.36 681.422 L1055.8 681.422 L1055.24 681.422 L1054.68 681.422 L1054.12 681.422 L1053.56 681.422 L1053 681.422 L1052.44 681.422 L1051.88 681.422 L1051.32 681.422 L1050.76 681.422 L1050.2 681.422 L1049.65 681.422 L1049.09 681.422 L1048.53 681.422 L1047.97 681.422 L1047.41 681.422 L1046.85 681.422 L1046.29 681.422 L1045.73 681.422 L1045.17 681.422 L1044.61 681.422 L1044.05 681.422 L1043.49 681.422 L1042.93 681.422 L1042.38 681.422 L1041.82 681.422 L1041.26 681.422 L1040.7 681.422 L1040.14 681.422 L1039.58 681.422 L1039.02 681.422 L1038.46 681.422 L1037.9 681.422 L1037.34 681.422 L1036.78 681.422 L1036.22 681.422 L1035.66 681.422 L1035.1 681.422 L1034.55 681.422 L1033.99 681.422 L1033.43 681.422 L1032.87 681.422 L1032.31 681.422 L1031.75 681.422 L1031.19 681.422 L1030.63 681.422 L1030.07 681.422 L1029.51 681.422 L1028.95 681.422 L1028.39 681.422 L1027.83 681.422 L1027.28 681.422 L1026.72 681.422 L1026.16 681.422 L1025.6 681.422 L1025.04 681.422 L1024.48 681.422 L1023.92 681.422 L1023.36 681.422 L1022.8 681.422 L1022.24 681.422 L1021.68 681.422 L1021.12 681.422 L1020.56 681.422 L1020.01 681.422 L1019.45 681.422 L1018.89 681.422 L1018.33 681.422 L1017.77 681.422 L1017.21 681.422 L1016.65 681.422 L1016.09 681.422 L1015.53 681.422 L1014.97 681.422 L1014.41 681.422 L1013.85 681.422 L1013.29 681.422 L1012.73 681.422 L1012.18 681.422 L1011.62 681.422 L1011.06 681.422 L1010.5 681.422 L1009.94 681.422 L1009.38 681.422 L1008.82 681.422 L1008.26 681.422 L1007.7 681.422 L1007.14 681.422 L1006.58 681.422 L1006.02 681.422 L1005.46 681.422 L1004.91 681.422 L1004.35 681.422 L1003.79 681.422 L1003.23 681.422 L1002.67 681.422 L1002.11 681.422 L1001.55 681.422 L1000.99 681.422 L1000.43 681.422 L999.872 681.422 L999.313 681.422 L998.754 681.422 L998.194 681.422 L997.635 681.422 L997.076 681.422 L996.517 681.422 L995.957 681.422 L995.398 681.422 L994.839 681.422 L994.28 681.422 L993.72 681.422 L993.161 681.422 L992.602 681.422 L992.043 681.422 L991.483 681.422 L990.924 681.422 L990.365 681.422 L989.806 681.422 L989.246 681.422 L988.687 681.422 L988.128 681.422 L987.569 681.422 L987.009 681.422 L986.45 681.422 L985.891 681.422 L985.332 681.422 L984.772 681.422 L984.213 681.422 L983.654 681.422 L983.095 681.422 L982.535 681.422 L981.976 681.422 L981.417 681.422 L980.858 681.422 L980.298 681.422 L979.739 681.422 L979.18 681.422 L978.621 681.422 L978.061 681.422 L977.502 681.422 L976.943 681.422 L976.384 681.422 L975.824 681.422 L975.265 681.422 L974.706 681.422 L974.147 681.422 L973.587 681.422 L973.028 681.422 L972.469 681.422 L971.91 681.422 L971.35 681.422 L970.791 681.422 L970.232 681.422 L969.673 681.422 L969.113 681.422 L968.554 681.422 L967.995 681.422 L967.436 681.422 L966.876 681.422 L966.317 681.422 L965.758 681.422 L965.199 681.422 L964.639 681.422 L964.08 681.422 L963.521 681.422 L962.962 681.422 L962.402 681.422 L961.843 681.422 L961.284 681.422 L960.725 681.422 L960.165 681.422 L959.606 681.422 L959.047 681.422 L958.488 681.422 L957.928 681.422 L957.369 681.422 L956.81 681.422 L956.251 681.422 L955.691 681.422 L955.132 681.422 L954.573 681.422 L954.014 681.422 L953.454 681.422 L952.895 681.422 L952.336 681.422 L951.777 681.422 L951.217 681.422 L950.658 681.422 L950.099 681.422 L949.54 681.422 L948.98 681.422 L948.421 681.422 L947.862 681.422 L947.303 681.422 L946.743 681.422 L946.184 681.422 L945.625 681.422 L945.066 681.422 L944.506 681.422 L943.947 681.422 L943.388 681.422 L942.829 681.422 L942.269 681.422 L941.71 681.422 L941.151 681.422 L940.592 681.422 L940.032 681.422 L939.473 681.422 L938.914 681.422 L938.355 681.422 L937.795 681.422 L937.236 681.422 L936.677 681.422 L936.118 681.422 L935.558 681.422 L934.999 681.422 L934.44 681.422 L933.881 681.422 L933.321 681.422 L932.762 681.422 L932.203 681.422 L931.644 681.422 L931.084 681.422 L930.525 681.422 L929.966 681.422 L929.406 681.422 L928.847 681.422 L928.288 681.422 L927.729 681.422 L927.169 681.422 L926.61 681.422 L926.051 681.422 L925.492 681.422 L924.932 681.422 L924.373 681.422 L923.814 681.422 L923.255 681.422 L922.695 681.422 L922.136 681.422 L921.577 681.422 L921.018 681.422 L920.458 681.422 L919.899 681.422 L919.34 681.422 L918.781 681.422 L918.221 681.422 L917.662 681.422 L917.103 681.422 L916.544 681.422 L915.984 681.422 L915.425 681.422 L914.866 681.422 L914.307 681.422 L913.747 681.422 L913.188 681.422 L912.629 681.422 L912.07 681.422 L911.51 681.422 L910.951 681.422 L910.392 681.422 L909.833 681.422 L909.273 681.422 L908.714 681.422 L908.155 681.422 L907.596 681.422 L907.036 681.422 L906.477 681.422 L905.918 681.422 L905.359 681.422 L904.799 681.422 L904.24 681.422 L903.681 681.422 L903.122 681.422 L902.562 681.422 L902.003 681.422 L901.444 681.422 L900.885 681.422 L900.325 681.422 L899.766 681.422 L899.207 681.422 L898.648 681.422 L898.088 681.422 L897.529 681.422 L896.97 681.422 L896.411 681.422 L895.851 681.422 L895.292 681.422 L894.733 681.422 L894.174 681.422 L893.614 681.422 L893.055 681.422 L892.496 681.422 L891.937 681.422 L891.377 681.422 L890.818 681.422 L890.259 681.422 L889.7 681.422 L889.14 681.422 L888.581 681.422 L888.022 681.422 L887.463 681.422 L886.903 681.422 L886.344 681.422 L885.785 681.422 L885.226 681.422 L884.666 681.422 L884.107 681.422 L883.548 681.422 L882.989 681.422 L882.429 681.422 L881.87 681.422 L881.311 681.422 L880.752 681.422 L880.192 681.422 L879.633 681.422 L879.074 681.422 L878.515 681.422 L877.955 681.422 L877.396 681.422 L876.837 681.422 L876.278 681.422 L875.718 681.422 L875.159 681.422 L874.6 681.422 L874.041 681.422 L873.481 681.422 L872.922 681.422 L872.363 681.422 L871.804 681.422 L871.244 681.422 L870.685 681.422 L870.126 681.422 L869.567 681.422 L869.007 681.422 L868.448 681.422 L867.889 681.422 L867.33 681.422 L866.77 681.422 L866.211 681.422 L865.652 681.422 L865.093 681.422 L864.533 681.422 L863.974 681.422 L863.415 681.422 L862.856 681.422 L862.296 681.422 L861.737 681.422 L861.178 681.422 L860.619 681.422 L860.059 681.422 L859.5 681.422 L858.941 681.422 L858.382 681.422 L857.822 681.422 L857.263 681.422 L856.704 681.422 L856.145 681.422 L855.585 681.422 L855.026 681.422 L854.467 681.422 L853.908 681.422 L853.348 681.422 L852.789 681.422 L852.23 681.422 L851.671 681.422 L851.111 681.422 L850.552 681.422 L849.993 681.422 L849.434 681.422 L848.874 681.422 L848.315 681.422 L847.756 681.422 L847.197 681.422 L846.637 681.422 L846.078 681.422 L845.519 681.422 L844.96 681.422 L844.4 681.422 L843.841 681.422 L843.282 681.422 L842.723 681.422 L842.163 681.422 L841.604 681.422 L841.045 681.422 L840.486 681.422 L839.926 681.422 L839.367 681.422 L838.808 681.422 L838.249 681.422 L837.689 681.422 L837.13 681.422 L836.571 681.422 L836.012 681.422 L835.452 681.422 L834.893 681.422 L834.334 681.422 L833.775 681.422 L833.215 681.422 L832.656 681.422 L832.097 681.422 L831.538 681.422 L830.978 681.422 L830.419 681.422 L829.86 681.422 L829.301 681.422 L828.741 681.422 L828.182 681.422 L827.623 681.422 L827.064 681.422 L826.504 681.422 L825.945 681.422 L825.386 681.422 L824.827 681.422 L824.267 681.422 L823.708 681.422 L823.149 681.422 L822.59 681.422 L822.03 681.422 L821.471 681.422 L820.912 681.422 L820.353 681.422 L819.793 681.422 L819.234 681.422 L818.675 681.422 L818.116 681.422 L817.556 681.422 L816.997 681.422 L816.438 681.422 L815.879 681.422 L815.319 681.422 L814.76 681.422 L814.201 681.422 L813.642 681.422 L813.082 681.422 L812.523 681.422 L811.964 681.422 L811.405 681.422 L810.845 681.422 L810.286 681.422 L809.727 681.422 L809.168 681.422 L808.608 681.422 L808.049 681.422 L807.49 681.422 L806.931 681.422 L806.371 681.422 L805.812 681.422 L805.253 681.422 L804.693 681.422 L804.134 681.422 L803.575 681.422 L803.016 681.422 L802.456 681.422 L801.897 681.422 L801.338 681.422 L800.779 681.422 L800.219 681.422 L799.66 681.422 L799.101 681.422 L798.542 681.422 L797.982 681.422 L797.423 681.422 L796.864 681.422 L796.305 681.422 L795.745 681.422 L795.186 681.422 L794.627 681.422 L794.068 681.422 L793.508 681.422 L792.949 681.422 L792.39 681.422 L791.831 681.422 L791.271 681.422 L790.712 681.422 L790.153 681.422 L789.594 681.422 L789.034 681.422 L788.475 681.422 L787.916 681.422 L787.357 681.422 L786.797 681.422 L786.238 681.422 L785.679 681.422 L785.12 681.422 L784.56 681.422 L784.001 681.422 L783.442 681.422 L782.883 681.422 L782.323 681.422 L781.764 681.422 L781.205 681.422 L780.646 681.422 L780.086 681.422 L779.527 681.422 L778.968 681.422 L778.409 681.422 L777.849 681.422 L777.29 681.422 L776.731 681.422 L776.172 681.422 L775.612 681.422 L775.053 681.422 L774.494 681.422 L773.935 681.422 L773.375 681.422 L772.816 681.422 L772.257 681.422 L771.698 681.422 L771.138 681.422 L770.579 681.422 L770.02 681.422 L769.461 681.422 L768.901 681.422 L768.342 681.422 L767.783 681.422 L767.224 681.422 L766.664 681.422 L766.105 681.422 L765.546 681.422 L764.987 681.422 L764.427 681.422 L763.868 681.422 L763.309 681.422 L762.75 681.422 L762.19 681.422 L761.631 681.422 L761.072 681.422 L760.513 681.422 L759.953 681.422 L759.394 681.422 L758.835 681.422 L758.276 681.422 L757.716 681.422 L757.157 681.422 L756.598 681.422 L756.039 681.422 L755.479 681.422 L754.92 681.422 L754.361 681.422 L753.802 681.422 L753.242 681.422 L752.683 681.422 L752.124 681.422 L751.565 681.422 L751.005 681.422 L750.446 681.422 L749.887 681.422 L749.328 681.422 L748.768 681.422 L748.209 681.422 L747.65 681.422 L747.091 681.422 L746.531 681.422 L745.972 681.422 L745.413 681.422 L744.854 681.422 L744.294 681.422 L743.735 681.422 L743.176 681.422 L742.617 681.422 L742.057 681.422 L741.498 681.422 L740.939 681.422 L740.38 681.422 L739.82 681.422 L739.261 681.422 L738.702 681.422 L738.143 681.422 L737.583 681.422 L737.024 681.422 L736.465 681.422 L735.906 681.422 L735.346 681.422 L734.787 681.422 L734.228 681.422 L733.669 681.422 L733.109 681.422 L732.55 681.422 L731.991 681.422 L731.432 681.422 L730.872 681.422 L730.313 681.422 L729.754 681.422 L729.195 681.422 L728.635 681.422 L728.076 681.422 L727.517 681.422 L726.958 681.422 L726.398 681.422 L725.839 681.422 L725.28 681.422 L724.721 681.422 L724.161 681.422 L723.602 681.422 L723.043 681.422 L722.484 681.422 L721.924 681.422 L721.365 681.422 L720.806 681.422 L720.247 681.422  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip363)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.718 720.806,685.718 721.365,685.718 721.924,685.718 722.484,685.718 723.043,685.718 723.602,685.718 724.161,685.718 724.721,685.718 725.28,685.718 725.839,685.718 726.398,685.718 726.958,685.718 727.517,685.718 728.076,685.718 728.635,685.718 729.195,685.718 729.754,685.718 730.313,685.718 730.872,685.718 731.432,685.718 731.991,685.718 732.55,685.718 733.109,685.718 733.669,685.718 734.228,685.718 734.787,685.718 735.346,685.718 735.906,685.718 736.465,685.718 737.024,685.718 737.583,685.718 738.143,685.718 738.702,685.718 739.261,685.718 739.82,685.718 740.38,685.718 740.939,685.718 741.498,685.718 742.057,685.718 742.617,685.718 743.176,685.718 743.735,685.718 744.294,685.718 744.854,685.718 745.413,685.718 745.972,685.718 746.531,685.718 747.091,685.718 747.65,685.718 748.209,685.718 748.768,685.718 749.328,685.718 749.887,685.718 750.446,685.718 751.005,685.718 751.565,685.718 752.124,685.718 752.683,685.718 753.242,685.718 753.802,685.718 754.361,685.718 754.92,685.718 755.479,685.718 756.039,685.718 756.598,685.718 757.157,685.718 757.716,685.718 758.276,685.718 758.835,685.718 759.394,685.718 759.953,685.718 760.513,685.718 761.072,685.718 761.631,685.718 762.19,685.718 762.75,685.718 763.309,685.718 763.868,685.718 764.427,685.718 764.987,685.718 765.546,685.718 766.105,685.718 766.664,685.718 767.224,685.718 767.783,685.718 768.342,685.718 768.901,685.718 769.461,685.718 770.02,685.718 770.579,685.718 771.138,685.718 771.698,685.718 772.257,685.718 772.816,685.718 773.375,685.718 773.935,685.718 774.494,685.718 775.053,685.718 775.612,685.718 776.172,685.718 776.731,685.718 777.29,685.718 777.849,685.718 778.409,685.718 778.968,685.718 779.527,685.718 780.086,685.718 780.646,685.718 781.205,685.718 781.764,685.718 782.323,685.718 782.883,685.718 783.442,685.718 784.001,685.718 784.56,685.718 785.12,685.718 785.679,685.718 786.238,685.718 786.797,685.718 787.357,685.718 787.916,685.718 788.475,685.718 789.034,685.718 789.594,685.718 790.153,685.718 790.712,685.718 791.271,685.718 791.831,685.718 792.39,685.718 792.949,685.718 793.508,685.718 794.068,685.718 794.627,685.718 795.186,685.718 795.745,685.718 796.305,685.718 796.864,685.718 797.423,685.718 797.982,685.718 798.542,685.718 799.101,685.718 799.66,685.718 800.219,685.718 800.779,685.718 801.338,685.718 801.897,685.718 802.456,685.718 803.016,685.718 803.575,685.718 804.134,685.718 804.693,685.718 805.253,685.718 805.812,685.718 806.371,685.718 806.931,685.718 807.49,685.718 808.049,685.718 808.608,685.718 809.168,685.718 809.727,685.718 810.286,685.718 810.845,685.718 811.405,685.718 811.964,685.718 812.523,685.718 813.082,685.718 813.642,685.718 814.201,685.718 814.76,685.718 815.319,685.718 815.879,685.718 816.438,685.718 816.997,685.718 817.556,685.718 818.116,685.718 818.675,685.718 819.234,685.718 819.793,685.718 820.353,685.718 820.912,685.718 821.471,685.718 822.03,685.718 822.59,685.718 823.149,685.718 823.708,685.718 824.267,685.718 824.827,685.718 825.386,685.718 825.945,685.718 826.504,685.718 827.064,685.718 827.623,685.718 828.182,685.718 828.741,685.718 829.301,685.718 829.86,685.718 830.419,685.718 830.978,685.718 831.538,685.718 832.097,685.718 832.656,685.718 833.215,685.718 833.775,685.718 834.334,685.718 834.893,685.718 835.452,685.718 836.012,685.718 836.571,685.718 837.13,685.718 837.689,685.718 838.249,685.718 838.808,685.718 839.367,685.718 839.926,685.718 840.486,685.718 841.045,685.718 841.604,685.718 842.163,685.718 842.723,685.718 843.282,685.718 843.841,685.718 844.4,685.718 844.96,685.718 845.519,685.718 846.078,685.718 846.637,685.718 847.197,685.718 847.756,685.718 848.315,685.718 848.874,685.718 849.434,685.718 849.993,685.718 850.552,685.718 851.111,685.718 851.671,685.718 852.23,685.718 852.789,685.718 853.348,685.718 853.908,685.718 854.467,685.718 855.026,685.718 855.585,685.718 856.145,685.718 856.704,685.718 857.263,685.718 857.822,685.718 858.382,685.718 858.941,685.718 859.5,685.718 860.059,685.718 860.619,685.718 861.178,685.718 861.737,685.718 862.296,685.718 862.856,685.718 863.415,685.718 863.974,685.718 864.533,685.718 865.093,685.718 865.652,685.718 866.211,685.718 866.77,685.718 867.33,685.718 867.889,685.718 868.448,685.718 869.007,685.718 869.567,685.718 870.126,685.718 870.685,685.718 871.244,685.718 871.804,685.718 872.363,685.718 872.922,685.718 873.481,685.718 874.041,685.718 874.6,685.718 875.159,685.718 875.718,685.718 876.278,685.718 876.837,685.718 877.396,685.718 877.955,685.718 878.515,685.718 879.074,685.718 879.633,685.718 880.192,685.718 880.752,685.718 881.311,685.718 881.87,685.718 882.429,685.718 882.989,685.718 883.548,685.718 884.107,685.718 884.666,685.718 885.226,685.718 885.785,685.718 886.344,685.718 886.903,685.718 887.463,685.718 888.022,685.718 888.581,685.718 889.14,685.718 889.7,685.718 890.259,685.718 890.818,685.718 891.377,685.718 891.937,685.718 892.496,685.718 893.055,685.718 893.614,685.718 894.174,685.718 894.733,685.718 895.292,685.718 895.851,685.718 896.411,685.718 896.97,685.718 897.529,685.718 898.088,685.718 898.648,685.718 899.207,685.718 899.766,685.718 900.325,685.718 900.885,685.718 901.444,685.718 902.003,685.718 902.562,685.718 903.122,685.718 903.681,685.718 904.24,685.718 904.799,685.718 905.359,685.718 905.918,685.718 906.477,685.718 907.036,685.718 907.596,685.718 908.155,685.718 908.714,685.718 909.273,685.718 909.833,685.718 910.392,685.718 910.951,685.718 911.51,685.718 912.07,685.718 912.629,685.718 913.188,685.718 913.747,685.718 914.307,685.718 914.866,685.718 915.425,685.718 915.984,685.718 916.544,685.718 917.103,685.718 917.662,685.718 918.221,685.718 918.781,685.718 919.34,685.718 919.899,685.718 920.458,685.718 921.018,685.718 921.577,685.718 922.136,685.718 922.695,685.718 923.255,685.718 923.814,685.718 924.373,685.718 924.932,685.718 925.492,685.718 926.051,685.718 926.61,685.718 927.169,685.718 927.729,685.718 928.288,685.718 928.847,685.718 929.406,685.718 929.966,685.718 930.525,685.718 931.084,685.718 931.644,685.718 932.203,685.718 932.762,685.718 933.321,685.718 933.881,685.718 934.44,685.718 934.999,685.718 935.558,685.718 936.118,685.718 936.677,685.718 937.236,685.718 937.795,685.718 938.355,685.718 938.914,685.718 939.473,685.718 940.032,685.718 940.592,685.718 941.151,685.718 941.71,685.718 942.269,685.718 942.829,685.718 943.388,685.718 943.947,685.718 944.506,685.718 945.066,685.718 945.625,685.718 946.184,685.718 946.743,685.718 947.303,685.718 947.862,685.718 948.421,685.718 948.98,685.718 949.54,685.718 950.099,685.718 950.658,685.718 951.217,685.718 951.777,685.718 952.336,685.718 952.895,685.718 953.454,685.718 954.014,685.718 954.573,685.718 955.132,685.718 955.691,685.718 956.251,685.718 956.81,685.718 957.369,685.718 957.928,685.718 958.488,685.718 959.047,685.718 959.606,685.718 960.165,685.718 960.725,685.718 961.284,685.718 961.843,685.718 962.402,685.718 962.962,685.718 963.521,685.718 964.08,685.718 964.639,685.718 965.199,685.718 965.758,685.718 966.317,685.718 966.876,685.718 967.436,685.718 967.995,685.718 968.554,685.718 969.113,685.718 969.673,685.718 970.232,685.718 970.791,685.718 971.35,685.718 971.91,685.718 972.469,685.718 973.028,685.718 973.587,685.718 974.147,685.718 974.706,685.718 975.265,685.718 975.824,685.718 976.384,685.718 976.943,685.718 977.502,685.718 978.061,685.718 978.621,685.718 979.18,685.718 979.739,685.718 980.298,685.718 980.858,685.718 981.417,685.718 981.976,685.718 982.535,685.718 983.095,685.718 983.654,685.718 984.213,685.718 984.772,685.718 985.332,685.718 985.891,685.718 986.45,685.718 987.009,685.718 987.569,685.718 988.128,685.718 988.687,685.718 989.246,685.718 989.806,685.718 990.365,685.718 990.924,685.718 991.483,685.718 992.043,685.718 992.602,685.718 993.161,685.718 993.72,685.718 994.28,685.718 994.839,685.718 995.398,685.718 995.957,685.718 996.517,685.718 997.076,685.718 997.635,685.718 998.194,685.718 998.754,685.718 999.313,685.718 999.872,685.718 1000.43,685.718 1000.99,685.718 1001.55,685.718 1002.11,685.718 1002.67,685.718 1003.23,685.718 1003.79,685.718 1004.35,685.718 1004.91,685.718 1005.46,685.718 1006.02,685.718 1006.58,685.718 1007.14,685.718 1007.7,685.718 1008.26,685.718 1008.82,685.718 1009.38,685.718 1009.94,685.718 1010.5,685.718 1011.06,685.718 1011.62,685.718 1012.18,685.718 1012.73,685.718 1013.29,685.718 1013.85,685.718 1014.41,685.718 1014.97,685.718 1015.53,685.718 1016.09,685.718 1016.65,685.718 1017.21,685.718 1017.77,685.718 1018.33,685.718 1018.89,685.718 1019.45,685.718 1020.01,685.718 1020.56,685.718 1021.12,685.718 1021.68,685.718 1022.24,685.718 1022.8,685.718 1023.36,685.718 1023.92,685.718 1024.48,685.718 1025.04,685.718 1025.6,685.718 1026.16,685.718 1026.72,685.718 1027.28,685.718 1027.83,685.718 1028.39,685.718 1028.95,685.718 1029.51,685.718 1030.07,685.718 1030.63,685.718 1031.19,685.718 1031.75,685.718 1032.31,685.718 1032.87,685.718 1033.43,685.718 1033.99,685.718 1034.55,685.718 1035.1,685.718 1035.66,685.718 1036.22,685.718 1036.78,685.718 1037.34,685.718 1037.9,685.718 1038.46,685.718 1039.02,685.718 1039.58,685.718 1040.14,685.718 1040.7,685.718 1041.26,685.718 1041.82,685.718 1042.38,685.718 1042.93,685.718 1043.49,685.718 1044.05,685.718 1044.61,685.718 1045.17,685.718 1045.73,685.718 1046.29,685.718 1046.85,685.718 1047.41,685.718 1047.97,685.718 1048.53,685.718 1049.09,685.718 1049.65,685.718 1050.2,685.718 1050.76,685.718 1051.32,685.718 1051.88,685.718 1052.44,685.718 1053,685.718 1053.56,685.718 1054.12,685.718 1054.68,685.718 1055.24,685.718 1055.8,685.718 1056.36,685.718 1056.92,685.718 1057.48,685.718 1058.03,685.718 1058.59,685.718 1059.15,685.718 1059.71,685.718 1060.27,685.718 1060.83,685.718 1061.39,685.718 1061.95,685.718 1062.51,685.718 1063.07,685.718 1063.63,685.718 1064.19,685.718 1064.75,685.718 1065.3,685.718 1065.86,685.718 1066.42,685.718 1066.98,685.718 1067.54,685.718 1068.1,685.718 1068.66,685.718 1069.22,685.718 1069.78,685.718 1070.34,685.718 1070.9,685.718 1071.46,685.718 1072.02,685.718 1072.57,685.718 1073.13,685.718 1073.69,685.718 1074.25,685.718 1074.81,685.718 1075.37,685.718 1075.93,685.718 1076.49,685.718 1077.05,685.718 1077.61,685.718 1078.17,685.718 1078.73,685.718 1079.29,685.718 1079.85,685.718 1080.4,685.718 1080.96,685.718 1081.52,685.718 1082.08,685.718 1082.64,685.718 1083.2,685.718 1083.76,685.718 1084.32,685.718 1084.88,685.718 1085.44,685.718 1086,685.718 1086.56,685.718 1087.12,685.718 1087.67,685.718 1088.23,685.718 1088.79,685.718 1089.35,685.718 1089.91,685.718 1090.47,685.718 1091.03,685.718 1091.59,685.718 1092.15,685.718 1092.71,685.718 1093.27,685.718 1093.83,685.718 1094.39,685.718 1094.94,685.718 1095.5,685.718 1096.06,685.718 1096.62,685.718 1097.18,685.718 1097.74,685.718 1098.3,685.718 1098.86,685.718 1099.42,685.718 1099.98,685.718 1100.54,685.718 1101.1,685.718 1101.66,685.718 1102.22,685.718 1102.77,685.718 1103.33,685.718 1103.89,685.718 1104.45,685.718 1105.01,685.718 1105.57,685.718 1106.13,685.718 1106.69,685.718 1107.25,685.718 1107.81,685.718 1108.37,685.718 1108.93,685.718 1109.49,685.718 1110.04,685.718 1110.6,685.718 1111.16,685.718 1111.72,685.718 1112.28,685.718 1112.84,685.718 1113.4,685.718 1113.96,685.718 1114.52,685.718 1115.08,685.718 1115.64,685.718 1116.2,685.718 1116.76,685.718 1117.31,685.718 1117.87,685.718 1118.43,685.718 1118.99,685.718 1119.55,685.718 1120.11,685.718 1120.67,685.718 1121.23,685.718 1121.79,685.718 1122.35,685.718 1122.91,685.718 1123.47,685.718 1124.03,685.718 1124.59,685.718 1125.14,685.718 1125.7,685.718 1126.26,685.718 1126.82,685.718 1127.38,685.718 1127.94,685.718 1128.5,685.718 1129.06,685.718 1129.62,685.718 1130.18,685.718 1130.74,685.718 1131.3,685.718 1131.86,685.718 1132.41,685.718 1132.97,685.718 1133.53,685.718 1134.09,685.718 1134.65,685.718 1135.21,685.718 1135.77,685.718 1136.33,685.718 1136.89,685.718 1137.45,685.718 1138.01,685.718 1138.57,685.718 1139.13,685.718 1139.68,685.718 1140.24,685.718 1140.8,685.718 1141.36,685.718 1141.92,685.718 1142.48,685.718 1143.04,685.718 1143.6,685.718 1144.16,685.718 1144.72,685.718 1145.28,685.718 1145.84,685.718 1146.4,685.718 1146.96,685.718 1147.51,685.718 1148.07,685.718 1148.63,685.718 1149.19,685.718 1149.75,685.718 1150.31,685.718 1150.87,685.718 1151.43,685.718 1151.99,685.718 1152.55,685.718 1153.11,685.718 1153.67,685.718 1154.23,685.718 1154.78,685.718 1155.34,685.718 1155.9,685.718 1156.46,685.718 1157.02,685.718 1157.58,685.718 1158.14,685.718 1158.7,685.718 1159.26,685.718 1159.82,685.718 1160.38,685.718 1160.94,685.718 1161.5,685.718 1162.05,685.718 1162.61,685.718 1163.17,685.718 1163.73,685.718 1164.29,685.718 1164.85,685.718 1165.41,685.718 1165.97,685.718 1166.53,685.718 1167.09,685.718 1167.65,685.718 1168.21,685.718 1168.77,685.718 1169.33,685.718 1169.88,685.718 1170.44,685.718 1171,685.718 1171.56,685.718 1172.12,685.718 1172.68,685.718 1173.24,685.718 1173.8,685.718 1174.36,685.718 1174.92,685.718 1175.48,685.718 1176.04,685.718 1176.6,685.718 1177.15,685.718 1177.71,685.718 1178.27,685.718 1178.83,685.718 1179.39,685.718 1179.95,685.718 1180.51,685.718 1181.07,685.718 1181.63,685.718 1182.19,685.718 1182.75,685.718 1183.31,685.718 1183.87,685.718 1184.43,685.718 1184.98,685.718 1185.54,685.718 1186.1,685.718 1186.66,685.718 1187.22,685.718 1187.78,685.718 1188.34,685.718 1188.9,685.718 1189.46,685.718 1190.02,685.718 1190.58,685.718 1191.14,685.718 1191.7,685.718 1192.25,685.718 1192.81,685.718 1193.37,685.718 1193.93,685.718 1194.49,685.718 1195.05,685.718 1195.61,685.718 1196.17,685.718 1196.73,685.718 1197.29,685.718 1197.85,685.718 1198.41,685.718 1198.97,685.718 1199.52,685.718 1200.08,685.718 1200.64,685.718 1201.2,685.718 1201.76,685.718 1202.32,685.718 1202.88,685.718 1203.44,685.718 1204,685.718 1204.56,685.718 1205.12,685.718 1205.68,685.718 1206.24,685.718 1206.8,685.718 1207.35,685.718 1207.91,685.718 1208.47,685.718 1209.03,685.718 1209.59,685.718 1210.15,685.718 1210.71,685.718 1211.27,685.718 1211.83,685.718 1212.39,685.718 1212.95,685.718 1213.51,685.718 1214.07,685.718 1214.62,685.718 1215.18,685.718 1215.74,685.718 1216.3,685.718 1216.86,685.718 1217.42,685.718 1217.98,685.718 1218.54,685.718 1219.1,685.718 1219.66,685.718 1220.22,685.718 1220.78,685.718 1221.34,685.718 1221.89,685.718 1222.45,685.718 1223.01,685.718 1223.57,685.718 1224.13,685.718 1224.69,685.718 1225.25,685.718 1225.81,685.718 1226.37,685.718 1226.93,685.718 1227.49,685.718 1228.05,685.718 1228.61,685.718 1229.17,685.718 1229.72,685.718 1230.28,685.718 1230.84,685.718 1231.4,685.718 1231.96,685.718 1232.52,685.718 1233.08,685.718 1233.64,685.718 1234.2,685.718 1234.76,685.718 1235.32,685.718 1235.88,685.718 1236.44,685.718 1236.99,685.718 1237.55,685.718 1238.11,685.718 1238.67,685.718 1239.23,685.718 1239.79,685.718 1240.35,685.718 1240.91,685.718 1241.47,685.718 1242.03,685.718 1242.59,685.718 1243.15,685.718 1243.71,685.718 1244.26,685.718 1244.82,685.718 1245.38,685.718 1245.94,685.718 1246.5,685.718 1247.06,685.718 1247.62,685.718 1248.18,685.718 1248.74,685.718 1249.3,685.718 1249.86,685.718 1250.42,685.718 1250.98,685.718 1251.54,685.718 1252.09,685.718 1252.65,685.718 1253.21,685.718 1253.77,685.718 1254.33,685.718 1254.89,685.718 1255.45,685.718 1256.01,685.718 1256.57,685.718 1257.13,685.718 1257.69,685.718 1258.25,685.718 1258.81,685.718 1259.36,685.718 1259.92,685.718 1260.48,685.718 1261.04,685.718 1261.6,685.718 1262.16,685.718 1262.72,685.718 1263.28,685.718 1263.84,685.718 1264.4,685.718 1264.96,685.718 1265.52,685.718 1266.08,685.718 1266.63,685.718 1267.19,685.718 1267.75,685.718 1268.31,685.718 1268.87,685.718 1269.43,685.718 1269.99,685.718 1270.55,685.718 1271.11,685.718 1271.67,685.718 1272.23,685.718 1272.79,685.718 1273.35,685.718 1273.91,685.718 1274.46,685.718 1275.02,685.718 1275.58,685.718 1276.14,685.718 1276.7,685.718 1277.26,685.718 1277.82,685.718 1278.38,685.718 1278.94,685.718 1279.5,685.718 1280.06,685.718 1280.62,685.718 1281.18,685.718 1281.73,685.718 1282.29,685.718 1282.85,685.718 1283.41,685.718 1283.97,685.718 1284.53,685.718 1285.09,685.718 1285.65,685.718 1286.21,685.718 1286.77,685.718 1287.33,685.718 1287.89,685.718 1288.45,685.718 1289,685.718 1289.56,685.718 1290.12,685.718 1290.68,685.718 1291.24,685.718 1291.8,685.718 1292.36,685.718 1292.92,685.718 1293.48,685.718 1294.04,685.718 1294.6,685.718 1295.16,685.718 1295.72,685.718 1296.28,685.718 1296.83,685.718 1297.39,685.718 1297.95,685.718 1298.51,685.718 1299.07,685.718 1299.63,685.718 1300.19,685.718 1300.75,685.718 1301.31,685.718 1301.87,685.718 1302.43,685.718 1302.99,685.718 1303.55,685.718 1304.1,685.718 1304.66,685.718 1305.22,685.718 1305.78,685.718 1306.34,685.718 1306.9,685.718 1307.46,685.718 1308.02,685.718 1308.58,685.718 1309.14,685.718 1309.7,685.718 1310.26,685.718 1310.82,685.718 1311.38,685.718 1311.93,685.718 1312.49,685.718 1313.05,685.718 1313.61,685.718 1314.17,685.718 1314.73,685.718 1315.29,685.718 1315.85,685.718 1316.41,685.718 1316.97,685.718 1317.53,685.718 1318.09,685.718 1318.65,685.718 1319.2,685.718 1319.76,685.718 1320.32,685.718 1320.88,685.718 1321.44,685.718 1322,685.718 1322.56,685.718 1323.12,685.718 1323.68,685.718 1324.24,685.718 1324.8,685.718 1325.36,685.718 1325.92,685.718 1326.47,685.718 1327.03,685.718 1327.59,685.718 1328.15,685.718 1328.71,685.718 1329.27,685.718 1329.83,685.718 1330.39,685.718 1330.95,685.718 1331.51,685.718 1332.07,685.718 1332.63,685.718 1333.19,685.718 1333.75,685.718 1334.3,685.718 1334.86,685.718 1335.42,685.718 1335.98,685.718 1336.54,685.718 1337.1,685.718 1337.66,685.718 1338.22,685.718 1338.78,685.718 1339.34,685.718 1339.9,685.718 1340.46,685.718 1341.02,685.718 1341.57,685.718 1342.13,685.718 1342.69,685.718 1343.25,685.718 1343.81,685.718 1344.37,685.718 1344.93,685.718 1345.49,685.718 1346.05,685.718 1346.61,685.718 1347.17,685.718 1347.73,685.718 1348.29,685.718 1348.84,685.718 1349.4,685.718 1349.96,685.718 1350.52,685.718 1351.08,685.718 1351.64,685.718 1352.2,685.718 1352.76,685.718 1353.32,685.718 1353.88,685.718 1354.44,685.718 1355,685.718 1355.56,685.718 1356.12,685.718 1356.67,685.718 1357.23,685.718 1357.79,685.718 1358.35,685.718 1358.91,685.718 1359.47,685.718 1360.03,685.718 1360.59,685.718 1361.15,685.718 1361.71,685.718 1362.27,685.718 1362.83,685.718 1363.39,685.718 1363.94,685.718 1364.5,685.718 1365.06,685.718 1365.62,685.718 1366.18,685.718 1366.74,685.718 1367.3,685.718 1367.86,685.718 1368.42,685.718 1368.98,685.718 1369.54,685.718 1370.1,685.718 1370.66,685.718 1371.21,685.718 1371.77,685.718 1372.33,685.718 1372.89,685.718 1373.45,685.718 1374.01,685.718 1374.57,685.718 1375.13,685.718 1375.69,685.718 1376.25,685.718 1376.81,685.718 1377.37,685.718 1377.93,685.718 1378.49,685.718 1379.04,685.718 1379.6,685.718 1380.16,685.718 1380.72,685.718 1381.28,685.718 1381.84,685.718 1382.4,685.718 1382.96,685.718 1383.52,685.718 1384.08,685.718 1384.64,685.718 1385.2,685.718 1385.76,685.718 1386.31,685.718 1386.87,685.718 1387.43,685.718 1387.99,685.718 1388.55,685.718 1389.11,685.718 1389.67,685.718 1390.23,685.718 1390.79,685.718 1391.35,685.718 1391.91,685.718 1392.47,685.718 1393.03,685.718 1393.58,685.718 1394.14,685.718 1394.7,685.718 1395.26,685.718 1395.82,685.718 1396.38,685.718 1396.94,685.718 1397.5,685.718 1398.06,685.718 1398.62,685.718 1399.18,685.718 1399.74,685.718 1400.3,685.718 1400.86,685.718 1401.41,685.718 1401.97,685.718 1402.53,685.718 1403.09,685.718 1403.65,685.718 1404.21,685.718 1404.77,685.718 1405.33,685.718 1405.89,685.718 1406.45,685.718 1407.01,685.718 1407.57,685.718 1408.13,685.718 1408.68,685.718 1409.24,685.718 1409.8,685.718 1410.36,685.718 1410.92,685.718 1411.48,685.718 1412.04,685.718 1412.6,685.718 1413.16,685.718 1413.72,685.718 1414.28,685.718 1414.84,685.718 1415.4,685.718 1415.95,685.718 1416.51,685.718 1417.07,685.718 1417.63,685.718 1418.19,685.718 1418.75,685.718 1419.31,685.718 1419.87,685.718 1420.43,685.718 1420.99,685.718 1421.55,685.718 1422.11,685.718 1422.67,685.718 1423.23,685.718 1423.78,685.718 1424.34,685.718 1424.9,685.718 1425.46,685.718 1426.02,685.718 1426.58,685.718 1427.14,685.718 1427.7,685.718 1428.26,685.718 1428.82,685.718 1429.38,685.718 1429.94,685.718 1430.5,685.718 1431.05,685.718 1431.61,685.718 1432.17,685.718 1432.73,685.718 1433.29,685.718 1433.85,685.718 1434.41,685.718 1434.97,685.718 1435.53,685.718 1436.09,685.718 1436.65,685.718 1437.21,685.718 1437.77,685.718 1438.33,685.718 1438.88,685.718 1439.44,685.718 1440,685.718 1440.56,685.718 1441.12,685.718 1441.68,685.718 1442.24,685.718 1442.8,685.718 1443.36,685.718 1443.92,685.718 1444.48,685.718 1445.04,685.718 1445.6,685.718 1446.15,685.718 1446.71,685.718 1447.27,685.718 1447.83,685.718 1448.39,685.718 1448.95,685.718 1449.51,685.718 1450.07,685.718 1450.63,685.718 1451.19,685.718 1451.75,685.718 1452.31,685.718 1452.87,685.718 1453.42,685.718 1453.98,685.718 1454.54,685.718 1455.1,685.718 1455.66,685.718 1456.22,685.718 1456.78,685.718 1457.34,685.718 1457.9,685.718 1458.46,685.718 1459.02,685.718 1459.58,685.718 1460.14,685.718 1460.7,685.718 1461.25,685.718 1461.81,685.718 1462.37,685.718 1462.93,685.718 1463.49,685.718 1464.05,685.718 1464.61,685.718 1465.17,685.718 1465.73,685.718 1466.29,685.718 1466.85,685.718 1467.41,685.718 1467.97,685.718 1468.52,685.718 1469.08,685.718 1469.64,685.718 1470.2,685.718 1470.76,685.718 1471.32,685.718 1471.88,685.718 1472.44,685.718 1473,685.718 1473.56,685.718 1474.12,685.718 1474.68,685.718 1475.24,685.718 1475.79,685.718 1476.35,685.718 1476.91,685.718 1477.47,685.718 1478.03,685.718 1478.59,685.718 1479.15,685.718 1479.71,685.718 1480.27,685.718 1480.83,685.718 1481.39,685.718 1481.95,685.718 1482.51,685.718 1483.07,685.718 1483.62,685.718 1484.18,685.718 1484.74,685.718 1485.3,685.718 1485.86,685.718 1486.42,685.718 1486.98,685.718 1487.54,685.718 1488.1,685.718 1488.66,685.718 1489.22,685.718 1489.78,685.718 1490.34,685.718 1490.89,685.718 1491.45,685.718 1492.01,685.718 1492.57,685.718 1493.13,685.718 1493.69,685.718 1494.25,685.718 1494.81,685.718 1495.37,685.718 1495.93,685.718 1496.49,685.718 1497.05,685.718 1497.61,685.718 1498.16,685.718 1498.72,685.718 1499.28,685.718 1499.84,685.718 1500.4,685.718 1500.96,685.718 1501.52,685.718 1502.08,685.718 1502.64,685.718 1503.2,685.718 1503.76,685.718 1504.32,685.718 1504.88,685.718 1505.44,685.718 1505.99,685.718 1506.55,685.718 1507.11,685.718 1507.67,685.718 1508.23,685.718 1508.79,685.718 1509.35,685.718 1509.91,685.718 1510.47,685.718 1511.03,685.718 1511.59,685.718 1512.15,685.718 1512.71,685.718 1513.26,685.718 1513.82,685.718 1514.38,685.718 1514.94,685.718 1515.5,685.718 1516.06,685.718 1516.62,685.718 1517.18,685.718 1517.74,685.718 1518.3,685.718 1518.86,685.718 1519.42,685.718 1519.98,685.718 1520.53,685.718 1521.09,685.718 1521.65,685.718 1522.21,685.718 1522.77,685.718 1523.33,685.718 1523.89,685.718 1524.45,685.718 1525.01,685.718 1525.57,685.718 1526.13,685.718 1526.69,685.718 1527.25,685.718 1527.81,685.718 1528.36,685.718 1528.92,685.718 1529.48,685.718 1530.04,685.718 1530.6,685.718 1531.16,685.718 1531.72,685.718 1532.28,685.718 1532.84,685.718 1533.4,685.718 1533.96,685.718 1534.52,685.718 1535.08,685.718 1535.63,685.718 1536.19,685.718 1536.75,685.718 1537.31,685.718 1537.87,685.718 1538.43,685.718 1538.99,685.718 1539.55,685.718 1540.11,685.718 1540.67,685.718 1541.23,685.718 1541.79,685.718 1542.35,685.718 1542.9,685.718 1543.46,685.718 1544.02,685.718 1544.58,685.718 1545.14,685.718 1545.7,685.718 1546.26,685.718 1546.82,685.718 1547.38,685.718 1547.94,685.718 1548.5,685.718 1549.06,685.718 1549.62,685.718 1550.18,685.718 1550.73,685.718 1551.29,685.718 1551.85,685.718 1552.41,685.718 1552.97,685.718 1553.53,685.718 1554.09,685.718 1554.65,685.718 1555.21,685.718 1555.77,685.718 1556.33,685.718 1556.89,685.718 1557.45,685.718 1558,685.718 1558.56,685.718 1559.12,685.718 1559.68,685.718 1560.24,685.718 1560.8,685.718 1561.36,685.718 1561.92,685.718 1562.48,685.718 1563.04,685.718 1563.6,685.718 1564.16,685.718 1564.72,685.718 1565.28,685.718 1565.83,685.718 1566.39,685.718 1566.95,685.718 1567.51,685.718 1568.07,685.718 1568.63,685.718 1569.19,685.718 1569.75,685.718 1570.31,685.718 1570.87,685.718 1571.43,685.718 1571.99,685.718 1572.55,685.718 1573.1,685.718 1573.66,685.718 1574.22,685.718 1574.78,685.718 1575.34,685.718 1575.9,685.718 1576.46,685.718 1577.02,685.718 1577.58,685.718 1578.14,685.718 1578.7,685.718 1579.26,685.718 1579.82,685.718 1580.37,685.718 1580.93,685.718 1581.49,685.718 1582.05,685.718 1582.61,685.718 1583.17,685.718 1583.73,685.718 1584.29,685.718 1584.85,685.718 1585.41,685.718 1585.97,685.718 1586.53,685.718 1587.09,685.718 1587.65,685.718 1588.2,685.718 1588.76,685.718 1589.32,685.718 1589.88,685.718 1590.44,685.718 1591,685.718 1591.56,685.718 1592.12,685.718 1592.68,685.718 1593.24,685.718 1593.8,685.718 1594.36,685.718 1594.92,685.718 1595.47,685.718 1596.03,685.718 1596.59,685.718 1597.15,685.718 1597.71,685.718 1598.27,685.718 1598.83,685.718 1599.39,685.718 1599.95,685.718 1600.51,685.718 1601.07,685.718 1601.63,685.718 1602.19,685.718 1602.74,685.718 1603.3,685.718 1603.86,685.718 1604.42,685.718 1604.98,685.718 1605.54,685.718 1606.1,685.718 1606.66,685.718 1607.22,685.718 1607.78,685.718 1608.34,685.718 1608.9,685.718 1609.46,685.718 1610.02,685.718 1610.57,685.718 1611.13,685.718 1611.69,685.718 1612.25,685.718 1612.81,685.718 1613.37,685.718 1613.93,685.718 1614.49,685.718 1615.05,685.718 1615.61,685.718 1616.17,685.718 1616.73,685.718 1617.29,685.718 1617.84,685.718 1618.4,685.718 1618.96,685.718 1619.52,685.718 1620.08,685.718 1620.64,685.718 1621.2,685.718 1621.76,685.718 1622.32,685.718 1622.88,685.718 1623.44,685.718 1624,685.718 1624.56,685.718 1625.11,685.718 1625.67,685.718 1626.23,685.718 1626.79,685.718 1627.35,685.718 1627.91,685.718 1628.47,685.718 1629.03,685.718 1629.59,685.718 1630.15,685.718 1630.71,685.718 1631.27,685.718 1631.83,685.718 1632.39,685.718 1632.94,685.718 1633.5,685.718 1634.06,685.718 1634.62,685.718 1635.18,685.718 1635.74,685.718 1636.3,685.718 1636.86,685.718 1637.42,685.718 1637.98,685.718 1638.54,685.718 1639.1,685.718 1639.66,685.718 1640.21,685.718 1640.77,685.718 1641.33,685.718 1641.89,685.718 1642.45,685.718 1643.01,685.718 1643.57,685.718 1644.13,685.718 1644.69,685.718 1645.25,685.718 1645.81,685.718 1646.37,685.718 1646.93,685.718 1647.48,685.718 1648.04,685.718 1648.6,685.718 1649.16,685.718 1649.72,685.718 1650.28,685.718 1650.84,685.718 1651.4,685.718 1651.96,685.718 1652.52,685.718 1653.08,685.718 1653.64,685.718 1654.2,685.718 1654.76,685.718 1655.31,685.718 1655.87,685.718 1656.43,685.718 1656.99,685.718 1657.55,685.718 1658.11,685.718 1658.67,685.718 1659.23,685.718 1659.79,685.718 1660.35,685.718 1660.91,685.718 1661.47,685.718 1662.03,685.718 1662.58,685.718 1663.14,685.718 1663.7,685.718 1664.26,685.718 1664.82,685.718 1665.38,685.718 1665.94,685.718 1666.5,685.718 1667.06,685.718 1667.62,685.718 1668.18,685.718 1668.74,685.718 1669.3,685.718 1669.85,685.718 1670.41,685.718 1670.97,685.718 1671.53,685.718 1672.09,685.718 1672.65,685.718 1673.21,685.718 1673.77,685.718 1674.33,685.718 1674.89,685.718 1675.45,685.718 1676.01,685.718 1676.57,685.718 1677.13,685.718 1677.68,685.718 1678.24,685.718 1678.8,685.718 1679.36,685.718 1679.92,685.718 1680.48,685.718 1681.04,685.718 1681.6,685.718 1682.16,685.718 1682.72,685.718 1683.28,685.718 1683.84,685.718 1684.4,685.718 1684.95,685.718 1685.51,685.718 1686.07,685.718 1686.63,685.718 1687.19,685.718 1687.75,685.718 1688.31,685.718 1688.87,685.718 1689.43,685.718 1689.99,685.718 1690.55,685.718 1691.11,685.718 1691.67,685.718 1692.23,685.718 1692.78,685.718 1693.34,685.718 1693.9,685.718 1694.46,685.718 1695.02,685.718 1695.58,685.718 1696.14,685.718 1696.7,685.718 1697.26,685.718 1697.82,685.718 1698.38,685.718 1698.94,685.718 1699.5,685.718 1700.05,685.718 1700.61,685.718 1701.17,685.718 1701.73,685.718 1702.29,685.718 1702.85,685.718 1703.41,685.718 1703.97,685.718 1704.53,685.718 1705.09,685.718 1705.65,685.718 1706.21,685.718 1706.77,685.718 1707.32,685.718 1707.88,685.718 1708.44,685.718 1709,685.718 1709.56,685.718 1710.12,685.718 1710.68,685.718 1711.24,685.718 1711.8,685.718 1712.36,685.718 1712.92,685.718 1713.48,685.718 1714.04,685.718 1714.6,685.718 1715.15,685.718 1715.71,685.718 1716.27,685.718 1716.83,685.718 1717.39,685.718 1717.95,685.718 1718.51,685.718 1719.07,685.718 1719.63,685.718 1720.19,685.718 1720.75,685.718 1721.31,685.718 1721.87,685.718 1722.42,685.718 1722.98,685.718 1723.54,685.718 1724.1,685.718 1724.66,685.718 1725.22,685.718 1725.78,685.718 1726.34,685.718 1726.9,685.718 1727.46,685.718 1728.02,685.718 1728.58,685.718 1729.14,685.718 1729.69,685.718 1730.25,685.718 1730.81,685.718 1731.37,685.718 1731.93,685.718 1732.49,685.718 1733.05,685.718 1733.61,685.718 1734.17,685.718 1734.73,685.718 1735.29,685.718 1735.85,685.718 1736.41,685.718 1736.97,685.718 1737.52,685.718 1738.08,685.718 1738.64,685.718 1739.2,685.718 1739.76,685.718 1740.32,685.718 1740.88,685.718 1741.44,685.718 1742,685.718 1742.56,685.718 1743.12,685.718 1743.68,685.718 1744.24,685.718 1744.79,685.718 1745.35,685.718 1745.91,685.718 1746.47,685.718 1747.03,685.718 1747.59,685.718 1748.15,685.718 1748.71,685.718 1749.27,685.718 1749.83,685.718 1750.39,685.718 1750.95,685.718 1751.51,685.718 1752.06,685.718 1752.62,685.718 1753.18,685.718 1753.74,685.718 1754.3,685.718 1754.86,685.718 1755.42,685.718 1755.98,685.718 1756.54,685.718 1757.1,685.718 1757.66,685.718 1758.22,685.718 1758.78,685.718 1759.34,685.718 1759.89,685.718 1760.45,685.718 1761.01,685.718 1761.57,685.718 1762.13,685.718 1762.69,685.718 1763.25,685.718 1763.81,685.718 1764.37,685.718 1764.93,685.718 1765.49,685.718 1766.05,685.718 1766.61,685.718 1767.16,685.718 1767.72,685.718 1768.28,685.718 1768.84,685.718 1769.4,685.718 1769.96,685.718 1770.52,685.718 1771.08,685.718 1771.64,685.718 1772.2,685.718 1772.76,685.718 1773.32,685.718 1773.88,685.718 1774.43,685.718 1774.99,685.718 1775.55,685.718 1776.11,685.718 1776.67,685.718 1777.23,685.718 1777.79,685.718 1778.35,685.718 1778.91,685.718 1779.47,685.718 1780.03,685.718 1780.59,685.718 1781.15,685.718 1781.71,685.718 1782.26,685.718 1782.82,685.718 1783.38,685.718 1783.94,685.718 1784.5,685.718 1785.06,685.718 1785.62,685.718 1786.18,685.718 1786.74,685.718 1787.3,685.718 1787.86,685.718 1788.42,685.718 1788.98,685.718 1789.53,685.718 1790.09,685.718 1790.65,685.718 1791.21,685.718 1791.77,685.718 1792.33,685.718 1792.89,685.718 1793.45,685.718 1794.01,685.718 1794.57,685.718 1795.13,685.718 1795.69,685.718 1796.25,685.718 1796.8,685.718 1797.36,685.718 1797.92,685.718 1798.48,685.718 1799.04,685.718 1799.6,685.718 1800.16,685.718 1800.72,685.718 1801.28,685.718 1801.84,685.718 1802.4,685.718 1802.96,685.718 1803.52,685.718 1804.08,685.718 1804.63,685.718 1805.19,685.718 1805.75,685.718 1806.31,685.718 1806.87,685.718 1807.43,685.718 1807.99,685.718 1808.55,685.718 1809.11,685.718 1809.67,685.718 1810.23,685.718 1810.79,685.718 1811.35,685.718 1811.9,685.718 1812.46,685.718 1813.02,685.718 1813.58,685.718 1814.14,685.718 1814.7,685.718 1815.26,685.718 1815.82,685.718 1816.38,685.718 1816.94,685.718 1817.5,685.718 1818.06,685.718 1818.62,685.718 1819.18,685.718 1819.73,685.718 1820.29,685.718 1820.85,685.718 1821.41,685.718 1821.97,685.718 1822.53,685.718 1823.09,685.718 1823.65,685.718 1824.21,685.718 1824.77,685.718 1825.33,685.718 1825.89,685.718 1826.45,685.718 1827,685.718 1827.56,685.718 1828.12,685.718 1828.68,685.718 1829.24,685.718 1829.8,685.718 1830.36,685.718 1830.92,685.718 1831.48,685.718 1832.04,685.718 1832.6,685.718 1833.16,685.718 1833.72,685.718 1834.27,685.718 1834.83,685.718 1835.39,685.718 1835.95,685.718 1836.51,685.718 1837.07,685.718 1837.63,685.718 1838.19,685.718 \"/>\n<path clip-path=\"url(#clip363)\" d=\"M720.247 684.115 L720.806 684.115 L721.365 684.115 L721.924 684.115 L722.484 684.115 L723.043 684.115 L723.602 684.115 L724.161 684.115 L724.721 684.115 L725.28 684.115 L725.839 684.115 L726.398 684.115 L726.958 684.115 L727.517 684.115 L728.076 684.115 L728.635 684.115 L729.195 684.115 L729.754 684.115 L730.313 684.115 L730.872 684.115 L731.432 684.115 L731.991 684.115 L732.55 684.115 L733.109 684.115 L733.669 684.115 L734.228 684.115 L734.787 684.115 L735.346 684.115 L735.906 684.115 L736.465 684.115 L737.024 684.115 L737.583 684.115 L738.143 684.115 L738.702 684.115 L739.261 684.115 L739.82 684.115 L740.38 684.115 L740.939 684.115 L741.498 684.115 L742.057 684.115 L742.617 684.115 L743.176 684.115 L743.735 684.115 L744.294 684.115 L744.854 684.115 L745.413 684.115 L745.972 684.115 L746.531 684.115 L747.091 684.115 L747.65 684.115 L748.209 684.115 L748.768 684.115 L749.328 684.115 L749.887 684.115 L750.446 684.115 L751.005 684.115 L751.565 684.115 L752.124 684.115 L752.683 684.115 L753.242 684.115 L753.802 684.115 L754.361 684.115 L754.92 684.115 L755.479 684.115 L756.039 684.115 L756.598 684.115 L757.157 684.115 L757.716 684.115 L758.276 684.115 L758.835 684.115 L759.394 684.115 L759.953 684.115 L760.513 684.115 L761.072 684.115 L761.631 684.115 L762.19 684.115 L762.75 684.115 L763.309 684.115 L763.868 684.115 L764.427 684.115 L764.987 684.115 L765.546 684.115 L766.105 684.115 L766.664 684.115 L767.224 684.115 L767.783 684.115 L768.342 684.115 L768.901 684.115 L769.461 684.115 L770.02 684.115 L770.579 684.115 L771.138 684.115 L771.698 684.115 L772.257 684.115 L772.816 684.115 L773.375 684.115 L773.935 684.115 L774.494 684.115 L775.053 684.115 L775.612 684.115 L776.172 684.115 L776.731 684.115 L777.29 684.115 L777.849 684.115 L778.409 684.115 L778.968 684.115 L779.527 684.115 L780.086 684.115 L780.646 684.115 L781.205 684.115 L781.764 684.115 L782.323 684.115 L782.883 684.115 L783.442 684.115 L784.001 684.115 L784.56 684.115 L785.12 684.115 L785.679 684.115 L786.238 684.115 L786.797 684.115 L787.357 684.115 L787.916 684.115 L788.475 684.115 L789.034 684.115 L789.594 684.115 L790.153 684.115 L790.712 684.115 L791.271 684.115 L791.831 684.115 L792.39 684.115 L792.949 684.115 L793.508 684.115 L794.068 684.115 L794.627 684.115 L795.186 684.115 L795.745 684.115 L796.305 684.115 L796.864 684.115 L797.423 684.115 L797.982 684.115 L798.542 684.115 L799.101 684.115 L799.66 684.115 L800.219 684.115 L800.779 684.115 L801.338 684.115 L801.897 684.115 L802.456 684.115 L803.016 684.115 L803.575 684.115 L804.134 684.115 L804.693 684.115 L805.253 684.115 L805.812 684.115 L806.371 684.115 L806.931 684.115 L807.49 684.115 L808.049 684.115 L808.608 684.115 L809.168 684.115 L809.727 684.115 L810.286 684.115 L810.845 684.115 L811.405 684.115 L811.964 684.115 L812.523 684.115 L813.082 684.115 L813.642 684.115 L814.201 684.115 L814.76 684.115 L815.319 684.115 L815.879 684.115 L816.438 684.115 L816.997 684.115 L817.556 684.115 L818.116 684.115 L818.675 684.115 L819.234 684.115 L819.793 684.115 L820.353 684.115 L820.912 684.115 L821.471 684.115 L822.03 684.115 L822.59 684.115 L823.149 684.115 L823.708 684.115 L824.267 684.115 L824.827 684.115 L825.386 684.115 L825.945 684.115 L826.504 684.115 L827.064 684.115 L827.623 684.115 L828.182 684.115 L828.741 684.115 L829.301 684.115 L829.86 684.115 L830.419 684.115 L830.978 684.115 L831.538 684.115 L832.097 684.115 L832.656 684.115 L833.215 684.115 L833.775 684.115 L834.334 684.115 L834.893 684.115 L835.452 684.115 L836.012 684.115 L836.571 684.115 L837.13 684.115 L837.689 684.115 L838.249 684.115 L838.808 684.115 L839.367 684.115 L839.926 684.115 L840.486 684.115 L841.045 684.115 L841.604 684.115 L842.163 684.115 L842.723 684.115 L843.282 684.115 L843.841 684.115 L844.4 684.115 L844.96 684.115 L845.519 684.115 L846.078 684.115 L846.637 684.115 L847.197 684.115 L847.756 684.115 L848.315 684.115 L848.874 684.115 L849.434 684.115 L849.993 684.115 L850.552 684.115 L851.111 684.115 L851.671 684.115 L852.23 684.115 L852.789 684.115 L853.348 684.115 L853.908 684.115 L854.467 684.115 L855.026 684.115 L855.585 684.115 L856.145 684.115 L856.704 684.115 L857.263 684.115 L857.822 684.115 L858.382 684.115 L858.941 684.115 L859.5 684.115 L860.059 684.115 L860.619 684.115 L861.178 684.115 L861.737 684.115 L862.296 684.115 L862.856 684.115 L863.415 684.115 L863.974 684.115 L864.533 684.115 L865.093 684.115 L865.652 684.115 L866.211 684.115 L866.77 684.115 L867.33 684.115 L867.889 684.115 L868.448 684.115 L869.007 684.115 L869.567 684.115 L870.126 684.115 L870.685 684.115 L871.244 684.115 L871.804 684.115 L872.363 684.115 L872.922 684.115 L873.481 684.115 L874.041 684.115 L874.6 684.115 L875.159 684.115 L875.718 684.115 L876.278 684.115 L876.837 684.115 L877.396 684.115 L877.955 684.115 L878.515 684.115 L879.074 684.115 L879.633 684.115 L880.192 684.115 L880.752 684.115 L881.311 684.115 L881.87 684.115 L882.429 684.115 L882.989 684.115 L883.548 684.115 L884.107 684.115 L884.666 684.115 L885.226 684.115 L885.785 684.115 L886.344 684.115 L886.903 684.115 L887.463 684.115 L888.022 684.115 L888.581 684.115 L889.14 684.115 L889.7 684.115 L890.259 684.115 L890.818 684.115 L891.377 684.115 L891.937 684.115 L892.496 684.115 L893.055 684.115 L893.614 684.115 L894.174 684.115 L894.733 684.115 L895.292 684.115 L895.851 684.115 L896.411 684.115 L896.97 684.115 L897.529 684.115 L898.088 684.115 L898.648 684.115 L899.207 684.115 L899.766 684.115 L900.325 684.115 L900.885 684.115 L901.444 684.115 L902.003 684.115 L902.562 684.115 L903.122 684.115 L903.681 684.115 L904.24 684.115 L904.799 684.115 L905.359 684.115 L905.918 684.115 L906.477 684.115 L907.036 684.115 L907.596 684.115 L908.155 684.115 L908.714 684.115 L909.273 684.115 L909.833 684.115 L910.392 684.115 L910.951 684.115 L911.51 684.115 L912.07 684.115 L912.629 684.115 L913.188 684.115 L913.747 684.115 L914.307 684.115 L914.866 684.115 L915.425 684.115 L915.984 684.115 L916.544 684.115 L917.103 684.115 L917.662 684.115 L918.221 684.115 L918.781 684.115 L919.34 684.115 L919.899 684.115 L920.458 684.115 L921.018 684.115 L921.577 684.115 L922.136 684.115 L922.695 684.115 L923.255 684.115 L923.814 684.115 L924.373 684.115 L924.932 684.115 L925.492 684.115 L926.051 684.115 L926.61 684.115 L927.169 684.115 L927.729 684.115 L928.288 684.115 L928.847 684.115 L929.406 684.115 L929.966 684.115 L930.525 684.115 L931.084 684.115 L931.644 684.115 L932.203 684.115 L932.762 684.115 L933.321 684.115 L933.881 684.115 L934.44 684.115 L934.999 684.115 L935.558 684.115 L936.118 684.115 L936.677 684.115 L937.236 684.115 L937.795 684.115 L938.355 684.115 L938.914 684.115 L939.473 684.115 L940.032 684.115 L940.592 684.115 L941.151 684.115 L941.71 684.115 L942.269 684.115 L942.829 684.115 L943.388 684.115 L943.947 684.115 L944.506 684.115 L945.066 684.115 L945.625 684.115 L946.184 684.115 L946.743 684.115 L947.303 684.115 L947.862 684.115 L948.421 684.115 L948.98 684.115 L949.54 684.115 L950.099 684.115 L950.658 684.115 L951.217 684.115 L951.777 684.115 L952.336 684.115 L952.895 684.115 L953.454 684.115 L954.014 684.115 L954.573 684.115 L955.132 684.115 L955.691 684.115 L956.251 684.115 L956.81 684.115 L957.369 684.115 L957.928 684.115 L958.488 684.115 L959.047 684.115 L959.606 684.115 L960.165 684.115 L960.725 684.115 L961.284 684.115 L961.843 684.115 L962.402 684.115 L962.962 684.115 L963.521 684.115 L964.08 684.115 L964.639 684.115 L965.199 684.115 L965.758 684.115 L966.317 684.115 L966.876 684.115 L967.436 684.115 L967.995 684.115 L968.554 684.115 L969.113 684.115 L969.673 684.115 L970.232 684.115 L970.791 684.115 L971.35 684.115 L971.91 684.115 L972.469 684.115 L973.028 684.115 L973.587 684.115 L974.147 684.115 L974.706 684.115 L975.265 684.115 L975.824 684.115 L976.384 684.115 L976.943 684.115 L977.502 684.115 L978.061 684.115 L978.621 684.115 L979.18 684.115 L979.739 684.115 L980.298 684.115 L980.858 684.115 L981.417 684.115 L981.976 684.115 L982.535 684.115 L983.095 684.115 L983.654 684.115 L984.213 684.115 L984.772 684.115 L985.332 684.115 L985.891 684.115 L986.45 684.115 L987.009 684.115 L987.569 684.115 L988.128 684.115 L988.687 684.115 L989.246 684.115 L989.806 684.115 L990.365 684.115 L990.924 684.115 L991.483 684.115 L992.043 684.115 L992.602 684.115 L993.161 684.115 L993.72 684.115 L994.28 684.115 L994.839 684.115 L995.398 684.115 L995.957 684.115 L996.517 684.115 L997.076 684.115 L997.635 684.115 L998.194 684.115 L998.754 684.115 L999.313 684.115 L999.872 684.115 L1000.43 684.115 L1000.99 684.115 L1001.55 684.115 L1002.11 684.115 L1002.67 684.115 L1003.23 684.115 L1003.79 684.115 L1004.35 684.115 L1004.91 684.115 L1005.46 684.115 L1006.02 684.115 L1006.58 684.115 L1007.14 684.115 L1007.7 684.115 L1008.26 684.115 L1008.82 684.115 L1009.38 684.115 L1009.94 684.115 L1010.5 684.115 L1011.06 684.115 L1011.62 684.115 L1012.18 684.115 L1012.73 684.115 L1013.29 684.115 L1013.85 684.115 L1014.41 684.115 L1014.97 684.115 L1015.53 684.115 L1016.09 684.115 L1016.65 684.115 L1017.21 684.115 L1017.77 684.115 L1018.33 684.115 L1018.89 684.115 L1019.45 684.115 L1020.01 684.115 L1020.56 684.115 L1021.12 684.115 L1021.68 684.115 L1022.24 684.115 L1022.8 684.115 L1023.36 684.115 L1023.92 684.115 L1024.48 684.115 L1025.04 684.115 L1025.6 684.115 L1026.16 684.115 L1026.72 684.115 L1027.28 684.115 L1027.83 684.115 L1028.39 684.115 L1028.95 684.115 L1029.51 684.115 L1030.07 684.115 L1030.63 684.115 L1031.19 684.115 L1031.75 684.115 L1032.31 684.115 L1032.87 684.115 L1033.43 684.115 L1033.99 684.115 L1034.55 684.115 L1035.1 684.115 L1035.66 684.115 L1036.22 684.115 L1036.78 684.115 L1037.34 684.115 L1037.9 684.115 L1038.46 684.115 L1039.02 684.115 L1039.58 684.115 L1040.14 684.115 L1040.7 684.115 L1041.26 684.115 L1041.82 684.115 L1042.38 684.115 L1042.93 684.115 L1043.49 684.115 L1044.05 684.115 L1044.61 684.115 L1045.17 684.115 L1045.73 684.115 L1046.29 684.115 L1046.85 684.115 L1047.41 684.115 L1047.97 684.115 L1048.53 684.115 L1049.09 684.115 L1049.65 684.115 L1050.2 684.115 L1050.76 684.115 L1051.32 684.115 L1051.88 684.115 L1052.44 684.115 L1053 684.115 L1053.56 684.115 L1054.12 684.115 L1054.68 684.115 L1055.24 684.115 L1055.8 684.115 L1056.36 684.115 L1056.92 684.115 L1057.48 684.115 L1058.03 684.115 L1058.59 684.115 L1059.15 684.115 L1059.71 684.115 L1060.27 684.115 L1060.83 684.115 L1061.39 684.115 L1061.95 684.115 L1062.51 684.115 L1063.07 684.115 L1063.63 684.115 L1064.19 684.115 L1064.75 684.115 L1065.3 684.115 L1065.86 684.115 L1066.42 684.115 L1066.98 684.115 L1067.54 684.115 L1068.1 684.115 L1068.66 684.115 L1069.22 684.115 L1069.78 684.115 L1070.34 684.115 L1070.9 684.115 L1071.46 684.115 L1072.02 684.115 L1072.57 684.115 L1073.13 684.115 L1073.69 684.115 L1074.25 684.115 L1074.81 684.115 L1075.37 684.115 L1075.93 684.115 L1076.49 684.115 L1077.05 684.115 L1077.61 684.115 L1078.17 684.115 L1078.73 684.115 L1079.29 684.115 L1079.85 684.115 L1080.4 684.115 L1080.96 684.115 L1081.52 684.115 L1082.08 684.115 L1082.64 684.115 L1083.2 684.115 L1083.76 684.115 L1084.32 684.115 L1084.88 684.115 L1085.44 684.115 L1086 684.115 L1086.56 684.115 L1087.12 684.115 L1087.67 684.115 L1088.23 684.115 L1088.79 684.115 L1089.35 684.115 L1089.91 684.115 L1090.47 684.115 L1091.03 684.115 L1091.59 684.115 L1092.15 684.115 L1092.71 684.115 L1093.27 684.115 L1093.83 684.115 L1094.39 684.115 L1094.94 684.115 L1095.5 684.115 L1096.06 684.115 L1096.62 684.115 L1097.18 684.115 L1097.74 684.115 L1098.3 684.115 L1098.86 684.115 L1099.42 684.115 L1099.98 684.115 L1100.54 684.115 L1101.1 684.115 L1101.66 684.115 L1102.22 684.115 L1102.77 684.115 L1103.33 684.115 L1103.89 684.115 L1104.45 684.115 L1105.01 684.115 L1105.57 684.115 L1106.13 684.115 L1106.69 684.115 L1107.25 684.115 L1107.81 684.115 L1108.37 684.115 L1108.93 684.115 L1109.49 684.115 L1110.04 684.115 L1110.6 684.115 L1111.16 684.115 L1111.72 684.115 L1112.28 684.115 L1112.84 684.115 L1113.4 684.115 L1113.96 684.115 L1114.52 684.115 L1115.08 684.115 L1115.64 684.115 L1116.2 684.115 L1116.76 684.115 L1117.31 684.115 L1117.87 684.115 L1118.43 684.115 L1118.99 684.115 L1119.55 684.115 L1120.11 684.115 L1120.67 684.115 L1121.23 684.115 L1121.79 684.115 L1122.35 684.115 L1122.91 684.115 L1123.47 684.115 L1124.03 684.115 L1124.59 684.115 L1125.14 684.115 L1125.7 684.115 L1126.26 684.115 L1126.82 684.115 L1127.38 684.115 L1127.94 684.115 L1128.5 684.115 L1129.06 684.115 L1129.62 684.115 L1130.18 684.115 L1130.74 684.115 L1131.3 684.115 L1131.86 684.115 L1132.41 684.115 L1132.97 684.115 L1133.53 684.115 L1134.09 684.115 L1134.65 684.115 L1135.21 684.115 L1135.77 684.115 L1136.33 684.115 L1136.89 684.115 L1137.45 684.115 L1138.01 684.115 L1138.57 684.115 L1139.13 684.115 L1139.68 684.115 L1140.24 684.115 L1140.8 684.115 L1141.36 684.115 L1141.92 684.115 L1142.48 684.115 L1143.04 684.115 L1143.6 684.115 L1144.16 684.115 L1144.72 684.115 L1145.28 684.115 L1145.84 684.115 L1146.4 684.115 L1146.96 684.115 L1147.51 684.115 L1148.07 684.115 L1148.63 684.115 L1149.19 684.115 L1149.75 684.115 L1150.31 684.115 L1150.87 684.115 L1151.43 684.115 L1151.99 684.115 L1152.55 684.115 L1153.11 684.115 L1153.67 684.115 L1154.23 684.115 L1154.78 684.115 L1155.34 684.115 L1155.9 684.115 L1156.46 684.115 L1157.02 684.115 L1157.58 684.115 L1158.14 684.115 L1158.7 684.115 L1159.26 684.115 L1159.82 684.115 L1160.38 684.115 L1160.94 684.115 L1161.5 684.115 L1162.05 684.115 L1162.61 684.115 L1163.17 684.115 L1163.73 684.115 L1164.29 684.115 L1164.85 684.115 L1165.41 684.115 L1165.97 684.115 L1166.53 684.115 L1167.09 684.115 L1167.65 684.115 L1168.21 684.115 L1168.77 684.115 L1169.33 684.115 L1169.88 684.115 L1170.44 684.115 L1171 684.115 L1171.56 684.115 L1172.12 684.115 L1172.68 684.115 L1173.24 684.115 L1173.8 684.115 L1174.36 684.115 L1174.92 684.115 L1175.48 684.115 L1176.04 684.115 L1176.6 684.115 L1177.15 684.115 L1177.71 684.115 L1178.27 684.115 L1178.83 684.115 L1179.39 684.115 L1179.95 684.115 L1180.51 684.115 L1181.07 684.115 L1181.63 684.115 L1182.19 684.115 L1182.75 684.115 L1183.31 684.115 L1183.87 684.115 L1184.43 684.115 L1184.98 684.115 L1185.54 684.115 L1186.1 684.115 L1186.66 684.115 L1187.22 684.115 L1187.78 684.115 L1188.34 684.115 L1188.9 684.115 L1189.46 684.115 L1190.02 684.115 L1190.58 684.115 L1191.14 684.115 L1191.7 684.115 L1192.25 684.115 L1192.81 684.115 L1193.37 684.115 L1193.93 684.115 L1194.49 684.115 L1195.05 684.115 L1195.61 684.115 L1196.17 684.115 L1196.73 684.115 L1197.29 684.115 L1197.85 684.115 L1198.41 684.115 L1198.97 684.115 L1199.52 684.115 L1200.08 684.115 L1200.64 684.115 L1201.2 684.115 L1201.76 684.115 L1202.32 684.115 L1202.88 684.115 L1203.44 684.115 L1204 684.115 L1204.56 684.115 L1205.12 684.115 L1205.68 684.115 L1206.24 684.115 L1206.8 684.115 L1207.35 684.115 L1207.91 684.115 L1208.47 684.115 L1209.03 684.115 L1209.59 684.115 L1210.15 684.115 L1210.71 684.115 L1211.27 684.115 L1211.83 684.115 L1212.39 684.115 L1212.95 684.115 L1213.51 684.115 L1214.07 684.115 L1214.62 684.115 L1215.18 684.115 L1215.74 684.115 L1216.3 684.115 L1216.86 684.115 L1217.42 684.115 L1217.98 684.115 L1218.54 684.115 L1219.1 684.115 L1219.66 684.115 L1220.22 684.115 L1220.78 684.115 L1221.34 684.115 L1221.89 684.115 L1222.45 684.115 L1223.01 684.115 L1223.57 684.115 L1224.13 684.115 L1224.69 684.115 L1225.25 684.115 L1225.81 684.115 L1226.37 684.115 L1226.93 684.115 L1227.49 684.115 L1228.05 684.115 L1228.61 684.115 L1229.17 684.115 L1229.72 684.115 L1230.28 684.115 L1230.84 684.115 L1231.4 684.115 L1231.96 684.115 L1232.52 684.115 L1233.08 684.115 L1233.64 684.115 L1234.2 684.115 L1234.76 684.115 L1235.32 684.115 L1235.88 684.115 L1236.44 684.115 L1236.99 684.115 L1237.55 684.115 L1238.11 684.115 L1238.67 684.115 L1239.23 684.115 L1239.79 684.115 L1240.35 684.115 L1240.91 684.115 L1241.47 684.115 L1242.03 684.115 L1242.59 684.115 L1243.15 684.115 L1243.71 684.115 L1244.26 684.115 L1244.82 684.115 L1245.38 684.115 L1245.94 684.115 L1246.5 684.115 L1247.06 684.115 L1247.62 684.115 L1248.18 684.115 L1248.74 684.115 L1249.3 684.115 L1249.86 684.115 L1250.42 684.115 L1250.98 684.115 L1251.54 684.115 L1252.09 684.115 L1252.65 684.115 L1253.21 684.115 L1253.77 684.115 L1254.33 684.115 L1254.89 684.115 L1255.45 684.115 L1256.01 684.115 L1256.57 684.115 L1257.13 684.115 L1257.69 684.115 L1258.25 684.115 L1258.81 684.115 L1259.36 684.115 L1259.92 684.115 L1260.48 684.115 L1261.04 684.115 L1261.6 684.115 L1262.16 684.115 L1262.72 684.115 L1263.28 684.115 L1263.84 684.115 L1264.4 684.115 L1264.96 684.115 L1265.52 684.115 L1266.08 684.115 L1266.63 684.115 L1267.19 684.115 L1267.75 684.115 L1268.31 684.115 L1268.87 684.115 L1269.43 684.115 L1269.99 684.115 L1270.55 684.115 L1271.11 684.115 L1271.67 684.115 L1272.23 684.115 L1272.79 684.115 L1273.35 684.115 L1273.91 684.115 L1274.46 684.115 L1275.02 684.115 L1275.58 684.115 L1276.14 684.115 L1276.7 684.115 L1277.26 684.115 L1277.82 684.115 L1278.38 684.115 L1278.94 684.115 L1279.5 684.115 L1280.06 684.115 L1280.62 684.115 L1281.18 684.115 L1281.73 684.115 L1282.29 684.115 L1282.85 684.115 L1283.41 684.115 L1283.97 684.115 L1284.53 684.115 L1285.09 684.115 L1285.65 684.115 L1286.21 684.115 L1286.77 684.115 L1287.33 684.115 L1287.89 684.115 L1288.45 684.115 L1289 684.115 L1289.56 684.115 L1290.12 684.115 L1290.68 684.115 L1291.24 684.115 L1291.8 684.115 L1292.36 684.115 L1292.92 684.115 L1293.48 684.115 L1294.04 684.115 L1294.6 684.115 L1295.16 684.115 L1295.72 684.115 L1296.28 684.115 L1296.83 684.115 L1297.39 684.115 L1297.95 684.115 L1298.51 684.115 L1299.07 684.115 L1299.63 684.115 L1300.19 684.115 L1300.75 684.115 L1301.31 684.115 L1301.87 684.115 L1302.43 684.115 L1302.99 684.115 L1303.55 684.115 L1304.1 684.115 L1304.66 684.115 L1305.22 684.115 L1305.78 684.115 L1306.34 684.115 L1306.9 684.115 L1307.46 684.115 L1308.02 684.115 L1308.58 684.115 L1309.14 684.115 L1309.7 684.115 L1310.26 684.115 L1310.82 684.115 L1311.38 684.115 L1311.93 684.115 L1312.49 684.115 L1313.05 684.115 L1313.61 684.115 L1314.17 684.115 L1314.73 684.115 L1315.29 684.115 L1315.85 684.115 L1316.41 684.115 L1316.97 684.115 L1317.53 684.115 L1318.09 684.115 L1318.65 684.115 L1319.2 684.115 L1319.76 684.115 L1320.32 684.115 L1320.88 684.115 L1321.44 684.115 L1322 684.115 L1322.56 684.115 L1323.12 684.115 L1323.68 684.115 L1324.24 684.115 L1324.8 684.115 L1325.36 684.115 L1325.92 684.115 L1326.47 684.115 L1327.03 684.115 L1327.59 684.115 L1328.15 684.115 L1328.71 684.115 L1329.27 684.115 L1329.83 684.115 L1330.39 684.115 L1330.95 684.115 L1331.51 684.115 L1332.07 684.115 L1332.63 684.115 L1333.19 684.115 L1333.75 684.115 L1334.3 684.115 L1334.86 684.115 L1335.42 684.115 L1335.98 684.115 L1336.54 684.115 L1337.1 684.115 L1337.66 684.115 L1338.22 684.115 L1338.78 684.115 L1339.34 684.115 L1339.9 684.115 L1340.46 684.115 L1341.02 684.115 L1341.57 684.115 L1342.13 684.115 L1342.69 684.115 L1343.25 684.115 L1343.81 684.115 L1344.37 684.115 L1344.93 684.115 L1345.49 684.115 L1346.05 684.115 L1346.61 684.115 L1347.17 684.115 L1347.73 684.115 L1348.29 684.115 L1348.84 684.115 L1349.4 684.115 L1349.96 684.115 L1350.52 684.115 L1351.08 684.115 L1351.64 684.115 L1352.2 684.115 L1352.76 684.115 L1353.32 684.115 L1353.88 684.115 L1354.44 684.115 L1355 684.115 L1355.56 684.115 L1356.12 684.115 L1356.67 684.115 L1357.23 684.115 L1357.79 684.115 L1358.35 684.115 L1358.91 684.115 L1359.47 684.115 L1360.03 684.115 L1360.59 684.115 L1361.15 684.115 L1361.71 684.115 L1362.27 684.115 L1362.83 684.115 L1363.39 684.115 L1363.94 684.115 L1364.5 684.115 L1365.06 684.115 L1365.62 684.115 L1366.18 684.115 L1366.74 684.115 L1367.3 684.115 L1367.86 684.115 L1368.42 684.115 L1368.98 684.115 L1369.54 684.115 L1370.1 684.115 L1370.66 684.115 L1371.21 684.115 L1371.77 684.115 L1372.33 684.115 L1372.89 684.115 L1373.45 684.115 L1374.01 684.115 L1374.57 684.115 L1375.13 684.115 L1375.69 684.115 L1376.25 684.115 L1376.81 684.115 L1377.37 684.115 L1377.93 684.115 L1378.49 684.115 L1379.04 684.115 L1379.6 684.115 L1380.16 684.115 L1380.72 684.115 L1381.28 684.115 L1381.84 684.115 L1382.4 684.115 L1382.96 684.115 L1383.52 684.115 L1384.08 684.115 L1384.64 684.115 L1385.2 684.115 L1385.76 684.115 L1386.31 684.115 L1386.87 684.115 L1387.43 684.115 L1387.99 684.115 L1388.55 684.115 L1389.11 684.115 L1389.67 684.115 L1390.23 684.115 L1390.79 684.115 L1391.35 684.115 L1391.91 684.115 L1392.47 684.115 L1393.03 684.115 L1393.58 684.115 L1394.14 684.115 L1394.7 684.115 L1395.26 684.115 L1395.82 684.115 L1396.38 684.115 L1396.94 684.115 L1397.5 684.115 L1398.06 684.115 L1398.62 684.115 L1399.18 684.115 L1399.74 684.115 L1400.3 684.115 L1400.86 684.115 L1401.41 684.115 L1401.97 684.115 L1402.53 684.115 L1403.09 684.115 L1403.65 684.115 L1404.21 684.115 L1404.77 684.115 L1405.33 684.115 L1405.89 684.115 L1406.45 684.115 L1407.01 684.115 L1407.57 684.115 L1408.13 684.115 L1408.68 684.115 L1409.24 684.115 L1409.8 684.115 L1410.36 684.115 L1410.92 684.115 L1411.48 684.115 L1412.04 684.115 L1412.6 684.115 L1413.16 684.115 L1413.72 684.115 L1414.28 684.115 L1414.84 684.115 L1415.4 684.115 L1415.95 684.115 L1416.51 684.115 L1417.07 684.115 L1417.63 684.115 L1418.19 684.115 L1418.75 684.115 L1419.31 684.115 L1419.87 684.115 L1420.43 684.115 L1420.99 684.115 L1421.55 684.115 L1422.11 684.115 L1422.67 684.115 L1423.23 684.115 L1423.78 684.115 L1424.34 684.115 L1424.9 684.115 L1425.46 684.115 L1426.02 684.115 L1426.58 684.115 L1427.14 684.115 L1427.7 684.115 L1428.26 684.115 L1428.82 684.115 L1429.38 684.115 L1429.94 684.115 L1430.5 684.115 L1431.05 684.115 L1431.61 684.115 L1432.17 684.115 L1432.73 684.115 L1433.29 684.115 L1433.85 684.115 L1434.41 684.115 L1434.97 684.115 L1435.53 684.115 L1436.09 684.115 L1436.65 684.115 L1437.21 684.115 L1437.77 684.115 L1438.33 684.115 L1438.88 684.115 L1439.44 684.115 L1440 684.115 L1440.56 684.115 L1441.12 684.115 L1441.68 684.115 L1442.24 684.115 L1442.8 684.115 L1443.36 684.115 L1443.92 684.115 L1444.48 684.115 L1445.04 684.115 L1445.6 684.115 L1446.15 684.115 L1446.71 684.115 L1447.27 684.115 L1447.83 684.115 L1448.39 684.115 L1448.95 684.115 L1449.51 684.115 L1450.07 684.115 L1450.63 684.115 L1451.19 684.115 L1451.75 684.115 L1452.31 684.115 L1452.87 684.115 L1453.42 684.115 L1453.98 684.115 L1454.54 684.115 L1455.1 684.115 L1455.66 684.115 L1456.22 684.115 L1456.78 684.115 L1457.34 684.115 L1457.9 684.115 L1458.46 684.115 L1459.02 684.115 L1459.58 684.115 L1460.14 684.115 L1460.7 684.115 L1461.25 684.115 L1461.81 684.115 L1462.37 684.115 L1462.93 684.115 L1463.49 684.115 L1464.05 684.115 L1464.61 684.115 L1465.17 684.115 L1465.73 684.115 L1466.29 684.115 L1466.85 684.115 L1467.41 684.115 L1467.97 684.115 L1468.52 684.115 L1469.08 684.115 L1469.64 684.115 L1470.2 684.115 L1470.76 684.115 L1471.32 684.115 L1471.88 684.115 L1472.44 684.115 L1473 684.115 L1473.56 684.115 L1474.12 684.115 L1474.68 684.115 L1475.24 684.115 L1475.79 684.115 L1476.35 684.115 L1476.91 684.115 L1477.47 684.115 L1478.03 684.115 L1478.59 684.115 L1479.15 684.115 L1479.71 684.115 L1480.27 684.115 L1480.83 684.115 L1481.39 684.115 L1481.95 684.115 L1482.51 684.115 L1483.07 684.115 L1483.62 684.115 L1484.18 684.115 L1484.74 684.115 L1485.3 684.115 L1485.86 684.115 L1486.42 684.115 L1486.98 684.115 L1487.54 684.115 L1488.1 684.115 L1488.66 684.115 L1489.22 684.115 L1489.78 684.115 L1490.34 684.115 L1490.89 684.115 L1491.45 684.115 L1492.01 684.115 L1492.57 684.115 L1493.13 684.115 L1493.69 684.115 L1494.25 684.115 L1494.81 684.115 L1495.37 684.115 L1495.93 684.115 L1496.49 684.115 L1497.05 684.115 L1497.61 684.115 L1498.16 684.115 L1498.72 684.115 L1499.28 684.115 L1499.84 684.115 L1500.4 684.115 L1500.96 684.115 L1501.52 684.115 L1502.08 684.115 L1502.64 684.115 L1503.2 684.115 L1503.76 684.115 L1504.32 684.115 L1504.88 684.115 L1505.44 684.115 L1505.99 684.115 L1506.55 684.115 L1507.11 684.115 L1507.67 684.115 L1508.23 684.115 L1508.79 684.115 L1509.35 684.115 L1509.91 684.115 L1510.47 684.115 L1511.03 684.115 L1511.59 684.115 L1512.15 684.115 L1512.71 684.115 L1513.26 684.115 L1513.82 684.115 L1514.38 684.115 L1514.94 684.115 L1515.5 684.115 L1516.06 684.115 L1516.62 684.115 L1517.18 684.115 L1517.74 684.115 L1518.3 684.115 L1518.86 684.115 L1519.42 684.115 L1519.98 684.115 L1520.53 684.115 L1521.09 684.115 L1521.65 684.115 L1522.21 684.115 L1522.77 684.115 L1523.33 684.115 L1523.89 684.115 L1524.45 684.115 L1525.01 684.115 L1525.57 684.115 L1526.13 684.115 L1526.69 684.115 L1527.25 684.115 L1527.81 684.115 L1528.36 684.115 L1528.92 684.115 L1529.48 684.115 L1530.04 684.115 L1530.6 684.115 L1531.16 684.115 L1531.72 684.115 L1532.28 684.115 L1532.84 684.115 L1533.4 684.115 L1533.96 684.115 L1534.52 684.115 L1535.08 684.115 L1535.63 684.115 L1536.19 684.115 L1536.75 684.115 L1537.31 684.115 L1537.87 684.115 L1538.43 684.115 L1538.99 684.115 L1539.55 684.115 L1540.11 684.115 L1540.67 684.115 L1541.23 684.115 L1541.79 684.115 L1542.35 684.115 L1542.9 684.115 L1543.46 684.115 L1544.02 684.115 L1544.58 684.115 L1545.14 684.115 L1545.7 684.115 L1546.26 684.115 L1546.82 684.115 L1547.38 684.115 L1547.94 684.115 L1548.5 684.115 L1549.06 684.115 L1549.62 684.115 L1550.18 684.115 L1550.73 684.115 L1551.29 684.115 L1551.85 684.115 L1552.41 684.115 L1552.97 684.115 L1553.53 684.115 L1554.09 684.115 L1554.65 684.115 L1555.21 684.115 L1555.77 684.115 L1556.33 684.115 L1556.89 684.115 L1557.45 684.115 L1558 684.115 L1558.56 684.115 L1559.12 684.115 L1559.68 684.115 L1560.24 684.115 L1560.8 684.115 L1561.36 684.115 L1561.92 684.115 L1562.48 684.115 L1563.04 684.115 L1563.6 684.115 L1564.16 684.115 L1564.72 684.115 L1565.28 684.115 L1565.83 684.115 L1566.39 684.115 L1566.95 684.115 L1567.51 684.115 L1568.07 684.115 L1568.63 684.115 L1569.19 684.115 L1569.75 684.115 L1570.31 684.115 L1570.87 684.115 L1571.43 684.115 L1571.99 684.115 L1572.55 684.115 L1573.1 684.115 L1573.66 684.115 L1574.22 684.115 L1574.78 684.115 L1575.34 684.115 L1575.9 684.115 L1576.46 684.115 L1577.02 684.115 L1577.58 684.115 L1578.14 684.115 L1578.7 684.115 L1579.26 684.115 L1579.82 684.115 L1580.37 684.115 L1580.93 684.115 L1581.49 684.115 L1582.05 684.115 L1582.61 684.115 L1583.17 684.115 L1583.73 684.115 L1584.29 684.115 L1584.85 684.115 L1585.41 684.115 L1585.97 684.115 L1586.53 684.115 L1587.09 684.115 L1587.65 684.115 L1588.2 684.115 L1588.76 684.115 L1589.32 684.115 L1589.88 684.115 L1590.44 684.115 L1591 684.115 L1591.56 684.115 L1592.12 684.115 L1592.68 684.115 L1593.24 684.115 L1593.8 684.115 L1594.36 684.115 L1594.92 684.115 L1595.47 684.115 L1596.03 684.115 L1596.59 684.115 L1597.15 684.115 L1597.71 684.115 L1598.27 684.115 L1598.83 684.115 L1599.39 684.115 L1599.95 684.115 L1600.51 684.115 L1601.07 684.115 L1601.63 684.115 L1602.19 684.115 L1602.74 684.115 L1603.3 684.115 L1603.86 684.115 L1604.42 684.115 L1604.98 684.115 L1605.54 684.115 L1606.1 684.115 L1606.66 684.115 L1607.22 684.115 L1607.78 684.115 L1608.34 684.115 L1608.9 684.115 L1609.46 684.115 L1610.02 684.115 L1610.57 684.115 L1611.13 684.115 L1611.69 684.115 L1612.25 684.115 L1612.81 684.115 L1613.37 684.115 L1613.93 684.115 L1614.49 684.115 L1615.05 684.115 L1615.61 684.115 L1616.17 684.115 L1616.73 684.115 L1617.29 684.115 L1617.84 684.115 L1618.4 684.115 L1618.96 684.115 L1619.52 684.115 L1620.08 684.115 L1620.64 684.115 L1621.2 684.115 L1621.76 684.115 L1622.32 684.115 L1622.88 684.115 L1623.44 684.115 L1624 684.115 L1624.56 684.115 L1625.11 684.115 L1625.67 684.115 L1626.23 684.115 L1626.79 684.115 L1627.35 684.115 L1627.91 684.115 L1628.47 684.115 L1629.03 684.115 L1629.59 684.115 L1630.15 684.115 L1630.71 684.115 L1631.27 684.115 L1631.83 684.115 L1632.39 684.115 L1632.94 684.115 L1633.5 684.115 L1634.06 684.115 L1634.62 684.115 L1635.18 684.115 L1635.74 684.115 L1636.3 684.115 L1636.86 684.115 L1637.42 684.115 L1637.98 684.115 L1638.54 684.115 L1639.1 684.115 L1639.66 684.115 L1640.21 684.115 L1640.77 684.115 L1641.33 684.115 L1641.89 684.115 L1642.45 684.115 L1643.01 684.115 L1643.57 684.115 L1644.13 684.115 L1644.69 684.115 L1645.25 684.115 L1645.81 684.115 L1646.37 684.115 L1646.93 684.115 L1647.48 684.115 L1648.04 684.115 L1648.6 684.115 L1649.16 684.115 L1649.72 684.115 L1650.28 684.115 L1650.84 684.115 L1651.4 684.115 L1651.96 684.115 L1652.52 684.115 L1653.08 684.115 L1653.64 684.115 L1654.2 684.115 L1654.76 684.115 L1655.31 684.115 L1655.87 684.115 L1656.43 684.115 L1656.99 684.115 L1657.55 684.115 L1658.11 684.115 L1658.67 684.115 L1659.23 684.115 L1659.79 684.115 L1660.35 684.115 L1660.91 684.115 L1661.47 684.115 L1662.03 684.115 L1662.58 684.115 L1663.14 684.115 L1663.7 684.115 L1664.26 684.115 L1664.82 684.115 L1665.38 684.115 L1665.94 684.115 L1666.5 684.115 L1667.06 684.115 L1667.62 684.115 L1668.18 684.115 L1668.74 684.115 L1669.3 684.115 L1669.85 684.115 L1670.41 684.115 L1670.97 684.115 L1671.53 684.115 L1672.09 684.115 L1672.65 684.115 L1673.21 684.115 L1673.77 684.115 L1674.33 684.115 L1674.89 684.115 L1675.45 684.115 L1676.01 684.115 L1676.57 684.115 L1677.13 684.115 L1677.68 684.115 L1678.24 684.115 L1678.8 684.115 L1679.36 684.115 L1679.92 684.115 L1680.48 684.115 L1681.04 684.115 L1681.6 684.115 L1682.16 684.115 L1682.72 684.115 L1683.28 684.115 L1683.84 684.115 L1684.4 684.115 L1684.95 684.115 L1685.51 684.115 L1686.07 684.115 L1686.63 684.115 L1687.19 684.115 L1687.75 684.115 L1688.31 684.115 L1688.87 684.115 L1689.43 684.115 L1689.99 684.115 L1690.55 684.115 L1691.11 684.115 L1691.67 684.115 L1692.23 684.115 L1692.78 684.115 L1693.34 684.115 L1693.9 684.115 L1694.46 684.115 L1695.02 684.115 L1695.58 684.115 L1696.14 684.115 L1696.7 684.115 L1697.26 684.115 L1697.82 684.115 L1698.38 684.115 L1698.94 684.115 L1699.5 684.115 L1700.05 684.115 L1700.61 684.115 L1701.17 684.115 L1701.73 684.115 L1702.29 684.115 L1702.85 684.115 L1703.41 684.115 L1703.97 684.115 L1704.53 684.115 L1705.09 684.115 L1705.65 684.115 L1706.21 684.115 L1706.77 684.115 L1707.32 684.115 L1707.88 684.115 L1708.44 684.115 L1709 684.115 L1709.56 684.115 L1710.12 684.115 L1710.68 684.115 L1711.24 684.115 L1711.8 684.115 L1712.36 684.115 L1712.92 684.115 L1713.48 684.115 L1714.04 684.115 L1714.6 684.115 L1715.15 684.115 L1715.71 684.115 L1716.27 684.115 L1716.83 684.115 L1717.39 684.115 L1717.95 684.115 L1718.51 684.115 L1719.07 684.115 L1719.63 684.115 L1720.19 684.115 L1720.75 684.115 L1721.31 684.115 L1721.87 684.115 L1722.42 684.115 L1722.98 684.115 L1723.54 684.115 L1724.1 684.115 L1724.66 684.115 L1725.22 684.115 L1725.78 684.115 L1726.34 684.115 L1726.9 684.115 L1727.46 684.115 L1728.02 684.115 L1728.58 684.115 L1729.14 684.115 L1729.69 684.115 L1730.25 684.115 L1730.81 684.115 L1731.37 684.115 L1731.93 684.115 L1732.49 684.115 L1733.05 684.115 L1733.61 684.115 L1734.17 684.115 L1734.73 684.115 L1735.29 684.115 L1735.85 684.115 L1736.41 684.115 L1736.97 684.115 L1737.52 684.115 L1738.08 684.115 L1738.64 684.115 L1739.2 684.115 L1739.76 684.115 L1740.32 684.115 L1740.88 684.115 L1741.44 684.115 L1742 684.115 L1742.56 684.115 L1743.12 684.115 L1743.68 684.115 L1744.24 684.115 L1744.79 684.115 L1745.35 684.115 L1745.91 684.115 L1746.47 684.115 L1747.03 684.115 L1747.59 684.115 L1748.15 684.115 L1748.71 684.115 L1749.27 684.115 L1749.83 684.115 L1750.39 684.115 L1750.95 684.115 L1751.51 684.115 L1752.06 684.115 L1752.62 684.115 L1753.18 684.115 L1753.74 684.115 L1754.3 684.115 L1754.86 684.115 L1755.42 684.115 L1755.98 684.115 L1756.54 684.115 L1757.1 684.115 L1757.66 684.115 L1758.22 684.115 L1758.78 684.115 L1759.34 684.115 L1759.89 684.115 L1760.45 684.115 L1761.01 684.115 L1761.57 684.115 L1762.13 684.115 L1762.69 684.115 L1763.25 684.115 L1763.81 684.115 L1764.37 684.115 L1764.93 684.115 L1765.49 684.115 L1766.05 684.115 L1766.61 684.115 L1767.16 684.115 L1767.72 684.115 L1768.28 684.115 L1768.84 684.115 L1769.4 684.115 L1769.96 684.115 L1770.52 684.115 L1771.08 684.115 L1771.64 684.115 L1772.2 684.115 L1772.76 684.115 L1773.32 684.115 L1773.88 684.115 L1774.43 684.115 L1774.99 684.115 L1775.55 684.115 L1776.11 684.115 L1776.67 684.115 L1777.23 684.115 L1777.79 684.115 L1778.35 684.115 L1778.91 684.115 L1779.47 684.115 L1780.03 684.115 L1780.59 684.115 L1781.15 684.115 L1781.71 684.115 L1782.26 684.115 L1782.82 684.115 L1783.38 684.115 L1783.94 684.115 L1784.5 684.115 L1785.06 684.115 L1785.62 684.115 L1786.18 684.115 L1786.74 684.115 L1787.3 684.115 L1787.86 684.115 L1788.42 684.115 L1788.98 684.115 L1789.53 684.115 L1790.09 684.115 L1790.65 684.115 L1791.21 684.115 L1791.77 684.115 L1792.33 684.115 L1792.89 684.115 L1793.45 684.115 L1794.01 684.115 L1794.57 684.115 L1795.13 684.115 L1795.69 684.115 L1796.25 684.115 L1796.8 684.115 L1797.36 684.115 L1797.92 684.115 L1798.48 684.115 L1799.04 684.115 L1799.6 684.115 L1800.16 684.115 L1800.72 684.115 L1801.28 684.115 L1801.84 684.115 L1802.4 684.115 L1802.96 684.115 L1803.52 684.115 L1804.08 684.115 L1804.63 684.115 L1805.19 684.115 L1805.75 684.115 L1806.31 684.115 L1806.87 684.115 L1807.43 684.115 L1807.99 684.115 L1808.55 684.115 L1809.11 684.115 L1809.67 684.115 L1810.23 684.115 L1810.79 684.115 L1811.35 684.115 L1811.9 684.115 L1812.46 684.115 L1813.02 684.115 L1813.58 684.115 L1814.14 684.115 L1814.7 684.115 L1815.26 684.115 L1815.82 684.115 L1816.38 684.115 L1816.94 684.115 L1817.5 684.115 L1818.06 684.115 L1818.62 684.115 L1819.18 684.115 L1819.73 684.115 L1820.29 684.115 L1820.85 684.115 L1821.41 684.115 L1821.97 684.115 L1822.53 684.115 L1823.09 684.115 L1823.65 684.115 L1824.21 684.115 L1824.77 684.115 L1825.33 684.115 L1825.89 684.115 L1826.45 684.115 L1827 684.115 L1827.56 684.115 L1828.12 684.115 L1828.68 684.115 L1829.24 684.115 L1829.8 684.115 L1830.36 684.115 L1830.92 684.115 L1831.48 684.115 L1832.04 684.115 L1832.6 684.115 L1833.16 684.115 L1833.72 684.115 L1834.27 684.115 L1834.83 684.115 L1835.39 684.115 L1835.95 684.115 L1836.51 684.115 L1837.07 684.115 L1837.63 684.115 L1838.19 684.115 L1838.19 682.195 L1837.63 682.195 L1837.07 682.195 L1836.51 682.195 L1835.95 682.195 L1835.39 682.195 L1834.83 682.195 L1834.27 682.195 L1833.72 682.195 L1833.16 682.195 L1832.6 682.195 L1832.04 682.195 L1831.48 682.195 L1830.92 682.195 L1830.36 682.195 L1829.8 682.195 L1829.24 682.195 L1828.68 682.195 L1828.12 682.195 L1827.56 682.195 L1827 682.195 L1826.45 682.195 L1825.89 682.195 L1825.33 682.195 L1824.77 682.195 L1824.21 682.195 L1823.65 682.195 L1823.09 682.195 L1822.53 682.195 L1821.97 682.195 L1821.41 682.195 L1820.85 682.195 L1820.29 682.195 L1819.73 682.195 L1819.18 682.195 L1818.62 682.195 L1818.06 682.195 L1817.5 682.195 L1816.94 682.195 L1816.38 682.195 L1815.82 682.195 L1815.26 682.195 L1814.7 682.195 L1814.14 682.195 L1813.58 682.195 L1813.02 682.195 L1812.46 682.195 L1811.9 682.195 L1811.35 682.195 L1810.79 682.195 L1810.23 682.195 L1809.67 682.195 L1809.11 682.195 L1808.55 682.195 L1807.99 682.195 L1807.43 682.195 L1806.87 682.195 L1806.31 682.195 L1805.75 682.195 L1805.19 682.195 L1804.63 682.195 L1804.08 682.195 L1803.52 682.195 L1802.96 682.195 L1802.4 682.195 L1801.84 682.195 L1801.28 682.195 L1800.72 682.195 L1800.16 682.195 L1799.6 682.195 L1799.04 682.195 L1798.48 682.195 L1797.92 682.195 L1797.36 682.195 L1796.8 682.195 L1796.25 682.195 L1795.69 682.195 L1795.13 682.195 L1794.57 682.195 L1794.01 682.195 L1793.45 682.195 L1792.89 682.195 L1792.33 682.195 L1791.77 682.195 L1791.21 682.195 L1790.65 682.195 L1790.09 682.195 L1789.53 682.195 L1788.98 682.195 L1788.42 682.195 L1787.86 682.195 L1787.3 682.195 L1786.74 682.195 L1786.18 682.195 L1785.62 682.195 L1785.06 682.195 L1784.5 682.195 L1783.94 682.195 L1783.38 682.195 L1782.82 682.195 L1782.26 682.195 L1781.71 682.195 L1781.15 682.195 L1780.59 682.195 L1780.03 682.195 L1779.47 682.195 L1778.91 682.195 L1778.35 682.195 L1777.79 682.195 L1777.23 682.195 L1776.67 682.195 L1776.11 682.195 L1775.55 682.195 L1774.99 682.195 L1774.43 682.195 L1773.88 682.195 L1773.32 682.195 L1772.76 682.195 L1772.2 682.195 L1771.64 682.195 L1771.08 682.195 L1770.52 682.195 L1769.96 682.195 L1769.4 682.195 L1768.84 682.195 L1768.28 682.195 L1767.72 682.195 L1767.16 682.195 L1766.61 682.195 L1766.05 682.195 L1765.49 682.195 L1764.93 682.195 L1764.37 682.195 L1763.81 682.195 L1763.25 682.195 L1762.69 682.195 L1762.13 682.195 L1761.57 682.195 L1761.01 682.195 L1760.45 682.195 L1759.89 682.195 L1759.34 682.195 L1758.78 682.195 L1758.22 682.195 L1757.66 682.195 L1757.1 682.195 L1756.54 682.195 L1755.98 682.195 L1755.42 682.195 L1754.86 682.195 L1754.3 682.195 L1753.74 682.195 L1753.18 682.195 L1752.62 682.195 L1752.06 682.195 L1751.51 682.195 L1750.95 682.195 L1750.39 682.195 L1749.83 682.195 L1749.27 682.195 L1748.71 682.195 L1748.15 682.195 L1747.59 682.195 L1747.03 682.195 L1746.47 682.195 L1745.91 682.195 L1745.35 682.195 L1744.79 682.195 L1744.24 682.195 L1743.68 682.195 L1743.12 682.195 L1742.56 682.195 L1742 682.195 L1741.44 682.195 L1740.88 682.195 L1740.32 682.195 L1739.76 682.195 L1739.2 682.195 L1738.64 682.195 L1738.08 682.195 L1737.52 682.195 L1736.97 682.195 L1736.41 682.195 L1735.85 682.195 L1735.29 682.195 L1734.73 682.195 L1734.17 682.195 L1733.61 682.195 L1733.05 682.195 L1732.49 682.195 L1731.93 682.195 L1731.37 682.195 L1730.81 682.195 L1730.25 682.195 L1729.69 682.195 L1729.14 682.195 L1728.58 682.195 L1728.02 682.195 L1727.46 682.195 L1726.9 682.195 L1726.34 682.195 L1725.78 682.195 L1725.22 682.195 L1724.66 682.195 L1724.1 682.195 L1723.54 682.195 L1722.98 682.195 L1722.42 682.195 L1721.87 682.195 L1721.31 682.195 L1720.75 682.195 L1720.19 682.195 L1719.63 682.195 L1719.07 682.195 L1718.51 682.195 L1717.95 682.195 L1717.39 682.195 L1716.83 682.195 L1716.27 682.195 L1715.71 682.195 L1715.15 682.195 L1714.6 682.195 L1714.04 682.195 L1713.48 682.195 L1712.92 682.195 L1712.36 682.195 L1711.8 682.195 L1711.24 682.195 L1710.68 682.195 L1710.12 682.195 L1709.56 682.195 L1709 682.195 L1708.44 682.195 L1707.88 682.195 L1707.32 682.195 L1706.77 682.195 L1706.21 682.195 L1705.65 682.195 L1705.09 682.195 L1704.53 682.195 L1703.97 682.195 L1703.41 682.195 L1702.85 682.195 L1702.29 682.195 L1701.73 682.195 L1701.17 682.195 L1700.61 682.195 L1700.05 682.195 L1699.5 682.195 L1698.94 682.195 L1698.38 682.195 L1697.82 682.195 L1697.26 682.195 L1696.7 682.195 L1696.14 682.195 L1695.58 682.195 L1695.02 682.195 L1694.46 682.195 L1693.9 682.195 L1693.34 682.195 L1692.78 682.195 L1692.23 682.195 L1691.67 682.195 L1691.11 682.195 L1690.55 682.195 L1689.99 682.195 L1689.43 682.195 L1688.87 682.195 L1688.31 682.195 L1687.75 682.195 L1687.19 682.195 L1686.63 682.195 L1686.07 682.195 L1685.51 682.195 L1684.95 682.195 L1684.4 682.195 L1683.84 682.195 L1683.28 682.195 L1682.72 682.195 L1682.16 682.195 L1681.6 682.195 L1681.04 682.195 L1680.48 682.195 L1679.92 682.195 L1679.36 682.195 L1678.8 682.195 L1678.24 682.195 L1677.68 682.195 L1677.13 682.195 L1676.57 682.195 L1676.01 682.195 L1675.45 682.195 L1674.89 682.195 L1674.33 682.195 L1673.77 682.195 L1673.21 682.195 L1672.65 682.195 L1672.09 682.195 L1671.53 682.195 L1670.97 682.195 L1670.41 682.195 L1669.85 682.195 L1669.3 682.195 L1668.74 682.195 L1668.18 682.195 L1667.62 682.195 L1667.06 682.195 L1666.5 682.195 L1665.94 682.195 L1665.38 682.195 L1664.82 682.195 L1664.26 682.195 L1663.7 682.195 L1663.14 682.195 L1662.58 682.195 L1662.03 682.195 L1661.47 682.195 L1660.91 682.195 L1660.35 682.195 L1659.79 682.195 L1659.23 682.195 L1658.67 682.195 L1658.11 682.195 L1657.55 682.195 L1656.99 682.195 L1656.43 682.195 L1655.87 682.195 L1655.31 682.195 L1654.76 682.195 L1654.2 682.195 L1653.64 682.195 L1653.08 682.195 L1652.52 682.195 L1651.96 682.195 L1651.4 682.195 L1650.84 682.195 L1650.28 682.195 L1649.72 682.195 L1649.16 682.195 L1648.6 682.195 L1648.04 682.195 L1647.48 682.195 L1646.93 682.195 L1646.37 682.195 L1645.81 682.195 L1645.25 682.195 L1644.69 682.195 L1644.13 682.195 L1643.57 682.195 L1643.01 682.195 L1642.45 682.195 L1641.89 682.195 L1641.33 682.195 L1640.77 682.195 L1640.21 682.195 L1639.66 682.195 L1639.1 682.195 L1638.54 682.195 L1637.98 682.195 L1637.42 682.195 L1636.86 682.195 L1636.3 682.195 L1635.74 682.195 L1635.18 682.195 L1634.62 682.195 L1634.06 682.195 L1633.5 682.195 L1632.94 682.195 L1632.39 682.195 L1631.83 682.195 L1631.27 682.195 L1630.71 682.195 L1630.15 682.195 L1629.59 682.195 L1629.03 682.195 L1628.47 682.195 L1627.91 682.195 L1627.35 682.195 L1626.79 682.195 L1626.23 682.195 L1625.67 682.195 L1625.11 682.195 L1624.56 682.195 L1624 682.195 L1623.44 682.195 L1622.88 682.195 L1622.32 682.195 L1621.76 682.195 L1621.2 682.195 L1620.64 682.195 L1620.08 682.195 L1619.52 682.195 L1618.96 682.195 L1618.4 682.195 L1617.84 682.195 L1617.29 682.195 L1616.73 682.195 L1616.17 682.195 L1615.61 682.195 L1615.05 682.195 L1614.49 682.195 L1613.93 682.195 L1613.37 682.195 L1612.81 682.195 L1612.25 682.195 L1611.69 682.195 L1611.13 682.195 L1610.57 682.195 L1610.02 682.195 L1609.46 682.195 L1608.9 682.195 L1608.34 682.195 L1607.78 682.195 L1607.22 682.195 L1606.66 682.195 L1606.1 682.195 L1605.54 682.195 L1604.98 682.195 L1604.42 682.195 L1603.86 682.195 L1603.3 682.195 L1602.74 682.195 L1602.19 682.195 L1601.63 682.195 L1601.07 682.195 L1600.51 682.195 L1599.95 682.195 L1599.39 682.195 L1598.83 682.195 L1598.27 682.195 L1597.71 682.195 L1597.15 682.195 L1596.59 682.195 L1596.03 682.195 L1595.47 682.195 L1594.92 682.195 L1594.36 682.195 L1593.8 682.195 L1593.24 682.195 L1592.68 682.195 L1592.12 682.195 L1591.56 682.195 L1591 682.195 L1590.44 682.195 L1589.88 682.195 L1589.32 682.195 L1588.76 682.195 L1588.2 682.195 L1587.65 682.195 L1587.09 682.195 L1586.53 682.195 L1585.97 682.195 L1585.41 682.195 L1584.85 682.195 L1584.29 682.195 L1583.73 682.195 L1583.17 682.195 L1582.61 682.195 L1582.05 682.195 L1581.49 682.195 L1580.93 682.195 L1580.37 682.195 L1579.82 682.195 L1579.26 682.195 L1578.7 682.195 L1578.14 682.195 L1577.58 682.195 L1577.02 682.195 L1576.46 682.195 L1575.9 682.195 L1575.34 682.195 L1574.78 682.195 L1574.22 682.195 L1573.66 682.195 L1573.1 682.195 L1572.55 682.195 L1571.99 682.195 L1571.43 682.195 L1570.87 682.195 L1570.31 682.195 L1569.75 682.195 L1569.19 682.195 L1568.63 682.195 L1568.07 682.195 L1567.51 682.195 L1566.95 682.195 L1566.39 682.195 L1565.83 682.195 L1565.28 682.195 L1564.72 682.195 L1564.16 682.195 L1563.6 682.195 L1563.04 682.195 L1562.48 682.195 L1561.92 682.195 L1561.36 682.195 L1560.8 682.195 L1560.24 682.195 L1559.68 682.195 L1559.12 682.195 L1558.56 682.195 L1558 682.195 L1557.45 682.195 L1556.89 682.195 L1556.33 682.195 L1555.77 682.195 L1555.21 682.195 L1554.65 682.195 L1554.09 682.195 L1553.53 682.195 L1552.97 682.195 L1552.41 682.195 L1551.85 682.195 L1551.29 682.195 L1550.73 682.195 L1550.18 682.195 L1549.62 682.195 L1549.06 682.195 L1548.5 682.195 L1547.94 682.195 L1547.38 682.195 L1546.82 682.195 L1546.26 682.195 L1545.7 682.195 L1545.14 682.195 L1544.58 682.195 L1544.02 682.195 L1543.46 682.195 L1542.9 682.195 L1542.35 682.195 L1541.79 682.195 L1541.23 682.195 L1540.67 682.195 L1540.11 682.195 L1539.55 682.195 L1538.99 682.195 L1538.43 682.195 L1537.87 682.195 L1537.31 682.195 L1536.75 682.195 L1536.19 682.195 L1535.63 682.195 L1535.08 682.195 L1534.52 682.195 L1533.96 682.195 L1533.4 682.195 L1532.84 682.195 L1532.28 682.195 L1531.72 682.195 L1531.16 682.195 L1530.6 682.195 L1530.04 682.195 L1529.48 682.195 L1528.92 682.195 L1528.36 682.195 L1527.81 682.195 L1527.25 682.195 L1526.69 682.195 L1526.13 682.195 L1525.57 682.195 L1525.01 682.195 L1524.45 682.195 L1523.89 682.195 L1523.33 682.195 L1522.77 682.195 L1522.21 682.195 L1521.65 682.195 L1521.09 682.195 L1520.53 682.195 L1519.98 682.195 L1519.42 682.195 L1518.86 682.195 L1518.3 682.195 L1517.74 682.195 L1517.18 682.195 L1516.62 682.195 L1516.06 682.195 L1515.5 682.195 L1514.94 682.195 L1514.38 682.195 L1513.82 682.195 L1513.26 682.195 L1512.71 682.195 L1512.15 682.195 L1511.59 682.195 L1511.03 682.195 L1510.47 682.195 L1509.91 682.195 L1509.35 682.195 L1508.79 682.195 L1508.23 682.195 L1507.67 682.195 L1507.11 682.195 L1506.55 682.195 L1505.99 682.195 L1505.44 682.195 L1504.88 682.195 L1504.32 682.195 L1503.76 682.195 L1503.2 682.195 L1502.64 682.195 L1502.08 682.195 L1501.52 682.195 L1500.96 682.195 L1500.4 682.195 L1499.84 682.195 L1499.28 682.195 L1498.72 682.195 L1498.16 682.195 L1497.61 682.195 L1497.05 682.195 L1496.49 682.195 L1495.93 682.195 L1495.37 682.195 L1494.81 682.195 L1494.25 682.195 L1493.69 682.195 L1493.13 682.195 L1492.57 682.195 L1492.01 682.195 L1491.45 682.195 L1490.89 682.195 L1490.34 682.195 L1489.78 682.195 L1489.22 682.195 L1488.66 682.195 L1488.1 682.195 L1487.54 682.195 L1486.98 682.195 L1486.42 682.195 L1485.86 682.195 L1485.3 682.195 L1484.74 682.195 L1484.18 682.195 L1483.62 682.195 L1483.07 682.195 L1482.51 682.195 L1481.95 682.195 L1481.39 682.195 L1480.83 682.195 L1480.27 682.195 L1479.71 682.195 L1479.15 682.195 L1478.59 682.195 L1478.03 682.195 L1477.47 682.195 L1476.91 682.195 L1476.35 682.195 L1475.79 682.195 L1475.24 682.195 L1474.68 682.195 L1474.12 682.195 L1473.56 682.195 L1473 682.195 L1472.44 682.195 L1471.88 682.195 L1471.32 682.195 L1470.76 682.195 L1470.2 682.195 L1469.64 682.195 L1469.08 682.195 L1468.52 682.195 L1467.97 682.195 L1467.41 682.195 L1466.85 682.195 L1466.29 682.195 L1465.73 682.195 L1465.17 682.195 L1464.61 682.195 L1464.05 682.195 L1463.49 682.195 L1462.93 682.195 L1462.37 682.195 L1461.81 682.195 L1461.25 682.195 L1460.7 682.195 L1460.14 682.195 L1459.58 682.195 L1459.02 682.195 L1458.46 682.195 L1457.9 682.195 L1457.34 682.195 L1456.78 682.195 L1456.22 682.195 L1455.66 682.195 L1455.1 682.195 L1454.54 682.195 L1453.98 682.195 L1453.42 682.195 L1452.87 682.195 L1452.31 682.195 L1451.75 682.195 L1451.19 682.195 L1450.63 682.195 L1450.07 682.195 L1449.51 682.195 L1448.95 682.195 L1448.39 682.195 L1447.83 682.195 L1447.27 682.195 L1446.71 682.195 L1446.15 682.195 L1445.6 682.195 L1445.04 682.195 L1444.48 682.195 L1443.92 682.195 L1443.36 682.195 L1442.8 682.195 L1442.24 682.195 L1441.68 682.195 L1441.12 682.195 L1440.56 682.195 L1440 682.195 L1439.44 682.195 L1438.88 682.195 L1438.33 682.195 L1437.77 682.195 L1437.21 682.195 L1436.65 682.195 L1436.09 682.195 L1435.53 682.195 L1434.97 682.195 L1434.41 682.195 L1433.85 682.195 L1433.29 682.195 L1432.73 682.195 L1432.17 682.195 L1431.61 682.195 L1431.05 682.195 L1430.5 682.195 L1429.94 682.195 L1429.38 682.195 L1428.82 682.195 L1428.26 682.195 L1427.7 682.195 L1427.14 682.195 L1426.58 682.195 L1426.02 682.195 L1425.46 682.195 L1424.9 682.195 L1424.34 682.195 L1423.78 682.195 L1423.23 682.195 L1422.67 682.195 L1422.11 682.195 L1421.55 682.195 L1420.99 682.195 L1420.43 682.195 L1419.87 682.195 L1419.31 682.195 L1418.75 682.195 L1418.19 682.195 L1417.63 682.195 L1417.07 682.195 L1416.51 682.195 L1415.95 682.195 L1415.4 682.195 L1414.84 682.195 L1414.28 682.195 L1413.72 682.195 L1413.16 682.195 L1412.6 682.195 L1412.04 682.195 L1411.48 682.195 L1410.92 682.195 L1410.36 682.195 L1409.8 682.195 L1409.24 682.195 L1408.68 682.195 L1408.13 682.195 L1407.57 682.195 L1407.01 682.195 L1406.45 682.195 L1405.89 682.195 L1405.33 682.195 L1404.77 682.195 L1404.21 682.195 L1403.65 682.195 L1403.09 682.195 L1402.53 682.195 L1401.97 682.195 L1401.41 682.195 L1400.86 682.195 L1400.3 682.195 L1399.74 682.195 L1399.18 682.195 L1398.62 682.195 L1398.06 682.195 L1397.5 682.195 L1396.94 682.195 L1396.38 682.195 L1395.82 682.195 L1395.26 682.195 L1394.7 682.195 L1394.14 682.195 L1393.58 682.195 L1393.03 682.195 L1392.47 682.195 L1391.91 682.195 L1391.35 682.195 L1390.79 682.195 L1390.23 682.195 L1389.67 682.195 L1389.11 682.195 L1388.55 682.195 L1387.99 682.195 L1387.43 682.195 L1386.87 682.195 L1386.31 682.195 L1385.76 682.195 L1385.2 682.195 L1384.64 682.195 L1384.08 682.195 L1383.52 682.195 L1382.96 682.195 L1382.4 682.195 L1381.84 682.195 L1381.28 682.195 L1380.72 682.195 L1380.16 682.195 L1379.6 682.195 L1379.04 682.195 L1378.49 682.195 L1377.93 682.195 L1377.37 682.195 L1376.81 682.195 L1376.25 682.195 L1375.69 682.195 L1375.13 682.195 L1374.57 682.195 L1374.01 682.195 L1373.45 682.195 L1372.89 682.195 L1372.33 682.195 L1371.77 682.195 L1371.21 682.195 L1370.66 682.195 L1370.1 682.195 L1369.54 682.195 L1368.98 682.195 L1368.42 682.195 L1367.86 682.195 L1367.3 682.195 L1366.74 682.195 L1366.18 682.195 L1365.62 682.195 L1365.06 682.195 L1364.5 682.195 L1363.94 682.195 L1363.39 682.195 L1362.83 682.195 L1362.27 682.195 L1361.71 682.195 L1361.15 682.195 L1360.59 682.195 L1360.03 682.195 L1359.47 682.195 L1358.91 682.195 L1358.35 682.195 L1357.79 682.195 L1357.23 682.195 L1356.67 682.195 L1356.12 682.195 L1355.56 682.195 L1355 682.195 L1354.44 682.195 L1353.88 682.195 L1353.32 682.195 L1352.76 682.195 L1352.2 682.195 L1351.64 682.195 L1351.08 682.195 L1350.52 682.195 L1349.96 682.195 L1349.4 682.195 L1348.84 682.195 L1348.29 682.195 L1347.73 682.195 L1347.17 682.195 L1346.61 682.195 L1346.05 682.195 L1345.49 682.195 L1344.93 682.195 L1344.37 682.195 L1343.81 682.195 L1343.25 682.195 L1342.69 682.195 L1342.13 682.195 L1341.57 682.195 L1341.02 682.195 L1340.46 682.195 L1339.9 682.195 L1339.34 682.195 L1338.78 682.195 L1338.22 682.195 L1337.66 682.195 L1337.1 682.195 L1336.54 682.195 L1335.98 682.195 L1335.42 682.195 L1334.86 682.195 L1334.3 682.195 L1333.75 682.195 L1333.19 682.195 L1332.63 682.195 L1332.07 682.195 L1331.51 682.195 L1330.95 682.195 L1330.39 682.195 L1329.83 682.195 L1329.27 682.195 L1328.71 682.195 L1328.15 682.195 L1327.59 682.195 L1327.03 682.195 L1326.47 682.195 L1325.92 682.195 L1325.36 682.195 L1324.8 682.195 L1324.24 682.195 L1323.68 682.195 L1323.12 682.195 L1322.56 682.195 L1322 682.195 L1321.44 682.195 L1320.88 682.195 L1320.32 682.195 L1319.76 682.195 L1319.2 682.195 L1318.65 682.195 L1318.09 682.195 L1317.53 682.195 L1316.97 682.195 L1316.41 682.195 L1315.85 682.195 L1315.29 682.195 L1314.73 682.195 L1314.17 682.195 L1313.61 682.195 L1313.05 682.195 L1312.49 682.195 L1311.93 682.195 L1311.38 682.195 L1310.82 682.195 L1310.26 682.195 L1309.7 682.195 L1309.14 682.195 L1308.58 682.195 L1308.02 682.195 L1307.46 682.195 L1306.9 682.195 L1306.34 682.195 L1305.78 682.195 L1305.22 682.195 L1304.66 682.195 L1304.1 682.195 L1303.55 682.195 L1302.99 682.195 L1302.43 682.195 L1301.87 682.195 L1301.31 682.195 L1300.75 682.195 L1300.19 682.195 L1299.63 682.195 L1299.07 682.195 L1298.51 682.195 L1297.95 682.195 L1297.39 682.195 L1296.83 682.195 L1296.28 682.195 L1295.72 682.195 L1295.16 682.195 L1294.6 682.195 L1294.04 682.195 L1293.48 682.195 L1292.92 682.195 L1292.36 682.195 L1291.8 682.195 L1291.24 682.195 L1290.68 682.195 L1290.12 682.195 L1289.56 682.195 L1289 682.195 L1288.45 682.195 L1287.89 682.195 L1287.33 682.195 L1286.77 682.195 L1286.21 682.195 L1285.65 682.195 L1285.09 682.195 L1284.53 682.195 L1283.97 682.195 L1283.41 682.195 L1282.85 682.195 L1282.29 682.195 L1281.73 682.195 L1281.18 682.195 L1280.62 682.195 L1280.06 682.195 L1279.5 682.195 L1278.94 682.195 L1278.38 682.195 L1277.82 682.195 L1277.26 682.195 L1276.7 682.195 L1276.14 682.195 L1275.58 682.195 L1275.02 682.195 L1274.46 682.195 L1273.91 682.195 L1273.35 682.195 L1272.79 682.195 L1272.23 682.195 L1271.67 682.195 L1271.11 682.195 L1270.55 682.195 L1269.99 682.195 L1269.43 682.195 L1268.87 682.195 L1268.31 682.195 L1267.75 682.195 L1267.19 682.195 L1266.63 682.195 L1266.08 682.195 L1265.52 682.195 L1264.96 682.195 L1264.4 682.195 L1263.84 682.195 L1263.28 682.195 L1262.72 682.195 L1262.16 682.195 L1261.6 682.195 L1261.04 682.195 L1260.48 682.195 L1259.92 682.195 L1259.36 682.195 L1258.81 682.195 L1258.25 682.195 L1257.69 682.195 L1257.13 682.195 L1256.57 682.195 L1256.01 682.195 L1255.45 682.195 L1254.89 682.195 L1254.33 682.195 L1253.77 682.195 L1253.21 682.195 L1252.65 682.195 L1252.09 682.195 L1251.54 682.195 L1250.98 682.195 L1250.42 682.195 L1249.86 682.195 L1249.3 682.195 L1248.74 682.195 L1248.18 682.195 L1247.62 682.195 L1247.06 682.195 L1246.5 682.195 L1245.94 682.195 L1245.38 682.195 L1244.82 682.195 L1244.26 682.195 L1243.71 682.195 L1243.15 682.195 L1242.59 682.195 L1242.03 682.195 L1241.47 682.195 L1240.91 682.195 L1240.35 682.195 L1239.79 682.195 L1239.23 682.195 L1238.67 682.195 L1238.11 682.195 L1237.55 682.195 L1236.99 682.195 L1236.44 682.195 L1235.88 682.195 L1235.32 682.195 L1234.76 682.195 L1234.2 682.195 L1233.64 682.195 L1233.08 682.195 L1232.52 682.195 L1231.96 682.195 L1231.4 682.195 L1230.84 682.195 L1230.28 682.195 L1229.72 682.195 L1229.17 682.195 L1228.61 682.195 L1228.05 682.195 L1227.49 682.195 L1226.93 682.195 L1226.37 682.195 L1225.81 682.195 L1225.25 682.195 L1224.69 682.195 L1224.13 682.195 L1223.57 682.195 L1223.01 682.195 L1222.45 682.195 L1221.89 682.195 L1221.34 682.195 L1220.78 682.195 L1220.22 682.195 L1219.66 682.195 L1219.1 682.195 L1218.54 682.195 L1217.98 682.195 L1217.42 682.195 L1216.86 682.195 L1216.3 682.195 L1215.74 682.195 L1215.18 682.195 L1214.62 682.195 L1214.07 682.195 L1213.51 682.195 L1212.95 682.195 L1212.39 682.195 L1211.83 682.195 L1211.27 682.195 L1210.71 682.195 L1210.15 682.195 L1209.59 682.195 L1209.03 682.195 L1208.47 682.195 L1207.91 682.195 L1207.35 682.195 L1206.8 682.195 L1206.24 682.195 L1205.68 682.195 L1205.12 682.195 L1204.56 682.195 L1204 682.195 L1203.44 682.195 L1202.88 682.195 L1202.32 682.195 L1201.76 682.195 L1201.2 682.195 L1200.64 682.195 L1200.08 682.195 L1199.52 682.195 L1198.97 682.195 L1198.41 682.195 L1197.85 682.195 L1197.29 682.195 L1196.73 682.195 L1196.17 682.195 L1195.61 682.195 L1195.05 682.195 L1194.49 682.195 L1193.93 682.195 L1193.37 682.195 L1192.81 682.195 L1192.25 682.195 L1191.7 682.195 L1191.14 682.195 L1190.58 682.195 L1190.02 682.195 L1189.46 682.195 L1188.9 682.195 L1188.34 682.195 L1187.78 682.195 L1187.22 682.195 L1186.66 682.195 L1186.1 682.195 L1185.54 682.195 L1184.98 682.195 L1184.43 682.195 L1183.87 682.195 L1183.31 682.195 L1182.75 682.195 L1182.19 682.195 L1181.63 682.195 L1181.07 682.195 L1180.51 682.195 L1179.95 682.195 L1179.39 682.195 L1178.83 682.195 L1178.27 682.195 L1177.71 682.195 L1177.15 682.195 L1176.6 682.195 L1176.04 682.195 L1175.48 682.195 L1174.92 682.195 L1174.36 682.195 L1173.8 682.195 L1173.24 682.195 L1172.68 682.195 L1172.12 682.195 L1171.56 682.195 L1171 682.195 L1170.44 682.195 L1169.88 682.195 L1169.33 682.195 L1168.77 682.195 L1168.21 682.195 L1167.65 682.195 L1167.09 682.195 L1166.53 682.195 L1165.97 682.195 L1165.41 682.195 L1164.85 682.195 L1164.29 682.195 L1163.73 682.195 L1163.17 682.195 L1162.61 682.195 L1162.05 682.195 L1161.5 682.195 L1160.94 682.195 L1160.38 682.195 L1159.82 682.195 L1159.26 682.195 L1158.7 682.195 L1158.14 682.195 L1157.58 682.195 L1157.02 682.195 L1156.46 682.195 L1155.9 682.195 L1155.34 682.195 L1154.78 682.195 L1154.23 682.195 L1153.67 682.195 L1153.11 682.195 L1152.55 682.195 L1151.99 682.195 L1151.43 682.195 L1150.87 682.195 L1150.31 682.195 L1149.75 682.195 L1149.19 682.195 L1148.63 682.195 L1148.07 682.195 L1147.51 682.195 L1146.96 682.195 L1146.4 682.195 L1145.84 682.195 L1145.28 682.195 L1144.72 682.195 L1144.16 682.195 L1143.6 682.195 L1143.04 682.195 L1142.48 682.195 L1141.92 682.195 L1141.36 682.195 L1140.8 682.195 L1140.24 682.195 L1139.68 682.195 L1139.13 682.195 L1138.57 682.195 L1138.01 682.195 L1137.45 682.195 L1136.89 682.195 L1136.33 682.195 L1135.77 682.195 L1135.21 682.195 L1134.65 682.195 L1134.09 682.195 L1133.53 682.195 L1132.97 682.195 L1132.41 682.195 L1131.86 682.195 L1131.3 682.195 L1130.74 682.195 L1130.18 682.195 L1129.62 682.195 L1129.06 682.195 L1128.5 682.195 L1127.94 682.195 L1127.38 682.195 L1126.82 682.195 L1126.26 682.195 L1125.7 682.195 L1125.14 682.195 L1124.59 682.195 L1124.03 682.195 L1123.47 682.195 L1122.91 682.195 L1122.35 682.195 L1121.79 682.195 L1121.23 682.195 L1120.67 682.195 L1120.11 682.195 L1119.55 682.195 L1118.99 682.195 L1118.43 682.195 L1117.87 682.195 L1117.31 682.195 L1116.76 682.195 L1116.2 682.195 L1115.64 682.195 L1115.08 682.195 L1114.52 682.195 L1113.96 682.195 L1113.4 682.195 L1112.84 682.195 L1112.28 682.195 L1111.72 682.195 L1111.16 682.195 L1110.6 682.195 L1110.04 682.195 L1109.49 682.195 L1108.93 682.195 L1108.37 682.195 L1107.81 682.195 L1107.25 682.195 L1106.69 682.195 L1106.13 682.195 L1105.57 682.195 L1105.01 682.195 L1104.45 682.195 L1103.89 682.195 L1103.33 682.195 L1102.77 682.195 L1102.22 682.195 L1101.66 682.195 L1101.1 682.195 L1100.54 682.195 L1099.98 682.195 L1099.42 682.195 L1098.86 682.195 L1098.3 682.195 L1097.74 682.195 L1097.18 682.195 L1096.62 682.195 L1096.06 682.195 L1095.5 682.195 L1094.94 682.195 L1094.39 682.195 L1093.83 682.195 L1093.27 682.195 L1092.71 682.195 L1092.15 682.195 L1091.59 682.195 L1091.03 682.195 L1090.47 682.195 L1089.91 682.195 L1089.35 682.195 L1088.79 682.195 L1088.23 682.195 L1087.67 682.195 L1087.12 682.195 L1086.56 682.195 L1086 682.195 L1085.44 682.195 L1084.88 682.195 L1084.32 682.195 L1083.76 682.195 L1083.2 682.195 L1082.64 682.195 L1082.08 682.195 L1081.52 682.195 L1080.96 682.195 L1080.4 682.195 L1079.85 682.195 L1079.29 682.195 L1078.73 682.195 L1078.17 682.195 L1077.61 682.195 L1077.05 682.195 L1076.49 682.195 L1075.93 682.195 L1075.37 682.195 L1074.81 682.195 L1074.25 682.195 L1073.69 682.195 L1073.13 682.195 L1072.57 682.195 L1072.02 682.195 L1071.46 682.195 L1070.9 682.195 L1070.34 682.195 L1069.78 682.195 L1069.22 682.195 L1068.66 682.195 L1068.1 682.195 L1067.54 682.195 L1066.98 682.195 L1066.42 682.195 L1065.86 682.195 L1065.3 682.195 L1064.75 682.195 L1064.19 682.195 L1063.63 682.195 L1063.07 682.195 L1062.51 682.195 L1061.95 682.195 L1061.39 682.195 L1060.83 682.195 L1060.27 682.195 L1059.71 682.195 L1059.15 682.195 L1058.59 682.195 L1058.03 682.195 L1057.48 682.195 L1056.92 682.195 L1056.36 682.195 L1055.8 682.195 L1055.24 682.195 L1054.68 682.195 L1054.12 682.195 L1053.56 682.195 L1053 682.195 L1052.44 682.195 L1051.88 682.195 L1051.32 682.195 L1050.76 682.195 L1050.2 682.195 L1049.65 682.195 L1049.09 682.195 L1048.53 682.195 L1047.97 682.195 L1047.41 682.195 L1046.85 682.195 L1046.29 682.195 L1045.73 682.195 L1045.17 682.195 L1044.61 682.195 L1044.05 682.195 L1043.49 682.195 L1042.93 682.195 L1042.38 682.195 L1041.82 682.195 L1041.26 682.195 L1040.7 682.195 L1040.14 682.195 L1039.58 682.195 L1039.02 682.195 L1038.46 682.195 L1037.9 682.195 L1037.34 682.195 L1036.78 682.195 L1036.22 682.195 L1035.66 682.195 L1035.1 682.195 L1034.55 682.195 L1033.99 682.195 L1033.43 682.195 L1032.87 682.195 L1032.31 682.195 L1031.75 682.195 L1031.19 682.195 L1030.63 682.195 L1030.07 682.195 L1029.51 682.195 L1028.95 682.195 L1028.39 682.195 L1027.83 682.195 L1027.28 682.195 L1026.72 682.195 L1026.16 682.195 L1025.6 682.195 L1025.04 682.195 L1024.48 682.195 L1023.92 682.195 L1023.36 682.195 L1022.8 682.195 L1022.24 682.195 L1021.68 682.195 L1021.12 682.195 L1020.56 682.195 L1020.01 682.195 L1019.45 682.195 L1018.89 682.195 L1018.33 682.195 L1017.77 682.195 L1017.21 682.195 L1016.65 682.195 L1016.09 682.195 L1015.53 682.195 L1014.97 682.195 L1014.41 682.195 L1013.85 682.195 L1013.29 682.195 L1012.73 682.195 L1012.18 682.195 L1011.62 682.195 L1011.06 682.195 L1010.5 682.195 L1009.94 682.195 L1009.38 682.195 L1008.82 682.195 L1008.26 682.195 L1007.7 682.195 L1007.14 682.195 L1006.58 682.195 L1006.02 682.195 L1005.46 682.195 L1004.91 682.195 L1004.35 682.195 L1003.79 682.195 L1003.23 682.195 L1002.67 682.195 L1002.11 682.195 L1001.55 682.195 L1000.99 682.195 L1000.43 682.195 L999.872 682.195 L999.313 682.195 L998.754 682.195 L998.194 682.195 L997.635 682.195 L997.076 682.195 L996.517 682.195 L995.957 682.195 L995.398 682.195 L994.839 682.195 L994.28 682.195 L993.72 682.195 L993.161 682.195 L992.602 682.195 L992.043 682.195 L991.483 682.195 L990.924 682.195 L990.365 682.195 L989.806 682.195 L989.246 682.195 L988.687 682.195 L988.128 682.195 L987.569 682.195 L987.009 682.195 L986.45 682.195 L985.891 682.195 L985.332 682.195 L984.772 682.195 L984.213 682.195 L983.654 682.195 L983.095 682.195 L982.535 682.195 L981.976 682.195 L981.417 682.195 L980.858 682.195 L980.298 682.195 L979.739 682.195 L979.18 682.195 L978.621 682.195 L978.061 682.195 L977.502 682.195 L976.943 682.195 L976.384 682.195 L975.824 682.195 L975.265 682.195 L974.706 682.195 L974.147 682.195 L973.587 682.195 L973.028 682.195 L972.469 682.195 L971.91 682.195 L971.35 682.195 L970.791 682.195 L970.232 682.195 L969.673 682.195 L969.113 682.195 L968.554 682.195 L967.995 682.195 L967.436 682.195 L966.876 682.195 L966.317 682.195 L965.758 682.195 L965.199 682.195 L964.639 682.195 L964.08 682.195 L963.521 682.195 L962.962 682.195 L962.402 682.195 L961.843 682.195 L961.284 682.195 L960.725 682.195 L960.165 682.195 L959.606 682.195 L959.047 682.195 L958.488 682.195 L957.928 682.195 L957.369 682.195 L956.81 682.195 L956.251 682.195 L955.691 682.195 L955.132 682.195 L954.573 682.195 L954.014 682.195 L953.454 682.195 L952.895 682.195 L952.336 682.195 L951.777 682.195 L951.217 682.195 L950.658 682.195 L950.099 682.195 L949.54 682.195 L948.98 682.195 L948.421 682.195 L947.862 682.195 L947.303 682.195 L946.743 682.195 L946.184 682.195 L945.625 682.195 L945.066 682.195 L944.506 682.195 L943.947 682.195 L943.388 682.195 L942.829 682.195 L942.269 682.195 L941.71 682.195 L941.151 682.195 L940.592 682.195 L940.032 682.195 L939.473 682.195 L938.914 682.195 L938.355 682.195 L937.795 682.195 L937.236 682.195 L936.677 682.195 L936.118 682.195 L935.558 682.195 L934.999 682.195 L934.44 682.195 L933.881 682.195 L933.321 682.195 L932.762 682.195 L932.203 682.195 L931.644 682.195 L931.084 682.195 L930.525 682.195 L929.966 682.195 L929.406 682.195 L928.847 682.195 L928.288 682.195 L927.729 682.195 L927.169 682.195 L926.61 682.195 L926.051 682.195 L925.492 682.195 L924.932 682.195 L924.373 682.195 L923.814 682.195 L923.255 682.195 L922.695 682.195 L922.136 682.195 L921.577 682.195 L921.018 682.195 L920.458 682.195 L919.899 682.195 L919.34 682.195 L918.781 682.195 L918.221 682.195 L917.662 682.195 L917.103 682.195 L916.544 682.195 L915.984 682.195 L915.425 682.195 L914.866 682.195 L914.307 682.195 L913.747 682.195 L913.188 682.195 L912.629 682.195 L912.07 682.195 L911.51 682.195 L910.951 682.195 L910.392 682.195 L909.833 682.195 L909.273 682.195 L908.714 682.195 L908.155 682.195 L907.596 682.195 L907.036 682.195 L906.477 682.195 L905.918 682.195 L905.359 682.195 L904.799 682.195 L904.24 682.195 L903.681 682.195 L903.122 682.195 L902.562 682.195 L902.003 682.195 L901.444 682.195 L900.885 682.195 L900.325 682.195 L899.766 682.195 L899.207 682.195 L898.648 682.195 L898.088 682.195 L897.529 682.195 L896.97 682.195 L896.411 682.195 L895.851 682.195 L895.292 682.195 L894.733 682.195 L894.174 682.195 L893.614 682.195 L893.055 682.195 L892.496 682.195 L891.937 682.195 L891.377 682.195 L890.818 682.195 L890.259 682.195 L889.7 682.195 L889.14 682.195 L888.581 682.195 L888.022 682.195 L887.463 682.195 L886.903 682.195 L886.344 682.195 L885.785 682.195 L885.226 682.195 L884.666 682.195 L884.107 682.195 L883.548 682.195 L882.989 682.195 L882.429 682.195 L881.87 682.195 L881.311 682.195 L880.752 682.195 L880.192 682.195 L879.633 682.195 L879.074 682.195 L878.515 682.195 L877.955 682.195 L877.396 682.195 L876.837 682.195 L876.278 682.195 L875.718 682.195 L875.159 682.195 L874.6 682.195 L874.041 682.195 L873.481 682.195 L872.922 682.195 L872.363 682.195 L871.804 682.195 L871.244 682.195 L870.685 682.195 L870.126 682.195 L869.567 682.195 L869.007 682.195 L868.448 682.195 L867.889 682.195 L867.33 682.195 L866.77 682.195 L866.211 682.195 L865.652 682.195 L865.093 682.195 L864.533 682.195 L863.974 682.195 L863.415 682.195 L862.856 682.195 L862.296 682.195 L861.737 682.195 L861.178 682.195 L860.619 682.195 L860.059 682.195 L859.5 682.195 L858.941 682.195 L858.382 682.195 L857.822 682.195 L857.263 682.195 L856.704 682.195 L856.145 682.195 L855.585 682.195 L855.026 682.195 L854.467 682.195 L853.908 682.195 L853.348 682.195 L852.789 682.195 L852.23 682.195 L851.671 682.195 L851.111 682.195 L850.552 682.195 L849.993 682.195 L849.434 682.195 L848.874 682.195 L848.315 682.195 L847.756 682.195 L847.197 682.195 L846.637 682.195 L846.078 682.195 L845.519 682.195 L844.96 682.195 L844.4 682.195 L843.841 682.195 L843.282 682.195 L842.723 682.195 L842.163 682.195 L841.604 682.195 L841.045 682.195 L840.486 682.195 L839.926 682.195 L839.367 682.195 L838.808 682.195 L838.249 682.195 L837.689 682.195 L837.13 682.195 L836.571 682.195 L836.012 682.195 L835.452 682.195 L834.893 682.195 L834.334 682.195 L833.775 682.195 L833.215 682.195 L832.656 682.195 L832.097 682.195 L831.538 682.195 L830.978 682.195 L830.419 682.195 L829.86 682.195 L829.301 682.195 L828.741 682.195 L828.182 682.195 L827.623 682.195 L827.064 682.195 L826.504 682.195 L825.945 682.195 L825.386 682.195 L824.827 682.195 L824.267 682.195 L823.708 682.195 L823.149 682.195 L822.59 682.195 L822.03 682.195 L821.471 682.195 L820.912 682.195 L820.353 682.195 L819.793 682.195 L819.234 682.195 L818.675 682.195 L818.116 682.195 L817.556 682.195 L816.997 682.195 L816.438 682.195 L815.879 682.195 L815.319 682.195 L814.76 682.195 L814.201 682.195 L813.642 682.195 L813.082 682.195 L812.523 682.195 L811.964 682.195 L811.405 682.195 L810.845 682.195 L810.286 682.195 L809.727 682.195 L809.168 682.195 L808.608 682.195 L808.049 682.195 L807.49 682.195 L806.931 682.195 L806.371 682.195 L805.812 682.195 L805.253 682.195 L804.693 682.195 L804.134 682.195 L803.575 682.195 L803.016 682.195 L802.456 682.195 L801.897 682.195 L801.338 682.195 L800.779 682.195 L800.219 682.195 L799.66 682.195 L799.101 682.195 L798.542 682.195 L797.982 682.195 L797.423 682.195 L796.864 682.195 L796.305 682.195 L795.745 682.195 L795.186 682.195 L794.627 682.195 L794.068 682.195 L793.508 682.195 L792.949 682.195 L792.39 682.195 L791.831 682.195 L791.271 682.195 L790.712 682.195 L790.153 682.195 L789.594 682.195 L789.034 682.195 L788.475 682.195 L787.916 682.195 L787.357 682.195 L786.797 682.195 L786.238 682.195 L785.679 682.195 L785.12 682.195 L784.56 682.195 L784.001 682.195 L783.442 682.195 L782.883 682.195 L782.323 682.195 L781.764 682.195 L781.205 682.195 L780.646 682.195 L780.086 682.195 L779.527 682.195 L778.968 682.195 L778.409 682.195 L777.849 682.195 L777.29 682.195 L776.731 682.195 L776.172 682.195 L775.612 682.195 L775.053 682.195 L774.494 682.195 L773.935 682.195 L773.375 682.195 L772.816 682.195 L772.257 682.195 L771.698 682.195 L771.138 682.195 L770.579 682.195 L770.02 682.195 L769.461 682.195 L768.901 682.195 L768.342 682.195 L767.783 682.195 L767.224 682.195 L766.664 682.195 L766.105 682.195 L765.546 682.195 L764.987 682.195 L764.427 682.195 L763.868 682.195 L763.309 682.195 L762.75 682.195 L762.19 682.195 L761.631 682.195 L761.072 682.195 L760.513 682.195 L759.953 682.195 L759.394 682.195 L758.835 682.195 L758.276 682.195 L757.716 682.195 L757.157 682.195 L756.598 682.195 L756.039 682.195 L755.479 682.195 L754.92 682.195 L754.361 682.195 L753.802 682.195 L753.242 682.195 L752.683 682.195 L752.124 682.195 L751.565 682.195 L751.005 682.195 L750.446 682.195 L749.887 682.195 L749.328 682.195 L748.768 682.195 L748.209 682.195 L747.65 682.195 L747.091 682.195 L746.531 682.195 L745.972 682.195 L745.413 682.195 L744.854 682.195 L744.294 682.195 L743.735 682.195 L743.176 682.195 L742.617 682.195 L742.057 682.195 L741.498 682.195 L740.939 682.195 L740.38 682.195 L739.82 682.195 L739.261 682.195 L738.702 682.195 L738.143 682.195 L737.583 682.195 L737.024 682.195 L736.465 682.195 L735.906 682.195 L735.346 682.195 L734.787 682.195 L734.228 682.195 L733.669 682.195 L733.109 682.195 L732.55 682.195 L731.991 682.195 L731.432 682.195 L730.872 682.195 L730.313 682.195 L729.754 682.195 L729.195 682.195 L728.635 682.195 L728.076 682.195 L727.517 682.195 L726.958 682.195 L726.398 682.195 L725.839 682.195 L725.28 682.195 L724.721 682.195 L724.161 682.195 L723.602 682.195 L723.043 682.195 L722.484 682.195 L721.924 682.195 L721.365 682.195 L720.806 682.195 L720.247 682.195  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip363)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.126 720.806,683.126 721.365,683.126 721.924,683.126 722.484,683.126 723.043,683.126 723.602,683.126 724.161,683.126 724.721,683.126 725.28,683.126 725.839,683.126 726.398,683.126 726.958,683.126 727.517,683.126 728.076,683.126 728.635,683.126 729.195,683.126 729.754,683.126 730.313,683.126 730.872,683.126 731.432,683.126 731.991,683.126 732.55,683.126 733.109,683.126 733.669,683.126 734.228,683.126 734.787,683.126 735.346,683.126 735.906,683.126 736.465,683.126 737.024,683.126 737.583,683.126 738.143,683.126 738.702,683.126 739.261,683.126 739.82,683.126 740.38,683.126 740.939,683.126 741.498,683.126 742.057,683.126 742.617,683.126 743.176,683.126 743.735,683.126 744.294,683.126 744.854,683.126 745.413,683.126 745.972,683.126 746.531,683.126 747.091,683.126 747.65,683.126 748.209,683.126 748.768,683.126 749.328,683.126 749.887,683.126 750.446,683.126 751.005,683.126 751.565,683.126 752.124,683.126 752.683,683.126 753.242,683.126 753.802,683.126 754.361,683.126 754.92,683.126 755.479,683.126 756.039,683.126 756.598,683.126 757.157,683.126 757.716,683.126 758.276,683.126 758.835,683.126 759.394,683.126 759.953,683.126 760.513,683.126 761.072,683.126 761.631,683.126 762.19,683.126 762.75,683.126 763.309,683.126 763.868,683.126 764.427,683.126 764.987,683.126 765.546,683.126 766.105,683.126 766.664,683.126 767.224,683.126 767.783,683.126 768.342,683.126 768.901,683.126 769.461,683.126 770.02,683.126 770.579,683.126 771.138,683.126 771.698,683.126 772.257,683.126 772.816,683.126 773.375,683.126 773.935,683.126 774.494,683.126 775.053,683.126 775.612,683.126 776.172,683.126 776.731,683.126 777.29,683.126 777.849,683.126 778.409,683.126 778.968,683.126 779.527,683.126 780.086,683.126 780.646,683.126 781.205,683.126 781.764,683.126 782.323,683.126 782.883,683.126 783.442,683.126 784.001,683.126 784.56,683.126 785.12,683.126 785.679,683.126 786.238,683.126 786.797,683.126 787.357,683.126 787.916,683.126 788.475,683.126 789.034,683.126 789.594,683.126 790.153,683.126 790.712,683.126 791.271,683.126 791.831,683.126 792.39,683.126 792.949,683.126 793.508,683.126 794.068,683.126 794.627,683.126 795.186,683.126 795.745,683.126 796.305,683.126 796.864,683.126 797.423,683.126 797.982,683.126 798.542,683.126 799.101,683.126 799.66,683.126 800.219,683.126 800.779,683.126 801.338,683.126 801.897,683.126 802.456,683.126 803.016,683.126 803.575,683.126 804.134,683.126 804.693,683.126 805.253,683.126 805.812,683.126 806.371,683.126 806.931,683.126 807.49,683.126 808.049,683.126 808.608,683.126 809.168,683.126 809.727,683.126 810.286,683.126 810.845,683.126 811.405,683.126 811.964,683.126 812.523,683.126 813.082,683.126 813.642,683.126 814.201,683.126 814.76,683.126 815.319,683.126 815.879,683.126 816.438,683.126 816.997,683.126 817.556,683.126 818.116,683.126 818.675,683.126 819.234,683.126 819.793,683.126 820.353,683.126 820.912,683.126 821.471,683.126 822.03,683.126 822.59,683.126 823.149,683.126 823.708,683.126 824.267,683.126 824.827,683.126 825.386,683.126 825.945,683.126 826.504,683.126 827.064,683.126 827.623,683.126 828.182,683.126 828.741,683.126 829.301,683.126 829.86,683.126 830.419,683.126 830.978,683.126 831.538,683.126 832.097,683.126 832.656,683.126 833.215,683.126 833.775,683.126 834.334,683.126 834.893,683.126 835.452,683.126 836.012,683.126 836.571,683.126 837.13,683.126 837.689,683.126 838.249,683.126 838.808,683.126 839.367,683.126 839.926,683.126 840.486,683.126 841.045,683.126 841.604,683.126 842.163,683.126 842.723,683.126 843.282,683.126 843.841,683.126 844.4,683.126 844.96,683.126 845.519,683.126 846.078,683.126 846.637,683.126 847.197,683.126 847.756,683.126 848.315,683.126 848.874,683.126 849.434,683.126 849.993,683.126 850.552,683.126 851.111,683.126 851.671,683.126 852.23,683.126 852.789,683.126 853.348,683.126 853.908,683.126 854.467,683.126 855.026,683.126 855.585,683.126 856.145,683.126 856.704,683.126 857.263,683.126 857.822,683.126 858.382,683.126 858.941,683.126 859.5,683.126 860.059,683.126 860.619,683.126 861.178,683.126 861.737,683.126 862.296,683.126 862.856,683.126 863.415,683.126 863.974,683.126 864.533,683.126 865.093,683.126 865.652,683.126 866.211,683.126 866.77,683.126 867.33,683.126 867.889,683.126 868.448,683.126 869.007,683.126 869.567,683.126 870.126,683.126 870.685,683.126 871.244,683.126 871.804,683.126 872.363,683.126 872.922,683.126 873.481,683.126 874.041,683.126 874.6,683.126 875.159,683.126 875.718,683.126 876.278,683.126 876.837,683.126 877.396,683.126 877.955,683.126 878.515,683.126 879.074,683.126 879.633,683.126 880.192,683.126 880.752,683.126 881.311,683.126 881.87,683.126 882.429,683.126 882.989,683.126 883.548,683.126 884.107,683.126 884.666,683.126 885.226,683.126 885.785,683.126 886.344,683.126 886.903,683.126 887.463,683.126 888.022,683.126 888.581,683.126 889.14,683.126 889.7,683.126 890.259,683.126 890.818,683.126 891.377,683.126 891.937,683.126 892.496,683.126 893.055,683.126 893.614,683.126 894.174,683.126 894.733,683.126 895.292,683.126 895.851,683.126 896.411,683.126 896.97,683.126 897.529,683.126 898.088,683.126 898.648,683.126 899.207,683.126 899.766,683.126 900.325,683.126 900.885,683.126 901.444,683.126 902.003,683.126 902.562,683.126 903.122,683.126 903.681,683.126 904.24,683.126 904.799,683.126 905.359,683.126 905.918,683.126 906.477,683.126 907.036,683.126 907.596,683.126 908.155,683.126 908.714,683.126 909.273,683.126 909.833,683.126 910.392,683.126 910.951,683.126 911.51,683.126 912.07,683.126 912.629,683.126 913.188,683.126 913.747,683.126 914.307,683.126 914.866,683.126 915.425,683.126 915.984,683.126 916.544,683.126 917.103,683.126 917.662,683.126 918.221,683.126 918.781,683.126 919.34,683.126 919.899,683.126 920.458,683.126 921.018,683.126 921.577,683.126 922.136,683.126 922.695,683.126 923.255,683.126 923.814,683.126 924.373,683.126 924.932,683.126 925.492,683.126 926.051,683.126 926.61,683.126 927.169,683.126 927.729,683.126 928.288,683.126 928.847,683.126 929.406,683.126 929.966,683.126 930.525,683.126 931.084,683.126 931.644,683.126 932.203,683.126 932.762,683.126 933.321,683.126 933.881,683.126 934.44,683.126 934.999,683.126 935.558,683.126 936.118,683.126 936.677,683.126 937.236,683.126 937.795,683.126 938.355,683.126 938.914,683.126 939.473,683.126 940.032,683.126 940.592,683.126 941.151,683.126 941.71,683.126 942.269,683.126 942.829,683.126 943.388,683.126 943.947,683.126 944.506,683.126 945.066,683.126 945.625,683.126 946.184,683.126 946.743,683.126 947.303,683.126 947.862,683.126 948.421,683.126 948.98,683.126 949.54,683.126 950.099,683.126 950.658,683.126 951.217,683.126 951.777,683.126 952.336,683.126 952.895,683.126 953.454,683.126 954.014,683.126 954.573,683.126 955.132,683.126 955.691,683.126 956.251,683.126 956.81,683.126 957.369,683.126 957.928,683.126 958.488,683.126 959.047,683.126 959.606,683.126 960.165,683.126 960.725,683.126 961.284,683.126 961.843,683.126 962.402,683.126 962.962,683.126 963.521,683.126 964.08,683.126 964.639,683.126 965.199,683.126 965.758,683.126 966.317,683.126 966.876,683.126 967.436,683.126 967.995,683.126 968.554,683.126 969.113,683.126 969.673,683.126 970.232,683.126 970.791,683.126 971.35,683.126 971.91,683.126 972.469,683.126 973.028,683.126 973.587,683.126 974.147,683.126 974.706,683.126 975.265,683.126 975.824,683.126 976.384,683.126 976.943,683.126 977.502,683.126 978.061,683.126 978.621,683.126 979.18,683.126 979.739,683.126 980.298,683.126 980.858,683.126 981.417,683.126 981.976,683.126 982.535,683.126 983.095,683.126 983.654,683.126 984.213,683.126 984.772,683.126 985.332,683.126 985.891,683.126 986.45,683.126 987.009,683.126 987.569,683.126 988.128,683.126 988.687,683.126 989.246,683.126 989.806,683.126 990.365,683.126 990.924,683.126 991.483,683.126 992.043,683.126 992.602,683.126 993.161,683.126 993.72,683.126 994.28,683.126 994.839,683.126 995.398,683.126 995.957,683.126 996.517,683.126 997.076,683.126 997.635,683.126 998.194,683.126 998.754,683.126 999.313,683.126 999.872,683.126 1000.43,683.126 1000.99,683.126 1001.55,683.126 1002.11,683.126 1002.67,683.126 1003.23,683.126 1003.79,683.126 1004.35,683.126 1004.91,683.126 1005.46,683.126 1006.02,683.126 1006.58,683.126 1007.14,683.126 1007.7,683.126 1008.26,683.126 1008.82,683.126 1009.38,683.126 1009.94,683.126 1010.5,683.126 1011.06,683.126 1011.62,683.126 1012.18,683.126 1012.73,683.126 1013.29,683.126 1013.85,683.126 1014.41,683.126 1014.97,683.126 1015.53,683.126 1016.09,683.126 1016.65,683.126 1017.21,683.126 1017.77,683.126 1018.33,683.126 1018.89,683.126 1019.45,683.126 1020.01,683.126 1020.56,683.126 1021.12,683.126 1021.68,683.126 1022.24,683.126 1022.8,683.126 1023.36,683.126 1023.92,683.126 1024.48,683.126 1025.04,683.126 1025.6,683.126 1026.16,683.126 1026.72,683.126 1027.28,683.126 1027.83,683.126 1028.39,683.126 1028.95,683.126 1029.51,683.126 1030.07,683.126 1030.63,683.126 1031.19,683.126 1031.75,683.126 1032.31,683.126 1032.87,683.126 1033.43,683.126 1033.99,683.126 1034.55,683.126 1035.1,683.126 1035.66,683.126 1036.22,683.126 1036.78,683.126 1037.34,683.126 1037.9,683.126 1038.46,683.126 1039.02,683.126 1039.58,683.126 1040.14,683.126 1040.7,683.126 1041.26,683.126 1041.82,683.126 1042.38,683.126 1042.93,683.126 1043.49,683.126 1044.05,683.126 1044.61,683.126 1045.17,683.126 1045.73,683.126 1046.29,683.126 1046.85,683.126 1047.41,683.126 1047.97,683.126 1048.53,683.126 1049.09,683.126 1049.65,683.126 1050.2,683.126 1050.76,683.126 1051.32,683.126 1051.88,683.126 1052.44,683.126 1053,683.126 1053.56,683.126 1054.12,683.126 1054.68,683.126 1055.24,683.126 1055.8,683.126 1056.36,683.126 1056.92,683.126 1057.48,683.126 1058.03,683.126 1058.59,683.126 1059.15,683.126 1059.71,683.126 1060.27,683.126 1060.83,683.126 1061.39,683.126 1061.95,683.126 1062.51,683.126 1063.07,683.126 1063.63,683.126 1064.19,683.126 1064.75,683.126 1065.3,683.126 1065.86,683.126 1066.42,683.126 1066.98,683.126 1067.54,683.126 1068.1,683.126 1068.66,683.126 1069.22,683.126 1069.78,683.126 1070.34,683.126 1070.9,683.126 1071.46,683.126 1072.02,683.126 1072.57,683.126 1073.13,683.126 1073.69,683.126 1074.25,683.126 1074.81,683.126 1075.37,683.126 1075.93,683.126 1076.49,683.126 1077.05,683.126 1077.61,683.126 1078.17,683.126 1078.73,683.126 1079.29,683.126 1079.85,683.126 1080.4,683.126 1080.96,683.126 1081.52,683.126 1082.08,683.126 1082.64,683.126 1083.2,683.126 1083.76,683.126 1084.32,683.126 1084.88,683.126 1085.44,683.126 1086,683.126 1086.56,683.126 1087.12,683.126 1087.67,683.126 1088.23,683.126 1088.79,683.126 1089.35,683.126 1089.91,683.126 1090.47,683.126 1091.03,683.126 1091.59,683.126 1092.15,683.126 1092.71,683.126 1093.27,683.126 1093.83,683.126 1094.39,683.126 1094.94,683.126 1095.5,683.126 1096.06,683.126 1096.62,683.126 1097.18,683.126 1097.74,683.126 1098.3,683.126 1098.86,683.126 1099.42,683.126 1099.98,683.126 1100.54,683.126 1101.1,683.126 1101.66,683.126 1102.22,683.126 1102.77,683.126 1103.33,683.126 1103.89,683.126 1104.45,683.126 1105.01,683.126 1105.57,683.126 1106.13,683.126 1106.69,683.126 1107.25,683.126 1107.81,683.126 1108.37,683.126 1108.93,683.126 1109.49,683.126 1110.04,683.126 1110.6,683.126 1111.16,683.126 1111.72,683.126 1112.28,683.126 1112.84,683.126 1113.4,683.126 1113.96,683.126 1114.52,683.126 1115.08,683.126 1115.64,683.126 1116.2,683.126 1116.76,683.126 1117.31,683.126 1117.87,683.126 1118.43,683.126 1118.99,683.126 1119.55,683.126 1120.11,683.126 1120.67,683.126 1121.23,683.126 1121.79,683.126 1122.35,683.126 1122.91,683.126 1123.47,683.126 1124.03,683.126 1124.59,683.126 1125.14,683.126 1125.7,683.126 1126.26,683.126 1126.82,683.126 1127.38,683.126 1127.94,683.126 1128.5,683.126 1129.06,683.126 1129.62,683.126 1130.18,683.126 1130.74,683.126 1131.3,683.126 1131.86,683.126 1132.41,683.126 1132.97,683.126 1133.53,683.126 1134.09,683.126 1134.65,683.126 1135.21,683.126 1135.77,683.126 1136.33,683.126 1136.89,683.126 1137.45,683.126 1138.01,683.126 1138.57,683.126 1139.13,683.126 1139.68,683.126 1140.24,683.126 1140.8,683.126 1141.36,683.126 1141.92,683.126 1142.48,683.126 1143.04,683.126 1143.6,683.126 1144.16,683.126 1144.72,683.126 1145.28,683.126 1145.84,683.126 1146.4,683.126 1146.96,683.126 1147.51,683.126 1148.07,683.126 1148.63,683.126 1149.19,683.126 1149.75,683.126 1150.31,683.126 1150.87,683.126 1151.43,683.126 1151.99,683.126 1152.55,683.126 1153.11,683.126 1153.67,683.126 1154.23,683.126 1154.78,683.126 1155.34,683.126 1155.9,683.126 1156.46,683.126 1157.02,683.126 1157.58,683.126 1158.14,683.126 1158.7,683.126 1159.26,683.126 1159.82,683.126 1160.38,683.126 1160.94,683.126 1161.5,683.126 1162.05,683.126 1162.61,683.126 1163.17,683.126 1163.73,683.126 1164.29,683.126 1164.85,683.126 1165.41,683.126 1165.97,683.126 1166.53,683.126 1167.09,683.126 1167.65,683.126 1168.21,683.126 1168.77,683.126 1169.33,683.126 1169.88,683.126 1170.44,683.126 1171,683.126 1171.56,683.126 1172.12,683.126 1172.68,683.126 1173.24,683.126 1173.8,683.126 1174.36,683.126 1174.92,683.126 1175.48,683.126 1176.04,683.126 1176.6,683.126 1177.15,683.126 1177.71,683.126 1178.27,683.126 1178.83,683.126 1179.39,683.126 1179.95,683.126 1180.51,683.126 1181.07,683.126 1181.63,683.126 1182.19,683.126 1182.75,683.126 1183.31,683.126 1183.87,683.126 1184.43,683.126 1184.98,683.126 1185.54,683.126 1186.1,683.126 1186.66,683.126 1187.22,683.126 1187.78,683.126 1188.34,683.126 1188.9,683.126 1189.46,683.126 1190.02,683.126 1190.58,683.126 1191.14,683.126 1191.7,683.126 1192.25,683.126 1192.81,683.126 1193.37,683.126 1193.93,683.126 1194.49,683.126 1195.05,683.126 1195.61,683.126 1196.17,683.126 1196.73,683.126 1197.29,683.126 1197.85,683.126 1198.41,683.126 1198.97,683.126 1199.52,683.126 1200.08,683.126 1200.64,683.126 1201.2,683.126 1201.76,683.126 1202.32,683.126 1202.88,683.126 1203.44,683.126 1204,683.126 1204.56,683.126 1205.12,683.126 1205.68,683.126 1206.24,683.126 1206.8,683.126 1207.35,683.126 1207.91,683.126 1208.47,683.126 1209.03,683.126 1209.59,683.126 1210.15,683.126 1210.71,683.126 1211.27,683.126 1211.83,683.126 1212.39,683.126 1212.95,683.126 1213.51,683.126 1214.07,683.126 1214.62,683.126 1215.18,683.126 1215.74,683.126 1216.3,683.126 1216.86,683.126 1217.42,683.126 1217.98,683.126 1218.54,683.126 1219.1,683.126 1219.66,683.126 1220.22,683.126 1220.78,683.126 1221.34,683.126 1221.89,683.126 1222.45,683.126 1223.01,683.126 1223.57,683.126 1224.13,683.126 1224.69,683.126 1225.25,683.126 1225.81,683.126 1226.37,683.126 1226.93,683.126 1227.49,683.126 1228.05,683.126 1228.61,683.126 1229.17,683.126 1229.72,683.126 1230.28,683.126 1230.84,683.126 1231.4,683.126 1231.96,683.126 1232.52,683.126 1233.08,683.126 1233.64,683.126 1234.2,683.126 1234.76,683.126 1235.32,683.126 1235.88,683.126 1236.44,683.126 1236.99,683.126 1237.55,683.126 1238.11,683.126 1238.67,683.126 1239.23,683.126 1239.79,683.126 1240.35,683.126 1240.91,683.126 1241.47,683.126 1242.03,683.126 1242.59,683.126 1243.15,683.126 1243.71,683.126 1244.26,683.126 1244.82,683.126 1245.38,683.126 1245.94,683.126 1246.5,683.126 1247.06,683.126 1247.62,683.126 1248.18,683.126 1248.74,683.126 1249.3,683.126 1249.86,683.126 1250.42,683.126 1250.98,683.126 1251.54,683.126 1252.09,683.126 1252.65,683.126 1253.21,683.126 1253.77,683.126 1254.33,683.126 1254.89,683.126 1255.45,683.126 1256.01,683.126 1256.57,683.126 1257.13,683.126 1257.69,683.126 1258.25,683.126 1258.81,683.126 1259.36,683.126 1259.92,683.126 1260.48,683.126 1261.04,683.126 1261.6,683.126 1262.16,683.126 1262.72,683.126 1263.28,683.126 1263.84,683.126 1264.4,683.126 1264.96,683.126 1265.52,683.126 1266.08,683.126 1266.63,683.126 1267.19,683.126 1267.75,683.126 1268.31,683.126 1268.87,683.126 1269.43,683.126 1269.99,683.126 1270.55,683.126 1271.11,683.126 1271.67,683.126 1272.23,683.126 1272.79,683.126 1273.35,683.126 1273.91,683.126 1274.46,683.126 1275.02,683.126 1275.58,683.126 1276.14,683.126 1276.7,683.126 1277.26,683.126 1277.82,683.126 1278.38,683.126 1278.94,683.126 1279.5,683.126 1280.06,683.126 1280.62,683.126 1281.18,683.126 1281.73,683.126 1282.29,683.126 1282.85,683.126 1283.41,683.126 1283.97,683.126 1284.53,683.126 1285.09,683.126 1285.65,683.126 1286.21,683.126 1286.77,683.126 1287.33,683.126 1287.89,683.126 1288.45,683.126 1289,683.126 1289.56,683.126 1290.12,683.126 1290.68,683.126 1291.24,683.126 1291.8,683.126 1292.36,683.126 1292.92,683.126 1293.48,683.126 1294.04,683.126 1294.6,683.126 1295.16,683.126 1295.72,683.126 1296.28,683.126 1296.83,683.126 1297.39,683.126 1297.95,683.126 1298.51,683.126 1299.07,683.126 1299.63,683.126 1300.19,683.126 1300.75,683.126 1301.31,683.126 1301.87,683.126 1302.43,683.126 1302.99,683.126 1303.55,683.126 1304.1,683.126 1304.66,683.126 1305.22,683.126 1305.78,683.126 1306.34,683.126 1306.9,683.126 1307.46,683.126 1308.02,683.126 1308.58,683.126 1309.14,683.126 1309.7,683.126 1310.26,683.126 1310.82,683.126 1311.38,683.126 1311.93,683.126 1312.49,683.126 1313.05,683.126 1313.61,683.126 1314.17,683.126 1314.73,683.126 1315.29,683.126 1315.85,683.126 1316.41,683.126 1316.97,683.126 1317.53,683.126 1318.09,683.126 1318.65,683.126 1319.2,683.126 1319.76,683.126 1320.32,683.126 1320.88,683.126 1321.44,683.126 1322,683.126 1322.56,683.126 1323.12,683.126 1323.68,683.126 1324.24,683.126 1324.8,683.126 1325.36,683.126 1325.92,683.126 1326.47,683.126 1327.03,683.126 1327.59,683.126 1328.15,683.126 1328.71,683.126 1329.27,683.126 1329.83,683.126 1330.39,683.126 1330.95,683.126 1331.51,683.126 1332.07,683.126 1332.63,683.126 1333.19,683.126 1333.75,683.126 1334.3,683.126 1334.86,683.126 1335.42,683.126 1335.98,683.126 1336.54,683.126 1337.1,683.126 1337.66,683.126 1338.22,683.126 1338.78,683.126 1339.34,683.126 1339.9,683.126 1340.46,683.126 1341.02,683.126 1341.57,683.126 1342.13,683.126 1342.69,683.126 1343.25,683.126 1343.81,683.126 1344.37,683.126 1344.93,683.126 1345.49,683.126 1346.05,683.126 1346.61,683.126 1347.17,683.126 1347.73,683.126 1348.29,683.126 1348.84,683.126 1349.4,683.126 1349.96,683.126 1350.52,683.126 1351.08,683.126 1351.64,683.126 1352.2,683.126 1352.76,683.126 1353.32,683.126 1353.88,683.126 1354.44,683.126 1355,683.126 1355.56,683.126 1356.12,683.126 1356.67,683.126 1357.23,683.126 1357.79,683.126 1358.35,683.126 1358.91,683.126 1359.47,683.126 1360.03,683.126 1360.59,683.126 1361.15,683.126 1361.71,683.126 1362.27,683.126 1362.83,683.126 1363.39,683.126 1363.94,683.126 1364.5,683.126 1365.06,683.126 1365.62,683.126 1366.18,683.126 1366.74,683.126 1367.3,683.126 1367.86,683.126 1368.42,683.126 1368.98,683.126 1369.54,683.126 1370.1,683.126 1370.66,683.126 1371.21,683.126 1371.77,683.126 1372.33,683.126 1372.89,683.126 1373.45,683.126 1374.01,683.126 1374.57,683.126 1375.13,683.126 1375.69,683.126 1376.25,683.126 1376.81,683.126 1377.37,683.126 1377.93,683.126 1378.49,683.126 1379.04,683.126 1379.6,683.126 1380.16,683.126 1380.72,683.126 1381.28,683.126 1381.84,683.126 1382.4,683.126 1382.96,683.126 1383.52,683.126 1384.08,683.126 1384.64,683.126 1385.2,683.126 1385.76,683.126 1386.31,683.126 1386.87,683.126 1387.43,683.126 1387.99,683.126 1388.55,683.126 1389.11,683.126 1389.67,683.126 1390.23,683.126 1390.79,683.126 1391.35,683.126 1391.91,683.126 1392.47,683.126 1393.03,683.126 1393.58,683.126 1394.14,683.126 1394.7,683.126 1395.26,683.126 1395.82,683.126 1396.38,683.126 1396.94,683.126 1397.5,683.126 1398.06,683.126 1398.62,683.126 1399.18,683.126 1399.74,683.126 1400.3,683.126 1400.86,683.126 1401.41,683.126 1401.97,683.126 1402.53,683.126 1403.09,683.126 1403.65,683.126 1404.21,683.126 1404.77,683.126 1405.33,683.126 1405.89,683.126 1406.45,683.126 1407.01,683.126 1407.57,683.126 1408.13,683.126 1408.68,683.126 1409.24,683.126 1409.8,683.126 1410.36,683.126 1410.92,683.126 1411.48,683.126 1412.04,683.126 1412.6,683.126 1413.16,683.126 1413.72,683.126 1414.28,683.126 1414.84,683.126 1415.4,683.126 1415.95,683.126 1416.51,683.126 1417.07,683.126 1417.63,683.126 1418.19,683.126 1418.75,683.126 1419.31,683.126 1419.87,683.126 1420.43,683.126 1420.99,683.126 1421.55,683.126 1422.11,683.126 1422.67,683.126 1423.23,683.126 1423.78,683.126 1424.34,683.126 1424.9,683.126 1425.46,683.126 1426.02,683.126 1426.58,683.126 1427.14,683.126 1427.7,683.126 1428.26,683.126 1428.82,683.126 1429.38,683.126 1429.94,683.126 1430.5,683.126 1431.05,683.126 1431.61,683.126 1432.17,683.126 1432.73,683.126 1433.29,683.126 1433.85,683.126 1434.41,683.126 1434.97,683.126 1435.53,683.126 1436.09,683.126 1436.65,683.126 1437.21,683.126 1437.77,683.126 1438.33,683.126 1438.88,683.126 1439.44,683.126 1440,683.126 1440.56,683.126 1441.12,683.126 1441.68,683.126 1442.24,683.126 1442.8,683.126 1443.36,683.126 1443.92,683.126 1444.48,683.126 1445.04,683.126 1445.6,683.126 1446.15,683.126 1446.71,683.126 1447.27,683.126 1447.83,683.126 1448.39,683.126 1448.95,683.126 1449.51,683.126 1450.07,683.126 1450.63,683.126 1451.19,683.126 1451.75,683.126 1452.31,683.126 1452.87,683.126 1453.42,683.126 1453.98,683.126 1454.54,683.126 1455.1,683.126 1455.66,683.126 1456.22,683.126 1456.78,683.126 1457.34,683.126 1457.9,683.126 1458.46,683.126 1459.02,683.126 1459.58,683.126 1460.14,683.126 1460.7,683.126 1461.25,683.126 1461.81,683.126 1462.37,683.126 1462.93,683.126 1463.49,683.126 1464.05,683.126 1464.61,683.126 1465.17,683.126 1465.73,683.126 1466.29,683.126 1466.85,683.126 1467.41,683.126 1467.97,683.126 1468.52,683.126 1469.08,683.126 1469.64,683.126 1470.2,683.126 1470.76,683.126 1471.32,683.126 1471.88,683.126 1472.44,683.126 1473,683.126 1473.56,683.126 1474.12,683.126 1474.68,683.126 1475.24,683.126 1475.79,683.126 1476.35,683.126 1476.91,683.126 1477.47,683.126 1478.03,683.126 1478.59,683.126 1479.15,683.126 1479.71,683.126 1480.27,683.126 1480.83,683.126 1481.39,683.126 1481.95,683.126 1482.51,683.126 1483.07,683.126 1483.62,683.126 1484.18,683.126 1484.74,683.126 1485.3,683.126 1485.86,683.126 1486.42,683.126 1486.98,683.126 1487.54,683.126 1488.1,683.126 1488.66,683.126 1489.22,683.126 1489.78,683.126 1490.34,683.126 1490.89,683.126 1491.45,683.126 1492.01,683.126 1492.57,683.126 1493.13,683.126 1493.69,683.126 1494.25,683.126 1494.81,683.126 1495.37,683.126 1495.93,683.126 1496.49,683.126 1497.05,683.126 1497.61,683.126 1498.16,683.126 1498.72,683.126 1499.28,683.126 1499.84,683.126 1500.4,683.126 1500.96,683.126 1501.52,683.126 1502.08,683.126 1502.64,683.126 1503.2,683.126 1503.76,683.126 1504.32,683.126 1504.88,683.126 1505.44,683.126 1505.99,683.126 1506.55,683.126 1507.11,683.126 1507.67,683.126 1508.23,683.126 1508.79,683.126 1509.35,683.126 1509.91,683.126 1510.47,683.126 1511.03,683.126 1511.59,683.126 1512.15,683.126 1512.71,683.126 1513.26,683.126 1513.82,683.126 1514.38,683.126 1514.94,683.126 1515.5,683.126 1516.06,683.126 1516.62,683.126 1517.18,683.126 1517.74,683.126 1518.3,683.126 1518.86,683.126 1519.42,683.126 1519.98,683.126 1520.53,683.126 1521.09,683.126 1521.65,683.126 1522.21,683.126 1522.77,683.126 1523.33,683.126 1523.89,683.126 1524.45,683.126 1525.01,683.126 1525.57,683.126 1526.13,683.126 1526.69,683.126 1527.25,683.126 1527.81,683.126 1528.36,683.126 1528.92,683.126 1529.48,683.126 1530.04,683.126 1530.6,683.126 1531.16,683.126 1531.72,683.126 1532.28,683.126 1532.84,683.126 1533.4,683.126 1533.96,683.126 1534.52,683.126 1535.08,683.126 1535.63,683.126 1536.19,683.126 1536.75,683.126 1537.31,683.126 1537.87,683.126 1538.43,683.126 1538.99,683.126 1539.55,683.126 1540.11,683.126 1540.67,683.126 1541.23,683.126 1541.79,683.126 1542.35,683.126 1542.9,683.126 1543.46,683.126 1544.02,683.126 1544.58,683.126 1545.14,683.126 1545.7,683.126 1546.26,683.126 1546.82,683.126 1547.38,683.126 1547.94,683.126 1548.5,683.126 1549.06,683.126 1549.62,683.126 1550.18,683.126 1550.73,683.126 1551.29,683.126 1551.85,683.126 1552.41,683.126 1552.97,683.126 1553.53,683.126 1554.09,683.126 1554.65,683.126 1555.21,683.126 1555.77,683.126 1556.33,683.126 1556.89,683.126 1557.45,683.126 1558,683.126 1558.56,683.126 1559.12,683.126 1559.68,683.126 1560.24,683.126 1560.8,683.126 1561.36,683.126 1561.92,683.126 1562.48,683.126 1563.04,683.126 1563.6,683.126 1564.16,683.126 1564.72,683.126 1565.28,683.126 1565.83,683.126 1566.39,683.126 1566.95,683.126 1567.51,683.126 1568.07,683.126 1568.63,683.126 1569.19,683.126 1569.75,683.126 1570.31,683.126 1570.87,683.126 1571.43,683.126 1571.99,683.126 1572.55,683.126 1573.1,683.126 1573.66,683.126 1574.22,683.126 1574.78,683.126 1575.34,683.126 1575.9,683.126 1576.46,683.126 1577.02,683.126 1577.58,683.126 1578.14,683.126 1578.7,683.126 1579.26,683.126 1579.82,683.126 1580.37,683.126 1580.93,683.126 1581.49,683.126 1582.05,683.126 1582.61,683.126 1583.17,683.126 1583.73,683.126 1584.29,683.126 1584.85,683.126 1585.41,683.126 1585.97,683.126 1586.53,683.126 1587.09,683.126 1587.65,683.126 1588.2,683.126 1588.76,683.126 1589.32,683.126 1589.88,683.126 1590.44,683.126 1591,683.126 1591.56,683.126 1592.12,683.126 1592.68,683.126 1593.24,683.126 1593.8,683.126 1594.36,683.126 1594.92,683.126 1595.47,683.126 1596.03,683.126 1596.59,683.126 1597.15,683.126 1597.71,683.126 1598.27,683.126 1598.83,683.126 1599.39,683.126 1599.95,683.126 1600.51,683.126 1601.07,683.126 1601.63,683.126 1602.19,683.126 1602.74,683.126 1603.3,683.126 1603.86,683.126 1604.42,683.126 1604.98,683.126 1605.54,683.126 1606.1,683.126 1606.66,683.126 1607.22,683.126 1607.78,683.126 1608.34,683.126 1608.9,683.126 1609.46,683.126 1610.02,683.126 1610.57,683.126 1611.13,683.126 1611.69,683.126 1612.25,683.126 1612.81,683.126 1613.37,683.126 1613.93,683.126 1614.49,683.126 1615.05,683.126 1615.61,683.126 1616.17,683.126 1616.73,683.126 1617.29,683.126 1617.84,683.126 1618.4,683.126 1618.96,683.126 1619.52,683.126 1620.08,683.126 1620.64,683.126 1621.2,683.126 1621.76,683.126 1622.32,683.126 1622.88,683.126 1623.44,683.126 1624,683.126 1624.56,683.126 1625.11,683.126 1625.67,683.126 1626.23,683.126 1626.79,683.126 1627.35,683.126 1627.91,683.126 1628.47,683.126 1629.03,683.126 1629.59,683.126 1630.15,683.126 1630.71,683.126 1631.27,683.126 1631.83,683.126 1632.39,683.126 1632.94,683.126 1633.5,683.126 1634.06,683.126 1634.62,683.126 1635.18,683.126 1635.74,683.126 1636.3,683.126 1636.86,683.126 1637.42,683.126 1637.98,683.126 1638.54,683.126 1639.1,683.126 1639.66,683.126 1640.21,683.126 1640.77,683.126 1641.33,683.126 1641.89,683.126 1642.45,683.126 1643.01,683.126 1643.57,683.126 1644.13,683.126 1644.69,683.126 1645.25,683.126 1645.81,683.126 1646.37,683.126 1646.93,683.126 1647.48,683.126 1648.04,683.126 1648.6,683.126 1649.16,683.126 1649.72,683.126 1650.28,683.126 1650.84,683.126 1651.4,683.126 1651.96,683.126 1652.52,683.126 1653.08,683.126 1653.64,683.126 1654.2,683.126 1654.76,683.126 1655.31,683.126 1655.87,683.126 1656.43,683.126 1656.99,683.126 1657.55,683.126 1658.11,683.126 1658.67,683.126 1659.23,683.126 1659.79,683.126 1660.35,683.126 1660.91,683.126 1661.47,683.126 1662.03,683.126 1662.58,683.126 1663.14,683.126 1663.7,683.126 1664.26,683.126 1664.82,683.126 1665.38,683.126 1665.94,683.126 1666.5,683.126 1667.06,683.126 1667.62,683.126 1668.18,683.126 1668.74,683.126 1669.3,683.126 1669.85,683.126 1670.41,683.126 1670.97,683.126 1671.53,683.126 1672.09,683.126 1672.65,683.126 1673.21,683.126 1673.77,683.126 1674.33,683.126 1674.89,683.126 1675.45,683.126 1676.01,683.126 1676.57,683.126 1677.13,683.126 1677.68,683.126 1678.24,683.126 1678.8,683.126 1679.36,683.126 1679.92,683.126 1680.48,683.126 1681.04,683.126 1681.6,683.126 1682.16,683.126 1682.72,683.126 1683.28,683.126 1683.84,683.126 1684.4,683.126 1684.95,683.126 1685.51,683.126 1686.07,683.126 1686.63,683.126 1687.19,683.126 1687.75,683.126 1688.31,683.126 1688.87,683.126 1689.43,683.126 1689.99,683.126 1690.55,683.126 1691.11,683.126 1691.67,683.126 1692.23,683.126 1692.78,683.126 1693.34,683.126 1693.9,683.126 1694.46,683.126 1695.02,683.126 1695.58,683.126 1696.14,683.126 1696.7,683.126 1697.26,683.126 1697.82,683.126 1698.38,683.126 1698.94,683.126 1699.5,683.126 1700.05,683.126 1700.61,683.126 1701.17,683.126 1701.73,683.126 1702.29,683.126 1702.85,683.126 1703.41,683.126 1703.97,683.126 1704.53,683.126 1705.09,683.126 1705.65,683.126 1706.21,683.126 1706.77,683.126 1707.32,683.126 1707.88,683.126 1708.44,683.126 1709,683.126 1709.56,683.126 1710.12,683.126 1710.68,683.126 1711.24,683.126 1711.8,683.126 1712.36,683.126 1712.92,683.126 1713.48,683.126 1714.04,683.126 1714.6,683.126 1715.15,683.126 1715.71,683.126 1716.27,683.126 1716.83,683.126 1717.39,683.126 1717.95,683.126 1718.51,683.126 1719.07,683.126 1719.63,683.126 1720.19,683.126 1720.75,683.126 1721.31,683.126 1721.87,683.126 1722.42,683.126 1722.98,683.126 1723.54,683.126 1724.1,683.126 1724.66,683.126 1725.22,683.126 1725.78,683.126 1726.34,683.126 1726.9,683.126 1727.46,683.126 1728.02,683.126 1728.58,683.126 1729.14,683.126 1729.69,683.126 1730.25,683.126 1730.81,683.126 1731.37,683.126 1731.93,683.126 1732.49,683.126 1733.05,683.126 1733.61,683.126 1734.17,683.126 1734.73,683.126 1735.29,683.126 1735.85,683.126 1736.41,683.126 1736.97,683.126 1737.52,683.126 1738.08,683.126 1738.64,683.126 1739.2,683.126 1739.76,683.126 1740.32,683.126 1740.88,683.126 1741.44,683.126 1742,683.126 1742.56,683.126 1743.12,683.126 1743.68,683.126 1744.24,683.126 1744.79,683.126 1745.35,683.126 1745.91,683.126 1746.47,683.126 1747.03,683.126 1747.59,683.126 1748.15,683.126 1748.71,683.126 1749.27,683.126 1749.83,683.126 1750.39,683.126 1750.95,683.126 1751.51,683.126 1752.06,683.126 1752.62,683.126 1753.18,683.126 1753.74,683.126 1754.3,683.126 1754.86,683.126 1755.42,683.126 1755.98,683.126 1756.54,683.126 1757.1,683.126 1757.66,683.126 1758.22,683.126 1758.78,683.126 1759.34,683.126 1759.89,683.126 1760.45,683.126 1761.01,683.126 1761.57,683.126 1762.13,683.126 1762.69,683.126 1763.25,683.126 1763.81,683.126 1764.37,683.126 1764.93,683.126 1765.49,683.126 1766.05,683.126 1766.61,683.126 1767.16,683.126 1767.72,683.126 1768.28,683.126 1768.84,683.126 1769.4,683.126 1769.96,683.126 1770.52,683.126 1771.08,683.126 1771.64,683.126 1772.2,683.126 1772.76,683.126 1773.32,683.126 1773.88,683.126 1774.43,683.126 1774.99,683.126 1775.55,683.126 1776.11,683.126 1776.67,683.126 1777.23,683.126 1777.79,683.126 1778.35,683.126 1778.91,683.126 1779.47,683.126 1780.03,683.126 1780.59,683.126 1781.15,683.126 1781.71,683.126 1782.26,683.126 1782.82,683.126 1783.38,683.126 1783.94,683.126 1784.5,683.126 1785.06,683.126 1785.62,683.126 1786.18,683.126 1786.74,683.126 1787.3,683.126 1787.86,683.126 1788.42,683.126 1788.98,683.126 1789.53,683.126 1790.09,683.126 1790.65,683.126 1791.21,683.126 1791.77,683.126 1792.33,683.126 1792.89,683.126 1793.45,683.126 1794.01,683.126 1794.57,683.126 1795.13,683.126 1795.69,683.126 1796.25,683.126 1796.8,683.126 1797.36,683.126 1797.92,683.126 1798.48,683.126 1799.04,683.126 1799.6,683.126 1800.16,683.126 1800.72,683.126 1801.28,683.126 1801.84,683.126 1802.4,683.126 1802.96,683.126 1803.52,683.126 1804.08,683.126 1804.63,683.126 1805.19,683.126 1805.75,683.126 1806.31,683.126 1806.87,683.126 1807.43,683.126 1807.99,683.126 1808.55,683.126 1809.11,683.126 1809.67,683.126 1810.23,683.126 1810.79,683.126 1811.35,683.126 1811.9,683.126 1812.46,683.126 1813.02,683.126 1813.58,683.126 1814.14,683.126 1814.7,683.126 1815.26,683.126 1815.82,683.126 1816.38,683.126 1816.94,683.126 1817.5,683.126 1818.06,683.126 1818.62,683.126 1819.18,683.126 1819.73,683.126 1820.29,683.126 1820.85,683.126 1821.41,683.126 1821.97,683.126 1822.53,683.126 1823.09,683.126 1823.65,683.126 1824.21,683.126 1824.77,683.126 1825.33,683.126 1825.89,683.126 1826.45,683.126 1827,683.126 1827.56,683.126 1828.12,683.126 1828.68,683.126 1829.24,683.126 1829.8,683.126 1830.36,683.126 1830.92,683.126 1831.48,683.126 1832.04,683.126 1832.6,683.126 1833.16,683.126 1833.72,683.126 1834.27,683.126 1834.83,683.126 1835.39,683.126 1835.95,683.126 1836.51,683.126 1837.07,683.126 1837.63,683.126 1838.19,683.126 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.025825205676651 ± 0.021630412471405357\nProjected Energy: -4.012776137976389 ± (0.00497906759582456, 0.004690169579150805)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.609508</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.8695e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">2.2903e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.063e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.573e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.106e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.959e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133814\n -0.7590191922770888\n  0.13584182219622143\n  0.15789998694609508\n  0.8767114411781414\n  1.5305929970973366\n  1.583573261186734\n  3.072870330325866\n  3.12567265395184\n  4.862107221562175\n  6.2606948503805935\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, minimum_size, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. Setting a minimum_size will stop generating addresses once at least minimum_size addresses have been generated, rather than returning the full basis. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
