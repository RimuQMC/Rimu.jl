var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nspectral_strategy = GramSchmidt(): The SpectralStrategy used for simulations of spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2134804990306426 ± 0.0008303391040042789\n   G2(1) = 0.9175277737913016 ± 0.0004807925283249484\n   G2(2) = 0.9809039221635932 ± 0.0004625202899009536\n   G2(3) = 0.9896561090595682 ± 0.0007204685644239651\n   G2(4) = 0.9809039221635932 ± 0.0004625202899009536\n   G2(5) = 0.9175277737913016 ± 0.0004807925283249484\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9724404708813585 ± 0.13155515688980537\n   Replica 2: -4.0701656125627075 ± 0.13505761743596537\n   Replica 3: -4.011331933810689 ± 0.14037765105491076\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip810\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip810)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip811\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip810)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip812\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.16 2211.02,1003.16 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.491 2211.02,745.491 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.818 2211.02,487.818 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.146 2211.02,230.146 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.16 423.181,1003.16 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.491 423.181,745.491 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.818 423.181,487.818 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.146 423.181,230.146 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M290.043 1016.51 L306.363 1016.51 L306.363 1020.44 L284.418 1020.44 L284.418 1016.51 Q287.08 1013.75 291.664 1009.12 Q296.27 1004.47 297.451 1003.13 Q299.696 1000.61 300.576 998.869 Q301.478 997.11 301.478 995.42 Q301.478 992.665 299.534 990.929 Q297.613 989.193 294.511 989.193 Q292.312 989.193 289.858 989.957 Q287.427 990.721 284.65 992.272 L284.65 987.55 Q287.474 986.415 289.927 985.837 Q292.381 985.258 294.418 985.258 Q299.789 985.258 302.983 987.943 Q306.177 990.628 306.177 995.119 Q306.177 997.249 305.367 999.17 Q304.58 1001.07 302.474 1003.66 Q301.895 1004.33 298.793 1007.55 Q295.691 1010.74 290.043 1016.51 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M316.224 985.883 L334.58 985.883 L334.58 989.818 L320.506 989.818 L320.506 998.29 Q321.524 997.943 322.543 997.781 Q323.562 997.596 324.58 997.596 Q330.367 997.596 333.747 1000.77 Q337.126 1003.94 337.126 1009.36 Q337.126 1014.93 333.654 1018.04 Q330.182 1021.11 323.862 1021.11 Q321.687 1021.11 319.418 1020.74 Q317.173 1020.37 314.765 1019.63 L314.765 1014.93 Q316.849 1016.07 319.071 1016.62 Q321.293 1017.18 323.77 1017.18 Q327.774 1017.18 330.112 1015.07 Q332.45 1012.97 332.45 1009.36 Q332.45 1005.74 330.112 1003.64 Q327.774 1001.53 323.77 1001.53 Q321.895 1001.53 320.02 1001.95 Q318.168 1002.36 316.224 1003.24 L316.224 985.883 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M356.339 988.962 Q352.728 988.962 350.899 992.526 Q349.094 996.068 349.094 1003.2 Q349.094 1010.3 350.899 1013.87 Q352.728 1017.41 356.339 1017.41 Q359.973 1017.41 361.779 1013.87 Q363.608 1010.3 363.608 1003.2 Q363.608 996.068 361.779 992.526 Q359.973 988.962 356.339 988.962 M356.339 985.258 Q362.149 985.258 365.205 989.864 Q368.284 994.448 368.284 1003.2 Q368.284 1011.92 365.205 1016.53 Q362.149 1021.11 356.339 1021.11 Q350.529 1021.11 347.45 1016.53 Q344.395 1011.92 344.395 1003.2 Q344.395 994.448 347.45 989.864 Q350.529 985.258 356.339 985.258 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M286.062 728.211 L304.418 728.211 L304.418 732.146 L290.344 732.146 L290.344 740.618 Q291.363 740.271 292.381 740.109 Q293.4 739.923 294.418 739.923 Q300.205 739.923 303.585 743.095 Q306.964 746.266 306.964 751.683 Q306.964 757.261 303.492 760.363 Q300.02 763.442 293.701 763.442 Q291.525 763.442 289.256 763.071 Q287.011 762.701 284.603 761.96 L284.603 757.261 Q286.687 758.396 288.909 758.951 Q291.131 759.507 293.608 759.507 Q297.613 759.507 299.951 757.4 Q302.288 755.294 302.288 751.683 Q302.288 748.072 299.951 745.965 Q297.613 743.859 293.608 743.859 Q291.733 743.859 289.858 744.275 Q288.006 744.692 286.062 745.572 L286.062 728.211 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M326.177 731.289 Q322.566 731.289 320.737 734.854 Q318.932 738.396 318.932 745.525 Q318.932 752.632 320.737 756.196 Q322.566 759.738 326.177 759.738 Q329.811 759.738 331.617 756.196 Q333.446 752.632 333.446 745.525 Q333.446 738.396 331.617 734.854 Q329.811 731.289 326.177 731.289 M326.177 727.586 Q331.987 727.586 335.043 732.192 Q338.122 736.775 338.122 745.525 Q338.122 754.252 335.043 758.858 Q331.987 763.442 326.177 763.442 Q320.367 763.442 317.288 758.858 Q314.233 754.252 314.233 745.525 Q314.233 736.775 317.288 732.192 Q320.367 727.586 326.177 727.586 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M356.339 731.289 Q352.728 731.289 350.899 734.854 Q349.094 738.396 349.094 745.525 Q349.094 752.632 350.899 756.196 Q352.728 759.738 356.339 759.738 Q359.973 759.738 361.779 756.196 Q363.608 752.632 363.608 745.525 Q363.608 738.396 361.779 734.854 Q359.973 731.289 356.339 731.289 M356.339 727.586 Q362.149 727.586 365.205 732.192 Q368.284 736.775 368.284 745.525 Q368.284 754.252 365.205 758.858 Q362.149 763.442 356.339 763.442 Q350.529 763.442 347.45 758.858 Q344.395 754.252 344.395 745.525 Q344.395 736.775 347.45 732.192 Q350.529 727.586 356.339 727.586 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M284.835 470.538 L307.057 470.538 L307.057 472.529 L294.511 505.098 L289.627 505.098 L301.432 474.473 L284.835 474.473 L284.835 470.538 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M316.224 470.538 L334.58 470.538 L334.58 474.473 L320.506 474.473 L320.506 482.945 Q321.524 482.598 322.543 482.436 Q323.562 482.251 324.58 482.251 Q330.367 482.251 333.747 485.422 Q337.126 488.593 337.126 494.01 Q337.126 499.589 333.654 502.691 Q330.182 505.769 323.862 505.769 Q321.687 505.769 319.418 505.399 Q317.173 505.029 314.765 504.288 L314.765 499.589 Q316.849 500.723 319.071 501.279 Q321.293 501.834 323.77 501.834 Q327.774 501.834 330.112 499.728 Q332.45 497.621 332.45 494.01 Q332.45 490.399 330.112 488.293 Q327.774 486.186 323.77 486.186 Q321.895 486.186 320.02 486.603 Q318.168 487.019 316.224 487.899 L316.224 470.538 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M356.339 473.617 Q352.728 473.617 350.899 477.182 Q349.094 480.723 349.094 487.853 Q349.094 494.959 350.899 498.524 Q352.728 502.066 356.339 502.066 Q359.973 502.066 361.779 498.524 Q363.608 494.959 363.608 487.853 Q363.608 480.723 361.779 477.182 Q359.973 473.617 356.339 473.617 M356.339 469.913 Q362.149 469.913 365.205 474.519 Q368.284 479.103 368.284 487.853 Q368.284 496.58 365.205 501.186 Q362.149 505.769 356.339 505.769 Q350.529 505.769 347.45 501.186 Q344.395 496.58 344.395 487.853 Q344.395 479.103 347.45 474.519 Q350.529 469.913 356.339 469.913 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M256.664 243.49 L264.303 243.49 L264.303 217.125 L255.992 218.791 L255.992 214.532 L264.256 212.866 L268.932 212.866 L268.932 243.49 L276.571 243.49 L276.571 247.426 L256.664 247.426 L256.664 243.49 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M296.015 215.944 Q292.404 215.944 290.576 219.509 Q288.77 223.051 288.77 230.18 Q288.77 237.287 290.576 240.852 Q292.404 244.393 296.015 244.393 Q299.65 244.393 301.455 240.852 Q303.284 237.287 303.284 230.18 Q303.284 223.051 301.455 219.509 Q299.65 215.944 296.015 215.944 M296.015 212.241 Q301.826 212.241 304.881 216.847 Q307.96 221.43 307.96 230.18 Q307.96 238.907 304.881 243.514 Q301.826 248.097 296.015 248.097 Q290.205 248.097 287.127 243.514 Q284.071 238.907 284.071 230.18 Q284.071 221.43 287.127 216.847 Q290.205 212.241 296.015 212.241 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M326.177 215.944 Q322.566 215.944 320.737 219.509 Q318.932 223.051 318.932 230.18 Q318.932 237.287 320.737 240.852 Q322.566 244.393 326.177 244.393 Q329.811 244.393 331.617 240.852 Q333.446 237.287 333.446 230.18 Q333.446 223.051 331.617 219.509 Q329.811 215.944 326.177 215.944 M326.177 212.241 Q331.987 212.241 335.043 216.847 Q338.122 221.43 338.122 230.18 Q338.122 238.907 335.043 243.514 Q331.987 248.097 326.177 248.097 Q320.367 248.097 317.288 243.514 Q314.233 238.907 314.233 230.18 Q314.233 221.43 317.288 216.847 Q320.367 212.241 326.177 212.241 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M356.339 215.944 Q352.728 215.944 350.899 219.509 Q349.094 223.051 349.094 230.18 Q349.094 237.287 350.899 240.852 Q352.728 244.393 356.339 244.393 Q359.973 244.393 361.779 240.852 Q363.608 237.287 363.608 230.18 Q363.608 223.051 361.779 219.509 Q359.973 215.944 356.339 215.944 M356.339 212.241 Q362.149 212.241 365.205 216.847 Q368.284 221.43 368.284 230.18 Q368.284 238.907 365.205 243.514 Q362.149 248.097 356.339 248.097 Q350.529 248.097 347.45 243.514 Q344.395 238.907 344.395 230.18 Q344.395 221.43 347.45 216.847 Q350.529 212.241 356.339 212.241 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip812)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.146 4017.76,230.146 \"/>\n<polyline clip-path=\"url(#clip812)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1248.44 458.828,1248.08 459.396,1247.61 459.964,1247.11 460.533,1246.52 461.101,1244.83 461.669,1244.12 462.238,1243.31 462.806,1242.42 463.375,1241.44 463.943,1240.37 464.511,1238.18 465.08,1235.92 465.648,1234.59 466.216,1232.12 466.785,1230.59 467.353,1228.94 467.921,1227.11 468.49,1225.19 469.058,1223.11 469.626,1220.9 470.195,1217.48 470.763,1214.93 471.331,1212.19 471.9,1208.26 472.468,1204.08 473.036,1200.74 473.605,1196.2 474.173,1192.48 474.741,1187.46 475.31,1181.27 475.878,1176.87 476.446,1172.31 477.015,1166.46 477.583,1160.46 478.152,1154.13 478.72,1147.64 479.288,1141.92 479.857,1135.97 480.425,1129.88 480.993,1123.48 481.562,1116.89 482.13,1110.09 482.698,1102.08 483.267,1094.89 483.835,1086.39 484.403,1077.81 484.972,1068.93 485.54,1060.85 486.108,1051.69 486.677,1042.14 487.245,1031.58 487.813,1020.9 488.382,1008.97 488.95,999.068 489.518,987.924 490.087,977.826 490.655,968.762 491.224,958.397 491.792,944.975 492.36,933.631 492.929,922.152 493.497,912.782 494.065,901.371 494.634,891.027 495.202,881.599 495.77,871.142 496.339,860.59 496.907,849.048 497.475,836.497 498.044,826.02 498.612,815.765 499.18,803.319 499.749,791.02 500.317,780.895 500.885,769.861 501.454,760.969 502.022,751.016 502.59,739.133 503.159,726.217 503.727,714.728 504.295,705.398 504.864,696.084 505.432,688.05 506.001,677.901 506.569,666.713 507.137,659.09 507.706,650.281 508.274,640.401 508.842,630.563 509.411,622.128 509.979,613.803 510.547,605.448 511.116,596.257 511.684,588.402 512.252,580.388 512.821,571.517 513.389,562.883 513.957,555.42 514.526,546.102 515.094,539.019 515.662,532.036 516.231,524.119 516.799,513.303 517.367,505.925 517.936,499.77 518.504,493.672 519.072,487.654 519.641,481.701 520.209,475.862 520.778,468.199 521.346,463.778 521.914,459.531 522.483,453.133 523.051,448.9 523.619,441.776 524.188,437.938 524.756,434.03 525.324,430.369 525.893,424.74 526.461,421.001 527.029,417.364 527.598,412.952 528.166,408.265 528.734,403.796 529.303,398.518 529.871,395.375 530.439,391.29 531.008,386.37 531.576,383.384 532.144,379.484 532.713,375.908 533.281,373.251 533.85,370.576 534.418,367.851 534.986,364.354 535.555,359.832 536.123,356.554 536.691,355.464 537.26,350.851 537.828,351.826 538.396,348.457 538.965,346.238 539.533,343.996 540.101,342.575 540.67,338.146 541.238,335.032 541.806,331.793 542.375,331.913 542.943,329.898 543.511,327.045 544.08,327.213 544.648,325.255 545.216,322.356 545.785,318.475 546.353,313.847 546.921,309.1 547.49,305.803 548.058,303.704 548.627,301.699 549.195,297.523 549.763,293.567 550.332,292.902 550.9,291.165 551.468,291.649 552.037,289 552.605,291.289 553.173,290.63 553.742,288.958 554.31,287.183 554.878,287.631 555.447,284.83 556.015,283.114 556.583,280.43 557.152,279.104 557.72,278.535 558.288,276.134 558.857,276.875 559.425,276.379 559.993,276.979 560.562,277.659 561.13,275.025 561.698,272.573 562.267,273.528 562.835,272.004 563.404,271.628 563.972,272.222 564.54,270.714 565.109,268.34 565.677,268.132 566.245,267.874 566.814,266.452 567.382,266.247 567.95,266.208 568.519,262.867 569.087,261.891 569.655,260.792 570.224,261.559 570.792,261.199 571.36,261.305 571.929,263.212 572.497,262.98 573.065,263.674 573.634,263.177 574.202,263.7 574.77,263.255 575.339,259.677 575.907,259.181 576.476,256.977 577.044,255.85 577.612,257.086 578.181,256.879 578.749,256.672 579.317,256.594 579.886,255.108 580.454,254.754 581.022,254.701 581.591,255.268 582.159,255.14 582.727,252.933 583.296,252.844 583.864,252.693 584.432,252.369 585.001,250.25 585.569,247.191 586.137,247.362 586.706,246.616 587.274,244.731 587.842,247.004 588.411,247.029 588.979,245.987 589.547,244.959 590.116,245.251 590.684,246.46 591.253,243.416 591.821,243.905 592.389,245.286 592.958,243.241 593.526,243.681 594.094,243.99 594.663,243.187 595.231,242.248 595.799,242.555 596.368,242.789 596.936,241.121 597.504,240.462 598.073,240.82 598.641,241.08 599.209,242.496 599.778,243.843 600.346,245.115 600.914,246.307 601.483,246.25 602.051,244.012 602.619,243.992 603.188,242.882 603.756,240.976 604.325,241.052 604.893,242.373 605.461,240.398 606.03,240.748 606.598,240.992 607.166,241.123 607.735,239.351 608.303,238.441 608.871,237.907 609.44,238.375 610.008,236.738 610.576,237.168 611.145,238.472 611.713,238.705 612.281,237.945 612.85,238.473 613.418,238.682 613.986,236.96 614.555,238.365 615.123,238.841 615.691,239.033 616.26,238.298 616.828,238.676 617.396,237.907 617.965,237.269 618.533,236.672 619.102,237.219 619.67,236.681 620.238,234.295 620.807,232.789 621.375,234.69 621.943,234.324 622.512,234.847 623.08,234.417 623.648,234.902 624.217,236.494 624.785,238.967 625.353,240.495 625.922,237.749 626.49,235.881 627.058,237.338 627.627,235.562 628.195,236.12 628.763,236.247 629.332,237.77 629.9,237.077 630.468,237.305 631.037,236.594 631.605,238.08 632.173,240.458 632.742,240.574 633.31,239.522 633.879,238.758 634.447,237.73 635.015,236.923 635.584,237.266 636.152,234.52 636.72,234.997 637.289,236.427 637.857,236.895 638.425,236.078 638.994,236.642 639.562,233.606 640.13,237.403 640.699,238.538 641.267,239.772 641.835,240.002 642.404,241.879 642.972,240.506 643.54,241.502 644.109,239.535 644.677,240.55 645.245,238.525 645.814,237.659 646.382,236.679 646.951,236.804 647.519,238.025 648.087,237.134 648.656,236.176 649.224,237.76 649.792,239.098 650.361,238.959 650.929,238.989 651.497,239.971 652.066,239.99 652.634,239.955 653.202,240.798 653.771,240.526 654.339,242.425 654.907,242.958 655.476,243.881 656.044,243.446 656.612,244.241 657.181,243.769 657.749,243.306 658.317,241.085 658.886,241.814 659.454,238.378 660.022,237.387 660.591,238.338 661.159,239.548 661.728,240.363 662.296,239.024 662.864,238.85 663.433,237.743 664.001,234.3 664.569,235.452 665.138,234.446 665.706,234.378 666.274,237.458 666.843,238.165 667.411,241.013 667.979,238.674 668.548,239.442 669.116,238.412 669.684,239.197 670.253,238.796 670.821,237.503 671.389,237.166 671.958,237.93 672.526,237.592 673.094,237.293 673.663,237.036 674.231,236.754 674.799,236.537 675.368,236.439 675.936,238.426 676.505,240.105 677.073,238.567 677.641,238.051 678.21,235.682 678.778,236.487 679.346,234.307 679.915,232.305 680.483,232.249 681.051,232.135 681.62,232.123 682.188,233.285 682.756,232.204 683.325,231.253 683.893,231.353 684.461,230.516 685.03,233.827 685.598,229.723 686.166,229.007 686.735,228.397 687.303,228.853 687.871,229.457 688.44,229.462 689.008,228.773 689.577,226.897 690.145,225.069 690.713,226.88 691.282,228.51 691.85,229.14 692.418,230.697 692.987,233.96 693.555,234.084 694.123,234.19 694.692,234.354 695.26,234.242 695.828,236.463 696.397,235.408 696.965,235.527 697.533,234.467 698.102,235.487 698.67,234.346 699.238,233.384 699.807,233.458 700.375,233.63 700.943,232.498 701.512,230.498 702.08,229.722 702.648,227.8 703.217,225.309 703.785,225.745 704.354,224.18 704.922,223.957 705.49,224.724 706.059,224.285 706.627,226.241 707.195,228.876 707.764,231.128 708.332,231.365 708.9,232.74 709.469,232.858 710.037,231.839 710.605,232.189 711.174,231.49 711.742,232.755 712.31,227.693 712.879,228.3 713.447,227.548 714.015,228.962 714.584,229.353 715.152,228.563 715.72,228.971 716.289,230.304 716.857,230.649 717.425,229.025 717.994,228.173 718.562,229.608 719.131,229.997 719.699,230.225 720.267,230.385 720.836,230.798 721.404,231.096 721.972,230.263 722.541,230.624 723.109,229.824 723.677,229.185 724.246,229.647 724.814,232.215 725.382,232.462 725.951,231.623 726.519,233.048 727.087,234.188 727.656,234.358 728.224,235.024 728.792,235.143 729.361,235.214 729.929,235.177 730.497,235.309 731.066,236.184 731.634,235.974 732.203,237.8 732.771,240.694 733.339,240.142 733.908,240.801 734.476,239.36 735.044,240.009 735.613,236.48 736.181,235.033 736.749,236.061 737.318,233.712 737.886,235.763 738.454,234.666 739.023,233.343 739.591,233.36 740.159,232.277 740.728,230.355 741.296,230.533 741.864,229.878 742.433,231.043 743.001,231.321 743.569,233.634 744.138,232.572 744.706,233.635 745.274,232.645 745.843,231.884 746.411,231.888 746.98,230.965 747.548,231.311 748.116,230.404 748.685,229.34 749.253,230.584 749.821,231.817 750.39,233.835 750.958,231.683 751.526,230.814 752.095,233.136 752.663,233.252 753.231,233.295 753.8,234.108 754.368,235.068 754.936,235.834 755.505,236.601 756.073,237.406 756.641,235.971 757.21,238.745 757.778,236.479 758.346,237.3 758.915,236.926 759.483,239.542 760.052,238.015 760.62,238.515 761.188,238.211 761.757,236.487 762.325,236.355 762.893,234.925 763.462,232.613 764.03,228.625 764.598,228.807 765.167,229.93 765.735,230.2 766.303,230.344 766.872,231.427 767.44,234.483 768.008,232.197 768.577,232.195 769.145,232.231 769.713,231.089 770.282,229.992 770.85,233.383 771.418,231.147 771.987,231.182 772.555,231.035 773.123,228.136 773.692,229.401 774.26,229.681 774.829,229.828 775.397,230.03 775.965,231.175 776.534,231.211 777.102,231.309 777.67,231.265 778.239,231.205 778.807,232.318 779.375,230.235 779.944,231.368 780.512,234.37 781.08,233.181 781.649,230.92 782.217,230.958 782.785,228.697 783.354,231.151 783.922,231.121 784.49,230.237 785.059,229.105 785.627,228.493 786.195,229.614 786.764,226.741 787.332,223.222 787.9,225.733 788.469,224.113 789.037,224.669 789.606,225.227 790.174,224.747 790.742,228.311 791.311,227.516 791.879,229.913 792.447,230.857 793.016,231.1 793.584,232.357 794.152,231.411 794.721,231.55 795.289,230.538 795.857,233.797 796.426,233.605 796.994,233.478 797.562,231.23 798.131,229.33 798.699,228.483 799.267,226.62 799.836,224.986 800.404,226.559 800.972,223.923 801.541,225.482 802.109,225.041 802.678,225.673 803.246,228.139 803.814,228.573 804.383,232.176 804.951,233.998 805.519,234.924 806.088,235.724 806.656,234.467 807.224,234.304 807.793,234.108 808.361,233.209 808.929,232.916 809.498,233.682 810.066,234.597 810.634,232.509 811.203,232.422 811.771,234.405 812.339,233.325 812.908,233.052 813.476,232.933 814.044,230.982 814.613,232.158 815.181,233.089 815.749,234.082 816.318,234.888 816.886,236.646 817.455,234.227 818.023,233.904 818.591,234.737 819.16,232.309 819.728,231.192 820.296,229.159 820.865,229.353 821.433,231.654 822.001,231.603 822.57,231.741 823.138,232.741 823.706,232.539 824.275,232.39 824.843,232.305 825.411,231.173 825.98,231.108 826.548,229.174 827.116,229.286 827.685,229.433 828.253,231.678 828.821,231.645 829.39,230.633 829.958,232.856 830.526,235.035 831.095,235.777 831.663,236.516 832.232,238.079 832.8,237.609 833.368,236.256 833.937,235.97 834.505,234.677 835.073,231.205 835.642,230.018 836.21,228.908 836.778,231.042 837.347,231.096 837.915,229.829 838.483,231.759 839.052,231.63 839.62,232.424 840.188,231.184 840.757,230.239 841.325,233.443 841.893,232.198 842.462,231.968 843.03,228.818 843.598,229.966 844.167,231.275 844.735,235.363 845.304,236.033 845.872,235.669 846.44,235.313 847.009,236.953 847.577,236.563 848.145,235.126 848.714,233.605 849.282,233.501 849.85,234.268 850.419,232.784 850.987,233.621 851.555,234.342 852.124,234.855 852.692,234.652 853.26,234.159 853.829,233.597 854.397,233.262 854.965,231.679 855.534,231.715 856.102,231.617 856.67,230.518 857.239,232.476 857.807,232.272 858.375,233.347 858.944,227.978 859.512,226.846 860.081,225.944 860.649,228.403 861.217,228.496 861.786,229.373 862.354,228.442 862.922,229.66 863.491,227.528 864.059,227.725 864.627,224.762 865.196,225.175 865.764,225.587 866.332,227.944 866.901,227.984 867.469,228.131 868.037,230.31 868.606,230.076 869.174,232.108 869.742,232.014 870.311,232.057 870.879,231.884 871.447,232.786 872.016,232.547 872.584,232.042 873.152,231.807 873.721,231.679 874.289,230.518 874.858,230.348 875.426,233.244 875.994,231.96 876.563,232.658 877.131,231.526 877.699,231.494 878.268,230.346 878.836,230.351 879.404,232.48 879.973,233.164 880.541,230.911 881.109,230.906 881.678,229.843 882.246,230.943 882.814,229.877 883.383,230.565 883.951,231.525 884.519,231.424 885.088,230.312 885.656,230.245 886.224,230.047 886.793,229.913 887.361,228.822 887.93,228.841 888.498,226.694 889.066,225.834 889.635,227.143 890.203,227.472 890.771,226.506 891.34,225.705 891.908,226.28 892.476,226.624 893.045,225.787 893.613,224.258 894.181,224.725 894.75,224.108 895.318,224.385 895.886,226.85 896.455,225.082 897.023,225.431 897.591,225.656 898.16,226.111 898.728,226.447 899.296,225.932 899.865,226.209 900.433,227.638 901.001,228.081 901.57,227.342 902.138,227.436 902.707,228.684 903.275,227.908 903.843,230.251 904.412,230.38 904.98,230.36 905.548,231.293 906.117,232.243 906.685,230.052 907.253,232.158 907.822,233.164 908.39,232.019 908.958,231.949 909.527,231.813 910.095,231.77 910.663,230.887 911.232,230.966 911.8,230.885 912.368,228.92 912.937,229.023 913.505,229.395 914.073,227.461 914.642,226.632 915.21,228.693 915.779,228.934 916.347,229.039 916.915,232.42 917.484,232.271 918.052,231.957 918.62,230.937 919.189,227.043 919.757,227.267 920.325,227.667 920.894,230.172 921.462,228.295 922.03,228.624 922.599,229.143 923.167,227.191 923.735,227.826 924.304,226.772 924.872,227.306 925.44,227.432 926.009,228.907 926.577,227.288 927.145,227.874 927.714,227.367 928.282,226.704 928.85,226.092 929.419,226.806 929.987,228.201 930.556,227.082 931.124,227.425 931.692,227.651 932.261,227.1 932.829,227.617 933.397,228.888 933.966,229.938 934.534,230.018 935.102,231.004 935.671,234.262 936.239,234.178 936.807,234.138 937.376,235.162 937.944,231.671 938.512,229.752 939.081,229.847 939.649,231.046 940.217,232.24 940.786,230.138 941.354,232.208 941.922,232.278 942.491,232.39 943.059,232.358 943.627,235.344 944.196,236.139 944.764,237.852 945.333,235.241 945.901,233.038 946.469,233.821 947.038,232.898 947.606,231.7 948.174,229.883 948.743,228.032 949.311,228.392 949.879,229.553 950.448,230.599 951.016,231.727 951.584,229.46 952.153,228.767 952.721,228.888 953.289,227.124 953.858,228.324 954.426,229.559 954.994,228.51 955.563,227.959 956.131,227.145 956.699,228.418 957.268,229.539 957.836,228.612 958.405,227.867 958.973,229.243 959.541,229.619 960.11,229.879 960.678,232.353 961.246,231.279 961.815,234.253 962.383,233.039 962.951,230.988 963.52,231.16 964.088,232.19 964.656,232.117 965.225,234.27 965.793,235.298 966.361,235.178 966.93,235.986 967.498,237.664 968.066,237.103 968.635,237.779 969.203,239.294 969.771,237.607 970.34,235.919 970.908,236.481 971.476,238.148 972.045,237.288 972.613,236.881 973.182,236.454 973.75,234.928 974.318,235.508 974.887,237.252 975.455,235.643 976.023,233.332 976.592,235.173 977.16,233.742 977.728,232.361 978.297,232.077 978.865,231.91 979.433,231.694 980.002,230.649 980.57,230.566 981.138,231.591 981.707,231.364 982.275,232.079 982.843,234.026 983.412,233.846 983.98,232.283 984.548,232.117 985.117,233.925 985.685,233.778 986.253,233.497 986.822,233.231 987.39,233.107 987.959,232.458 988.527,231.1 989.095,230.98 989.664,230.767 990.232,230.717 990.8,230.575 991.369,229.419 991.937,229.41 992.505,227.305 993.074,228.283 993.642,229.406 994.21,230.173 994.779,231.097 995.347,231.021 995.915,227.809 996.484,225.945 997.052,224.013 997.62,224.351 998.189,225.674 998.757,226.938 999.325,227.393 999.894,225.343 1000.46,226.637 1001.03,227.955 1001.6,227.12 1002.17,226.26 1002.74,226.688 1003.3,228.013 1003.87,229.179 1004.44,229.319 1005.01,230.227 1005.58,229.108 1006.15,229.095 1006.71,230.133 1007.28,229.048 1007.85,229.988 1008.42,229.053 1008.99,231.373 1009.56,231.1 1010.12,230.769 1010.69,231.652 1011.26,232.536 1011.83,230.233 1012.4,229.14 1012.97,231.356 1013.53,231.219 1014.1,232.182 1014.67,232.02 1015.24,230.829 1015.81,229.852 1016.38,229.999 1016.94,228.975 1017.51,228.112 1018.08,228.256 1018.65,228.578 1019.22,226.595 1019.79,224.786 1020.35,224.969 1020.92,228.453 1021.49,230.804 1022.06,231.886 1022.63,227.665 1023.2,226.688 1023.76,227.083 1024.33,227.357 1024.9,226.594 1025.47,229.945 1026.04,232.864 1026.61,230.552 1027.17,231.605 1027.74,230.408 1028.31,228.221 1028.88,229.121 1029.45,228.237 1030.02,229.374 1030.58,229.659 1031.15,228.528 1031.72,230.716 1032.29,230.811 1032.86,231.736 1033.43,231.572 1033.99,231.431 1034.56,231.349 1035.13,233.615 1035.7,233.375 1036.27,233.274 1036.84,232.898 1037.4,233.684 1037.97,233.481 1038.54,233.208 1039.11,232.153 1039.68,231.878 1040.25,233.009 1040.81,230.697 1041.38,229.369 1041.95,232.607 1042.52,231.234 1043.09,230.241 1043.66,230.288 1044.22,229.291 1044.79,229.209 1045.36,228.392 1045.93,228.535 1046.5,227.551 1047.07,225.686 1047.63,226.036 1048.2,227.234 1048.77,228.648 1049.34,227.747 1049.91,227.916 1050.48,228.121 1051.05,228.228 1051.61,229.587 1052.18,228.466 1052.75,226.604 1053.32,225.86 1053.89,228.341 1054.46,228.646 1055.02,229.011 1055.59,230.218 1056.16,229.373 1056.73,230.48 1057.3,230.448 1057.87,231.299 1058.43,231.287 1059,232.122 1059.57,230.25 1060.14,232.405 1060.71,236.489 1061.28,235.153 1061.84,234.051 1062.41,234.759 1062.98,236.614 1063.55,236.036 1064.12,234.751 1064.69,232.44 1065.25,232.216 1065.82,231.272 1066.39,231.219 1066.96,232.345 1067.53,234.253 1068.1,235.861 1068.66,233.291 1069.23,231.776 1069.8,231.392 1070.37,231.353 1070.94,232.142 1071.51,234.099 1072.07,235.882 1072.64,235.492 1073.21,233.989 1073.78,234.67 1074.35,236.519 1074.92,237.064 1075.48,238.56 1076.05,237.833 1076.62,235.021 1077.19,235.704 1077.76,235.045 1078.33,232.714 1078.89,232.37 1079.46,235.321 1080.03,233.896 1080.6,235.528 1081.17,232.834 1081.74,234.573 1082.3,234.036 1082.87,234.555 1083.44,234.138 1084.01,233.606 1084.58,233.154 1085.15,232.842 1085.71,232.481 1086.28,233.306 1086.85,232.859 1087.42,232.478 1087.99,232.335 1088.56,227.059 1089.12,229.286 1089.69,227.169 1090.26,225.191 1090.83,226.468 1091.4,225.717 1091.97,226.125 1092.53,226.17 1093.1,228.634 1093.67,228.602 1094.24,227.43 1094.81,225.561 1095.38,226.817 1095.94,225.773 1096.51,224.698 1097.08,224.816 1097.65,225.017 1098.22,222.066 1098.79,222.509 1099.35,223.85 1099.92,223.177 1100.49,223.491 1101.06,225.767 1101.63,224.794 1102.2,224.329 1102.76,223.743 1103.33,223.402 1103.9,223.998 1104.47,220.2 1105.04,221.957 1105.61,223.512 1106.17,222.903 1106.74,224.369 1107.31,226.736 1107.88,228.225 1108.45,227.4 1109.02,229.514 1109.58,231.768 1110.15,231.825 1110.72,232.807 1111.29,231.478 1111.86,230.45 1112.43,234.543 1112.99,233.955 1113.56,231.709 1114.13,228.669 1114.7,226.921 1115.27,227.071 1115.84,225.451 1116.4,226.703 1116.97,230.05 1117.54,229.121 1118.11,228.998 1118.68,232.341 1119.25,231.157 1119.81,231.291 1120.38,231.592 1120.95,231.527 1121.52,229.412 1122.09,230.479 1122.66,230.326 1123.23,232.582 1123.79,230.608 1124.36,233.737 1124.93,233.405 1125.5,232.122 1126.07,231.071 1126.64,231.065 1127.2,230.876 1127.77,229.755 1128.34,230.608 1128.91,229.446 1129.48,228.653 1130.05,225.774 1130.61,224.15 1131.18,223.406 1131.75,224.681 1132.32,225.989 1132.89,228.309 1133.46,227.551 1134.02,228.89 1134.59,228.788 1135.16,230.152 1135.73,231.25 1136.3,230.219 1136.87,232.332 1137.43,232.358 1138,232.265 1138.57,235.428 1139.14,235.151 1139.71,235.839 1140.28,236.495 1140.84,234.996 1141.41,235.716 1141.98,235.393 1142.55,235.913 1143.12,236.626 1143.69,236.093 1144.25,234.691 1144.82,234.358 1145.39,233.299 1145.96,231.239 1146.53,230.278 1147.1,230.317 1147.66,230.532 1148.23,231.23 1148.8,229.998 1149.37,228.825 1149.94,231.371 1150.51,230.237 1151.07,231.389 1151.64,229.145 1152.21,229.07 1152.78,227.917 1153.35,228.928 1153.92,231.142 1154.48,230.832 1155.05,230.389 1155.62,230.452 1156.19,230.123 1156.76,229.31 1157.33,229.059 1157.89,227.929 1158.46,227.204 1159.03,227.233 1159.6,229.466 1160.17,228.429 1160.74,227.544 1161.3,228.683 1161.87,227.828 1162.44,228.049 1163.01,224.107 1163.58,224.692 1164.15,225.326 1164.71,225.943 1165.28,226.114 1165.85,227.608 1166.42,228.937 1166.99,228.976 1167.56,230.248 1168.12,231.411 1168.69,232.366 1169.26,231.106 1169.83,227.947 1170.4,228.135 1170.97,230.618 1171.53,228.441 1172.1,228.734 1172.67,226.88 1173.24,228.098 1173.81,229.476 1174.38,228.566 1174.94,227.651 1175.51,229.827 1176.08,232.074 1176.65,232.011 1177.22,231.011 1177.79,230.96 1178.35,233.228 1178.92,232.003 1179.49,230.858 1180.06,229.819 1180.63,230.027 1181.2,229.907 1181.76,228.863 1182.33,228.91 1182.9,230.085 1183.47,231.169 1184.04,230.252 1184.61,228.231 1185.17,226.367 1185.74,224.677 1186.31,224.058 1186.88,225.686 1187.45,228.138 1188.02,228.273 1188.58,227.537 1189.15,226.683 1189.72,229.106 1190.29,230.304 1190.86,229.347 1191.43,229.314 1192,229.677 1192.56,232.871 1193.13,232.687 1193.7,232.578 1194.27,233.597 1194.84,233.399 1195.41,232.258 1195.97,231.176 1196.54,231.137 1197.11,230.943 1197.68,229.969 1198.25,230.079 1198.82,227.093 1199.38,229.323 1199.95,231.647 1200.52,231.64 1201.09,232.485 1201.66,232.352 1202.23,231.044 1202.79,230.948 1203.36,231.056 1203.93,229.891 1204.5,229.829 1205.07,229.909 1205.64,229.068 1206.2,230.336 1206.77,228.329 1207.34,230.505 1207.91,230.449 1208.48,231.433 1209.05,232.343 1209.61,232.436 1210.18,231.158 1210.75,231.128 1211.32,233.11 1211.89,232.907 1212.46,232.709 1213.02,232.74 1213.59,231.518 1214.16,230.256 1214.73,228.373 1215.3,228.54 1215.87,228.753 1216.43,230.71 1217,232.816 1217.57,232.844 1218.14,233.695 1218.71,234.368 1219.28,233 1219.84,232.753 1220.41,231.567 1220.98,230.302 1221.55,231.26 1222.12,231.059 1222.69,231.192 1223.25,231.991 1223.82,229.679 1224.39,230.79 1224.96,232.807 1225.53,231.371 1226.1,233.402 1226.66,231.153 1227.23,231.908 1227.8,231.916 1228.37,229.743 1228.94,228.606 1229.51,230.594 1230.07,229.646 1230.64,231.837 1231.21,230.964 1231.78,231.007 1232.35,233.108 1232.92,232.801 1233.48,232.714 1234.05,231.616 1234.62,230.445 1235.19,229.281 1235.76,230.389 1236.33,229.443 1236.89,230.436 1237.46,230.392 1238.03,231.24 1238.6,232.412 1239.17,231.249 1239.74,231.238 1240.3,232.086 1240.87,232.033 1241.44,234.979 1242.01,233.56 1242.58,232.343 1243.15,233.395 1243.71,233.233 1244.28,233.067 1244.85,231.691 1245.42,232.707 1245.99,232.402 1246.56,231.275 1247.12,233.282 1247.69,232.109 1248.26,234.021 1248.83,235.521 1249.4,234.06 1249.97,232.811 1250.53,232.301 1251.1,230.22 1251.67,230.229 1252.24,229.152 1252.81,229.107 1253.38,229.054 1253.94,231.128 1254.51,229.036 1255.08,227.974 1255.65,227.909 1256.22,228.919 1256.79,228.806 1257.35,226.791 1257.92,228.092 1258.49,229.045 1259.06,230.257 1259.63,229.105 1260.2,227.099 1260.76,226.028 1261.33,227.338 1261.9,228.381 1262.47,227.483 1263.04,228.584 1263.61,228.493 1264.18,227.466 1264.74,225.39 1265.31,225.686 1265.88,226.947 1266.45,229.229 1267.02,230.402 1267.59,230.363 1268.15,228.273 1268.72,228.371 1269.29,225.413 1269.86,226.986 1270.43,228.322 1271,228.276 1271.56,228.284 1272.13,228.432 1272.7,228.439 1273.27,228.594 1273.84,228.746 1274.41,227.834 1274.97,226.937 1275.54,226.181 1276.11,223.596 1276.68,224.72 1277.25,227.244 1277.82,227.376 1278.38,226.51 1278.95,227.752 1279.52,229.107 1280.09,228.18 1280.66,227.202 1281.23,227.675 1281.79,229.93 1282.36,229.95 1282.93,228.995 1283.5,229.087 1284.07,227.36 1284.64,226.483 1285.2,229.06 1285.77,227.125 1286.34,225.392 1286.91,223.607 1287.48,223.316 1288.05,222.757 1288.61,223.485 1289.18,223.045 1289.75,222.563 1290.32,227.256 1290.89,227.566 1291.46,227.95 1292.02,227.253 1292.59,228.557 1293.16,227.783 1293.73,229.009 1294.3,228.354 1294.87,228.818 1295.43,230.246 1296,231.616 1296.57,228.604 1297.14,228.863 1297.71,230.028 1298.28,231.164 1298.84,230.239 1299.41,230.129 1299.98,229.313 1300.55,232.443 1301.12,232.411 1301.69,233.059 1302.25,231.909 1302.82,229.726 1303.39,231.942 1303.96,234.931 1304.53,236.748 1305.1,238.614 1305.66,238.157 1306.23,236.657 1306.8,234.213 1307.37,235.141 1307.94,234.861 1308.51,233.556 1309.07,231.315 1309.64,230.255 1310.21,230.414 1310.78,227.454 1311.35,229.671 1311.92,229.916 1312.48,229.003 1313.05,228.117 1313.62,229.761 1314.19,230.727 1314.76,231.718 1315.33,232.769 1315.89,233.575 1316.46,232.262 1317.03,232.325 1317.6,232.493 1318.17,232.442 1318.74,234.417 1319.3,232.165 1319.87,232.109 1320.44,231.973 1321.01,231.806 1321.58,229.792 1322.15,229.88 1322.71,228.918 1323.28,231.066 1323.85,233.155 1324.42,233.067 1324.99,232.875 1325.56,233.732 1326.12,233.842 1326.69,237.706 1327.26,237.222 1327.83,235.77 1328.4,234.272 1328.97,234.89 1329.53,236.415 1330.1,236.924 1330.67,236.501 1331.24,233.096 1331.81,231.859 1332.38,230.632 1332.94,233.718 1333.51,232.423 1334.08,230.279 1334.65,230.267 1335.22,232.33 1335.79,230.025 1336.36,228.131 1336.92,229.103 1337.49,228.073 1338.06,227.061 1338.63,227.16 1339.2,226.285 1339.77,224.663 1340.33,223.07 1340.9,222.671 1341.47,222.083 1342.04,223.535 1342.61,223.759 1343.18,222.301 1343.74,223.9 1344.31,227.448 1344.88,226.726 1345.45,226.877 1346.02,225.179 1346.59,225.674 1347.15,226.18 1347.72,229.733 1348.29,229.742 1348.86,231.881 1349.43,232.768 1350,233.553 1350.56,233.347 1351.13,233.964 1351.7,233.882 1352.27,233.697 1352.84,234.55 1353.41,235.488 1353.97,234.028 1354.54,229.717 1355.11,229.759 1355.68,228.697 1356.25,227.921 1356.82,226.936 1357.38,228.049 1357.95,226.996 1358.52,227.34 1359.09,226.421 1359.66,226.829 1360.23,225.897 1360.79,227.354 1361.36,227.703 1361.93,228.058 1362.5,228.204 1363.07,228.185 1363.64,228.339 1364.2,228.475 1364.77,228.55 1365.34,231.993 1365.91,232.99 1366.48,232.949 1367.05,232.5 1367.61,232.298 1368.18,232.252 1368.75,232.131 1369.32,232.158 1369.89,232.117 1370.46,232.078 1371.02,231.036 1371.59,231.018 1372.16,231.825 1372.73,230.686 1373.3,231.449 1373.87,231.444 1374.43,233.432 1375,233.076 1375.57,232.917 1376.14,232.892 1376.71,230.403 1377.28,230.403 1377.84,231.374 1378.41,229.292 1378.98,229.283 1379.55,229.506 1380.12,229.416 1380.69,228.669 1381.25,228.594 1381.82,229.57 1382.39,229.858 1382.96,229.905 1383.53,231.148 1384.1,231.119 1384.66,230.097 1385.23,229.135 1385.8,229.297 1386.37,231.481 1386.94,230.358 1387.51,230.414 1388.07,232.387 1388.64,234.264 1389.21,235.082 1389.78,236.903 1390.35,236.377 1390.92,236.072 1391.48,233.647 1392.05,234.411 1392.62,232.992 1393.19,229.803 1393.76,231.148 1394.33,231.078 1394.89,231.09 1395.46,231.978 1396.03,231.813 1396.6,229.531 1397.17,230.441 1397.74,229.419 1398.3,230.601 1398.87,229.488 1399.44,230.587 1400.01,227.436 1400.58,227.428 1401.15,228.739 1401.71,229.825 1402.28,229.797 1402.85,229.748 1403.42,229.669 1403.99,229.535 1404.56,229.405 1405.13,229.419 1405.69,229.611 1406.26,232.761 1406.83,232.683 1407.4,231.418 1407.97,232.214 1408.54,236.078 1409.1,237.62 1409.67,237.166 1410.24,235.601 1410.81,234.053 1411.38,234.885 1411.95,233.61 1412.51,232.416 1413.08,232.397 1413.65,231.189 1414.22,231.078 1414.79,229.988 1415.36,228.891 1415.92,231.96 1416.49,234.95 1417.06,235.502 1417.63,234.144 1418.2,234.725 1418.77,233.222 1419.33,232.888 1419.9,232.525 1420.47,232.228 1421.04,230.666 1421.61,229.566 1422.18,229.551 1422.74,231.537 1423.31,233.107 1423.88,232.849 1424.45,230.37 1425.02,230.351 1425.59,230.277 1426.15,231.272 1426.72,232.135 1427.29,231.807 1427.86,231.619 1428.43,232.478 1429,231.145 1429.56,229.878 1430.13,227.754 1430.7,227.806 1431.27,229.039 1431.84,229.092 1432.41,229.084 1432.97,229.281 1433.54,229.217 1434.11,229.066 1434.68,225.957 1435.25,226.211 1435.82,225.407 1436.38,226.6 1436.95,228.801 1437.52,228.884 1438.09,228.824 1438.66,229.704 1439.23,232.966 1439.79,233.81 1440.36,234.291 1440.93,236.18 1441.5,235.643 1442.07,235.175 1442.64,234.513 1443.2,234.049 1443.77,234.65 1444.34,235.199 1444.91,231.616 1445.48,230.348 1446.05,229.303 1446.61,227.096 1447.18,227.259 1447.75,226.227 1448.32,224.217 1448.89,224.633 1449.46,224.82 1450.02,226.092 1450.59,224.157 1451.16,224.387 1451.73,223.673 1452.3,223.906 1452.87,223.362 1453.43,225.786 1454,225.155 1454.57,224.527 1455.14,225.064 1455.71,226.535 1456.28,227.77 1456.84,225.974 1457.41,223.082 1457.98,222.428 1458.55,222.839 1459.12,224.412 1459.69,226.932 1460.25,226.045 1460.82,225.388 1461.39,226.628 1461.96,227.82 1462.53,228.682 1463.1,227.767 1463.66,228.075 1464.23,228.304 1464.8,231.55 1465.37,231.502 1465.94,232.495 1466.51,230.211 1467.07,231.171 1467.64,230.196 1468.21,230.21 1468.78,228.179 1469.35,228.227 1469.92,228.304 1470.48,230.645 1471.05,231.693 1471.62,231.798 1472.19,230.802 1472.76,233.048 1473.33,230.689 1473.89,229.783 1474.46,233.789 1475.03,234.571 1475.6,233.3 1476.17,234.127 1476.74,231.885 1477.31,233.477 1477.87,231.263 1478.44,231.19 1479.01,231.204 1479.58,229.955 1480.15,228.951 1480.72,229.257 1481.28,228.488 1481.85,226.689 1482.42,224.836 1482.99,226.114 1483.56,223.081 1484.13,223.545 1484.69,223.047 1485.26,223.462 1485.83,223.884 1486.4,222.409 1486.97,222.896 1487.54,224.619 1488.1,225.47 1488.67,224.82 1489.24,226.146 1489.81,225.411 1490.38,224.529 1490.95,226.205 1491.51,226.46 1492.08,225.725 1492.65,224.999 1493.22,224.36 1493.79,224.718 1494.36,225.113 1494.92,226.446 1495.49,227.791 1496.06,228.173 1496.63,226.337 1497.2,226.923 1497.77,227.31 1498.33,227.599 1498.9,226.959 1499.47,228.241 1500.04,228.482 1500.61,227.713 1501.18,228.047 1501.74,228.469 1502.31,224.603 1502.88,227.333 1503.45,226.516 1504.02,227.137 1504.59,227.675 1505.15,229.195 1505.72,228.297 1506.29,227.44 1506.86,227.589 1507.43,229.015 1508,229.289 1508.56,230.542 1509.13,232.818 1509.7,234.991 1510.27,235.794 1510.84,238.899 1511.41,237.556 1511.97,237.177 1512.54,239.831 1513.11,239.438 1513.68,238.98 1514.25,237.502 1514.82,237.978 1515.38,237.449 1515.95,241.19 1516.52,243.676 1517.09,241.665 1517.66,242.852 1518.23,243.043 1518.79,243.172 1519.36,242.491 1519.93,242.677 1520.5,241.719 1521.07,237.938 1521.64,237.431 1522.2,236.796 1522.77,235.136 1523.34,234.779 1523.91,233.445 1524.48,232.201 1525.05,231.965 1525.61,232.62 1526.18,231.237 1526.75,232.092 1527.32,231.655 1527.89,229.343 1528.46,229.542 1529.02,229.466 1529.59,228.362 1530.16,229.323 1530.73,230.281 1531.3,230.12 1531.87,229.908 1532.43,229.003 1533,226.786 1533.57,228.945 1534.14,228.01 1534.71,229.014 1535.28,228.038 1535.84,230.424 1536.41,228.298 1536.98,229.267 1537.55,229.044 1538.12,231.244 1538.69,232.266 1539.25,229.908 1539.82,229.904 1540.39,231.701 1540.96,231.392 1541.53,232.184 1542.1,230.777 1542.66,228.631 1543.23,228.553 1543.8,231.679 1544.37,230.675 1544.94,229.797 1545.51,228.966 1546.08,229.732 1546.64,229.891 1547.21,231.073 1547.78,233.011 1548.35,231.887 1548.92,231.788 1549.49,231.674 1550.05,229.502 1550.62,229.141 1551.19,229.09 1551.76,229.2 1552.33,228.411 1552.9,229.324 1553.46,228.066 1554.03,230.081 1554.6,231.102 1555.17,230.121 1555.74,229.136 1556.31,229.331 1556.87,229.265 1557.44,227.103 1558.01,226.241 1558.58,228.758 1559.15,227.847 1559.72,226.938 1560.28,227.24 1560.85,227.399 1561.42,228.498 1561.99,228.621 1562.56,228.776 1563.13,228.749 1563.69,229.831 1564.26,230.797 1564.83,229.611 1565.4,229.904 1565.97,231.86 1566.54,228.718 1567.1,230.003 1567.67,230.976 1568.24,231.691 1568.81,231.585 1569.38,230.169 1569.95,229.181 1570.51,229.16 1571.08,230.237 1571.65,230.367 1572.22,230.136 1572.79,231.062 1573.36,233.005 1573.92,232.832 1574.49,232.633 1575.06,233.21 1575.63,233.856 1576.2,231.536 1576.77,231.35 1577.33,231.241 1577.9,231.124 1578.47,231.087 1579.04,228.995 1579.61,229.321 1580.18,227.285 1580.74,227.41 1581.31,224.56 1581.88,227.816 1582.45,230.065 1583.02,228.667 1583.59,227.782 1584.15,228.002 1584.72,226.29 1585.29,226.629 1585.86,227.07 1586.43,227.065 1587,226.184 1587.56,226.369 1588.13,225.621 1588.7,228.015 1589.27,226.911 1589.84,227.064 1590.41,228.455 1590.97,229.633 1591.54,228.739 1592.11,228.845 1592.68,227.749 1593.25,227.822 1593.82,229.736 1594.38,229.777 1594.95,228.804 1595.52,228.788 1596.09,229.985 1596.66,228.054 1597.23,228.183 1597.79,228.417 1598.36,227.549 1598.93,230.979 1599.5,230.161 1600.07,230.291 1600.64,231.364 1601.2,229.17 1601.77,229.307 1602.34,228.363 1602.91,228.383 1603.48,229.524 1604.05,228.447 1604.61,229.321 1605.18,231.715 1605.75,231.633 1606.32,230.652 1606.89,230.689 1607.46,230.57 1608.02,231.8 1608.59,230.51 1609.16,230.61 1609.73,230.572 1610.3,232.737 1610.87,232.732 1611.43,228.639 1612,230.514 1612.57,230.662 1613.14,231.617 1613.71,231.313 1614.28,232.476 1614.84,232.41 1615.41,234.296 1615.98,235.099 1616.55,235.7 1617.12,235.178 1617.69,232.097 1618.26,233.074 1618.82,234.827 1619.39,235.446 1619.96,233.005 1620.53,233.837 1621.1,233.26 1621.67,231.002 1622.23,231.704 1622.8,231.475 1623.37,230.29 1623.94,233.311 1624.51,232.029 1625.08,231.927 1625.64,231.707 1626.21,229.632 1626.78,230.914 1627.35,232.906 1627.92,231.807 1628.49,231.84 1629.05,229.786 1629.62,229.622 1630.19,228.768 1630.76,227.368 1631.33,227.481 1631.9,229.581 1632.46,229.572 1633.03,225.478 1633.6,222.872 1634.17,224.428 1634.74,226.547 1635.31,227.926 1635.87,230.256 1636.44,232.32 1637.01,231.29 1637.58,231.158 1638.15,229.997 1638.72,231.024 1639.28,230.927 1639.85,228.748 1640.42,226.902 1640.99,229.263 1641.56,228.528 1642.13,228.854 1642.69,228.94 1643.26,226.154 1643.83,226.347 1644.4,226.449 1644.97,228.896 1645.54,234.198 1646.1,233.507 1646.67,230.119 1647.24,232.314 1647.81,232.068 1648.38,232.982 1648.95,231.531 1649.51,231.539 1650.08,229.339 1650.65,227.207 1651.22,225.369 1651.79,224.557 1652.36,224.957 1652.92,227.468 1653.49,225.716 1654.06,226.072 1654.63,228.305 1655.2,228.512 1655.77,230.636 1656.33,232.532 1656.9,232.37 1657.47,233.397 1658.04,233.529 1658.61,234.474 1659.18,233.293 1659.74,234.084 1660.31,233.597 1660.88,232.336 1661.45,233.16 1662.02,233.783 1662.59,233.466 1663.15,231.179 1663.72,232.01 1664.29,231.844 1664.86,233.779 1665.43,233.558 1666,233.63 1666.56,233.132 1667.13,231.738 1667.7,228.602 1668.27,228.793 1668.84,228.684 1669.41,227.798 1669.97,226.987 1670.54,227.18 1671.11,227.41 1671.68,225.407 1672.25,225.586 1672.82,226.099 1673.38,224.396 1673.95,224.705 1674.52,226.12 1675.09,223.372 1675.66,223.682 1676.23,225.102 1676.79,226.614 1677.36,227.885 1677.93,227.002 1678.5,227.35 1679.07,229.54 1679.64,230.787 1680.2,230.965 1680.77,232.118 1681.34,232.115 1681.91,232.101 1682.48,231.924 1683.05,231.845 1683.61,231.506 1684.18,230.492 1684.75,229.746 1685.32,229.741 1685.89,230.981 1686.46,230.821 1687.02,229.832 1687.59,233.05 1688.16,237.081 1688.73,235.606 1689.3,235.274 1689.87,235.76 1690.44,234.266 1691,234.016 1691.57,233.588 1692.14,234.478 1692.71,234.333 1693.28,234.884 1693.85,235.552 1694.41,235.337 1694.98,233.733 1695.55,232.464 1696.12,232.32 1696.69,234.25 1697.26,232.819 1697.82,233.471 1698.39,234.214 1698.96,233.015 1699.53,234.885 1700.1,235.524 1700.67,234.004 1701.23,232.743 1701.8,230.253 1702.37,231.384 1702.94,231.195 1703.51,232.114 1704.08,232.735 1704.64,230.325 1705.21,228.161 1705.78,228.267 1706.35,227.135 1706.92,228.266 1707.49,229.342 1708.05,229.401 1708.62,228.514 1709.19,225.493 1709.76,225.885 1710.33,224.001 1710.9,222.233 1711.46,219.895 1712.03,223.716 1712.6,222.099 1713.17,223.819 1713.74,225.123 1714.31,227.303 1714.87,226.375 1715.44,227.276 1716.01,227.512 1716.58,225.782 1717.15,224.939 1717.72,225.292 1718.28,223.524 1718.85,225.162 1719.42,227.799 1719.99,228.012 1720.56,229.122 1721.13,229.38 1721.69,229.464 1722.26,227.245 1722.83,224.506 1723.4,226.036 1723.97,225.282 1724.54,227.616 1725.1,229.159 1725.67,230.199 1726.24,229.31 1726.81,227.48 1727.38,226.858 1727.95,226.142 1728.51,225.748 1729.08,229.379 1729.65,229.539 1730.22,231.691 1730.79,231.719 1731.36,229.609 1731.92,231.647 1732.49,230.669 1733.06,228.726 1733.63,229.606 1734.2,230.699 1734.77,228.683 1735.33,227.781 1735.9,228.906 1736.47,227.079 1737.04,226.405 1737.61,226.448 1738.18,227.748 1738.74,229.948 1739.31,228.93 1739.88,229.241 1740.45,229.451 1741.02,229.643 1741.59,230.002 1742.15,229.17 1742.72,228.395 1743.29,230.788 1743.86,231.841 1744.43,232.967 1745,234.837 1745.56,235.489 1746.13,235.156 1746.7,232.622 1747.27,234.405 1747.84,233.582 1748.41,234.569 1748.97,234.329 1749.54,234.018 1750.11,231.761 1750.68,231.606 1751.25,232.598 1751.82,234.594 1752.38,233.314 1752.95,234.302 1753.52,234.221 1754.09,233.725 1754.66,235.81 1755.23,233.312 1755.79,234.023 1756.36,235.784 1756.93,234.532 1757.5,235.245 1758.07,235.065 1758.64,234.617 1759.21,234.395 1759.77,235.008 1760.34,235.791 1760.91,234.236 1761.48,233.005 1762.05,233.533 1762.62,234.236 1763.18,236.041 1763.75,234.51 1764.32,234.014 1764.89,233.503 1765.46,233.179 1766.03,231.839 1766.59,229.521 1767.16,228.43 1767.73,228.56 1768.3,230.827 1768.87,228.761 1769.44,230.795 1770,227.78 1770.57,228.084 1771.14,230.294 1771.71,229.082 1772.28,228.12 1772.85,229.204 1773.41,229.064 1773.98,227.985 1774.55,227.103 1775.12,230.473 1775.69,229.407 1776.26,230.533 1776.82,229.399 1777.39,229.495 1777.96,228.308 1778.53,227.422 1779.1,228.576 1779.67,230.748 1780.23,229.386 1780.8,232.347 1781.37,230.213 1781.94,227.106 1782.51,226.065 1783.08,225.114 1783.64,226.397 1784.21,227.533 1784.78,227.552 1785.35,226.449 1785.92,227.439 1786.49,227.568 1787.05,227.715 1787.62,227.019 1788.19,228.214 1788.76,229.296 1789.33,229.269 1789.9,230.183 1790.46,231.17 1791.03,231.108 1791.6,230.883 1792.17,230.662 1792.74,230.84 1793.31,229.936 1793.87,229.924 1794.44,230.023 1795.01,230.183 1795.58,229.252 1796.15,230.358 1796.72,230.251 1797.28,231.383 1797.85,232.353 1798.42,232.218 1798.99,231.008 1799.56,232.154 1800.13,230.753 1800.69,230.869 1801.26,229.965 1801.83,228.939 1802.4,227.888 1802.97,229.336 1803.54,228.354 1804.1,227.454 1804.67,231.738 1805.24,232.417 1805.81,234.476 1806.38,233.22 1806.95,234.193 1807.51,232.748 1808.08,232.421 1808.65,234.269 1809.22,231.727 1809.79,231.528 1810.36,230.326 1810.92,229.161 1811.49,228.142 1812.06,229.237 1812.63,229.413 1813.2,228.557 1813.77,227.796 1814.33,225.83 1814.9,227.409 1815.47,227.812 1816.04,232.089 1816.61,230.676 1817.18,230.611 1817.74,229.282 1818.31,228.285 1818.88,231.618 1819.45,231.506 1820.02,232.297 1820.59,232.214 1821.15,231.994 1821.72,230.807 1822.29,228.652 1822.86,229.732 1823.43,228.88 1824,229.098 1824.56,228.143 1825.13,230.306 1825.7,231.592 1826.27,230.651 1826.84,228.736 1827.41,228.818 1827.97,227.651 1828.54,227.051 1829.11,228.215 1829.68,227.312 1830.25,228.662 1830.82,227.533 1831.39,227.724 1831.95,228.025 1832.52,228.094 1833.09,228.334 1833.66,228.381 1834.23,230.773 1834.8,231.739 1835.36,230.594 1835.93,232.58 1836.5,233.495 1837.07,233.087 1837.64,230.649 1838.21,231.572 1838.77,231.317 1839.34,231.354 1839.91,232.416 1840.48,230.068 1841.05,228.966 1841.62,230.046 1842.18,230.007 1842.75,225.748 1843.32,227.96 1843.89,229.098 1844.46,229.072 1845.03,229.194 1845.59,230.276 1846.16,232.483 1846.73,233.118 1847.3,232.754 1847.87,229.403 1848.44,227.147 1849,228.181 1849.57,227.067 1850.14,226.447 1850.71,227.835 1851.28,228.877 1851.85,226.77 1852.41,224.869 1852.98,225.277 1853.55,226.914 1854.12,228.116 1854.69,230.625 1855.26,231.59 1855.82,231.507 1856.39,231.469 1856.96,230.391 1857.53,227.155 1858.1,226.627 1858.67,228.228 1859.23,229.452 1859.8,228.435 1860.37,226.488 1860.94,225.695 1861.51,228.976 1862.08,230.329 1862.64,228.14 1863.21,226.34 1863.78,226.543 1864.35,226.979 1864.92,228.343 1865.49,229.494 1866.05,231.978 1866.62,229.877 1867.19,233.292 1867.76,236.089 1868.33,235.806 1868.9,235.515 1869.46,235.139 1870.03,233.805 1870.6,233.392 1871.17,233.315 1871.74,233.181 1872.31,236.948 1872.87,234.338 1873.44,236.312 1874.01,236.708 1874.58,235.175 1875.15,235.586 1875.72,234.894 1876.28,235.583 1876.85,233.196 1877.42,230.854 1877.99,227.584 1878.56,227.898 1879.13,227.066 1879.69,229.234 1880.26,228.271 1880.83,230.492 1881.4,230.375 1881.97,230.516 1882.54,231.421 1883.1,231.59 1883.67,233.414 1884.24,232.201 1884.81,231.096 1885.38,231.009 1885.95,229.72 1886.51,229.774 1887.08,229.684 1887.65,226.695 1888.22,223.844 1888.79,226.258 1889.36,225.574 1889.92,224.9 1890.49,224.993 1891.06,224.466 1891.63,223.902 1892.2,225.379 1892.77,227.658 1893.33,227.598 1893.9,226.776 1894.47,228.299 1895.04,227.222 1895.61,227.4 1896.18,228.686 1896.74,226.832 1897.31,226.118 1897.88,226.484 1898.45,228.899 1899.02,228.999 1899.59,229.184 1900.16,231.208 1900.72,230.345 1901.29,229.263 1901.86,229.284 1902.43,231.452 1903,230.465 1903.57,230.674 1904.13,229.672 1904.7,230.649 1905.27,233.705 1905.84,230.365 1906.41,230.2 1906.98,230.227 1907.54,231.261 1908.11,232.349 1908.68,235.319 1909.25,234.976 1909.82,232.686 1910.39,231.44 1910.95,231.276 1911.52,231.176 1912.09,231.055 1912.66,231.01 1913.23,231.079 1913.8,231.168 1914.36,231.33 1914.93,232.23 1915.5,233.108 1916.07,234.034 1916.64,231.574 1917.21,231.449 1917.77,231.503 1918.34,230.358 1918.91,229.123 1919.48,227.04 1920.05,227.288 1920.62,228.639 1921.18,225.78 1921.75,226.267 1922.32,227.773 1922.89,228.795 1923.46,227.696 1924.03,231.283 1924.59,231.239 1925.16,231.274 1925.73,230.153 1926.3,229.189 1926.87,229.138 1927.44,228.273 1928,228.459 1928.57,228.86 1929.14,227.048 1929.71,225.114 1930.28,225.394 1930.85,225.02 1931.41,226.434 1931.98,227.923 1932.55,228.092 1933.12,226.234 1933.69,224.472 1934.26,226.109 1934.82,226.458 1935.39,225.667 1935.96,226.157 1936.53,226.54 1937.1,228.852 1937.67,229.964 1938.23,229.036 1938.8,229.218 1939.37,227.138 1939.94,228.501 1940.51,227.803 1941.08,227.197 1941.64,227.42 1942.21,225.716 1942.78,225.05 1943.35,226.583 1943.92,225.834 1944.49,226.403 1945.05,227.811 1945.62,227.084 1946.19,228.547 1946.76,232.889 1947.33,232.873 1947.9,232.699 1948.46,232.787 1949.03,232.695 1949.6,232.782 1950.17,231.484 1950.74,233.533 1951.31,234.403 1951.87,235.239 1952.44,233.983 1953.01,236.829 1953.58,235.366 1954.15,234.947 1954.72,235.751 1955.28,236.416 1955.85,236.965 1956.42,237.697 1956.99,236.021 1957.56,234.616 1958.13,234.176 1958.69,233.826 1959.26,233.684 1959.83,233.53 1960.4,234.972 1960.97,233.455 1961.54,231.957 1962.1,230.569 1962.67,230.372 1963.24,228.278 1963.81,228.703 1964.38,226.849 1964.95,230.079 1965.51,230.076 1966.08,226.991 1966.65,227 1967.22,228.437 1967.79,229.576 1968.36,228.326 1968.92,232.654 1969.49,235.363 1970.06,234.005 1970.63,232.648 1971.2,233.498 1971.77,233.219 1972.34,232.929 1972.9,231.595 1973.47,231.375 1974.04,232.236 1974.61,233.141 1975.18,231.683 1975.75,231.489 1976.31,230.459 1976.88,230.038 1977.45,229.855 1978.02,228.854 1978.59,229.881 1979.16,228.706 1979.72,228.812 1980.29,229.909 1980.86,229.904 1981.43,231.069 1982,232.087 1982.57,231.943 1983.13,232.821 1983.7,233.813 1984.27,231.403 1984.84,232.405 1985.41,231.976 1985.98,230.77 1986.54,230.84 1987.11,229.948 1987.68,229.786 1988.25,228.004 1988.82,229.115 1989.39,227.185 1989.95,231.606 1990.52,231.488 1991.09,232.167 1991.66,231.022 1992.23,228.908 1992.8,230.28 1993.36,230.207 1993.93,231.39 1994.5,232.496 1995.07,232.254 1995.64,231.879 1996.21,230.616 1996.77,232.376 1997.34,232.211 1997.91,232.025 1998.48,229.96 1999.05,230.853 1999.62,229.864 2000.18,229.984 2000.75,228.84 2001.32,228.899 2001.89,229.222 2002.46,228.172 2003.03,229.483 2003.59,230.572 2004.16,231.698 2004.73,231.614 2005.3,231.531 2005.87,230.398 2006.44,232.564 2007,234.836 2007.57,232.364 2008.14,231.122 2008.71,231.869 2009.28,234.585 2009.85,235.429 2010.41,233.95 2010.98,232.346 2011.55,231.149 2012.12,233.067 2012.69,234.951 2013.26,233.497 2013.82,233.105 2014.39,232.874 2014.96,233.453 2015.53,233.182 2016.1,232.632 2016.67,234.486 2017.23,233.16 2017.8,232.872 2018.37,234.797 2018.94,233.439 2019.51,229.112 2020.08,228.974 2020.64,227.151 2021.21,225.382 2021.78,226.832 2022.35,226.922 2022.92,226.045 2023.49,225.269 2024.05,225.607 2024.62,227.01 2025.19,229.308 2025.76,227.169 2026.33,228.278 2026.9,230.476 2027.46,230.276 2028.03,230.11 2028.6,230.078 2029.17,230.919 2029.74,230.716 2030.31,230.647 2030.87,229.442 2031.44,230.618 2032.01,230.386 2032.58,230.357 2033.15,231.359 2033.72,228.382 2034.28,230.6 2034.85,231.472 2035.42,231.284 2035.99,231.346 2036.56,231.37 2037.13,231.227 2037.69,227.903 2038.26,228.015 2038.83,229.283 2039.4,227.123 2039.97,227.236 2040.54,226.105 2041.11,226.263 2041.67,226.778 2042.24,224.804 2042.81,223.2 2043.38,222.698 2043.95,224.126 2044.52,223.483 2045.08,223.831 2045.65,223.134 2046.22,223.509 2046.79,226.96 2047.36,226.026 2047.93,226.149 2048.49,227.483 2049.06,227.736 2049.63,228.996 2050.2,228.235 2050.77,229.371 2051.34,227.475 2051.9,228.545 2052.47,228.767 2053.04,231.68 2053.61,232.575 2054.18,235.44 2054.75,233.808 2055.31,233.471 2055.88,233.307 2056.45,232.004 2057.02,231.007 2057.59,229.977 2058.16,229.932 2058.72,228.002 2059.29,230.114 2059.86,230.074 2060.43,230.001 2061,232.172 2061.57,233.019 2062.13,232.617 2062.7,231.281 2063.27,228.059 2063.84,228.265 2064.41,226.66 2064.98,225.829 2065.54,227.294 2066.11,229.512 2066.68,232.636 2067.25,231.371 2067.82,231.413 2068.39,234.382 2068.95,234.938 2069.52,233.318 2070.09,234.051 2070.66,231.817 2071.23,232.751 2071.8,232.42 2072.36,233.291 2072.93,231.816 2073.5,231.712 2074.07,231.627 2074.64,231.597 2075.21,230.52 2075.77,227.507 2076.34,227.347 2076.91,228.457 2077.48,229.491 2078.05,230.661 2078.62,229.715 2079.18,231.687 2079.75,232.612 2080.32,233.44 2080.89,234.305 2081.46,232.737 2082.03,230.636 2082.59,230.621 2083.16,230.469 2083.73,229.23 2084.3,226.396 2084.87,226.541 2085.44,223.645 2086,225.031 2086.57,225.565 2087.14,226.998 2087.71,227.996 2088.28,227.087 2088.85,225.101 2089.41,227.592 2089.98,228.739 2090.55,228.818 2091.12,228.919 2091.69,228.04 2092.26,228.446 2092.82,227.407 2093.39,226.456 2093.96,226.669 2094.53,228.236 2095.1,226.331 2095.67,228.691 2096.23,225.952 2096.8,226.331 2097.37,226.602 2097.94,227.111 2098.51,226.288 2099.08,228.156 2099.64,225.238 2100.21,226.861 2100.78,226.365 2101.35,228.667 2101.92,230.069 2102.49,229.135 2103.05,230.254 2103.62,231.324 2104.19,231.237 2104.76,230.082 2105.33,231.087 2105.9,225.903 2106.46,227.181 2107.03,228.592 2107.6,229.973 2108.17,232.238 2108.74,232.301 2109.31,231.263 2109.87,230.136 2110.44,229.996 2111.01,229.923 2111.58,230.856 2112.15,230.899 2112.72,230.044 2113.29,229.924 2113.85,231.94 2114.42,232.974 2114.99,234.926 2115.56,232.857 2116.13,234.583 2116.7,232.425 2117.26,234.435 2117.83,236.111 2118.4,235.881 2118.97,233.641 2119.54,234.471 2120.11,233.927 2120.67,233.805 2121.24,232.637 2121.81,231.602 2122.38,230.479 2122.95,229.389 2123.52,233.756 2124.08,229.557 2124.65,228.641 2125.22,227.73 2125.79,230.927 2126.36,229.724 2126.93,231.772 2127.49,231.724 2128.06,228.452 2128.63,229.587 2129.2,230.655 2129.77,230.644 2130.34,230.682 2130.9,230.715 2131.47,229.644 2132.04,229.743 2132.61,232.09 2133.18,231.951 2133.75,231.873 2134.31,231.507 2134.88,230.467 2135.45,230.513 2136.02,229.646 2136.59,228.578 2137.16,228.604 2137.72,230.613 2138.29,229.639 2138.86,228.711 2139.43,227.652 2140,228.997 2140.57,229.044 2141.13,229.157 2141.7,228.984 2142.27,230.142 2142.84,229.793 2143.41,228.702 2143.98,230.059 2144.54,232.045 2145.11,230.767 2145.68,231.695 2146.25,229.634 2146.82,230.506 2147.39,230.34 2147.95,231.318 2148.52,231.014 2149.09,229.792 2149.66,229.862 2150.23,228.873 2150.8,229.851 2151.36,228.944 2151.93,229.948 2152.5,232.104 2153.07,230.926 2153.64,230.569 2154.21,231.595 2154.77,231.452 2155.34,229.188 2155.91,229.4 2156.48,231.755 2157.05,230.766 2157.62,228.616 2158.18,228.783 2158.75,228.016 2159.32,230.368 2159.89,230.38 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip810)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip810)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip810)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip810)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.035 ± 0.021\n  with uncertainty of ± 0.0019071521987470772\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01738 ± (0.00301258, 0.00317626) (MC)\n  95% confidence interval: [-4.02375, -4.01127]) (MC)\n  linear error propagation: -4.0179 ± 0.00325925\n  |δ_y| = |0.0023248| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.017383276943612, val_l = 0.0063624527462042835, val_u = 0.0061169059199857045)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip840\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip840)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip841\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip840)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip842\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1151.58 2211.02,1151.58 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,991.382 2211.02,991.382 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,831.182 2211.02,831.182 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,670.982 2211.02,670.982 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,510.783 2211.02,510.783 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,350.583 2211.02,350.583 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,190.383 2211.02,190.383 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1151.58 365.751,1151.58 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,991.382 365.751,991.382 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,831.182 365.751,831.182 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,670.982 365.751,670.982 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,510.783 365.751,510.783 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,350.583 365.751,350.583 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,190.383 365.751,190.383 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M298.909 1137.38 Q295.298 1137.38 293.469 1140.95 Q291.664 1144.49 291.664 1151.62 Q291.664 1158.72 293.469 1162.29 Q295.298 1165.83 298.909 1165.83 Q302.543 1165.83 304.349 1162.29 Q306.177 1158.72 306.177 1151.62 Q306.177 1144.49 304.349 1140.95 Q302.543 1137.38 298.909 1137.38 M298.909 1133.68 Q304.719 1133.68 307.775 1138.28 Q310.853 1142.87 310.853 1151.62 Q310.853 1160.34 307.775 1164.95 Q304.719 1169.53 298.909 1169.53 Q293.099 1169.53 290.02 1164.95 Q286.964 1160.34 286.964 1151.62 Q286.964 1142.87 290.02 1138.28 Q293.099 1133.68 298.909 1133.68 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M259.557 1004.73 L267.196 1004.73 L267.196 978.362 L258.886 980.028 L258.886 975.769 L267.15 974.102 L271.826 974.102 L271.826 1004.73 L279.465 1004.73 L279.465 1008.66 L259.557 1008.66 L259.557 1004.73 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M298.909 977.181 Q295.298 977.181 293.469 980.746 Q291.664 984.288 291.664 991.417 Q291.664 998.524 293.469 1002.09 Q295.298 1005.63 298.909 1005.63 Q302.543 1005.63 304.349 1002.09 Q306.177 998.524 306.177 991.417 Q306.177 984.288 304.349 980.746 Q302.543 977.181 298.909 977.181 M298.909 973.477 Q304.719 973.477 307.775 978.084 Q310.853 982.667 310.853 991.417 Q310.853 1000.14 307.775 1004.75 Q304.719 1009.33 298.909 1009.33 Q293.099 1009.33 290.02 1004.75 Q286.964 1000.14 286.964 991.417 Q286.964 982.667 290.02 978.084 Q293.099 973.477 298.909 973.477 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M262.775 844.527 L279.094 844.527 L279.094 848.462 L257.15 848.462 L257.15 844.527 Q259.812 841.773 264.395 837.143 Q269.002 832.49 270.182 831.148 Q272.428 828.625 273.307 826.888 Q274.21 825.129 274.21 823.439 Q274.21 820.685 272.266 818.949 Q270.344 817.213 267.242 817.213 Q265.043 817.213 262.59 817.976 Q260.159 818.74 257.381 820.291 L257.381 815.569 Q260.205 814.435 262.659 813.856 Q265.113 813.277 267.15 813.277 Q272.52 813.277 275.715 815.963 Q278.909 818.648 278.909 823.138 Q278.909 825.268 278.099 827.189 Q277.312 829.088 275.205 831.68 Q274.627 832.351 271.525 835.569 Q268.423 838.763 262.775 844.527 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M298.909 816.981 Q295.298 816.981 293.469 820.546 Q291.664 824.088 291.664 831.217 Q291.664 838.324 293.469 841.888 Q295.298 845.43 298.909 845.43 Q302.543 845.43 304.349 841.888 Q306.177 838.324 306.177 831.217 Q306.177 824.088 304.349 820.546 Q302.543 816.981 298.909 816.981 M298.909 813.277 Q304.719 813.277 307.775 817.884 Q310.853 822.467 310.853 831.217 Q310.853 839.944 307.775 844.55 Q304.719 849.134 298.909 849.134 Q293.099 849.134 290.02 844.55 Q286.964 839.944 286.964 831.217 Q286.964 822.467 290.02 817.884 Q293.099 813.277 298.909 813.277 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M272.914 669.628 Q276.27 670.346 278.145 672.614 Q280.043 674.883 280.043 678.216 Q280.043 683.332 276.525 686.133 Q273.006 688.934 266.525 688.934 Q264.349 688.934 262.034 688.494 Q259.742 688.077 257.289 687.221 L257.289 682.707 Q259.233 683.841 261.548 684.42 Q263.863 684.999 266.386 684.999 Q270.784 684.999 273.076 683.263 Q275.39 681.526 275.39 678.216 Q275.39 675.161 273.238 673.448 Q271.108 671.712 267.289 671.712 L263.261 671.712 L263.261 667.869 L267.474 667.869 Q270.923 667.869 272.752 666.503 Q274.58 665.114 274.58 662.522 Q274.58 659.86 272.682 658.448 Q270.807 657.013 267.289 657.013 Q265.367 657.013 263.168 657.429 Q260.969 657.846 258.33 658.726 L258.33 654.559 Q260.992 653.818 263.307 653.448 Q265.645 653.078 267.705 653.078 Q273.029 653.078 276.131 655.508 Q279.233 657.915 279.233 662.036 Q279.233 664.906 277.59 666.897 Q275.946 668.864 272.914 669.628 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M298.909 656.781 Q295.298 656.781 293.469 660.346 Q291.664 663.888 291.664 671.017 Q291.664 678.124 293.469 681.688 Q295.298 685.23 298.909 685.23 Q302.543 685.23 304.349 681.688 Q306.177 678.124 306.177 671.017 Q306.177 663.888 304.349 660.346 Q302.543 656.781 298.909 656.781 M298.909 653.078 Q304.719 653.078 307.775 657.684 Q310.853 662.267 310.853 671.017 Q310.853 679.744 307.775 684.35 Q304.719 688.934 298.909 688.934 Q293.099 688.934 290.02 684.35 Q286.964 679.744 286.964 671.017 Q286.964 662.267 290.02 657.684 Q293.099 653.078 298.909 653.078 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M271.594 497.577 L259.789 516.026 L271.594 516.026 L271.594 497.577 M270.367 493.503 L276.247 493.503 L276.247 516.026 L281.177 516.026 L281.177 519.914 L276.247 519.914 L276.247 528.063 L271.594 528.063 L271.594 519.914 L255.992 519.914 L255.992 515.401 L270.367 493.503 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M298.909 496.581 Q295.298 496.581 293.469 500.146 Q291.664 503.688 291.664 510.817 Q291.664 517.924 293.469 521.489 Q295.298 525.03 298.909 525.03 Q302.543 525.03 304.349 521.489 Q306.177 517.924 306.177 510.817 Q306.177 503.688 304.349 500.146 Q302.543 496.581 298.909 496.581 M298.909 492.878 Q304.719 492.878 307.775 497.484 Q310.853 502.067 310.853 510.817 Q310.853 519.544 307.775 524.151 Q304.719 528.734 298.909 528.734 Q293.099 528.734 290.02 524.151 Q286.964 519.544 286.964 510.817 Q286.964 502.067 290.02 497.484 Q293.099 492.878 298.909 492.878 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M258.793 333.303 L277.15 333.303 L277.15 337.238 L263.076 337.238 L263.076 345.71 Q264.094 345.363 265.113 345.201 Q266.131 345.016 267.15 345.016 Q272.937 345.016 276.316 348.187 Q279.696 351.358 279.696 356.775 Q279.696 362.353 276.224 365.455 Q272.752 368.534 266.432 368.534 Q264.256 368.534 261.988 368.164 Q259.742 367.793 257.335 367.052 L257.335 362.353 Q259.418 363.488 261.641 364.043 Q263.863 364.599 266.34 364.599 Q270.344 364.599 272.682 362.492 Q275.02 360.386 275.02 356.775 Q275.02 353.164 272.682 351.057 Q270.344 348.951 266.34 348.951 Q264.465 348.951 262.59 349.367 Q260.738 349.784 258.793 350.664 L258.793 333.303 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M298.909 336.381 Q295.298 336.381 293.469 339.946 Q291.664 343.488 291.664 350.617 Q291.664 357.724 293.469 361.289 Q295.298 364.83 298.909 364.83 Q302.543 364.83 304.349 361.289 Q306.177 357.724 306.177 350.617 Q306.177 343.488 304.349 339.946 Q302.543 336.381 298.909 336.381 M298.909 332.678 Q304.719 332.678 307.775 337.284 Q310.853 341.867 310.853 350.617 Q310.853 359.344 307.775 363.951 Q304.719 368.534 298.909 368.534 Q293.099 368.534 290.02 363.951 Q286.964 359.344 286.964 350.617 Q286.964 341.867 290.02 337.284 Q293.099 332.678 298.909 332.678 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M269.326 188.519 Q266.178 188.519 264.326 190.672 Q262.497 192.825 262.497 196.575 Q262.497 200.302 264.326 202.478 Q266.178 204.63 269.326 204.63 Q272.474 204.63 274.303 202.478 Q276.154 200.302 276.154 196.575 Q276.154 192.825 274.303 190.672 Q272.474 188.519 269.326 188.519 M278.608 173.867 L278.608 178.126 Q276.849 177.292 275.043 176.853 Q273.261 176.413 271.502 176.413 Q266.872 176.413 264.418 179.538 Q261.988 182.663 261.641 188.982 Q263.006 186.968 265.066 185.904 Q267.127 184.816 269.603 184.816 Q274.812 184.816 277.821 187.987 Q280.853 191.135 280.853 196.575 Q280.853 201.899 277.705 205.116 Q274.557 208.334 269.326 208.334 Q263.33 208.334 260.159 203.751 Q256.988 199.144 256.988 190.417 Q256.988 182.223 260.877 177.362 Q264.766 172.478 271.316 172.478 Q273.076 172.478 274.858 172.825 Q276.664 173.172 278.608 173.867 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M298.909 176.181 Q295.298 176.181 293.469 179.746 Q291.664 183.288 291.664 190.417 Q291.664 197.524 293.469 201.089 Q295.298 204.63 298.909 204.63 Q302.543 204.63 304.349 201.089 Q306.177 197.524 306.177 190.417 Q306.177 183.288 304.349 179.746 Q302.543 176.181 298.909 176.181 M298.909 172.478 Q304.719 172.478 307.775 177.084 Q310.853 181.667 310.853 190.417 Q310.853 199.144 307.775 203.751 Q304.719 208.334 298.909 208.334 Q293.099 208.334 290.02 203.751 Q286.964 199.144 286.964 190.417 Q286.964 181.667 290.02 177.084 Q293.099 172.478 298.909 172.478 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip842)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1033.54 400.199,925.1 400.786,825.6 401.372,734.441 401.958,651.069 402.545,688.421 403.131,611.742 403.718,547.215 404.304,483.331 404.891,428.542 405.477,464.605 406.063,414.673 406.65,370.884 407.236,330.554 407.823,295.763 408.409,263.829 408.995,296.574 409.582,322.99 410.168,295.281 410.755,318.826 411.341,294.712 411.927,273.79 412.514,257.628 413.1,242.354 413.687,230.191 414.273,219.895 414.86,244.228 415.446,237.462 416.032,233.658 416.619,256.895 417.205,280.675 417.792,281.152 418.378,303.468 418.964,305.617 419.551,328.64 420.137,366.918 420.724,371.612 421.31,376.442 421.896,397.17 422.483,416.446 423.069,436.697 423.656,455.768 424.242,463.533 424.829,472.041 425.415,480.147 426.001,489.694 426.588,499.296 427.174,509.195 427.761,527.595 428.347,537.496 428.933,555.987 429.52,573.247 430.106,590.834 430.693,601.67 431.279,618.195 431.865,635.667 432.452,657.602 433.038,678.572 433.625,704.68 434.211,718.955 434.798,738.327 435.384,751.762 435.97,759.844 436.557,773.106 437.143,798.443 437.73,814.254 438.316,829.917 438.902,837.066 439.489,851.412 440.075,861.496 440.662,868.132 441.248,878.062 441.835,888.058 442.421,900.976 443.007,916.709 443.594,925.845 444.18,934.196 444.767,948.726 445.353,962.584 445.939,970.32 446.526,980.443 447.112,984.898 447.699,992.12 448.285,1004.2 448.871,1018.72 449.458,1029.69 450.044,1035.55 450.631,1041.44 451.217,1044.49 451.804,1052.39 452.39,1062.63 452.976,1065.18 453.563,1070.38 454.149,1077.94 454.736,1085.5 455.322,1090.27 455.908,1094.94 456.495,1099.77 457.081,1106.37 457.668,1110.49 458.254,1115.03 458.84,1121.31 459.427,1127.27 460.013,1131.19 460.6,1138.62 461.186,1142.13 461.773,1145.58 462.359,1150.82 462.945,1161.27 463.532,1165.88 464.118,1168.51 464.705,1171.17 465.291,1173.81 465.877,1176.47 466.464,1179.06 467.05,1184.78 467.637,1185.32 468.223,1185.68 468.809,1189.62 469.396,1190.21 469.982,1195.51 470.569,1195.73 471.155,1196.15 471.742,1196.28 472.328,1199.57 472.914,1200.04 473.501,1200.44 474.087,1202.12 474.674,1204.33 475.26,1206.3 475.846,1209.59 476.433,1209.78 477.019,1211.46 477.606,1214.47 478.192,1214.72 478.778,1216.39 479.365,1217.67 479.951,1217.68 480.538,1217.78 481.124,1218.02 481.711,1219.46 482.297,1222.46 482.883,1223.76 483.47,1221.98 484.056,1225.3 484.643,1220.71 485.229,1222.32 485.815,1222.37 486.402,1222.51 486.988,1221.53 487.575,1224.86 488.161,1226.43 488.748,1228.24 489.334,1225.41 489.92,1225.58 490.507,1226.97 491.093,1224.21 491.68,1224.41 492.266,1225.97 492.852,1228.97 493.439,1233.07 494.025,1237.44 494.612,1239.92 495.198,1240.83 495.784,1241.67 496.371,1245.5 496.957,1249.13 497.544,1248.4 498.13,1249.13 498.717,1246.92 499.303,1248.91 499.889,1244.32 500.476,1243.64 501.062,1244.34 501.649,1245.22 502.235,1243.16 502.821,1245.44 503.408,1246.34 503.994,1248.58 504.581,1249.06 505.167,1248.57 505.753,1250.53 506.34,1248.37 506.926,1247.84 507.513,1245.87 508.099,1243.78 508.686,1246.06 509.272,1248.17 509.858,1245.83 510.445,1246.74 511.031,1246.18 511.618,1244.34 512.204,1245.26 512.79,1247.36 513.377,1246.67 513.963,1246.05 514.55,1246.96 515.136,1246.31 515.722,1245.45 516.309,1248.92 516.895,1249.37 517.482,1250.01 518.068,1248.23 518.655,1247.91 519.241,1246.98 519.827,1243.7 520.414,1243.17 521,1241.43 521.587,1241.23 522.173,1239.71 522.759,1239.45 523.346,1243.29 523.932,1243.19 524.519,1245.33 525.105,1246.12 525.691,1243.87 526.278,1243.46 526.864,1243.05 527.451,1242.49 528.037,1243.76 528.624,1243.59 529.21,1243.04 529.796,1241.68 530.383,1241.21 530.969,1243.45 531.556,1242.99 532.142,1242.62 532.728,1242.47 533.315,1244.66 533.901,1248.1 534.488,1247.45 535.074,1247.98 535.661,1250 536.247,1246.71 536.833,1246.25 537.42,1247.17 538.006,1248.1 538.593,1247.35 539.179,1245.42 539.765,1248.92 540.352,1247.96 540.938,1245.84 541.525,1248.09 542.111,1247.2 542.697,1246.46 543.284,1247.15 543.87,1248.03 544.457,1247.33 545.043,1246.72 545.63,1248.54 546.216,1249.11 546.802,1248.4 547.389,1247.8 547.975,1245.71 548.562,1243.67 549.148,1241.69 549.734,1239.78 550.321,1239.45 550.907,1241.92 551.494,1241.6 552.08,1242.68 552.666,1244.81 553.253,1244.44 553.839,1242.47 554.426,1244.7 555.012,1244 555.599,1243.42 556.185,1242.98 556.771,1244.97 557.358,1245.91 557.944,1246.38 558.531,1245.59 559.117,1247.48 559.703,1246.76 560.29,1244.92 560.876,1244.42 561.463,1245.17 562.049,1244.31 562.635,1243.83 563.222,1245.82 563.808,1243.85 564.395,1243.04 564.981,1242.58 565.568,1243.29 566.154,1242.61 566.74,1243.38 567.327,1244 567.913,1244.58 568.5,1243.72 569.086,1244.23 569.672,1247.11 570.259,1248.92 570.845,1246.44 571.432,1246.79 572.018,1246.02 572.605,1246.45 573.191,1245.73 573.777,1243.58 574.364,1240.26 574.95,1238.08 575.537,1241.34 576.123,1243.53 576.709,1241.53 577.296,1243.62 577.882,1242.77 578.469,1242.46 579.055,1240.36 579.641,1241.06 580.228,1240.59 580.814,1241.32 581.401,1239.26 581.987,1236.02 582.574,1235.62 583.16,1236.7 583.746,1237.45 584.333,1238.55 584.919,1239.39 585.506,1238.78 586.092,1242.1 586.678,1241.39 587.265,1239.44 587.851,1238.69 588.438,1239.56 589.024,1238.7 589.61,1242.4 590.197,1237.48 590.783,1235.84 591.37,1234.05 591.956,1233.52 592.543,1230.87 593.129,1232.33 593.715,1230.8 594.302,1233.04 594.888,1231.5 595.475,1233.83 596.061,1234.73 596.647,1235.79 597.234,1235.47 597.82,1233.75 598.407,1234.69 598.993,1235.74 599.579,1233.56 600.166,1231.66 600.752,1231.62 601.339,1231.36 601.925,1229.88 602.512,1229.61 603.098,1229.41 603.684,1228.08 604.271,1228.17 604.857,1225.47 605.444,1224.48 606.03,1222.97 606.616,1223.19 607.203,1221.83 607.789,1222.09 608.376,1222.34 608.962,1224.86 609.548,1223.65 610.135,1227.76 610.721,1228.82 611.308,1227.43 611.894,1225.68 612.481,1224.4 613.067,1225.86 613.653,1225.86 614.24,1227.05 614.826,1231.26 615.413,1229.69 615.999,1230.83 616.585,1230.81 617.172,1226.78 617.758,1225.69 618.345,1221.85 618.931,1224.57 619.518,1223.38 620.104,1224.46 620.69,1223.25 621.277,1223.54 621.863,1224.97 622.45,1225.22 623.036,1224.07 623.622,1224.31 624.209,1224.5 624.795,1224.65 625.382,1224.84 625.968,1224.95 626.554,1224.92 627.141,1222.22 627.727,1219.87 628.314,1221.59 628.9,1222.04 629.487,1224.87 630.073,1223.7 630.659,1226.32 631.246,1228.76 631.832,1228.78 632.419,1228.87 633.005,1228.84 633.591,1227.31 634.178,1228.61 634.764,1229.77 635.351,1229.61 635.937,1230.64 636.523,1226.43 637.11,1231.55 637.696,1232.47 638.283,1233.27 638.869,1232.73 639.456,1232 640.042,1232.01 640.628,1232.9 641.215,1235.31 641.801,1237.7 642.388,1235.54 642.974,1233.56 643.56,1232.8 644.147,1230.85 644.733,1226.69 645.32,1226.44 645.906,1226.2 646.492,1225.89 647.079,1225.93 647.665,1223 648.252,1224.19 648.838,1223.9 649.425,1225.12 650.011,1223.71 650.597,1225.03 651.184,1226.15 651.77,1225.98 652.357,1225.68 652.943,1227.03 653.529,1229.51 654.116,1230.49 654.702,1232.93 655.289,1236.14 655.875,1235.71 656.462,1237.79 657.048,1238.22 657.634,1237.41 658.221,1238.09 658.807,1235.77 659.394,1232.53 659.98,1229.71 660.566,1229.38 661.153,1227.61 661.739,1227.39 662.326,1228.62 662.912,1228.13 663.498,1228.97 664.085,1227.33 664.671,1233.68 665.258,1232.98 665.844,1233.97 666.431,1232.25 667.017,1231.78 667.603,1232.8 668.19,1232.33 668.776,1230.67 669.363,1230.22 669.949,1232.27 670.535,1233.38 671.122,1231.61 671.708,1231.13 672.295,1230.84 672.881,1230.64 673.467,1230.11 674.054,1229.71 674.64,1230.75 675.227,1230.29 675.813,1231.29 676.4,1232.11 676.986,1231.55 677.572,1228.3 678.159,1227.93 678.745,1228.94 679.332,1227.09 679.918,1225.57 680.504,1225.25 681.091,1224.3 681.677,1224.03 682.264,1223.81 682.85,1223.73 683.436,1223.44 684.023,1222.19 684.609,1222.31 685.196,1219.83 685.782,1215.94 686.369,1216.38 686.955,1215.29 687.541,1216.87 688.128,1215.81 688.714,1220.07 689.301,1221.76 689.887,1220.33 690.473,1223.17 691.06,1220.47 691.646,1221.73 692.233,1223.3 692.819,1223.2 693.405,1224.5 693.992,1226.88 694.578,1226.65 695.165,1227.47 695.751,1226 696.338,1225.63 696.924,1222.66 697.51,1223.92 698.097,1222.51 698.683,1223.68 699.27,1224.59 699.856,1224.54 700.442,1225.67 701.029,1225.21 701.615,1226.33 702.202,1227.67 702.788,1226.11 703.375,1224.54 703.961,1221.93 704.547,1224.57 705.134,1225.64 705.72,1222.67 706.307,1222.45 706.893,1222.32 707.479,1221.21 708.066,1219.89 708.652,1218.79 709.239,1217.66 709.825,1216.48 710.411,1218.13 710.998,1214.44 711.584,1217.12 712.171,1215.91 712.757,1216.21 713.344,1212.7 713.93,1214.42 714.516,1213.58 715.103,1213.76 715.689,1215.76 716.276,1215.77 716.862,1217.44 717.448,1220.26 718.035,1225.26 718.621,1225.07 719.208,1223.68 719.794,1223.34 720.38,1223.16 720.967,1221.78 721.553,1217.86 722.14,1220.66 722.726,1220.61 723.313,1220.52 723.899,1221.91 724.485,1223.28 725.072,1218.98 725.658,1221.74 726.245,1221.67 726.831,1221.83 727.417,1225.48 728.004,1223.93 728.59,1223.6 729.177,1223.42 729.763,1223.17 730.349,1221.72 730.936,1221.65 731.522,1221.5 732.109,1221.53 732.695,1221.58 733.282,1220.14 733.868,1222.73 734.454,1221.29 735.041,1217.44 735.627,1218.85 736.214,1221.64 736.8,1221.58 737.386,1224.42 737.973,1221.35 738.559,1221.36 739.146,1222.46 739.732,1223.89 740.318,1224.69 740.905,1223.31 741.491,1226.96 742.078,1231.49 742.664,1228.49 743.251,1230.65 743.837,1230.09 744.423,1229.52 745.01,1230.25 745.596,1225.88 746.183,1226.93 746.769,1223.96 747.355,1222.77 747.942,1222.45 748.528,1220.83 749.115,1221.97 749.701,1221.76 750.288,1223.01 750.874,1218.86 751.46,1219.02 752.047,1219.09 752.633,1221.87 753.22,1224.25 753.806,1225.34 754.392,1227.74 754.979,1229.89 755.565,1228.03 756.152,1231.45 756.738,1229.64 757.324,1230.31 757.911,1229.64 758.497,1226.63 759.084,1226.13 759.67,1221.6 760.257,1219.23 760.843,1217.96 761.429,1216.82 762.016,1218.28 762.602,1218.38 763.189,1218.53 763.775,1219.57 764.361,1219.87 764.948,1218.82 765.534,1217.57 766.121,1220.12 766.707,1220.17 767.293,1217.59 767.88,1218.86 768.466,1219.13 769.053,1219.21 769.639,1221.61 770.226,1220.1 770.812,1218.87 771.398,1217.53 771.985,1216.4 772.571,1214.04 773.158,1216.97 773.744,1217.28 774.33,1216.12 774.917,1219.1 775.503,1220.46 776.09,1223.01 776.676,1222.79 777.262,1219.89 777.849,1219.92 778.435,1219.71 779.022,1218.4 779.608,1218.59 780.195,1218.72 780.781,1218.77 781.367,1220.16 781.954,1220.21 782.54,1222.64 783.127,1222.53 783.713,1222.36 784.299,1219.53 784.886,1219.53 785.472,1220.78 786.059,1217.94 786.645,1215.1 787.232,1214.03 787.818,1212.95 788.404,1210.8 788.991,1211.2 789.577,1212.74 790.164,1212.95 790.75,1214.46 791.336,1218.76 791.923,1220.24 792.509,1221.65 793.096,1218.97 793.682,1218.88 794.268,1220.47 794.855,1218.02 795.441,1218.15 796.028,1217.1 796.614,1218.62 797.201,1219.79 797.787,1215.72 798.373,1217.22 798.96,1217.46 799.546,1221.41 800.133,1219.99 800.719,1218.34 801.305,1213.11 801.892,1212.12 802.478,1212.44 803.065,1212.76 803.651,1210.53 804.237,1210.86 804.824,1212.54 805.41,1214.35 805.997,1214.39 806.583,1213.33 807.17,1215.12 807.756,1213.99 808.342,1212.98 808.929,1212.23 809.515,1212.37 810.102,1212.88 810.688,1213.5 811.274,1213.84 811.861,1215.77 812.447,1215.69 813.034,1215.78 813.62,1217.13 814.206,1214.64 814.793,1214.84 815.379,1213.42 815.966,1220.15 816.552,1221.64 817.139,1222.86 817.725,1219.85 818.311,1219.78 818.898,1218.71 819.484,1219.91 820.071,1218.41 820.657,1221.12 821.243,1220.94 821.83,1224.74 822.416,1224.35 823.003,1223.96 823.589,1221.09 824.175,1221.09 824.762,1220.96 825.348,1218.25 825.935,1218.54 826.521,1215.96 827.108,1216.03 827.694,1215.93 828.28,1216.11 828.867,1214.92 829.453,1215.15 830.04,1215.74 830.626,1215.99 831.212,1216.11 831.799,1217.54 832.385,1217.75 832.972,1214.07 833.558,1215.62 834.145,1214.69 834.731,1216.07 835.317,1216.07 835.904,1217.5 836.49,1217.49 837.077,1214.78 837.663,1213.85 838.249,1216.64 838.836,1216.62 839.422,1217.95 840.009,1216.57 840.595,1217.9 841.181,1217.03 841.768,1215.8 842.354,1215.9 842.941,1217.28 843.527,1217.36 844.114,1217.6 844.7,1217.78 845.286,1219.17 845.873,1219.17 846.459,1221.92 847.046,1223.1 847.632,1221.55 848.218,1221.21 848.805,1222.5 849.391,1223.6 849.978,1222.98 850.564,1222.64 851.15,1223.79 851.737,1225.83 852.323,1225.38 852.91,1226.3 853.496,1226.1 854.083,1223.13 854.669,1225.44 855.255,1225.13 855.842,1224.96 856.428,1224.5 857.015,1224.17 857.601,1224.91 858.187,1224.67 858.774,1222.96 859.36,1222.46 859.947,1223.45 860.533,1223.4 861.119,1221.89 861.706,1222.9 862.292,1219.99 862.879,1219.82 863.465,1219.84 864.052,1218.66 864.638,1217.42 865.224,1220.15 865.811,1217.48 866.397,1216.15 866.984,1217.53 867.57,1217.57 868.156,1217.7 868.743,1217.71 869.329,1218.79 869.916,1218.67 870.502,1218.76 871.089,1221.23 871.675,1221.13 872.261,1220.69 872.848,1223.15 873.434,1224.27 874.021,1221.75 874.607,1221.48 875.193,1221.38 875.78,1217.11 876.366,1217.25 876.953,1217.59 877.539,1218.84 878.125,1223.76 878.712,1223.55 879.298,1223.12 879.885,1220 880.471,1222.38 881.058,1222.01 881.644,1221.39 882.23,1223.89 882.817,1223.16 883.403,1224.55 883.99,1223.96 884.576,1223.87 885.162,1222.07 885.749,1224.15 886.335,1223.48 886.922,1224.18 887.508,1225.08 888.094,1225.94 888.681,1225.14 889.267,1223.46 889.854,1224.92 890.44,1224.56 891.027,1224.35 891.613,1225.11 892.199,1224.53 892.786,1222.98 893.372,1221.68 893.959,1221.58 894.545,1220.34 895.131,1216.17 895.718,1216.18 896.304,1216.13 896.891,1214.72 897.477,1219.04 898.063,1221.44 898.65,1221.33 899.236,1219.81 899.823,1218.27 900.409,1220.89 900.996,1218.26 901.582,1218.12 902.168,1217.93 902.755,1217.91 903.341,1214.06 903.928,1212.91 904.514,1210.58 905.1,1213.72 905.687,1216.39 906.273,1215.33 906.86,1216.41 907.446,1217.86 908.032,1220.13 908.619,1222.48 909.205,1222.08 909.792,1220.65 910.378,1219.34 910.965,1217.9 911.551,1220.73 912.137,1221.63 912.724,1221.51 913.31,1223.77 913.897,1222.33 914.483,1220.81 915.069,1222.15 915.656,1222.89 916.242,1223.98 916.829,1222.44 917.415,1221.06 918.002,1222.25 918.588,1223.23 919.174,1221.55 919.761,1221.09 920.347,1220.78 920.934,1217.64 921.52,1218.95 922.106,1215.14 922.693,1216.58 923.279,1219.12 923.866,1218.88 924.452,1217.55 925.038,1217.59 925.625,1214.8 926.211,1213.39 926.798,1213.41 927.384,1212.26 927.971,1209.97 928.557,1210.5 929.143,1209.46 929.73,1207.33 930.316,1209.26 930.903,1211.23 931.489,1210.37 932.075,1208.08 932.662,1208.98 933.248,1209.32 933.835,1209.7 934.421,1211.49 935.007,1210.63 935.594,1208.27 936.18,1210.15 936.767,1212.95 937.353,1210.53 937.94,1212.23 938.526,1213.89 939.112,1214.2 939.699,1214.36 940.285,1214.59 940.872,1215.88 941.458,1215.97 942.044,1214.66 942.631,1214.92 943.217,1213.98 943.804,1211.45 944.39,1211.58 944.976,1213.48 945.563,1213.64 946.149,1211.29 946.736,1211.38 947.322,1211.65 947.909,1211.9 948.495,1211.99 949.081,1212.74 949.668,1214.4 950.254,1214.53 950.841,1214.78 951.427,1214.83 952.013,1215 952.6,1216.45 953.186,1216.48 953.773,1219.16 954.359,1218 954.945,1216.62 955.532,1215.67 956.118,1214.49 956.705,1214.57 957.291,1218.62 957.878,1221.03 958.464,1223.57 959.05,1223.3 959.637,1221.77 960.223,1220.29 960.81,1219.79 961.396,1222.45 961.982,1220.93 962.569,1219.35 963.155,1220.47 963.742,1221.63 964.328,1221.18 964.915,1219.59 965.501,1218.17 966.087,1218.02 966.674,1216.88 967.26,1218.3 967.847,1218.34 968.433,1217.05 969.019,1218.43 969.606,1217.27 970.192,1218.45 970.779,1215.54 971.365,1215.86 971.951,1216.25 972.538,1215.12 973.124,1213.95 973.711,1216.82 974.297,1218.2 974.884,1215.42 975.47,1215.56 976.056,1214.31 976.643,1214.47 977.229,1215.93 977.816,1217.15 978.402,1216.98 978.988,1218.28 979.575,1219.4 980.161,1219.27 980.748,1218.91 981.334,1221.45 981.92,1223.83 982.507,1223.73 983.093,1219.45 983.68,1216.51 984.266,1215.12 984.853,1220.43 985.439,1221.73 986.025,1221.32 986.612,1221.05 987.198,1222.08 987.785,1217.92 988.371,1214.22 988.957,1217.09 989.544,1215.75 990.13,1217.23 990.717,1219.99 991.303,1218.9 991.889,1220.05 992.476,1218.65 993.062,1218.31 993.649,1219.76 994.235,1217.02 994.822,1216.89 995.408,1215.7 995.994,1215.87 996.581,1216.01 997.167,1216.08 997.754,1213.17 998.34,1213.39 998.926,1213.44 999.513,1213.84 1000.1,1212.77 1000.69,1212.94 1001.27,1213.21 1001.86,1214.47 1002.44,1214.77 1003.03,1213.29 1003.62,1216.15 1004.2,1217.83 1004.79,1213.73 1005.38,1215.42 1005.96,1216.65 1006.55,1216.59 1007.14,1217.85 1007.72,1217.97 1008.31,1219.03 1008.9,1218.9 1009.48,1220.18 1010.07,1222.6 1010.65,1222.27 1011.24,1220.86 1011.83,1219.14 1012.41,1220.32 1013,1220.17 1013.59,1219.96 1014.17,1219.88 1014.76,1218.2 1015.35,1219.64 1015.93,1222.03 1016.52,1223.06 1017.11,1220.03 1017.69,1219.69 1018.28,1219.26 1018.86,1217.76 1019.45,1218.83 1020.04,1217.45 1020.62,1217.48 1021.21,1216.39 1021.8,1216.38 1022.38,1215.29 1022.97,1217.62 1023.56,1214.88 1024.14,1209.62 1024.73,1211.17 1025.32,1212.44 1025.9,1211.45 1026.49,1208.96 1027.07,1209.54 1027.66,1211.03 1028.25,1213.86 1028.83,1214.09 1029.42,1215.23 1030.01,1215.27 1030.59,1213.82 1031.18,1211.33 1031.77,1209.18 1032.35,1212.31 1032.94,1214.16 1033.52,1214.61 1034.11,1214.63 1034.7,1213.59 1035.28,1211.06 1035.87,1208.69 1036.46,1209.04 1037.04,1210.82 1037.63,1209.86 1038.22,1207.39 1038.8,1206.53 1039.39,1204.45 1039.98,1205.17 1040.56,1208.56 1041.15,1207.57 1041.73,1208.27 1042.32,1211.12 1042.91,1211.49 1043.49,1207.68 1044.08,1209.37 1044.67,1207.19 1045.25,1210.49 1045.84,1208.21 1046.43,1208.78 1047.01,1208.02 1047.6,1208.45 1048.19,1209.02 1048.77,1209.51 1049.36,1209.84 1049.94,1210.23 1050.53,1209.12 1051.12,1209.61 1051.7,1210.03 1052.29,1210.15 1052.88,1216.78 1053.46,1214.04 1054.05,1216.74 1054.64,1219.32 1055.22,1217.83 1055.81,1218.87 1056.39,1218.46 1056.98,1218.5 1057.57,1215.48 1058.15,1215.56 1058.74,1217.08 1059.33,1219.51 1059.91,1218.04 1060.5,1219.44 1061.09,1220.91 1061.67,1220.89 1062.26,1220.77 1062.85,1224.62 1063.43,1224.26 1064.02,1222.76 1064.6,1223.77 1065.19,1223.54 1065.78,1220.84 1066.36,1222.17 1066.95,1222.89 1067.54,1223.78 1068.12,1224.36 1068.71,1223.78 1069.3,1228.71 1069.88,1226.75 1070.47,1224.99 1071.06,1225.93 1071.64,1224.26 1072.23,1221.41 1072.81,1219.61 1073.4,1220.71 1073.99,1218.1 1074.57,1215.25 1075.16,1215.14 1075.75,1213.85 1076.33,1215.47 1076.92,1216.74 1077.51,1211.53 1078.09,1212.17 1078.68,1214.93 1079.26,1218.75 1079.85,1221 1080.44,1220.89 1081.02,1223.01 1081.61,1221.55 1082.2,1217.4 1082.78,1218.57 1083.37,1218.76 1083.96,1214.54 1084.54,1215.99 1085.13,1215.8 1085.72,1215.39 1086.3,1215.43 1086.89,1218.08 1087.47,1216.75 1088.06,1216.93 1088.65,1214.06 1089.23,1216.51 1089.82,1212.52 1090.41,1212.85 1090.99,1214.41 1091.58,1215.69 1092.17,1215.67 1092.75,1215.89 1093.34,1217.3 1093.93,1216.22 1094.51,1217.69 1095.1,1218.71 1095.68,1222.39 1096.27,1224.54 1096.86,1225.63 1097.44,1224.19 1098.03,1222.67 1098.62,1219.84 1099.2,1220.85 1099.79,1219.22 1100.38,1219.38 1100.96,1217.68 1101.55,1216.29 1102.14,1217.57 1102.72,1214.89 1103.31,1214.8 1103.89,1214.86 1104.48,1210.78 1105.07,1211 1105.65,1210 1106.24,1209.02 1106.83,1210.78 1107.41,1209.74 1108,1210.01 1108.59,1209.22 1109.17,1208.16 1109.76,1208.68 1110.34,1210.32 1110.93,1210.63 1111.52,1211.87 1112.1,1214.41 1112.69,1215.61 1113.28,1215.55 1113.86,1215.28 1114.45,1214.38 1115.04,1215.92 1115.62,1217.41 1116.21,1214.21 1116.8,1215.62 1117.38,1214.16 1117.97,1216.97 1118.55,1217.09 1119.14,1218.58 1119.73,1217.35 1120.31,1214.58 1120.9,1214.94 1121.49,1215.49 1122.07,1215.4 1122.66,1215.81 1123.25,1216.84 1123.83,1217.18 1124.42,1218.64 1125.01,1219.61 1125.59,1219.65 1126.18,1216.89 1126.76,1218.23 1127.35,1219.39 1127.94,1218.01 1128.52,1219.13 1129.11,1218.91 1129.7,1223.94 1130.28,1223.35 1130.87,1222.69 1131.46,1222.03 1132.04,1221.92 1132.63,1220.13 1133.21,1218.51 1133.8,1218.49 1134.39,1216.9 1134.97,1215.43 1135.56,1214.18 1136.15,1215.73 1136.73,1219.71 1137.32,1219.52 1137.91,1216.43 1138.49,1219.17 1139.08,1218.85 1139.67,1221.23 1140.25,1219.77 1140.84,1218.07 1141.42,1219.24 1142.01,1220.44 1142.6,1217.75 1143.18,1214.9 1143.77,1214.93 1144.36,1216.16 1144.94,1216.2 1145.53,1213.3 1146.12,1214.78 1146.7,1216.19 1147.29,1217.49 1147.88,1217.23 1148.46,1217.39 1149.05,1218.72 1149.63,1218.69 1150.22,1217.23 1150.81,1215.86 1151.39,1216.99 1151.98,1219.55 1152.57,1221.96 1153.15,1224.18 1153.74,1225.1 1154.33,1223.2 1154.91,1220.21 1155.5,1220.09 1156.09,1221.07 1156.67,1222.21 1157.26,1219.23 1157.84,1217.74 1158.43,1218.95 1159.02,1219.01 1159.6,1218.57 1160.19,1214.52 1160.78,1214.69 1161.36,1214.77 1161.95,1213.41 1162.54,1213.57 1163.12,1214.95 1163.71,1216.27 1164.29,1216.29 1164.88,1216.51 1165.47,1217.73 1166.05,1217.59 1166.64,1221.38 1167.23,1218.63 1167.81,1215.7 1168.4,1215.67 1168.99,1214.56 1169.57,1214.67 1170.16,1216.28 1170.75,1216.38 1171.33,1216.22 1171.92,1217.68 1172.5,1217.76 1173.09,1217.67 1173.68,1218.74 1174.26,1217.16 1174.85,1219.7 1175.44,1216.98 1176.02,1217.05 1176.61,1215.79 1177.2,1214.6 1177.78,1214.43 1178.37,1216 1178.96,1216.01 1179.54,1213.47 1180.13,1213.65 1180.71,1213.83 1181.3,1213.73 1181.89,1215.22 1182.47,1216.79 1183.06,1219.17 1183.65,1219 1184.23,1218.77 1184.82,1216.32 1185.41,1213.64 1185.99,1213.53 1186.58,1212.38 1187.16,1211.44 1187.75,1213.08 1188.34,1213.32 1188.92,1214.76 1189.51,1216.33 1190.1,1215.11 1190.68,1215.34 1191.27,1215.15 1191.86,1214.11 1192.44,1216.99 1193.03,1215.6 1193.62,1213.02 1194.2,1214.78 1194.79,1212.16 1195.37,1214.94 1195.96,1213.96 1196.55,1213.9 1197.13,1216.62 1197.72,1218.07 1198.31,1215.59 1198.89,1216.78 1199.48,1214.01 1200.07,1215.08 1200.65,1215 1201.24,1212.31 1201.83,1212.63 1202.41,1212.67 1203,1214 1203.58,1215.45 1204.17,1216.92 1204.76,1215.54 1205.34,1216.73 1205.93,1215.49 1206.52,1215.54 1207.1,1214.46 1207.69,1212.94 1208.28,1214.36 1208.86,1214.35 1209.45,1213.24 1210.03,1213.26 1210.62,1209.47 1211.21,1211.15 1211.79,1212.61 1212.38,1211.22 1212.97,1211.35 1213.55,1211.48 1214.14,1213.16 1214.73,1211.83 1215.31,1212.15 1215.9,1213.53 1216.49,1210.95 1217.07,1212.36 1217.66,1209.88 1218.24,1207.87 1218.83,1209.6 1219.42,1211.09 1220,1211.68 1220.59,1214.26 1221.18,1214.25 1221.76,1215.61 1222.35,1215.7 1222.94,1215.79 1223.52,1213.19 1224.11,1215.81 1224.7,1217.19 1225.28,1217.32 1225.87,1216.1 1226.45,1216.27 1227.04,1218.86 1227.63,1217.29 1228.21,1216.14 1228.8,1214.63 1229.39,1216.09 1229.97,1218.65 1230.56,1220.08 1231.15,1218.53 1231.73,1217.28 1232.32,1218.46 1232.91,1217.13 1233.49,1217.28 1234.08,1218.62 1234.66,1221.31 1235.25,1221.06 1235.84,1219.58 1236.42,1216.77 1237.01,1215.3 1237.6,1215.35 1238.18,1217.99 1238.77,1217.91 1239.36,1221.7 1239.94,1219.83 1240.53,1218.21 1241.11,1218.32 1241.7,1218.35 1242.29,1218.21 1242.87,1218.25 1243.46,1218.09 1244.05,1217.94 1244.63,1219.13 1245.22,1220.32 1245.81,1221.35 1246.39,1224.72 1246.98,1223.46 1247.57,1220.41 1248.15,1220.31 1248.74,1221.48 1249.32,1219.99 1249.91,1218.34 1250.5,1219.54 1251.08,1220.82 1251.67,1220.3 1252.26,1217.5 1252.84,1217.48 1253.43,1218.7 1254.02,1218.61 1254.6,1220.82 1255.19,1222 1255.78,1218.83 1256.36,1221.31 1256.95,1223.57 1257.53,1225.94 1258.12,1226.47 1258.71,1227.35 1259.29,1226.61 1259.88,1227.33 1260.47,1228.11 1261.05,1222.38 1261.64,1222.06 1262.23,1221.64 1262.81,1222.57 1263.4,1221 1263.98,1222.02 1264.57,1220.52 1265.16,1221.38 1265.74,1220.84 1266.33,1219.06 1266.92,1217.32 1267.5,1221.1 1268.09,1220.81 1268.68,1219.37 1269.26,1217.93 1269.85,1219.08 1270.44,1219.21 1271.02,1220.25 1271.61,1216.3 1272.19,1216.28 1272.78,1215.4 1273.37,1216.79 1273.95,1219.52 1274.54,1216.71 1275.13,1212.87 1275.71,1210.43 1276.3,1207.88 1276.89,1208.25 1277.47,1209.97 1278.06,1212.92 1278.65,1211.64 1279.23,1211.87 1279.82,1213.41 1280.4,1216.18 1280.99,1217.49 1281.58,1217.29 1282.16,1221.03 1282.75,1218.29 1283.34,1217.99 1283.92,1219.16 1284.51,1220.31 1285.1,1218.27 1285.68,1217.06 1286.27,1215.79 1286.86,1214.41 1287.44,1213.32 1288.03,1214.91 1288.61,1214.77 1289.2,1214.5 1289.79,1214.51 1290.37,1211.94 1290.96,1214.7 1291.55,1214.72 1292.13,1214.84 1292.72,1215.01 1293.31,1217.53 1293.89,1217.42 1294.48,1218.65 1295.06,1215.96 1295.65,1213.28 1296.24,1213.32 1296.82,1213.49 1297.41,1212.33 1298,1212.1 1298.58,1207.08 1299.17,1207.51 1299.76,1209.19 1300.34,1210.95 1300.93,1210.06 1301.52,1208 1302.1,1207.2 1302.69,1207.57 1303.27,1211.75 1303.86,1213.24 1304.45,1214.76 1305.03,1210.83 1305.62,1212.38 1306.21,1215.05 1306.79,1215.06 1307.38,1212.44 1307.97,1215.31 1308.55,1217.71 1309.14,1216.53 1309.73,1217.86 1310.31,1219.19 1310.9,1219.15 1311.48,1220.33 1312.07,1222.47 1312.66,1224.61 1313.24,1225.29 1313.83,1226.22 1314.42,1224.59 1315,1224.47 1315.59,1226.47 1316.18,1224.65 1316.76,1220.32 1317.35,1221.3 1317.93,1221.19 1318.52,1223.42 1319.11,1222.92 1319.69,1222.39 1320.28,1217.99 1320.87,1217.99 1321.45,1215.29 1322.04,1214.12 1322.63,1213.05 1323.21,1213.23 1323.8,1212.36 1324.39,1212.37 1324.97,1212.52 1325.56,1211.34 1326.14,1210.04 1326.73,1211.76 1327.32,1217.14 1327.9,1217.1 1328.49,1218.46 1329.08,1219.47 1329.66,1220.77 1330.25,1219.45 1330.84,1220.83 1331.42,1220.47 1332.01,1221.71 1332.6,1221.28 1333.18,1222.54 1333.77,1220.81 1334.35,1220.43 1334.94,1220.05 1335.53,1219.91 1336.11,1219.99 1336.7,1219.84 1337.29,1219.71 1337.87,1219.66 1338.46,1215.33 1339.05,1214.02 1339.63,1214 1340.22,1214.5 1340.8,1214.7 1341.39,1214.7 1341.98,1214.8 1342.56,1214.72 1343.15,1214.72 1343.74,1214.72 1344.32,1216 1344.91,1216 1345.5,1214.95 1346.08,1216.36 1346.67,1215.37 1347.26,1215.35 1347.84,1212.79 1348.43,1213.16 1349.01,1213.29 1349.6,1213.25 1350.19,1216.35 1350.77,1216.34 1351.36,1215.1 1351.95,1217.71 1352.53,1217.74 1353.12,1217.48 1353.71,1217.61 1354.29,1218.58 1354.88,1218.71 1355.47,1217.51 1356.05,1217.16 1356.64,1217.11 1357.22,1215.54 1357.81,1215.55 1358.4,1216.82 1358.98,1218.04 1359.57,1217.86 1360.16,1215.11 1360.74,1216.5 1361.33,1216.43 1361.92,1213.91 1362.5,1211.47 1363.09,1210.33 1363.68,1207.88 1364.26,1208.38 1364.85,1208.62 1365.43,1211.56 1366.02,1210.5 1366.61,1212.2 1367.19,1216.18 1367.78,1214.48 1368.37,1214.54 1368.95,1214.51 1369.54,1213.35 1370.13,1213.52 1370.71,1216.37 1371.3,1215.23 1371.88,1216.52 1372.47,1215.04 1373.06,1216.44 1373.64,1215.06 1374.23,1219.04 1374.82,1219.12 1375.4,1217.53 1375.99,1216.19 1376.58,1216.23 1377.16,1216.3 1377.75,1216.41 1378.34,1216.6 1378.92,1216.78 1379.51,1216.78 1380.09,1216.55 1380.68,1212.56 1381.27,1212.6 1381.85,1214.14 1382.44,1213.1 1383.03,1208.13 1383.61,1206.01 1384.2,1206.4 1384.79,1208.23 1385.37,1210.06 1385.96,1208.91 1386.55,1210.41 1387.13,1211.84 1387.72,1211.81 1388.3,1213.29 1388.89,1213.41 1389.48,1214.76 1390.06,1216.16 1390.65,1212.3 1391.24,1208.45 1391.82,1207.62 1392.41,1209.22 1393,1208.38 1393.58,1210.18 1394.17,1210.53 1394.75,1210.92 1395.34,1211.24 1395.93,1213.17 1396.51,1214.55 1397.1,1214.59 1397.69,1212.08 1398.27,1210.05 1398.86,1210.31 1399.45,1213.39 1400.03,1213.41 1400.62,1213.5 1401.21,1212.23 1401.79,1211.1 1402.38,1211.47 1402.96,1211.67 1403.55,1210.54 1404.14,1212.18 1404.72,1213.76 1405.31,1216.46 1405.9,1216.45 1406.48,1214.95 1407.07,1214.91 1407.66,1214.94 1408.24,1214.72 1408.83,1214.82 1409.42,1215.04 1410,1219 1410.59,1218.78 1411.17,1219.89 1411.76,1218.5 1412.35,1215.81 1412.93,1215.74 1413.52,1215.84 1414.11,1214.76 1414.69,1210.63 1415.28,1209.48 1415.87,1208.78 1416.45,1206.27 1417.04,1206.8 1417.63,1207.26 1418.21,1207.98 1418.8,1208.46 1419.38,1207.6 1419.97,1206.79 1420.56,1211.22 1421.14,1212.8 1421.73,1214.12 1422.32,1216.93 1422.9,1216.8 1423.49,1218.18 1424.08,1220.81 1424.66,1220.43 1425.25,1220.33 1425.83,1218.86 1426.42,1221.4 1427.01,1221.26 1427.59,1222.31 1428.18,1222.17 1428.77,1223.01 1429.35,1220.12 1429.94,1221.03 1430.53,1221.94 1431.11,1221.4 1431.7,1219.67 1432.29,1218.2 1432.87,1220.53 1433.46,1224.28 1434.04,1225.28 1434.63,1224.96 1435.22,1223.15 1435.8,1220.11 1436.39,1221.31 1436.98,1222.24 1437.56,1220.8 1438.15,1219.38 1438.74,1218.34 1439.32,1219.54 1439.91,1219.21 1440.5,1218.97 1441.08,1214.9 1441.67,1214.92 1442.25,1213.63 1442.84,1216.47 1443.43,1215.25 1444.01,1216.46 1444.6,1216.44 1445.19,1219.01 1445.77,1219 1446.36,1218.95 1446.95,1216.03 1447.53,1214.69 1448.12,1214.52 1448.7,1215.74 1449.29,1212.87 1449.88,1215.8 1450.46,1216.93 1451.05,1211.85 1451.64,1210.77 1452.22,1212.27 1452.81,1211.14 1453.4,1213.89 1453.98,1211.83 1454.57,1214.56 1455.16,1214.62 1455.74,1214.58 1456.33,1216.14 1456.91,1217.41 1457.5,1217.06 1458.09,1218.05 1458.67,1220.37 1459.26,1222.8 1459.85,1221.31 1460.43,1225.24 1461.02,1224.83 1461.61,1225.62 1462.19,1225.27 1462.78,1224.91 1463.37,1226.92 1463.95,1226.5 1464.54,1224.51 1465.12,1223.57 1465.71,1224.51 1466.3,1222.97 1466.88,1223.99 1467.47,1225.22 1468.06,1223.25 1468.64,1223.02 1469.23,1224.04 1469.82,1225.07 1470.4,1226 1470.99,1225.7 1471.57,1225.33 1472.16,1223.77 1472.75,1222.16 1473.33,1221.74 1473.92,1224.11 1474.51,1223.46 1475.09,1223.05 1475.68,1222.76 1476.27,1223.63 1476.85,1222.09 1477.44,1221.83 1478.03,1222.85 1478.61,1222.48 1479.2,1222 1479.78,1226.93 1480.37,1223.62 1480.96,1224.72 1481.54,1224.03 1482.13,1223.42 1482.72,1221.56 1483.3,1222.72 1483.89,1223.85 1484.48,1223.73 1485.06,1221.98 1485.65,1221.67 1486.24,1220.1 1486.82,1217.2 1487.41,1214.36 1487.99,1213.22 1488.58,1209.11 1489.17,1210.61 1489.75,1210.91 1490.34,1207.34 1490.93,1207.6 1491.51,1207.96 1492.1,1209.63 1492.69,1208.83 1493.27,1209.31 1493.86,1204.34 1494.45,1200.88 1495.03,1203.12 1495.62,1201.31 1496.2,1200.75 1496.79,1200.26 1497.38,1200.81 1497.96,1200.26 1498.55,1201.17 1499.14,1205.73 1499.72,1206.18 1500.31,1206.81 1500.9,1208.76 1501.48,1209.09 1502.07,1210.67 1502.65,1212.17 1503.24,1212.42 1503.83,1211.54 1504.41,1213.24 1505,1212.13 1505.59,1212.63 1506.17,1215.53 1506.76,1215.3 1507.35,1215.41 1507.93,1216.82 1508.52,1215.65 1509.11,1214.46 1509.69,1214.66 1510.28,1214.93 1510.86,1216.08 1511.45,1218.91 1512.04,1216.26 1512.62,1217.48 1513.21,1216.26 1513.8,1217.52 1514.38,1214.55 1514.97,1217.24 1515.56,1216.06 1516.14,1216.36 1516.73,1213.6 1517.32,1212.27 1517.9,1215.22 1518.49,1215.23 1519.07,1212.95 1519.66,1213.31 1520.25,1212.27 1520.83,1214 1521.42,1216.71 1522.01,1216.85 1522.59,1212.92 1523.18,1214.16 1523.77,1215.26 1524.35,1216.32 1524.94,1215.38 1525.52,1215.19 1526.11,1213.69 1526.7,1211.21 1527.28,1212.57 1527.87,1212.65 1528.46,1212.75 1529.04,1215.47 1529.63,1215.94 1530.22,1216.03 1530.8,1215.92 1531.39,1216.94 1531.98,1215.83 1532.56,1217.44 1533.15,1214.94 1533.73,1213.65 1534.32,1214.87 1534.91,1216.12 1535.49,1215.9 1536.08,1216 1536.67,1218.76 1537.25,1219.92 1537.84,1216.84 1538.43,1218.02 1539.01,1219.23 1539.6,1218.93 1540.19,1218.8 1540.77,1217.48 1541.36,1217.36 1541.94,1217.2 1542.53,1217.27 1543.12,1215.94 1543.7,1214.72 1544.29,1216.21 1544.88,1215.85 1545.46,1213.37 1546.05,1217.31 1546.64,1215.72 1547.22,1214.49 1547.81,1213.56 1548.4,1213.66 1548.98,1215.42 1549.57,1216.67 1550.15,1216.72 1550.74,1215.38 1551.33,1215.21 1551.91,1215.5 1552.5,1214.33 1553.09,1211.83 1553.67,1211.98 1554.26,1212.17 1554.85,1211.37 1555.43,1210.48 1556.02,1213.33 1556.6,1213.53 1557.19,1213.64 1557.78,1213.76 1558.36,1213.79 1558.95,1216.42 1559.54,1216.03 1560.12,1218.63 1560.71,1218.54 1561.3,1222.21 1561.88,1218.24 1562.47,1215.45 1563.06,1217.22 1563.64,1218.38 1564.23,1218.16 1564.81,1220.37 1565.4,1220.04 1565.99,1219.57 1566.57,1219.65 1567.16,1220.84 1567.75,1220.71 1568.33,1221.75 1568.92,1218.83 1569.51,1220.28 1570.09,1220.17 1570.68,1218.49 1571.27,1217.03 1571.85,1218.18 1572.44,1218.08 1573.02,1219.5 1573.61,1219.47 1574.2,1217.1 1574.78,1217.06 1575.37,1218.3 1575.96,1218.36 1576.54,1216.87 1577.13,1219.32 1577.72,1219.21 1578.3,1218.96 1578.89,1220.11 1579.47,1215.82 1580.06,1216.84 1580.65,1216.68 1581.23,1215.31 1581.82,1218.06 1582.41,1217.91 1582.99,1219.13 1583.58,1219.15 1584.17,1217.75 1584.75,1219.13 1585.34,1218.06 1585.93,1215.05 1586.51,1215.11 1587.1,1216.32 1587.68,1216.26 1588.27,1216.4 1588.86,1214.83 1589.44,1216.42 1590.03,1216.29 1590.62,1216.32 1591.2,1213.56 1591.79,1213.5 1592.38,1218.63 1592.96,1216.29 1593.55,1216.1 1594.14,1214.87 1594.72,1215.22 1595.31,1213.71 1595.89,1213.74 1596.48,1211.28 1597.07,1210.16 1597.65,1209.27 1598.24,1209.8 1598.83,1213.59 1599.41,1212.3 1600,1209.99 1600.59,1209.09 1601.17,1212.07 1601.76,1210.94 1602.34,1211.58 1602.93,1214.37 1603.52,1213.46 1604.1,1213.71 1604.69,1215.18 1605.28,1211.34 1605.86,1212.89 1606.45,1212.97 1607.04,1213.21 1607.62,1215.8 1608.21,1214.19 1608.8,1211.64 1609.38,1212.97 1609.97,1212.88 1610.55,1215.45 1611.14,1215.67 1611.73,1216.76 1612.31,1218.57 1612.9,1218.49 1613.49,1215.9 1614.07,1215.93 1614.66,1221.12 1615.25,1224.52 1615.83,1222.74 1616.42,1220.21 1617.01,1218.55 1617.59,1215.65 1618.18,1213.03 1618.76,1214.28 1619.35,1214.42 1619.94,1215.87 1620.52,1214.57 1621.11,1214.67 1621.7,1217.42 1622.28,1219.79 1622.87,1216.88 1623.46,1217.83 1624.04,1217.46 1624.63,1217.38 1625.22,1220.94 1625.8,1220.79 1626.39,1220.76 1626.97,1217.75 1627.56,1211.05 1628.15,1211.83 1628.73,1216.05 1629.32,1213.26 1629.91,1213.52 1630.49,1212.31 1631.08,1214.09 1631.67,1214.04 1632.25,1216.8 1632.84,1219.52 1633.42,1221.91 1634.01,1223.06 1634.6,1222.69 1635.18,1219.65 1635.77,1221.93 1636.36,1221.59 1636.94,1218.87 1637.53,1218.65 1638.12,1216 1638.7,1213.58 1639.29,1213.72 1639.88,1212.36 1640.46,1212.11 1641.05,1210.83 1641.63,1212.22 1642.22,1211.14 1642.81,1211.66 1643.39,1213.18 1643.98,1212.07 1644.57,1211.21 1645.15,1211.52 1645.74,1214.34 1646.33,1213.26 1646.91,1213.43 1647.5,1210.92 1648.09,1211.11 1648.67,1210.94 1649.26,1211.48 1649.84,1213.18 1650.43,1217.12 1651.02,1216.92 1651.6,1217.09 1652.19,1218.25 1652.78,1219.33 1653.36,1219.16 1653.95,1218.95 1654.54,1221.55 1655.12,1221.44 1655.71,1220.9 1656.29,1223.15 1656.88,1222.91 1657.47,1221.25 1658.05,1224.82 1658.64,1224.6 1659.23,1222.97 1659.81,1221.18 1660.4,1219.66 1660.99,1220.84 1661.57,1220.47 1662.16,1217.77 1662.75,1216.2 1663.33,1215.96 1663.92,1214.48 1664.5,1214.43 1665.09,1214.4 1665.68,1214.58 1666.26,1214.63 1666.85,1215.02 1667.44,1216.27 1668.02,1217.21 1668.61,1217.23 1669.2,1215.66 1669.78,1215.85 1670.37,1217.09 1670.96,1213.01 1671.54,1207.8 1672.13,1209.51 1672.71,1209.79 1673.3,1209.05 1673.89,1210.81 1674.47,1211.03 1675.06,1211.47 1675.65,1210.25 1676.23,1210.33 1676.82,1209.52 1677.41,1208.56 1677.99,1208.7 1678.58,1210.61 1679.17,1212.13 1679.75,1212.26 1680.34,1209.75 1680.92,1211.47 1681.51,1210.57 1682.1,1209.54 1682.68,1210.97 1683.27,1208.52 1683.86,1207.58 1684.44,1209.39 1685.03,1210.89 1685.62,1213.99 1686.2,1212.55 1686.79,1212.76 1687.37,1211.57 1687.96,1210.73 1688.55,1213.73 1689.13,1216.46 1689.72,1216.38 1690.31,1217.86 1690.89,1216.5 1691.48,1215.19 1692.07,1215.13 1692.65,1216.27 1693.24,1220.13 1693.83,1219.75 1694.41,1222.24 1695,1224.62 1695.58,1227.75 1696.17,1223.2 1696.76,1225.39 1697.34,1223.43 1697.93,1221.94 1698.52,1219.31 1699.1,1220.55 1699.69,1219.51 1700.28,1219.28 1700.86,1221.53 1701.45,1222.71 1702.04,1222.39 1702.62,1224.74 1703.21,1222.84 1703.79,1219.63 1704.38,1219.42 1704.97,1218.07 1705.55,1217.76 1706.14,1217.68 1706.73,1220.5 1707.31,1224.03 1707.9,1222.24 1708.49,1223.3 1709.07,1220.47 1709.66,1218.58 1710.24,1217.28 1710.83,1218.41 1711.42,1220.75 1712,1221.6 1712.59,1222.59 1713.18,1223.18 1713.76,1218.7 1714.35,1218.52 1714.94,1215.8 1715.52,1215.73 1716.11,1218.36 1716.7,1215.79 1717.28,1217 1717.87,1219.45 1718.45,1218.37 1719.04,1216.99 1719.63,1219.54 1720.21,1220.71 1720.8,1219.35 1721.39,1221.69 1721.97,1222.62 1722.56,1222.66 1723.15,1221.11 1723.73,1218.38 1724.32,1219.67 1724.91,1219.31 1725.49,1219.07 1726.08,1218.84 1726.66,1218.4 1727.25,1219.45 1727.84,1220.46 1728.42,1217.47 1729.01,1216.12 1729.6,1214.64 1730.18,1212.19 1730.77,1211.25 1731.36,1211.54 1731.94,1214.64 1732.53,1212.31 1733.11,1213.25 1733.7,1211.91 1734.29,1212.1 1734.87,1212.39 1735.46,1215.17 1736.05,1215.32 1736.63,1214.03 1737.22,1211.43 1737.81,1212.94 1738.39,1211.61 1738.98,1211.61 1739.57,1212.14 1740.15,1209.39 1740.74,1212.43 1741.32,1211.45 1741.91,1209.11 1742.5,1210.56 1743.08,1209.55 1743.67,1209.65 1744.26,1210.1 1744.84,1210.27 1745.43,1209.38 1746.02,1208.26 1746.6,1210.1 1747.19,1211.57 1747.78,1210.82 1748.36,1209.85 1748.95,1207.44 1749.53,1209.25 1750.12,1209.77 1750.71,1210.32 1751.29,1210.65 1751.88,1212.28 1752.47,1215.18 1753.05,1216.58 1753.64,1216.46 1754.23,1213.62 1754.81,1216.22 1755.4,1213.68 1755.99,1217.48 1756.57,1217.16 1757.16,1214.41 1757.74,1215.94 1758.33,1217.19 1758.92,1215.86 1759.5,1216.06 1760.09,1217.46 1760.68,1218.63 1761.26,1214.43 1761.85,1215.78 1762.44,1214.37 1763.02,1215.8 1763.61,1215.69 1764.19,1217.21 1764.78,1218.38 1765.37,1216.99 1765.95,1214.27 1766.54,1215.98 1767.13,1212.25 1767.71,1214.9 1768.3,1218.83 1768.89,1220.23 1769.47,1221.53 1770.06,1220.03 1770.65,1218.69 1771.23,1218.73 1771.82,1220.19 1772.4,1219.03 1772.99,1218.93 1773.58,1218.81 1774.16,1219.75 1774.75,1218.32 1775.34,1216.99 1775.92,1217.05 1776.51,1215.91 1777.1,1214.66 1777.68,1214.71 1778.27,1214.97 1778.86,1215.24 1779.44,1215 1780.03,1216.13 1780.61,1216.15 1781.2,1216.03 1781.79,1215.83 1782.37,1217.01 1782.96,1215.63 1783.55,1215.76 1784.13,1214.32 1784.72,1213.05 1785.31,1213.17 1785.89,1214.66 1786.48,1213.18 1787.06,1214.91 1787.65,1214.75 1788.24,1215.88 1788.82,1217.18 1789.41,1218.54 1790,1216.76 1790.58,1218.03 1791.17,1219.21 1791.76,1213.85 1792.34,1212.95 1792.93,1210.27 1793.52,1211.76 1794.1,1210.44 1794.69,1212.18 1795.27,1212.53 1795.86,1210.13 1796.45,1213.26 1797.03,1213.47 1797.62,1214.96 1798.21,1216.43 1798.79,1217.75 1799.38,1216.41 1799.97,1216.21 1800.55,1217.31 1801.14,1218.32 1801.73,1220.86 1802.31,1218.97 1802.9,1218.53 1803.48,1213.16 1804.07,1214.91 1804.66,1214.98 1805.24,1216.65 1805.83,1217.94 1806.42,1213.76 1807,1213.86 1807.59,1212.82 1808.18,1212.88 1808.76,1213.1 1809.35,1214.56 1809.94,1217.28 1810.52,1215.95 1811.11,1217.04 1811.69,1216.79 1812.28,1218.03 1812.87,1215.34 1813.45,1213.7 1814.04,1214.86 1814.63,1217.28 1815.21,1217.21 1815.8,1218.72 1816.39,1219.54 1816.97,1218.14 1817.56,1219.33 1818.14,1217.7 1818.73,1219.16 1819.32,1218.98 1819.9,1218.66 1820.49,1218.63 1821.08,1218.38 1821.66,1218.36 1822.25,1215.37 1822.84,1214.13 1823.42,1215.54 1824.01,1213.01 1824.6,1211.79 1825.18,1212.22 1825.77,1215.25 1826.35,1214.06 1826.94,1214.35 1827.53,1214.27 1828.11,1212.9 1828.7,1215.82 1829.29,1217.22 1829.87,1215.88 1830.46,1215.93 1831.05,1221.32 1831.63,1218.64 1832.22,1217.25 1832.81,1217.31 1833.39,1217.18 1833.98,1215.83 1834.56,1213.03 1835.15,1212.16 1835.74,1212.55 1836.32,1216.74 1836.91,1219.61 1837.5,1218.38 1838.08,1219.84 1838.67,1220.7 1839.26,1219.03 1839.84,1217.77 1840.43,1220.47 1841.01,1222.96 1841.6,1222.57 1842.19,1220.62 1842.77,1219.18 1843.36,1216.05 1843.95,1214.82 1844.53,1214.89 1845.12,1214.9 1845.71,1216.24 1846.29,1220.33 1846.88,1221.07 1847.47,1219.13 1848.05,1217.63 1848.64,1218.94 1849.22,1221.44 1849.81,1222.53 1850.4,1218.49 1850.98,1216.81 1851.57,1219.58 1852.16,1221.9 1852.74,1221.74 1853.33,1221.28 1853.92,1219.63 1854.5,1218.22 1855.09,1215.08 1855.68,1217.7 1856.26,1213.37 1856.85,1209.73 1857.43,1209.95 1858.02,1210.18 1858.61,1210.52 1859.19,1212.1 1859.78,1212.53 1860.37,1212.55 1860.95,1212.64 1861.54,1207.76 1862.13,1210.92 1862.71,1208.3 1863.3,1207.64 1863.88,1209.43 1864.47,1208.78 1865.06,1209.53 1865.64,1208.53 1866.23,1211.44 1866.82,1214.34 1867.4,1218.46 1867.99,1218.13 1868.58,1219.24 1869.16,1216.57 1869.75,1217.81 1870.34,1215.04 1870.92,1215.18 1871.51,1215 1872.09,1213.84 1872.68,1213.59 1873.27,1211.24 1873.85,1212.7 1874.44,1214.05 1875.03,1214.14 1875.61,1215.75 1876.2,1215.7 1876.79,1215.82 1877.37,1219.62 1877.96,1223.3 1878.55,1220.41 1879.13,1221.37 1879.72,1222.33 1880.3,1222.35 1880.89,1223.14 1881.48,1223.99 1882.06,1222.28 1882.65,1219.52 1883.24,1219.66 1883.82,1220.76 1884.41,1218.92 1885,1220.33 1885.58,1220.17 1886.17,1218.61 1886.76,1221 1887.34,1221.98 1887.93,1221.62 1888.51,1218.65 1889.1,1218.56 1889.69,1218.35 1890.27,1215.81 1890.86,1216.88 1891.45,1218.25 1892.03,1218.24 1892.62,1215.51 1893.21,1216.73 1893.79,1216.46 1894.38,1217.72 1894.96,1216.49 1895.55,1212.59 1896.14,1216.75 1896.72,1216.95 1897.31,1216.92 1897.9,1215.6 1898.48,1214.19 1899.07,1210.36 1899.66,1210.67 1900.24,1213.46 1900.83,1214.98 1901.42,1215.16 1902,1215.25 1902.59,1215.38 1903.17,1215.42 1903.76,1215.31 1904.35,1215.17 1904.93,1214.94 1905.52,1213.77 1906.11,1212.6 1906.69,1211.35 1907.28,1214.38 1907.87,1214.5 1908.45,1214.4 1909.04,1215.82 1909.63,1217.38 1910.21,1220.04 1910.8,1219.81 1911.38,1218.17 1911.97,1221.82 1912.56,1221.31 1913.14,1219.51 1913.73,1218.27 1914.32,1219.7 1914.9,1215.21 1915.49,1215.24 1916.08,1215.17 1916.66,1216.56 1917.25,1217.78 1917.83,1217.87 1918.42,1218.99 1919.01,1218.8 1919.59,1218.34 1920.18,1220.66 1920.77,1223.18 1921.35,1222.95 1921.94,1223.54 1922.53,1221.88 1923.11,1220.09 1923.7,1219.93 1924.29,1222.34 1924.87,1224.66 1925.46,1222.73 1926.04,1222.39 1926.63,1223.48 1927.22,1222.97 1927.8,1222.59 1928.39,1219.75 1928.98,1218.38 1929.56,1219.56 1930.15,1219.35 1930.74,1222.01 1931.32,1220.36 1931.91,1221.28 1932.5,1222.11 1933.08,1221.9 1933.67,1224.12 1934.25,1225.07 1934.84,1223.26 1935.43,1224.3 1936.01,1223.69 1936.6,1222 1937.19,1222.98 1937.77,1221.2 1938.36,1215.73 1938.95,1215.68 1939.53,1215.83 1940.12,1215.66 1940.71,1215.71 1941.29,1215.54 1941.88,1217.12 1942.46,1214.48 1943.05,1213.29 1943.64,1212.12 1944.22,1213.59 1944.81,1209.87 1945.4,1211.57 1945.98,1211.97 1946.57,1210.83 1947.16,1209.84 1947.74,1208.98 1948.33,1207.88 1948.91,1209.83 1949.5,1211.47 1950.09,1211.92 1950.67,1212.27 1951.26,1212.36 1951.85,1212.46 1952.43,1210.54 1953.02,1212.35 1953.61,1214.18 1954.19,1215.89 1954.78,1216.13 1955.37,1218.78 1955.95,1218.29 1956.54,1220.67 1957.12,1216.66 1957.71,1216.67 1958.3,1220.58 1958.88,1220.64 1959.47,1218.9 1960.06,1217.5 1960.64,1219.1 1961.23,1213.65 1961.82,1210.14 1962.4,1211.74 1962.99,1213.37 1963.58,1212.23 1964.16,1212.5 1964.75,1212.79 1965.33,1214.42 1965.92,1214.66 1966.51,1213.54 1967.09,1212.34 1967.68,1214.11 1968.27,1214.32 1968.85,1215.6 1969.44,1216.12 1970.03,1216.36 1970.61,1217.63 1971.2,1216.36 1971.78,1217.86 1972.37,1217.76 1972.96,1216.41 1973.54,1216.42 1974.13,1214.95 1974.72,1213.63 1975.3,1213.76 1975.89,1212.6 1976.48,1211.27 1977.06,1214.25 1977.65,1212.94 1978.24,1213.43 1978.82,1214.92 1979.41,1214.81 1979.99,1215.93 1980.58,1216.14 1981.17,1218.4 1981.75,1217.05 1982.34,1219.52 1982.93,1213.99 1983.51,1214.1 1984.1,1213.21 1984.69,1214.61 1985.27,1217.27 1985.86,1215.56 1986.45,1215.65 1987.03,1214.15 1987.62,1212.71 1988.2,1212.96 1988.79,1213.38 1989.38,1214.95 1989.96,1212.7 1990.55,1212.85 1991.14,1213.04 1991.72,1215.61 1992.31,1214.48 1992.9,1215.72 1993.48,1215.58 1994.07,1217.03 1994.65,1216.99 1995.24,1216.61 1995.83,1217.96 1996.41,1216.35 1997,1214.99 1997.59,1213.54 1998.17,1213.61 1998.76,1213.68 1999.35,1215.09 1999.93,1212.33 2000.52,1209.38 2001.11,1212.41 2001.69,1213.93 2002.28,1212.95 2002.86,1209.46 2003.45,1208.27 2004.04,1210.02 2004.62,1211.97 2005.21,1213.43 2005.8,1210.97 2006.38,1208.5 2006.97,1210.23 2007.56,1210.65 2008.14,1210.87 2008.73,1210.06 2009.32,1210.33 2009.9,1210.95 2010.49,1208.53 2011.07,1210.11 2011.66,1210.4 2012.25,1207.88 2012.83,1209.49 2013.42,1214.91 2014.01,1215.11 2014.59,1217.44 2015.18,1219.75 2015.77,1218.04 2016.35,1218.01 2016.94,1219.2 2017.53,1220.28 2018.11,1219.97 2018.7,1218.31 2019.28,1215.48 2019.87,1218.21 2020.46,1216.88 2021.04,1214.14 2021.63,1214.39 2022.22,1214.59 2022.8,1214.64 2023.39,1213.57 2023.98,1213.81 2024.56,1213.88 2025.15,1215.4 2025.73,1213.92 2026.32,1214.21 2026.91,1214.24 2027.49,1212.96 2028.08,1216.7 2028.67,1213.94 2029.25,1212.82 2029.84,1213.02 2030.43,1212.92 2031.01,1212.86 2031.6,1213.01 2032.19,1217.2 2032.77,1217.11 2033.36,1215.56 2033.94,1218.31 2034.53,1218.24 2035.12,1219.75 2035.7,1219.65 2036.29,1219.09 2036.88,1221.67 2037.46,1223.82 2038.05,1224.63 2038.64,1223.01 2039.22,1223.97 2039.81,1223.7 2040.4,1224.73 2040.98,1224.44 2041.57,1220.24 2042.15,1221.5 2042.74,1221.45 2043.33,1219.86 2043.91,1219.61 2044.5,1218.07 2045.09,1219.07 2045.67,1217.67 2046.26,1220.09 2046.85,1218.81 2047.43,1218.57 2048.02,1214.9 2048.6,1213.73 2049.19,1210.02 2049.78,1211.97 2050.36,1212.31 2050.95,1212.43 2051.54,1214.01 2052.12,1215.23 2052.71,1216.51 2053.3,1216.58 2053.88,1219.03 2054.47,1216.4 2055.06,1216.46 2055.64,1216.55 2056.23,1213.8 2056.81,1212.67 2057.4,1213.11 2057.99,1214.75 2058.57,1218.8 2059.16,1218.59 2059.75,1220.67 2060.33,1221.81 2060.92,1220.06 2061.51,1217.32 2062.09,1213.37 2062.68,1214.92 2063.27,1214.84 2063.85,1211.03 2064.44,1210.21 2065.02,1212.16 2065.61,1211.15 2066.2,1213.89 2066.78,1212.66 2067.37,1213.02 2067.96,1211.85 2068.54,1213.65 2069.13,1213.74 2069.72,1213.81 2070.3,1213.81 2070.89,1215.14 2071.48,1218.95 2072.06,1219.22 2072.65,1217.88 2073.23,1216.61 2073.82,1215.15 2074.41,1216.33 2074.99,1213.84 2075.58,1212.63 2076.17,1211.51 2076.75,1210.33 2077.34,1212.22 2077.93,1214.83 2078.51,1214.83 2079.1,1215.01 2079.68,1216.58 2080.27,1220.19 2080.86,1220.1 2081.44,1223.84 2082.03,1222.25 2082.62,1221.71 2083.2,1220.01 2083.79,1218.83 2084.38,1220.03 2084.96,1222.61 2085.55,1219.59 2086.14,1218.2 2086.72,1218.14 2087.31,1218.04 2087.89,1219.19 2088.48,1218.72 2089.07,1220.08 2089.65,1221.35 2090.24,1221.17 2090.83,1219.28 2091.41,1221.73 2092,1218.84 2092.59,1222.35 2093.17,1221.97 2093.76,1221.72 2094.35,1221.17 2094.93,1222.28 2095.52,1220.01 2096.1,1223.75 2096.69,1221.83 2097.28,1222.53 2097.86,1219.71 2098.45,1217.98 2099.04,1219.16 2099.62,1217.77 2100.21,1216.41 2100.8,1216.49 2101.38,1217.93 2101.97,1216.65 2102.55,1223.19 2103.14,1221.68 2103.73,1219.97 2104.31,1218.26 2104.9,1215.39 2105.49,1215.26 2106.07,1216.52 2106.66,1217.92 2107.25,1218.1 2107.83,1218.2 2108.42,1217.02 2109.01,1216.95 2109.59,1218.01 2110.18,1218.17 2110.76,1215.62 2111.35,1214.26 2111.94,1211.7 2112.52,1214.22 2113.11,1211.95 2113.7,1214.59 2114.28,1211.97 2114.87,1209.73 2115.46,1209.87 2116.04,1212.58 2116.63,1211.44 2117.22,1212.03 2117.8,1212.09 2118.39,1213.48 2118.97,1214.73 2119.56,1216.12 2120.15,1217.5 2120.73,1211.97 2121.32,1217.21 2121.91,1218.39 2122.49,1219.58 2123.08,1215.59 2123.67,1217.09 2124.25,1214.51 2124.84,1214.53 2125.42,1218.64 2126.01,1217.24 2126.6,1215.9 2127.18,1215.9 2127.77,1215.84 2128.36,1215.79 2128.94,1217.13 2129.53,1217.02 2130.12,1214.05 2130.7,1214.18 2131.29,1214.23 2131.88,1214.65 2132.46,1215.94 2133.05,1215.87 2133.63,1216.96 2134.22,1218.33 2134.81,1218.33 2135.39,1215.83 2135.98,1217.05 2136.57,1218.24 2137.15,1219.61 2137.74,1217.97 2138.33,1217.94 2138.91,1217.83 2139.5,1218.07 2140.09,1216.63 2140.67,1217.07 2141.26,1218.47 2141.84,1216.78 2142.43,1214.26 2143.02,1215.84 2143.6,1214.64 2144.19,1217.22 2144.78,1216.13 2145.36,1216.33 2145.95,1215.08 2146.54,1215.44 2147.12,1216.97 2147.71,1216.89 2148.3,1218.15 2148.88,1216.94 2149.47,1218.1 2150.05,1216.86 2150.64,1214.12 2151.23,1215.57 2151.81,1216 2152.4,1214.69 2152.99,1214.84 2153.57,1217.68 2154.16,1217.43 2154.75,1214.46 2155.33,1215.68 2155.92,1218.39 2156.5,1218.21 2157.09,1219.22 2157.68,1216.29 2158.26,1216.27 \"/>\n<path clip-path=\"url(#clip842)\" d=\"M986.025 1216.57 L986.612 1216.57 L987.198 1216.57 L987.785 1216.57 L988.371 1216.57 L988.957 1216.57 L989.544 1216.57 L990.13 1216.57 L990.717 1216.57 L991.303 1216.57 L991.889 1216.57 L992.476 1216.57 L993.062 1216.57 L993.649 1216.57 L994.235 1216.57 L994.822 1216.57 L995.408 1216.57 L995.994 1216.57 L996.581 1216.57 L997.167 1216.57 L997.754 1216.57 L998.34 1216.57 L998.926 1216.57 L999.513 1216.57 L1000.1 1216.57 L1000.69 1216.57 L1001.27 1216.57 L1001.86 1216.57 L1002.44 1216.57 L1003.03 1216.57 L1003.62 1216.57 L1004.2 1216.57 L1004.79 1216.57 L1005.38 1216.57 L1005.96 1216.57 L1006.55 1216.57 L1007.14 1216.57 L1007.72 1216.57 L1008.31 1216.57 L1008.9 1216.57 L1009.48 1216.57 L1010.07 1216.57 L1010.65 1216.57 L1011.24 1216.57 L1011.83 1216.57 L1012.41 1216.57 L1013 1216.57 L1013.59 1216.57 L1014.17 1216.57 L1014.76 1216.57 L1015.35 1216.57 L1015.93 1216.57 L1016.52 1216.57 L1017.11 1216.57 L1017.69 1216.57 L1018.28 1216.57 L1018.86 1216.57 L1019.45 1216.57 L1020.04 1216.57 L1020.62 1216.57 L1021.21 1216.57 L1021.8 1216.57 L1022.38 1216.57 L1022.97 1216.57 L1023.56 1216.57 L1024.14 1216.57 L1024.73 1216.57 L1025.32 1216.57 L1025.9 1216.57 L1026.49 1216.57 L1027.07 1216.57 L1027.66 1216.57 L1028.25 1216.57 L1028.83 1216.57 L1029.42 1216.57 L1030.01 1216.57 L1030.59 1216.57 L1031.18 1216.57 L1031.77 1216.57 L1032.35 1216.57 L1032.94 1216.57 L1033.52 1216.57 L1034.11 1216.57 L1034.7 1216.57 L1035.28 1216.57 L1035.87 1216.57 L1036.46 1216.57 L1037.04 1216.57 L1037.63 1216.57 L1038.22 1216.57 L1038.8 1216.57 L1039.39 1216.57 L1039.98 1216.57 L1040.56 1216.57 L1041.15 1216.57 L1041.73 1216.57 L1042.32 1216.57 L1042.91 1216.57 L1043.49 1216.57 L1044.08 1216.57 L1044.67 1216.57 L1045.25 1216.57 L1045.84 1216.57 L1046.43 1216.57 L1047.01 1216.57 L1047.6 1216.57 L1048.19 1216.57 L1048.77 1216.57 L1049.36 1216.57 L1049.94 1216.57 L1050.53 1216.57 L1051.12 1216.57 L1051.7 1216.57 L1052.29 1216.57 L1052.88 1216.57 L1053.46 1216.57 L1054.05 1216.57 L1054.64 1216.57 L1055.22 1216.57 L1055.81 1216.57 L1056.39 1216.57 L1056.98 1216.57 L1057.57 1216.57 L1058.15 1216.57 L1058.74 1216.57 L1059.33 1216.57 L1059.91 1216.57 L1060.5 1216.57 L1061.09 1216.57 L1061.67 1216.57 L1062.26 1216.57 L1062.85 1216.57 L1063.43 1216.57 L1064.02 1216.57 L1064.6 1216.57 L1065.19 1216.57 L1065.78 1216.57 L1066.36 1216.57 L1066.95 1216.57 L1067.54 1216.57 L1068.12 1216.57 L1068.71 1216.57 L1069.3 1216.57 L1069.88 1216.57 L1070.47 1216.57 L1071.06 1216.57 L1071.64 1216.57 L1072.23 1216.57 L1072.81 1216.57 L1073.4 1216.57 L1073.99 1216.57 L1074.57 1216.57 L1075.16 1216.57 L1075.75 1216.57 L1076.33 1216.57 L1076.92 1216.57 L1077.51 1216.57 L1078.09 1216.57 L1078.68 1216.57 L1079.26 1216.57 L1079.85 1216.57 L1080.44 1216.57 L1081.02 1216.57 L1081.61 1216.57 L1082.2 1216.57 L1082.78 1216.57 L1083.37 1216.57 L1083.96 1216.57 L1084.54 1216.57 L1085.13 1216.57 L1085.72 1216.57 L1086.3 1216.57 L1086.89 1216.57 L1087.47 1216.57 L1088.06 1216.57 L1088.65 1216.57 L1089.23 1216.57 L1089.82 1216.57 L1090.41 1216.57 L1090.99 1216.57 L1091.58 1216.57 L1092.17 1216.57 L1092.75 1216.57 L1093.34 1216.57 L1093.93 1216.57 L1094.51 1216.57 L1095.1 1216.57 L1095.68 1216.57 L1096.27 1216.57 L1096.86 1216.57 L1097.44 1216.57 L1098.03 1216.57 L1098.62 1216.57 L1099.2 1216.57 L1099.79 1216.57 L1100.38 1216.57 L1100.96 1216.57 L1101.55 1216.57 L1102.14 1216.57 L1102.72 1216.57 L1103.31 1216.57 L1103.89 1216.57 L1104.48 1216.57 L1105.07 1216.57 L1105.65 1216.57 L1106.24 1216.57 L1106.83 1216.57 L1107.41 1216.57 L1108 1216.57 L1108.59 1216.57 L1109.17 1216.57 L1109.76 1216.57 L1110.34 1216.57 L1110.93 1216.57 L1111.52 1216.57 L1112.1 1216.57 L1112.69 1216.57 L1113.28 1216.57 L1113.86 1216.57 L1114.45 1216.57 L1115.04 1216.57 L1115.62 1216.57 L1116.21 1216.57 L1116.8 1216.57 L1117.38 1216.57 L1117.97 1216.57 L1118.55 1216.57 L1119.14 1216.57 L1119.73 1216.57 L1120.31 1216.57 L1120.9 1216.57 L1121.49 1216.57 L1122.07 1216.57 L1122.66 1216.57 L1123.25 1216.57 L1123.83 1216.57 L1124.42 1216.57 L1125.01 1216.57 L1125.59 1216.57 L1126.18 1216.57 L1126.76 1216.57 L1127.35 1216.57 L1127.94 1216.57 L1128.52 1216.57 L1129.11 1216.57 L1129.7 1216.57 L1130.28 1216.57 L1130.87 1216.57 L1131.46 1216.57 L1132.04 1216.57 L1132.63 1216.57 L1133.21 1216.57 L1133.8 1216.57 L1134.39 1216.57 L1134.97 1216.57 L1135.56 1216.57 L1136.15 1216.57 L1136.73 1216.57 L1137.32 1216.57 L1137.91 1216.57 L1138.49 1216.57 L1139.08 1216.57 L1139.67 1216.57 L1140.25 1216.57 L1140.84 1216.57 L1141.42 1216.57 L1142.01 1216.57 L1142.6 1216.57 L1143.18 1216.57 L1143.77 1216.57 L1144.36 1216.57 L1144.94 1216.57 L1145.53 1216.57 L1146.12 1216.57 L1146.7 1216.57 L1147.29 1216.57 L1147.88 1216.57 L1148.46 1216.57 L1149.05 1216.57 L1149.63 1216.57 L1150.22 1216.57 L1150.81 1216.57 L1151.39 1216.57 L1151.98 1216.57 L1152.57 1216.57 L1153.15 1216.57 L1153.74 1216.57 L1154.33 1216.57 L1154.91 1216.57 L1155.5 1216.57 L1156.09 1216.57 L1156.67 1216.57 L1157.26 1216.57 L1157.84 1216.57 L1158.43 1216.57 L1159.02 1216.57 L1159.6 1216.57 L1160.19 1216.57 L1160.78 1216.57 L1161.36 1216.57 L1161.95 1216.57 L1162.54 1216.57 L1163.12 1216.57 L1163.71 1216.57 L1164.29 1216.57 L1164.88 1216.57 L1165.47 1216.57 L1166.05 1216.57 L1166.64 1216.57 L1167.23 1216.57 L1167.81 1216.57 L1168.4 1216.57 L1168.99 1216.57 L1169.57 1216.57 L1170.16 1216.57 L1170.75 1216.57 L1171.33 1216.57 L1171.92 1216.57 L1172.5 1216.57 L1173.09 1216.57 L1173.68 1216.57 L1174.26 1216.57 L1174.85 1216.57 L1175.44 1216.57 L1176.02 1216.57 L1176.61 1216.57 L1177.2 1216.57 L1177.78 1216.57 L1178.37 1216.57 L1178.96 1216.57 L1179.54 1216.57 L1180.13 1216.57 L1180.71 1216.57 L1181.3 1216.57 L1181.89 1216.57 L1182.47 1216.57 L1183.06 1216.57 L1183.65 1216.57 L1184.23 1216.57 L1184.82 1216.57 L1185.41 1216.57 L1185.99 1216.57 L1186.58 1216.57 L1187.16 1216.57 L1187.75 1216.57 L1188.34 1216.57 L1188.92 1216.57 L1189.51 1216.57 L1190.1 1216.57 L1190.68 1216.57 L1191.27 1216.57 L1191.86 1216.57 L1192.44 1216.57 L1193.03 1216.57 L1193.62 1216.57 L1194.2 1216.57 L1194.79 1216.57 L1195.37 1216.57 L1195.96 1216.57 L1196.55 1216.57 L1197.13 1216.57 L1197.72 1216.57 L1198.31 1216.57 L1198.89 1216.57 L1199.48 1216.57 L1200.07 1216.57 L1200.65 1216.57 L1201.24 1216.57 L1201.83 1216.57 L1202.41 1216.57 L1203 1216.57 L1203.58 1216.57 L1204.17 1216.57 L1204.76 1216.57 L1205.34 1216.57 L1205.93 1216.57 L1206.52 1216.57 L1207.1 1216.57 L1207.69 1216.57 L1208.28 1216.57 L1208.86 1216.57 L1209.45 1216.57 L1210.03 1216.57 L1210.62 1216.57 L1211.21 1216.57 L1211.79 1216.57 L1212.38 1216.57 L1212.97 1216.57 L1213.55 1216.57 L1214.14 1216.57 L1214.73 1216.57 L1215.31 1216.57 L1215.9 1216.57 L1216.49 1216.57 L1217.07 1216.57 L1217.66 1216.57 L1218.24 1216.57 L1218.83 1216.57 L1219.42 1216.57 L1220 1216.57 L1220.59 1216.57 L1221.18 1216.57 L1221.76 1216.57 L1222.35 1216.57 L1222.94 1216.57 L1223.52 1216.57 L1224.11 1216.57 L1224.7 1216.57 L1225.28 1216.57 L1225.87 1216.57 L1226.45 1216.57 L1227.04 1216.57 L1227.63 1216.57 L1228.21 1216.57 L1228.8 1216.57 L1229.39 1216.57 L1229.97 1216.57 L1230.56 1216.57 L1231.15 1216.57 L1231.73 1216.57 L1232.32 1216.57 L1232.91 1216.57 L1233.49 1216.57 L1234.08 1216.57 L1234.66 1216.57 L1235.25 1216.57 L1235.84 1216.57 L1236.42 1216.57 L1237.01 1216.57 L1237.6 1216.57 L1238.18 1216.57 L1238.77 1216.57 L1239.36 1216.57 L1239.94 1216.57 L1240.53 1216.57 L1241.11 1216.57 L1241.7 1216.57 L1242.29 1216.57 L1242.87 1216.57 L1243.46 1216.57 L1244.05 1216.57 L1244.63 1216.57 L1245.22 1216.57 L1245.81 1216.57 L1246.39 1216.57 L1246.98 1216.57 L1247.57 1216.57 L1248.15 1216.57 L1248.74 1216.57 L1249.32 1216.57 L1249.91 1216.57 L1250.5 1216.57 L1251.08 1216.57 L1251.67 1216.57 L1252.26 1216.57 L1252.84 1216.57 L1253.43 1216.57 L1254.02 1216.57 L1254.6 1216.57 L1255.19 1216.57 L1255.78 1216.57 L1256.36 1216.57 L1256.95 1216.57 L1257.53 1216.57 L1258.12 1216.57 L1258.71 1216.57 L1259.29 1216.57 L1259.88 1216.57 L1260.47 1216.57 L1261.05 1216.57 L1261.64 1216.57 L1262.23 1216.57 L1262.81 1216.57 L1263.4 1216.57 L1263.98 1216.57 L1264.57 1216.57 L1265.16 1216.57 L1265.74 1216.57 L1266.33 1216.57 L1266.92 1216.57 L1267.5 1216.57 L1268.09 1216.57 L1268.68 1216.57 L1269.26 1216.57 L1269.85 1216.57 L1270.44 1216.57 L1271.02 1216.57 L1271.61 1216.57 L1272.19 1216.57 L1272.78 1216.57 L1273.37 1216.57 L1273.95 1216.57 L1274.54 1216.57 L1275.13 1216.57 L1275.71 1216.57 L1276.3 1216.57 L1276.89 1216.57 L1277.47 1216.57 L1278.06 1216.57 L1278.65 1216.57 L1279.23 1216.57 L1279.82 1216.57 L1280.4 1216.57 L1280.99 1216.57 L1281.58 1216.57 L1282.16 1216.57 L1282.75 1216.57 L1283.34 1216.57 L1283.92 1216.57 L1284.51 1216.57 L1285.1 1216.57 L1285.68 1216.57 L1286.27 1216.57 L1286.86 1216.57 L1287.44 1216.57 L1288.03 1216.57 L1288.61 1216.57 L1289.2 1216.57 L1289.79 1216.57 L1290.37 1216.57 L1290.96 1216.57 L1291.55 1216.57 L1292.13 1216.57 L1292.72 1216.57 L1293.31 1216.57 L1293.89 1216.57 L1294.48 1216.57 L1295.06 1216.57 L1295.65 1216.57 L1296.24 1216.57 L1296.82 1216.57 L1297.41 1216.57 L1298 1216.57 L1298.58 1216.57 L1299.17 1216.57 L1299.76 1216.57 L1300.34 1216.57 L1300.93 1216.57 L1301.52 1216.57 L1302.1 1216.57 L1302.69 1216.57 L1303.27 1216.57 L1303.86 1216.57 L1304.45 1216.57 L1305.03 1216.57 L1305.62 1216.57 L1306.21 1216.57 L1306.79 1216.57 L1307.38 1216.57 L1307.97 1216.57 L1308.55 1216.57 L1309.14 1216.57 L1309.73 1216.57 L1310.31 1216.57 L1310.9 1216.57 L1311.48 1216.57 L1312.07 1216.57 L1312.66 1216.57 L1313.24 1216.57 L1313.83 1216.57 L1314.42 1216.57 L1315 1216.57 L1315.59 1216.57 L1316.18 1216.57 L1316.76 1216.57 L1317.35 1216.57 L1317.93 1216.57 L1318.52 1216.57 L1319.11 1216.57 L1319.69 1216.57 L1320.28 1216.57 L1320.87 1216.57 L1321.45 1216.57 L1322.04 1216.57 L1322.63 1216.57 L1323.21 1216.57 L1323.8 1216.57 L1324.39 1216.57 L1324.97 1216.57 L1325.56 1216.57 L1326.14 1216.57 L1326.73 1216.57 L1327.32 1216.57 L1327.9 1216.57 L1328.49 1216.57 L1329.08 1216.57 L1329.66 1216.57 L1330.25 1216.57 L1330.84 1216.57 L1331.42 1216.57 L1332.01 1216.57 L1332.6 1216.57 L1333.18 1216.57 L1333.77 1216.57 L1334.35 1216.57 L1334.94 1216.57 L1335.53 1216.57 L1336.11 1216.57 L1336.7 1216.57 L1337.29 1216.57 L1337.87 1216.57 L1338.46 1216.57 L1339.05 1216.57 L1339.63 1216.57 L1340.22 1216.57 L1340.8 1216.57 L1341.39 1216.57 L1341.98 1216.57 L1342.56 1216.57 L1343.15 1216.57 L1343.74 1216.57 L1344.32 1216.57 L1344.91 1216.57 L1345.5 1216.57 L1346.08 1216.57 L1346.67 1216.57 L1347.26 1216.57 L1347.84 1216.57 L1348.43 1216.57 L1349.01 1216.57 L1349.6 1216.57 L1350.19 1216.57 L1350.77 1216.57 L1351.36 1216.57 L1351.95 1216.57 L1352.53 1216.57 L1353.12 1216.57 L1353.71 1216.57 L1354.29 1216.57 L1354.88 1216.57 L1355.47 1216.57 L1356.05 1216.57 L1356.64 1216.57 L1357.22 1216.57 L1357.81 1216.57 L1358.4 1216.57 L1358.98 1216.57 L1359.57 1216.57 L1360.16 1216.57 L1360.74 1216.57 L1361.33 1216.57 L1361.92 1216.57 L1362.5 1216.57 L1363.09 1216.57 L1363.68 1216.57 L1364.26 1216.57 L1364.85 1216.57 L1365.43 1216.57 L1366.02 1216.57 L1366.61 1216.57 L1367.19 1216.57 L1367.78 1216.57 L1368.37 1216.57 L1368.95 1216.57 L1369.54 1216.57 L1370.13 1216.57 L1370.71 1216.57 L1371.3 1216.57 L1371.88 1216.57 L1372.47 1216.57 L1373.06 1216.57 L1373.64 1216.57 L1374.23 1216.57 L1374.82 1216.57 L1375.4 1216.57 L1375.99 1216.57 L1376.58 1216.57 L1377.16 1216.57 L1377.75 1216.57 L1378.34 1216.57 L1378.92 1216.57 L1379.51 1216.57 L1380.09 1216.57 L1380.68 1216.57 L1381.27 1216.57 L1381.85 1216.57 L1382.44 1216.57 L1383.03 1216.57 L1383.61 1216.57 L1384.2 1216.57 L1384.79 1216.57 L1385.37 1216.57 L1385.96 1216.57 L1386.55 1216.57 L1387.13 1216.57 L1387.72 1216.57 L1388.3 1216.57 L1388.89 1216.57 L1389.48 1216.57 L1390.06 1216.57 L1390.65 1216.57 L1391.24 1216.57 L1391.82 1216.57 L1392.41 1216.57 L1393 1216.57 L1393.58 1216.57 L1394.17 1216.57 L1394.75 1216.57 L1395.34 1216.57 L1395.93 1216.57 L1396.51 1216.57 L1397.1 1216.57 L1397.69 1216.57 L1398.27 1216.57 L1398.86 1216.57 L1399.45 1216.57 L1400.03 1216.57 L1400.62 1216.57 L1401.21 1216.57 L1401.79 1216.57 L1402.38 1216.57 L1402.96 1216.57 L1403.55 1216.57 L1404.14 1216.57 L1404.72 1216.57 L1405.31 1216.57 L1405.9 1216.57 L1406.48 1216.57 L1407.07 1216.57 L1407.66 1216.57 L1408.24 1216.57 L1408.83 1216.57 L1409.42 1216.57 L1410 1216.57 L1410.59 1216.57 L1411.17 1216.57 L1411.76 1216.57 L1412.35 1216.57 L1412.93 1216.57 L1413.52 1216.57 L1414.11 1216.57 L1414.69 1216.57 L1415.28 1216.57 L1415.87 1216.57 L1416.45 1216.57 L1417.04 1216.57 L1417.63 1216.57 L1418.21 1216.57 L1418.8 1216.57 L1419.38 1216.57 L1419.97 1216.57 L1420.56 1216.57 L1421.14 1216.57 L1421.73 1216.57 L1422.32 1216.57 L1422.9 1216.57 L1423.49 1216.57 L1424.08 1216.57 L1424.66 1216.57 L1425.25 1216.57 L1425.83 1216.57 L1426.42 1216.57 L1427.01 1216.57 L1427.59 1216.57 L1428.18 1216.57 L1428.77 1216.57 L1429.35 1216.57 L1429.94 1216.57 L1430.53 1216.57 L1431.11 1216.57 L1431.7 1216.57 L1432.29 1216.57 L1432.87 1216.57 L1433.46 1216.57 L1434.04 1216.57 L1434.63 1216.57 L1435.22 1216.57 L1435.8 1216.57 L1436.39 1216.57 L1436.98 1216.57 L1437.56 1216.57 L1438.15 1216.57 L1438.74 1216.57 L1439.32 1216.57 L1439.91 1216.57 L1440.5 1216.57 L1441.08 1216.57 L1441.67 1216.57 L1442.25 1216.57 L1442.84 1216.57 L1443.43 1216.57 L1444.01 1216.57 L1444.6 1216.57 L1445.19 1216.57 L1445.77 1216.57 L1446.36 1216.57 L1446.95 1216.57 L1447.53 1216.57 L1448.12 1216.57 L1448.7 1216.57 L1449.29 1216.57 L1449.88 1216.57 L1450.46 1216.57 L1451.05 1216.57 L1451.64 1216.57 L1452.22 1216.57 L1452.81 1216.57 L1453.4 1216.57 L1453.98 1216.57 L1454.57 1216.57 L1455.16 1216.57 L1455.74 1216.57 L1456.33 1216.57 L1456.91 1216.57 L1457.5 1216.57 L1458.09 1216.57 L1458.67 1216.57 L1459.26 1216.57 L1459.85 1216.57 L1460.43 1216.57 L1461.02 1216.57 L1461.61 1216.57 L1462.19 1216.57 L1462.78 1216.57 L1463.37 1216.57 L1463.95 1216.57 L1464.54 1216.57 L1465.12 1216.57 L1465.71 1216.57 L1466.3 1216.57 L1466.88 1216.57 L1467.47 1216.57 L1468.06 1216.57 L1468.64 1216.57 L1469.23 1216.57 L1469.82 1216.57 L1470.4 1216.57 L1470.99 1216.57 L1471.57 1216.57 L1472.16 1216.57 L1472.75 1216.57 L1473.33 1216.57 L1473.92 1216.57 L1474.51 1216.57 L1475.09 1216.57 L1475.68 1216.57 L1476.27 1216.57 L1476.85 1216.57 L1477.44 1216.57 L1478.03 1216.57 L1478.61 1216.57 L1479.2 1216.57 L1479.78 1216.57 L1480.37 1216.57 L1480.96 1216.57 L1481.54 1216.57 L1482.13 1216.57 L1482.72 1216.57 L1483.3 1216.57 L1483.89 1216.57 L1484.48 1216.57 L1485.06 1216.57 L1485.65 1216.57 L1486.24 1216.57 L1486.82 1216.57 L1487.41 1216.57 L1487.99 1216.57 L1488.58 1216.57 L1489.17 1216.57 L1489.75 1216.57 L1490.34 1216.57 L1490.93 1216.57 L1491.51 1216.57 L1492.1 1216.57 L1492.69 1216.57 L1493.27 1216.57 L1493.86 1216.57 L1494.45 1216.57 L1495.03 1216.57 L1495.62 1216.57 L1496.2 1216.57 L1496.79 1216.57 L1497.38 1216.57 L1497.96 1216.57 L1498.55 1216.57 L1499.14 1216.57 L1499.72 1216.57 L1500.31 1216.57 L1500.9 1216.57 L1501.48 1216.57 L1502.07 1216.57 L1502.65 1216.57 L1503.24 1216.57 L1503.83 1216.57 L1504.41 1216.57 L1505 1216.57 L1505.59 1216.57 L1506.17 1216.57 L1506.76 1216.57 L1507.35 1216.57 L1507.93 1216.57 L1508.52 1216.57 L1509.11 1216.57 L1509.69 1216.57 L1510.28 1216.57 L1510.86 1216.57 L1511.45 1216.57 L1512.04 1216.57 L1512.62 1216.57 L1513.21 1216.57 L1513.8 1216.57 L1514.38 1216.57 L1514.97 1216.57 L1515.56 1216.57 L1516.14 1216.57 L1516.73 1216.57 L1517.32 1216.57 L1517.9 1216.57 L1518.49 1216.57 L1519.07 1216.57 L1519.66 1216.57 L1520.25 1216.57 L1520.83 1216.57 L1521.42 1216.57 L1522.01 1216.57 L1522.59 1216.57 L1523.18 1216.57 L1523.77 1216.57 L1524.35 1216.57 L1524.94 1216.57 L1525.52 1216.57 L1526.11 1216.57 L1526.7 1216.57 L1527.28 1216.57 L1527.87 1216.57 L1528.46 1216.57 L1529.04 1216.57 L1529.63 1216.57 L1530.22 1216.57 L1530.8 1216.57 L1531.39 1216.57 L1531.98 1216.57 L1532.56 1216.57 L1533.15 1216.57 L1533.73 1216.57 L1534.32 1216.57 L1534.91 1216.57 L1535.49 1216.57 L1536.08 1216.57 L1536.67 1216.57 L1537.25 1216.57 L1537.84 1216.57 L1538.43 1216.57 L1539.01 1216.57 L1539.6 1216.57 L1540.19 1216.57 L1540.77 1216.57 L1541.36 1216.57 L1541.94 1216.57 L1542.53 1216.57 L1543.12 1216.57 L1543.7 1216.57 L1544.29 1216.57 L1544.88 1216.57 L1545.46 1216.57 L1546.05 1216.57 L1546.64 1216.57 L1547.22 1216.57 L1547.81 1216.57 L1548.4 1216.57 L1548.98 1216.57 L1549.57 1216.57 L1550.15 1216.57 L1550.74 1216.57 L1551.33 1216.57 L1551.91 1216.57 L1552.5 1216.57 L1553.09 1216.57 L1553.67 1216.57 L1554.26 1216.57 L1554.85 1216.57 L1555.43 1216.57 L1556.02 1216.57 L1556.6 1216.57 L1557.19 1216.57 L1557.78 1216.57 L1558.36 1216.57 L1558.95 1216.57 L1559.54 1216.57 L1560.12 1216.57 L1560.71 1216.57 L1561.3 1216.57 L1561.88 1216.57 L1562.47 1216.57 L1563.06 1216.57 L1563.64 1216.57 L1564.23 1216.57 L1564.81 1216.57 L1565.4 1216.57 L1565.99 1216.57 L1566.57 1216.57 L1567.16 1216.57 L1567.75 1216.57 L1568.33 1216.57 L1568.92 1216.57 L1569.51 1216.57 L1570.09 1216.57 L1570.68 1216.57 L1571.27 1216.57 L1571.85 1216.57 L1572.44 1216.57 L1573.02 1216.57 L1573.61 1216.57 L1574.2 1216.57 L1574.78 1216.57 L1575.37 1216.57 L1575.96 1216.57 L1576.54 1216.57 L1577.13 1216.57 L1577.72 1216.57 L1578.3 1216.57 L1578.89 1216.57 L1579.47 1216.57 L1580.06 1216.57 L1580.65 1216.57 L1581.23 1216.57 L1581.82 1216.57 L1582.41 1216.57 L1582.99 1216.57 L1583.58 1216.57 L1584.17 1216.57 L1584.75 1216.57 L1585.34 1216.57 L1585.93 1216.57 L1586.51 1216.57 L1587.1 1216.57 L1587.68 1216.57 L1588.27 1216.57 L1588.86 1216.57 L1589.44 1216.57 L1590.03 1216.57 L1590.62 1216.57 L1591.2 1216.57 L1591.79 1216.57 L1592.38 1216.57 L1592.96 1216.57 L1593.55 1216.57 L1594.14 1216.57 L1594.72 1216.57 L1595.31 1216.57 L1595.89 1216.57 L1596.48 1216.57 L1597.07 1216.57 L1597.65 1216.57 L1598.24 1216.57 L1598.83 1216.57 L1599.41 1216.57 L1600 1216.57 L1600.59 1216.57 L1601.17 1216.57 L1601.76 1216.57 L1602.34 1216.57 L1602.93 1216.57 L1603.52 1216.57 L1604.1 1216.57 L1604.69 1216.57 L1605.28 1216.57 L1605.86 1216.57 L1606.45 1216.57 L1607.04 1216.57 L1607.62 1216.57 L1608.21 1216.57 L1608.8 1216.57 L1609.38 1216.57 L1609.97 1216.57 L1610.55 1216.57 L1611.14 1216.57 L1611.73 1216.57 L1612.31 1216.57 L1612.9 1216.57 L1613.49 1216.57 L1614.07 1216.57 L1614.66 1216.57 L1615.25 1216.57 L1615.83 1216.57 L1616.42 1216.57 L1617.01 1216.57 L1617.59 1216.57 L1618.18 1216.57 L1618.76 1216.57 L1619.35 1216.57 L1619.94 1216.57 L1620.52 1216.57 L1621.11 1216.57 L1621.7 1216.57 L1622.28 1216.57 L1622.87 1216.57 L1623.46 1216.57 L1624.04 1216.57 L1624.63 1216.57 L1625.22 1216.57 L1625.8 1216.57 L1626.39 1216.57 L1626.97 1216.57 L1627.56 1216.57 L1628.15 1216.57 L1628.73 1216.57 L1629.32 1216.57 L1629.91 1216.57 L1630.49 1216.57 L1631.08 1216.57 L1631.67 1216.57 L1632.25 1216.57 L1632.84 1216.57 L1633.42 1216.57 L1634.01 1216.57 L1634.6 1216.57 L1635.18 1216.57 L1635.77 1216.57 L1636.36 1216.57 L1636.94 1216.57 L1637.53 1216.57 L1638.12 1216.57 L1638.7 1216.57 L1639.29 1216.57 L1639.88 1216.57 L1640.46 1216.57 L1641.05 1216.57 L1641.63 1216.57 L1642.22 1216.57 L1642.81 1216.57 L1643.39 1216.57 L1643.98 1216.57 L1644.57 1216.57 L1645.15 1216.57 L1645.74 1216.57 L1646.33 1216.57 L1646.91 1216.57 L1647.5 1216.57 L1648.09 1216.57 L1648.67 1216.57 L1649.26 1216.57 L1649.84 1216.57 L1650.43 1216.57 L1651.02 1216.57 L1651.6 1216.57 L1652.19 1216.57 L1652.78 1216.57 L1653.36 1216.57 L1653.95 1216.57 L1654.54 1216.57 L1655.12 1216.57 L1655.71 1216.57 L1656.29 1216.57 L1656.88 1216.57 L1657.47 1216.57 L1658.05 1216.57 L1658.64 1216.57 L1659.23 1216.57 L1659.81 1216.57 L1660.4 1216.57 L1660.99 1216.57 L1661.57 1216.57 L1662.16 1216.57 L1662.75 1216.57 L1663.33 1216.57 L1663.92 1216.57 L1664.5 1216.57 L1665.09 1216.57 L1665.68 1216.57 L1666.26 1216.57 L1666.85 1216.57 L1667.44 1216.57 L1668.02 1216.57 L1668.61 1216.57 L1669.2 1216.57 L1669.78 1216.57 L1670.37 1216.57 L1670.96 1216.57 L1671.54 1216.57 L1672.13 1216.57 L1672.71 1216.57 L1673.3 1216.57 L1673.89 1216.57 L1674.47 1216.57 L1675.06 1216.57 L1675.65 1216.57 L1676.23 1216.57 L1676.82 1216.57 L1677.41 1216.57 L1677.99 1216.57 L1678.58 1216.57 L1679.17 1216.57 L1679.75 1216.57 L1680.34 1216.57 L1680.92 1216.57 L1681.51 1216.57 L1682.1 1216.57 L1682.68 1216.57 L1683.27 1216.57 L1683.86 1216.57 L1684.44 1216.57 L1685.03 1216.57 L1685.62 1216.57 L1686.2 1216.57 L1686.79 1216.57 L1687.37 1216.57 L1687.96 1216.57 L1688.55 1216.57 L1689.13 1216.57 L1689.72 1216.57 L1690.31 1216.57 L1690.89 1216.57 L1691.48 1216.57 L1692.07 1216.57 L1692.65 1216.57 L1693.24 1216.57 L1693.83 1216.57 L1694.41 1216.57 L1695 1216.57 L1695.58 1216.57 L1696.17 1216.57 L1696.76 1216.57 L1697.34 1216.57 L1697.93 1216.57 L1698.52 1216.57 L1699.1 1216.57 L1699.69 1216.57 L1700.28 1216.57 L1700.86 1216.57 L1701.45 1216.57 L1702.04 1216.57 L1702.62 1216.57 L1703.21 1216.57 L1703.79 1216.57 L1704.38 1216.57 L1704.97 1216.57 L1705.55 1216.57 L1706.14 1216.57 L1706.73 1216.57 L1707.31 1216.57 L1707.9 1216.57 L1708.49 1216.57 L1709.07 1216.57 L1709.66 1216.57 L1710.24 1216.57 L1710.83 1216.57 L1711.42 1216.57 L1712 1216.57 L1712.59 1216.57 L1713.18 1216.57 L1713.76 1216.57 L1714.35 1216.57 L1714.94 1216.57 L1715.52 1216.57 L1716.11 1216.57 L1716.7 1216.57 L1717.28 1216.57 L1717.87 1216.57 L1718.45 1216.57 L1719.04 1216.57 L1719.63 1216.57 L1720.21 1216.57 L1720.8 1216.57 L1721.39 1216.57 L1721.97 1216.57 L1722.56 1216.57 L1723.15 1216.57 L1723.73 1216.57 L1724.32 1216.57 L1724.91 1216.57 L1725.49 1216.57 L1726.08 1216.57 L1726.66 1216.57 L1727.25 1216.57 L1727.84 1216.57 L1728.42 1216.57 L1729.01 1216.57 L1729.6 1216.57 L1730.18 1216.57 L1730.77 1216.57 L1731.36 1216.57 L1731.94 1216.57 L1732.53 1216.57 L1733.11 1216.57 L1733.7 1216.57 L1734.29 1216.57 L1734.87 1216.57 L1735.46 1216.57 L1736.05 1216.57 L1736.63 1216.57 L1737.22 1216.57 L1737.81 1216.57 L1738.39 1216.57 L1738.98 1216.57 L1739.57 1216.57 L1740.15 1216.57 L1740.74 1216.57 L1741.32 1216.57 L1741.91 1216.57 L1742.5 1216.57 L1743.08 1216.57 L1743.67 1216.57 L1744.26 1216.57 L1744.84 1216.57 L1745.43 1216.57 L1746.02 1216.57 L1746.6 1216.57 L1747.19 1216.57 L1747.78 1216.57 L1748.36 1216.57 L1748.95 1216.57 L1749.53 1216.57 L1750.12 1216.57 L1750.71 1216.57 L1751.29 1216.57 L1751.88 1216.57 L1752.47 1216.57 L1753.05 1216.57 L1753.64 1216.57 L1754.23 1216.57 L1754.81 1216.57 L1755.4 1216.57 L1755.99 1216.57 L1756.57 1216.57 L1757.16 1216.57 L1757.74 1216.57 L1758.33 1216.57 L1758.92 1216.57 L1759.5 1216.57 L1760.09 1216.57 L1760.68 1216.57 L1761.26 1216.57 L1761.85 1216.57 L1762.44 1216.57 L1763.02 1216.57 L1763.61 1216.57 L1764.19 1216.57 L1764.78 1216.57 L1765.37 1216.57 L1765.95 1216.57 L1766.54 1216.57 L1767.13 1216.57 L1767.71 1216.57 L1768.3 1216.57 L1768.89 1216.57 L1769.47 1216.57 L1770.06 1216.57 L1770.65 1216.57 L1771.23 1216.57 L1771.82 1216.57 L1772.4 1216.57 L1772.99 1216.57 L1773.58 1216.57 L1774.16 1216.57 L1774.75 1216.57 L1775.34 1216.57 L1775.92 1216.57 L1776.51 1216.57 L1777.1 1216.57 L1777.68 1216.57 L1778.27 1216.57 L1778.86 1216.57 L1779.44 1216.57 L1780.03 1216.57 L1780.61 1216.57 L1781.2 1216.57 L1781.79 1216.57 L1782.37 1216.57 L1782.96 1216.57 L1783.55 1216.57 L1784.13 1216.57 L1784.72 1216.57 L1785.31 1216.57 L1785.89 1216.57 L1786.48 1216.57 L1787.06 1216.57 L1787.65 1216.57 L1788.24 1216.57 L1788.82 1216.57 L1789.41 1216.57 L1790 1216.57 L1790.58 1216.57 L1791.17 1216.57 L1791.76 1216.57 L1792.34 1216.57 L1792.93 1216.57 L1793.52 1216.57 L1794.1 1216.57 L1794.69 1216.57 L1795.27 1216.57 L1795.86 1216.57 L1796.45 1216.57 L1797.03 1216.57 L1797.62 1216.57 L1798.21 1216.57 L1798.79 1216.57 L1799.38 1216.57 L1799.97 1216.57 L1800.55 1216.57 L1801.14 1216.57 L1801.73 1216.57 L1802.31 1216.57 L1802.9 1216.57 L1803.48 1216.57 L1804.07 1216.57 L1804.66 1216.57 L1805.24 1216.57 L1805.83 1216.57 L1806.42 1216.57 L1807 1216.57 L1807.59 1216.57 L1808.18 1216.57 L1808.76 1216.57 L1809.35 1216.57 L1809.94 1216.57 L1810.52 1216.57 L1811.11 1216.57 L1811.69 1216.57 L1812.28 1216.57 L1812.87 1216.57 L1813.45 1216.57 L1814.04 1216.57 L1814.63 1216.57 L1815.21 1216.57 L1815.8 1216.57 L1816.39 1216.57 L1816.97 1216.57 L1817.56 1216.57 L1818.14 1216.57 L1818.73 1216.57 L1819.32 1216.57 L1819.9 1216.57 L1820.49 1216.57 L1821.08 1216.57 L1821.66 1216.57 L1822.25 1216.57 L1822.84 1216.57 L1823.42 1216.57 L1824.01 1216.57 L1824.6 1216.57 L1825.18 1216.57 L1825.77 1216.57 L1826.35 1216.57 L1826.94 1216.57 L1827.53 1216.57 L1828.11 1216.57 L1828.7 1216.57 L1829.29 1216.57 L1829.87 1216.57 L1830.46 1216.57 L1831.05 1216.57 L1831.63 1216.57 L1832.22 1216.57 L1832.81 1216.57 L1833.39 1216.57 L1833.98 1216.57 L1834.56 1216.57 L1835.15 1216.57 L1835.74 1216.57 L1836.32 1216.57 L1836.91 1216.57 L1837.5 1216.57 L1838.08 1216.57 L1838.67 1216.57 L1839.26 1216.57 L1839.84 1216.57 L1840.43 1216.57 L1841.01 1216.57 L1841.6 1216.57 L1842.19 1216.57 L1842.77 1216.57 L1843.36 1216.57 L1843.95 1216.57 L1844.53 1216.57 L1845.12 1216.57 L1845.71 1216.57 L1846.29 1216.57 L1846.88 1216.57 L1847.47 1216.57 L1848.05 1216.57 L1848.64 1216.57 L1849.22 1216.57 L1849.81 1216.57 L1850.4 1216.57 L1850.98 1216.57 L1851.57 1216.57 L1852.16 1216.57 L1852.74 1216.57 L1853.33 1216.57 L1853.92 1216.57 L1854.5 1216.57 L1855.09 1216.57 L1855.68 1216.57 L1856.26 1216.57 L1856.85 1216.57 L1857.43 1216.57 L1858.02 1216.57 L1858.61 1216.57 L1859.19 1216.57 L1859.78 1216.57 L1860.37 1216.57 L1860.95 1216.57 L1861.54 1216.57 L1862.13 1216.57 L1862.71 1216.57 L1863.3 1216.57 L1863.88 1216.57 L1864.47 1216.57 L1865.06 1216.57 L1865.64 1216.57 L1866.23 1216.57 L1866.82 1216.57 L1867.4 1216.57 L1867.99 1216.57 L1868.58 1216.57 L1869.16 1216.57 L1869.75 1216.57 L1870.34 1216.57 L1870.92 1216.57 L1871.51 1216.57 L1872.09 1216.57 L1872.68 1216.57 L1873.27 1216.57 L1873.85 1216.57 L1874.44 1216.57 L1875.03 1216.57 L1875.61 1216.57 L1876.2 1216.57 L1876.79 1216.57 L1877.37 1216.57 L1877.96 1216.57 L1878.55 1216.57 L1879.13 1216.57 L1879.72 1216.57 L1880.3 1216.57 L1880.89 1216.57 L1881.48 1216.57 L1882.06 1216.57 L1882.65 1216.57 L1883.24 1216.57 L1883.82 1216.57 L1884.41 1216.57 L1885 1216.57 L1885.58 1216.57 L1886.17 1216.57 L1886.76 1216.57 L1887.34 1216.57 L1887.93 1216.57 L1888.51 1216.57 L1889.1 1216.57 L1889.69 1216.57 L1890.27 1216.57 L1890.86 1216.57 L1891.45 1216.57 L1892.03 1216.57 L1892.62 1216.57 L1893.21 1216.57 L1893.79 1216.57 L1894.38 1216.57 L1894.96 1216.57 L1895.55 1216.57 L1896.14 1216.57 L1896.72 1216.57 L1897.31 1216.57 L1897.9 1216.57 L1898.48 1216.57 L1899.07 1216.57 L1899.66 1216.57 L1900.24 1216.57 L1900.83 1216.57 L1901.42 1216.57 L1902 1216.57 L1902.59 1216.57 L1903.17 1216.57 L1903.76 1216.57 L1904.35 1216.57 L1904.93 1216.57 L1905.52 1216.57 L1906.11 1216.57 L1906.69 1216.57 L1907.28 1216.57 L1907.87 1216.57 L1908.45 1216.57 L1909.04 1216.57 L1909.63 1216.57 L1910.21 1216.57 L1910.8 1216.57 L1911.38 1216.57 L1911.97 1216.57 L1912.56 1216.57 L1913.14 1216.57 L1913.73 1216.57 L1914.32 1216.57 L1914.9 1216.57 L1915.49 1216.57 L1916.08 1216.57 L1916.66 1216.57 L1917.25 1216.57 L1917.83 1216.57 L1918.42 1216.57 L1919.01 1216.57 L1919.59 1216.57 L1920.18 1216.57 L1920.77 1216.57 L1921.35 1216.57 L1921.94 1216.57 L1922.53 1216.57 L1923.11 1216.57 L1923.7 1216.57 L1924.29 1216.57 L1924.87 1216.57 L1925.46 1216.57 L1926.04 1216.57 L1926.63 1216.57 L1927.22 1216.57 L1927.8 1216.57 L1928.39 1216.57 L1928.98 1216.57 L1929.56 1216.57 L1930.15 1216.57 L1930.74 1216.57 L1931.32 1216.57 L1931.91 1216.57 L1932.5 1216.57 L1933.08 1216.57 L1933.67 1216.57 L1934.25 1216.57 L1934.84 1216.57 L1935.43 1216.57 L1936.01 1216.57 L1936.6 1216.57 L1937.19 1216.57 L1937.77 1216.57 L1938.36 1216.57 L1938.95 1216.57 L1939.53 1216.57 L1940.12 1216.57 L1940.71 1216.57 L1941.29 1216.57 L1941.88 1216.57 L1942.46 1216.57 L1943.05 1216.57 L1943.64 1216.57 L1944.22 1216.57 L1944.81 1216.57 L1945.4 1216.57 L1945.98 1216.57 L1946.57 1216.57 L1947.16 1216.57 L1947.74 1216.57 L1948.33 1216.57 L1948.91 1216.57 L1949.5 1216.57 L1950.09 1216.57 L1950.67 1216.57 L1951.26 1216.57 L1951.85 1216.57 L1952.43 1216.57 L1953.02 1216.57 L1953.61 1216.57 L1954.19 1216.57 L1954.78 1216.57 L1955.37 1216.57 L1955.95 1216.57 L1956.54 1216.57 L1957.12 1216.57 L1957.71 1216.57 L1958.3 1216.57 L1958.88 1216.57 L1959.47 1216.57 L1960.06 1216.57 L1960.64 1216.57 L1961.23 1216.57 L1961.82 1216.57 L1962.4 1216.57 L1962.99 1216.57 L1963.58 1216.57 L1964.16 1216.57 L1964.75 1216.57 L1965.33 1216.57 L1965.92 1216.57 L1966.51 1216.57 L1967.09 1216.57 L1967.68 1216.57 L1968.27 1216.57 L1968.85 1216.57 L1969.44 1216.57 L1970.03 1216.57 L1970.61 1216.57 L1971.2 1216.57 L1971.78 1216.57 L1972.37 1216.57 L1972.96 1216.57 L1973.54 1216.57 L1974.13 1216.57 L1974.72 1216.57 L1975.3 1216.57 L1975.89 1216.57 L1976.48 1216.57 L1977.06 1216.57 L1977.65 1216.57 L1978.24 1216.57 L1978.82 1216.57 L1979.41 1216.57 L1979.99 1216.57 L1980.58 1216.57 L1981.17 1216.57 L1981.75 1216.57 L1982.34 1216.57 L1982.93 1216.57 L1983.51 1216.57 L1984.1 1216.57 L1984.69 1216.57 L1985.27 1216.57 L1985.86 1216.57 L1986.45 1216.57 L1987.03 1216.57 L1987.62 1216.57 L1988.2 1216.57 L1988.79 1216.57 L1989.38 1216.57 L1989.96 1216.57 L1990.55 1216.57 L1991.14 1216.57 L1991.72 1216.57 L1992.31 1216.57 L1992.9 1216.57 L1993.48 1216.57 L1994.07 1216.57 L1994.65 1216.57 L1995.24 1216.57 L1995.83 1216.57 L1996.41 1216.57 L1997 1216.57 L1997.59 1216.57 L1998.17 1216.57 L1998.76 1216.57 L1999.35 1216.57 L1999.93 1216.57 L2000.52 1216.57 L2001.11 1216.57 L2001.69 1216.57 L2002.28 1216.57 L2002.86 1216.57 L2003.45 1216.57 L2004.04 1216.57 L2004.62 1216.57 L2005.21 1216.57 L2005.8 1216.57 L2006.38 1216.57 L2006.97 1216.57 L2007.56 1216.57 L2008.14 1216.57 L2008.73 1216.57 L2009.32 1216.57 L2009.9 1216.57 L2010.49 1216.57 L2011.07 1216.57 L2011.66 1216.57 L2012.25 1216.57 L2012.83 1216.57 L2013.42 1216.57 L2014.01 1216.57 L2014.59 1216.57 L2015.18 1216.57 L2015.77 1216.57 L2016.35 1216.57 L2016.94 1216.57 L2017.53 1216.57 L2018.11 1216.57 L2018.7 1216.57 L2019.28 1216.57 L2019.87 1216.57 L2020.46 1216.57 L2021.04 1216.57 L2021.63 1216.57 L2022.22 1216.57 L2022.8 1216.57 L2023.39 1216.57 L2023.98 1216.57 L2024.56 1216.57 L2025.15 1216.57 L2025.73 1216.57 L2026.32 1216.57 L2026.91 1216.57 L2027.49 1216.57 L2028.08 1216.57 L2028.67 1216.57 L2029.25 1216.57 L2029.84 1216.57 L2030.43 1216.57 L2031.01 1216.57 L2031.6 1216.57 L2032.19 1216.57 L2032.77 1216.57 L2033.36 1216.57 L2033.94 1216.57 L2034.53 1216.57 L2035.12 1216.57 L2035.7 1216.57 L2036.29 1216.57 L2036.88 1216.57 L2037.46 1216.57 L2038.05 1216.57 L2038.64 1216.57 L2039.22 1216.57 L2039.81 1216.57 L2040.4 1216.57 L2040.98 1216.57 L2041.57 1216.57 L2042.15 1216.57 L2042.74 1216.57 L2043.33 1216.57 L2043.91 1216.57 L2044.5 1216.57 L2045.09 1216.57 L2045.67 1216.57 L2046.26 1216.57 L2046.85 1216.57 L2047.43 1216.57 L2048.02 1216.57 L2048.6 1216.57 L2049.19 1216.57 L2049.78 1216.57 L2050.36 1216.57 L2050.95 1216.57 L2051.54 1216.57 L2052.12 1216.57 L2052.71 1216.57 L2053.3 1216.57 L2053.88 1216.57 L2054.47 1216.57 L2055.06 1216.57 L2055.64 1216.57 L2056.23 1216.57 L2056.81 1216.57 L2057.4 1216.57 L2057.99 1216.57 L2058.57 1216.57 L2059.16 1216.57 L2059.75 1216.57 L2060.33 1216.57 L2060.92 1216.57 L2061.51 1216.57 L2062.09 1216.57 L2062.68 1216.57 L2063.27 1216.57 L2063.85 1216.57 L2064.44 1216.57 L2065.02 1216.57 L2065.61 1216.57 L2066.2 1216.57 L2066.78 1216.57 L2067.37 1216.57 L2067.96 1216.57 L2068.54 1216.57 L2069.13 1216.57 L2069.72 1216.57 L2070.3 1216.57 L2070.89 1216.57 L2071.48 1216.57 L2072.06 1216.57 L2072.65 1216.57 L2073.23 1216.57 L2073.82 1216.57 L2074.41 1216.57 L2074.99 1216.57 L2075.58 1216.57 L2076.17 1216.57 L2076.75 1216.57 L2077.34 1216.57 L2077.93 1216.57 L2078.51 1216.57 L2079.1 1216.57 L2079.68 1216.57 L2080.27 1216.57 L2080.86 1216.57 L2081.44 1216.57 L2082.03 1216.57 L2082.62 1216.57 L2083.2 1216.57 L2083.79 1216.57 L2084.38 1216.57 L2084.96 1216.57 L2085.55 1216.57 L2086.14 1216.57 L2086.72 1216.57 L2087.31 1216.57 L2087.89 1216.57 L2088.48 1216.57 L2089.07 1216.57 L2089.65 1216.57 L2090.24 1216.57 L2090.83 1216.57 L2091.41 1216.57 L2092 1216.57 L2092.59 1216.57 L2093.17 1216.57 L2093.76 1216.57 L2094.35 1216.57 L2094.93 1216.57 L2095.52 1216.57 L2096.1 1216.57 L2096.69 1216.57 L2097.28 1216.57 L2097.86 1216.57 L2098.45 1216.57 L2099.04 1216.57 L2099.62 1216.57 L2100.21 1216.57 L2100.8 1216.57 L2101.38 1216.57 L2101.97 1216.57 L2102.55 1216.57 L2103.14 1216.57 L2103.73 1216.57 L2104.31 1216.57 L2104.9 1216.57 L2105.49 1216.57 L2106.07 1216.57 L2106.66 1216.57 L2107.25 1216.57 L2107.83 1216.57 L2108.42 1216.57 L2109.01 1216.57 L2109.59 1216.57 L2110.18 1216.57 L2110.76 1216.57 L2111.35 1216.57 L2111.94 1216.57 L2112.52 1216.57 L2113.11 1216.57 L2113.7 1216.57 L2114.28 1216.57 L2114.87 1216.57 L2115.46 1216.57 L2116.04 1216.57 L2116.63 1216.57 L2117.22 1216.57 L2117.8 1216.57 L2118.39 1216.57 L2118.97 1216.57 L2119.56 1216.57 L2120.15 1216.57 L2120.73 1216.57 L2121.32 1216.57 L2121.91 1216.57 L2122.49 1216.57 L2123.08 1216.57 L2123.67 1216.57 L2124.25 1216.57 L2124.84 1216.57 L2125.42 1216.57 L2126.01 1216.57 L2126.6 1216.57 L2127.18 1216.57 L2127.77 1216.57 L2128.36 1216.57 L2128.94 1216.57 L2129.53 1216.57 L2130.12 1216.57 L2130.7 1216.57 L2131.29 1216.57 L2131.88 1216.57 L2132.46 1216.57 L2133.05 1216.57 L2133.63 1216.57 L2134.22 1216.57 L2134.81 1216.57 L2135.39 1216.57 L2135.98 1216.57 L2136.57 1216.57 L2137.15 1216.57 L2137.74 1216.57 L2138.33 1216.57 L2138.91 1216.57 L2139.5 1216.57 L2140.09 1216.57 L2140.67 1216.57 L2141.26 1216.57 L2141.84 1216.57 L2142.43 1216.57 L2143.02 1216.57 L2143.6 1216.57 L2144.19 1216.57 L2144.78 1216.57 L2145.36 1216.57 L2145.95 1216.57 L2146.54 1216.57 L2147.12 1216.57 L2147.71 1216.57 L2148.3 1216.57 L2148.88 1216.57 L2149.47 1216.57 L2150.05 1216.57 L2150.64 1216.57 L2151.23 1216.57 L2151.81 1216.57 L2152.4 1216.57 L2152.99 1216.57 L2153.57 1216.57 L2154.16 1216.57 L2154.75 1216.57 L2155.33 1216.57 L2155.92 1216.57 L2156.5 1216.57 L2157.09 1216.57 L2157.68 1216.57 L2158.26 1216.57 L2158.26 1215.89 L2157.68 1215.89 L2157.09 1215.89 L2156.5 1215.89 L2155.92 1215.89 L2155.33 1215.89 L2154.75 1215.89 L2154.16 1215.89 L2153.57 1215.89 L2152.99 1215.89 L2152.4 1215.89 L2151.81 1215.89 L2151.23 1215.89 L2150.64 1215.89 L2150.05 1215.89 L2149.47 1215.89 L2148.88 1215.89 L2148.3 1215.89 L2147.71 1215.89 L2147.12 1215.89 L2146.54 1215.89 L2145.95 1215.89 L2145.36 1215.89 L2144.78 1215.89 L2144.19 1215.89 L2143.6 1215.89 L2143.02 1215.89 L2142.43 1215.89 L2141.84 1215.89 L2141.26 1215.89 L2140.67 1215.89 L2140.09 1215.89 L2139.5 1215.89 L2138.91 1215.89 L2138.33 1215.89 L2137.74 1215.89 L2137.15 1215.89 L2136.57 1215.89 L2135.98 1215.89 L2135.39 1215.89 L2134.81 1215.89 L2134.22 1215.89 L2133.63 1215.89 L2133.05 1215.89 L2132.46 1215.89 L2131.88 1215.89 L2131.29 1215.89 L2130.7 1215.89 L2130.12 1215.89 L2129.53 1215.89 L2128.94 1215.89 L2128.36 1215.89 L2127.77 1215.89 L2127.18 1215.89 L2126.6 1215.89 L2126.01 1215.89 L2125.42 1215.89 L2124.84 1215.89 L2124.25 1215.89 L2123.67 1215.89 L2123.08 1215.89 L2122.49 1215.89 L2121.91 1215.89 L2121.32 1215.89 L2120.73 1215.89 L2120.15 1215.89 L2119.56 1215.89 L2118.97 1215.89 L2118.39 1215.89 L2117.8 1215.89 L2117.22 1215.89 L2116.63 1215.89 L2116.04 1215.89 L2115.46 1215.89 L2114.87 1215.89 L2114.28 1215.89 L2113.7 1215.89 L2113.11 1215.89 L2112.52 1215.89 L2111.94 1215.89 L2111.35 1215.89 L2110.76 1215.89 L2110.18 1215.89 L2109.59 1215.89 L2109.01 1215.89 L2108.42 1215.89 L2107.83 1215.89 L2107.25 1215.89 L2106.66 1215.89 L2106.07 1215.89 L2105.49 1215.89 L2104.9 1215.89 L2104.31 1215.89 L2103.73 1215.89 L2103.14 1215.89 L2102.55 1215.89 L2101.97 1215.89 L2101.38 1215.89 L2100.8 1215.89 L2100.21 1215.89 L2099.62 1215.89 L2099.04 1215.89 L2098.45 1215.89 L2097.86 1215.89 L2097.28 1215.89 L2096.69 1215.89 L2096.1 1215.89 L2095.52 1215.89 L2094.93 1215.89 L2094.35 1215.89 L2093.76 1215.89 L2093.17 1215.89 L2092.59 1215.89 L2092 1215.89 L2091.41 1215.89 L2090.83 1215.89 L2090.24 1215.89 L2089.65 1215.89 L2089.07 1215.89 L2088.48 1215.89 L2087.89 1215.89 L2087.31 1215.89 L2086.72 1215.89 L2086.14 1215.89 L2085.55 1215.89 L2084.96 1215.89 L2084.38 1215.89 L2083.79 1215.89 L2083.2 1215.89 L2082.62 1215.89 L2082.03 1215.89 L2081.44 1215.89 L2080.86 1215.89 L2080.27 1215.89 L2079.68 1215.89 L2079.1 1215.89 L2078.51 1215.89 L2077.93 1215.89 L2077.34 1215.89 L2076.75 1215.89 L2076.17 1215.89 L2075.58 1215.89 L2074.99 1215.89 L2074.41 1215.89 L2073.82 1215.89 L2073.23 1215.89 L2072.65 1215.89 L2072.06 1215.89 L2071.48 1215.89 L2070.89 1215.89 L2070.3 1215.89 L2069.72 1215.89 L2069.13 1215.89 L2068.54 1215.89 L2067.96 1215.89 L2067.37 1215.89 L2066.78 1215.89 L2066.2 1215.89 L2065.61 1215.89 L2065.02 1215.89 L2064.44 1215.89 L2063.85 1215.89 L2063.27 1215.89 L2062.68 1215.89 L2062.09 1215.89 L2061.51 1215.89 L2060.92 1215.89 L2060.33 1215.89 L2059.75 1215.89 L2059.16 1215.89 L2058.57 1215.89 L2057.99 1215.89 L2057.4 1215.89 L2056.81 1215.89 L2056.23 1215.89 L2055.64 1215.89 L2055.06 1215.89 L2054.47 1215.89 L2053.88 1215.89 L2053.3 1215.89 L2052.71 1215.89 L2052.12 1215.89 L2051.54 1215.89 L2050.95 1215.89 L2050.36 1215.89 L2049.78 1215.89 L2049.19 1215.89 L2048.6 1215.89 L2048.02 1215.89 L2047.43 1215.89 L2046.85 1215.89 L2046.26 1215.89 L2045.67 1215.89 L2045.09 1215.89 L2044.5 1215.89 L2043.91 1215.89 L2043.33 1215.89 L2042.74 1215.89 L2042.15 1215.89 L2041.57 1215.89 L2040.98 1215.89 L2040.4 1215.89 L2039.81 1215.89 L2039.22 1215.89 L2038.64 1215.89 L2038.05 1215.89 L2037.46 1215.89 L2036.88 1215.89 L2036.29 1215.89 L2035.7 1215.89 L2035.12 1215.89 L2034.53 1215.89 L2033.94 1215.89 L2033.36 1215.89 L2032.77 1215.89 L2032.19 1215.89 L2031.6 1215.89 L2031.01 1215.89 L2030.43 1215.89 L2029.84 1215.89 L2029.25 1215.89 L2028.67 1215.89 L2028.08 1215.89 L2027.49 1215.89 L2026.91 1215.89 L2026.32 1215.89 L2025.73 1215.89 L2025.15 1215.89 L2024.56 1215.89 L2023.98 1215.89 L2023.39 1215.89 L2022.8 1215.89 L2022.22 1215.89 L2021.63 1215.89 L2021.04 1215.89 L2020.46 1215.89 L2019.87 1215.89 L2019.28 1215.89 L2018.7 1215.89 L2018.11 1215.89 L2017.53 1215.89 L2016.94 1215.89 L2016.35 1215.89 L2015.77 1215.89 L2015.18 1215.89 L2014.59 1215.89 L2014.01 1215.89 L2013.42 1215.89 L2012.83 1215.89 L2012.25 1215.89 L2011.66 1215.89 L2011.07 1215.89 L2010.49 1215.89 L2009.9 1215.89 L2009.32 1215.89 L2008.73 1215.89 L2008.14 1215.89 L2007.56 1215.89 L2006.97 1215.89 L2006.38 1215.89 L2005.8 1215.89 L2005.21 1215.89 L2004.62 1215.89 L2004.04 1215.89 L2003.45 1215.89 L2002.86 1215.89 L2002.28 1215.89 L2001.69 1215.89 L2001.11 1215.89 L2000.52 1215.89 L1999.93 1215.89 L1999.35 1215.89 L1998.76 1215.89 L1998.17 1215.89 L1997.59 1215.89 L1997 1215.89 L1996.41 1215.89 L1995.83 1215.89 L1995.24 1215.89 L1994.65 1215.89 L1994.07 1215.89 L1993.48 1215.89 L1992.9 1215.89 L1992.31 1215.89 L1991.72 1215.89 L1991.14 1215.89 L1990.55 1215.89 L1989.96 1215.89 L1989.38 1215.89 L1988.79 1215.89 L1988.2 1215.89 L1987.62 1215.89 L1987.03 1215.89 L1986.45 1215.89 L1985.86 1215.89 L1985.27 1215.89 L1984.69 1215.89 L1984.1 1215.89 L1983.51 1215.89 L1982.93 1215.89 L1982.34 1215.89 L1981.75 1215.89 L1981.17 1215.89 L1980.58 1215.89 L1979.99 1215.89 L1979.41 1215.89 L1978.82 1215.89 L1978.24 1215.89 L1977.65 1215.89 L1977.06 1215.89 L1976.48 1215.89 L1975.89 1215.89 L1975.3 1215.89 L1974.72 1215.89 L1974.13 1215.89 L1973.54 1215.89 L1972.96 1215.89 L1972.37 1215.89 L1971.78 1215.89 L1971.2 1215.89 L1970.61 1215.89 L1970.03 1215.89 L1969.44 1215.89 L1968.85 1215.89 L1968.27 1215.89 L1967.68 1215.89 L1967.09 1215.89 L1966.51 1215.89 L1965.92 1215.89 L1965.33 1215.89 L1964.75 1215.89 L1964.16 1215.89 L1963.58 1215.89 L1962.99 1215.89 L1962.4 1215.89 L1961.82 1215.89 L1961.23 1215.89 L1960.64 1215.89 L1960.06 1215.89 L1959.47 1215.89 L1958.88 1215.89 L1958.3 1215.89 L1957.71 1215.89 L1957.12 1215.89 L1956.54 1215.89 L1955.95 1215.89 L1955.37 1215.89 L1954.78 1215.89 L1954.19 1215.89 L1953.61 1215.89 L1953.02 1215.89 L1952.43 1215.89 L1951.85 1215.89 L1951.26 1215.89 L1950.67 1215.89 L1950.09 1215.89 L1949.5 1215.89 L1948.91 1215.89 L1948.33 1215.89 L1947.74 1215.89 L1947.16 1215.89 L1946.57 1215.89 L1945.98 1215.89 L1945.4 1215.89 L1944.81 1215.89 L1944.22 1215.89 L1943.64 1215.89 L1943.05 1215.89 L1942.46 1215.89 L1941.88 1215.89 L1941.29 1215.89 L1940.71 1215.89 L1940.12 1215.89 L1939.53 1215.89 L1938.95 1215.89 L1938.36 1215.89 L1937.77 1215.89 L1937.19 1215.89 L1936.6 1215.89 L1936.01 1215.89 L1935.43 1215.89 L1934.84 1215.89 L1934.25 1215.89 L1933.67 1215.89 L1933.08 1215.89 L1932.5 1215.89 L1931.91 1215.89 L1931.32 1215.89 L1930.74 1215.89 L1930.15 1215.89 L1929.56 1215.89 L1928.98 1215.89 L1928.39 1215.89 L1927.8 1215.89 L1927.22 1215.89 L1926.63 1215.89 L1926.04 1215.89 L1925.46 1215.89 L1924.87 1215.89 L1924.29 1215.89 L1923.7 1215.89 L1923.11 1215.89 L1922.53 1215.89 L1921.94 1215.89 L1921.35 1215.89 L1920.77 1215.89 L1920.18 1215.89 L1919.59 1215.89 L1919.01 1215.89 L1918.42 1215.89 L1917.83 1215.89 L1917.25 1215.89 L1916.66 1215.89 L1916.08 1215.89 L1915.49 1215.89 L1914.9 1215.89 L1914.32 1215.89 L1913.73 1215.89 L1913.14 1215.89 L1912.56 1215.89 L1911.97 1215.89 L1911.38 1215.89 L1910.8 1215.89 L1910.21 1215.89 L1909.63 1215.89 L1909.04 1215.89 L1908.45 1215.89 L1907.87 1215.89 L1907.28 1215.89 L1906.69 1215.89 L1906.11 1215.89 L1905.52 1215.89 L1904.93 1215.89 L1904.35 1215.89 L1903.76 1215.89 L1903.17 1215.89 L1902.59 1215.89 L1902 1215.89 L1901.42 1215.89 L1900.83 1215.89 L1900.24 1215.89 L1899.66 1215.89 L1899.07 1215.89 L1898.48 1215.89 L1897.9 1215.89 L1897.31 1215.89 L1896.72 1215.89 L1896.14 1215.89 L1895.55 1215.89 L1894.96 1215.89 L1894.38 1215.89 L1893.79 1215.89 L1893.21 1215.89 L1892.62 1215.89 L1892.03 1215.89 L1891.45 1215.89 L1890.86 1215.89 L1890.27 1215.89 L1889.69 1215.89 L1889.1 1215.89 L1888.51 1215.89 L1887.93 1215.89 L1887.34 1215.89 L1886.76 1215.89 L1886.17 1215.89 L1885.58 1215.89 L1885 1215.89 L1884.41 1215.89 L1883.82 1215.89 L1883.24 1215.89 L1882.65 1215.89 L1882.06 1215.89 L1881.48 1215.89 L1880.89 1215.89 L1880.3 1215.89 L1879.72 1215.89 L1879.13 1215.89 L1878.55 1215.89 L1877.96 1215.89 L1877.37 1215.89 L1876.79 1215.89 L1876.2 1215.89 L1875.61 1215.89 L1875.03 1215.89 L1874.44 1215.89 L1873.85 1215.89 L1873.27 1215.89 L1872.68 1215.89 L1872.09 1215.89 L1871.51 1215.89 L1870.92 1215.89 L1870.34 1215.89 L1869.75 1215.89 L1869.16 1215.89 L1868.58 1215.89 L1867.99 1215.89 L1867.4 1215.89 L1866.82 1215.89 L1866.23 1215.89 L1865.64 1215.89 L1865.06 1215.89 L1864.47 1215.89 L1863.88 1215.89 L1863.3 1215.89 L1862.71 1215.89 L1862.13 1215.89 L1861.54 1215.89 L1860.95 1215.89 L1860.37 1215.89 L1859.78 1215.89 L1859.19 1215.89 L1858.61 1215.89 L1858.02 1215.89 L1857.43 1215.89 L1856.85 1215.89 L1856.26 1215.89 L1855.68 1215.89 L1855.09 1215.89 L1854.5 1215.89 L1853.92 1215.89 L1853.33 1215.89 L1852.74 1215.89 L1852.16 1215.89 L1851.57 1215.89 L1850.98 1215.89 L1850.4 1215.89 L1849.81 1215.89 L1849.22 1215.89 L1848.64 1215.89 L1848.05 1215.89 L1847.47 1215.89 L1846.88 1215.89 L1846.29 1215.89 L1845.71 1215.89 L1845.12 1215.89 L1844.53 1215.89 L1843.95 1215.89 L1843.36 1215.89 L1842.77 1215.89 L1842.19 1215.89 L1841.6 1215.89 L1841.01 1215.89 L1840.43 1215.89 L1839.84 1215.89 L1839.26 1215.89 L1838.67 1215.89 L1838.08 1215.89 L1837.5 1215.89 L1836.91 1215.89 L1836.32 1215.89 L1835.74 1215.89 L1835.15 1215.89 L1834.56 1215.89 L1833.98 1215.89 L1833.39 1215.89 L1832.81 1215.89 L1832.22 1215.89 L1831.63 1215.89 L1831.05 1215.89 L1830.46 1215.89 L1829.87 1215.89 L1829.29 1215.89 L1828.7 1215.89 L1828.11 1215.89 L1827.53 1215.89 L1826.94 1215.89 L1826.35 1215.89 L1825.77 1215.89 L1825.18 1215.89 L1824.6 1215.89 L1824.01 1215.89 L1823.42 1215.89 L1822.84 1215.89 L1822.25 1215.89 L1821.66 1215.89 L1821.08 1215.89 L1820.49 1215.89 L1819.9 1215.89 L1819.32 1215.89 L1818.73 1215.89 L1818.14 1215.89 L1817.56 1215.89 L1816.97 1215.89 L1816.39 1215.89 L1815.8 1215.89 L1815.21 1215.89 L1814.63 1215.89 L1814.04 1215.89 L1813.45 1215.89 L1812.87 1215.89 L1812.28 1215.89 L1811.69 1215.89 L1811.11 1215.89 L1810.52 1215.89 L1809.94 1215.89 L1809.35 1215.89 L1808.76 1215.89 L1808.18 1215.89 L1807.59 1215.89 L1807 1215.89 L1806.42 1215.89 L1805.83 1215.89 L1805.24 1215.89 L1804.66 1215.89 L1804.07 1215.89 L1803.48 1215.89 L1802.9 1215.89 L1802.31 1215.89 L1801.73 1215.89 L1801.14 1215.89 L1800.55 1215.89 L1799.97 1215.89 L1799.38 1215.89 L1798.79 1215.89 L1798.21 1215.89 L1797.62 1215.89 L1797.03 1215.89 L1796.45 1215.89 L1795.86 1215.89 L1795.27 1215.89 L1794.69 1215.89 L1794.1 1215.89 L1793.52 1215.89 L1792.93 1215.89 L1792.34 1215.89 L1791.76 1215.89 L1791.17 1215.89 L1790.58 1215.89 L1790 1215.89 L1789.41 1215.89 L1788.82 1215.89 L1788.24 1215.89 L1787.65 1215.89 L1787.06 1215.89 L1786.48 1215.89 L1785.89 1215.89 L1785.31 1215.89 L1784.72 1215.89 L1784.13 1215.89 L1783.55 1215.89 L1782.96 1215.89 L1782.37 1215.89 L1781.79 1215.89 L1781.2 1215.89 L1780.61 1215.89 L1780.03 1215.89 L1779.44 1215.89 L1778.86 1215.89 L1778.27 1215.89 L1777.68 1215.89 L1777.1 1215.89 L1776.51 1215.89 L1775.92 1215.89 L1775.34 1215.89 L1774.75 1215.89 L1774.16 1215.89 L1773.58 1215.89 L1772.99 1215.89 L1772.4 1215.89 L1771.82 1215.89 L1771.23 1215.89 L1770.65 1215.89 L1770.06 1215.89 L1769.47 1215.89 L1768.89 1215.89 L1768.3 1215.89 L1767.71 1215.89 L1767.13 1215.89 L1766.54 1215.89 L1765.95 1215.89 L1765.37 1215.89 L1764.78 1215.89 L1764.19 1215.89 L1763.61 1215.89 L1763.02 1215.89 L1762.44 1215.89 L1761.85 1215.89 L1761.26 1215.89 L1760.68 1215.89 L1760.09 1215.89 L1759.5 1215.89 L1758.92 1215.89 L1758.33 1215.89 L1757.74 1215.89 L1757.16 1215.89 L1756.57 1215.89 L1755.99 1215.89 L1755.4 1215.89 L1754.81 1215.89 L1754.23 1215.89 L1753.64 1215.89 L1753.05 1215.89 L1752.47 1215.89 L1751.88 1215.89 L1751.29 1215.89 L1750.71 1215.89 L1750.12 1215.89 L1749.53 1215.89 L1748.95 1215.89 L1748.36 1215.89 L1747.78 1215.89 L1747.19 1215.89 L1746.6 1215.89 L1746.02 1215.89 L1745.43 1215.89 L1744.84 1215.89 L1744.26 1215.89 L1743.67 1215.89 L1743.08 1215.89 L1742.5 1215.89 L1741.91 1215.89 L1741.32 1215.89 L1740.74 1215.89 L1740.15 1215.89 L1739.57 1215.89 L1738.98 1215.89 L1738.39 1215.89 L1737.81 1215.89 L1737.22 1215.89 L1736.63 1215.89 L1736.05 1215.89 L1735.46 1215.89 L1734.87 1215.89 L1734.29 1215.89 L1733.7 1215.89 L1733.11 1215.89 L1732.53 1215.89 L1731.94 1215.89 L1731.36 1215.89 L1730.77 1215.89 L1730.18 1215.89 L1729.6 1215.89 L1729.01 1215.89 L1728.42 1215.89 L1727.84 1215.89 L1727.25 1215.89 L1726.66 1215.89 L1726.08 1215.89 L1725.49 1215.89 L1724.91 1215.89 L1724.32 1215.89 L1723.73 1215.89 L1723.15 1215.89 L1722.56 1215.89 L1721.97 1215.89 L1721.39 1215.89 L1720.8 1215.89 L1720.21 1215.89 L1719.63 1215.89 L1719.04 1215.89 L1718.45 1215.89 L1717.87 1215.89 L1717.28 1215.89 L1716.7 1215.89 L1716.11 1215.89 L1715.52 1215.89 L1714.94 1215.89 L1714.35 1215.89 L1713.76 1215.89 L1713.18 1215.89 L1712.59 1215.89 L1712 1215.89 L1711.42 1215.89 L1710.83 1215.89 L1710.24 1215.89 L1709.66 1215.89 L1709.07 1215.89 L1708.49 1215.89 L1707.9 1215.89 L1707.31 1215.89 L1706.73 1215.89 L1706.14 1215.89 L1705.55 1215.89 L1704.97 1215.89 L1704.38 1215.89 L1703.79 1215.89 L1703.21 1215.89 L1702.62 1215.89 L1702.04 1215.89 L1701.45 1215.89 L1700.86 1215.89 L1700.28 1215.89 L1699.69 1215.89 L1699.1 1215.89 L1698.52 1215.89 L1697.93 1215.89 L1697.34 1215.89 L1696.76 1215.89 L1696.17 1215.89 L1695.58 1215.89 L1695 1215.89 L1694.41 1215.89 L1693.83 1215.89 L1693.24 1215.89 L1692.65 1215.89 L1692.07 1215.89 L1691.48 1215.89 L1690.89 1215.89 L1690.31 1215.89 L1689.72 1215.89 L1689.13 1215.89 L1688.55 1215.89 L1687.96 1215.89 L1687.37 1215.89 L1686.79 1215.89 L1686.2 1215.89 L1685.62 1215.89 L1685.03 1215.89 L1684.44 1215.89 L1683.86 1215.89 L1683.27 1215.89 L1682.68 1215.89 L1682.1 1215.89 L1681.51 1215.89 L1680.92 1215.89 L1680.34 1215.89 L1679.75 1215.89 L1679.17 1215.89 L1678.58 1215.89 L1677.99 1215.89 L1677.41 1215.89 L1676.82 1215.89 L1676.23 1215.89 L1675.65 1215.89 L1675.06 1215.89 L1674.47 1215.89 L1673.89 1215.89 L1673.3 1215.89 L1672.71 1215.89 L1672.13 1215.89 L1671.54 1215.89 L1670.96 1215.89 L1670.37 1215.89 L1669.78 1215.89 L1669.2 1215.89 L1668.61 1215.89 L1668.02 1215.89 L1667.44 1215.89 L1666.85 1215.89 L1666.26 1215.89 L1665.68 1215.89 L1665.09 1215.89 L1664.5 1215.89 L1663.92 1215.89 L1663.33 1215.89 L1662.75 1215.89 L1662.16 1215.89 L1661.57 1215.89 L1660.99 1215.89 L1660.4 1215.89 L1659.81 1215.89 L1659.23 1215.89 L1658.64 1215.89 L1658.05 1215.89 L1657.47 1215.89 L1656.88 1215.89 L1656.29 1215.89 L1655.71 1215.89 L1655.12 1215.89 L1654.54 1215.89 L1653.95 1215.89 L1653.36 1215.89 L1652.78 1215.89 L1652.19 1215.89 L1651.6 1215.89 L1651.02 1215.89 L1650.43 1215.89 L1649.84 1215.89 L1649.26 1215.89 L1648.67 1215.89 L1648.09 1215.89 L1647.5 1215.89 L1646.91 1215.89 L1646.33 1215.89 L1645.74 1215.89 L1645.15 1215.89 L1644.57 1215.89 L1643.98 1215.89 L1643.39 1215.89 L1642.81 1215.89 L1642.22 1215.89 L1641.63 1215.89 L1641.05 1215.89 L1640.46 1215.89 L1639.88 1215.89 L1639.29 1215.89 L1638.7 1215.89 L1638.12 1215.89 L1637.53 1215.89 L1636.94 1215.89 L1636.36 1215.89 L1635.77 1215.89 L1635.18 1215.89 L1634.6 1215.89 L1634.01 1215.89 L1633.42 1215.89 L1632.84 1215.89 L1632.25 1215.89 L1631.67 1215.89 L1631.08 1215.89 L1630.49 1215.89 L1629.91 1215.89 L1629.32 1215.89 L1628.73 1215.89 L1628.15 1215.89 L1627.56 1215.89 L1626.97 1215.89 L1626.39 1215.89 L1625.8 1215.89 L1625.22 1215.89 L1624.63 1215.89 L1624.04 1215.89 L1623.46 1215.89 L1622.87 1215.89 L1622.28 1215.89 L1621.7 1215.89 L1621.11 1215.89 L1620.52 1215.89 L1619.94 1215.89 L1619.35 1215.89 L1618.76 1215.89 L1618.18 1215.89 L1617.59 1215.89 L1617.01 1215.89 L1616.42 1215.89 L1615.83 1215.89 L1615.25 1215.89 L1614.66 1215.89 L1614.07 1215.89 L1613.49 1215.89 L1612.9 1215.89 L1612.31 1215.89 L1611.73 1215.89 L1611.14 1215.89 L1610.55 1215.89 L1609.97 1215.89 L1609.38 1215.89 L1608.8 1215.89 L1608.21 1215.89 L1607.62 1215.89 L1607.04 1215.89 L1606.45 1215.89 L1605.86 1215.89 L1605.28 1215.89 L1604.69 1215.89 L1604.1 1215.89 L1603.52 1215.89 L1602.93 1215.89 L1602.34 1215.89 L1601.76 1215.89 L1601.17 1215.89 L1600.59 1215.89 L1600 1215.89 L1599.41 1215.89 L1598.83 1215.89 L1598.24 1215.89 L1597.65 1215.89 L1597.07 1215.89 L1596.48 1215.89 L1595.89 1215.89 L1595.31 1215.89 L1594.72 1215.89 L1594.14 1215.89 L1593.55 1215.89 L1592.96 1215.89 L1592.38 1215.89 L1591.79 1215.89 L1591.2 1215.89 L1590.62 1215.89 L1590.03 1215.89 L1589.44 1215.89 L1588.86 1215.89 L1588.27 1215.89 L1587.68 1215.89 L1587.1 1215.89 L1586.51 1215.89 L1585.93 1215.89 L1585.34 1215.89 L1584.75 1215.89 L1584.17 1215.89 L1583.58 1215.89 L1582.99 1215.89 L1582.41 1215.89 L1581.82 1215.89 L1581.23 1215.89 L1580.65 1215.89 L1580.06 1215.89 L1579.47 1215.89 L1578.89 1215.89 L1578.3 1215.89 L1577.72 1215.89 L1577.13 1215.89 L1576.54 1215.89 L1575.96 1215.89 L1575.37 1215.89 L1574.78 1215.89 L1574.2 1215.89 L1573.61 1215.89 L1573.02 1215.89 L1572.44 1215.89 L1571.85 1215.89 L1571.27 1215.89 L1570.68 1215.89 L1570.09 1215.89 L1569.51 1215.89 L1568.92 1215.89 L1568.33 1215.89 L1567.75 1215.89 L1567.16 1215.89 L1566.57 1215.89 L1565.99 1215.89 L1565.4 1215.89 L1564.81 1215.89 L1564.23 1215.89 L1563.64 1215.89 L1563.06 1215.89 L1562.47 1215.89 L1561.88 1215.89 L1561.3 1215.89 L1560.71 1215.89 L1560.12 1215.89 L1559.54 1215.89 L1558.95 1215.89 L1558.36 1215.89 L1557.78 1215.89 L1557.19 1215.89 L1556.6 1215.89 L1556.02 1215.89 L1555.43 1215.89 L1554.85 1215.89 L1554.26 1215.89 L1553.67 1215.89 L1553.09 1215.89 L1552.5 1215.89 L1551.91 1215.89 L1551.33 1215.89 L1550.74 1215.89 L1550.15 1215.89 L1549.57 1215.89 L1548.98 1215.89 L1548.4 1215.89 L1547.81 1215.89 L1547.22 1215.89 L1546.64 1215.89 L1546.05 1215.89 L1545.46 1215.89 L1544.88 1215.89 L1544.29 1215.89 L1543.7 1215.89 L1543.12 1215.89 L1542.53 1215.89 L1541.94 1215.89 L1541.36 1215.89 L1540.77 1215.89 L1540.19 1215.89 L1539.6 1215.89 L1539.01 1215.89 L1538.43 1215.89 L1537.84 1215.89 L1537.25 1215.89 L1536.67 1215.89 L1536.08 1215.89 L1535.49 1215.89 L1534.91 1215.89 L1534.32 1215.89 L1533.73 1215.89 L1533.15 1215.89 L1532.56 1215.89 L1531.98 1215.89 L1531.39 1215.89 L1530.8 1215.89 L1530.22 1215.89 L1529.63 1215.89 L1529.04 1215.89 L1528.46 1215.89 L1527.87 1215.89 L1527.28 1215.89 L1526.7 1215.89 L1526.11 1215.89 L1525.52 1215.89 L1524.94 1215.89 L1524.35 1215.89 L1523.77 1215.89 L1523.18 1215.89 L1522.59 1215.89 L1522.01 1215.89 L1521.42 1215.89 L1520.83 1215.89 L1520.25 1215.89 L1519.66 1215.89 L1519.07 1215.89 L1518.49 1215.89 L1517.9 1215.89 L1517.32 1215.89 L1516.73 1215.89 L1516.14 1215.89 L1515.56 1215.89 L1514.97 1215.89 L1514.38 1215.89 L1513.8 1215.89 L1513.21 1215.89 L1512.62 1215.89 L1512.04 1215.89 L1511.45 1215.89 L1510.86 1215.89 L1510.28 1215.89 L1509.69 1215.89 L1509.11 1215.89 L1508.52 1215.89 L1507.93 1215.89 L1507.35 1215.89 L1506.76 1215.89 L1506.17 1215.89 L1505.59 1215.89 L1505 1215.89 L1504.41 1215.89 L1503.83 1215.89 L1503.24 1215.89 L1502.65 1215.89 L1502.07 1215.89 L1501.48 1215.89 L1500.9 1215.89 L1500.31 1215.89 L1499.72 1215.89 L1499.14 1215.89 L1498.55 1215.89 L1497.96 1215.89 L1497.38 1215.89 L1496.79 1215.89 L1496.2 1215.89 L1495.62 1215.89 L1495.03 1215.89 L1494.45 1215.89 L1493.86 1215.89 L1493.27 1215.89 L1492.69 1215.89 L1492.1 1215.89 L1491.51 1215.89 L1490.93 1215.89 L1490.34 1215.89 L1489.75 1215.89 L1489.17 1215.89 L1488.58 1215.89 L1487.99 1215.89 L1487.41 1215.89 L1486.82 1215.89 L1486.24 1215.89 L1485.65 1215.89 L1485.06 1215.89 L1484.48 1215.89 L1483.89 1215.89 L1483.3 1215.89 L1482.72 1215.89 L1482.13 1215.89 L1481.54 1215.89 L1480.96 1215.89 L1480.37 1215.89 L1479.78 1215.89 L1479.2 1215.89 L1478.61 1215.89 L1478.03 1215.89 L1477.44 1215.89 L1476.85 1215.89 L1476.27 1215.89 L1475.68 1215.89 L1475.09 1215.89 L1474.51 1215.89 L1473.92 1215.89 L1473.33 1215.89 L1472.75 1215.89 L1472.16 1215.89 L1471.57 1215.89 L1470.99 1215.89 L1470.4 1215.89 L1469.82 1215.89 L1469.23 1215.89 L1468.64 1215.89 L1468.06 1215.89 L1467.47 1215.89 L1466.88 1215.89 L1466.3 1215.89 L1465.71 1215.89 L1465.12 1215.89 L1464.54 1215.89 L1463.95 1215.89 L1463.37 1215.89 L1462.78 1215.89 L1462.19 1215.89 L1461.61 1215.89 L1461.02 1215.89 L1460.43 1215.89 L1459.85 1215.89 L1459.26 1215.89 L1458.67 1215.89 L1458.09 1215.89 L1457.5 1215.89 L1456.91 1215.89 L1456.33 1215.89 L1455.74 1215.89 L1455.16 1215.89 L1454.57 1215.89 L1453.98 1215.89 L1453.4 1215.89 L1452.81 1215.89 L1452.22 1215.89 L1451.64 1215.89 L1451.05 1215.89 L1450.46 1215.89 L1449.88 1215.89 L1449.29 1215.89 L1448.7 1215.89 L1448.12 1215.89 L1447.53 1215.89 L1446.95 1215.89 L1446.36 1215.89 L1445.77 1215.89 L1445.19 1215.89 L1444.6 1215.89 L1444.01 1215.89 L1443.43 1215.89 L1442.84 1215.89 L1442.25 1215.89 L1441.67 1215.89 L1441.08 1215.89 L1440.5 1215.89 L1439.91 1215.89 L1439.32 1215.89 L1438.74 1215.89 L1438.15 1215.89 L1437.56 1215.89 L1436.98 1215.89 L1436.39 1215.89 L1435.8 1215.89 L1435.22 1215.89 L1434.63 1215.89 L1434.04 1215.89 L1433.46 1215.89 L1432.87 1215.89 L1432.29 1215.89 L1431.7 1215.89 L1431.11 1215.89 L1430.53 1215.89 L1429.94 1215.89 L1429.35 1215.89 L1428.77 1215.89 L1428.18 1215.89 L1427.59 1215.89 L1427.01 1215.89 L1426.42 1215.89 L1425.83 1215.89 L1425.25 1215.89 L1424.66 1215.89 L1424.08 1215.89 L1423.49 1215.89 L1422.9 1215.89 L1422.32 1215.89 L1421.73 1215.89 L1421.14 1215.89 L1420.56 1215.89 L1419.97 1215.89 L1419.38 1215.89 L1418.8 1215.89 L1418.21 1215.89 L1417.63 1215.89 L1417.04 1215.89 L1416.45 1215.89 L1415.87 1215.89 L1415.28 1215.89 L1414.69 1215.89 L1414.11 1215.89 L1413.52 1215.89 L1412.93 1215.89 L1412.35 1215.89 L1411.76 1215.89 L1411.17 1215.89 L1410.59 1215.89 L1410 1215.89 L1409.42 1215.89 L1408.83 1215.89 L1408.24 1215.89 L1407.66 1215.89 L1407.07 1215.89 L1406.48 1215.89 L1405.9 1215.89 L1405.31 1215.89 L1404.72 1215.89 L1404.14 1215.89 L1403.55 1215.89 L1402.96 1215.89 L1402.38 1215.89 L1401.79 1215.89 L1401.21 1215.89 L1400.62 1215.89 L1400.03 1215.89 L1399.45 1215.89 L1398.86 1215.89 L1398.27 1215.89 L1397.69 1215.89 L1397.1 1215.89 L1396.51 1215.89 L1395.93 1215.89 L1395.34 1215.89 L1394.75 1215.89 L1394.17 1215.89 L1393.58 1215.89 L1393 1215.89 L1392.41 1215.89 L1391.82 1215.89 L1391.24 1215.89 L1390.65 1215.89 L1390.06 1215.89 L1389.48 1215.89 L1388.89 1215.89 L1388.3 1215.89 L1387.72 1215.89 L1387.13 1215.89 L1386.55 1215.89 L1385.96 1215.89 L1385.37 1215.89 L1384.79 1215.89 L1384.2 1215.89 L1383.61 1215.89 L1383.03 1215.89 L1382.44 1215.89 L1381.85 1215.89 L1381.27 1215.89 L1380.68 1215.89 L1380.09 1215.89 L1379.51 1215.89 L1378.92 1215.89 L1378.34 1215.89 L1377.75 1215.89 L1377.16 1215.89 L1376.58 1215.89 L1375.99 1215.89 L1375.4 1215.89 L1374.82 1215.89 L1374.23 1215.89 L1373.64 1215.89 L1373.06 1215.89 L1372.47 1215.89 L1371.88 1215.89 L1371.3 1215.89 L1370.71 1215.89 L1370.13 1215.89 L1369.54 1215.89 L1368.95 1215.89 L1368.37 1215.89 L1367.78 1215.89 L1367.19 1215.89 L1366.61 1215.89 L1366.02 1215.89 L1365.43 1215.89 L1364.85 1215.89 L1364.26 1215.89 L1363.68 1215.89 L1363.09 1215.89 L1362.5 1215.89 L1361.92 1215.89 L1361.33 1215.89 L1360.74 1215.89 L1360.16 1215.89 L1359.57 1215.89 L1358.98 1215.89 L1358.4 1215.89 L1357.81 1215.89 L1357.22 1215.89 L1356.64 1215.89 L1356.05 1215.89 L1355.47 1215.89 L1354.88 1215.89 L1354.29 1215.89 L1353.71 1215.89 L1353.12 1215.89 L1352.53 1215.89 L1351.95 1215.89 L1351.36 1215.89 L1350.77 1215.89 L1350.19 1215.89 L1349.6 1215.89 L1349.01 1215.89 L1348.43 1215.89 L1347.84 1215.89 L1347.26 1215.89 L1346.67 1215.89 L1346.08 1215.89 L1345.5 1215.89 L1344.91 1215.89 L1344.32 1215.89 L1343.74 1215.89 L1343.15 1215.89 L1342.56 1215.89 L1341.98 1215.89 L1341.39 1215.89 L1340.8 1215.89 L1340.22 1215.89 L1339.63 1215.89 L1339.05 1215.89 L1338.46 1215.89 L1337.87 1215.89 L1337.29 1215.89 L1336.7 1215.89 L1336.11 1215.89 L1335.53 1215.89 L1334.94 1215.89 L1334.35 1215.89 L1333.77 1215.89 L1333.18 1215.89 L1332.6 1215.89 L1332.01 1215.89 L1331.42 1215.89 L1330.84 1215.89 L1330.25 1215.89 L1329.66 1215.89 L1329.08 1215.89 L1328.49 1215.89 L1327.9 1215.89 L1327.32 1215.89 L1326.73 1215.89 L1326.14 1215.89 L1325.56 1215.89 L1324.97 1215.89 L1324.39 1215.89 L1323.8 1215.89 L1323.21 1215.89 L1322.63 1215.89 L1322.04 1215.89 L1321.45 1215.89 L1320.87 1215.89 L1320.28 1215.89 L1319.69 1215.89 L1319.11 1215.89 L1318.52 1215.89 L1317.93 1215.89 L1317.35 1215.89 L1316.76 1215.89 L1316.18 1215.89 L1315.59 1215.89 L1315 1215.89 L1314.42 1215.89 L1313.83 1215.89 L1313.24 1215.89 L1312.66 1215.89 L1312.07 1215.89 L1311.48 1215.89 L1310.9 1215.89 L1310.31 1215.89 L1309.73 1215.89 L1309.14 1215.89 L1308.55 1215.89 L1307.97 1215.89 L1307.38 1215.89 L1306.79 1215.89 L1306.21 1215.89 L1305.62 1215.89 L1305.03 1215.89 L1304.45 1215.89 L1303.86 1215.89 L1303.27 1215.89 L1302.69 1215.89 L1302.1 1215.89 L1301.52 1215.89 L1300.93 1215.89 L1300.34 1215.89 L1299.76 1215.89 L1299.17 1215.89 L1298.58 1215.89 L1298 1215.89 L1297.41 1215.89 L1296.82 1215.89 L1296.24 1215.89 L1295.65 1215.89 L1295.06 1215.89 L1294.48 1215.89 L1293.89 1215.89 L1293.31 1215.89 L1292.72 1215.89 L1292.13 1215.89 L1291.55 1215.89 L1290.96 1215.89 L1290.37 1215.89 L1289.79 1215.89 L1289.2 1215.89 L1288.61 1215.89 L1288.03 1215.89 L1287.44 1215.89 L1286.86 1215.89 L1286.27 1215.89 L1285.68 1215.89 L1285.1 1215.89 L1284.51 1215.89 L1283.92 1215.89 L1283.34 1215.89 L1282.75 1215.89 L1282.16 1215.89 L1281.58 1215.89 L1280.99 1215.89 L1280.4 1215.89 L1279.82 1215.89 L1279.23 1215.89 L1278.65 1215.89 L1278.06 1215.89 L1277.47 1215.89 L1276.89 1215.89 L1276.3 1215.89 L1275.71 1215.89 L1275.13 1215.89 L1274.54 1215.89 L1273.95 1215.89 L1273.37 1215.89 L1272.78 1215.89 L1272.19 1215.89 L1271.61 1215.89 L1271.02 1215.89 L1270.44 1215.89 L1269.85 1215.89 L1269.26 1215.89 L1268.68 1215.89 L1268.09 1215.89 L1267.5 1215.89 L1266.92 1215.89 L1266.33 1215.89 L1265.74 1215.89 L1265.16 1215.89 L1264.57 1215.89 L1263.98 1215.89 L1263.4 1215.89 L1262.81 1215.89 L1262.23 1215.89 L1261.64 1215.89 L1261.05 1215.89 L1260.47 1215.89 L1259.88 1215.89 L1259.29 1215.89 L1258.71 1215.89 L1258.12 1215.89 L1257.53 1215.89 L1256.95 1215.89 L1256.36 1215.89 L1255.78 1215.89 L1255.19 1215.89 L1254.6 1215.89 L1254.02 1215.89 L1253.43 1215.89 L1252.84 1215.89 L1252.26 1215.89 L1251.67 1215.89 L1251.08 1215.89 L1250.5 1215.89 L1249.91 1215.89 L1249.32 1215.89 L1248.74 1215.89 L1248.15 1215.89 L1247.57 1215.89 L1246.98 1215.89 L1246.39 1215.89 L1245.81 1215.89 L1245.22 1215.89 L1244.63 1215.89 L1244.05 1215.89 L1243.46 1215.89 L1242.87 1215.89 L1242.29 1215.89 L1241.7 1215.89 L1241.11 1215.89 L1240.53 1215.89 L1239.94 1215.89 L1239.36 1215.89 L1238.77 1215.89 L1238.18 1215.89 L1237.6 1215.89 L1237.01 1215.89 L1236.42 1215.89 L1235.84 1215.89 L1235.25 1215.89 L1234.66 1215.89 L1234.08 1215.89 L1233.49 1215.89 L1232.91 1215.89 L1232.32 1215.89 L1231.73 1215.89 L1231.15 1215.89 L1230.56 1215.89 L1229.97 1215.89 L1229.39 1215.89 L1228.8 1215.89 L1228.21 1215.89 L1227.63 1215.89 L1227.04 1215.89 L1226.45 1215.89 L1225.87 1215.89 L1225.28 1215.89 L1224.7 1215.89 L1224.11 1215.89 L1223.52 1215.89 L1222.94 1215.89 L1222.35 1215.89 L1221.76 1215.89 L1221.18 1215.89 L1220.59 1215.89 L1220 1215.89 L1219.42 1215.89 L1218.83 1215.89 L1218.24 1215.89 L1217.66 1215.89 L1217.07 1215.89 L1216.49 1215.89 L1215.9 1215.89 L1215.31 1215.89 L1214.73 1215.89 L1214.14 1215.89 L1213.55 1215.89 L1212.97 1215.89 L1212.38 1215.89 L1211.79 1215.89 L1211.21 1215.89 L1210.62 1215.89 L1210.03 1215.89 L1209.45 1215.89 L1208.86 1215.89 L1208.28 1215.89 L1207.69 1215.89 L1207.1 1215.89 L1206.52 1215.89 L1205.93 1215.89 L1205.34 1215.89 L1204.76 1215.89 L1204.17 1215.89 L1203.58 1215.89 L1203 1215.89 L1202.41 1215.89 L1201.83 1215.89 L1201.24 1215.89 L1200.65 1215.89 L1200.07 1215.89 L1199.48 1215.89 L1198.89 1215.89 L1198.31 1215.89 L1197.72 1215.89 L1197.13 1215.89 L1196.55 1215.89 L1195.96 1215.89 L1195.37 1215.89 L1194.79 1215.89 L1194.2 1215.89 L1193.62 1215.89 L1193.03 1215.89 L1192.44 1215.89 L1191.86 1215.89 L1191.27 1215.89 L1190.68 1215.89 L1190.1 1215.89 L1189.51 1215.89 L1188.92 1215.89 L1188.34 1215.89 L1187.75 1215.89 L1187.16 1215.89 L1186.58 1215.89 L1185.99 1215.89 L1185.41 1215.89 L1184.82 1215.89 L1184.23 1215.89 L1183.65 1215.89 L1183.06 1215.89 L1182.47 1215.89 L1181.89 1215.89 L1181.3 1215.89 L1180.71 1215.89 L1180.13 1215.89 L1179.54 1215.89 L1178.96 1215.89 L1178.37 1215.89 L1177.78 1215.89 L1177.2 1215.89 L1176.61 1215.89 L1176.02 1215.89 L1175.44 1215.89 L1174.85 1215.89 L1174.26 1215.89 L1173.68 1215.89 L1173.09 1215.89 L1172.5 1215.89 L1171.92 1215.89 L1171.33 1215.89 L1170.75 1215.89 L1170.16 1215.89 L1169.57 1215.89 L1168.99 1215.89 L1168.4 1215.89 L1167.81 1215.89 L1167.23 1215.89 L1166.64 1215.89 L1166.05 1215.89 L1165.47 1215.89 L1164.88 1215.89 L1164.29 1215.89 L1163.71 1215.89 L1163.12 1215.89 L1162.54 1215.89 L1161.95 1215.89 L1161.36 1215.89 L1160.78 1215.89 L1160.19 1215.89 L1159.6 1215.89 L1159.02 1215.89 L1158.43 1215.89 L1157.84 1215.89 L1157.26 1215.89 L1156.67 1215.89 L1156.09 1215.89 L1155.5 1215.89 L1154.91 1215.89 L1154.33 1215.89 L1153.74 1215.89 L1153.15 1215.89 L1152.57 1215.89 L1151.98 1215.89 L1151.39 1215.89 L1150.81 1215.89 L1150.22 1215.89 L1149.63 1215.89 L1149.05 1215.89 L1148.46 1215.89 L1147.88 1215.89 L1147.29 1215.89 L1146.7 1215.89 L1146.12 1215.89 L1145.53 1215.89 L1144.94 1215.89 L1144.36 1215.89 L1143.77 1215.89 L1143.18 1215.89 L1142.6 1215.89 L1142.01 1215.89 L1141.42 1215.89 L1140.84 1215.89 L1140.25 1215.89 L1139.67 1215.89 L1139.08 1215.89 L1138.49 1215.89 L1137.91 1215.89 L1137.32 1215.89 L1136.73 1215.89 L1136.15 1215.89 L1135.56 1215.89 L1134.97 1215.89 L1134.39 1215.89 L1133.8 1215.89 L1133.21 1215.89 L1132.63 1215.89 L1132.04 1215.89 L1131.46 1215.89 L1130.87 1215.89 L1130.28 1215.89 L1129.7 1215.89 L1129.11 1215.89 L1128.52 1215.89 L1127.94 1215.89 L1127.35 1215.89 L1126.76 1215.89 L1126.18 1215.89 L1125.59 1215.89 L1125.01 1215.89 L1124.42 1215.89 L1123.83 1215.89 L1123.25 1215.89 L1122.66 1215.89 L1122.07 1215.89 L1121.49 1215.89 L1120.9 1215.89 L1120.31 1215.89 L1119.73 1215.89 L1119.14 1215.89 L1118.55 1215.89 L1117.97 1215.89 L1117.38 1215.89 L1116.8 1215.89 L1116.21 1215.89 L1115.62 1215.89 L1115.04 1215.89 L1114.45 1215.89 L1113.86 1215.89 L1113.28 1215.89 L1112.69 1215.89 L1112.1 1215.89 L1111.52 1215.89 L1110.93 1215.89 L1110.34 1215.89 L1109.76 1215.89 L1109.17 1215.89 L1108.59 1215.89 L1108 1215.89 L1107.41 1215.89 L1106.83 1215.89 L1106.24 1215.89 L1105.65 1215.89 L1105.07 1215.89 L1104.48 1215.89 L1103.89 1215.89 L1103.31 1215.89 L1102.72 1215.89 L1102.14 1215.89 L1101.55 1215.89 L1100.96 1215.89 L1100.38 1215.89 L1099.79 1215.89 L1099.2 1215.89 L1098.62 1215.89 L1098.03 1215.89 L1097.44 1215.89 L1096.86 1215.89 L1096.27 1215.89 L1095.68 1215.89 L1095.1 1215.89 L1094.51 1215.89 L1093.93 1215.89 L1093.34 1215.89 L1092.75 1215.89 L1092.17 1215.89 L1091.58 1215.89 L1090.99 1215.89 L1090.41 1215.89 L1089.82 1215.89 L1089.23 1215.89 L1088.65 1215.89 L1088.06 1215.89 L1087.47 1215.89 L1086.89 1215.89 L1086.3 1215.89 L1085.72 1215.89 L1085.13 1215.89 L1084.54 1215.89 L1083.96 1215.89 L1083.37 1215.89 L1082.78 1215.89 L1082.2 1215.89 L1081.61 1215.89 L1081.02 1215.89 L1080.44 1215.89 L1079.85 1215.89 L1079.26 1215.89 L1078.68 1215.89 L1078.09 1215.89 L1077.51 1215.89 L1076.92 1215.89 L1076.33 1215.89 L1075.75 1215.89 L1075.16 1215.89 L1074.57 1215.89 L1073.99 1215.89 L1073.4 1215.89 L1072.81 1215.89 L1072.23 1215.89 L1071.64 1215.89 L1071.06 1215.89 L1070.47 1215.89 L1069.88 1215.89 L1069.3 1215.89 L1068.71 1215.89 L1068.12 1215.89 L1067.54 1215.89 L1066.95 1215.89 L1066.36 1215.89 L1065.78 1215.89 L1065.19 1215.89 L1064.6 1215.89 L1064.02 1215.89 L1063.43 1215.89 L1062.85 1215.89 L1062.26 1215.89 L1061.67 1215.89 L1061.09 1215.89 L1060.5 1215.89 L1059.91 1215.89 L1059.33 1215.89 L1058.74 1215.89 L1058.15 1215.89 L1057.57 1215.89 L1056.98 1215.89 L1056.39 1215.89 L1055.81 1215.89 L1055.22 1215.89 L1054.64 1215.89 L1054.05 1215.89 L1053.46 1215.89 L1052.88 1215.89 L1052.29 1215.89 L1051.7 1215.89 L1051.12 1215.89 L1050.53 1215.89 L1049.94 1215.89 L1049.36 1215.89 L1048.77 1215.89 L1048.19 1215.89 L1047.6 1215.89 L1047.01 1215.89 L1046.43 1215.89 L1045.84 1215.89 L1045.25 1215.89 L1044.67 1215.89 L1044.08 1215.89 L1043.49 1215.89 L1042.91 1215.89 L1042.32 1215.89 L1041.73 1215.89 L1041.15 1215.89 L1040.56 1215.89 L1039.98 1215.89 L1039.39 1215.89 L1038.8 1215.89 L1038.22 1215.89 L1037.63 1215.89 L1037.04 1215.89 L1036.46 1215.89 L1035.87 1215.89 L1035.28 1215.89 L1034.7 1215.89 L1034.11 1215.89 L1033.52 1215.89 L1032.94 1215.89 L1032.35 1215.89 L1031.77 1215.89 L1031.18 1215.89 L1030.59 1215.89 L1030.01 1215.89 L1029.42 1215.89 L1028.83 1215.89 L1028.25 1215.89 L1027.66 1215.89 L1027.07 1215.89 L1026.49 1215.89 L1025.9 1215.89 L1025.32 1215.89 L1024.73 1215.89 L1024.14 1215.89 L1023.56 1215.89 L1022.97 1215.89 L1022.38 1215.89 L1021.8 1215.89 L1021.21 1215.89 L1020.62 1215.89 L1020.04 1215.89 L1019.45 1215.89 L1018.86 1215.89 L1018.28 1215.89 L1017.69 1215.89 L1017.11 1215.89 L1016.52 1215.89 L1015.93 1215.89 L1015.35 1215.89 L1014.76 1215.89 L1014.17 1215.89 L1013.59 1215.89 L1013 1215.89 L1012.41 1215.89 L1011.83 1215.89 L1011.24 1215.89 L1010.65 1215.89 L1010.07 1215.89 L1009.48 1215.89 L1008.9 1215.89 L1008.31 1215.89 L1007.72 1215.89 L1007.14 1215.89 L1006.55 1215.89 L1005.96 1215.89 L1005.38 1215.89 L1004.79 1215.89 L1004.2 1215.89 L1003.62 1215.89 L1003.03 1215.89 L1002.44 1215.89 L1001.86 1215.89 L1001.27 1215.89 L1000.69 1215.89 L1000.1 1215.89 L999.513 1215.89 L998.926 1215.89 L998.34 1215.89 L997.754 1215.89 L997.167 1215.89 L996.581 1215.89 L995.994 1215.89 L995.408 1215.89 L994.822 1215.89 L994.235 1215.89 L993.649 1215.89 L993.062 1215.89 L992.476 1215.89 L991.889 1215.89 L991.303 1215.89 L990.717 1215.89 L990.13 1215.89 L989.544 1215.89 L988.957 1215.89 L988.371 1215.89 L987.785 1215.89 L987.198 1215.89 L986.612 1215.89 L986.025 1215.89  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1216.23 986.612,1216.23 987.198,1216.23 987.785,1216.23 988.371,1216.23 988.957,1216.23 989.544,1216.23 990.13,1216.23 990.717,1216.23 991.303,1216.23 991.889,1216.23 992.476,1216.23 993.062,1216.23 993.649,1216.23 994.235,1216.23 994.822,1216.23 995.408,1216.23 995.994,1216.23 996.581,1216.23 997.167,1216.23 997.754,1216.23 998.34,1216.23 998.926,1216.23 999.513,1216.23 1000.1,1216.23 1000.69,1216.23 1001.27,1216.23 1001.86,1216.23 1002.44,1216.23 1003.03,1216.23 1003.62,1216.23 1004.2,1216.23 1004.79,1216.23 1005.38,1216.23 1005.96,1216.23 1006.55,1216.23 1007.14,1216.23 1007.72,1216.23 1008.31,1216.23 1008.9,1216.23 1009.48,1216.23 1010.07,1216.23 1010.65,1216.23 1011.24,1216.23 1011.83,1216.23 1012.41,1216.23 1013,1216.23 1013.59,1216.23 1014.17,1216.23 1014.76,1216.23 1015.35,1216.23 1015.93,1216.23 1016.52,1216.23 1017.11,1216.23 1017.69,1216.23 1018.28,1216.23 1018.86,1216.23 1019.45,1216.23 1020.04,1216.23 1020.62,1216.23 1021.21,1216.23 1021.8,1216.23 1022.38,1216.23 1022.97,1216.23 1023.56,1216.23 1024.14,1216.23 1024.73,1216.23 1025.32,1216.23 1025.9,1216.23 1026.49,1216.23 1027.07,1216.23 1027.66,1216.23 1028.25,1216.23 1028.83,1216.23 1029.42,1216.23 1030.01,1216.23 1030.59,1216.23 1031.18,1216.23 1031.77,1216.23 1032.35,1216.23 1032.94,1216.23 1033.52,1216.23 1034.11,1216.23 1034.7,1216.23 1035.28,1216.23 1035.87,1216.23 1036.46,1216.23 1037.04,1216.23 1037.63,1216.23 1038.22,1216.23 1038.8,1216.23 1039.39,1216.23 1039.98,1216.23 1040.56,1216.23 1041.15,1216.23 1041.73,1216.23 1042.32,1216.23 1042.91,1216.23 1043.49,1216.23 1044.08,1216.23 1044.67,1216.23 1045.25,1216.23 1045.84,1216.23 1046.43,1216.23 1047.01,1216.23 1047.6,1216.23 1048.19,1216.23 1048.77,1216.23 1049.36,1216.23 1049.94,1216.23 1050.53,1216.23 1051.12,1216.23 1051.7,1216.23 1052.29,1216.23 1052.88,1216.23 1053.46,1216.23 1054.05,1216.23 1054.64,1216.23 1055.22,1216.23 1055.81,1216.23 1056.39,1216.23 1056.98,1216.23 1057.57,1216.23 1058.15,1216.23 1058.74,1216.23 1059.33,1216.23 1059.91,1216.23 1060.5,1216.23 1061.09,1216.23 1061.67,1216.23 1062.26,1216.23 1062.85,1216.23 1063.43,1216.23 1064.02,1216.23 1064.6,1216.23 1065.19,1216.23 1065.78,1216.23 1066.36,1216.23 1066.95,1216.23 1067.54,1216.23 1068.12,1216.23 1068.71,1216.23 1069.3,1216.23 1069.88,1216.23 1070.47,1216.23 1071.06,1216.23 1071.64,1216.23 1072.23,1216.23 1072.81,1216.23 1073.4,1216.23 1073.99,1216.23 1074.57,1216.23 1075.16,1216.23 1075.75,1216.23 1076.33,1216.23 1076.92,1216.23 1077.51,1216.23 1078.09,1216.23 1078.68,1216.23 1079.26,1216.23 1079.85,1216.23 1080.44,1216.23 1081.02,1216.23 1081.61,1216.23 1082.2,1216.23 1082.78,1216.23 1083.37,1216.23 1083.96,1216.23 1084.54,1216.23 1085.13,1216.23 1085.72,1216.23 1086.3,1216.23 1086.89,1216.23 1087.47,1216.23 1088.06,1216.23 1088.65,1216.23 1089.23,1216.23 1089.82,1216.23 1090.41,1216.23 1090.99,1216.23 1091.58,1216.23 1092.17,1216.23 1092.75,1216.23 1093.34,1216.23 1093.93,1216.23 1094.51,1216.23 1095.1,1216.23 1095.68,1216.23 1096.27,1216.23 1096.86,1216.23 1097.44,1216.23 1098.03,1216.23 1098.62,1216.23 1099.2,1216.23 1099.79,1216.23 1100.38,1216.23 1100.96,1216.23 1101.55,1216.23 1102.14,1216.23 1102.72,1216.23 1103.31,1216.23 1103.89,1216.23 1104.48,1216.23 1105.07,1216.23 1105.65,1216.23 1106.24,1216.23 1106.83,1216.23 1107.41,1216.23 1108,1216.23 1108.59,1216.23 1109.17,1216.23 1109.76,1216.23 1110.34,1216.23 1110.93,1216.23 1111.52,1216.23 1112.1,1216.23 1112.69,1216.23 1113.28,1216.23 1113.86,1216.23 1114.45,1216.23 1115.04,1216.23 1115.62,1216.23 1116.21,1216.23 1116.8,1216.23 1117.38,1216.23 1117.97,1216.23 1118.55,1216.23 1119.14,1216.23 1119.73,1216.23 1120.31,1216.23 1120.9,1216.23 1121.49,1216.23 1122.07,1216.23 1122.66,1216.23 1123.25,1216.23 1123.83,1216.23 1124.42,1216.23 1125.01,1216.23 1125.59,1216.23 1126.18,1216.23 1126.76,1216.23 1127.35,1216.23 1127.94,1216.23 1128.52,1216.23 1129.11,1216.23 1129.7,1216.23 1130.28,1216.23 1130.87,1216.23 1131.46,1216.23 1132.04,1216.23 1132.63,1216.23 1133.21,1216.23 1133.8,1216.23 1134.39,1216.23 1134.97,1216.23 1135.56,1216.23 1136.15,1216.23 1136.73,1216.23 1137.32,1216.23 1137.91,1216.23 1138.49,1216.23 1139.08,1216.23 1139.67,1216.23 1140.25,1216.23 1140.84,1216.23 1141.42,1216.23 1142.01,1216.23 1142.6,1216.23 1143.18,1216.23 1143.77,1216.23 1144.36,1216.23 1144.94,1216.23 1145.53,1216.23 1146.12,1216.23 1146.7,1216.23 1147.29,1216.23 1147.88,1216.23 1148.46,1216.23 1149.05,1216.23 1149.63,1216.23 1150.22,1216.23 1150.81,1216.23 1151.39,1216.23 1151.98,1216.23 1152.57,1216.23 1153.15,1216.23 1153.74,1216.23 1154.33,1216.23 1154.91,1216.23 1155.5,1216.23 1156.09,1216.23 1156.67,1216.23 1157.26,1216.23 1157.84,1216.23 1158.43,1216.23 1159.02,1216.23 1159.6,1216.23 1160.19,1216.23 1160.78,1216.23 1161.36,1216.23 1161.95,1216.23 1162.54,1216.23 1163.12,1216.23 1163.71,1216.23 1164.29,1216.23 1164.88,1216.23 1165.47,1216.23 1166.05,1216.23 1166.64,1216.23 1167.23,1216.23 1167.81,1216.23 1168.4,1216.23 1168.99,1216.23 1169.57,1216.23 1170.16,1216.23 1170.75,1216.23 1171.33,1216.23 1171.92,1216.23 1172.5,1216.23 1173.09,1216.23 1173.68,1216.23 1174.26,1216.23 1174.85,1216.23 1175.44,1216.23 1176.02,1216.23 1176.61,1216.23 1177.2,1216.23 1177.78,1216.23 1178.37,1216.23 1178.96,1216.23 1179.54,1216.23 1180.13,1216.23 1180.71,1216.23 1181.3,1216.23 1181.89,1216.23 1182.47,1216.23 1183.06,1216.23 1183.65,1216.23 1184.23,1216.23 1184.82,1216.23 1185.41,1216.23 1185.99,1216.23 1186.58,1216.23 1187.16,1216.23 1187.75,1216.23 1188.34,1216.23 1188.92,1216.23 1189.51,1216.23 1190.1,1216.23 1190.68,1216.23 1191.27,1216.23 1191.86,1216.23 1192.44,1216.23 1193.03,1216.23 1193.62,1216.23 1194.2,1216.23 1194.79,1216.23 1195.37,1216.23 1195.96,1216.23 1196.55,1216.23 1197.13,1216.23 1197.72,1216.23 1198.31,1216.23 1198.89,1216.23 1199.48,1216.23 1200.07,1216.23 1200.65,1216.23 1201.24,1216.23 1201.83,1216.23 1202.41,1216.23 1203,1216.23 1203.58,1216.23 1204.17,1216.23 1204.76,1216.23 1205.34,1216.23 1205.93,1216.23 1206.52,1216.23 1207.1,1216.23 1207.69,1216.23 1208.28,1216.23 1208.86,1216.23 1209.45,1216.23 1210.03,1216.23 1210.62,1216.23 1211.21,1216.23 1211.79,1216.23 1212.38,1216.23 1212.97,1216.23 1213.55,1216.23 1214.14,1216.23 1214.73,1216.23 1215.31,1216.23 1215.9,1216.23 1216.49,1216.23 1217.07,1216.23 1217.66,1216.23 1218.24,1216.23 1218.83,1216.23 1219.42,1216.23 1220,1216.23 1220.59,1216.23 1221.18,1216.23 1221.76,1216.23 1222.35,1216.23 1222.94,1216.23 1223.52,1216.23 1224.11,1216.23 1224.7,1216.23 1225.28,1216.23 1225.87,1216.23 1226.45,1216.23 1227.04,1216.23 1227.63,1216.23 1228.21,1216.23 1228.8,1216.23 1229.39,1216.23 1229.97,1216.23 1230.56,1216.23 1231.15,1216.23 1231.73,1216.23 1232.32,1216.23 1232.91,1216.23 1233.49,1216.23 1234.08,1216.23 1234.66,1216.23 1235.25,1216.23 1235.84,1216.23 1236.42,1216.23 1237.01,1216.23 1237.6,1216.23 1238.18,1216.23 1238.77,1216.23 1239.36,1216.23 1239.94,1216.23 1240.53,1216.23 1241.11,1216.23 1241.7,1216.23 1242.29,1216.23 1242.87,1216.23 1243.46,1216.23 1244.05,1216.23 1244.63,1216.23 1245.22,1216.23 1245.81,1216.23 1246.39,1216.23 1246.98,1216.23 1247.57,1216.23 1248.15,1216.23 1248.74,1216.23 1249.32,1216.23 1249.91,1216.23 1250.5,1216.23 1251.08,1216.23 1251.67,1216.23 1252.26,1216.23 1252.84,1216.23 1253.43,1216.23 1254.02,1216.23 1254.6,1216.23 1255.19,1216.23 1255.78,1216.23 1256.36,1216.23 1256.95,1216.23 1257.53,1216.23 1258.12,1216.23 1258.71,1216.23 1259.29,1216.23 1259.88,1216.23 1260.47,1216.23 1261.05,1216.23 1261.64,1216.23 1262.23,1216.23 1262.81,1216.23 1263.4,1216.23 1263.98,1216.23 1264.57,1216.23 1265.16,1216.23 1265.74,1216.23 1266.33,1216.23 1266.92,1216.23 1267.5,1216.23 1268.09,1216.23 1268.68,1216.23 1269.26,1216.23 1269.85,1216.23 1270.44,1216.23 1271.02,1216.23 1271.61,1216.23 1272.19,1216.23 1272.78,1216.23 1273.37,1216.23 1273.95,1216.23 1274.54,1216.23 1275.13,1216.23 1275.71,1216.23 1276.3,1216.23 1276.89,1216.23 1277.47,1216.23 1278.06,1216.23 1278.65,1216.23 1279.23,1216.23 1279.82,1216.23 1280.4,1216.23 1280.99,1216.23 1281.58,1216.23 1282.16,1216.23 1282.75,1216.23 1283.34,1216.23 1283.92,1216.23 1284.51,1216.23 1285.1,1216.23 1285.68,1216.23 1286.27,1216.23 1286.86,1216.23 1287.44,1216.23 1288.03,1216.23 1288.61,1216.23 1289.2,1216.23 1289.79,1216.23 1290.37,1216.23 1290.96,1216.23 1291.55,1216.23 1292.13,1216.23 1292.72,1216.23 1293.31,1216.23 1293.89,1216.23 1294.48,1216.23 1295.06,1216.23 1295.65,1216.23 1296.24,1216.23 1296.82,1216.23 1297.41,1216.23 1298,1216.23 1298.58,1216.23 1299.17,1216.23 1299.76,1216.23 1300.34,1216.23 1300.93,1216.23 1301.52,1216.23 1302.1,1216.23 1302.69,1216.23 1303.27,1216.23 1303.86,1216.23 1304.45,1216.23 1305.03,1216.23 1305.62,1216.23 1306.21,1216.23 1306.79,1216.23 1307.38,1216.23 1307.97,1216.23 1308.55,1216.23 1309.14,1216.23 1309.73,1216.23 1310.31,1216.23 1310.9,1216.23 1311.48,1216.23 1312.07,1216.23 1312.66,1216.23 1313.24,1216.23 1313.83,1216.23 1314.42,1216.23 1315,1216.23 1315.59,1216.23 1316.18,1216.23 1316.76,1216.23 1317.35,1216.23 1317.93,1216.23 1318.52,1216.23 1319.11,1216.23 1319.69,1216.23 1320.28,1216.23 1320.87,1216.23 1321.45,1216.23 1322.04,1216.23 1322.63,1216.23 1323.21,1216.23 1323.8,1216.23 1324.39,1216.23 1324.97,1216.23 1325.56,1216.23 1326.14,1216.23 1326.73,1216.23 1327.32,1216.23 1327.9,1216.23 1328.49,1216.23 1329.08,1216.23 1329.66,1216.23 1330.25,1216.23 1330.84,1216.23 1331.42,1216.23 1332.01,1216.23 1332.6,1216.23 1333.18,1216.23 1333.77,1216.23 1334.35,1216.23 1334.94,1216.23 1335.53,1216.23 1336.11,1216.23 1336.7,1216.23 1337.29,1216.23 1337.87,1216.23 1338.46,1216.23 1339.05,1216.23 1339.63,1216.23 1340.22,1216.23 1340.8,1216.23 1341.39,1216.23 1341.98,1216.23 1342.56,1216.23 1343.15,1216.23 1343.74,1216.23 1344.32,1216.23 1344.91,1216.23 1345.5,1216.23 1346.08,1216.23 1346.67,1216.23 1347.26,1216.23 1347.84,1216.23 1348.43,1216.23 1349.01,1216.23 1349.6,1216.23 1350.19,1216.23 1350.77,1216.23 1351.36,1216.23 1351.95,1216.23 1352.53,1216.23 1353.12,1216.23 1353.71,1216.23 1354.29,1216.23 1354.88,1216.23 1355.47,1216.23 1356.05,1216.23 1356.64,1216.23 1357.22,1216.23 1357.81,1216.23 1358.4,1216.23 1358.98,1216.23 1359.57,1216.23 1360.16,1216.23 1360.74,1216.23 1361.33,1216.23 1361.92,1216.23 1362.5,1216.23 1363.09,1216.23 1363.68,1216.23 1364.26,1216.23 1364.85,1216.23 1365.43,1216.23 1366.02,1216.23 1366.61,1216.23 1367.19,1216.23 1367.78,1216.23 1368.37,1216.23 1368.95,1216.23 1369.54,1216.23 1370.13,1216.23 1370.71,1216.23 1371.3,1216.23 1371.88,1216.23 1372.47,1216.23 1373.06,1216.23 1373.64,1216.23 1374.23,1216.23 1374.82,1216.23 1375.4,1216.23 1375.99,1216.23 1376.58,1216.23 1377.16,1216.23 1377.75,1216.23 1378.34,1216.23 1378.92,1216.23 1379.51,1216.23 1380.09,1216.23 1380.68,1216.23 1381.27,1216.23 1381.85,1216.23 1382.44,1216.23 1383.03,1216.23 1383.61,1216.23 1384.2,1216.23 1384.79,1216.23 1385.37,1216.23 1385.96,1216.23 1386.55,1216.23 1387.13,1216.23 1387.72,1216.23 1388.3,1216.23 1388.89,1216.23 1389.48,1216.23 1390.06,1216.23 1390.65,1216.23 1391.24,1216.23 1391.82,1216.23 1392.41,1216.23 1393,1216.23 1393.58,1216.23 1394.17,1216.23 1394.75,1216.23 1395.34,1216.23 1395.93,1216.23 1396.51,1216.23 1397.1,1216.23 1397.69,1216.23 1398.27,1216.23 1398.86,1216.23 1399.45,1216.23 1400.03,1216.23 1400.62,1216.23 1401.21,1216.23 1401.79,1216.23 1402.38,1216.23 1402.96,1216.23 1403.55,1216.23 1404.14,1216.23 1404.72,1216.23 1405.31,1216.23 1405.9,1216.23 1406.48,1216.23 1407.07,1216.23 1407.66,1216.23 1408.24,1216.23 1408.83,1216.23 1409.42,1216.23 1410,1216.23 1410.59,1216.23 1411.17,1216.23 1411.76,1216.23 1412.35,1216.23 1412.93,1216.23 1413.52,1216.23 1414.11,1216.23 1414.69,1216.23 1415.28,1216.23 1415.87,1216.23 1416.45,1216.23 1417.04,1216.23 1417.63,1216.23 1418.21,1216.23 1418.8,1216.23 1419.38,1216.23 1419.97,1216.23 1420.56,1216.23 1421.14,1216.23 1421.73,1216.23 1422.32,1216.23 1422.9,1216.23 1423.49,1216.23 1424.08,1216.23 1424.66,1216.23 1425.25,1216.23 1425.83,1216.23 1426.42,1216.23 1427.01,1216.23 1427.59,1216.23 1428.18,1216.23 1428.77,1216.23 1429.35,1216.23 1429.94,1216.23 1430.53,1216.23 1431.11,1216.23 1431.7,1216.23 1432.29,1216.23 1432.87,1216.23 1433.46,1216.23 1434.04,1216.23 1434.63,1216.23 1435.22,1216.23 1435.8,1216.23 1436.39,1216.23 1436.98,1216.23 1437.56,1216.23 1438.15,1216.23 1438.74,1216.23 1439.32,1216.23 1439.91,1216.23 1440.5,1216.23 1441.08,1216.23 1441.67,1216.23 1442.25,1216.23 1442.84,1216.23 1443.43,1216.23 1444.01,1216.23 1444.6,1216.23 1445.19,1216.23 1445.77,1216.23 1446.36,1216.23 1446.95,1216.23 1447.53,1216.23 1448.12,1216.23 1448.7,1216.23 1449.29,1216.23 1449.88,1216.23 1450.46,1216.23 1451.05,1216.23 1451.64,1216.23 1452.22,1216.23 1452.81,1216.23 1453.4,1216.23 1453.98,1216.23 1454.57,1216.23 1455.16,1216.23 1455.74,1216.23 1456.33,1216.23 1456.91,1216.23 1457.5,1216.23 1458.09,1216.23 1458.67,1216.23 1459.26,1216.23 1459.85,1216.23 1460.43,1216.23 1461.02,1216.23 1461.61,1216.23 1462.19,1216.23 1462.78,1216.23 1463.37,1216.23 1463.95,1216.23 1464.54,1216.23 1465.12,1216.23 1465.71,1216.23 1466.3,1216.23 1466.88,1216.23 1467.47,1216.23 1468.06,1216.23 1468.64,1216.23 1469.23,1216.23 1469.82,1216.23 1470.4,1216.23 1470.99,1216.23 1471.57,1216.23 1472.16,1216.23 1472.75,1216.23 1473.33,1216.23 1473.92,1216.23 1474.51,1216.23 1475.09,1216.23 1475.68,1216.23 1476.27,1216.23 1476.85,1216.23 1477.44,1216.23 1478.03,1216.23 1478.61,1216.23 1479.2,1216.23 1479.78,1216.23 1480.37,1216.23 1480.96,1216.23 1481.54,1216.23 1482.13,1216.23 1482.72,1216.23 1483.3,1216.23 1483.89,1216.23 1484.48,1216.23 1485.06,1216.23 1485.65,1216.23 1486.24,1216.23 1486.82,1216.23 1487.41,1216.23 1487.99,1216.23 1488.58,1216.23 1489.17,1216.23 1489.75,1216.23 1490.34,1216.23 1490.93,1216.23 1491.51,1216.23 1492.1,1216.23 1492.69,1216.23 1493.27,1216.23 1493.86,1216.23 1494.45,1216.23 1495.03,1216.23 1495.62,1216.23 1496.2,1216.23 1496.79,1216.23 1497.38,1216.23 1497.96,1216.23 1498.55,1216.23 1499.14,1216.23 1499.72,1216.23 1500.31,1216.23 1500.9,1216.23 1501.48,1216.23 1502.07,1216.23 1502.65,1216.23 1503.24,1216.23 1503.83,1216.23 1504.41,1216.23 1505,1216.23 1505.59,1216.23 1506.17,1216.23 1506.76,1216.23 1507.35,1216.23 1507.93,1216.23 1508.52,1216.23 1509.11,1216.23 1509.69,1216.23 1510.28,1216.23 1510.86,1216.23 1511.45,1216.23 1512.04,1216.23 1512.62,1216.23 1513.21,1216.23 1513.8,1216.23 1514.38,1216.23 1514.97,1216.23 1515.56,1216.23 1516.14,1216.23 1516.73,1216.23 1517.32,1216.23 1517.9,1216.23 1518.49,1216.23 1519.07,1216.23 1519.66,1216.23 1520.25,1216.23 1520.83,1216.23 1521.42,1216.23 1522.01,1216.23 1522.59,1216.23 1523.18,1216.23 1523.77,1216.23 1524.35,1216.23 1524.94,1216.23 1525.52,1216.23 1526.11,1216.23 1526.7,1216.23 1527.28,1216.23 1527.87,1216.23 1528.46,1216.23 1529.04,1216.23 1529.63,1216.23 1530.22,1216.23 1530.8,1216.23 1531.39,1216.23 1531.98,1216.23 1532.56,1216.23 1533.15,1216.23 1533.73,1216.23 1534.32,1216.23 1534.91,1216.23 1535.49,1216.23 1536.08,1216.23 1536.67,1216.23 1537.25,1216.23 1537.84,1216.23 1538.43,1216.23 1539.01,1216.23 1539.6,1216.23 1540.19,1216.23 1540.77,1216.23 1541.36,1216.23 1541.94,1216.23 1542.53,1216.23 1543.12,1216.23 1543.7,1216.23 1544.29,1216.23 1544.88,1216.23 1545.46,1216.23 1546.05,1216.23 1546.64,1216.23 1547.22,1216.23 1547.81,1216.23 1548.4,1216.23 1548.98,1216.23 1549.57,1216.23 1550.15,1216.23 1550.74,1216.23 1551.33,1216.23 1551.91,1216.23 1552.5,1216.23 1553.09,1216.23 1553.67,1216.23 1554.26,1216.23 1554.85,1216.23 1555.43,1216.23 1556.02,1216.23 1556.6,1216.23 1557.19,1216.23 1557.78,1216.23 1558.36,1216.23 1558.95,1216.23 1559.54,1216.23 1560.12,1216.23 1560.71,1216.23 1561.3,1216.23 1561.88,1216.23 1562.47,1216.23 1563.06,1216.23 1563.64,1216.23 1564.23,1216.23 1564.81,1216.23 1565.4,1216.23 1565.99,1216.23 1566.57,1216.23 1567.16,1216.23 1567.75,1216.23 1568.33,1216.23 1568.92,1216.23 1569.51,1216.23 1570.09,1216.23 1570.68,1216.23 1571.27,1216.23 1571.85,1216.23 1572.44,1216.23 1573.02,1216.23 1573.61,1216.23 1574.2,1216.23 1574.78,1216.23 1575.37,1216.23 1575.96,1216.23 1576.54,1216.23 1577.13,1216.23 1577.72,1216.23 1578.3,1216.23 1578.89,1216.23 1579.47,1216.23 1580.06,1216.23 1580.65,1216.23 1581.23,1216.23 1581.82,1216.23 1582.41,1216.23 1582.99,1216.23 1583.58,1216.23 1584.17,1216.23 1584.75,1216.23 1585.34,1216.23 1585.93,1216.23 1586.51,1216.23 1587.1,1216.23 1587.68,1216.23 1588.27,1216.23 1588.86,1216.23 1589.44,1216.23 1590.03,1216.23 1590.62,1216.23 1591.2,1216.23 1591.79,1216.23 1592.38,1216.23 1592.96,1216.23 1593.55,1216.23 1594.14,1216.23 1594.72,1216.23 1595.31,1216.23 1595.89,1216.23 1596.48,1216.23 1597.07,1216.23 1597.65,1216.23 1598.24,1216.23 1598.83,1216.23 1599.41,1216.23 1600,1216.23 1600.59,1216.23 1601.17,1216.23 1601.76,1216.23 1602.34,1216.23 1602.93,1216.23 1603.52,1216.23 1604.1,1216.23 1604.69,1216.23 1605.28,1216.23 1605.86,1216.23 1606.45,1216.23 1607.04,1216.23 1607.62,1216.23 1608.21,1216.23 1608.8,1216.23 1609.38,1216.23 1609.97,1216.23 1610.55,1216.23 1611.14,1216.23 1611.73,1216.23 1612.31,1216.23 1612.9,1216.23 1613.49,1216.23 1614.07,1216.23 1614.66,1216.23 1615.25,1216.23 1615.83,1216.23 1616.42,1216.23 1617.01,1216.23 1617.59,1216.23 1618.18,1216.23 1618.76,1216.23 1619.35,1216.23 1619.94,1216.23 1620.52,1216.23 1621.11,1216.23 1621.7,1216.23 1622.28,1216.23 1622.87,1216.23 1623.46,1216.23 1624.04,1216.23 1624.63,1216.23 1625.22,1216.23 1625.8,1216.23 1626.39,1216.23 1626.97,1216.23 1627.56,1216.23 1628.15,1216.23 1628.73,1216.23 1629.32,1216.23 1629.91,1216.23 1630.49,1216.23 1631.08,1216.23 1631.67,1216.23 1632.25,1216.23 1632.84,1216.23 1633.42,1216.23 1634.01,1216.23 1634.6,1216.23 1635.18,1216.23 1635.77,1216.23 1636.36,1216.23 1636.94,1216.23 1637.53,1216.23 1638.12,1216.23 1638.7,1216.23 1639.29,1216.23 1639.88,1216.23 1640.46,1216.23 1641.05,1216.23 1641.63,1216.23 1642.22,1216.23 1642.81,1216.23 1643.39,1216.23 1643.98,1216.23 1644.57,1216.23 1645.15,1216.23 1645.74,1216.23 1646.33,1216.23 1646.91,1216.23 1647.5,1216.23 1648.09,1216.23 1648.67,1216.23 1649.26,1216.23 1649.84,1216.23 1650.43,1216.23 1651.02,1216.23 1651.6,1216.23 1652.19,1216.23 1652.78,1216.23 1653.36,1216.23 1653.95,1216.23 1654.54,1216.23 1655.12,1216.23 1655.71,1216.23 1656.29,1216.23 1656.88,1216.23 1657.47,1216.23 1658.05,1216.23 1658.64,1216.23 1659.23,1216.23 1659.81,1216.23 1660.4,1216.23 1660.99,1216.23 1661.57,1216.23 1662.16,1216.23 1662.75,1216.23 1663.33,1216.23 1663.92,1216.23 1664.5,1216.23 1665.09,1216.23 1665.68,1216.23 1666.26,1216.23 1666.85,1216.23 1667.44,1216.23 1668.02,1216.23 1668.61,1216.23 1669.2,1216.23 1669.78,1216.23 1670.37,1216.23 1670.96,1216.23 1671.54,1216.23 1672.13,1216.23 1672.71,1216.23 1673.3,1216.23 1673.89,1216.23 1674.47,1216.23 1675.06,1216.23 1675.65,1216.23 1676.23,1216.23 1676.82,1216.23 1677.41,1216.23 1677.99,1216.23 1678.58,1216.23 1679.17,1216.23 1679.75,1216.23 1680.34,1216.23 1680.92,1216.23 1681.51,1216.23 1682.1,1216.23 1682.68,1216.23 1683.27,1216.23 1683.86,1216.23 1684.44,1216.23 1685.03,1216.23 1685.62,1216.23 1686.2,1216.23 1686.79,1216.23 1687.37,1216.23 1687.96,1216.23 1688.55,1216.23 1689.13,1216.23 1689.72,1216.23 1690.31,1216.23 1690.89,1216.23 1691.48,1216.23 1692.07,1216.23 1692.65,1216.23 1693.24,1216.23 1693.83,1216.23 1694.41,1216.23 1695,1216.23 1695.58,1216.23 1696.17,1216.23 1696.76,1216.23 1697.34,1216.23 1697.93,1216.23 1698.52,1216.23 1699.1,1216.23 1699.69,1216.23 1700.28,1216.23 1700.86,1216.23 1701.45,1216.23 1702.04,1216.23 1702.62,1216.23 1703.21,1216.23 1703.79,1216.23 1704.38,1216.23 1704.97,1216.23 1705.55,1216.23 1706.14,1216.23 1706.73,1216.23 1707.31,1216.23 1707.9,1216.23 1708.49,1216.23 1709.07,1216.23 1709.66,1216.23 1710.24,1216.23 1710.83,1216.23 1711.42,1216.23 1712,1216.23 1712.59,1216.23 1713.18,1216.23 1713.76,1216.23 1714.35,1216.23 1714.94,1216.23 1715.52,1216.23 1716.11,1216.23 1716.7,1216.23 1717.28,1216.23 1717.87,1216.23 1718.45,1216.23 1719.04,1216.23 1719.63,1216.23 1720.21,1216.23 1720.8,1216.23 1721.39,1216.23 1721.97,1216.23 1722.56,1216.23 1723.15,1216.23 1723.73,1216.23 1724.32,1216.23 1724.91,1216.23 1725.49,1216.23 1726.08,1216.23 1726.66,1216.23 1727.25,1216.23 1727.84,1216.23 1728.42,1216.23 1729.01,1216.23 1729.6,1216.23 1730.18,1216.23 1730.77,1216.23 1731.36,1216.23 1731.94,1216.23 1732.53,1216.23 1733.11,1216.23 1733.7,1216.23 1734.29,1216.23 1734.87,1216.23 1735.46,1216.23 1736.05,1216.23 1736.63,1216.23 1737.22,1216.23 1737.81,1216.23 1738.39,1216.23 1738.98,1216.23 1739.57,1216.23 1740.15,1216.23 1740.74,1216.23 1741.32,1216.23 1741.91,1216.23 1742.5,1216.23 1743.08,1216.23 1743.67,1216.23 1744.26,1216.23 1744.84,1216.23 1745.43,1216.23 1746.02,1216.23 1746.6,1216.23 1747.19,1216.23 1747.78,1216.23 1748.36,1216.23 1748.95,1216.23 1749.53,1216.23 1750.12,1216.23 1750.71,1216.23 1751.29,1216.23 1751.88,1216.23 1752.47,1216.23 1753.05,1216.23 1753.64,1216.23 1754.23,1216.23 1754.81,1216.23 1755.4,1216.23 1755.99,1216.23 1756.57,1216.23 1757.16,1216.23 1757.74,1216.23 1758.33,1216.23 1758.92,1216.23 1759.5,1216.23 1760.09,1216.23 1760.68,1216.23 1761.26,1216.23 1761.85,1216.23 1762.44,1216.23 1763.02,1216.23 1763.61,1216.23 1764.19,1216.23 1764.78,1216.23 1765.37,1216.23 1765.95,1216.23 1766.54,1216.23 1767.13,1216.23 1767.71,1216.23 1768.3,1216.23 1768.89,1216.23 1769.47,1216.23 1770.06,1216.23 1770.65,1216.23 1771.23,1216.23 1771.82,1216.23 1772.4,1216.23 1772.99,1216.23 1773.58,1216.23 1774.16,1216.23 1774.75,1216.23 1775.34,1216.23 1775.92,1216.23 1776.51,1216.23 1777.1,1216.23 1777.68,1216.23 1778.27,1216.23 1778.86,1216.23 1779.44,1216.23 1780.03,1216.23 1780.61,1216.23 1781.2,1216.23 1781.79,1216.23 1782.37,1216.23 1782.96,1216.23 1783.55,1216.23 1784.13,1216.23 1784.72,1216.23 1785.31,1216.23 1785.89,1216.23 1786.48,1216.23 1787.06,1216.23 1787.65,1216.23 1788.24,1216.23 1788.82,1216.23 1789.41,1216.23 1790,1216.23 1790.58,1216.23 1791.17,1216.23 1791.76,1216.23 1792.34,1216.23 1792.93,1216.23 1793.52,1216.23 1794.1,1216.23 1794.69,1216.23 1795.27,1216.23 1795.86,1216.23 1796.45,1216.23 1797.03,1216.23 1797.62,1216.23 1798.21,1216.23 1798.79,1216.23 1799.38,1216.23 1799.97,1216.23 1800.55,1216.23 1801.14,1216.23 1801.73,1216.23 1802.31,1216.23 1802.9,1216.23 1803.48,1216.23 1804.07,1216.23 1804.66,1216.23 1805.24,1216.23 1805.83,1216.23 1806.42,1216.23 1807,1216.23 1807.59,1216.23 1808.18,1216.23 1808.76,1216.23 1809.35,1216.23 1809.94,1216.23 1810.52,1216.23 1811.11,1216.23 1811.69,1216.23 1812.28,1216.23 1812.87,1216.23 1813.45,1216.23 1814.04,1216.23 1814.63,1216.23 1815.21,1216.23 1815.8,1216.23 1816.39,1216.23 1816.97,1216.23 1817.56,1216.23 1818.14,1216.23 1818.73,1216.23 1819.32,1216.23 1819.9,1216.23 1820.49,1216.23 1821.08,1216.23 1821.66,1216.23 1822.25,1216.23 1822.84,1216.23 1823.42,1216.23 1824.01,1216.23 1824.6,1216.23 1825.18,1216.23 1825.77,1216.23 1826.35,1216.23 1826.94,1216.23 1827.53,1216.23 1828.11,1216.23 1828.7,1216.23 1829.29,1216.23 1829.87,1216.23 1830.46,1216.23 1831.05,1216.23 1831.63,1216.23 1832.22,1216.23 1832.81,1216.23 1833.39,1216.23 1833.98,1216.23 1834.56,1216.23 1835.15,1216.23 1835.74,1216.23 1836.32,1216.23 1836.91,1216.23 1837.5,1216.23 1838.08,1216.23 1838.67,1216.23 1839.26,1216.23 1839.84,1216.23 1840.43,1216.23 1841.01,1216.23 1841.6,1216.23 1842.19,1216.23 1842.77,1216.23 1843.36,1216.23 1843.95,1216.23 1844.53,1216.23 1845.12,1216.23 1845.71,1216.23 1846.29,1216.23 1846.88,1216.23 1847.47,1216.23 1848.05,1216.23 1848.64,1216.23 1849.22,1216.23 1849.81,1216.23 1850.4,1216.23 1850.98,1216.23 1851.57,1216.23 1852.16,1216.23 1852.74,1216.23 1853.33,1216.23 1853.92,1216.23 1854.5,1216.23 1855.09,1216.23 1855.68,1216.23 1856.26,1216.23 1856.85,1216.23 1857.43,1216.23 1858.02,1216.23 1858.61,1216.23 1859.19,1216.23 1859.78,1216.23 1860.37,1216.23 1860.95,1216.23 1861.54,1216.23 1862.13,1216.23 1862.71,1216.23 1863.3,1216.23 1863.88,1216.23 1864.47,1216.23 1865.06,1216.23 1865.64,1216.23 1866.23,1216.23 1866.82,1216.23 1867.4,1216.23 1867.99,1216.23 1868.58,1216.23 1869.16,1216.23 1869.75,1216.23 1870.34,1216.23 1870.92,1216.23 1871.51,1216.23 1872.09,1216.23 1872.68,1216.23 1873.27,1216.23 1873.85,1216.23 1874.44,1216.23 1875.03,1216.23 1875.61,1216.23 1876.2,1216.23 1876.79,1216.23 1877.37,1216.23 1877.96,1216.23 1878.55,1216.23 1879.13,1216.23 1879.72,1216.23 1880.3,1216.23 1880.89,1216.23 1881.48,1216.23 1882.06,1216.23 1882.65,1216.23 1883.24,1216.23 1883.82,1216.23 1884.41,1216.23 1885,1216.23 1885.58,1216.23 1886.17,1216.23 1886.76,1216.23 1887.34,1216.23 1887.93,1216.23 1888.51,1216.23 1889.1,1216.23 1889.69,1216.23 1890.27,1216.23 1890.86,1216.23 1891.45,1216.23 1892.03,1216.23 1892.62,1216.23 1893.21,1216.23 1893.79,1216.23 1894.38,1216.23 1894.96,1216.23 1895.55,1216.23 1896.14,1216.23 1896.72,1216.23 1897.31,1216.23 1897.9,1216.23 1898.48,1216.23 1899.07,1216.23 1899.66,1216.23 1900.24,1216.23 1900.83,1216.23 1901.42,1216.23 1902,1216.23 1902.59,1216.23 1903.17,1216.23 1903.76,1216.23 1904.35,1216.23 1904.93,1216.23 1905.52,1216.23 1906.11,1216.23 1906.69,1216.23 1907.28,1216.23 1907.87,1216.23 1908.45,1216.23 1909.04,1216.23 1909.63,1216.23 1910.21,1216.23 1910.8,1216.23 1911.38,1216.23 1911.97,1216.23 1912.56,1216.23 1913.14,1216.23 1913.73,1216.23 1914.32,1216.23 1914.9,1216.23 1915.49,1216.23 1916.08,1216.23 1916.66,1216.23 1917.25,1216.23 1917.83,1216.23 1918.42,1216.23 1919.01,1216.23 1919.59,1216.23 1920.18,1216.23 1920.77,1216.23 1921.35,1216.23 1921.94,1216.23 1922.53,1216.23 1923.11,1216.23 1923.7,1216.23 1924.29,1216.23 1924.87,1216.23 1925.46,1216.23 1926.04,1216.23 1926.63,1216.23 1927.22,1216.23 1927.8,1216.23 1928.39,1216.23 1928.98,1216.23 1929.56,1216.23 1930.15,1216.23 1930.74,1216.23 1931.32,1216.23 1931.91,1216.23 1932.5,1216.23 1933.08,1216.23 1933.67,1216.23 1934.25,1216.23 1934.84,1216.23 1935.43,1216.23 1936.01,1216.23 1936.6,1216.23 1937.19,1216.23 1937.77,1216.23 1938.36,1216.23 1938.95,1216.23 1939.53,1216.23 1940.12,1216.23 1940.71,1216.23 1941.29,1216.23 1941.88,1216.23 1942.46,1216.23 1943.05,1216.23 1943.64,1216.23 1944.22,1216.23 1944.81,1216.23 1945.4,1216.23 1945.98,1216.23 1946.57,1216.23 1947.16,1216.23 1947.74,1216.23 1948.33,1216.23 1948.91,1216.23 1949.5,1216.23 1950.09,1216.23 1950.67,1216.23 1951.26,1216.23 1951.85,1216.23 1952.43,1216.23 1953.02,1216.23 1953.61,1216.23 1954.19,1216.23 1954.78,1216.23 1955.37,1216.23 1955.95,1216.23 1956.54,1216.23 1957.12,1216.23 1957.71,1216.23 1958.3,1216.23 1958.88,1216.23 1959.47,1216.23 1960.06,1216.23 1960.64,1216.23 1961.23,1216.23 1961.82,1216.23 1962.4,1216.23 1962.99,1216.23 1963.58,1216.23 1964.16,1216.23 1964.75,1216.23 1965.33,1216.23 1965.92,1216.23 1966.51,1216.23 1967.09,1216.23 1967.68,1216.23 1968.27,1216.23 1968.85,1216.23 1969.44,1216.23 1970.03,1216.23 1970.61,1216.23 1971.2,1216.23 1971.78,1216.23 1972.37,1216.23 1972.96,1216.23 1973.54,1216.23 1974.13,1216.23 1974.72,1216.23 1975.3,1216.23 1975.89,1216.23 1976.48,1216.23 1977.06,1216.23 1977.65,1216.23 1978.24,1216.23 1978.82,1216.23 1979.41,1216.23 1979.99,1216.23 1980.58,1216.23 1981.17,1216.23 1981.75,1216.23 1982.34,1216.23 1982.93,1216.23 1983.51,1216.23 1984.1,1216.23 1984.69,1216.23 1985.27,1216.23 1985.86,1216.23 1986.45,1216.23 1987.03,1216.23 1987.62,1216.23 1988.2,1216.23 1988.79,1216.23 1989.38,1216.23 1989.96,1216.23 1990.55,1216.23 1991.14,1216.23 1991.72,1216.23 1992.31,1216.23 1992.9,1216.23 1993.48,1216.23 1994.07,1216.23 1994.65,1216.23 1995.24,1216.23 1995.83,1216.23 1996.41,1216.23 1997,1216.23 1997.59,1216.23 1998.17,1216.23 1998.76,1216.23 1999.35,1216.23 1999.93,1216.23 2000.52,1216.23 2001.11,1216.23 2001.69,1216.23 2002.28,1216.23 2002.86,1216.23 2003.45,1216.23 2004.04,1216.23 2004.62,1216.23 2005.21,1216.23 2005.8,1216.23 2006.38,1216.23 2006.97,1216.23 2007.56,1216.23 2008.14,1216.23 2008.73,1216.23 2009.32,1216.23 2009.9,1216.23 2010.49,1216.23 2011.07,1216.23 2011.66,1216.23 2012.25,1216.23 2012.83,1216.23 2013.42,1216.23 2014.01,1216.23 2014.59,1216.23 2015.18,1216.23 2015.77,1216.23 2016.35,1216.23 2016.94,1216.23 2017.53,1216.23 2018.11,1216.23 2018.7,1216.23 2019.28,1216.23 2019.87,1216.23 2020.46,1216.23 2021.04,1216.23 2021.63,1216.23 2022.22,1216.23 2022.8,1216.23 2023.39,1216.23 2023.98,1216.23 2024.56,1216.23 2025.15,1216.23 2025.73,1216.23 2026.32,1216.23 2026.91,1216.23 2027.49,1216.23 2028.08,1216.23 2028.67,1216.23 2029.25,1216.23 2029.84,1216.23 2030.43,1216.23 2031.01,1216.23 2031.6,1216.23 2032.19,1216.23 2032.77,1216.23 2033.36,1216.23 2033.94,1216.23 2034.53,1216.23 2035.12,1216.23 2035.7,1216.23 2036.29,1216.23 2036.88,1216.23 2037.46,1216.23 2038.05,1216.23 2038.64,1216.23 2039.22,1216.23 2039.81,1216.23 2040.4,1216.23 2040.98,1216.23 2041.57,1216.23 2042.15,1216.23 2042.74,1216.23 2043.33,1216.23 2043.91,1216.23 2044.5,1216.23 2045.09,1216.23 2045.67,1216.23 2046.26,1216.23 2046.85,1216.23 2047.43,1216.23 2048.02,1216.23 2048.6,1216.23 2049.19,1216.23 2049.78,1216.23 2050.36,1216.23 2050.95,1216.23 2051.54,1216.23 2052.12,1216.23 2052.71,1216.23 2053.3,1216.23 2053.88,1216.23 2054.47,1216.23 2055.06,1216.23 2055.64,1216.23 2056.23,1216.23 2056.81,1216.23 2057.4,1216.23 2057.99,1216.23 2058.57,1216.23 2059.16,1216.23 2059.75,1216.23 2060.33,1216.23 2060.92,1216.23 2061.51,1216.23 2062.09,1216.23 2062.68,1216.23 2063.27,1216.23 2063.85,1216.23 2064.44,1216.23 2065.02,1216.23 2065.61,1216.23 2066.2,1216.23 2066.78,1216.23 2067.37,1216.23 2067.96,1216.23 2068.54,1216.23 2069.13,1216.23 2069.72,1216.23 2070.3,1216.23 2070.89,1216.23 2071.48,1216.23 2072.06,1216.23 2072.65,1216.23 2073.23,1216.23 2073.82,1216.23 2074.41,1216.23 2074.99,1216.23 2075.58,1216.23 2076.17,1216.23 2076.75,1216.23 2077.34,1216.23 2077.93,1216.23 2078.51,1216.23 2079.1,1216.23 2079.68,1216.23 2080.27,1216.23 2080.86,1216.23 2081.44,1216.23 2082.03,1216.23 2082.62,1216.23 2083.2,1216.23 2083.79,1216.23 2084.38,1216.23 2084.96,1216.23 2085.55,1216.23 2086.14,1216.23 2086.72,1216.23 2087.31,1216.23 2087.89,1216.23 2088.48,1216.23 2089.07,1216.23 2089.65,1216.23 2090.24,1216.23 2090.83,1216.23 2091.41,1216.23 2092,1216.23 2092.59,1216.23 2093.17,1216.23 2093.76,1216.23 2094.35,1216.23 2094.93,1216.23 2095.52,1216.23 2096.1,1216.23 2096.69,1216.23 2097.28,1216.23 2097.86,1216.23 2098.45,1216.23 2099.04,1216.23 2099.62,1216.23 2100.21,1216.23 2100.8,1216.23 2101.38,1216.23 2101.97,1216.23 2102.55,1216.23 2103.14,1216.23 2103.73,1216.23 2104.31,1216.23 2104.9,1216.23 2105.49,1216.23 2106.07,1216.23 2106.66,1216.23 2107.25,1216.23 2107.83,1216.23 2108.42,1216.23 2109.01,1216.23 2109.59,1216.23 2110.18,1216.23 2110.76,1216.23 2111.35,1216.23 2111.94,1216.23 2112.52,1216.23 2113.11,1216.23 2113.7,1216.23 2114.28,1216.23 2114.87,1216.23 2115.46,1216.23 2116.04,1216.23 2116.63,1216.23 2117.22,1216.23 2117.8,1216.23 2118.39,1216.23 2118.97,1216.23 2119.56,1216.23 2120.15,1216.23 2120.73,1216.23 2121.32,1216.23 2121.91,1216.23 2122.49,1216.23 2123.08,1216.23 2123.67,1216.23 2124.25,1216.23 2124.84,1216.23 2125.42,1216.23 2126.01,1216.23 2126.6,1216.23 2127.18,1216.23 2127.77,1216.23 2128.36,1216.23 2128.94,1216.23 2129.53,1216.23 2130.12,1216.23 2130.7,1216.23 2131.29,1216.23 2131.88,1216.23 2132.46,1216.23 2133.05,1216.23 2133.63,1216.23 2134.22,1216.23 2134.81,1216.23 2135.39,1216.23 2135.98,1216.23 2136.57,1216.23 2137.15,1216.23 2137.74,1216.23 2138.33,1216.23 2138.91,1216.23 2139.5,1216.23 2140.09,1216.23 2140.67,1216.23 2141.26,1216.23 2141.84,1216.23 2142.43,1216.23 2143.02,1216.23 2143.6,1216.23 2144.19,1216.23 2144.78,1216.23 2145.36,1216.23 2145.95,1216.23 2146.54,1216.23 2147.12,1216.23 2147.71,1216.23 2148.3,1216.23 2148.88,1216.23 2149.47,1216.23 2150.05,1216.23 2150.64,1216.23 2151.23,1216.23 2151.81,1216.23 2152.4,1216.23 2152.99,1216.23 2153.57,1216.23 2154.16,1216.23 2154.75,1216.23 2155.33,1216.23 2155.92,1216.23 2156.5,1216.23 2157.09,1216.23 2157.68,1216.23 2158.26,1216.23 \"/>\n<path clip-path=\"url(#clip842)\" d=\"M986.025 1216.04 L986.612 1216.04 L987.198 1216.04 L987.785 1216.04 L988.371 1216.04 L988.957 1216.04 L989.544 1216.04 L990.13 1216.04 L990.717 1216.04 L991.303 1216.04 L991.889 1216.04 L992.476 1216.04 L993.062 1216.04 L993.649 1216.04 L994.235 1216.04 L994.822 1216.04 L995.408 1216.04 L995.994 1216.04 L996.581 1216.04 L997.167 1216.04 L997.754 1216.04 L998.34 1216.04 L998.926 1216.04 L999.513 1216.04 L1000.1 1216.04 L1000.69 1216.04 L1001.27 1216.04 L1001.86 1216.04 L1002.44 1216.04 L1003.03 1216.04 L1003.62 1216.04 L1004.2 1216.04 L1004.79 1216.04 L1005.38 1216.04 L1005.96 1216.04 L1006.55 1216.04 L1007.14 1216.04 L1007.72 1216.04 L1008.31 1216.04 L1008.9 1216.04 L1009.48 1216.04 L1010.07 1216.04 L1010.65 1216.04 L1011.24 1216.04 L1011.83 1216.04 L1012.41 1216.04 L1013 1216.04 L1013.59 1216.04 L1014.17 1216.04 L1014.76 1216.04 L1015.35 1216.04 L1015.93 1216.04 L1016.52 1216.04 L1017.11 1216.04 L1017.69 1216.04 L1018.28 1216.04 L1018.86 1216.04 L1019.45 1216.04 L1020.04 1216.04 L1020.62 1216.04 L1021.21 1216.04 L1021.8 1216.04 L1022.38 1216.04 L1022.97 1216.04 L1023.56 1216.04 L1024.14 1216.04 L1024.73 1216.04 L1025.32 1216.04 L1025.9 1216.04 L1026.49 1216.04 L1027.07 1216.04 L1027.66 1216.04 L1028.25 1216.04 L1028.83 1216.04 L1029.42 1216.04 L1030.01 1216.04 L1030.59 1216.04 L1031.18 1216.04 L1031.77 1216.04 L1032.35 1216.04 L1032.94 1216.04 L1033.52 1216.04 L1034.11 1216.04 L1034.7 1216.04 L1035.28 1216.04 L1035.87 1216.04 L1036.46 1216.04 L1037.04 1216.04 L1037.63 1216.04 L1038.22 1216.04 L1038.8 1216.04 L1039.39 1216.04 L1039.98 1216.04 L1040.56 1216.04 L1041.15 1216.04 L1041.73 1216.04 L1042.32 1216.04 L1042.91 1216.04 L1043.49 1216.04 L1044.08 1216.04 L1044.67 1216.04 L1045.25 1216.04 L1045.84 1216.04 L1046.43 1216.04 L1047.01 1216.04 L1047.6 1216.04 L1048.19 1216.04 L1048.77 1216.04 L1049.36 1216.04 L1049.94 1216.04 L1050.53 1216.04 L1051.12 1216.04 L1051.7 1216.04 L1052.29 1216.04 L1052.88 1216.04 L1053.46 1216.04 L1054.05 1216.04 L1054.64 1216.04 L1055.22 1216.04 L1055.81 1216.04 L1056.39 1216.04 L1056.98 1216.04 L1057.57 1216.04 L1058.15 1216.04 L1058.74 1216.04 L1059.33 1216.04 L1059.91 1216.04 L1060.5 1216.04 L1061.09 1216.04 L1061.67 1216.04 L1062.26 1216.04 L1062.85 1216.04 L1063.43 1216.04 L1064.02 1216.04 L1064.6 1216.04 L1065.19 1216.04 L1065.78 1216.04 L1066.36 1216.04 L1066.95 1216.04 L1067.54 1216.04 L1068.12 1216.04 L1068.71 1216.04 L1069.3 1216.04 L1069.88 1216.04 L1070.47 1216.04 L1071.06 1216.04 L1071.64 1216.04 L1072.23 1216.04 L1072.81 1216.04 L1073.4 1216.04 L1073.99 1216.04 L1074.57 1216.04 L1075.16 1216.04 L1075.75 1216.04 L1076.33 1216.04 L1076.92 1216.04 L1077.51 1216.04 L1078.09 1216.04 L1078.68 1216.04 L1079.26 1216.04 L1079.85 1216.04 L1080.44 1216.04 L1081.02 1216.04 L1081.61 1216.04 L1082.2 1216.04 L1082.78 1216.04 L1083.37 1216.04 L1083.96 1216.04 L1084.54 1216.04 L1085.13 1216.04 L1085.72 1216.04 L1086.3 1216.04 L1086.89 1216.04 L1087.47 1216.04 L1088.06 1216.04 L1088.65 1216.04 L1089.23 1216.04 L1089.82 1216.04 L1090.41 1216.04 L1090.99 1216.04 L1091.58 1216.04 L1092.17 1216.04 L1092.75 1216.04 L1093.34 1216.04 L1093.93 1216.04 L1094.51 1216.04 L1095.1 1216.04 L1095.68 1216.04 L1096.27 1216.04 L1096.86 1216.04 L1097.44 1216.04 L1098.03 1216.04 L1098.62 1216.04 L1099.2 1216.04 L1099.79 1216.04 L1100.38 1216.04 L1100.96 1216.04 L1101.55 1216.04 L1102.14 1216.04 L1102.72 1216.04 L1103.31 1216.04 L1103.89 1216.04 L1104.48 1216.04 L1105.07 1216.04 L1105.65 1216.04 L1106.24 1216.04 L1106.83 1216.04 L1107.41 1216.04 L1108 1216.04 L1108.59 1216.04 L1109.17 1216.04 L1109.76 1216.04 L1110.34 1216.04 L1110.93 1216.04 L1111.52 1216.04 L1112.1 1216.04 L1112.69 1216.04 L1113.28 1216.04 L1113.86 1216.04 L1114.45 1216.04 L1115.04 1216.04 L1115.62 1216.04 L1116.21 1216.04 L1116.8 1216.04 L1117.38 1216.04 L1117.97 1216.04 L1118.55 1216.04 L1119.14 1216.04 L1119.73 1216.04 L1120.31 1216.04 L1120.9 1216.04 L1121.49 1216.04 L1122.07 1216.04 L1122.66 1216.04 L1123.25 1216.04 L1123.83 1216.04 L1124.42 1216.04 L1125.01 1216.04 L1125.59 1216.04 L1126.18 1216.04 L1126.76 1216.04 L1127.35 1216.04 L1127.94 1216.04 L1128.52 1216.04 L1129.11 1216.04 L1129.7 1216.04 L1130.28 1216.04 L1130.87 1216.04 L1131.46 1216.04 L1132.04 1216.04 L1132.63 1216.04 L1133.21 1216.04 L1133.8 1216.04 L1134.39 1216.04 L1134.97 1216.04 L1135.56 1216.04 L1136.15 1216.04 L1136.73 1216.04 L1137.32 1216.04 L1137.91 1216.04 L1138.49 1216.04 L1139.08 1216.04 L1139.67 1216.04 L1140.25 1216.04 L1140.84 1216.04 L1141.42 1216.04 L1142.01 1216.04 L1142.6 1216.04 L1143.18 1216.04 L1143.77 1216.04 L1144.36 1216.04 L1144.94 1216.04 L1145.53 1216.04 L1146.12 1216.04 L1146.7 1216.04 L1147.29 1216.04 L1147.88 1216.04 L1148.46 1216.04 L1149.05 1216.04 L1149.63 1216.04 L1150.22 1216.04 L1150.81 1216.04 L1151.39 1216.04 L1151.98 1216.04 L1152.57 1216.04 L1153.15 1216.04 L1153.74 1216.04 L1154.33 1216.04 L1154.91 1216.04 L1155.5 1216.04 L1156.09 1216.04 L1156.67 1216.04 L1157.26 1216.04 L1157.84 1216.04 L1158.43 1216.04 L1159.02 1216.04 L1159.6 1216.04 L1160.19 1216.04 L1160.78 1216.04 L1161.36 1216.04 L1161.95 1216.04 L1162.54 1216.04 L1163.12 1216.04 L1163.71 1216.04 L1164.29 1216.04 L1164.88 1216.04 L1165.47 1216.04 L1166.05 1216.04 L1166.64 1216.04 L1167.23 1216.04 L1167.81 1216.04 L1168.4 1216.04 L1168.99 1216.04 L1169.57 1216.04 L1170.16 1216.04 L1170.75 1216.04 L1171.33 1216.04 L1171.92 1216.04 L1172.5 1216.04 L1173.09 1216.04 L1173.68 1216.04 L1174.26 1216.04 L1174.85 1216.04 L1175.44 1216.04 L1176.02 1216.04 L1176.61 1216.04 L1177.2 1216.04 L1177.78 1216.04 L1178.37 1216.04 L1178.96 1216.04 L1179.54 1216.04 L1180.13 1216.04 L1180.71 1216.04 L1181.3 1216.04 L1181.89 1216.04 L1182.47 1216.04 L1183.06 1216.04 L1183.65 1216.04 L1184.23 1216.04 L1184.82 1216.04 L1185.41 1216.04 L1185.99 1216.04 L1186.58 1216.04 L1187.16 1216.04 L1187.75 1216.04 L1188.34 1216.04 L1188.92 1216.04 L1189.51 1216.04 L1190.1 1216.04 L1190.68 1216.04 L1191.27 1216.04 L1191.86 1216.04 L1192.44 1216.04 L1193.03 1216.04 L1193.62 1216.04 L1194.2 1216.04 L1194.79 1216.04 L1195.37 1216.04 L1195.96 1216.04 L1196.55 1216.04 L1197.13 1216.04 L1197.72 1216.04 L1198.31 1216.04 L1198.89 1216.04 L1199.48 1216.04 L1200.07 1216.04 L1200.65 1216.04 L1201.24 1216.04 L1201.83 1216.04 L1202.41 1216.04 L1203 1216.04 L1203.58 1216.04 L1204.17 1216.04 L1204.76 1216.04 L1205.34 1216.04 L1205.93 1216.04 L1206.52 1216.04 L1207.1 1216.04 L1207.69 1216.04 L1208.28 1216.04 L1208.86 1216.04 L1209.45 1216.04 L1210.03 1216.04 L1210.62 1216.04 L1211.21 1216.04 L1211.79 1216.04 L1212.38 1216.04 L1212.97 1216.04 L1213.55 1216.04 L1214.14 1216.04 L1214.73 1216.04 L1215.31 1216.04 L1215.9 1216.04 L1216.49 1216.04 L1217.07 1216.04 L1217.66 1216.04 L1218.24 1216.04 L1218.83 1216.04 L1219.42 1216.04 L1220 1216.04 L1220.59 1216.04 L1221.18 1216.04 L1221.76 1216.04 L1222.35 1216.04 L1222.94 1216.04 L1223.52 1216.04 L1224.11 1216.04 L1224.7 1216.04 L1225.28 1216.04 L1225.87 1216.04 L1226.45 1216.04 L1227.04 1216.04 L1227.63 1216.04 L1228.21 1216.04 L1228.8 1216.04 L1229.39 1216.04 L1229.97 1216.04 L1230.56 1216.04 L1231.15 1216.04 L1231.73 1216.04 L1232.32 1216.04 L1232.91 1216.04 L1233.49 1216.04 L1234.08 1216.04 L1234.66 1216.04 L1235.25 1216.04 L1235.84 1216.04 L1236.42 1216.04 L1237.01 1216.04 L1237.6 1216.04 L1238.18 1216.04 L1238.77 1216.04 L1239.36 1216.04 L1239.94 1216.04 L1240.53 1216.04 L1241.11 1216.04 L1241.7 1216.04 L1242.29 1216.04 L1242.87 1216.04 L1243.46 1216.04 L1244.05 1216.04 L1244.63 1216.04 L1245.22 1216.04 L1245.81 1216.04 L1246.39 1216.04 L1246.98 1216.04 L1247.57 1216.04 L1248.15 1216.04 L1248.74 1216.04 L1249.32 1216.04 L1249.91 1216.04 L1250.5 1216.04 L1251.08 1216.04 L1251.67 1216.04 L1252.26 1216.04 L1252.84 1216.04 L1253.43 1216.04 L1254.02 1216.04 L1254.6 1216.04 L1255.19 1216.04 L1255.78 1216.04 L1256.36 1216.04 L1256.95 1216.04 L1257.53 1216.04 L1258.12 1216.04 L1258.71 1216.04 L1259.29 1216.04 L1259.88 1216.04 L1260.47 1216.04 L1261.05 1216.04 L1261.64 1216.04 L1262.23 1216.04 L1262.81 1216.04 L1263.4 1216.04 L1263.98 1216.04 L1264.57 1216.04 L1265.16 1216.04 L1265.74 1216.04 L1266.33 1216.04 L1266.92 1216.04 L1267.5 1216.04 L1268.09 1216.04 L1268.68 1216.04 L1269.26 1216.04 L1269.85 1216.04 L1270.44 1216.04 L1271.02 1216.04 L1271.61 1216.04 L1272.19 1216.04 L1272.78 1216.04 L1273.37 1216.04 L1273.95 1216.04 L1274.54 1216.04 L1275.13 1216.04 L1275.71 1216.04 L1276.3 1216.04 L1276.89 1216.04 L1277.47 1216.04 L1278.06 1216.04 L1278.65 1216.04 L1279.23 1216.04 L1279.82 1216.04 L1280.4 1216.04 L1280.99 1216.04 L1281.58 1216.04 L1282.16 1216.04 L1282.75 1216.04 L1283.34 1216.04 L1283.92 1216.04 L1284.51 1216.04 L1285.1 1216.04 L1285.68 1216.04 L1286.27 1216.04 L1286.86 1216.04 L1287.44 1216.04 L1288.03 1216.04 L1288.61 1216.04 L1289.2 1216.04 L1289.79 1216.04 L1290.37 1216.04 L1290.96 1216.04 L1291.55 1216.04 L1292.13 1216.04 L1292.72 1216.04 L1293.31 1216.04 L1293.89 1216.04 L1294.48 1216.04 L1295.06 1216.04 L1295.65 1216.04 L1296.24 1216.04 L1296.82 1216.04 L1297.41 1216.04 L1298 1216.04 L1298.58 1216.04 L1299.17 1216.04 L1299.76 1216.04 L1300.34 1216.04 L1300.93 1216.04 L1301.52 1216.04 L1302.1 1216.04 L1302.69 1216.04 L1303.27 1216.04 L1303.86 1216.04 L1304.45 1216.04 L1305.03 1216.04 L1305.62 1216.04 L1306.21 1216.04 L1306.79 1216.04 L1307.38 1216.04 L1307.97 1216.04 L1308.55 1216.04 L1309.14 1216.04 L1309.73 1216.04 L1310.31 1216.04 L1310.9 1216.04 L1311.48 1216.04 L1312.07 1216.04 L1312.66 1216.04 L1313.24 1216.04 L1313.83 1216.04 L1314.42 1216.04 L1315 1216.04 L1315.59 1216.04 L1316.18 1216.04 L1316.76 1216.04 L1317.35 1216.04 L1317.93 1216.04 L1318.52 1216.04 L1319.11 1216.04 L1319.69 1216.04 L1320.28 1216.04 L1320.87 1216.04 L1321.45 1216.04 L1322.04 1216.04 L1322.63 1216.04 L1323.21 1216.04 L1323.8 1216.04 L1324.39 1216.04 L1324.97 1216.04 L1325.56 1216.04 L1326.14 1216.04 L1326.73 1216.04 L1327.32 1216.04 L1327.9 1216.04 L1328.49 1216.04 L1329.08 1216.04 L1329.66 1216.04 L1330.25 1216.04 L1330.84 1216.04 L1331.42 1216.04 L1332.01 1216.04 L1332.6 1216.04 L1333.18 1216.04 L1333.77 1216.04 L1334.35 1216.04 L1334.94 1216.04 L1335.53 1216.04 L1336.11 1216.04 L1336.7 1216.04 L1337.29 1216.04 L1337.87 1216.04 L1338.46 1216.04 L1339.05 1216.04 L1339.63 1216.04 L1340.22 1216.04 L1340.8 1216.04 L1341.39 1216.04 L1341.98 1216.04 L1342.56 1216.04 L1343.15 1216.04 L1343.74 1216.04 L1344.32 1216.04 L1344.91 1216.04 L1345.5 1216.04 L1346.08 1216.04 L1346.67 1216.04 L1347.26 1216.04 L1347.84 1216.04 L1348.43 1216.04 L1349.01 1216.04 L1349.6 1216.04 L1350.19 1216.04 L1350.77 1216.04 L1351.36 1216.04 L1351.95 1216.04 L1352.53 1216.04 L1353.12 1216.04 L1353.71 1216.04 L1354.29 1216.04 L1354.88 1216.04 L1355.47 1216.04 L1356.05 1216.04 L1356.64 1216.04 L1357.22 1216.04 L1357.81 1216.04 L1358.4 1216.04 L1358.98 1216.04 L1359.57 1216.04 L1360.16 1216.04 L1360.74 1216.04 L1361.33 1216.04 L1361.92 1216.04 L1362.5 1216.04 L1363.09 1216.04 L1363.68 1216.04 L1364.26 1216.04 L1364.85 1216.04 L1365.43 1216.04 L1366.02 1216.04 L1366.61 1216.04 L1367.19 1216.04 L1367.78 1216.04 L1368.37 1216.04 L1368.95 1216.04 L1369.54 1216.04 L1370.13 1216.04 L1370.71 1216.04 L1371.3 1216.04 L1371.88 1216.04 L1372.47 1216.04 L1373.06 1216.04 L1373.64 1216.04 L1374.23 1216.04 L1374.82 1216.04 L1375.4 1216.04 L1375.99 1216.04 L1376.58 1216.04 L1377.16 1216.04 L1377.75 1216.04 L1378.34 1216.04 L1378.92 1216.04 L1379.51 1216.04 L1380.09 1216.04 L1380.68 1216.04 L1381.27 1216.04 L1381.85 1216.04 L1382.44 1216.04 L1383.03 1216.04 L1383.61 1216.04 L1384.2 1216.04 L1384.79 1216.04 L1385.37 1216.04 L1385.96 1216.04 L1386.55 1216.04 L1387.13 1216.04 L1387.72 1216.04 L1388.3 1216.04 L1388.89 1216.04 L1389.48 1216.04 L1390.06 1216.04 L1390.65 1216.04 L1391.24 1216.04 L1391.82 1216.04 L1392.41 1216.04 L1393 1216.04 L1393.58 1216.04 L1394.17 1216.04 L1394.75 1216.04 L1395.34 1216.04 L1395.93 1216.04 L1396.51 1216.04 L1397.1 1216.04 L1397.69 1216.04 L1398.27 1216.04 L1398.86 1216.04 L1399.45 1216.04 L1400.03 1216.04 L1400.62 1216.04 L1401.21 1216.04 L1401.79 1216.04 L1402.38 1216.04 L1402.96 1216.04 L1403.55 1216.04 L1404.14 1216.04 L1404.72 1216.04 L1405.31 1216.04 L1405.9 1216.04 L1406.48 1216.04 L1407.07 1216.04 L1407.66 1216.04 L1408.24 1216.04 L1408.83 1216.04 L1409.42 1216.04 L1410 1216.04 L1410.59 1216.04 L1411.17 1216.04 L1411.76 1216.04 L1412.35 1216.04 L1412.93 1216.04 L1413.52 1216.04 L1414.11 1216.04 L1414.69 1216.04 L1415.28 1216.04 L1415.87 1216.04 L1416.45 1216.04 L1417.04 1216.04 L1417.63 1216.04 L1418.21 1216.04 L1418.8 1216.04 L1419.38 1216.04 L1419.97 1216.04 L1420.56 1216.04 L1421.14 1216.04 L1421.73 1216.04 L1422.32 1216.04 L1422.9 1216.04 L1423.49 1216.04 L1424.08 1216.04 L1424.66 1216.04 L1425.25 1216.04 L1425.83 1216.04 L1426.42 1216.04 L1427.01 1216.04 L1427.59 1216.04 L1428.18 1216.04 L1428.77 1216.04 L1429.35 1216.04 L1429.94 1216.04 L1430.53 1216.04 L1431.11 1216.04 L1431.7 1216.04 L1432.29 1216.04 L1432.87 1216.04 L1433.46 1216.04 L1434.04 1216.04 L1434.63 1216.04 L1435.22 1216.04 L1435.8 1216.04 L1436.39 1216.04 L1436.98 1216.04 L1437.56 1216.04 L1438.15 1216.04 L1438.74 1216.04 L1439.32 1216.04 L1439.91 1216.04 L1440.5 1216.04 L1441.08 1216.04 L1441.67 1216.04 L1442.25 1216.04 L1442.84 1216.04 L1443.43 1216.04 L1444.01 1216.04 L1444.6 1216.04 L1445.19 1216.04 L1445.77 1216.04 L1446.36 1216.04 L1446.95 1216.04 L1447.53 1216.04 L1448.12 1216.04 L1448.7 1216.04 L1449.29 1216.04 L1449.88 1216.04 L1450.46 1216.04 L1451.05 1216.04 L1451.64 1216.04 L1452.22 1216.04 L1452.81 1216.04 L1453.4 1216.04 L1453.98 1216.04 L1454.57 1216.04 L1455.16 1216.04 L1455.74 1216.04 L1456.33 1216.04 L1456.91 1216.04 L1457.5 1216.04 L1458.09 1216.04 L1458.67 1216.04 L1459.26 1216.04 L1459.85 1216.04 L1460.43 1216.04 L1461.02 1216.04 L1461.61 1216.04 L1462.19 1216.04 L1462.78 1216.04 L1463.37 1216.04 L1463.95 1216.04 L1464.54 1216.04 L1465.12 1216.04 L1465.71 1216.04 L1466.3 1216.04 L1466.88 1216.04 L1467.47 1216.04 L1468.06 1216.04 L1468.64 1216.04 L1469.23 1216.04 L1469.82 1216.04 L1470.4 1216.04 L1470.99 1216.04 L1471.57 1216.04 L1472.16 1216.04 L1472.75 1216.04 L1473.33 1216.04 L1473.92 1216.04 L1474.51 1216.04 L1475.09 1216.04 L1475.68 1216.04 L1476.27 1216.04 L1476.85 1216.04 L1477.44 1216.04 L1478.03 1216.04 L1478.61 1216.04 L1479.2 1216.04 L1479.78 1216.04 L1480.37 1216.04 L1480.96 1216.04 L1481.54 1216.04 L1482.13 1216.04 L1482.72 1216.04 L1483.3 1216.04 L1483.89 1216.04 L1484.48 1216.04 L1485.06 1216.04 L1485.65 1216.04 L1486.24 1216.04 L1486.82 1216.04 L1487.41 1216.04 L1487.99 1216.04 L1488.58 1216.04 L1489.17 1216.04 L1489.75 1216.04 L1490.34 1216.04 L1490.93 1216.04 L1491.51 1216.04 L1492.1 1216.04 L1492.69 1216.04 L1493.27 1216.04 L1493.86 1216.04 L1494.45 1216.04 L1495.03 1216.04 L1495.62 1216.04 L1496.2 1216.04 L1496.79 1216.04 L1497.38 1216.04 L1497.96 1216.04 L1498.55 1216.04 L1499.14 1216.04 L1499.72 1216.04 L1500.31 1216.04 L1500.9 1216.04 L1501.48 1216.04 L1502.07 1216.04 L1502.65 1216.04 L1503.24 1216.04 L1503.83 1216.04 L1504.41 1216.04 L1505 1216.04 L1505.59 1216.04 L1506.17 1216.04 L1506.76 1216.04 L1507.35 1216.04 L1507.93 1216.04 L1508.52 1216.04 L1509.11 1216.04 L1509.69 1216.04 L1510.28 1216.04 L1510.86 1216.04 L1511.45 1216.04 L1512.04 1216.04 L1512.62 1216.04 L1513.21 1216.04 L1513.8 1216.04 L1514.38 1216.04 L1514.97 1216.04 L1515.56 1216.04 L1516.14 1216.04 L1516.73 1216.04 L1517.32 1216.04 L1517.9 1216.04 L1518.49 1216.04 L1519.07 1216.04 L1519.66 1216.04 L1520.25 1216.04 L1520.83 1216.04 L1521.42 1216.04 L1522.01 1216.04 L1522.59 1216.04 L1523.18 1216.04 L1523.77 1216.04 L1524.35 1216.04 L1524.94 1216.04 L1525.52 1216.04 L1526.11 1216.04 L1526.7 1216.04 L1527.28 1216.04 L1527.87 1216.04 L1528.46 1216.04 L1529.04 1216.04 L1529.63 1216.04 L1530.22 1216.04 L1530.8 1216.04 L1531.39 1216.04 L1531.98 1216.04 L1532.56 1216.04 L1533.15 1216.04 L1533.73 1216.04 L1534.32 1216.04 L1534.91 1216.04 L1535.49 1216.04 L1536.08 1216.04 L1536.67 1216.04 L1537.25 1216.04 L1537.84 1216.04 L1538.43 1216.04 L1539.01 1216.04 L1539.6 1216.04 L1540.19 1216.04 L1540.77 1216.04 L1541.36 1216.04 L1541.94 1216.04 L1542.53 1216.04 L1543.12 1216.04 L1543.7 1216.04 L1544.29 1216.04 L1544.88 1216.04 L1545.46 1216.04 L1546.05 1216.04 L1546.64 1216.04 L1547.22 1216.04 L1547.81 1216.04 L1548.4 1216.04 L1548.98 1216.04 L1549.57 1216.04 L1550.15 1216.04 L1550.74 1216.04 L1551.33 1216.04 L1551.91 1216.04 L1552.5 1216.04 L1553.09 1216.04 L1553.67 1216.04 L1554.26 1216.04 L1554.85 1216.04 L1555.43 1216.04 L1556.02 1216.04 L1556.6 1216.04 L1557.19 1216.04 L1557.78 1216.04 L1558.36 1216.04 L1558.95 1216.04 L1559.54 1216.04 L1560.12 1216.04 L1560.71 1216.04 L1561.3 1216.04 L1561.88 1216.04 L1562.47 1216.04 L1563.06 1216.04 L1563.64 1216.04 L1564.23 1216.04 L1564.81 1216.04 L1565.4 1216.04 L1565.99 1216.04 L1566.57 1216.04 L1567.16 1216.04 L1567.75 1216.04 L1568.33 1216.04 L1568.92 1216.04 L1569.51 1216.04 L1570.09 1216.04 L1570.68 1216.04 L1571.27 1216.04 L1571.85 1216.04 L1572.44 1216.04 L1573.02 1216.04 L1573.61 1216.04 L1574.2 1216.04 L1574.78 1216.04 L1575.37 1216.04 L1575.96 1216.04 L1576.54 1216.04 L1577.13 1216.04 L1577.72 1216.04 L1578.3 1216.04 L1578.89 1216.04 L1579.47 1216.04 L1580.06 1216.04 L1580.65 1216.04 L1581.23 1216.04 L1581.82 1216.04 L1582.41 1216.04 L1582.99 1216.04 L1583.58 1216.04 L1584.17 1216.04 L1584.75 1216.04 L1585.34 1216.04 L1585.93 1216.04 L1586.51 1216.04 L1587.1 1216.04 L1587.68 1216.04 L1588.27 1216.04 L1588.86 1216.04 L1589.44 1216.04 L1590.03 1216.04 L1590.62 1216.04 L1591.2 1216.04 L1591.79 1216.04 L1592.38 1216.04 L1592.96 1216.04 L1593.55 1216.04 L1594.14 1216.04 L1594.72 1216.04 L1595.31 1216.04 L1595.89 1216.04 L1596.48 1216.04 L1597.07 1216.04 L1597.65 1216.04 L1598.24 1216.04 L1598.83 1216.04 L1599.41 1216.04 L1600 1216.04 L1600.59 1216.04 L1601.17 1216.04 L1601.76 1216.04 L1602.34 1216.04 L1602.93 1216.04 L1603.52 1216.04 L1604.1 1216.04 L1604.69 1216.04 L1605.28 1216.04 L1605.86 1216.04 L1606.45 1216.04 L1607.04 1216.04 L1607.62 1216.04 L1608.21 1216.04 L1608.8 1216.04 L1609.38 1216.04 L1609.97 1216.04 L1610.55 1216.04 L1611.14 1216.04 L1611.73 1216.04 L1612.31 1216.04 L1612.9 1216.04 L1613.49 1216.04 L1614.07 1216.04 L1614.66 1216.04 L1615.25 1216.04 L1615.83 1216.04 L1616.42 1216.04 L1617.01 1216.04 L1617.59 1216.04 L1618.18 1216.04 L1618.76 1216.04 L1619.35 1216.04 L1619.94 1216.04 L1620.52 1216.04 L1621.11 1216.04 L1621.7 1216.04 L1622.28 1216.04 L1622.87 1216.04 L1623.46 1216.04 L1624.04 1216.04 L1624.63 1216.04 L1625.22 1216.04 L1625.8 1216.04 L1626.39 1216.04 L1626.97 1216.04 L1627.56 1216.04 L1628.15 1216.04 L1628.73 1216.04 L1629.32 1216.04 L1629.91 1216.04 L1630.49 1216.04 L1631.08 1216.04 L1631.67 1216.04 L1632.25 1216.04 L1632.84 1216.04 L1633.42 1216.04 L1634.01 1216.04 L1634.6 1216.04 L1635.18 1216.04 L1635.77 1216.04 L1636.36 1216.04 L1636.94 1216.04 L1637.53 1216.04 L1638.12 1216.04 L1638.7 1216.04 L1639.29 1216.04 L1639.88 1216.04 L1640.46 1216.04 L1641.05 1216.04 L1641.63 1216.04 L1642.22 1216.04 L1642.81 1216.04 L1643.39 1216.04 L1643.98 1216.04 L1644.57 1216.04 L1645.15 1216.04 L1645.74 1216.04 L1646.33 1216.04 L1646.91 1216.04 L1647.5 1216.04 L1648.09 1216.04 L1648.67 1216.04 L1649.26 1216.04 L1649.84 1216.04 L1650.43 1216.04 L1651.02 1216.04 L1651.6 1216.04 L1652.19 1216.04 L1652.78 1216.04 L1653.36 1216.04 L1653.95 1216.04 L1654.54 1216.04 L1655.12 1216.04 L1655.71 1216.04 L1656.29 1216.04 L1656.88 1216.04 L1657.47 1216.04 L1658.05 1216.04 L1658.64 1216.04 L1659.23 1216.04 L1659.81 1216.04 L1660.4 1216.04 L1660.99 1216.04 L1661.57 1216.04 L1662.16 1216.04 L1662.75 1216.04 L1663.33 1216.04 L1663.92 1216.04 L1664.5 1216.04 L1665.09 1216.04 L1665.68 1216.04 L1666.26 1216.04 L1666.85 1216.04 L1667.44 1216.04 L1668.02 1216.04 L1668.61 1216.04 L1669.2 1216.04 L1669.78 1216.04 L1670.37 1216.04 L1670.96 1216.04 L1671.54 1216.04 L1672.13 1216.04 L1672.71 1216.04 L1673.3 1216.04 L1673.89 1216.04 L1674.47 1216.04 L1675.06 1216.04 L1675.65 1216.04 L1676.23 1216.04 L1676.82 1216.04 L1677.41 1216.04 L1677.99 1216.04 L1678.58 1216.04 L1679.17 1216.04 L1679.75 1216.04 L1680.34 1216.04 L1680.92 1216.04 L1681.51 1216.04 L1682.1 1216.04 L1682.68 1216.04 L1683.27 1216.04 L1683.86 1216.04 L1684.44 1216.04 L1685.03 1216.04 L1685.62 1216.04 L1686.2 1216.04 L1686.79 1216.04 L1687.37 1216.04 L1687.96 1216.04 L1688.55 1216.04 L1689.13 1216.04 L1689.72 1216.04 L1690.31 1216.04 L1690.89 1216.04 L1691.48 1216.04 L1692.07 1216.04 L1692.65 1216.04 L1693.24 1216.04 L1693.83 1216.04 L1694.41 1216.04 L1695 1216.04 L1695.58 1216.04 L1696.17 1216.04 L1696.76 1216.04 L1697.34 1216.04 L1697.93 1216.04 L1698.52 1216.04 L1699.1 1216.04 L1699.69 1216.04 L1700.28 1216.04 L1700.86 1216.04 L1701.45 1216.04 L1702.04 1216.04 L1702.62 1216.04 L1703.21 1216.04 L1703.79 1216.04 L1704.38 1216.04 L1704.97 1216.04 L1705.55 1216.04 L1706.14 1216.04 L1706.73 1216.04 L1707.31 1216.04 L1707.9 1216.04 L1708.49 1216.04 L1709.07 1216.04 L1709.66 1216.04 L1710.24 1216.04 L1710.83 1216.04 L1711.42 1216.04 L1712 1216.04 L1712.59 1216.04 L1713.18 1216.04 L1713.76 1216.04 L1714.35 1216.04 L1714.94 1216.04 L1715.52 1216.04 L1716.11 1216.04 L1716.7 1216.04 L1717.28 1216.04 L1717.87 1216.04 L1718.45 1216.04 L1719.04 1216.04 L1719.63 1216.04 L1720.21 1216.04 L1720.8 1216.04 L1721.39 1216.04 L1721.97 1216.04 L1722.56 1216.04 L1723.15 1216.04 L1723.73 1216.04 L1724.32 1216.04 L1724.91 1216.04 L1725.49 1216.04 L1726.08 1216.04 L1726.66 1216.04 L1727.25 1216.04 L1727.84 1216.04 L1728.42 1216.04 L1729.01 1216.04 L1729.6 1216.04 L1730.18 1216.04 L1730.77 1216.04 L1731.36 1216.04 L1731.94 1216.04 L1732.53 1216.04 L1733.11 1216.04 L1733.7 1216.04 L1734.29 1216.04 L1734.87 1216.04 L1735.46 1216.04 L1736.05 1216.04 L1736.63 1216.04 L1737.22 1216.04 L1737.81 1216.04 L1738.39 1216.04 L1738.98 1216.04 L1739.57 1216.04 L1740.15 1216.04 L1740.74 1216.04 L1741.32 1216.04 L1741.91 1216.04 L1742.5 1216.04 L1743.08 1216.04 L1743.67 1216.04 L1744.26 1216.04 L1744.84 1216.04 L1745.43 1216.04 L1746.02 1216.04 L1746.6 1216.04 L1747.19 1216.04 L1747.78 1216.04 L1748.36 1216.04 L1748.95 1216.04 L1749.53 1216.04 L1750.12 1216.04 L1750.71 1216.04 L1751.29 1216.04 L1751.88 1216.04 L1752.47 1216.04 L1753.05 1216.04 L1753.64 1216.04 L1754.23 1216.04 L1754.81 1216.04 L1755.4 1216.04 L1755.99 1216.04 L1756.57 1216.04 L1757.16 1216.04 L1757.74 1216.04 L1758.33 1216.04 L1758.92 1216.04 L1759.5 1216.04 L1760.09 1216.04 L1760.68 1216.04 L1761.26 1216.04 L1761.85 1216.04 L1762.44 1216.04 L1763.02 1216.04 L1763.61 1216.04 L1764.19 1216.04 L1764.78 1216.04 L1765.37 1216.04 L1765.95 1216.04 L1766.54 1216.04 L1767.13 1216.04 L1767.71 1216.04 L1768.3 1216.04 L1768.89 1216.04 L1769.47 1216.04 L1770.06 1216.04 L1770.65 1216.04 L1771.23 1216.04 L1771.82 1216.04 L1772.4 1216.04 L1772.99 1216.04 L1773.58 1216.04 L1774.16 1216.04 L1774.75 1216.04 L1775.34 1216.04 L1775.92 1216.04 L1776.51 1216.04 L1777.1 1216.04 L1777.68 1216.04 L1778.27 1216.04 L1778.86 1216.04 L1779.44 1216.04 L1780.03 1216.04 L1780.61 1216.04 L1781.2 1216.04 L1781.79 1216.04 L1782.37 1216.04 L1782.96 1216.04 L1783.55 1216.04 L1784.13 1216.04 L1784.72 1216.04 L1785.31 1216.04 L1785.89 1216.04 L1786.48 1216.04 L1787.06 1216.04 L1787.65 1216.04 L1788.24 1216.04 L1788.82 1216.04 L1789.41 1216.04 L1790 1216.04 L1790.58 1216.04 L1791.17 1216.04 L1791.76 1216.04 L1792.34 1216.04 L1792.93 1216.04 L1793.52 1216.04 L1794.1 1216.04 L1794.69 1216.04 L1795.27 1216.04 L1795.86 1216.04 L1796.45 1216.04 L1797.03 1216.04 L1797.62 1216.04 L1798.21 1216.04 L1798.79 1216.04 L1799.38 1216.04 L1799.97 1216.04 L1800.55 1216.04 L1801.14 1216.04 L1801.73 1216.04 L1802.31 1216.04 L1802.9 1216.04 L1803.48 1216.04 L1804.07 1216.04 L1804.66 1216.04 L1805.24 1216.04 L1805.83 1216.04 L1806.42 1216.04 L1807 1216.04 L1807.59 1216.04 L1808.18 1216.04 L1808.76 1216.04 L1809.35 1216.04 L1809.94 1216.04 L1810.52 1216.04 L1811.11 1216.04 L1811.69 1216.04 L1812.28 1216.04 L1812.87 1216.04 L1813.45 1216.04 L1814.04 1216.04 L1814.63 1216.04 L1815.21 1216.04 L1815.8 1216.04 L1816.39 1216.04 L1816.97 1216.04 L1817.56 1216.04 L1818.14 1216.04 L1818.73 1216.04 L1819.32 1216.04 L1819.9 1216.04 L1820.49 1216.04 L1821.08 1216.04 L1821.66 1216.04 L1822.25 1216.04 L1822.84 1216.04 L1823.42 1216.04 L1824.01 1216.04 L1824.6 1216.04 L1825.18 1216.04 L1825.77 1216.04 L1826.35 1216.04 L1826.94 1216.04 L1827.53 1216.04 L1828.11 1216.04 L1828.7 1216.04 L1829.29 1216.04 L1829.87 1216.04 L1830.46 1216.04 L1831.05 1216.04 L1831.63 1216.04 L1832.22 1216.04 L1832.81 1216.04 L1833.39 1216.04 L1833.98 1216.04 L1834.56 1216.04 L1835.15 1216.04 L1835.74 1216.04 L1836.32 1216.04 L1836.91 1216.04 L1837.5 1216.04 L1838.08 1216.04 L1838.67 1216.04 L1839.26 1216.04 L1839.84 1216.04 L1840.43 1216.04 L1841.01 1216.04 L1841.6 1216.04 L1842.19 1216.04 L1842.77 1216.04 L1843.36 1216.04 L1843.95 1216.04 L1844.53 1216.04 L1845.12 1216.04 L1845.71 1216.04 L1846.29 1216.04 L1846.88 1216.04 L1847.47 1216.04 L1848.05 1216.04 L1848.64 1216.04 L1849.22 1216.04 L1849.81 1216.04 L1850.4 1216.04 L1850.98 1216.04 L1851.57 1216.04 L1852.16 1216.04 L1852.74 1216.04 L1853.33 1216.04 L1853.92 1216.04 L1854.5 1216.04 L1855.09 1216.04 L1855.68 1216.04 L1856.26 1216.04 L1856.85 1216.04 L1857.43 1216.04 L1858.02 1216.04 L1858.61 1216.04 L1859.19 1216.04 L1859.78 1216.04 L1860.37 1216.04 L1860.95 1216.04 L1861.54 1216.04 L1862.13 1216.04 L1862.71 1216.04 L1863.3 1216.04 L1863.88 1216.04 L1864.47 1216.04 L1865.06 1216.04 L1865.64 1216.04 L1866.23 1216.04 L1866.82 1216.04 L1867.4 1216.04 L1867.99 1216.04 L1868.58 1216.04 L1869.16 1216.04 L1869.75 1216.04 L1870.34 1216.04 L1870.92 1216.04 L1871.51 1216.04 L1872.09 1216.04 L1872.68 1216.04 L1873.27 1216.04 L1873.85 1216.04 L1874.44 1216.04 L1875.03 1216.04 L1875.61 1216.04 L1876.2 1216.04 L1876.79 1216.04 L1877.37 1216.04 L1877.96 1216.04 L1878.55 1216.04 L1879.13 1216.04 L1879.72 1216.04 L1880.3 1216.04 L1880.89 1216.04 L1881.48 1216.04 L1882.06 1216.04 L1882.65 1216.04 L1883.24 1216.04 L1883.82 1216.04 L1884.41 1216.04 L1885 1216.04 L1885.58 1216.04 L1886.17 1216.04 L1886.76 1216.04 L1887.34 1216.04 L1887.93 1216.04 L1888.51 1216.04 L1889.1 1216.04 L1889.69 1216.04 L1890.27 1216.04 L1890.86 1216.04 L1891.45 1216.04 L1892.03 1216.04 L1892.62 1216.04 L1893.21 1216.04 L1893.79 1216.04 L1894.38 1216.04 L1894.96 1216.04 L1895.55 1216.04 L1896.14 1216.04 L1896.72 1216.04 L1897.31 1216.04 L1897.9 1216.04 L1898.48 1216.04 L1899.07 1216.04 L1899.66 1216.04 L1900.24 1216.04 L1900.83 1216.04 L1901.42 1216.04 L1902 1216.04 L1902.59 1216.04 L1903.17 1216.04 L1903.76 1216.04 L1904.35 1216.04 L1904.93 1216.04 L1905.52 1216.04 L1906.11 1216.04 L1906.69 1216.04 L1907.28 1216.04 L1907.87 1216.04 L1908.45 1216.04 L1909.04 1216.04 L1909.63 1216.04 L1910.21 1216.04 L1910.8 1216.04 L1911.38 1216.04 L1911.97 1216.04 L1912.56 1216.04 L1913.14 1216.04 L1913.73 1216.04 L1914.32 1216.04 L1914.9 1216.04 L1915.49 1216.04 L1916.08 1216.04 L1916.66 1216.04 L1917.25 1216.04 L1917.83 1216.04 L1918.42 1216.04 L1919.01 1216.04 L1919.59 1216.04 L1920.18 1216.04 L1920.77 1216.04 L1921.35 1216.04 L1921.94 1216.04 L1922.53 1216.04 L1923.11 1216.04 L1923.7 1216.04 L1924.29 1216.04 L1924.87 1216.04 L1925.46 1216.04 L1926.04 1216.04 L1926.63 1216.04 L1927.22 1216.04 L1927.8 1216.04 L1928.39 1216.04 L1928.98 1216.04 L1929.56 1216.04 L1930.15 1216.04 L1930.74 1216.04 L1931.32 1216.04 L1931.91 1216.04 L1932.5 1216.04 L1933.08 1216.04 L1933.67 1216.04 L1934.25 1216.04 L1934.84 1216.04 L1935.43 1216.04 L1936.01 1216.04 L1936.6 1216.04 L1937.19 1216.04 L1937.77 1216.04 L1938.36 1216.04 L1938.95 1216.04 L1939.53 1216.04 L1940.12 1216.04 L1940.71 1216.04 L1941.29 1216.04 L1941.88 1216.04 L1942.46 1216.04 L1943.05 1216.04 L1943.64 1216.04 L1944.22 1216.04 L1944.81 1216.04 L1945.4 1216.04 L1945.98 1216.04 L1946.57 1216.04 L1947.16 1216.04 L1947.74 1216.04 L1948.33 1216.04 L1948.91 1216.04 L1949.5 1216.04 L1950.09 1216.04 L1950.67 1216.04 L1951.26 1216.04 L1951.85 1216.04 L1952.43 1216.04 L1953.02 1216.04 L1953.61 1216.04 L1954.19 1216.04 L1954.78 1216.04 L1955.37 1216.04 L1955.95 1216.04 L1956.54 1216.04 L1957.12 1216.04 L1957.71 1216.04 L1958.3 1216.04 L1958.88 1216.04 L1959.47 1216.04 L1960.06 1216.04 L1960.64 1216.04 L1961.23 1216.04 L1961.82 1216.04 L1962.4 1216.04 L1962.99 1216.04 L1963.58 1216.04 L1964.16 1216.04 L1964.75 1216.04 L1965.33 1216.04 L1965.92 1216.04 L1966.51 1216.04 L1967.09 1216.04 L1967.68 1216.04 L1968.27 1216.04 L1968.85 1216.04 L1969.44 1216.04 L1970.03 1216.04 L1970.61 1216.04 L1971.2 1216.04 L1971.78 1216.04 L1972.37 1216.04 L1972.96 1216.04 L1973.54 1216.04 L1974.13 1216.04 L1974.72 1216.04 L1975.3 1216.04 L1975.89 1216.04 L1976.48 1216.04 L1977.06 1216.04 L1977.65 1216.04 L1978.24 1216.04 L1978.82 1216.04 L1979.41 1216.04 L1979.99 1216.04 L1980.58 1216.04 L1981.17 1216.04 L1981.75 1216.04 L1982.34 1216.04 L1982.93 1216.04 L1983.51 1216.04 L1984.1 1216.04 L1984.69 1216.04 L1985.27 1216.04 L1985.86 1216.04 L1986.45 1216.04 L1987.03 1216.04 L1987.62 1216.04 L1988.2 1216.04 L1988.79 1216.04 L1989.38 1216.04 L1989.96 1216.04 L1990.55 1216.04 L1991.14 1216.04 L1991.72 1216.04 L1992.31 1216.04 L1992.9 1216.04 L1993.48 1216.04 L1994.07 1216.04 L1994.65 1216.04 L1995.24 1216.04 L1995.83 1216.04 L1996.41 1216.04 L1997 1216.04 L1997.59 1216.04 L1998.17 1216.04 L1998.76 1216.04 L1999.35 1216.04 L1999.93 1216.04 L2000.52 1216.04 L2001.11 1216.04 L2001.69 1216.04 L2002.28 1216.04 L2002.86 1216.04 L2003.45 1216.04 L2004.04 1216.04 L2004.62 1216.04 L2005.21 1216.04 L2005.8 1216.04 L2006.38 1216.04 L2006.97 1216.04 L2007.56 1216.04 L2008.14 1216.04 L2008.73 1216.04 L2009.32 1216.04 L2009.9 1216.04 L2010.49 1216.04 L2011.07 1216.04 L2011.66 1216.04 L2012.25 1216.04 L2012.83 1216.04 L2013.42 1216.04 L2014.01 1216.04 L2014.59 1216.04 L2015.18 1216.04 L2015.77 1216.04 L2016.35 1216.04 L2016.94 1216.04 L2017.53 1216.04 L2018.11 1216.04 L2018.7 1216.04 L2019.28 1216.04 L2019.87 1216.04 L2020.46 1216.04 L2021.04 1216.04 L2021.63 1216.04 L2022.22 1216.04 L2022.8 1216.04 L2023.39 1216.04 L2023.98 1216.04 L2024.56 1216.04 L2025.15 1216.04 L2025.73 1216.04 L2026.32 1216.04 L2026.91 1216.04 L2027.49 1216.04 L2028.08 1216.04 L2028.67 1216.04 L2029.25 1216.04 L2029.84 1216.04 L2030.43 1216.04 L2031.01 1216.04 L2031.6 1216.04 L2032.19 1216.04 L2032.77 1216.04 L2033.36 1216.04 L2033.94 1216.04 L2034.53 1216.04 L2035.12 1216.04 L2035.7 1216.04 L2036.29 1216.04 L2036.88 1216.04 L2037.46 1216.04 L2038.05 1216.04 L2038.64 1216.04 L2039.22 1216.04 L2039.81 1216.04 L2040.4 1216.04 L2040.98 1216.04 L2041.57 1216.04 L2042.15 1216.04 L2042.74 1216.04 L2043.33 1216.04 L2043.91 1216.04 L2044.5 1216.04 L2045.09 1216.04 L2045.67 1216.04 L2046.26 1216.04 L2046.85 1216.04 L2047.43 1216.04 L2048.02 1216.04 L2048.6 1216.04 L2049.19 1216.04 L2049.78 1216.04 L2050.36 1216.04 L2050.95 1216.04 L2051.54 1216.04 L2052.12 1216.04 L2052.71 1216.04 L2053.3 1216.04 L2053.88 1216.04 L2054.47 1216.04 L2055.06 1216.04 L2055.64 1216.04 L2056.23 1216.04 L2056.81 1216.04 L2057.4 1216.04 L2057.99 1216.04 L2058.57 1216.04 L2059.16 1216.04 L2059.75 1216.04 L2060.33 1216.04 L2060.92 1216.04 L2061.51 1216.04 L2062.09 1216.04 L2062.68 1216.04 L2063.27 1216.04 L2063.85 1216.04 L2064.44 1216.04 L2065.02 1216.04 L2065.61 1216.04 L2066.2 1216.04 L2066.78 1216.04 L2067.37 1216.04 L2067.96 1216.04 L2068.54 1216.04 L2069.13 1216.04 L2069.72 1216.04 L2070.3 1216.04 L2070.89 1216.04 L2071.48 1216.04 L2072.06 1216.04 L2072.65 1216.04 L2073.23 1216.04 L2073.82 1216.04 L2074.41 1216.04 L2074.99 1216.04 L2075.58 1216.04 L2076.17 1216.04 L2076.75 1216.04 L2077.34 1216.04 L2077.93 1216.04 L2078.51 1216.04 L2079.1 1216.04 L2079.68 1216.04 L2080.27 1216.04 L2080.86 1216.04 L2081.44 1216.04 L2082.03 1216.04 L2082.62 1216.04 L2083.2 1216.04 L2083.79 1216.04 L2084.38 1216.04 L2084.96 1216.04 L2085.55 1216.04 L2086.14 1216.04 L2086.72 1216.04 L2087.31 1216.04 L2087.89 1216.04 L2088.48 1216.04 L2089.07 1216.04 L2089.65 1216.04 L2090.24 1216.04 L2090.83 1216.04 L2091.41 1216.04 L2092 1216.04 L2092.59 1216.04 L2093.17 1216.04 L2093.76 1216.04 L2094.35 1216.04 L2094.93 1216.04 L2095.52 1216.04 L2096.1 1216.04 L2096.69 1216.04 L2097.28 1216.04 L2097.86 1216.04 L2098.45 1216.04 L2099.04 1216.04 L2099.62 1216.04 L2100.21 1216.04 L2100.8 1216.04 L2101.38 1216.04 L2101.97 1216.04 L2102.55 1216.04 L2103.14 1216.04 L2103.73 1216.04 L2104.31 1216.04 L2104.9 1216.04 L2105.49 1216.04 L2106.07 1216.04 L2106.66 1216.04 L2107.25 1216.04 L2107.83 1216.04 L2108.42 1216.04 L2109.01 1216.04 L2109.59 1216.04 L2110.18 1216.04 L2110.76 1216.04 L2111.35 1216.04 L2111.94 1216.04 L2112.52 1216.04 L2113.11 1216.04 L2113.7 1216.04 L2114.28 1216.04 L2114.87 1216.04 L2115.46 1216.04 L2116.04 1216.04 L2116.63 1216.04 L2117.22 1216.04 L2117.8 1216.04 L2118.39 1216.04 L2118.97 1216.04 L2119.56 1216.04 L2120.15 1216.04 L2120.73 1216.04 L2121.32 1216.04 L2121.91 1216.04 L2122.49 1216.04 L2123.08 1216.04 L2123.67 1216.04 L2124.25 1216.04 L2124.84 1216.04 L2125.42 1216.04 L2126.01 1216.04 L2126.6 1216.04 L2127.18 1216.04 L2127.77 1216.04 L2128.36 1216.04 L2128.94 1216.04 L2129.53 1216.04 L2130.12 1216.04 L2130.7 1216.04 L2131.29 1216.04 L2131.88 1216.04 L2132.46 1216.04 L2133.05 1216.04 L2133.63 1216.04 L2134.22 1216.04 L2134.81 1216.04 L2135.39 1216.04 L2135.98 1216.04 L2136.57 1216.04 L2137.15 1216.04 L2137.74 1216.04 L2138.33 1216.04 L2138.91 1216.04 L2139.5 1216.04 L2140.09 1216.04 L2140.67 1216.04 L2141.26 1216.04 L2141.84 1216.04 L2142.43 1216.04 L2143.02 1216.04 L2143.6 1216.04 L2144.19 1216.04 L2144.78 1216.04 L2145.36 1216.04 L2145.95 1216.04 L2146.54 1216.04 L2147.12 1216.04 L2147.71 1216.04 L2148.3 1216.04 L2148.88 1216.04 L2149.47 1216.04 L2150.05 1216.04 L2150.64 1216.04 L2151.23 1216.04 L2151.81 1216.04 L2152.4 1216.04 L2152.99 1216.04 L2153.57 1216.04 L2154.16 1216.04 L2154.75 1216.04 L2155.33 1216.04 L2155.92 1216.04 L2156.5 1216.04 L2157.09 1216.04 L2157.68 1216.04 L2158.26 1216.04 L2158.26 1215.84 L2157.68 1215.84 L2157.09 1215.84 L2156.5 1215.84 L2155.92 1215.84 L2155.33 1215.84 L2154.75 1215.84 L2154.16 1215.84 L2153.57 1215.84 L2152.99 1215.84 L2152.4 1215.84 L2151.81 1215.84 L2151.23 1215.84 L2150.64 1215.84 L2150.05 1215.84 L2149.47 1215.84 L2148.88 1215.84 L2148.3 1215.84 L2147.71 1215.84 L2147.12 1215.84 L2146.54 1215.84 L2145.95 1215.84 L2145.36 1215.84 L2144.78 1215.84 L2144.19 1215.84 L2143.6 1215.84 L2143.02 1215.84 L2142.43 1215.84 L2141.84 1215.84 L2141.26 1215.84 L2140.67 1215.84 L2140.09 1215.84 L2139.5 1215.84 L2138.91 1215.84 L2138.33 1215.84 L2137.74 1215.84 L2137.15 1215.84 L2136.57 1215.84 L2135.98 1215.84 L2135.39 1215.84 L2134.81 1215.84 L2134.22 1215.84 L2133.63 1215.84 L2133.05 1215.84 L2132.46 1215.84 L2131.88 1215.84 L2131.29 1215.84 L2130.7 1215.84 L2130.12 1215.84 L2129.53 1215.84 L2128.94 1215.84 L2128.36 1215.84 L2127.77 1215.84 L2127.18 1215.84 L2126.6 1215.84 L2126.01 1215.84 L2125.42 1215.84 L2124.84 1215.84 L2124.25 1215.84 L2123.67 1215.84 L2123.08 1215.84 L2122.49 1215.84 L2121.91 1215.84 L2121.32 1215.84 L2120.73 1215.84 L2120.15 1215.84 L2119.56 1215.84 L2118.97 1215.84 L2118.39 1215.84 L2117.8 1215.84 L2117.22 1215.84 L2116.63 1215.84 L2116.04 1215.84 L2115.46 1215.84 L2114.87 1215.84 L2114.28 1215.84 L2113.7 1215.84 L2113.11 1215.84 L2112.52 1215.84 L2111.94 1215.84 L2111.35 1215.84 L2110.76 1215.84 L2110.18 1215.84 L2109.59 1215.84 L2109.01 1215.84 L2108.42 1215.84 L2107.83 1215.84 L2107.25 1215.84 L2106.66 1215.84 L2106.07 1215.84 L2105.49 1215.84 L2104.9 1215.84 L2104.31 1215.84 L2103.73 1215.84 L2103.14 1215.84 L2102.55 1215.84 L2101.97 1215.84 L2101.38 1215.84 L2100.8 1215.84 L2100.21 1215.84 L2099.62 1215.84 L2099.04 1215.84 L2098.45 1215.84 L2097.86 1215.84 L2097.28 1215.84 L2096.69 1215.84 L2096.1 1215.84 L2095.52 1215.84 L2094.93 1215.84 L2094.35 1215.84 L2093.76 1215.84 L2093.17 1215.84 L2092.59 1215.84 L2092 1215.84 L2091.41 1215.84 L2090.83 1215.84 L2090.24 1215.84 L2089.65 1215.84 L2089.07 1215.84 L2088.48 1215.84 L2087.89 1215.84 L2087.31 1215.84 L2086.72 1215.84 L2086.14 1215.84 L2085.55 1215.84 L2084.96 1215.84 L2084.38 1215.84 L2083.79 1215.84 L2083.2 1215.84 L2082.62 1215.84 L2082.03 1215.84 L2081.44 1215.84 L2080.86 1215.84 L2080.27 1215.84 L2079.68 1215.84 L2079.1 1215.84 L2078.51 1215.84 L2077.93 1215.84 L2077.34 1215.84 L2076.75 1215.84 L2076.17 1215.84 L2075.58 1215.84 L2074.99 1215.84 L2074.41 1215.84 L2073.82 1215.84 L2073.23 1215.84 L2072.65 1215.84 L2072.06 1215.84 L2071.48 1215.84 L2070.89 1215.84 L2070.3 1215.84 L2069.72 1215.84 L2069.13 1215.84 L2068.54 1215.84 L2067.96 1215.84 L2067.37 1215.84 L2066.78 1215.84 L2066.2 1215.84 L2065.61 1215.84 L2065.02 1215.84 L2064.44 1215.84 L2063.85 1215.84 L2063.27 1215.84 L2062.68 1215.84 L2062.09 1215.84 L2061.51 1215.84 L2060.92 1215.84 L2060.33 1215.84 L2059.75 1215.84 L2059.16 1215.84 L2058.57 1215.84 L2057.99 1215.84 L2057.4 1215.84 L2056.81 1215.84 L2056.23 1215.84 L2055.64 1215.84 L2055.06 1215.84 L2054.47 1215.84 L2053.88 1215.84 L2053.3 1215.84 L2052.71 1215.84 L2052.12 1215.84 L2051.54 1215.84 L2050.95 1215.84 L2050.36 1215.84 L2049.78 1215.84 L2049.19 1215.84 L2048.6 1215.84 L2048.02 1215.84 L2047.43 1215.84 L2046.85 1215.84 L2046.26 1215.84 L2045.67 1215.84 L2045.09 1215.84 L2044.5 1215.84 L2043.91 1215.84 L2043.33 1215.84 L2042.74 1215.84 L2042.15 1215.84 L2041.57 1215.84 L2040.98 1215.84 L2040.4 1215.84 L2039.81 1215.84 L2039.22 1215.84 L2038.64 1215.84 L2038.05 1215.84 L2037.46 1215.84 L2036.88 1215.84 L2036.29 1215.84 L2035.7 1215.84 L2035.12 1215.84 L2034.53 1215.84 L2033.94 1215.84 L2033.36 1215.84 L2032.77 1215.84 L2032.19 1215.84 L2031.6 1215.84 L2031.01 1215.84 L2030.43 1215.84 L2029.84 1215.84 L2029.25 1215.84 L2028.67 1215.84 L2028.08 1215.84 L2027.49 1215.84 L2026.91 1215.84 L2026.32 1215.84 L2025.73 1215.84 L2025.15 1215.84 L2024.56 1215.84 L2023.98 1215.84 L2023.39 1215.84 L2022.8 1215.84 L2022.22 1215.84 L2021.63 1215.84 L2021.04 1215.84 L2020.46 1215.84 L2019.87 1215.84 L2019.28 1215.84 L2018.7 1215.84 L2018.11 1215.84 L2017.53 1215.84 L2016.94 1215.84 L2016.35 1215.84 L2015.77 1215.84 L2015.18 1215.84 L2014.59 1215.84 L2014.01 1215.84 L2013.42 1215.84 L2012.83 1215.84 L2012.25 1215.84 L2011.66 1215.84 L2011.07 1215.84 L2010.49 1215.84 L2009.9 1215.84 L2009.32 1215.84 L2008.73 1215.84 L2008.14 1215.84 L2007.56 1215.84 L2006.97 1215.84 L2006.38 1215.84 L2005.8 1215.84 L2005.21 1215.84 L2004.62 1215.84 L2004.04 1215.84 L2003.45 1215.84 L2002.86 1215.84 L2002.28 1215.84 L2001.69 1215.84 L2001.11 1215.84 L2000.52 1215.84 L1999.93 1215.84 L1999.35 1215.84 L1998.76 1215.84 L1998.17 1215.84 L1997.59 1215.84 L1997 1215.84 L1996.41 1215.84 L1995.83 1215.84 L1995.24 1215.84 L1994.65 1215.84 L1994.07 1215.84 L1993.48 1215.84 L1992.9 1215.84 L1992.31 1215.84 L1991.72 1215.84 L1991.14 1215.84 L1990.55 1215.84 L1989.96 1215.84 L1989.38 1215.84 L1988.79 1215.84 L1988.2 1215.84 L1987.62 1215.84 L1987.03 1215.84 L1986.45 1215.84 L1985.86 1215.84 L1985.27 1215.84 L1984.69 1215.84 L1984.1 1215.84 L1983.51 1215.84 L1982.93 1215.84 L1982.34 1215.84 L1981.75 1215.84 L1981.17 1215.84 L1980.58 1215.84 L1979.99 1215.84 L1979.41 1215.84 L1978.82 1215.84 L1978.24 1215.84 L1977.65 1215.84 L1977.06 1215.84 L1976.48 1215.84 L1975.89 1215.84 L1975.3 1215.84 L1974.72 1215.84 L1974.13 1215.84 L1973.54 1215.84 L1972.96 1215.84 L1972.37 1215.84 L1971.78 1215.84 L1971.2 1215.84 L1970.61 1215.84 L1970.03 1215.84 L1969.44 1215.84 L1968.85 1215.84 L1968.27 1215.84 L1967.68 1215.84 L1967.09 1215.84 L1966.51 1215.84 L1965.92 1215.84 L1965.33 1215.84 L1964.75 1215.84 L1964.16 1215.84 L1963.58 1215.84 L1962.99 1215.84 L1962.4 1215.84 L1961.82 1215.84 L1961.23 1215.84 L1960.64 1215.84 L1960.06 1215.84 L1959.47 1215.84 L1958.88 1215.84 L1958.3 1215.84 L1957.71 1215.84 L1957.12 1215.84 L1956.54 1215.84 L1955.95 1215.84 L1955.37 1215.84 L1954.78 1215.84 L1954.19 1215.84 L1953.61 1215.84 L1953.02 1215.84 L1952.43 1215.84 L1951.85 1215.84 L1951.26 1215.84 L1950.67 1215.84 L1950.09 1215.84 L1949.5 1215.84 L1948.91 1215.84 L1948.33 1215.84 L1947.74 1215.84 L1947.16 1215.84 L1946.57 1215.84 L1945.98 1215.84 L1945.4 1215.84 L1944.81 1215.84 L1944.22 1215.84 L1943.64 1215.84 L1943.05 1215.84 L1942.46 1215.84 L1941.88 1215.84 L1941.29 1215.84 L1940.71 1215.84 L1940.12 1215.84 L1939.53 1215.84 L1938.95 1215.84 L1938.36 1215.84 L1937.77 1215.84 L1937.19 1215.84 L1936.6 1215.84 L1936.01 1215.84 L1935.43 1215.84 L1934.84 1215.84 L1934.25 1215.84 L1933.67 1215.84 L1933.08 1215.84 L1932.5 1215.84 L1931.91 1215.84 L1931.32 1215.84 L1930.74 1215.84 L1930.15 1215.84 L1929.56 1215.84 L1928.98 1215.84 L1928.39 1215.84 L1927.8 1215.84 L1927.22 1215.84 L1926.63 1215.84 L1926.04 1215.84 L1925.46 1215.84 L1924.87 1215.84 L1924.29 1215.84 L1923.7 1215.84 L1923.11 1215.84 L1922.53 1215.84 L1921.94 1215.84 L1921.35 1215.84 L1920.77 1215.84 L1920.18 1215.84 L1919.59 1215.84 L1919.01 1215.84 L1918.42 1215.84 L1917.83 1215.84 L1917.25 1215.84 L1916.66 1215.84 L1916.08 1215.84 L1915.49 1215.84 L1914.9 1215.84 L1914.32 1215.84 L1913.73 1215.84 L1913.14 1215.84 L1912.56 1215.84 L1911.97 1215.84 L1911.38 1215.84 L1910.8 1215.84 L1910.21 1215.84 L1909.63 1215.84 L1909.04 1215.84 L1908.45 1215.84 L1907.87 1215.84 L1907.28 1215.84 L1906.69 1215.84 L1906.11 1215.84 L1905.52 1215.84 L1904.93 1215.84 L1904.35 1215.84 L1903.76 1215.84 L1903.17 1215.84 L1902.59 1215.84 L1902 1215.84 L1901.42 1215.84 L1900.83 1215.84 L1900.24 1215.84 L1899.66 1215.84 L1899.07 1215.84 L1898.48 1215.84 L1897.9 1215.84 L1897.31 1215.84 L1896.72 1215.84 L1896.14 1215.84 L1895.55 1215.84 L1894.96 1215.84 L1894.38 1215.84 L1893.79 1215.84 L1893.21 1215.84 L1892.62 1215.84 L1892.03 1215.84 L1891.45 1215.84 L1890.86 1215.84 L1890.27 1215.84 L1889.69 1215.84 L1889.1 1215.84 L1888.51 1215.84 L1887.93 1215.84 L1887.34 1215.84 L1886.76 1215.84 L1886.17 1215.84 L1885.58 1215.84 L1885 1215.84 L1884.41 1215.84 L1883.82 1215.84 L1883.24 1215.84 L1882.65 1215.84 L1882.06 1215.84 L1881.48 1215.84 L1880.89 1215.84 L1880.3 1215.84 L1879.72 1215.84 L1879.13 1215.84 L1878.55 1215.84 L1877.96 1215.84 L1877.37 1215.84 L1876.79 1215.84 L1876.2 1215.84 L1875.61 1215.84 L1875.03 1215.84 L1874.44 1215.84 L1873.85 1215.84 L1873.27 1215.84 L1872.68 1215.84 L1872.09 1215.84 L1871.51 1215.84 L1870.92 1215.84 L1870.34 1215.84 L1869.75 1215.84 L1869.16 1215.84 L1868.58 1215.84 L1867.99 1215.84 L1867.4 1215.84 L1866.82 1215.84 L1866.23 1215.84 L1865.64 1215.84 L1865.06 1215.84 L1864.47 1215.84 L1863.88 1215.84 L1863.3 1215.84 L1862.71 1215.84 L1862.13 1215.84 L1861.54 1215.84 L1860.95 1215.84 L1860.37 1215.84 L1859.78 1215.84 L1859.19 1215.84 L1858.61 1215.84 L1858.02 1215.84 L1857.43 1215.84 L1856.85 1215.84 L1856.26 1215.84 L1855.68 1215.84 L1855.09 1215.84 L1854.5 1215.84 L1853.92 1215.84 L1853.33 1215.84 L1852.74 1215.84 L1852.16 1215.84 L1851.57 1215.84 L1850.98 1215.84 L1850.4 1215.84 L1849.81 1215.84 L1849.22 1215.84 L1848.64 1215.84 L1848.05 1215.84 L1847.47 1215.84 L1846.88 1215.84 L1846.29 1215.84 L1845.71 1215.84 L1845.12 1215.84 L1844.53 1215.84 L1843.95 1215.84 L1843.36 1215.84 L1842.77 1215.84 L1842.19 1215.84 L1841.6 1215.84 L1841.01 1215.84 L1840.43 1215.84 L1839.84 1215.84 L1839.26 1215.84 L1838.67 1215.84 L1838.08 1215.84 L1837.5 1215.84 L1836.91 1215.84 L1836.32 1215.84 L1835.74 1215.84 L1835.15 1215.84 L1834.56 1215.84 L1833.98 1215.84 L1833.39 1215.84 L1832.81 1215.84 L1832.22 1215.84 L1831.63 1215.84 L1831.05 1215.84 L1830.46 1215.84 L1829.87 1215.84 L1829.29 1215.84 L1828.7 1215.84 L1828.11 1215.84 L1827.53 1215.84 L1826.94 1215.84 L1826.35 1215.84 L1825.77 1215.84 L1825.18 1215.84 L1824.6 1215.84 L1824.01 1215.84 L1823.42 1215.84 L1822.84 1215.84 L1822.25 1215.84 L1821.66 1215.84 L1821.08 1215.84 L1820.49 1215.84 L1819.9 1215.84 L1819.32 1215.84 L1818.73 1215.84 L1818.14 1215.84 L1817.56 1215.84 L1816.97 1215.84 L1816.39 1215.84 L1815.8 1215.84 L1815.21 1215.84 L1814.63 1215.84 L1814.04 1215.84 L1813.45 1215.84 L1812.87 1215.84 L1812.28 1215.84 L1811.69 1215.84 L1811.11 1215.84 L1810.52 1215.84 L1809.94 1215.84 L1809.35 1215.84 L1808.76 1215.84 L1808.18 1215.84 L1807.59 1215.84 L1807 1215.84 L1806.42 1215.84 L1805.83 1215.84 L1805.24 1215.84 L1804.66 1215.84 L1804.07 1215.84 L1803.48 1215.84 L1802.9 1215.84 L1802.31 1215.84 L1801.73 1215.84 L1801.14 1215.84 L1800.55 1215.84 L1799.97 1215.84 L1799.38 1215.84 L1798.79 1215.84 L1798.21 1215.84 L1797.62 1215.84 L1797.03 1215.84 L1796.45 1215.84 L1795.86 1215.84 L1795.27 1215.84 L1794.69 1215.84 L1794.1 1215.84 L1793.52 1215.84 L1792.93 1215.84 L1792.34 1215.84 L1791.76 1215.84 L1791.17 1215.84 L1790.58 1215.84 L1790 1215.84 L1789.41 1215.84 L1788.82 1215.84 L1788.24 1215.84 L1787.65 1215.84 L1787.06 1215.84 L1786.48 1215.84 L1785.89 1215.84 L1785.31 1215.84 L1784.72 1215.84 L1784.13 1215.84 L1783.55 1215.84 L1782.96 1215.84 L1782.37 1215.84 L1781.79 1215.84 L1781.2 1215.84 L1780.61 1215.84 L1780.03 1215.84 L1779.44 1215.84 L1778.86 1215.84 L1778.27 1215.84 L1777.68 1215.84 L1777.1 1215.84 L1776.51 1215.84 L1775.92 1215.84 L1775.34 1215.84 L1774.75 1215.84 L1774.16 1215.84 L1773.58 1215.84 L1772.99 1215.84 L1772.4 1215.84 L1771.82 1215.84 L1771.23 1215.84 L1770.65 1215.84 L1770.06 1215.84 L1769.47 1215.84 L1768.89 1215.84 L1768.3 1215.84 L1767.71 1215.84 L1767.13 1215.84 L1766.54 1215.84 L1765.95 1215.84 L1765.37 1215.84 L1764.78 1215.84 L1764.19 1215.84 L1763.61 1215.84 L1763.02 1215.84 L1762.44 1215.84 L1761.85 1215.84 L1761.26 1215.84 L1760.68 1215.84 L1760.09 1215.84 L1759.5 1215.84 L1758.92 1215.84 L1758.33 1215.84 L1757.74 1215.84 L1757.16 1215.84 L1756.57 1215.84 L1755.99 1215.84 L1755.4 1215.84 L1754.81 1215.84 L1754.23 1215.84 L1753.64 1215.84 L1753.05 1215.84 L1752.47 1215.84 L1751.88 1215.84 L1751.29 1215.84 L1750.71 1215.84 L1750.12 1215.84 L1749.53 1215.84 L1748.95 1215.84 L1748.36 1215.84 L1747.78 1215.84 L1747.19 1215.84 L1746.6 1215.84 L1746.02 1215.84 L1745.43 1215.84 L1744.84 1215.84 L1744.26 1215.84 L1743.67 1215.84 L1743.08 1215.84 L1742.5 1215.84 L1741.91 1215.84 L1741.32 1215.84 L1740.74 1215.84 L1740.15 1215.84 L1739.57 1215.84 L1738.98 1215.84 L1738.39 1215.84 L1737.81 1215.84 L1737.22 1215.84 L1736.63 1215.84 L1736.05 1215.84 L1735.46 1215.84 L1734.87 1215.84 L1734.29 1215.84 L1733.7 1215.84 L1733.11 1215.84 L1732.53 1215.84 L1731.94 1215.84 L1731.36 1215.84 L1730.77 1215.84 L1730.18 1215.84 L1729.6 1215.84 L1729.01 1215.84 L1728.42 1215.84 L1727.84 1215.84 L1727.25 1215.84 L1726.66 1215.84 L1726.08 1215.84 L1725.49 1215.84 L1724.91 1215.84 L1724.32 1215.84 L1723.73 1215.84 L1723.15 1215.84 L1722.56 1215.84 L1721.97 1215.84 L1721.39 1215.84 L1720.8 1215.84 L1720.21 1215.84 L1719.63 1215.84 L1719.04 1215.84 L1718.45 1215.84 L1717.87 1215.84 L1717.28 1215.84 L1716.7 1215.84 L1716.11 1215.84 L1715.52 1215.84 L1714.94 1215.84 L1714.35 1215.84 L1713.76 1215.84 L1713.18 1215.84 L1712.59 1215.84 L1712 1215.84 L1711.42 1215.84 L1710.83 1215.84 L1710.24 1215.84 L1709.66 1215.84 L1709.07 1215.84 L1708.49 1215.84 L1707.9 1215.84 L1707.31 1215.84 L1706.73 1215.84 L1706.14 1215.84 L1705.55 1215.84 L1704.97 1215.84 L1704.38 1215.84 L1703.79 1215.84 L1703.21 1215.84 L1702.62 1215.84 L1702.04 1215.84 L1701.45 1215.84 L1700.86 1215.84 L1700.28 1215.84 L1699.69 1215.84 L1699.1 1215.84 L1698.52 1215.84 L1697.93 1215.84 L1697.34 1215.84 L1696.76 1215.84 L1696.17 1215.84 L1695.58 1215.84 L1695 1215.84 L1694.41 1215.84 L1693.83 1215.84 L1693.24 1215.84 L1692.65 1215.84 L1692.07 1215.84 L1691.48 1215.84 L1690.89 1215.84 L1690.31 1215.84 L1689.72 1215.84 L1689.13 1215.84 L1688.55 1215.84 L1687.96 1215.84 L1687.37 1215.84 L1686.79 1215.84 L1686.2 1215.84 L1685.62 1215.84 L1685.03 1215.84 L1684.44 1215.84 L1683.86 1215.84 L1683.27 1215.84 L1682.68 1215.84 L1682.1 1215.84 L1681.51 1215.84 L1680.92 1215.84 L1680.34 1215.84 L1679.75 1215.84 L1679.17 1215.84 L1678.58 1215.84 L1677.99 1215.84 L1677.41 1215.84 L1676.82 1215.84 L1676.23 1215.84 L1675.65 1215.84 L1675.06 1215.84 L1674.47 1215.84 L1673.89 1215.84 L1673.3 1215.84 L1672.71 1215.84 L1672.13 1215.84 L1671.54 1215.84 L1670.96 1215.84 L1670.37 1215.84 L1669.78 1215.84 L1669.2 1215.84 L1668.61 1215.84 L1668.02 1215.84 L1667.44 1215.84 L1666.85 1215.84 L1666.26 1215.84 L1665.68 1215.84 L1665.09 1215.84 L1664.5 1215.84 L1663.92 1215.84 L1663.33 1215.84 L1662.75 1215.84 L1662.16 1215.84 L1661.57 1215.84 L1660.99 1215.84 L1660.4 1215.84 L1659.81 1215.84 L1659.23 1215.84 L1658.64 1215.84 L1658.05 1215.84 L1657.47 1215.84 L1656.88 1215.84 L1656.29 1215.84 L1655.71 1215.84 L1655.12 1215.84 L1654.54 1215.84 L1653.95 1215.84 L1653.36 1215.84 L1652.78 1215.84 L1652.19 1215.84 L1651.6 1215.84 L1651.02 1215.84 L1650.43 1215.84 L1649.84 1215.84 L1649.26 1215.84 L1648.67 1215.84 L1648.09 1215.84 L1647.5 1215.84 L1646.91 1215.84 L1646.33 1215.84 L1645.74 1215.84 L1645.15 1215.84 L1644.57 1215.84 L1643.98 1215.84 L1643.39 1215.84 L1642.81 1215.84 L1642.22 1215.84 L1641.63 1215.84 L1641.05 1215.84 L1640.46 1215.84 L1639.88 1215.84 L1639.29 1215.84 L1638.7 1215.84 L1638.12 1215.84 L1637.53 1215.84 L1636.94 1215.84 L1636.36 1215.84 L1635.77 1215.84 L1635.18 1215.84 L1634.6 1215.84 L1634.01 1215.84 L1633.42 1215.84 L1632.84 1215.84 L1632.25 1215.84 L1631.67 1215.84 L1631.08 1215.84 L1630.49 1215.84 L1629.91 1215.84 L1629.32 1215.84 L1628.73 1215.84 L1628.15 1215.84 L1627.56 1215.84 L1626.97 1215.84 L1626.39 1215.84 L1625.8 1215.84 L1625.22 1215.84 L1624.63 1215.84 L1624.04 1215.84 L1623.46 1215.84 L1622.87 1215.84 L1622.28 1215.84 L1621.7 1215.84 L1621.11 1215.84 L1620.52 1215.84 L1619.94 1215.84 L1619.35 1215.84 L1618.76 1215.84 L1618.18 1215.84 L1617.59 1215.84 L1617.01 1215.84 L1616.42 1215.84 L1615.83 1215.84 L1615.25 1215.84 L1614.66 1215.84 L1614.07 1215.84 L1613.49 1215.84 L1612.9 1215.84 L1612.31 1215.84 L1611.73 1215.84 L1611.14 1215.84 L1610.55 1215.84 L1609.97 1215.84 L1609.38 1215.84 L1608.8 1215.84 L1608.21 1215.84 L1607.62 1215.84 L1607.04 1215.84 L1606.45 1215.84 L1605.86 1215.84 L1605.28 1215.84 L1604.69 1215.84 L1604.1 1215.84 L1603.52 1215.84 L1602.93 1215.84 L1602.34 1215.84 L1601.76 1215.84 L1601.17 1215.84 L1600.59 1215.84 L1600 1215.84 L1599.41 1215.84 L1598.83 1215.84 L1598.24 1215.84 L1597.65 1215.84 L1597.07 1215.84 L1596.48 1215.84 L1595.89 1215.84 L1595.31 1215.84 L1594.72 1215.84 L1594.14 1215.84 L1593.55 1215.84 L1592.96 1215.84 L1592.38 1215.84 L1591.79 1215.84 L1591.2 1215.84 L1590.62 1215.84 L1590.03 1215.84 L1589.44 1215.84 L1588.86 1215.84 L1588.27 1215.84 L1587.68 1215.84 L1587.1 1215.84 L1586.51 1215.84 L1585.93 1215.84 L1585.34 1215.84 L1584.75 1215.84 L1584.17 1215.84 L1583.58 1215.84 L1582.99 1215.84 L1582.41 1215.84 L1581.82 1215.84 L1581.23 1215.84 L1580.65 1215.84 L1580.06 1215.84 L1579.47 1215.84 L1578.89 1215.84 L1578.3 1215.84 L1577.72 1215.84 L1577.13 1215.84 L1576.54 1215.84 L1575.96 1215.84 L1575.37 1215.84 L1574.78 1215.84 L1574.2 1215.84 L1573.61 1215.84 L1573.02 1215.84 L1572.44 1215.84 L1571.85 1215.84 L1571.27 1215.84 L1570.68 1215.84 L1570.09 1215.84 L1569.51 1215.84 L1568.92 1215.84 L1568.33 1215.84 L1567.75 1215.84 L1567.16 1215.84 L1566.57 1215.84 L1565.99 1215.84 L1565.4 1215.84 L1564.81 1215.84 L1564.23 1215.84 L1563.64 1215.84 L1563.06 1215.84 L1562.47 1215.84 L1561.88 1215.84 L1561.3 1215.84 L1560.71 1215.84 L1560.12 1215.84 L1559.54 1215.84 L1558.95 1215.84 L1558.36 1215.84 L1557.78 1215.84 L1557.19 1215.84 L1556.6 1215.84 L1556.02 1215.84 L1555.43 1215.84 L1554.85 1215.84 L1554.26 1215.84 L1553.67 1215.84 L1553.09 1215.84 L1552.5 1215.84 L1551.91 1215.84 L1551.33 1215.84 L1550.74 1215.84 L1550.15 1215.84 L1549.57 1215.84 L1548.98 1215.84 L1548.4 1215.84 L1547.81 1215.84 L1547.22 1215.84 L1546.64 1215.84 L1546.05 1215.84 L1545.46 1215.84 L1544.88 1215.84 L1544.29 1215.84 L1543.7 1215.84 L1543.12 1215.84 L1542.53 1215.84 L1541.94 1215.84 L1541.36 1215.84 L1540.77 1215.84 L1540.19 1215.84 L1539.6 1215.84 L1539.01 1215.84 L1538.43 1215.84 L1537.84 1215.84 L1537.25 1215.84 L1536.67 1215.84 L1536.08 1215.84 L1535.49 1215.84 L1534.91 1215.84 L1534.32 1215.84 L1533.73 1215.84 L1533.15 1215.84 L1532.56 1215.84 L1531.98 1215.84 L1531.39 1215.84 L1530.8 1215.84 L1530.22 1215.84 L1529.63 1215.84 L1529.04 1215.84 L1528.46 1215.84 L1527.87 1215.84 L1527.28 1215.84 L1526.7 1215.84 L1526.11 1215.84 L1525.52 1215.84 L1524.94 1215.84 L1524.35 1215.84 L1523.77 1215.84 L1523.18 1215.84 L1522.59 1215.84 L1522.01 1215.84 L1521.42 1215.84 L1520.83 1215.84 L1520.25 1215.84 L1519.66 1215.84 L1519.07 1215.84 L1518.49 1215.84 L1517.9 1215.84 L1517.32 1215.84 L1516.73 1215.84 L1516.14 1215.84 L1515.56 1215.84 L1514.97 1215.84 L1514.38 1215.84 L1513.8 1215.84 L1513.21 1215.84 L1512.62 1215.84 L1512.04 1215.84 L1511.45 1215.84 L1510.86 1215.84 L1510.28 1215.84 L1509.69 1215.84 L1509.11 1215.84 L1508.52 1215.84 L1507.93 1215.84 L1507.35 1215.84 L1506.76 1215.84 L1506.17 1215.84 L1505.59 1215.84 L1505 1215.84 L1504.41 1215.84 L1503.83 1215.84 L1503.24 1215.84 L1502.65 1215.84 L1502.07 1215.84 L1501.48 1215.84 L1500.9 1215.84 L1500.31 1215.84 L1499.72 1215.84 L1499.14 1215.84 L1498.55 1215.84 L1497.96 1215.84 L1497.38 1215.84 L1496.79 1215.84 L1496.2 1215.84 L1495.62 1215.84 L1495.03 1215.84 L1494.45 1215.84 L1493.86 1215.84 L1493.27 1215.84 L1492.69 1215.84 L1492.1 1215.84 L1491.51 1215.84 L1490.93 1215.84 L1490.34 1215.84 L1489.75 1215.84 L1489.17 1215.84 L1488.58 1215.84 L1487.99 1215.84 L1487.41 1215.84 L1486.82 1215.84 L1486.24 1215.84 L1485.65 1215.84 L1485.06 1215.84 L1484.48 1215.84 L1483.89 1215.84 L1483.3 1215.84 L1482.72 1215.84 L1482.13 1215.84 L1481.54 1215.84 L1480.96 1215.84 L1480.37 1215.84 L1479.78 1215.84 L1479.2 1215.84 L1478.61 1215.84 L1478.03 1215.84 L1477.44 1215.84 L1476.85 1215.84 L1476.27 1215.84 L1475.68 1215.84 L1475.09 1215.84 L1474.51 1215.84 L1473.92 1215.84 L1473.33 1215.84 L1472.75 1215.84 L1472.16 1215.84 L1471.57 1215.84 L1470.99 1215.84 L1470.4 1215.84 L1469.82 1215.84 L1469.23 1215.84 L1468.64 1215.84 L1468.06 1215.84 L1467.47 1215.84 L1466.88 1215.84 L1466.3 1215.84 L1465.71 1215.84 L1465.12 1215.84 L1464.54 1215.84 L1463.95 1215.84 L1463.37 1215.84 L1462.78 1215.84 L1462.19 1215.84 L1461.61 1215.84 L1461.02 1215.84 L1460.43 1215.84 L1459.85 1215.84 L1459.26 1215.84 L1458.67 1215.84 L1458.09 1215.84 L1457.5 1215.84 L1456.91 1215.84 L1456.33 1215.84 L1455.74 1215.84 L1455.16 1215.84 L1454.57 1215.84 L1453.98 1215.84 L1453.4 1215.84 L1452.81 1215.84 L1452.22 1215.84 L1451.64 1215.84 L1451.05 1215.84 L1450.46 1215.84 L1449.88 1215.84 L1449.29 1215.84 L1448.7 1215.84 L1448.12 1215.84 L1447.53 1215.84 L1446.95 1215.84 L1446.36 1215.84 L1445.77 1215.84 L1445.19 1215.84 L1444.6 1215.84 L1444.01 1215.84 L1443.43 1215.84 L1442.84 1215.84 L1442.25 1215.84 L1441.67 1215.84 L1441.08 1215.84 L1440.5 1215.84 L1439.91 1215.84 L1439.32 1215.84 L1438.74 1215.84 L1438.15 1215.84 L1437.56 1215.84 L1436.98 1215.84 L1436.39 1215.84 L1435.8 1215.84 L1435.22 1215.84 L1434.63 1215.84 L1434.04 1215.84 L1433.46 1215.84 L1432.87 1215.84 L1432.29 1215.84 L1431.7 1215.84 L1431.11 1215.84 L1430.53 1215.84 L1429.94 1215.84 L1429.35 1215.84 L1428.77 1215.84 L1428.18 1215.84 L1427.59 1215.84 L1427.01 1215.84 L1426.42 1215.84 L1425.83 1215.84 L1425.25 1215.84 L1424.66 1215.84 L1424.08 1215.84 L1423.49 1215.84 L1422.9 1215.84 L1422.32 1215.84 L1421.73 1215.84 L1421.14 1215.84 L1420.56 1215.84 L1419.97 1215.84 L1419.38 1215.84 L1418.8 1215.84 L1418.21 1215.84 L1417.63 1215.84 L1417.04 1215.84 L1416.45 1215.84 L1415.87 1215.84 L1415.28 1215.84 L1414.69 1215.84 L1414.11 1215.84 L1413.52 1215.84 L1412.93 1215.84 L1412.35 1215.84 L1411.76 1215.84 L1411.17 1215.84 L1410.59 1215.84 L1410 1215.84 L1409.42 1215.84 L1408.83 1215.84 L1408.24 1215.84 L1407.66 1215.84 L1407.07 1215.84 L1406.48 1215.84 L1405.9 1215.84 L1405.31 1215.84 L1404.72 1215.84 L1404.14 1215.84 L1403.55 1215.84 L1402.96 1215.84 L1402.38 1215.84 L1401.79 1215.84 L1401.21 1215.84 L1400.62 1215.84 L1400.03 1215.84 L1399.45 1215.84 L1398.86 1215.84 L1398.27 1215.84 L1397.69 1215.84 L1397.1 1215.84 L1396.51 1215.84 L1395.93 1215.84 L1395.34 1215.84 L1394.75 1215.84 L1394.17 1215.84 L1393.58 1215.84 L1393 1215.84 L1392.41 1215.84 L1391.82 1215.84 L1391.24 1215.84 L1390.65 1215.84 L1390.06 1215.84 L1389.48 1215.84 L1388.89 1215.84 L1388.3 1215.84 L1387.72 1215.84 L1387.13 1215.84 L1386.55 1215.84 L1385.96 1215.84 L1385.37 1215.84 L1384.79 1215.84 L1384.2 1215.84 L1383.61 1215.84 L1383.03 1215.84 L1382.44 1215.84 L1381.85 1215.84 L1381.27 1215.84 L1380.68 1215.84 L1380.09 1215.84 L1379.51 1215.84 L1378.92 1215.84 L1378.34 1215.84 L1377.75 1215.84 L1377.16 1215.84 L1376.58 1215.84 L1375.99 1215.84 L1375.4 1215.84 L1374.82 1215.84 L1374.23 1215.84 L1373.64 1215.84 L1373.06 1215.84 L1372.47 1215.84 L1371.88 1215.84 L1371.3 1215.84 L1370.71 1215.84 L1370.13 1215.84 L1369.54 1215.84 L1368.95 1215.84 L1368.37 1215.84 L1367.78 1215.84 L1367.19 1215.84 L1366.61 1215.84 L1366.02 1215.84 L1365.43 1215.84 L1364.85 1215.84 L1364.26 1215.84 L1363.68 1215.84 L1363.09 1215.84 L1362.5 1215.84 L1361.92 1215.84 L1361.33 1215.84 L1360.74 1215.84 L1360.16 1215.84 L1359.57 1215.84 L1358.98 1215.84 L1358.4 1215.84 L1357.81 1215.84 L1357.22 1215.84 L1356.64 1215.84 L1356.05 1215.84 L1355.47 1215.84 L1354.88 1215.84 L1354.29 1215.84 L1353.71 1215.84 L1353.12 1215.84 L1352.53 1215.84 L1351.95 1215.84 L1351.36 1215.84 L1350.77 1215.84 L1350.19 1215.84 L1349.6 1215.84 L1349.01 1215.84 L1348.43 1215.84 L1347.84 1215.84 L1347.26 1215.84 L1346.67 1215.84 L1346.08 1215.84 L1345.5 1215.84 L1344.91 1215.84 L1344.32 1215.84 L1343.74 1215.84 L1343.15 1215.84 L1342.56 1215.84 L1341.98 1215.84 L1341.39 1215.84 L1340.8 1215.84 L1340.22 1215.84 L1339.63 1215.84 L1339.05 1215.84 L1338.46 1215.84 L1337.87 1215.84 L1337.29 1215.84 L1336.7 1215.84 L1336.11 1215.84 L1335.53 1215.84 L1334.94 1215.84 L1334.35 1215.84 L1333.77 1215.84 L1333.18 1215.84 L1332.6 1215.84 L1332.01 1215.84 L1331.42 1215.84 L1330.84 1215.84 L1330.25 1215.84 L1329.66 1215.84 L1329.08 1215.84 L1328.49 1215.84 L1327.9 1215.84 L1327.32 1215.84 L1326.73 1215.84 L1326.14 1215.84 L1325.56 1215.84 L1324.97 1215.84 L1324.39 1215.84 L1323.8 1215.84 L1323.21 1215.84 L1322.63 1215.84 L1322.04 1215.84 L1321.45 1215.84 L1320.87 1215.84 L1320.28 1215.84 L1319.69 1215.84 L1319.11 1215.84 L1318.52 1215.84 L1317.93 1215.84 L1317.35 1215.84 L1316.76 1215.84 L1316.18 1215.84 L1315.59 1215.84 L1315 1215.84 L1314.42 1215.84 L1313.83 1215.84 L1313.24 1215.84 L1312.66 1215.84 L1312.07 1215.84 L1311.48 1215.84 L1310.9 1215.84 L1310.31 1215.84 L1309.73 1215.84 L1309.14 1215.84 L1308.55 1215.84 L1307.97 1215.84 L1307.38 1215.84 L1306.79 1215.84 L1306.21 1215.84 L1305.62 1215.84 L1305.03 1215.84 L1304.45 1215.84 L1303.86 1215.84 L1303.27 1215.84 L1302.69 1215.84 L1302.1 1215.84 L1301.52 1215.84 L1300.93 1215.84 L1300.34 1215.84 L1299.76 1215.84 L1299.17 1215.84 L1298.58 1215.84 L1298 1215.84 L1297.41 1215.84 L1296.82 1215.84 L1296.24 1215.84 L1295.65 1215.84 L1295.06 1215.84 L1294.48 1215.84 L1293.89 1215.84 L1293.31 1215.84 L1292.72 1215.84 L1292.13 1215.84 L1291.55 1215.84 L1290.96 1215.84 L1290.37 1215.84 L1289.79 1215.84 L1289.2 1215.84 L1288.61 1215.84 L1288.03 1215.84 L1287.44 1215.84 L1286.86 1215.84 L1286.27 1215.84 L1285.68 1215.84 L1285.1 1215.84 L1284.51 1215.84 L1283.92 1215.84 L1283.34 1215.84 L1282.75 1215.84 L1282.16 1215.84 L1281.58 1215.84 L1280.99 1215.84 L1280.4 1215.84 L1279.82 1215.84 L1279.23 1215.84 L1278.65 1215.84 L1278.06 1215.84 L1277.47 1215.84 L1276.89 1215.84 L1276.3 1215.84 L1275.71 1215.84 L1275.13 1215.84 L1274.54 1215.84 L1273.95 1215.84 L1273.37 1215.84 L1272.78 1215.84 L1272.19 1215.84 L1271.61 1215.84 L1271.02 1215.84 L1270.44 1215.84 L1269.85 1215.84 L1269.26 1215.84 L1268.68 1215.84 L1268.09 1215.84 L1267.5 1215.84 L1266.92 1215.84 L1266.33 1215.84 L1265.74 1215.84 L1265.16 1215.84 L1264.57 1215.84 L1263.98 1215.84 L1263.4 1215.84 L1262.81 1215.84 L1262.23 1215.84 L1261.64 1215.84 L1261.05 1215.84 L1260.47 1215.84 L1259.88 1215.84 L1259.29 1215.84 L1258.71 1215.84 L1258.12 1215.84 L1257.53 1215.84 L1256.95 1215.84 L1256.36 1215.84 L1255.78 1215.84 L1255.19 1215.84 L1254.6 1215.84 L1254.02 1215.84 L1253.43 1215.84 L1252.84 1215.84 L1252.26 1215.84 L1251.67 1215.84 L1251.08 1215.84 L1250.5 1215.84 L1249.91 1215.84 L1249.32 1215.84 L1248.74 1215.84 L1248.15 1215.84 L1247.57 1215.84 L1246.98 1215.84 L1246.39 1215.84 L1245.81 1215.84 L1245.22 1215.84 L1244.63 1215.84 L1244.05 1215.84 L1243.46 1215.84 L1242.87 1215.84 L1242.29 1215.84 L1241.7 1215.84 L1241.11 1215.84 L1240.53 1215.84 L1239.94 1215.84 L1239.36 1215.84 L1238.77 1215.84 L1238.18 1215.84 L1237.6 1215.84 L1237.01 1215.84 L1236.42 1215.84 L1235.84 1215.84 L1235.25 1215.84 L1234.66 1215.84 L1234.08 1215.84 L1233.49 1215.84 L1232.91 1215.84 L1232.32 1215.84 L1231.73 1215.84 L1231.15 1215.84 L1230.56 1215.84 L1229.97 1215.84 L1229.39 1215.84 L1228.8 1215.84 L1228.21 1215.84 L1227.63 1215.84 L1227.04 1215.84 L1226.45 1215.84 L1225.87 1215.84 L1225.28 1215.84 L1224.7 1215.84 L1224.11 1215.84 L1223.52 1215.84 L1222.94 1215.84 L1222.35 1215.84 L1221.76 1215.84 L1221.18 1215.84 L1220.59 1215.84 L1220 1215.84 L1219.42 1215.84 L1218.83 1215.84 L1218.24 1215.84 L1217.66 1215.84 L1217.07 1215.84 L1216.49 1215.84 L1215.9 1215.84 L1215.31 1215.84 L1214.73 1215.84 L1214.14 1215.84 L1213.55 1215.84 L1212.97 1215.84 L1212.38 1215.84 L1211.79 1215.84 L1211.21 1215.84 L1210.62 1215.84 L1210.03 1215.84 L1209.45 1215.84 L1208.86 1215.84 L1208.28 1215.84 L1207.69 1215.84 L1207.1 1215.84 L1206.52 1215.84 L1205.93 1215.84 L1205.34 1215.84 L1204.76 1215.84 L1204.17 1215.84 L1203.58 1215.84 L1203 1215.84 L1202.41 1215.84 L1201.83 1215.84 L1201.24 1215.84 L1200.65 1215.84 L1200.07 1215.84 L1199.48 1215.84 L1198.89 1215.84 L1198.31 1215.84 L1197.72 1215.84 L1197.13 1215.84 L1196.55 1215.84 L1195.96 1215.84 L1195.37 1215.84 L1194.79 1215.84 L1194.2 1215.84 L1193.62 1215.84 L1193.03 1215.84 L1192.44 1215.84 L1191.86 1215.84 L1191.27 1215.84 L1190.68 1215.84 L1190.1 1215.84 L1189.51 1215.84 L1188.92 1215.84 L1188.34 1215.84 L1187.75 1215.84 L1187.16 1215.84 L1186.58 1215.84 L1185.99 1215.84 L1185.41 1215.84 L1184.82 1215.84 L1184.23 1215.84 L1183.65 1215.84 L1183.06 1215.84 L1182.47 1215.84 L1181.89 1215.84 L1181.3 1215.84 L1180.71 1215.84 L1180.13 1215.84 L1179.54 1215.84 L1178.96 1215.84 L1178.37 1215.84 L1177.78 1215.84 L1177.2 1215.84 L1176.61 1215.84 L1176.02 1215.84 L1175.44 1215.84 L1174.85 1215.84 L1174.26 1215.84 L1173.68 1215.84 L1173.09 1215.84 L1172.5 1215.84 L1171.92 1215.84 L1171.33 1215.84 L1170.75 1215.84 L1170.16 1215.84 L1169.57 1215.84 L1168.99 1215.84 L1168.4 1215.84 L1167.81 1215.84 L1167.23 1215.84 L1166.64 1215.84 L1166.05 1215.84 L1165.47 1215.84 L1164.88 1215.84 L1164.29 1215.84 L1163.71 1215.84 L1163.12 1215.84 L1162.54 1215.84 L1161.95 1215.84 L1161.36 1215.84 L1160.78 1215.84 L1160.19 1215.84 L1159.6 1215.84 L1159.02 1215.84 L1158.43 1215.84 L1157.84 1215.84 L1157.26 1215.84 L1156.67 1215.84 L1156.09 1215.84 L1155.5 1215.84 L1154.91 1215.84 L1154.33 1215.84 L1153.74 1215.84 L1153.15 1215.84 L1152.57 1215.84 L1151.98 1215.84 L1151.39 1215.84 L1150.81 1215.84 L1150.22 1215.84 L1149.63 1215.84 L1149.05 1215.84 L1148.46 1215.84 L1147.88 1215.84 L1147.29 1215.84 L1146.7 1215.84 L1146.12 1215.84 L1145.53 1215.84 L1144.94 1215.84 L1144.36 1215.84 L1143.77 1215.84 L1143.18 1215.84 L1142.6 1215.84 L1142.01 1215.84 L1141.42 1215.84 L1140.84 1215.84 L1140.25 1215.84 L1139.67 1215.84 L1139.08 1215.84 L1138.49 1215.84 L1137.91 1215.84 L1137.32 1215.84 L1136.73 1215.84 L1136.15 1215.84 L1135.56 1215.84 L1134.97 1215.84 L1134.39 1215.84 L1133.8 1215.84 L1133.21 1215.84 L1132.63 1215.84 L1132.04 1215.84 L1131.46 1215.84 L1130.87 1215.84 L1130.28 1215.84 L1129.7 1215.84 L1129.11 1215.84 L1128.52 1215.84 L1127.94 1215.84 L1127.35 1215.84 L1126.76 1215.84 L1126.18 1215.84 L1125.59 1215.84 L1125.01 1215.84 L1124.42 1215.84 L1123.83 1215.84 L1123.25 1215.84 L1122.66 1215.84 L1122.07 1215.84 L1121.49 1215.84 L1120.9 1215.84 L1120.31 1215.84 L1119.73 1215.84 L1119.14 1215.84 L1118.55 1215.84 L1117.97 1215.84 L1117.38 1215.84 L1116.8 1215.84 L1116.21 1215.84 L1115.62 1215.84 L1115.04 1215.84 L1114.45 1215.84 L1113.86 1215.84 L1113.28 1215.84 L1112.69 1215.84 L1112.1 1215.84 L1111.52 1215.84 L1110.93 1215.84 L1110.34 1215.84 L1109.76 1215.84 L1109.17 1215.84 L1108.59 1215.84 L1108 1215.84 L1107.41 1215.84 L1106.83 1215.84 L1106.24 1215.84 L1105.65 1215.84 L1105.07 1215.84 L1104.48 1215.84 L1103.89 1215.84 L1103.31 1215.84 L1102.72 1215.84 L1102.14 1215.84 L1101.55 1215.84 L1100.96 1215.84 L1100.38 1215.84 L1099.79 1215.84 L1099.2 1215.84 L1098.62 1215.84 L1098.03 1215.84 L1097.44 1215.84 L1096.86 1215.84 L1096.27 1215.84 L1095.68 1215.84 L1095.1 1215.84 L1094.51 1215.84 L1093.93 1215.84 L1093.34 1215.84 L1092.75 1215.84 L1092.17 1215.84 L1091.58 1215.84 L1090.99 1215.84 L1090.41 1215.84 L1089.82 1215.84 L1089.23 1215.84 L1088.65 1215.84 L1088.06 1215.84 L1087.47 1215.84 L1086.89 1215.84 L1086.3 1215.84 L1085.72 1215.84 L1085.13 1215.84 L1084.54 1215.84 L1083.96 1215.84 L1083.37 1215.84 L1082.78 1215.84 L1082.2 1215.84 L1081.61 1215.84 L1081.02 1215.84 L1080.44 1215.84 L1079.85 1215.84 L1079.26 1215.84 L1078.68 1215.84 L1078.09 1215.84 L1077.51 1215.84 L1076.92 1215.84 L1076.33 1215.84 L1075.75 1215.84 L1075.16 1215.84 L1074.57 1215.84 L1073.99 1215.84 L1073.4 1215.84 L1072.81 1215.84 L1072.23 1215.84 L1071.64 1215.84 L1071.06 1215.84 L1070.47 1215.84 L1069.88 1215.84 L1069.3 1215.84 L1068.71 1215.84 L1068.12 1215.84 L1067.54 1215.84 L1066.95 1215.84 L1066.36 1215.84 L1065.78 1215.84 L1065.19 1215.84 L1064.6 1215.84 L1064.02 1215.84 L1063.43 1215.84 L1062.85 1215.84 L1062.26 1215.84 L1061.67 1215.84 L1061.09 1215.84 L1060.5 1215.84 L1059.91 1215.84 L1059.33 1215.84 L1058.74 1215.84 L1058.15 1215.84 L1057.57 1215.84 L1056.98 1215.84 L1056.39 1215.84 L1055.81 1215.84 L1055.22 1215.84 L1054.64 1215.84 L1054.05 1215.84 L1053.46 1215.84 L1052.88 1215.84 L1052.29 1215.84 L1051.7 1215.84 L1051.12 1215.84 L1050.53 1215.84 L1049.94 1215.84 L1049.36 1215.84 L1048.77 1215.84 L1048.19 1215.84 L1047.6 1215.84 L1047.01 1215.84 L1046.43 1215.84 L1045.84 1215.84 L1045.25 1215.84 L1044.67 1215.84 L1044.08 1215.84 L1043.49 1215.84 L1042.91 1215.84 L1042.32 1215.84 L1041.73 1215.84 L1041.15 1215.84 L1040.56 1215.84 L1039.98 1215.84 L1039.39 1215.84 L1038.8 1215.84 L1038.22 1215.84 L1037.63 1215.84 L1037.04 1215.84 L1036.46 1215.84 L1035.87 1215.84 L1035.28 1215.84 L1034.7 1215.84 L1034.11 1215.84 L1033.52 1215.84 L1032.94 1215.84 L1032.35 1215.84 L1031.77 1215.84 L1031.18 1215.84 L1030.59 1215.84 L1030.01 1215.84 L1029.42 1215.84 L1028.83 1215.84 L1028.25 1215.84 L1027.66 1215.84 L1027.07 1215.84 L1026.49 1215.84 L1025.9 1215.84 L1025.32 1215.84 L1024.73 1215.84 L1024.14 1215.84 L1023.56 1215.84 L1022.97 1215.84 L1022.38 1215.84 L1021.8 1215.84 L1021.21 1215.84 L1020.62 1215.84 L1020.04 1215.84 L1019.45 1215.84 L1018.86 1215.84 L1018.28 1215.84 L1017.69 1215.84 L1017.11 1215.84 L1016.52 1215.84 L1015.93 1215.84 L1015.35 1215.84 L1014.76 1215.84 L1014.17 1215.84 L1013.59 1215.84 L1013 1215.84 L1012.41 1215.84 L1011.83 1215.84 L1011.24 1215.84 L1010.65 1215.84 L1010.07 1215.84 L1009.48 1215.84 L1008.9 1215.84 L1008.31 1215.84 L1007.72 1215.84 L1007.14 1215.84 L1006.55 1215.84 L1005.96 1215.84 L1005.38 1215.84 L1004.79 1215.84 L1004.2 1215.84 L1003.62 1215.84 L1003.03 1215.84 L1002.44 1215.84 L1001.86 1215.84 L1001.27 1215.84 L1000.69 1215.84 L1000.1 1215.84 L999.513 1215.84 L998.926 1215.84 L998.34 1215.84 L997.754 1215.84 L997.167 1215.84 L996.581 1215.84 L995.994 1215.84 L995.408 1215.84 L994.822 1215.84 L994.235 1215.84 L993.649 1215.84 L993.062 1215.84 L992.476 1215.84 L991.889 1215.84 L991.303 1215.84 L990.717 1215.84 L990.13 1215.84 L989.544 1215.84 L988.957 1215.84 L988.371 1215.84 L987.785 1215.84 L987.198 1215.84 L986.612 1215.84 L986.025 1215.84  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1215.94 986.612,1215.94 987.198,1215.94 987.785,1215.94 988.371,1215.94 988.957,1215.94 989.544,1215.94 990.13,1215.94 990.717,1215.94 991.303,1215.94 991.889,1215.94 992.476,1215.94 993.062,1215.94 993.649,1215.94 994.235,1215.94 994.822,1215.94 995.408,1215.94 995.994,1215.94 996.581,1215.94 997.167,1215.94 997.754,1215.94 998.34,1215.94 998.926,1215.94 999.513,1215.94 1000.1,1215.94 1000.69,1215.94 1001.27,1215.94 1001.86,1215.94 1002.44,1215.94 1003.03,1215.94 1003.62,1215.94 1004.2,1215.94 1004.79,1215.94 1005.38,1215.94 1005.96,1215.94 1006.55,1215.94 1007.14,1215.94 1007.72,1215.94 1008.31,1215.94 1008.9,1215.94 1009.48,1215.94 1010.07,1215.94 1010.65,1215.94 1011.24,1215.94 1011.83,1215.94 1012.41,1215.94 1013,1215.94 1013.59,1215.94 1014.17,1215.94 1014.76,1215.94 1015.35,1215.94 1015.93,1215.94 1016.52,1215.94 1017.11,1215.94 1017.69,1215.94 1018.28,1215.94 1018.86,1215.94 1019.45,1215.94 1020.04,1215.94 1020.62,1215.94 1021.21,1215.94 1021.8,1215.94 1022.38,1215.94 1022.97,1215.94 1023.56,1215.94 1024.14,1215.94 1024.73,1215.94 1025.32,1215.94 1025.9,1215.94 1026.49,1215.94 1027.07,1215.94 1027.66,1215.94 1028.25,1215.94 1028.83,1215.94 1029.42,1215.94 1030.01,1215.94 1030.59,1215.94 1031.18,1215.94 1031.77,1215.94 1032.35,1215.94 1032.94,1215.94 1033.52,1215.94 1034.11,1215.94 1034.7,1215.94 1035.28,1215.94 1035.87,1215.94 1036.46,1215.94 1037.04,1215.94 1037.63,1215.94 1038.22,1215.94 1038.8,1215.94 1039.39,1215.94 1039.98,1215.94 1040.56,1215.94 1041.15,1215.94 1041.73,1215.94 1042.32,1215.94 1042.91,1215.94 1043.49,1215.94 1044.08,1215.94 1044.67,1215.94 1045.25,1215.94 1045.84,1215.94 1046.43,1215.94 1047.01,1215.94 1047.6,1215.94 1048.19,1215.94 1048.77,1215.94 1049.36,1215.94 1049.94,1215.94 1050.53,1215.94 1051.12,1215.94 1051.7,1215.94 1052.29,1215.94 1052.88,1215.94 1053.46,1215.94 1054.05,1215.94 1054.64,1215.94 1055.22,1215.94 1055.81,1215.94 1056.39,1215.94 1056.98,1215.94 1057.57,1215.94 1058.15,1215.94 1058.74,1215.94 1059.33,1215.94 1059.91,1215.94 1060.5,1215.94 1061.09,1215.94 1061.67,1215.94 1062.26,1215.94 1062.85,1215.94 1063.43,1215.94 1064.02,1215.94 1064.6,1215.94 1065.19,1215.94 1065.78,1215.94 1066.36,1215.94 1066.95,1215.94 1067.54,1215.94 1068.12,1215.94 1068.71,1215.94 1069.3,1215.94 1069.88,1215.94 1070.47,1215.94 1071.06,1215.94 1071.64,1215.94 1072.23,1215.94 1072.81,1215.94 1073.4,1215.94 1073.99,1215.94 1074.57,1215.94 1075.16,1215.94 1075.75,1215.94 1076.33,1215.94 1076.92,1215.94 1077.51,1215.94 1078.09,1215.94 1078.68,1215.94 1079.26,1215.94 1079.85,1215.94 1080.44,1215.94 1081.02,1215.94 1081.61,1215.94 1082.2,1215.94 1082.78,1215.94 1083.37,1215.94 1083.96,1215.94 1084.54,1215.94 1085.13,1215.94 1085.72,1215.94 1086.3,1215.94 1086.89,1215.94 1087.47,1215.94 1088.06,1215.94 1088.65,1215.94 1089.23,1215.94 1089.82,1215.94 1090.41,1215.94 1090.99,1215.94 1091.58,1215.94 1092.17,1215.94 1092.75,1215.94 1093.34,1215.94 1093.93,1215.94 1094.51,1215.94 1095.1,1215.94 1095.68,1215.94 1096.27,1215.94 1096.86,1215.94 1097.44,1215.94 1098.03,1215.94 1098.62,1215.94 1099.2,1215.94 1099.79,1215.94 1100.38,1215.94 1100.96,1215.94 1101.55,1215.94 1102.14,1215.94 1102.72,1215.94 1103.31,1215.94 1103.89,1215.94 1104.48,1215.94 1105.07,1215.94 1105.65,1215.94 1106.24,1215.94 1106.83,1215.94 1107.41,1215.94 1108,1215.94 1108.59,1215.94 1109.17,1215.94 1109.76,1215.94 1110.34,1215.94 1110.93,1215.94 1111.52,1215.94 1112.1,1215.94 1112.69,1215.94 1113.28,1215.94 1113.86,1215.94 1114.45,1215.94 1115.04,1215.94 1115.62,1215.94 1116.21,1215.94 1116.8,1215.94 1117.38,1215.94 1117.97,1215.94 1118.55,1215.94 1119.14,1215.94 1119.73,1215.94 1120.31,1215.94 1120.9,1215.94 1121.49,1215.94 1122.07,1215.94 1122.66,1215.94 1123.25,1215.94 1123.83,1215.94 1124.42,1215.94 1125.01,1215.94 1125.59,1215.94 1126.18,1215.94 1126.76,1215.94 1127.35,1215.94 1127.94,1215.94 1128.52,1215.94 1129.11,1215.94 1129.7,1215.94 1130.28,1215.94 1130.87,1215.94 1131.46,1215.94 1132.04,1215.94 1132.63,1215.94 1133.21,1215.94 1133.8,1215.94 1134.39,1215.94 1134.97,1215.94 1135.56,1215.94 1136.15,1215.94 1136.73,1215.94 1137.32,1215.94 1137.91,1215.94 1138.49,1215.94 1139.08,1215.94 1139.67,1215.94 1140.25,1215.94 1140.84,1215.94 1141.42,1215.94 1142.01,1215.94 1142.6,1215.94 1143.18,1215.94 1143.77,1215.94 1144.36,1215.94 1144.94,1215.94 1145.53,1215.94 1146.12,1215.94 1146.7,1215.94 1147.29,1215.94 1147.88,1215.94 1148.46,1215.94 1149.05,1215.94 1149.63,1215.94 1150.22,1215.94 1150.81,1215.94 1151.39,1215.94 1151.98,1215.94 1152.57,1215.94 1153.15,1215.94 1153.74,1215.94 1154.33,1215.94 1154.91,1215.94 1155.5,1215.94 1156.09,1215.94 1156.67,1215.94 1157.26,1215.94 1157.84,1215.94 1158.43,1215.94 1159.02,1215.94 1159.6,1215.94 1160.19,1215.94 1160.78,1215.94 1161.36,1215.94 1161.95,1215.94 1162.54,1215.94 1163.12,1215.94 1163.71,1215.94 1164.29,1215.94 1164.88,1215.94 1165.47,1215.94 1166.05,1215.94 1166.64,1215.94 1167.23,1215.94 1167.81,1215.94 1168.4,1215.94 1168.99,1215.94 1169.57,1215.94 1170.16,1215.94 1170.75,1215.94 1171.33,1215.94 1171.92,1215.94 1172.5,1215.94 1173.09,1215.94 1173.68,1215.94 1174.26,1215.94 1174.85,1215.94 1175.44,1215.94 1176.02,1215.94 1176.61,1215.94 1177.2,1215.94 1177.78,1215.94 1178.37,1215.94 1178.96,1215.94 1179.54,1215.94 1180.13,1215.94 1180.71,1215.94 1181.3,1215.94 1181.89,1215.94 1182.47,1215.94 1183.06,1215.94 1183.65,1215.94 1184.23,1215.94 1184.82,1215.94 1185.41,1215.94 1185.99,1215.94 1186.58,1215.94 1187.16,1215.94 1187.75,1215.94 1188.34,1215.94 1188.92,1215.94 1189.51,1215.94 1190.1,1215.94 1190.68,1215.94 1191.27,1215.94 1191.86,1215.94 1192.44,1215.94 1193.03,1215.94 1193.62,1215.94 1194.2,1215.94 1194.79,1215.94 1195.37,1215.94 1195.96,1215.94 1196.55,1215.94 1197.13,1215.94 1197.72,1215.94 1198.31,1215.94 1198.89,1215.94 1199.48,1215.94 1200.07,1215.94 1200.65,1215.94 1201.24,1215.94 1201.83,1215.94 1202.41,1215.94 1203,1215.94 1203.58,1215.94 1204.17,1215.94 1204.76,1215.94 1205.34,1215.94 1205.93,1215.94 1206.52,1215.94 1207.1,1215.94 1207.69,1215.94 1208.28,1215.94 1208.86,1215.94 1209.45,1215.94 1210.03,1215.94 1210.62,1215.94 1211.21,1215.94 1211.79,1215.94 1212.38,1215.94 1212.97,1215.94 1213.55,1215.94 1214.14,1215.94 1214.73,1215.94 1215.31,1215.94 1215.9,1215.94 1216.49,1215.94 1217.07,1215.94 1217.66,1215.94 1218.24,1215.94 1218.83,1215.94 1219.42,1215.94 1220,1215.94 1220.59,1215.94 1221.18,1215.94 1221.76,1215.94 1222.35,1215.94 1222.94,1215.94 1223.52,1215.94 1224.11,1215.94 1224.7,1215.94 1225.28,1215.94 1225.87,1215.94 1226.45,1215.94 1227.04,1215.94 1227.63,1215.94 1228.21,1215.94 1228.8,1215.94 1229.39,1215.94 1229.97,1215.94 1230.56,1215.94 1231.15,1215.94 1231.73,1215.94 1232.32,1215.94 1232.91,1215.94 1233.49,1215.94 1234.08,1215.94 1234.66,1215.94 1235.25,1215.94 1235.84,1215.94 1236.42,1215.94 1237.01,1215.94 1237.6,1215.94 1238.18,1215.94 1238.77,1215.94 1239.36,1215.94 1239.94,1215.94 1240.53,1215.94 1241.11,1215.94 1241.7,1215.94 1242.29,1215.94 1242.87,1215.94 1243.46,1215.94 1244.05,1215.94 1244.63,1215.94 1245.22,1215.94 1245.81,1215.94 1246.39,1215.94 1246.98,1215.94 1247.57,1215.94 1248.15,1215.94 1248.74,1215.94 1249.32,1215.94 1249.91,1215.94 1250.5,1215.94 1251.08,1215.94 1251.67,1215.94 1252.26,1215.94 1252.84,1215.94 1253.43,1215.94 1254.02,1215.94 1254.6,1215.94 1255.19,1215.94 1255.78,1215.94 1256.36,1215.94 1256.95,1215.94 1257.53,1215.94 1258.12,1215.94 1258.71,1215.94 1259.29,1215.94 1259.88,1215.94 1260.47,1215.94 1261.05,1215.94 1261.64,1215.94 1262.23,1215.94 1262.81,1215.94 1263.4,1215.94 1263.98,1215.94 1264.57,1215.94 1265.16,1215.94 1265.74,1215.94 1266.33,1215.94 1266.92,1215.94 1267.5,1215.94 1268.09,1215.94 1268.68,1215.94 1269.26,1215.94 1269.85,1215.94 1270.44,1215.94 1271.02,1215.94 1271.61,1215.94 1272.19,1215.94 1272.78,1215.94 1273.37,1215.94 1273.95,1215.94 1274.54,1215.94 1275.13,1215.94 1275.71,1215.94 1276.3,1215.94 1276.89,1215.94 1277.47,1215.94 1278.06,1215.94 1278.65,1215.94 1279.23,1215.94 1279.82,1215.94 1280.4,1215.94 1280.99,1215.94 1281.58,1215.94 1282.16,1215.94 1282.75,1215.94 1283.34,1215.94 1283.92,1215.94 1284.51,1215.94 1285.1,1215.94 1285.68,1215.94 1286.27,1215.94 1286.86,1215.94 1287.44,1215.94 1288.03,1215.94 1288.61,1215.94 1289.2,1215.94 1289.79,1215.94 1290.37,1215.94 1290.96,1215.94 1291.55,1215.94 1292.13,1215.94 1292.72,1215.94 1293.31,1215.94 1293.89,1215.94 1294.48,1215.94 1295.06,1215.94 1295.65,1215.94 1296.24,1215.94 1296.82,1215.94 1297.41,1215.94 1298,1215.94 1298.58,1215.94 1299.17,1215.94 1299.76,1215.94 1300.34,1215.94 1300.93,1215.94 1301.52,1215.94 1302.1,1215.94 1302.69,1215.94 1303.27,1215.94 1303.86,1215.94 1304.45,1215.94 1305.03,1215.94 1305.62,1215.94 1306.21,1215.94 1306.79,1215.94 1307.38,1215.94 1307.97,1215.94 1308.55,1215.94 1309.14,1215.94 1309.73,1215.94 1310.31,1215.94 1310.9,1215.94 1311.48,1215.94 1312.07,1215.94 1312.66,1215.94 1313.24,1215.94 1313.83,1215.94 1314.42,1215.94 1315,1215.94 1315.59,1215.94 1316.18,1215.94 1316.76,1215.94 1317.35,1215.94 1317.93,1215.94 1318.52,1215.94 1319.11,1215.94 1319.69,1215.94 1320.28,1215.94 1320.87,1215.94 1321.45,1215.94 1322.04,1215.94 1322.63,1215.94 1323.21,1215.94 1323.8,1215.94 1324.39,1215.94 1324.97,1215.94 1325.56,1215.94 1326.14,1215.94 1326.73,1215.94 1327.32,1215.94 1327.9,1215.94 1328.49,1215.94 1329.08,1215.94 1329.66,1215.94 1330.25,1215.94 1330.84,1215.94 1331.42,1215.94 1332.01,1215.94 1332.6,1215.94 1333.18,1215.94 1333.77,1215.94 1334.35,1215.94 1334.94,1215.94 1335.53,1215.94 1336.11,1215.94 1336.7,1215.94 1337.29,1215.94 1337.87,1215.94 1338.46,1215.94 1339.05,1215.94 1339.63,1215.94 1340.22,1215.94 1340.8,1215.94 1341.39,1215.94 1341.98,1215.94 1342.56,1215.94 1343.15,1215.94 1343.74,1215.94 1344.32,1215.94 1344.91,1215.94 1345.5,1215.94 1346.08,1215.94 1346.67,1215.94 1347.26,1215.94 1347.84,1215.94 1348.43,1215.94 1349.01,1215.94 1349.6,1215.94 1350.19,1215.94 1350.77,1215.94 1351.36,1215.94 1351.95,1215.94 1352.53,1215.94 1353.12,1215.94 1353.71,1215.94 1354.29,1215.94 1354.88,1215.94 1355.47,1215.94 1356.05,1215.94 1356.64,1215.94 1357.22,1215.94 1357.81,1215.94 1358.4,1215.94 1358.98,1215.94 1359.57,1215.94 1360.16,1215.94 1360.74,1215.94 1361.33,1215.94 1361.92,1215.94 1362.5,1215.94 1363.09,1215.94 1363.68,1215.94 1364.26,1215.94 1364.85,1215.94 1365.43,1215.94 1366.02,1215.94 1366.61,1215.94 1367.19,1215.94 1367.78,1215.94 1368.37,1215.94 1368.95,1215.94 1369.54,1215.94 1370.13,1215.94 1370.71,1215.94 1371.3,1215.94 1371.88,1215.94 1372.47,1215.94 1373.06,1215.94 1373.64,1215.94 1374.23,1215.94 1374.82,1215.94 1375.4,1215.94 1375.99,1215.94 1376.58,1215.94 1377.16,1215.94 1377.75,1215.94 1378.34,1215.94 1378.92,1215.94 1379.51,1215.94 1380.09,1215.94 1380.68,1215.94 1381.27,1215.94 1381.85,1215.94 1382.44,1215.94 1383.03,1215.94 1383.61,1215.94 1384.2,1215.94 1384.79,1215.94 1385.37,1215.94 1385.96,1215.94 1386.55,1215.94 1387.13,1215.94 1387.72,1215.94 1388.3,1215.94 1388.89,1215.94 1389.48,1215.94 1390.06,1215.94 1390.65,1215.94 1391.24,1215.94 1391.82,1215.94 1392.41,1215.94 1393,1215.94 1393.58,1215.94 1394.17,1215.94 1394.75,1215.94 1395.34,1215.94 1395.93,1215.94 1396.51,1215.94 1397.1,1215.94 1397.69,1215.94 1398.27,1215.94 1398.86,1215.94 1399.45,1215.94 1400.03,1215.94 1400.62,1215.94 1401.21,1215.94 1401.79,1215.94 1402.38,1215.94 1402.96,1215.94 1403.55,1215.94 1404.14,1215.94 1404.72,1215.94 1405.31,1215.94 1405.9,1215.94 1406.48,1215.94 1407.07,1215.94 1407.66,1215.94 1408.24,1215.94 1408.83,1215.94 1409.42,1215.94 1410,1215.94 1410.59,1215.94 1411.17,1215.94 1411.76,1215.94 1412.35,1215.94 1412.93,1215.94 1413.52,1215.94 1414.11,1215.94 1414.69,1215.94 1415.28,1215.94 1415.87,1215.94 1416.45,1215.94 1417.04,1215.94 1417.63,1215.94 1418.21,1215.94 1418.8,1215.94 1419.38,1215.94 1419.97,1215.94 1420.56,1215.94 1421.14,1215.94 1421.73,1215.94 1422.32,1215.94 1422.9,1215.94 1423.49,1215.94 1424.08,1215.94 1424.66,1215.94 1425.25,1215.94 1425.83,1215.94 1426.42,1215.94 1427.01,1215.94 1427.59,1215.94 1428.18,1215.94 1428.77,1215.94 1429.35,1215.94 1429.94,1215.94 1430.53,1215.94 1431.11,1215.94 1431.7,1215.94 1432.29,1215.94 1432.87,1215.94 1433.46,1215.94 1434.04,1215.94 1434.63,1215.94 1435.22,1215.94 1435.8,1215.94 1436.39,1215.94 1436.98,1215.94 1437.56,1215.94 1438.15,1215.94 1438.74,1215.94 1439.32,1215.94 1439.91,1215.94 1440.5,1215.94 1441.08,1215.94 1441.67,1215.94 1442.25,1215.94 1442.84,1215.94 1443.43,1215.94 1444.01,1215.94 1444.6,1215.94 1445.19,1215.94 1445.77,1215.94 1446.36,1215.94 1446.95,1215.94 1447.53,1215.94 1448.12,1215.94 1448.7,1215.94 1449.29,1215.94 1449.88,1215.94 1450.46,1215.94 1451.05,1215.94 1451.64,1215.94 1452.22,1215.94 1452.81,1215.94 1453.4,1215.94 1453.98,1215.94 1454.57,1215.94 1455.16,1215.94 1455.74,1215.94 1456.33,1215.94 1456.91,1215.94 1457.5,1215.94 1458.09,1215.94 1458.67,1215.94 1459.26,1215.94 1459.85,1215.94 1460.43,1215.94 1461.02,1215.94 1461.61,1215.94 1462.19,1215.94 1462.78,1215.94 1463.37,1215.94 1463.95,1215.94 1464.54,1215.94 1465.12,1215.94 1465.71,1215.94 1466.3,1215.94 1466.88,1215.94 1467.47,1215.94 1468.06,1215.94 1468.64,1215.94 1469.23,1215.94 1469.82,1215.94 1470.4,1215.94 1470.99,1215.94 1471.57,1215.94 1472.16,1215.94 1472.75,1215.94 1473.33,1215.94 1473.92,1215.94 1474.51,1215.94 1475.09,1215.94 1475.68,1215.94 1476.27,1215.94 1476.85,1215.94 1477.44,1215.94 1478.03,1215.94 1478.61,1215.94 1479.2,1215.94 1479.78,1215.94 1480.37,1215.94 1480.96,1215.94 1481.54,1215.94 1482.13,1215.94 1482.72,1215.94 1483.3,1215.94 1483.89,1215.94 1484.48,1215.94 1485.06,1215.94 1485.65,1215.94 1486.24,1215.94 1486.82,1215.94 1487.41,1215.94 1487.99,1215.94 1488.58,1215.94 1489.17,1215.94 1489.75,1215.94 1490.34,1215.94 1490.93,1215.94 1491.51,1215.94 1492.1,1215.94 1492.69,1215.94 1493.27,1215.94 1493.86,1215.94 1494.45,1215.94 1495.03,1215.94 1495.62,1215.94 1496.2,1215.94 1496.79,1215.94 1497.38,1215.94 1497.96,1215.94 1498.55,1215.94 1499.14,1215.94 1499.72,1215.94 1500.31,1215.94 1500.9,1215.94 1501.48,1215.94 1502.07,1215.94 1502.65,1215.94 1503.24,1215.94 1503.83,1215.94 1504.41,1215.94 1505,1215.94 1505.59,1215.94 1506.17,1215.94 1506.76,1215.94 1507.35,1215.94 1507.93,1215.94 1508.52,1215.94 1509.11,1215.94 1509.69,1215.94 1510.28,1215.94 1510.86,1215.94 1511.45,1215.94 1512.04,1215.94 1512.62,1215.94 1513.21,1215.94 1513.8,1215.94 1514.38,1215.94 1514.97,1215.94 1515.56,1215.94 1516.14,1215.94 1516.73,1215.94 1517.32,1215.94 1517.9,1215.94 1518.49,1215.94 1519.07,1215.94 1519.66,1215.94 1520.25,1215.94 1520.83,1215.94 1521.42,1215.94 1522.01,1215.94 1522.59,1215.94 1523.18,1215.94 1523.77,1215.94 1524.35,1215.94 1524.94,1215.94 1525.52,1215.94 1526.11,1215.94 1526.7,1215.94 1527.28,1215.94 1527.87,1215.94 1528.46,1215.94 1529.04,1215.94 1529.63,1215.94 1530.22,1215.94 1530.8,1215.94 1531.39,1215.94 1531.98,1215.94 1532.56,1215.94 1533.15,1215.94 1533.73,1215.94 1534.32,1215.94 1534.91,1215.94 1535.49,1215.94 1536.08,1215.94 1536.67,1215.94 1537.25,1215.94 1537.84,1215.94 1538.43,1215.94 1539.01,1215.94 1539.6,1215.94 1540.19,1215.94 1540.77,1215.94 1541.36,1215.94 1541.94,1215.94 1542.53,1215.94 1543.12,1215.94 1543.7,1215.94 1544.29,1215.94 1544.88,1215.94 1545.46,1215.94 1546.05,1215.94 1546.64,1215.94 1547.22,1215.94 1547.81,1215.94 1548.4,1215.94 1548.98,1215.94 1549.57,1215.94 1550.15,1215.94 1550.74,1215.94 1551.33,1215.94 1551.91,1215.94 1552.5,1215.94 1553.09,1215.94 1553.67,1215.94 1554.26,1215.94 1554.85,1215.94 1555.43,1215.94 1556.02,1215.94 1556.6,1215.94 1557.19,1215.94 1557.78,1215.94 1558.36,1215.94 1558.95,1215.94 1559.54,1215.94 1560.12,1215.94 1560.71,1215.94 1561.3,1215.94 1561.88,1215.94 1562.47,1215.94 1563.06,1215.94 1563.64,1215.94 1564.23,1215.94 1564.81,1215.94 1565.4,1215.94 1565.99,1215.94 1566.57,1215.94 1567.16,1215.94 1567.75,1215.94 1568.33,1215.94 1568.92,1215.94 1569.51,1215.94 1570.09,1215.94 1570.68,1215.94 1571.27,1215.94 1571.85,1215.94 1572.44,1215.94 1573.02,1215.94 1573.61,1215.94 1574.2,1215.94 1574.78,1215.94 1575.37,1215.94 1575.96,1215.94 1576.54,1215.94 1577.13,1215.94 1577.72,1215.94 1578.3,1215.94 1578.89,1215.94 1579.47,1215.94 1580.06,1215.94 1580.65,1215.94 1581.23,1215.94 1581.82,1215.94 1582.41,1215.94 1582.99,1215.94 1583.58,1215.94 1584.17,1215.94 1584.75,1215.94 1585.34,1215.94 1585.93,1215.94 1586.51,1215.94 1587.1,1215.94 1587.68,1215.94 1588.27,1215.94 1588.86,1215.94 1589.44,1215.94 1590.03,1215.94 1590.62,1215.94 1591.2,1215.94 1591.79,1215.94 1592.38,1215.94 1592.96,1215.94 1593.55,1215.94 1594.14,1215.94 1594.72,1215.94 1595.31,1215.94 1595.89,1215.94 1596.48,1215.94 1597.07,1215.94 1597.65,1215.94 1598.24,1215.94 1598.83,1215.94 1599.41,1215.94 1600,1215.94 1600.59,1215.94 1601.17,1215.94 1601.76,1215.94 1602.34,1215.94 1602.93,1215.94 1603.52,1215.94 1604.1,1215.94 1604.69,1215.94 1605.28,1215.94 1605.86,1215.94 1606.45,1215.94 1607.04,1215.94 1607.62,1215.94 1608.21,1215.94 1608.8,1215.94 1609.38,1215.94 1609.97,1215.94 1610.55,1215.94 1611.14,1215.94 1611.73,1215.94 1612.31,1215.94 1612.9,1215.94 1613.49,1215.94 1614.07,1215.94 1614.66,1215.94 1615.25,1215.94 1615.83,1215.94 1616.42,1215.94 1617.01,1215.94 1617.59,1215.94 1618.18,1215.94 1618.76,1215.94 1619.35,1215.94 1619.94,1215.94 1620.52,1215.94 1621.11,1215.94 1621.7,1215.94 1622.28,1215.94 1622.87,1215.94 1623.46,1215.94 1624.04,1215.94 1624.63,1215.94 1625.22,1215.94 1625.8,1215.94 1626.39,1215.94 1626.97,1215.94 1627.56,1215.94 1628.15,1215.94 1628.73,1215.94 1629.32,1215.94 1629.91,1215.94 1630.49,1215.94 1631.08,1215.94 1631.67,1215.94 1632.25,1215.94 1632.84,1215.94 1633.42,1215.94 1634.01,1215.94 1634.6,1215.94 1635.18,1215.94 1635.77,1215.94 1636.36,1215.94 1636.94,1215.94 1637.53,1215.94 1638.12,1215.94 1638.7,1215.94 1639.29,1215.94 1639.88,1215.94 1640.46,1215.94 1641.05,1215.94 1641.63,1215.94 1642.22,1215.94 1642.81,1215.94 1643.39,1215.94 1643.98,1215.94 1644.57,1215.94 1645.15,1215.94 1645.74,1215.94 1646.33,1215.94 1646.91,1215.94 1647.5,1215.94 1648.09,1215.94 1648.67,1215.94 1649.26,1215.94 1649.84,1215.94 1650.43,1215.94 1651.02,1215.94 1651.6,1215.94 1652.19,1215.94 1652.78,1215.94 1653.36,1215.94 1653.95,1215.94 1654.54,1215.94 1655.12,1215.94 1655.71,1215.94 1656.29,1215.94 1656.88,1215.94 1657.47,1215.94 1658.05,1215.94 1658.64,1215.94 1659.23,1215.94 1659.81,1215.94 1660.4,1215.94 1660.99,1215.94 1661.57,1215.94 1662.16,1215.94 1662.75,1215.94 1663.33,1215.94 1663.92,1215.94 1664.5,1215.94 1665.09,1215.94 1665.68,1215.94 1666.26,1215.94 1666.85,1215.94 1667.44,1215.94 1668.02,1215.94 1668.61,1215.94 1669.2,1215.94 1669.78,1215.94 1670.37,1215.94 1670.96,1215.94 1671.54,1215.94 1672.13,1215.94 1672.71,1215.94 1673.3,1215.94 1673.89,1215.94 1674.47,1215.94 1675.06,1215.94 1675.65,1215.94 1676.23,1215.94 1676.82,1215.94 1677.41,1215.94 1677.99,1215.94 1678.58,1215.94 1679.17,1215.94 1679.75,1215.94 1680.34,1215.94 1680.92,1215.94 1681.51,1215.94 1682.1,1215.94 1682.68,1215.94 1683.27,1215.94 1683.86,1215.94 1684.44,1215.94 1685.03,1215.94 1685.62,1215.94 1686.2,1215.94 1686.79,1215.94 1687.37,1215.94 1687.96,1215.94 1688.55,1215.94 1689.13,1215.94 1689.72,1215.94 1690.31,1215.94 1690.89,1215.94 1691.48,1215.94 1692.07,1215.94 1692.65,1215.94 1693.24,1215.94 1693.83,1215.94 1694.41,1215.94 1695,1215.94 1695.58,1215.94 1696.17,1215.94 1696.76,1215.94 1697.34,1215.94 1697.93,1215.94 1698.52,1215.94 1699.1,1215.94 1699.69,1215.94 1700.28,1215.94 1700.86,1215.94 1701.45,1215.94 1702.04,1215.94 1702.62,1215.94 1703.21,1215.94 1703.79,1215.94 1704.38,1215.94 1704.97,1215.94 1705.55,1215.94 1706.14,1215.94 1706.73,1215.94 1707.31,1215.94 1707.9,1215.94 1708.49,1215.94 1709.07,1215.94 1709.66,1215.94 1710.24,1215.94 1710.83,1215.94 1711.42,1215.94 1712,1215.94 1712.59,1215.94 1713.18,1215.94 1713.76,1215.94 1714.35,1215.94 1714.94,1215.94 1715.52,1215.94 1716.11,1215.94 1716.7,1215.94 1717.28,1215.94 1717.87,1215.94 1718.45,1215.94 1719.04,1215.94 1719.63,1215.94 1720.21,1215.94 1720.8,1215.94 1721.39,1215.94 1721.97,1215.94 1722.56,1215.94 1723.15,1215.94 1723.73,1215.94 1724.32,1215.94 1724.91,1215.94 1725.49,1215.94 1726.08,1215.94 1726.66,1215.94 1727.25,1215.94 1727.84,1215.94 1728.42,1215.94 1729.01,1215.94 1729.6,1215.94 1730.18,1215.94 1730.77,1215.94 1731.36,1215.94 1731.94,1215.94 1732.53,1215.94 1733.11,1215.94 1733.7,1215.94 1734.29,1215.94 1734.87,1215.94 1735.46,1215.94 1736.05,1215.94 1736.63,1215.94 1737.22,1215.94 1737.81,1215.94 1738.39,1215.94 1738.98,1215.94 1739.57,1215.94 1740.15,1215.94 1740.74,1215.94 1741.32,1215.94 1741.91,1215.94 1742.5,1215.94 1743.08,1215.94 1743.67,1215.94 1744.26,1215.94 1744.84,1215.94 1745.43,1215.94 1746.02,1215.94 1746.6,1215.94 1747.19,1215.94 1747.78,1215.94 1748.36,1215.94 1748.95,1215.94 1749.53,1215.94 1750.12,1215.94 1750.71,1215.94 1751.29,1215.94 1751.88,1215.94 1752.47,1215.94 1753.05,1215.94 1753.64,1215.94 1754.23,1215.94 1754.81,1215.94 1755.4,1215.94 1755.99,1215.94 1756.57,1215.94 1757.16,1215.94 1757.74,1215.94 1758.33,1215.94 1758.92,1215.94 1759.5,1215.94 1760.09,1215.94 1760.68,1215.94 1761.26,1215.94 1761.85,1215.94 1762.44,1215.94 1763.02,1215.94 1763.61,1215.94 1764.19,1215.94 1764.78,1215.94 1765.37,1215.94 1765.95,1215.94 1766.54,1215.94 1767.13,1215.94 1767.71,1215.94 1768.3,1215.94 1768.89,1215.94 1769.47,1215.94 1770.06,1215.94 1770.65,1215.94 1771.23,1215.94 1771.82,1215.94 1772.4,1215.94 1772.99,1215.94 1773.58,1215.94 1774.16,1215.94 1774.75,1215.94 1775.34,1215.94 1775.92,1215.94 1776.51,1215.94 1777.1,1215.94 1777.68,1215.94 1778.27,1215.94 1778.86,1215.94 1779.44,1215.94 1780.03,1215.94 1780.61,1215.94 1781.2,1215.94 1781.79,1215.94 1782.37,1215.94 1782.96,1215.94 1783.55,1215.94 1784.13,1215.94 1784.72,1215.94 1785.31,1215.94 1785.89,1215.94 1786.48,1215.94 1787.06,1215.94 1787.65,1215.94 1788.24,1215.94 1788.82,1215.94 1789.41,1215.94 1790,1215.94 1790.58,1215.94 1791.17,1215.94 1791.76,1215.94 1792.34,1215.94 1792.93,1215.94 1793.52,1215.94 1794.1,1215.94 1794.69,1215.94 1795.27,1215.94 1795.86,1215.94 1796.45,1215.94 1797.03,1215.94 1797.62,1215.94 1798.21,1215.94 1798.79,1215.94 1799.38,1215.94 1799.97,1215.94 1800.55,1215.94 1801.14,1215.94 1801.73,1215.94 1802.31,1215.94 1802.9,1215.94 1803.48,1215.94 1804.07,1215.94 1804.66,1215.94 1805.24,1215.94 1805.83,1215.94 1806.42,1215.94 1807,1215.94 1807.59,1215.94 1808.18,1215.94 1808.76,1215.94 1809.35,1215.94 1809.94,1215.94 1810.52,1215.94 1811.11,1215.94 1811.69,1215.94 1812.28,1215.94 1812.87,1215.94 1813.45,1215.94 1814.04,1215.94 1814.63,1215.94 1815.21,1215.94 1815.8,1215.94 1816.39,1215.94 1816.97,1215.94 1817.56,1215.94 1818.14,1215.94 1818.73,1215.94 1819.32,1215.94 1819.9,1215.94 1820.49,1215.94 1821.08,1215.94 1821.66,1215.94 1822.25,1215.94 1822.84,1215.94 1823.42,1215.94 1824.01,1215.94 1824.6,1215.94 1825.18,1215.94 1825.77,1215.94 1826.35,1215.94 1826.94,1215.94 1827.53,1215.94 1828.11,1215.94 1828.7,1215.94 1829.29,1215.94 1829.87,1215.94 1830.46,1215.94 1831.05,1215.94 1831.63,1215.94 1832.22,1215.94 1832.81,1215.94 1833.39,1215.94 1833.98,1215.94 1834.56,1215.94 1835.15,1215.94 1835.74,1215.94 1836.32,1215.94 1836.91,1215.94 1837.5,1215.94 1838.08,1215.94 1838.67,1215.94 1839.26,1215.94 1839.84,1215.94 1840.43,1215.94 1841.01,1215.94 1841.6,1215.94 1842.19,1215.94 1842.77,1215.94 1843.36,1215.94 1843.95,1215.94 1844.53,1215.94 1845.12,1215.94 1845.71,1215.94 1846.29,1215.94 1846.88,1215.94 1847.47,1215.94 1848.05,1215.94 1848.64,1215.94 1849.22,1215.94 1849.81,1215.94 1850.4,1215.94 1850.98,1215.94 1851.57,1215.94 1852.16,1215.94 1852.74,1215.94 1853.33,1215.94 1853.92,1215.94 1854.5,1215.94 1855.09,1215.94 1855.68,1215.94 1856.26,1215.94 1856.85,1215.94 1857.43,1215.94 1858.02,1215.94 1858.61,1215.94 1859.19,1215.94 1859.78,1215.94 1860.37,1215.94 1860.95,1215.94 1861.54,1215.94 1862.13,1215.94 1862.71,1215.94 1863.3,1215.94 1863.88,1215.94 1864.47,1215.94 1865.06,1215.94 1865.64,1215.94 1866.23,1215.94 1866.82,1215.94 1867.4,1215.94 1867.99,1215.94 1868.58,1215.94 1869.16,1215.94 1869.75,1215.94 1870.34,1215.94 1870.92,1215.94 1871.51,1215.94 1872.09,1215.94 1872.68,1215.94 1873.27,1215.94 1873.85,1215.94 1874.44,1215.94 1875.03,1215.94 1875.61,1215.94 1876.2,1215.94 1876.79,1215.94 1877.37,1215.94 1877.96,1215.94 1878.55,1215.94 1879.13,1215.94 1879.72,1215.94 1880.3,1215.94 1880.89,1215.94 1881.48,1215.94 1882.06,1215.94 1882.65,1215.94 1883.24,1215.94 1883.82,1215.94 1884.41,1215.94 1885,1215.94 1885.58,1215.94 1886.17,1215.94 1886.76,1215.94 1887.34,1215.94 1887.93,1215.94 1888.51,1215.94 1889.1,1215.94 1889.69,1215.94 1890.27,1215.94 1890.86,1215.94 1891.45,1215.94 1892.03,1215.94 1892.62,1215.94 1893.21,1215.94 1893.79,1215.94 1894.38,1215.94 1894.96,1215.94 1895.55,1215.94 1896.14,1215.94 1896.72,1215.94 1897.31,1215.94 1897.9,1215.94 1898.48,1215.94 1899.07,1215.94 1899.66,1215.94 1900.24,1215.94 1900.83,1215.94 1901.42,1215.94 1902,1215.94 1902.59,1215.94 1903.17,1215.94 1903.76,1215.94 1904.35,1215.94 1904.93,1215.94 1905.52,1215.94 1906.11,1215.94 1906.69,1215.94 1907.28,1215.94 1907.87,1215.94 1908.45,1215.94 1909.04,1215.94 1909.63,1215.94 1910.21,1215.94 1910.8,1215.94 1911.38,1215.94 1911.97,1215.94 1912.56,1215.94 1913.14,1215.94 1913.73,1215.94 1914.32,1215.94 1914.9,1215.94 1915.49,1215.94 1916.08,1215.94 1916.66,1215.94 1917.25,1215.94 1917.83,1215.94 1918.42,1215.94 1919.01,1215.94 1919.59,1215.94 1920.18,1215.94 1920.77,1215.94 1921.35,1215.94 1921.94,1215.94 1922.53,1215.94 1923.11,1215.94 1923.7,1215.94 1924.29,1215.94 1924.87,1215.94 1925.46,1215.94 1926.04,1215.94 1926.63,1215.94 1927.22,1215.94 1927.8,1215.94 1928.39,1215.94 1928.98,1215.94 1929.56,1215.94 1930.15,1215.94 1930.74,1215.94 1931.32,1215.94 1931.91,1215.94 1932.5,1215.94 1933.08,1215.94 1933.67,1215.94 1934.25,1215.94 1934.84,1215.94 1935.43,1215.94 1936.01,1215.94 1936.6,1215.94 1937.19,1215.94 1937.77,1215.94 1938.36,1215.94 1938.95,1215.94 1939.53,1215.94 1940.12,1215.94 1940.71,1215.94 1941.29,1215.94 1941.88,1215.94 1942.46,1215.94 1943.05,1215.94 1943.64,1215.94 1944.22,1215.94 1944.81,1215.94 1945.4,1215.94 1945.98,1215.94 1946.57,1215.94 1947.16,1215.94 1947.74,1215.94 1948.33,1215.94 1948.91,1215.94 1949.5,1215.94 1950.09,1215.94 1950.67,1215.94 1951.26,1215.94 1951.85,1215.94 1952.43,1215.94 1953.02,1215.94 1953.61,1215.94 1954.19,1215.94 1954.78,1215.94 1955.37,1215.94 1955.95,1215.94 1956.54,1215.94 1957.12,1215.94 1957.71,1215.94 1958.3,1215.94 1958.88,1215.94 1959.47,1215.94 1960.06,1215.94 1960.64,1215.94 1961.23,1215.94 1961.82,1215.94 1962.4,1215.94 1962.99,1215.94 1963.58,1215.94 1964.16,1215.94 1964.75,1215.94 1965.33,1215.94 1965.92,1215.94 1966.51,1215.94 1967.09,1215.94 1967.68,1215.94 1968.27,1215.94 1968.85,1215.94 1969.44,1215.94 1970.03,1215.94 1970.61,1215.94 1971.2,1215.94 1971.78,1215.94 1972.37,1215.94 1972.96,1215.94 1973.54,1215.94 1974.13,1215.94 1974.72,1215.94 1975.3,1215.94 1975.89,1215.94 1976.48,1215.94 1977.06,1215.94 1977.65,1215.94 1978.24,1215.94 1978.82,1215.94 1979.41,1215.94 1979.99,1215.94 1980.58,1215.94 1981.17,1215.94 1981.75,1215.94 1982.34,1215.94 1982.93,1215.94 1983.51,1215.94 1984.1,1215.94 1984.69,1215.94 1985.27,1215.94 1985.86,1215.94 1986.45,1215.94 1987.03,1215.94 1987.62,1215.94 1988.2,1215.94 1988.79,1215.94 1989.38,1215.94 1989.96,1215.94 1990.55,1215.94 1991.14,1215.94 1991.72,1215.94 1992.31,1215.94 1992.9,1215.94 1993.48,1215.94 1994.07,1215.94 1994.65,1215.94 1995.24,1215.94 1995.83,1215.94 1996.41,1215.94 1997,1215.94 1997.59,1215.94 1998.17,1215.94 1998.76,1215.94 1999.35,1215.94 1999.93,1215.94 2000.52,1215.94 2001.11,1215.94 2001.69,1215.94 2002.28,1215.94 2002.86,1215.94 2003.45,1215.94 2004.04,1215.94 2004.62,1215.94 2005.21,1215.94 2005.8,1215.94 2006.38,1215.94 2006.97,1215.94 2007.56,1215.94 2008.14,1215.94 2008.73,1215.94 2009.32,1215.94 2009.9,1215.94 2010.49,1215.94 2011.07,1215.94 2011.66,1215.94 2012.25,1215.94 2012.83,1215.94 2013.42,1215.94 2014.01,1215.94 2014.59,1215.94 2015.18,1215.94 2015.77,1215.94 2016.35,1215.94 2016.94,1215.94 2017.53,1215.94 2018.11,1215.94 2018.7,1215.94 2019.28,1215.94 2019.87,1215.94 2020.46,1215.94 2021.04,1215.94 2021.63,1215.94 2022.22,1215.94 2022.8,1215.94 2023.39,1215.94 2023.98,1215.94 2024.56,1215.94 2025.15,1215.94 2025.73,1215.94 2026.32,1215.94 2026.91,1215.94 2027.49,1215.94 2028.08,1215.94 2028.67,1215.94 2029.25,1215.94 2029.84,1215.94 2030.43,1215.94 2031.01,1215.94 2031.6,1215.94 2032.19,1215.94 2032.77,1215.94 2033.36,1215.94 2033.94,1215.94 2034.53,1215.94 2035.12,1215.94 2035.7,1215.94 2036.29,1215.94 2036.88,1215.94 2037.46,1215.94 2038.05,1215.94 2038.64,1215.94 2039.22,1215.94 2039.81,1215.94 2040.4,1215.94 2040.98,1215.94 2041.57,1215.94 2042.15,1215.94 2042.74,1215.94 2043.33,1215.94 2043.91,1215.94 2044.5,1215.94 2045.09,1215.94 2045.67,1215.94 2046.26,1215.94 2046.85,1215.94 2047.43,1215.94 2048.02,1215.94 2048.6,1215.94 2049.19,1215.94 2049.78,1215.94 2050.36,1215.94 2050.95,1215.94 2051.54,1215.94 2052.12,1215.94 2052.71,1215.94 2053.3,1215.94 2053.88,1215.94 2054.47,1215.94 2055.06,1215.94 2055.64,1215.94 2056.23,1215.94 2056.81,1215.94 2057.4,1215.94 2057.99,1215.94 2058.57,1215.94 2059.16,1215.94 2059.75,1215.94 2060.33,1215.94 2060.92,1215.94 2061.51,1215.94 2062.09,1215.94 2062.68,1215.94 2063.27,1215.94 2063.85,1215.94 2064.44,1215.94 2065.02,1215.94 2065.61,1215.94 2066.2,1215.94 2066.78,1215.94 2067.37,1215.94 2067.96,1215.94 2068.54,1215.94 2069.13,1215.94 2069.72,1215.94 2070.3,1215.94 2070.89,1215.94 2071.48,1215.94 2072.06,1215.94 2072.65,1215.94 2073.23,1215.94 2073.82,1215.94 2074.41,1215.94 2074.99,1215.94 2075.58,1215.94 2076.17,1215.94 2076.75,1215.94 2077.34,1215.94 2077.93,1215.94 2078.51,1215.94 2079.1,1215.94 2079.68,1215.94 2080.27,1215.94 2080.86,1215.94 2081.44,1215.94 2082.03,1215.94 2082.62,1215.94 2083.2,1215.94 2083.79,1215.94 2084.38,1215.94 2084.96,1215.94 2085.55,1215.94 2086.14,1215.94 2086.72,1215.94 2087.31,1215.94 2087.89,1215.94 2088.48,1215.94 2089.07,1215.94 2089.65,1215.94 2090.24,1215.94 2090.83,1215.94 2091.41,1215.94 2092,1215.94 2092.59,1215.94 2093.17,1215.94 2093.76,1215.94 2094.35,1215.94 2094.93,1215.94 2095.52,1215.94 2096.1,1215.94 2096.69,1215.94 2097.28,1215.94 2097.86,1215.94 2098.45,1215.94 2099.04,1215.94 2099.62,1215.94 2100.21,1215.94 2100.8,1215.94 2101.38,1215.94 2101.97,1215.94 2102.55,1215.94 2103.14,1215.94 2103.73,1215.94 2104.31,1215.94 2104.9,1215.94 2105.49,1215.94 2106.07,1215.94 2106.66,1215.94 2107.25,1215.94 2107.83,1215.94 2108.42,1215.94 2109.01,1215.94 2109.59,1215.94 2110.18,1215.94 2110.76,1215.94 2111.35,1215.94 2111.94,1215.94 2112.52,1215.94 2113.11,1215.94 2113.7,1215.94 2114.28,1215.94 2114.87,1215.94 2115.46,1215.94 2116.04,1215.94 2116.63,1215.94 2117.22,1215.94 2117.8,1215.94 2118.39,1215.94 2118.97,1215.94 2119.56,1215.94 2120.15,1215.94 2120.73,1215.94 2121.32,1215.94 2121.91,1215.94 2122.49,1215.94 2123.08,1215.94 2123.67,1215.94 2124.25,1215.94 2124.84,1215.94 2125.42,1215.94 2126.01,1215.94 2126.6,1215.94 2127.18,1215.94 2127.77,1215.94 2128.36,1215.94 2128.94,1215.94 2129.53,1215.94 2130.12,1215.94 2130.7,1215.94 2131.29,1215.94 2131.88,1215.94 2132.46,1215.94 2133.05,1215.94 2133.63,1215.94 2134.22,1215.94 2134.81,1215.94 2135.39,1215.94 2135.98,1215.94 2136.57,1215.94 2137.15,1215.94 2137.74,1215.94 2138.33,1215.94 2138.91,1215.94 2139.5,1215.94 2140.09,1215.94 2140.67,1215.94 2141.26,1215.94 2141.84,1215.94 2142.43,1215.94 2143.02,1215.94 2143.6,1215.94 2144.19,1215.94 2144.78,1215.94 2145.36,1215.94 2145.95,1215.94 2146.54,1215.94 2147.12,1215.94 2147.71,1215.94 2148.3,1215.94 2148.88,1215.94 2149.47,1215.94 2150.05,1215.94 2150.64,1215.94 2151.23,1215.94 2151.81,1215.94 2152.4,1215.94 2152.99,1215.94 2153.57,1215.94 2154.16,1215.94 2154.75,1215.94 2155.33,1215.94 2155.92,1215.94 2156.5,1215.94 2157.09,1215.94 2157.68,1215.94 2158.26,1215.94 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.2,1198.04 1398.55,899.083 \"/>\n<polyline clip-path=\"url(#clip842)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1233.28 985.439,1198.04 2158.26,1198.04 2158.26,1233.28 985.439,1233.28 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip840)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip840)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip843\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip843)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip843)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip843)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip843)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip843)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip843)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip843)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip843)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip843)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip843)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip840)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip840)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip840)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip843)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-5856.65 164.351,-6807.39 164.91,-7607.46 165.469,-8399.55 166.029,-9078.88 166.588,-8631.74 167.147,-9250.84 167.706,-9793.78 168.266,-10293.8 168.825,-10725.2 169.384,-11121.1 169.943,-10715.1 170.503,-10387.6 171.062,-10731.2 171.621,-10439.2 172.18,-10738.2 172.74,-10997.6 173.299,-11198 173.858,-11387.4 174.417,-11538.2 174.977,-11665.9 175.536,-11364.2 176.095,-11448.1 176.655,-11495.2 177.214,-11207.1 177.773,-10912.3 178.332,-10906.4 178.892,-10629.7 179.451,-10603 180.01,-10317.6 180.569,-9842.95 181.129,-9784.75 181.688,-9724.86 182.247,-9467.85 182.806,-9228.86 183.366,-8977.76 183.925,-8741.3 184.484,-8645.02 185.043,-8539.54 185.603,-8439.03 186.162,-8320.65 186.721,-8201.6 187.28,-8078.86 187.84,-7850.73 188.399,-7727.96 188.958,-7498.69 189.517,-7284.69 190.077,-7066.63 190.636,-6932.28 191.195,-6727.38 191.754,-6510.75 192.314,-6238.77 192.873,-5978.77 193.432,-5655.06 193.991,-5478.06 194.551,-5237.87 195.11,-5071.29 195.669,-4971.08 196.228,-4806.65 196.788,-4492.49 197.347,-4296.45 197.906,-4102.24 198.465,-4013.61 199.025,-3835.74 199.584,-3710.71 200.143,-3628.42 200.702,-3505.31 201.262,-3381.36 201.821,-3221.19 202.38,-3026.12 202.939,-2912.84 203.499,-2809.3 204.058,-2629.14 204.617,-2457.32 205.176,-2361.4 205.736,-2235.89 206.295,-2180.64 206.854,-2091.1 207.413,-1941.33 207.973,-1761.34 208.532,-1625.33 209.091,-1552.62 209.65,-1479.55 210.21,-1441.82 210.769,-1343.84 211.328,-1216.83 211.887,-1185.27 212.447,-1120.74 213.006,-1026.97 213.565,-933.282 214.124,-874.112 214.684,-816.3 215.243,-756.314 215.802,-674.478 216.361,-623.497 216.921,-567.205 217.48,-489.238 218.039,-415.333 218.598,-366.817 219.158,-274.65 219.717,-231.154 220.276,-188.305 220.835,-123.341 221.395,6.19233 221.954,63.291 222.513,95.9403 223.072,128.903 223.632,161.723 224.191,194.673 224.75,226.768 225.309,297.672 225.869,304.367 226.428,308.802 226.987,357.706 227.546,364.948 228.106,430.708 228.665,433.454 229.224,438.678 229.783,440.254 230.343,481.083 230.902,486.906 231.461,491.869 232.02,512.728 232.58,540.031 233.139,564.467 233.698,605.341 234.257,607.633 234.817,628.425 235.376,665.842 235.935,668.863 236.494,689.58 237.054,705.458 237.613,705.605 238.172,706.872 238.731,709.847 239.291,727.632 239.85,764.845 240.409,780.971 240.968,758.901 241.528,800.083 242.087,743.125 242.646,763.161 243.205,763.785 243.765,765.486 244.324,753.378 244.883,794.664 245.442,814.104 246.002,836.592 246.561,801.502 247.12,803.588 247.679,820.84 248.239,786.533 248.798,789.061 249.357,808.432 249.916,845.532 250.476,896.475 251.035,950.597 251.594,981.322 252.153,992.67 252.713,1003.06 253.272,1050.6 253.831,1095.55 254.39,1086.5 254.95,1095.59 255.509,1068.11 256.068,1092.8 256.627,1035.89 257.187,1027.47 257.746,1036.17 258.305,1047.07 258.864,1021.51 259.424,1049.86 259.983,1061.01 260.542,1088.67 261.101,1094.68 261.661,1088.6 262.22,1112.89 262.779,1086.17 263.338,1079.61 263.898,1055.15 264.457,1029.16 265.016,1057.51 265.575,1083.64 266.135,1054.61 266.694,1065.93 267.253,1058.93 267.812,1036.13 268.372,1047.59 268.931,1073.64 269.49,1065.05 270.049,1057.32 270.609,1068.66 271.168,1060.61 271.727,1049.91 272.286,1092.94 272.846,1098.53 273.405,1106.41 273.964,1084.39 274.523,1080.39 275.083,1068.95 275.642,1028.24 276.201,1021.65 276.76,1000.07 277.32,997.64 277.879,978.783 278.438,975.498 278.997,1023.15 279.557,1021.94 280.116,1048.48 280.675,1058.29 281.234,1030.32 281.794,1025.24 282.353,1020.23 282.912,1013.21 283.471,1028.91 284.031,1026.82 284.59,1020 285.149,1003.19 285.708,997.415 286.268,1025.14 286.827,1019.47 287.386,1014.83 287.945,1013 288.505,1040.1 289.064,1082.82 289.623,1074.78 290.182,1081.35 290.742,1106.33 291.301,1065.5 291.86,1059.87 292.419,1071.27 292.979,1082.76 293.538,1073.5 294.097,1049.5 294.656,1093 295.216,1081.08 295.775,1054.79 296.334,1082.68 296.893,1071.62 297.453,1062.48 298.012,1070.98 298.571,1081.88 299.13,1073.26 299.69,1065.67 300.249,1088.29 300.808,1095.35 301.368,1086.46 301.927,1079.02 302.486,1053.11 303.045,1027.84 303.605,1003.3 304.164,979.618 304.723,975.506 305.282,1006.21 305.842,1002.22 306.401,1015.6 306.96,1041.98 307.519,1037.42 308.079,1013.01 308.638,1040.63 309.197,1031.9 309.756,1024.73 310.316,1019.29 310.875,1044.03 311.434,1055.61 311.993,1061.5 312.553,1051.69 313.112,1075.06 313.671,1066.22 314.23,1043.38 314.79,1037.12 315.349,1046.5 315.908,1035.73 316.467,1029.84 317.027,1054.47 317.586,1030.11 318.145,1020.02 318.704,1014.28 319.264,1023.18 319.823,1014.66 320.382,1024.21 320.941,1031.92 321.501,1039.16 322.06,1028.48 322.619,1034.8 323.178,1070.51 323.738,1092.99 324.297,1062.17 324.856,1066.55 325.415,1056.99 325.975,1062.33 326.534,1053.35 327.093,1026.71 327.652,985.563 328.212,958.582 328.771,998.934 329.33,1026.15 329.889,1001.32 330.449,1027.19 331.008,1016.69 331.567,1012.85 332.126,986.845 332.686,995.464 333.245,989.707 333.804,998.751 334.363,973.22 334.923,933.03 335.482,927.997 336.041,941.46 336.6,950.679 337.16,964.311 337.719,974.738 338.278,967.216 338.837,1008.44 339.397,999.542 339.956,975.435 340.515,966.091 341.074,976.935 341.634,966.171 342.193,1012.14 342.752,951.044 343.311,930.808 343.871,908.638 344.43,902.007 344.989,869.13 345.548,887.304 346.108,868.273 346.667,896 347.226,876.965 347.785,905.878 348.345,917.015 348.904,930.2 349.463,926.211 350.022,904.802 350.582,916.476 351.141,929.487 351.7,902.54 352.259,878.966 352.819,878.41 353.378,875.203 353.937,856.871 354.496,853.527 355.056,851.044 355.615,834.616 356.174,835.636 356.733,802.217 357.293,789.917 357.852,771.235 358.411,773.903 358.97,757.105 359.53,760.268 360.089,763.415 360.648,794.665 361.207,779.683 361.767,830.63 362.326,843.784 362.885,826.46 363.444,804.741 364.004,788.889 364.563,806.979 365.122,806.984 365.681,821.837 366.241,873.943 366.8,854.459 367.359,868.711 367.918,868.459 368.478,818.433 369.037,804.976 369.596,757.295 370.155,791.06 370.715,776.229 371.274,789.692 371.833,774.679 372.392,778.236 372.952,796.052 373.511,799.105 374.07,784.835 374.629,787.786 375.189,790.209 375.748,792.074 376.307,794.406 376.866,795.792 377.426,795.367 377.985,761.954 378.544,732.756 379.103,754.075 379.663,759.645 380.222,794.696 380.781,780.247 381.34,812.74 381.9,843.042 382.459,843.251 383.018,844.394 383.577,843.977 384.137,825.043 384.696,841.119 385.255,855.467 385.814,853.54 386.374,866.349 386.933,814.064 387.492,877.569 388.051,888.952 388.611,898.871 389.17,892.25 389.729,883.159 390.288,883.292 390.848,894.33 391.407,924.196 391.966,953.828 392.525,927.024 393.085,902.448 393.644,893.056 394.203,868.887 394.762,817.297 395.322,814.159 395.881,811.275 396.44,807.442 396.999,807.906 397.559,771.536 398.118,786.271 398.677,782.75 399.236,797.832 399.796,780.383 400.355,796.771 400.914,810.65 401.473,808.474 402.033,804.749 402.592,821.518 403.151,852.288 403.71,864.388 404.27,894.692 404.829,934.455 405.388,929.124 405.947,954.956 406.507,960.279 407.066,950.182 407.625,958.718 408.184,929.914 408.744,889.769 409.303,854.766 409.862,850.724 410.421,828.688 410.981,826.028 411.54,841.242 412.099,835.211 412.658,845.59 413.218,825.25 413.777,904.039 414.336,895.277 414.895,907.643 415.455,886.255 416.014,880.475 416.573,893.119 417.132,887.212 417.692,866.619 418.251,861.146 418.81,886.515 419.369,900.245 419.929,878.306 420.488,872.357 421.047,868.82 421.606,866.271 422.166,859.707 422.725,854.816 423.284,867.625 423.843,861.906 424.403,874.348 424.962,884.486 425.521,877.53 426.08,837.262 426.64,832.73 427.199,845.242 427.758,822.328 428.318,803.436 428.877,799.502 429.436,787.679 429.995,784.291 430.555,781.631 431.114,780.654 431.673,777.011 432.232,761.57 432.792,763.021 433.351,732.321 433.91,684.038 434.469,689.542 435.029,675.969 435.588,695.542 436.147,682.39 436.706,735.271 437.266,756.2 437.825,738.428 438.384,773.715 438.943,740.221 439.503,755.815 440.062,775.296 440.621,774.04 441.18,790.12 441.74,819.724 442.299,816.865 442.858,827.048 443.417,808.806 443.977,804.144 444.536,767.323 445.095,782.996 445.654,765.48 446.214,780.02 446.773,791.249 447.332,790.644 447.891,804.646 448.451,798.946 449.01,812.857 449.569,829.494 450.128,810.185 450.688,790.644 451.247,758.313 451.806,791.093 452.365,804.305 452.925,767.521 453.484,764.769 454.043,763.127 454.602,749.324 455.162,732.946 455.721,719.311 456.28,705.414 456.839,690.678 457.399,711.145 457.958,665.413 458.517,698.639 459.076,683.68 459.636,687.389 460.195,643.841 460.754,665.145 461.313,654.782 461.873,657.01 462.432,681.812 462.991,681.935 463.55,702.626 464.11,737.632 464.669,799.619 465.228,797.222 465.787,779.989 466.347,775.809 466.906,773.533 467.465,756.428 468.024,707.849 468.584,742.571 469.143,741.967 469.702,740.769 470.261,758.103 470.821,775.073 471.38,721.705 471.939,755.943 472.498,755.085 473.058,757.074 473.617,802.369 474.176,783.116 474.735,778.95 475.295,776.792 475.854,773.707 476.413,755.727 476.972,754.851 477.532,752.977 478.091,753.3 478.65,753.9 479.209,736.054 479.769,768.172 480.328,750.32 480.887,702.597 481.446,720.057 482.006,754.744 482.565,753.908 483.124,789.204 483.683,751.063 484.243,751.225 484.802,764.83 485.361,782.595 485.92,792.534 486.48,775.438 487.039,820.685 487.598,876.795 488.157,839.658 488.717,866.362 489.276,859.526 489.835,852.468 490.394,861.494 490.954,807.309 491.513,820.351 492.072,783.522 492.631,768.737 493.191,764.689 493.75,744.602 494.309,758.825 494.868,756.245 495.428,771.735 495.987,720.266 496.546,722.172 497.105,723.1 497.665,757.502 498.224,787.047 498.783,800.612 499.342,830.341 499.902,857.018 500.461,833.97 501.02,876.334 501.579,853.86 502.139,862.195 502.698,853.874 503.257,816.584 503.816,810.394 504.376,754.199 504.935,724.85 505.494,709.037 506.053,694.911 506.613,713.048 507.172,714.29 507.731,716.094 508.29,729.061 508.85,732.734 509.409,719.795 509.968,704.258 510.527,735.825 511.087,736.465 511.646,704.488 512.205,720.215 512.764,723.528 513.324,724.521 513.883,754.384 514.442,735.611 515.001,720.318 515.561,703.734 516.12,689.79 516.679,660.533 517.238,696.751 517.798,700.586 518.357,686.279 518.916,723.168 519.475,740.093 520.035,771.734 520.594,768.991 521.153,733.037 521.712,733.388 522.272,730.756 522.831,714.508 523.39,716.89 523.949,718.506 524.509,719.147 525.068,736.315 525.627,737.019 526.186,767.129 526.746,765.68 527.305,763.628 527.864,728.524 528.423,728.57 528.983,744.037 529.542,708.886 530.101,673.649 530.66,660.408 531.22,646.977 531.779,620.258 532.338,625.253 532.897,644.357 533.457,646.992 534.016,665.624 534.575,718.977 535.134,737.316 535.694,754.808 536.253,721.64 536.812,720.508 537.371,740.149 537.931,709.874 538.49,711.414 539.049,698.441 539.608,717.265 540.168,731.818 540.727,681.315 541.286,699.934 541.845,702.916 542.405,751.907 542.964,734.283 543.523,713.733 544.082,648.9 544.642,636.695 545.201,640.63 545.76,644.544 546.319,617.006 546.879,621.085 547.438,641.814 547.997,664.294 548.556,664.869 549.116,651.727 549.675,673.873 550.234,659.846 550.793,647.389 551.353,638.004 551.912,639.75 552.471,646.144 553.031,653.766 553.59,657.984 554.149,681.978 554.708,680.932 555.268,682 555.827,698.846 556.386,667.9 556.945,670.392 557.505,652.777 558.064,736.273 558.623,754.692 559.182,769.843 559.742,732.572 560.301,731.65 560.86,718.384 561.419,733.252 561.979,714.634 562.538,748.256 563.097,745.973 563.656,793.137 564.216,788.334 564.775,783.418 565.334,747.872 565.893,747.919 566.453,746.279 567.012,712.667 567.571,716.301 568.13,684.338 568.69,685.206 569.249,683.957 569.808,686.086 570.367,671.336 570.927,674.289 571.486,681.506 572.045,684.633 572.604,686.129 573.164,703.931 573.723,706.496 574.282,660.814 574.841,680.098 575.401,668.536 575.96,685.598 576.519,685.669 577.078,703.326 577.638,703.188 578.197,669.602 578.756,658.091 579.315,692.663 579.875,692.495 580.434,708.988 580.993,691.783 581.552,708.304 582.112,697.566 582.671,682.327 583.23,683.486 583.789,700.59 584.349,701.594 584.908,704.671 585.467,706.81 586.026,724.035 586.586,724.134 587.145,758.224 587.704,772.766 588.263,753.58 588.823,749.341 589.382,765.314 589.941,778.983 590.5,771.337 591.06,767.135 591.619,781.335 592.178,806.607 592.737,801.109 593.297,812.426 593.856,809.951 594.415,773.126 594.974,801.824 595.534,797.924 596.093,795.86 596.652,790.115 597.211,786.082 597.771,795.296 598.33,792.245 598.889,771.057 599.448,764.878 600.008,777.105 600.567,776.498 601.126,757.749 601.685,770.377 602.245,734.258 602.804,732.202 603.363,732.442 603.922,717.696 604.482,702.376 605.041,736.216 605.6,703.102 606.159,686.612 606.719,703.734 607.278,704.266 607.837,705.845 608.396,706.004 608.956,719.412 609.515,717.929 610.074,718.965 610.633,749.627 611.193,748.384 611.752,742.878 612.311,773.486 612.87,787.299 613.43,756.055 613.989,752.723 614.548,751.445 615.107,698.585 615.667,700.22 616.226,704.511 616.785,720.019 617.344,780.947 617.904,778.39 618.463,773 619.022,734.413 619.581,763.897 620.141,759.311 620.7,751.627 621.259,782.575 621.818,773.515 622.378,790.764 622.937,783.432 623.496,782.319 624.055,760.004 624.615,785.801 625.174,777.481 625.733,786.138 626.292,797.388 626.852,808.041 627.411,798.098 627.97,777.252 628.529,795.407 629.089,790.959 629.648,788.25 630.207,797.672 630.766,790.501 631.326,771.325 631.885,755.215 632.444,754.019 633.003,738.553 633.563,686.927 634.122,686.983 634.681,686.367 635.24,668.961 635.8,722.483 636.359,752.2 636.918,750.829 637.477,732.058 638.037,712.975 638.596,745.422 639.155,712.841 639.714,711.101 640.274,708.671 640.833,708.487 641.392,660.677 641.951,646.496 642.511,617.528 643.07,656.462 643.629,689.662 644.188,676.417 644.748,689.838 645.307,707.879 645.866,735.985 646.425,765.133 646.985,760.136 647.544,742.452 648.103,726.18 648.662,708.289 649.222,743.458 649.781,754.562 650.34,753.082 650.899,781.159 651.459,763.256 652.018,744.416 652.577,761.085 653.136,770.23 653.696,783.672 654.255,764.621 654.814,747.552 655.373,762.292 655.933,774.458 656.492,753.562 657.051,747.933 657.61,744.006 658.17,705.146 658.729,721.384 659.288,674.139 659.847,692.028 660.407,723.452 660.966,720.481 661.525,703.946 662.084,704.474 662.644,669.907 663.203,652.394 663.762,652.693 664.321,638.362 664.881,609.997 665.44,616.554 665.999,603.69 666.558,577.317 667.118,601.224 667.677,625.636 668.236,614.95 668.795,586.603 669.355,597.739 669.914,601.975 670.473,606.648 671.032,628.83 671.592,618.183 672.151,588.928 672.71,612.188 673.269,646.994 673.829,616.935 674.388,637.987 674.947,658.653 675.506,662.441 676.066,664.48 676.625,667.332 677.184,683.303 677.743,684.457 678.303,668.186 678.862,671.323 679.421,659.679 679.981,628.387 680.54,630.029 681.099,653.53 681.658,655.486 682.218,626.367 682.777,627.521 683.336,630.839 683.895,633.988 684.455,635.003 685.014,644.32 685.573,664.988 686.132,666.581 686.692,669.672 687.251,670.268 687.81,672.334 688.369,690.369 688.929,690.736 689.488,724.009 690.047,709.548 690.606,692.471 691.166,680.647 691.725,666.103 692.284,667.003 692.843,717.204 693.403,747.148 693.962,778.666 694.521,775.275 695.08,756.346 695.64,737.921 696.199,731.779 696.758,764.75 697.317,745.949 697.877,726.372 698.436,740.142 698.995,754.548 699.554,749.031 700.114,729.322 700.673,711.674 701.232,709.763 701.791,695.749 702.351,713.315 702.91,713.834 703.469,697.853 704.028,714.906 704.588,700.463 705.147,715.214 705.706,679.056 706.265,682.982 706.825,687.897 707.384,673.812 707.943,659.404 708.502,694.928 709.062,712.083 709.621,677.548 710.18,679.324 710.739,663.838 711.299,665.754 711.858,683.921 712.417,699.078 712.976,696.869 713.536,712.999 714.095,726.916 714.654,725.276 715.213,720.81 715.773,752.401 716.332,781.807 716.891,780.597 717.45,727.586 718.01,691.155 718.569,673.915 719.128,739.733 719.687,755.821 720.247,750.696 720.806,747.334 721.365,760.152 721.924,708.641 722.484,662.757 723.043,698.317 723.602,681.63 724.161,700.014 724.721,734.299 725.28,720.751 725.839,734.949 726.398,717.691 726.958,713.449 727.517,731.365 728.076,697.477 728.635,695.797 729.195,681.031 729.754,683.126 730.313,684.909 730.872,685.799 731.432,649.715 731.991,652.427 732.55,653.026 733.109,657.989 733.669,644.738 734.228,646.843 734.787,650.13 735.346,665.814 735.906,669.526 736.465,651.159 737.024,686.692 737.583,707.406 738.143,656.688 738.702,677.563 739.261,692.851 739.82,692.071 740.38,707.706 740.939,709.251 741.498,722.369 742.057,720.678 742.617,736.61 743.176,766.638 743.735,762.534 744.294,745.018 744.854,723.723 745.413,738.324 745.972,736.42 746.531,733.893 747.091,732.828 747.65,712.081 748.209,729.857 748.768,759.586 749.328,772.323 749.887,734.749 750.446,730.507 751.005,725.236 751.565,706.626 752.124,719.884 752.683,702.721 753.242,703.111 753.802,689.634 754.361,689.456 754.92,675.961 755.479,704.821 756.039,670.852 756.598,605.671 757.157,624.829 757.716,640.681 758.276,628.306 758.835,597.541 759.394,604.693 759.953,623.185 760.513,658.223 761.072,661.038 761.631,675.278 762.19,675.755 762.75,657.69 763.309,626.911 763.868,600.246 764.427,639.055 764.987,661.969 765.546,667.513 766.105,667.74 766.664,654.943 767.224,623.463 767.783,594.078 768.342,598.461 768.901,620.56 769.461,608.617 770.02,577.985 770.579,567.391 771.138,541.543 771.698,550.468 772.257,592.573 772.816,580.274 773.375,588.975 773.935,624.252 774.494,628.871 775.053,581.615 775.612,602.514 776.172,575.576 776.731,616.451 777.29,588.178 777.849,595.294 778.409,585.891 778.968,591.111 779.527,598.271 780.086,604.34 780.646,608.336 781.205,613.195 781.764,599.465 782.323,605.535 782.883,610.695 783.442,612.232 784.001,694.493 784.56,660.492 785.12,693.978 785.679,725.882 786.238,707.417 786.797,720.312 787.357,715.28 787.916,715.813 788.475,678.388 789.034,679.355 789.594,698.228 790.153,728.351 790.712,710.081 791.271,727.467 791.831,745.634 792.39,745.464 792.949,743.966 793.508,791.642 794.068,787.223 794.627,768.621 795.186,781.064 795.745,778.298 796.305,744.745 796.864,761.32 797.423,770.242 797.982,781.194 798.542,788.484 799.101,781.24 799.66,842.397 800.219,818.066 800.779,796.3 801.338,807.846 801.897,787.16 802.456,751.878 803.016,729.575 803.575,743.117 804.134,710.776 804.693,675.5 805.253,674.108 805.812,658.118 806.371,678.236 806.931,693.99 807.49,629.389 808.049,637.32 808.608,671.55 809.168,718.881 809.727,746.756 810.286,745.4 810.845,771.724 811.405,753.552 811.964,702.077 812.523,716.701 813.082,718.951 813.642,666.712 814.201,684.676 814.76,682.257 815.319,677.167 815.879,677.749 816.438,710.581 816.997,694.042 817.556,696.333 818.116,660.766 818.675,691.097 819.234,641.654 819.793,645.777 820.353,665.006 820.912,680.942 821.471,680.744 822.03,683.448 822.59,700.847 823.149,687.553 823.708,705.684 824.267,718.36 824.827,763.957 825.386,790.718 825.945,804.187 826.504,786.333 827.064,767.535 827.623,732.431 828.182,744.897 828.741,724.68 829.301,726.666 829.86,705.653 830.419,688.371 830.978,704.253 831.538,670.96 832.097,669.884 832.656,670.658 833.215,620.085 833.775,622.836 834.334,610.407 834.893,598.274 835.452,620.018 836.012,607.139 836.571,610.517 837.13,600.666 837.689,587.609 838.249,594.031 838.808,614.361 839.367,618.207 839.926,633.619 840.486,665.114 841.045,679.892 841.604,679.246 842.163,675.808 842.723,664.699 843.282,683.755 843.841,702.234 844.4,662.598 844.96,680.07 845.519,661.912 846.078,696.82 846.637,698.311 847.197,716.739 847.756,701.563 848.315,667.12 848.874,671.693 849.434,678.444 849.993,677.387 850.552,682.461 851.111,695.242 851.671,699.449 852.23,717.522 852.789,729.575 853.348,730.025 853.908,695.872 854.467,712.38 855.026,726.783 855.585,709.719 856.145,723.585 856.704,720.838 857.263,783.225 857.822,775.929 858.382,767.688 858.941,759.513 859.5,758.129 860.059,735.95 860.619,715.864 861.178,715.626 861.737,695.988 862.296,677.668 862.856,662.236 863.415,681.392 863.974,730.742 864.533,728.462 865.093,690.074 865.652,724.135 866.211,720.064 866.77,749.586 867.33,731.486 867.889,710.48 868.448,724.969 869.007,739.818 869.567,706.418 870.126,671.158 870.685,671.552 871.244,686.729 871.804,687.266 872.363,651.267 872.922,669.627 873.481,687.083 874.041,703.206 874.6,700.038 875.159,701.969 875.718,718.447 876.278,718.094 876.837,700.018 877.396,682.984 877.955,697.085 878.515,728.817 879.074,758.635 879.633,786.25 880.192,797.617 880.752,774.016 881.311,736.95 881.87,735.451 882.429,747.58 882.989,761.775 883.548,724.82 884.107,706.306 884.666,721.298 885.226,722.061 885.785,716.609 886.344,666.483 886.903,668.535 887.463,669.464 888.022,652.65 888.581,654.707 889.14,671.696 889.7,688.086 890.259,688.38 890.818,691.129 891.377,706.201 891.937,704.525 892.496,751.436 893.055,717.368 893.614,681.06 894.174,680.716 894.733,666.944 895.292,668.314 895.851,688.235 896.411,689.456 896.97,687.524 897.529,705.569 898.088,706.612 898.648,705.455 899.207,718.74 899.766,699.145 900.325,730.625 900.885,696.984 901.444,697.753 902.003,682.174 902.562,667.453 903.122,665.306 903.681,684.724 904.24,684.892 904.799,653.351 905.359,655.632 905.918,657.903 906.477,656.631 907.036,675.079 907.596,694.519 908.155,724.069 908.714,721.993 909.273,719.151 909.833,688.805 910.392,655.472 910.951,654.199 911.51,639.946 912.07,628.23 912.629,648.51 913.188,651.527 913.747,669.395 914.307,688.869 914.866,673.756 915.425,676.574 915.984,674.2 916.544,661.297 917.103,697.105 917.662,679.776 918.221,647.811 918.781,669.613 919.34,637.214 919.899,671.653 920.458,659.449 921.018,658.793 921.577,692.429 922.136,710.418 922.695,679.647 923.255,694.418 923.814,660.1 924.373,673.329 924.932,672.4 925.492,639.019 926.051,642.945 926.61,643.5 927.169,660.018 927.729,677.995 928.288,696.191 928.847,679.037 929.406,693.845 929.966,678.445 930.525,679.053 931.084,665.625 931.644,646.831 932.203,664.449 932.762,664.277 933.321,650.583 933.881,650.821 934.44,603.765 934.999,624.676 935.558,642.804 936.118,625.537 936.677,627.095 937.236,628.763 937.795,649.544 938.355,633.066 938.914,637.081 939.473,654.136 940.032,622.151 940.592,639.678 941.151,608.919 941.71,584.021 942.269,605.443 942.829,623.934 943.388,631.152 943.947,663.255 944.506,663.092 945.066,679.991 945.625,681.003 946.184,682.148 946.743,649.883 947.303,682.474 947.862,699.492 948.421,701.175 948.98,686.009 949.54,688.167 950.099,720.183 950.658,700.815 951.217,686.479 951.777,667.77 952.336,685.848 952.895,717.646 953.454,735.37 954.014,716.101 954.573,700.608 955.132,715.248 955.691,698.79 956.251,700.694 956.81,717.316 957.369,750.672 957.928,747.497 958.488,729.124 959.047,694.291 959.606,676.135 960.165,676.66 960.725,709.436 961.284,708.474 961.843,755.391 962.402,732.215 962.962,712.221 963.521,713.503 964.08,713.963 964.639,712.207 965.199,712.623 965.758,710.713 966.317,708.804 966.876,723.557 967.436,738.341 967.995,751.166 968.554,792.841 969.113,777.275 969.673,739.419 970.232,738.23 970.791,752.662 971.35,734.303 971.91,713.778 972.469,728.652 973.028,744.592 973.587,738.092 974.147,703.436 974.706,703.182 975.265,718.252 975.824,717.166 976.384,744.591 976.943,759.198 977.502,719.89 978.061,750.597 978.621,778.677 979.18,808.058 979.739,814.619 980.298,825.445 980.858,816.347 981.417,825.273 981.976,834.98 982.535,763.874 983.095,759.909 983.654,754.676 984.213,766.278 984.772,746.713 985.332,759.356 985.891,740.829 986.45,751.474 987.009,744.726 987.569,722.696 988.128,701.099 988.687,748.021 989.246,744.424 989.806,726.506 990.365,708.671 990.924,722.916 991.483,724.616 992.043,737.441 992.602,688.455 993.161,688.243 993.72,677.335 994.28,694.548 994.839,728.37 995.398,693.617 995.957,645.917 996.517,615.704 997.076,584.102 997.635,588.724 998.194,610.003 998.754,646.619 999.313,630.693 999.872,633.58 1000.43,652.722 1000.99,686.985 1001.55,703.307 1002.11,700.783 1002.67,747.179 1003.23,713.212 1003.79,709.499 1004.35,723.919 1004.91,738.184 1005.46,712.982 1006.02,697.906 1006.58,682.135 1007.14,665.083 1007.7,651.557 1008.26,671.213 1008.82,669.565 1009.38,666.239 1009.94,666.326 1010.5,634.459 1011.06,668.656 1011.62,668.92 1012.18,670.445 1012.73,672.524 1013.29,703.701 1013.85,702.429 1014.41,717.628 1014.97,684.226 1015.53,651.023 1016.09,651.491 1016.65,653.614 1017.21,639.248 1017.77,636.403 1018.33,574.162 1018.89,579.489 1019.45,600.287 1020.01,622.208 1020.56,611.174 1021.12,585.595 1021.68,575.61 1022.24,580.205 1022.8,632.031 1023.36,650.603 1023.92,669.397 1024.48,620.618 1025.04,639.937 1025.6,672.996 1026.16,673.148 1026.72,640.623 1027.28,676.232 1027.83,706.019 1028.39,691.385 1028.95,707.877 1029.51,724.384 1030.07,723.793 1030.63,738.416 1031.19,765.004 1031.75,791.592 1032.31,799.998 1032.87,811.468 1033.43,791.263 1033.99,789.794 1034.55,814.543 1035.1,791.974 1035.66,738.342 1036.22,750.489 1036.78,749.18 1037.34,776.776 1037.9,770.557 1038.46,764.004 1039.02,709.475 1039.58,709.452 1040.14,675.921 1040.7,661.412 1041.26,648.216 1041.82,650.413 1042.38,639.684 1042.93,639.805 1043.49,641.567 1044.05,627.006 1044.61,610.83 1045.17,632.239 1045.73,698.938 1046.29,698.423 1046.85,715.223 1047.41,727.85 1047.97,743.978 1048.53,727.516 1049.09,744.676 1049.65,740.26 1050.2,755.529 1050.76,750.281 1051.32,765.894 1051.88,744.375 1052.44,739.76 1053,734.939 1053.56,733.288 1054.12,734.193 1054.68,732.369 1055.24,730.8 1055.8,730.132 1056.36,676.472 1056.92,660.19 1057.48,659.955 1058.03,666.171 1058.59,668.628 1059.15,668.687 1059.71,669.95 1060.27,668.914 1060.83,668.934 1061.39,668.932 1061.95,684.747 1062.51,684.761 1063.07,671.779 1063.63,689.199 1064.19,677.018 1064.75,676.7 1065.3,644.966 1065.86,649.566 1066.42,651.165 1066.98,650.702 1067.54,689.054 1068.1,688.981 1068.66,673.622 1069.22,705.978 1069.78,706.39 1070.34,703.152 1070.9,704.763 1071.46,716.722 1072.02,718.348 1072.57,703.494 1073.13,699.142 1073.69,698.497 1074.25,679.011 1074.81,679.159 1075.37,694.95 1075.93,710.081 1076.49,707.838 1077.05,673.749 1077.61,691.02 1078.17,690.07 1078.73,658.921 1079.29,628.624 1079.85,614.428 1080.4,584.098 1080.96,590.333 1081.52,593.23 1082.08,629.716 1082.64,616.571 1083.2,637.641 1083.76,686.979 1084.32,665.925 1084.88,666.72 1085.44,666.241 1086,651.963 1086.56,654.003 1087.12,689.389 1087.67,675.276 1088.23,691.247 1088.79,672.88 1089.35,690.251 1089.91,673.163 1090.47,722.527 1091.03,723.485 1091.59,703.756 1092.15,687.114 1092.71,687.662 1093.27,688.54 1093.83,689.902 1094.39,692.161 1094.94,694.387 1095.5,694.396 1096.06,691.602 1096.62,642.181 1097.18,642.596 1097.74,661.74 1098.3,648.81 1098.86,587.18 1099.42,560.928 1099.98,565.807 1100.54,588.4 1101.1,611.173 1101.66,596.816 1102.22,615.488 1102.77,633.244 1103.33,632.84 1103.89,651.182 1104.45,652.602 1105.01,669.454 1105.57,686.745 1106.13,638.856 1106.69,591.134 1107.25,580.924 1107.81,600.718 1108.37,590.313 1108.93,612.613 1109.49,616.937 1110.04,621.802 1110.6,625.763 1111.16,649.701 1111.72,666.846 1112.28,667.255 1112.84,636.205 1113.4,611.036 1113.96,614.175 1114.52,652.38 1115.08,652.615 1115.64,653.723 1116.2,638.022 1116.76,624.079 1117.31,628.64 1117.87,631.075 1118.43,617.094 1118.99,637.373 1119.55,656.995 1120.11,690.434 1120.67,690.362 1121.23,671.716 1121.79,671.225 1122.35,671.669 1122.91,668.905 1123.47,670.182 1124.03,672.837 1124.59,721.935 1125.14,719.255 1125.7,733.047 1126.26,715.826 1126.82,682.385 1127.38,681.497 1127.94,682.82 1128.5,669.408 1129.06,618.186 1129.62,603.993 1130.18,595.271 1130.74,564.139 1131.3,570.759 1131.86,576.458 1132.41,585.369 1132.97,591.338 1133.53,580.65 1134.09,570.582 1134.65,625.546 1135.21,645.054 1135.77,661.41 1136.33,696.319 1136.89,694.704 1137.45,711.759 1138.01,744.427 1138.57,739.746 1139.13,738.518 1139.68,720.236 1140.24,751.768 1140.8,750.02 1141.36,762.953 1141.92,761.298 1142.48,771.709 1143.04,735.878 1143.6,747.107 1144.16,758.468 1144.72,751.785 1145.28,730.324 1145.84,712.071 1146.4,740.949 1146.96,787.464 1147.51,799.841 1148.07,795.809 1148.63,773.459 1149.19,735.767 1149.75,750.665 1150.31,762.202 1150.87,744.259 1151.43,726.649 1151.99,713.828 1152.55,728.645 1153.11,724.54 1153.67,721.581 1154.23,671.121 1154.78,671.437 1155.34,655.376 1155.9,690.606 1156.46,675.485 1157.02,690.507 1157.58,690.271 1158.14,722.156 1158.7,722.017 1159.26,721.396 1159.82,685.174 1160.38,668.521 1160.94,666.39 1161.5,681.561 1162.05,645.979 1162.61,682.249 1163.17,696.331 1163.73,633.332 1164.29,619.872 1164.85,638.562 1165.41,624.537 1165.97,658.657 1166.53,633.034 1167.09,666.886 1167.65,667.7 1168.21,667.153 1168.77,686.48 1169.33,702.313 1169.88,697.874 1170.44,710.226 1171,738.958 1171.56,769.036 1172.12,750.668 1172.68,799.339 1173.24,794.273 1173.8,804.079 1174.36,799.766 1174.92,795.236 1175.48,820.201 1176.04,814.973 1176.6,790.272 1177.15,778.655 1177.71,790.261 1178.27,771.137 1178.83,783.887 1179.39,799.147 1179.95,774.634 1180.51,771.844 1181.07,784.499 1181.63,797.228 1182.19,808.807 1182.75,804.985 1183.31,800.478 1183.87,781.142 1184.43,761.186 1184.98,755.929 1185.54,785.33 1186.1,777.313 1186.66,772.237 1187.22,768.577 1187.78,779.399 1188.34,760.274 1188.9,757.071 1189.46,769.651 1190.02,765.165 1190.58,759.18 1191.14,820.291 1191.7,779.229 1192.25,792.909 1192.81,784.284 1193.37,776.773 1193.93,753.676 1194.49,768.074 1195.05,782.084 1195.61,780.578 1196.17,758.983 1196.73,755.028 1197.29,735.587 1197.85,699.624 1198.41,664.498 1198.97,650.31 1199.52,599.389 1200.08,617.963 1200.64,621.676 1201.2,577.427 1201.76,580.661 1202.32,585.053 1202.88,605.747 1203.44,595.918 1204,601.877 1204.56,540.263 1205.12,497.273 1205.68,525.079 1206.24,502.622 1206.8,495.645 1207.35,489.586 1207.91,496.381 1208.47,489.593 1209.03,500.947 1209.59,557.389 1210.15,563.001 1210.71,570.811 1211.27,594.998 1211.83,599.093 1212.39,618.723 1212.95,637.318 1213.51,640.41 1214.07,629.521 1214.62,650.543 1215.18,636.739 1215.74,643.025 1216.3,678.929 1216.86,676.045 1217.42,677.428 1217.98,694.972 1218.54,680.427 1219.1,665.63 1219.66,668.115 1220.22,671.459 1220.78,685.748 1221.34,720.901 1221.89,688.053 1222.45,703.094 1223.01,687.994 1223.57,703.663 1224.13,666.832 1224.69,700.154 1225.25,685.502 1225.81,689.282 1226.37,655.02 1226.93,638.584 1227.49,675.046 1228.05,675.175 1228.61,646.982 1229.17,651.369 1229.72,638.51 1230.28,660.034 1230.84,693.564 1231.4,695.266 1231.96,646.593 1232.52,661.927 1233.08,675.575 1233.64,688.736 1234.2,677.057 1234.76,674.693 1235.32,656.179 1235.88,625.351 1236.44,642.194 1236.99,643.208 1237.55,644.499 1238.11,678.191 1238.67,684.071 1239.23,685.182 1239.79,683.77 1240.35,696.458 1240.91,682.66 1241.47,702.658 1242.03,671.647 1242.59,655.597 1243.15,670.75 1243.71,686.239 1244.26,683.484 1244.82,684.762 1245.38,718.973 1245.94,733.426 1246.5,695.143 1247.06,709.867 1247.62,724.831 1248.18,721.081 1248.74,719.491 1249.3,703.087 1249.86,701.66 1250.42,699.701 1250.98,700.548 1251.54,683.976 1252.09,668.881 1252.65,687.33 1253.21,682.883 1253.77,652.187 1254.33,701.072 1254.89,681.322 1255.45,666.06 1256.01,654.547 1256.57,655.729 1257.13,677.576 1257.69,693.103 1258.25,693.73 1258.81,677.096 1259.36,675.03 1259.92,678.596 1260.48,664.024 1261.04,633.126 1261.6,634.976 1262.16,637.288 1262.72,627.424 1263.28,616.278 1263.84,651.703 1264.4,654.204 1264.96,655.544 1265.52,657.05 1266.08,657.328 1266.63,689.935 1267.19,685.176 1267.75,717.387 1268.31,716.307 1268.87,761.788 1269.43,712.497 1269.99,677.898 1270.55,699.891 1271.11,714.237 1271.67,711.51 1272.23,739.012 1272.79,734.885 1273.35,729.059 1273.91,730.077 1274.46,744.842 1275.02,743.161 1275.58,756.028 1276.14,719.908 1276.7,737.869 1277.26,736.465 1277.82,715.596 1278.38,697.604 1278.94,711.822 1279.5,710.583 1280.06,728.193 1280.62,727.783 1281.18,698.434 1281.73,697.925 1282.29,713.328 1282.85,713.985 1283.41,695.602 1283.97,725.975 1284.53,724.597 1285.09,721.535 1285.65,735.681 1286.21,682.582 1286.77,695.199 1287.33,693.159 1287.89,676.229 1288.45,710.355 1289,708.499 1289.56,723.582 1290.12,723.814 1290.68,706.441 1291.24,723.547 1291.8,710.344 1292.36,672.943 1292.92,673.743 1293.48,688.736 1294.04,687.997 1294.6,689.691 1295.16,670.209 1295.72,689.999 1296.28,688.313 1296.83,688.769 1297.39,654.544 1297.95,653.818 1298.51,717.423 1299.07,688.416 1299.63,685.968 1300.19,670.782 1300.75,675.109 1301.31,656.426 1301.87,656.752 1302.43,626.303 1302.99,612.331 1303.55,601.306 1304.1,607.842 1304.66,654.895 1305.22,638.905 1305.78,610.317 1306.34,599.099 1306.9,635.992 1307.46,621.993 1308.02,629.948 1308.58,664.567 1309.14,653.247 1309.7,656.372 1310.26,674.607 1310.82,626.985 1311.38,646.213 1311.93,647.244 1312.49,650.159 1313.05,682.33 1313.61,662.321 1314.17,630.708 1314.73,647.169 1315.29,646.133 1315.85,677.931 1316.41,680.632 1316.97,694.203 1317.53,716.593 1318.09,715.683 1318.65,683.531 1319.2,683.847 1319.76,748.239 1320.32,790.415 1320.88,768.336 1321.44,736.928 1322,716.405 1322.56,680.488 1323.12,647.967 1323.68,663.508 1324.24,665.232 1324.8,683.191 1325.36,667.076 1325.92,668.333 1326.47,702.351 1327.03,731.748 1327.59,695.687 1328.15,707.51 1328.71,702.894 1329.27,701.932 1329.83,746 1330.39,744.216 1330.95,743.79 1331.51,706.532 1332.07,623.43 1332.63,633.075 1333.19,685.412 1333.75,650.859 1334.3,654.064 1334.86,639.07 1335.42,661.061 1335.98,660.495 1336.54,694.672 1337.1,728.396 1337.66,758.097 1338.22,772.268 1338.78,767.735 1339.34,729.983 1339.9,758.27 1340.46,754.063 1341.02,720.302 1341.57,717.61 1342.13,684.729 1342.69,654.718 1343.25,656.543 1343.81,639.666 1344.37,636.579 1344.93,620.615 1345.49,637.91 1346.05,624.458 1346.61,630.937 1347.17,649.755 1347.73,636.076 1348.29,625.323 1348.84,629.198 1349.4,664.223 1349.96,650.819 1350.52,652.854 1351.08,621.827 1351.64,624.177 1352.2,621.991 1352.76,628.78 1353.32,649.821 1353.88,698.652 1354.44,696.124 1355,698.245 1355.56,712.614 1356.12,726.06 1356.67,724.001 1357.23,721.303 1357.79,753.531 1358.35,752.192 1358.91,745.56 1359.47,773.463 1360.03,770.397 1360.59,749.908 1361.15,794.138 1361.71,791.374 1362.27,771.154 1362.83,749.037 1363.39,730.189 1363.94,744.728 1364.5,740.249 1365.06,706.723 1365.62,687.296 1366.18,684.297 1366.74,665.889 1367.3,665.331 1367.86,664.938 1368.42,667.124 1368.98,667.826 1369.54,672.646 1370.1,688.172 1370.66,699.808 1371.21,700.011 1371.77,680.619 1372.33,682.885 1372.89,698.23 1373.45,647.658 1374.01,583.062 1374.57,604.258 1375.13,607.814 1375.69,598.557 1376.25,620.426 1376.81,623.092 1377.37,628.652 1377.93,613.542 1378.49,614.495 1379.04,604.49 1379.6,592.479 1380.16,594.206 1380.72,617.932 1381.28,636.838 1381.84,638.382 1382.4,607.267 1382.96,628.577 1383.52,617.466 1384.08,604.724 1384.64,622.382 1385.2,591.987 1385.76,580.415 1386.31,602.77 1386.87,621.467 1387.43,659.876 1387.99,642.035 1388.55,644.641 1389.11,629.831 1389.67,619.438 1390.23,656.598 1390.79,690.535 1391.35,689.482 1391.91,707.828 1392.47,691.009 1393.03,674.694 1393.58,674.001 1394.14,688.175 1394.7,736.037 1395.26,731.332 1395.82,762.118 1396.38,791.629 1396.94,830.493 1397.5,774.043 1398.06,801.259 1398.62,776.883 1399.18,758.42 1399.74,725.817 1400.3,741.242 1400.86,728.272 1401.41,725.455 1401.97,753.381 1402.53,767.924 1403.09,763.993 1403.65,793.148 1404.21,769.568 1404.77,729.781 1405.33,727.149 1405.89,710.381 1406.45,706.652 1407.01,705.56 1407.57,740.605 1408.13,784.387 1408.68,762.18 1409.24,775.252 1409.8,740.181 1410.36,716.739 1410.92,700.69 1411.48,714.644 1412.04,743.635 1412.6,754.204 1413.16,766.445 1413.72,773.839 1414.28,718.233 1414.84,715.964 1415.4,682.293 1415.95,681.367 1416.51,714.091 1417.07,682.19 1417.63,697.122 1418.19,727.502 1418.75,714.106 1419.31,697.092 1419.87,728.607 1420.43,743.21 1420.99,726.281 1421.55,755.33 1422.11,766.847 1422.67,767.319 1423.23,748.075 1423.78,714.264 1424.34,730.313 1424.9,725.811 1425.46,722.786 1426.02,719.98 1426.58,714.496 1427.14,727.609 1427.7,740.09 1428.26,703.014 1428.82,686.233 1429.38,667.963 1429.94,637.579 1430.5,625.838 1431.05,629.443 1431.61,667.89 1432.17,638.996 1432.73,650.673 1433.29,634.033 1433.85,636.448 1434.41,640.061 1434.97,674.464 1435.53,676.394 1436.09,660.326 1436.65,628.073 1437.21,646.891 1437.77,630.326 1438.33,630.317 1438.88,636.898 1439.44,602.842 1440,640.553 1440.56,628.359 1441.12,599.34 1441.68,617.37 1442.24,604.757 1442.8,606.021 1443.36,611.588 1443.92,613.699 1444.48,602.71 1445.04,588.825 1445.6,611.65 1446.15,629.811 1446.71,620.606 1447.27,608.468 1447.83,578.672 1448.39,601.054 1448.95,607.534 1449.51,614.398 1450.07,618.48 1450.63,638.653 1451.19,674.607 1451.75,691.941 1452.31,690.427 1452.87,655.272 1453.42,687.54 1453.98,655.998 1454.54,703.167 1455.1,699.127 1455.66,665.037 1456.22,684.055 1456.78,699.479 1457.34,683.086 1457.9,685.565 1458.46,702.845 1459.02,717.35 1459.58,665.364 1460.14,682.023 1460.7,664.542 1461.25,682.254 1461.81,680.976 1462.37,699.81 1462.93,714.292 1463.49,697.021 1464.05,663.362 1464.61,684.584 1465.17,638.227 1465.73,671.142 1466.29,719.905 1466.85,737.166 1467.41,753.311 1467.97,734.771 1468.52,718.111 1469.08,718.62 1469.64,736.704 1470.2,722.316 1470.76,721.134 1471.32,719.626 1471.88,731.282 1472.44,713.498 1473,697.111 1473.56,697.799 1474.12,683.689 1474.68,668.157 1475.24,668.816 1475.79,672.05 1476.35,675.304 1476.91,672.349 1477.47,686.358 1478.03,686.604 1478.59,685.11 1479.15,682.643 1479.71,697.259 1480.27,680.151 1480.83,681.763 1481.39,663.929 1481.95,648.253 1482.51,649.7 1483.07,668.118 1483.62,649.817 1484.18,671.252 1484.74,669.244 1485.3,683.237 1485.86,699.413 1486.42,716.29 1486.98,694.241 1487.54,709.915 1488.1,724.589 1488.66,658.088 1489.22,646.898 1489.78,613.707 1490.34,632.195 1490.89,615.888 1491.45,637.44 1492.01,641.794 1492.57,611.937 1493.13,650.755 1493.69,653.39 1494.25,671.889 1494.81,690.144 1495.37,706.444 1495.93,689.87 1496.49,687.39 1497.05,701.06 1497.61,713.491 1498.16,745.034 1498.72,721.612 1499.28,716.136 1499.84,649.612 1500.4,671.258 1500.96,672.106 1501.52,692.858 1502.08,708.79 1502.64,656.965 1503.2,658.259 1503.76,645.393 1504.32,646.031 1504.88,648.862 1505.44,666.97 1505.99,700.65 1506.55,684.14 1507.11,697.661 1507.67,694.621 1508.23,709.932 1508.79,676.579 1509.35,656.278 1509.91,670.645 1510.47,700.595 1511.03,699.734 1511.59,718.465 1512.15,728.649 1512.71,711.343 1513.26,726.099 1513.82,705.792 1514.38,723.97 1514.94,721.77 1515.5,717.796 1516.06,717.37 1516.62,714.227 1517.18,714.045 1517.74,676.993 1518.3,661.603 1518.86,679.126 1519.42,647.719 1519.98,632.536 1520.53,637.945 1521.09,675.437 1521.65,660.745 1522.21,664.321 1522.77,663.381 1523.33,646.284 1523.89,682.54 1524.45,699.881 1525.01,683.267 1525.57,683.911 1526.13,750.782 1526.69,717.466 1527.25,700.266 1527.81,701.012 1528.36,699.411 1528.92,682.699 1529.48,647.915 1530.04,637.175 1530.6,642.009 1531.16,693.95 1531.72,729.59 1532.28,714.286 1532.84,732.367 1533.4,743.03 1533.96,722.401 1534.52,706.763 1535.08,740.209 1535.63,771.017 1536.19,766.266 1536.75,742.119 1537.31,724.262 1537.87,685.455 1538.43,670.109 1538.99,670.981 1539.55,671.15 1540.11,687.717 1540.67,738.455 1541.23,747.655 1541.79,723.631 1542.35,705.001 1542.9,721.181 1543.46,752.247 1544.02,765.799 1544.58,715.707 1545.14,694.805 1545.7,729.136 1546.26,757.978 1546.82,755.974 1547.38,750.25 1547.94,729.83 1548.5,712.297 1549.06,673.42 1549.62,705.913 1550.18,652.215 1550.73,607.068 1551.29,609.704 1551.85,612.556 1552.41,616.836 1552.97,636.365 1553.53,641.755 1554.09,641.968 1554.65,643.097 1555.21,582.645 1555.77,621.798 1556.33,589.303 1556.89,581.129 1557.45,603.347 1558,595.285 1558.56,604.543 1559.12,592.197 1559.68,628.197 1560.24,664.151 1560.8,715.318 1561.36,711.178 1561.92,724.925 1562.48,691.845 1563.04,707.248 1563.6,672.927 1564.16,674.652 1564.72,672.367 1565.28,658.002 1565.83,654.953 1566.39,625.76 1566.95,643.872 1567.51,660.635 1568.07,661.722 1568.63,681.725 1569.19,681.01 1569.75,682.537 1570.31,729.6 1570.87,775.277 1571.43,739.435 1571.99,751.352 1572.55,763.309 1573.1,763.458 1573.66,773.3 1574.22,783.853 1574.78,762.673 1575.34,728.421 1575.9,730.128 1576.46,743.81 1577.02,720.961 1577.58,738.419 1578.14,736.539 1578.7,717.188 1579.26,746.727 1579.82,758.935 1580.37,754.444 1580.93,717.684 1581.49,716.505 1582.05,713.947 1582.61,682.413 1583.17,695.658 1583.73,712.615 1584.29,712.55 1584.85,678.722 1585.41,693.851 1585.97,690.47 1586.53,706.058 1587.09,690.842 1587.65,642.526 1588.2,694.055 1588.76,696.583 1589.32,696.146 1589.88,679.836 1590.44,662.366 1591,614.804 1591.56,618.627 1592.12,653.275 1592.68,672.12 1593.24,674.314 1593.8,675.537 1594.36,677.117 1594.92,677.553 1595.47,676.201 1596.03,674.507 1596.59,671.647 1597.15,657.101 1597.71,642.622 1598.27,627.091 1598.83,664.674 1599.39,666.194 1599.95,664.943 1600.51,682.541 1601.07,701.904 1601.63,734.898 1602.19,731.977 1602.74,711.657 1603.3,756.94 1603.86,750.659 1604.42,728.252 1604.98,712.934 1605.54,730.596 1606.1,674.977 1606.66,675.317 1607.22,674.429 1607.78,691.721 1608.34,706.881 1608.9,707.974 1609.46,721.863 1610.02,719.519 1610.57,713.749 1611.13,742.572 1611.69,773.817 1612.25,770.985 1612.81,778.306 1613.37,757.74 1613.93,735.528 1614.49,733.559 1615.05,763.334 1615.61,792.119 1616.17,768.239 1616.73,764.01 1617.29,777.532 1617.84,771.239 1618.4,766.472 1618.96,731.313 1619.52,714.235 1620.08,728.871 1620.64,726.355 1621.2,759.293 1621.76,738.822 1622.32,750.288 1622.88,760.517 1623.44,757.924 1624,785.469 1624.56,797.254 1625.11,774.815 1625.67,787.651 1626.23,780.07 1626.79,759.143 1627.35,771.26 1627.91,749.254 1628.47,681.415 1629.03,680.826 1629.59,682.727 1630.15,680.558 1630.71,681.181 1631.27,679.033 1631.83,698.663 1632.39,665.955 1632.94,651.171 1633.5,636.654 1634.06,654.919 1634.62,608.748 1635.18,629.823 1635.74,634.836 1636.3,620.639 1636.86,608.385 1637.42,597.759 1637.98,584.058 1638.54,608.242 1639.1,628.635 1639.66,634.202 1640.21,638.48 1640.77,639.591 1641.33,640.917 1641.89,617.118 1642.45,639.574 1643.01,662.159 1643.57,683.46 1644.13,686.418 1644.69,719.264 1645.25,713.163 1645.81,742.687 1646.37,693.001 1646.93,693.062 1647.48,741.522 1648.04,742.347 1648.6,720.774 1649.16,703.407 1649.72,723.224 1650.28,655.697 1650.84,612.163 1651.4,631.995 1651.96,652.206 1652.52,638.032 1653.08,641.398 1653.64,645.03 1654.2,665.185 1654.76,668.209 1655.31,654.268 1655.87,639.354 1656.43,661.4 1656.99,663.992 1657.55,679.78 1658.11,686.308 1658.67,689.22 1659.23,705.04 1659.79,689.299 1660.35,707.839 1660.91,706.622 1661.47,689.798 1662.03,689.942 1662.58,671.697 1663.14,655.381 1663.7,657.053 1664.26,642.656 1664.82,626.178 1665.38,663.029 1665.94,646.868 1666.5,652.926 1667.06,671.351 1667.62,670.06 1668.18,683.878 1668.74,686.481 1669.3,714.573 1669.85,697.801 1670.41,728.4 1670.97,659.847 1671.53,661.249 1672.09,650.134 1672.65,667.554 1673.21,700.511 1673.77,679.341 1674.33,680.443 1674.89,661.802 1675.45,644.003 1676.01,647.081 1676.57,652.347 1677.13,671.697 1677.68,643.83 1678.24,645.746 1678.8,648.04 1679.36,679.959 1679.92,665.962 1680.48,681.314 1681.04,679.507 1681.6,697.54 1682.16,697.013 1682.72,692.327 1683.28,709.096 1683.84,689.116 1684.4,672.198 1684.95,654.336 1685.51,655.175 1686.07,656.03 1686.63,673.441 1687.19,639.255 1687.75,602.653 1688.31,640.206 1688.87,659.092 1689.43,647.018 1689.99,603.649 1690.55,588.952 1691.11,610.678 1691.67,634.798 1692.23,652.967 1692.78,622.436 1693.34,591.802 1693.9,613.278 1694.46,618.424 1695.02,621.153 1695.58,611.172 1696.14,614.426 1696.7,622.155 1697.26,592.145 1697.82,611.728 1698.38,615.339 1698.94,584.108 1699.5,604.119 1700.05,671.222 1700.61,673.706 1701.17,702.681 1701.73,731.308 1702.29,710.065 1702.85,709.673 1703.41,724.415 1703.97,737.815 1704.53,734.034 1705.09,713.451 1705.65,678.343 1706.21,712.181 1706.77,695.687 1707.32,661.729 1707.88,664.777 1708.44,667.343 1709,667.866 1709.56,654.647 1710.12,657.598 1710.68,658.512 1711.24,677.302 1711.8,659.035 1712.36,662.531 1712.92,662.925 1713.48,647.082 1714.04,693.512 1714.6,659.195 1715.15,645.334 1715.71,647.882 1716.27,646.562 1716.83,645.807 1717.39,647.688 1717.95,699.597 1718.51,698.525 1719.07,679.277 1719.63,713.435 1720.19,712.594 1720.75,731.222 1721.31,729.983 1721.87,723.112 1722.42,755.056 1722.98,781.776 1723.54,791.752 1724.1,771.731 1724.66,783.624 1725.22,780.238 1725.78,793.079 1726.34,789.362 1726.9,737.396 1727.46,753.01 1728.02,752.354 1728.58,732.679 1729.14,729.528 1729.69,710.488 1730.25,722.793 1730.81,705.544 1731.37,735.537 1731.93,719.575 1732.49,716.587 1733.05,671.199 1733.61,656.621 1734.17,610.641 1734.73,634.791 1735.29,638.967 1735.85,640.527 1736.41,660.094 1736.97,675.221 1737.52,691.152 1738.08,691.923 1738.64,722.298 1739.2,689.786 1739.76,690.428 1740.32,691.589 1740.88,657.461 1741.44,643.484 1742,648.938 1742.56,669.22 1743.12,719.521 1743.68,716.925 1744.24,742.675 1744.79,756.763 1745.35,735.146 1745.91,701.201 1746.47,652.223 1747.03,671.389 1747.59,670.34 1748.15,623.142 1748.71,613.047 1749.27,637.143 1749.83,624.597 1750.39,658.617 1750.95,643.375 1751.51,647.793 1752.06,633.361 1752.62,655.634 1753.18,656.765 1753.74,657.612 1754.3,657.632 1754.86,674.133 1755.42,721.35 1755.98,724.669 1756.54,708.106 1757.1,692.393 1757.66,674.194 1758.22,688.918 1758.78,658.024 1759.34,642.966 1759.89,629.146 1760.45,614.477 1761.01,637.935 1761.57,670.229 1762.13,670.308 1762.69,672.551 1763.25,691.936 1763.81,736.671 1764.37,735.562 1764.93,781.992 1765.49,762.308 1766.05,755.528 1766.61,734.485 1767.16,719.807 1767.72,734.728 1768.28,766.766 1768.84,729.289 1769.4,712.078 1769.96,711.266 1770.52,710.099 1771.08,724.27 1771.64,718.553 1772.2,735.373 1772.76,751.133 1773.32,748.932 1773.88,725.427 1774.43,755.877 1774.99,720.034 1775.55,763.447 1776.11,758.796 1776.67,755.729 1777.23,748.835 1777.79,762.668 1778.35,734.554 1778.91,780.903 1779.47,757.004 1780.03,765.782 1780.59,730.833 1781.15,709.269 1781.71,723.973 1782.26,706.69 1782.82,689.819 1783.38,690.827 1783.94,708.663 1784.5,692.873 1785.06,773.966 1785.62,755.242 1786.18,734.027 1786.74,712.799 1787.3,677.201 1787.86,675.569 1788.42,691.246 1788.98,708.635 1789.53,710.842 1790.09,712.027 1790.65,697.417 1791.21,696.526 1791.77,709.752 1792.33,711.664 1792.89,680.009 1793.45,663.152 1794.01,631.466 1794.57,662.651 1795.13,634.571 1795.69,667.248 1796.25,634.841 1796.8,607.016 1797.36,608.811 1797.92,642.43 1798.48,628.249 1799.04,635.494 1799.6,636.247 1800.16,653.548 1800.72,669.088 1801.28,686.308 1801.84,703.338 1802.4,634.816 1802.96,699.824 1803.52,714.389 1804.08,729.163 1804.63,679.658 1805.19,698.345 1805.75,666.251 1806.31,666.509 1806.87,717.477 1807.43,700.161 1807.99,683.54 1808.55,683.562 1809.11,682.799 1809.67,682.112 1810.23,698.792 1810.79,697.385 1811.35,660.577 1811.9,662.166 1812.46,662.84 1813.02,668.061 1813.58,684.009 1814.14,683.189 1814.7,696.708 1815.26,713.636 1815.82,713.711 1816.38,682.618 1816.94,697.784 1817.5,712.528 1818.06,729.583 1818.62,709.236 1819.18,708.853 1819.73,707.421 1820.29,710.449 1820.85,692.602 1821.41,698.096 1821.97,715.34 1822.53,694.461 1823.09,663.233 1823.65,682.767 1824.21,667.967 1824.77,699.92 1825.33,686.364 1825.89,688.854 1826.45,673.407 1827,677.836 1827.56,696.789 1828.12,695.795 1828.68,711.426 1829.24,696.449 1829.8,710.797 1830.36,695.378 1830.92,661.517 1831.48,679.451 1832.04,684.828 1832.6,668.557 1833.16,670.354 1833.72,705.571 1834.27,702.526 1834.83,665.712 1835.39,680.777 1835.95,714.392 1836.51,712.227 1837.07,724.689 1837.63,688.406 1838.19,688.144 \"/>\n<path clip-path=\"url(#clip843)\" d=\"M720.247 691.783 L720.806 691.783 L721.365 691.783 L721.924 691.783 L722.484 691.783 L723.043 691.783 L723.602 691.783 L724.161 691.783 L724.721 691.783 L725.28 691.783 L725.839 691.783 L726.398 691.783 L726.958 691.783 L727.517 691.783 L728.076 691.783 L728.635 691.783 L729.195 691.783 L729.754 691.783 L730.313 691.783 L730.872 691.783 L731.432 691.783 L731.991 691.783 L732.55 691.783 L733.109 691.783 L733.669 691.783 L734.228 691.783 L734.787 691.783 L735.346 691.783 L735.906 691.783 L736.465 691.783 L737.024 691.783 L737.583 691.783 L738.143 691.783 L738.702 691.783 L739.261 691.783 L739.82 691.783 L740.38 691.783 L740.939 691.783 L741.498 691.783 L742.057 691.783 L742.617 691.783 L743.176 691.783 L743.735 691.783 L744.294 691.783 L744.854 691.783 L745.413 691.783 L745.972 691.783 L746.531 691.783 L747.091 691.783 L747.65 691.783 L748.209 691.783 L748.768 691.783 L749.328 691.783 L749.887 691.783 L750.446 691.783 L751.005 691.783 L751.565 691.783 L752.124 691.783 L752.683 691.783 L753.242 691.783 L753.802 691.783 L754.361 691.783 L754.92 691.783 L755.479 691.783 L756.039 691.783 L756.598 691.783 L757.157 691.783 L757.716 691.783 L758.276 691.783 L758.835 691.783 L759.394 691.783 L759.953 691.783 L760.513 691.783 L761.072 691.783 L761.631 691.783 L762.19 691.783 L762.75 691.783 L763.309 691.783 L763.868 691.783 L764.427 691.783 L764.987 691.783 L765.546 691.783 L766.105 691.783 L766.664 691.783 L767.224 691.783 L767.783 691.783 L768.342 691.783 L768.901 691.783 L769.461 691.783 L770.02 691.783 L770.579 691.783 L771.138 691.783 L771.698 691.783 L772.257 691.783 L772.816 691.783 L773.375 691.783 L773.935 691.783 L774.494 691.783 L775.053 691.783 L775.612 691.783 L776.172 691.783 L776.731 691.783 L777.29 691.783 L777.849 691.783 L778.409 691.783 L778.968 691.783 L779.527 691.783 L780.086 691.783 L780.646 691.783 L781.205 691.783 L781.764 691.783 L782.323 691.783 L782.883 691.783 L783.442 691.783 L784.001 691.783 L784.56 691.783 L785.12 691.783 L785.679 691.783 L786.238 691.783 L786.797 691.783 L787.357 691.783 L787.916 691.783 L788.475 691.783 L789.034 691.783 L789.594 691.783 L790.153 691.783 L790.712 691.783 L791.271 691.783 L791.831 691.783 L792.39 691.783 L792.949 691.783 L793.508 691.783 L794.068 691.783 L794.627 691.783 L795.186 691.783 L795.745 691.783 L796.305 691.783 L796.864 691.783 L797.423 691.783 L797.982 691.783 L798.542 691.783 L799.101 691.783 L799.66 691.783 L800.219 691.783 L800.779 691.783 L801.338 691.783 L801.897 691.783 L802.456 691.783 L803.016 691.783 L803.575 691.783 L804.134 691.783 L804.693 691.783 L805.253 691.783 L805.812 691.783 L806.371 691.783 L806.931 691.783 L807.49 691.783 L808.049 691.783 L808.608 691.783 L809.168 691.783 L809.727 691.783 L810.286 691.783 L810.845 691.783 L811.405 691.783 L811.964 691.783 L812.523 691.783 L813.082 691.783 L813.642 691.783 L814.201 691.783 L814.76 691.783 L815.319 691.783 L815.879 691.783 L816.438 691.783 L816.997 691.783 L817.556 691.783 L818.116 691.783 L818.675 691.783 L819.234 691.783 L819.793 691.783 L820.353 691.783 L820.912 691.783 L821.471 691.783 L822.03 691.783 L822.59 691.783 L823.149 691.783 L823.708 691.783 L824.267 691.783 L824.827 691.783 L825.386 691.783 L825.945 691.783 L826.504 691.783 L827.064 691.783 L827.623 691.783 L828.182 691.783 L828.741 691.783 L829.301 691.783 L829.86 691.783 L830.419 691.783 L830.978 691.783 L831.538 691.783 L832.097 691.783 L832.656 691.783 L833.215 691.783 L833.775 691.783 L834.334 691.783 L834.893 691.783 L835.452 691.783 L836.012 691.783 L836.571 691.783 L837.13 691.783 L837.689 691.783 L838.249 691.783 L838.808 691.783 L839.367 691.783 L839.926 691.783 L840.486 691.783 L841.045 691.783 L841.604 691.783 L842.163 691.783 L842.723 691.783 L843.282 691.783 L843.841 691.783 L844.4 691.783 L844.96 691.783 L845.519 691.783 L846.078 691.783 L846.637 691.783 L847.197 691.783 L847.756 691.783 L848.315 691.783 L848.874 691.783 L849.434 691.783 L849.993 691.783 L850.552 691.783 L851.111 691.783 L851.671 691.783 L852.23 691.783 L852.789 691.783 L853.348 691.783 L853.908 691.783 L854.467 691.783 L855.026 691.783 L855.585 691.783 L856.145 691.783 L856.704 691.783 L857.263 691.783 L857.822 691.783 L858.382 691.783 L858.941 691.783 L859.5 691.783 L860.059 691.783 L860.619 691.783 L861.178 691.783 L861.737 691.783 L862.296 691.783 L862.856 691.783 L863.415 691.783 L863.974 691.783 L864.533 691.783 L865.093 691.783 L865.652 691.783 L866.211 691.783 L866.77 691.783 L867.33 691.783 L867.889 691.783 L868.448 691.783 L869.007 691.783 L869.567 691.783 L870.126 691.783 L870.685 691.783 L871.244 691.783 L871.804 691.783 L872.363 691.783 L872.922 691.783 L873.481 691.783 L874.041 691.783 L874.6 691.783 L875.159 691.783 L875.718 691.783 L876.278 691.783 L876.837 691.783 L877.396 691.783 L877.955 691.783 L878.515 691.783 L879.074 691.783 L879.633 691.783 L880.192 691.783 L880.752 691.783 L881.311 691.783 L881.87 691.783 L882.429 691.783 L882.989 691.783 L883.548 691.783 L884.107 691.783 L884.666 691.783 L885.226 691.783 L885.785 691.783 L886.344 691.783 L886.903 691.783 L887.463 691.783 L888.022 691.783 L888.581 691.783 L889.14 691.783 L889.7 691.783 L890.259 691.783 L890.818 691.783 L891.377 691.783 L891.937 691.783 L892.496 691.783 L893.055 691.783 L893.614 691.783 L894.174 691.783 L894.733 691.783 L895.292 691.783 L895.851 691.783 L896.411 691.783 L896.97 691.783 L897.529 691.783 L898.088 691.783 L898.648 691.783 L899.207 691.783 L899.766 691.783 L900.325 691.783 L900.885 691.783 L901.444 691.783 L902.003 691.783 L902.562 691.783 L903.122 691.783 L903.681 691.783 L904.24 691.783 L904.799 691.783 L905.359 691.783 L905.918 691.783 L906.477 691.783 L907.036 691.783 L907.596 691.783 L908.155 691.783 L908.714 691.783 L909.273 691.783 L909.833 691.783 L910.392 691.783 L910.951 691.783 L911.51 691.783 L912.07 691.783 L912.629 691.783 L913.188 691.783 L913.747 691.783 L914.307 691.783 L914.866 691.783 L915.425 691.783 L915.984 691.783 L916.544 691.783 L917.103 691.783 L917.662 691.783 L918.221 691.783 L918.781 691.783 L919.34 691.783 L919.899 691.783 L920.458 691.783 L921.018 691.783 L921.577 691.783 L922.136 691.783 L922.695 691.783 L923.255 691.783 L923.814 691.783 L924.373 691.783 L924.932 691.783 L925.492 691.783 L926.051 691.783 L926.61 691.783 L927.169 691.783 L927.729 691.783 L928.288 691.783 L928.847 691.783 L929.406 691.783 L929.966 691.783 L930.525 691.783 L931.084 691.783 L931.644 691.783 L932.203 691.783 L932.762 691.783 L933.321 691.783 L933.881 691.783 L934.44 691.783 L934.999 691.783 L935.558 691.783 L936.118 691.783 L936.677 691.783 L937.236 691.783 L937.795 691.783 L938.355 691.783 L938.914 691.783 L939.473 691.783 L940.032 691.783 L940.592 691.783 L941.151 691.783 L941.71 691.783 L942.269 691.783 L942.829 691.783 L943.388 691.783 L943.947 691.783 L944.506 691.783 L945.066 691.783 L945.625 691.783 L946.184 691.783 L946.743 691.783 L947.303 691.783 L947.862 691.783 L948.421 691.783 L948.98 691.783 L949.54 691.783 L950.099 691.783 L950.658 691.783 L951.217 691.783 L951.777 691.783 L952.336 691.783 L952.895 691.783 L953.454 691.783 L954.014 691.783 L954.573 691.783 L955.132 691.783 L955.691 691.783 L956.251 691.783 L956.81 691.783 L957.369 691.783 L957.928 691.783 L958.488 691.783 L959.047 691.783 L959.606 691.783 L960.165 691.783 L960.725 691.783 L961.284 691.783 L961.843 691.783 L962.402 691.783 L962.962 691.783 L963.521 691.783 L964.08 691.783 L964.639 691.783 L965.199 691.783 L965.758 691.783 L966.317 691.783 L966.876 691.783 L967.436 691.783 L967.995 691.783 L968.554 691.783 L969.113 691.783 L969.673 691.783 L970.232 691.783 L970.791 691.783 L971.35 691.783 L971.91 691.783 L972.469 691.783 L973.028 691.783 L973.587 691.783 L974.147 691.783 L974.706 691.783 L975.265 691.783 L975.824 691.783 L976.384 691.783 L976.943 691.783 L977.502 691.783 L978.061 691.783 L978.621 691.783 L979.18 691.783 L979.739 691.783 L980.298 691.783 L980.858 691.783 L981.417 691.783 L981.976 691.783 L982.535 691.783 L983.095 691.783 L983.654 691.783 L984.213 691.783 L984.772 691.783 L985.332 691.783 L985.891 691.783 L986.45 691.783 L987.009 691.783 L987.569 691.783 L988.128 691.783 L988.687 691.783 L989.246 691.783 L989.806 691.783 L990.365 691.783 L990.924 691.783 L991.483 691.783 L992.043 691.783 L992.602 691.783 L993.161 691.783 L993.72 691.783 L994.28 691.783 L994.839 691.783 L995.398 691.783 L995.957 691.783 L996.517 691.783 L997.076 691.783 L997.635 691.783 L998.194 691.783 L998.754 691.783 L999.313 691.783 L999.872 691.783 L1000.43 691.783 L1000.99 691.783 L1001.55 691.783 L1002.11 691.783 L1002.67 691.783 L1003.23 691.783 L1003.79 691.783 L1004.35 691.783 L1004.91 691.783 L1005.46 691.783 L1006.02 691.783 L1006.58 691.783 L1007.14 691.783 L1007.7 691.783 L1008.26 691.783 L1008.82 691.783 L1009.38 691.783 L1009.94 691.783 L1010.5 691.783 L1011.06 691.783 L1011.62 691.783 L1012.18 691.783 L1012.73 691.783 L1013.29 691.783 L1013.85 691.783 L1014.41 691.783 L1014.97 691.783 L1015.53 691.783 L1016.09 691.783 L1016.65 691.783 L1017.21 691.783 L1017.77 691.783 L1018.33 691.783 L1018.89 691.783 L1019.45 691.783 L1020.01 691.783 L1020.56 691.783 L1021.12 691.783 L1021.68 691.783 L1022.24 691.783 L1022.8 691.783 L1023.36 691.783 L1023.92 691.783 L1024.48 691.783 L1025.04 691.783 L1025.6 691.783 L1026.16 691.783 L1026.72 691.783 L1027.28 691.783 L1027.83 691.783 L1028.39 691.783 L1028.95 691.783 L1029.51 691.783 L1030.07 691.783 L1030.63 691.783 L1031.19 691.783 L1031.75 691.783 L1032.31 691.783 L1032.87 691.783 L1033.43 691.783 L1033.99 691.783 L1034.55 691.783 L1035.1 691.783 L1035.66 691.783 L1036.22 691.783 L1036.78 691.783 L1037.34 691.783 L1037.9 691.783 L1038.46 691.783 L1039.02 691.783 L1039.58 691.783 L1040.14 691.783 L1040.7 691.783 L1041.26 691.783 L1041.82 691.783 L1042.38 691.783 L1042.93 691.783 L1043.49 691.783 L1044.05 691.783 L1044.61 691.783 L1045.17 691.783 L1045.73 691.783 L1046.29 691.783 L1046.85 691.783 L1047.41 691.783 L1047.97 691.783 L1048.53 691.783 L1049.09 691.783 L1049.65 691.783 L1050.2 691.783 L1050.76 691.783 L1051.32 691.783 L1051.88 691.783 L1052.44 691.783 L1053 691.783 L1053.56 691.783 L1054.12 691.783 L1054.68 691.783 L1055.24 691.783 L1055.8 691.783 L1056.36 691.783 L1056.92 691.783 L1057.48 691.783 L1058.03 691.783 L1058.59 691.783 L1059.15 691.783 L1059.71 691.783 L1060.27 691.783 L1060.83 691.783 L1061.39 691.783 L1061.95 691.783 L1062.51 691.783 L1063.07 691.783 L1063.63 691.783 L1064.19 691.783 L1064.75 691.783 L1065.3 691.783 L1065.86 691.783 L1066.42 691.783 L1066.98 691.783 L1067.54 691.783 L1068.1 691.783 L1068.66 691.783 L1069.22 691.783 L1069.78 691.783 L1070.34 691.783 L1070.9 691.783 L1071.46 691.783 L1072.02 691.783 L1072.57 691.783 L1073.13 691.783 L1073.69 691.783 L1074.25 691.783 L1074.81 691.783 L1075.37 691.783 L1075.93 691.783 L1076.49 691.783 L1077.05 691.783 L1077.61 691.783 L1078.17 691.783 L1078.73 691.783 L1079.29 691.783 L1079.85 691.783 L1080.4 691.783 L1080.96 691.783 L1081.52 691.783 L1082.08 691.783 L1082.64 691.783 L1083.2 691.783 L1083.76 691.783 L1084.32 691.783 L1084.88 691.783 L1085.44 691.783 L1086 691.783 L1086.56 691.783 L1087.12 691.783 L1087.67 691.783 L1088.23 691.783 L1088.79 691.783 L1089.35 691.783 L1089.91 691.783 L1090.47 691.783 L1091.03 691.783 L1091.59 691.783 L1092.15 691.783 L1092.71 691.783 L1093.27 691.783 L1093.83 691.783 L1094.39 691.783 L1094.94 691.783 L1095.5 691.783 L1096.06 691.783 L1096.62 691.783 L1097.18 691.783 L1097.74 691.783 L1098.3 691.783 L1098.86 691.783 L1099.42 691.783 L1099.98 691.783 L1100.54 691.783 L1101.1 691.783 L1101.66 691.783 L1102.22 691.783 L1102.77 691.783 L1103.33 691.783 L1103.89 691.783 L1104.45 691.783 L1105.01 691.783 L1105.57 691.783 L1106.13 691.783 L1106.69 691.783 L1107.25 691.783 L1107.81 691.783 L1108.37 691.783 L1108.93 691.783 L1109.49 691.783 L1110.04 691.783 L1110.6 691.783 L1111.16 691.783 L1111.72 691.783 L1112.28 691.783 L1112.84 691.783 L1113.4 691.783 L1113.96 691.783 L1114.52 691.783 L1115.08 691.783 L1115.64 691.783 L1116.2 691.783 L1116.76 691.783 L1117.31 691.783 L1117.87 691.783 L1118.43 691.783 L1118.99 691.783 L1119.55 691.783 L1120.11 691.783 L1120.67 691.783 L1121.23 691.783 L1121.79 691.783 L1122.35 691.783 L1122.91 691.783 L1123.47 691.783 L1124.03 691.783 L1124.59 691.783 L1125.14 691.783 L1125.7 691.783 L1126.26 691.783 L1126.82 691.783 L1127.38 691.783 L1127.94 691.783 L1128.5 691.783 L1129.06 691.783 L1129.62 691.783 L1130.18 691.783 L1130.74 691.783 L1131.3 691.783 L1131.86 691.783 L1132.41 691.783 L1132.97 691.783 L1133.53 691.783 L1134.09 691.783 L1134.65 691.783 L1135.21 691.783 L1135.77 691.783 L1136.33 691.783 L1136.89 691.783 L1137.45 691.783 L1138.01 691.783 L1138.57 691.783 L1139.13 691.783 L1139.68 691.783 L1140.24 691.783 L1140.8 691.783 L1141.36 691.783 L1141.92 691.783 L1142.48 691.783 L1143.04 691.783 L1143.6 691.783 L1144.16 691.783 L1144.72 691.783 L1145.28 691.783 L1145.84 691.783 L1146.4 691.783 L1146.96 691.783 L1147.51 691.783 L1148.07 691.783 L1148.63 691.783 L1149.19 691.783 L1149.75 691.783 L1150.31 691.783 L1150.87 691.783 L1151.43 691.783 L1151.99 691.783 L1152.55 691.783 L1153.11 691.783 L1153.67 691.783 L1154.23 691.783 L1154.78 691.783 L1155.34 691.783 L1155.9 691.783 L1156.46 691.783 L1157.02 691.783 L1157.58 691.783 L1158.14 691.783 L1158.7 691.783 L1159.26 691.783 L1159.82 691.783 L1160.38 691.783 L1160.94 691.783 L1161.5 691.783 L1162.05 691.783 L1162.61 691.783 L1163.17 691.783 L1163.73 691.783 L1164.29 691.783 L1164.85 691.783 L1165.41 691.783 L1165.97 691.783 L1166.53 691.783 L1167.09 691.783 L1167.65 691.783 L1168.21 691.783 L1168.77 691.783 L1169.33 691.783 L1169.88 691.783 L1170.44 691.783 L1171 691.783 L1171.56 691.783 L1172.12 691.783 L1172.68 691.783 L1173.24 691.783 L1173.8 691.783 L1174.36 691.783 L1174.92 691.783 L1175.48 691.783 L1176.04 691.783 L1176.6 691.783 L1177.15 691.783 L1177.71 691.783 L1178.27 691.783 L1178.83 691.783 L1179.39 691.783 L1179.95 691.783 L1180.51 691.783 L1181.07 691.783 L1181.63 691.783 L1182.19 691.783 L1182.75 691.783 L1183.31 691.783 L1183.87 691.783 L1184.43 691.783 L1184.98 691.783 L1185.54 691.783 L1186.1 691.783 L1186.66 691.783 L1187.22 691.783 L1187.78 691.783 L1188.34 691.783 L1188.9 691.783 L1189.46 691.783 L1190.02 691.783 L1190.58 691.783 L1191.14 691.783 L1191.7 691.783 L1192.25 691.783 L1192.81 691.783 L1193.37 691.783 L1193.93 691.783 L1194.49 691.783 L1195.05 691.783 L1195.61 691.783 L1196.17 691.783 L1196.73 691.783 L1197.29 691.783 L1197.85 691.783 L1198.41 691.783 L1198.97 691.783 L1199.52 691.783 L1200.08 691.783 L1200.64 691.783 L1201.2 691.783 L1201.76 691.783 L1202.32 691.783 L1202.88 691.783 L1203.44 691.783 L1204 691.783 L1204.56 691.783 L1205.12 691.783 L1205.68 691.783 L1206.24 691.783 L1206.8 691.783 L1207.35 691.783 L1207.91 691.783 L1208.47 691.783 L1209.03 691.783 L1209.59 691.783 L1210.15 691.783 L1210.71 691.783 L1211.27 691.783 L1211.83 691.783 L1212.39 691.783 L1212.95 691.783 L1213.51 691.783 L1214.07 691.783 L1214.62 691.783 L1215.18 691.783 L1215.74 691.783 L1216.3 691.783 L1216.86 691.783 L1217.42 691.783 L1217.98 691.783 L1218.54 691.783 L1219.1 691.783 L1219.66 691.783 L1220.22 691.783 L1220.78 691.783 L1221.34 691.783 L1221.89 691.783 L1222.45 691.783 L1223.01 691.783 L1223.57 691.783 L1224.13 691.783 L1224.69 691.783 L1225.25 691.783 L1225.81 691.783 L1226.37 691.783 L1226.93 691.783 L1227.49 691.783 L1228.05 691.783 L1228.61 691.783 L1229.17 691.783 L1229.72 691.783 L1230.28 691.783 L1230.84 691.783 L1231.4 691.783 L1231.96 691.783 L1232.52 691.783 L1233.08 691.783 L1233.64 691.783 L1234.2 691.783 L1234.76 691.783 L1235.32 691.783 L1235.88 691.783 L1236.44 691.783 L1236.99 691.783 L1237.55 691.783 L1238.11 691.783 L1238.67 691.783 L1239.23 691.783 L1239.79 691.783 L1240.35 691.783 L1240.91 691.783 L1241.47 691.783 L1242.03 691.783 L1242.59 691.783 L1243.15 691.783 L1243.71 691.783 L1244.26 691.783 L1244.82 691.783 L1245.38 691.783 L1245.94 691.783 L1246.5 691.783 L1247.06 691.783 L1247.62 691.783 L1248.18 691.783 L1248.74 691.783 L1249.3 691.783 L1249.86 691.783 L1250.42 691.783 L1250.98 691.783 L1251.54 691.783 L1252.09 691.783 L1252.65 691.783 L1253.21 691.783 L1253.77 691.783 L1254.33 691.783 L1254.89 691.783 L1255.45 691.783 L1256.01 691.783 L1256.57 691.783 L1257.13 691.783 L1257.69 691.783 L1258.25 691.783 L1258.81 691.783 L1259.36 691.783 L1259.92 691.783 L1260.48 691.783 L1261.04 691.783 L1261.6 691.783 L1262.16 691.783 L1262.72 691.783 L1263.28 691.783 L1263.84 691.783 L1264.4 691.783 L1264.96 691.783 L1265.52 691.783 L1266.08 691.783 L1266.63 691.783 L1267.19 691.783 L1267.75 691.783 L1268.31 691.783 L1268.87 691.783 L1269.43 691.783 L1269.99 691.783 L1270.55 691.783 L1271.11 691.783 L1271.67 691.783 L1272.23 691.783 L1272.79 691.783 L1273.35 691.783 L1273.91 691.783 L1274.46 691.783 L1275.02 691.783 L1275.58 691.783 L1276.14 691.783 L1276.7 691.783 L1277.26 691.783 L1277.82 691.783 L1278.38 691.783 L1278.94 691.783 L1279.5 691.783 L1280.06 691.783 L1280.62 691.783 L1281.18 691.783 L1281.73 691.783 L1282.29 691.783 L1282.85 691.783 L1283.41 691.783 L1283.97 691.783 L1284.53 691.783 L1285.09 691.783 L1285.65 691.783 L1286.21 691.783 L1286.77 691.783 L1287.33 691.783 L1287.89 691.783 L1288.45 691.783 L1289 691.783 L1289.56 691.783 L1290.12 691.783 L1290.68 691.783 L1291.24 691.783 L1291.8 691.783 L1292.36 691.783 L1292.92 691.783 L1293.48 691.783 L1294.04 691.783 L1294.6 691.783 L1295.16 691.783 L1295.72 691.783 L1296.28 691.783 L1296.83 691.783 L1297.39 691.783 L1297.95 691.783 L1298.51 691.783 L1299.07 691.783 L1299.63 691.783 L1300.19 691.783 L1300.75 691.783 L1301.31 691.783 L1301.87 691.783 L1302.43 691.783 L1302.99 691.783 L1303.55 691.783 L1304.1 691.783 L1304.66 691.783 L1305.22 691.783 L1305.78 691.783 L1306.34 691.783 L1306.9 691.783 L1307.46 691.783 L1308.02 691.783 L1308.58 691.783 L1309.14 691.783 L1309.7 691.783 L1310.26 691.783 L1310.82 691.783 L1311.38 691.783 L1311.93 691.783 L1312.49 691.783 L1313.05 691.783 L1313.61 691.783 L1314.17 691.783 L1314.73 691.783 L1315.29 691.783 L1315.85 691.783 L1316.41 691.783 L1316.97 691.783 L1317.53 691.783 L1318.09 691.783 L1318.65 691.783 L1319.2 691.783 L1319.76 691.783 L1320.32 691.783 L1320.88 691.783 L1321.44 691.783 L1322 691.783 L1322.56 691.783 L1323.12 691.783 L1323.68 691.783 L1324.24 691.783 L1324.8 691.783 L1325.36 691.783 L1325.92 691.783 L1326.47 691.783 L1327.03 691.783 L1327.59 691.783 L1328.15 691.783 L1328.71 691.783 L1329.27 691.783 L1329.83 691.783 L1330.39 691.783 L1330.95 691.783 L1331.51 691.783 L1332.07 691.783 L1332.63 691.783 L1333.19 691.783 L1333.75 691.783 L1334.3 691.783 L1334.86 691.783 L1335.42 691.783 L1335.98 691.783 L1336.54 691.783 L1337.1 691.783 L1337.66 691.783 L1338.22 691.783 L1338.78 691.783 L1339.34 691.783 L1339.9 691.783 L1340.46 691.783 L1341.02 691.783 L1341.57 691.783 L1342.13 691.783 L1342.69 691.783 L1343.25 691.783 L1343.81 691.783 L1344.37 691.783 L1344.93 691.783 L1345.49 691.783 L1346.05 691.783 L1346.61 691.783 L1347.17 691.783 L1347.73 691.783 L1348.29 691.783 L1348.84 691.783 L1349.4 691.783 L1349.96 691.783 L1350.52 691.783 L1351.08 691.783 L1351.64 691.783 L1352.2 691.783 L1352.76 691.783 L1353.32 691.783 L1353.88 691.783 L1354.44 691.783 L1355 691.783 L1355.56 691.783 L1356.12 691.783 L1356.67 691.783 L1357.23 691.783 L1357.79 691.783 L1358.35 691.783 L1358.91 691.783 L1359.47 691.783 L1360.03 691.783 L1360.59 691.783 L1361.15 691.783 L1361.71 691.783 L1362.27 691.783 L1362.83 691.783 L1363.39 691.783 L1363.94 691.783 L1364.5 691.783 L1365.06 691.783 L1365.62 691.783 L1366.18 691.783 L1366.74 691.783 L1367.3 691.783 L1367.86 691.783 L1368.42 691.783 L1368.98 691.783 L1369.54 691.783 L1370.1 691.783 L1370.66 691.783 L1371.21 691.783 L1371.77 691.783 L1372.33 691.783 L1372.89 691.783 L1373.45 691.783 L1374.01 691.783 L1374.57 691.783 L1375.13 691.783 L1375.69 691.783 L1376.25 691.783 L1376.81 691.783 L1377.37 691.783 L1377.93 691.783 L1378.49 691.783 L1379.04 691.783 L1379.6 691.783 L1380.16 691.783 L1380.72 691.783 L1381.28 691.783 L1381.84 691.783 L1382.4 691.783 L1382.96 691.783 L1383.52 691.783 L1384.08 691.783 L1384.64 691.783 L1385.2 691.783 L1385.76 691.783 L1386.31 691.783 L1386.87 691.783 L1387.43 691.783 L1387.99 691.783 L1388.55 691.783 L1389.11 691.783 L1389.67 691.783 L1390.23 691.783 L1390.79 691.783 L1391.35 691.783 L1391.91 691.783 L1392.47 691.783 L1393.03 691.783 L1393.58 691.783 L1394.14 691.783 L1394.7 691.783 L1395.26 691.783 L1395.82 691.783 L1396.38 691.783 L1396.94 691.783 L1397.5 691.783 L1398.06 691.783 L1398.62 691.783 L1399.18 691.783 L1399.74 691.783 L1400.3 691.783 L1400.86 691.783 L1401.41 691.783 L1401.97 691.783 L1402.53 691.783 L1403.09 691.783 L1403.65 691.783 L1404.21 691.783 L1404.77 691.783 L1405.33 691.783 L1405.89 691.783 L1406.45 691.783 L1407.01 691.783 L1407.57 691.783 L1408.13 691.783 L1408.68 691.783 L1409.24 691.783 L1409.8 691.783 L1410.36 691.783 L1410.92 691.783 L1411.48 691.783 L1412.04 691.783 L1412.6 691.783 L1413.16 691.783 L1413.72 691.783 L1414.28 691.783 L1414.84 691.783 L1415.4 691.783 L1415.95 691.783 L1416.51 691.783 L1417.07 691.783 L1417.63 691.783 L1418.19 691.783 L1418.75 691.783 L1419.31 691.783 L1419.87 691.783 L1420.43 691.783 L1420.99 691.783 L1421.55 691.783 L1422.11 691.783 L1422.67 691.783 L1423.23 691.783 L1423.78 691.783 L1424.34 691.783 L1424.9 691.783 L1425.46 691.783 L1426.02 691.783 L1426.58 691.783 L1427.14 691.783 L1427.7 691.783 L1428.26 691.783 L1428.82 691.783 L1429.38 691.783 L1429.94 691.783 L1430.5 691.783 L1431.05 691.783 L1431.61 691.783 L1432.17 691.783 L1432.73 691.783 L1433.29 691.783 L1433.85 691.783 L1434.41 691.783 L1434.97 691.783 L1435.53 691.783 L1436.09 691.783 L1436.65 691.783 L1437.21 691.783 L1437.77 691.783 L1438.33 691.783 L1438.88 691.783 L1439.44 691.783 L1440 691.783 L1440.56 691.783 L1441.12 691.783 L1441.68 691.783 L1442.24 691.783 L1442.8 691.783 L1443.36 691.783 L1443.92 691.783 L1444.48 691.783 L1445.04 691.783 L1445.6 691.783 L1446.15 691.783 L1446.71 691.783 L1447.27 691.783 L1447.83 691.783 L1448.39 691.783 L1448.95 691.783 L1449.51 691.783 L1450.07 691.783 L1450.63 691.783 L1451.19 691.783 L1451.75 691.783 L1452.31 691.783 L1452.87 691.783 L1453.42 691.783 L1453.98 691.783 L1454.54 691.783 L1455.1 691.783 L1455.66 691.783 L1456.22 691.783 L1456.78 691.783 L1457.34 691.783 L1457.9 691.783 L1458.46 691.783 L1459.02 691.783 L1459.58 691.783 L1460.14 691.783 L1460.7 691.783 L1461.25 691.783 L1461.81 691.783 L1462.37 691.783 L1462.93 691.783 L1463.49 691.783 L1464.05 691.783 L1464.61 691.783 L1465.17 691.783 L1465.73 691.783 L1466.29 691.783 L1466.85 691.783 L1467.41 691.783 L1467.97 691.783 L1468.52 691.783 L1469.08 691.783 L1469.64 691.783 L1470.2 691.783 L1470.76 691.783 L1471.32 691.783 L1471.88 691.783 L1472.44 691.783 L1473 691.783 L1473.56 691.783 L1474.12 691.783 L1474.68 691.783 L1475.24 691.783 L1475.79 691.783 L1476.35 691.783 L1476.91 691.783 L1477.47 691.783 L1478.03 691.783 L1478.59 691.783 L1479.15 691.783 L1479.71 691.783 L1480.27 691.783 L1480.83 691.783 L1481.39 691.783 L1481.95 691.783 L1482.51 691.783 L1483.07 691.783 L1483.62 691.783 L1484.18 691.783 L1484.74 691.783 L1485.3 691.783 L1485.86 691.783 L1486.42 691.783 L1486.98 691.783 L1487.54 691.783 L1488.1 691.783 L1488.66 691.783 L1489.22 691.783 L1489.78 691.783 L1490.34 691.783 L1490.89 691.783 L1491.45 691.783 L1492.01 691.783 L1492.57 691.783 L1493.13 691.783 L1493.69 691.783 L1494.25 691.783 L1494.81 691.783 L1495.37 691.783 L1495.93 691.783 L1496.49 691.783 L1497.05 691.783 L1497.61 691.783 L1498.16 691.783 L1498.72 691.783 L1499.28 691.783 L1499.84 691.783 L1500.4 691.783 L1500.96 691.783 L1501.52 691.783 L1502.08 691.783 L1502.64 691.783 L1503.2 691.783 L1503.76 691.783 L1504.32 691.783 L1504.88 691.783 L1505.44 691.783 L1505.99 691.783 L1506.55 691.783 L1507.11 691.783 L1507.67 691.783 L1508.23 691.783 L1508.79 691.783 L1509.35 691.783 L1509.91 691.783 L1510.47 691.783 L1511.03 691.783 L1511.59 691.783 L1512.15 691.783 L1512.71 691.783 L1513.26 691.783 L1513.82 691.783 L1514.38 691.783 L1514.94 691.783 L1515.5 691.783 L1516.06 691.783 L1516.62 691.783 L1517.18 691.783 L1517.74 691.783 L1518.3 691.783 L1518.86 691.783 L1519.42 691.783 L1519.98 691.783 L1520.53 691.783 L1521.09 691.783 L1521.65 691.783 L1522.21 691.783 L1522.77 691.783 L1523.33 691.783 L1523.89 691.783 L1524.45 691.783 L1525.01 691.783 L1525.57 691.783 L1526.13 691.783 L1526.69 691.783 L1527.25 691.783 L1527.81 691.783 L1528.36 691.783 L1528.92 691.783 L1529.48 691.783 L1530.04 691.783 L1530.6 691.783 L1531.16 691.783 L1531.72 691.783 L1532.28 691.783 L1532.84 691.783 L1533.4 691.783 L1533.96 691.783 L1534.52 691.783 L1535.08 691.783 L1535.63 691.783 L1536.19 691.783 L1536.75 691.783 L1537.31 691.783 L1537.87 691.783 L1538.43 691.783 L1538.99 691.783 L1539.55 691.783 L1540.11 691.783 L1540.67 691.783 L1541.23 691.783 L1541.79 691.783 L1542.35 691.783 L1542.9 691.783 L1543.46 691.783 L1544.02 691.783 L1544.58 691.783 L1545.14 691.783 L1545.7 691.783 L1546.26 691.783 L1546.82 691.783 L1547.38 691.783 L1547.94 691.783 L1548.5 691.783 L1549.06 691.783 L1549.62 691.783 L1550.18 691.783 L1550.73 691.783 L1551.29 691.783 L1551.85 691.783 L1552.41 691.783 L1552.97 691.783 L1553.53 691.783 L1554.09 691.783 L1554.65 691.783 L1555.21 691.783 L1555.77 691.783 L1556.33 691.783 L1556.89 691.783 L1557.45 691.783 L1558 691.783 L1558.56 691.783 L1559.12 691.783 L1559.68 691.783 L1560.24 691.783 L1560.8 691.783 L1561.36 691.783 L1561.92 691.783 L1562.48 691.783 L1563.04 691.783 L1563.6 691.783 L1564.16 691.783 L1564.72 691.783 L1565.28 691.783 L1565.83 691.783 L1566.39 691.783 L1566.95 691.783 L1567.51 691.783 L1568.07 691.783 L1568.63 691.783 L1569.19 691.783 L1569.75 691.783 L1570.31 691.783 L1570.87 691.783 L1571.43 691.783 L1571.99 691.783 L1572.55 691.783 L1573.1 691.783 L1573.66 691.783 L1574.22 691.783 L1574.78 691.783 L1575.34 691.783 L1575.9 691.783 L1576.46 691.783 L1577.02 691.783 L1577.58 691.783 L1578.14 691.783 L1578.7 691.783 L1579.26 691.783 L1579.82 691.783 L1580.37 691.783 L1580.93 691.783 L1581.49 691.783 L1582.05 691.783 L1582.61 691.783 L1583.17 691.783 L1583.73 691.783 L1584.29 691.783 L1584.85 691.783 L1585.41 691.783 L1585.97 691.783 L1586.53 691.783 L1587.09 691.783 L1587.65 691.783 L1588.2 691.783 L1588.76 691.783 L1589.32 691.783 L1589.88 691.783 L1590.44 691.783 L1591 691.783 L1591.56 691.783 L1592.12 691.783 L1592.68 691.783 L1593.24 691.783 L1593.8 691.783 L1594.36 691.783 L1594.92 691.783 L1595.47 691.783 L1596.03 691.783 L1596.59 691.783 L1597.15 691.783 L1597.71 691.783 L1598.27 691.783 L1598.83 691.783 L1599.39 691.783 L1599.95 691.783 L1600.51 691.783 L1601.07 691.783 L1601.63 691.783 L1602.19 691.783 L1602.74 691.783 L1603.3 691.783 L1603.86 691.783 L1604.42 691.783 L1604.98 691.783 L1605.54 691.783 L1606.1 691.783 L1606.66 691.783 L1607.22 691.783 L1607.78 691.783 L1608.34 691.783 L1608.9 691.783 L1609.46 691.783 L1610.02 691.783 L1610.57 691.783 L1611.13 691.783 L1611.69 691.783 L1612.25 691.783 L1612.81 691.783 L1613.37 691.783 L1613.93 691.783 L1614.49 691.783 L1615.05 691.783 L1615.61 691.783 L1616.17 691.783 L1616.73 691.783 L1617.29 691.783 L1617.84 691.783 L1618.4 691.783 L1618.96 691.783 L1619.52 691.783 L1620.08 691.783 L1620.64 691.783 L1621.2 691.783 L1621.76 691.783 L1622.32 691.783 L1622.88 691.783 L1623.44 691.783 L1624 691.783 L1624.56 691.783 L1625.11 691.783 L1625.67 691.783 L1626.23 691.783 L1626.79 691.783 L1627.35 691.783 L1627.91 691.783 L1628.47 691.783 L1629.03 691.783 L1629.59 691.783 L1630.15 691.783 L1630.71 691.783 L1631.27 691.783 L1631.83 691.783 L1632.39 691.783 L1632.94 691.783 L1633.5 691.783 L1634.06 691.783 L1634.62 691.783 L1635.18 691.783 L1635.74 691.783 L1636.3 691.783 L1636.86 691.783 L1637.42 691.783 L1637.98 691.783 L1638.54 691.783 L1639.1 691.783 L1639.66 691.783 L1640.21 691.783 L1640.77 691.783 L1641.33 691.783 L1641.89 691.783 L1642.45 691.783 L1643.01 691.783 L1643.57 691.783 L1644.13 691.783 L1644.69 691.783 L1645.25 691.783 L1645.81 691.783 L1646.37 691.783 L1646.93 691.783 L1647.48 691.783 L1648.04 691.783 L1648.6 691.783 L1649.16 691.783 L1649.72 691.783 L1650.28 691.783 L1650.84 691.783 L1651.4 691.783 L1651.96 691.783 L1652.52 691.783 L1653.08 691.783 L1653.64 691.783 L1654.2 691.783 L1654.76 691.783 L1655.31 691.783 L1655.87 691.783 L1656.43 691.783 L1656.99 691.783 L1657.55 691.783 L1658.11 691.783 L1658.67 691.783 L1659.23 691.783 L1659.79 691.783 L1660.35 691.783 L1660.91 691.783 L1661.47 691.783 L1662.03 691.783 L1662.58 691.783 L1663.14 691.783 L1663.7 691.783 L1664.26 691.783 L1664.82 691.783 L1665.38 691.783 L1665.94 691.783 L1666.5 691.783 L1667.06 691.783 L1667.62 691.783 L1668.18 691.783 L1668.74 691.783 L1669.3 691.783 L1669.85 691.783 L1670.41 691.783 L1670.97 691.783 L1671.53 691.783 L1672.09 691.783 L1672.65 691.783 L1673.21 691.783 L1673.77 691.783 L1674.33 691.783 L1674.89 691.783 L1675.45 691.783 L1676.01 691.783 L1676.57 691.783 L1677.13 691.783 L1677.68 691.783 L1678.24 691.783 L1678.8 691.783 L1679.36 691.783 L1679.92 691.783 L1680.48 691.783 L1681.04 691.783 L1681.6 691.783 L1682.16 691.783 L1682.72 691.783 L1683.28 691.783 L1683.84 691.783 L1684.4 691.783 L1684.95 691.783 L1685.51 691.783 L1686.07 691.783 L1686.63 691.783 L1687.19 691.783 L1687.75 691.783 L1688.31 691.783 L1688.87 691.783 L1689.43 691.783 L1689.99 691.783 L1690.55 691.783 L1691.11 691.783 L1691.67 691.783 L1692.23 691.783 L1692.78 691.783 L1693.34 691.783 L1693.9 691.783 L1694.46 691.783 L1695.02 691.783 L1695.58 691.783 L1696.14 691.783 L1696.7 691.783 L1697.26 691.783 L1697.82 691.783 L1698.38 691.783 L1698.94 691.783 L1699.5 691.783 L1700.05 691.783 L1700.61 691.783 L1701.17 691.783 L1701.73 691.783 L1702.29 691.783 L1702.85 691.783 L1703.41 691.783 L1703.97 691.783 L1704.53 691.783 L1705.09 691.783 L1705.65 691.783 L1706.21 691.783 L1706.77 691.783 L1707.32 691.783 L1707.88 691.783 L1708.44 691.783 L1709 691.783 L1709.56 691.783 L1710.12 691.783 L1710.68 691.783 L1711.24 691.783 L1711.8 691.783 L1712.36 691.783 L1712.92 691.783 L1713.48 691.783 L1714.04 691.783 L1714.6 691.783 L1715.15 691.783 L1715.71 691.783 L1716.27 691.783 L1716.83 691.783 L1717.39 691.783 L1717.95 691.783 L1718.51 691.783 L1719.07 691.783 L1719.63 691.783 L1720.19 691.783 L1720.75 691.783 L1721.31 691.783 L1721.87 691.783 L1722.42 691.783 L1722.98 691.783 L1723.54 691.783 L1724.1 691.783 L1724.66 691.783 L1725.22 691.783 L1725.78 691.783 L1726.34 691.783 L1726.9 691.783 L1727.46 691.783 L1728.02 691.783 L1728.58 691.783 L1729.14 691.783 L1729.69 691.783 L1730.25 691.783 L1730.81 691.783 L1731.37 691.783 L1731.93 691.783 L1732.49 691.783 L1733.05 691.783 L1733.61 691.783 L1734.17 691.783 L1734.73 691.783 L1735.29 691.783 L1735.85 691.783 L1736.41 691.783 L1736.97 691.783 L1737.52 691.783 L1738.08 691.783 L1738.64 691.783 L1739.2 691.783 L1739.76 691.783 L1740.32 691.783 L1740.88 691.783 L1741.44 691.783 L1742 691.783 L1742.56 691.783 L1743.12 691.783 L1743.68 691.783 L1744.24 691.783 L1744.79 691.783 L1745.35 691.783 L1745.91 691.783 L1746.47 691.783 L1747.03 691.783 L1747.59 691.783 L1748.15 691.783 L1748.71 691.783 L1749.27 691.783 L1749.83 691.783 L1750.39 691.783 L1750.95 691.783 L1751.51 691.783 L1752.06 691.783 L1752.62 691.783 L1753.18 691.783 L1753.74 691.783 L1754.3 691.783 L1754.86 691.783 L1755.42 691.783 L1755.98 691.783 L1756.54 691.783 L1757.1 691.783 L1757.66 691.783 L1758.22 691.783 L1758.78 691.783 L1759.34 691.783 L1759.89 691.783 L1760.45 691.783 L1761.01 691.783 L1761.57 691.783 L1762.13 691.783 L1762.69 691.783 L1763.25 691.783 L1763.81 691.783 L1764.37 691.783 L1764.93 691.783 L1765.49 691.783 L1766.05 691.783 L1766.61 691.783 L1767.16 691.783 L1767.72 691.783 L1768.28 691.783 L1768.84 691.783 L1769.4 691.783 L1769.96 691.783 L1770.52 691.783 L1771.08 691.783 L1771.64 691.783 L1772.2 691.783 L1772.76 691.783 L1773.32 691.783 L1773.88 691.783 L1774.43 691.783 L1774.99 691.783 L1775.55 691.783 L1776.11 691.783 L1776.67 691.783 L1777.23 691.783 L1777.79 691.783 L1778.35 691.783 L1778.91 691.783 L1779.47 691.783 L1780.03 691.783 L1780.59 691.783 L1781.15 691.783 L1781.71 691.783 L1782.26 691.783 L1782.82 691.783 L1783.38 691.783 L1783.94 691.783 L1784.5 691.783 L1785.06 691.783 L1785.62 691.783 L1786.18 691.783 L1786.74 691.783 L1787.3 691.783 L1787.86 691.783 L1788.42 691.783 L1788.98 691.783 L1789.53 691.783 L1790.09 691.783 L1790.65 691.783 L1791.21 691.783 L1791.77 691.783 L1792.33 691.783 L1792.89 691.783 L1793.45 691.783 L1794.01 691.783 L1794.57 691.783 L1795.13 691.783 L1795.69 691.783 L1796.25 691.783 L1796.8 691.783 L1797.36 691.783 L1797.92 691.783 L1798.48 691.783 L1799.04 691.783 L1799.6 691.783 L1800.16 691.783 L1800.72 691.783 L1801.28 691.783 L1801.84 691.783 L1802.4 691.783 L1802.96 691.783 L1803.52 691.783 L1804.08 691.783 L1804.63 691.783 L1805.19 691.783 L1805.75 691.783 L1806.31 691.783 L1806.87 691.783 L1807.43 691.783 L1807.99 691.783 L1808.55 691.783 L1809.11 691.783 L1809.67 691.783 L1810.23 691.783 L1810.79 691.783 L1811.35 691.783 L1811.9 691.783 L1812.46 691.783 L1813.02 691.783 L1813.58 691.783 L1814.14 691.783 L1814.7 691.783 L1815.26 691.783 L1815.82 691.783 L1816.38 691.783 L1816.94 691.783 L1817.5 691.783 L1818.06 691.783 L1818.62 691.783 L1819.18 691.783 L1819.73 691.783 L1820.29 691.783 L1820.85 691.783 L1821.41 691.783 L1821.97 691.783 L1822.53 691.783 L1823.09 691.783 L1823.65 691.783 L1824.21 691.783 L1824.77 691.783 L1825.33 691.783 L1825.89 691.783 L1826.45 691.783 L1827 691.783 L1827.56 691.783 L1828.12 691.783 L1828.68 691.783 L1829.24 691.783 L1829.8 691.783 L1830.36 691.783 L1830.92 691.783 L1831.48 691.783 L1832.04 691.783 L1832.6 691.783 L1833.16 691.783 L1833.72 691.783 L1834.27 691.783 L1834.83 691.783 L1835.39 691.783 L1835.95 691.783 L1836.51 691.783 L1837.07 691.783 L1837.63 691.783 L1838.19 691.783 L1838.19 683.414 L1837.63 683.414 L1837.07 683.414 L1836.51 683.414 L1835.95 683.414 L1835.39 683.414 L1834.83 683.414 L1834.27 683.414 L1833.72 683.414 L1833.16 683.414 L1832.6 683.414 L1832.04 683.414 L1831.48 683.414 L1830.92 683.414 L1830.36 683.414 L1829.8 683.414 L1829.24 683.414 L1828.68 683.414 L1828.12 683.414 L1827.56 683.414 L1827 683.414 L1826.45 683.414 L1825.89 683.414 L1825.33 683.414 L1824.77 683.414 L1824.21 683.414 L1823.65 683.414 L1823.09 683.414 L1822.53 683.414 L1821.97 683.414 L1821.41 683.414 L1820.85 683.414 L1820.29 683.414 L1819.73 683.414 L1819.18 683.414 L1818.62 683.414 L1818.06 683.414 L1817.5 683.414 L1816.94 683.414 L1816.38 683.414 L1815.82 683.414 L1815.26 683.414 L1814.7 683.414 L1814.14 683.414 L1813.58 683.414 L1813.02 683.414 L1812.46 683.414 L1811.9 683.414 L1811.35 683.414 L1810.79 683.414 L1810.23 683.414 L1809.67 683.414 L1809.11 683.414 L1808.55 683.414 L1807.99 683.414 L1807.43 683.414 L1806.87 683.414 L1806.31 683.414 L1805.75 683.414 L1805.19 683.414 L1804.63 683.414 L1804.08 683.414 L1803.52 683.414 L1802.96 683.414 L1802.4 683.414 L1801.84 683.414 L1801.28 683.414 L1800.72 683.414 L1800.16 683.414 L1799.6 683.414 L1799.04 683.414 L1798.48 683.414 L1797.92 683.414 L1797.36 683.414 L1796.8 683.414 L1796.25 683.414 L1795.69 683.414 L1795.13 683.414 L1794.57 683.414 L1794.01 683.414 L1793.45 683.414 L1792.89 683.414 L1792.33 683.414 L1791.77 683.414 L1791.21 683.414 L1790.65 683.414 L1790.09 683.414 L1789.53 683.414 L1788.98 683.414 L1788.42 683.414 L1787.86 683.414 L1787.3 683.414 L1786.74 683.414 L1786.18 683.414 L1785.62 683.414 L1785.06 683.414 L1784.5 683.414 L1783.94 683.414 L1783.38 683.414 L1782.82 683.414 L1782.26 683.414 L1781.71 683.414 L1781.15 683.414 L1780.59 683.414 L1780.03 683.414 L1779.47 683.414 L1778.91 683.414 L1778.35 683.414 L1777.79 683.414 L1777.23 683.414 L1776.67 683.414 L1776.11 683.414 L1775.55 683.414 L1774.99 683.414 L1774.43 683.414 L1773.88 683.414 L1773.32 683.414 L1772.76 683.414 L1772.2 683.414 L1771.64 683.414 L1771.08 683.414 L1770.52 683.414 L1769.96 683.414 L1769.4 683.414 L1768.84 683.414 L1768.28 683.414 L1767.72 683.414 L1767.16 683.414 L1766.61 683.414 L1766.05 683.414 L1765.49 683.414 L1764.93 683.414 L1764.37 683.414 L1763.81 683.414 L1763.25 683.414 L1762.69 683.414 L1762.13 683.414 L1761.57 683.414 L1761.01 683.414 L1760.45 683.414 L1759.89 683.414 L1759.34 683.414 L1758.78 683.414 L1758.22 683.414 L1757.66 683.414 L1757.1 683.414 L1756.54 683.414 L1755.98 683.414 L1755.42 683.414 L1754.86 683.414 L1754.3 683.414 L1753.74 683.414 L1753.18 683.414 L1752.62 683.414 L1752.06 683.414 L1751.51 683.414 L1750.95 683.414 L1750.39 683.414 L1749.83 683.414 L1749.27 683.414 L1748.71 683.414 L1748.15 683.414 L1747.59 683.414 L1747.03 683.414 L1746.47 683.414 L1745.91 683.414 L1745.35 683.414 L1744.79 683.414 L1744.24 683.414 L1743.68 683.414 L1743.12 683.414 L1742.56 683.414 L1742 683.414 L1741.44 683.414 L1740.88 683.414 L1740.32 683.414 L1739.76 683.414 L1739.2 683.414 L1738.64 683.414 L1738.08 683.414 L1737.52 683.414 L1736.97 683.414 L1736.41 683.414 L1735.85 683.414 L1735.29 683.414 L1734.73 683.414 L1734.17 683.414 L1733.61 683.414 L1733.05 683.414 L1732.49 683.414 L1731.93 683.414 L1731.37 683.414 L1730.81 683.414 L1730.25 683.414 L1729.69 683.414 L1729.14 683.414 L1728.58 683.414 L1728.02 683.414 L1727.46 683.414 L1726.9 683.414 L1726.34 683.414 L1725.78 683.414 L1725.22 683.414 L1724.66 683.414 L1724.1 683.414 L1723.54 683.414 L1722.98 683.414 L1722.42 683.414 L1721.87 683.414 L1721.31 683.414 L1720.75 683.414 L1720.19 683.414 L1719.63 683.414 L1719.07 683.414 L1718.51 683.414 L1717.95 683.414 L1717.39 683.414 L1716.83 683.414 L1716.27 683.414 L1715.71 683.414 L1715.15 683.414 L1714.6 683.414 L1714.04 683.414 L1713.48 683.414 L1712.92 683.414 L1712.36 683.414 L1711.8 683.414 L1711.24 683.414 L1710.68 683.414 L1710.12 683.414 L1709.56 683.414 L1709 683.414 L1708.44 683.414 L1707.88 683.414 L1707.32 683.414 L1706.77 683.414 L1706.21 683.414 L1705.65 683.414 L1705.09 683.414 L1704.53 683.414 L1703.97 683.414 L1703.41 683.414 L1702.85 683.414 L1702.29 683.414 L1701.73 683.414 L1701.17 683.414 L1700.61 683.414 L1700.05 683.414 L1699.5 683.414 L1698.94 683.414 L1698.38 683.414 L1697.82 683.414 L1697.26 683.414 L1696.7 683.414 L1696.14 683.414 L1695.58 683.414 L1695.02 683.414 L1694.46 683.414 L1693.9 683.414 L1693.34 683.414 L1692.78 683.414 L1692.23 683.414 L1691.67 683.414 L1691.11 683.414 L1690.55 683.414 L1689.99 683.414 L1689.43 683.414 L1688.87 683.414 L1688.31 683.414 L1687.75 683.414 L1687.19 683.414 L1686.63 683.414 L1686.07 683.414 L1685.51 683.414 L1684.95 683.414 L1684.4 683.414 L1683.84 683.414 L1683.28 683.414 L1682.72 683.414 L1682.16 683.414 L1681.6 683.414 L1681.04 683.414 L1680.48 683.414 L1679.92 683.414 L1679.36 683.414 L1678.8 683.414 L1678.24 683.414 L1677.68 683.414 L1677.13 683.414 L1676.57 683.414 L1676.01 683.414 L1675.45 683.414 L1674.89 683.414 L1674.33 683.414 L1673.77 683.414 L1673.21 683.414 L1672.65 683.414 L1672.09 683.414 L1671.53 683.414 L1670.97 683.414 L1670.41 683.414 L1669.85 683.414 L1669.3 683.414 L1668.74 683.414 L1668.18 683.414 L1667.62 683.414 L1667.06 683.414 L1666.5 683.414 L1665.94 683.414 L1665.38 683.414 L1664.82 683.414 L1664.26 683.414 L1663.7 683.414 L1663.14 683.414 L1662.58 683.414 L1662.03 683.414 L1661.47 683.414 L1660.91 683.414 L1660.35 683.414 L1659.79 683.414 L1659.23 683.414 L1658.67 683.414 L1658.11 683.414 L1657.55 683.414 L1656.99 683.414 L1656.43 683.414 L1655.87 683.414 L1655.31 683.414 L1654.76 683.414 L1654.2 683.414 L1653.64 683.414 L1653.08 683.414 L1652.52 683.414 L1651.96 683.414 L1651.4 683.414 L1650.84 683.414 L1650.28 683.414 L1649.72 683.414 L1649.16 683.414 L1648.6 683.414 L1648.04 683.414 L1647.48 683.414 L1646.93 683.414 L1646.37 683.414 L1645.81 683.414 L1645.25 683.414 L1644.69 683.414 L1644.13 683.414 L1643.57 683.414 L1643.01 683.414 L1642.45 683.414 L1641.89 683.414 L1641.33 683.414 L1640.77 683.414 L1640.21 683.414 L1639.66 683.414 L1639.1 683.414 L1638.54 683.414 L1637.98 683.414 L1637.42 683.414 L1636.86 683.414 L1636.3 683.414 L1635.74 683.414 L1635.18 683.414 L1634.62 683.414 L1634.06 683.414 L1633.5 683.414 L1632.94 683.414 L1632.39 683.414 L1631.83 683.414 L1631.27 683.414 L1630.71 683.414 L1630.15 683.414 L1629.59 683.414 L1629.03 683.414 L1628.47 683.414 L1627.91 683.414 L1627.35 683.414 L1626.79 683.414 L1626.23 683.414 L1625.67 683.414 L1625.11 683.414 L1624.56 683.414 L1624 683.414 L1623.44 683.414 L1622.88 683.414 L1622.32 683.414 L1621.76 683.414 L1621.2 683.414 L1620.64 683.414 L1620.08 683.414 L1619.52 683.414 L1618.96 683.414 L1618.4 683.414 L1617.84 683.414 L1617.29 683.414 L1616.73 683.414 L1616.17 683.414 L1615.61 683.414 L1615.05 683.414 L1614.49 683.414 L1613.93 683.414 L1613.37 683.414 L1612.81 683.414 L1612.25 683.414 L1611.69 683.414 L1611.13 683.414 L1610.57 683.414 L1610.02 683.414 L1609.46 683.414 L1608.9 683.414 L1608.34 683.414 L1607.78 683.414 L1607.22 683.414 L1606.66 683.414 L1606.1 683.414 L1605.54 683.414 L1604.98 683.414 L1604.42 683.414 L1603.86 683.414 L1603.3 683.414 L1602.74 683.414 L1602.19 683.414 L1601.63 683.414 L1601.07 683.414 L1600.51 683.414 L1599.95 683.414 L1599.39 683.414 L1598.83 683.414 L1598.27 683.414 L1597.71 683.414 L1597.15 683.414 L1596.59 683.414 L1596.03 683.414 L1595.47 683.414 L1594.92 683.414 L1594.36 683.414 L1593.8 683.414 L1593.24 683.414 L1592.68 683.414 L1592.12 683.414 L1591.56 683.414 L1591 683.414 L1590.44 683.414 L1589.88 683.414 L1589.32 683.414 L1588.76 683.414 L1588.2 683.414 L1587.65 683.414 L1587.09 683.414 L1586.53 683.414 L1585.97 683.414 L1585.41 683.414 L1584.85 683.414 L1584.29 683.414 L1583.73 683.414 L1583.17 683.414 L1582.61 683.414 L1582.05 683.414 L1581.49 683.414 L1580.93 683.414 L1580.37 683.414 L1579.82 683.414 L1579.26 683.414 L1578.7 683.414 L1578.14 683.414 L1577.58 683.414 L1577.02 683.414 L1576.46 683.414 L1575.9 683.414 L1575.34 683.414 L1574.78 683.414 L1574.22 683.414 L1573.66 683.414 L1573.1 683.414 L1572.55 683.414 L1571.99 683.414 L1571.43 683.414 L1570.87 683.414 L1570.31 683.414 L1569.75 683.414 L1569.19 683.414 L1568.63 683.414 L1568.07 683.414 L1567.51 683.414 L1566.95 683.414 L1566.39 683.414 L1565.83 683.414 L1565.28 683.414 L1564.72 683.414 L1564.16 683.414 L1563.6 683.414 L1563.04 683.414 L1562.48 683.414 L1561.92 683.414 L1561.36 683.414 L1560.8 683.414 L1560.24 683.414 L1559.68 683.414 L1559.12 683.414 L1558.56 683.414 L1558 683.414 L1557.45 683.414 L1556.89 683.414 L1556.33 683.414 L1555.77 683.414 L1555.21 683.414 L1554.65 683.414 L1554.09 683.414 L1553.53 683.414 L1552.97 683.414 L1552.41 683.414 L1551.85 683.414 L1551.29 683.414 L1550.73 683.414 L1550.18 683.414 L1549.62 683.414 L1549.06 683.414 L1548.5 683.414 L1547.94 683.414 L1547.38 683.414 L1546.82 683.414 L1546.26 683.414 L1545.7 683.414 L1545.14 683.414 L1544.58 683.414 L1544.02 683.414 L1543.46 683.414 L1542.9 683.414 L1542.35 683.414 L1541.79 683.414 L1541.23 683.414 L1540.67 683.414 L1540.11 683.414 L1539.55 683.414 L1538.99 683.414 L1538.43 683.414 L1537.87 683.414 L1537.31 683.414 L1536.75 683.414 L1536.19 683.414 L1535.63 683.414 L1535.08 683.414 L1534.52 683.414 L1533.96 683.414 L1533.4 683.414 L1532.84 683.414 L1532.28 683.414 L1531.72 683.414 L1531.16 683.414 L1530.6 683.414 L1530.04 683.414 L1529.48 683.414 L1528.92 683.414 L1528.36 683.414 L1527.81 683.414 L1527.25 683.414 L1526.69 683.414 L1526.13 683.414 L1525.57 683.414 L1525.01 683.414 L1524.45 683.414 L1523.89 683.414 L1523.33 683.414 L1522.77 683.414 L1522.21 683.414 L1521.65 683.414 L1521.09 683.414 L1520.53 683.414 L1519.98 683.414 L1519.42 683.414 L1518.86 683.414 L1518.3 683.414 L1517.74 683.414 L1517.18 683.414 L1516.62 683.414 L1516.06 683.414 L1515.5 683.414 L1514.94 683.414 L1514.38 683.414 L1513.82 683.414 L1513.26 683.414 L1512.71 683.414 L1512.15 683.414 L1511.59 683.414 L1511.03 683.414 L1510.47 683.414 L1509.91 683.414 L1509.35 683.414 L1508.79 683.414 L1508.23 683.414 L1507.67 683.414 L1507.11 683.414 L1506.55 683.414 L1505.99 683.414 L1505.44 683.414 L1504.88 683.414 L1504.32 683.414 L1503.76 683.414 L1503.2 683.414 L1502.64 683.414 L1502.08 683.414 L1501.52 683.414 L1500.96 683.414 L1500.4 683.414 L1499.84 683.414 L1499.28 683.414 L1498.72 683.414 L1498.16 683.414 L1497.61 683.414 L1497.05 683.414 L1496.49 683.414 L1495.93 683.414 L1495.37 683.414 L1494.81 683.414 L1494.25 683.414 L1493.69 683.414 L1493.13 683.414 L1492.57 683.414 L1492.01 683.414 L1491.45 683.414 L1490.89 683.414 L1490.34 683.414 L1489.78 683.414 L1489.22 683.414 L1488.66 683.414 L1488.1 683.414 L1487.54 683.414 L1486.98 683.414 L1486.42 683.414 L1485.86 683.414 L1485.3 683.414 L1484.74 683.414 L1484.18 683.414 L1483.62 683.414 L1483.07 683.414 L1482.51 683.414 L1481.95 683.414 L1481.39 683.414 L1480.83 683.414 L1480.27 683.414 L1479.71 683.414 L1479.15 683.414 L1478.59 683.414 L1478.03 683.414 L1477.47 683.414 L1476.91 683.414 L1476.35 683.414 L1475.79 683.414 L1475.24 683.414 L1474.68 683.414 L1474.12 683.414 L1473.56 683.414 L1473 683.414 L1472.44 683.414 L1471.88 683.414 L1471.32 683.414 L1470.76 683.414 L1470.2 683.414 L1469.64 683.414 L1469.08 683.414 L1468.52 683.414 L1467.97 683.414 L1467.41 683.414 L1466.85 683.414 L1466.29 683.414 L1465.73 683.414 L1465.17 683.414 L1464.61 683.414 L1464.05 683.414 L1463.49 683.414 L1462.93 683.414 L1462.37 683.414 L1461.81 683.414 L1461.25 683.414 L1460.7 683.414 L1460.14 683.414 L1459.58 683.414 L1459.02 683.414 L1458.46 683.414 L1457.9 683.414 L1457.34 683.414 L1456.78 683.414 L1456.22 683.414 L1455.66 683.414 L1455.1 683.414 L1454.54 683.414 L1453.98 683.414 L1453.42 683.414 L1452.87 683.414 L1452.31 683.414 L1451.75 683.414 L1451.19 683.414 L1450.63 683.414 L1450.07 683.414 L1449.51 683.414 L1448.95 683.414 L1448.39 683.414 L1447.83 683.414 L1447.27 683.414 L1446.71 683.414 L1446.15 683.414 L1445.6 683.414 L1445.04 683.414 L1444.48 683.414 L1443.92 683.414 L1443.36 683.414 L1442.8 683.414 L1442.24 683.414 L1441.68 683.414 L1441.12 683.414 L1440.56 683.414 L1440 683.414 L1439.44 683.414 L1438.88 683.414 L1438.33 683.414 L1437.77 683.414 L1437.21 683.414 L1436.65 683.414 L1436.09 683.414 L1435.53 683.414 L1434.97 683.414 L1434.41 683.414 L1433.85 683.414 L1433.29 683.414 L1432.73 683.414 L1432.17 683.414 L1431.61 683.414 L1431.05 683.414 L1430.5 683.414 L1429.94 683.414 L1429.38 683.414 L1428.82 683.414 L1428.26 683.414 L1427.7 683.414 L1427.14 683.414 L1426.58 683.414 L1426.02 683.414 L1425.46 683.414 L1424.9 683.414 L1424.34 683.414 L1423.78 683.414 L1423.23 683.414 L1422.67 683.414 L1422.11 683.414 L1421.55 683.414 L1420.99 683.414 L1420.43 683.414 L1419.87 683.414 L1419.31 683.414 L1418.75 683.414 L1418.19 683.414 L1417.63 683.414 L1417.07 683.414 L1416.51 683.414 L1415.95 683.414 L1415.4 683.414 L1414.84 683.414 L1414.28 683.414 L1413.72 683.414 L1413.16 683.414 L1412.6 683.414 L1412.04 683.414 L1411.48 683.414 L1410.92 683.414 L1410.36 683.414 L1409.8 683.414 L1409.24 683.414 L1408.68 683.414 L1408.13 683.414 L1407.57 683.414 L1407.01 683.414 L1406.45 683.414 L1405.89 683.414 L1405.33 683.414 L1404.77 683.414 L1404.21 683.414 L1403.65 683.414 L1403.09 683.414 L1402.53 683.414 L1401.97 683.414 L1401.41 683.414 L1400.86 683.414 L1400.3 683.414 L1399.74 683.414 L1399.18 683.414 L1398.62 683.414 L1398.06 683.414 L1397.5 683.414 L1396.94 683.414 L1396.38 683.414 L1395.82 683.414 L1395.26 683.414 L1394.7 683.414 L1394.14 683.414 L1393.58 683.414 L1393.03 683.414 L1392.47 683.414 L1391.91 683.414 L1391.35 683.414 L1390.79 683.414 L1390.23 683.414 L1389.67 683.414 L1389.11 683.414 L1388.55 683.414 L1387.99 683.414 L1387.43 683.414 L1386.87 683.414 L1386.31 683.414 L1385.76 683.414 L1385.2 683.414 L1384.64 683.414 L1384.08 683.414 L1383.52 683.414 L1382.96 683.414 L1382.4 683.414 L1381.84 683.414 L1381.28 683.414 L1380.72 683.414 L1380.16 683.414 L1379.6 683.414 L1379.04 683.414 L1378.49 683.414 L1377.93 683.414 L1377.37 683.414 L1376.81 683.414 L1376.25 683.414 L1375.69 683.414 L1375.13 683.414 L1374.57 683.414 L1374.01 683.414 L1373.45 683.414 L1372.89 683.414 L1372.33 683.414 L1371.77 683.414 L1371.21 683.414 L1370.66 683.414 L1370.1 683.414 L1369.54 683.414 L1368.98 683.414 L1368.42 683.414 L1367.86 683.414 L1367.3 683.414 L1366.74 683.414 L1366.18 683.414 L1365.62 683.414 L1365.06 683.414 L1364.5 683.414 L1363.94 683.414 L1363.39 683.414 L1362.83 683.414 L1362.27 683.414 L1361.71 683.414 L1361.15 683.414 L1360.59 683.414 L1360.03 683.414 L1359.47 683.414 L1358.91 683.414 L1358.35 683.414 L1357.79 683.414 L1357.23 683.414 L1356.67 683.414 L1356.12 683.414 L1355.56 683.414 L1355 683.414 L1354.44 683.414 L1353.88 683.414 L1353.32 683.414 L1352.76 683.414 L1352.2 683.414 L1351.64 683.414 L1351.08 683.414 L1350.52 683.414 L1349.96 683.414 L1349.4 683.414 L1348.84 683.414 L1348.29 683.414 L1347.73 683.414 L1347.17 683.414 L1346.61 683.414 L1346.05 683.414 L1345.49 683.414 L1344.93 683.414 L1344.37 683.414 L1343.81 683.414 L1343.25 683.414 L1342.69 683.414 L1342.13 683.414 L1341.57 683.414 L1341.02 683.414 L1340.46 683.414 L1339.9 683.414 L1339.34 683.414 L1338.78 683.414 L1338.22 683.414 L1337.66 683.414 L1337.1 683.414 L1336.54 683.414 L1335.98 683.414 L1335.42 683.414 L1334.86 683.414 L1334.3 683.414 L1333.75 683.414 L1333.19 683.414 L1332.63 683.414 L1332.07 683.414 L1331.51 683.414 L1330.95 683.414 L1330.39 683.414 L1329.83 683.414 L1329.27 683.414 L1328.71 683.414 L1328.15 683.414 L1327.59 683.414 L1327.03 683.414 L1326.47 683.414 L1325.92 683.414 L1325.36 683.414 L1324.8 683.414 L1324.24 683.414 L1323.68 683.414 L1323.12 683.414 L1322.56 683.414 L1322 683.414 L1321.44 683.414 L1320.88 683.414 L1320.32 683.414 L1319.76 683.414 L1319.2 683.414 L1318.65 683.414 L1318.09 683.414 L1317.53 683.414 L1316.97 683.414 L1316.41 683.414 L1315.85 683.414 L1315.29 683.414 L1314.73 683.414 L1314.17 683.414 L1313.61 683.414 L1313.05 683.414 L1312.49 683.414 L1311.93 683.414 L1311.38 683.414 L1310.82 683.414 L1310.26 683.414 L1309.7 683.414 L1309.14 683.414 L1308.58 683.414 L1308.02 683.414 L1307.46 683.414 L1306.9 683.414 L1306.34 683.414 L1305.78 683.414 L1305.22 683.414 L1304.66 683.414 L1304.1 683.414 L1303.55 683.414 L1302.99 683.414 L1302.43 683.414 L1301.87 683.414 L1301.31 683.414 L1300.75 683.414 L1300.19 683.414 L1299.63 683.414 L1299.07 683.414 L1298.51 683.414 L1297.95 683.414 L1297.39 683.414 L1296.83 683.414 L1296.28 683.414 L1295.72 683.414 L1295.16 683.414 L1294.6 683.414 L1294.04 683.414 L1293.48 683.414 L1292.92 683.414 L1292.36 683.414 L1291.8 683.414 L1291.24 683.414 L1290.68 683.414 L1290.12 683.414 L1289.56 683.414 L1289 683.414 L1288.45 683.414 L1287.89 683.414 L1287.33 683.414 L1286.77 683.414 L1286.21 683.414 L1285.65 683.414 L1285.09 683.414 L1284.53 683.414 L1283.97 683.414 L1283.41 683.414 L1282.85 683.414 L1282.29 683.414 L1281.73 683.414 L1281.18 683.414 L1280.62 683.414 L1280.06 683.414 L1279.5 683.414 L1278.94 683.414 L1278.38 683.414 L1277.82 683.414 L1277.26 683.414 L1276.7 683.414 L1276.14 683.414 L1275.58 683.414 L1275.02 683.414 L1274.46 683.414 L1273.91 683.414 L1273.35 683.414 L1272.79 683.414 L1272.23 683.414 L1271.67 683.414 L1271.11 683.414 L1270.55 683.414 L1269.99 683.414 L1269.43 683.414 L1268.87 683.414 L1268.31 683.414 L1267.75 683.414 L1267.19 683.414 L1266.63 683.414 L1266.08 683.414 L1265.52 683.414 L1264.96 683.414 L1264.4 683.414 L1263.84 683.414 L1263.28 683.414 L1262.72 683.414 L1262.16 683.414 L1261.6 683.414 L1261.04 683.414 L1260.48 683.414 L1259.92 683.414 L1259.36 683.414 L1258.81 683.414 L1258.25 683.414 L1257.69 683.414 L1257.13 683.414 L1256.57 683.414 L1256.01 683.414 L1255.45 683.414 L1254.89 683.414 L1254.33 683.414 L1253.77 683.414 L1253.21 683.414 L1252.65 683.414 L1252.09 683.414 L1251.54 683.414 L1250.98 683.414 L1250.42 683.414 L1249.86 683.414 L1249.3 683.414 L1248.74 683.414 L1248.18 683.414 L1247.62 683.414 L1247.06 683.414 L1246.5 683.414 L1245.94 683.414 L1245.38 683.414 L1244.82 683.414 L1244.26 683.414 L1243.71 683.414 L1243.15 683.414 L1242.59 683.414 L1242.03 683.414 L1241.47 683.414 L1240.91 683.414 L1240.35 683.414 L1239.79 683.414 L1239.23 683.414 L1238.67 683.414 L1238.11 683.414 L1237.55 683.414 L1236.99 683.414 L1236.44 683.414 L1235.88 683.414 L1235.32 683.414 L1234.76 683.414 L1234.2 683.414 L1233.64 683.414 L1233.08 683.414 L1232.52 683.414 L1231.96 683.414 L1231.4 683.414 L1230.84 683.414 L1230.28 683.414 L1229.72 683.414 L1229.17 683.414 L1228.61 683.414 L1228.05 683.414 L1227.49 683.414 L1226.93 683.414 L1226.37 683.414 L1225.81 683.414 L1225.25 683.414 L1224.69 683.414 L1224.13 683.414 L1223.57 683.414 L1223.01 683.414 L1222.45 683.414 L1221.89 683.414 L1221.34 683.414 L1220.78 683.414 L1220.22 683.414 L1219.66 683.414 L1219.1 683.414 L1218.54 683.414 L1217.98 683.414 L1217.42 683.414 L1216.86 683.414 L1216.3 683.414 L1215.74 683.414 L1215.18 683.414 L1214.62 683.414 L1214.07 683.414 L1213.51 683.414 L1212.95 683.414 L1212.39 683.414 L1211.83 683.414 L1211.27 683.414 L1210.71 683.414 L1210.15 683.414 L1209.59 683.414 L1209.03 683.414 L1208.47 683.414 L1207.91 683.414 L1207.35 683.414 L1206.8 683.414 L1206.24 683.414 L1205.68 683.414 L1205.12 683.414 L1204.56 683.414 L1204 683.414 L1203.44 683.414 L1202.88 683.414 L1202.32 683.414 L1201.76 683.414 L1201.2 683.414 L1200.64 683.414 L1200.08 683.414 L1199.52 683.414 L1198.97 683.414 L1198.41 683.414 L1197.85 683.414 L1197.29 683.414 L1196.73 683.414 L1196.17 683.414 L1195.61 683.414 L1195.05 683.414 L1194.49 683.414 L1193.93 683.414 L1193.37 683.414 L1192.81 683.414 L1192.25 683.414 L1191.7 683.414 L1191.14 683.414 L1190.58 683.414 L1190.02 683.414 L1189.46 683.414 L1188.9 683.414 L1188.34 683.414 L1187.78 683.414 L1187.22 683.414 L1186.66 683.414 L1186.1 683.414 L1185.54 683.414 L1184.98 683.414 L1184.43 683.414 L1183.87 683.414 L1183.31 683.414 L1182.75 683.414 L1182.19 683.414 L1181.63 683.414 L1181.07 683.414 L1180.51 683.414 L1179.95 683.414 L1179.39 683.414 L1178.83 683.414 L1178.27 683.414 L1177.71 683.414 L1177.15 683.414 L1176.6 683.414 L1176.04 683.414 L1175.48 683.414 L1174.92 683.414 L1174.36 683.414 L1173.8 683.414 L1173.24 683.414 L1172.68 683.414 L1172.12 683.414 L1171.56 683.414 L1171 683.414 L1170.44 683.414 L1169.88 683.414 L1169.33 683.414 L1168.77 683.414 L1168.21 683.414 L1167.65 683.414 L1167.09 683.414 L1166.53 683.414 L1165.97 683.414 L1165.41 683.414 L1164.85 683.414 L1164.29 683.414 L1163.73 683.414 L1163.17 683.414 L1162.61 683.414 L1162.05 683.414 L1161.5 683.414 L1160.94 683.414 L1160.38 683.414 L1159.82 683.414 L1159.26 683.414 L1158.7 683.414 L1158.14 683.414 L1157.58 683.414 L1157.02 683.414 L1156.46 683.414 L1155.9 683.414 L1155.34 683.414 L1154.78 683.414 L1154.23 683.414 L1153.67 683.414 L1153.11 683.414 L1152.55 683.414 L1151.99 683.414 L1151.43 683.414 L1150.87 683.414 L1150.31 683.414 L1149.75 683.414 L1149.19 683.414 L1148.63 683.414 L1148.07 683.414 L1147.51 683.414 L1146.96 683.414 L1146.4 683.414 L1145.84 683.414 L1145.28 683.414 L1144.72 683.414 L1144.16 683.414 L1143.6 683.414 L1143.04 683.414 L1142.48 683.414 L1141.92 683.414 L1141.36 683.414 L1140.8 683.414 L1140.24 683.414 L1139.68 683.414 L1139.13 683.414 L1138.57 683.414 L1138.01 683.414 L1137.45 683.414 L1136.89 683.414 L1136.33 683.414 L1135.77 683.414 L1135.21 683.414 L1134.65 683.414 L1134.09 683.414 L1133.53 683.414 L1132.97 683.414 L1132.41 683.414 L1131.86 683.414 L1131.3 683.414 L1130.74 683.414 L1130.18 683.414 L1129.62 683.414 L1129.06 683.414 L1128.5 683.414 L1127.94 683.414 L1127.38 683.414 L1126.82 683.414 L1126.26 683.414 L1125.7 683.414 L1125.14 683.414 L1124.59 683.414 L1124.03 683.414 L1123.47 683.414 L1122.91 683.414 L1122.35 683.414 L1121.79 683.414 L1121.23 683.414 L1120.67 683.414 L1120.11 683.414 L1119.55 683.414 L1118.99 683.414 L1118.43 683.414 L1117.87 683.414 L1117.31 683.414 L1116.76 683.414 L1116.2 683.414 L1115.64 683.414 L1115.08 683.414 L1114.52 683.414 L1113.96 683.414 L1113.4 683.414 L1112.84 683.414 L1112.28 683.414 L1111.72 683.414 L1111.16 683.414 L1110.6 683.414 L1110.04 683.414 L1109.49 683.414 L1108.93 683.414 L1108.37 683.414 L1107.81 683.414 L1107.25 683.414 L1106.69 683.414 L1106.13 683.414 L1105.57 683.414 L1105.01 683.414 L1104.45 683.414 L1103.89 683.414 L1103.33 683.414 L1102.77 683.414 L1102.22 683.414 L1101.66 683.414 L1101.1 683.414 L1100.54 683.414 L1099.98 683.414 L1099.42 683.414 L1098.86 683.414 L1098.3 683.414 L1097.74 683.414 L1097.18 683.414 L1096.62 683.414 L1096.06 683.414 L1095.5 683.414 L1094.94 683.414 L1094.39 683.414 L1093.83 683.414 L1093.27 683.414 L1092.71 683.414 L1092.15 683.414 L1091.59 683.414 L1091.03 683.414 L1090.47 683.414 L1089.91 683.414 L1089.35 683.414 L1088.79 683.414 L1088.23 683.414 L1087.67 683.414 L1087.12 683.414 L1086.56 683.414 L1086 683.414 L1085.44 683.414 L1084.88 683.414 L1084.32 683.414 L1083.76 683.414 L1083.2 683.414 L1082.64 683.414 L1082.08 683.414 L1081.52 683.414 L1080.96 683.414 L1080.4 683.414 L1079.85 683.414 L1079.29 683.414 L1078.73 683.414 L1078.17 683.414 L1077.61 683.414 L1077.05 683.414 L1076.49 683.414 L1075.93 683.414 L1075.37 683.414 L1074.81 683.414 L1074.25 683.414 L1073.69 683.414 L1073.13 683.414 L1072.57 683.414 L1072.02 683.414 L1071.46 683.414 L1070.9 683.414 L1070.34 683.414 L1069.78 683.414 L1069.22 683.414 L1068.66 683.414 L1068.1 683.414 L1067.54 683.414 L1066.98 683.414 L1066.42 683.414 L1065.86 683.414 L1065.3 683.414 L1064.75 683.414 L1064.19 683.414 L1063.63 683.414 L1063.07 683.414 L1062.51 683.414 L1061.95 683.414 L1061.39 683.414 L1060.83 683.414 L1060.27 683.414 L1059.71 683.414 L1059.15 683.414 L1058.59 683.414 L1058.03 683.414 L1057.48 683.414 L1056.92 683.414 L1056.36 683.414 L1055.8 683.414 L1055.24 683.414 L1054.68 683.414 L1054.12 683.414 L1053.56 683.414 L1053 683.414 L1052.44 683.414 L1051.88 683.414 L1051.32 683.414 L1050.76 683.414 L1050.2 683.414 L1049.65 683.414 L1049.09 683.414 L1048.53 683.414 L1047.97 683.414 L1047.41 683.414 L1046.85 683.414 L1046.29 683.414 L1045.73 683.414 L1045.17 683.414 L1044.61 683.414 L1044.05 683.414 L1043.49 683.414 L1042.93 683.414 L1042.38 683.414 L1041.82 683.414 L1041.26 683.414 L1040.7 683.414 L1040.14 683.414 L1039.58 683.414 L1039.02 683.414 L1038.46 683.414 L1037.9 683.414 L1037.34 683.414 L1036.78 683.414 L1036.22 683.414 L1035.66 683.414 L1035.1 683.414 L1034.55 683.414 L1033.99 683.414 L1033.43 683.414 L1032.87 683.414 L1032.31 683.414 L1031.75 683.414 L1031.19 683.414 L1030.63 683.414 L1030.07 683.414 L1029.51 683.414 L1028.95 683.414 L1028.39 683.414 L1027.83 683.414 L1027.28 683.414 L1026.72 683.414 L1026.16 683.414 L1025.6 683.414 L1025.04 683.414 L1024.48 683.414 L1023.92 683.414 L1023.36 683.414 L1022.8 683.414 L1022.24 683.414 L1021.68 683.414 L1021.12 683.414 L1020.56 683.414 L1020.01 683.414 L1019.45 683.414 L1018.89 683.414 L1018.33 683.414 L1017.77 683.414 L1017.21 683.414 L1016.65 683.414 L1016.09 683.414 L1015.53 683.414 L1014.97 683.414 L1014.41 683.414 L1013.85 683.414 L1013.29 683.414 L1012.73 683.414 L1012.18 683.414 L1011.62 683.414 L1011.06 683.414 L1010.5 683.414 L1009.94 683.414 L1009.38 683.414 L1008.82 683.414 L1008.26 683.414 L1007.7 683.414 L1007.14 683.414 L1006.58 683.414 L1006.02 683.414 L1005.46 683.414 L1004.91 683.414 L1004.35 683.414 L1003.79 683.414 L1003.23 683.414 L1002.67 683.414 L1002.11 683.414 L1001.55 683.414 L1000.99 683.414 L1000.43 683.414 L999.872 683.414 L999.313 683.414 L998.754 683.414 L998.194 683.414 L997.635 683.414 L997.076 683.414 L996.517 683.414 L995.957 683.414 L995.398 683.414 L994.839 683.414 L994.28 683.414 L993.72 683.414 L993.161 683.414 L992.602 683.414 L992.043 683.414 L991.483 683.414 L990.924 683.414 L990.365 683.414 L989.806 683.414 L989.246 683.414 L988.687 683.414 L988.128 683.414 L987.569 683.414 L987.009 683.414 L986.45 683.414 L985.891 683.414 L985.332 683.414 L984.772 683.414 L984.213 683.414 L983.654 683.414 L983.095 683.414 L982.535 683.414 L981.976 683.414 L981.417 683.414 L980.858 683.414 L980.298 683.414 L979.739 683.414 L979.18 683.414 L978.621 683.414 L978.061 683.414 L977.502 683.414 L976.943 683.414 L976.384 683.414 L975.824 683.414 L975.265 683.414 L974.706 683.414 L974.147 683.414 L973.587 683.414 L973.028 683.414 L972.469 683.414 L971.91 683.414 L971.35 683.414 L970.791 683.414 L970.232 683.414 L969.673 683.414 L969.113 683.414 L968.554 683.414 L967.995 683.414 L967.436 683.414 L966.876 683.414 L966.317 683.414 L965.758 683.414 L965.199 683.414 L964.639 683.414 L964.08 683.414 L963.521 683.414 L962.962 683.414 L962.402 683.414 L961.843 683.414 L961.284 683.414 L960.725 683.414 L960.165 683.414 L959.606 683.414 L959.047 683.414 L958.488 683.414 L957.928 683.414 L957.369 683.414 L956.81 683.414 L956.251 683.414 L955.691 683.414 L955.132 683.414 L954.573 683.414 L954.014 683.414 L953.454 683.414 L952.895 683.414 L952.336 683.414 L951.777 683.414 L951.217 683.414 L950.658 683.414 L950.099 683.414 L949.54 683.414 L948.98 683.414 L948.421 683.414 L947.862 683.414 L947.303 683.414 L946.743 683.414 L946.184 683.414 L945.625 683.414 L945.066 683.414 L944.506 683.414 L943.947 683.414 L943.388 683.414 L942.829 683.414 L942.269 683.414 L941.71 683.414 L941.151 683.414 L940.592 683.414 L940.032 683.414 L939.473 683.414 L938.914 683.414 L938.355 683.414 L937.795 683.414 L937.236 683.414 L936.677 683.414 L936.118 683.414 L935.558 683.414 L934.999 683.414 L934.44 683.414 L933.881 683.414 L933.321 683.414 L932.762 683.414 L932.203 683.414 L931.644 683.414 L931.084 683.414 L930.525 683.414 L929.966 683.414 L929.406 683.414 L928.847 683.414 L928.288 683.414 L927.729 683.414 L927.169 683.414 L926.61 683.414 L926.051 683.414 L925.492 683.414 L924.932 683.414 L924.373 683.414 L923.814 683.414 L923.255 683.414 L922.695 683.414 L922.136 683.414 L921.577 683.414 L921.018 683.414 L920.458 683.414 L919.899 683.414 L919.34 683.414 L918.781 683.414 L918.221 683.414 L917.662 683.414 L917.103 683.414 L916.544 683.414 L915.984 683.414 L915.425 683.414 L914.866 683.414 L914.307 683.414 L913.747 683.414 L913.188 683.414 L912.629 683.414 L912.07 683.414 L911.51 683.414 L910.951 683.414 L910.392 683.414 L909.833 683.414 L909.273 683.414 L908.714 683.414 L908.155 683.414 L907.596 683.414 L907.036 683.414 L906.477 683.414 L905.918 683.414 L905.359 683.414 L904.799 683.414 L904.24 683.414 L903.681 683.414 L903.122 683.414 L902.562 683.414 L902.003 683.414 L901.444 683.414 L900.885 683.414 L900.325 683.414 L899.766 683.414 L899.207 683.414 L898.648 683.414 L898.088 683.414 L897.529 683.414 L896.97 683.414 L896.411 683.414 L895.851 683.414 L895.292 683.414 L894.733 683.414 L894.174 683.414 L893.614 683.414 L893.055 683.414 L892.496 683.414 L891.937 683.414 L891.377 683.414 L890.818 683.414 L890.259 683.414 L889.7 683.414 L889.14 683.414 L888.581 683.414 L888.022 683.414 L887.463 683.414 L886.903 683.414 L886.344 683.414 L885.785 683.414 L885.226 683.414 L884.666 683.414 L884.107 683.414 L883.548 683.414 L882.989 683.414 L882.429 683.414 L881.87 683.414 L881.311 683.414 L880.752 683.414 L880.192 683.414 L879.633 683.414 L879.074 683.414 L878.515 683.414 L877.955 683.414 L877.396 683.414 L876.837 683.414 L876.278 683.414 L875.718 683.414 L875.159 683.414 L874.6 683.414 L874.041 683.414 L873.481 683.414 L872.922 683.414 L872.363 683.414 L871.804 683.414 L871.244 683.414 L870.685 683.414 L870.126 683.414 L869.567 683.414 L869.007 683.414 L868.448 683.414 L867.889 683.414 L867.33 683.414 L866.77 683.414 L866.211 683.414 L865.652 683.414 L865.093 683.414 L864.533 683.414 L863.974 683.414 L863.415 683.414 L862.856 683.414 L862.296 683.414 L861.737 683.414 L861.178 683.414 L860.619 683.414 L860.059 683.414 L859.5 683.414 L858.941 683.414 L858.382 683.414 L857.822 683.414 L857.263 683.414 L856.704 683.414 L856.145 683.414 L855.585 683.414 L855.026 683.414 L854.467 683.414 L853.908 683.414 L853.348 683.414 L852.789 683.414 L852.23 683.414 L851.671 683.414 L851.111 683.414 L850.552 683.414 L849.993 683.414 L849.434 683.414 L848.874 683.414 L848.315 683.414 L847.756 683.414 L847.197 683.414 L846.637 683.414 L846.078 683.414 L845.519 683.414 L844.96 683.414 L844.4 683.414 L843.841 683.414 L843.282 683.414 L842.723 683.414 L842.163 683.414 L841.604 683.414 L841.045 683.414 L840.486 683.414 L839.926 683.414 L839.367 683.414 L838.808 683.414 L838.249 683.414 L837.689 683.414 L837.13 683.414 L836.571 683.414 L836.012 683.414 L835.452 683.414 L834.893 683.414 L834.334 683.414 L833.775 683.414 L833.215 683.414 L832.656 683.414 L832.097 683.414 L831.538 683.414 L830.978 683.414 L830.419 683.414 L829.86 683.414 L829.301 683.414 L828.741 683.414 L828.182 683.414 L827.623 683.414 L827.064 683.414 L826.504 683.414 L825.945 683.414 L825.386 683.414 L824.827 683.414 L824.267 683.414 L823.708 683.414 L823.149 683.414 L822.59 683.414 L822.03 683.414 L821.471 683.414 L820.912 683.414 L820.353 683.414 L819.793 683.414 L819.234 683.414 L818.675 683.414 L818.116 683.414 L817.556 683.414 L816.997 683.414 L816.438 683.414 L815.879 683.414 L815.319 683.414 L814.76 683.414 L814.201 683.414 L813.642 683.414 L813.082 683.414 L812.523 683.414 L811.964 683.414 L811.405 683.414 L810.845 683.414 L810.286 683.414 L809.727 683.414 L809.168 683.414 L808.608 683.414 L808.049 683.414 L807.49 683.414 L806.931 683.414 L806.371 683.414 L805.812 683.414 L805.253 683.414 L804.693 683.414 L804.134 683.414 L803.575 683.414 L803.016 683.414 L802.456 683.414 L801.897 683.414 L801.338 683.414 L800.779 683.414 L800.219 683.414 L799.66 683.414 L799.101 683.414 L798.542 683.414 L797.982 683.414 L797.423 683.414 L796.864 683.414 L796.305 683.414 L795.745 683.414 L795.186 683.414 L794.627 683.414 L794.068 683.414 L793.508 683.414 L792.949 683.414 L792.39 683.414 L791.831 683.414 L791.271 683.414 L790.712 683.414 L790.153 683.414 L789.594 683.414 L789.034 683.414 L788.475 683.414 L787.916 683.414 L787.357 683.414 L786.797 683.414 L786.238 683.414 L785.679 683.414 L785.12 683.414 L784.56 683.414 L784.001 683.414 L783.442 683.414 L782.883 683.414 L782.323 683.414 L781.764 683.414 L781.205 683.414 L780.646 683.414 L780.086 683.414 L779.527 683.414 L778.968 683.414 L778.409 683.414 L777.849 683.414 L777.29 683.414 L776.731 683.414 L776.172 683.414 L775.612 683.414 L775.053 683.414 L774.494 683.414 L773.935 683.414 L773.375 683.414 L772.816 683.414 L772.257 683.414 L771.698 683.414 L771.138 683.414 L770.579 683.414 L770.02 683.414 L769.461 683.414 L768.901 683.414 L768.342 683.414 L767.783 683.414 L767.224 683.414 L766.664 683.414 L766.105 683.414 L765.546 683.414 L764.987 683.414 L764.427 683.414 L763.868 683.414 L763.309 683.414 L762.75 683.414 L762.19 683.414 L761.631 683.414 L761.072 683.414 L760.513 683.414 L759.953 683.414 L759.394 683.414 L758.835 683.414 L758.276 683.414 L757.716 683.414 L757.157 683.414 L756.598 683.414 L756.039 683.414 L755.479 683.414 L754.92 683.414 L754.361 683.414 L753.802 683.414 L753.242 683.414 L752.683 683.414 L752.124 683.414 L751.565 683.414 L751.005 683.414 L750.446 683.414 L749.887 683.414 L749.328 683.414 L748.768 683.414 L748.209 683.414 L747.65 683.414 L747.091 683.414 L746.531 683.414 L745.972 683.414 L745.413 683.414 L744.854 683.414 L744.294 683.414 L743.735 683.414 L743.176 683.414 L742.617 683.414 L742.057 683.414 L741.498 683.414 L740.939 683.414 L740.38 683.414 L739.82 683.414 L739.261 683.414 L738.702 683.414 L738.143 683.414 L737.583 683.414 L737.024 683.414 L736.465 683.414 L735.906 683.414 L735.346 683.414 L734.787 683.414 L734.228 683.414 L733.669 683.414 L733.109 683.414 L732.55 683.414 L731.991 683.414 L731.432 683.414 L730.872 683.414 L730.313 683.414 L729.754 683.414 L729.195 683.414 L728.635 683.414 L728.076 683.414 L727.517 683.414 L726.958 683.414 L726.398 683.414 L725.839 683.414 L725.28 683.414 L724.721 683.414 L724.161 683.414 L723.602 683.414 L723.043 683.414 L722.484 683.414 L721.924 683.414 L721.365 683.414 L720.806 683.414 L720.247 683.414  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip843)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.599 720.806,687.599 721.365,687.599 721.924,687.599 722.484,687.599 723.043,687.599 723.602,687.599 724.161,687.599 724.721,687.599 725.28,687.599 725.839,687.599 726.398,687.599 726.958,687.599 727.517,687.599 728.076,687.599 728.635,687.599 729.195,687.599 729.754,687.599 730.313,687.599 730.872,687.599 731.432,687.599 731.991,687.599 732.55,687.599 733.109,687.599 733.669,687.599 734.228,687.599 734.787,687.599 735.346,687.599 735.906,687.599 736.465,687.599 737.024,687.599 737.583,687.599 738.143,687.599 738.702,687.599 739.261,687.599 739.82,687.599 740.38,687.599 740.939,687.599 741.498,687.599 742.057,687.599 742.617,687.599 743.176,687.599 743.735,687.599 744.294,687.599 744.854,687.599 745.413,687.599 745.972,687.599 746.531,687.599 747.091,687.599 747.65,687.599 748.209,687.599 748.768,687.599 749.328,687.599 749.887,687.599 750.446,687.599 751.005,687.599 751.565,687.599 752.124,687.599 752.683,687.599 753.242,687.599 753.802,687.599 754.361,687.599 754.92,687.599 755.479,687.599 756.039,687.599 756.598,687.599 757.157,687.599 757.716,687.599 758.276,687.599 758.835,687.599 759.394,687.599 759.953,687.599 760.513,687.599 761.072,687.599 761.631,687.599 762.19,687.599 762.75,687.599 763.309,687.599 763.868,687.599 764.427,687.599 764.987,687.599 765.546,687.599 766.105,687.599 766.664,687.599 767.224,687.599 767.783,687.599 768.342,687.599 768.901,687.599 769.461,687.599 770.02,687.599 770.579,687.599 771.138,687.599 771.698,687.599 772.257,687.599 772.816,687.599 773.375,687.599 773.935,687.599 774.494,687.599 775.053,687.599 775.612,687.599 776.172,687.599 776.731,687.599 777.29,687.599 777.849,687.599 778.409,687.599 778.968,687.599 779.527,687.599 780.086,687.599 780.646,687.599 781.205,687.599 781.764,687.599 782.323,687.599 782.883,687.599 783.442,687.599 784.001,687.599 784.56,687.599 785.12,687.599 785.679,687.599 786.238,687.599 786.797,687.599 787.357,687.599 787.916,687.599 788.475,687.599 789.034,687.599 789.594,687.599 790.153,687.599 790.712,687.599 791.271,687.599 791.831,687.599 792.39,687.599 792.949,687.599 793.508,687.599 794.068,687.599 794.627,687.599 795.186,687.599 795.745,687.599 796.305,687.599 796.864,687.599 797.423,687.599 797.982,687.599 798.542,687.599 799.101,687.599 799.66,687.599 800.219,687.599 800.779,687.599 801.338,687.599 801.897,687.599 802.456,687.599 803.016,687.599 803.575,687.599 804.134,687.599 804.693,687.599 805.253,687.599 805.812,687.599 806.371,687.599 806.931,687.599 807.49,687.599 808.049,687.599 808.608,687.599 809.168,687.599 809.727,687.599 810.286,687.599 810.845,687.599 811.405,687.599 811.964,687.599 812.523,687.599 813.082,687.599 813.642,687.599 814.201,687.599 814.76,687.599 815.319,687.599 815.879,687.599 816.438,687.599 816.997,687.599 817.556,687.599 818.116,687.599 818.675,687.599 819.234,687.599 819.793,687.599 820.353,687.599 820.912,687.599 821.471,687.599 822.03,687.599 822.59,687.599 823.149,687.599 823.708,687.599 824.267,687.599 824.827,687.599 825.386,687.599 825.945,687.599 826.504,687.599 827.064,687.599 827.623,687.599 828.182,687.599 828.741,687.599 829.301,687.599 829.86,687.599 830.419,687.599 830.978,687.599 831.538,687.599 832.097,687.599 832.656,687.599 833.215,687.599 833.775,687.599 834.334,687.599 834.893,687.599 835.452,687.599 836.012,687.599 836.571,687.599 837.13,687.599 837.689,687.599 838.249,687.599 838.808,687.599 839.367,687.599 839.926,687.599 840.486,687.599 841.045,687.599 841.604,687.599 842.163,687.599 842.723,687.599 843.282,687.599 843.841,687.599 844.4,687.599 844.96,687.599 845.519,687.599 846.078,687.599 846.637,687.599 847.197,687.599 847.756,687.599 848.315,687.599 848.874,687.599 849.434,687.599 849.993,687.599 850.552,687.599 851.111,687.599 851.671,687.599 852.23,687.599 852.789,687.599 853.348,687.599 853.908,687.599 854.467,687.599 855.026,687.599 855.585,687.599 856.145,687.599 856.704,687.599 857.263,687.599 857.822,687.599 858.382,687.599 858.941,687.599 859.5,687.599 860.059,687.599 860.619,687.599 861.178,687.599 861.737,687.599 862.296,687.599 862.856,687.599 863.415,687.599 863.974,687.599 864.533,687.599 865.093,687.599 865.652,687.599 866.211,687.599 866.77,687.599 867.33,687.599 867.889,687.599 868.448,687.599 869.007,687.599 869.567,687.599 870.126,687.599 870.685,687.599 871.244,687.599 871.804,687.599 872.363,687.599 872.922,687.599 873.481,687.599 874.041,687.599 874.6,687.599 875.159,687.599 875.718,687.599 876.278,687.599 876.837,687.599 877.396,687.599 877.955,687.599 878.515,687.599 879.074,687.599 879.633,687.599 880.192,687.599 880.752,687.599 881.311,687.599 881.87,687.599 882.429,687.599 882.989,687.599 883.548,687.599 884.107,687.599 884.666,687.599 885.226,687.599 885.785,687.599 886.344,687.599 886.903,687.599 887.463,687.599 888.022,687.599 888.581,687.599 889.14,687.599 889.7,687.599 890.259,687.599 890.818,687.599 891.377,687.599 891.937,687.599 892.496,687.599 893.055,687.599 893.614,687.599 894.174,687.599 894.733,687.599 895.292,687.599 895.851,687.599 896.411,687.599 896.97,687.599 897.529,687.599 898.088,687.599 898.648,687.599 899.207,687.599 899.766,687.599 900.325,687.599 900.885,687.599 901.444,687.599 902.003,687.599 902.562,687.599 903.122,687.599 903.681,687.599 904.24,687.599 904.799,687.599 905.359,687.599 905.918,687.599 906.477,687.599 907.036,687.599 907.596,687.599 908.155,687.599 908.714,687.599 909.273,687.599 909.833,687.599 910.392,687.599 910.951,687.599 911.51,687.599 912.07,687.599 912.629,687.599 913.188,687.599 913.747,687.599 914.307,687.599 914.866,687.599 915.425,687.599 915.984,687.599 916.544,687.599 917.103,687.599 917.662,687.599 918.221,687.599 918.781,687.599 919.34,687.599 919.899,687.599 920.458,687.599 921.018,687.599 921.577,687.599 922.136,687.599 922.695,687.599 923.255,687.599 923.814,687.599 924.373,687.599 924.932,687.599 925.492,687.599 926.051,687.599 926.61,687.599 927.169,687.599 927.729,687.599 928.288,687.599 928.847,687.599 929.406,687.599 929.966,687.599 930.525,687.599 931.084,687.599 931.644,687.599 932.203,687.599 932.762,687.599 933.321,687.599 933.881,687.599 934.44,687.599 934.999,687.599 935.558,687.599 936.118,687.599 936.677,687.599 937.236,687.599 937.795,687.599 938.355,687.599 938.914,687.599 939.473,687.599 940.032,687.599 940.592,687.599 941.151,687.599 941.71,687.599 942.269,687.599 942.829,687.599 943.388,687.599 943.947,687.599 944.506,687.599 945.066,687.599 945.625,687.599 946.184,687.599 946.743,687.599 947.303,687.599 947.862,687.599 948.421,687.599 948.98,687.599 949.54,687.599 950.099,687.599 950.658,687.599 951.217,687.599 951.777,687.599 952.336,687.599 952.895,687.599 953.454,687.599 954.014,687.599 954.573,687.599 955.132,687.599 955.691,687.599 956.251,687.599 956.81,687.599 957.369,687.599 957.928,687.599 958.488,687.599 959.047,687.599 959.606,687.599 960.165,687.599 960.725,687.599 961.284,687.599 961.843,687.599 962.402,687.599 962.962,687.599 963.521,687.599 964.08,687.599 964.639,687.599 965.199,687.599 965.758,687.599 966.317,687.599 966.876,687.599 967.436,687.599 967.995,687.599 968.554,687.599 969.113,687.599 969.673,687.599 970.232,687.599 970.791,687.599 971.35,687.599 971.91,687.599 972.469,687.599 973.028,687.599 973.587,687.599 974.147,687.599 974.706,687.599 975.265,687.599 975.824,687.599 976.384,687.599 976.943,687.599 977.502,687.599 978.061,687.599 978.621,687.599 979.18,687.599 979.739,687.599 980.298,687.599 980.858,687.599 981.417,687.599 981.976,687.599 982.535,687.599 983.095,687.599 983.654,687.599 984.213,687.599 984.772,687.599 985.332,687.599 985.891,687.599 986.45,687.599 987.009,687.599 987.569,687.599 988.128,687.599 988.687,687.599 989.246,687.599 989.806,687.599 990.365,687.599 990.924,687.599 991.483,687.599 992.043,687.599 992.602,687.599 993.161,687.599 993.72,687.599 994.28,687.599 994.839,687.599 995.398,687.599 995.957,687.599 996.517,687.599 997.076,687.599 997.635,687.599 998.194,687.599 998.754,687.599 999.313,687.599 999.872,687.599 1000.43,687.599 1000.99,687.599 1001.55,687.599 1002.11,687.599 1002.67,687.599 1003.23,687.599 1003.79,687.599 1004.35,687.599 1004.91,687.599 1005.46,687.599 1006.02,687.599 1006.58,687.599 1007.14,687.599 1007.7,687.599 1008.26,687.599 1008.82,687.599 1009.38,687.599 1009.94,687.599 1010.5,687.599 1011.06,687.599 1011.62,687.599 1012.18,687.599 1012.73,687.599 1013.29,687.599 1013.85,687.599 1014.41,687.599 1014.97,687.599 1015.53,687.599 1016.09,687.599 1016.65,687.599 1017.21,687.599 1017.77,687.599 1018.33,687.599 1018.89,687.599 1019.45,687.599 1020.01,687.599 1020.56,687.599 1021.12,687.599 1021.68,687.599 1022.24,687.599 1022.8,687.599 1023.36,687.599 1023.92,687.599 1024.48,687.599 1025.04,687.599 1025.6,687.599 1026.16,687.599 1026.72,687.599 1027.28,687.599 1027.83,687.599 1028.39,687.599 1028.95,687.599 1029.51,687.599 1030.07,687.599 1030.63,687.599 1031.19,687.599 1031.75,687.599 1032.31,687.599 1032.87,687.599 1033.43,687.599 1033.99,687.599 1034.55,687.599 1035.1,687.599 1035.66,687.599 1036.22,687.599 1036.78,687.599 1037.34,687.599 1037.9,687.599 1038.46,687.599 1039.02,687.599 1039.58,687.599 1040.14,687.599 1040.7,687.599 1041.26,687.599 1041.82,687.599 1042.38,687.599 1042.93,687.599 1043.49,687.599 1044.05,687.599 1044.61,687.599 1045.17,687.599 1045.73,687.599 1046.29,687.599 1046.85,687.599 1047.41,687.599 1047.97,687.599 1048.53,687.599 1049.09,687.599 1049.65,687.599 1050.2,687.599 1050.76,687.599 1051.32,687.599 1051.88,687.599 1052.44,687.599 1053,687.599 1053.56,687.599 1054.12,687.599 1054.68,687.599 1055.24,687.599 1055.8,687.599 1056.36,687.599 1056.92,687.599 1057.48,687.599 1058.03,687.599 1058.59,687.599 1059.15,687.599 1059.71,687.599 1060.27,687.599 1060.83,687.599 1061.39,687.599 1061.95,687.599 1062.51,687.599 1063.07,687.599 1063.63,687.599 1064.19,687.599 1064.75,687.599 1065.3,687.599 1065.86,687.599 1066.42,687.599 1066.98,687.599 1067.54,687.599 1068.1,687.599 1068.66,687.599 1069.22,687.599 1069.78,687.599 1070.34,687.599 1070.9,687.599 1071.46,687.599 1072.02,687.599 1072.57,687.599 1073.13,687.599 1073.69,687.599 1074.25,687.599 1074.81,687.599 1075.37,687.599 1075.93,687.599 1076.49,687.599 1077.05,687.599 1077.61,687.599 1078.17,687.599 1078.73,687.599 1079.29,687.599 1079.85,687.599 1080.4,687.599 1080.96,687.599 1081.52,687.599 1082.08,687.599 1082.64,687.599 1083.2,687.599 1083.76,687.599 1084.32,687.599 1084.88,687.599 1085.44,687.599 1086,687.599 1086.56,687.599 1087.12,687.599 1087.67,687.599 1088.23,687.599 1088.79,687.599 1089.35,687.599 1089.91,687.599 1090.47,687.599 1091.03,687.599 1091.59,687.599 1092.15,687.599 1092.71,687.599 1093.27,687.599 1093.83,687.599 1094.39,687.599 1094.94,687.599 1095.5,687.599 1096.06,687.599 1096.62,687.599 1097.18,687.599 1097.74,687.599 1098.3,687.599 1098.86,687.599 1099.42,687.599 1099.98,687.599 1100.54,687.599 1101.1,687.599 1101.66,687.599 1102.22,687.599 1102.77,687.599 1103.33,687.599 1103.89,687.599 1104.45,687.599 1105.01,687.599 1105.57,687.599 1106.13,687.599 1106.69,687.599 1107.25,687.599 1107.81,687.599 1108.37,687.599 1108.93,687.599 1109.49,687.599 1110.04,687.599 1110.6,687.599 1111.16,687.599 1111.72,687.599 1112.28,687.599 1112.84,687.599 1113.4,687.599 1113.96,687.599 1114.52,687.599 1115.08,687.599 1115.64,687.599 1116.2,687.599 1116.76,687.599 1117.31,687.599 1117.87,687.599 1118.43,687.599 1118.99,687.599 1119.55,687.599 1120.11,687.599 1120.67,687.599 1121.23,687.599 1121.79,687.599 1122.35,687.599 1122.91,687.599 1123.47,687.599 1124.03,687.599 1124.59,687.599 1125.14,687.599 1125.7,687.599 1126.26,687.599 1126.82,687.599 1127.38,687.599 1127.94,687.599 1128.5,687.599 1129.06,687.599 1129.62,687.599 1130.18,687.599 1130.74,687.599 1131.3,687.599 1131.86,687.599 1132.41,687.599 1132.97,687.599 1133.53,687.599 1134.09,687.599 1134.65,687.599 1135.21,687.599 1135.77,687.599 1136.33,687.599 1136.89,687.599 1137.45,687.599 1138.01,687.599 1138.57,687.599 1139.13,687.599 1139.68,687.599 1140.24,687.599 1140.8,687.599 1141.36,687.599 1141.92,687.599 1142.48,687.599 1143.04,687.599 1143.6,687.599 1144.16,687.599 1144.72,687.599 1145.28,687.599 1145.84,687.599 1146.4,687.599 1146.96,687.599 1147.51,687.599 1148.07,687.599 1148.63,687.599 1149.19,687.599 1149.75,687.599 1150.31,687.599 1150.87,687.599 1151.43,687.599 1151.99,687.599 1152.55,687.599 1153.11,687.599 1153.67,687.599 1154.23,687.599 1154.78,687.599 1155.34,687.599 1155.9,687.599 1156.46,687.599 1157.02,687.599 1157.58,687.599 1158.14,687.599 1158.7,687.599 1159.26,687.599 1159.82,687.599 1160.38,687.599 1160.94,687.599 1161.5,687.599 1162.05,687.599 1162.61,687.599 1163.17,687.599 1163.73,687.599 1164.29,687.599 1164.85,687.599 1165.41,687.599 1165.97,687.599 1166.53,687.599 1167.09,687.599 1167.65,687.599 1168.21,687.599 1168.77,687.599 1169.33,687.599 1169.88,687.599 1170.44,687.599 1171,687.599 1171.56,687.599 1172.12,687.599 1172.68,687.599 1173.24,687.599 1173.8,687.599 1174.36,687.599 1174.92,687.599 1175.48,687.599 1176.04,687.599 1176.6,687.599 1177.15,687.599 1177.71,687.599 1178.27,687.599 1178.83,687.599 1179.39,687.599 1179.95,687.599 1180.51,687.599 1181.07,687.599 1181.63,687.599 1182.19,687.599 1182.75,687.599 1183.31,687.599 1183.87,687.599 1184.43,687.599 1184.98,687.599 1185.54,687.599 1186.1,687.599 1186.66,687.599 1187.22,687.599 1187.78,687.599 1188.34,687.599 1188.9,687.599 1189.46,687.599 1190.02,687.599 1190.58,687.599 1191.14,687.599 1191.7,687.599 1192.25,687.599 1192.81,687.599 1193.37,687.599 1193.93,687.599 1194.49,687.599 1195.05,687.599 1195.61,687.599 1196.17,687.599 1196.73,687.599 1197.29,687.599 1197.85,687.599 1198.41,687.599 1198.97,687.599 1199.52,687.599 1200.08,687.599 1200.64,687.599 1201.2,687.599 1201.76,687.599 1202.32,687.599 1202.88,687.599 1203.44,687.599 1204,687.599 1204.56,687.599 1205.12,687.599 1205.68,687.599 1206.24,687.599 1206.8,687.599 1207.35,687.599 1207.91,687.599 1208.47,687.599 1209.03,687.599 1209.59,687.599 1210.15,687.599 1210.71,687.599 1211.27,687.599 1211.83,687.599 1212.39,687.599 1212.95,687.599 1213.51,687.599 1214.07,687.599 1214.62,687.599 1215.18,687.599 1215.74,687.599 1216.3,687.599 1216.86,687.599 1217.42,687.599 1217.98,687.599 1218.54,687.599 1219.1,687.599 1219.66,687.599 1220.22,687.599 1220.78,687.599 1221.34,687.599 1221.89,687.599 1222.45,687.599 1223.01,687.599 1223.57,687.599 1224.13,687.599 1224.69,687.599 1225.25,687.599 1225.81,687.599 1226.37,687.599 1226.93,687.599 1227.49,687.599 1228.05,687.599 1228.61,687.599 1229.17,687.599 1229.72,687.599 1230.28,687.599 1230.84,687.599 1231.4,687.599 1231.96,687.599 1232.52,687.599 1233.08,687.599 1233.64,687.599 1234.2,687.599 1234.76,687.599 1235.32,687.599 1235.88,687.599 1236.44,687.599 1236.99,687.599 1237.55,687.599 1238.11,687.599 1238.67,687.599 1239.23,687.599 1239.79,687.599 1240.35,687.599 1240.91,687.599 1241.47,687.599 1242.03,687.599 1242.59,687.599 1243.15,687.599 1243.71,687.599 1244.26,687.599 1244.82,687.599 1245.38,687.599 1245.94,687.599 1246.5,687.599 1247.06,687.599 1247.62,687.599 1248.18,687.599 1248.74,687.599 1249.3,687.599 1249.86,687.599 1250.42,687.599 1250.98,687.599 1251.54,687.599 1252.09,687.599 1252.65,687.599 1253.21,687.599 1253.77,687.599 1254.33,687.599 1254.89,687.599 1255.45,687.599 1256.01,687.599 1256.57,687.599 1257.13,687.599 1257.69,687.599 1258.25,687.599 1258.81,687.599 1259.36,687.599 1259.92,687.599 1260.48,687.599 1261.04,687.599 1261.6,687.599 1262.16,687.599 1262.72,687.599 1263.28,687.599 1263.84,687.599 1264.4,687.599 1264.96,687.599 1265.52,687.599 1266.08,687.599 1266.63,687.599 1267.19,687.599 1267.75,687.599 1268.31,687.599 1268.87,687.599 1269.43,687.599 1269.99,687.599 1270.55,687.599 1271.11,687.599 1271.67,687.599 1272.23,687.599 1272.79,687.599 1273.35,687.599 1273.91,687.599 1274.46,687.599 1275.02,687.599 1275.58,687.599 1276.14,687.599 1276.7,687.599 1277.26,687.599 1277.82,687.599 1278.38,687.599 1278.94,687.599 1279.5,687.599 1280.06,687.599 1280.62,687.599 1281.18,687.599 1281.73,687.599 1282.29,687.599 1282.85,687.599 1283.41,687.599 1283.97,687.599 1284.53,687.599 1285.09,687.599 1285.65,687.599 1286.21,687.599 1286.77,687.599 1287.33,687.599 1287.89,687.599 1288.45,687.599 1289,687.599 1289.56,687.599 1290.12,687.599 1290.68,687.599 1291.24,687.599 1291.8,687.599 1292.36,687.599 1292.92,687.599 1293.48,687.599 1294.04,687.599 1294.6,687.599 1295.16,687.599 1295.72,687.599 1296.28,687.599 1296.83,687.599 1297.39,687.599 1297.95,687.599 1298.51,687.599 1299.07,687.599 1299.63,687.599 1300.19,687.599 1300.75,687.599 1301.31,687.599 1301.87,687.599 1302.43,687.599 1302.99,687.599 1303.55,687.599 1304.1,687.599 1304.66,687.599 1305.22,687.599 1305.78,687.599 1306.34,687.599 1306.9,687.599 1307.46,687.599 1308.02,687.599 1308.58,687.599 1309.14,687.599 1309.7,687.599 1310.26,687.599 1310.82,687.599 1311.38,687.599 1311.93,687.599 1312.49,687.599 1313.05,687.599 1313.61,687.599 1314.17,687.599 1314.73,687.599 1315.29,687.599 1315.85,687.599 1316.41,687.599 1316.97,687.599 1317.53,687.599 1318.09,687.599 1318.65,687.599 1319.2,687.599 1319.76,687.599 1320.32,687.599 1320.88,687.599 1321.44,687.599 1322,687.599 1322.56,687.599 1323.12,687.599 1323.68,687.599 1324.24,687.599 1324.8,687.599 1325.36,687.599 1325.92,687.599 1326.47,687.599 1327.03,687.599 1327.59,687.599 1328.15,687.599 1328.71,687.599 1329.27,687.599 1329.83,687.599 1330.39,687.599 1330.95,687.599 1331.51,687.599 1332.07,687.599 1332.63,687.599 1333.19,687.599 1333.75,687.599 1334.3,687.599 1334.86,687.599 1335.42,687.599 1335.98,687.599 1336.54,687.599 1337.1,687.599 1337.66,687.599 1338.22,687.599 1338.78,687.599 1339.34,687.599 1339.9,687.599 1340.46,687.599 1341.02,687.599 1341.57,687.599 1342.13,687.599 1342.69,687.599 1343.25,687.599 1343.81,687.599 1344.37,687.599 1344.93,687.599 1345.49,687.599 1346.05,687.599 1346.61,687.599 1347.17,687.599 1347.73,687.599 1348.29,687.599 1348.84,687.599 1349.4,687.599 1349.96,687.599 1350.52,687.599 1351.08,687.599 1351.64,687.599 1352.2,687.599 1352.76,687.599 1353.32,687.599 1353.88,687.599 1354.44,687.599 1355,687.599 1355.56,687.599 1356.12,687.599 1356.67,687.599 1357.23,687.599 1357.79,687.599 1358.35,687.599 1358.91,687.599 1359.47,687.599 1360.03,687.599 1360.59,687.599 1361.15,687.599 1361.71,687.599 1362.27,687.599 1362.83,687.599 1363.39,687.599 1363.94,687.599 1364.5,687.599 1365.06,687.599 1365.62,687.599 1366.18,687.599 1366.74,687.599 1367.3,687.599 1367.86,687.599 1368.42,687.599 1368.98,687.599 1369.54,687.599 1370.1,687.599 1370.66,687.599 1371.21,687.599 1371.77,687.599 1372.33,687.599 1372.89,687.599 1373.45,687.599 1374.01,687.599 1374.57,687.599 1375.13,687.599 1375.69,687.599 1376.25,687.599 1376.81,687.599 1377.37,687.599 1377.93,687.599 1378.49,687.599 1379.04,687.599 1379.6,687.599 1380.16,687.599 1380.72,687.599 1381.28,687.599 1381.84,687.599 1382.4,687.599 1382.96,687.599 1383.52,687.599 1384.08,687.599 1384.64,687.599 1385.2,687.599 1385.76,687.599 1386.31,687.599 1386.87,687.599 1387.43,687.599 1387.99,687.599 1388.55,687.599 1389.11,687.599 1389.67,687.599 1390.23,687.599 1390.79,687.599 1391.35,687.599 1391.91,687.599 1392.47,687.599 1393.03,687.599 1393.58,687.599 1394.14,687.599 1394.7,687.599 1395.26,687.599 1395.82,687.599 1396.38,687.599 1396.94,687.599 1397.5,687.599 1398.06,687.599 1398.62,687.599 1399.18,687.599 1399.74,687.599 1400.3,687.599 1400.86,687.599 1401.41,687.599 1401.97,687.599 1402.53,687.599 1403.09,687.599 1403.65,687.599 1404.21,687.599 1404.77,687.599 1405.33,687.599 1405.89,687.599 1406.45,687.599 1407.01,687.599 1407.57,687.599 1408.13,687.599 1408.68,687.599 1409.24,687.599 1409.8,687.599 1410.36,687.599 1410.92,687.599 1411.48,687.599 1412.04,687.599 1412.6,687.599 1413.16,687.599 1413.72,687.599 1414.28,687.599 1414.84,687.599 1415.4,687.599 1415.95,687.599 1416.51,687.599 1417.07,687.599 1417.63,687.599 1418.19,687.599 1418.75,687.599 1419.31,687.599 1419.87,687.599 1420.43,687.599 1420.99,687.599 1421.55,687.599 1422.11,687.599 1422.67,687.599 1423.23,687.599 1423.78,687.599 1424.34,687.599 1424.9,687.599 1425.46,687.599 1426.02,687.599 1426.58,687.599 1427.14,687.599 1427.7,687.599 1428.26,687.599 1428.82,687.599 1429.38,687.599 1429.94,687.599 1430.5,687.599 1431.05,687.599 1431.61,687.599 1432.17,687.599 1432.73,687.599 1433.29,687.599 1433.85,687.599 1434.41,687.599 1434.97,687.599 1435.53,687.599 1436.09,687.599 1436.65,687.599 1437.21,687.599 1437.77,687.599 1438.33,687.599 1438.88,687.599 1439.44,687.599 1440,687.599 1440.56,687.599 1441.12,687.599 1441.68,687.599 1442.24,687.599 1442.8,687.599 1443.36,687.599 1443.92,687.599 1444.48,687.599 1445.04,687.599 1445.6,687.599 1446.15,687.599 1446.71,687.599 1447.27,687.599 1447.83,687.599 1448.39,687.599 1448.95,687.599 1449.51,687.599 1450.07,687.599 1450.63,687.599 1451.19,687.599 1451.75,687.599 1452.31,687.599 1452.87,687.599 1453.42,687.599 1453.98,687.599 1454.54,687.599 1455.1,687.599 1455.66,687.599 1456.22,687.599 1456.78,687.599 1457.34,687.599 1457.9,687.599 1458.46,687.599 1459.02,687.599 1459.58,687.599 1460.14,687.599 1460.7,687.599 1461.25,687.599 1461.81,687.599 1462.37,687.599 1462.93,687.599 1463.49,687.599 1464.05,687.599 1464.61,687.599 1465.17,687.599 1465.73,687.599 1466.29,687.599 1466.85,687.599 1467.41,687.599 1467.97,687.599 1468.52,687.599 1469.08,687.599 1469.64,687.599 1470.2,687.599 1470.76,687.599 1471.32,687.599 1471.88,687.599 1472.44,687.599 1473,687.599 1473.56,687.599 1474.12,687.599 1474.68,687.599 1475.24,687.599 1475.79,687.599 1476.35,687.599 1476.91,687.599 1477.47,687.599 1478.03,687.599 1478.59,687.599 1479.15,687.599 1479.71,687.599 1480.27,687.599 1480.83,687.599 1481.39,687.599 1481.95,687.599 1482.51,687.599 1483.07,687.599 1483.62,687.599 1484.18,687.599 1484.74,687.599 1485.3,687.599 1485.86,687.599 1486.42,687.599 1486.98,687.599 1487.54,687.599 1488.1,687.599 1488.66,687.599 1489.22,687.599 1489.78,687.599 1490.34,687.599 1490.89,687.599 1491.45,687.599 1492.01,687.599 1492.57,687.599 1493.13,687.599 1493.69,687.599 1494.25,687.599 1494.81,687.599 1495.37,687.599 1495.93,687.599 1496.49,687.599 1497.05,687.599 1497.61,687.599 1498.16,687.599 1498.72,687.599 1499.28,687.599 1499.84,687.599 1500.4,687.599 1500.96,687.599 1501.52,687.599 1502.08,687.599 1502.64,687.599 1503.2,687.599 1503.76,687.599 1504.32,687.599 1504.88,687.599 1505.44,687.599 1505.99,687.599 1506.55,687.599 1507.11,687.599 1507.67,687.599 1508.23,687.599 1508.79,687.599 1509.35,687.599 1509.91,687.599 1510.47,687.599 1511.03,687.599 1511.59,687.599 1512.15,687.599 1512.71,687.599 1513.26,687.599 1513.82,687.599 1514.38,687.599 1514.94,687.599 1515.5,687.599 1516.06,687.599 1516.62,687.599 1517.18,687.599 1517.74,687.599 1518.3,687.599 1518.86,687.599 1519.42,687.599 1519.98,687.599 1520.53,687.599 1521.09,687.599 1521.65,687.599 1522.21,687.599 1522.77,687.599 1523.33,687.599 1523.89,687.599 1524.45,687.599 1525.01,687.599 1525.57,687.599 1526.13,687.599 1526.69,687.599 1527.25,687.599 1527.81,687.599 1528.36,687.599 1528.92,687.599 1529.48,687.599 1530.04,687.599 1530.6,687.599 1531.16,687.599 1531.72,687.599 1532.28,687.599 1532.84,687.599 1533.4,687.599 1533.96,687.599 1534.52,687.599 1535.08,687.599 1535.63,687.599 1536.19,687.599 1536.75,687.599 1537.31,687.599 1537.87,687.599 1538.43,687.599 1538.99,687.599 1539.55,687.599 1540.11,687.599 1540.67,687.599 1541.23,687.599 1541.79,687.599 1542.35,687.599 1542.9,687.599 1543.46,687.599 1544.02,687.599 1544.58,687.599 1545.14,687.599 1545.7,687.599 1546.26,687.599 1546.82,687.599 1547.38,687.599 1547.94,687.599 1548.5,687.599 1549.06,687.599 1549.62,687.599 1550.18,687.599 1550.73,687.599 1551.29,687.599 1551.85,687.599 1552.41,687.599 1552.97,687.599 1553.53,687.599 1554.09,687.599 1554.65,687.599 1555.21,687.599 1555.77,687.599 1556.33,687.599 1556.89,687.599 1557.45,687.599 1558,687.599 1558.56,687.599 1559.12,687.599 1559.68,687.599 1560.24,687.599 1560.8,687.599 1561.36,687.599 1561.92,687.599 1562.48,687.599 1563.04,687.599 1563.6,687.599 1564.16,687.599 1564.72,687.599 1565.28,687.599 1565.83,687.599 1566.39,687.599 1566.95,687.599 1567.51,687.599 1568.07,687.599 1568.63,687.599 1569.19,687.599 1569.75,687.599 1570.31,687.599 1570.87,687.599 1571.43,687.599 1571.99,687.599 1572.55,687.599 1573.1,687.599 1573.66,687.599 1574.22,687.599 1574.78,687.599 1575.34,687.599 1575.9,687.599 1576.46,687.599 1577.02,687.599 1577.58,687.599 1578.14,687.599 1578.7,687.599 1579.26,687.599 1579.82,687.599 1580.37,687.599 1580.93,687.599 1581.49,687.599 1582.05,687.599 1582.61,687.599 1583.17,687.599 1583.73,687.599 1584.29,687.599 1584.85,687.599 1585.41,687.599 1585.97,687.599 1586.53,687.599 1587.09,687.599 1587.65,687.599 1588.2,687.599 1588.76,687.599 1589.32,687.599 1589.88,687.599 1590.44,687.599 1591,687.599 1591.56,687.599 1592.12,687.599 1592.68,687.599 1593.24,687.599 1593.8,687.599 1594.36,687.599 1594.92,687.599 1595.47,687.599 1596.03,687.599 1596.59,687.599 1597.15,687.599 1597.71,687.599 1598.27,687.599 1598.83,687.599 1599.39,687.599 1599.95,687.599 1600.51,687.599 1601.07,687.599 1601.63,687.599 1602.19,687.599 1602.74,687.599 1603.3,687.599 1603.86,687.599 1604.42,687.599 1604.98,687.599 1605.54,687.599 1606.1,687.599 1606.66,687.599 1607.22,687.599 1607.78,687.599 1608.34,687.599 1608.9,687.599 1609.46,687.599 1610.02,687.599 1610.57,687.599 1611.13,687.599 1611.69,687.599 1612.25,687.599 1612.81,687.599 1613.37,687.599 1613.93,687.599 1614.49,687.599 1615.05,687.599 1615.61,687.599 1616.17,687.599 1616.73,687.599 1617.29,687.599 1617.84,687.599 1618.4,687.599 1618.96,687.599 1619.52,687.599 1620.08,687.599 1620.64,687.599 1621.2,687.599 1621.76,687.599 1622.32,687.599 1622.88,687.599 1623.44,687.599 1624,687.599 1624.56,687.599 1625.11,687.599 1625.67,687.599 1626.23,687.599 1626.79,687.599 1627.35,687.599 1627.91,687.599 1628.47,687.599 1629.03,687.599 1629.59,687.599 1630.15,687.599 1630.71,687.599 1631.27,687.599 1631.83,687.599 1632.39,687.599 1632.94,687.599 1633.5,687.599 1634.06,687.599 1634.62,687.599 1635.18,687.599 1635.74,687.599 1636.3,687.599 1636.86,687.599 1637.42,687.599 1637.98,687.599 1638.54,687.599 1639.1,687.599 1639.66,687.599 1640.21,687.599 1640.77,687.599 1641.33,687.599 1641.89,687.599 1642.45,687.599 1643.01,687.599 1643.57,687.599 1644.13,687.599 1644.69,687.599 1645.25,687.599 1645.81,687.599 1646.37,687.599 1646.93,687.599 1647.48,687.599 1648.04,687.599 1648.6,687.599 1649.16,687.599 1649.72,687.599 1650.28,687.599 1650.84,687.599 1651.4,687.599 1651.96,687.599 1652.52,687.599 1653.08,687.599 1653.64,687.599 1654.2,687.599 1654.76,687.599 1655.31,687.599 1655.87,687.599 1656.43,687.599 1656.99,687.599 1657.55,687.599 1658.11,687.599 1658.67,687.599 1659.23,687.599 1659.79,687.599 1660.35,687.599 1660.91,687.599 1661.47,687.599 1662.03,687.599 1662.58,687.599 1663.14,687.599 1663.7,687.599 1664.26,687.599 1664.82,687.599 1665.38,687.599 1665.94,687.599 1666.5,687.599 1667.06,687.599 1667.62,687.599 1668.18,687.599 1668.74,687.599 1669.3,687.599 1669.85,687.599 1670.41,687.599 1670.97,687.599 1671.53,687.599 1672.09,687.599 1672.65,687.599 1673.21,687.599 1673.77,687.599 1674.33,687.599 1674.89,687.599 1675.45,687.599 1676.01,687.599 1676.57,687.599 1677.13,687.599 1677.68,687.599 1678.24,687.599 1678.8,687.599 1679.36,687.599 1679.92,687.599 1680.48,687.599 1681.04,687.599 1681.6,687.599 1682.16,687.599 1682.72,687.599 1683.28,687.599 1683.84,687.599 1684.4,687.599 1684.95,687.599 1685.51,687.599 1686.07,687.599 1686.63,687.599 1687.19,687.599 1687.75,687.599 1688.31,687.599 1688.87,687.599 1689.43,687.599 1689.99,687.599 1690.55,687.599 1691.11,687.599 1691.67,687.599 1692.23,687.599 1692.78,687.599 1693.34,687.599 1693.9,687.599 1694.46,687.599 1695.02,687.599 1695.58,687.599 1696.14,687.599 1696.7,687.599 1697.26,687.599 1697.82,687.599 1698.38,687.599 1698.94,687.599 1699.5,687.599 1700.05,687.599 1700.61,687.599 1701.17,687.599 1701.73,687.599 1702.29,687.599 1702.85,687.599 1703.41,687.599 1703.97,687.599 1704.53,687.599 1705.09,687.599 1705.65,687.599 1706.21,687.599 1706.77,687.599 1707.32,687.599 1707.88,687.599 1708.44,687.599 1709,687.599 1709.56,687.599 1710.12,687.599 1710.68,687.599 1711.24,687.599 1711.8,687.599 1712.36,687.599 1712.92,687.599 1713.48,687.599 1714.04,687.599 1714.6,687.599 1715.15,687.599 1715.71,687.599 1716.27,687.599 1716.83,687.599 1717.39,687.599 1717.95,687.599 1718.51,687.599 1719.07,687.599 1719.63,687.599 1720.19,687.599 1720.75,687.599 1721.31,687.599 1721.87,687.599 1722.42,687.599 1722.98,687.599 1723.54,687.599 1724.1,687.599 1724.66,687.599 1725.22,687.599 1725.78,687.599 1726.34,687.599 1726.9,687.599 1727.46,687.599 1728.02,687.599 1728.58,687.599 1729.14,687.599 1729.69,687.599 1730.25,687.599 1730.81,687.599 1731.37,687.599 1731.93,687.599 1732.49,687.599 1733.05,687.599 1733.61,687.599 1734.17,687.599 1734.73,687.599 1735.29,687.599 1735.85,687.599 1736.41,687.599 1736.97,687.599 1737.52,687.599 1738.08,687.599 1738.64,687.599 1739.2,687.599 1739.76,687.599 1740.32,687.599 1740.88,687.599 1741.44,687.599 1742,687.599 1742.56,687.599 1743.12,687.599 1743.68,687.599 1744.24,687.599 1744.79,687.599 1745.35,687.599 1745.91,687.599 1746.47,687.599 1747.03,687.599 1747.59,687.599 1748.15,687.599 1748.71,687.599 1749.27,687.599 1749.83,687.599 1750.39,687.599 1750.95,687.599 1751.51,687.599 1752.06,687.599 1752.62,687.599 1753.18,687.599 1753.74,687.599 1754.3,687.599 1754.86,687.599 1755.42,687.599 1755.98,687.599 1756.54,687.599 1757.1,687.599 1757.66,687.599 1758.22,687.599 1758.78,687.599 1759.34,687.599 1759.89,687.599 1760.45,687.599 1761.01,687.599 1761.57,687.599 1762.13,687.599 1762.69,687.599 1763.25,687.599 1763.81,687.599 1764.37,687.599 1764.93,687.599 1765.49,687.599 1766.05,687.599 1766.61,687.599 1767.16,687.599 1767.72,687.599 1768.28,687.599 1768.84,687.599 1769.4,687.599 1769.96,687.599 1770.52,687.599 1771.08,687.599 1771.64,687.599 1772.2,687.599 1772.76,687.599 1773.32,687.599 1773.88,687.599 1774.43,687.599 1774.99,687.599 1775.55,687.599 1776.11,687.599 1776.67,687.599 1777.23,687.599 1777.79,687.599 1778.35,687.599 1778.91,687.599 1779.47,687.599 1780.03,687.599 1780.59,687.599 1781.15,687.599 1781.71,687.599 1782.26,687.599 1782.82,687.599 1783.38,687.599 1783.94,687.599 1784.5,687.599 1785.06,687.599 1785.62,687.599 1786.18,687.599 1786.74,687.599 1787.3,687.599 1787.86,687.599 1788.42,687.599 1788.98,687.599 1789.53,687.599 1790.09,687.599 1790.65,687.599 1791.21,687.599 1791.77,687.599 1792.33,687.599 1792.89,687.599 1793.45,687.599 1794.01,687.599 1794.57,687.599 1795.13,687.599 1795.69,687.599 1796.25,687.599 1796.8,687.599 1797.36,687.599 1797.92,687.599 1798.48,687.599 1799.04,687.599 1799.6,687.599 1800.16,687.599 1800.72,687.599 1801.28,687.599 1801.84,687.599 1802.4,687.599 1802.96,687.599 1803.52,687.599 1804.08,687.599 1804.63,687.599 1805.19,687.599 1805.75,687.599 1806.31,687.599 1806.87,687.599 1807.43,687.599 1807.99,687.599 1808.55,687.599 1809.11,687.599 1809.67,687.599 1810.23,687.599 1810.79,687.599 1811.35,687.599 1811.9,687.599 1812.46,687.599 1813.02,687.599 1813.58,687.599 1814.14,687.599 1814.7,687.599 1815.26,687.599 1815.82,687.599 1816.38,687.599 1816.94,687.599 1817.5,687.599 1818.06,687.599 1818.62,687.599 1819.18,687.599 1819.73,687.599 1820.29,687.599 1820.85,687.599 1821.41,687.599 1821.97,687.599 1822.53,687.599 1823.09,687.599 1823.65,687.599 1824.21,687.599 1824.77,687.599 1825.33,687.599 1825.89,687.599 1826.45,687.599 1827,687.599 1827.56,687.599 1828.12,687.599 1828.68,687.599 1829.24,687.599 1829.8,687.599 1830.36,687.599 1830.92,687.599 1831.48,687.599 1832.04,687.599 1832.6,687.599 1833.16,687.599 1833.72,687.599 1834.27,687.599 1834.83,687.599 1835.39,687.599 1835.95,687.599 1836.51,687.599 1837.07,687.599 1837.63,687.599 1838.19,687.599 \"/>\n<path clip-path=\"url(#clip843)\" d=\"M720.247 685.305 L720.806 685.305 L721.365 685.305 L721.924 685.305 L722.484 685.305 L723.043 685.305 L723.602 685.305 L724.161 685.305 L724.721 685.305 L725.28 685.305 L725.839 685.305 L726.398 685.305 L726.958 685.305 L727.517 685.305 L728.076 685.305 L728.635 685.305 L729.195 685.305 L729.754 685.305 L730.313 685.305 L730.872 685.305 L731.432 685.305 L731.991 685.305 L732.55 685.305 L733.109 685.305 L733.669 685.305 L734.228 685.305 L734.787 685.305 L735.346 685.305 L735.906 685.305 L736.465 685.305 L737.024 685.305 L737.583 685.305 L738.143 685.305 L738.702 685.305 L739.261 685.305 L739.82 685.305 L740.38 685.305 L740.939 685.305 L741.498 685.305 L742.057 685.305 L742.617 685.305 L743.176 685.305 L743.735 685.305 L744.294 685.305 L744.854 685.305 L745.413 685.305 L745.972 685.305 L746.531 685.305 L747.091 685.305 L747.65 685.305 L748.209 685.305 L748.768 685.305 L749.328 685.305 L749.887 685.305 L750.446 685.305 L751.005 685.305 L751.565 685.305 L752.124 685.305 L752.683 685.305 L753.242 685.305 L753.802 685.305 L754.361 685.305 L754.92 685.305 L755.479 685.305 L756.039 685.305 L756.598 685.305 L757.157 685.305 L757.716 685.305 L758.276 685.305 L758.835 685.305 L759.394 685.305 L759.953 685.305 L760.513 685.305 L761.072 685.305 L761.631 685.305 L762.19 685.305 L762.75 685.305 L763.309 685.305 L763.868 685.305 L764.427 685.305 L764.987 685.305 L765.546 685.305 L766.105 685.305 L766.664 685.305 L767.224 685.305 L767.783 685.305 L768.342 685.305 L768.901 685.305 L769.461 685.305 L770.02 685.305 L770.579 685.305 L771.138 685.305 L771.698 685.305 L772.257 685.305 L772.816 685.305 L773.375 685.305 L773.935 685.305 L774.494 685.305 L775.053 685.305 L775.612 685.305 L776.172 685.305 L776.731 685.305 L777.29 685.305 L777.849 685.305 L778.409 685.305 L778.968 685.305 L779.527 685.305 L780.086 685.305 L780.646 685.305 L781.205 685.305 L781.764 685.305 L782.323 685.305 L782.883 685.305 L783.442 685.305 L784.001 685.305 L784.56 685.305 L785.12 685.305 L785.679 685.305 L786.238 685.305 L786.797 685.305 L787.357 685.305 L787.916 685.305 L788.475 685.305 L789.034 685.305 L789.594 685.305 L790.153 685.305 L790.712 685.305 L791.271 685.305 L791.831 685.305 L792.39 685.305 L792.949 685.305 L793.508 685.305 L794.068 685.305 L794.627 685.305 L795.186 685.305 L795.745 685.305 L796.305 685.305 L796.864 685.305 L797.423 685.305 L797.982 685.305 L798.542 685.305 L799.101 685.305 L799.66 685.305 L800.219 685.305 L800.779 685.305 L801.338 685.305 L801.897 685.305 L802.456 685.305 L803.016 685.305 L803.575 685.305 L804.134 685.305 L804.693 685.305 L805.253 685.305 L805.812 685.305 L806.371 685.305 L806.931 685.305 L807.49 685.305 L808.049 685.305 L808.608 685.305 L809.168 685.305 L809.727 685.305 L810.286 685.305 L810.845 685.305 L811.405 685.305 L811.964 685.305 L812.523 685.305 L813.082 685.305 L813.642 685.305 L814.201 685.305 L814.76 685.305 L815.319 685.305 L815.879 685.305 L816.438 685.305 L816.997 685.305 L817.556 685.305 L818.116 685.305 L818.675 685.305 L819.234 685.305 L819.793 685.305 L820.353 685.305 L820.912 685.305 L821.471 685.305 L822.03 685.305 L822.59 685.305 L823.149 685.305 L823.708 685.305 L824.267 685.305 L824.827 685.305 L825.386 685.305 L825.945 685.305 L826.504 685.305 L827.064 685.305 L827.623 685.305 L828.182 685.305 L828.741 685.305 L829.301 685.305 L829.86 685.305 L830.419 685.305 L830.978 685.305 L831.538 685.305 L832.097 685.305 L832.656 685.305 L833.215 685.305 L833.775 685.305 L834.334 685.305 L834.893 685.305 L835.452 685.305 L836.012 685.305 L836.571 685.305 L837.13 685.305 L837.689 685.305 L838.249 685.305 L838.808 685.305 L839.367 685.305 L839.926 685.305 L840.486 685.305 L841.045 685.305 L841.604 685.305 L842.163 685.305 L842.723 685.305 L843.282 685.305 L843.841 685.305 L844.4 685.305 L844.96 685.305 L845.519 685.305 L846.078 685.305 L846.637 685.305 L847.197 685.305 L847.756 685.305 L848.315 685.305 L848.874 685.305 L849.434 685.305 L849.993 685.305 L850.552 685.305 L851.111 685.305 L851.671 685.305 L852.23 685.305 L852.789 685.305 L853.348 685.305 L853.908 685.305 L854.467 685.305 L855.026 685.305 L855.585 685.305 L856.145 685.305 L856.704 685.305 L857.263 685.305 L857.822 685.305 L858.382 685.305 L858.941 685.305 L859.5 685.305 L860.059 685.305 L860.619 685.305 L861.178 685.305 L861.737 685.305 L862.296 685.305 L862.856 685.305 L863.415 685.305 L863.974 685.305 L864.533 685.305 L865.093 685.305 L865.652 685.305 L866.211 685.305 L866.77 685.305 L867.33 685.305 L867.889 685.305 L868.448 685.305 L869.007 685.305 L869.567 685.305 L870.126 685.305 L870.685 685.305 L871.244 685.305 L871.804 685.305 L872.363 685.305 L872.922 685.305 L873.481 685.305 L874.041 685.305 L874.6 685.305 L875.159 685.305 L875.718 685.305 L876.278 685.305 L876.837 685.305 L877.396 685.305 L877.955 685.305 L878.515 685.305 L879.074 685.305 L879.633 685.305 L880.192 685.305 L880.752 685.305 L881.311 685.305 L881.87 685.305 L882.429 685.305 L882.989 685.305 L883.548 685.305 L884.107 685.305 L884.666 685.305 L885.226 685.305 L885.785 685.305 L886.344 685.305 L886.903 685.305 L887.463 685.305 L888.022 685.305 L888.581 685.305 L889.14 685.305 L889.7 685.305 L890.259 685.305 L890.818 685.305 L891.377 685.305 L891.937 685.305 L892.496 685.305 L893.055 685.305 L893.614 685.305 L894.174 685.305 L894.733 685.305 L895.292 685.305 L895.851 685.305 L896.411 685.305 L896.97 685.305 L897.529 685.305 L898.088 685.305 L898.648 685.305 L899.207 685.305 L899.766 685.305 L900.325 685.305 L900.885 685.305 L901.444 685.305 L902.003 685.305 L902.562 685.305 L903.122 685.305 L903.681 685.305 L904.24 685.305 L904.799 685.305 L905.359 685.305 L905.918 685.305 L906.477 685.305 L907.036 685.305 L907.596 685.305 L908.155 685.305 L908.714 685.305 L909.273 685.305 L909.833 685.305 L910.392 685.305 L910.951 685.305 L911.51 685.305 L912.07 685.305 L912.629 685.305 L913.188 685.305 L913.747 685.305 L914.307 685.305 L914.866 685.305 L915.425 685.305 L915.984 685.305 L916.544 685.305 L917.103 685.305 L917.662 685.305 L918.221 685.305 L918.781 685.305 L919.34 685.305 L919.899 685.305 L920.458 685.305 L921.018 685.305 L921.577 685.305 L922.136 685.305 L922.695 685.305 L923.255 685.305 L923.814 685.305 L924.373 685.305 L924.932 685.305 L925.492 685.305 L926.051 685.305 L926.61 685.305 L927.169 685.305 L927.729 685.305 L928.288 685.305 L928.847 685.305 L929.406 685.305 L929.966 685.305 L930.525 685.305 L931.084 685.305 L931.644 685.305 L932.203 685.305 L932.762 685.305 L933.321 685.305 L933.881 685.305 L934.44 685.305 L934.999 685.305 L935.558 685.305 L936.118 685.305 L936.677 685.305 L937.236 685.305 L937.795 685.305 L938.355 685.305 L938.914 685.305 L939.473 685.305 L940.032 685.305 L940.592 685.305 L941.151 685.305 L941.71 685.305 L942.269 685.305 L942.829 685.305 L943.388 685.305 L943.947 685.305 L944.506 685.305 L945.066 685.305 L945.625 685.305 L946.184 685.305 L946.743 685.305 L947.303 685.305 L947.862 685.305 L948.421 685.305 L948.98 685.305 L949.54 685.305 L950.099 685.305 L950.658 685.305 L951.217 685.305 L951.777 685.305 L952.336 685.305 L952.895 685.305 L953.454 685.305 L954.014 685.305 L954.573 685.305 L955.132 685.305 L955.691 685.305 L956.251 685.305 L956.81 685.305 L957.369 685.305 L957.928 685.305 L958.488 685.305 L959.047 685.305 L959.606 685.305 L960.165 685.305 L960.725 685.305 L961.284 685.305 L961.843 685.305 L962.402 685.305 L962.962 685.305 L963.521 685.305 L964.08 685.305 L964.639 685.305 L965.199 685.305 L965.758 685.305 L966.317 685.305 L966.876 685.305 L967.436 685.305 L967.995 685.305 L968.554 685.305 L969.113 685.305 L969.673 685.305 L970.232 685.305 L970.791 685.305 L971.35 685.305 L971.91 685.305 L972.469 685.305 L973.028 685.305 L973.587 685.305 L974.147 685.305 L974.706 685.305 L975.265 685.305 L975.824 685.305 L976.384 685.305 L976.943 685.305 L977.502 685.305 L978.061 685.305 L978.621 685.305 L979.18 685.305 L979.739 685.305 L980.298 685.305 L980.858 685.305 L981.417 685.305 L981.976 685.305 L982.535 685.305 L983.095 685.305 L983.654 685.305 L984.213 685.305 L984.772 685.305 L985.332 685.305 L985.891 685.305 L986.45 685.305 L987.009 685.305 L987.569 685.305 L988.128 685.305 L988.687 685.305 L989.246 685.305 L989.806 685.305 L990.365 685.305 L990.924 685.305 L991.483 685.305 L992.043 685.305 L992.602 685.305 L993.161 685.305 L993.72 685.305 L994.28 685.305 L994.839 685.305 L995.398 685.305 L995.957 685.305 L996.517 685.305 L997.076 685.305 L997.635 685.305 L998.194 685.305 L998.754 685.305 L999.313 685.305 L999.872 685.305 L1000.43 685.305 L1000.99 685.305 L1001.55 685.305 L1002.11 685.305 L1002.67 685.305 L1003.23 685.305 L1003.79 685.305 L1004.35 685.305 L1004.91 685.305 L1005.46 685.305 L1006.02 685.305 L1006.58 685.305 L1007.14 685.305 L1007.7 685.305 L1008.26 685.305 L1008.82 685.305 L1009.38 685.305 L1009.94 685.305 L1010.5 685.305 L1011.06 685.305 L1011.62 685.305 L1012.18 685.305 L1012.73 685.305 L1013.29 685.305 L1013.85 685.305 L1014.41 685.305 L1014.97 685.305 L1015.53 685.305 L1016.09 685.305 L1016.65 685.305 L1017.21 685.305 L1017.77 685.305 L1018.33 685.305 L1018.89 685.305 L1019.45 685.305 L1020.01 685.305 L1020.56 685.305 L1021.12 685.305 L1021.68 685.305 L1022.24 685.305 L1022.8 685.305 L1023.36 685.305 L1023.92 685.305 L1024.48 685.305 L1025.04 685.305 L1025.6 685.305 L1026.16 685.305 L1026.72 685.305 L1027.28 685.305 L1027.83 685.305 L1028.39 685.305 L1028.95 685.305 L1029.51 685.305 L1030.07 685.305 L1030.63 685.305 L1031.19 685.305 L1031.75 685.305 L1032.31 685.305 L1032.87 685.305 L1033.43 685.305 L1033.99 685.305 L1034.55 685.305 L1035.1 685.305 L1035.66 685.305 L1036.22 685.305 L1036.78 685.305 L1037.34 685.305 L1037.9 685.305 L1038.46 685.305 L1039.02 685.305 L1039.58 685.305 L1040.14 685.305 L1040.7 685.305 L1041.26 685.305 L1041.82 685.305 L1042.38 685.305 L1042.93 685.305 L1043.49 685.305 L1044.05 685.305 L1044.61 685.305 L1045.17 685.305 L1045.73 685.305 L1046.29 685.305 L1046.85 685.305 L1047.41 685.305 L1047.97 685.305 L1048.53 685.305 L1049.09 685.305 L1049.65 685.305 L1050.2 685.305 L1050.76 685.305 L1051.32 685.305 L1051.88 685.305 L1052.44 685.305 L1053 685.305 L1053.56 685.305 L1054.12 685.305 L1054.68 685.305 L1055.24 685.305 L1055.8 685.305 L1056.36 685.305 L1056.92 685.305 L1057.48 685.305 L1058.03 685.305 L1058.59 685.305 L1059.15 685.305 L1059.71 685.305 L1060.27 685.305 L1060.83 685.305 L1061.39 685.305 L1061.95 685.305 L1062.51 685.305 L1063.07 685.305 L1063.63 685.305 L1064.19 685.305 L1064.75 685.305 L1065.3 685.305 L1065.86 685.305 L1066.42 685.305 L1066.98 685.305 L1067.54 685.305 L1068.1 685.305 L1068.66 685.305 L1069.22 685.305 L1069.78 685.305 L1070.34 685.305 L1070.9 685.305 L1071.46 685.305 L1072.02 685.305 L1072.57 685.305 L1073.13 685.305 L1073.69 685.305 L1074.25 685.305 L1074.81 685.305 L1075.37 685.305 L1075.93 685.305 L1076.49 685.305 L1077.05 685.305 L1077.61 685.305 L1078.17 685.305 L1078.73 685.305 L1079.29 685.305 L1079.85 685.305 L1080.4 685.305 L1080.96 685.305 L1081.52 685.305 L1082.08 685.305 L1082.64 685.305 L1083.2 685.305 L1083.76 685.305 L1084.32 685.305 L1084.88 685.305 L1085.44 685.305 L1086 685.305 L1086.56 685.305 L1087.12 685.305 L1087.67 685.305 L1088.23 685.305 L1088.79 685.305 L1089.35 685.305 L1089.91 685.305 L1090.47 685.305 L1091.03 685.305 L1091.59 685.305 L1092.15 685.305 L1092.71 685.305 L1093.27 685.305 L1093.83 685.305 L1094.39 685.305 L1094.94 685.305 L1095.5 685.305 L1096.06 685.305 L1096.62 685.305 L1097.18 685.305 L1097.74 685.305 L1098.3 685.305 L1098.86 685.305 L1099.42 685.305 L1099.98 685.305 L1100.54 685.305 L1101.1 685.305 L1101.66 685.305 L1102.22 685.305 L1102.77 685.305 L1103.33 685.305 L1103.89 685.305 L1104.45 685.305 L1105.01 685.305 L1105.57 685.305 L1106.13 685.305 L1106.69 685.305 L1107.25 685.305 L1107.81 685.305 L1108.37 685.305 L1108.93 685.305 L1109.49 685.305 L1110.04 685.305 L1110.6 685.305 L1111.16 685.305 L1111.72 685.305 L1112.28 685.305 L1112.84 685.305 L1113.4 685.305 L1113.96 685.305 L1114.52 685.305 L1115.08 685.305 L1115.64 685.305 L1116.2 685.305 L1116.76 685.305 L1117.31 685.305 L1117.87 685.305 L1118.43 685.305 L1118.99 685.305 L1119.55 685.305 L1120.11 685.305 L1120.67 685.305 L1121.23 685.305 L1121.79 685.305 L1122.35 685.305 L1122.91 685.305 L1123.47 685.305 L1124.03 685.305 L1124.59 685.305 L1125.14 685.305 L1125.7 685.305 L1126.26 685.305 L1126.82 685.305 L1127.38 685.305 L1127.94 685.305 L1128.5 685.305 L1129.06 685.305 L1129.62 685.305 L1130.18 685.305 L1130.74 685.305 L1131.3 685.305 L1131.86 685.305 L1132.41 685.305 L1132.97 685.305 L1133.53 685.305 L1134.09 685.305 L1134.65 685.305 L1135.21 685.305 L1135.77 685.305 L1136.33 685.305 L1136.89 685.305 L1137.45 685.305 L1138.01 685.305 L1138.57 685.305 L1139.13 685.305 L1139.68 685.305 L1140.24 685.305 L1140.8 685.305 L1141.36 685.305 L1141.92 685.305 L1142.48 685.305 L1143.04 685.305 L1143.6 685.305 L1144.16 685.305 L1144.72 685.305 L1145.28 685.305 L1145.84 685.305 L1146.4 685.305 L1146.96 685.305 L1147.51 685.305 L1148.07 685.305 L1148.63 685.305 L1149.19 685.305 L1149.75 685.305 L1150.31 685.305 L1150.87 685.305 L1151.43 685.305 L1151.99 685.305 L1152.55 685.305 L1153.11 685.305 L1153.67 685.305 L1154.23 685.305 L1154.78 685.305 L1155.34 685.305 L1155.9 685.305 L1156.46 685.305 L1157.02 685.305 L1157.58 685.305 L1158.14 685.305 L1158.7 685.305 L1159.26 685.305 L1159.82 685.305 L1160.38 685.305 L1160.94 685.305 L1161.5 685.305 L1162.05 685.305 L1162.61 685.305 L1163.17 685.305 L1163.73 685.305 L1164.29 685.305 L1164.85 685.305 L1165.41 685.305 L1165.97 685.305 L1166.53 685.305 L1167.09 685.305 L1167.65 685.305 L1168.21 685.305 L1168.77 685.305 L1169.33 685.305 L1169.88 685.305 L1170.44 685.305 L1171 685.305 L1171.56 685.305 L1172.12 685.305 L1172.68 685.305 L1173.24 685.305 L1173.8 685.305 L1174.36 685.305 L1174.92 685.305 L1175.48 685.305 L1176.04 685.305 L1176.6 685.305 L1177.15 685.305 L1177.71 685.305 L1178.27 685.305 L1178.83 685.305 L1179.39 685.305 L1179.95 685.305 L1180.51 685.305 L1181.07 685.305 L1181.63 685.305 L1182.19 685.305 L1182.75 685.305 L1183.31 685.305 L1183.87 685.305 L1184.43 685.305 L1184.98 685.305 L1185.54 685.305 L1186.1 685.305 L1186.66 685.305 L1187.22 685.305 L1187.78 685.305 L1188.34 685.305 L1188.9 685.305 L1189.46 685.305 L1190.02 685.305 L1190.58 685.305 L1191.14 685.305 L1191.7 685.305 L1192.25 685.305 L1192.81 685.305 L1193.37 685.305 L1193.93 685.305 L1194.49 685.305 L1195.05 685.305 L1195.61 685.305 L1196.17 685.305 L1196.73 685.305 L1197.29 685.305 L1197.85 685.305 L1198.41 685.305 L1198.97 685.305 L1199.52 685.305 L1200.08 685.305 L1200.64 685.305 L1201.2 685.305 L1201.76 685.305 L1202.32 685.305 L1202.88 685.305 L1203.44 685.305 L1204 685.305 L1204.56 685.305 L1205.12 685.305 L1205.68 685.305 L1206.24 685.305 L1206.8 685.305 L1207.35 685.305 L1207.91 685.305 L1208.47 685.305 L1209.03 685.305 L1209.59 685.305 L1210.15 685.305 L1210.71 685.305 L1211.27 685.305 L1211.83 685.305 L1212.39 685.305 L1212.95 685.305 L1213.51 685.305 L1214.07 685.305 L1214.62 685.305 L1215.18 685.305 L1215.74 685.305 L1216.3 685.305 L1216.86 685.305 L1217.42 685.305 L1217.98 685.305 L1218.54 685.305 L1219.1 685.305 L1219.66 685.305 L1220.22 685.305 L1220.78 685.305 L1221.34 685.305 L1221.89 685.305 L1222.45 685.305 L1223.01 685.305 L1223.57 685.305 L1224.13 685.305 L1224.69 685.305 L1225.25 685.305 L1225.81 685.305 L1226.37 685.305 L1226.93 685.305 L1227.49 685.305 L1228.05 685.305 L1228.61 685.305 L1229.17 685.305 L1229.72 685.305 L1230.28 685.305 L1230.84 685.305 L1231.4 685.305 L1231.96 685.305 L1232.52 685.305 L1233.08 685.305 L1233.64 685.305 L1234.2 685.305 L1234.76 685.305 L1235.32 685.305 L1235.88 685.305 L1236.44 685.305 L1236.99 685.305 L1237.55 685.305 L1238.11 685.305 L1238.67 685.305 L1239.23 685.305 L1239.79 685.305 L1240.35 685.305 L1240.91 685.305 L1241.47 685.305 L1242.03 685.305 L1242.59 685.305 L1243.15 685.305 L1243.71 685.305 L1244.26 685.305 L1244.82 685.305 L1245.38 685.305 L1245.94 685.305 L1246.5 685.305 L1247.06 685.305 L1247.62 685.305 L1248.18 685.305 L1248.74 685.305 L1249.3 685.305 L1249.86 685.305 L1250.42 685.305 L1250.98 685.305 L1251.54 685.305 L1252.09 685.305 L1252.65 685.305 L1253.21 685.305 L1253.77 685.305 L1254.33 685.305 L1254.89 685.305 L1255.45 685.305 L1256.01 685.305 L1256.57 685.305 L1257.13 685.305 L1257.69 685.305 L1258.25 685.305 L1258.81 685.305 L1259.36 685.305 L1259.92 685.305 L1260.48 685.305 L1261.04 685.305 L1261.6 685.305 L1262.16 685.305 L1262.72 685.305 L1263.28 685.305 L1263.84 685.305 L1264.4 685.305 L1264.96 685.305 L1265.52 685.305 L1266.08 685.305 L1266.63 685.305 L1267.19 685.305 L1267.75 685.305 L1268.31 685.305 L1268.87 685.305 L1269.43 685.305 L1269.99 685.305 L1270.55 685.305 L1271.11 685.305 L1271.67 685.305 L1272.23 685.305 L1272.79 685.305 L1273.35 685.305 L1273.91 685.305 L1274.46 685.305 L1275.02 685.305 L1275.58 685.305 L1276.14 685.305 L1276.7 685.305 L1277.26 685.305 L1277.82 685.305 L1278.38 685.305 L1278.94 685.305 L1279.5 685.305 L1280.06 685.305 L1280.62 685.305 L1281.18 685.305 L1281.73 685.305 L1282.29 685.305 L1282.85 685.305 L1283.41 685.305 L1283.97 685.305 L1284.53 685.305 L1285.09 685.305 L1285.65 685.305 L1286.21 685.305 L1286.77 685.305 L1287.33 685.305 L1287.89 685.305 L1288.45 685.305 L1289 685.305 L1289.56 685.305 L1290.12 685.305 L1290.68 685.305 L1291.24 685.305 L1291.8 685.305 L1292.36 685.305 L1292.92 685.305 L1293.48 685.305 L1294.04 685.305 L1294.6 685.305 L1295.16 685.305 L1295.72 685.305 L1296.28 685.305 L1296.83 685.305 L1297.39 685.305 L1297.95 685.305 L1298.51 685.305 L1299.07 685.305 L1299.63 685.305 L1300.19 685.305 L1300.75 685.305 L1301.31 685.305 L1301.87 685.305 L1302.43 685.305 L1302.99 685.305 L1303.55 685.305 L1304.1 685.305 L1304.66 685.305 L1305.22 685.305 L1305.78 685.305 L1306.34 685.305 L1306.9 685.305 L1307.46 685.305 L1308.02 685.305 L1308.58 685.305 L1309.14 685.305 L1309.7 685.305 L1310.26 685.305 L1310.82 685.305 L1311.38 685.305 L1311.93 685.305 L1312.49 685.305 L1313.05 685.305 L1313.61 685.305 L1314.17 685.305 L1314.73 685.305 L1315.29 685.305 L1315.85 685.305 L1316.41 685.305 L1316.97 685.305 L1317.53 685.305 L1318.09 685.305 L1318.65 685.305 L1319.2 685.305 L1319.76 685.305 L1320.32 685.305 L1320.88 685.305 L1321.44 685.305 L1322 685.305 L1322.56 685.305 L1323.12 685.305 L1323.68 685.305 L1324.24 685.305 L1324.8 685.305 L1325.36 685.305 L1325.92 685.305 L1326.47 685.305 L1327.03 685.305 L1327.59 685.305 L1328.15 685.305 L1328.71 685.305 L1329.27 685.305 L1329.83 685.305 L1330.39 685.305 L1330.95 685.305 L1331.51 685.305 L1332.07 685.305 L1332.63 685.305 L1333.19 685.305 L1333.75 685.305 L1334.3 685.305 L1334.86 685.305 L1335.42 685.305 L1335.98 685.305 L1336.54 685.305 L1337.1 685.305 L1337.66 685.305 L1338.22 685.305 L1338.78 685.305 L1339.34 685.305 L1339.9 685.305 L1340.46 685.305 L1341.02 685.305 L1341.57 685.305 L1342.13 685.305 L1342.69 685.305 L1343.25 685.305 L1343.81 685.305 L1344.37 685.305 L1344.93 685.305 L1345.49 685.305 L1346.05 685.305 L1346.61 685.305 L1347.17 685.305 L1347.73 685.305 L1348.29 685.305 L1348.84 685.305 L1349.4 685.305 L1349.96 685.305 L1350.52 685.305 L1351.08 685.305 L1351.64 685.305 L1352.2 685.305 L1352.76 685.305 L1353.32 685.305 L1353.88 685.305 L1354.44 685.305 L1355 685.305 L1355.56 685.305 L1356.12 685.305 L1356.67 685.305 L1357.23 685.305 L1357.79 685.305 L1358.35 685.305 L1358.91 685.305 L1359.47 685.305 L1360.03 685.305 L1360.59 685.305 L1361.15 685.305 L1361.71 685.305 L1362.27 685.305 L1362.83 685.305 L1363.39 685.305 L1363.94 685.305 L1364.5 685.305 L1365.06 685.305 L1365.62 685.305 L1366.18 685.305 L1366.74 685.305 L1367.3 685.305 L1367.86 685.305 L1368.42 685.305 L1368.98 685.305 L1369.54 685.305 L1370.1 685.305 L1370.66 685.305 L1371.21 685.305 L1371.77 685.305 L1372.33 685.305 L1372.89 685.305 L1373.45 685.305 L1374.01 685.305 L1374.57 685.305 L1375.13 685.305 L1375.69 685.305 L1376.25 685.305 L1376.81 685.305 L1377.37 685.305 L1377.93 685.305 L1378.49 685.305 L1379.04 685.305 L1379.6 685.305 L1380.16 685.305 L1380.72 685.305 L1381.28 685.305 L1381.84 685.305 L1382.4 685.305 L1382.96 685.305 L1383.52 685.305 L1384.08 685.305 L1384.64 685.305 L1385.2 685.305 L1385.76 685.305 L1386.31 685.305 L1386.87 685.305 L1387.43 685.305 L1387.99 685.305 L1388.55 685.305 L1389.11 685.305 L1389.67 685.305 L1390.23 685.305 L1390.79 685.305 L1391.35 685.305 L1391.91 685.305 L1392.47 685.305 L1393.03 685.305 L1393.58 685.305 L1394.14 685.305 L1394.7 685.305 L1395.26 685.305 L1395.82 685.305 L1396.38 685.305 L1396.94 685.305 L1397.5 685.305 L1398.06 685.305 L1398.62 685.305 L1399.18 685.305 L1399.74 685.305 L1400.3 685.305 L1400.86 685.305 L1401.41 685.305 L1401.97 685.305 L1402.53 685.305 L1403.09 685.305 L1403.65 685.305 L1404.21 685.305 L1404.77 685.305 L1405.33 685.305 L1405.89 685.305 L1406.45 685.305 L1407.01 685.305 L1407.57 685.305 L1408.13 685.305 L1408.68 685.305 L1409.24 685.305 L1409.8 685.305 L1410.36 685.305 L1410.92 685.305 L1411.48 685.305 L1412.04 685.305 L1412.6 685.305 L1413.16 685.305 L1413.72 685.305 L1414.28 685.305 L1414.84 685.305 L1415.4 685.305 L1415.95 685.305 L1416.51 685.305 L1417.07 685.305 L1417.63 685.305 L1418.19 685.305 L1418.75 685.305 L1419.31 685.305 L1419.87 685.305 L1420.43 685.305 L1420.99 685.305 L1421.55 685.305 L1422.11 685.305 L1422.67 685.305 L1423.23 685.305 L1423.78 685.305 L1424.34 685.305 L1424.9 685.305 L1425.46 685.305 L1426.02 685.305 L1426.58 685.305 L1427.14 685.305 L1427.7 685.305 L1428.26 685.305 L1428.82 685.305 L1429.38 685.305 L1429.94 685.305 L1430.5 685.305 L1431.05 685.305 L1431.61 685.305 L1432.17 685.305 L1432.73 685.305 L1433.29 685.305 L1433.85 685.305 L1434.41 685.305 L1434.97 685.305 L1435.53 685.305 L1436.09 685.305 L1436.65 685.305 L1437.21 685.305 L1437.77 685.305 L1438.33 685.305 L1438.88 685.305 L1439.44 685.305 L1440 685.305 L1440.56 685.305 L1441.12 685.305 L1441.68 685.305 L1442.24 685.305 L1442.8 685.305 L1443.36 685.305 L1443.92 685.305 L1444.48 685.305 L1445.04 685.305 L1445.6 685.305 L1446.15 685.305 L1446.71 685.305 L1447.27 685.305 L1447.83 685.305 L1448.39 685.305 L1448.95 685.305 L1449.51 685.305 L1450.07 685.305 L1450.63 685.305 L1451.19 685.305 L1451.75 685.305 L1452.31 685.305 L1452.87 685.305 L1453.42 685.305 L1453.98 685.305 L1454.54 685.305 L1455.1 685.305 L1455.66 685.305 L1456.22 685.305 L1456.78 685.305 L1457.34 685.305 L1457.9 685.305 L1458.46 685.305 L1459.02 685.305 L1459.58 685.305 L1460.14 685.305 L1460.7 685.305 L1461.25 685.305 L1461.81 685.305 L1462.37 685.305 L1462.93 685.305 L1463.49 685.305 L1464.05 685.305 L1464.61 685.305 L1465.17 685.305 L1465.73 685.305 L1466.29 685.305 L1466.85 685.305 L1467.41 685.305 L1467.97 685.305 L1468.52 685.305 L1469.08 685.305 L1469.64 685.305 L1470.2 685.305 L1470.76 685.305 L1471.32 685.305 L1471.88 685.305 L1472.44 685.305 L1473 685.305 L1473.56 685.305 L1474.12 685.305 L1474.68 685.305 L1475.24 685.305 L1475.79 685.305 L1476.35 685.305 L1476.91 685.305 L1477.47 685.305 L1478.03 685.305 L1478.59 685.305 L1479.15 685.305 L1479.71 685.305 L1480.27 685.305 L1480.83 685.305 L1481.39 685.305 L1481.95 685.305 L1482.51 685.305 L1483.07 685.305 L1483.62 685.305 L1484.18 685.305 L1484.74 685.305 L1485.3 685.305 L1485.86 685.305 L1486.42 685.305 L1486.98 685.305 L1487.54 685.305 L1488.1 685.305 L1488.66 685.305 L1489.22 685.305 L1489.78 685.305 L1490.34 685.305 L1490.89 685.305 L1491.45 685.305 L1492.01 685.305 L1492.57 685.305 L1493.13 685.305 L1493.69 685.305 L1494.25 685.305 L1494.81 685.305 L1495.37 685.305 L1495.93 685.305 L1496.49 685.305 L1497.05 685.305 L1497.61 685.305 L1498.16 685.305 L1498.72 685.305 L1499.28 685.305 L1499.84 685.305 L1500.4 685.305 L1500.96 685.305 L1501.52 685.305 L1502.08 685.305 L1502.64 685.305 L1503.2 685.305 L1503.76 685.305 L1504.32 685.305 L1504.88 685.305 L1505.44 685.305 L1505.99 685.305 L1506.55 685.305 L1507.11 685.305 L1507.67 685.305 L1508.23 685.305 L1508.79 685.305 L1509.35 685.305 L1509.91 685.305 L1510.47 685.305 L1511.03 685.305 L1511.59 685.305 L1512.15 685.305 L1512.71 685.305 L1513.26 685.305 L1513.82 685.305 L1514.38 685.305 L1514.94 685.305 L1515.5 685.305 L1516.06 685.305 L1516.62 685.305 L1517.18 685.305 L1517.74 685.305 L1518.3 685.305 L1518.86 685.305 L1519.42 685.305 L1519.98 685.305 L1520.53 685.305 L1521.09 685.305 L1521.65 685.305 L1522.21 685.305 L1522.77 685.305 L1523.33 685.305 L1523.89 685.305 L1524.45 685.305 L1525.01 685.305 L1525.57 685.305 L1526.13 685.305 L1526.69 685.305 L1527.25 685.305 L1527.81 685.305 L1528.36 685.305 L1528.92 685.305 L1529.48 685.305 L1530.04 685.305 L1530.6 685.305 L1531.16 685.305 L1531.72 685.305 L1532.28 685.305 L1532.84 685.305 L1533.4 685.305 L1533.96 685.305 L1534.52 685.305 L1535.08 685.305 L1535.63 685.305 L1536.19 685.305 L1536.75 685.305 L1537.31 685.305 L1537.87 685.305 L1538.43 685.305 L1538.99 685.305 L1539.55 685.305 L1540.11 685.305 L1540.67 685.305 L1541.23 685.305 L1541.79 685.305 L1542.35 685.305 L1542.9 685.305 L1543.46 685.305 L1544.02 685.305 L1544.58 685.305 L1545.14 685.305 L1545.7 685.305 L1546.26 685.305 L1546.82 685.305 L1547.38 685.305 L1547.94 685.305 L1548.5 685.305 L1549.06 685.305 L1549.62 685.305 L1550.18 685.305 L1550.73 685.305 L1551.29 685.305 L1551.85 685.305 L1552.41 685.305 L1552.97 685.305 L1553.53 685.305 L1554.09 685.305 L1554.65 685.305 L1555.21 685.305 L1555.77 685.305 L1556.33 685.305 L1556.89 685.305 L1557.45 685.305 L1558 685.305 L1558.56 685.305 L1559.12 685.305 L1559.68 685.305 L1560.24 685.305 L1560.8 685.305 L1561.36 685.305 L1561.92 685.305 L1562.48 685.305 L1563.04 685.305 L1563.6 685.305 L1564.16 685.305 L1564.72 685.305 L1565.28 685.305 L1565.83 685.305 L1566.39 685.305 L1566.95 685.305 L1567.51 685.305 L1568.07 685.305 L1568.63 685.305 L1569.19 685.305 L1569.75 685.305 L1570.31 685.305 L1570.87 685.305 L1571.43 685.305 L1571.99 685.305 L1572.55 685.305 L1573.1 685.305 L1573.66 685.305 L1574.22 685.305 L1574.78 685.305 L1575.34 685.305 L1575.9 685.305 L1576.46 685.305 L1577.02 685.305 L1577.58 685.305 L1578.14 685.305 L1578.7 685.305 L1579.26 685.305 L1579.82 685.305 L1580.37 685.305 L1580.93 685.305 L1581.49 685.305 L1582.05 685.305 L1582.61 685.305 L1583.17 685.305 L1583.73 685.305 L1584.29 685.305 L1584.85 685.305 L1585.41 685.305 L1585.97 685.305 L1586.53 685.305 L1587.09 685.305 L1587.65 685.305 L1588.2 685.305 L1588.76 685.305 L1589.32 685.305 L1589.88 685.305 L1590.44 685.305 L1591 685.305 L1591.56 685.305 L1592.12 685.305 L1592.68 685.305 L1593.24 685.305 L1593.8 685.305 L1594.36 685.305 L1594.92 685.305 L1595.47 685.305 L1596.03 685.305 L1596.59 685.305 L1597.15 685.305 L1597.71 685.305 L1598.27 685.305 L1598.83 685.305 L1599.39 685.305 L1599.95 685.305 L1600.51 685.305 L1601.07 685.305 L1601.63 685.305 L1602.19 685.305 L1602.74 685.305 L1603.3 685.305 L1603.86 685.305 L1604.42 685.305 L1604.98 685.305 L1605.54 685.305 L1606.1 685.305 L1606.66 685.305 L1607.22 685.305 L1607.78 685.305 L1608.34 685.305 L1608.9 685.305 L1609.46 685.305 L1610.02 685.305 L1610.57 685.305 L1611.13 685.305 L1611.69 685.305 L1612.25 685.305 L1612.81 685.305 L1613.37 685.305 L1613.93 685.305 L1614.49 685.305 L1615.05 685.305 L1615.61 685.305 L1616.17 685.305 L1616.73 685.305 L1617.29 685.305 L1617.84 685.305 L1618.4 685.305 L1618.96 685.305 L1619.52 685.305 L1620.08 685.305 L1620.64 685.305 L1621.2 685.305 L1621.76 685.305 L1622.32 685.305 L1622.88 685.305 L1623.44 685.305 L1624 685.305 L1624.56 685.305 L1625.11 685.305 L1625.67 685.305 L1626.23 685.305 L1626.79 685.305 L1627.35 685.305 L1627.91 685.305 L1628.47 685.305 L1629.03 685.305 L1629.59 685.305 L1630.15 685.305 L1630.71 685.305 L1631.27 685.305 L1631.83 685.305 L1632.39 685.305 L1632.94 685.305 L1633.5 685.305 L1634.06 685.305 L1634.62 685.305 L1635.18 685.305 L1635.74 685.305 L1636.3 685.305 L1636.86 685.305 L1637.42 685.305 L1637.98 685.305 L1638.54 685.305 L1639.1 685.305 L1639.66 685.305 L1640.21 685.305 L1640.77 685.305 L1641.33 685.305 L1641.89 685.305 L1642.45 685.305 L1643.01 685.305 L1643.57 685.305 L1644.13 685.305 L1644.69 685.305 L1645.25 685.305 L1645.81 685.305 L1646.37 685.305 L1646.93 685.305 L1647.48 685.305 L1648.04 685.305 L1648.6 685.305 L1649.16 685.305 L1649.72 685.305 L1650.28 685.305 L1650.84 685.305 L1651.4 685.305 L1651.96 685.305 L1652.52 685.305 L1653.08 685.305 L1653.64 685.305 L1654.2 685.305 L1654.76 685.305 L1655.31 685.305 L1655.87 685.305 L1656.43 685.305 L1656.99 685.305 L1657.55 685.305 L1658.11 685.305 L1658.67 685.305 L1659.23 685.305 L1659.79 685.305 L1660.35 685.305 L1660.91 685.305 L1661.47 685.305 L1662.03 685.305 L1662.58 685.305 L1663.14 685.305 L1663.7 685.305 L1664.26 685.305 L1664.82 685.305 L1665.38 685.305 L1665.94 685.305 L1666.5 685.305 L1667.06 685.305 L1667.62 685.305 L1668.18 685.305 L1668.74 685.305 L1669.3 685.305 L1669.85 685.305 L1670.41 685.305 L1670.97 685.305 L1671.53 685.305 L1672.09 685.305 L1672.65 685.305 L1673.21 685.305 L1673.77 685.305 L1674.33 685.305 L1674.89 685.305 L1675.45 685.305 L1676.01 685.305 L1676.57 685.305 L1677.13 685.305 L1677.68 685.305 L1678.24 685.305 L1678.8 685.305 L1679.36 685.305 L1679.92 685.305 L1680.48 685.305 L1681.04 685.305 L1681.6 685.305 L1682.16 685.305 L1682.72 685.305 L1683.28 685.305 L1683.84 685.305 L1684.4 685.305 L1684.95 685.305 L1685.51 685.305 L1686.07 685.305 L1686.63 685.305 L1687.19 685.305 L1687.75 685.305 L1688.31 685.305 L1688.87 685.305 L1689.43 685.305 L1689.99 685.305 L1690.55 685.305 L1691.11 685.305 L1691.67 685.305 L1692.23 685.305 L1692.78 685.305 L1693.34 685.305 L1693.9 685.305 L1694.46 685.305 L1695.02 685.305 L1695.58 685.305 L1696.14 685.305 L1696.7 685.305 L1697.26 685.305 L1697.82 685.305 L1698.38 685.305 L1698.94 685.305 L1699.5 685.305 L1700.05 685.305 L1700.61 685.305 L1701.17 685.305 L1701.73 685.305 L1702.29 685.305 L1702.85 685.305 L1703.41 685.305 L1703.97 685.305 L1704.53 685.305 L1705.09 685.305 L1705.65 685.305 L1706.21 685.305 L1706.77 685.305 L1707.32 685.305 L1707.88 685.305 L1708.44 685.305 L1709 685.305 L1709.56 685.305 L1710.12 685.305 L1710.68 685.305 L1711.24 685.305 L1711.8 685.305 L1712.36 685.305 L1712.92 685.305 L1713.48 685.305 L1714.04 685.305 L1714.6 685.305 L1715.15 685.305 L1715.71 685.305 L1716.27 685.305 L1716.83 685.305 L1717.39 685.305 L1717.95 685.305 L1718.51 685.305 L1719.07 685.305 L1719.63 685.305 L1720.19 685.305 L1720.75 685.305 L1721.31 685.305 L1721.87 685.305 L1722.42 685.305 L1722.98 685.305 L1723.54 685.305 L1724.1 685.305 L1724.66 685.305 L1725.22 685.305 L1725.78 685.305 L1726.34 685.305 L1726.9 685.305 L1727.46 685.305 L1728.02 685.305 L1728.58 685.305 L1729.14 685.305 L1729.69 685.305 L1730.25 685.305 L1730.81 685.305 L1731.37 685.305 L1731.93 685.305 L1732.49 685.305 L1733.05 685.305 L1733.61 685.305 L1734.17 685.305 L1734.73 685.305 L1735.29 685.305 L1735.85 685.305 L1736.41 685.305 L1736.97 685.305 L1737.52 685.305 L1738.08 685.305 L1738.64 685.305 L1739.2 685.305 L1739.76 685.305 L1740.32 685.305 L1740.88 685.305 L1741.44 685.305 L1742 685.305 L1742.56 685.305 L1743.12 685.305 L1743.68 685.305 L1744.24 685.305 L1744.79 685.305 L1745.35 685.305 L1745.91 685.305 L1746.47 685.305 L1747.03 685.305 L1747.59 685.305 L1748.15 685.305 L1748.71 685.305 L1749.27 685.305 L1749.83 685.305 L1750.39 685.305 L1750.95 685.305 L1751.51 685.305 L1752.06 685.305 L1752.62 685.305 L1753.18 685.305 L1753.74 685.305 L1754.3 685.305 L1754.86 685.305 L1755.42 685.305 L1755.98 685.305 L1756.54 685.305 L1757.1 685.305 L1757.66 685.305 L1758.22 685.305 L1758.78 685.305 L1759.34 685.305 L1759.89 685.305 L1760.45 685.305 L1761.01 685.305 L1761.57 685.305 L1762.13 685.305 L1762.69 685.305 L1763.25 685.305 L1763.81 685.305 L1764.37 685.305 L1764.93 685.305 L1765.49 685.305 L1766.05 685.305 L1766.61 685.305 L1767.16 685.305 L1767.72 685.305 L1768.28 685.305 L1768.84 685.305 L1769.4 685.305 L1769.96 685.305 L1770.52 685.305 L1771.08 685.305 L1771.64 685.305 L1772.2 685.305 L1772.76 685.305 L1773.32 685.305 L1773.88 685.305 L1774.43 685.305 L1774.99 685.305 L1775.55 685.305 L1776.11 685.305 L1776.67 685.305 L1777.23 685.305 L1777.79 685.305 L1778.35 685.305 L1778.91 685.305 L1779.47 685.305 L1780.03 685.305 L1780.59 685.305 L1781.15 685.305 L1781.71 685.305 L1782.26 685.305 L1782.82 685.305 L1783.38 685.305 L1783.94 685.305 L1784.5 685.305 L1785.06 685.305 L1785.62 685.305 L1786.18 685.305 L1786.74 685.305 L1787.3 685.305 L1787.86 685.305 L1788.42 685.305 L1788.98 685.305 L1789.53 685.305 L1790.09 685.305 L1790.65 685.305 L1791.21 685.305 L1791.77 685.305 L1792.33 685.305 L1792.89 685.305 L1793.45 685.305 L1794.01 685.305 L1794.57 685.305 L1795.13 685.305 L1795.69 685.305 L1796.25 685.305 L1796.8 685.305 L1797.36 685.305 L1797.92 685.305 L1798.48 685.305 L1799.04 685.305 L1799.6 685.305 L1800.16 685.305 L1800.72 685.305 L1801.28 685.305 L1801.84 685.305 L1802.4 685.305 L1802.96 685.305 L1803.52 685.305 L1804.08 685.305 L1804.63 685.305 L1805.19 685.305 L1805.75 685.305 L1806.31 685.305 L1806.87 685.305 L1807.43 685.305 L1807.99 685.305 L1808.55 685.305 L1809.11 685.305 L1809.67 685.305 L1810.23 685.305 L1810.79 685.305 L1811.35 685.305 L1811.9 685.305 L1812.46 685.305 L1813.02 685.305 L1813.58 685.305 L1814.14 685.305 L1814.7 685.305 L1815.26 685.305 L1815.82 685.305 L1816.38 685.305 L1816.94 685.305 L1817.5 685.305 L1818.06 685.305 L1818.62 685.305 L1819.18 685.305 L1819.73 685.305 L1820.29 685.305 L1820.85 685.305 L1821.41 685.305 L1821.97 685.305 L1822.53 685.305 L1823.09 685.305 L1823.65 685.305 L1824.21 685.305 L1824.77 685.305 L1825.33 685.305 L1825.89 685.305 L1826.45 685.305 L1827 685.305 L1827.56 685.305 L1828.12 685.305 L1828.68 685.305 L1829.24 685.305 L1829.8 685.305 L1830.36 685.305 L1830.92 685.305 L1831.48 685.305 L1832.04 685.305 L1832.6 685.305 L1833.16 685.305 L1833.72 685.305 L1834.27 685.305 L1834.83 685.305 L1835.39 685.305 L1835.95 685.305 L1836.51 685.305 L1837.07 685.305 L1837.63 685.305 L1838.19 685.305 L1838.19 682.826 L1837.63 682.826 L1837.07 682.826 L1836.51 682.826 L1835.95 682.826 L1835.39 682.826 L1834.83 682.826 L1834.27 682.826 L1833.72 682.826 L1833.16 682.826 L1832.6 682.826 L1832.04 682.826 L1831.48 682.826 L1830.92 682.826 L1830.36 682.826 L1829.8 682.826 L1829.24 682.826 L1828.68 682.826 L1828.12 682.826 L1827.56 682.826 L1827 682.826 L1826.45 682.826 L1825.89 682.826 L1825.33 682.826 L1824.77 682.826 L1824.21 682.826 L1823.65 682.826 L1823.09 682.826 L1822.53 682.826 L1821.97 682.826 L1821.41 682.826 L1820.85 682.826 L1820.29 682.826 L1819.73 682.826 L1819.18 682.826 L1818.62 682.826 L1818.06 682.826 L1817.5 682.826 L1816.94 682.826 L1816.38 682.826 L1815.82 682.826 L1815.26 682.826 L1814.7 682.826 L1814.14 682.826 L1813.58 682.826 L1813.02 682.826 L1812.46 682.826 L1811.9 682.826 L1811.35 682.826 L1810.79 682.826 L1810.23 682.826 L1809.67 682.826 L1809.11 682.826 L1808.55 682.826 L1807.99 682.826 L1807.43 682.826 L1806.87 682.826 L1806.31 682.826 L1805.75 682.826 L1805.19 682.826 L1804.63 682.826 L1804.08 682.826 L1803.52 682.826 L1802.96 682.826 L1802.4 682.826 L1801.84 682.826 L1801.28 682.826 L1800.72 682.826 L1800.16 682.826 L1799.6 682.826 L1799.04 682.826 L1798.48 682.826 L1797.92 682.826 L1797.36 682.826 L1796.8 682.826 L1796.25 682.826 L1795.69 682.826 L1795.13 682.826 L1794.57 682.826 L1794.01 682.826 L1793.45 682.826 L1792.89 682.826 L1792.33 682.826 L1791.77 682.826 L1791.21 682.826 L1790.65 682.826 L1790.09 682.826 L1789.53 682.826 L1788.98 682.826 L1788.42 682.826 L1787.86 682.826 L1787.3 682.826 L1786.74 682.826 L1786.18 682.826 L1785.62 682.826 L1785.06 682.826 L1784.5 682.826 L1783.94 682.826 L1783.38 682.826 L1782.82 682.826 L1782.26 682.826 L1781.71 682.826 L1781.15 682.826 L1780.59 682.826 L1780.03 682.826 L1779.47 682.826 L1778.91 682.826 L1778.35 682.826 L1777.79 682.826 L1777.23 682.826 L1776.67 682.826 L1776.11 682.826 L1775.55 682.826 L1774.99 682.826 L1774.43 682.826 L1773.88 682.826 L1773.32 682.826 L1772.76 682.826 L1772.2 682.826 L1771.64 682.826 L1771.08 682.826 L1770.52 682.826 L1769.96 682.826 L1769.4 682.826 L1768.84 682.826 L1768.28 682.826 L1767.72 682.826 L1767.16 682.826 L1766.61 682.826 L1766.05 682.826 L1765.49 682.826 L1764.93 682.826 L1764.37 682.826 L1763.81 682.826 L1763.25 682.826 L1762.69 682.826 L1762.13 682.826 L1761.57 682.826 L1761.01 682.826 L1760.45 682.826 L1759.89 682.826 L1759.34 682.826 L1758.78 682.826 L1758.22 682.826 L1757.66 682.826 L1757.1 682.826 L1756.54 682.826 L1755.98 682.826 L1755.42 682.826 L1754.86 682.826 L1754.3 682.826 L1753.74 682.826 L1753.18 682.826 L1752.62 682.826 L1752.06 682.826 L1751.51 682.826 L1750.95 682.826 L1750.39 682.826 L1749.83 682.826 L1749.27 682.826 L1748.71 682.826 L1748.15 682.826 L1747.59 682.826 L1747.03 682.826 L1746.47 682.826 L1745.91 682.826 L1745.35 682.826 L1744.79 682.826 L1744.24 682.826 L1743.68 682.826 L1743.12 682.826 L1742.56 682.826 L1742 682.826 L1741.44 682.826 L1740.88 682.826 L1740.32 682.826 L1739.76 682.826 L1739.2 682.826 L1738.64 682.826 L1738.08 682.826 L1737.52 682.826 L1736.97 682.826 L1736.41 682.826 L1735.85 682.826 L1735.29 682.826 L1734.73 682.826 L1734.17 682.826 L1733.61 682.826 L1733.05 682.826 L1732.49 682.826 L1731.93 682.826 L1731.37 682.826 L1730.81 682.826 L1730.25 682.826 L1729.69 682.826 L1729.14 682.826 L1728.58 682.826 L1728.02 682.826 L1727.46 682.826 L1726.9 682.826 L1726.34 682.826 L1725.78 682.826 L1725.22 682.826 L1724.66 682.826 L1724.1 682.826 L1723.54 682.826 L1722.98 682.826 L1722.42 682.826 L1721.87 682.826 L1721.31 682.826 L1720.75 682.826 L1720.19 682.826 L1719.63 682.826 L1719.07 682.826 L1718.51 682.826 L1717.95 682.826 L1717.39 682.826 L1716.83 682.826 L1716.27 682.826 L1715.71 682.826 L1715.15 682.826 L1714.6 682.826 L1714.04 682.826 L1713.48 682.826 L1712.92 682.826 L1712.36 682.826 L1711.8 682.826 L1711.24 682.826 L1710.68 682.826 L1710.12 682.826 L1709.56 682.826 L1709 682.826 L1708.44 682.826 L1707.88 682.826 L1707.32 682.826 L1706.77 682.826 L1706.21 682.826 L1705.65 682.826 L1705.09 682.826 L1704.53 682.826 L1703.97 682.826 L1703.41 682.826 L1702.85 682.826 L1702.29 682.826 L1701.73 682.826 L1701.17 682.826 L1700.61 682.826 L1700.05 682.826 L1699.5 682.826 L1698.94 682.826 L1698.38 682.826 L1697.82 682.826 L1697.26 682.826 L1696.7 682.826 L1696.14 682.826 L1695.58 682.826 L1695.02 682.826 L1694.46 682.826 L1693.9 682.826 L1693.34 682.826 L1692.78 682.826 L1692.23 682.826 L1691.67 682.826 L1691.11 682.826 L1690.55 682.826 L1689.99 682.826 L1689.43 682.826 L1688.87 682.826 L1688.31 682.826 L1687.75 682.826 L1687.19 682.826 L1686.63 682.826 L1686.07 682.826 L1685.51 682.826 L1684.95 682.826 L1684.4 682.826 L1683.84 682.826 L1683.28 682.826 L1682.72 682.826 L1682.16 682.826 L1681.6 682.826 L1681.04 682.826 L1680.48 682.826 L1679.92 682.826 L1679.36 682.826 L1678.8 682.826 L1678.24 682.826 L1677.68 682.826 L1677.13 682.826 L1676.57 682.826 L1676.01 682.826 L1675.45 682.826 L1674.89 682.826 L1674.33 682.826 L1673.77 682.826 L1673.21 682.826 L1672.65 682.826 L1672.09 682.826 L1671.53 682.826 L1670.97 682.826 L1670.41 682.826 L1669.85 682.826 L1669.3 682.826 L1668.74 682.826 L1668.18 682.826 L1667.62 682.826 L1667.06 682.826 L1666.5 682.826 L1665.94 682.826 L1665.38 682.826 L1664.82 682.826 L1664.26 682.826 L1663.7 682.826 L1663.14 682.826 L1662.58 682.826 L1662.03 682.826 L1661.47 682.826 L1660.91 682.826 L1660.35 682.826 L1659.79 682.826 L1659.23 682.826 L1658.67 682.826 L1658.11 682.826 L1657.55 682.826 L1656.99 682.826 L1656.43 682.826 L1655.87 682.826 L1655.31 682.826 L1654.76 682.826 L1654.2 682.826 L1653.64 682.826 L1653.08 682.826 L1652.52 682.826 L1651.96 682.826 L1651.4 682.826 L1650.84 682.826 L1650.28 682.826 L1649.72 682.826 L1649.16 682.826 L1648.6 682.826 L1648.04 682.826 L1647.48 682.826 L1646.93 682.826 L1646.37 682.826 L1645.81 682.826 L1645.25 682.826 L1644.69 682.826 L1644.13 682.826 L1643.57 682.826 L1643.01 682.826 L1642.45 682.826 L1641.89 682.826 L1641.33 682.826 L1640.77 682.826 L1640.21 682.826 L1639.66 682.826 L1639.1 682.826 L1638.54 682.826 L1637.98 682.826 L1637.42 682.826 L1636.86 682.826 L1636.3 682.826 L1635.74 682.826 L1635.18 682.826 L1634.62 682.826 L1634.06 682.826 L1633.5 682.826 L1632.94 682.826 L1632.39 682.826 L1631.83 682.826 L1631.27 682.826 L1630.71 682.826 L1630.15 682.826 L1629.59 682.826 L1629.03 682.826 L1628.47 682.826 L1627.91 682.826 L1627.35 682.826 L1626.79 682.826 L1626.23 682.826 L1625.67 682.826 L1625.11 682.826 L1624.56 682.826 L1624 682.826 L1623.44 682.826 L1622.88 682.826 L1622.32 682.826 L1621.76 682.826 L1621.2 682.826 L1620.64 682.826 L1620.08 682.826 L1619.52 682.826 L1618.96 682.826 L1618.4 682.826 L1617.84 682.826 L1617.29 682.826 L1616.73 682.826 L1616.17 682.826 L1615.61 682.826 L1615.05 682.826 L1614.49 682.826 L1613.93 682.826 L1613.37 682.826 L1612.81 682.826 L1612.25 682.826 L1611.69 682.826 L1611.13 682.826 L1610.57 682.826 L1610.02 682.826 L1609.46 682.826 L1608.9 682.826 L1608.34 682.826 L1607.78 682.826 L1607.22 682.826 L1606.66 682.826 L1606.1 682.826 L1605.54 682.826 L1604.98 682.826 L1604.42 682.826 L1603.86 682.826 L1603.3 682.826 L1602.74 682.826 L1602.19 682.826 L1601.63 682.826 L1601.07 682.826 L1600.51 682.826 L1599.95 682.826 L1599.39 682.826 L1598.83 682.826 L1598.27 682.826 L1597.71 682.826 L1597.15 682.826 L1596.59 682.826 L1596.03 682.826 L1595.47 682.826 L1594.92 682.826 L1594.36 682.826 L1593.8 682.826 L1593.24 682.826 L1592.68 682.826 L1592.12 682.826 L1591.56 682.826 L1591 682.826 L1590.44 682.826 L1589.88 682.826 L1589.32 682.826 L1588.76 682.826 L1588.2 682.826 L1587.65 682.826 L1587.09 682.826 L1586.53 682.826 L1585.97 682.826 L1585.41 682.826 L1584.85 682.826 L1584.29 682.826 L1583.73 682.826 L1583.17 682.826 L1582.61 682.826 L1582.05 682.826 L1581.49 682.826 L1580.93 682.826 L1580.37 682.826 L1579.82 682.826 L1579.26 682.826 L1578.7 682.826 L1578.14 682.826 L1577.58 682.826 L1577.02 682.826 L1576.46 682.826 L1575.9 682.826 L1575.34 682.826 L1574.78 682.826 L1574.22 682.826 L1573.66 682.826 L1573.1 682.826 L1572.55 682.826 L1571.99 682.826 L1571.43 682.826 L1570.87 682.826 L1570.31 682.826 L1569.75 682.826 L1569.19 682.826 L1568.63 682.826 L1568.07 682.826 L1567.51 682.826 L1566.95 682.826 L1566.39 682.826 L1565.83 682.826 L1565.28 682.826 L1564.72 682.826 L1564.16 682.826 L1563.6 682.826 L1563.04 682.826 L1562.48 682.826 L1561.92 682.826 L1561.36 682.826 L1560.8 682.826 L1560.24 682.826 L1559.68 682.826 L1559.12 682.826 L1558.56 682.826 L1558 682.826 L1557.45 682.826 L1556.89 682.826 L1556.33 682.826 L1555.77 682.826 L1555.21 682.826 L1554.65 682.826 L1554.09 682.826 L1553.53 682.826 L1552.97 682.826 L1552.41 682.826 L1551.85 682.826 L1551.29 682.826 L1550.73 682.826 L1550.18 682.826 L1549.62 682.826 L1549.06 682.826 L1548.5 682.826 L1547.94 682.826 L1547.38 682.826 L1546.82 682.826 L1546.26 682.826 L1545.7 682.826 L1545.14 682.826 L1544.58 682.826 L1544.02 682.826 L1543.46 682.826 L1542.9 682.826 L1542.35 682.826 L1541.79 682.826 L1541.23 682.826 L1540.67 682.826 L1540.11 682.826 L1539.55 682.826 L1538.99 682.826 L1538.43 682.826 L1537.87 682.826 L1537.31 682.826 L1536.75 682.826 L1536.19 682.826 L1535.63 682.826 L1535.08 682.826 L1534.52 682.826 L1533.96 682.826 L1533.4 682.826 L1532.84 682.826 L1532.28 682.826 L1531.72 682.826 L1531.16 682.826 L1530.6 682.826 L1530.04 682.826 L1529.48 682.826 L1528.92 682.826 L1528.36 682.826 L1527.81 682.826 L1527.25 682.826 L1526.69 682.826 L1526.13 682.826 L1525.57 682.826 L1525.01 682.826 L1524.45 682.826 L1523.89 682.826 L1523.33 682.826 L1522.77 682.826 L1522.21 682.826 L1521.65 682.826 L1521.09 682.826 L1520.53 682.826 L1519.98 682.826 L1519.42 682.826 L1518.86 682.826 L1518.3 682.826 L1517.74 682.826 L1517.18 682.826 L1516.62 682.826 L1516.06 682.826 L1515.5 682.826 L1514.94 682.826 L1514.38 682.826 L1513.82 682.826 L1513.26 682.826 L1512.71 682.826 L1512.15 682.826 L1511.59 682.826 L1511.03 682.826 L1510.47 682.826 L1509.91 682.826 L1509.35 682.826 L1508.79 682.826 L1508.23 682.826 L1507.67 682.826 L1507.11 682.826 L1506.55 682.826 L1505.99 682.826 L1505.44 682.826 L1504.88 682.826 L1504.32 682.826 L1503.76 682.826 L1503.2 682.826 L1502.64 682.826 L1502.08 682.826 L1501.52 682.826 L1500.96 682.826 L1500.4 682.826 L1499.84 682.826 L1499.28 682.826 L1498.72 682.826 L1498.16 682.826 L1497.61 682.826 L1497.05 682.826 L1496.49 682.826 L1495.93 682.826 L1495.37 682.826 L1494.81 682.826 L1494.25 682.826 L1493.69 682.826 L1493.13 682.826 L1492.57 682.826 L1492.01 682.826 L1491.45 682.826 L1490.89 682.826 L1490.34 682.826 L1489.78 682.826 L1489.22 682.826 L1488.66 682.826 L1488.1 682.826 L1487.54 682.826 L1486.98 682.826 L1486.42 682.826 L1485.86 682.826 L1485.3 682.826 L1484.74 682.826 L1484.18 682.826 L1483.62 682.826 L1483.07 682.826 L1482.51 682.826 L1481.95 682.826 L1481.39 682.826 L1480.83 682.826 L1480.27 682.826 L1479.71 682.826 L1479.15 682.826 L1478.59 682.826 L1478.03 682.826 L1477.47 682.826 L1476.91 682.826 L1476.35 682.826 L1475.79 682.826 L1475.24 682.826 L1474.68 682.826 L1474.12 682.826 L1473.56 682.826 L1473 682.826 L1472.44 682.826 L1471.88 682.826 L1471.32 682.826 L1470.76 682.826 L1470.2 682.826 L1469.64 682.826 L1469.08 682.826 L1468.52 682.826 L1467.97 682.826 L1467.41 682.826 L1466.85 682.826 L1466.29 682.826 L1465.73 682.826 L1465.17 682.826 L1464.61 682.826 L1464.05 682.826 L1463.49 682.826 L1462.93 682.826 L1462.37 682.826 L1461.81 682.826 L1461.25 682.826 L1460.7 682.826 L1460.14 682.826 L1459.58 682.826 L1459.02 682.826 L1458.46 682.826 L1457.9 682.826 L1457.34 682.826 L1456.78 682.826 L1456.22 682.826 L1455.66 682.826 L1455.1 682.826 L1454.54 682.826 L1453.98 682.826 L1453.42 682.826 L1452.87 682.826 L1452.31 682.826 L1451.75 682.826 L1451.19 682.826 L1450.63 682.826 L1450.07 682.826 L1449.51 682.826 L1448.95 682.826 L1448.39 682.826 L1447.83 682.826 L1447.27 682.826 L1446.71 682.826 L1446.15 682.826 L1445.6 682.826 L1445.04 682.826 L1444.48 682.826 L1443.92 682.826 L1443.36 682.826 L1442.8 682.826 L1442.24 682.826 L1441.68 682.826 L1441.12 682.826 L1440.56 682.826 L1440 682.826 L1439.44 682.826 L1438.88 682.826 L1438.33 682.826 L1437.77 682.826 L1437.21 682.826 L1436.65 682.826 L1436.09 682.826 L1435.53 682.826 L1434.97 682.826 L1434.41 682.826 L1433.85 682.826 L1433.29 682.826 L1432.73 682.826 L1432.17 682.826 L1431.61 682.826 L1431.05 682.826 L1430.5 682.826 L1429.94 682.826 L1429.38 682.826 L1428.82 682.826 L1428.26 682.826 L1427.7 682.826 L1427.14 682.826 L1426.58 682.826 L1426.02 682.826 L1425.46 682.826 L1424.9 682.826 L1424.34 682.826 L1423.78 682.826 L1423.23 682.826 L1422.67 682.826 L1422.11 682.826 L1421.55 682.826 L1420.99 682.826 L1420.43 682.826 L1419.87 682.826 L1419.31 682.826 L1418.75 682.826 L1418.19 682.826 L1417.63 682.826 L1417.07 682.826 L1416.51 682.826 L1415.95 682.826 L1415.4 682.826 L1414.84 682.826 L1414.28 682.826 L1413.72 682.826 L1413.16 682.826 L1412.6 682.826 L1412.04 682.826 L1411.48 682.826 L1410.92 682.826 L1410.36 682.826 L1409.8 682.826 L1409.24 682.826 L1408.68 682.826 L1408.13 682.826 L1407.57 682.826 L1407.01 682.826 L1406.45 682.826 L1405.89 682.826 L1405.33 682.826 L1404.77 682.826 L1404.21 682.826 L1403.65 682.826 L1403.09 682.826 L1402.53 682.826 L1401.97 682.826 L1401.41 682.826 L1400.86 682.826 L1400.3 682.826 L1399.74 682.826 L1399.18 682.826 L1398.62 682.826 L1398.06 682.826 L1397.5 682.826 L1396.94 682.826 L1396.38 682.826 L1395.82 682.826 L1395.26 682.826 L1394.7 682.826 L1394.14 682.826 L1393.58 682.826 L1393.03 682.826 L1392.47 682.826 L1391.91 682.826 L1391.35 682.826 L1390.79 682.826 L1390.23 682.826 L1389.67 682.826 L1389.11 682.826 L1388.55 682.826 L1387.99 682.826 L1387.43 682.826 L1386.87 682.826 L1386.31 682.826 L1385.76 682.826 L1385.2 682.826 L1384.64 682.826 L1384.08 682.826 L1383.52 682.826 L1382.96 682.826 L1382.4 682.826 L1381.84 682.826 L1381.28 682.826 L1380.72 682.826 L1380.16 682.826 L1379.6 682.826 L1379.04 682.826 L1378.49 682.826 L1377.93 682.826 L1377.37 682.826 L1376.81 682.826 L1376.25 682.826 L1375.69 682.826 L1375.13 682.826 L1374.57 682.826 L1374.01 682.826 L1373.45 682.826 L1372.89 682.826 L1372.33 682.826 L1371.77 682.826 L1371.21 682.826 L1370.66 682.826 L1370.1 682.826 L1369.54 682.826 L1368.98 682.826 L1368.42 682.826 L1367.86 682.826 L1367.3 682.826 L1366.74 682.826 L1366.18 682.826 L1365.62 682.826 L1365.06 682.826 L1364.5 682.826 L1363.94 682.826 L1363.39 682.826 L1362.83 682.826 L1362.27 682.826 L1361.71 682.826 L1361.15 682.826 L1360.59 682.826 L1360.03 682.826 L1359.47 682.826 L1358.91 682.826 L1358.35 682.826 L1357.79 682.826 L1357.23 682.826 L1356.67 682.826 L1356.12 682.826 L1355.56 682.826 L1355 682.826 L1354.44 682.826 L1353.88 682.826 L1353.32 682.826 L1352.76 682.826 L1352.2 682.826 L1351.64 682.826 L1351.08 682.826 L1350.52 682.826 L1349.96 682.826 L1349.4 682.826 L1348.84 682.826 L1348.29 682.826 L1347.73 682.826 L1347.17 682.826 L1346.61 682.826 L1346.05 682.826 L1345.49 682.826 L1344.93 682.826 L1344.37 682.826 L1343.81 682.826 L1343.25 682.826 L1342.69 682.826 L1342.13 682.826 L1341.57 682.826 L1341.02 682.826 L1340.46 682.826 L1339.9 682.826 L1339.34 682.826 L1338.78 682.826 L1338.22 682.826 L1337.66 682.826 L1337.1 682.826 L1336.54 682.826 L1335.98 682.826 L1335.42 682.826 L1334.86 682.826 L1334.3 682.826 L1333.75 682.826 L1333.19 682.826 L1332.63 682.826 L1332.07 682.826 L1331.51 682.826 L1330.95 682.826 L1330.39 682.826 L1329.83 682.826 L1329.27 682.826 L1328.71 682.826 L1328.15 682.826 L1327.59 682.826 L1327.03 682.826 L1326.47 682.826 L1325.92 682.826 L1325.36 682.826 L1324.8 682.826 L1324.24 682.826 L1323.68 682.826 L1323.12 682.826 L1322.56 682.826 L1322 682.826 L1321.44 682.826 L1320.88 682.826 L1320.32 682.826 L1319.76 682.826 L1319.2 682.826 L1318.65 682.826 L1318.09 682.826 L1317.53 682.826 L1316.97 682.826 L1316.41 682.826 L1315.85 682.826 L1315.29 682.826 L1314.73 682.826 L1314.17 682.826 L1313.61 682.826 L1313.05 682.826 L1312.49 682.826 L1311.93 682.826 L1311.38 682.826 L1310.82 682.826 L1310.26 682.826 L1309.7 682.826 L1309.14 682.826 L1308.58 682.826 L1308.02 682.826 L1307.46 682.826 L1306.9 682.826 L1306.34 682.826 L1305.78 682.826 L1305.22 682.826 L1304.66 682.826 L1304.1 682.826 L1303.55 682.826 L1302.99 682.826 L1302.43 682.826 L1301.87 682.826 L1301.31 682.826 L1300.75 682.826 L1300.19 682.826 L1299.63 682.826 L1299.07 682.826 L1298.51 682.826 L1297.95 682.826 L1297.39 682.826 L1296.83 682.826 L1296.28 682.826 L1295.72 682.826 L1295.16 682.826 L1294.6 682.826 L1294.04 682.826 L1293.48 682.826 L1292.92 682.826 L1292.36 682.826 L1291.8 682.826 L1291.24 682.826 L1290.68 682.826 L1290.12 682.826 L1289.56 682.826 L1289 682.826 L1288.45 682.826 L1287.89 682.826 L1287.33 682.826 L1286.77 682.826 L1286.21 682.826 L1285.65 682.826 L1285.09 682.826 L1284.53 682.826 L1283.97 682.826 L1283.41 682.826 L1282.85 682.826 L1282.29 682.826 L1281.73 682.826 L1281.18 682.826 L1280.62 682.826 L1280.06 682.826 L1279.5 682.826 L1278.94 682.826 L1278.38 682.826 L1277.82 682.826 L1277.26 682.826 L1276.7 682.826 L1276.14 682.826 L1275.58 682.826 L1275.02 682.826 L1274.46 682.826 L1273.91 682.826 L1273.35 682.826 L1272.79 682.826 L1272.23 682.826 L1271.67 682.826 L1271.11 682.826 L1270.55 682.826 L1269.99 682.826 L1269.43 682.826 L1268.87 682.826 L1268.31 682.826 L1267.75 682.826 L1267.19 682.826 L1266.63 682.826 L1266.08 682.826 L1265.52 682.826 L1264.96 682.826 L1264.4 682.826 L1263.84 682.826 L1263.28 682.826 L1262.72 682.826 L1262.16 682.826 L1261.6 682.826 L1261.04 682.826 L1260.48 682.826 L1259.92 682.826 L1259.36 682.826 L1258.81 682.826 L1258.25 682.826 L1257.69 682.826 L1257.13 682.826 L1256.57 682.826 L1256.01 682.826 L1255.45 682.826 L1254.89 682.826 L1254.33 682.826 L1253.77 682.826 L1253.21 682.826 L1252.65 682.826 L1252.09 682.826 L1251.54 682.826 L1250.98 682.826 L1250.42 682.826 L1249.86 682.826 L1249.3 682.826 L1248.74 682.826 L1248.18 682.826 L1247.62 682.826 L1247.06 682.826 L1246.5 682.826 L1245.94 682.826 L1245.38 682.826 L1244.82 682.826 L1244.26 682.826 L1243.71 682.826 L1243.15 682.826 L1242.59 682.826 L1242.03 682.826 L1241.47 682.826 L1240.91 682.826 L1240.35 682.826 L1239.79 682.826 L1239.23 682.826 L1238.67 682.826 L1238.11 682.826 L1237.55 682.826 L1236.99 682.826 L1236.44 682.826 L1235.88 682.826 L1235.32 682.826 L1234.76 682.826 L1234.2 682.826 L1233.64 682.826 L1233.08 682.826 L1232.52 682.826 L1231.96 682.826 L1231.4 682.826 L1230.84 682.826 L1230.28 682.826 L1229.72 682.826 L1229.17 682.826 L1228.61 682.826 L1228.05 682.826 L1227.49 682.826 L1226.93 682.826 L1226.37 682.826 L1225.81 682.826 L1225.25 682.826 L1224.69 682.826 L1224.13 682.826 L1223.57 682.826 L1223.01 682.826 L1222.45 682.826 L1221.89 682.826 L1221.34 682.826 L1220.78 682.826 L1220.22 682.826 L1219.66 682.826 L1219.1 682.826 L1218.54 682.826 L1217.98 682.826 L1217.42 682.826 L1216.86 682.826 L1216.3 682.826 L1215.74 682.826 L1215.18 682.826 L1214.62 682.826 L1214.07 682.826 L1213.51 682.826 L1212.95 682.826 L1212.39 682.826 L1211.83 682.826 L1211.27 682.826 L1210.71 682.826 L1210.15 682.826 L1209.59 682.826 L1209.03 682.826 L1208.47 682.826 L1207.91 682.826 L1207.35 682.826 L1206.8 682.826 L1206.24 682.826 L1205.68 682.826 L1205.12 682.826 L1204.56 682.826 L1204 682.826 L1203.44 682.826 L1202.88 682.826 L1202.32 682.826 L1201.76 682.826 L1201.2 682.826 L1200.64 682.826 L1200.08 682.826 L1199.52 682.826 L1198.97 682.826 L1198.41 682.826 L1197.85 682.826 L1197.29 682.826 L1196.73 682.826 L1196.17 682.826 L1195.61 682.826 L1195.05 682.826 L1194.49 682.826 L1193.93 682.826 L1193.37 682.826 L1192.81 682.826 L1192.25 682.826 L1191.7 682.826 L1191.14 682.826 L1190.58 682.826 L1190.02 682.826 L1189.46 682.826 L1188.9 682.826 L1188.34 682.826 L1187.78 682.826 L1187.22 682.826 L1186.66 682.826 L1186.1 682.826 L1185.54 682.826 L1184.98 682.826 L1184.43 682.826 L1183.87 682.826 L1183.31 682.826 L1182.75 682.826 L1182.19 682.826 L1181.63 682.826 L1181.07 682.826 L1180.51 682.826 L1179.95 682.826 L1179.39 682.826 L1178.83 682.826 L1178.27 682.826 L1177.71 682.826 L1177.15 682.826 L1176.6 682.826 L1176.04 682.826 L1175.48 682.826 L1174.92 682.826 L1174.36 682.826 L1173.8 682.826 L1173.24 682.826 L1172.68 682.826 L1172.12 682.826 L1171.56 682.826 L1171 682.826 L1170.44 682.826 L1169.88 682.826 L1169.33 682.826 L1168.77 682.826 L1168.21 682.826 L1167.65 682.826 L1167.09 682.826 L1166.53 682.826 L1165.97 682.826 L1165.41 682.826 L1164.85 682.826 L1164.29 682.826 L1163.73 682.826 L1163.17 682.826 L1162.61 682.826 L1162.05 682.826 L1161.5 682.826 L1160.94 682.826 L1160.38 682.826 L1159.82 682.826 L1159.26 682.826 L1158.7 682.826 L1158.14 682.826 L1157.58 682.826 L1157.02 682.826 L1156.46 682.826 L1155.9 682.826 L1155.34 682.826 L1154.78 682.826 L1154.23 682.826 L1153.67 682.826 L1153.11 682.826 L1152.55 682.826 L1151.99 682.826 L1151.43 682.826 L1150.87 682.826 L1150.31 682.826 L1149.75 682.826 L1149.19 682.826 L1148.63 682.826 L1148.07 682.826 L1147.51 682.826 L1146.96 682.826 L1146.4 682.826 L1145.84 682.826 L1145.28 682.826 L1144.72 682.826 L1144.16 682.826 L1143.6 682.826 L1143.04 682.826 L1142.48 682.826 L1141.92 682.826 L1141.36 682.826 L1140.8 682.826 L1140.24 682.826 L1139.68 682.826 L1139.13 682.826 L1138.57 682.826 L1138.01 682.826 L1137.45 682.826 L1136.89 682.826 L1136.33 682.826 L1135.77 682.826 L1135.21 682.826 L1134.65 682.826 L1134.09 682.826 L1133.53 682.826 L1132.97 682.826 L1132.41 682.826 L1131.86 682.826 L1131.3 682.826 L1130.74 682.826 L1130.18 682.826 L1129.62 682.826 L1129.06 682.826 L1128.5 682.826 L1127.94 682.826 L1127.38 682.826 L1126.82 682.826 L1126.26 682.826 L1125.7 682.826 L1125.14 682.826 L1124.59 682.826 L1124.03 682.826 L1123.47 682.826 L1122.91 682.826 L1122.35 682.826 L1121.79 682.826 L1121.23 682.826 L1120.67 682.826 L1120.11 682.826 L1119.55 682.826 L1118.99 682.826 L1118.43 682.826 L1117.87 682.826 L1117.31 682.826 L1116.76 682.826 L1116.2 682.826 L1115.64 682.826 L1115.08 682.826 L1114.52 682.826 L1113.96 682.826 L1113.4 682.826 L1112.84 682.826 L1112.28 682.826 L1111.72 682.826 L1111.16 682.826 L1110.6 682.826 L1110.04 682.826 L1109.49 682.826 L1108.93 682.826 L1108.37 682.826 L1107.81 682.826 L1107.25 682.826 L1106.69 682.826 L1106.13 682.826 L1105.57 682.826 L1105.01 682.826 L1104.45 682.826 L1103.89 682.826 L1103.33 682.826 L1102.77 682.826 L1102.22 682.826 L1101.66 682.826 L1101.1 682.826 L1100.54 682.826 L1099.98 682.826 L1099.42 682.826 L1098.86 682.826 L1098.3 682.826 L1097.74 682.826 L1097.18 682.826 L1096.62 682.826 L1096.06 682.826 L1095.5 682.826 L1094.94 682.826 L1094.39 682.826 L1093.83 682.826 L1093.27 682.826 L1092.71 682.826 L1092.15 682.826 L1091.59 682.826 L1091.03 682.826 L1090.47 682.826 L1089.91 682.826 L1089.35 682.826 L1088.79 682.826 L1088.23 682.826 L1087.67 682.826 L1087.12 682.826 L1086.56 682.826 L1086 682.826 L1085.44 682.826 L1084.88 682.826 L1084.32 682.826 L1083.76 682.826 L1083.2 682.826 L1082.64 682.826 L1082.08 682.826 L1081.52 682.826 L1080.96 682.826 L1080.4 682.826 L1079.85 682.826 L1079.29 682.826 L1078.73 682.826 L1078.17 682.826 L1077.61 682.826 L1077.05 682.826 L1076.49 682.826 L1075.93 682.826 L1075.37 682.826 L1074.81 682.826 L1074.25 682.826 L1073.69 682.826 L1073.13 682.826 L1072.57 682.826 L1072.02 682.826 L1071.46 682.826 L1070.9 682.826 L1070.34 682.826 L1069.78 682.826 L1069.22 682.826 L1068.66 682.826 L1068.1 682.826 L1067.54 682.826 L1066.98 682.826 L1066.42 682.826 L1065.86 682.826 L1065.3 682.826 L1064.75 682.826 L1064.19 682.826 L1063.63 682.826 L1063.07 682.826 L1062.51 682.826 L1061.95 682.826 L1061.39 682.826 L1060.83 682.826 L1060.27 682.826 L1059.71 682.826 L1059.15 682.826 L1058.59 682.826 L1058.03 682.826 L1057.48 682.826 L1056.92 682.826 L1056.36 682.826 L1055.8 682.826 L1055.24 682.826 L1054.68 682.826 L1054.12 682.826 L1053.56 682.826 L1053 682.826 L1052.44 682.826 L1051.88 682.826 L1051.32 682.826 L1050.76 682.826 L1050.2 682.826 L1049.65 682.826 L1049.09 682.826 L1048.53 682.826 L1047.97 682.826 L1047.41 682.826 L1046.85 682.826 L1046.29 682.826 L1045.73 682.826 L1045.17 682.826 L1044.61 682.826 L1044.05 682.826 L1043.49 682.826 L1042.93 682.826 L1042.38 682.826 L1041.82 682.826 L1041.26 682.826 L1040.7 682.826 L1040.14 682.826 L1039.58 682.826 L1039.02 682.826 L1038.46 682.826 L1037.9 682.826 L1037.34 682.826 L1036.78 682.826 L1036.22 682.826 L1035.66 682.826 L1035.1 682.826 L1034.55 682.826 L1033.99 682.826 L1033.43 682.826 L1032.87 682.826 L1032.31 682.826 L1031.75 682.826 L1031.19 682.826 L1030.63 682.826 L1030.07 682.826 L1029.51 682.826 L1028.95 682.826 L1028.39 682.826 L1027.83 682.826 L1027.28 682.826 L1026.72 682.826 L1026.16 682.826 L1025.6 682.826 L1025.04 682.826 L1024.48 682.826 L1023.92 682.826 L1023.36 682.826 L1022.8 682.826 L1022.24 682.826 L1021.68 682.826 L1021.12 682.826 L1020.56 682.826 L1020.01 682.826 L1019.45 682.826 L1018.89 682.826 L1018.33 682.826 L1017.77 682.826 L1017.21 682.826 L1016.65 682.826 L1016.09 682.826 L1015.53 682.826 L1014.97 682.826 L1014.41 682.826 L1013.85 682.826 L1013.29 682.826 L1012.73 682.826 L1012.18 682.826 L1011.62 682.826 L1011.06 682.826 L1010.5 682.826 L1009.94 682.826 L1009.38 682.826 L1008.82 682.826 L1008.26 682.826 L1007.7 682.826 L1007.14 682.826 L1006.58 682.826 L1006.02 682.826 L1005.46 682.826 L1004.91 682.826 L1004.35 682.826 L1003.79 682.826 L1003.23 682.826 L1002.67 682.826 L1002.11 682.826 L1001.55 682.826 L1000.99 682.826 L1000.43 682.826 L999.872 682.826 L999.313 682.826 L998.754 682.826 L998.194 682.826 L997.635 682.826 L997.076 682.826 L996.517 682.826 L995.957 682.826 L995.398 682.826 L994.839 682.826 L994.28 682.826 L993.72 682.826 L993.161 682.826 L992.602 682.826 L992.043 682.826 L991.483 682.826 L990.924 682.826 L990.365 682.826 L989.806 682.826 L989.246 682.826 L988.687 682.826 L988.128 682.826 L987.569 682.826 L987.009 682.826 L986.45 682.826 L985.891 682.826 L985.332 682.826 L984.772 682.826 L984.213 682.826 L983.654 682.826 L983.095 682.826 L982.535 682.826 L981.976 682.826 L981.417 682.826 L980.858 682.826 L980.298 682.826 L979.739 682.826 L979.18 682.826 L978.621 682.826 L978.061 682.826 L977.502 682.826 L976.943 682.826 L976.384 682.826 L975.824 682.826 L975.265 682.826 L974.706 682.826 L974.147 682.826 L973.587 682.826 L973.028 682.826 L972.469 682.826 L971.91 682.826 L971.35 682.826 L970.791 682.826 L970.232 682.826 L969.673 682.826 L969.113 682.826 L968.554 682.826 L967.995 682.826 L967.436 682.826 L966.876 682.826 L966.317 682.826 L965.758 682.826 L965.199 682.826 L964.639 682.826 L964.08 682.826 L963.521 682.826 L962.962 682.826 L962.402 682.826 L961.843 682.826 L961.284 682.826 L960.725 682.826 L960.165 682.826 L959.606 682.826 L959.047 682.826 L958.488 682.826 L957.928 682.826 L957.369 682.826 L956.81 682.826 L956.251 682.826 L955.691 682.826 L955.132 682.826 L954.573 682.826 L954.014 682.826 L953.454 682.826 L952.895 682.826 L952.336 682.826 L951.777 682.826 L951.217 682.826 L950.658 682.826 L950.099 682.826 L949.54 682.826 L948.98 682.826 L948.421 682.826 L947.862 682.826 L947.303 682.826 L946.743 682.826 L946.184 682.826 L945.625 682.826 L945.066 682.826 L944.506 682.826 L943.947 682.826 L943.388 682.826 L942.829 682.826 L942.269 682.826 L941.71 682.826 L941.151 682.826 L940.592 682.826 L940.032 682.826 L939.473 682.826 L938.914 682.826 L938.355 682.826 L937.795 682.826 L937.236 682.826 L936.677 682.826 L936.118 682.826 L935.558 682.826 L934.999 682.826 L934.44 682.826 L933.881 682.826 L933.321 682.826 L932.762 682.826 L932.203 682.826 L931.644 682.826 L931.084 682.826 L930.525 682.826 L929.966 682.826 L929.406 682.826 L928.847 682.826 L928.288 682.826 L927.729 682.826 L927.169 682.826 L926.61 682.826 L926.051 682.826 L925.492 682.826 L924.932 682.826 L924.373 682.826 L923.814 682.826 L923.255 682.826 L922.695 682.826 L922.136 682.826 L921.577 682.826 L921.018 682.826 L920.458 682.826 L919.899 682.826 L919.34 682.826 L918.781 682.826 L918.221 682.826 L917.662 682.826 L917.103 682.826 L916.544 682.826 L915.984 682.826 L915.425 682.826 L914.866 682.826 L914.307 682.826 L913.747 682.826 L913.188 682.826 L912.629 682.826 L912.07 682.826 L911.51 682.826 L910.951 682.826 L910.392 682.826 L909.833 682.826 L909.273 682.826 L908.714 682.826 L908.155 682.826 L907.596 682.826 L907.036 682.826 L906.477 682.826 L905.918 682.826 L905.359 682.826 L904.799 682.826 L904.24 682.826 L903.681 682.826 L903.122 682.826 L902.562 682.826 L902.003 682.826 L901.444 682.826 L900.885 682.826 L900.325 682.826 L899.766 682.826 L899.207 682.826 L898.648 682.826 L898.088 682.826 L897.529 682.826 L896.97 682.826 L896.411 682.826 L895.851 682.826 L895.292 682.826 L894.733 682.826 L894.174 682.826 L893.614 682.826 L893.055 682.826 L892.496 682.826 L891.937 682.826 L891.377 682.826 L890.818 682.826 L890.259 682.826 L889.7 682.826 L889.14 682.826 L888.581 682.826 L888.022 682.826 L887.463 682.826 L886.903 682.826 L886.344 682.826 L885.785 682.826 L885.226 682.826 L884.666 682.826 L884.107 682.826 L883.548 682.826 L882.989 682.826 L882.429 682.826 L881.87 682.826 L881.311 682.826 L880.752 682.826 L880.192 682.826 L879.633 682.826 L879.074 682.826 L878.515 682.826 L877.955 682.826 L877.396 682.826 L876.837 682.826 L876.278 682.826 L875.718 682.826 L875.159 682.826 L874.6 682.826 L874.041 682.826 L873.481 682.826 L872.922 682.826 L872.363 682.826 L871.804 682.826 L871.244 682.826 L870.685 682.826 L870.126 682.826 L869.567 682.826 L869.007 682.826 L868.448 682.826 L867.889 682.826 L867.33 682.826 L866.77 682.826 L866.211 682.826 L865.652 682.826 L865.093 682.826 L864.533 682.826 L863.974 682.826 L863.415 682.826 L862.856 682.826 L862.296 682.826 L861.737 682.826 L861.178 682.826 L860.619 682.826 L860.059 682.826 L859.5 682.826 L858.941 682.826 L858.382 682.826 L857.822 682.826 L857.263 682.826 L856.704 682.826 L856.145 682.826 L855.585 682.826 L855.026 682.826 L854.467 682.826 L853.908 682.826 L853.348 682.826 L852.789 682.826 L852.23 682.826 L851.671 682.826 L851.111 682.826 L850.552 682.826 L849.993 682.826 L849.434 682.826 L848.874 682.826 L848.315 682.826 L847.756 682.826 L847.197 682.826 L846.637 682.826 L846.078 682.826 L845.519 682.826 L844.96 682.826 L844.4 682.826 L843.841 682.826 L843.282 682.826 L842.723 682.826 L842.163 682.826 L841.604 682.826 L841.045 682.826 L840.486 682.826 L839.926 682.826 L839.367 682.826 L838.808 682.826 L838.249 682.826 L837.689 682.826 L837.13 682.826 L836.571 682.826 L836.012 682.826 L835.452 682.826 L834.893 682.826 L834.334 682.826 L833.775 682.826 L833.215 682.826 L832.656 682.826 L832.097 682.826 L831.538 682.826 L830.978 682.826 L830.419 682.826 L829.86 682.826 L829.301 682.826 L828.741 682.826 L828.182 682.826 L827.623 682.826 L827.064 682.826 L826.504 682.826 L825.945 682.826 L825.386 682.826 L824.827 682.826 L824.267 682.826 L823.708 682.826 L823.149 682.826 L822.59 682.826 L822.03 682.826 L821.471 682.826 L820.912 682.826 L820.353 682.826 L819.793 682.826 L819.234 682.826 L818.675 682.826 L818.116 682.826 L817.556 682.826 L816.997 682.826 L816.438 682.826 L815.879 682.826 L815.319 682.826 L814.76 682.826 L814.201 682.826 L813.642 682.826 L813.082 682.826 L812.523 682.826 L811.964 682.826 L811.405 682.826 L810.845 682.826 L810.286 682.826 L809.727 682.826 L809.168 682.826 L808.608 682.826 L808.049 682.826 L807.49 682.826 L806.931 682.826 L806.371 682.826 L805.812 682.826 L805.253 682.826 L804.693 682.826 L804.134 682.826 L803.575 682.826 L803.016 682.826 L802.456 682.826 L801.897 682.826 L801.338 682.826 L800.779 682.826 L800.219 682.826 L799.66 682.826 L799.101 682.826 L798.542 682.826 L797.982 682.826 L797.423 682.826 L796.864 682.826 L796.305 682.826 L795.745 682.826 L795.186 682.826 L794.627 682.826 L794.068 682.826 L793.508 682.826 L792.949 682.826 L792.39 682.826 L791.831 682.826 L791.271 682.826 L790.712 682.826 L790.153 682.826 L789.594 682.826 L789.034 682.826 L788.475 682.826 L787.916 682.826 L787.357 682.826 L786.797 682.826 L786.238 682.826 L785.679 682.826 L785.12 682.826 L784.56 682.826 L784.001 682.826 L783.442 682.826 L782.883 682.826 L782.323 682.826 L781.764 682.826 L781.205 682.826 L780.646 682.826 L780.086 682.826 L779.527 682.826 L778.968 682.826 L778.409 682.826 L777.849 682.826 L777.29 682.826 L776.731 682.826 L776.172 682.826 L775.612 682.826 L775.053 682.826 L774.494 682.826 L773.935 682.826 L773.375 682.826 L772.816 682.826 L772.257 682.826 L771.698 682.826 L771.138 682.826 L770.579 682.826 L770.02 682.826 L769.461 682.826 L768.901 682.826 L768.342 682.826 L767.783 682.826 L767.224 682.826 L766.664 682.826 L766.105 682.826 L765.546 682.826 L764.987 682.826 L764.427 682.826 L763.868 682.826 L763.309 682.826 L762.75 682.826 L762.19 682.826 L761.631 682.826 L761.072 682.826 L760.513 682.826 L759.953 682.826 L759.394 682.826 L758.835 682.826 L758.276 682.826 L757.716 682.826 L757.157 682.826 L756.598 682.826 L756.039 682.826 L755.479 682.826 L754.92 682.826 L754.361 682.826 L753.802 682.826 L753.242 682.826 L752.683 682.826 L752.124 682.826 L751.565 682.826 L751.005 682.826 L750.446 682.826 L749.887 682.826 L749.328 682.826 L748.768 682.826 L748.209 682.826 L747.65 682.826 L747.091 682.826 L746.531 682.826 L745.972 682.826 L745.413 682.826 L744.854 682.826 L744.294 682.826 L743.735 682.826 L743.176 682.826 L742.617 682.826 L742.057 682.826 L741.498 682.826 L740.939 682.826 L740.38 682.826 L739.82 682.826 L739.261 682.826 L738.702 682.826 L738.143 682.826 L737.583 682.826 L737.024 682.826 L736.465 682.826 L735.906 682.826 L735.346 682.826 L734.787 682.826 L734.228 682.826 L733.669 682.826 L733.109 682.826 L732.55 682.826 L731.991 682.826 L731.432 682.826 L730.872 682.826 L730.313 682.826 L729.754 682.826 L729.195 682.826 L728.635 682.826 L728.076 682.826 L727.517 682.826 L726.958 682.826 L726.398 682.826 L725.839 682.826 L725.28 682.826 L724.721 682.826 L724.161 682.826 L723.602 682.826 L723.043 682.826 L722.484 682.826 L721.924 682.826 L721.365 682.826 L720.806 682.826 L720.247 682.826  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip843)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.041 720.806,684.041 721.365,684.041 721.924,684.041 722.484,684.041 723.043,684.041 723.602,684.041 724.161,684.041 724.721,684.041 725.28,684.041 725.839,684.041 726.398,684.041 726.958,684.041 727.517,684.041 728.076,684.041 728.635,684.041 729.195,684.041 729.754,684.041 730.313,684.041 730.872,684.041 731.432,684.041 731.991,684.041 732.55,684.041 733.109,684.041 733.669,684.041 734.228,684.041 734.787,684.041 735.346,684.041 735.906,684.041 736.465,684.041 737.024,684.041 737.583,684.041 738.143,684.041 738.702,684.041 739.261,684.041 739.82,684.041 740.38,684.041 740.939,684.041 741.498,684.041 742.057,684.041 742.617,684.041 743.176,684.041 743.735,684.041 744.294,684.041 744.854,684.041 745.413,684.041 745.972,684.041 746.531,684.041 747.091,684.041 747.65,684.041 748.209,684.041 748.768,684.041 749.328,684.041 749.887,684.041 750.446,684.041 751.005,684.041 751.565,684.041 752.124,684.041 752.683,684.041 753.242,684.041 753.802,684.041 754.361,684.041 754.92,684.041 755.479,684.041 756.039,684.041 756.598,684.041 757.157,684.041 757.716,684.041 758.276,684.041 758.835,684.041 759.394,684.041 759.953,684.041 760.513,684.041 761.072,684.041 761.631,684.041 762.19,684.041 762.75,684.041 763.309,684.041 763.868,684.041 764.427,684.041 764.987,684.041 765.546,684.041 766.105,684.041 766.664,684.041 767.224,684.041 767.783,684.041 768.342,684.041 768.901,684.041 769.461,684.041 770.02,684.041 770.579,684.041 771.138,684.041 771.698,684.041 772.257,684.041 772.816,684.041 773.375,684.041 773.935,684.041 774.494,684.041 775.053,684.041 775.612,684.041 776.172,684.041 776.731,684.041 777.29,684.041 777.849,684.041 778.409,684.041 778.968,684.041 779.527,684.041 780.086,684.041 780.646,684.041 781.205,684.041 781.764,684.041 782.323,684.041 782.883,684.041 783.442,684.041 784.001,684.041 784.56,684.041 785.12,684.041 785.679,684.041 786.238,684.041 786.797,684.041 787.357,684.041 787.916,684.041 788.475,684.041 789.034,684.041 789.594,684.041 790.153,684.041 790.712,684.041 791.271,684.041 791.831,684.041 792.39,684.041 792.949,684.041 793.508,684.041 794.068,684.041 794.627,684.041 795.186,684.041 795.745,684.041 796.305,684.041 796.864,684.041 797.423,684.041 797.982,684.041 798.542,684.041 799.101,684.041 799.66,684.041 800.219,684.041 800.779,684.041 801.338,684.041 801.897,684.041 802.456,684.041 803.016,684.041 803.575,684.041 804.134,684.041 804.693,684.041 805.253,684.041 805.812,684.041 806.371,684.041 806.931,684.041 807.49,684.041 808.049,684.041 808.608,684.041 809.168,684.041 809.727,684.041 810.286,684.041 810.845,684.041 811.405,684.041 811.964,684.041 812.523,684.041 813.082,684.041 813.642,684.041 814.201,684.041 814.76,684.041 815.319,684.041 815.879,684.041 816.438,684.041 816.997,684.041 817.556,684.041 818.116,684.041 818.675,684.041 819.234,684.041 819.793,684.041 820.353,684.041 820.912,684.041 821.471,684.041 822.03,684.041 822.59,684.041 823.149,684.041 823.708,684.041 824.267,684.041 824.827,684.041 825.386,684.041 825.945,684.041 826.504,684.041 827.064,684.041 827.623,684.041 828.182,684.041 828.741,684.041 829.301,684.041 829.86,684.041 830.419,684.041 830.978,684.041 831.538,684.041 832.097,684.041 832.656,684.041 833.215,684.041 833.775,684.041 834.334,684.041 834.893,684.041 835.452,684.041 836.012,684.041 836.571,684.041 837.13,684.041 837.689,684.041 838.249,684.041 838.808,684.041 839.367,684.041 839.926,684.041 840.486,684.041 841.045,684.041 841.604,684.041 842.163,684.041 842.723,684.041 843.282,684.041 843.841,684.041 844.4,684.041 844.96,684.041 845.519,684.041 846.078,684.041 846.637,684.041 847.197,684.041 847.756,684.041 848.315,684.041 848.874,684.041 849.434,684.041 849.993,684.041 850.552,684.041 851.111,684.041 851.671,684.041 852.23,684.041 852.789,684.041 853.348,684.041 853.908,684.041 854.467,684.041 855.026,684.041 855.585,684.041 856.145,684.041 856.704,684.041 857.263,684.041 857.822,684.041 858.382,684.041 858.941,684.041 859.5,684.041 860.059,684.041 860.619,684.041 861.178,684.041 861.737,684.041 862.296,684.041 862.856,684.041 863.415,684.041 863.974,684.041 864.533,684.041 865.093,684.041 865.652,684.041 866.211,684.041 866.77,684.041 867.33,684.041 867.889,684.041 868.448,684.041 869.007,684.041 869.567,684.041 870.126,684.041 870.685,684.041 871.244,684.041 871.804,684.041 872.363,684.041 872.922,684.041 873.481,684.041 874.041,684.041 874.6,684.041 875.159,684.041 875.718,684.041 876.278,684.041 876.837,684.041 877.396,684.041 877.955,684.041 878.515,684.041 879.074,684.041 879.633,684.041 880.192,684.041 880.752,684.041 881.311,684.041 881.87,684.041 882.429,684.041 882.989,684.041 883.548,684.041 884.107,684.041 884.666,684.041 885.226,684.041 885.785,684.041 886.344,684.041 886.903,684.041 887.463,684.041 888.022,684.041 888.581,684.041 889.14,684.041 889.7,684.041 890.259,684.041 890.818,684.041 891.377,684.041 891.937,684.041 892.496,684.041 893.055,684.041 893.614,684.041 894.174,684.041 894.733,684.041 895.292,684.041 895.851,684.041 896.411,684.041 896.97,684.041 897.529,684.041 898.088,684.041 898.648,684.041 899.207,684.041 899.766,684.041 900.325,684.041 900.885,684.041 901.444,684.041 902.003,684.041 902.562,684.041 903.122,684.041 903.681,684.041 904.24,684.041 904.799,684.041 905.359,684.041 905.918,684.041 906.477,684.041 907.036,684.041 907.596,684.041 908.155,684.041 908.714,684.041 909.273,684.041 909.833,684.041 910.392,684.041 910.951,684.041 911.51,684.041 912.07,684.041 912.629,684.041 913.188,684.041 913.747,684.041 914.307,684.041 914.866,684.041 915.425,684.041 915.984,684.041 916.544,684.041 917.103,684.041 917.662,684.041 918.221,684.041 918.781,684.041 919.34,684.041 919.899,684.041 920.458,684.041 921.018,684.041 921.577,684.041 922.136,684.041 922.695,684.041 923.255,684.041 923.814,684.041 924.373,684.041 924.932,684.041 925.492,684.041 926.051,684.041 926.61,684.041 927.169,684.041 927.729,684.041 928.288,684.041 928.847,684.041 929.406,684.041 929.966,684.041 930.525,684.041 931.084,684.041 931.644,684.041 932.203,684.041 932.762,684.041 933.321,684.041 933.881,684.041 934.44,684.041 934.999,684.041 935.558,684.041 936.118,684.041 936.677,684.041 937.236,684.041 937.795,684.041 938.355,684.041 938.914,684.041 939.473,684.041 940.032,684.041 940.592,684.041 941.151,684.041 941.71,684.041 942.269,684.041 942.829,684.041 943.388,684.041 943.947,684.041 944.506,684.041 945.066,684.041 945.625,684.041 946.184,684.041 946.743,684.041 947.303,684.041 947.862,684.041 948.421,684.041 948.98,684.041 949.54,684.041 950.099,684.041 950.658,684.041 951.217,684.041 951.777,684.041 952.336,684.041 952.895,684.041 953.454,684.041 954.014,684.041 954.573,684.041 955.132,684.041 955.691,684.041 956.251,684.041 956.81,684.041 957.369,684.041 957.928,684.041 958.488,684.041 959.047,684.041 959.606,684.041 960.165,684.041 960.725,684.041 961.284,684.041 961.843,684.041 962.402,684.041 962.962,684.041 963.521,684.041 964.08,684.041 964.639,684.041 965.199,684.041 965.758,684.041 966.317,684.041 966.876,684.041 967.436,684.041 967.995,684.041 968.554,684.041 969.113,684.041 969.673,684.041 970.232,684.041 970.791,684.041 971.35,684.041 971.91,684.041 972.469,684.041 973.028,684.041 973.587,684.041 974.147,684.041 974.706,684.041 975.265,684.041 975.824,684.041 976.384,684.041 976.943,684.041 977.502,684.041 978.061,684.041 978.621,684.041 979.18,684.041 979.739,684.041 980.298,684.041 980.858,684.041 981.417,684.041 981.976,684.041 982.535,684.041 983.095,684.041 983.654,684.041 984.213,684.041 984.772,684.041 985.332,684.041 985.891,684.041 986.45,684.041 987.009,684.041 987.569,684.041 988.128,684.041 988.687,684.041 989.246,684.041 989.806,684.041 990.365,684.041 990.924,684.041 991.483,684.041 992.043,684.041 992.602,684.041 993.161,684.041 993.72,684.041 994.28,684.041 994.839,684.041 995.398,684.041 995.957,684.041 996.517,684.041 997.076,684.041 997.635,684.041 998.194,684.041 998.754,684.041 999.313,684.041 999.872,684.041 1000.43,684.041 1000.99,684.041 1001.55,684.041 1002.11,684.041 1002.67,684.041 1003.23,684.041 1003.79,684.041 1004.35,684.041 1004.91,684.041 1005.46,684.041 1006.02,684.041 1006.58,684.041 1007.14,684.041 1007.7,684.041 1008.26,684.041 1008.82,684.041 1009.38,684.041 1009.94,684.041 1010.5,684.041 1011.06,684.041 1011.62,684.041 1012.18,684.041 1012.73,684.041 1013.29,684.041 1013.85,684.041 1014.41,684.041 1014.97,684.041 1015.53,684.041 1016.09,684.041 1016.65,684.041 1017.21,684.041 1017.77,684.041 1018.33,684.041 1018.89,684.041 1019.45,684.041 1020.01,684.041 1020.56,684.041 1021.12,684.041 1021.68,684.041 1022.24,684.041 1022.8,684.041 1023.36,684.041 1023.92,684.041 1024.48,684.041 1025.04,684.041 1025.6,684.041 1026.16,684.041 1026.72,684.041 1027.28,684.041 1027.83,684.041 1028.39,684.041 1028.95,684.041 1029.51,684.041 1030.07,684.041 1030.63,684.041 1031.19,684.041 1031.75,684.041 1032.31,684.041 1032.87,684.041 1033.43,684.041 1033.99,684.041 1034.55,684.041 1035.1,684.041 1035.66,684.041 1036.22,684.041 1036.78,684.041 1037.34,684.041 1037.9,684.041 1038.46,684.041 1039.02,684.041 1039.58,684.041 1040.14,684.041 1040.7,684.041 1041.26,684.041 1041.82,684.041 1042.38,684.041 1042.93,684.041 1043.49,684.041 1044.05,684.041 1044.61,684.041 1045.17,684.041 1045.73,684.041 1046.29,684.041 1046.85,684.041 1047.41,684.041 1047.97,684.041 1048.53,684.041 1049.09,684.041 1049.65,684.041 1050.2,684.041 1050.76,684.041 1051.32,684.041 1051.88,684.041 1052.44,684.041 1053,684.041 1053.56,684.041 1054.12,684.041 1054.68,684.041 1055.24,684.041 1055.8,684.041 1056.36,684.041 1056.92,684.041 1057.48,684.041 1058.03,684.041 1058.59,684.041 1059.15,684.041 1059.71,684.041 1060.27,684.041 1060.83,684.041 1061.39,684.041 1061.95,684.041 1062.51,684.041 1063.07,684.041 1063.63,684.041 1064.19,684.041 1064.75,684.041 1065.3,684.041 1065.86,684.041 1066.42,684.041 1066.98,684.041 1067.54,684.041 1068.1,684.041 1068.66,684.041 1069.22,684.041 1069.78,684.041 1070.34,684.041 1070.9,684.041 1071.46,684.041 1072.02,684.041 1072.57,684.041 1073.13,684.041 1073.69,684.041 1074.25,684.041 1074.81,684.041 1075.37,684.041 1075.93,684.041 1076.49,684.041 1077.05,684.041 1077.61,684.041 1078.17,684.041 1078.73,684.041 1079.29,684.041 1079.85,684.041 1080.4,684.041 1080.96,684.041 1081.52,684.041 1082.08,684.041 1082.64,684.041 1083.2,684.041 1083.76,684.041 1084.32,684.041 1084.88,684.041 1085.44,684.041 1086,684.041 1086.56,684.041 1087.12,684.041 1087.67,684.041 1088.23,684.041 1088.79,684.041 1089.35,684.041 1089.91,684.041 1090.47,684.041 1091.03,684.041 1091.59,684.041 1092.15,684.041 1092.71,684.041 1093.27,684.041 1093.83,684.041 1094.39,684.041 1094.94,684.041 1095.5,684.041 1096.06,684.041 1096.62,684.041 1097.18,684.041 1097.74,684.041 1098.3,684.041 1098.86,684.041 1099.42,684.041 1099.98,684.041 1100.54,684.041 1101.1,684.041 1101.66,684.041 1102.22,684.041 1102.77,684.041 1103.33,684.041 1103.89,684.041 1104.45,684.041 1105.01,684.041 1105.57,684.041 1106.13,684.041 1106.69,684.041 1107.25,684.041 1107.81,684.041 1108.37,684.041 1108.93,684.041 1109.49,684.041 1110.04,684.041 1110.6,684.041 1111.16,684.041 1111.72,684.041 1112.28,684.041 1112.84,684.041 1113.4,684.041 1113.96,684.041 1114.52,684.041 1115.08,684.041 1115.64,684.041 1116.2,684.041 1116.76,684.041 1117.31,684.041 1117.87,684.041 1118.43,684.041 1118.99,684.041 1119.55,684.041 1120.11,684.041 1120.67,684.041 1121.23,684.041 1121.79,684.041 1122.35,684.041 1122.91,684.041 1123.47,684.041 1124.03,684.041 1124.59,684.041 1125.14,684.041 1125.7,684.041 1126.26,684.041 1126.82,684.041 1127.38,684.041 1127.94,684.041 1128.5,684.041 1129.06,684.041 1129.62,684.041 1130.18,684.041 1130.74,684.041 1131.3,684.041 1131.86,684.041 1132.41,684.041 1132.97,684.041 1133.53,684.041 1134.09,684.041 1134.65,684.041 1135.21,684.041 1135.77,684.041 1136.33,684.041 1136.89,684.041 1137.45,684.041 1138.01,684.041 1138.57,684.041 1139.13,684.041 1139.68,684.041 1140.24,684.041 1140.8,684.041 1141.36,684.041 1141.92,684.041 1142.48,684.041 1143.04,684.041 1143.6,684.041 1144.16,684.041 1144.72,684.041 1145.28,684.041 1145.84,684.041 1146.4,684.041 1146.96,684.041 1147.51,684.041 1148.07,684.041 1148.63,684.041 1149.19,684.041 1149.75,684.041 1150.31,684.041 1150.87,684.041 1151.43,684.041 1151.99,684.041 1152.55,684.041 1153.11,684.041 1153.67,684.041 1154.23,684.041 1154.78,684.041 1155.34,684.041 1155.9,684.041 1156.46,684.041 1157.02,684.041 1157.58,684.041 1158.14,684.041 1158.7,684.041 1159.26,684.041 1159.82,684.041 1160.38,684.041 1160.94,684.041 1161.5,684.041 1162.05,684.041 1162.61,684.041 1163.17,684.041 1163.73,684.041 1164.29,684.041 1164.85,684.041 1165.41,684.041 1165.97,684.041 1166.53,684.041 1167.09,684.041 1167.65,684.041 1168.21,684.041 1168.77,684.041 1169.33,684.041 1169.88,684.041 1170.44,684.041 1171,684.041 1171.56,684.041 1172.12,684.041 1172.68,684.041 1173.24,684.041 1173.8,684.041 1174.36,684.041 1174.92,684.041 1175.48,684.041 1176.04,684.041 1176.6,684.041 1177.15,684.041 1177.71,684.041 1178.27,684.041 1178.83,684.041 1179.39,684.041 1179.95,684.041 1180.51,684.041 1181.07,684.041 1181.63,684.041 1182.19,684.041 1182.75,684.041 1183.31,684.041 1183.87,684.041 1184.43,684.041 1184.98,684.041 1185.54,684.041 1186.1,684.041 1186.66,684.041 1187.22,684.041 1187.78,684.041 1188.34,684.041 1188.9,684.041 1189.46,684.041 1190.02,684.041 1190.58,684.041 1191.14,684.041 1191.7,684.041 1192.25,684.041 1192.81,684.041 1193.37,684.041 1193.93,684.041 1194.49,684.041 1195.05,684.041 1195.61,684.041 1196.17,684.041 1196.73,684.041 1197.29,684.041 1197.85,684.041 1198.41,684.041 1198.97,684.041 1199.52,684.041 1200.08,684.041 1200.64,684.041 1201.2,684.041 1201.76,684.041 1202.32,684.041 1202.88,684.041 1203.44,684.041 1204,684.041 1204.56,684.041 1205.12,684.041 1205.68,684.041 1206.24,684.041 1206.8,684.041 1207.35,684.041 1207.91,684.041 1208.47,684.041 1209.03,684.041 1209.59,684.041 1210.15,684.041 1210.71,684.041 1211.27,684.041 1211.83,684.041 1212.39,684.041 1212.95,684.041 1213.51,684.041 1214.07,684.041 1214.62,684.041 1215.18,684.041 1215.74,684.041 1216.3,684.041 1216.86,684.041 1217.42,684.041 1217.98,684.041 1218.54,684.041 1219.1,684.041 1219.66,684.041 1220.22,684.041 1220.78,684.041 1221.34,684.041 1221.89,684.041 1222.45,684.041 1223.01,684.041 1223.57,684.041 1224.13,684.041 1224.69,684.041 1225.25,684.041 1225.81,684.041 1226.37,684.041 1226.93,684.041 1227.49,684.041 1228.05,684.041 1228.61,684.041 1229.17,684.041 1229.72,684.041 1230.28,684.041 1230.84,684.041 1231.4,684.041 1231.96,684.041 1232.52,684.041 1233.08,684.041 1233.64,684.041 1234.2,684.041 1234.76,684.041 1235.32,684.041 1235.88,684.041 1236.44,684.041 1236.99,684.041 1237.55,684.041 1238.11,684.041 1238.67,684.041 1239.23,684.041 1239.79,684.041 1240.35,684.041 1240.91,684.041 1241.47,684.041 1242.03,684.041 1242.59,684.041 1243.15,684.041 1243.71,684.041 1244.26,684.041 1244.82,684.041 1245.38,684.041 1245.94,684.041 1246.5,684.041 1247.06,684.041 1247.62,684.041 1248.18,684.041 1248.74,684.041 1249.3,684.041 1249.86,684.041 1250.42,684.041 1250.98,684.041 1251.54,684.041 1252.09,684.041 1252.65,684.041 1253.21,684.041 1253.77,684.041 1254.33,684.041 1254.89,684.041 1255.45,684.041 1256.01,684.041 1256.57,684.041 1257.13,684.041 1257.69,684.041 1258.25,684.041 1258.81,684.041 1259.36,684.041 1259.92,684.041 1260.48,684.041 1261.04,684.041 1261.6,684.041 1262.16,684.041 1262.72,684.041 1263.28,684.041 1263.84,684.041 1264.4,684.041 1264.96,684.041 1265.52,684.041 1266.08,684.041 1266.63,684.041 1267.19,684.041 1267.75,684.041 1268.31,684.041 1268.87,684.041 1269.43,684.041 1269.99,684.041 1270.55,684.041 1271.11,684.041 1271.67,684.041 1272.23,684.041 1272.79,684.041 1273.35,684.041 1273.91,684.041 1274.46,684.041 1275.02,684.041 1275.58,684.041 1276.14,684.041 1276.7,684.041 1277.26,684.041 1277.82,684.041 1278.38,684.041 1278.94,684.041 1279.5,684.041 1280.06,684.041 1280.62,684.041 1281.18,684.041 1281.73,684.041 1282.29,684.041 1282.85,684.041 1283.41,684.041 1283.97,684.041 1284.53,684.041 1285.09,684.041 1285.65,684.041 1286.21,684.041 1286.77,684.041 1287.33,684.041 1287.89,684.041 1288.45,684.041 1289,684.041 1289.56,684.041 1290.12,684.041 1290.68,684.041 1291.24,684.041 1291.8,684.041 1292.36,684.041 1292.92,684.041 1293.48,684.041 1294.04,684.041 1294.6,684.041 1295.16,684.041 1295.72,684.041 1296.28,684.041 1296.83,684.041 1297.39,684.041 1297.95,684.041 1298.51,684.041 1299.07,684.041 1299.63,684.041 1300.19,684.041 1300.75,684.041 1301.31,684.041 1301.87,684.041 1302.43,684.041 1302.99,684.041 1303.55,684.041 1304.1,684.041 1304.66,684.041 1305.22,684.041 1305.78,684.041 1306.34,684.041 1306.9,684.041 1307.46,684.041 1308.02,684.041 1308.58,684.041 1309.14,684.041 1309.7,684.041 1310.26,684.041 1310.82,684.041 1311.38,684.041 1311.93,684.041 1312.49,684.041 1313.05,684.041 1313.61,684.041 1314.17,684.041 1314.73,684.041 1315.29,684.041 1315.85,684.041 1316.41,684.041 1316.97,684.041 1317.53,684.041 1318.09,684.041 1318.65,684.041 1319.2,684.041 1319.76,684.041 1320.32,684.041 1320.88,684.041 1321.44,684.041 1322,684.041 1322.56,684.041 1323.12,684.041 1323.68,684.041 1324.24,684.041 1324.8,684.041 1325.36,684.041 1325.92,684.041 1326.47,684.041 1327.03,684.041 1327.59,684.041 1328.15,684.041 1328.71,684.041 1329.27,684.041 1329.83,684.041 1330.39,684.041 1330.95,684.041 1331.51,684.041 1332.07,684.041 1332.63,684.041 1333.19,684.041 1333.75,684.041 1334.3,684.041 1334.86,684.041 1335.42,684.041 1335.98,684.041 1336.54,684.041 1337.1,684.041 1337.66,684.041 1338.22,684.041 1338.78,684.041 1339.34,684.041 1339.9,684.041 1340.46,684.041 1341.02,684.041 1341.57,684.041 1342.13,684.041 1342.69,684.041 1343.25,684.041 1343.81,684.041 1344.37,684.041 1344.93,684.041 1345.49,684.041 1346.05,684.041 1346.61,684.041 1347.17,684.041 1347.73,684.041 1348.29,684.041 1348.84,684.041 1349.4,684.041 1349.96,684.041 1350.52,684.041 1351.08,684.041 1351.64,684.041 1352.2,684.041 1352.76,684.041 1353.32,684.041 1353.88,684.041 1354.44,684.041 1355,684.041 1355.56,684.041 1356.12,684.041 1356.67,684.041 1357.23,684.041 1357.79,684.041 1358.35,684.041 1358.91,684.041 1359.47,684.041 1360.03,684.041 1360.59,684.041 1361.15,684.041 1361.71,684.041 1362.27,684.041 1362.83,684.041 1363.39,684.041 1363.94,684.041 1364.5,684.041 1365.06,684.041 1365.62,684.041 1366.18,684.041 1366.74,684.041 1367.3,684.041 1367.86,684.041 1368.42,684.041 1368.98,684.041 1369.54,684.041 1370.1,684.041 1370.66,684.041 1371.21,684.041 1371.77,684.041 1372.33,684.041 1372.89,684.041 1373.45,684.041 1374.01,684.041 1374.57,684.041 1375.13,684.041 1375.69,684.041 1376.25,684.041 1376.81,684.041 1377.37,684.041 1377.93,684.041 1378.49,684.041 1379.04,684.041 1379.6,684.041 1380.16,684.041 1380.72,684.041 1381.28,684.041 1381.84,684.041 1382.4,684.041 1382.96,684.041 1383.52,684.041 1384.08,684.041 1384.64,684.041 1385.2,684.041 1385.76,684.041 1386.31,684.041 1386.87,684.041 1387.43,684.041 1387.99,684.041 1388.55,684.041 1389.11,684.041 1389.67,684.041 1390.23,684.041 1390.79,684.041 1391.35,684.041 1391.91,684.041 1392.47,684.041 1393.03,684.041 1393.58,684.041 1394.14,684.041 1394.7,684.041 1395.26,684.041 1395.82,684.041 1396.38,684.041 1396.94,684.041 1397.5,684.041 1398.06,684.041 1398.62,684.041 1399.18,684.041 1399.74,684.041 1400.3,684.041 1400.86,684.041 1401.41,684.041 1401.97,684.041 1402.53,684.041 1403.09,684.041 1403.65,684.041 1404.21,684.041 1404.77,684.041 1405.33,684.041 1405.89,684.041 1406.45,684.041 1407.01,684.041 1407.57,684.041 1408.13,684.041 1408.68,684.041 1409.24,684.041 1409.8,684.041 1410.36,684.041 1410.92,684.041 1411.48,684.041 1412.04,684.041 1412.6,684.041 1413.16,684.041 1413.72,684.041 1414.28,684.041 1414.84,684.041 1415.4,684.041 1415.95,684.041 1416.51,684.041 1417.07,684.041 1417.63,684.041 1418.19,684.041 1418.75,684.041 1419.31,684.041 1419.87,684.041 1420.43,684.041 1420.99,684.041 1421.55,684.041 1422.11,684.041 1422.67,684.041 1423.23,684.041 1423.78,684.041 1424.34,684.041 1424.9,684.041 1425.46,684.041 1426.02,684.041 1426.58,684.041 1427.14,684.041 1427.7,684.041 1428.26,684.041 1428.82,684.041 1429.38,684.041 1429.94,684.041 1430.5,684.041 1431.05,684.041 1431.61,684.041 1432.17,684.041 1432.73,684.041 1433.29,684.041 1433.85,684.041 1434.41,684.041 1434.97,684.041 1435.53,684.041 1436.09,684.041 1436.65,684.041 1437.21,684.041 1437.77,684.041 1438.33,684.041 1438.88,684.041 1439.44,684.041 1440,684.041 1440.56,684.041 1441.12,684.041 1441.68,684.041 1442.24,684.041 1442.8,684.041 1443.36,684.041 1443.92,684.041 1444.48,684.041 1445.04,684.041 1445.6,684.041 1446.15,684.041 1446.71,684.041 1447.27,684.041 1447.83,684.041 1448.39,684.041 1448.95,684.041 1449.51,684.041 1450.07,684.041 1450.63,684.041 1451.19,684.041 1451.75,684.041 1452.31,684.041 1452.87,684.041 1453.42,684.041 1453.98,684.041 1454.54,684.041 1455.1,684.041 1455.66,684.041 1456.22,684.041 1456.78,684.041 1457.34,684.041 1457.9,684.041 1458.46,684.041 1459.02,684.041 1459.58,684.041 1460.14,684.041 1460.7,684.041 1461.25,684.041 1461.81,684.041 1462.37,684.041 1462.93,684.041 1463.49,684.041 1464.05,684.041 1464.61,684.041 1465.17,684.041 1465.73,684.041 1466.29,684.041 1466.85,684.041 1467.41,684.041 1467.97,684.041 1468.52,684.041 1469.08,684.041 1469.64,684.041 1470.2,684.041 1470.76,684.041 1471.32,684.041 1471.88,684.041 1472.44,684.041 1473,684.041 1473.56,684.041 1474.12,684.041 1474.68,684.041 1475.24,684.041 1475.79,684.041 1476.35,684.041 1476.91,684.041 1477.47,684.041 1478.03,684.041 1478.59,684.041 1479.15,684.041 1479.71,684.041 1480.27,684.041 1480.83,684.041 1481.39,684.041 1481.95,684.041 1482.51,684.041 1483.07,684.041 1483.62,684.041 1484.18,684.041 1484.74,684.041 1485.3,684.041 1485.86,684.041 1486.42,684.041 1486.98,684.041 1487.54,684.041 1488.1,684.041 1488.66,684.041 1489.22,684.041 1489.78,684.041 1490.34,684.041 1490.89,684.041 1491.45,684.041 1492.01,684.041 1492.57,684.041 1493.13,684.041 1493.69,684.041 1494.25,684.041 1494.81,684.041 1495.37,684.041 1495.93,684.041 1496.49,684.041 1497.05,684.041 1497.61,684.041 1498.16,684.041 1498.72,684.041 1499.28,684.041 1499.84,684.041 1500.4,684.041 1500.96,684.041 1501.52,684.041 1502.08,684.041 1502.64,684.041 1503.2,684.041 1503.76,684.041 1504.32,684.041 1504.88,684.041 1505.44,684.041 1505.99,684.041 1506.55,684.041 1507.11,684.041 1507.67,684.041 1508.23,684.041 1508.79,684.041 1509.35,684.041 1509.91,684.041 1510.47,684.041 1511.03,684.041 1511.59,684.041 1512.15,684.041 1512.71,684.041 1513.26,684.041 1513.82,684.041 1514.38,684.041 1514.94,684.041 1515.5,684.041 1516.06,684.041 1516.62,684.041 1517.18,684.041 1517.74,684.041 1518.3,684.041 1518.86,684.041 1519.42,684.041 1519.98,684.041 1520.53,684.041 1521.09,684.041 1521.65,684.041 1522.21,684.041 1522.77,684.041 1523.33,684.041 1523.89,684.041 1524.45,684.041 1525.01,684.041 1525.57,684.041 1526.13,684.041 1526.69,684.041 1527.25,684.041 1527.81,684.041 1528.36,684.041 1528.92,684.041 1529.48,684.041 1530.04,684.041 1530.6,684.041 1531.16,684.041 1531.72,684.041 1532.28,684.041 1532.84,684.041 1533.4,684.041 1533.96,684.041 1534.52,684.041 1535.08,684.041 1535.63,684.041 1536.19,684.041 1536.75,684.041 1537.31,684.041 1537.87,684.041 1538.43,684.041 1538.99,684.041 1539.55,684.041 1540.11,684.041 1540.67,684.041 1541.23,684.041 1541.79,684.041 1542.35,684.041 1542.9,684.041 1543.46,684.041 1544.02,684.041 1544.58,684.041 1545.14,684.041 1545.7,684.041 1546.26,684.041 1546.82,684.041 1547.38,684.041 1547.94,684.041 1548.5,684.041 1549.06,684.041 1549.62,684.041 1550.18,684.041 1550.73,684.041 1551.29,684.041 1551.85,684.041 1552.41,684.041 1552.97,684.041 1553.53,684.041 1554.09,684.041 1554.65,684.041 1555.21,684.041 1555.77,684.041 1556.33,684.041 1556.89,684.041 1557.45,684.041 1558,684.041 1558.56,684.041 1559.12,684.041 1559.68,684.041 1560.24,684.041 1560.8,684.041 1561.36,684.041 1561.92,684.041 1562.48,684.041 1563.04,684.041 1563.6,684.041 1564.16,684.041 1564.72,684.041 1565.28,684.041 1565.83,684.041 1566.39,684.041 1566.95,684.041 1567.51,684.041 1568.07,684.041 1568.63,684.041 1569.19,684.041 1569.75,684.041 1570.31,684.041 1570.87,684.041 1571.43,684.041 1571.99,684.041 1572.55,684.041 1573.1,684.041 1573.66,684.041 1574.22,684.041 1574.78,684.041 1575.34,684.041 1575.9,684.041 1576.46,684.041 1577.02,684.041 1577.58,684.041 1578.14,684.041 1578.7,684.041 1579.26,684.041 1579.82,684.041 1580.37,684.041 1580.93,684.041 1581.49,684.041 1582.05,684.041 1582.61,684.041 1583.17,684.041 1583.73,684.041 1584.29,684.041 1584.85,684.041 1585.41,684.041 1585.97,684.041 1586.53,684.041 1587.09,684.041 1587.65,684.041 1588.2,684.041 1588.76,684.041 1589.32,684.041 1589.88,684.041 1590.44,684.041 1591,684.041 1591.56,684.041 1592.12,684.041 1592.68,684.041 1593.24,684.041 1593.8,684.041 1594.36,684.041 1594.92,684.041 1595.47,684.041 1596.03,684.041 1596.59,684.041 1597.15,684.041 1597.71,684.041 1598.27,684.041 1598.83,684.041 1599.39,684.041 1599.95,684.041 1600.51,684.041 1601.07,684.041 1601.63,684.041 1602.19,684.041 1602.74,684.041 1603.3,684.041 1603.86,684.041 1604.42,684.041 1604.98,684.041 1605.54,684.041 1606.1,684.041 1606.66,684.041 1607.22,684.041 1607.78,684.041 1608.34,684.041 1608.9,684.041 1609.46,684.041 1610.02,684.041 1610.57,684.041 1611.13,684.041 1611.69,684.041 1612.25,684.041 1612.81,684.041 1613.37,684.041 1613.93,684.041 1614.49,684.041 1615.05,684.041 1615.61,684.041 1616.17,684.041 1616.73,684.041 1617.29,684.041 1617.84,684.041 1618.4,684.041 1618.96,684.041 1619.52,684.041 1620.08,684.041 1620.64,684.041 1621.2,684.041 1621.76,684.041 1622.32,684.041 1622.88,684.041 1623.44,684.041 1624,684.041 1624.56,684.041 1625.11,684.041 1625.67,684.041 1626.23,684.041 1626.79,684.041 1627.35,684.041 1627.91,684.041 1628.47,684.041 1629.03,684.041 1629.59,684.041 1630.15,684.041 1630.71,684.041 1631.27,684.041 1631.83,684.041 1632.39,684.041 1632.94,684.041 1633.5,684.041 1634.06,684.041 1634.62,684.041 1635.18,684.041 1635.74,684.041 1636.3,684.041 1636.86,684.041 1637.42,684.041 1637.98,684.041 1638.54,684.041 1639.1,684.041 1639.66,684.041 1640.21,684.041 1640.77,684.041 1641.33,684.041 1641.89,684.041 1642.45,684.041 1643.01,684.041 1643.57,684.041 1644.13,684.041 1644.69,684.041 1645.25,684.041 1645.81,684.041 1646.37,684.041 1646.93,684.041 1647.48,684.041 1648.04,684.041 1648.6,684.041 1649.16,684.041 1649.72,684.041 1650.28,684.041 1650.84,684.041 1651.4,684.041 1651.96,684.041 1652.52,684.041 1653.08,684.041 1653.64,684.041 1654.2,684.041 1654.76,684.041 1655.31,684.041 1655.87,684.041 1656.43,684.041 1656.99,684.041 1657.55,684.041 1658.11,684.041 1658.67,684.041 1659.23,684.041 1659.79,684.041 1660.35,684.041 1660.91,684.041 1661.47,684.041 1662.03,684.041 1662.58,684.041 1663.14,684.041 1663.7,684.041 1664.26,684.041 1664.82,684.041 1665.38,684.041 1665.94,684.041 1666.5,684.041 1667.06,684.041 1667.62,684.041 1668.18,684.041 1668.74,684.041 1669.3,684.041 1669.85,684.041 1670.41,684.041 1670.97,684.041 1671.53,684.041 1672.09,684.041 1672.65,684.041 1673.21,684.041 1673.77,684.041 1674.33,684.041 1674.89,684.041 1675.45,684.041 1676.01,684.041 1676.57,684.041 1677.13,684.041 1677.68,684.041 1678.24,684.041 1678.8,684.041 1679.36,684.041 1679.92,684.041 1680.48,684.041 1681.04,684.041 1681.6,684.041 1682.16,684.041 1682.72,684.041 1683.28,684.041 1683.84,684.041 1684.4,684.041 1684.95,684.041 1685.51,684.041 1686.07,684.041 1686.63,684.041 1687.19,684.041 1687.75,684.041 1688.31,684.041 1688.87,684.041 1689.43,684.041 1689.99,684.041 1690.55,684.041 1691.11,684.041 1691.67,684.041 1692.23,684.041 1692.78,684.041 1693.34,684.041 1693.9,684.041 1694.46,684.041 1695.02,684.041 1695.58,684.041 1696.14,684.041 1696.7,684.041 1697.26,684.041 1697.82,684.041 1698.38,684.041 1698.94,684.041 1699.5,684.041 1700.05,684.041 1700.61,684.041 1701.17,684.041 1701.73,684.041 1702.29,684.041 1702.85,684.041 1703.41,684.041 1703.97,684.041 1704.53,684.041 1705.09,684.041 1705.65,684.041 1706.21,684.041 1706.77,684.041 1707.32,684.041 1707.88,684.041 1708.44,684.041 1709,684.041 1709.56,684.041 1710.12,684.041 1710.68,684.041 1711.24,684.041 1711.8,684.041 1712.36,684.041 1712.92,684.041 1713.48,684.041 1714.04,684.041 1714.6,684.041 1715.15,684.041 1715.71,684.041 1716.27,684.041 1716.83,684.041 1717.39,684.041 1717.95,684.041 1718.51,684.041 1719.07,684.041 1719.63,684.041 1720.19,684.041 1720.75,684.041 1721.31,684.041 1721.87,684.041 1722.42,684.041 1722.98,684.041 1723.54,684.041 1724.1,684.041 1724.66,684.041 1725.22,684.041 1725.78,684.041 1726.34,684.041 1726.9,684.041 1727.46,684.041 1728.02,684.041 1728.58,684.041 1729.14,684.041 1729.69,684.041 1730.25,684.041 1730.81,684.041 1731.37,684.041 1731.93,684.041 1732.49,684.041 1733.05,684.041 1733.61,684.041 1734.17,684.041 1734.73,684.041 1735.29,684.041 1735.85,684.041 1736.41,684.041 1736.97,684.041 1737.52,684.041 1738.08,684.041 1738.64,684.041 1739.2,684.041 1739.76,684.041 1740.32,684.041 1740.88,684.041 1741.44,684.041 1742,684.041 1742.56,684.041 1743.12,684.041 1743.68,684.041 1744.24,684.041 1744.79,684.041 1745.35,684.041 1745.91,684.041 1746.47,684.041 1747.03,684.041 1747.59,684.041 1748.15,684.041 1748.71,684.041 1749.27,684.041 1749.83,684.041 1750.39,684.041 1750.95,684.041 1751.51,684.041 1752.06,684.041 1752.62,684.041 1753.18,684.041 1753.74,684.041 1754.3,684.041 1754.86,684.041 1755.42,684.041 1755.98,684.041 1756.54,684.041 1757.1,684.041 1757.66,684.041 1758.22,684.041 1758.78,684.041 1759.34,684.041 1759.89,684.041 1760.45,684.041 1761.01,684.041 1761.57,684.041 1762.13,684.041 1762.69,684.041 1763.25,684.041 1763.81,684.041 1764.37,684.041 1764.93,684.041 1765.49,684.041 1766.05,684.041 1766.61,684.041 1767.16,684.041 1767.72,684.041 1768.28,684.041 1768.84,684.041 1769.4,684.041 1769.96,684.041 1770.52,684.041 1771.08,684.041 1771.64,684.041 1772.2,684.041 1772.76,684.041 1773.32,684.041 1773.88,684.041 1774.43,684.041 1774.99,684.041 1775.55,684.041 1776.11,684.041 1776.67,684.041 1777.23,684.041 1777.79,684.041 1778.35,684.041 1778.91,684.041 1779.47,684.041 1780.03,684.041 1780.59,684.041 1781.15,684.041 1781.71,684.041 1782.26,684.041 1782.82,684.041 1783.38,684.041 1783.94,684.041 1784.5,684.041 1785.06,684.041 1785.62,684.041 1786.18,684.041 1786.74,684.041 1787.3,684.041 1787.86,684.041 1788.42,684.041 1788.98,684.041 1789.53,684.041 1790.09,684.041 1790.65,684.041 1791.21,684.041 1791.77,684.041 1792.33,684.041 1792.89,684.041 1793.45,684.041 1794.01,684.041 1794.57,684.041 1795.13,684.041 1795.69,684.041 1796.25,684.041 1796.8,684.041 1797.36,684.041 1797.92,684.041 1798.48,684.041 1799.04,684.041 1799.6,684.041 1800.16,684.041 1800.72,684.041 1801.28,684.041 1801.84,684.041 1802.4,684.041 1802.96,684.041 1803.52,684.041 1804.08,684.041 1804.63,684.041 1805.19,684.041 1805.75,684.041 1806.31,684.041 1806.87,684.041 1807.43,684.041 1807.99,684.041 1808.55,684.041 1809.11,684.041 1809.67,684.041 1810.23,684.041 1810.79,684.041 1811.35,684.041 1811.9,684.041 1812.46,684.041 1813.02,684.041 1813.58,684.041 1814.14,684.041 1814.7,684.041 1815.26,684.041 1815.82,684.041 1816.38,684.041 1816.94,684.041 1817.5,684.041 1818.06,684.041 1818.62,684.041 1819.18,684.041 1819.73,684.041 1820.29,684.041 1820.85,684.041 1821.41,684.041 1821.97,684.041 1822.53,684.041 1823.09,684.041 1823.65,684.041 1824.21,684.041 1824.77,684.041 1825.33,684.041 1825.89,684.041 1826.45,684.041 1827,684.041 1827.56,684.041 1828.12,684.041 1828.68,684.041 1829.24,684.041 1829.8,684.041 1830.36,684.041 1830.92,684.041 1831.48,684.041 1832.04,684.041 1832.6,684.041 1833.16,684.041 1833.72,684.041 1834.27,684.041 1834.83,684.041 1835.39,684.041 1835.95,684.041 1836.51,684.041 1837.07,684.041 1837.63,684.041 1838.19,684.041 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.035292605408447 ± 0.021065184549883938\nProjected Energy: -4.017383276943612 ± (0.0063624527462042835, 0.0061169059199857045)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.442991</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4307e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0769e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.886e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.293e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.705e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.115e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.3631242916133672\n -0.7590191922770888\n  0.13584182219621255\n  0.15789998694608798\n  0.8767114411781307\n  1.5305929970973358\n  1.5835732611867357\n  3.0728703303258653\n  3.1256726539518427\n  4.862107221562169\n  6.260694850380595\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nspectral_strategy = GramSchmidt(): The SpectralStrategy used for simulations of spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
