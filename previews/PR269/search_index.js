var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21003735302548815 ± 0.0016179480438930957\n   G2(1) = 0.9194602805812135 ± 0.0009555255336631971\n   G2(2) = 0.9814806071588089 ± 0.0005439985075913052\n   G2(3) = 0.9880808714944682 ± 0.000958312234367533\n   G2(4) = 0.9814806071588089 ± 0.0005439985075913052\n   G2(5) = 0.9194602805812135 ± 0.0009555255336631971\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9602200734478226 ± 0.13041702714792172\n   Replica 2: -3.9998307528323545 ± 0.12541195428455326\n   Replica 3: -3.9057394587609786 ± 0.13172635504804991\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip980\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip980)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip981\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip980)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip982\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.31 2211.02,1003.31 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.797 2211.02,745.797 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.281 2211.02,488.281 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.765 2211.02,230.765 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.31 423.181,1003.31 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.797 423.181,745.797 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.281 423.181,488.281 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.765 423.181,230.765 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M290.043 1016.66 L306.363 1016.66 L306.363 1020.59 L284.418 1020.59 L284.418 1016.66 Q287.08 1013.9 291.664 1009.27 Q296.27 1004.62 297.451 1003.28 Q299.696 1000.76 300.576 999.019 Q301.478 997.26 301.478 995.57 Q301.478 992.815 299.534 991.079 Q297.613 989.343 294.511 989.343 Q292.312 989.343 289.858 990.107 Q287.427 990.871 284.65 992.422 L284.65 987.7 Q287.474 986.565 289.927 985.987 Q292.381 985.408 294.418 985.408 Q299.789 985.408 302.983 988.093 Q306.177 990.778 306.177 995.269 Q306.177 997.399 305.367 999.32 Q304.58 1001.22 302.474 1003.81 Q301.895 1004.48 298.793 1007.7 Q295.691 1010.89 290.043 1016.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M316.224 986.033 L334.58 986.033 L334.58 989.968 L320.506 989.968 L320.506 998.44 Q321.524 998.093 322.543 997.931 Q323.562 997.746 324.58 997.746 Q330.367 997.746 333.747 1000.92 Q337.126 1004.09 337.126 1009.51 Q337.126 1015.08 333.654 1018.19 Q330.182 1021.26 323.862 1021.26 Q321.687 1021.26 319.418 1020.89 Q317.173 1020.52 314.765 1019.78 L314.765 1015.08 Q316.849 1016.22 319.071 1016.77 Q321.293 1017.33 323.77 1017.33 Q327.774 1017.33 330.112 1015.22 Q332.45 1013.12 332.45 1009.51 Q332.45 1005.89 330.112 1003.79 Q327.774 1001.68 323.77 1001.68 Q321.895 1001.68 320.02 1002.1 Q318.168 1002.51 316.224 1003.39 L316.224 986.033 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M356.339 989.112 Q352.728 989.112 350.899 992.677 Q349.094 996.218 349.094 1003.35 Q349.094 1010.45 350.899 1014.02 Q352.728 1017.56 356.339 1017.56 Q359.973 1017.56 361.779 1014.02 Q363.608 1010.45 363.608 1003.35 Q363.608 996.218 361.779 992.677 Q359.973 989.112 356.339 989.112 M356.339 985.408 Q362.149 985.408 365.205 990.015 Q368.284 994.598 368.284 1003.35 Q368.284 1012.07 365.205 1016.68 Q362.149 1021.26 356.339 1021.26 Q350.529 1021.26 347.45 1016.68 Q344.395 1012.07 344.395 1003.35 Q344.395 994.598 347.45 990.015 Q350.529 985.408 356.339 985.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M286.062 728.517 L304.418 728.517 L304.418 732.452 L290.344 732.452 L290.344 740.924 Q291.363 740.577 292.381 740.415 Q293.4 740.23 294.418 740.23 Q300.205 740.23 303.585 743.401 Q306.964 746.572 306.964 751.989 Q306.964 757.568 303.492 760.669 Q300.02 763.748 293.701 763.748 Q291.525 763.748 289.256 763.378 Q287.011 763.007 284.603 762.267 L284.603 757.568 Q286.687 758.702 288.909 759.257 Q291.131 759.813 293.608 759.813 Q297.613 759.813 299.951 757.707 Q302.288 755.6 302.288 751.989 Q302.288 748.378 299.951 746.271 Q297.613 744.165 293.608 744.165 Q291.733 744.165 289.858 744.582 Q288.006 744.998 286.062 745.878 L286.062 728.517 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M326.177 731.596 Q322.566 731.596 320.737 735.16 Q318.932 738.702 318.932 745.832 Q318.932 752.938 320.737 756.503 Q322.566 760.044 326.177 760.044 Q329.811 760.044 331.617 756.503 Q333.446 752.938 333.446 745.832 Q333.446 738.702 331.617 735.16 Q329.811 731.596 326.177 731.596 M326.177 727.892 Q331.987 727.892 335.043 732.498 Q338.122 737.082 338.122 745.832 Q338.122 754.558 335.043 759.165 Q331.987 763.748 326.177 763.748 Q320.367 763.748 317.288 759.165 Q314.233 754.558 314.233 745.832 Q314.233 737.082 317.288 732.498 Q320.367 727.892 326.177 727.892 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M356.339 731.596 Q352.728 731.596 350.899 735.16 Q349.094 738.702 349.094 745.832 Q349.094 752.938 350.899 756.503 Q352.728 760.044 356.339 760.044 Q359.973 760.044 361.779 756.503 Q363.608 752.938 363.608 745.832 Q363.608 738.702 361.779 735.16 Q359.973 731.596 356.339 731.596 M356.339 727.892 Q362.149 727.892 365.205 732.498 Q368.284 737.082 368.284 745.832 Q368.284 754.558 365.205 759.165 Q362.149 763.748 356.339 763.748 Q350.529 763.748 347.45 759.165 Q344.395 754.558 344.395 745.832 Q344.395 737.082 347.45 732.498 Q350.529 727.892 356.339 727.892 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M284.835 471.001 L307.057 471.001 L307.057 472.991 L294.511 505.561 L289.627 505.561 L301.432 474.936 L284.835 474.936 L284.835 471.001 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M316.224 471.001 L334.58 471.001 L334.58 474.936 L320.506 474.936 L320.506 483.408 Q321.524 483.061 322.543 482.899 Q323.562 482.714 324.58 482.714 Q330.367 482.714 333.747 485.885 Q337.126 489.056 337.126 494.473 Q337.126 500.051 333.654 503.153 Q330.182 506.232 323.862 506.232 Q321.687 506.232 319.418 505.862 Q317.173 505.491 314.765 504.751 L314.765 500.051 Q316.849 501.186 319.071 501.741 Q321.293 502.297 323.77 502.297 Q327.774 502.297 330.112 500.19 Q332.45 498.084 332.45 494.473 Q332.45 490.862 330.112 488.755 Q327.774 486.649 323.77 486.649 Q321.895 486.649 320.02 487.065 Q318.168 487.482 316.224 488.362 L316.224 471.001 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M356.339 474.079 Q352.728 474.079 350.899 477.644 Q349.094 481.186 349.094 488.315 Q349.094 495.422 350.899 498.987 Q352.728 502.528 356.339 502.528 Q359.973 502.528 361.779 498.987 Q363.608 495.422 363.608 488.315 Q363.608 481.186 361.779 477.644 Q359.973 474.079 356.339 474.079 M356.339 470.376 Q362.149 470.376 365.205 474.982 Q368.284 479.565 368.284 488.315 Q368.284 497.042 365.205 501.649 Q362.149 506.232 356.339 506.232 Q350.529 506.232 347.45 501.649 Q344.395 497.042 344.395 488.315 Q344.395 479.565 347.45 474.982 Q350.529 470.376 356.339 470.376 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M256.664 244.109 L264.303 244.109 L264.303 217.744 L255.992 219.41 L255.992 215.151 L264.256 213.485 L268.932 213.485 L268.932 244.109 L276.571 244.109 L276.571 248.045 L256.664 248.045 L256.664 244.109 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M296.015 216.563 Q292.404 216.563 290.576 220.128 Q288.77 223.67 288.77 230.799 Q288.77 237.906 290.576 241.471 Q292.404 245.012 296.015 245.012 Q299.65 245.012 301.455 241.471 Q303.284 237.906 303.284 230.799 Q303.284 223.67 301.455 220.128 Q299.65 216.563 296.015 216.563 M296.015 212.86 Q301.826 212.86 304.881 217.466 Q307.96 222.049 307.96 230.799 Q307.96 239.526 304.881 244.133 Q301.826 248.716 296.015 248.716 Q290.205 248.716 287.127 244.133 Q284.071 239.526 284.071 230.799 Q284.071 222.049 287.127 217.466 Q290.205 212.86 296.015 212.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M326.177 216.563 Q322.566 216.563 320.737 220.128 Q318.932 223.67 318.932 230.799 Q318.932 237.906 320.737 241.471 Q322.566 245.012 326.177 245.012 Q329.811 245.012 331.617 241.471 Q333.446 237.906 333.446 230.799 Q333.446 223.67 331.617 220.128 Q329.811 216.563 326.177 216.563 M326.177 212.86 Q331.987 212.86 335.043 217.466 Q338.122 222.049 338.122 230.799 Q338.122 239.526 335.043 244.133 Q331.987 248.716 326.177 248.716 Q320.367 248.716 317.288 244.133 Q314.233 239.526 314.233 230.799 Q314.233 222.049 317.288 217.466 Q320.367 212.86 326.177 212.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M356.339 216.563 Q352.728 216.563 350.899 220.128 Q349.094 223.67 349.094 230.799 Q349.094 237.906 350.899 241.471 Q352.728 245.012 356.339 245.012 Q359.973 245.012 361.779 241.471 Q363.608 237.906 363.608 230.799 Q363.608 223.67 361.779 220.128 Q359.973 216.563 356.339 216.563 M356.339 212.86 Q362.149 212.86 365.205 217.466 Q368.284 222.049 368.284 230.799 Q368.284 239.526 365.205 244.133 Q362.149 248.716 356.339 248.716 Q350.529 248.716 347.45 244.133 Q344.395 239.526 344.395 230.799 Q344.395 222.049 347.45 217.466 Q350.529 212.86 356.339 212.86 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip982)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.765 4017.76,230.765 \"/>\n<polyline clip-path=\"url(#clip982)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.75 461.669,1245.99 462.238,1245.15 462.806,1244.23 463.375,1243.22 463.943,1242.12 464.511,1240.92 465.08,1239.61 465.648,1238.2 466.216,1236.67 466.785,1233.99 467.353,1232.19 467.921,1230.24 468.49,1228.17 469.058,1225.95 469.626,1223.57 470.195,1221.02 470.763,1217.28 471.331,1212.29 471.9,1207.04 472.468,1203.59 473.036,1198.91 473.605,1195.1 474.173,1191.07 474.741,1186.78 475.31,1182.3 475.878,1177.64 476.446,1170.67 477.015,1165.42 477.583,1159.94 478.152,1154.23 478.72,1148.27 479.288,1141.05 479.857,1131.47 480.425,1124.59 480.993,1114.47 481.562,1106.23 482.13,1098.91 482.698,1089.34 483.267,1081.38 483.835,1073.32 484.403,1062.97 484.972,1053.6 485.54,1045.14 486.108,1036.49 486.677,1026.76 487.245,1017.81 487.813,1008.8 488.382,999.668 488.95,988.211 489.518,978.791 490.087,969.374 490.655,958.698 491.224,949.031 491.792,939.304 492.36,927.403 492.929,916.496 493.497,904.585 494.065,892.697 494.634,882.819 495.202,872.926 495.77,861.05 496.339,850.153 496.907,838.303 497.475,826.537 498.044,815.889 498.612,806.339 499.18,795.815 499.749,785.271 500.317,773.696 500.885,763.37 501.454,750.929 502.022,741.748 502.59,729.524 503.159,718.484 503.727,709.48 504.295,699.579 504.864,690.941 505.432,681.23 506.001,672.605 506.569,660.932 507.137,651.638 507.706,643.321 508.274,634.074 508.842,623.977 509.411,611.083 509.979,602.564 510.547,592.999 511.116,583.707 511.684,576.573 512.252,567.507 512.821,559.78 513.389,550.082 513.957,543.617 514.526,536.198 515.094,529.856 515.662,521.763 516.231,514.622 516.799,505.644 517.367,497.914 517.936,491.461 518.504,484.017 519.072,476.841 519.641,472.039 520.209,467.138 520.778,461.17 521.346,454.414 521.914,449.935 522.483,446.562 523.051,442.168 523.619,437.812 524.188,432.516 524.756,428.293 525.324,421.865 525.893,413.814 526.461,410.301 527.029,405.888 527.598,399.473 528.166,394.411 528.734,390.444 529.303,385.504 529.871,381.882 530.439,376.168 531.008,372.819 531.576,370.412 532.144,368.243 532.713,367.106 533.281,362.96 533.85,359.953 534.418,358.813 534.986,354.913 535.555,350.743 536.123,348.862 536.691,346.921 537.26,343.131 537.828,342.36 538.396,338.443 538.965,335.664 539.533,333.047 540.101,329.595 540.67,326.214 541.238,322.8 541.806,321.549 542.375,319.532 542.943,319.641 543.511,318.628 544.08,317.574 544.648,315.398 545.216,314.342 545.785,311.305 546.353,308.21 546.921,304.968 547.49,303.32 548.058,301.582 548.627,299.809 549.195,298.32 549.763,295.48 550.332,292.883 550.9,291.64 551.468,290.162 552.037,287.745 552.605,288.325 553.173,288.147 553.742,285.842 554.31,287.787 554.878,285.331 555.447,283.075 556.015,281.854 556.583,282.791 557.152,284.867 557.72,283.27 558.288,284.853 558.857,283.462 559.425,284.042 559.993,280.363 560.562,277.862 561.13,279.504 561.698,277.127 562.267,276.689 562.835,278.18 563.404,277.571 563.972,274.955 564.54,275.583 565.109,275.223 565.677,275.667 566.245,273.802 566.814,273.323 567.382,269.779 567.95,270.495 568.519,270.272 569.087,268.804 569.655,265.669 570.224,265.492 570.792,264.202 571.36,261.784 571.929,261.809 572.497,262.694 573.065,263.539 573.634,263.285 574.202,262.908 574.77,262.695 575.339,263.451 575.907,263.136 576.476,261.783 577.044,261.762 577.612,261.731 578.181,260.317 578.749,259.215 579.317,258.914 579.886,259.681 580.454,258.355 581.022,256.124 581.591,254.175 582.159,253.077 582.727,252.171 583.296,250.267 583.864,249.818 584.432,251.128 585.001,251.138 585.569,252.22 586.137,253.225 586.706,254.011 587.274,251.926 587.842,251.676 588.411,250.782 588.979,250.831 589.547,249.629 590.116,249.69 590.684,245.596 591.253,246.979 591.821,245.134 592.389,244.606 592.958,246.102 593.526,246.324 594.094,247.654 594.663,247.87 595.231,248.206 595.799,248.176 596.368,248.322 596.936,248.305 597.504,249.322 598.073,248.231 598.641,247.55 599.209,247.842 599.778,247.741 600.346,246.782 600.914,246.023 601.483,248.172 602.051,247.197 602.619,247.281 603.188,246.301 603.756,244.312 604.325,243.376 604.893,244.487 605.461,243.551 606.03,242.645 606.598,241.531 607.166,241.796 607.735,240.089 608.303,238.353 608.871,239.811 609.44,241.269 610.008,240.607 610.576,238.016 611.145,240.392 611.713,239.821 612.281,240.181 612.85,242.543 613.418,242.823 613.986,241.79 614.555,241.842 615.123,242.235 615.691,243.555 616.26,243.451 616.828,243.69 617.396,244.685 617.965,243.652 618.533,242.618 619.102,242.699 619.67,243.737 620.238,242.855 620.807,242.849 621.375,241.735 621.943,239.62 622.512,239.902 623.08,238.978 623.648,241.163 624.217,241.382 624.785,241.429 625.353,238.666 625.922,237.877 626.49,239.307 627.058,239.522 627.627,242.555 628.195,241.478 628.763,241.385 629.332,241.449 629.9,240.487 630.468,241.794 631.037,239.876 631.605,236.963 632.173,237.131 632.742,236.372 633.31,235.628 633.879,236.976 634.447,235.412 635.015,235.707 635.584,234.159 636.152,234.762 636.72,232.468 637.289,233.043 637.857,233.668 638.425,233.268 638.994,233.643 639.562,233.377 640.13,230.773 640.699,232.824 641.267,233.529 641.835,233.004 642.404,234.713 642.972,233.322 643.54,231.942 644.109,231.612 644.677,235.651 645.245,238.089 645.814,240.405 646.382,240.279 646.951,239.25 647.519,239.404 648.087,239.603 648.656,240.504 649.224,241.631 649.792,242.542 650.361,242.055 650.929,239.801 651.497,238.986 652.066,239.06 652.634,238.164 653.202,239.296 653.771,238.442 654.339,239.516 654.907,240.37 655.476,237.948 656.044,238.083 656.612,237.092 657.181,238.218 657.749,239.187 658.317,238.045 658.886,236.121 659.454,237.04 660.022,238.418 660.591,236.42 661.159,233.576 661.728,234.989 662.296,233.273 662.864,230.549 663.433,230.984 664.001,232.45 664.569,234.176 665.138,233.43 665.706,235.065 666.274,236.245 666.843,236.388 667.411,237.577 667.979,235.875 668.548,236.423 669.116,235.6 669.684,233.763 670.253,234.16 670.821,236.703 671.389,236.736 671.958,236.067 672.526,238.463 673.094,239.425 673.663,238.119 674.231,238.245 674.799,238.028 675.368,239.018 675.936,236.884 676.505,236.873 677.073,237.039 677.641,235.175 678.21,235.608 678.778,232.655 679.346,233.184 679.915,234.45 680.483,234.579 681.051,235.74 681.62,237.165 682.188,236.999 682.756,237.121 683.325,238.131 683.893,236.023 684.461,236.943 685.03,237.002 685.598,236.996 686.166,234.929 686.735,234.987 687.303,235.049 687.871,235.413 688.44,234.923 689.008,235.09 689.577,236.316 690.145,237.222 690.713,235.247 691.282,232.561 691.85,232.043 692.418,232.427 692.987,232.809 693.555,231.789 694.123,231.228 694.692,232.631 695.26,233.843 695.828,233.818 696.397,232.021 696.965,234.212 697.533,234.407 698.102,233.576 698.67,234.85 699.238,238.192 699.807,239.45 700.375,238.431 700.943,237.21 701.512,237.137 702.08,237.267 702.648,238.34 703.217,239.221 703.785,238.1 704.354,237.219 704.922,237.041 705.49,235.827 706.059,237.66 706.627,235.742 707.195,234.665 707.764,233.726 708.332,232.745 708.9,233.028 709.469,234.225 710.037,234.495 710.605,235.625 711.174,235.759 711.742,236.892 712.31,236.737 712.879,236.683 713.447,236.662 714.015,237.581 714.584,236.327 715.152,237.17 715.72,237.153 716.289,236.781 716.857,238.736 717.425,236.342 717.994,235.191 718.562,235.067 719.131,236.121 719.699,233.789 720.267,235.014 720.836,234.967 721.404,234.966 721.972,234.957 722.541,234.845 723.109,235.056 723.677,235.108 724.246,234.904 724.814,234.843 725.382,230.818 725.951,230.934 726.519,230.729 727.087,230.879 727.656,234.353 728.224,234.58 728.792,234.515 729.361,234.449 729.929,235.376 730.497,236.284 731.066,235.919 731.634,235.695 732.203,233.433 732.771,233.252 733.339,232.121 733.908,232.305 734.476,232.36 735.044,234.581 735.613,235.54 736.181,234.305 736.749,234.365 737.318,235.27 737.886,236.262 738.454,235.93 739.023,234.724 739.591,233.736 740.159,235.982 740.728,235.579 741.296,235.361 741.864,233.25 742.433,233.309 743.001,234.49 743.569,233.474 744.138,233.517 744.706,231.35 745.274,230.384 745.843,230.438 746.411,228.68 746.98,228.975 747.548,230.399 748.116,230.556 748.685,229.617 749.253,229.8 749.821,229.177 750.39,229.58 750.958,230.757 751.526,229.95 752.095,229.232 752.663,228.486 753.231,228.947 753.8,228.463 754.368,228.494 754.936,228.89 755.505,231.354 756.073,229.247 756.641,229.332 757.21,230.631 757.778,230.77 758.346,228.855 758.915,227.981 759.483,229.328 760.052,228.574 760.62,231.055 761.188,226.032 761.757,227.717 762.325,225.171 762.893,224.699 763.462,225.242 764.03,227.965 764.598,229.495 765.167,232.894 765.735,235.16 766.303,236.06 766.872,237.05 767.44,236.659 768.008,236.651 768.577,234.359 769.145,235.431 769.713,235.479 770.282,237.338 770.85,236.034 771.418,234.831 771.987,233.737 772.555,233.739 773.123,232.695 773.692,231.594 774.26,232.789 774.829,231.993 775.397,231.362 775.965,230.62 776.534,230.72 777.102,230.941 777.67,231.062 778.239,230.251 778.807,230.425 779.375,231.471 779.944,231.741 780.512,233.899 781.08,232.805 781.649,233.871 782.217,232.598 782.785,231.464 783.354,232.677 783.922,232.82 784.49,234.786 785.059,236.836 785.627,236.623 786.195,236.337 786.764,237.073 787.332,238.897 787.9,239.46 788.469,238.926 789.037,240.328 789.606,240.75 790.174,240.281 790.742,239.589 791.311,237.157 791.879,234.731 792.447,233.566 793.016,233.443 793.584,232.38 794.152,232.44 794.721,233.382 795.289,233.197 795.857,232.185 796.426,231.158 796.994,231.164 797.562,230.311 798.131,232.482 798.699,232.199 799.267,232.189 799.836,230.186 800.404,230.091 800.972,229.155 801.541,229.329 802.109,229.581 802.678,229.887 803.246,230.019 803.814,232.131 804.383,231.97 804.951,231.949 805.519,230.821 806.088,229.883 806.656,230.854 807.224,230.948 807.793,231.032 808.361,232.41 808.929,232.17 809.498,232.173 810.066,233.186 810.634,233.979 811.203,235.85 811.771,235.215 812.339,234.968 812.908,234.773 813.476,233.656 814.044,234.648 814.613,233.323 815.181,235.199 815.749,234.79 816.318,234.563 816.886,234.255 817.455,233.918 818.023,233.669 818.591,232.385 819.16,231.335 819.728,229.27 820.296,229.475 820.865,229.623 821.433,227.793 822.001,230.142 822.57,230.214 823.138,230.291 823.706,231.435 824.275,230.219 824.843,231.279 825.411,232.108 825.98,232.095 826.548,232.29 827.116,233.047 827.685,231.858 828.253,231.743 828.821,231.763 829.39,233.069 829.958,232.916 830.526,234.961 831.095,233.653 831.663,234.721 832.232,234.406 832.8,234.159 833.368,234.986 833.937,233.801 834.505,232.629 835.073,232.574 835.642,231.508 836.21,230.669 836.778,228.743 837.347,228.077 837.915,228.384 838.483,228.583 839.052,229.879 839.62,229.99 840.188,231.1 840.757,232.097 841.325,230.915 841.893,230.896 842.462,229.948 843.03,229.969 843.598,228.994 844.167,229.001 844.735,229.066 845.304,228.252 845.872,228.649 846.44,229.843 847.009,230.879 847.577,233.07 848.145,231.146 848.714,231.124 849.282,231.164 849.85,230.184 850.419,231.409 850.987,231.405 851.555,232.314 852.124,229.189 852.692,229.403 853.26,226.449 853.829,226.675 854.397,226.021 854.965,226.462 855.534,228.792 856.102,228.027 856.67,229.348 857.239,228.529 857.807,229.874 858.375,229.956 858.944,228.964 859.512,229.178 860.081,230.398 860.649,229.518 861.217,231.955 861.786,231.157 862.354,233.409 862.922,230.277 863.491,227.187 864.059,228.484 864.627,228.684 865.196,228.847 865.764,228.297 866.332,228.667 866.901,230.858 867.469,231.865 868.037,232.916 868.606,235.021 869.174,235.912 869.742,236.744 870.311,236.218 870.879,235.087 871.447,238.039 872.016,236.637 872.584,236.052 873.152,234.75 873.721,235.322 874.289,233.918 874.858,231.703 875.426,231.425 875.994,231.195 876.563,230.2 877.131,227.162 877.699,227.668 878.268,228.893 878.836,227.037 879.404,228.417 879.973,228.761 880.541,229.932 881.109,231.01 881.678,228.965 882.246,228.166 882.814,227.623 883.383,226.966 883.951,225.109 884.519,225.535 885.088,226.003 885.656,226.17 886.224,225.522 886.793,227.989 887.361,228.271 887.93,226.596 888.498,228.162 889.066,228.407 889.635,228.678 890.203,227.772 890.771,230.26 891.34,231.717 891.908,231.611 892.476,232.686 893.045,233.754 893.613,236.106 894.181,234.767 894.75,236.526 895.318,237.157 895.886,235.81 896.455,234.724 897.023,234.588 897.591,235.443 898.16,236.111 898.728,234.759 899.296,231.605 899.865,231.676 900.433,230.594 901.001,231.513 901.57,226.522 902.138,228.072 902.707,228.481 903.275,229.932 903.843,231.026 904.412,232.095 904.98,233.162 905.548,232.909 906.117,232.786 906.685,232.786 907.253,234.691 907.822,234.542 908.39,235.432 908.958,236.107 909.527,237.92 910.095,236.377 910.663,236.109 911.232,236.767 911.8,233.42 912.368,233.329 912.937,231.915 913.505,234.023 914.073,233.891 914.642,233.758 915.21,232.482 915.779,233.587 916.347,234.4 916.915,232.213 917.484,232.085 918.052,232.157 918.62,232.958 919.189,233.966 919.757,232.933 920.325,232.952 920.894,232.683 921.462,233.538 922.03,235.389 922.599,236.996 923.167,237.65 923.735,234.979 924.304,233.602 924.872,232.243 925.44,232.003 926.009,230.832 926.577,230.906 927.145,230.696 927.714,233.857 928.282,233.653 928.85,234.338 929.419,232.986 929.987,232.675 930.556,231.313 931.124,231.371 931.692,232.217 932.261,233.185 932.829,231.856 933.397,232.904 933.966,231.751 934.534,231.382 935.102,229.225 935.671,228.083 936.239,230.463 936.807,229.262 937.376,230.357 937.944,229.531 938.512,229.339 939.081,226.184 939.649,227.669 940.217,227.063 940.786,227.517 941.354,225.66 941.922,226.077 942.491,225.324 943.059,227.876 943.627,227.287 944.196,229.699 944.764,232.007 945.333,229.712 945.901,228.766 946.469,228.745 947.038,227.852 947.606,229.134 948.174,232.408 948.743,234.424 949.311,232.026 949.879,233.089 950.448,232.949 951.016,233.919 951.584,231.693 952.153,231.678 952.721,230.591 953.289,230.654 953.858,230.754 954.426,231.617 954.994,230.519 955.563,230.541 956.131,232.736 956.699,232.502 957.268,230.173 957.836,230.453 958.405,229.602 958.973,227.832 959.541,229.168 960.11,229.545 960.678,229.591 961.246,230.707 961.815,231.733 962.383,230.688 962.951,231.801 963.52,230.695 964.088,232.581 964.656,232.364 965.225,231.157 965.793,232.281 966.361,235.175 966.93,235.967 967.498,233.659 968.066,233.483 968.635,235.447 969.203,237.14 969.771,234.688 970.34,234.467 970.908,233.175 971.476,234.163 972.045,231.861 972.613,230.604 973.182,232.711 973.75,233.759 974.318,233.565 974.887,230.224 975.455,230.517 976.023,228.562 976.592,230.99 977.16,230.784 977.728,230.808 978.297,229.375 978.865,227.417 979.433,227.755 980.002,230.054 980.57,230.226 981.138,232.345 981.707,230.113 982.275,232.079 982.843,232.935 983.412,231.626 983.98,231.586 984.548,231.817 985.117,233.753 985.685,233.531 986.253,234.386 986.822,235.026 987.39,233.46 987.959,232.313 988.527,232.198 989.095,232.157 989.664,231.863 990.232,231.748 990.8,229.652 991.369,229.816 991.937,229.67 992.505,228.707 993.074,228.753 993.642,228.859 994.21,227.908 994.779,228.006 995.347,228.201 995.915,227.262 996.484,225.256 997.052,226.509 997.62,227.759 998.189,227.192 998.757,226.401 999.325,226.677 999.894,226.91 1000.46,225.043 1001.03,227.519 1001.6,228.415 1002.17,228.632 1002.74,228.888 1003.3,228.111 1003.87,229.367 1004.44,229.388 1005.01,230.641 1005.58,229.748 1006.15,230.912 1006.71,230.917 1007.28,230.773 1007.85,231.796 1008.42,232.787 1008.99,232.854 1009.56,230.723 1010.12,228.724 1010.69,226.896 1011.26,227.269 1011.83,228.626 1012.4,226.874 1012.97,228.187 1013.53,229.545 1014.1,227.751 1014.67,229.047 1015.24,229.287 1015.81,231.498 1016.38,231.574 1016.94,232.59 1017.51,233.503 1018.08,233.343 1018.65,233.411 1019.22,232.432 1019.79,232.237 1020.35,230.99 1020.92,231.044 1021.49,232.066 1022.06,234.121 1022.63,231.881 1023.2,233.822 1023.76,233.734 1024.33,231.527 1024.9,230.527 1025.47,231.545 1026.04,232.423 1026.61,232.285 1027.17,235.223 1027.74,234.969 1028.31,234.813 1028.88,233.453 1029.45,237.502 1030.02,237.994 1030.58,237.383 1031.15,236.814 1031.72,231.182 1032.29,231.213 1032.86,230.321 1033.43,230.521 1033.99,229.612 1034.56,228.73 1035.13,230.029 1035.7,229.147 1036.27,230.422 1036.84,231.184 1037.4,231.043 1037.97,231.01 1038.54,230.874 1039.11,233.908 1039.68,233.775 1040.25,229.512 1040.81,230.873 1041.38,228.806 1041.95,229.826 1042.52,230.866 1043.09,230.999 1043.66,232.129 1044.22,233.074 1044.79,234.892 1045.36,233.631 1045.93,232.478 1046.5,229.156 1047.07,230.361 1047.63,230.411 1048.2,231.387 1048.77,230.12 1049.34,230.078 1049.91,230.149 1050.48,229.101 1051.05,229.284 1051.61,230.315 1052.18,230.292 1052.75,231.658 1053.32,229.499 1053.89,228.747 1054.46,228.721 1055.02,226.772 1055.59,224.945 1056.16,225.382 1056.73,224.848 1057.3,223.307 1057.87,223.972 1058.43,224.6 1059,224.117 1059.57,227.558 1060.14,225.611 1060.71,223.14 1061.28,221.944 1061.84,222.605 1062.41,222.065 1062.98,224.675 1063.55,225.076 1064.12,225.606 1064.69,226.302 1065.25,225.642 1065.82,223.03 1066.39,224.661 1066.96,225.344 1067.53,225.661 1068.1,227.024 1068.66,228.505 1069.23,227.765 1069.8,226.772 1070.37,226.153 1070.94,227.823 1071.51,228.992 1072.07,230.245 1072.64,231.715 1073.21,229.024 1073.78,232.688 1074.35,233.929 1074.92,237.096 1075.48,237.749 1076.05,237.388 1076.62,233.945 1077.19,232.899 1077.76,231.825 1078.33,232.884 1078.89,232.962 1079.46,232.844 1080.03,232.13 1080.6,231.319 1081.17,230.441 1081.74,230.702 1082.3,229.64 1082.87,227.744 1083.44,226.969 1084.01,227.343 1084.58,226.77 1085.15,227.296 1085.71,230.621 1086.28,234.055 1086.85,234.855 1087.42,235.919 1087.99,235.654 1088.56,234.445 1089.12,235.21 1089.69,235.967 1090.26,236.86 1090.83,237.258 1091.4,236.868 1091.97,239.633 1092.53,239.197 1093.1,238.578 1093.67,240.2 1094.24,239.538 1094.81,237.994 1095.38,236.3 1095.94,237.931 1096.51,238.413 1097.08,237.727 1097.65,238.395 1098.22,238.028 1098.79,237.443 1099.35,237.007 1099.92,235.658 1100.49,235.382 1101.06,234.034 1101.63,231.64 1102.2,230.332 1102.76,229.333 1103.33,230.504 1103.9,230.454 1104.47,228.332 1105.04,226.359 1105.61,225.442 1106.17,226.648 1106.74,225.915 1107.31,227.158 1107.88,225.313 1108.45,226.562 1109.02,226.834 1109.58,227.136 1110.15,225.491 1110.72,226.807 1111.29,227.043 1111.86,226.556 1112.43,226.852 1112.99,225.077 1113.56,223.446 1114.13,224.874 1114.7,227.591 1115.27,228.149 1115.84,226.598 1116.4,225.901 1116.97,226.351 1117.54,228.87 1118.11,230.122 1118.68,230.466 1119.25,227.57 1119.81,228.949 1120.38,227.96 1120.95,228.178 1121.52,227.32 1122.09,227.604 1122.66,229.987 1123.23,231.386 1123.79,230.479 1124.36,227.492 1124.93,229.792 1125.5,231.967 1126.07,230.789 1126.64,231.91 1127.2,233.014 1127.77,233.104 1128.34,233.093 1128.91,232.114 1129.48,232.393 1130.05,232.569 1130.61,232.554 1131.18,230.379 1131.75,229.567 1132.32,230.882 1132.89,227.85 1133.46,225.984 1134.02,225.527 1134.59,228.063 1135.16,228.461 1135.73,226.833 1136.3,230.489 1136.87,229.638 1137.43,227.858 1138,227.258 1138.57,226.8 1139.14,228.219 1139.71,227.265 1140.28,226.646 1140.84,226.198 1141.41,227.76 1141.98,232.122 1142.55,234.172 1143.12,235.911 1143.69,235.029 1144.25,231.986 1144.82,235.102 1145.39,238.018 1145.96,237.701 1146.53,238.394 1147.1,237.847 1147.66,237.304 1148.23,236.039 1148.8,234.639 1149.37,235.456 1149.94,239.249 1150.51,238.889 1151.07,236.651 1151.64,235.42 1152.21,235.121 1152.78,234.99 1153.35,233.761 1153.92,232.925 1154.48,232.497 1155.05,231.217 1155.62,231.949 1156.19,233.884 1156.76,231.704 1157.33,234.7 1157.89,233.392 1158.46,235.193 1159.03,236.091 1159.6,234.669 1160.17,232.292 1160.74,231.222 1161.3,231.24 1161.87,228.093 1162.44,228.457 1163.01,228.765 1163.58,228.87 1164.15,227.938 1164.71,231.407 1165.28,231.544 1165.85,232.525 1166.42,233.34 1166.99,231.33 1167.56,232.32 1168.12,231.174 1168.69,231.029 1169.26,231.016 1169.83,233.053 1170.4,231.781 1170.97,231.649 1171.53,231.74 1172.1,233.632 1172.67,233.318 1173.24,234.249 1173.81,234.056 1174.38,232.607 1174.94,233.554 1175.51,234.491 1176.08,235.174 1176.65,238.99 1177.22,239.367 1177.79,240.72 1178.35,237.922 1178.92,237.403 1179.49,236.663 1180.06,236.062 1180.63,234.44 1181.2,233.06 1181.76,231.714 1182.33,229.506 1182.9,230.61 1183.47,230.505 1184.04,230.331 1184.61,228.116 1185.17,230.34 1185.74,228.221 1186.31,228.286 1186.88,227.365 1187.45,226.566 1188.02,226.577 1188.58,225.741 1189.15,226.069 1189.72,226.082 1190.29,225.277 1190.86,224.743 1191.43,226.02 1192,226.197 1192.56,228.54 1193.13,230.818 1193.7,228.753 1194.27,229.97 1194.84,230.016 1195.41,230.105 1195.97,228.107 1196.54,229.418 1197.11,227.467 1197.68,226.529 1198.25,227.594 1198.82,228.534 1199.38,227.466 1199.95,225.771 1200.52,226.175 1201.09,224.795 1201.66,226.324 1202.23,224.714 1202.79,226.114 1203.36,225.406 1203.93,226.797 1204.5,226.98 1205.07,226.329 1205.64,226.64 1206.2,227.087 1206.77,229.236 1207.34,230.394 1207.91,231.45 1208.48,231.569 1209.05,231.637 1209.61,231.757 1210.18,230.803 1210.75,232.821 1211.32,233.582 1211.89,236.62 1212.46,232.278 1213.02,232.446 1213.59,233.304 1214.16,234.141 1214.73,233.918 1215.3,230.582 1215.87,231.679 1216.43,230.758 1217,230.876 1217.57,231.044 1218.14,230.13 1218.71,231.239 1219.28,233.147 1219.84,234.352 1220.41,233.091 1220.98,232.745 1221.55,233.603 1222.12,233.574 1222.69,233.656 1223.25,232.5 1223.82,233.306 1224.39,233.135 1224.96,235.866 1225.53,233.468 1226.1,236.329 1226.66,235.867 1227.23,236.517 1227.8,237.189 1228.37,236.743 1228.94,235.1 1229.51,234.809 1230.07,235.415 1230.64,236.103 1231.21,235.872 1231.78,234.579 1232.35,235.347 1232.92,232.887 1233.48,232.594 1234.05,234.516 1234.62,233.369 1235.19,233.016 1235.76,232.09 1236.33,231.962 1236.89,230.612 1237.46,230.656 1238.03,232.641 1238.6,230.162 1239.17,228.008 1239.74,225.979 1240.3,226.239 1240.87,226.455 1241.44,226.897 1242.01,228.029 1242.58,227.217 1243.15,228.553 1243.71,229.566 1244.28,230.705 1244.85,228.686 1245.42,230.832 1245.99,231.118 1246.56,230.058 1247.12,229.089 1247.69,229.296 1248.26,228.393 1248.83,226.319 1249.4,225.66 1249.97,224.076 1250.53,224.51 1251.1,226.076 1251.67,227.611 1252.24,229.093 1252.81,227.095 1253.38,227.15 1253.94,225.369 1254.51,226.604 1255.08,229.026 1255.65,228.153 1256.22,230.512 1256.79,228.556 1257.35,230.892 1257.92,231.839 1258.49,231.65 1259.06,232.602 1259.63,231.437 1260.2,229.595 1260.76,231.776 1261.33,232.917 1261.9,229.711 1262.47,230.997 1263.04,234.174 1263.61,234.966 1264.18,236.756 1264.74,235.38 1265.31,231.811 1265.88,234.814 1266.45,233.823 1267.02,230.473 1267.59,231.301 1268.15,232.18 1268.72,232.05 1269.29,232.056 1269.86,231.932 1270.43,230.779 1271,229.946 1271.56,231.035 1272.13,232.027 1272.7,229.86 1273.27,230.774 1273.84,231.818 1274.41,231.596 1274.97,230.596 1275.54,231.611 1276.11,230.691 1276.68,229.443 1277.25,229.535 1277.82,231.538 1278.38,230.212 1278.95,230.234 1279.52,229.259 1280.09,229.356 1280.66,228.23 1281.23,228.242 1281.79,226.369 1282.36,224.504 1282.93,223.871 1283.5,225.642 1284.07,227.284 1284.64,228.581 1285.2,228.57 1285.77,229.674 1286.34,227.704 1286.91,229.072 1287.48,229.148 1288.05,230.337 1288.61,228.494 1289.18,229.89 1289.75,230.2 1290.32,230.366 1290.89,230.122 1291.46,231.204 1292.02,232.523 1292.59,234.559 1293.16,232.415 1293.73,230.327 1294.3,231.398 1294.87,231.209 1295.43,232.352 1296,233.491 1296.57,236.426 1297.14,236.024 1297.71,234.69 1298.28,235.45 1298.84,233.022 1299.41,234.946 1299.98,233.587 1300.55,232.319 1301.12,232.118 1301.69,231.153 1302.25,229.923 1302.82,228.017 1303.39,227.142 1303.96,228.392 1304.53,230.423 1305.1,229.464 1305.66,230.577 1306.23,228.497 1306.8,227.737 1307.37,230.872 1307.94,231.939 1308.51,231.945 1309.07,230.623 1309.64,227.523 1310.21,228.895 1310.78,230.098 1311.35,231.031 1311.92,229.93 1312.48,230.1 1313.05,229.14 1313.62,228.373 1314.19,227.559 1314.76,227.829 1315.33,227.004 1315.89,228.288 1316.46,228.652 1317.03,227.562 1317.6,226.877 1318.17,227.119 1318.74,227.23 1319.3,227.652 1319.87,226.982 1320.44,229.442 1321.01,230.595 1321.58,229.765 1322.15,228.991 1322.71,227.973 1323.28,229.276 1323.85,232.493 1324.42,232.43 1324.99,232.539 1325.56,231.417 1326.12,231.303 1326.69,233.508 1327.26,232.294 1327.83,232.191 1328.4,230.061 1328.97,230.247 1329.53,230.536 1330.1,229.645 1330.67,231.714 1331.24,231.751 1331.81,230.852 1332.38,231.903 1332.94,230.885 1333.51,228.943 1334.08,227.231 1334.65,228.658 1335.22,227.901 1335.79,227.881 1336.36,229.058 1336.92,228.323 1337.49,229.42 1338.06,229.67 1338.63,230.898 1339.2,230.025 1339.77,230.216 1340.33,231.334 1340.9,233.573 1341.47,234.54 1342.04,234.204 1342.61,235.972 1343.18,233.781 1343.74,235.632 1344.31,237.311 1344.88,235.862 1345.45,234.494 1346.02,234.35 1346.59,234.07 1347.15,232.882 1347.72,232.668 1348.29,232.511 1348.86,233.512 1349.43,232.375 1350,233.319 1350.56,232.187 1351.13,234.252 1351.7,235.069 1352.27,233.62 1352.84,234.225 1353.41,234.217 1353.97,233.836 1354.54,234.542 1355.11,235.257 1355.68,231.738 1356.25,229.576 1356.82,231.565 1357.38,232.628 1357.95,233.252 1358.52,236.351 1359.09,237.174 1359.66,237.867 1360.23,238.294 1360.79,237.945 1361.36,236.416 1361.93,236.871 1362.5,237.509 1363.07,236.751 1363.64,238.221 1364.2,237.628 1364.77,237.187 1365.34,236.704 1365.91,238.478 1366.48,237.478 1367.05,236.978 1367.61,235.504 1368.18,235.147 1368.75,235.662 1369.32,232.902 1369.89,231.66 1370.46,231.436 1371.02,230.458 1371.59,231.456 1372.16,232.328 1372.73,231.208 1373.3,230.892 1373.87,229.662 1374.43,227.387 1375,225.379 1375.57,226.73 1376.14,225.938 1376.71,228.152 1377.28,229.088 1377.84,226.011 1378.41,224.2 1378.98,222.457 1379.55,223.934 1380.12,224.258 1380.69,224.686 1381.25,224.25 1381.82,225.734 1382.39,225.938 1382.96,224.299 1383.53,227.502 1384.1,228.629 1384.66,229.675 1385.23,231.627 1385.8,230.432 1386.37,231.414 1386.94,231.24 1387.51,232.365 1388.07,231.087 1388.64,231.949 1389.21,233.045 1389.78,235.776 1390.35,234.122 1390.92,233.799 1391.48,234.554 1392.05,235.235 1392.62,233.87 1393.19,234.521 1393.76,234.234 1394.33,236.869 1394.89,236.281 1395.46,235.789 1396.03,235.329 1396.6,235.899 1397.17,234.19 1397.74,230.915 1398.3,232.881 1398.87,233.67 1399.44,234.58 1400.01,234.237 1400.58,231.803 1401.15,232.531 1401.71,233.334 1402.28,232.723 1402.85,231.626 1403.42,233.516 1403.99,233.306 1404.56,234.812 1405.13,235.491 1405.69,236.021 1406.26,235.72 1406.83,233.017 1407.4,231.566 1407.97,232.446 1408.54,230.027 1409.1,230.798 1409.67,230.806 1410.24,231.668 1410.81,232.429 1411.38,231.001 1411.95,227.777 1412.51,229.777 1413.08,228.652 1413.65,229.516 1414.22,228.425 1414.79,228.381 1415.36,229.531 1415.92,228.369 1416.49,226.148 1417.06,225.196 1417.63,225.289 1418.2,222.378 1418.77,223.956 1419.33,226.296 1419.9,223.303 1420.47,224.591 1421.04,226.864 1421.61,225.073 1422.18,225.449 1422.74,224.569 1423.31,223.803 1423.88,223.26 1424.45,222.755 1425.02,221.357 1425.59,221.902 1426.15,223.52 1426.72,223.929 1427.29,224.403 1427.86,220.738 1428.43,222.289 1429,226.035 1429.56,225.303 1430.13,224.691 1430.7,224.239 1431.27,226.898 1431.84,227.209 1432.41,225.478 1432.97,225.938 1433.54,224.131 1434.11,224.774 1434.68,225.214 1435.25,225.759 1435.82,226.066 1436.38,225.424 1436.95,222.905 1437.52,223.595 1438.09,223.069 1438.66,224.549 1439.23,223.417 1439.79,222.059 1440.36,221.8 1440.93,224.724 1441.5,225.481 1442.07,224.094 1442.64,225.751 1443.2,227.379 1443.77,228.841 1444.34,225.956 1444.91,225.219 1445.48,225.845 1446.05,228.593 1446.61,228.145 1447.18,229.43 1447.75,229.969 1448.32,232.361 1448.89,233.357 1449.46,233.367 1450.02,234.436 1450.59,234.5 1451.16,233.369 1451.73,233.456 1452.3,232.615 1452.87,231.651 1453.43,230.853 1454,231.168 1454.57,232.363 1455.14,234.517 1455.71,235.397 1456.28,236.27 1456.84,236.092 1457.41,235.673 1457.98,235.368 1458.55,234.025 1459.12,234.914 1459.69,235.509 1460.25,235.135 1460.82,234.696 1461.39,236.438 1461.96,236.115 1462.53,235.614 1463.1,234.297 1463.66,231.974 1464.23,235.08 1464.8,233.785 1465.37,233.567 1465.94,235.223 1466.51,234.903 1467.07,234.65 1467.64,233.502 1468.21,233.349 1468.78,232.198 1469.35,232.335 1469.92,232.529 1470.48,233.464 1471.05,233.387 1471.62,233.427 1472.19,234.561 1472.76,233.399 1473.33,233.127 1473.89,234.177 1474.46,234.898 1475.03,234.772 1475.6,237.372 1476.17,236.951 1476.74,236.509 1477.31,236.156 1477.87,236.723 1478.44,238.229 1479.01,237.014 1479.58,237.468 1480.15,236.82 1480.72,238.226 1481.28,237.627 1481.85,238.897 1482.42,238.33 1482.99,235.51 1483.56,235.95 1484.13,232.336 1484.69,233.152 1485.26,232.994 1485.83,233.722 1486.4,232.256 1486.97,232.935 1487.54,233.796 1488.1,231.365 1488.67,232.393 1489.24,233.141 1489.81,232.805 1490.38,232.552 1490.95,232.249 1491.51,232.916 1492.08,232.322 1492.65,231.007 1493.22,231.768 1493.79,231.615 1494.36,232.399 1494.92,231.243 1495.49,228.936 1496.06,228.665 1496.63,228.94 1497.2,228.879 1497.77,229.139 1498.33,230.178 1498.9,229.971 1499.47,230.092 1500.04,228.123 1500.61,227.283 1501.18,227.445 1501.74,226.327 1502.31,224.495 1502.88,224.739 1503.45,221.955 1504.02,220.561 1504.59,222.079 1505.15,225.68 1505.72,226.01 1506.29,226.085 1506.86,225.391 1507.43,226.498 1508,227.726 1508.56,227.839 1509.13,227.103 1509.7,226.184 1510.27,227.63 1510.84,227.886 1511.41,225.978 1511.97,227.321 1512.54,228.762 1513.11,228.981 1513.68,228.054 1514.25,227.153 1514.82,226.512 1515.38,227.868 1515.95,229.102 1516.52,228.245 1517.09,226.463 1517.66,224.815 1518.23,226.145 1518.79,227.453 1519.36,229.853 1519.93,231.95 1520.5,232.935 1521.07,233.778 1521.64,233.604 1522.2,231.422 1522.77,232.481 1523.34,231.559 1523.91,232.654 1524.48,229.305 1525.05,228.551 1525.61,232.957 1526.18,233.869 1526.75,233.875 1527.32,233.31 1527.89,232.086 1528.46,231.906 1529.02,231.813 1529.59,229.758 1530.16,229.709 1530.73,229.759 1531.3,226.867 1531.87,226.3 1532.43,225.54 1533,225.956 1533.57,226.359 1534.14,226.662 1534.71,227.05 1535.28,228.314 1535.84,228.486 1536.41,227.8 1536.98,227.143 1537.55,228.45 1538.12,228.654 1538.69,230.9 1539.25,230.096 1539.82,231.367 1540.39,232.591 1540.96,231.492 1541.53,230.64 1542.1,229.494 1542.66,227.69 1543.23,228.088 1543.8,228.68 1544.37,229.858 1544.94,232.88 1545.51,235.632 1546.08,236.404 1546.64,238.951 1547.21,239.475 1547.78,238.014 1548.35,237.556 1548.92,237.234 1549.49,238.978 1550.05,238.574 1550.62,236.309 1551.19,234.774 1551.76,234.394 1552.33,234.151 1552.9,234.898 1553.46,232.323 1554.03,233.506 1554.6,232.266 1555.17,232.147 1555.74,232.938 1556.31,229.758 1556.87,228.577 1557.44,226.737 1558.01,227.115 1558.58,227.304 1559.15,228.388 1559.72,230.488 1560.28,228.355 1560.85,227.292 1561.42,227.624 1561.99,227.833 1562.56,229.239 1563.13,230.494 1563.69,231.762 1564.26,230.729 1564.83,232.933 1565.4,232.864 1565.97,230.581 1566.54,231.542 1567.1,233.57 1567.67,234.589 1568.24,234.298 1568.81,234.074 1569.38,233.793 1569.95,236.534 1570.51,235.106 1571.08,233.612 1571.65,231.152 1572.22,228.981 1572.79,230.869 1573.36,230.719 1573.92,228.543 1574.49,231.763 1575.06,232.943 1575.63,235.897 1576.2,236.562 1576.77,236.089 1577.33,236.883 1577.9,237.6 1578.47,237.727 1579.04,237.425 1579.61,234.039 1580.18,231.631 1580.74,230.55 1581.31,230.487 1581.88,228.309 1582.45,228.406 1583.02,228.281 1583.59,227.286 1584.15,229.494 1584.72,230.521 1585.29,230.415 1585.86,228.332 1586.43,226.468 1587,226.887 1587.56,228.057 1588.13,228.346 1588.7,229.469 1589.27,227.329 1589.84,227.483 1590.41,227.605 1590.97,230.927 1591.54,233.173 1592.11,232.997 1592.68,233.581 1593.25,231.016 1593.82,233.115 1594.38,230.733 1594.95,230.625 1595.52,230.605 1596.09,229.733 1596.66,229.764 1597.23,231.774 1597.79,232.296 1598.36,234.224 1598.93,233.96 1599.5,233.66 1600.07,233.262 1600.64,230.067 1601.2,228.892 1601.77,226.925 1602.34,226.154 1602.91,226.345 1603.48,228.651 1604.05,229.708 1604.61,230.718 1605.18,231.883 1605.75,229.74 1606.32,230.672 1606.89,232.756 1607.46,229.375 1608.02,228.417 1608.59,229.614 1609.16,229.803 1609.73,229.831 1610.3,227.664 1610.87,228.85 1611.43,228.981 1612,226.973 1612.57,228.317 1613.14,228.486 1613.71,228.913 1614.28,228.915 1614.84,229.165 1615.41,229.369 1615.98,228.451 1616.55,228.715 1617.12,227.817 1617.69,229.047 1618.26,227.206 1618.82,227.523 1619.39,227.669 1619.96,227.841 1620.53,227.04 1621.1,229.247 1621.67,230.293 1622.23,232.354 1622.8,232.362 1623.37,230.019 1623.94,229.084 1624.51,228.169 1625.08,227.513 1625.64,227.842 1626.21,226.85 1626.78,229.332 1627.35,228.407 1627.92,228.747 1628.49,230.068 1629.05,230.192 1629.62,232.517 1630.19,229.464 1630.76,227.513 1631.33,227.741 1631.9,227.979 1632.46,228.212 1633.03,231.435 1633.6,232.681 1634.17,233.532 1634.74,232.205 1635.31,234.947 1635.87,233.457 1636.44,233.033 1637.01,230.793 1637.58,230.929 1638.15,231.927 1638.72,233.08 1639.28,234.049 1639.85,233.534 1640.42,231.211 1640.99,231.053 1641.56,229.177 1642.13,227.292 1642.69,226.394 1643.26,229.548 1643.83,226.401 1644.4,226.719 1644.97,227.093 1645.54,223.571 1646.1,222.216 1646.67,223.026 1647.24,223.516 1647.81,222.181 1648.38,219.895 1648.95,221.764 1649.51,222.408 1650.08,224.125 1650.65,224.586 1651.22,227.298 1651.79,227.656 1652.36,230.212 1652.92,230.517 1653.49,229.759 1654.06,229.711 1654.63,227.793 1655.2,228.155 1655.77,229.649 1656.33,228.74 1656.9,228.074 1657.47,229.248 1658.04,230.421 1658.61,231.809 1659.18,230.938 1659.74,230.901 1660.31,229.953 1660.88,230.173 1661.45,230.545 1662.02,232.838 1662.59,231.831 1663.15,232.96 1663.72,234.623 1664.29,234.452 1664.86,236.443 1665.43,237.459 1666,239.132 1666.56,237.613 1667.13,237.07 1667.7,236.897 1668.27,238.888 1668.84,237.442 1669.41,239.049 1669.97,239.484 1670.54,239.072 1671.11,238.359 1671.68,236.761 1672.25,235.313 1672.82,235.811 1673.38,235.344 1673.95,234.963 1674.52,234.817 1675.09,233.646 1675.66,234.722 1676.23,233.497 1676.79,234.288 1677.36,233.976 1677.93,234.719 1678.5,235.477 1679.07,236.212 1679.64,235.856 1680.2,236.472 1680.77,236.187 1681.34,235.652 1681.91,233.125 1682.48,233.1 1683.05,232.092 1683.61,231.787 1684.18,229.733 1684.75,229.61 1685.32,229.519 1685.89,229.366 1686.46,229.622 1687.02,229.742 1687.59,230.651 1688.16,230.745 1688.73,231.624 1689.3,230.442 1689.87,232.531 1690.44,233.14 1691,235.161 1691.57,232.832 1692.14,233.558 1692.71,233.343 1693.28,233.916 1693.85,232.486 1694.41,232.233 1694.98,232.196 1695.55,231.953 1696.12,231.669 1696.69,232.759 1697.26,231.517 1697.82,232.305 1698.39,233.058 1698.96,233.819 1699.53,234.716 1700.1,234.257 1700.67,230.809 1701.23,230.908 1701.8,231.913 1702.37,232.78 1702.94,232.726 1703.51,231.576 1704.08,229.354 1704.64,226.327 1705.21,222.37 1705.78,224.907 1706.35,225.093 1706.92,224.49 1707.49,224.707 1708.05,228.141 1708.62,228.309 1709.19,229.46 1709.76,227.514 1710.33,227.715 1710.9,227.965 1711.46,228.001 1712.03,227.19 1712.6,228.478 1713.17,227.656 1713.74,227.833 1714.31,227.038 1714.87,228.424 1715.44,230.713 1716.01,231.75 1716.58,229.537 1717.15,230.623 1717.72,231.66 1718.28,230.512 1718.85,229.362 1719.42,227.173 1719.99,229.585 1720.56,229.623 1721.13,228.693 1721.69,230.094 1722.26,230.94 1722.83,231.755 1723.4,232.559 1723.97,233.359 1724.54,233.453 1725.1,233.047 1725.67,232.944 1726.24,233.701 1726.81,234.566 1727.38,236.376 1727.95,237.031 1728.51,236.546 1729.08,235.039 1729.65,237.89 1730.22,238.676 1730.79,237.776 1731.36,237.151 1731.92,237.298 1732.49,236.911 1733.06,235.34 1733.63,233.849 1734.2,233.595 1734.77,233.59 1735.33,233.343 1735.9,233.23 1736.47,231.895 1737.04,231.782 1737.61,233.388 1738.18,233.141 1738.74,233.748 1739.31,233.574 1739.88,233.149 1740.45,231.977 1741.02,228.593 1741.59,228.679 1742.15,231.624 1742.72,229.444 1743.29,229.592 1743.86,229.443 1744.43,229.423 1745,226.259 1745.56,226.361 1746.13,225.608 1746.7,223.905 1747.27,225.279 1747.84,225.397 1748.41,225.684 1748.97,225.925 1749.54,226.306 1750.11,225.47 1750.68,227.017 1751.25,226.301 1751.82,225.533 1752.38,227.035 1752.95,229.31 1753.52,226.405 1754.09,225.791 1754.66,226.987 1755.23,227.231 1755.79,228.54 1756.36,228.854 1756.93,230.248 1757.5,230.416 1758.07,228.451 1758.64,228.606 1759.21,228.895 1759.77,228.813 1760.34,226.865 1760.91,224.962 1761.48,226.585 1762.05,230.105 1762.62,229.284 1763.18,228.369 1763.75,228.552 1764.32,230.704 1764.89,229.81 1765.46,231.712 1766.03,232.871 1766.59,231.652 1767.16,231.464 1767.73,231.364 1768.3,232.422 1768.87,233.35 1769.44,231.193 1770,233.185 1770.57,234.208 1771.14,233.93 1771.71,234.979 1772.28,233.564 1772.85,234.576 1773.41,233.212 1773.98,231.961 1774.55,232.958 1775.12,230.549 1775.69,229.563 1776.26,227.765 1776.82,229.068 1777.39,228.065 1777.96,229.619 1778.53,229.516 1779.1,227.602 1779.67,227.046 1780.23,227.119 1780.8,226.372 1781.37,226.856 1781.94,226.079 1782.51,225.51 1783.08,225.021 1783.64,226.556 1784.21,226.787 1784.78,230.313 1785.35,230.429 1785.92,230.306 1786.49,230.42 1787.05,229.438 1787.62,233.702 1788.19,234.597 1788.76,233.362 1789.33,231.131 1789.9,232.054 1790.46,232.816 1791.03,233.672 1791.6,233.594 1792.17,233.225 1792.74,231.206 1793.31,230.097 1793.87,231.515 1794.44,230.636 1795.01,227.863 1795.58,229.246 1796.15,228.146 1796.72,229.433 1797.28,229.57 1797.85,229.533 1798.42,229.578 1798.99,228.458 1799.56,228.667 1800.13,229.63 1800.69,230.727 1801.26,230.668 1801.83,232.712 1802.4,231.465 1802.97,231.306 1803.54,231.21 1804.1,229.226 1804.67,229.62 1805.24,230.762 1805.81,230.876 1806.38,230.935 1806.95,231.946 1807.51,230.803 1808.08,231.692 1808.65,231.737 1809.22,229.565 1809.79,229.813 1810.36,229.025 1810.92,231.129 1811.49,230.215 1812.06,232.245 1812.63,232.171 1813.2,231.269 1813.77,233.269 1814.33,236.026 1814.9,236.796 1815.47,237.304 1816.04,237.838 1816.61,238.256 1817.18,237.87 1817.74,233.25 1818.31,233.162 1818.88,230.758 1819.45,230.836 1820.02,231.044 1820.59,231.987 1821.15,233.792 1821.72,234.782 1822.29,233.554 1822.86,233.31 1823.43,232.926 1824,231.794 1824.56,231.713 1825.13,231.865 1825.7,231.609 1826.27,231.436 1826.84,230.319 1827.41,229.061 1827.97,228.118 1828.54,228.069 1829.11,229.186 1829.68,230.033 1830.25,232.095 1830.82,232.016 1831.39,234.853 1831.95,234.397 1832.52,233.883 1833.09,231.517 1833.66,232.586 1834.23,232.416 1834.8,232.033 1835.36,232.928 1835.93,232.553 1836.5,233.094 1837.07,233.001 1837.64,232.762 1838.21,233.699 1838.77,233.616 1839.34,234.531 1839.91,232.282 1840.48,232.173 1841.05,231.815 1841.62,229.713 1842.18,230.823 1842.75,230.871 1843.32,231.883 1843.89,231.724 1844.46,231.594 1845.03,231.32 1845.59,232.285 1846.16,230.074 1846.73,229.26 1847.3,229.447 1847.87,229.385 1848.44,226.528 1849,230.03 1849.57,228.928 1850.14,228.99 1850.71,228.179 1851.28,229.406 1851.85,227.402 1852.41,228.537 1852.98,229.684 1853.55,233.943 1854.12,232.516 1854.69,233.452 1855.26,233.37 1855.82,232.01 1856.39,231.79 1856.96,233.586 1857.53,233.504 1858.1,230.894 1858.67,233.026 1859.23,232.705 1859.8,229.448 1860.37,229.528 1860.94,229.555 1861.51,227.565 1862.08,226.293 1862.64,227.76 1863.21,227.069 1863.78,228.429 1864.35,224.632 1864.92,224.128 1865.49,224.539 1866.05,222.899 1866.62,223.409 1867.19,222.67 1867.76,220.288 1868.33,220.008 1868.9,221.709 1869.46,222.574 1870.03,223.202 1870.6,224.523 1871.17,224.851 1871.74,223.399 1872.31,223.1 1872.87,220.829 1873.44,221.69 1874.01,223.411 1874.58,223.975 1875.15,223.651 1875.72,225.315 1876.28,225.704 1876.85,225.172 1877.42,225.622 1877.99,229.154 1878.56,228.246 1879.13,226.598 1879.69,228.265 1880.26,230.704 1880.83,228.903 1881.4,229.088 1881.97,230.347 1882.54,230.364 1883.1,231.624 1883.67,231.72 1884.24,231.959 1884.81,231.029 1885.38,231.245 1885.95,232.501 1886.51,231.728 1887.08,230.936 1887.65,233.098 1888.22,233.014 1888.79,233.154 1889.36,234.159 1889.92,237.159 1890.49,236.976 1891.06,235.605 1891.63,237.679 1892.2,238.249 1892.77,236.042 1893.33,234.747 1893.9,235.56 1894.47,238.44 1895.04,240.015 1895.61,238.319 1896.18,237.676 1896.74,237.356 1897.31,237.185 1897.88,238.573 1898.45,238.251 1899.02,240.773 1899.59,242.122 1900.16,240.366 1900.72,239.548 1901.29,240.002 1901.86,238.564 1902.43,238.967 1903,238.36 1903.57,237.75 1904.13,235.936 1904.7,233.59 1905.27,232.012 1905.84,231.811 1906.41,231.771 1906.98,231.492 1907.54,230.289 1908.11,229.373 1908.68,230.453 1909.25,231.461 1909.82,231.18 1910.39,228.968 1910.95,226.814 1911.52,224.949 1912.09,224.992 1912.66,225.275 1913.23,224.697 1913.8,221.952 1914.36,224.616 1914.93,227.089 1915.5,227.36 1916.07,227.503 1916.64,227.566 1917.21,228.011 1917.77,229.215 1918.34,229.252 1918.91,228.124 1919.48,228.182 1920.05,229.388 1920.62,230.641 1921.18,229.508 1921.75,230.565 1922.32,230.649 1922.89,231.602 1923.46,230.528 1924.03,231.688 1924.59,230.713 1925.16,232.84 1925.73,233.697 1926.3,233.512 1926.87,232.1 1927.44,232.974 1928,233.932 1928.57,230.653 1929.14,231.565 1929.71,230.534 1930.28,232.519 1930.85,232.086 1931.41,230.758 1931.98,230.722 1932.55,230.695 1933.12,230.945 1933.69,230.913 1934.26,229.784 1934.82,230.027 1935.39,230.156 1935.96,231.073 1936.53,231.159 1937.1,230.251 1937.67,231.415 1938.23,232.567 1938.8,230.187 1939.37,229.069 1939.94,228.107 1940.51,230.139 1941.08,230.11 1941.64,227.092 1942.21,229.399 1942.78,228.681 1943.35,225.706 1943.92,225.979 1944.49,227.523 1945.05,227.795 1945.62,228.846 1946.19,228.785 1946.76,228.907 1947.33,228.91 1947.9,228.943 1948.46,228.154 1949.03,229.412 1949.6,229.695 1950.17,230.044 1950.74,228.287 1951.31,226.434 1951.87,227.933 1952.44,227.186 1953.01,227.482 1953.58,225.839 1954.15,226.025 1954.72,223.194 1955.28,224.891 1955.85,226.53 1956.42,227.143 1956.99,229.363 1957.56,230.59 1958.13,228.547 1958.69,227.567 1959.26,228.877 1959.83,234.375 1960.4,234.222 1960.97,231.005 1961.54,232.089 1962.1,230.813 1962.67,231.149 1963.24,231.106 1963.81,234.221 1964.38,234.966 1964.95,233.668 1965.51,234.634 1966.08,235.14 1966.65,236.015 1967.22,234.852 1967.79,235.71 1968.36,236.64 1968.92,236.321 1969.49,234.881 1970.06,234.656 1970.63,234.13 1971.2,231.912 1971.77,230.856 1972.34,231.867 1972.9,233.767 1973.47,233.63 1974.04,234.399 1974.61,235.113 1975.18,234.612 1975.75,234.521 1976.31,231.235 1976.88,230.22 1977.45,230.359 1978.02,233.584 1978.59,235.448 1979.16,234.055 1979.72,233.917 1980.29,233.797 1980.86,232.58 1981.43,230.569 1982,231.567 1982.57,231.519 1983.13,231.204 1983.7,230.251 1984.27,231.124 1984.84,232.052 1985.41,231.828 1985.98,229.504 1986.54,230.465 1987.11,232.71 1987.68,231.287 1988.25,230.283 1988.82,229.172 1989.39,227.22 1989.95,227.4 1990.52,227.588 1991.09,226.619 1991.66,225.903 1992.23,228.944 1992.8,228.001 1993.36,229.362 1993.93,228.162 1994.5,227.333 1995.07,225.379 1995.64,223.772 1996.21,226.364 1996.77,226.525 1997.34,228.01 1997.91,230.021 1998.48,229.894 1999.05,230.064 1999.62,232.054 2000.18,231.879 2000.75,232.859 2001.32,229.846 2001.89,229.953 2002.46,230.081 2003.03,231.22 2003.59,229.077 2004.16,229.278 2004.73,230.509 2005.3,229.728 2005.87,230.682 2006.44,230.792 2007,233.79 2007.57,236.96 2008.14,237.479 2008.71,237.188 2009.28,235.968 2009.85,236.781 2010.41,236.251 2010.98,236.901 2011.55,237.633 2012.12,233.851 2012.69,233.389 2013.26,234.273 2013.82,232.035 2014.39,231.979 2014.96,232.876 2015.53,231.668 2016.1,230.454 2016.67,231.553 2017.23,232.337 2017.8,232.508 2018.37,232.583 2018.94,232.531 2019.51,232.368 2020.08,231.125 2020.64,231.875 2021.21,230.826 2021.78,226.585 2022.35,228.644 2022.92,228.933 2023.49,228.907 2024.05,228.035 2024.62,229.296 2025.19,227.276 2025.76,226.473 2026.33,228.835 2026.9,229.799 2027.46,229.619 2028.03,225.582 2028.6,225.958 2029.17,227.404 2029.74,229.833 2030.31,231.972 2030.87,231.971 2031.44,233.04 2032.01,235.938 2032.58,233.374 2033.15,232.055 2033.72,233.071 2034.28,234.034 2034.85,231.614 2035.42,229.394 2035.99,230.553 2036.56,230.394 2037.13,230.42 2037.69,229.299 2038.26,225.289 2038.83,224.523 2039.4,225.093 2039.97,225.679 2040.54,224.977 2041.11,226.335 2041.67,226.751 2042.24,226.97 2042.81,226.086 2043.38,226.291 2043.95,227.611 2044.52,227.631 2045.08,230.024 2045.65,229.008 2046.22,230.108 2046.79,231.082 2047.36,228.987 2047.93,228.201 2048.49,228.51 2049.06,228.813 2049.63,229.166 2050.2,228.169 2050.77,228.215 2051.34,226.474 2051.9,227.691 2052.47,226.931 2053.04,226.349 2053.61,227.911 2054.18,228.237 2054.75,227.669 2055.31,229.023 2055.88,227.151 2056.45,227.469 2057.02,223.671 2057.59,226.243 2058.16,225.655 2058.72,225.078 2059.29,226.438 2059.86,227.948 2060.43,230.599 2061,228.596 2061.57,226.707 2062.13,225.928 2062.7,229.216 2063.27,228.536 2063.84,228.89 2064.41,229.953 2064.98,230.182 2065.54,231.539 2066.11,231.648 2066.68,231.676 2067.25,234.868 2067.82,233.841 2068.39,232.58 2068.95,233.527 2069.52,231.675 2070.09,229.774 2070.66,230.798 2071.23,230.884 2071.8,233.999 2072.36,234.68 2072.93,234.559 2073.5,236.484 2074.07,234.992 2074.64,237.011 2075.21,237.732 2075.77,239.606 2076.34,237.836 2076.91,236.66 2077.48,236.16 2078.05,231.699 2078.62,231.603 2079.18,230.564 2079.75,231.754 2080.32,233.621 2080.89,232.429 2081.46,234.375 2082.03,233.133 2082.59,231.894 2083.16,230.894 2083.73,231.903 2084.3,230.966 2084.87,230.784 2085.44,229.957 2086,230.252 2086.57,232.509 2087.14,230.518 2087.71,230.494 2088.28,230.633 2088.85,231.71 2089.41,233.969 2089.98,232.824 2090.55,234.871 2091.12,233.668 2091.69,232.455 2092.26,234.306 2092.82,234.419 2093.39,231.994 2093.96,232.933 2094.53,233.719 2095.1,234.591 2095.67,232.173 2096.23,230.929 2096.8,229.952 2097.37,232.066 2097.94,232.917 2098.51,230.787 2099.08,229.693 2099.64,229.678 2100.21,231.838 2100.78,230.527 2101.35,232.623 2101.92,234.539 2102.49,232.332 2103.05,234.161 2103.62,233.851 2104.19,233.442 2104.76,233.215 2105.33,233.376 2105.9,234.168 2106.46,232.825 2107.03,230.561 2107.6,230.664 2108.17,230.568 2108.74,227.457 2109.31,226.519 2109.87,229.938 2110.44,230.016 2111.01,231.15 2111.58,231.204 2112.15,231.311 2112.72,232.239 2113.29,230.249 2113.85,230.079 2114.42,233.33 2114.99,234.019 2115.56,233.629 2116.13,232.4 2116.7,232.169 2117.26,232.043 2117.83,232.013 2118.4,230.727 2118.97,230.52 2119.54,231.59 2120.11,231.513 2120.67,235.443 2121.24,235.95 2121.81,233.557 2122.38,232.563 2122.95,232.132 2123.52,231.906 2124.08,232.635 2124.65,234.479 2125.22,235.029 2125.79,236.703 2126.36,236.092 2126.93,237.676 2127.49,237.11 2128.06,237.46 2128.63,236.859 2129.2,236.156 2129.77,234.555 2130.34,233.116 2130.9,231.696 2131.47,231.575 2132.04,231.226 2132.61,230.855 2133.18,230.785 2133.75,230.62 2134.31,231.52 2134.88,232.423 2135.45,232.204 2136.02,231.101 2136.59,231.082 2137.16,231.088 2137.72,231.759 2138.29,231.529 2138.86,233.426 2139.43,232.194 2140,231.718 2140.57,230.539 2141.13,229.329 2141.7,227.284 2142.27,225.237 2142.84,225.662 2143.41,228.151 2143.98,229.246 2144.54,229.179 2145.11,230.254 2145.68,231.275 2146.25,227.956 2146.82,229.046 2147.39,230.134 2147.95,231.155 2148.52,230.895 2149.09,229.706 2149.66,229.718 2150.23,227.696 2150.8,226.694 2151.36,224.555 2151.93,224.94 2152.5,228.426 2153.07,226.565 2153.64,225.616 2154.21,227.076 2154.77,227.336 2155.34,227.538 2155.91,226.748 2156.48,227.855 2157.05,229.274 2157.62,229.239 2158.18,229.29 2158.75,227.44 2159.32,227.812 2159.89,228.995 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip980)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip980)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip980)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip980)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.037 ± 0.027\n  with uncertainty of ± 0.0024198426919391177\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01863 ± (0.0024543, 0.00253932) (MC)\n  95% confidence interval: [-4.02346, -4.01388]) (MC)\n  linear error propagation: -4.01863 ± 0.00250414\n  |δ_y| = |0.00176304| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.018625921162279, val_l = 0.00483366125721485, val_u = 0.004748812417288306)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip010\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip010)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip011\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip010)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip012\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip010)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1156.31 2211.02,1156.31 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,882.345 2211.02,882.345 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,608.379 2211.02,608.379 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,334.414 2211.02,334.414 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1156.31 365.751,1156.31 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,882.345 365.751,882.345 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,608.379 365.751,608.379 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,334.414 365.751,334.414 \"/>\n<path clip-path=\"url(#clip010)\" d=\"M298.909 1142.11 Q295.298 1142.11 293.469 1145.67 Q291.664 1149.22 291.664 1156.35 Q291.664 1163.45 293.469 1167.02 Q295.298 1170.56 298.909 1170.56 Q302.543 1170.56 304.349 1167.02 Q306.177 1163.45 306.177 1156.35 Q306.177 1149.22 304.349 1145.67 Q302.543 1142.11 298.909 1142.11 M298.909 1138.41 Q304.719 1138.41 307.775 1143.01 Q310.853 1147.6 310.853 1156.35 Q310.853 1165.07 307.775 1169.68 Q304.719 1174.26 298.909 1174.26 Q293.099 1174.26 290.02 1169.68 Q286.964 1165.07 286.964 1156.35 Q286.964 1147.6 290.02 1143.01 Q293.099 1138.41 298.909 1138.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M262.775 895.69 L279.094 895.69 L279.094 899.625 L257.15 899.625 L257.15 895.69 Q259.812 892.935 264.395 888.306 Q269.002 883.653 270.182 882.31 Q272.428 879.787 273.307 878.051 Q274.21 876.292 274.21 874.602 Q274.21 871.847 272.266 870.111 Q270.344 868.375 267.242 868.375 Q265.043 868.375 262.59 869.139 Q260.159 869.903 257.381 871.454 L257.381 866.732 Q260.205 865.597 262.659 865.019 Q265.113 864.44 267.15 864.44 Q272.52 864.44 275.715 867.125 Q278.909 869.81 278.909 874.301 Q278.909 876.431 278.099 878.352 Q277.312 880.25 275.205 882.843 Q274.627 883.514 271.525 886.732 Q268.423 889.926 262.775 895.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M298.909 868.144 Q295.298 868.144 293.469 871.708 Q291.664 875.25 291.664 882.38 Q291.664 889.486 293.469 893.051 Q295.298 896.593 298.909 896.593 Q302.543 896.593 304.349 893.051 Q306.177 889.486 306.177 882.38 Q306.177 875.25 304.349 871.708 Q302.543 868.144 298.909 868.144 M298.909 864.44 Q304.719 864.44 307.775 869.046 Q310.853 873.63 310.853 882.38 Q310.853 891.107 307.775 895.713 Q304.719 900.296 298.909 900.296 Q293.099 900.296 290.02 895.713 Q286.964 891.107 286.964 882.38 Q286.964 873.63 290.02 869.046 Q293.099 864.44 298.909 864.44 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M271.594 595.173 L259.789 613.622 L271.594 613.622 L271.594 595.173 M270.367 591.099 L276.247 591.099 L276.247 613.622 L281.177 613.622 L281.177 617.511 L276.247 617.511 L276.247 625.659 L271.594 625.659 L271.594 617.511 L255.992 617.511 L255.992 612.997 L270.367 591.099 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M298.909 594.178 Q295.298 594.178 293.469 597.743 Q291.664 601.285 291.664 608.414 Q291.664 615.521 293.469 619.085 Q295.298 622.627 298.909 622.627 Q302.543 622.627 304.349 619.085 Q306.177 615.521 306.177 608.414 Q306.177 601.285 304.349 597.743 Q302.543 594.178 298.909 594.178 M298.909 590.474 Q304.719 590.474 307.775 595.081 Q310.853 599.664 310.853 608.414 Q310.853 617.141 307.775 621.747 Q304.719 626.331 298.909 626.331 Q293.099 626.331 290.02 621.747 Q286.964 617.141 286.964 608.414 Q286.964 599.664 290.02 595.081 Q293.099 590.474 298.909 590.474 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M269.326 332.55 Q266.178 332.55 264.326 334.703 Q262.497 336.856 262.497 340.606 Q262.497 344.333 264.326 346.509 Q266.178 348.661 269.326 348.661 Q272.474 348.661 274.303 346.509 Q276.154 344.333 276.154 340.606 Q276.154 336.856 274.303 334.703 Q272.474 332.55 269.326 332.55 M278.608 317.898 L278.608 322.157 Q276.849 321.324 275.043 320.884 Q273.261 320.444 271.502 320.444 Q266.872 320.444 264.418 323.569 Q261.988 326.694 261.641 333.013 Q263.006 331 265.066 329.935 Q267.127 328.847 269.603 328.847 Q274.812 328.847 277.821 332.018 Q280.853 335.166 280.853 340.606 Q280.853 345.93 277.705 349.148 Q274.557 352.365 269.326 352.365 Q263.33 352.365 260.159 347.782 Q256.988 343.175 256.988 334.449 Q256.988 326.254 260.877 321.393 Q264.766 316.509 271.316 316.509 Q273.076 316.509 274.858 316.856 Q276.664 317.203 278.608 317.898 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M298.909 320.213 Q295.298 320.213 293.469 323.777 Q291.664 327.319 291.664 334.449 Q291.664 341.555 293.469 345.12 Q295.298 348.661 298.909 348.661 Q302.543 348.661 304.349 345.12 Q306.177 341.555 306.177 334.449 Q306.177 327.319 304.349 323.777 Q302.543 320.213 298.909 320.213 M298.909 316.509 Q304.719 316.509 307.775 321.115 Q310.853 325.699 310.853 334.449 Q310.853 343.175 307.775 347.782 Q304.719 352.365 298.909 352.365 Q293.099 352.365 290.02 347.782 Q286.964 343.175 286.964 334.449 Q286.964 325.699 290.02 321.115 Q293.099 316.509 298.909 316.509 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip012)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1055.38 400.199,962.651 400.786,877.571 401.372,799.624 401.958,728.335 402.545,663.264 403.131,604.005 403.718,550.178 404.304,501.432 404.891,457.437 405.477,417.887 406.063,382.494 406.65,350.989 407.236,323.119 407.823,298.646 408.409,277.349 408.995,259.017 409.582,243.453 410.168,230.471 410.755,219.895 411.341,255.299 411.927,247.749 412.514,242.77 413.1,239.024 413.687,236.993 414.273,236.554 414.86,237.586 415.446,266.736 416.032,318.55 416.619,366.551 417.205,371.199 417.792,395.822 418.378,400.835 418.964,407.052 419.551,414.73 420.137,422.715 420.724,430.807 421.31,465.518 421.896,475.461 422.483,485.745 423.069,496.377 423.656,507.438 424.242,528.38 424.829,567.225 425.415,579.691 426.001,615.496 426.588,633.927 427.174,644.05 427.761,667.668 428.347,679.108 428.933,689.913 429.52,712.664 430.106,728.182 430.693,737.785 431.279,747.456 431.865,761.515 432.452,770.986 433.038,780.009 433.625,788.95 434.211,806.865 434.798,815.701 435.384,824.024 435.97,836.567 436.557,844.887 437.143,853.036 437.73,868.143 438.316,879.399 438.902,893.395 439.489,906.818 440.075,913.864 440.662,920.771 441.248,933.073 441.835,942.39 442.421,954.032 443.007,965.203 443.594,973.347 444.18,978.689 444.767,986.344 445.353,993.974 445.939,1003.92 446.526,1010.95 447.112,1022.61 447.699,1027.14 448.285,1038.14 448.871,1046.62 449.458,1050.97 450.044,1057.16 450.631,1060.93 451.217,1066.84 451.804,1070.75 452.39,1080.43 452.976,1085.77 453.563,1089.41 454.149,1094.81 454.736,1101.79 455.322,1113.65 455.908,1118.11 456.495,1124.42 457.081,1130.37 457.668,1132.89 458.254,1138.64 458.84,1142.35 459.427,1149.28 460.013,1151.26 460.6,1154.83 461.186,1156.86 461.773,1161.65 462.359,1165.13 462.945,1171.43 463.532,1176.01 464.118,1178.84 464.705,1183.21 465.291,1187.31 465.877,1188.15 466.464,1189.22 467.05,1191.88 467.637,1195.74 468.223,1196.56 468.809,1195.96 469.396,1196.82 469.982,1197.72 470.569,1199.97 471.155,1200.88 471.742,1204.81 472.328,1210.99 472.914,1211.32 473.501,1212.91 474.087,1217.18 474.674,1219.81 475.26,1221.13 475.846,1223.76 476.433,1224.81 477.019,1228.58 477.606,1229.46 478.192,1229.24 478.778,1228.76 479.365,1227.05 479.951,1229.11 480.538,1229.84 481.124,1228.31 481.711,1230.23 482.297,1232.54 482.883,1232.14 483.47,1231.84 484.056,1233.85 484.643,1232.26 485.229,1234.5 485.815,1235.44 486.402,1236.25 486.988,1238.1 487.575,1239.95 488.161,1241.89 488.748,1241.33 489.334,1241.7 489.92,1239.6 490.507,1238.82 491.093,1238.12 491.68,1238.77 492.266,1238.13 492.852,1239.86 493.439,1241.71 494.025,1243.8 494.612,1244.08 495.198,1244.51 495.784,1245.01 496.371,1245.22 496.957,1247.03 497.544,1248.61 498.13,1248.68 498.717,1249.05 499.303,1250.53 499.889,1248.61 500.476,1247.56 501.062,1248.95 501.649,1245.51 502.235,1247.08 502.821,1248.47 503.408,1248.72 503.994,1246.54 504.581,1243.03 505.167,1243.67 505.753,1240.71 506.34,1241.12 506.926,1239.31 507.513,1242.35 508.099,1244.11 508.686,1241.22 509.272,1242.86 509.858,1242.35 510.445,1239.66 511.031,1239.31 511.618,1241.26 512.204,1239.59 512.79,1239.03 513.377,1237.55 513.963,1238.69 514.55,1238.3 515.136,1241.38 515.722,1239.72 516.309,1239.11 516.895,1239.91 517.482,1242.61 518.068,1242.06 518.655,1242.75 519.241,1244.74 519.827,1244.04 520.414,1242.38 521,1240.74 521.587,1240.32 522.173,1240.04 522.759,1239.58 523.346,1238.04 523.932,1237.69 524.519,1238.5 525.105,1237.86 525.691,1237.22 526.278,1238.14 526.864,1238.73 527.451,1238.45 528.037,1236.99 528.624,1237.84 529.21,1239.73 529.796,1241.35 530.383,1242.07 530.969,1242.59 531.556,1244.24 532.142,1244.32 532.728,1242.46 533.315,1242.01 533.901,1240.37 534.488,1238.8 535.074,1237.44 535.661,1239.25 536.247,1239.08 536.833,1239.62 537.42,1239.13 538.006,1240.03 538.593,1239.56 539.179,1243.67 539.765,1241.83 540.352,1243.51 540.938,1243.78 541.525,1241.84 542.111,1241.27 542.697,1239.47 543.284,1238.87 543.87,1238.13 544.457,1237.79 545.043,1237.25 545.63,1236.89 546.216,1235.4 546.802,1236.2 547.389,1236.58 547.975,1235.9 548.562,1235.64 549.148,1236.33 549.734,1236.83 550.321,1234.13 550.907,1234.83 551.494,1234.39 552.08,1235.11 552.666,1236.97 553.253,1237.71 553.839,1236.22 554.426,1236.95 555.012,1237.67 555.599,1238.64 556.185,1238.12 556.771,1239.75 557.358,1241.46 557.944,1239.7 558.531,1237.91 559.117,1238.41 559.703,1241.03 560.29,1238.28 560.876,1238.7 561.463,1238.11 562.049,1235.32 562.635,1234.76 563.222,1235.64 563.808,1235.34 564.395,1234.67 564.981,1232.98 565.568,1232.82 566.154,1232.29 566.74,1230.91 567.327,1231.75 567.913,1232.61 568.5,1232.27 569.086,1230.87 569.672,1231.57 570.259,1231.31 570.845,1232.28 571.432,1234.36 572.018,1233.86 572.605,1234.68 573.191,1232.11 573.777,1231.65 574.364,1231.37 574.95,1234.17 575.537,1234.86 576.123,1233.14 576.709,1232.73 577.296,1229.22 577.882,1230.14 578.469,1230.02 579.055,1229.72 579.641,1230.55 580.228,1228.91 580.814,1230.77 581.401,1233.76 581.987,1233.44 582.574,1234.14 583.16,1234.83 583.746,1233.26 584.333,1234.83 584.919,1234.41 585.506,1235.99 586.092,1235.26 586.678,1237.67 587.265,1237.01 587.851,1236.28 588.438,1236.65 589.024,1236.19 589.61,1236.42 590.197,1239.2 590.783,1236.97 591.37,1236.16 591.956,1236.67 592.543,1234.76 593.129,1236.19 593.715,1237.64 594.302,1237.97 594.888,1233.56 595.475,1230.79 596.061,1228.1 596.647,1228.03 597.234,1228.96 597.82,1228.61 598.407,1228.2 598.993,1227.03 599.579,1225.58 600.166,1224.35 600.752,1224.64 601.339,1226.86 601.925,1227.56 602.512,1227.31 603.098,1228.11 603.684,1226.71 604.271,1227.46 604.857,1226.12 605.444,1225 606.03,1227.45 606.616,1227.15 607.203,1228.07 607.789,1226.71 608.376,1225.49 608.962,1226.56 609.548,1228.5 610.135,1227.39 610.721,1225.75 611.308,1227.77 611.894,1230.74 612.481,1229.14 613.067,1230.92 613.653,1233.83 614.24,1233.36 614.826,1231.76 615.413,1229.85 615.999,1230.59 616.585,1228.75 617.172,1227.37 617.758,1227.1 618.345,1225.68 618.931,1227.4 619.518,1226.69 620.104,1227.47 620.69,1229.36 621.277,1228.87 621.863,1226.02 622.45,1225.86 623.036,1226.46 623.622,1223.73 624.209,1222.52 624.795,1223.76 625.382,1223.47 625.968,1223.54 626.554,1222.31 627.141,1224.46 627.727,1224.34 628.314,1224.03 628.9,1225.93 629.487,1225.36 630.073,1228.48 630.659,1227.86 631.246,1226.43 631.832,1226.21 632.419,1224.87 633.005,1223.2 633.591,1223.25 634.178,1222.98 634.764,1221.74 635.351,1223.89 635.937,1222.77 636.523,1222.58 637.11,1222.45 637.696,1224.57 638.283,1224.42 638.869,1224.26 639.456,1223.77 640.042,1224.21 640.628,1223.94 641.215,1222.51 641.801,1221.4 642.388,1223.42 642.974,1226.25 643.56,1226.77 644.147,1226.33 644.733,1225.87 645.32,1226.94 645.906,1227.53 646.492,1225.99 647.079,1224.64 647.665,1224.6 648.252,1226.49 648.838,1224.08 649.425,1223.79 650.011,1224.62 650.597,1223.17 651.184,1219.44 651.77,1217.9 652.357,1218.83 652.943,1220 653.529,1219.94 654.116,1219.67 654.702,1218.35 655.289,1217.23 655.875,1218.27 656.462,1219.08 657.048,1219.14 657.634,1220.33 658.221,1218.22 658.807,1220.16 659.394,1221.23 659.98,1222.17 660.566,1223.18 661.153,1222.83 661.739,1221.48 662.326,1221.11 662.912,1219.8 663.498,1219.55 664.085,1218.2 664.671,1218.24 665.258,1218.17 665.844,1218.07 666.431,1216.94 667.017,1218.16 667.603,1217.13 668.19,1217.01 668.776,1217.28 669.363,1215.01 669.949,1217.46 670.535,1218.59 671.122,1218.63 671.708,1217.39 672.295,1219.82 672.881,1218.42 673.467,1218.38 674.054,1218.29 674.64,1218.21 675.227,1218.25 675.813,1217.93 676.4,1217.78 676.986,1217.91 677.572,1217.89 678.159,1222.18 678.745,1222.05 679.332,1222.27 679.918,1222.11 680.504,1218.33 681.091,1218.01 681.677,1218 682.264,1217.99 682.85,1216.9 683.436,1215.81 684.023,1216.09 684.609,1216.23 685.196,1218.58 685.782,1218.72 686.369,1219.9 686.955,1219.67 687.541,1219.58 688.128,1217.13 688.714,1216 689.301,1217.25 689.887,1217.11 690.473,1216.04 691.06,1214.86 691.646,1215.11 692.233,1216.31 692.819,1217.3 693.405,1214.79 693.992,1215.12 694.578,1215.26 695.165,1217.46 695.751,1217.34 696.338,1216 696.924,1217.03 697.51,1216.92 698.097,1219.22 698.683,1220.26 699.27,1220.21 699.856,1222.12 700.442,1221.84 701.029,1220.34 701.615,1220.18 702.202,1221.2 702.788,1221.02 703.375,1221.72 703.961,1221.32 704.547,1220.07 705.134,1220.94 705.72,1221.74 706.307,1222.58 706.893,1222.13 707.479,1222.69 708.066,1222.7 708.652,1222.32 709.239,1219.69 709.825,1221.96 710.411,1221.9 710.998,1220.53 711.584,1220.38 712.171,1222.45 712.757,1223.44 713.344,1222.04 713.93,1222.89 714.516,1220.25 715.103,1225.68 715.689,1223.96 716.276,1226.77 716.862,1227.4 717.448,1226.94 718.035,1224.12 718.621,1222.52 719.208,1218.86 719.794,1216.35 720.38,1215.27 720.967,1214.08 721.553,1214.37 722.14,1214.25 722.726,1216.63 723.313,1215.38 723.899,1215.23 724.485,1213.1 725.072,1214.38 725.658,1215.58 726.245,1216.69 726.831,1216.62 727.417,1217.69 728.004,1218.85 728.59,1217.53 729.177,1218.35 729.763,1219.01 730.349,1219.81 730.936,1219.7 731.522,1219.46 732.109,1219.33 732.695,1220.2 733.282,1220.02 733.868,1218.9 734.454,1218.59 735.041,1216.22 735.627,1217.34 736.214,1216.14 736.8,1217.46 737.386,1218.65 737.973,1217.32 738.559,1217.12 739.146,1214.94 739.732,1212.62 740.318,1212.72 740.905,1212.91 741.491,1211.98 742.078,1209.86 742.664,1209.07 743.251,1209.47 743.837,1207.76 744.423,1207.09 745.01,1207.39 745.596,1207.95 746.183,1210.42 746.769,1212.92 747.355,1214.11 747.942,1214.18 748.528,1215.28 749.115,1215.18 749.701,1214.12 750.288,1214.27 750.874,1215.32 751.46,1216.4 752.047,1216.39 752.633,1217.3 753.22,1214.95 753.806,1215.23 754.392,1215.21 754.979,1217.35 755.565,1217.47 756.152,1218.5 756.738,1218.34 757.324,1218.1 757.911,1217.79 758.497,1217.67 759.084,1215.39 759.67,1215.54 760.257,1215.53 760.843,1216.73 761.429,1217.75 762.016,1216.71 762.602,1216.61 763.189,1216.52 763.775,1215.01 764.361,1215.24 764.948,1215.21 765.534,1214.07 766.121,1213.16 766.707,1211.05 767.293,1211.64 767.88,1211.81 768.466,1211.93 769.053,1213.06 769.639,1211.92 770.226,1213.28 770.812,1211.18 771.398,1211.54 771.985,1211.7 772.571,1211.95 773.158,1212.24 773.744,1212.45 774.33,1213.78 774.917,1214.89 775.503,1217.12 776.09,1216.93 776.676,1216.79 777.262,1218.8 777.849,1216.32 778.435,1216.25 779.022,1216.18 779.608,1214.95 780.195,1216.26 780.781,1215.12 781.367,1214.21 781.954,1214.19 782.54,1213.95 783.127,1213.1 783.713,1214.34 784.299,1214.44 784.886,1214.4 785.472,1212.96 786.059,1213.08 786.645,1210.8 787.232,1212.14 787.818,1210.91 788.404,1211.17 788.991,1211.36 789.577,1210.39 790.164,1211.59 790.75,1212.8 791.336,1212.82 791.923,1213.94 792.509,1214.84 793.096,1216.93 793.682,1217.69 794.268,1217.41 794.855,1217.25 795.441,1215.89 796.028,1215.79 796.614,1214.6 797.201,1213.51 797.787,1214.77 798.373,1214.78 798.96,1215.81 799.546,1215.81 800.133,1216.88 800.719,1216.91 801.305,1216.88 801.892,1217.79 802.478,1217.42 803.065,1216.17 803.651,1215.06 804.237,1212.68 804.824,1214.72 805.41,1214.74 805.997,1214.69 806.583,1215.74 807.17,1214.43 807.756,1214.42 808.342,1213.41 808.929,1216.77 809.515,1216.57 810.102,1219.8 810.688,1219.65 811.274,1220.44 811.861,1220.07 812.447,1217.64 813.034,1218.51 813.62,1217.13 814.206,1218.05 814.793,1216.64 815.379,1216.57 815.966,1217.66 816.552,1217.47 817.139,1216.18 817.725,1217.14 818.311,1214.53 818.898,1215.37 819.484,1212.91 820.071,1216.26 820.657,1219.61 821.243,1218.29 821.83,1218.12 822.416,1217.99 823.003,1218.62 823.589,1218.27 824.175,1215.94 824.762,1214.85 825.348,1213.68 825.935,1211.35 826.521,1210.28 827.108,1209.27 827.694,1209.71 828.28,1210.83 828.867,1207.52 829.453,1208.89 830.04,1209.4 830.626,1210.71 831.212,1210 831.799,1211.43 832.385,1213.77 832.972,1214.06 833.558,1214.29 834.145,1215.36 834.731,1218.66 835.317,1218.19 835.904,1216.93 836.49,1218.98 837.077,1217.57 837.663,1217.25 838.249,1216.02 838.836,1214.87 839.422,1217.08 840.009,1217.98 840.595,1218.63 841.181,1219.4 841.768,1221.49 842.354,1221.15 842.941,1220.76 843.527,1220.68 844.114,1221.47 844.7,1218.92 845.286,1218.67 845.873,1220.54 846.459,1218.93 847.046,1218.72 847.632,1218.48 848.218,1219.5 848.805,1216.87 849.391,1215.3 849.978,1215.4 850.564,1214.21 851.15,1213.01 851.737,1210.38 852.323,1211.73 852.91,1209.72 853.496,1208.91 854.083,1210.25 854.669,1211.32 855.255,1211.38 855.842,1210.37 856.428,1209.54 857.015,1210.9 857.601,1214.25 858.187,1214.15 858.774,1215.31 859.36,1214.32 859.947,1219.71 860.533,1218.12 861.119,1217.73 861.706,1216.21 862.292,1215.04 862.879,1213.87 863.465,1212.69 864.052,1212.91 864.638,1213 865.224,1212.96 865.811,1210.84 866.397,1210.92 866.984,1209.87 867.57,1209.03 868.156,1206.94 868.743,1208.47 869.329,1208.64 869.916,1207.81 870.502,1211.33 871.089,1211.37 871.675,1212.86 872.261,1210.54 872.848,1210.61 873.434,1210.69 874.021,1212.02 874.607,1210.78 875.193,1209.83 875.78,1212.13 876.366,1212.24 876.953,1212.14 877.539,1211.23 878.125,1210.09 878.712,1211.15 879.298,1211.08 879.885,1211.33 880.471,1210.36 881.058,1208.28 881.644,1206.43 882.23,1205.58 882.817,1208.35 883.403,1209.76 883.99,1211.18 884.576,1211.41 885.162,1212.65 885.749,1212.57 886.335,1212.79 886.922,1209.36 887.508,1209.52 888.094,1208.71 888.681,1210.1 889.267,1210.39 889.854,1211.83 890.44,1211.76 891.027,1210.83 891.613,1209.74 892.199,1211.14 892.786,1209.97 893.372,1211.18 893.959,1211.56 894.545,1213.89 895.131,1215.16 895.718,1212.64 896.304,1213.94 896.891,1212.79 897.477,1213.69 898.063,1213.93 898.65,1217.37 899.236,1215.86 899.823,1216.58 900.409,1216.17 900.996,1218.25 901.582,1217.91 902.168,1218.82 902.755,1216.18 903.341,1216.87 903.928,1214.34 904.514,1211.85 905.1,1214.32 905.687,1215.37 906.273,1215.43 906.86,1216.44 907.446,1215.12 908.032,1211.6 908.619,1209.37 909.205,1211.9 909.792,1210.72 910.378,1210.82 910.965,1209.72 911.551,1212.07 912.137,1212.07 912.724,1213.23 913.31,1213.16 913.897,1213.06 914.483,1212.12 915.069,1213.29 915.656,1213.28 916.242,1210.9 916.829,1211.11 917.415,1213.6 918.002,1213.31 918.588,1214.24 919.174,1216.18 919.761,1214.8 920.347,1214.42 920.934,1214.4 921.52,1213.21 922.106,1212.1 922.693,1213.21 923.279,1212.01 923.866,1213.19 924.452,1211.14 925.038,1211.34 925.625,1212.61 926.211,1211.38 926.798,1208.2 927.384,1207.24 927.971,1209.65 928.557,1209.78 929.143,1207.58 929.73,1205.63 930.316,1208.17 930.903,1208.33 931.489,1209.66 932.075,1208.53 932.662,1210.96 933.248,1212.3 933.835,1210.02 934.421,1208.84 935.007,1208.98 935.594,1212.55 936.18,1212.25 936.767,1214.37 937.353,1211.79 937.94,1212 938.526,1211.98 939.112,1213.53 939.699,1215.68 940.285,1215.39 940.872,1212.96 941.458,1212.79 942.044,1210.5 942.631,1212.89 943.217,1210.77 943.804,1209.81 944.39,1211.19 944.976,1211.21 945.563,1210.94 946.149,1208.82 946.736,1208.99 947.322,1208 947.909,1207.23 948.495,1208.84 949.081,1210.03 949.668,1210.12 950.254,1210.14 950.841,1210.43 951.427,1210.53 952.013,1212.78 952.6,1212.63 953.186,1212.81 953.773,1213.87 954.359,1213.87 954.945,1213.8 955.532,1214.87 956.118,1214.82 956.705,1214.67 957.291,1215.74 957.878,1217.98 958.464,1216.75 959.05,1215.48 959.637,1216.16 960.223,1217.09 960.81,1216.89 961.396,1216.72 961.982,1218.82 962.569,1216.27 963.155,1215.36 963.742,1215.18 964.328,1214.95 964.915,1215.83 965.501,1214.53 966.087,1214.53 966.674,1213.2 967.26,1214.17 967.847,1212.93 968.433,1212.92 969.019,1213.08 969.606,1211.97 970.192,1210.87 970.779,1210.75 971.365,1213.02 971.951,1215.19 972.538,1217.21 973.124,1216.89 973.711,1215.5 974.297,1217.44 974.884,1216.1 975.47,1214.68 976.056,1216.65 976.643,1215.31 977.229,1215.09 977.816,1212.72 978.402,1212.62 978.988,1211.5 979.575,1210.47 980.161,1210.59 980.748,1210.46 981.334,1211.47 981.92,1211.64 982.507,1212.97 983.093,1212.9 983.68,1211.79 984.266,1209.52 984.853,1211.89 985.439,1209.75 986.025,1209.78 986.612,1212.12 987.198,1213.19 987.785,1212.09 988.371,1211.12 988.957,1211.23 989.544,1208 990.13,1208.19 990.717,1208.27 991.303,1209.66 991.889,1205.19 992.476,1204.51 993.062,1205.02 993.649,1205.5 994.235,1211.5 994.822,1211.46 995.408,1212.42 995.994,1212.21 996.581,1213.2 997.167,1214.18 997.754,1212.82 998.34,1213.79 998.926,1212.44 999.513,1211.62 1000.1,1211.77 1000.69,1211.8 1001.27,1211.94 1001.86,1208.64 1002.44,1208.72 1003.03,1213.28 1003.62,1211.83 1004.2,1214.07 1004.79,1213.01 1005.38,1211.9 1005.96,1211.75 1006.55,1210.52 1007.14,1209.46 1007.72,1207.44 1008.31,1208.72 1008.9,1209.91 1009.48,1213.48 1010.07,1212.21 1010.65,1212.16 1011.24,1211.11 1011.83,1212.47 1012.41,1212.53 1013,1212.47 1013.59,1213.62 1014.17,1213.46 1014.76,1212.37 1015.35,1212.41 1015.93,1210.93 1016.52,1213.26 1017.11,1214.1 1017.69,1214.17 1018.28,1216.32 1018.86,1218.38 1019.45,1218.03 1020.04,1218.72 1020.62,1220.51 1021.21,1219.95 1021.8,1219.42 1022.38,1220.07 1022.97,1216.49 1023.56,1218.67 1024.14,1221.44 1024.73,1222.89 1025.32,1222.37 1025.9,1223.12 1026.49,1220.49 1027.07,1220.19 1027.66,1219.74 1028.25,1219.09 1028.83,1219.9 1029.42,1222.83 1030.01,1221.23 1030.59,1220.63 1031.18,1220.4 1031.77,1219.03 1032.35,1217.51 1032.94,1218.36 1033.52,1219.5 1034.11,1220.25 1034.7,1218.54 1035.28,1217.34 1035.87,1216.02 1036.46,1214.44 1037.04,1217.33 1037.63,1213.39 1038.22,1212 1038.8,1208.48 1039.39,1207.64 1039.98,1207.88 1040.56,1211.49 1041.15,1212.56 1041.73,1213.69 1042.32,1212.51 1042.91,1212.38 1043.49,1212.46 1044.08,1213.2 1044.67,1214.05 1045.25,1214.99 1045.84,1214.71 1046.43,1215.87 1047.01,1217.94 1047.6,1218.84 1048.19,1218.52 1048.77,1219.21 1049.36,1218.73 1049.94,1215.2 1050.53,1211.47 1051.12,1210.53 1051.7,1209.28 1052.29,1209.46 1052.88,1210.68 1053.46,1209.76 1054.05,1208.84 1054.64,1207.76 1055.22,1207.19 1055.81,1207.48 1056.39,1204.33 1056.98,1204.62 1057.57,1205.11 1058.15,1203.17 1058.74,1203.69 1059.33,1205.2 1059.91,1206.89 1060.5,1204.99 1061.09,1204.31 1061.67,1204.9 1062.26,1204.02 1062.85,1204.26 1063.43,1204.74 1064.02,1205.08 1064.6,1206.41 1065.19,1206.61 1065.78,1207.98 1066.36,1210.51 1066.95,1211.91 1067.54,1213.01 1068.12,1211.77 1068.71,1211.83 1069.3,1214.13 1069.88,1216.32 1070.47,1217.4 1071.06,1216.21 1071.64,1217.09 1072.23,1215.85 1072.81,1217.92 1073.4,1216.69 1073.99,1216.48 1074.57,1216.24 1075.16,1218.1 1075.75,1216.79 1076.33,1216.61 1076.92,1217.22 1077.51,1216.99 1078.09,1218.99 1078.68,1220.87 1079.26,1219.49 1079.85,1216.67 1080.44,1216.14 1081.02,1217.87 1081.61,1218.71 1082.2,1218.33 1082.78,1215.7 1083.37,1214.38 1083.96,1214.02 1084.54,1217.17 1085.13,1215.74 1085.72,1216.85 1086.3,1216.67 1086.89,1217.66 1087.47,1217.42 1088.06,1214.91 1088.65,1213.41 1089.23,1214.38 1089.82,1217.62 1090.41,1215.2 1090.99,1212.86 1091.58,1214.11 1092.17,1212.9 1092.75,1211.67 1093.34,1211.53 1093.93,1211.49 1094.51,1212.5 1095.1,1212.17 1095.68,1211.94 1096.27,1211.92 1096.86,1214.25 1097.44,1215.14 1098.03,1213.73 1098.62,1217.02 1099.2,1219.1 1099.79,1219.69 1100.38,1217.06 1100.96,1216.69 1101.55,1218.5 1102.14,1214.62 1102.72,1215.55 1103.31,1217.5 1103.89,1218.21 1104.48,1218.78 1105.07,1217.33 1105.65,1218.42 1106.24,1219.16 1106.83,1219.73 1107.41,1218.14 1108,1213.48 1108.59,1211.22 1109.17,1209.25 1109.76,1210.1 1110.34,1213.32 1110.93,1209.91 1111.52,1206.63 1112.1,1206.82 1112.69,1205.92 1113.28,1206.35 1113.86,1206.79 1114.45,1208.03 1115.04,1209.45 1115.62,1208.48 1116.21,1204.23 1116.8,1204.44 1117.38,1206.72 1117.97,1207.93 1118.55,1208.16 1119.14,1208.21 1119.73,1209.46 1120.31,1210.3 1120.9,1210.72 1121.49,1212.08 1122.07,1211.27 1122.66,1209.14 1123.25,1211.45 1123.83,1208.17 1124.42,1209.51 1125.01,1207.49 1125.59,1206.42 1126.18,1207.85 1126.76,1210.36 1127.35,1211.49 1127.94,1211.46 1128.52,1214.86 1129.11,1214.52 1129.7,1214.24 1130.28,1214.17 1130.87,1215.21 1131.46,1211.51 1132.04,1211.35 1132.63,1210.27 1133.21,1209.35 1133.8,1211.48 1134.39,1210.39 1134.97,1211.6 1135.56,1211.75 1136.15,1211.76 1136.73,1209.54 1137.32,1210.87 1137.91,1210.99 1138.49,1210.88 1139.08,1208.8 1139.67,1209.08 1140.25,1208.01 1140.84,1208.15 1141.42,1209.65 1142.01,1208.58 1142.6,1207.5 1143.18,1206.68 1143.77,1202.42 1144.36,1201.83 1144.94,1200.17 1145.53,1203.02 1146.12,1203.43 1146.7,1204.1 1147.29,1204.63 1147.88,1206.28 1148.46,1207.7 1149.05,1209.12 1149.63,1211.49 1150.22,1210.32 1150.81,1210.44 1151.39,1210.64 1151.98,1213.04 1152.57,1210.69 1153.15,1213 1153.74,1212.98 1154.33,1214.03 1154.91,1214.97 1155.5,1215.04 1156.09,1216.04 1156.67,1215.79 1157.26,1215.87 1157.84,1216.84 1158.43,1217.53 1159.02,1216.28 1159.6,1216.19 1160.19,1213.76 1160.78,1211.33 1161.36,1213.57 1161.95,1212.29 1162.54,1212.26 1163.12,1212.18 1163.71,1214.36 1164.29,1213 1164.88,1215.14 1165.47,1216.22 1166.05,1215.16 1166.64,1214.21 1167.23,1215.41 1167.81,1217.32 1168.4,1216.98 1168.99,1218.57 1169.57,1217.05 1170.16,1218.88 1170.75,1217.5 1171.33,1218.36 1171.92,1216.97 1172.5,1216.86 1173.09,1217.64 1173.68,1217.4 1174.26,1217.01 1174.85,1214.76 1175.44,1213.53 1176.02,1212.4 1176.61,1212.25 1177.2,1212.16 1177.78,1212.01 1178.37,1213.03 1178.96,1210.83 1179.54,1209.96 1180.13,1206.59 1180.71,1211.2 1181.3,1210.98 1181.89,1210.01 1182.47,1209.05 1183.06,1209.22 1183.65,1212.78 1184.23,1211.59 1184.82,1212.57 1185.41,1212.44 1185.99,1212.26 1186.58,1213.24 1187.16,1212.05 1187.75,1209.97 1188.34,1208.61 1188.92,1209.9 1189.51,1210.23 1190.1,1209.25 1190.68,1209.22 1191.27,1209.08 1191.86,1210.27 1192.44,1209.36 1193.03,1209.49 1193.62,1206.46 1194.2,1208.97 1194.79,1205.79 1195.37,1206.18 1195.96,1205.36 1196.55,1204.5 1197.13,1204.85 1197.72,1206.52 1198.31,1206.74 1198.89,1206 1199.48,1205.15 1200.07,1205.29 1200.65,1206.59 1201.24,1205.67 1201.83,1208.25 1202.41,1208.52 1203,1206.39 1203.58,1207.56 1204.17,1207.89 1204.76,1208.85 1205.34,1208.96 1205.93,1210.4 1206.52,1210.35 1207.1,1208.2 1207.69,1210.85 1208.28,1213.2 1208.86,1215.45 1209.45,1215.27 1210.03,1215.13 1210.62,1214.75 1211.21,1213.61 1211.79,1214.54 1212.38,1213.17 1212.97,1212.12 1213.55,1210.91 1214.14,1213.1 1214.73,1210.82 1215.31,1210.51 1215.9,1211.65 1216.49,1212.72 1217.07,1212.53 1217.66,1213.54 1218.24,1215.83 1218.83,1216.64 1219.42,1218.45 1220,1218.13 1220.59,1216.57 1221.18,1215.01 1221.76,1213.47 1222.35,1215.67 1222.94,1215.69 1223.52,1217.69 1224.11,1216.47 1224.7,1213.94 1225.28,1214.92 1225.87,1212.42 1226.45,1214.54 1227.04,1212.06 1227.63,1211.03 1228.21,1211.21 1228.8,1210.16 1229.39,1211.38 1229.97,1213.37 1230.56,1211.03 1231.15,1209.76 1231.73,1213.2 1232.32,1211.83 1232.91,1208.37 1233.49,1207.43 1234.08,1205.39 1234.66,1206.76 1235.25,1210.55 1235.84,1207.26 1236.42,1208.25 1237.01,1211.83 1237.6,1210.94 1238.18,1209.97 1238.77,1210.08 1239.36,1210.05 1239.94,1210.15 1240.53,1211.38 1241.11,1212.28 1241.7,1211.12 1242.29,1210.04 1242.87,1212.36 1243.46,1211.39 1244.05,1210.26 1244.63,1210.48 1245.22,1211.54 1245.81,1210.45 1246.39,1211.43 1246.98,1212.78 1247.57,1212.71 1248.15,1210.56 1248.74,1211.99 1249.32,1211.97 1249.91,1213.04 1250.5,1212.97 1251.08,1214.22 1251.67,1214.26 1252.26,1216.34 1252.84,1218.44 1253.43,1219.26 1254.02,1217.5 1254.6,1215.83 1255.19,1214.5 1255.78,1214.56 1256.36,1213.41 1256.95,1215.57 1257.53,1214.15 1258.12,1214.1 1258.71,1212.85 1259.29,1214.85 1259.88,1213.39 1260.47,1213.07 1261.05,1212.9 1261.64,1213.18 1262.23,1212.02 1262.81,1210.58 1263.4,1208.32 1263.98,1210.57 1264.57,1212.81 1265.16,1211.65 1265.74,1211.84 1266.33,1210.59 1266.92,1209.32 1267.5,1206.07 1268.09,1206.38 1268.68,1207.72 1269.26,1206.81 1269.85,1209.36 1270.44,1207.21 1271.02,1208.61 1271.61,1209.92 1272.19,1210.11 1272.78,1211.13 1273.37,1212.45 1273.95,1214.54 1274.54,1215.54 1275.13,1214.27 1275.71,1212.12 1276.3,1213.16 1276.89,1211.98 1277.47,1214.24 1278.06,1215.11 1278.65,1211.78 1279.23,1210.62 1279.82,1210.59 1280.4,1212 1280.99,1215.36 1281.58,1213.94 1282.16,1212.68 1282.75,1211.68 1283.34,1212.87 1283.92,1212.7 1284.51,1213.76 1285.1,1214.62 1285.68,1215.56 1286.27,1215.33 1286.86,1216.29 1287.44,1214.98 1288.03,1214.64 1288.61,1215.86 1289.2,1216.67 1289.79,1216.49 1290.37,1216.45 1290.96,1216.07 1291.55,1216.86 1292.13,1214.27 1292.72,1213.05 1293.31,1213.96 1293.89,1214.82 1294.48,1215.96 1295.06,1214.6 1295.65,1211.14 1296.24,1211.18 1296.82,1211.02 1297.41,1212.2 1298,1212.31 1298.58,1209.9 1299.17,1211.17 1299.76,1211.25 1300.34,1213.53 1300.93,1213.34 1301.52,1213.04 1302.1,1214.01 1302.69,1211.79 1303.27,1211.73 1303.86,1212.68 1304.45,1211.54 1305.03,1212.62 1305.62,1214.72 1306.21,1216.62 1306.79,1215.15 1307.38,1216.01 1307.97,1216.09 1308.55,1214.88 1309.14,1215.71 1309.73,1214.58 1310.31,1214.33 1310.9,1213.02 1311.48,1213.97 1312.07,1213.78 1312.66,1212.58 1313.24,1210.13 1313.83,1209.02 1314.42,1209.3 1315,1207.3 1315.59,1209.58 1316.18,1207.5 1316.76,1205.56 1317.35,1207 1317.93,1208.39 1318.52,1208.46 1319.11,1208.69 1319.69,1209.91 1320.28,1210.1 1320.87,1210.23 1321.45,1209.11 1322.04,1210.28 1322.63,1209.22 1323.21,1210.4 1323.8,1208.12 1324.39,1207.16 1324.97,1208.65 1325.56,1207.93 1326.14,1207.86 1326.73,1208.2 1327.32,1207.37 1327.9,1206.51 1328.49,1210.24 1329.08,1212.57 1329.66,1210.43 1330.25,1209.26 1330.84,1208.54 1331.42,1205.11 1332.01,1204.1 1332.6,1203.2 1333.18,1202.58 1333.77,1202.8 1334.35,1204.32 1334.94,1203.7 1335.53,1202.88 1336.11,1203.56 1336.7,1201.83 1337.29,1202.32 1337.87,1202.65 1338.46,1203.04 1339.05,1200.98 1339.63,1201.91 1340.22,1202.31 1340.8,1203.78 1341.39,1204.07 1341.98,1203.42 1342.56,1206.32 1343.15,1207.62 1343.74,1207.85 1344.32,1208.89 1344.91,1207.82 1345.5,1206.85 1346.08,1208.04 1346.67,1208.37 1347.26,1209.7 1347.84,1212.19 1348.43,1214.43 1349.01,1213.09 1349.6,1214.03 1350.19,1211.74 1350.77,1210.78 1351.36,1214.14 1351.95,1216.2 1352.53,1218.21 1353.12,1216.8 1353.71,1216.6 1354.29,1216.27 1354.88,1216.87 1355.47,1215.41 1356.05,1215.29 1356.64,1217.17 1357.22,1213.84 1357.81,1212.69 1358.4,1211.6 1358.98,1209.51 1359.57,1210.79 1360.16,1209.73 1360.74,1209.91 1361.33,1208.67 1361.92,1210.03 1362.5,1209.08 1363.09,1207.87 1363.68,1204.84 1364.26,1206.54 1364.85,1206.82 1365.43,1205.93 1366.02,1205.11 1366.61,1206.5 1367.19,1205.73 1367.78,1205.96 1368.37,1203.01 1368.95,1203.52 1369.54,1203.94 1370.13,1204.34 1370.71,1203.62 1371.3,1205.37 1371.88,1208.86 1372.47,1206.72 1373.06,1205.82 1373.64,1204.76 1374.23,1205.06 1374.82,1207.63 1375.4,1206.82 1375.99,1205.91 1376.58,1206.51 1377.16,1207.67 1377.75,1205.59 1378.34,1205.76 1378.92,1204.07 1379.51,1203.24 1380.09,1202.56 1380.68,1202.78 1381.27,1205.62 1381.85,1207.15 1382.44,1206.17 1383.03,1208.76 1383.61,1207.94 1384.2,1207.93 1384.79,1207 1385.37,1206.15 1385.96,1207.67 1386.55,1211.15 1387.13,1209.05 1387.72,1210.29 1388.3,1209.4 1388.89,1210.61 1389.48,1210.71 1390.06,1209.51 1390.65,1210.8 1391.24,1213.25 1391.82,1214.38 1392.41,1214.39 1393,1217.65 1393.58,1216.13 1394.17,1213.74 1394.75,1217.07 1395.34,1215.84 1395.93,1213.51 1396.51,1215.53 1397.1,1215.25 1397.69,1216.31 1398.27,1217.27 1398.86,1218 1399.45,1218.7 1400.03,1220.38 1400.62,1219.99 1401.21,1218.44 1401.79,1218.15 1402.38,1217.78 1402.96,1221.86 1403.55,1220.41 1404.14,1216.55 1404.72,1217.44 1405.31,1218.21 1405.9,1218.83 1406.48,1216.1 1407.07,1215.84 1407.66,1217.79 1408.24,1217.41 1408.83,1219.46 1409.42,1218.9 1410,1218.56 1410.59,1218.09 1411.17,1217.86 1411.76,1218.65 1412.35,1221.48 1412.93,1220.91 1413.52,1221.63 1414.11,1220.19 1414.69,1221.55 1415.28,1223.16 1415.87,1223.63 1416.45,1220.67 1417.04,1219.98 1417.63,1221.59 1418.21,1219.94 1418.8,1218.29 1419.38,1216.78 1419.97,1219.94 1420.56,1220.84 1421.14,1220.28 1421.73,1217.41 1422.32,1217.94 1422.9,1216.61 1423.49,1216.05 1424.08,1213.47 1424.66,1212.35 1425.25,1212.29 1425.83,1211.07 1426.42,1210.92 1427.01,1212.07 1427.59,1211.92 1428.18,1212.78 1428.77,1213.79 1429.35,1214.63 1429.94,1214.29 1430.53,1212.98 1431.11,1210.61 1431.7,1209.57 1432.29,1208.52 1432.87,1208.59 1433.46,1208.94 1434.04,1209.16 1434.63,1210.53 1435.22,1209.49 1435.8,1208.75 1436.39,1209.06 1436.98,1209.45 1437.56,1207.46 1438.15,1207.69 1438.74,1208.13 1439.32,1209.46 1439.91,1211.91 1440.5,1208.5 1441.08,1209.82 1441.67,1210 1442.25,1208.13 1442.84,1208.39 1443.43,1208.57 1444.01,1209.74 1444.6,1209.85 1445.19,1211.04 1445.77,1210.87 1446.36,1210.62 1446.95,1209.57 1447.53,1209.59 1448.12,1209.49 1448.7,1208.2 1449.29,1209.39 1449.88,1209.63 1450.46,1208.43 1451.05,1207.58 1451.64,1207.62 1452.22,1204.7 1452.81,1205.02 1453.4,1205.37 1453.98,1205.63 1454.57,1204.9 1455.16,1203.13 1455.74,1204.3 1456.33,1203.67 1456.91,1204.23 1457.5,1202.57 1458.09,1203.06 1458.67,1201.53 1459.26,1201.97 1459.85,1204.89 1460.43,1204.31 1461.02,1208.13 1461.61,1207.21 1462.19,1207.33 1462.78,1206.49 1463.37,1208.03 1463.95,1207.26 1464.54,1206.27 1465.12,1208.85 1465.71,1207.72 1466.3,1206.87 1466.88,1207.19 1467.47,1207.42 1468.06,1207.71 1468.64,1206.95 1469.23,1207.55 1469.82,1208.95 1470.4,1208.12 1470.99,1208.26 1471.57,1207.39 1472.16,1208.61 1472.75,1211.11 1473.33,1211.44 1473.92,1211.18 1474.51,1211.29 1475.09,1211.05 1475.68,1209.96 1476.27,1210.19 1476.85,1210.08 1477.44,1212.23 1478.03,1213.19 1478.61,1213.09 1479.2,1214.37 1479.78,1216.44 1480.37,1216.31 1480.96,1219.44 1481.54,1221.12 1482.13,1219.71 1482.72,1216.01 1483.3,1215.76 1483.89,1215.78 1484.48,1216.63 1485.06,1215.55 1485.65,1214.31 1486.24,1214.25 1486.82,1215.11 1487.41,1216.18 1487.99,1214.72 1488.58,1214.51 1489.17,1216.63 1489.75,1215.28 1490.34,1213.79 1490.93,1213.6 1491.51,1214.64 1492.1,1215.67 1492.69,1216.44 1493.27,1215.07 1493.86,1213.79 1494.45,1214.76 1495.03,1216.74 1495.62,1218.61 1496.2,1217.3 1496.79,1215.98 1497.38,1213.45 1497.96,1211.2 1498.55,1210.1 1499.14,1209.14 1499.72,1209.26 1500.31,1211.57 1500.9,1210.41 1501.48,1211.37 1502.07,1210.17 1502.65,1213.76 1503.24,1214.61 1503.83,1209.88 1504.41,1208.84 1505,1208.76 1505.59,1209.31 1506.17,1210.59 1506.76,1210.76 1507.35,1210.83 1507.93,1213.04 1508.52,1213.12 1509.11,1213.08 1509.69,1216.24 1510.28,1216.93 1510.86,1217.85 1511.45,1217.51 1512.04,1217.18 1512.62,1216.94 1513.21,1216.61 1513.8,1215.32 1514.38,1215.19 1514.97,1215.98 1515.56,1216.75 1516.14,1215.41 1516.73,1215.24 1517.32,1212.85 1517.9,1213.72 1518.49,1212.36 1519.07,1211.01 1519.66,1212.17 1520.25,1213.08 1520.83,1214.32 1521.42,1216.31 1522.01,1215.94 1522.59,1215.36 1523.18,1214.12 1523.77,1210.86 1524.35,1207.82 1524.94,1206.87 1525.52,1203.97 1526.11,1203.22 1526.7,1204.63 1527.28,1204.98 1527.87,1205.19 1528.46,1203.14 1529.04,1203.41 1529.63,1205.72 1530.22,1207.27 1530.8,1207.6 1531.39,1207.79 1531.98,1206.9 1532.56,1209.62 1533.15,1208.29 1533.73,1209.59 1534.32,1209.68 1534.91,1208.79 1535.49,1212.2 1536.08,1213.5 1536.67,1215.54 1537.25,1215.22 1537.84,1215.09 1538.43,1213.99 1539.01,1211.76 1539.6,1214.08 1540.19,1215.28 1540.77,1215 1541.36,1214.84 1541.94,1213.38 1542.53,1212.05 1543.12,1210.68 1543.7,1211.78 1544.29,1209.39 1544.88,1209.41 1545.46,1211.85 1546.05,1210.81 1546.64,1208.59 1547.22,1207.42 1547.81,1207.66 1548.4,1207.82 1548.98,1208.06 1549.57,1205.01 1550.15,1206.44 1550.74,1207.98 1551.33,1210.59 1551.91,1212.93 1552.5,1210.93 1553.09,1211.09 1553.67,1213.45 1554.26,1210 1554.85,1208.7 1555.43,1205.43 1556.02,1204.6 1556.6,1204.99 1557.19,1204.01 1557.78,1203.1 1558.36,1202.81 1558.95,1202.99 1559.54,1206.54 1560.12,1209.09 1560.71,1210.25 1561.3,1210.32 1561.88,1212.69 1562.47,1212.63 1563.06,1212.82 1563.64,1213.95 1564.23,1211.63 1564.81,1210.55 1565.4,1210.67 1565.99,1212.93 1566.57,1215 1567.16,1214.64 1567.75,1213.45 1568.33,1213.2 1568.92,1212.03 1569.51,1214.38 1570.09,1214.28 1570.68,1214.22 1571.27,1210.69 1571.85,1208.25 1572.44,1208.39 1573.02,1207.7 1573.61,1210.43 1574.2,1208.14 1574.78,1210.68 1575.37,1210.8 1575.96,1210.82 1576.54,1211.77 1577.13,1211.76 1577.72,1209.6 1578.3,1209.01 1578.89,1206.88 1579.47,1207.1 1580.06,1207.36 1580.65,1207.73 1581.23,1211.14 1581.82,1212.43 1582.41,1214.6 1582.99,1215.52 1583.58,1215.41 1584.17,1213.01 1584.75,1211.91 1585.34,1210.83 1585.93,1209.57 1586.51,1211.87 1587.1,1210.88 1587.68,1208.62 1588.27,1212.25 1588.86,1213.31 1589.44,1212.07 1590.03,1211.89 1590.62,1211.88 1591.2,1214.25 1591.79,1213.03 1592.38,1212.93 1592.96,1215.14 1593.55,1213.76 1594.14,1213.63 1594.72,1213.22 1595.31,1213.26 1595.89,1213.02 1596.48,1212.84 1597.07,1213.86 1597.65,1213.62 1598.24,1214.64 1598.83,1213.37 1599.41,1215.4 1600,1215.13 1600.59,1215.04 1601.17,1214.92 1601.76,1215.85 1602.34,1213.54 1602.93,1212.44 1603.52,1210.21 1604.1,1210.17 1604.69,1212.68 1605.28,1213.71 1605.86,1214.74 1606.45,1215.5 1607.04,1215.21 1607.62,1216.35 1608.21,1213.74 1608.8,1214.78 1609.38,1214.46 1609.97,1213.07 1610.55,1212.95 1611.14,1210.44 1611.73,1213.71 1612.31,1215.86 1612.9,1215.68 1613.49,1215.48 1614.07,1215.29 1614.66,1211.85 1615.25,1210.48 1615.83,1209.52 1616.42,1210.9 1617.01,1207.89 1617.59,1209.42 1618.18,1209.82 1618.76,1212.21 1619.35,1212.06 1619.94,1210.97 1620.52,1209.7 1621.11,1208.59 1621.7,1209.08 1622.28,1211.55 1622.87,1211.71 1623.46,1213.74 1624.04,1215.81 1624.63,1216.86 1625.22,1213.54 1625.8,1216.97 1626.39,1216.72 1626.97,1216.4 1627.56,1220.28 1628.15,1221.89 1628.73,1221.2 1629.32,1220.84 1629.91,1222.43 1630.49,1225.07 1631.08,1223.29 1631.67,1222.78 1632.25,1221.11 1632.84,1220.76 1633.42,1217.96 1634.01,1217.64 1634.6,1214.94 1635.18,1214.62 1635.77,1215.45 1636.36,1215.52 1636.94,1217.62 1637.53,1217.29 1638.12,1215.73 1638.7,1216.74 1639.29,1217.5 1639.88,1216.29 1640.46,1215.05 1641.05,1213.55 1641.63,1214.48 1642.22,1214.51 1642.81,1215.54 1643.39,1215.32 1643.98,1214.92 1644.57,1212.44 1645.15,1213.49 1645.74,1212.24 1646.33,1210.38 1646.91,1210.49 1647.5,1208.24 1648.09,1207.01 1648.67,1205.04 1649.26,1206.52 1649.84,1206.96 1650.43,1207.02 1651.02,1204.71 1651.6,1206.12 1652.19,1204.22 1652.78,1203.57 1653.36,1203.83 1653.95,1204.43 1654.54,1206.02 1655.12,1207.47 1655.71,1206.83 1656.29,1207.23 1656.88,1207.55 1657.47,1207.62 1658.05,1208.81 1658.64,1207.57 1659.23,1208.82 1659.81,1207.9 1660.4,1208.17 1660.99,1207.29 1661.57,1206.38 1662.16,1205.48 1662.75,1205.75 1663.33,1204.97 1663.92,1205.16 1664.5,1205.63 1665.09,1208.27 1665.68,1208.25 1666.26,1209.3 1666.85,1209.6 1667.44,1211.81 1668.02,1211.96 1668.61,1212.09 1669.2,1212.28 1669.78,1212.03 1670.37,1211.92 1670.96,1210.96 1671.54,1210.86 1672.13,1209.91 1672.71,1211.17 1673.3,1208.91 1673.89,1208.21 1674.47,1205.96 1675.06,1208.4 1675.65,1207.57 1676.23,1207.74 1676.82,1207.06 1677.41,1208.55 1677.99,1208.79 1678.58,1208.8 1679.17,1209.03 1679.75,1209.32 1680.34,1208.11 1680.92,1209.42 1681.51,1208.55 1682.1,1207.69 1682.68,1206.82 1683.27,1205.78 1683.86,1206.19 1684.44,1209.87 1685.03,1209.76 1685.62,1208.66 1686.2,1207.7 1686.79,1207.71 1687.37,1208.92 1687.96,1211.31 1688.55,1214.62 1689.13,1218.98 1689.72,1216.42 1690.31,1216.35 1690.89,1217.12 1691.48,1217.02 1692.07,1213.43 1692.65,1213.31 1693.24,1212.11 1693.83,1214.25 1694.41,1214.1 1695,1213.9 1695.58,1213.92 1696.17,1214.85 1696.76,1213.53 1697.34,1214.47 1697.93,1214.35 1698.52,1215.27 1699.1,1213.85 1699.69,1211.42 1700.28,1210.29 1700.86,1212.67 1701.45,1211.52 1702.04,1210.4 1702.62,1211.63 1703.21,1212.88 1703.79,1215.28 1704.38,1212.74 1704.97,1212.73 1705.55,1213.76 1706.14,1212.28 1706.73,1211.38 1707.31,1210.49 1707.9,1209.6 1708.49,1208.69 1709.07,1208.53 1709.66,1208.92 1710.24,1208.98 1710.83,1208.11 1711.42,1207.1 1712,1205.05 1712.59,1204.22 1713.18,1204.61 1713.76,1206.13 1714.35,1202.93 1714.94,1201.92 1715.52,1202.73 1716.11,1203.27 1716.7,1202.97 1717.28,1203.25 1717.87,1204.83 1718.45,1206.36 1719.04,1206.57 1719.63,1206.52 1720.21,1206.73 1720.8,1206.79 1721.39,1208.19 1721.97,1208.29 1722.56,1206.52 1723.15,1206.74 1723.73,1206.02 1724.32,1206.15 1724.91,1206.55 1725.49,1207.78 1726.08,1211.42 1726.66,1211.37 1727.25,1208.22 1727.84,1210.57 1728.42,1210.44 1729.01,1210.63 1729.6,1210.68 1730.18,1214.13 1730.77,1214.11 1731.36,1215.02 1731.94,1216.97 1732.53,1215.63 1733.11,1215.62 1733.7,1215.42 1734.29,1215.27 1734.87,1214.96 1735.46,1215.96 1736.05,1214.4 1736.63,1215.25 1737.22,1216.18 1737.81,1214.67 1738.39,1212.28 1738.98,1215.46 1739.57,1216.21 1740.15,1215.03 1740.74,1214.84 1741.32,1213.5 1741.91,1213.21 1742.5,1211.74 1743.08,1211.57 1743.67,1213.7 1744.26,1213.59 1744.84,1213.32 1745.43,1213.45 1746.02,1215.6 1746.6,1217.73 1747.19,1216.1 1747.78,1212.38 1748.36,1213.29 1748.95,1214.31 1749.53,1214.16 1750.12,1211.88 1750.71,1212.85 1751.29,1210.8 1751.88,1209.52 1752.47,1210.8 1753.05,1210.99 1753.64,1211.08 1754.23,1209.92 1754.81,1208.88 1755.4,1211.17 1755.99,1208.99 1756.57,1207.83 1757.16,1208.06 1757.74,1206.85 1758.33,1208.3 1758.92,1207.14 1759.5,1208.54 1760.09,1209.85 1760.68,1208.74 1761.26,1211.31 1761.85,1212.38 1762.44,1214.35 1763.02,1213.01 1763.61,1214.13 1764.19,1212.5 1764.78,1212.64 1765.37,1214.74 1765.95,1215.41 1766.54,1215.41 1767.13,1216.29 1767.71,1215.86 1768.3,1216.78 1768.89,1217.5 1769.47,1218.14 1770.06,1216.6 1770.65,1216.44 1771.23,1212.71 1771.82,1212.59 1772.4,1212.73 1772.99,1212.62 1773.58,1213.69 1774.16,1209.09 1774.75,1208.05 1775.34,1209.31 1775.92,1211.68 1776.51,1210.67 1777.1,1209.82 1777.68,1208.84 1778.27,1208.87 1778.86,1209.21 1779.44,1211.35 1780.03,1212.54 1780.61,1211.02 1781.2,1211.96 1781.79,1214.96 1782.37,1213.53 1782.96,1214.75 1783.55,1213.41 1784.13,1213.29 1784.72,1213.36 1785.31,1213.34 1785.89,1214.57 1786.48,1214.4 1787.06,1213.4 1787.65,1212.23 1788.24,1212.3 1788.82,1210.08 1789.41,1211.39 1790,1211.55 1790.58,1211.64 1791.17,1213.79 1791.76,1213.39 1792.34,1212.18 1792.93,1212.05 1793.52,1211.99 1794.1,1210.88 1794.69,1212.1 1795.27,1211.14 1795.86,1211.07 1796.45,1213.4 1797.03,1213.16 1797.62,1214.03 1798.21,1211.79 1798.79,1212.77 1799.38,1210.58 1799.97,1210.63 1800.55,1211.58 1801.14,1209.39 1801.73,1206.34 1802.31,1205.39 1802.9,1204.7 1803.48,1203.98 1804.07,1203.37 1804.66,1203.63 1805.24,1208.52 1805.83,1208.56 1806.42,1211.12 1807,1211.04 1807.59,1210.81 1808.18,1209.78 1808.76,1207.79 1809.35,1206.65 1809.94,1207.9 1810.52,1208.11 1811.11,1208.47 1811.69,1209.65 1812.28,1209.72 1812.87,1209.53 1813.45,1209.79 1814.04,1209.96 1814.63,1211.16 1815.21,1212.53 1815.8,1213.59 1816.39,1213.7 1816.97,1212.54 1817.56,1211.66 1818.14,1209.44 1818.73,1209.5 1819.32,1206.38 1819.9,1206.79 1820.49,1207.27 1821.08,1209.78 1821.66,1208.6 1822.25,1208.75 1822.84,1209.13 1823.42,1208.13 1824.01,1208.49 1824.6,1207.86 1825.18,1207.92 1825.77,1208.13 1826.35,1207.07 1826.94,1207.09 1827.53,1206.04 1828.11,1208.4 1828.7,1208.49 1829.29,1208.85 1829.87,1211.11 1830.46,1209.93 1831.05,1209.87 1831.63,1208.77 1832.22,1208.92 1832.81,1209.04 1833.39,1209.32 1833.98,1208.26 1834.56,1210.63 1835.15,1211.53 1835.74,1211.36 1836.32,1211.45 1836.91,1214.57 1837.5,1210.87 1838.08,1212.08 1838.67,1212.05 1839.26,1212.97 1839.84,1211.7 1840.43,1213.89 1841.01,1212.74 1841.6,1211.54 1842.19,1206.94 1842.77,1208.42 1843.36,1207.37 1843.95,1207.4 1844.53,1208.82 1845.12,1209.03 1845.71,1207.06 1846.29,1207.09 1846.88,1209.87 1847.47,1207.55 1848.05,1207.85 1848.64,1211.34 1849.22,1211.28 1849.81,1211.28 1850.4,1213.46 1850.98,1214.9 1851.57,1213.41 1852.16,1214.23 1852.74,1212.83 1853.33,1216.98 1853.92,1217.66 1854.5,1217.36 1855.09,1219.26 1855.68,1218.87 1856.26,1219.82 1856.85,1222.56 1857.43,1223.08 1858.02,1221.48 1858.61,1220.74 1859.19,1220.24 1859.78,1218.98 1860.37,1218.75 1860.95,1220.45 1861.54,1220.92 1862.13,1223.53 1862.71,1222.81 1863.3,1221.15 1863.88,1220.7 1864.47,1221.19 1865.06,1219.55 1865.64,1219.25 1866.23,1219.93 1866.82,1219.56 1867.4,1215.85 1867.99,1216.87 1868.58,1218.7 1869.16,1216.99 1869.75,1214.4 1870.34,1216.35 1870.92,1216.19 1871.51,1214.86 1872.09,1214.85 1872.68,1213.49 1873.27,1213.37 1873.85,1213.09 1874.44,1214.08 1875.03,1213.84 1875.61,1212.46 1876.2,1213.26 1876.79,1214.1 1877.37,1211.75 1877.96,1211.79 1878.55,1211.59 1879.13,1210.45 1879.72,1207.1 1880.3,1207.17 1880.89,1208.53 1881.48,1206.16 1882.06,1205.39 1882.65,1207.64 1883.24,1208.94 1883.82,1207.97 1884.41,1204.72 1885,1202.84 1885.58,1204.5 1886.17,1205.04 1886.76,1205.24 1887.34,1205.29 1887.93,1203.63 1888.51,1203.82 1889.1,1200.9 1889.69,1199.2 1890.27,1200.89 1890.86,1201.58 1891.45,1200.89 1892.03,1202.27 1892.62,1201.66 1893.21,1202.15 1893.79,1202.65 1894.38,1204.48 1894.96,1206.93 1895.55,1208.58 1896.14,1208.78 1896.72,1208.8 1897.31,1209.08 1897.9,1210.37 1898.48,1211.37 1899.07,1210.23 1899.66,1209.14 1900.24,1209.43 1900.83,1211.82 1901.42,1214.19 1902,1216.29 1902.59,1216.37 1903.17,1216.19 1903.76,1216.93 1904.35,1220.01 1904.93,1217.33 1905.52,1214.79 1906.11,1214.57 1906.69,1214.49 1907.28,1214.49 1907.87,1214.08 1908.45,1212.83 1909.04,1212.83 1909.63,1214.08 1910.21,1214.07 1910.8,1212.82 1911.38,1211.49 1911.97,1212.72 1912.56,1211.6 1913.14,1211.52 1913.73,1210.48 1914.32,1211.63 1914.9,1210.38 1915.49,1211.42 1916.08,1209.11 1916.66,1208.13 1917.25,1208.27 1917.83,1209.75 1918.42,1208.77 1919.01,1207.68 1919.59,1211.18 1920.18,1210.19 1920.77,1211.29 1921.35,1209.14 1921.94,1209.57 1922.53,1210.99 1923.11,1211.03 1923.7,1211.06 1924.29,1210.79 1924.87,1210.82 1925.46,1212.04 1926.04,1211.8 1926.63,1211.67 1927.22,1210.69 1927.8,1210.59 1928.39,1211.57 1928.98,1210.31 1929.56,1209.05 1930.15,1211.59 1930.74,1212.82 1931.32,1213.9 1931.91,1211.75 1932.5,1211.8 1933.08,1215.08 1933.67,1212.66 1934.25,1213.47 1934.84,1216.73 1935.43,1216.54 1936.01,1214.97 1936.6,1214.75 1937.19,1213.67 1937.77,1213.78 1938.36,1213.69 1938.95,1213.73 1939.53,1213.73 1940.12,1214.62 1940.71,1213.32 1941.29,1213.04 1941.88,1212.68 1942.46,1214.6 1943.05,1216.66 1943.64,1215.13 1944.22,1216 1944.81,1215.75 1945.4,1217.6 1945.98,1217.5 1946.57,1220.66 1947.16,1218.99 1947.74,1217.34 1948.33,1216.77 1948.91,1214.44 1949.5,1213.14 1950.09,1215.36 1950.67,1216.47 1951.26,1215.12 1951.85,1209.19 1952.43,1209.28 1953.02,1212.7 1953.61,1211.52 1954.19,1212.87 1954.78,1212.51 1955.37,1212.55 1955.95,1209.15 1956.54,1208.27 1957.12,1209.59 1957.71,1208.48 1958.3,1207.84 1958.88,1206.8 1959.47,1207.95 1960.06,1206.93 1960.64,1205.81 1961.23,1206.03 1961.82,1207.49 1962.4,1207.64 1962.99,1208.13 1963.58,1210.47 1964.16,1211.6 1964.75,1210.5 1965.33,1208.41 1965.92,1208.49 1966.51,1207.59 1967.09,1206.74 1967.68,1207.19 1968.27,1207.21 1968.85,1210.7 1969.44,1211.79 1970.03,1211.65 1970.61,1208.16 1971.2,1206.07 1971.78,1207.49 1972.37,1207.57 1972.96,1207.63 1973.54,1208.89 1974.13,1211.03 1974.72,1209.95 1975.3,1209.99 1975.89,1210.32 1976.48,1211.34 1977.06,1210.4 1977.65,1209.39 1978.24,1209.6 1978.82,1212.1 1979.41,1211.09 1979.99,1208.66 1980.58,1210.16 1981.17,1211.24 1981.75,1212.45 1982.34,1214.6 1982.93,1214.48 1983.51,1214.35 1984.1,1215.46 1984.69,1216.33 1985.27,1213.14 1985.86,1214.2 1986.45,1212.79 1987.03,1214.11 1987.62,1215.07 1988.2,1217.25 1988.79,1219.1 1989.38,1216.45 1989.96,1216.37 1990.55,1214.85 1991.14,1212.73 1991.72,1212.89 1992.31,1212.72 1992.9,1210.58 1993.48,1210.74 1994.07,1209.65 1994.65,1212.88 1995.24,1212.78 1995.83,1212.66 1996.41,1211.44 1997,1213.75 1997.59,1213.57 1998.17,1212.27 1998.76,1213.12 1999.35,1212.11 1999.93,1211.99 2000.52,1208.73 2001.11,1205.21 2001.69,1204.51 2002.28,1204.69 2002.86,1205.88 2003.45,1204.88 2004.04,1205.33 2004.62,1204.5 2005.21,1203.57 2005.8,1207.55 2006.38,1207.99 2006.97,1206.97 2007.56,1209.33 2008.14,1209.36 2008.73,1208.36 2009.32,1209.63 2009.9,1210.93 2010.49,1209.74 2011.07,1208.88 2011.66,1208.66 2012.25,1208.54 2012.83,1208.56 2013.42,1208.7 2014.01,1210.01 2014.59,1209.19 2015.18,1210.3 2015.77,1214.9 2016.35,1212.76 2016.94,1212.49 2017.53,1212.56 2018.11,1213.54 2018.7,1212.23 2019.28,1214.45 2019.87,1215.39 2020.46,1212.93 2021.04,1211.92 2021.63,1212.14 2022.22,1216.53 2022.8,1216.24 2023.39,1214.77 2023.98,1212.22 2024.56,1209.91 2025.15,1209.89 2025.73,1208.7 2026.32,1205.5 2026.91,1208.18 2027.49,1209.56 2028.08,1208.43 2028.67,1207.33 2029.25,1209.89 2029.84,1212.28 2030.43,1211.05 2031.01,1211.23 2031.6,1211.21 2032.19,1212.43 2032.77,1216.8 2033.36,1217.74 2033.94,1217.26 2034.53,1216.75 2035.12,1217.61 2035.7,1216.27 2036.29,1215.92 2036.88,1215.76 2037.46,1216.8 2038.05,1216.68 2038.64,1215.35 2039.22,1215.39 2039.81,1212.87 2040.4,1213.98 2040.98,1212.83 2041.57,1211.78 2042.15,1214.05 2042.74,1214.94 2043.33,1214.66 2043.91,1214.38 2044.5,1214.04 2045.09,1215.15 2045.67,1215.16 2046.26,1217.09 2046.85,1215.87 2047.43,1216.76 2048.02,1217.47 2048.6,1215.87 2049.19,1215.58 2049.78,1216.25 2050.36,1214.85 2050.95,1216.91 2051.54,1216.64 2052.12,1220.81 2052.71,1218.19 2053.3,1218.92 2053.88,1219.65 2054.47,1218.3 2055.06,1216.76 2055.64,1213.95 2056.23,1216.12 2056.81,1218.21 2057.4,1219.14 2057.99,1215.69 2058.57,1216.46 2059.16,1216.12 2059.75,1215.01 2060.33,1214.78 2060.92,1213.32 2061.51,1213.18 2062.09,1213.13 2062.68,1209.64 2063.27,1210.67 2063.85,1211.98 2064.44,1210.91 2065.02,1212.87 2065.61,1214.91 2066.2,1213.82 2066.78,1213.72 2067.37,1210.34 2067.96,1209.53 2068.54,1209.57 2069.13,1207.4 2069.72,1208.9 2070.3,1206.61 2070.89,1205.69 2071.48,1203.49 2072.06,1205.24 2072.65,1206.37 2073.23,1206.79 2073.82,1211.53 2074.41,1211.61 2074.99,1212.72 2075.58,1211.44 2076.17,1209.38 2076.75,1210.62 2077.34,1208.47 2077.93,1209.74 2078.51,1211.04 2079.1,1212.1 2079.68,1211 2080.27,1212 2080.86,1212.19 2081.44,1213.08 2082.03,1212.78 2082.62,1210.34 2083.2,1212.47 2083.79,1212.5 2084.38,1212.35 2084.96,1211.19 2085.55,1208.71 2086.14,1209.89 2086.72,1207.62 2087.31,1208.84 2087.89,1210.1 2088.48,1208.05 2089.07,1207.85 2089.65,1210.41 2090.24,1209.36 2090.83,1208.46 2091.41,1207.45 2092,1210 2092.59,1211.32 2093.17,1212.37 2093.76,1210.1 2094.35,1209.14 2094.93,1211.41 2095.52,1212.6 2096.1,1212.64 2096.69,1210.32 2097.28,1211.72 2097.86,1209.45 2098.45,1207.32 2099.04,1209.64 2099.62,1207.62 2100.21,1207.88 2100.8,1208.26 2101.38,1208.45 2101.97,1208.23 2102.55,1207.31 2103.14,1208.7 2103.73,1211.11 2104.31,1211.01 2104.9,1211.11 2105.49,1214.49 2106.07,1215.57 2106.66,1211.96 2107.25,1211.89 2107.83,1210.68 2108.42,1210.61 2109.01,1210.48 2109.59,1209.47 2110.18,1211.6 2110.76,1211.79 2111.35,1208.27 2111.94,1207.47 2112.52,1207.82 2113.11,1209.1 2113.7,1209.32 2114.28,1209.42 2114.87,1209.43 2115.46,1210.8 2116.04,1211.02 2116.63,1209.87 2117.22,1209.93 2117.8,1205.64 2118.39,1204.99 2118.97,1207.48 2119.56,1208.51 2120.15,1208.94 2120.73,1209.15 2121.32,1208.34 2121.91,1206.29 2122.49,1205.61 2123.08,1203.7 2123.67,1204.24 2124.25,1202.39 2124.84,1202.86 2125.42,1202.35 2126.01,1202.86 2126.6,1203.5 2127.18,1205.13 2127.77,1206.61 2128.36,1208.1 2128.94,1208.22 2129.53,1208.58 2130.12,1208.97 2130.7,1209.04 2131.29,1209.22 2131.88,1208.25 2132.46,1207.25 2133.05,1207.46 2133.63,1208.62 2134.22,1208.64 2134.81,1208.62 2135.39,1207.89 2135.98,1208.12 2136.57,1206.04 2137.15,1207.32 2137.74,1207.81 2138.33,1209.07 2138.91,1210.38 2139.5,1212.63 2140.09,1214.91 2140.67,1214.57 2141.26,1211.99 2141.84,1210.86 2142.43,1210.96 2143.02,1209.83 2143.6,1208.74 2144.19,1212.32 2144.78,1211.2 2145.36,1210.06 2145.95,1208.96 2146.54,1209.24 2147.12,1210.53 2147.71,1210.53 2148.3,1212.75 2148.88,1213.9 2149.47,1216.29 2150.05,1216.01 2150.64,1212.36 2151.23,1214.43 2151.81,1215.54 2152.4,1214.07 2152.99,1213.87 2153.57,1213.72 2154.16,1214.65 2154.75,1213.53 2155.33,1212.06 2155.92,1212.13 2156.5,1212.11 2157.09,1214.14 2157.68,1213.81 2158.26,1212.59 \"/>\n<path clip-path=\"url(#clip012)\" d=\"M986.025 1211.98 L986.612 1211.98 L987.198 1211.98 L987.785 1211.98 L988.371 1211.98 L988.957 1211.98 L989.544 1211.98 L990.13 1211.98 L990.717 1211.98 L991.303 1211.98 L991.889 1211.98 L992.476 1211.98 L993.062 1211.98 L993.649 1211.98 L994.235 1211.98 L994.822 1211.98 L995.408 1211.98 L995.994 1211.98 L996.581 1211.98 L997.167 1211.98 L997.754 1211.98 L998.34 1211.98 L998.926 1211.98 L999.513 1211.98 L1000.1 1211.98 L1000.69 1211.98 L1001.27 1211.98 L1001.86 1211.98 L1002.44 1211.98 L1003.03 1211.98 L1003.62 1211.98 L1004.2 1211.98 L1004.79 1211.98 L1005.38 1211.98 L1005.96 1211.98 L1006.55 1211.98 L1007.14 1211.98 L1007.72 1211.98 L1008.31 1211.98 L1008.9 1211.98 L1009.48 1211.98 L1010.07 1211.98 L1010.65 1211.98 L1011.24 1211.98 L1011.83 1211.98 L1012.41 1211.98 L1013 1211.98 L1013.59 1211.98 L1014.17 1211.98 L1014.76 1211.98 L1015.35 1211.98 L1015.93 1211.98 L1016.52 1211.98 L1017.11 1211.98 L1017.69 1211.98 L1018.28 1211.98 L1018.86 1211.98 L1019.45 1211.98 L1020.04 1211.98 L1020.62 1211.98 L1021.21 1211.98 L1021.8 1211.98 L1022.38 1211.98 L1022.97 1211.98 L1023.56 1211.98 L1024.14 1211.98 L1024.73 1211.98 L1025.32 1211.98 L1025.9 1211.98 L1026.49 1211.98 L1027.07 1211.98 L1027.66 1211.98 L1028.25 1211.98 L1028.83 1211.98 L1029.42 1211.98 L1030.01 1211.98 L1030.59 1211.98 L1031.18 1211.98 L1031.77 1211.98 L1032.35 1211.98 L1032.94 1211.98 L1033.52 1211.98 L1034.11 1211.98 L1034.7 1211.98 L1035.28 1211.98 L1035.87 1211.98 L1036.46 1211.98 L1037.04 1211.98 L1037.63 1211.98 L1038.22 1211.98 L1038.8 1211.98 L1039.39 1211.98 L1039.98 1211.98 L1040.56 1211.98 L1041.15 1211.98 L1041.73 1211.98 L1042.32 1211.98 L1042.91 1211.98 L1043.49 1211.98 L1044.08 1211.98 L1044.67 1211.98 L1045.25 1211.98 L1045.84 1211.98 L1046.43 1211.98 L1047.01 1211.98 L1047.6 1211.98 L1048.19 1211.98 L1048.77 1211.98 L1049.36 1211.98 L1049.94 1211.98 L1050.53 1211.98 L1051.12 1211.98 L1051.7 1211.98 L1052.29 1211.98 L1052.88 1211.98 L1053.46 1211.98 L1054.05 1211.98 L1054.64 1211.98 L1055.22 1211.98 L1055.81 1211.98 L1056.39 1211.98 L1056.98 1211.98 L1057.57 1211.98 L1058.15 1211.98 L1058.74 1211.98 L1059.33 1211.98 L1059.91 1211.98 L1060.5 1211.98 L1061.09 1211.98 L1061.67 1211.98 L1062.26 1211.98 L1062.85 1211.98 L1063.43 1211.98 L1064.02 1211.98 L1064.6 1211.98 L1065.19 1211.98 L1065.78 1211.98 L1066.36 1211.98 L1066.95 1211.98 L1067.54 1211.98 L1068.12 1211.98 L1068.71 1211.98 L1069.3 1211.98 L1069.88 1211.98 L1070.47 1211.98 L1071.06 1211.98 L1071.64 1211.98 L1072.23 1211.98 L1072.81 1211.98 L1073.4 1211.98 L1073.99 1211.98 L1074.57 1211.98 L1075.16 1211.98 L1075.75 1211.98 L1076.33 1211.98 L1076.92 1211.98 L1077.51 1211.98 L1078.09 1211.98 L1078.68 1211.98 L1079.26 1211.98 L1079.85 1211.98 L1080.44 1211.98 L1081.02 1211.98 L1081.61 1211.98 L1082.2 1211.98 L1082.78 1211.98 L1083.37 1211.98 L1083.96 1211.98 L1084.54 1211.98 L1085.13 1211.98 L1085.72 1211.98 L1086.3 1211.98 L1086.89 1211.98 L1087.47 1211.98 L1088.06 1211.98 L1088.65 1211.98 L1089.23 1211.98 L1089.82 1211.98 L1090.41 1211.98 L1090.99 1211.98 L1091.58 1211.98 L1092.17 1211.98 L1092.75 1211.98 L1093.34 1211.98 L1093.93 1211.98 L1094.51 1211.98 L1095.1 1211.98 L1095.68 1211.98 L1096.27 1211.98 L1096.86 1211.98 L1097.44 1211.98 L1098.03 1211.98 L1098.62 1211.98 L1099.2 1211.98 L1099.79 1211.98 L1100.38 1211.98 L1100.96 1211.98 L1101.55 1211.98 L1102.14 1211.98 L1102.72 1211.98 L1103.31 1211.98 L1103.89 1211.98 L1104.48 1211.98 L1105.07 1211.98 L1105.65 1211.98 L1106.24 1211.98 L1106.83 1211.98 L1107.41 1211.98 L1108 1211.98 L1108.59 1211.98 L1109.17 1211.98 L1109.76 1211.98 L1110.34 1211.98 L1110.93 1211.98 L1111.52 1211.98 L1112.1 1211.98 L1112.69 1211.98 L1113.28 1211.98 L1113.86 1211.98 L1114.45 1211.98 L1115.04 1211.98 L1115.62 1211.98 L1116.21 1211.98 L1116.8 1211.98 L1117.38 1211.98 L1117.97 1211.98 L1118.55 1211.98 L1119.14 1211.98 L1119.73 1211.98 L1120.31 1211.98 L1120.9 1211.98 L1121.49 1211.98 L1122.07 1211.98 L1122.66 1211.98 L1123.25 1211.98 L1123.83 1211.98 L1124.42 1211.98 L1125.01 1211.98 L1125.59 1211.98 L1126.18 1211.98 L1126.76 1211.98 L1127.35 1211.98 L1127.94 1211.98 L1128.52 1211.98 L1129.11 1211.98 L1129.7 1211.98 L1130.28 1211.98 L1130.87 1211.98 L1131.46 1211.98 L1132.04 1211.98 L1132.63 1211.98 L1133.21 1211.98 L1133.8 1211.98 L1134.39 1211.98 L1134.97 1211.98 L1135.56 1211.98 L1136.15 1211.98 L1136.73 1211.98 L1137.32 1211.98 L1137.91 1211.98 L1138.49 1211.98 L1139.08 1211.98 L1139.67 1211.98 L1140.25 1211.98 L1140.84 1211.98 L1141.42 1211.98 L1142.01 1211.98 L1142.6 1211.98 L1143.18 1211.98 L1143.77 1211.98 L1144.36 1211.98 L1144.94 1211.98 L1145.53 1211.98 L1146.12 1211.98 L1146.7 1211.98 L1147.29 1211.98 L1147.88 1211.98 L1148.46 1211.98 L1149.05 1211.98 L1149.63 1211.98 L1150.22 1211.98 L1150.81 1211.98 L1151.39 1211.98 L1151.98 1211.98 L1152.57 1211.98 L1153.15 1211.98 L1153.74 1211.98 L1154.33 1211.98 L1154.91 1211.98 L1155.5 1211.98 L1156.09 1211.98 L1156.67 1211.98 L1157.26 1211.98 L1157.84 1211.98 L1158.43 1211.98 L1159.02 1211.98 L1159.6 1211.98 L1160.19 1211.98 L1160.78 1211.98 L1161.36 1211.98 L1161.95 1211.98 L1162.54 1211.98 L1163.12 1211.98 L1163.71 1211.98 L1164.29 1211.98 L1164.88 1211.98 L1165.47 1211.98 L1166.05 1211.98 L1166.64 1211.98 L1167.23 1211.98 L1167.81 1211.98 L1168.4 1211.98 L1168.99 1211.98 L1169.57 1211.98 L1170.16 1211.98 L1170.75 1211.98 L1171.33 1211.98 L1171.92 1211.98 L1172.5 1211.98 L1173.09 1211.98 L1173.68 1211.98 L1174.26 1211.98 L1174.85 1211.98 L1175.44 1211.98 L1176.02 1211.98 L1176.61 1211.98 L1177.2 1211.98 L1177.78 1211.98 L1178.37 1211.98 L1178.96 1211.98 L1179.54 1211.98 L1180.13 1211.98 L1180.71 1211.98 L1181.3 1211.98 L1181.89 1211.98 L1182.47 1211.98 L1183.06 1211.98 L1183.65 1211.98 L1184.23 1211.98 L1184.82 1211.98 L1185.41 1211.98 L1185.99 1211.98 L1186.58 1211.98 L1187.16 1211.98 L1187.75 1211.98 L1188.34 1211.98 L1188.92 1211.98 L1189.51 1211.98 L1190.1 1211.98 L1190.68 1211.98 L1191.27 1211.98 L1191.86 1211.98 L1192.44 1211.98 L1193.03 1211.98 L1193.62 1211.98 L1194.2 1211.98 L1194.79 1211.98 L1195.37 1211.98 L1195.96 1211.98 L1196.55 1211.98 L1197.13 1211.98 L1197.72 1211.98 L1198.31 1211.98 L1198.89 1211.98 L1199.48 1211.98 L1200.07 1211.98 L1200.65 1211.98 L1201.24 1211.98 L1201.83 1211.98 L1202.41 1211.98 L1203 1211.98 L1203.58 1211.98 L1204.17 1211.98 L1204.76 1211.98 L1205.34 1211.98 L1205.93 1211.98 L1206.52 1211.98 L1207.1 1211.98 L1207.69 1211.98 L1208.28 1211.98 L1208.86 1211.98 L1209.45 1211.98 L1210.03 1211.98 L1210.62 1211.98 L1211.21 1211.98 L1211.79 1211.98 L1212.38 1211.98 L1212.97 1211.98 L1213.55 1211.98 L1214.14 1211.98 L1214.73 1211.98 L1215.31 1211.98 L1215.9 1211.98 L1216.49 1211.98 L1217.07 1211.98 L1217.66 1211.98 L1218.24 1211.98 L1218.83 1211.98 L1219.42 1211.98 L1220 1211.98 L1220.59 1211.98 L1221.18 1211.98 L1221.76 1211.98 L1222.35 1211.98 L1222.94 1211.98 L1223.52 1211.98 L1224.11 1211.98 L1224.7 1211.98 L1225.28 1211.98 L1225.87 1211.98 L1226.45 1211.98 L1227.04 1211.98 L1227.63 1211.98 L1228.21 1211.98 L1228.8 1211.98 L1229.39 1211.98 L1229.97 1211.98 L1230.56 1211.98 L1231.15 1211.98 L1231.73 1211.98 L1232.32 1211.98 L1232.91 1211.98 L1233.49 1211.98 L1234.08 1211.98 L1234.66 1211.98 L1235.25 1211.98 L1235.84 1211.98 L1236.42 1211.98 L1237.01 1211.98 L1237.6 1211.98 L1238.18 1211.98 L1238.77 1211.98 L1239.36 1211.98 L1239.94 1211.98 L1240.53 1211.98 L1241.11 1211.98 L1241.7 1211.98 L1242.29 1211.98 L1242.87 1211.98 L1243.46 1211.98 L1244.05 1211.98 L1244.63 1211.98 L1245.22 1211.98 L1245.81 1211.98 L1246.39 1211.98 L1246.98 1211.98 L1247.57 1211.98 L1248.15 1211.98 L1248.74 1211.98 L1249.32 1211.98 L1249.91 1211.98 L1250.5 1211.98 L1251.08 1211.98 L1251.67 1211.98 L1252.26 1211.98 L1252.84 1211.98 L1253.43 1211.98 L1254.02 1211.98 L1254.6 1211.98 L1255.19 1211.98 L1255.78 1211.98 L1256.36 1211.98 L1256.95 1211.98 L1257.53 1211.98 L1258.12 1211.98 L1258.71 1211.98 L1259.29 1211.98 L1259.88 1211.98 L1260.47 1211.98 L1261.05 1211.98 L1261.64 1211.98 L1262.23 1211.98 L1262.81 1211.98 L1263.4 1211.98 L1263.98 1211.98 L1264.57 1211.98 L1265.16 1211.98 L1265.74 1211.98 L1266.33 1211.98 L1266.92 1211.98 L1267.5 1211.98 L1268.09 1211.98 L1268.68 1211.98 L1269.26 1211.98 L1269.85 1211.98 L1270.44 1211.98 L1271.02 1211.98 L1271.61 1211.98 L1272.19 1211.98 L1272.78 1211.98 L1273.37 1211.98 L1273.95 1211.98 L1274.54 1211.98 L1275.13 1211.98 L1275.71 1211.98 L1276.3 1211.98 L1276.89 1211.98 L1277.47 1211.98 L1278.06 1211.98 L1278.65 1211.98 L1279.23 1211.98 L1279.82 1211.98 L1280.4 1211.98 L1280.99 1211.98 L1281.58 1211.98 L1282.16 1211.98 L1282.75 1211.98 L1283.34 1211.98 L1283.92 1211.98 L1284.51 1211.98 L1285.1 1211.98 L1285.68 1211.98 L1286.27 1211.98 L1286.86 1211.98 L1287.44 1211.98 L1288.03 1211.98 L1288.61 1211.98 L1289.2 1211.98 L1289.79 1211.98 L1290.37 1211.98 L1290.96 1211.98 L1291.55 1211.98 L1292.13 1211.98 L1292.72 1211.98 L1293.31 1211.98 L1293.89 1211.98 L1294.48 1211.98 L1295.06 1211.98 L1295.65 1211.98 L1296.24 1211.98 L1296.82 1211.98 L1297.41 1211.98 L1298 1211.98 L1298.58 1211.98 L1299.17 1211.98 L1299.76 1211.98 L1300.34 1211.98 L1300.93 1211.98 L1301.52 1211.98 L1302.1 1211.98 L1302.69 1211.98 L1303.27 1211.98 L1303.86 1211.98 L1304.45 1211.98 L1305.03 1211.98 L1305.62 1211.98 L1306.21 1211.98 L1306.79 1211.98 L1307.38 1211.98 L1307.97 1211.98 L1308.55 1211.98 L1309.14 1211.98 L1309.73 1211.98 L1310.31 1211.98 L1310.9 1211.98 L1311.48 1211.98 L1312.07 1211.98 L1312.66 1211.98 L1313.24 1211.98 L1313.83 1211.98 L1314.42 1211.98 L1315 1211.98 L1315.59 1211.98 L1316.18 1211.98 L1316.76 1211.98 L1317.35 1211.98 L1317.93 1211.98 L1318.52 1211.98 L1319.11 1211.98 L1319.69 1211.98 L1320.28 1211.98 L1320.87 1211.98 L1321.45 1211.98 L1322.04 1211.98 L1322.63 1211.98 L1323.21 1211.98 L1323.8 1211.98 L1324.39 1211.98 L1324.97 1211.98 L1325.56 1211.98 L1326.14 1211.98 L1326.73 1211.98 L1327.32 1211.98 L1327.9 1211.98 L1328.49 1211.98 L1329.08 1211.98 L1329.66 1211.98 L1330.25 1211.98 L1330.84 1211.98 L1331.42 1211.98 L1332.01 1211.98 L1332.6 1211.98 L1333.18 1211.98 L1333.77 1211.98 L1334.35 1211.98 L1334.94 1211.98 L1335.53 1211.98 L1336.11 1211.98 L1336.7 1211.98 L1337.29 1211.98 L1337.87 1211.98 L1338.46 1211.98 L1339.05 1211.98 L1339.63 1211.98 L1340.22 1211.98 L1340.8 1211.98 L1341.39 1211.98 L1341.98 1211.98 L1342.56 1211.98 L1343.15 1211.98 L1343.74 1211.98 L1344.32 1211.98 L1344.91 1211.98 L1345.5 1211.98 L1346.08 1211.98 L1346.67 1211.98 L1347.26 1211.98 L1347.84 1211.98 L1348.43 1211.98 L1349.01 1211.98 L1349.6 1211.98 L1350.19 1211.98 L1350.77 1211.98 L1351.36 1211.98 L1351.95 1211.98 L1352.53 1211.98 L1353.12 1211.98 L1353.71 1211.98 L1354.29 1211.98 L1354.88 1211.98 L1355.47 1211.98 L1356.05 1211.98 L1356.64 1211.98 L1357.22 1211.98 L1357.81 1211.98 L1358.4 1211.98 L1358.98 1211.98 L1359.57 1211.98 L1360.16 1211.98 L1360.74 1211.98 L1361.33 1211.98 L1361.92 1211.98 L1362.5 1211.98 L1363.09 1211.98 L1363.68 1211.98 L1364.26 1211.98 L1364.85 1211.98 L1365.43 1211.98 L1366.02 1211.98 L1366.61 1211.98 L1367.19 1211.98 L1367.78 1211.98 L1368.37 1211.98 L1368.95 1211.98 L1369.54 1211.98 L1370.13 1211.98 L1370.71 1211.98 L1371.3 1211.98 L1371.88 1211.98 L1372.47 1211.98 L1373.06 1211.98 L1373.64 1211.98 L1374.23 1211.98 L1374.82 1211.98 L1375.4 1211.98 L1375.99 1211.98 L1376.58 1211.98 L1377.16 1211.98 L1377.75 1211.98 L1378.34 1211.98 L1378.92 1211.98 L1379.51 1211.98 L1380.09 1211.98 L1380.68 1211.98 L1381.27 1211.98 L1381.85 1211.98 L1382.44 1211.98 L1383.03 1211.98 L1383.61 1211.98 L1384.2 1211.98 L1384.79 1211.98 L1385.37 1211.98 L1385.96 1211.98 L1386.55 1211.98 L1387.13 1211.98 L1387.72 1211.98 L1388.3 1211.98 L1388.89 1211.98 L1389.48 1211.98 L1390.06 1211.98 L1390.65 1211.98 L1391.24 1211.98 L1391.82 1211.98 L1392.41 1211.98 L1393 1211.98 L1393.58 1211.98 L1394.17 1211.98 L1394.75 1211.98 L1395.34 1211.98 L1395.93 1211.98 L1396.51 1211.98 L1397.1 1211.98 L1397.69 1211.98 L1398.27 1211.98 L1398.86 1211.98 L1399.45 1211.98 L1400.03 1211.98 L1400.62 1211.98 L1401.21 1211.98 L1401.79 1211.98 L1402.38 1211.98 L1402.96 1211.98 L1403.55 1211.98 L1404.14 1211.98 L1404.72 1211.98 L1405.31 1211.98 L1405.9 1211.98 L1406.48 1211.98 L1407.07 1211.98 L1407.66 1211.98 L1408.24 1211.98 L1408.83 1211.98 L1409.42 1211.98 L1410 1211.98 L1410.59 1211.98 L1411.17 1211.98 L1411.76 1211.98 L1412.35 1211.98 L1412.93 1211.98 L1413.52 1211.98 L1414.11 1211.98 L1414.69 1211.98 L1415.28 1211.98 L1415.87 1211.98 L1416.45 1211.98 L1417.04 1211.98 L1417.63 1211.98 L1418.21 1211.98 L1418.8 1211.98 L1419.38 1211.98 L1419.97 1211.98 L1420.56 1211.98 L1421.14 1211.98 L1421.73 1211.98 L1422.32 1211.98 L1422.9 1211.98 L1423.49 1211.98 L1424.08 1211.98 L1424.66 1211.98 L1425.25 1211.98 L1425.83 1211.98 L1426.42 1211.98 L1427.01 1211.98 L1427.59 1211.98 L1428.18 1211.98 L1428.77 1211.98 L1429.35 1211.98 L1429.94 1211.98 L1430.53 1211.98 L1431.11 1211.98 L1431.7 1211.98 L1432.29 1211.98 L1432.87 1211.98 L1433.46 1211.98 L1434.04 1211.98 L1434.63 1211.98 L1435.22 1211.98 L1435.8 1211.98 L1436.39 1211.98 L1436.98 1211.98 L1437.56 1211.98 L1438.15 1211.98 L1438.74 1211.98 L1439.32 1211.98 L1439.91 1211.98 L1440.5 1211.98 L1441.08 1211.98 L1441.67 1211.98 L1442.25 1211.98 L1442.84 1211.98 L1443.43 1211.98 L1444.01 1211.98 L1444.6 1211.98 L1445.19 1211.98 L1445.77 1211.98 L1446.36 1211.98 L1446.95 1211.98 L1447.53 1211.98 L1448.12 1211.98 L1448.7 1211.98 L1449.29 1211.98 L1449.88 1211.98 L1450.46 1211.98 L1451.05 1211.98 L1451.64 1211.98 L1452.22 1211.98 L1452.81 1211.98 L1453.4 1211.98 L1453.98 1211.98 L1454.57 1211.98 L1455.16 1211.98 L1455.74 1211.98 L1456.33 1211.98 L1456.91 1211.98 L1457.5 1211.98 L1458.09 1211.98 L1458.67 1211.98 L1459.26 1211.98 L1459.85 1211.98 L1460.43 1211.98 L1461.02 1211.98 L1461.61 1211.98 L1462.19 1211.98 L1462.78 1211.98 L1463.37 1211.98 L1463.95 1211.98 L1464.54 1211.98 L1465.12 1211.98 L1465.71 1211.98 L1466.3 1211.98 L1466.88 1211.98 L1467.47 1211.98 L1468.06 1211.98 L1468.64 1211.98 L1469.23 1211.98 L1469.82 1211.98 L1470.4 1211.98 L1470.99 1211.98 L1471.57 1211.98 L1472.16 1211.98 L1472.75 1211.98 L1473.33 1211.98 L1473.92 1211.98 L1474.51 1211.98 L1475.09 1211.98 L1475.68 1211.98 L1476.27 1211.98 L1476.85 1211.98 L1477.44 1211.98 L1478.03 1211.98 L1478.61 1211.98 L1479.2 1211.98 L1479.78 1211.98 L1480.37 1211.98 L1480.96 1211.98 L1481.54 1211.98 L1482.13 1211.98 L1482.72 1211.98 L1483.3 1211.98 L1483.89 1211.98 L1484.48 1211.98 L1485.06 1211.98 L1485.65 1211.98 L1486.24 1211.98 L1486.82 1211.98 L1487.41 1211.98 L1487.99 1211.98 L1488.58 1211.98 L1489.17 1211.98 L1489.75 1211.98 L1490.34 1211.98 L1490.93 1211.98 L1491.51 1211.98 L1492.1 1211.98 L1492.69 1211.98 L1493.27 1211.98 L1493.86 1211.98 L1494.45 1211.98 L1495.03 1211.98 L1495.62 1211.98 L1496.2 1211.98 L1496.79 1211.98 L1497.38 1211.98 L1497.96 1211.98 L1498.55 1211.98 L1499.14 1211.98 L1499.72 1211.98 L1500.31 1211.98 L1500.9 1211.98 L1501.48 1211.98 L1502.07 1211.98 L1502.65 1211.98 L1503.24 1211.98 L1503.83 1211.98 L1504.41 1211.98 L1505 1211.98 L1505.59 1211.98 L1506.17 1211.98 L1506.76 1211.98 L1507.35 1211.98 L1507.93 1211.98 L1508.52 1211.98 L1509.11 1211.98 L1509.69 1211.98 L1510.28 1211.98 L1510.86 1211.98 L1511.45 1211.98 L1512.04 1211.98 L1512.62 1211.98 L1513.21 1211.98 L1513.8 1211.98 L1514.38 1211.98 L1514.97 1211.98 L1515.56 1211.98 L1516.14 1211.98 L1516.73 1211.98 L1517.32 1211.98 L1517.9 1211.98 L1518.49 1211.98 L1519.07 1211.98 L1519.66 1211.98 L1520.25 1211.98 L1520.83 1211.98 L1521.42 1211.98 L1522.01 1211.98 L1522.59 1211.98 L1523.18 1211.98 L1523.77 1211.98 L1524.35 1211.98 L1524.94 1211.98 L1525.52 1211.98 L1526.11 1211.98 L1526.7 1211.98 L1527.28 1211.98 L1527.87 1211.98 L1528.46 1211.98 L1529.04 1211.98 L1529.63 1211.98 L1530.22 1211.98 L1530.8 1211.98 L1531.39 1211.98 L1531.98 1211.98 L1532.56 1211.98 L1533.15 1211.98 L1533.73 1211.98 L1534.32 1211.98 L1534.91 1211.98 L1535.49 1211.98 L1536.08 1211.98 L1536.67 1211.98 L1537.25 1211.98 L1537.84 1211.98 L1538.43 1211.98 L1539.01 1211.98 L1539.6 1211.98 L1540.19 1211.98 L1540.77 1211.98 L1541.36 1211.98 L1541.94 1211.98 L1542.53 1211.98 L1543.12 1211.98 L1543.7 1211.98 L1544.29 1211.98 L1544.88 1211.98 L1545.46 1211.98 L1546.05 1211.98 L1546.64 1211.98 L1547.22 1211.98 L1547.81 1211.98 L1548.4 1211.98 L1548.98 1211.98 L1549.57 1211.98 L1550.15 1211.98 L1550.74 1211.98 L1551.33 1211.98 L1551.91 1211.98 L1552.5 1211.98 L1553.09 1211.98 L1553.67 1211.98 L1554.26 1211.98 L1554.85 1211.98 L1555.43 1211.98 L1556.02 1211.98 L1556.6 1211.98 L1557.19 1211.98 L1557.78 1211.98 L1558.36 1211.98 L1558.95 1211.98 L1559.54 1211.98 L1560.12 1211.98 L1560.71 1211.98 L1561.3 1211.98 L1561.88 1211.98 L1562.47 1211.98 L1563.06 1211.98 L1563.64 1211.98 L1564.23 1211.98 L1564.81 1211.98 L1565.4 1211.98 L1565.99 1211.98 L1566.57 1211.98 L1567.16 1211.98 L1567.75 1211.98 L1568.33 1211.98 L1568.92 1211.98 L1569.51 1211.98 L1570.09 1211.98 L1570.68 1211.98 L1571.27 1211.98 L1571.85 1211.98 L1572.44 1211.98 L1573.02 1211.98 L1573.61 1211.98 L1574.2 1211.98 L1574.78 1211.98 L1575.37 1211.98 L1575.96 1211.98 L1576.54 1211.98 L1577.13 1211.98 L1577.72 1211.98 L1578.3 1211.98 L1578.89 1211.98 L1579.47 1211.98 L1580.06 1211.98 L1580.65 1211.98 L1581.23 1211.98 L1581.82 1211.98 L1582.41 1211.98 L1582.99 1211.98 L1583.58 1211.98 L1584.17 1211.98 L1584.75 1211.98 L1585.34 1211.98 L1585.93 1211.98 L1586.51 1211.98 L1587.1 1211.98 L1587.68 1211.98 L1588.27 1211.98 L1588.86 1211.98 L1589.44 1211.98 L1590.03 1211.98 L1590.62 1211.98 L1591.2 1211.98 L1591.79 1211.98 L1592.38 1211.98 L1592.96 1211.98 L1593.55 1211.98 L1594.14 1211.98 L1594.72 1211.98 L1595.31 1211.98 L1595.89 1211.98 L1596.48 1211.98 L1597.07 1211.98 L1597.65 1211.98 L1598.24 1211.98 L1598.83 1211.98 L1599.41 1211.98 L1600 1211.98 L1600.59 1211.98 L1601.17 1211.98 L1601.76 1211.98 L1602.34 1211.98 L1602.93 1211.98 L1603.52 1211.98 L1604.1 1211.98 L1604.69 1211.98 L1605.28 1211.98 L1605.86 1211.98 L1606.45 1211.98 L1607.04 1211.98 L1607.62 1211.98 L1608.21 1211.98 L1608.8 1211.98 L1609.38 1211.98 L1609.97 1211.98 L1610.55 1211.98 L1611.14 1211.98 L1611.73 1211.98 L1612.31 1211.98 L1612.9 1211.98 L1613.49 1211.98 L1614.07 1211.98 L1614.66 1211.98 L1615.25 1211.98 L1615.83 1211.98 L1616.42 1211.98 L1617.01 1211.98 L1617.59 1211.98 L1618.18 1211.98 L1618.76 1211.98 L1619.35 1211.98 L1619.94 1211.98 L1620.52 1211.98 L1621.11 1211.98 L1621.7 1211.98 L1622.28 1211.98 L1622.87 1211.98 L1623.46 1211.98 L1624.04 1211.98 L1624.63 1211.98 L1625.22 1211.98 L1625.8 1211.98 L1626.39 1211.98 L1626.97 1211.98 L1627.56 1211.98 L1628.15 1211.98 L1628.73 1211.98 L1629.32 1211.98 L1629.91 1211.98 L1630.49 1211.98 L1631.08 1211.98 L1631.67 1211.98 L1632.25 1211.98 L1632.84 1211.98 L1633.42 1211.98 L1634.01 1211.98 L1634.6 1211.98 L1635.18 1211.98 L1635.77 1211.98 L1636.36 1211.98 L1636.94 1211.98 L1637.53 1211.98 L1638.12 1211.98 L1638.7 1211.98 L1639.29 1211.98 L1639.88 1211.98 L1640.46 1211.98 L1641.05 1211.98 L1641.63 1211.98 L1642.22 1211.98 L1642.81 1211.98 L1643.39 1211.98 L1643.98 1211.98 L1644.57 1211.98 L1645.15 1211.98 L1645.74 1211.98 L1646.33 1211.98 L1646.91 1211.98 L1647.5 1211.98 L1648.09 1211.98 L1648.67 1211.98 L1649.26 1211.98 L1649.84 1211.98 L1650.43 1211.98 L1651.02 1211.98 L1651.6 1211.98 L1652.19 1211.98 L1652.78 1211.98 L1653.36 1211.98 L1653.95 1211.98 L1654.54 1211.98 L1655.12 1211.98 L1655.71 1211.98 L1656.29 1211.98 L1656.88 1211.98 L1657.47 1211.98 L1658.05 1211.98 L1658.64 1211.98 L1659.23 1211.98 L1659.81 1211.98 L1660.4 1211.98 L1660.99 1211.98 L1661.57 1211.98 L1662.16 1211.98 L1662.75 1211.98 L1663.33 1211.98 L1663.92 1211.98 L1664.5 1211.98 L1665.09 1211.98 L1665.68 1211.98 L1666.26 1211.98 L1666.85 1211.98 L1667.44 1211.98 L1668.02 1211.98 L1668.61 1211.98 L1669.2 1211.98 L1669.78 1211.98 L1670.37 1211.98 L1670.96 1211.98 L1671.54 1211.98 L1672.13 1211.98 L1672.71 1211.98 L1673.3 1211.98 L1673.89 1211.98 L1674.47 1211.98 L1675.06 1211.98 L1675.65 1211.98 L1676.23 1211.98 L1676.82 1211.98 L1677.41 1211.98 L1677.99 1211.98 L1678.58 1211.98 L1679.17 1211.98 L1679.75 1211.98 L1680.34 1211.98 L1680.92 1211.98 L1681.51 1211.98 L1682.1 1211.98 L1682.68 1211.98 L1683.27 1211.98 L1683.86 1211.98 L1684.44 1211.98 L1685.03 1211.98 L1685.62 1211.98 L1686.2 1211.98 L1686.79 1211.98 L1687.37 1211.98 L1687.96 1211.98 L1688.55 1211.98 L1689.13 1211.98 L1689.72 1211.98 L1690.31 1211.98 L1690.89 1211.98 L1691.48 1211.98 L1692.07 1211.98 L1692.65 1211.98 L1693.24 1211.98 L1693.83 1211.98 L1694.41 1211.98 L1695 1211.98 L1695.58 1211.98 L1696.17 1211.98 L1696.76 1211.98 L1697.34 1211.98 L1697.93 1211.98 L1698.52 1211.98 L1699.1 1211.98 L1699.69 1211.98 L1700.28 1211.98 L1700.86 1211.98 L1701.45 1211.98 L1702.04 1211.98 L1702.62 1211.98 L1703.21 1211.98 L1703.79 1211.98 L1704.38 1211.98 L1704.97 1211.98 L1705.55 1211.98 L1706.14 1211.98 L1706.73 1211.98 L1707.31 1211.98 L1707.9 1211.98 L1708.49 1211.98 L1709.07 1211.98 L1709.66 1211.98 L1710.24 1211.98 L1710.83 1211.98 L1711.42 1211.98 L1712 1211.98 L1712.59 1211.98 L1713.18 1211.98 L1713.76 1211.98 L1714.35 1211.98 L1714.94 1211.98 L1715.52 1211.98 L1716.11 1211.98 L1716.7 1211.98 L1717.28 1211.98 L1717.87 1211.98 L1718.45 1211.98 L1719.04 1211.98 L1719.63 1211.98 L1720.21 1211.98 L1720.8 1211.98 L1721.39 1211.98 L1721.97 1211.98 L1722.56 1211.98 L1723.15 1211.98 L1723.73 1211.98 L1724.32 1211.98 L1724.91 1211.98 L1725.49 1211.98 L1726.08 1211.98 L1726.66 1211.98 L1727.25 1211.98 L1727.84 1211.98 L1728.42 1211.98 L1729.01 1211.98 L1729.6 1211.98 L1730.18 1211.98 L1730.77 1211.98 L1731.36 1211.98 L1731.94 1211.98 L1732.53 1211.98 L1733.11 1211.98 L1733.7 1211.98 L1734.29 1211.98 L1734.87 1211.98 L1735.46 1211.98 L1736.05 1211.98 L1736.63 1211.98 L1737.22 1211.98 L1737.81 1211.98 L1738.39 1211.98 L1738.98 1211.98 L1739.57 1211.98 L1740.15 1211.98 L1740.74 1211.98 L1741.32 1211.98 L1741.91 1211.98 L1742.5 1211.98 L1743.08 1211.98 L1743.67 1211.98 L1744.26 1211.98 L1744.84 1211.98 L1745.43 1211.98 L1746.02 1211.98 L1746.6 1211.98 L1747.19 1211.98 L1747.78 1211.98 L1748.36 1211.98 L1748.95 1211.98 L1749.53 1211.98 L1750.12 1211.98 L1750.71 1211.98 L1751.29 1211.98 L1751.88 1211.98 L1752.47 1211.98 L1753.05 1211.98 L1753.64 1211.98 L1754.23 1211.98 L1754.81 1211.98 L1755.4 1211.98 L1755.99 1211.98 L1756.57 1211.98 L1757.16 1211.98 L1757.74 1211.98 L1758.33 1211.98 L1758.92 1211.98 L1759.5 1211.98 L1760.09 1211.98 L1760.68 1211.98 L1761.26 1211.98 L1761.85 1211.98 L1762.44 1211.98 L1763.02 1211.98 L1763.61 1211.98 L1764.19 1211.98 L1764.78 1211.98 L1765.37 1211.98 L1765.95 1211.98 L1766.54 1211.98 L1767.13 1211.98 L1767.71 1211.98 L1768.3 1211.98 L1768.89 1211.98 L1769.47 1211.98 L1770.06 1211.98 L1770.65 1211.98 L1771.23 1211.98 L1771.82 1211.98 L1772.4 1211.98 L1772.99 1211.98 L1773.58 1211.98 L1774.16 1211.98 L1774.75 1211.98 L1775.34 1211.98 L1775.92 1211.98 L1776.51 1211.98 L1777.1 1211.98 L1777.68 1211.98 L1778.27 1211.98 L1778.86 1211.98 L1779.44 1211.98 L1780.03 1211.98 L1780.61 1211.98 L1781.2 1211.98 L1781.79 1211.98 L1782.37 1211.98 L1782.96 1211.98 L1783.55 1211.98 L1784.13 1211.98 L1784.72 1211.98 L1785.31 1211.98 L1785.89 1211.98 L1786.48 1211.98 L1787.06 1211.98 L1787.65 1211.98 L1788.24 1211.98 L1788.82 1211.98 L1789.41 1211.98 L1790 1211.98 L1790.58 1211.98 L1791.17 1211.98 L1791.76 1211.98 L1792.34 1211.98 L1792.93 1211.98 L1793.52 1211.98 L1794.1 1211.98 L1794.69 1211.98 L1795.27 1211.98 L1795.86 1211.98 L1796.45 1211.98 L1797.03 1211.98 L1797.62 1211.98 L1798.21 1211.98 L1798.79 1211.98 L1799.38 1211.98 L1799.97 1211.98 L1800.55 1211.98 L1801.14 1211.98 L1801.73 1211.98 L1802.31 1211.98 L1802.9 1211.98 L1803.48 1211.98 L1804.07 1211.98 L1804.66 1211.98 L1805.24 1211.98 L1805.83 1211.98 L1806.42 1211.98 L1807 1211.98 L1807.59 1211.98 L1808.18 1211.98 L1808.76 1211.98 L1809.35 1211.98 L1809.94 1211.98 L1810.52 1211.98 L1811.11 1211.98 L1811.69 1211.98 L1812.28 1211.98 L1812.87 1211.98 L1813.45 1211.98 L1814.04 1211.98 L1814.63 1211.98 L1815.21 1211.98 L1815.8 1211.98 L1816.39 1211.98 L1816.97 1211.98 L1817.56 1211.98 L1818.14 1211.98 L1818.73 1211.98 L1819.32 1211.98 L1819.9 1211.98 L1820.49 1211.98 L1821.08 1211.98 L1821.66 1211.98 L1822.25 1211.98 L1822.84 1211.98 L1823.42 1211.98 L1824.01 1211.98 L1824.6 1211.98 L1825.18 1211.98 L1825.77 1211.98 L1826.35 1211.98 L1826.94 1211.98 L1827.53 1211.98 L1828.11 1211.98 L1828.7 1211.98 L1829.29 1211.98 L1829.87 1211.98 L1830.46 1211.98 L1831.05 1211.98 L1831.63 1211.98 L1832.22 1211.98 L1832.81 1211.98 L1833.39 1211.98 L1833.98 1211.98 L1834.56 1211.98 L1835.15 1211.98 L1835.74 1211.98 L1836.32 1211.98 L1836.91 1211.98 L1837.5 1211.98 L1838.08 1211.98 L1838.67 1211.98 L1839.26 1211.98 L1839.84 1211.98 L1840.43 1211.98 L1841.01 1211.98 L1841.6 1211.98 L1842.19 1211.98 L1842.77 1211.98 L1843.36 1211.98 L1843.95 1211.98 L1844.53 1211.98 L1845.12 1211.98 L1845.71 1211.98 L1846.29 1211.98 L1846.88 1211.98 L1847.47 1211.98 L1848.05 1211.98 L1848.64 1211.98 L1849.22 1211.98 L1849.81 1211.98 L1850.4 1211.98 L1850.98 1211.98 L1851.57 1211.98 L1852.16 1211.98 L1852.74 1211.98 L1853.33 1211.98 L1853.92 1211.98 L1854.5 1211.98 L1855.09 1211.98 L1855.68 1211.98 L1856.26 1211.98 L1856.85 1211.98 L1857.43 1211.98 L1858.02 1211.98 L1858.61 1211.98 L1859.19 1211.98 L1859.78 1211.98 L1860.37 1211.98 L1860.95 1211.98 L1861.54 1211.98 L1862.13 1211.98 L1862.71 1211.98 L1863.3 1211.98 L1863.88 1211.98 L1864.47 1211.98 L1865.06 1211.98 L1865.64 1211.98 L1866.23 1211.98 L1866.82 1211.98 L1867.4 1211.98 L1867.99 1211.98 L1868.58 1211.98 L1869.16 1211.98 L1869.75 1211.98 L1870.34 1211.98 L1870.92 1211.98 L1871.51 1211.98 L1872.09 1211.98 L1872.68 1211.98 L1873.27 1211.98 L1873.85 1211.98 L1874.44 1211.98 L1875.03 1211.98 L1875.61 1211.98 L1876.2 1211.98 L1876.79 1211.98 L1877.37 1211.98 L1877.96 1211.98 L1878.55 1211.98 L1879.13 1211.98 L1879.72 1211.98 L1880.3 1211.98 L1880.89 1211.98 L1881.48 1211.98 L1882.06 1211.98 L1882.65 1211.98 L1883.24 1211.98 L1883.82 1211.98 L1884.41 1211.98 L1885 1211.98 L1885.58 1211.98 L1886.17 1211.98 L1886.76 1211.98 L1887.34 1211.98 L1887.93 1211.98 L1888.51 1211.98 L1889.1 1211.98 L1889.69 1211.98 L1890.27 1211.98 L1890.86 1211.98 L1891.45 1211.98 L1892.03 1211.98 L1892.62 1211.98 L1893.21 1211.98 L1893.79 1211.98 L1894.38 1211.98 L1894.96 1211.98 L1895.55 1211.98 L1896.14 1211.98 L1896.72 1211.98 L1897.31 1211.98 L1897.9 1211.98 L1898.48 1211.98 L1899.07 1211.98 L1899.66 1211.98 L1900.24 1211.98 L1900.83 1211.98 L1901.42 1211.98 L1902 1211.98 L1902.59 1211.98 L1903.17 1211.98 L1903.76 1211.98 L1904.35 1211.98 L1904.93 1211.98 L1905.52 1211.98 L1906.11 1211.98 L1906.69 1211.98 L1907.28 1211.98 L1907.87 1211.98 L1908.45 1211.98 L1909.04 1211.98 L1909.63 1211.98 L1910.21 1211.98 L1910.8 1211.98 L1911.38 1211.98 L1911.97 1211.98 L1912.56 1211.98 L1913.14 1211.98 L1913.73 1211.98 L1914.32 1211.98 L1914.9 1211.98 L1915.49 1211.98 L1916.08 1211.98 L1916.66 1211.98 L1917.25 1211.98 L1917.83 1211.98 L1918.42 1211.98 L1919.01 1211.98 L1919.59 1211.98 L1920.18 1211.98 L1920.77 1211.98 L1921.35 1211.98 L1921.94 1211.98 L1922.53 1211.98 L1923.11 1211.98 L1923.7 1211.98 L1924.29 1211.98 L1924.87 1211.98 L1925.46 1211.98 L1926.04 1211.98 L1926.63 1211.98 L1927.22 1211.98 L1927.8 1211.98 L1928.39 1211.98 L1928.98 1211.98 L1929.56 1211.98 L1930.15 1211.98 L1930.74 1211.98 L1931.32 1211.98 L1931.91 1211.98 L1932.5 1211.98 L1933.08 1211.98 L1933.67 1211.98 L1934.25 1211.98 L1934.84 1211.98 L1935.43 1211.98 L1936.01 1211.98 L1936.6 1211.98 L1937.19 1211.98 L1937.77 1211.98 L1938.36 1211.98 L1938.95 1211.98 L1939.53 1211.98 L1940.12 1211.98 L1940.71 1211.98 L1941.29 1211.98 L1941.88 1211.98 L1942.46 1211.98 L1943.05 1211.98 L1943.64 1211.98 L1944.22 1211.98 L1944.81 1211.98 L1945.4 1211.98 L1945.98 1211.98 L1946.57 1211.98 L1947.16 1211.98 L1947.74 1211.98 L1948.33 1211.98 L1948.91 1211.98 L1949.5 1211.98 L1950.09 1211.98 L1950.67 1211.98 L1951.26 1211.98 L1951.85 1211.98 L1952.43 1211.98 L1953.02 1211.98 L1953.61 1211.98 L1954.19 1211.98 L1954.78 1211.98 L1955.37 1211.98 L1955.95 1211.98 L1956.54 1211.98 L1957.12 1211.98 L1957.71 1211.98 L1958.3 1211.98 L1958.88 1211.98 L1959.47 1211.98 L1960.06 1211.98 L1960.64 1211.98 L1961.23 1211.98 L1961.82 1211.98 L1962.4 1211.98 L1962.99 1211.98 L1963.58 1211.98 L1964.16 1211.98 L1964.75 1211.98 L1965.33 1211.98 L1965.92 1211.98 L1966.51 1211.98 L1967.09 1211.98 L1967.68 1211.98 L1968.27 1211.98 L1968.85 1211.98 L1969.44 1211.98 L1970.03 1211.98 L1970.61 1211.98 L1971.2 1211.98 L1971.78 1211.98 L1972.37 1211.98 L1972.96 1211.98 L1973.54 1211.98 L1974.13 1211.98 L1974.72 1211.98 L1975.3 1211.98 L1975.89 1211.98 L1976.48 1211.98 L1977.06 1211.98 L1977.65 1211.98 L1978.24 1211.98 L1978.82 1211.98 L1979.41 1211.98 L1979.99 1211.98 L1980.58 1211.98 L1981.17 1211.98 L1981.75 1211.98 L1982.34 1211.98 L1982.93 1211.98 L1983.51 1211.98 L1984.1 1211.98 L1984.69 1211.98 L1985.27 1211.98 L1985.86 1211.98 L1986.45 1211.98 L1987.03 1211.98 L1987.62 1211.98 L1988.2 1211.98 L1988.79 1211.98 L1989.38 1211.98 L1989.96 1211.98 L1990.55 1211.98 L1991.14 1211.98 L1991.72 1211.98 L1992.31 1211.98 L1992.9 1211.98 L1993.48 1211.98 L1994.07 1211.98 L1994.65 1211.98 L1995.24 1211.98 L1995.83 1211.98 L1996.41 1211.98 L1997 1211.98 L1997.59 1211.98 L1998.17 1211.98 L1998.76 1211.98 L1999.35 1211.98 L1999.93 1211.98 L2000.52 1211.98 L2001.11 1211.98 L2001.69 1211.98 L2002.28 1211.98 L2002.86 1211.98 L2003.45 1211.98 L2004.04 1211.98 L2004.62 1211.98 L2005.21 1211.98 L2005.8 1211.98 L2006.38 1211.98 L2006.97 1211.98 L2007.56 1211.98 L2008.14 1211.98 L2008.73 1211.98 L2009.32 1211.98 L2009.9 1211.98 L2010.49 1211.98 L2011.07 1211.98 L2011.66 1211.98 L2012.25 1211.98 L2012.83 1211.98 L2013.42 1211.98 L2014.01 1211.98 L2014.59 1211.98 L2015.18 1211.98 L2015.77 1211.98 L2016.35 1211.98 L2016.94 1211.98 L2017.53 1211.98 L2018.11 1211.98 L2018.7 1211.98 L2019.28 1211.98 L2019.87 1211.98 L2020.46 1211.98 L2021.04 1211.98 L2021.63 1211.98 L2022.22 1211.98 L2022.8 1211.98 L2023.39 1211.98 L2023.98 1211.98 L2024.56 1211.98 L2025.15 1211.98 L2025.73 1211.98 L2026.32 1211.98 L2026.91 1211.98 L2027.49 1211.98 L2028.08 1211.98 L2028.67 1211.98 L2029.25 1211.98 L2029.84 1211.98 L2030.43 1211.98 L2031.01 1211.98 L2031.6 1211.98 L2032.19 1211.98 L2032.77 1211.98 L2033.36 1211.98 L2033.94 1211.98 L2034.53 1211.98 L2035.12 1211.98 L2035.7 1211.98 L2036.29 1211.98 L2036.88 1211.98 L2037.46 1211.98 L2038.05 1211.98 L2038.64 1211.98 L2039.22 1211.98 L2039.81 1211.98 L2040.4 1211.98 L2040.98 1211.98 L2041.57 1211.98 L2042.15 1211.98 L2042.74 1211.98 L2043.33 1211.98 L2043.91 1211.98 L2044.5 1211.98 L2045.09 1211.98 L2045.67 1211.98 L2046.26 1211.98 L2046.85 1211.98 L2047.43 1211.98 L2048.02 1211.98 L2048.6 1211.98 L2049.19 1211.98 L2049.78 1211.98 L2050.36 1211.98 L2050.95 1211.98 L2051.54 1211.98 L2052.12 1211.98 L2052.71 1211.98 L2053.3 1211.98 L2053.88 1211.98 L2054.47 1211.98 L2055.06 1211.98 L2055.64 1211.98 L2056.23 1211.98 L2056.81 1211.98 L2057.4 1211.98 L2057.99 1211.98 L2058.57 1211.98 L2059.16 1211.98 L2059.75 1211.98 L2060.33 1211.98 L2060.92 1211.98 L2061.51 1211.98 L2062.09 1211.98 L2062.68 1211.98 L2063.27 1211.98 L2063.85 1211.98 L2064.44 1211.98 L2065.02 1211.98 L2065.61 1211.98 L2066.2 1211.98 L2066.78 1211.98 L2067.37 1211.98 L2067.96 1211.98 L2068.54 1211.98 L2069.13 1211.98 L2069.72 1211.98 L2070.3 1211.98 L2070.89 1211.98 L2071.48 1211.98 L2072.06 1211.98 L2072.65 1211.98 L2073.23 1211.98 L2073.82 1211.98 L2074.41 1211.98 L2074.99 1211.98 L2075.58 1211.98 L2076.17 1211.98 L2076.75 1211.98 L2077.34 1211.98 L2077.93 1211.98 L2078.51 1211.98 L2079.1 1211.98 L2079.68 1211.98 L2080.27 1211.98 L2080.86 1211.98 L2081.44 1211.98 L2082.03 1211.98 L2082.62 1211.98 L2083.2 1211.98 L2083.79 1211.98 L2084.38 1211.98 L2084.96 1211.98 L2085.55 1211.98 L2086.14 1211.98 L2086.72 1211.98 L2087.31 1211.98 L2087.89 1211.98 L2088.48 1211.98 L2089.07 1211.98 L2089.65 1211.98 L2090.24 1211.98 L2090.83 1211.98 L2091.41 1211.98 L2092 1211.98 L2092.59 1211.98 L2093.17 1211.98 L2093.76 1211.98 L2094.35 1211.98 L2094.93 1211.98 L2095.52 1211.98 L2096.1 1211.98 L2096.69 1211.98 L2097.28 1211.98 L2097.86 1211.98 L2098.45 1211.98 L2099.04 1211.98 L2099.62 1211.98 L2100.21 1211.98 L2100.8 1211.98 L2101.38 1211.98 L2101.97 1211.98 L2102.55 1211.98 L2103.14 1211.98 L2103.73 1211.98 L2104.31 1211.98 L2104.9 1211.98 L2105.49 1211.98 L2106.07 1211.98 L2106.66 1211.98 L2107.25 1211.98 L2107.83 1211.98 L2108.42 1211.98 L2109.01 1211.98 L2109.59 1211.98 L2110.18 1211.98 L2110.76 1211.98 L2111.35 1211.98 L2111.94 1211.98 L2112.52 1211.98 L2113.11 1211.98 L2113.7 1211.98 L2114.28 1211.98 L2114.87 1211.98 L2115.46 1211.98 L2116.04 1211.98 L2116.63 1211.98 L2117.22 1211.98 L2117.8 1211.98 L2118.39 1211.98 L2118.97 1211.98 L2119.56 1211.98 L2120.15 1211.98 L2120.73 1211.98 L2121.32 1211.98 L2121.91 1211.98 L2122.49 1211.98 L2123.08 1211.98 L2123.67 1211.98 L2124.25 1211.98 L2124.84 1211.98 L2125.42 1211.98 L2126.01 1211.98 L2126.6 1211.98 L2127.18 1211.98 L2127.77 1211.98 L2128.36 1211.98 L2128.94 1211.98 L2129.53 1211.98 L2130.12 1211.98 L2130.7 1211.98 L2131.29 1211.98 L2131.88 1211.98 L2132.46 1211.98 L2133.05 1211.98 L2133.63 1211.98 L2134.22 1211.98 L2134.81 1211.98 L2135.39 1211.98 L2135.98 1211.98 L2136.57 1211.98 L2137.15 1211.98 L2137.74 1211.98 L2138.33 1211.98 L2138.91 1211.98 L2139.5 1211.98 L2140.09 1211.98 L2140.67 1211.98 L2141.26 1211.98 L2141.84 1211.98 L2142.43 1211.98 L2143.02 1211.98 L2143.6 1211.98 L2144.19 1211.98 L2144.78 1211.98 L2145.36 1211.98 L2145.95 1211.98 L2146.54 1211.98 L2147.12 1211.98 L2147.71 1211.98 L2148.3 1211.98 L2148.88 1211.98 L2149.47 1211.98 L2150.05 1211.98 L2150.64 1211.98 L2151.23 1211.98 L2151.81 1211.98 L2152.4 1211.98 L2152.99 1211.98 L2153.57 1211.98 L2154.16 1211.98 L2154.75 1211.98 L2155.33 1211.98 L2155.92 1211.98 L2156.5 1211.98 L2157.09 1211.98 L2157.68 1211.98 L2158.26 1211.98 L2158.26 1211.24 L2157.68 1211.24 L2157.09 1211.24 L2156.5 1211.24 L2155.92 1211.24 L2155.33 1211.24 L2154.75 1211.24 L2154.16 1211.24 L2153.57 1211.24 L2152.99 1211.24 L2152.4 1211.24 L2151.81 1211.24 L2151.23 1211.24 L2150.64 1211.24 L2150.05 1211.24 L2149.47 1211.24 L2148.88 1211.24 L2148.3 1211.24 L2147.71 1211.24 L2147.12 1211.24 L2146.54 1211.24 L2145.95 1211.24 L2145.36 1211.24 L2144.78 1211.24 L2144.19 1211.24 L2143.6 1211.24 L2143.02 1211.24 L2142.43 1211.24 L2141.84 1211.24 L2141.26 1211.24 L2140.67 1211.24 L2140.09 1211.24 L2139.5 1211.24 L2138.91 1211.24 L2138.33 1211.24 L2137.74 1211.24 L2137.15 1211.24 L2136.57 1211.24 L2135.98 1211.24 L2135.39 1211.24 L2134.81 1211.24 L2134.22 1211.24 L2133.63 1211.24 L2133.05 1211.24 L2132.46 1211.24 L2131.88 1211.24 L2131.29 1211.24 L2130.7 1211.24 L2130.12 1211.24 L2129.53 1211.24 L2128.94 1211.24 L2128.36 1211.24 L2127.77 1211.24 L2127.18 1211.24 L2126.6 1211.24 L2126.01 1211.24 L2125.42 1211.24 L2124.84 1211.24 L2124.25 1211.24 L2123.67 1211.24 L2123.08 1211.24 L2122.49 1211.24 L2121.91 1211.24 L2121.32 1211.24 L2120.73 1211.24 L2120.15 1211.24 L2119.56 1211.24 L2118.97 1211.24 L2118.39 1211.24 L2117.8 1211.24 L2117.22 1211.24 L2116.63 1211.24 L2116.04 1211.24 L2115.46 1211.24 L2114.87 1211.24 L2114.28 1211.24 L2113.7 1211.24 L2113.11 1211.24 L2112.52 1211.24 L2111.94 1211.24 L2111.35 1211.24 L2110.76 1211.24 L2110.18 1211.24 L2109.59 1211.24 L2109.01 1211.24 L2108.42 1211.24 L2107.83 1211.24 L2107.25 1211.24 L2106.66 1211.24 L2106.07 1211.24 L2105.49 1211.24 L2104.9 1211.24 L2104.31 1211.24 L2103.73 1211.24 L2103.14 1211.24 L2102.55 1211.24 L2101.97 1211.24 L2101.38 1211.24 L2100.8 1211.24 L2100.21 1211.24 L2099.62 1211.24 L2099.04 1211.24 L2098.45 1211.24 L2097.86 1211.24 L2097.28 1211.24 L2096.69 1211.24 L2096.1 1211.24 L2095.52 1211.24 L2094.93 1211.24 L2094.35 1211.24 L2093.76 1211.24 L2093.17 1211.24 L2092.59 1211.24 L2092 1211.24 L2091.41 1211.24 L2090.83 1211.24 L2090.24 1211.24 L2089.65 1211.24 L2089.07 1211.24 L2088.48 1211.24 L2087.89 1211.24 L2087.31 1211.24 L2086.72 1211.24 L2086.14 1211.24 L2085.55 1211.24 L2084.96 1211.24 L2084.38 1211.24 L2083.79 1211.24 L2083.2 1211.24 L2082.62 1211.24 L2082.03 1211.24 L2081.44 1211.24 L2080.86 1211.24 L2080.27 1211.24 L2079.68 1211.24 L2079.1 1211.24 L2078.51 1211.24 L2077.93 1211.24 L2077.34 1211.24 L2076.75 1211.24 L2076.17 1211.24 L2075.58 1211.24 L2074.99 1211.24 L2074.41 1211.24 L2073.82 1211.24 L2073.23 1211.24 L2072.65 1211.24 L2072.06 1211.24 L2071.48 1211.24 L2070.89 1211.24 L2070.3 1211.24 L2069.72 1211.24 L2069.13 1211.24 L2068.54 1211.24 L2067.96 1211.24 L2067.37 1211.24 L2066.78 1211.24 L2066.2 1211.24 L2065.61 1211.24 L2065.02 1211.24 L2064.44 1211.24 L2063.85 1211.24 L2063.27 1211.24 L2062.68 1211.24 L2062.09 1211.24 L2061.51 1211.24 L2060.92 1211.24 L2060.33 1211.24 L2059.75 1211.24 L2059.16 1211.24 L2058.57 1211.24 L2057.99 1211.24 L2057.4 1211.24 L2056.81 1211.24 L2056.23 1211.24 L2055.64 1211.24 L2055.06 1211.24 L2054.47 1211.24 L2053.88 1211.24 L2053.3 1211.24 L2052.71 1211.24 L2052.12 1211.24 L2051.54 1211.24 L2050.95 1211.24 L2050.36 1211.24 L2049.78 1211.24 L2049.19 1211.24 L2048.6 1211.24 L2048.02 1211.24 L2047.43 1211.24 L2046.85 1211.24 L2046.26 1211.24 L2045.67 1211.24 L2045.09 1211.24 L2044.5 1211.24 L2043.91 1211.24 L2043.33 1211.24 L2042.74 1211.24 L2042.15 1211.24 L2041.57 1211.24 L2040.98 1211.24 L2040.4 1211.24 L2039.81 1211.24 L2039.22 1211.24 L2038.64 1211.24 L2038.05 1211.24 L2037.46 1211.24 L2036.88 1211.24 L2036.29 1211.24 L2035.7 1211.24 L2035.12 1211.24 L2034.53 1211.24 L2033.94 1211.24 L2033.36 1211.24 L2032.77 1211.24 L2032.19 1211.24 L2031.6 1211.24 L2031.01 1211.24 L2030.43 1211.24 L2029.84 1211.24 L2029.25 1211.24 L2028.67 1211.24 L2028.08 1211.24 L2027.49 1211.24 L2026.91 1211.24 L2026.32 1211.24 L2025.73 1211.24 L2025.15 1211.24 L2024.56 1211.24 L2023.98 1211.24 L2023.39 1211.24 L2022.8 1211.24 L2022.22 1211.24 L2021.63 1211.24 L2021.04 1211.24 L2020.46 1211.24 L2019.87 1211.24 L2019.28 1211.24 L2018.7 1211.24 L2018.11 1211.24 L2017.53 1211.24 L2016.94 1211.24 L2016.35 1211.24 L2015.77 1211.24 L2015.18 1211.24 L2014.59 1211.24 L2014.01 1211.24 L2013.42 1211.24 L2012.83 1211.24 L2012.25 1211.24 L2011.66 1211.24 L2011.07 1211.24 L2010.49 1211.24 L2009.9 1211.24 L2009.32 1211.24 L2008.73 1211.24 L2008.14 1211.24 L2007.56 1211.24 L2006.97 1211.24 L2006.38 1211.24 L2005.8 1211.24 L2005.21 1211.24 L2004.62 1211.24 L2004.04 1211.24 L2003.45 1211.24 L2002.86 1211.24 L2002.28 1211.24 L2001.69 1211.24 L2001.11 1211.24 L2000.52 1211.24 L1999.93 1211.24 L1999.35 1211.24 L1998.76 1211.24 L1998.17 1211.24 L1997.59 1211.24 L1997 1211.24 L1996.41 1211.24 L1995.83 1211.24 L1995.24 1211.24 L1994.65 1211.24 L1994.07 1211.24 L1993.48 1211.24 L1992.9 1211.24 L1992.31 1211.24 L1991.72 1211.24 L1991.14 1211.24 L1990.55 1211.24 L1989.96 1211.24 L1989.38 1211.24 L1988.79 1211.24 L1988.2 1211.24 L1987.62 1211.24 L1987.03 1211.24 L1986.45 1211.24 L1985.86 1211.24 L1985.27 1211.24 L1984.69 1211.24 L1984.1 1211.24 L1983.51 1211.24 L1982.93 1211.24 L1982.34 1211.24 L1981.75 1211.24 L1981.17 1211.24 L1980.58 1211.24 L1979.99 1211.24 L1979.41 1211.24 L1978.82 1211.24 L1978.24 1211.24 L1977.65 1211.24 L1977.06 1211.24 L1976.48 1211.24 L1975.89 1211.24 L1975.3 1211.24 L1974.72 1211.24 L1974.13 1211.24 L1973.54 1211.24 L1972.96 1211.24 L1972.37 1211.24 L1971.78 1211.24 L1971.2 1211.24 L1970.61 1211.24 L1970.03 1211.24 L1969.44 1211.24 L1968.85 1211.24 L1968.27 1211.24 L1967.68 1211.24 L1967.09 1211.24 L1966.51 1211.24 L1965.92 1211.24 L1965.33 1211.24 L1964.75 1211.24 L1964.16 1211.24 L1963.58 1211.24 L1962.99 1211.24 L1962.4 1211.24 L1961.82 1211.24 L1961.23 1211.24 L1960.64 1211.24 L1960.06 1211.24 L1959.47 1211.24 L1958.88 1211.24 L1958.3 1211.24 L1957.71 1211.24 L1957.12 1211.24 L1956.54 1211.24 L1955.95 1211.24 L1955.37 1211.24 L1954.78 1211.24 L1954.19 1211.24 L1953.61 1211.24 L1953.02 1211.24 L1952.43 1211.24 L1951.85 1211.24 L1951.26 1211.24 L1950.67 1211.24 L1950.09 1211.24 L1949.5 1211.24 L1948.91 1211.24 L1948.33 1211.24 L1947.74 1211.24 L1947.16 1211.24 L1946.57 1211.24 L1945.98 1211.24 L1945.4 1211.24 L1944.81 1211.24 L1944.22 1211.24 L1943.64 1211.24 L1943.05 1211.24 L1942.46 1211.24 L1941.88 1211.24 L1941.29 1211.24 L1940.71 1211.24 L1940.12 1211.24 L1939.53 1211.24 L1938.95 1211.24 L1938.36 1211.24 L1937.77 1211.24 L1937.19 1211.24 L1936.6 1211.24 L1936.01 1211.24 L1935.43 1211.24 L1934.84 1211.24 L1934.25 1211.24 L1933.67 1211.24 L1933.08 1211.24 L1932.5 1211.24 L1931.91 1211.24 L1931.32 1211.24 L1930.74 1211.24 L1930.15 1211.24 L1929.56 1211.24 L1928.98 1211.24 L1928.39 1211.24 L1927.8 1211.24 L1927.22 1211.24 L1926.63 1211.24 L1926.04 1211.24 L1925.46 1211.24 L1924.87 1211.24 L1924.29 1211.24 L1923.7 1211.24 L1923.11 1211.24 L1922.53 1211.24 L1921.94 1211.24 L1921.35 1211.24 L1920.77 1211.24 L1920.18 1211.24 L1919.59 1211.24 L1919.01 1211.24 L1918.42 1211.24 L1917.83 1211.24 L1917.25 1211.24 L1916.66 1211.24 L1916.08 1211.24 L1915.49 1211.24 L1914.9 1211.24 L1914.32 1211.24 L1913.73 1211.24 L1913.14 1211.24 L1912.56 1211.24 L1911.97 1211.24 L1911.38 1211.24 L1910.8 1211.24 L1910.21 1211.24 L1909.63 1211.24 L1909.04 1211.24 L1908.45 1211.24 L1907.87 1211.24 L1907.28 1211.24 L1906.69 1211.24 L1906.11 1211.24 L1905.52 1211.24 L1904.93 1211.24 L1904.35 1211.24 L1903.76 1211.24 L1903.17 1211.24 L1902.59 1211.24 L1902 1211.24 L1901.42 1211.24 L1900.83 1211.24 L1900.24 1211.24 L1899.66 1211.24 L1899.07 1211.24 L1898.48 1211.24 L1897.9 1211.24 L1897.31 1211.24 L1896.72 1211.24 L1896.14 1211.24 L1895.55 1211.24 L1894.96 1211.24 L1894.38 1211.24 L1893.79 1211.24 L1893.21 1211.24 L1892.62 1211.24 L1892.03 1211.24 L1891.45 1211.24 L1890.86 1211.24 L1890.27 1211.24 L1889.69 1211.24 L1889.1 1211.24 L1888.51 1211.24 L1887.93 1211.24 L1887.34 1211.24 L1886.76 1211.24 L1886.17 1211.24 L1885.58 1211.24 L1885 1211.24 L1884.41 1211.24 L1883.82 1211.24 L1883.24 1211.24 L1882.65 1211.24 L1882.06 1211.24 L1881.48 1211.24 L1880.89 1211.24 L1880.3 1211.24 L1879.72 1211.24 L1879.13 1211.24 L1878.55 1211.24 L1877.96 1211.24 L1877.37 1211.24 L1876.79 1211.24 L1876.2 1211.24 L1875.61 1211.24 L1875.03 1211.24 L1874.44 1211.24 L1873.85 1211.24 L1873.27 1211.24 L1872.68 1211.24 L1872.09 1211.24 L1871.51 1211.24 L1870.92 1211.24 L1870.34 1211.24 L1869.75 1211.24 L1869.16 1211.24 L1868.58 1211.24 L1867.99 1211.24 L1867.4 1211.24 L1866.82 1211.24 L1866.23 1211.24 L1865.64 1211.24 L1865.06 1211.24 L1864.47 1211.24 L1863.88 1211.24 L1863.3 1211.24 L1862.71 1211.24 L1862.13 1211.24 L1861.54 1211.24 L1860.95 1211.24 L1860.37 1211.24 L1859.78 1211.24 L1859.19 1211.24 L1858.61 1211.24 L1858.02 1211.24 L1857.43 1211.24 L1856.85 1211.24 L1856.26 1211.24 L1855.68 1211.24 L1855.09 1211.24 L1854.5 1211.24 L1853.92 1211.24 L1853.33 1211.24 L1852.74 1211.24 L1852.16 1211.24 L1851.57 1211.24 L1850.98 1211.24 L1850.4 1211.24 L1849.81 1211.24 L1849.22 1211.24 L1848.64 1211.24 L1848.05 1211.24 L1847.47 1211.24 L1846.88 1211.24 L1846.29 1211.24 L1845.71 1211.24 L1845.12 1211.24 L1844.53 1211.24 L1843.95 1211.24 L1843.36 1211.24 L1842.77 1211.24 L1842.19 1211.24 L1841.6 1211.24 L1841.01 1211.24 L1840.43 1211.24 L1839.84 1211.24 L1839.26 1211.24 L1838.67 1211.24 L1838.08 1211.24 L1837.5 1211.24 L1836.91 1211.24 L1836.32 1211.24 L1835.74 1211.24 L1835.15 1211.24 L1834.56 1211.24 L1833.98 1211.24 L1833.39 1211.24 L1832.81 1211.24 L1832.22 1211.24 L1831.63 1211.24 L1831.05 1211.24 L1830.46 1211.24 L1829.87 1211.24 L1829.29 1211.24 L1828.7 1211.24 L1828.11 1211.24 L1827.53 1211.24 L1826.94 1211.24 L1826.35 1211.24 L1825.77 1211.24 L1825.18 1211.24 L1824.6 1211.24 L1824.01 1211.24 L1823.42 1211.24 L1822.84 1211.24 L1822.25 1211.24 L1821.66 1211.24 L1821.08 1211.24 L1820.49 1211.24 L1819.9 1211.24 L1819.32 1211.24 L1818.73 1211.24 L1818.14 1211.24 L1817.56 1211.24 L1816.97 1211.24 L1816.39 1211.24 L1815.8 1211.24 L1815.21 1211.24 L1814.63 1211.24 L1814.04 1211.24 L1813.45 1211.24 L1812.87 1211.24 L1812.28 1211.24 L1811.69 1211.24 L1811.11 1211.24 L1810.52 1211.24 L1809.94 1211.24 L1809.35 1211.24 L1808.76 1211.24 L1808.18 1211.24 L1807.59 1211.24 L1807 1211.24 L1806.42 1211.24 L1805.83 1211.24 L1805.24 1211.24 L1804.66 1211.24 L1804.07 1211.24 L1803.48 1211.24 L1802.9 1211.24 L1802.31 1211.24 L1801.73 1211.24 L1801.14 1211.24 L1800.55 1211.24 L1799.97 1211.24 L1799.38 1211.24 L1798.79 1211.24 L1798.21 1211.24 L1797.62 1211.24 L1797.03 1211.24 L1796.45 1211.24 L1795.86 1211.24 L1795.27 1211.24 L1794.69 1211.24 L1794.1 1211.24 L1793.52 1211.24 L1792.93 1211.24 L1792.34 1211.24 L1791.76 1211.24 L1791.17 1211.24 L1790.58 1211.24 L1790 1211.24 L1789.41 1211.24 L1788.82 1211.24 L1788.24 1211.24 L1787.65 1211.24 L1787.06 1211.24 L1786.48 1211.24 L1785.89 1211.24 L1785.31 1211.24 L1784.72 1211.24 L1784.13 1211.24 L1783.55 1211.24 L1782.96 1211.24 L1782.37 1211.24 L1781.79 1211.24 L1781.2 1211.24 L1780.61 1211.24 L1780.03 1211.24 L1779.44 1211.24 L1778.86 1211.24 L1778.27 1211.24 L1777.68 1211.24 L1777.1 1211.24 L1776.51 1211.24 L1775.92 1211.24 L1775.34 1211.24 L1774.75 1211.24 L1774.16 1211.24 L1773.58 1211.24 L1772.99 1211.24 L1772.4 1211.24 L1771.82 1211.24 L1771.23 1211.24 L1770.65 1211.24 L1770.06 1211.24 L1769.47 1211.24 L1768.89 1211.24 L1768.3 1211.24 L1767.71 1211.24 L1767.13 1211.24 L1766.54 1211.24 L1765.95 1211.24 L1765.37 1211.24 L1764.78 1211.24 L1764.19 1211.24 L1763.61 1211.24 L1763.02 1211.24 L1762.44 1211.24 L1761.85 1211.24 L1761.26 1211.24 L1760.68 1211.24 L1760.09 1211.24 L1759.5 1211.24 L1758.92 1211.24 L1758.33 1211.24 L1757.74 1211.24 L1757.16 1211.24 L1756.57 1211.24 L1755.99 1211.24 L1755.4 1211.24 L1754.81 1211.24 L1754.23 1211.24 L1753.64 1211.24 L1753.05 1211.24 L1752.47 1211.24 L1751.88 1211.24 L1751.29 1211.24 L1750.71 1211.24 L1750.12 1211.24 L1749.53 1211.24 L1748.95 1211.24 L1748.36 1211.24 L1747.78 1211.24 L1747.19 1211.24 L1746.6 1211.24 L1746.02 1211.24 L1745.43 1211.24 L1744.84 1211.24 L1744.26 1211.24 L1743.67 1211.24 L1743.08 1211.24 L1742.5 1211.24 L1741.91 1211.24 L1741.32 1211.24 L1740.74 1211.24 L1740.15 1211.24 L1739.57 1211.24 L1738.98 1211.24 L1738.39 1211.24 L1737.81 1211.24 L1737.22 1211.24 L1736.63 1211.24 L1736.05 1211.24 L1735.46 1211.24 L1734.87 1211.24 L1734.29 1211.24 L1733.7 1211.24 L1733.11 1211.24 L1732.53 1211.24 L1731.94 1211.24 L1731.36 1211.24 L1730.77 1211.24 L1730.18 1211.24 L1729.6 1211.24 L1729.01 1211.24 L1728.42 1211.24 L1727.84 1211.24 L1727.25 1211.24 L1726.66 1211.24 L1726.08 1211.24 L1725.49 1211.24 L1724.91 1211.24 L1724.32 1211.24 L1723.73 1211.24 L1723.15 1211.24 L1722.56 1211.24 L1721.97 1211.24 L1721.39 1211.24 L1720.8 1211.24 L1720.21 1211.24 L1719.63 1211.24 L1719.04 1211.24 L1718.45 1211.24 L1717.87 1211.24 L1717.28 1211.24 L1716.7 1211.24 L1716.11 1211.24 L1715.52 1211.24 L1714.94 1211.24 L1714.35 1211.24 L1713.76 1211.24 L1713.18 1211.24 L1712.59 1211.24 L1712 1211.24 L1711.42 1211.24 L1710.83 1211.24 L1710.24 1211.24 L1709.66 1211.24 L1709.07 1211.24 L1708.49 1211.24 L1707.9 1211.24 L1707.31 1211.24 L1706.73 1211.24 L1706.14 1211.24 L1705.55 1211.24 L1704.97 1211.24 L1704.38 1211.24 L1703.79 1211.24 L1703.21 1211.24 L1702.62 1211.24 L1702.04 1211.24 L1701.45 1211.24 L1700.86 1211.24 L1700.28 1211.24 L1699.69 1211.24 L1699.1 1211.24 L1698.52 1211.24 L1697.93 1211.24 L1697.34 1211.24 L1696.76 1211.24 L1696.17 1211.24 L1695.58 1211.24 L1695 1211.24 L1694.41 1211.24 L1693.83 1211.24 L1693.24 1211.24 L1692.65 1211.24 L1692.07 1211.24 L1691.48 1211.24 L1690.89 1211.24 L1690.31 1211.24 L1689.72 1211.24 L1689.13 1211.24 L1688.55 1211.24 L1687.96 1211.24 L1687.37 1211.24 L1686.79 1211.24 L1686.2 1211.24 L1685.62 1211.24 L1685.03 1211.24 L1684.44 1211.24 L1683.86 1211.24 L1683.27 1211.24 L1682.68 1211.24 L1682.1 1211.24 L1681.51 1211.24 L1680.92 1211.24 L1680.34 1211.24 L1679.75 1211.24 L1679.17 1211.24 L1678.58 1211.24 L1677.99 1211.24 L1677.41 1211.24 L1676.82 1211.24 L1676.23 1211.24 L1675.65 1211.24 L1675.06 1211.24 L1674.47 1211.24 L1673.89 1211.24 L1673.3 1211.24 L1672.71 1211.24 L1672.13 1211.24 L1671.54 1211.24 L1670.96 1211.24 L1670.37 1211.24 L1669.78 1211.24 L1669.2 1211.24 L1668.61 1211.24 L1668.02 1211.24 L1667.44 1211.24 L1666.85 1211.24 L1666.26 1211.24 L1665.68 1211.24 L1665.09 1211.24 L1664.5 1211.24 L1663.92 1211.24 L1663.33 1211.24 L1662.75 1211.24 L1662.16 1211.24 L1661.57 1211.24 L1660.99 1211.24 L1660.4 1211.24 L1659.81 1211.24 L1659.23 1211.24 L1658.64 1211.24 L1658.05 1211.24 L1657.47 1211.24 L1656.88 1211.24 L1656.29 1211.24 L1655.71 1211.24 L1655.12 1211.24 L1654.54 1211.24 L1653.95 1211.24 L1653.36 1211.24 L1652.78 1211.24 L1652.19 1211.24 L1651.6 1211.24 L1651.02 1211.24 L1650.43 1211.24 L1649.84 1211.24 L1649.26 1211.24 L1648.67 1211.24 L1648.09 1211.24 L1647.5 1211.24 L1646.91 1211.24 L1646.33 1211.24 L1645.74 1211.24 L1645.15 1211.24 L1644.57 1211.24 L1643.98 1211.24 L1643.39 1211.24 L1642.81 1211.24 L1642.22 1211.24 L1641.63 1211.24 L1641.05 1211.24 L1640.46 1211.24 L1639.88 1211.24 L1639.29 1211.24 L1638.7 1211.24 L1638.12 1211.24 L1637.53 1211.24 L1636.94 1211.24 L1636.36 1211.24 L1635.77 1211.24 L1635.18 1211.24 L1634.6 1211.24 L1634.01 1211.24 L1633.42 1211.24 L1632.84 1211.24 L1632.25 1211.24 L1631.67 1211.24 L1631.08 1211.24 L1630.49 1211.24 L1629.91 1211.24 L1629.32 1211.24 L1628.73 1211.24 L1628.15 1211.24 L1627.56 1211.24 L1626.97 1211.24 L1626.39 1211.24 L1625.8 1211.24 L1625.22 1211.24 L1624.63 1211.24 L1624.04 1211.24 L1623.46 1211.24 L1622.87 1211.24 L1622.28 1211.24 L1621.7 1211.24 L1621.11 1211.24 L1620.52 1211.24 L1619.94 1211.24 L1619.35 1211.24 L1618.76 1211.24 L1618.18 1211.24 L1617.59 1211.24 L1617.01 1211.24 L1616.42 1211.24 L1615.83 1211.24 L1615.25 1211.24 L1614.66 1211.24 L1614.07 1211.24 L1613.49 1211.24 L1612.9 1211.24 L1612.31 1211.24 L1611.73 1211.24 L1611.14 1211.24 L1610.55 1211.24 L1609.97 1211.24 L1609.38 1211.24 L1608.8 1211.24 L1608.21 1211.24 L1607.62 1211.24 L1607.04 1211.24 L1606.45 1211.24 L1605.86 1211.24 L1605.28 1211.24 L1604.69 1211.24 L1604.1 1211.24 L1603.52 1211.24 L1602.93 1211.24 L1602.34 1211.24 L1601.76 1211.24 L1601.17 1211.24 L1600.59 1211.24 L1600 1211.24 L1599.41 1211.24 L1598.83 1211.24 L1598.24 1211.24 L1597.65 1211.24 L1597.07 1211.24 L1596.48 1211.24 L1595.89 1211.24 L1595.31 1211.24 L1594.72 1211.24 L1594.14 1211.24 L1593.55 1211.24 L1592.96 1211.24 L1592.38 1211.24 L1591.79 1211.24 L1591.2 1211.24 L1590.62 1211.24 L1590.03 1211.24 L1589.44 1211.24 L1588.86 1211.24 L1588.27 1211.24 L1587.68 1211.24 L1587.1 1211.24 L1586.51 1211.24 L1585.93 1211.24 L1585.34 1211.24 L1584.75 1211.24 L1584.17 1211.24 L1583.58 1211.24 L1582.99 1211.24 L1582.41 1211.24 L1581.82 1211.24 L1581.23 1211.24 L1580.65 1211.24 L1580.06 1211.24 L1579.47 1211.24 L1578.89 1211.24 L1578.3 1211.24 L1577.72 1211.24 L1577.13 1211.24 L1576.54 1211.24 L1575.96 1211.24 L1575.37 1211.24 L1574.78 1211.24 L1574.2 1211.24 L1573.61 1211.24 L1573.02 1211.24 L1572.44 1211.24 L1571.85 1211.24 L1571.27 1211.24 L1570.68 1211.24 L1570.09 1211.24 L1569.51 1211.24 L1568.92 1211.24 L1568.33 1211.24 L1567.75 1211.24 L1567.16 1211.24 L1566.57 1211.24 L1565.99 1211.24 L1565.4 1211.24 L1564.81 1211.24 L1564.23 1211.24 L1563.64 1211.24 L1563.06 1211.24 L1562.47 1211.24 L1561.88 1211.24 L1561.3 1211.24 L1560.71 1211.24 L1560.12 1211.24 L1559.54 1211.24 L1558.95 1211.24 L1558.36 1211.24 L1557.78 1211.24 L1557.19 1211.24 L1556.6 1211.24 L1556.02 1211.24 L1555.43 1211.24 L1554.85 1211.24 L1554.26 1211.24 L1553.67 1211.24 L1553.09 1211.24 L1552.5 1211.24 L1551.91 1211.24 L1551.33 1211.24 L1550.74 1211.24 L1550.15 1211.24 L1549.57 1211.24 L1548.98 1211.24 L1548.4 1211.24 L1547.81 1211.24 L1547.22 1211.24 L1546.64 1211.24 L1546.05 1211.24 L1545.46 1211.24 L1544.88 1211.24 L1544.29 1211.24 L1543.7 1211.24 L1543.12 1211.24 L1542.53 1211.24 L1541.94 1211.24 L1541.36 1211.24 L1540.77 1211.24 L1540.19 1211.24 L1539.6 1211.24 L1539.01 1211.24 L1538.43 1211.24 L1537.84 1211.24 L1537.25 1211.24 L1536.67 1211.24 L1536.08 1211.24 L1535.49 1211.24 L1534.91 1211.24 L1534.32 1211.24 L1533.73 1211.24 L1533.15 1211.24 L1532.56 1211.24 L1531.98 1211.24 L1531.39 1211.24 L1530.8 1211.24 L1530.22 1211.24 L1529.63 1211.24 L1529.04 1211.24 L1528.46 1211.24 L1527.87 1211.24 L1527.28 1211.24 L1526.7 1211.24 L1526.11 1211.24 L1525.52 1211.24 L1524.94 1211.24 L1524.35 1211.24 L1523.77 1211.24 L1523.18 1211.24 L1522.59 1211.24 L1522.01 1211.24 L1521.42 1211.24 L1520.83 1211.24 L1520.25 1211.24 L1519.66 1211.24 L1519.07 1211.24 L1518.49 1211.24 L1517.9 1211.24 L1517.32 1211.24 L1516.73 1211.24 L1516.14 1211.24 L1515.56 1211.24 L1514.97 1211.24 L1514.38 1211.24 L1513.8 1211.24 L1513.21 1211.24 L1512.62 1211.24 L1512.04 1211.24 L1511.45 1211.24 L1510.86 1211.24 L1510.28 1211.24 L1509.69 1211.24 L1509.11 1211.24 L1508.52 1211.24 L1507.93 1211.24 L1507.35 1211.24 L1506.76 1211.24 L1506.17 1211.24 L1505.59 1211.24 L1505 1211.24 L1504.41 1211.24 L1503.83 1211.24 L1503.24 1211.24 L1502.65 1211.24 L1502.07 1211.24 L1501.48 1211.24 L1500.9 1211.24 L1500.31 1211.24 L1499.72 1211.24 L1499.14 1211.24 L1498.55 1211.24 L1497.96 1211.24 L1497.38 1211.24 L1496.79 1211.24 L1496.2 1211.24 L1495.62 1211.24 L1495.03 1211.24 L1494.45 1211.24 L1493.86 1211.24 L1493.27 1211.24 L1492.69 1211.24 L1492.1 1211.24 L1491.51 1211.24 L1490.93 1211.24 L1490.34 1211.24 L1489.75 1211.24 L1489.17 1211.24 L1488.58 1211.24 L1487.99 1211.24 L1487.41 1211.24 L1486.82 1211.24 L1486.24 1211.24 L1485.65 1211.24 L1485.06 1211.24 L1484.48 1211.24 L1483.89 1211.24 L1483.3 1211.24 L1482.72 1211.24 L1482.13 1211.24 L1481.54 1211.24 L1480.96 1211.24 L1480.37 1211.24 L1479.78 1211.24 L1479.2 1211.24 L1478.61 1211.24 L1478.03 1211.24 L1477.44 1211.24 L1476.85 1211.24 L1476.27 1211.24 L1475.68 1211.24 L1475.09 1211.24 L1474.51 1211.24 L1473.92 1211.24 L1473.33 1211.24 L1472.75 1211.24 L1472.16 1211.24 L1471.57 1211.24 L1470.99 1211.24 L1470.4 1211.24 L1469.82 1211.24 L1469.23 1211.24 L1468.64 1211.24 L1468.06 1211.24 L1467.47 1211.24 L1466.88 1211.24 L1466.3 1211.24 L1465.71 1211.24 L1465.12 1211.24 L1464.54 1211.24 L1463.95 1211.24 L1463.37 1211.24 L1462.78 1211.24 L1462.19 1211.24 L1461.61 1211.24 L1461.02 1211.24 L1460.43 1211.24 L1459.85 1211.24 L1459.26 1211.24 L1458.67 1211.24 L1458.09 1211.24 L1457.5 1211.24 L1456.91 1211.24 L1456.33 1211.24 L1455.74 1211.24 L1455.16 1211.24 L1454.57 1211.24 L1453.98 1211.24 L1453.4 1211.24 L1452.81 1211.24 L1452.22 1211.24 L1451.64 1211.24 L1451.05 1211.24 L1450.46 1211.24 L1449.88 1211.24 L1449.29 1211.24 L1448.7 1211.24 L1448.12 1211.24 L1447.53 1211.24 L1446.95 1211.24 L1446.36 1211.24 L1445.77 1211.24 L1445.19 1211.24 L1444.6 1211.24 L1444.01 1211.24 L1443.43 1211.24 L1442.84 1211.24 L1442.25 1211.24 L1441.67 1211.24 L1441.08 1211.24 L1440.5 1211.24 L1439.91 1211.24 L1439.32 1211.24 L1438.74 1211.24 L1438.15 1211.24 L1437.56 1211.24 L1436.98 1211.24 L1436.39 1211.24 L1435.8 1211.24 L1435.22 1211.24 L1434.63 1211.24 L1434.04 1211.24 L1433.46 1211.24 L1432.87 1211.24 L1432.29 1211.24 L1431.7 1211.24 L1431.11 1211.24 L1430.53 1211.24 L1429.94 1211.24 L1429.35 1211.24 L1428.77 1211.24 L1428.18 1211.24 L1427.59 1211.24 L1427.01 1211.24 L1426.42 1211.24 L1425.83 1211.24 L1425.25 1211.24 L1424.66 1211.24 L1424.08 1211.24 L1423.49 1211.24 L1422.9 1211.24 L1422.32 1211.24 L1421.73 1211.24 L1421.14 1211.24 L1420.56 1211.24 L1419.97 1211.24 L1419.38 1211.24 L1418.8 1211.24 L1418.21 1211.24 L1417.63 1211.24 L1417.04 1211.24 L1416.45 1211.24 L1415.87 1211.24 L1415.28 1211.24 L1414.69 1211.24 L1414.11 1211.24 L1413.52 1211.24 L1412.93 1211.24 L1412.35 1211.24 L1411.76 1211.24 L1411.17 1211.24 L1410.59 1211.24 L1410 1211.24 L1409.42 1211.24 L1408.83 1211.24 L1408.24 1211.24 L1407.66 1211.24 L1407.07 1211.24 L1406.48 1211.24 L1405.9 1211.24 L1405.31 1211.24 L1404.72 1211.24 L1404.14 1211.24 L1403.55 1211.24 L1402.96 1211.24 L1402.38 1211.24 L1401.79 1211.24 L1401.21 1211.24 L1400.62 1211.24 L1400.03 1211.24 L1399.45 1211.24 L1398.86 1211.24 L1398.27 1211.24 L1397.69 1211.24 L1397.1 1211.24 L1396.51 1211.24 L1395.93 1211.24 L1395.34 1211.24 L1394.75 1211.24 L1394.17 1211.24 L1393.58 1211.24 L1393 1211.24 L1392.41 1211.24 L1391.82 1211.24 L1391.24 1211.24 L1390.65 1211.24 L1390.06 1211.24 L1389.48 1211.24 L1388.89 1211.24 L1388.3 1211.24 L1387.72 1211.24 L1387.13 1211.24 L1386.55 1211.24 L1385.96 1211.24 L1385.37 1211.24 L1384.79 1211.24 L1384.2 1211.24 L1383.61 1211.24 L1383.03 1211.24 L1382.44 1211.24 L1381.85 1211.24 L1381.27 1211.24 L1380.68 1211.24 L1380.09 1211.24 L1379.51 1211.24 L1378.92 1211.24 L1378.34 1211.24 L1377.75 1211.24 L1377.16 1211.24 L1376.58 1211.24 L1375.99 1211.24 L1375.4 1211.24 L1374.82 1211.24 L1374.23 1211.24 L1373.64 1211.24 L1373.06 1211.24 L1372.47 1211.24 L1371.88 1211.24 L1371.3 1211.24 L1370.71 1211.24 L1370.13 1211.24 L1369.54 1211.24 L1368.95 1211.24 L1368.37 1211.24 L1367.78 1211.24 L1367.19 1211.24 L1366.61 1211.24 L1366.02 1211.24 L1365.43 1211.24 L1364.85 1211.24 L1364.26 1211.24 L1363.68 1211.24 L1363.09 1211.24 L1362.5 1211.24 L1361.92 1211.24 L1361.33 1211.24 L1360.74 1211.24 L1360.16 1211.24 L1359.57 1211.24 L1358.98 1211.24 L1358.4 1211.24 L1357.81 1211.24 L1357.22 1211.24 L1356.64 1211.24 L1356.05 1211.24 L1355.47 1211.24 L1354.88 1211.24 L1354.29 1211.24 L1353.71 1211.24 L1353.12 1211.24 L1352.53 1211.24 L1351.95 1211.24 L1351.36 1211.24 L1350.77 1211.24 L1350.19 1211.24 L1349.6 1211.24 L1349.01 1211.24 L1348.43 1211.24 L1347.84 1211.24 L1347.26 1211.24 L1346.67 1211.24 L1346.08 1211.24 L1345.5 1211.24 L1344.91 1211.24 L1344.32 1211.24 L1343.74 1211.24 L1343.15 1211.24 L1342.56 1211.24 L1341.98 1211.24 L1341.39 1211.24 L1340.8 1211.24 L1340.22 1211.24 L1339.63 1211.24 L1339.05 1211.24 L1338.46 1211.24 L1337.87 1211.24 L1337.29 1211.24 L1336.7 1211.24 L1336.11 1211.24 L1335.53 1211.24 L1334.94 1211.24 L1334.35 1211.24 L1333.77 1211.24 L1333.18 1211.24 L1332.6 1211.24 L1332.01 1211.24 L1331.42 1211.24 L1330.84 1211.24 L1330.25 1211.24 L1329.66 1211.24 L1329.08 1211.24 L1328.49 1211.24 L1327.9 1211.24 L1327.32 1211.24 L1326.73 1211.24 L1326.14 1211.24 L1325.56 1211.24 L1324.97 1211.24 L1324.39 1211.24 L1323.8 1211.24 L1323.21 1211.24 L1322.63 1211.24 L1322.04 1211.24 L1321.45 1211.24 L1320.87 1211.24 L1320.28 1211.24 L1319.69 1211.24 L1319.11 1211.24 L1318.52 1211.24 L1317.93 1211.24 L1317.35 1211.24 L1316.76 1211.24 L1316.18 1211.24 L1315.59 1211.24 L1315 1211.24 L1314.42 1211.24 L1313.83 1211.24 L1313.24 1211.24 L1312.66 1211.24 L1312.07 1211.24 L1311.48 1211.24 L1310.9 1211.24 L1310.31 1211.24 L1309.73 1211.24 L1309.14 1211.24 L1308.55 1211.24 L1307.97 1211.24 L1307.38 1211.24 L1306.79 1211.24 L1306.21 1211.24 L1305.62 1211.24 L1305.03 1211.24 L1304.45 1211.24 L1303.86 1211.24 L1303.27 1211.24 L1302.69 1211.24 L1302.1 1211.24 L1301.52 1211.24 L1300.93 1211.24 L1300.34 1211.24 L1299.76 1211.24 L1299.17 1211.24 L1298.58 1211.24 L1298 1211.24 L1297.41 1211.24 L1296.82 1211.24 L1296.24 1211.24 L1295.65 1211.24 L1295.06 1211.24 L1294.48 1211.24 L1293.89 1211.24 L1293.31 1211.24 L1292.72 1211.24 L1292.13 1211.24 L1291.55 1211.24 L1290.96 1211.24 L1290.37 1211.24 L1289.79 1211.24 L1289.2 1211.24 L1288.61 1211.24 L1288.03 1211.24 L1287.44 1211.24 L1286.86 1211.24 L1286.27 1211.24 L1285.68 1211.24 L1285.1 1211.24 L1284.51 1211.24 L1283.92 1211.24 L1283.34 1211.24 L1282.75 1211.24 L1282.16 1211.24 L1281.58 1211.24 L1280.99 1211.24 L1280.4 1211.24 L1279.82 1211.24 L1279.23 1211.24 L1278.65 1211.24 L1278.06 1211.24 L1277.47 1211.24 L1276.89 1211.24 L1276.3 1211.24 L1275.71 1211.24 L1275.13 1211.24 L1274.54 1211.24 L1273.95 1211.24 L1273.37 1211.24 L1272.78 1211.24 L1272.19 1211.24 L1271.61 1211.24 L1271.02 1211.24 L1270.44 1211.24 L1269.85 1211.24 L1269.26 1211.24 L1268.68 1211.24 L1268.09 1211.24 L1267.5 1211.24 L1266.92 1211.24 L1266.33 1211.24 L1265.74 1211.24 L1265.16 1211.24 L1264.57 1211.24 L1263.98 1211.24 L1263.4 1211.24 L1262.81 1211.24 L1262.23 1211.24 L1261.64 1211.24 L1261.05 1211.24 L1260.47 1211.24 L1259.88 1211.24 L1259.29 1211.24 L1258.71 1211.24 L1258.12 1211.24 L1257.53 1211.24 L1256.95 1211.24 L1256.36 1211.24 L1255.78 1211.24 L1255.19 1211.24 L1254.6 1211.24 L1254.02 1211.24 L1253.43 1211.24 L1252.84 1211.24 L1252.26 1211.24 L1251.67 1211.24 L1251.08 1211.24 L1250.5 1211.24 L1249.91 1211.24 L1249.32 1211.24 L1248.74 1211.24 L1248.15 1211.24 L1247.57 1211.24 L1246.98 1211.24 L1246.39 1211.24 L1245.81 1211.24 L1245.22 1211.24 L1244.63 1211.24 L1244.05 1211.24 L1243.46 1211.24 L1242.87 1211.24 L1242.29 1211.24 L1241.7 1211.24 L1241.11 1211.24 L1240.53 1211.24 L1239.94 1211.24 L1239.36 1211.24 L1238.77 1211.24 L1238.18 1211.24 L1237.6 1211.24 L1237.01 1211.24 L1236.42 1211.24 L1235.84 1211.24 L1235.25 1211.24 L1234.66 1211.24 L1234.08 1211.24 L1233.49 1211.24 L1232.91 1211.24 L1232.32 1211.24 L1231.73 1211.24 L1231.15 1211.24 L1230.56 1211.24 L1229.97 1211.24 L1229.39 1211.24 L1228.8 1211.24 L1228.21 1211.24 L1227.63 1211.24 L1227.04 1211.24 L1226.45 1211.24 L1225.87 1211.24 L1225.28 1211.24 L1224.7 1211.24 L1224.11 1211.24 L1223.52 1211.24 L1222.94 1211.24 L1222.35 1211.24 L1221.76 1211.24 L1221.18 1211.24 L1220.59 1211.24 L1220 1211.24 L1219.42 1211.24 L1218.83 1211.24 L1218.24 1211.24 L1217.66 1211.24 L1217.07 1211.24 L1216.49 1211.24 L1215.9 1211.24 L1215.31 1211.24 L1214.73 1211.24 L1214.14 1211.24 L1213.55 1211.24 L1212.97 1211.24 L1212.38 1211.24 L1211.79 1211.24 L1211.21 1211.24 L1210.62 1211.24 L1210.03 1211.24 L1209.45 1211.24 L1208.86 1211.24 L1208.28 1211.24 L1207.69 1211.24 L1207.1 1211.24 L1206.52 1211.24 L1205.93 1211.24 L1205.34 1211.24 L1204.76 1211.24 L1204.17 1211.24 L1203.58 1211.24 L1203 1211.24 L1202.41 1211.24 L1201.83 1211.24 L1201.24 1211.24 L1200.65 1211.24 L1200.07 1211.24 L1199.48 1211.24 L1198.89 1211.24 L1198.31 1211.24 L1197.72 1211.24 L1197.13 1211.24 L1196.55 1211.24 L1195.96 1211.24 L1195.37 1211.24 L1194.79 1211.24 L1194.2 1211.24 L1193.62 1211.24 L1193.03 1211.24 L1192.44 1211.24 L1191.86 1211.24 L1191.27 1211.24 L1190.68 1211.24 L1190.1 1211.24 L1189.51 1211.24 L1188.92 1211.24 L1188.34 1211.24 L1187.75 1211.24 L1187.16 1211.24 L1186.58 1211.24 L1185.99 1211.24 L1185.41 1211.24 L1184.82 1211.24 L1184.23 1211.24 L1183.65 1211.24 L1183.06 1211.24 L1182.47 1211.24 L1181.89 1211.24 L1181.3 1211.24 L1180.71 1211.24 L1180.13 1211.24 L1179.54 1211.24 L1178.96 1211.24 L1178.37 1211.24 L1177.78 1211.24 L1177.2 1211.24 L1176.61 1211.24 L1176.02 1211.24 L1175.44 1211.24 L1174.85 1211.24 L1174.26 1211.24 L1173.68 1211.24 L1173.09 1211.24 L1172.5 1211.24 L1171.92 1211.24 L1171.33 1211.24 L1170.75 1211.24 L1170.16 1211.24 L1169.57 1211.24 L1168.99 1211.24 L1168.4 1211.24 L1167.81 1211.24 L1167.23 1211.24 L1166.64 1211.24 L1166.05 1211.24 L1165.47 1211.24 L1164.88 1211.24 L1164.29 1211.24 L1163.71 1211.24 L1163.12 1211.24 L1162.54 1211.24 L1161.95 1211.24 L1161.36 1211.24 L1160.78 1211.24 L1160.19 1211.24 L1159.6 1211.24 L1159.02 1211.24 L1158.43 1211.24 L1157.84 1211.24 L1157.26 1211.24 L1156.67 1211.24 L1156.09 1211.24 L1155.5 1211.24 L1154.91 1211.24 L1154.33 1211.24 L1153.74 1211.24 L1153.15 1211.24 L1152.57 1211.24 L1151.98 1211.24 L1151.39 1211.24 L1150.81 1211.24 L1150.22 1211.24 L1149.63 1211.24 L1149.05 1211.24 L1148.46 1211.24 L1147.88 1211.24 L1147.29 1211.24 L1146.7 1211.24 L1146.12 1211.24 L1145.53 1211.24 L1144.94 1211.24 L1144.36 1211.24 L1143.77 1211.24 L1143.18 1211.24 L1142.6 1211.24 L1142.01 1211.24 L1141.42 1211.24 L1140.84 1211.24 L1140.25 1211.24 L1139.67 1211.24 L1139.08 1211.24 L1138.49 1211.24 L1137.91 1211.24 L1137.32 1211.24 L1136.73 1211.24 L1136.15 1211.24 L1135.56 1211.24 L1134.97 1211.24 L1134.39 1211.24 L1133.8 1211.24 L1133.21 1211.24 L1132.63 1211.24 L1132.04 1211.24 L1131.46 1211.24 L1130.87 1211.24 L1130.28 1211.24 L1129.7 1211.24 L1129.11 1211.24 L1128.52 1211.24 L1127.94 1211.24 L1127.35 1211.24 L1126.76 1211.24 L1126.18 1211.24 L1125.59 1211.24 L1125.01 1211.24 L1124.42 1211.24 L1123.83 1211.24 L1123.25 1211.24 L1122.66 1211.24 L1122.07 1211.24 L1121.49 1211.24 L1120.9 1211.24 L1120.31 1211.24 L1119.73 1211.24 L1119.14 1211.24 L1118.55 1211.24 L1117.97 1211.24 L1117.38 1211.24 L1116.8 1211.24 L1116.21 1211.24 L1115.62 1211.24 L1115.04 1211.24 L1114.45 1211.24 L1113.86 1211.24 L1113.28 1211.24 L1112.69 1211.24 L1112.1 1211.24 L1111.52 1211.24 L1110.93 1211.24 L1110.34 1211.24 L1109.76 1211.24 L1109.17 1211.24 L1108.59 1211.24 L1108 1211.24 L1107.41 1211.24 L1106.83 1211.24 L1106.24 1211.24 L1105.65 1211.24 L1105.07 1211.24 L1104.48 1211.24 L1103.89 1211.24 L1103.31 1211.24 L1102.72 1211.24 L1102.14 1211.24 L1101.55 1211.24 L1100.96 1211.24 L1100.38 1211.24 L1099.79 1211.24 L1099.2 1211.24 L1098.62 1211.24 L1098.03 1211.24 L1097.44 1211.24 L1096.86 1211.24 L1096.27 1211.24 L1095.68 1211.24 L1095.1 1211.24 L1094.51 1211.24 L1093.93 1211.24 L1093.34 1211.24 L1092.75 1211.24 L1092.17 1211.24 L1091.58 1211.24 L1090.99 1211.24 L1090.41 1211.24 L1089.82 1211.24 L1089.23 1211.24 L1088.65 1211.24 L1088.06 1211.24 L1087.47 1211.24 L1086.89 1211.24 L1086.3 1211.24 L1085.72 1211.24 L1085.13 1211.24 L1084.54 1211.24 L1083.96 1211.24 L1083.37 1211.24 L1082.78 1211.24 L1082.2 1211.24 L1081.61 1211.24 L1081.02 1211.24 L1080.44 1211.24 L1079.85 1211.24 L1079.26 1211.24 L1078.68 1211.24 L1078.09 1211.24 L1077.51 1211.24 L1076.92 1211.24 L1076.33 1211.24 L1075.75 1211.24 L1075.16 1211.24 L1074.57 1211.24 L1073.99 1211.24 L1073.4 1211.24 L1072.81 1211.24 L1072.23 1211.24 L1071.64 1211.24 L1071.06 1211.24 L1070.47 1211.24 L1069.88 1211.24 L1069.3 1211.24 L1068.71 1211.24 L1068.12 1211.24 L1067.54 1211.24 L1066.95 1211.24 L1066.36 1211.24 L1065.78 1211.24 L1065.19 1211.24 L1064.6 1211.24 L1064.02 1211.24 L1063.43 1211.24 L1062.85 1211.24 L1062.26 1211.24 L1061.67 1211.24 L1061.09 1211.24 L1060.5 1211.24 L1059.91 1211.24 L1059.33 1211.24 L1058.74 1211.24 L1058.15 1211.24 L1057.57 1211.24 L1056.98 1211.24 L1056.39 1211.24 L1055.81 1211.24 L1055.22 1211.24 L1054.64 1211.24 L1054.05 1211.24 L1053.46 1211.24 L1052.88 1211.24 L1052.29 1211.24 L1051.7 1211.24 L1051.12 1211.24 L1050.53 1211.24 L1049.94 1211.24 L1049.36 1211.24 L1048.77 1211.24 L1048.19 1211.24 L1047.6 1211.24 L1047.01 1211.24 L1046.43 1211.24 L1045.84 1211.24 L1045.25 1211.24 L1044.67 1211.24 L1044.08 1211.24 L1043.49 1211.24 L1042.91 1211.24 L1042.32 1211.24 L1041.73 1211.24 L1041.15 1211.24 L1040.56 1211.24 L1039.98 1211.24 L1039.39 1211.24 L1038.8 1211.24 L1038.22 1211.24 L1037.63 1211.24 L1037.04 1211.24 L1036.46 1211.24 L1035.87 1211.24 L1035.28 1211.24 L1034.7 1211.24 L1034.11 1211.24 L1033.52 1211.24 L1032.94 1211.24 L1032.35 1211.24 L1031.77 1211.24 L1031.18 1211.24 L1030.59 1211.24 L1030.01 1211.24 L1029.42 1211.24 L1028.83 1211.24 L1028.25 1211.24 L1027.66 1211.24 L1027.07 1211.24 L1026.49 1211.24 L1025.9 1211.24 L1025.32 1211.24 L1024.73 1211.24 L1024.14 1211.24 L1023.56 1211.24 L1022.97 1211.24 L1022.38 1211.24 L1021.8 1211.24 L1021.21 1211.24 L1020.62 1211.24 L1020.04 1211.24 L1019.45 1211.24 L1018.86 1211.24 L1018.28 1211.24 L1017.69 1211.24 L1017.11 1211.24 L1016.52 1211.24 L1015.93 1211.24 L1015.35 1211.24 L1014.76 1211.24 L1014.17 1211.24 L1013.59 1211.24 L1013 1211.24 L1012.41 1211.24 L1011.83 1211.24 L1011.24 1211.24 L1010.65 1211.24 L1010.07 1211.24 L1009.48 1211.24 L1008.9 1211.24 L1008.31 1211.24 L1007.72 1211.24 L1007.14 1211.24 L1006.55 1211.24 L1005.96 1211.24 L1005.38 1211.24 L1004.79 1211.24 L1004.2 1211.24 L1003.62 1211.24 L1003.03 1211.24 L1002.44 1211.24 L1001.86 1211.24 L1001.27 1211.24 L1000.69 1211.24 L1000.1 1211.24 L999.513 1211.24 L998.926 1211.24 L998.34 1211.24 L997.754 1211.24 L997.167 1211.24 L996.581 1211.24 L995.994 1211.24 L995.408 1211.24 L994.822 1211.24 L994.235 1211.24 L993.649 1211.24 L993.062 1211.24 L992.476 1211.24 L991.889 1211.24 L991.303 1211.24 L990.717 1211.24 L990.13 1211.24 L989.544 1211.24 L988.957 1211.24 L988.371 1211.24 L987.785 1211.24 L987.198 1211.24 L986.612 1211.24 L986.025 1211.24  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.61 986.612,1211.61 987.198,1211.61 987.785,1211.61 988.371,1211.61 988.957,1211.61 989.544,1211.61 990.13,1211.61 990.717,1211.61 991.303,1211.61 991.889,1211.61 992.476,1211.61 993.062,1211.61 993.649,1211.61 994.235,1211.61 994.822,1211.61 995.408,1211.61 995.994,1211.61 996.581,1211.61 997.167,1211.61 997.754,1211.61 998.34,1211.61 998.926,1211.61 999.513,1211.61 1000.1,1211.61 1000.69,1211.61 1001.27,1211.61 1001.86,1211.61 1002.44,1211.61 1003.03,1211.61 1003.62,1211.61 1004.2,1211.61 1004.79,1211.61 1005.38,1211.61 1005.96,1211.61 1006.55,1211.61 1007.14,1211.61 1007.72,1211.61 1008.31,1211.61 1008.9,1211.61 1009.48,1211.61 1010.07,1211.61 1010.65,1211.61 1011.24,1211.61 1011.83,1211.61 1012.41,1211.61 1013,1211.61 1013.59,1211.61 1014.17,1211.61 1014.76,1211.61 1015.35,1211.61 1015.93,1211.61 1016.52,1211.61 1017.11,1211.61 1017.69,1211.61 1018.28,1211.61 1018.86,1211.61 1019.45,1211.61 1020.04,1211.61 1020.62,1211.61 1021.21,1211.61 1021.8,1211.61 1022.38,1211.61 1022.97,1211.61 1023.56,1211.61 1024.14,1211.61 1024.73,1211.61 1025.32,1211.61 1025.9,1211.61 1026.49,1211.61 1027.07,1211.61 1027.66,1211.61 1028.25,1211.61 1028.83,1211.61 1029.42,1211.61 1030.01,1211.61 1030.59,1211.61 1031.18,1211.61 1031.77,1211.61 1032.35,1211.61 1032.94,1211.61 1033.52,1211.61 1034.11,1211.61 1034.7,1211.61 1035.28,1211.61 1035.87,1211.61 1036.46,1211.61 1037.04,1211.61 1037.63,1211.61 1038.22,1211.61 1038.8,1211.61 1039.39,1211.61 1039.98,1211.61 1040.56,1211.61 1041.15,1211.61 1041.73,1211.61 1042.32,1211.61 1042.91,1211.61 1043.49,1211.61 1044.08,1211.61 1044.67,1211.61 1045.25,1211.61 1045.84,1211.61 1046.43,1211.61 1047.01,1211.61 1047.6,1211.61 1048.19,1211.61 1048.77,1211.61 1049.36,1211.61 1049.94,1211.61 1050.53,1211.61 1051.12,1211.61 1051.7,1211.61 1052.29,1211.61 1052.88,1211.61 1053.46,1211.61 1054.05,1211.61 1054.64,1211.61 1055.22,1211.61 1055.81,1211.61 1056.39,1211.61 1056.98,1211.61 1057.57,1211.61 1058.15,1211.61 1058.74,1211.61 1059.33,1211.61 1059.91,1211.61 1060.5,1211.61 1061.09,1211.61 1061.67,1211.61 1062.26,1211.61 1062.85,1211.61 1063.43,1211.61 1064.02,1211.61 1064.6,1211.61 1065.19,1211.61 1065.78,1211.61 1066.36,1211.61 1066.95,1211.61 1067.54,1211.61 1068.12,1211.61 1068.71,1211.61 1069.3,1211.61 1069.88,1211.61 1070.47,1211.61 1071.06,1211.61 1071.64,1211.61 1072.23,1211.61 1072.81,1211.61 1073.4,1211.61 1073.99,1211.61 1074.57,1211.61 1075.16,1211.61 1075.75,1211.61 1076.33,1211.61 1076.92,1211.61 1077.51,1211.61 1078.09,1211.61 1078.68,1211.61 1079.26,1211.61 1079.85,1211.61 1080.44,1211.61 1081.02,1211.61 1081.61,1211.61 1082.2,1211.61 1082.78,1211.61 1083.37,1211.61 1083.96,1211.61 1084.54,1211.61 1085.13,1211.61 1085.72,1211.61 1086.3,1211.61 1086.89,1211.61 1087.47,1211.61 1088.06,1211.61 1088.65,1211.61 1089.23,1211.61 1089.82,1211.61 1090.41,1211.61 1090.99,1211.61 1091.58,1211.61 1092.17,1211.61 1092.75,1211.61 1093.34,1211.61 1093.93,1211.61 1094.51,1211.61 1095.1,1211.61 1095.68,1211.61 1096.27,1211.61 1096.86,1211.61 1097.44,1211.61 1098.03,1211.61 1098.62,1211.61 1099.2,1211.61 1099.79,1211.61 1100.38,1211.61 1100.96,1211.61 1101.55,1211.61 1102.14,1211.61 1102.72,1211.61 1103.31,1211.61 1103.89,1211.61 1104.48,1211.61 1105.07,1211.61 1105.65,1211.61 1106.24,1211.61 1106.83,1211.61 1107.41,1211.61 1108,1211.61 1108.59,1211.61 1109.17,1211.61 1109.76,1211.61 1110.34,1211.61 1110.93,1211.61 1111.52,1211.61 1112.1,1211.61 1112.69,1211.61 1113.28,1211.61 1113.86,1211.61 1114.45,1211.61 1115.04,1211.61 1115.62,1211.61 1116.21,1211.61 1116.8,1211.61 1117.38,1211.61 1117.97,1211.61 1118.55,1211.61 1119.14,1211.61 1119.73,1211.61 1120.31,1211.61 1120.9,1211.61 1121.49,1211.61 1122.07,1211.61 1122.66,1211.61 1123.25,1211.61 1123.83,1211.61 1124.42,1211.61 1125.01,1211.61 1125.59,1211.61 1126.18,1211.61 1126.76,1211.61 1127.35,1211.61 1127.94,1211.61 1128.52,1211.61 1129.11,1211.61 1129.7,1211.61 1130.28,1211.61 1130.87,1211.61 1131.46,1211.61 1132.04,1211.61 1132.63,1211.61 1133.21,1211.61 1133.8,1211.61 1134.39,1211.61 1134.97,1211.61 1135.56,1211.61 1136.15,1211.61 1136.73,1211.61 1137.32,1211.61 1137.91,1211.61 1138.49,1211.61 1139.08,1211.61 1139.67,1211.61 1140.25,1211.61 1140.84,1211.61 1141.42,1211.61 1142.01,1211.61 1142.6,1211.61 1143.18,1211.61 1143.77,1211.61 1144.36,1211.61 1144.94,1211.61 1145.53,1211.61 1146.12,1211.61 1146.7,1211.61 1147.29,1211.61 1147.88,1211.61 1148.46,1211.61 1149.05,1211.61 1149.63,1211.61 1150.22,1211.61 1150.81,1211.61 1151.39,1211.61 1151.98,1211.61 1152.57,1211.61 1153.15,1211.61 1153.74,1211.61 1154.33,1211.61 1154.91,1211.61 1155.5,1211.61 1156.09,1211.61 1156.67,1211.61 1157.26,1211.61 1157.84,1211.61 1158.43,1211.61 1159.02,1211.61 1159.6,1211.61 1160.19,1211.61 1160.78,1211.61 1161.36,1211.61 1161.95,1211.61 1162.54,1211.61 1163.12,1211.61 1163.71,1211.61 1164.29,1211.61 1164.88,1211.61 1165.47,1211.61 1166.05,1211.61 1166.64,1211.61 1167.23,1211.61 1167.81,1211.61 1168.4,1211.61 1168.99,1211.61 1169.57,1211.61 1170.16,1211.61 1170.75,1211.61 1171.33,1211.61 1171.92,1211.61 1172.5,1211.61 1173.09,1211.61 1173.68,1211.61 1174.26,1211.61 1174.85,1211.61 1175.44,1211.61 1176.02,1211.61 1176.61,1211.61 1177.2,1211.61 1177.78,1211.61 1178.37,1211.61 1178.96,1211.61 1179.54,1211.61 1180.13,1211.61 1180.71,1211.61 1181.3,1211.61 1181.89,1211.61 1182.47,1211.61 1183.06,1211.61 1183.65,1211.61 1184.23,1211.61 1184.82,1211.61 1185.41,1211.61 1185.99,1211.61 1186.58,1211.61 1187.16,1211.61 1187.75,1211.61 1188.34,1211.61 1188.92,1211.61 1189.51,1211.61 1190.1,1211.61 1190.68,1211.61 1191.27,1211.61 1191.86,1211.61 1192.44,1211.61 1193.03,1211.61 1193.62,1211.61 1194.2,1211.61 1194.79,1211.61 1195.37,1211.61 1195.96,1211.61 1196.55,1211.61 1197.13,1211.61 1197.72,1211.61 1198.31,1211.61 1198.89,1211.61 1199.48,1211.61 1200.07,1211.61 1200.65,1211.61 1201.24,1211.61 1201.83,1211.61 1202.41,1211.61 1203,1211.61 1203.58,1211.61 1204.17,1211.61 1204.76,1211.61 1205.34,1211.61 1205.93,1211.61 1206.52,1211.61 1207.1,1211.61 1207.69,1211.61 1208.28,1211.61 1208.86,1211.61 1209.45,1211.61 1210.03,1211.61 1210.62,1211.61 1211.21,1211.61 1211.79,1211.61 1212.38,1211.61 1212.97,1211.61 1213.55,1211.61 1214.14,1211.61 1214.73,1211.61 1215.31,1211.61 1215.9,1211.61 1216.49,1211.61 1217.07,1211.61 1217.66,1211.61 1218.24,1211.61 1218.83,1211.61 1219.42,1211.61 1220,1211.61 1220.59,1211.61 1221.18,1211.61 1221.76,1211.61 1222.35,1211.61 1222.94,1211.61 1223.52,1211.61 1224.11,1211.61 1224.7,1211.61 1225.28,1211.61 1225.87,1211.61 1226.45,1211.61 1227.04,1211.61 1227.63,1211.61 1228.21,1211.61 1228.8,1211.61 1229.39,1211.61 1229.97,1211.61 1230.56,1211.61 1231.15,1211.61 1231.73,1211.61 1232.32,1211.61 1232.91,1211.61 1233.49,1211.61 1234.08,1211.61 1234.66,1211.61 1235.25,1211.61 1235.84,1211.61 1236.42,1211.61 1237.01,1211.61 1237.6,1211.61 1238.18,1211.61 1238.77,1211.61 1239.36,1211.61 1239.94,1211.61 1240.53,1211.61 1241.11,1211.61 1241.7,1211.61 1242.29,1211.61 1242.87,1211.61 1243.46,1211.61 1244.05,1211.61 1244.63,1211.61 1245.22,1211.61 1245.81,1211.61 1246.39,1211.61 1246.98,1211.61 1247.57,1211.61 1248.15,1211.61 1248.74,1211.61 1249.32,1211.61 1249.91,1211.61 1250.5,1211.61 1251.08,1211.61 1251.67,1211.61 1252.26,1211.61 1252.84,1211.61 1253.43,1211.61 1254.02,1211.61 1254.6,1211.61 1255.19,1211.61 1255.78,1211.61 1256.36,1211.61 1256.95,1211.61 1257.53,1211.61 1258.12,1211.61 1258.71,1211.61 1259.29,1211.61 1259.88,1211.61 1260.47,1211.61 1261.05,1211.61 1261.64,1211.61 1262.23,1211.61 1262.81,1211.61 1263.4,1211.61 1263.98,1211.61 1264.57,1211.61 1265.16,1211.61 1265.74,1211.61 1266.33,1211.61 1266.92,1211.61 1267.5,1211.61 1268.09,1211.61 1268.68,1211.61 1269.26,1211.61 1269.85,1211.61 1270.44,1211.61 1271.02,1211.61 1271.61,1211.61 1272.19,1211.61 1272.78,1211.61 1273.37,1211.61 1273.95,1211.61 1274.54,1211.61 1275.13,1211.61 1275.71,1211.61 1276.3,1211.61 1276.89,1211.61 1277.47,1211.61 1278.06,1211.61 1278.65,1211.61 1279.23,1211.61 1279.82,1211.61 1280.4,1211.61 1280.99,1211.61 1281.58,1211.61 1282.16,1211.61 1282.75,1211.61 1283.34,1211.61 1283.92,1211.61 1284.51,1211.61 1285.1,1211.61 1285.68,1211.61 1286.27,1211.61 1286.86,1211.61 1287.44,1211.61 1288.03,1211.61 1288.61,1211.61 1289.2,1211.61 1289.79,1211.61 1290.37,1211.61 1290.96,1211.61 1291.55,1211.61 1292.13,1211.61 1292.72,1211.61 1293.31,1211.61 1293.89,1211.61 1294.48,1211.61 1295.06,1211.61 1295.65,1211.61 1296.24,1211.61 1296.82,1211.61 1297.41,1211.61 1298,1211.61 1298.58,1211.61 1299.17,1211.61 1299.76,1211.61 1300.34,1211.61 1300.93,1211.61 1301.52,1211.61 1302.1,1211.61 1302.69,1211.61 1303.27,1211.61 1303.86,1211.61 1304.45,1211.61 1305.03,1211.61 1305.62,1211.61 1306.21,1211.61 1306.79,1211.61 1307.38,1211.61 1307.97,1211.61 1308.55,1211.61 1309.14,1211.61 1309.73,1211.61 1310.31,1211.61 1310.9,1211.61 1311.48,1211.61 1312.07,1211.61 1312.66,1211.61 1313.24,1211.61 1313.83,1211.61 1314.42,1211.61 1315,1211.61 1315.59,1211.61 1316.18,1211.61 1316.76,1211.61 1317.35,1211.61 1317.93,1211.61 1318.52,1211.61 1319.11,1211.61 1319.69,1211.61 1320.28,1211.61 1320.87,1211.61 1321.45,1211.61 1322.04,1211.61 1322.63,1211.61 1323.21,1211.61 1323.8,1211.61 1324.39,1211.61 1324.97,1211.61 1325.56,1211.61 1326.14,1211.61 1326.73,1211.61 1327.32,1211.61 1327.9,1211.61 1328.49,1211.61 1329.08,1211.61 1329.66,1211.61 1330.25,1211.61 1330.84,1211.61 1331.42,1211.61 1332.01,1211.61 1332.6,1211.61 1333.18,1211.61 1333.77,1211.61 1334.35,1211.61 1334.94,1211.61 1335.53,1211.61 1336.11,1211.61 1336.7,1211.61 1337.29,1211.61 1337.87,1211.61 1338.46,1211.61 1339.05,1211.61 1339.63,1211.61 1340.22,1211.61 1340.8,1211.61 1341.39,1211.61 1341.98,1211.61 1342.56,1211.61 1343.15,1211.61 1343.74,1211.61 1344.32,1211.61 1344.91,1211.61 1345.5,1211.61 1346.08,1211.61 1346.67,1211.61 1347.26,1211.61 1347.84,1211.61 1348.43,1211.61 1349.01,1211.61 1349.6,1211.61 1350.19,1211.61 1350.77,1211.61 1351.36,1211.61 1351.95,1211.61 1352.53,1211.61 1353.12,1211.61 1353.71,1211.61 1354.29,1211.61 1354.88,1211.61 1355.47,1211.61 1356.05,1211.61 1356.64,1211.61 1357.22,1211.61 1357.81,1211.61 1358.4,1211.61 1358.98,1211.61 1359.57,1211.61 1360.16,1211.61 1360.74,1211.61 1361.33,1211.61 1361.92,1211.61 1362.5,1211.61 1363.09,1211.61 1363.68,1211.61 1364.26,1211.61 1364.85,1211.61 1365.43,1211.61 1366.02,1211.61 1366.61,1211.61 1367.19,1211.61 1367.78,1211.61 1368.37,1211.61 1368.95,1211.61 1369.54,1211.61 1370.13,1211.61 1370.71,1211.61 1371.3,1211.61 1371.88,1211.61 1372.47,1211.61 1373.06,1211.61 1373.64,1211.61 1374.23,1211.61 1374.82,1211.61 1375.4,1211.61 1375.99,1211.61 1376.58,1211.61 1377.16,1211.61 1377.75,1211.61 1378.34,1211.61 1378.92,1211.61 1379.51,1211.61 1380.09,1211.61 1380.68,1211.61 1381.27,1211.61 1381.85,1211.61 1382.44,1211.61 1383.03,1211.61 1383.61,1211.61 1384.2,1211.61 1384.79,1211.61 1385.37,1211.61 1385.96,1211.61 1386.55,1211.61 1387.13,1211.61 1387.72,1211.61 1388.3,1211.61 1388.89,1211.61 1389.48,1211.61 1390.06,1211.61 1390.65,1211.61 1391.24,1211.61 1391.82,1211.61 1392.41,1211.61 1393,1211.61 1393.58,1211.61 1394.17,1211.61 1394.75,1211.61 1395.34,1211.61 1395.93,1211.61 1396.51,1211.61 1397.1,1211.61 1397.69,1211.61 1398.27,1211.61 1398.86,1211.61 1399.45,1211.61 1400.03,1211.61 1400.62,1211.61 1401.21,1211.61 1401.79,1211.61 1402.38,1211.61 1402.96,1211.61 1403.55,1211.61 1404.14,1211.61 1404.72,1211.61 1405.31,1211.61 1405.9,1211.61 1406.48,1211.61 1407.07,1211.61 1407.66,1211.61 1408.24,1211.61 1408.83,1211.61 1409.42,1211.61 1410,1211.61 1410.59,1211.61 1411.17,1211.61 1411.76,1211.61 1412.35,1211.61 1412.93,1211.61 1413.52,1211.61 1414.11,1211.61 1414.69,1211.61 1415.28,1211.61 1415.87,1211.61 1416.45,1211.61 1417.04,1211.61 1417.63,1211.61 1418.21,1211.61 1418.8,1211.61 1419.38,1211.61 1419.97,1211.61 1420.56,1211.61 1421.14,1211.61 1421.73,1211.61 1422.32,1211.61 1422.9,1211.61 1423.49,1211.61 1424.08,1211.61 1424.66,1211.61 1425.25,1211.61 1425.83,1211.61 1426.42,1211.61 1427.01,1211.61 1427.59,1211.61 1428.18,1211.61 1428.77,1211.61 1429.35,1211.61 1429.94,1211.61 1430.53,1211.61 1431.11,1211.61 1431.7,1211.61 1432.29,1211.61 1432.87,1211.61 1433.46,1211.61 1434.04,1211.61 1434.63,1211.61 1435.22,1211.61 1435.8,1211.61 1436.39,1211.61 1436.98,1211.61 1437.56,1211.61 1438.15,1211.61 1438.74,1211.61 1439.32,1211.61 1439.91,1211.61 1440.5,1211.61 1441.08,1211.61 1441.67,1211.61 1442.25,1211.61 1442.84,1211.61 1443.43,1211.61 1444.01,1211.61 1444.6,1211.61 1445.19,1211.61 1445.77,1211.61 1446.36,1211.61 1446.95,1211.61 1447.53,1211.61 1448.12,1211.61 1448.7,1211.61 1449.29,1211.61 1449.88,1211.61 1450.46,1211.61 1451.05,1211.61 1451.64,1211.61 1452.22,1211.61 1452.81,1211.61 1453.4,1211.61 1453.98,1211.61 1454.57,1211.61 1455.16,1211.61 1455.74,1211.61 1456.33,1211.61 1456.91,1211.61 1457.5,1211.61 1458.09,1211.61 1458.67,1211.61 1459.26,1211.61 1459.85,1211.61 1460.43,1211.61 1461.02,1211.61 1461.61,1211.61 1462.19,1211.61 1462.78,1211.61 1463.37,1211.61 1463.95,1211.61 1464.54,1211.61 1465.12,1211.61 1465.71,1211.61 1466.3,1211.61 1466.88,1211.61 1467.47,1211.61 1468.06,1211.61 1468.64,1211.61 1469.23,1211.61 1469.82,1211.61 1470.4,1211.61 1470.99,1211.61 1471.57,1211.61 1472.16,1211.61 1472.75,1211.61 1473.33,1211.61 1473.92,1211.61 1474.51,1211.61 1475.09,1211.61 1475.68,1211.61 1476.27,1211.61 1476.85,1211.61 1477.44,1211.61 1478.03,1211.61 1478.61,1211.61 1479.2,1211.61 1479.78,1211.61 1480.37,1211.61 1480.96,1211.61 1481.54,1211.61 1482.13,1211.61 1482.72,1211.61 1483.3,1211.61 1483.89,1211.61 1484.48,1211.61 1485.06,1211.61 1485.65,1211.61 1486.24,1211.61 1486.82,1211.61 1487.41,1211.61 1487.99,1211.61 1488.58,1211.61 1489.17,1211.61 1489.75,1211.61 1490.34,1211.61 1490.93,1211.61 1491.51,1211.61 1492.1,1211.61 1492.69,1211.61 1493.27,1211.61 1493.86,1211.61 1494.45,1211.61 1495.03,1211.61 1495.62,1211.61 1496.2,1211.61 1496.79,1211.61 1497.38,1211.61 1497.96,1211.61 1498.55,1211.61 1499.14,1211.61 1499.72,1211.61 1500.31,1211.61 1500.9,1211.61 1501.48,1211.61 1502.07,1211.61 1502.65,1211.61 1503.24,1211.61 1503.83,1211.61 1504.41,1211.61 1505,1211.61 1505.59,1211.61 1506.17,1211.61 1506.76,1211.61 1507.35,1211.61 1507.93,1211.61 1508.52,1211.61 1509.11,1211.61 1509.69,1211.61 1510.28,1211.61 1510.86,1211.61 1511.45,1211.61 1512.04,1211.61 1512.62,1211.61 1513.21,1211.61 1513.8,1211.61 1514.38,1211.61 1514.97,1211.61 1515.56,1211.61 1516.14,1211.61 1516.73,1211.61 1517.32,1211.61 1517.9,1211.61 1518.49,1211.61 1519.07,1211.61 1519.66,1211.61 1520.25,1211.61 1520.83,1211.61 1521.42,1211.61 1522.01,1211.61 1522.59,1211.61 1523.18,1211.61 1523.77,1211.61 1524.35,1211.61 1524.94,1211.61 1525.52,1211.61 1526.11,1211.61 1526.7,1211.61 1527.28,1211.61 1527.87,1211.61 1528.46,1211.61 1529.04,1211.61 1529.63,1211.61 1530.22,1211.61 1530.8,1211.61 1531.39,1211.61 1531.98,1211.61 1532.56,1211.61 1533.15,1211.61 1533.73,1211.61 1534.32,1211.61 1534.91,1211.61 1535.49,1211.61 1536.08,1211.61 1536.67,1211.61 1537.25,1211.61 1537.84,1211.61 1538.43,1211.61 1539.01,1211.61 1539.6,1211.61 1540.19,1211.61 1540.77,1211.61 1541.36,1211.61 1541.94,1211.61 1542.53,1211.61 1543.12,1211.61 1543.7,1211.61 1544.29,1211.61 1544.88,1211.61 1545.46,1211.61 1546.05,1211.61 1546.64,1211.61 1547.22,1211.61 1547.81,1211.61 1548.4,1211.61 1548.98,1211.61 1549.57,1211.61 1550.15,1211.61 1550.74,1211.61 1551.33,1211.61 1551.91,1211.61 1552.5,1211.61 1553.09,1211.61 1553.67,1211.61 1554.26,1211.61 1554.85,1211.61 1555.43,1211.61 1556.02,1211.61 1556.6,1211.61 1557.19,1211.61 1557.78,1211.61 1558.36,1211.61 1558.95,1211.61 1559.54,1211.61 1560.12,1211.61 1560.71,1211.61 1561.3,1211.61 1561.88,1211.61 1562.47,1211.61 1563.06,1211.61 1563.64,1211.61 1564.23,1211.61 1564.81,1211.61 1565.4,1211.61 1565.99,1211.61 1566.57,1211.61 1567.16,1211.61 1567.75,1211.61 1568.33,1211.61 1568.92,1211.61 1569.51,1211.61 1570.09,1211.61 1570.68,1211.61 1571.27,1211.61 1571.85,1211.61 1572.44,1211.61 1573.02,1211.61 1573.61,1211.61 1574.2,1211.61 1574.78,1211.61 1575.37,1211.61 1575.96,1211.61 1576.54,1211.61 1577.13,1211.61 1577.72,1211.61 1578.3,1211.61 1578.89,1211.61 1579.47,1211.61 1580.06,1211.61 1580.65,1211.61 1581.23,1211.61 1581.82,1211.61 1582.41,1211.61 1582.99,1211.61 1583.58,1211.61 1584.17,1211.61 1584.75,1211.61 1585.34,1211.61 1585.93,1211.61 1586.51,1211.61 1587.1,1211.61 1587.68,1211.61 1588.27,1211.61 1588.86,1211.61 1589.44,1211.61 1590.03,1211.61 1590.62,1211.61 1591.2,1211.61 1591.79,1211.61 1592.38,1211.61 1592.96,1211.61 1593.55,1211.61 1594.14,1211.61 1594.72,1211.61 1595.31,1211.61 1595.89,1211.61 1596.48,1211.61 1597.07,1211.61 1597.65,1211.61 1598.24,1211.61 1598.83,1211.61 1599.41,1211.61 1600,1211.61 1600.59,1211.61 1601.17,1211.61 1601.76,1211.61 1602.34,1211.61 1602.93,1211.61 1603.52,1211.61 1604.1,1211.61 1604.69,1211.61 1605.28,1211.61 1605.86,1211.61 1606.45,1211.61 1607.04,1211.61 1607.62,1211.61 1608.21,1211.61 1608.8,1211.61 1609.38,1211.61 1609.97,1211.61 1610.55,1211.61 1611.14,1211.61 1611.73,1211.61 1612.31,1211.61 1612.9,1211.61 1613.49,1211.61 1614.07,1211.61 1614.66,1211.61 1615.25,1211.61 1615.83,1211.61 1616.42,1211.61 1617.01,1211.61 1617.59,1211.61 1618.18,1211.61 1618.76,1211.61 1619.35,1211.61 1619.94,1211.61 1620.52,1211.61 1621.11,1211.61 1621.7,1211.61 1622.28,1211.61 1622.87,1211.61 1623.46,1211.61 1624.04,1211.61 1624.63,1211.61 1625.22,1211.61 1625.8,1211.61 1626.39,1211.61 1626.97,1211.61 1627.56,1211.61 1628.15,1211.61 1628.73,1211.61 1629.32,1211.61 1629.91,1211.61 1630.49,1211.61 1631.08,1211.61 1631.67,1211.61 1632.25,1211.61 1632.84,1211.61 1633.42,1211.61 1634.01,1211.61 1634.6,1211.61 1635.18,1211.61 1635.77,1211.61 1636.36,1211.61 1636.94,1211.61 1637.53,1211.61 1638.12,1211.61 1638.7,1211.61 1639.29,1211.61 1639.88,1211.61 1640.46,1211.61 1641.05,1211.61 1641.63,1211.61 1642.22,1211.61 1642.81,1211.61 1643.39,1211.61 1643.98,1211.61 1644.57,1211.61 1645.15,1211.61 1645.74,1211.61 1646.33,1211.61 1646.91,1211.61 1647.5,1211.61 1648.09,1211.61 1648.67,1211.61 1649.26,1211.61 1649.84,1211.61 1650.43,1211.61 1651.02,1211.61 1651.6,1211.61 1652.19,1211.61 1652.78,1211.61 1653.36,1211.61 1653.95,1211.61 1654.54,1211.61 1655.12,1211.61 1655.71,1211.61 1656.29,1211.61 1656.88,1211.61 1657.47,1211.61 1658.05,1211.61 1658.64,1211.61 1659.23,1211.61 1659.81,1211.61 1660.4,1211.61 1660.99,1211.61 1661.57,1211.61 1662.16,1211.61 1662.75,1211.61 1663.33,1211.61 1663.92,1211.61 1664.5,1211.61 1665.09,1211.61 1665.68,1211.61 1666.26,1211.61 1666.85,1211.61 1667.44,1211.61 1668.02,1211.61 1668.61,1211.61 1669.2,1211.61 1669.78,1211.61 1670.37,1211.61 1670.96,1211.61 1671.54,1211.61 1672.13,1211.61 1672.71,1211.61 1673.3,1211.61 1673.89,1211.61 1674.47,1211.61 1675.06,1211.61 1675.65,1211.61 1676.23,1211.61 1676.82,1211.61 1677.41,1211.61 1677.99,1211.61 1678.58,1211.61 1679.17,1211.61 1679.75,1211.61 1680.34,1211.61 1680.92,1211.61 1681.51,1211.61 1682.1,1211.61 1682.68,1211.61 1683.27,1211.61 1683.86,1211.61 1684.44,1211.61 1685.03,1211.61 1685.62,1211.61 1686.2,1211.61 1686.79,1211.61 1687.37,1211.61 1687.96,1211.61 1688.55,1211.61 1689.13,1211.61 1689.72,1211.61 1690.31,1211.61 1690.89,1211.61 1691.48,1211.61 1692.07,1211.61 1692.65,1211.61 1693.24,1211.61 1693.83,1211.61 1694.41,1211.61 1695,1211.61 1695.58,1211.61 1696.17,1211.61 1696.76,1211.61 1697.34,1211.61 1697.93,1211.61 1698.52,1211.61 1699.1,1211.61 1699.69,1211.61 1700.28,1211.61 1700.86,1211.61 1701.45,1211.61 1702.04,1211.61 1702.62,1211.61 1703.21,1211.61 1703.79,1211.61 1704.38,1211.61 1704.97,1211.61 1705.55,1211.61 1706.14,1211.61 1706.73,1211.61 1707.31,1211.61 1707.9,1211.61 1708.49,1211.61 1709.07,1211.61 1709.66,1211.61 1710.24,1211.61 1710.83,1211.61 1711.42,1211.61 1712,1211.61 1712.59,1211.61 1713.18,1211.61 1713.76,1211.61 1714.35,1211.61 1714.94,1211.61 1715.52,1211.61 1716.11,1211.61 1716.7,1211.61 1717.28,1211.61 1717.87,1211.61 1718.45,1211.61 1719.04,1211.61 1719.63,1211.61 1720.21,1211.61 1720.8,1211.61 1721.39,1211.61 1721.97,1211.61 1722.56,1211.61 1723.15,1211.61 1723.73,1211.61 1724.32,1211.61 1724.91,1211.61 1725.49,1211.61 1726.08,1211.61 1726.66,1211.61 1727.25,1211.61 1727.84,1211.61 1728.42,1211.61 1729.01,1211.61 1729.6,1211.61 1730.18,1211.61 1730.77,1211.61 1731.36,1211.61 1731.94,1211.61 1732.53,1211.61 1733.11,1211.61 1733.7,1211.61 1734.29,1211.61 1734.87,1211.61 1735.46,1211.61 1736.05,1211.61 1736.63,1211.61 1737.22,1211.61 1737.81,1211.61 1738.39,1211.61 1738.98,1211.61 1739.57,1211.61 1740.15,1211.61 1740.74,1211.61 1741.32,1211.61 1741.91,1211.61 1742.5,1211.61 1743.08,1211.61 1743.67,1211.61 1744.26,1211.61 1744.84,1211.61 1745.43,1211.61 1746.02,1211.61 1746.6,1211.61 1747.19,1211.61 1747.78,1211.61 1748.36,1211.61 1748.95,1211.61 1749.53,1211.61 1750.12,1211.61 1750.71,1211.61 1751.29,1211.61 1751.88,1211.61 1752.47,1211.61 1753.05,1211.61 1753.64,1211.61 1754.23,1211.61 1754.81,1211.61 1755.4,1211.61 1755.99,1211.61 1756.57,1211.61 1757.16,1211.61 1757.74,1211.61 1758.33,1211.61 1758.92,1211.61 1759.5,1211.61 1760.09,1211.61 1760.68,1211.61 1761.26,1211.61 1761.85,1211.61 1762.44,1211.61 1763.02,1211.61 1763.61,1211.61 1764.19,1211.61 1764.78,1211.61 1765.37,1211.61 1765.95,1211.61 1766.54,1211.61 1767.13,1211.61 1767.71,1211.61 1768.3,1211.61 1768.89,1211.61 1769.47,1211.61 1770.06,1211.61 1770.65,1211.61 1771.23,1211.61 1771.82,1211.61 1772.4,1211.61 1772.99,1211.61 1773.58,1211.61 1774.16,1211.61 1774.75,1211.61 1775.34,1211.61 1775.92,1211.61 1776.51,1211.61 1777.1,1211.61 1777.68,1211.61 1778.27,1211.61 1778.86,1211.61 1779.44,1211.61 1780.03,1211.61 1780.61,1211.61 1781.2,1211.61 1781.79,1211.61 1782.37,1211.61 1782.96,1211.61 1783.55,1211.61 1784.13,1211.61 1784.72,1211.61 1785.31,1211.61 1785.89,1211.61 1786.48,1211.61 1787.06,1211.61 1787.65,1211.61 1788.24,1211.61 1788.82,1211.61 1789.41,1211.61 1790,1211.61 1790.58,1211.61 1791.17,1211.61 1791.76,1211.61 1792.34,1211.61 1792.93,1211.61 1793.52,1211.61 1794.1,1211.61 1794.69,1211.61 1795.27,1211.61 1795.86,1211.61 1796.45,1211.61 1797.03,1211.61 1797.62,1211.61 1798.21,1211.61 1798.79,1211.61 1799.38,1211.61 1799.97,1211.61 1800.55,1211.61 1801.14,1211.61 1801.73,1211.61 1802.31,1211.61 1802.9,1211.61 1803.48,1211.61 1804.07,1211.61 1804.66,1211.61 1805.24,1211.61 1805.83,1211.61 1806.42,1211.61 1807,1211.61 1807.59,1211.61 1808.18,1211.61 1808.76,1211.61 1809.35,1211.61 1809.94,1211.61 1810.52,1211.61 1811.11,1211.61 1811.69,1211.61 1812.28,1211.61 1812.87,1211.61 1813.45,1211.61 1814.04,1211.61 1814.63,1211.61 1815.21,1211.61 1815.8,1211.61 1816.39,1211.61 1816.97,1211.61 1817.56,1211.61 1818.14,1211.61 1818.73,1211.61 1819.32,1211.61 1819.9,1211.61 1820.49,1211.61 1821.08,1211.61 1821.66,1211.61 1822.25,1211.61 1822.84,1211.61 1823.42,1211.61 1824.01,1211.61 1824.6,1211.61 1825.18,1211.61 1825.77,1211.61 1826.35,1211.61 1826.94,1211.61 1827.53,1211.61 1828.11,1211.61 1828.7,1211.61 1829.29,1211.61 1829.87,1211.61 1830.46,1211.61 1831.05,1211.61 1831.63,1211.61 1832.22,1211.61 1832.81,1211.61 1833.39,1211.61 1833.98,1211.61 1834.56,1211.61 1835.15,1211.61 1835.74,1211.61 1836.32,1211.61 1836.91,1211.61 1837.5,1211.61 1838.08,1211.61 1838.67,1211.61 1839.26,1211.61 1839.84,1211.61 1840.43,1211.61 1841.01,1211.61 1841.6,1211.61 1842.19,1211.61 1842.77,1211.61 1843.36,1211.61 1843.95,1211.61 1844.53,1211.61 1845.12,1211.61 1845.71,1211.61 1846.29,1211.61 1846.88,1211.61 1847.47,1211.61 1848.05,1211.61 1848.64,1211.61 1849.22,1211.61 1849.81,1211.61 1850.4,1211.61 1850.98,1211.61 1851.57,1211.61 1852.16,1211.61 1852.74,1211.61 1853.33,1211.61 1853.92,1211.61 1854.5,1211.61 1855.09,1211.61 1855.68,1211.61 1856.26,1211.61 1856.85,1211.61 1857.43,1211.61 1858.02,1211.61 1858.61,1211.61 1859.19,1211.61 1859.78,1211.61 1860.37,1211.61 1860.95,1211.61 1861.54,1211.61 1862.13,1211.61 1862.71,1211.61 1863.3,1211.61 1863.88,1211.61 1864.47,1211.61 1865.06,1211.61 1865.64,1211.61 1866.23,1211.61 1866.82,1211.61 1867.4,1211.61 1867.99,1211.61 1868.58,1211.61 1869.16,1211.61 1869.75,1211.61 1870.34,1211.61 1870.92,1211.61 1871.51,1211.61 1872.09,1211.61 1872.68,1211.61 1873.27,1211.61 1873.85,1211.61 1874.44,1211.61 1875.03,1211.61 1875.61,1211.61 1876.2,1211.61 1876.79,1211.61 1877.37,1211.61 1877.96,1211.61 1878.55,1211.61 1879.13,1211.61 1879.72,1211.61 1880.3,1211.61 1880.89,1211.61 1881.48,1211.61 1882.06,1211.61 1882.65,1211.61 1883.24,1211.61 1883.82,1211.61 1884.41,1211.61 1885,1211.61 1885.58,1211.61 1886.17,1211.61 1886.76,1211.61 1887.34,1211.61 1887.93,1211.61 1888.51,1211.61 1889.1,1211.61 1889.69,1211.61 1890.27,1211.61 1890.86,1211.61 1891.45,1211.61 1892.03,1211.61 1892.62,1211.61 1893.21,1211.61 1893.79,1211.61 1894.38,1211.61 1894.96,1211.61 1895.55,1211.61 1896.14,1211.61 1896.72,1211.61 1897.31,1211.61 1897.9,1211.61 1898.48,1211.61 1899.07,1211.61 1899.66,1211.61 1900.24,1211.61 1900.83,1211.61 1901.42,1211.61 1902,1211.61 1902.59,1211.61 1903.17,1211.61 1903.76,1211.61 1904.35,1211.61 1904.93,1211.61 1905.52,1211.61 1906.11,1211.61 1906.69,1211.61 1907.28,1211.61 1907.87,1211.61 1908.45,1211.61 1909.04,1211.61 1909.63,1211.61 1910.21,1211.61 1910.8,1211.61 1911.38,1211.61 1911.97,1211.61 1912.56,1211.61 1913.14,1211.61 1913.73,1211.61 1914.32,1211.61 1914.9,1211.61 1915.49,1211.61 1916.08,1211.61 1916.66,1211.61 1917.25,1211.61 1917.83,1211.61 1918.42,1211.61 1919.01,1211.61 1919.59,1211.61 1920.18,1211.61 1920.77,1211.61 1921.35,1211.61 1921.94,1211.61 1922.53,1211.61 1923.11,1211.61 1923.7,1211.61 1924.29,1211.61 1924.87,1211.61 1925.46,1211.61 1926.04,1211.61 1926.63,1211.61 1927.22,1211.61 1927.8,1211.61 1928.39,1211.61 1928.98,1211.61 1929.56,1211.61 1930.15,1211.61 1930.74,1211.61 1931.32,1211.61 1931.91,1211.61 1932.5,1211.61 1933.08,1211.61 1933.67,1211.61 1934.25,1211.61 1934.84,1211.61 1935.43,1211.61 1936.01,1211.61 1936.6,1211.61 1937.19,1211.61 1937.77,1211.61 1938.36,1211.61 1938.95,1211.61 1939.53,1211.61 1940.12,1211.61 1940.71,1211.61 1941.29,1211.61 1941.88,1211.61 1942.46,1211.61 1943.05,1211.61 1943.64,1211.61 1944.22,1211.61 1944.81,1211.61 1945.4,1211.61 1945.98,1211.61 1946.57,1211.61 1947.16,1211.61 1947.74,1211.61 1948.33,1211.61 1948.91,1211.61 1949.5,1211.61 1950.09,1211.61 1950.67,1211.61 1951.26,1211.61 1951.85,1211.61 1952.43,1211.61 1953.02,1211.61 1953.61,1211.61 1954.19,1211.61 1954.78,1211.61 1955.37,1211.61 1955.95,1211.61 1956.54,1211.61 1957.12,1211.61 1957.71,1211.61 1958.3,1211.61 1958.88,1211.61 1959.47,1211.61 1960.06,1211.61 1960.64,1211.61 1961.23,1211.61 1961.82,1211.61 1962.4,1211.61 1962.99,1211.61 1963.58,1211.61 1964.16,1211.61 1964.75,1211.61 1965.33,1211.61 1965.92,1211.61 1966.51,1211.61 1967.09,1211.61 1967.68,1211.61 1968.27,1211.61 1968.85,1211.61 1969.44,1211.61 1970.03,1211.61 1970.61,1211.61 1971.2,1211.61 1971.78,1211.61 1972.37,1211.61 1972.96,1211.61 1973.54,1211.61 1974.13,1211.61 1974.72,1211.61 1975.3,1211.61 1975.89,1211.61 1976.48,1211.61 1977.06,1211.61 1977.65,1211.61 1978.24,1211.61 1978.82,1211.61 1979.41,1211.61 1979.99,1211.61 1980.58,1211.61 1981.17,1211.61 1981.75,1211.61 1982.34,1211.61 1982.93,1211.61 1983.51,1211.61 1984.1,1211.61 1984.69,1211.61 1985.27,1211.61 1985.86,1211.61 1986.45,1211.61 1987.03,1211.61 1987.62,1211.61 1988.2,1211.61 1988.79,1211.61 1989.38,1211.61 1989.96,1211.61 1990.55,1211.61 1991.14,1211.61 1991.72,1211.61 1992.31,1211.61 1992.9,1211.61 1993.48,1211.61 1994.07,1211.61 1994.65,1211.61 1995.24,1211.61 1995.83,1211.61 1996.41,1211.61 1997,1211.61 1997.59,1211.61 1998.17,1211.61 1998.76,1211.61 1999.35,1211.61 1999.93,1211.61 2000.52,1211.61 2001.11,1211.61 2001.69,1211.61 2002.28,1211.61 2002.86,1211.61 2003.45,1211.61 2004.04,1211.61 2004.62,1211.61 2005.21,1211.61 2005.8,1211.61 2006.38,1211.61 2006.97,1211.61 2007.56,1211.61 2008.14,1211.61 2008.73,1211.61 2009.32,1211.61 2009.9,1211.61 2010.49,1211.61 2011.07,1211.61 2011.66,1211.61 2012.25,1211.61 2012.83,1211.61 2013.42,1211.61 2014.01,1211.61 2014.59,1211.61 2015.18,1211.61 2015.77,1211.61 2016.35,1211.61 2016.94,1211.61 2017.53,1211.61 2018.11,1211.61 2018.7,1211.61 2019.28,1211.61 2019.87,1211.61 2020.46,1211.61 2021.04,1211.61 2021.63,1211.61 2022.22,1211.61 2022.8,1211.61 2023.39,1211.61 2023.98,1211.61 2024.56,1211.61 2025.15,1211.61 2025.73,1211.61 2026.32,1211.61 2026.91,1211.61 2027.49,1211.61 2028.08,1211.61 2028.67,1211.61 2029.25,1211.61 2029.84,1211.61 2030.43,1211.61 2031.01,1211.61 2031.6,1211.61 2032.19,1211.61 2032.77,1211.61 2033.36,1211.61 2033.94,1211.61 2034.53,1211.61 2035.12,1211.61 2035.7,1211.61 2036.29,1211.61 2036.88,1211.61 2037.46,1211.61 2038.05,1211.61 2038.64,1211.61 2039.22,1211.61 2039.81,1211.61 2040.4,1211.61 2040.98,1211.61 2041.57,1211.61 2042.15,1211.61 2042.74,1211.61 2043.33,1211.61 2043.91,1211.61 2044.5,1211.61 2045.09,1211.61 2045.67,1211.61 2046.26,1211.61 2046.85,1211.61 2047.43,1211.61 2048.02,1211.61 2048.6,1211.61 2049.19,1211.61 2049.78,1211.61 2050.36,1211.61 2050.95,1211.61 2051.54,1211.61 2052.12,1211.61 2052.71,1211.61 2053.3,1211.61 2053.88,1211.61 2054.47,1211.61 2055.06,1211.61 2055.64,1211.61 2056.23,1211.61 2056.81,1211.61 2057.4,1211.61 2057.99,1211.61 2058.57,1211.61 2059.16,1211.61 2059.75,1211.61 2060.33,1211.61 2060.92,1211.61 2061.51,1211.61 2062.09,1211.61 2062.68,1211.61 2063.27,1211.61 2063.85,1211.61 2064.44,1211.61 2065.02,1211.61 2065.61,1211.61 2066.2,1211.61 2066.78,1211.61 2067.37,1211.61 2067.96,1211.61 2068.54,1211.61 2069.13,1211.61 2069.72,1211.61 2070.3,1211.61 2070.89,1211.61 2071.48,1211.61 2072.06,1211.61 2072.65,1211.61 2073.23,1211.61 2073.82,1211.61 2074.41,1211.61 2074.99,1211.61 2075.58,1211.61 2076.17,1211.61 2076.75,1211.61 2077.34,1211.61 2077.93,1211.61 2078.51,1211.61 2079.1,1211.61 2079.68,1211.61 2080.27,1211.61 2080.86,1211.61 2081.44,1211.61 2082.03,1211.61 2082.62,1211.61 2083.2,1211.61 2083.79,1211.61 2084.38,1211.61 2084.96,1211.61 2085.55,1211.61 2086.14,1211.61 2086.72,1211.61 2087.31,1211.61 2087.89,1211.61 2088.48,1211.61 2089.07,1211.61 2089.65,1211.61 2090.24,1211.61 2090.83,1211.61 2091.41,1211.61 2092,1211.61 2092.59,1211.61 2093.17,1211.61 2093.76,1211.61 2094.35,1211.61 2094.93,1211.61 2095.52,1211.61 2096.1,1211.61 2096.69,1211.61 2097.28,1211.61 2097.86,1211.61 2098.45,1211.61 2099.04,1211.61 2099.62,1211.61 2100.21,1211.61 2100.8,1211.61 2101.38,1211.61 2101.97,1211.61 2102.55,1211.61 2103.14,1211.61 2103.73,1211.61 2104.31,1211.61 2104.9,1211.61 2105.49,1211.61 2106.07,1211.61 2106.66,1211.61 2107.25,1211.61 2107.83,1211.61 2108.42,1211.61 2109.01,1211.61 2109.59,1211.61 2110.18,1211.61 2110.76,1211.61 2111.35,1211.61 2111.94,1211.61 2112.52,1211.61 2113.11,1211.61 2113.7,1211.61 2114.28,1211.61 2114.87,1211.61 2115.46,1211.61 2116.04,1211.61 2116.63,1211.61 2117.22,1211.61 2117.8,1211.61 2118.39,1211.61 2118.97,1211.61 2119.56,1211.61 2120.15,1211.61 2120.73,1211.61 2121.32,1211.61 2121.91,1211.61 2122.49,1211.61 2123.08,1211.61 2123.67,1211.61 2124.25,1211.61 2124.84,1211.61 2125.42,1211.61 2126.01,1211.61 2126.6,1211.61 2127.18,1211.61 2127.77,1211.61 2128.36,1211.61 2128.94,1211.61 2129.53,1211.61 2130.12,1211.61 2130.7,1211.61 2131.29,1211.61 2131.88,1211.61 2132.46,1211.61 2133.05,1211.61 2133.63,1211.61 2134.22,1211.61 2134.81,1211.61 2135.39,1211.61 2135.98,1211.61 2136.57,1211.61 2137.15,1211.61 2137.74,1211.61 2138.33,1211.61 2138.91,1211.61 2139.5,1211.61 2140.09,1211.61 2140.67,1211.61 2141.26,1211.61 2141.84,1211.61 2142.43,1211.61 2143.02,1211.61 2143.6,1211.61 2144.19,1211.61 2144.78,1211.61 2145.36,1211.61 2145.95,1211.61 2146.54,1211.61 2147.12,1211.61 2147.71,1211.61 2148.3,1211.61 2148.88,1211.61 2149.47,1211.61 2150.05,1211.61 2150.64,1211.61 2151.23,1211.61 2151.81,1211.61 2152.4,1211.61 2152.99,1211.61 2153.57,1211.61 2154.16,1211.61 2154.75,1211.61 2155.33,1211.61 2155.92,1211.61 2156.5,1211.61 2157.09,1211.61 2157.68,1211.61 2158.26,1211.61 \"/>\n<path clip-path=\"url(#clip012)\" d=\"M986.025 1211.43 L986.612 1211.43 L987.198 1211.43 L987.785 1211.43 L988.371 1211.43 L988.957 1211.43 L989.544 1211.43 L990.13 1211.43 L990.717 1211.43 L991.303 1211.43 L991.889 1211.43 L992.476 1211.43 L993.062 1211.43 L993.649 1211.43 L994.235 1211.43 L994.822 1211.43 L995.408 1211.43 L995.994 1211.43 L996.581 1211.43 L997.167 1211.43 L997.754 1211.43 L998.34 1211.43 L998.926 1211.43 L999.513 1211.43 L1000.1 1211.43 L1000.69 1211.43 L1001.27 1211.43 L1001.86 1211.43 L1002.44 1211.43 L1003.03 1211.43 L1003.62 1211.43 L1004.2 1211.43 L1004.79 1211.43 L1005.38 1211.43 L1005.96 1211.43 L1006.55 1211.43 L1007.14 1211.43 L1007.72 1211.43 L1008.31 1211.43 L1008.9 1211.43 L1009.48 1211.43 L1010.07 1211.43 L1010.65 1211.43 L1011.24 1211.43 L1011.83 1211.43 L1012.41 1211.43 L1013 1211.43 L1013.59 1211.43 L1014.17 1211.43 L1014.76 1211.43 L1015.35 1211.43 L1015.93 1211.43 L1016.52 1211.43 L1017.11 1211.43 L1017.69 1211.43 L1018.28 1211.43 L1018.86 1211.43 L1019.45 1211.43 L1020.04 1211.43 L1020.62 1211.43 L1021.21 1211.43 L1021.8 1211.43 L1022.38 1211.43 L1022.97 1211.43 L1023.56 1211.43 L1024.14 1211.43 L1024.73 1211.43 L1025.32 1211.43 L1025.9 1211.43 L1026.49 1211.43 L1027.07 1211.43 L1027.66 1211.43 L1028.25 1211.43 L1028.83 1211.43 L1029.42 1211.43 L1030.01 1211.43 L1030.59 1211.43 L1031.18 1211.43 L1031.77 1211.43 L1032.35 1211.43 L1032.94 1211.43 L1033.52 1211.43 L1034.11 1211.43 L1034.7 1211.43 L1035.28 1211.43 L1035.87 1211.43 L1036.46 1211.43 L1037.04 1211.43 L1037.63 1211.43 L1038.22 1211.43 L1038.8 1211.43 L1039.39 1211.43 L1039.98 1211.43 L1040.56 1211.43 L1041.15 1211.43 L1041.73 1211.43 L1042.32 1211.43 L1042.91 1211.43 L1043.49 1211.43 L1044.08 1211.43 L1044.67 1211.43 L1045.25 1211.43 L1045.84 1211.43 L1046.43 1211.43 L1047.01 1211.43 L1047.6 1211.43 L1048.19 1211.43 L1048.77 1211.43 L1049.36 1211.43 L1049.94 1211.43 L1050.53 1211.43 L1051.12 1211.43 L1051.7 1211.43 L1052.29 1211.43 L1052.88 1211.43 L1053.46 1211.43 L1054.05 1211.43 L1054.64 1211.43 L1055.22 1211.43 L1055.81 1211.43 L1056.39 1211.43 L1056.98 1211.43 L1057.57 1211.43 L1058.15 1211.43 L1058.74 1211.43 L1059.33 1211.43 L1059.91 1211.43 L1060.5 1211.43 L1061.09 1211.43 L1061.67 1211.43 L1062.26 1211.43 L1062.85 1211.43 L1063.43 1211.43 L1064.02 1211.43 L1064.6 1211.43 L1065.19 1211.43 L1065.78 1211.43 L1066.36 1211.43 L1066.95 1211.43 L1067.54 1211.43 L1068.12 1211.43 L1068.71 1211.43 L1069.3 1211.43 L1069.88 1211.43 L1070.47 1211.43 L1071.06 1211.43 L1071.64 1211.43 L1072.23 1211.43 L1072.81 1211.43 L1073.4 1211.43 L1073.99 1211.43 L1074.57 1211.43 L1075.16 1211.43 L1075.75 1211.43 L1076.33 1211.43 L1076.92 1211.43 L1077.51 1211.43 L1078.09 1211.43 L1078.68 1211.43 L1079.26 1211.43 L1079.85 1211.43 L1080.44 1211.43 L1081.02 1211.43 L1081.61 1211.43 L1082.2 1211.43 L1082.78 1211.43 L1083.37 1211.43 L1083.96 1211.43 L1084.54 1211.43 L1085.13 1211.43 L1085.72 1211.43 L1086.3 1211.43 L1086.89 1211.43 L1087.47 1211.43 L1088.06 1211.43 L1088.65 1211.43 L1089.23 1211.43 L1089.82 1211.43 L1090.41 1211.43 L1090.99 1211.43 L1091.58 1211.43 L1092.17 1211.43 L1092.75 1211.43 L1093.34 1211.43 L1093.93 1211.43 L1094.51 1211.43 L1095.1 1211.43 L1095.68 1211.43 L1096.27 1211.43 L1096.86 1211.43 L1097.44 1211.43 L1098.03 1211.43 L1098.62 1211.43 L1099.2 1211.43 L1099.79 1211.43 L1100.38 1211.43 L1100.96 1211.43 L1101.55 1211.43 L1102.14 1211.43 L1102.72 1211.43 L1103.31 1211.43 L1103.89 1211.43 L1104.48 1211.43 L1105.07 1211.43 L1105.65 1211.43 L1106.24 1211.43 L1106.83 1211.43 L1107.41 1211.43 L1108 1211.43 L1108.59 1211.43 L1109.17 1211.43 L1109.76 1211.43 L1110.34 1211.43 L1110.93 1211.43 L1111.52 1211.43 L1112.1 1211.43 L1112.69 1211.43 L1113.28 1211.43 L1113.86 1211.43 L1114.45 1211.43 L1115.04 1211.43 L1115.62 1211.43 L1116.21 1211.43 L1116.8 1211.43 L1117.38 1211.43 L1117.97 1211.43 L1118.55 1211.43 L1119.14 1211.43 L1119.73 1211.43 L1120.31 1211.43 L1120.9 1211.43 L1121.49 1211.43 L1122.07 1211.43 L1122.66 1211.43 L1123.25 1211.43 L1123.83 1211.43 L1124.42 1211.43 L1125.01 1211.43 L1125.59 1211.43 L1126.18 1211.43 L1126.76 1211.43 L1127.35 1211.43 L1127.94 1211.43 L1128.52 1211.43 L1129.11 1211.43 L1129.7 1211.43 L1130.28 1211.43 L1130.87 1211.43 L1131.46 1211.43 L1132.04 1211.43 L1132.63 1211.43 L1133.21 1211.43 L1133.8 1211.43 L1134.39 1211.43 L1134.97 1211.43 L1135.56 1211.43 L1136.15 1211.43 L1136.73 1211.43 L1137.32 1211.43 L1137.91 1211.43 L1138.49 1211.43 L1139.08 1211.43 L1139.67 1211.43 L1140.25 1211.43 L1140.84 1211.43 L1141.42 1211.43 L1142.01 1211.43 L1142.6 1211.43 L1143.18 1211.43 L1143.77 1211.43 L1144.36 1211.43 L1144.94 1211.43 L1145.53 1211.43 L1146.12 1211.43 L1146.7 1211.43 L1147.29 1211.43 L1147.88 1211.43 L1148.46 1211.43 L1149.05 1211.43 L1149.63 1211.43 L1150.22 1211.43 L1150.81 1211.43 L1151.39 1211.43 L1151.98 1211.43 L1152.57 1211.43 L1153.15 1211.43 L1153.74 1211.43 L1154.33 1211.43 L1154.91 1211.43 L1155.5 1211.43 L1156.09 1211.43 L1156.67 1211.43 L1157.26 1211.43 L1157.84 1211.43 L1158.43 1211.43 L1159.02 1211.43 L1159.6 1211.43 L1160.19 1211.43 L1160.78 1211.43 L1161.36 1211.43 L1161.95 1211.43 L1162.54 1211.43 L1163.12 1211.43 L1163.71 1211.43 L1164.29 1211.43 L1164.88 1211.43 L1165.47 1211.43 L1166.05 1211.43 L1166.64 1211.43 L1167.23 1211.43 L1167.81 1211.43 L1168.4 1211.43 L1168.99 1211.43 L1169.57 1211.43 L1170.16 1211.43 L1170.75 1211.43 L1171.33 1211.43 L1171.92 1211.43 L1172.5 1211.43 L1173.09 1211.43 L1173.68 1211.43 L1174.26 1211.43 L1174.85 1211.43 L1175.44 1211.43 L1176.02 1211.43 L1176.61 1211.43 L1177.2 1211.43 L1177.78 1211.43 L1178.37 1211.43 L1178.96 1211.43 L1179.54 1211.43 L1180.13 1211.43 L1180.71 1211.43 L1181.3 1211.43 L1181.89 1211.43 L1182.47 1211.43 L1183.06 1211.43 L1183.65 1211.43 L1184.23 1211.43 L1184.82 1211.43 L1185.41 1211.43 L1185.99 1211.43 L1186.58 1211.43 L1187.16 1211.43 L1187.75 1211.43 L1188.34 1211.43 L1188.92 1211.43 L1189.51 1211.43 L1190.1 1211.43 L1190.68 1211.43 L1191.27 1211.43 L1191.86 1211.43 L1192.44 1211.43 L1193.03 1211.43 L1193.62 1211.43 L1194.2 1211.43 L1194.79 1211.43 L1195.37 1211.43 L1195.96 1211.43 L1196.55 1211.43 L1197.13 1211.43 L1197.72 1211.43 L1198.31 1211.43 L1198.89 1211.43 L1199.48 1211.43 L1200.07 1211.43 L1200.65 1211.43 L1201.24 1211.43 L1201.83 1211.43 L1202.41 1211.43 L1203 1211.43 L1203.58 1211.43 L1204.17 1211.43 L1204.76 1211.43 L1205.34 1211.43 L1205.93 1211.43 L1206.52 1211.43 L1207.1 1211.43 L1207.69 1211.43 L1208.28 1211.43 L1208.86 1211.43 L1209.45 1211.43 L1210.03 1211.43 L1210.62 1211.43 L1211.21 1211.43 L1211.79 1211.43 L1212.38 1211.43 L1212.97 1211.43 L1213.55 1211.43 L1214.14 1211.43 L1214.73 1211.43 L1215.31 1211.43 L1215.9 1211.43 L1216.49 1211.43 L1217.07 1211.43 L1217.66 1211.43 L1218.24 1211.43 L1218.83 1211.43 L1219.42 1211.43 L1220 1211.43 L1220.59 1211.43 L1221.18 1211.43 L1221.76 1211.43 L1222.35 1211.43 L1222.94 1211.43 L1223.52 1211.43 L1224.11 1211.43 L1224.7 1211.43 L1225.28 1211.43 L1225.87 1211.43 L1226.45 1211.43 L1227.04 1211.43 L1227.63 1211.43 L1228.21 1211.43 L1228.8 1211.43 L1229.39 1211.43 L1229.97 1211.43 L1230.56 1211.43 L1231.15 1211.43 L1231.73 1211.43 L1232.32 1211.43 L1232.91 1211.43 L1233.49 1211.43 L1234.08 1211.43 L1234.66 1211.43 L1235.25 1211.43 L1235.84 1211.43 L1236.42 1211.43 L1237.01 1211.43 L1237.6 1211.43 L1238.18 1211.43 L1238.77 1211.43 L1239.36 1211.43 L1239.94 1211.43 L1240.53 1211.43 L1241.11 1211.43 L1241.7 1211.43 L1242.29 1211.43 L1242.87 1211.43 L1243.46 1211.43 L1244.05 1211.43 L1244.63 1211.43 L1245.22 1211.43 L1245.81 1211.43 L1246.39 1211.43 L1246.98 1211.43 L1247.57 1211.43 L1248.15 1211.43 L1248.74 1211.43 L1249.32 1211.43 L1249.91 1211.43 L1250.5 1211.43 L1251.08 1211.43 L1251.67 1211.43 L1252.26 1211.43 L1252.84 1211.43 L1253.43 1211.43 L1254.02 1211.43 L1254.6 1211.43 L1255.19 1211.43 L1255.78 1211.43 L1256.36 1211.43 L1256.95 1211.43 L1257.53 1211.43 L1258.12 1211.43 L1258.71 1211.43 L1259.29 1211.43 L1259.88 1211.43 L1260.47 1211.43 L1261.05 1211.43 L1261.64 1211.43 L1262.23 1211.43 L1262.81 1211.43 L1263.4 1211.43 L1263.98 1211.43 L1264.57 1211.43 L1265.16 1211.43 L1265.74 1211.43 L1266.33 1211.43 L1266.92 1211.43 L1267.5 1211.43 L1268.09 1211.43 L1268.68 1211.43 L1269.26 1211.43 L1269.85 1211.43 L1270.44 1211.43 L1271.02 1211.43 L1271.61 1211.43 L1272.19 1211.43 L1272.78 1211.43 L1273.37 1211.43 L1273.95 1211.43 L1274.54 1211.43 L1275.13 1211.43 L1275.71 1211.43 L1276.3 1211.43 L1276.89 1211.43 L1277.47 1211.43 L1278.06 1211.43 L1278.65 1211.43 L1279.23 1211.43 L1279.82 1211.43 L1280.4 1211.43 L1280.99 1211.43 L1281.58 1211.43 L1282.16 1211.43 L1282.75 1211.43 L1283.34 1211.43 L1283.92 1211.43 L1284.51 1211.43 L1285.1 1211.43 L1285.68 1211.43 L1286.27 1211.43 L1286.86 1211.43 L1287.44 1211.43 L1288.03 1211.43 L1288.61 1211.43 L1289.2 1211.43 L1289.79 1211.43 L1290.37 1211.43 L1290.96 1211.43 L1291.55 1211.43 L1292.13 1211.43 L1292.72 1211.43 L1293.31 1211.43 L1293.89 1211.43 L1294.48 1211.43 L1295.06 1211.43 L1295.65 1211.43 L1296.24 1211.43 L1296.82 1211.43 L1297.41 1211.43 L1298 1211.43 L1298.58 1211.43 L1299.17 1211.43 L1299.76 1211.43 L1300.34 1211.43 L1300.93 1211.43 L1301.52 1211.43 L1302.1 1211.43 L1302.69 1211.43 L1303.27 1211.43 L1303.86 1211.43 L1304.45 1211.43 L1305.03 1211.43 L1305.62 1211.43 L1306.21 1211.43 L1306.79 1211.43 L1307.38 1211.43 L1307.97 1211.43 L1308.55 1211.43 L1309.14 1211.43 L1309.73 1211.43 L1310.31 1211.43 L1310.9 1211.43 L1311.48 1211.43 L1312.07 1211.43 L1312.66 1211.43 L1313.24 1211.43 L1313.83 1211.43 L1314.42 1211.43 L1315 1211.43 L1315.59 1211.43 L1316.18 1211.43 L1316.76 1211.43 L1317.35 1211.43 L1317.93 1211.43 L1318.52 1211.43 L1319.11 1211.43 L1319.69 1211.43 L1320.28 1211.43 L1320.87 1211.43 L1321.45 1211.43 L1322.04 1211.43 L1322.63 1211.43 L1323.21 1211.43 L1323.8 1211.43 L1324.39 1211.43 L1324.97 1211.43 L1325.56 1211.43 L1326.14 1211.43 L1326.73 1211.43 L1327.32 1211.43 L1327.9 1211.43 L1328.49 1211.43 L1329.08 1211.43 L1329.66 1211.43 L1330.25 1211.43 L1330.84 1211.43 L1331.42 1211.43 L1332.01 1211.43 L1332.6 1211.43 L1333.18 1211.43 L1333.77 1211.43 L1334.35 1211.43 L1334.94 1211.43 L1335.53 1211.43 L1336.11 1211.43 L1336.7 1211.43 L1337.29 1211.43 L1337.87 1211.43 L1338.46 1211.43 L1339.05 1211.43 L1339.63 1211.43 L1340.22 1211.43 L1340.8 1211.43 L1341.39 1211.43 L1341.98 1211.43 L1342.56 1211.43 L1343.15 1211.43 L1343.74 1211.43 L1344.32 1211.43 L1344.91 1211.43 L1345.5 1211.43 L1346.08 1211.43 L1346.67 1211.43 L1347.26 1211.43 L1347.84 1211.43 L1348.43 1211.43 L1349.01 1211.43 L1349.6 1211.43 L1350.19 1211.43 L1350.77 1211.43 L1351.36 1211.43 L1351.95 1211.43 L1352.53 1211.43 L1353.12 1211.43 L1353.71 1211.43 L1354.29 1211.43 L1354.88 1211.43 L1355.47 1211.43 L1356.05 1211.43 L1356.64 1211.43 L1357.22 1211.43 L1357.81 1211.43 L1358.4 1211.43 L1358.98 1211.43 L1359.57 1211.43 L1360.16 1211.43 L1360.74 1211.43 L1361.33 1211.43 L1361.92 1211.43 L1362.5 1211.43 L1363.09 1211.43 L1363.68 1211.43 L1364.26 1211.43 L1364.85 1211.43 L1365.43 1211.43 L1366.02 1211.43 L1366.61 1211.43 L1367.19 1211.43 L1367.78 1211.43 L1368.37 1211.43 L1368.95 1211.43 L1369.54 1211.43 L1370.13 1211.43 L1370.71 1211.43 L1371.3 1211.43 L1371.88 1211.43 L1372.47 1211.43 L1373.06 1211.43 L1373.64 1211.43 L1374.23 1211.43 L1374.82 1211.43 L1375.4 1211.43 L1375.99 1211.43 L1376.58 1211.43 L1377.16 1211.43 L1377.75 1211.43 L1378.34 1211.43 L1378.92 1211.43 L1379.51 1211.43 L1380.09 1211.43 L1380.68 1211.43 L1381.27 1211.43 L1381.85 1211.43 L1382.44 1211.43 L1383.03 1211.43 L1383.61 1211.43 L1384.2 1211.43 L1384.79 1211.43 L1385.37 1211.43 L1385.96 1211.43 L1386.55 1211.43 L1387.13 1211.43 L1387.72 1211.43 L1388.3 1211.43 L1388.89 1211.43 L1389.48 1211.43 L1390.06 1211.43 L1390.65 1211.43 L1391.24 1211.43 L1391.82 1211.43 L1392.41 1211.43 L1393 1211.43 L1393.58 1211.43 L1394.17 1211.43 L1394.75 1211.43 L1395.34 1211.43 L1395.93 1211.43 L1396.51 1211.43 L1397.1 1211.43 L1397.69 1211.43 L1398.27 1211.43 L1398.86 1211.43 L1399.45 1211.43 L1400.03 1211.43 L1400.62 1211.43 L1401.21 1211.43 L1401.79 1211.43 L1402.38 1211.43 L1402.96 1211.43 L1403.55 1211.43 L1404.14 1211.43 L1404.72 1211.43 L1405.31 1211.43 L1405.9 1211.43 L1406.48 1211.43 L1407.07 1211.43 L1407.66 1211.43 L1408.24 1211.43 L1408.83 1211.43 L1409.42 1211.43 L1410 1211.43 L1410.59 1211.43 L1411.17 1211.43 L1411.76 1211.43 L1412.35 1211.43 L1412.93 1211.43 L1413.52 1211.43 L1414.11 1211.43 L1414.69 1211.43 L1415.28 1211.43 L1415.87 1211.43 L1416.45 1211.43 L1417.04 1211.43 L1417.63 1211.43 L1418.21 1211.43 L1418.8 1211.43 L1419.38 1211.43 L1419.97 1211.43 L1420.56 1211.43 L1421.14 1211.43 L1421.73 1211.43 L1422.32 1211.43 L1422.9 1211.43 L1423.49 1211.43 L1424.08 1211.43 L1424.66 1211.43 L1425.25 1211.43 L1425.83 1211.43 L1426.42 1211.43 L1427.01 1211.43 L1427.59 1211.43 L1428.18 1211.43 L1428.77 1211.43 L1429.35 1211.43 L1429.94 1211.43 L1430.53 1211.43 L1431.11 1211.43 L1431.7 1211.43 L1432.29 1211.43 L1432.87 1211.43 L1433.46 1211.43 L1434.04 1211.43 L1434.63 1211.43 L1435.22 1211.43 L1435.8 1211.43 L1436.39 1211.43 L1436.98 1211.43 L1437.56 1211.43 L1438.15 1211.43 L1438.74 1211.43 L1439.32 1211.43 L1439.91 1211.43 L1440.5 1211.43 L1441.08 1211.43 L1441.67 1211.43 L1442.25 1211.43 L1442.84 1211.43 L1443.43 1211.43 L1444.01 1211.43 L1444.6 1211.43 L1445.19 1211.43 L1445.77 1211.43 L1446.36 1211.43 L1446.95 1211.43 L1447.53 1211.43 L1448.12 1211.43 L1448.7 1211.43 L1449.29 1211.43 L1449.88 1211.43 L1450.46 1211.43 L1451.05 1211.43 L1451.64 1211.43 L1452.22 1211.43 L1452.81 1211.43 L1453.4 1211.43 L1453.98 1211.43 L1454.57 1211.43 L1455.16 1211.43 L1455.74 1211.43 L1456.33 1211.43 L1456.91 1211.43 L1457.5 1211.43 L1458.09 1211.43 L1458.67 1211.43 L1459.26 1211.43 L1459.85 1211.43 L1460.43 1211.43 L1461.02 1211.43 L1461.61 1211.43 L1462.19 1211.43 L1462.78 1211.43 L1463.37 1211.43 L1463.95 1211.43 L1464.54 1211.43 L1465.12 1211.43 L1465.71 1211.43 L1466.3 1211.43 L1466.88 1211.43 L1467.47 1211.43 L1468.06 1211.43 L1468.64 1211.43 L1469.23 1211.43 L1469.82 1211.43 L1470.4 1211.43 L1470.99 1211.43 L1471.57 1211.43 L1472.16 1211.43 L1472.75 1211.43 L1473.33 1211.43 L1473.92 1211.43 L1474.51 1211.43 L1475.09 1211.43 L1475.68 1211.43 L1476.27 1211.43 L1476.85 1211.43 L1477.44 1211.43 L1478.03 1211.43 L1478.61 1211.43 L1479.2 1211.43 L1479.78 1211.43 L1480.37 1211.43 L1480.96 1211.43 L1481.54 1211.43 L1482.13 1211.43 L1482.72 1211.43 L1483.3 1211.43 L1483.89 1211.43 L1484.48 1211.43 L1485.06 1211.43 L1485.65 1211.43 L1486.24 1211.43 L1486.82 1211.43 L1487.41 1211.43 L1487.99 1211.43 L1488.58 1211.43 L1489.17 1211.43 L1489.75 1211.43 L1490.34 1211.43 L1490.93 1211.43 L1491.51 1211.43 L1492.1 1211.43 L1492.69 1211.43 L1493.27 1211.43 L1493.86 1211.43 L1494.45 1211.43 L1495.03 1211.43 L1495.62 1211.43 L1496.2 1211.43 L1496.79 1211.43 L1497.38 1211.43 L1497.96 1211.43 L1498.55 1211.43 L1499.14 1211.43 L1499.72 1211.43 L1500.31 1211.43 L1500.9 1211.43 L1501.48 1211.43 L1502.07 1211.43 L1502.65 1211.43 L1503.24 1211.43 L1503.83 1211.43 L1504.41 1211.43 L1505 1211.43 L1505.59 1211.43 L1506.17 1211.43 L1506.76 1211.43 L1507.35 1211.43 L1507.93 1211.43 L1508.52 1211.43 L1509.11 1211.43 L1509.69 1211.43 L1510.28 1211.43 L1510.86 1211.43 L1511.45 1211.43 L1512.04 1211.43 L1512.62 1211.43 L1513.21 1211.43 L1513.8 1211.43 L1514.38 1211.43 L1514.97 1211.43 L1515.56 1211.43 L1516.14 1211.43 L1516.73 1211.43 L1517.32 1211.43 L1517.9 1211.43 L1518.49 1211.43 L1519.07 1211.43 L1519.66 1211.43 L1520.25 1211.43 L1520.83 1211.43 L1521.42 1211.43 L1522.01 1211.43 L1522.59 1211.43 L1523.18 1211.43 L1523.77 1211.43 L1524.35 1211.43 L1524.94 1211.43 L1525.52 1211.43 L1526.11 1211.43 L1526.7 1211.43 L1527.28 1211.43 L1527.87 1211.43 L1528.46 1211.43 L1529.04 1211.43 L1529.63 1211.43 L1530.22 1211.43 L1530.8 1211.43 L1531.39 1211.43 L1531.98 1211.43 L1532.56 1211.43 L1533.15 1211.43 L1533.73 1211.43 L1534.32 1211.43 L1534.91 1211.43 L1535.49 1211.43 L1536.08 1211.43 L1536.67 1211.43 L1537.25 1211.43 L1537.84 1211.43 L1538.43 1211.43 L1539.01 1211.43 L1539.6 1211.43 L1540.19 1211.43 L1540.77 1211.43 L1541.36 1211.43 L1541.94 1211.43 L1542.53 1211.43 L1543.12 1211.43 L1543.7 1211.43 L1544.29 1211.43 L1544.88 1211.43 L1545.46 1211.43 L1546.05 1211.43 L1546.64 1211.43 L1547.22 1211.43 L1547.81 1211.43 L1548.4 1211.43 L1548.98 1211.43 L1549.57 1211.43 L1550.15 1211.43 L1550.74 1211.43 L1551.33 1211.43 L1551.91 1211.43 L1552.5 1211.43 L1553.09 1211.43 L1553.67 1211.43 L1554.26 1211.43 L1554.85 1211.43 L1555.43 1211.43 L1556.02 1211.43 L1556.6 1211.43 L1557.19 1211.43 L1557.78 1211.43 L1558.36 1211.43 L1558.95 1211.43 L1559.54 1211.43 L1560.12 1211.43 L1560.71 1211.43 L1561.3 1211.43 L1561.88 1211.43 L1562.47 1211.43 L1563.06 1211.43 L1563.64 1211.43 L1564.23 1211.43 L1564.81 1211.43 L1565.4 1211.43 L1565.99 1211.43 L1566.57 1211.43 L1567.16 1211.43 L1567.75 1211.43 L1568.33 1211.43 L1568.92 1211.43 L1569.51 1211.43 L1570.09 1211.43 L1570.68 1211.43 L1571.27 1211.43 L1571.85 1211.43 L1572.44 1211.43 L1573.02 1211.43 L1573.61 1211.43 L1574.2 1211.43 L1574.78 1211.43 L1575.37 1211.43 L1575.96 1211.43 L1576.54 1211.43 L1577.13 1211.43 L1577.72 1211.43 L1578.3 1211.43 L1578.89 1211.43 L1579.47 1211.43 L1580.06 1211.43 L1580.65 1211.43 L1581.23 1211.43 L1581.82 1211.43 L1582.41 1211.43 L1582.99 1211.43 L1583.58 1211.43 L1584.17 1211.43 L1584.75 1211.43 L1585.34 1211.43 L1585.93 1211.43 L1586.51 1211.43 L1587.1 1211.43 L1587.68 1211.43 L1588.27 1211.43 L1588.86 1211.43 L1589.44 1211.43 L1590.03 1211.43 L1590.62 1211.43 L1591.2 1211.43 L1591.79 1211.43 L1592.38 1211.43 L1592.96 1211.43 L1593.55 1211.43 L1594.14 1211.43 L1594.72 1211.43 L1595.31 1211.43 L1595.89 1211.43 L1596.48 1211.43 L1597.07 1211.43 L1597.65 1211.43 L1598.24 1211.43 L1598.83 1211.43 L1599.41 1211.43 L1600 1211.43 L1600.59 1211.43 L1601.17 1211.43 L1601.76 1211.43 L1602.34 1211.43 L1602.93 1211.43 L1603.52 1211.43 L1604.1 1211.43 L1604.69 1211.43 L1605.28 1211.43 L1605.86 1211.43 L1606.45 1211.43 L1607.04 1211.43 L1607.62 1211.43 L1608.21 1211.43 L1608.8 1211.43 L1609.38 1211.43 L1609.97 1211.43 L1610.55 1211.43 L1611.14 1211.43 L1611.73 1211.43 L1612.31 1211.43 L1612.9 1211.43 L1613.49 1211.43 L1614.07 1211.43 L1614.66 1211.43 L1615.25 1211.43 L1615.83 1211.43 L1616.42 1211.43 L1617.01 1211.43 L1617.59 1211.43 L1618.18 1211.43 L1618.76 1211.43 L1619.35 1211.43 L1619.94 1211.43 L1620.52 1211.43 L1621.11 1211.43 L1621.7 1211.43 L1622.28 1211.43 L1622.87 1211.43 L1623.46 1211.43 L1624.04 1211.43 L1624.63 1211.43 L1625.22 1211.43 L1625.8 1211.43 L1626.39 1211.43 L1626.97 1211.43 L1627.56 1211.43 L1628.15 1211.43 L1628.73 1211.43 L1629.32 1211.43 L1629.91 1211.43 L1630.49 1211.43 L1631.08 1211.43 L1631.67 1211.43 L1632.25 1211.43 L1632.84 1211.43 L1633.42 1211.43 L1634.01 1211.43 L1634.6 1211.43 L1635.18 1211.43 L1635.77 1211.43 L1636.36 1211.43 L1636.94 1211.43 L1637.53 1211.43 L1638.12 1211.43 L1638.7 1211.43 L1639.29 1211.43 L1639.88 1211.43 L1640.46 1211.43 L1641.05 1211.43 L1641.63 1211.43 L1642.22 1211.43 L1642.81 1211.43 L1643.39 1211.43 L1643.98 1211.43 L1644.57 1211.43 L1645.15 1211.43 L1645.74 1211.43 L1646.33 1211.43 L1646.91 1211.43 L1647.5 1211.43 L1648.09 1211.43 L1648.67 1211.43 L1649.26 1211.43 L1649.84 1211.43 L1650.43 1211.43 L1651.02 1211.43 L1651.6 1211.43 L1652.19 1211.43 L1652.78 1211.43 L1653.36 1211.43 L1653.95 1211.43 L1654.54 1211.43 L1655.12 1211.43 L1655.71 1211.43 L1656.29 1211.43 L1656.88 1211.43 L1657.47 1211.43 L1658.05 1211.43 L1658.64 1211.43 L1659.23 1211.43 L1659.81 1211.43 L1660.4 1211.43 L1660.99 1211.43 L1661.57 1211.43 L1662.16 1211.43 L1662.75 1211.43 L1663.33 1211.43 L1663.92 1211.43 L1664.5 1211.43 L1665.09 1211.43 L1665.68 1211.43 L1666.26 1211.43 L1666.85 1211.43 L1667.44 1211.43 L1668.02 1211.43 L1668.61 1211.43 L1669.2 1211.43 L1669.78 1211.43 L1670.37 1211.43 L1670.96 1211.43 L1671.54 1211.43 L1672.13 1211.43 L1672.71 1211.43 L1673.3 1211.43 L1673.89 1211.43 L1674.47 1211.43 L1675.06 1211.43 L1675.65 1211.43 L1676.23 1211.43 L1676.82 1211.43 L1677.41 1211.43 L1677.99 1211.43 L1678.58 1211.43 L1679.17 1211.43 L1679.75 1211.43 L1680.34 1211.43 L1680.92 1211.43 L1681.51 1211.43 L1682.1 1211.43 L1682.68 1211.43 L1683.27 1211.43 L1683.86 1211.43 L1684.44 1211.43 L1685.03 1211.43 L1685.62 1211.43 L1686.2 1211.43 L1686.79 1211.43 L1687.37 1211.43 L1687.96 1211.43 L1688.55 1211.43 L1689.13 1211.43 L1689.72 1211.43 L1690.31 1211.43 L1690.89 1211.43 L1691.48 1211.43 L1692.07 1211.43 L1692.65 1211.43 L1693.24 1211.43 L1693.83 1211.43 L1694.41 1211.43 L1695 1211.43 L1695.58 1211.43 L1696.17 1211.43 L1696.76 1211.43 L1697.34 1211.43 L1697.93 1211.43 L1698.52 1211.43 L1699.1 1211.43 L1699.69 1211.43 L1700.28 1211.43 L1700.86 1211.43 L1701.45 1211.43 L1702.04 1211.43 L1702.62 1211.43 L1703.21 1211.43 L1703.79 1211.43 L1704.38 1211.43 L1704.97 1211.43 L1705.55 1211.43 L1706.14 1211.43 L1706.73 1211.43 L1707.31 1211.43 L1707.9 1211.43 L1708.49 1211.43 L1709.07 1211.43 L1709.66 1211.43 L1710.24 1211.43 L1710.83 1211.43 L1711.42 1211.43 L1712 1211.43 L1712.59 1211.43 L1713.18 1211.43 L1713.76 1211.43 L1714.35 1211.43 L1714.94 1211.43 L1715.52 1211.43 L1716.11 1211.43 L1716.7 1211.43 L1717.28 1211.43 L1717.87 1211.43 L1718.45 1211.43 L1719.04 1211.43 L1719.63 1211.43 L1720.21 1211.43 L1720.8 1211.43 L1721.39 1211.43 L1721.97 1211.43 L1722.56 1211.43 L1723.15 1211.43 L1723.73 1211.43 L1724.32 1211.43 L1724.91 1211.43 L1725.49 1211.43 L1726.08 1211.43 L1726.66 1211.43 L1727.25 1211.43 L1727.84 1211.43 L1728.42 1211.43 L1729.01 1211.43 L1729.6 1211.43 L1730.18 1211.43 L1730.77 1211.43 L1731.36 1211.43 L1731.94 1211.43 L1732.53 1211.43 L1733.11 1211.43 L1733.7 1211.43 L1734.29 1211.43 L1734.87 1211.43 L1735.46 1211.43 L1736.05 1211.43 L1736.63 1211.43 L1737.22 1211.43 L1737.81 1211.43 L1738.39 1211.43 L1738.98 1211.43 L1739.57 1211.43 L1740.15 1211.43 L1740.74 1211.43 L1741.32 1211.43 L1741.91 1211.43 L1742.5 1211.43 L1743.08 1211.43 L1743.67 1211.43 L1744.26 1211.43 L1744.84 1211.43 L1745.43 1211.43 L1746.02 1211.43 L1746.6 1211.43 L1747.19 1211.43 L1747.78 1211.43 L1748.36 1211.43 L1748.95 1211.43 L1749.53 1211.43 L1750.12 1211.43 L1750.71 1211.43 L1751.29 1211.43 L1751.88 1211.43 L1752.47 1211.43 L1753.05 1211.43 L1753.64 1211.43 L1754.23 1211.43 L1754.81 1211.43 L1755.4 1211.43 L1755.99 1211.43 L1756.57 1211.43 L1757.16 1211.43 L1757.74 1211.43 L1758.33 1211.43 L1758.92 1211.43 L1759.5 1211.43 L1760.09 1211.43 L1760.68 1211.43 L1761.26 1211.43 L1761.85 1211.43 L1762.44 1211.43 L1763.02 1211.43 L1763.61 1211.43 L1764.19 1211.43 L1764.78 1211.43 L1765.37 1211.43 L1765.95 1211.43 L1766.54 1211.43 L1767.13 1211.43 L1767.71 1211.43 L1768.3 1211.43 L1768.89 1211.43 L1769.47 1211.43 L1770.06 1211.43 L1770.65 1211.43 L1771.23 1211.43 L1771.82 1211.43 L1772.4 1211.43 L1772.99 1211.43 L1773.58 1211.43 L1774.16 1211.43 L1774.75 1211.43 L1775.34 1211.43 L1775.92 1211.43 L1776.51 1211.43 L1777.1 1211.43 L1777.68 1211.43 L1778.27 1211.43 L1778.86 1211.43 L1779.44 1211.43 L1780.03 1211.43 L1780.61 1211.43 L1781.2 1211.43 L1781.79 1211.43 L1782.37 1211.43 L1782.96 1211.43 L1783.55 1211.43 L1784.13 1211.43 L1784.72 1211.43 L1785.31 1211.43 L1785.89 1211.43 L1786.48 1211.43 L1787.06 1211.43 L1787.65 1211.43 L1788.24 1211.43 L1788.82 1211.43 L1789.41 1211.43 L1790 1211.43 L1790.58 1211.43 L1791.17 1211.43 L1791.76 1211.43 L1792.34 1211.43 L1792.93 1211.43 L1793.52 1211.43 L1794.1 1211.43 L1794.69 1211.43 L1795.27 1211.43 L1795.86 1211.43 L1796.45 1211.43 L1797.03 1211.43 L1797.62 1211.43 L1798.21 1211.43 L1798.79 1211.43 L1799.38 1211.43 L1799.97 1211.43 L1800.55 1211.43 L1801.14 1211.43 L1801.73 1211.43 L1802.31 1211.43 L1802.9 1211.43 L1803.48 1211.43 L1804.07 1211.43 L1804.66 1211.43 L1805.24 1211.43 L1805.83 1211.43 L1806.42 1211.43 L1807 1211.43 L1807.59 1211.43 L1808.18 1211.43 L1808.76 1211.43 L1809.35 1211.43 L1809.94 1211.43 L1810.52 1211.43 L1811.11 1211.43 L1811.69 1211.43 L1812.28 1211.43 L1812.87 1211.43 L1813.45 1211.43 L1814.04 1211.43 L1814.63 1211.43 L1815.21 1211.43 L1815.8 1211.43 L1816.39 1211.43 L1816.97 1211.43 L1817.56 1211.43 L1818.14 1211.43 L1818.73 1211.43 L1819.32 1211.43 L1819.9 1211.43 L1820.49 1211.43 L1821.08 1211.43 L1821.66 1211.43 L1822.25 1211.43 L1822.84 1211.43 L1823.42 1211.43 L1824.01 1211.43 L1824.6 1211.43 L1825.18 1211.43 L1825.77 1211.43 L1826.35 1211.43 L1826.94 1211.43 L1827.53 1211.43 L1828.11 1211.43 L1828.7 1211.43 L1829.29 1211.43 L1829.87 1211.43 L1830.46 1211.43 L1831.05 1211.43 L1831.63 1211.43 L1832.22 1211.43 L1832.81 1211.43 L1833.39 1211.43 L1833.98 1211.43 L1834.56 1211.43 L1835.15 1211.43 L1835.74 1211.43 L1836.32 1211.43 L1836.91 1211.43 L1837.5 1211.43 L1838.08 1211.43 L1838.67 1211.43 L1839.26 1211.43 L1839.84 1211.43 L1840.43 1211.43 L1841.01 1211.43 L1841.6 1211.43 L1842.19 1211.43 L1842.77 1211.43 L1843.36 1211.43 L1843.95 1211.43 L1844.53 1211.43 L1845.12 1211.43 L1845.71 1211.43 L1846.29 1211.43 L1846.88 1211.43 L1847.47 1211.43 L1848.05 1211.43 L1848.64 1211.43 L1849.22 1211.43 L1849.81 1211.43 L1850.4 1211.43 L1850.98 1211.43 L1851.57 1211.43 L1852.16 1211.43 L1852.74 1211.43 L1853.33 1211.43 L1853.92 1211.43 L1854.5 1211.43 L1855.09 1211.43 L1855.68 1211.43 L1856.26 1211.43 L1856.85 1211.43 L1857.43 1211.43 L1858.02 1211.43 L1858.61 1211.43 L1859.19 1211.43 L1859.78 1211.43 L1860.37 1211.43 L1860.95 1211.43 L1861.54 1211.43 L1862.13 1211.43 L1862.71 1211.43 L1863.3 1211.43 L1863.88 1211.43 L1864.47 1211.43 L1865.06 1211.43 L1865.64 1211.43 L1866.23 1211.43 L1866.82 1211.43 L1867.4 1211.43 L1867.99 1211.43 L1868.58 1211.43 L1869.16 1211.43 L1869.75 1211.43 L1870.34 1211.43 L1870.92 1211.43 L1871.51 1211.43 L1872.09 1211.43 L1872.68 1211.43 L1873.27 1211.43 L1873.85 1211.43 L1874.44 1211.43 L1875.03 1211.43 L1875.61 1211.43 L1876.2 1211.43 L1876.79 1211.43 L1877.37 1211.43 L1877.96 1211.43 L1878.55 1211.43 L1879.13 1211.43 L1879.72 1211.43 L1880.3 1211.43 L1880.89 1211.43 L1881.48 1211.43 L1882.06 1211.43 L1882.65 1211.43 L1883.24 1211.43 L1883.82 1211.43 L1884.41 1211.43 L1885 1211.43 L1885.58 1211.43 L1886.17 1211.43 L1886.76 1211.43 L1887.34 1211.43 L1887.93 1211.43 L1888.51 1211.43 L1889.1 1211.43 L1889.69 1211.43 L1890.27 1211.43 L1890.86 1211.43 L1891.45 1211.43 L1892.03 1211.43 L1892.62 1211.43 L1893.21 1211.43 L1893.79 1211.43 L1894.38 1211.43 L1894.96 1211.43 L1895.55 1211.43 L1896.14 1211.43 L1896.72 1211.43 L1897.31 1211.43 L1897.9 1211.43 L1898.48 1211.43 L1899.07 1211.43 L1899.66 1211.43 L1900.24 1211.43 L1900.83 1211.43 L1901.42 1211.43 L1902 1211.43 L1902.59 1211.43 L1903.17 1211.43 L1903.76 1211.43 L1904.35 1211.43 L1904.93 1211.43 L1905.52 1211.43 L1906.11 1211.43 L1906.69 1211.43 L1907.28 1211.43 L1907.87 1211.43 L1908.45 1211.43 L1909.04 1211.43 L1909.63 1211.43 L1910.21 1211.43 L1910.8 1211.43 L1911.38 1211.43 L1911.97 1211.43 L1912.56 1211.43 L1913.14 1211.43 L1913.73 1211.43 L1914.32 1211.43 L1914.9 1211.43 L1915.49 1211.43 L1916.08 1211.43 L1916.66 1211.43 L1917.25 1211.43 L1917.83 1211.43 L1918.42 1211.43 L1919.01 1211.43 L1919.59 1211.43 L1920.18 1211.43 L1920.77 1211.43 L1921.35 1211.43 L1921.94 1211.43 L1922.53 1211.43 L1923.11 1211.43 L1923.7 1211.43 L1924.29 1211.43 L1924.87 1211.43 L1925.46 1211.43 L1926.04 1211.43 L1926.63 1211.43 L1927.22 1211.43 L1927.8 1211.43 L1928.39 1211.43 L1928.98 1211.43 L1929.56 1211.43 L1930.15 1211.43 L1930.74 1211.43 L1931.32 1211.43 L1931.91 1211.43 L1932.5 1211.43 L1933.08 1211.43 L1933.67 1211.43 L1934.25 1211.43 L1934.84 1211.43 L1935.43 1211.43 L1936.01 1211.43 L1936.6 1211.43 L1937.19 1211.43 L1937.77 1211.43 L1938.36 1211.43 L1938.95 1211.43 L1939.53 1211.43 L1940.12 1211.43 L1940.71 1211.43 L1941.29 1211.43 L1941.88 1211.43 L1942.46 1211.43 L1943.05 1211.43 L1943.64 1211.43 L1944.22 1211.43 L1944.81 1211.43 L1945.4 1211.43 L1945.98 1211.43 L1946.57 1211.43 L1947.16 1211.43 L1947.74 1211.43 L1948.33 1211.43 L1948.91 1211.43 L1949.5 1211.43 L1950.09 1211.43 L1950.67 1211.43 L1951.26 1211.43 L1951.85 1211.43 L1952.43 1211.43 L1953.02 1211.43 L1953.61 1211.43 L1954.19 1211.43 L1954.78 1211.43 L1955.37 1211.43 L1955.95 1211.43 L1956.54 1211.43 L1957.12 1211.43 L1957.71 1211.43 L1958.3 1211.43 L1958.88 1211.43 L1959.47 1211.43 L1960.06 1211.43 L1960.64 1211.43 L1961.23 1211.43 L1961.82 1211.43 L1962.4 1211.43 L1962.99 1211.43 L1963.58 1211.43 L1964.16 1211.43 L1964.75 1211.43 L1965.33 1211.43 L1965.92 1211.43 L1966.51 1211.43 L1967.09 1211.43 L1967.68 1211.43 L1968.27 1211.43 L1968.85 1211.43 L1969.44 1211.43 L1970.03 1211.43 L1970.61 1211.43 L1971.2 1211.43 L1971.78 1211.43 L1972.37 1211.43 L1972.96 1211.43 L1973.54 1211.43 L1974.13 1211.43 L1974.72 1211.43 L1975.3 1211.43 L1975.89 1211.43 L1976.48 1211.43 L1977.06 1211.43 L1977.65 1211.43 L1978.24 1211.43 L1978.82 1211.43 L1979.41 1211.43 L1979.99 1211.43 L1980.58 1211.43 L1981.17 1211.43 L1981.75 1211.43 L1982.34 1211.43 L1982.93 1211.43 L1983.51 1211.43 L1984.1 1211.43 L1984.69 1211.43 L1985.27 1211.43 L1985.86 1211.43 L1986.45 1211.43 L1987.03 1211.43 L1987.62 1211.43 L1988.2 1211.43 L1988.79 1211.43 L1989.38 1211.43 L1989.96 1211.43 L1990.55 1211.43 L1991.14 1211.43 L1991.72 1211.43 L1992.31 1211.43 L1992.9 1211.43 L1993.48 1211.43 L1994.07 1211.43 L1994.65 1211.43 L1995.24 1211.43 L1995.83 1211.43 L1996.41 1211.43 L1997 1211.43 L1997.59 1211.43 L1998.17 1211.43 L1998.76 1211.43 L1999.35 1211.43 L1999.93 1211.43 L2000.52 1211.43 L2001.11 1211.43 L2001.69 1211.43 L2002.28 1211.43 L2002.86 1211.43 L2003.45 1211.43 L2004.04 1211.43 L2004.62 1211.43 L2005.21 1211.43 L2005.8 1211.43 L2006.38 1211.43 L2006.97 1211.43 L2007.56 1211.43 L2008.14 1211.43 L2008.73 1211.43 L2009.32 1211.43 L2009.9 1211.43 L2010.49 1211.43 L2011.07 1211.43 L2011.66 1211.43 L2012.25 1211.43 L2012.83 1211.43 L2013.42 1211.43 L2014.01 1211.43 L2014.59 1211.43 L2015.18 1211.43 L2015.77 1211.43 L2016.35 1211.43 L2016.94 1211.43 L2017.53 1211.43 L2018.11 1211.43 L2018.7 1211.43 L2019.28 1211.43 L2019.87 1211.43 L2020.46 1211.43 L2021.04 1211.43 L2021.63 1211.43 L2022.22 1211.43 L2022.8 1211.43 L2023.39 1211.43 L2023.98 1211.43 L2024.56 1211.43 L2025.15 1211.43 L2025.73 1211.43 L2026.32 1211.43 L2026.91 1211.43 L2027.49 1211.43 L2028.08 1211.43 L2028.67 1211.43 L2029.25 1211.43 L2029.84 1211.43 L2030.43 1211.43 L2031.01 1211.43 L2031.6 1211.43 L2032.19 1211.43 L2032.77 1211.43 L2033.36 1211.43 L2033.94 1211.43 L2034.53 1211.43 L2035.12 1211.43 L2035.7 1211.43 L2036.29 1211.43 L2036.88 1211.43 L2037.46 1211.43 L2038.05 1211.43 L2038.64 1211.43 L2039.22 1211.43 L2039.81 1211.43 L2040.4 1211.43 L2040.98 1211.43 L2041.57 1211.43 L2042.15 1211.43 L2042.74 1211.43 L2043.33 1211.43 L2043.91 1211.43 L2044.5 1211.43 L2045.09 1211.43 L2045.67 1211.43 L2046.26 1211.43 L2046.85 1211.43 L2047.43 1211.43 L2048.02 1211.43 L2048.6 1211.43 L2049.19 1211.43 L2049.78 1211.43 L2050.36 1211.43 L2050.95 1211.43 L2051.54 1211.43 L2052.12 1211.43 L2052.71 1211.43 L2053.3 1211.43 L2053.88 1211.43 L2054.47 1211.43 L2055.06 1211.43 L2055.64 1211.43 L2056.23 1211.43 L2056.81 1211.43 L2057.4 1211.43 L2057.99 1211.43 L2058.57 1211.43 L2059.16 1211.43 L2059.75 1211.43 L2060.33 1211.43 L2060.92 1211.43 L2061.51 1211.43 L2062.09 1211.43 L2062.68 1211.43 L2063.27 1211.43 L2063.85 1211.43 L2064.44 1211.43 L2065.02 1211.43 L2065.61 1211.43 L2066.2 1211.43 L2066.78 1211.43 L2067.37 1211.43 L2067.96 1211.43 L2068.54 1211.43 L2069.13 1211.43 L2069.72 1211.43 L2070.3 1211.43 L2070.89 1211.43 L2071.48 1211.43 L2072.06 1211.43 L2072.65 1211.43 L2073.23 1211.43 L2073.82 1211.43 L2074.41 1211.43 L2074.99 1211.43 L2075.58 1211.43 L2076.17 1211.43 L2076.75 1211.43 L2077.34 1211.43 L2077.93 1211.43 L2078.51 1211.43 L2079.1 1211.43 L2079.68 1211.43 L2080.27 1211.43 L2080.86 1211.43 L2081.44 1211.43 L2082.03 1211.43 L2082.62 1211.43 L2083.2 1211.43 L2083.79 1211.43 L2084.38 1211.43 L2084.96 1211.43 L2085.55 1211.43 L2086.14 1211.43 L2086.72 1211.43 L2087.31 1211.43 L2087.89 1211.43 L2088.48 1211.43 L2089.07 1211.43 L2089.65 1211.43 L2090.24 1211.43 L2090.83 1211.43 L2091.41 1211.43 L2092 1211.43 L2092.59 1211.43 L2093.17 1211.43 L2093.76 1211.43 L2094.35 1211.43 L2094.93 1211.43 L2095.52 1211.43 L2096.1 1211.43 L2096.69 1211.43 L2097.28 1211.43 L2097.86 1211.43 L2098.45 1211.43 L2099.04 1211.43 L2099.62 1211.43 L2100.21 1211.43 L2100.8 1211.43 L2101.38 1211.43 L2101.97 1211.43 L2102.55 1211.43 L2103.14 1211.43 L2103.73 1211.43 L2104.31 1211.43 L2104.9 1211.43 L2105.49 1211.43 L2106.07 1211.43 L2106.66 1211.43 L2107.25 1211.43 L2107.83 1211.43 L2108.42 1211.43 L2109.01 1211.43 L2109.59 1211.43 L2110.18 1211.43 L2110.76 1211.43 L2111.35 1211.43 L2111.94 1211.43 L2112.52 1211.43 L2113.11 1211.43 L2113.7 1211.43 L2114.28 1211.43 L2114.87 1211.43 L2115.46 1211.43 L2116.04 1211.43 L2116.63 1211.43 L2117.22 1211.43 L2117.8 1211.43 L2118.39 1211.43 L2118.97 1211.43 L2119.56 1211.43 L2120.15 1211.43 L2120.73 1211.43 L2121.32 1211.43 L2121.91 1211.43 L2122.49 1211.43 L2123.08 1211.43 L2123.67 1211.43 L2124.25 1211.43 L2124.84 1211.43 L2125.42 1211.43 L2126.01 1211.43 L2126.6 1211.43 L2127.18 1211.43 L2127.77 1211.43 L2128.36 1211.43 L2128.94 1211.43 L2129.53 1211.43 L2130.12 1211.43 L2130.7 1211.43 L2131.29 1211.43 L2131.88 1211.43 L2132.46 1211.43 L2133.05 1211.43 L2133.63 1211.43 L2134.22 1211.43 L2134.81 1211.43 L2135.39 1211.43 L2135.98 1211.43 L2136.57 1211.43 L2137.15 1211.43 L2137.74 1211.43 L2138.33 1211.43 L2138.91 1211.43 L2139.5 1211.43 L2140.09 1211.43 L2140.67 1211.43 L2141.26 1211.43 L2141.84 1211.43 L2142.43 1211.43 L2143.02 1211.43 L2143.6 1211.43 L2144.19 1211.43 L2144.78 1211.43 L2145.36 1211.43 L2145.95 1211.43 L2146.54 1211.43 L2147.12 1211.43 L2147.71 1211.43 L2148.3 1211.43 L2148.88 1211.43 L2149.47 1211.43 L2150.05 1211.43 L2150.64 1211.43 L2151.23 1211.43 L2151.81 1211.43 L2152.4 1211.43 L2152.99 1211.43 L2153.57 1211.43 L2154.16 1211.43 L2154.75 1211.43 L2155.33 1211.43 L2155.92 1211.43 L2156.5 1211.43 L2157.09 1211.43 L2157.68 1211.43 L2158.26 1211.43 L2158.26 1211.29 L2157.68 1211.29 L2157.09 1211.29 L2156.5 1211.29 L2155.92 1211.29 L2155.33 1211.29 L2154.75 1211.29 L2154.16 1211.29 L2153.57 1211.29 L2152.99 1211.29 L2152.4 1211.29 L2151.81 1211.29 L2151.23 1211.29 L2150.64 1211.29 L2150.05 1211.29 L2149.47 1211.29 L2148.88 1211.29 L2148.3 1211.29 L2147.71 1211.29 L2147.12 1211.29 L2146.54 1211.29 L2145.95 1211.29 L2145.36 1211.29 L2144.78 1211.29 L2144.19 1211.29 L2143.6 1211.29 L2143.02 1211.29 L2142.43 1211.29 L2141.84 1211.29 L2141.26 1211.29 L2140.67 1211.29 L2140.09 1211.29 L2139.5 1211.29 L2138.91 1211.29 L2138.33 1211.29 L2137.74 1211.29 L2137.15 1211.29 L2136.57 1211.29 L2135.98 1211.29 L2135.39 1211.29 L2134.81 1211.29 L2134.22 1211.29 L2133.63 1211.29 L2133.05 1211.29 L2132.46 1211.29 L2131.88 1211.29 L2131.29 1211.29 L2130.7 1211.29 L2130.12 1211.29 L2129.53 1211.29 L2128.94 1211.29 L2128.36 1211.29 L2127.77 1211.29 L2127.18 1211.29 L2126.6 1211.29 L2126.01 1211.29 L2125.42 1211.29 L2124.84 1211.29 L2124.25 1211.29 L2123.67 1211.29 L2123.08 1211.29 L2122.49 1211.29 L2121.91 1211.29 L2121.32 1211.29 L2120.73 1211.29 L2120.15 1211.29 L2119.56 1211.29 L2118.97 1211.29 L2118.39 1211.29 L2117.8 1211.29 L2117.22 1211.29 L2116.63 1211.29 L2116.04 1211.29 L2115.46 1211.29 L2114.87 1211.29 L2114.28 1211.29 L2113.7 1211.29 L2113.11 1211.29 L2112.52 1211.29 L2111.94 1211.29 L2111.35 1211.29 L2110.76 1211.29 L2110.18 1211.29 L2109.59 1211.29 L2109.01 1211.29 L2108.42 1211.29 L2107.83 1211.29 L2107.25 1211.29 L2106.66 1211.29 L2106.07 1211.29 L2105.49 1211.29 L2104.9 1211.29 L2104.31 1211.29 L2103.73 1211.29 L2103.14 1211.29 L2102.55 1211.29 L2101.97 1211.29 L2101.38 1211.29 L2100.8 1211.29 L2100.21 1211.29 L2099.62 1211.29 L2099.04 1211.29 L2098.45 1211.29 L2097.86 1211.29 L2097.28 1211.29 L2096.69 1211.29 L2096.1 1211.29 L2095.52 1211.29 L2094.93 1211.29 L2094.35 1211.29 L2093.76 1211.29 L2093.17 1211.29 L2092.59 1211.29 L2092 1211.29 L2091.41 1211.29 L2090.83 1211.29 L2090.24 1211.29 L2089.65 1211.29 L2089.07 1211.29 L2088.48 1211.29 L2087.89 1211.29 L2087.31 1211.29 L2086.72 1211.29 L2086.14 1211.29 L2085.55 1211.29 L2084.96 1211.29 L2084.38 1211.29 L2083.79 1211.29 L2083.2 1211.29 L2082.62 1211.29 L2082.03 1211.29 L2081.44 1211.29 L2080.86 1211.29 L2080.27 1211.29 L2079.68 1211.29 L2079.1 1211.29 L2078.51 1211.29 L2077.93 1211.29 L2077.34 1211.29 L2076.75 1211.29 L2076.17 1211.29 L2075.58 1211.29 L2074.99 1211.29 L2074.41 1211.29 L2073.82 1211.29 L2073.23 1211.29 L2072.65 1211.29 L2072.06 1211.29 L2071.48 1211.29 L2070.89 1211.29 L2070.3 1211.29 L2069.72 1211.29 L2069.13 1211.29 L2068.54 1211.29 L2067.96 1211.29 L2067.37 1211.29 L2066.78 1211.29 L2066.2 1211.29 L2065.61 1211.29 L2065.02 1211.29 L2064.44 1211.29 L2063.85 1211.29 L2063.27 1211.29 L2062.68 1211.29 L2062.09 1211.29 L2061.51 1211.29 L2060.92 1211.29 L2060.33 1211.29 L2059.75 1211.29 L2059.16 1211.29 L2058.57 1211.29 L2057.99 1211.29 L2057.4 1211.29 L2056.81 1211.29 L2056.23 1211.29 L2055.64 1211.29 L2055.06 1211.29 L2054.47 1211.29 L2053.88 1211.29 L2053.3 1211.29 L2052.71 1211.29 L2052.12 1211.29 L2051.54 1211.29 L2050.95 1211.29 L2050.36 1211.29 L2049.78 1211.29 L2049.19 1211.29 L2048.6 1211.29 L2048.02 1211.29 L2047.43 1211.29 L2046.85 1211.29 L2046.26 1211.29 L2045.67 1211.29 L2045.09 1211.29 L2044.5 1211.29 L2043.91 1211.29 L2043.33 1211.29 L2042.74 1211.29 L2042.15 1211.29 L2041.57 1211.29 L2040.98 1211.29 L2040.4 1211.29 L2039.81 1211.29 L2039.22 1211.29 L2038.64 1211.29 L2038.05 1211.29 L2037.46 1211.29 L2036.88 1211.29 L2036.29 1211.29 L2035.7 1211.29 L2035.12 1211.29 L2034.53 1211.29 L2033.94 1211.29 L2033.36 1211.29 L2032.77 1211.29 L2032.19 1211.29 L2031.6 1211.29 L2031.01 1211.29 L2030.43 1211.29 L2029.84 1211.29 L2029.25 1211.29 L2028.67 1211.29 L2028.08 1211.29 L2027.49 1211.29 L2026.91 1211.29 L2026.32 1211.29 L2025.73 1211.29 L2025.15 1211.29 L2024.56 1211.29 L2023.98 1211.29 L2023.39 1211.29 L2022.8 1211.29 L2022.22 1211.29 L2021.63 1211.29 L2021.04 1211.29 L2020.46 1211.29 L2019.87 1211.29 L2019.28 1211.29 L2018.7 1211.29 L2018.11 1211.29 L2017.53 1211.29 L2016.94 1211.29 L2016.35 1211.29 L2015.77 1211.29 L2015.18 1211.29 L2014.59 1211.29 L2014.01 1211.29 L2013.42 1211.29 L2012.83 1211.29 L2012.25 1211.29 L2011.66 1211.29 L2011.07 1211.29 L2010.49 1211.29 L2009.9 1211.29 L2009.32 1211.29 L2008.73 1211.29 L2008.14 1211.29 L2007.56 1211.29 L2006.97 1211.29 L2006.38 1211.29 L2005.8 1211.29 L2005.21 1211.29 L2004.62 1211.29 L2004.04 1211.29 L2003.45 1211.29 L2002.86 1211.29 L2002.28 1211.29 L2001.69 1211.29 L2001.11 1211.29 L2000.52 1211.29 L1999.93 1211.29 L1999.35 1211.29 L1998.76 1211.29 L1998.17 1211.29 L1997.59 1211.29 L1997 1211.29 L1996.41 1211.29 L1995.83 1211.29 L1995.24 1211.29 L1994.65 1211.29 L1994.07 1211.29 L1993.48 1211.29 L1992.9 1211.29 L1992.31 1211.29 L1991.72 1211.29 L1991.14 1211.29 L1990.55 1211.29 L1989.96 1211.29 L1989.38 1211.29 L1988.79 1211.29 L1988.2 1211.29 L1987.62 1211.29 L1987.03 1211.29 L1986.45 1211.29 L1985.86 1211.29 L1985.27 1211.29 L1984.69 1211.29 L1984.1 1211.29 L1983.51 1211.29 L1982.93 1211.29 L1982.34 1211.29 L1981.75 1211.29 L1981.17 1211.29 L1980.58 1211.29 L1979.99 1211.29 L1979.41 1211.29 L1978.82 1211.29 L1978.24 1211.29 L1977.65 1211.29 L1977.06 1211.29 L1976.48 1211.29 L1975.89 1211.29 L1975.3 1211.29 L1974.72 1211.29 L1974.13 1211.29 L1973.54 1211.29 L1972.96 1211.29 L1972.37 1211.29 L1971.78 1211.29 L1971.2 1211.29 L1970.61 1211.29 L1970.03 1211.29 L1969.44 1211.29 L1968.85 1211.29 L1968.27 1211.29 L1967.68 1211.29 L1967.09 1211.29 L1966.51 1211.29 L1965.92 1211.29 L1965.33 1211.29 L1964.75 1211.29 L1964.16 1211.29 L1963.58 1211.29 L1962.99 1211.29 L1962.4 1211.29 L1961.82 1211.29 L1961.23 1211.29 L1960.64 1211.29 L1960.06 1211.29 L1959.47 1211.29 L1958.88 1211.29 L1958.3 1211.29 L1957.71 1211.29 L1957.12 1211.29 L1956.54 1211.29 L1955.95 1211.29 L1955.37 1211.29 L1954.78 1211.29 L1954.19 1211.29 L1953.61 1211.29 L1953.02 1211.29 L1952.43 1211.29 L1951.85 1211.29 L1951.26 1211.29 L1950.67 1211.29 L1950.09 1211.29 L1949.5 1211.29 L1948.91 1211.29 L1948.33 1211.29 L1947.74 1211.29 L1947.16 1211.29 L1946.57 1211.29 L1945.98 1211.29 L1945.4 1211.29 L1944.81 1211.29 L1944.22 1211.29 L1943.64 1211.29 L1943.05 1211.29 L1942.46 1211.29 L1941.88 1211.29 L1941.29 1211.29 L1940.71 1211.29 L1940.12 1211.29 L1939.53 1211.29 L1938.95 1211.29 L1938.36 1211.29 L1937.77 1211.29 L1937.19 1211.29 L1936.6 1211.29 L1936.01 1211.29 L1935.43 1211.29 L1934.84 1211.29 L1934.25 1211.29 L1933.67 1211.29 L1933.08 1211.29 L1932.5 1211.29 L1931.91 1211.29 L1931.32 1211.29 L1930.74 1211.29 L1930.15 1211.29 L1929.56 1211.29 L1928.98 1211.29 L1928.39 1211.29 L1927.8 1211.29 L1927.22 1211.29 L1926.63 1211.29 L1926.04 1211.29 L1925.46 1211.29 L1924.87 1211.29 L1924.29 1211.29 L1923.7 1211.29 L1923.11 1211.29 L1922.53 1211.29 L1921.94 1211.29 L1921.35 1211.29 L1920.77 1211.29 L1920.18 1211.29 L1919.59 1211.29 L1919.01 1211.29 L1918.42 1211.29 L1917.83 1211.29 L1917.25 1211.29 L1916.66 1211.29 L1916.08 1211.29 L1915.49 1211.29 L1914.9 1211.29 L1914.32 1211.29 L1913.73 1211.29 L1913.14 1211.29 L1912.56 1211.29 L1911.97 1211.29 L1911.38 1211.29 L1910.8 1211.29 L1910.21 1211.29 L1909.63 1211.29 L1909.04 1211.29 L1908.45 1211.29 L1907.87 1211.29 L1907.28 1211.29 L1906.69 1211.29 L1906.11 1211.29 L1905.52 1211.29 L1904.93 1211.29 L1904.35 1211.29 L1903.76 1211.29 L1903.17 1211.29 L1902.59 1211.29 L1902 1211.29 L1901.42 1211.29 L1900.83 1211.29 L1900.24 1211.29 L1899.66 1211.29 L1899.07 1211.29 L1898.48 1211.29 L1897.9 1211.29 L1897.31 1211.29 L1896.72 1211.29 L1896.14 1211.29 L1895.55 1211.29 L1894.96 1211.29 L1894.38 1211.29 L1893.79 1211.29 L1893.21 1211.29 L1892.62 1211.29 L1892.03 1211.29 L1891.45 1211.29 L1890.86 1211.29 L1890.27 1211.29 L1889.69 1211.29 L1889.1 1211.29 L1888.51 1211.29 L1887.93 1211.29 L1887.34 1211.29 L1886.76 1211.29 L1886.17 1211.29 L1885.58 1211.29 L1885 1211.29 L1884.41 1211.29 L1883.82 1211.29 L1883.24 1211.29 L1882.65 1211.29 L1882.06 1211.29 L1881.48 1211.29 L1880.89 1211.29 L1880.3 1211.29 L1879.72 1211.29 L1879.13 1211.29 L1878.55 1211.29 L1877.96 1211.29 L1877.37 1211.29 L1876.79 1211.29 L1876.2 1211.29 L1875.61 1211.29 L1875.03 1211.29 L1874.44 1211.29 L1873.85 1211.29 L1873.27 1211.29 L1872.68 1211.29 L1872.09 1211.29 L1871.51 1211.29 L1870.92 1211.29 L1870.34 1211.29 L1869.75 1211.29 L1869.16 1211.29 L1868.58 1211.29 L1867.99 1211.29 L1867.4 1211.29 L1866.82 1211.29 L1866.23 1211.29 L1865.64 1211.29 L1865.06 1211.29 L1864.47 1211.29 L1863.88 1211.29 L1863.3 1211.29 L1862.71 1211.29 L1862.13 1211.29 L1861.54 1211.29 L1860.95 1211.29 L1860.37 1211.29 L1859.78 1211.29 L1859.19 1211.29 L1858.61 1211.29 L1858.02 1211.29 L1857.43 1211.29 L1856.85 1211.29 L1856.26 1211.29 L1855.68 1211.29 L1855.09 1211.29 L1854.5 1211.29 L1853.92 1211.29 L1853.33 1211.29 L1852.74 1211.29 L1852.16 1211.29 L1851.57 1211.29 L1850.98 1211.29 L1850.4 1211.29 L1849.81 1211.29 L1849.22 1211.29 L1848.64 1211.29 L1848.05 1211.29 L1847.47 1211.29 L1846.88 1211.29 L1846.29 1211.29 L1845.71 1211.29 L1845.12 1211.29 L1844.53 1211.29 L1843.95 1211.29 L1843.36 1211.29 L1842.77 1211.29 L1842.19 1211.29 L1841.6 1211.29 L1841.01 1211.29 L1840.43 1211.29 L1839.84 1211.29 L1839.26 1211.29 L1838.67 1211.29 L1838.08 1211.29 L1837.5 1211.29 L1836.91 1211.29 L1836.32 1211.29 L1835.74 1211.29 L1835.15 1211.29 L1834.56 1211.29 L1833.98 1211.29 L1833.39 1211.29 L1832.81 1211.29 L1832.22 1211.29 L1831.63 1211.29 L1831.05 1211.29 L1830.46 1211.29 L1829.87 1211.29 L1829.29 1211.29 L1828.7 1211.29 L1828.11 1211.29 L1827.53 1211.29 L1826.94 1211.29 L1826.35 1211.29 L1825.77 1211.29 L1825.18 1211.29 L1824.6 1211.29 L1824.01 1211.29 L1823.42 1211.29 L1822.84 1211.29 L1822.25 1211.29 L1821.66 1211.29 L1821.08 1211.29 L1820.49 1211.29 L1819.9 1211.29 L1819.32 1211.29 L1818.73 1211.29 L1818.14 1211.29 L1817.56 1211.29 L1816.97 1211.29 L1816.39 1211.29 L1815.8 1211.29 L1815.21 1211.29 L1814.63 1211.29 L1814.04 1211.29 L1813.45 1211.29 L1812.87 1211.29 L1812.28 1211.29 L1811.69 1211.29 L1811.11 1211.29 L1810.52 1211.29 L1809.94 1211.29 L1809.35 1211.29 L1808.76 1211.29 L1808.18 1211.29 L1807.59 1211.29 L1807 1211.29 L1806.42 1211.29 L1805.83 1211.29 L1805.24 1211.29 L1804.66 1211.29 L1804.07 1211.29 L1803.48 1211.29 L1802.9 1211.29 L1802.31 1211.29 L1801.73 1211.29 L1801.14 1211.29 L1800.55 1211.29 L1799.97 1211.29 L1799.38 1211.29 L1798.79 1211.29 L1798.21 1211.29 L1797.62 1211.29 L1797.03 1211.29 L1796.45 1211.29 L1795.86 1211.29 L1795.27 1211.29 L1794.69 1211.29 L1794.1 1211.29 L1793.52 1211.29 L1792.93 1211.29 L1792.34 1211.29 L1791.76 1211.29 L1791.17 1211.29 L1790.58 1211.29 L1790 1211.29 L1789.41 1211.29 L1788.82 1211.29 L1788.24 1211.29 L1787.65 1211.29 L1787.06 1211.29 L1786.48 1211.29 L1785.89 1211.29 L1785.31 1211.29 L1784.72 1211.29 L1784.13 1211.29 L1783.55 1211.29 L1782.96 1211.29 L1782.37 1211.29 L1781.79 1211.29 L1781.2 1211.29 L1780.61 1211.29 L1780.03 1211.29 L1779.44 1211.29 L1778.86 1211.29 L1778.27 1211.29 L1777.68 1211.29 L1777.1 1211.29 L1776.51 1211.29 L1775.92 1211.29 L1775.34 1211.29 L1774.75 1211.29 L1774.16 1211.29 L1773.58 1211.29 L1772.99 1211.29 L1772.4 1211.29 L1771.82 1211.29 L1771.23 1211.29 L1770.65 1211.29 L1770.06 1211.29 L1769.47 1211.29 L1768.89 1211.29 L1768.3 1211.29 L1767.71 1211.29 L1767.13 1211.29 L1766.54 1211.29 L1765.95 1211.29 L1765.37 1211.29 L1764.78 1211.29 L1764.19 1211.29 L1763.61 1211.29 L1763.02 1211.29 L1762.44 1211.29 L1761.85 1211.29 L1761.26 1211.29 L1760.68 1211.29 L1760.09 1211.29 L1759.5 1211.29 L1758.92 1211.29 L1758.33 1211.29 L1757.74 1211.29 L1757.16 1211.29 L1756.57 1211.29 L1755.99 1211.29 L1755.4 1211.29 L1754.81 1211.29 L1754.23 1211.29 L1753.64 1211.29 L1753.05 1211.29 L1752.47 1211.29 L1751.88 1211.29 L1751.29 1211.29 L1750.71 1211.29 L1750.12 1211.29 L1749.53 1211.29 L1748.95 1211.29 L1748.36 1211.29 L1747.78 1211.29 L1747.19 1211.29 L1746.6 1211.29 L1746.02 1211.29 L1745.43 1211.29 L1744.84 1211.29 L1744.26 1211.29 L1743.67 1211.29 L1743.08 1211.29 L1742.5 1211.29 L1741.91 1211.29 L1741.32 1211.29 L1740.74 1211.29 L1740.15 1211.29 L1739.57 1211.29 L1738.98 1211.29 L1738.39 1211.29 L1737.81 1211.29 L1737.22 1211.29 L1736.63 1211.29 L1736.05 1211.29 L1735.46 1211.29 L1734.87 1211.29 L1734.29 1211.29 L1733.7 1211.29 L1733.11 1211.29 L1732.53 1211.29 L1731.94 1211.29 L1731.36 1211.29 L1730.77 1211.29 L1730.18 1211.29 L1729.6 1211.29 L1729.01 1211.29 L1728.42 1211.29 L1727.84 1211.29 L1727.25 1211.29 L1726.66 1211.29 L1726.08 1211.29 L1725.49 1211.29 L1724.91 1211.29 L1724.32 1211.29 L1723.73 1211.29 L1723.15 1211.29 L1722.56 1211.29 L1721.97 1211.29 L1721.39 1211.29 L1720.8 1211.29 L1720.21 1211.29 L1719.63 1211.29 L1719.04 1211.29 L1718.45 1211.29 L1717.87 1211.29 L1717.28 1211.29 L1716.7 1211.29 L1716.11 1211.29 L1715.52 1211.29 L1714.94 1211.29 L1714.35 1211.29 L1713.76 1211.29 L1713.18 1211.29 L1712.59 1211.29 L1712 1211.29 L1711.42 1211.29 L1710.83 1211.29 L1710.24 1211.29 L1709.66 1211.29 L1709.07 1211.29 L1708.49 1211.29 L1707.9 1211.29 L1707.31 1211.29 L1706.73 1211.29 L1706.14 1211.29 L1705.55 1211.29 L1704.97 1211.29 L1704.38 1211.29 L1703.79 1211.29 L1703.21 1211.29 L1702.62 1211.29 L1702.04 1211.29 L1701.45 1211.29 L1700.86 1211.29 L1700.28 1211.29 L1699.69 1211.29 L1699.1 1211.29 L1698.52 1211.29 L1697.93 1211.29 L1697.34 1211.29 L1696.76 1211.29 L1696.17 1211.29 L1695.58 1211.29 L1695 1211.29 L1694.41 1211.29 L1693.83 1211.29 L1693.24 1211.29 L1692.65 1211.29 L1692.07 1211.29 L1691.48 1211.29 L1690.89 1211.29 L1690.31 1211.29 L1689.72 1211.29 L1689.13 1211.29 L1688.55 1211.29 L1687.96 1211.29 L1687.37 1211.29 L1686.79 1211.29 L1686.2 1211.29 L1685.62 1211.29 L1685.03 1211.29 L1684.44 1211.29 L1683.86 1211.29 L1683.27 1211.29 L1682.68 1211.29 L1682.1 1211.29 L1681.51 1211.29 L1680.92 1211.29 L1680.34 1211.29 L1679.75 1211.29 L1679.17 1211.29 L1678.58 1211.29 L1677.99 1211.29 L1677.41 1211.29 L1676.82 1211.29 L1676.23 1211.29 L1675.65 1211.29 L1675.06 1211.29 L1674.47 1211.29 L1673.89 1211.29 L1673.3 1211.29 L1672.71 1211.29 L1672.13 1211.29 L1671.54 1211.29 L1670.96 1211.29 L1670.37 1211.29 L1669.78 1211.29 L1669.2 1211.29 L1668.61 1211.29 L1668.02 1211.29 L1667.44 1211.29 L1666.85 1211.29 L1666.26 1211.29 L1665.68 1211.29 L1665.09 1211.29 L1664.5 1211.29 L1663.92 1211.29 L1663.33 1211.29 L1662.75 1211.29 L1662.16 1211.29 L1661.57 1211.29 L1660.99 1211.29 L1660.4 1211.29 L1659.81 1211.29 L1659.23 1211.29 L1658.64 1211.29 L1658.05 1211.29 L1657.47 1211.29 L1656.88 1211.29 L1656.29 1211.29 L1655.71 1211.29 L1655.12 1211.29 L1654.54 1211.29 L1653.95 1211.29 L1653.36 1211.29 L1652.78 1211.29 L1652.19 1211.29 L1651.6 1211.29 L1651.02 1211.29 L1650.43 1211.29 L1649.84 1211.29 L1649.26 1211.29 L1648.67 1211.29 L1648.09 1211.29 L1647.5 1211.29 L1646.91 1211.29 L1646.33 1211.29 L1645.74 1211.29 L1645.15 1211.29 L1644.57 1211.29 L1643.98 1211.29 L1643.39 1211.29 L1642.81 1211.29 L1642.22 1211.29 L1641.63 1211.29 L1641.05 1211.29 L1640.46 1211.29 L1639.88 1211.29 L1639.29 1211.29 L1638.7 1211.29 L1638.12 1211.29 L1637.53 1211.29 L1636.94 1211.29 L1636.36 1211.29 L1635.77 1211.29 L1635.18 1211.29 L1634.6 1211.29 L1634.01 1211.29 L1633.42 1211.29 L1632.84 1211.29 L1632.25 1211.29 L1631.67 1211.29 L1631.08 1211.29 L1630.49 1211.29 L1629.91 1211.29 L1629.32 1211.29 L1628.73 1211.29 L1628.15 1211.29 L1627.56 1211.29 L1626.97 1211.29 L1626.39 1211.29 L1625.8 1211.29 L1625.22 1211.29 L1624.63 1211.29 L1624.04 1211.29 L1623.46 1211.29 L1622.87 1211.29 L1622.28 1211.29 L1621.7 1211.29 L1621.11 1211.29 L1620.52 1211.29 L1619.94 1211.29 L1619.35 1211.29 L1618.76 1211.29 L1618.18 1211.29 L1617.59 1211.29 L1617.01 1211.29 L1616.42 1211.29 L1615.83 1211.29 L1615.25 1211.29 L1614.66 1211.29 L1614.07 1211.29 L1613.49 1211.29 L1612.9 1211.29 L1612.31 1211.29 L1611.73 1211.29 L1611.14 1211.29 L1610.55 1211.29 L1609.97 1211.29 L1609.38 1211.29 L1608.8 1211.29 L1608.21 1211.29 L1607.62 1211.29 L1607.04 1211.29 L1606.45 1211.29 L1605.86 1211.29 L1605.28 1211.29 L1604.69 1211.29 L1604.1 1211.29 L1603.52 1211.29 L1602.93 1211.29 L1602.34 1211.29 L1601.76 1211.29 L1601.17 1211.29 L1600.59 1211.29 L1600 1211.29 L1599.41 1211.29 L1598.83 1211.29 L1598.24 1211.29 L1597.65 1211.29 L1597.07 1211.29 L1596.48 1211.29 L1595.89 1211.29 L1595.31 1211.29 L1594.72 1211.29 L1594.14 1211.29 L1593.55 1211.29 L1592.96 1211.29 L1592.38 1211.29 L1591.79 1211.29 L1591.2 1211.29 L1590.62 1211.29 L1590.03 1211.29 L1589.44 1211.29 L1588.86 1211.29 L1588.27 1211.29 L1587.68 1211.29 L1587.1 1211.29 L1586.51 1211.29 L1585.93 1211.29 L1585.34 1211.29 L1584.75 1211.29 L1584.17 1211.29 L1583.58 1211.29 L1582.99 1211.29 L1582.41 1211.29 L1581.82 1211.29 L1581.23 1211.29 L1580.65 1211.29 L1580.06 1211.29 L1579.47 1211.29 L1578.89 1211.29 L1578.3 1211.29 L1577.72 1211.29 L1577.13 1211.29 L1576.54 1211.29 L1575.96 1211.29 L1575.37 1211.29 L1574.78 1211.29 L1574.2 1211.29 L1573.61 1211.29 L1573.02 1211.29 L1572.44 1211.29 L1571.85 1211.29 L1571.27 1211.29 L1570.68 1211.29 L1570.09 1211.29 L1569.51 1211.29 L1568.92 1211.29 L1568.33 1211.29 L1567.75 1211.29 L1567.16 1211.29 L1566.57 1211.29 L1565.99 1211.29 L1565.4 1211.29 L1564.81 1211.29 L1564.23 1211.29 L1563.64 1211.29 L1563.06 1211.29 L1562.47 1211.29 L1561.88 1211.29 L1561.3 1211.29 L1560.71 1211.29 L1560.12 1211.29 L1559.54 1211.29 L1558.95 1211.29 L1558.36 1211.29 L1557.78 1211.29 L1557.19 1211.29 L1556.6 1211.29 L1556.02 1211.29 L1555.43 1211.29 L1554.85 1211.29 L1554.26 1211.29 L1553.67 1211.29 L1553.09 1211.29 L1552.5 1211.29 L1551.91 1211.29 L1551.33 1211.29 L1550.74 1211.29 L1550.15 1211.29 L1549.57 1211.29 L1548.98 1211.29 L1548.4 1211.29 L1547.81 1211.29 L1547.22 1211.29 L1546.64 1211.29 L1546.05 1211.29 L1545.46 1211.29 L1544.88 1211.29 L1544.29 1211.29 L1543.7 1211.29 L1543.12 1211.29 L1542.53 1211.29 L1541.94 1211.29 L1541.36 1211.29 L1540.77 1211.29 L1540.19 1211.29 L1539.6 1211.29 L1539.01 1211.29 L1538.43 1211.29 L1537.84 1211.29 L1537.25 1211.29 L1536.67 1211.29 L1536.08 1211.29 L1535.49 1211.29 L1534.91 1211.29 L1534.32 1211.29 L1533.73 1211.29 L1533.15 1211.29 L1532.56 1211.29 L1531.98 1211.29 L1531.39 1211.29 L1530.8 1211.29 L1530.22 1211.29 L1529.63 1211.29 L1529.04 1211.29 L1528.46 1211.29 L1527.87 1211.29 L1527.28 1211.29 L1526.7 1211.29 L1526.11 1211.29 L1525.52 1211.29 L1524.94 1211.29 L1524.35 1211.29 L1523.77 1211.29 L1523.18 1211.29 L1522.59 1211.29 L1522.01 1211.29 L1521.42 1211.29 L1520.83 1211.29 L1520.25 1211.29 L1519.66 1211.29 L1519.07 1211.29 L1518.49 1211.29 L1517.9 1211.29 L1517.32 1211.29 L1516.73 1211.29 L1516.14 1211.29 L1515.56 1211.29 L1514.97 1211.29 L1514.38 1211.29 L1513.8 1211.29 L1513.21 1211.29 L1512.62 1211.29 L1512.04 1211.29 L1511.45 1211.29 L1510.86 1211.29 L1510.28 1211.29 L1509.69 1211.29 L1509.11 1211.29 L1508.52 1211.29 L1507.93 1211.29 L1507.35 1211.29 L1506.76 1211.29 L1506.17 1211.29 L1505.59 1211.29 L1505 1211.29 L1504.41 1211.29 L1503.83 1211.29 L1503.24 1211.29 L1502.65 1211.29 L1502.07 1211.29 L1501.48 1211.29 L1500.9 1211.29 L1500.31 1211.29 L1499.72 1211.29 L1499.14 1211.29 L1498.55 1211.29 L1497.96 1211.29 L1497.38 1211.29 L1496.79 1211.29 L1496.2 1211.29 L1495.62 1211.29 L1495.03 1211.29 L1494.45 1211.29 L1493.86 1211.29 L1493.27 1211.29 L1492.69 1211.29 L1492.1 1211.29 L1491.51 1211.29 L1490.93 1211.29 L1490.34 1211.29 L1489.75 1211.29 L1489.17 1211.29 L1488.58 1211.29 L1487.99 1211.29 L1487.41 1211.29 L1486.82 1211.29 L1486.24 1211.29 L1485.65 1211.29 L1485.06 1211.29 L1484.48 1211.29 L1483.89 1211.29 L1483.3 1211.29 L1482.72 1211.29 L1482.13 1211.29 L1481.54 1211.29 L1480.96 1211.29 L1480.37 1211.29 L1479.78 1211.29 L1479.2 1211.29 L1478.61 1211.29 L1478.03 1211.29 L1477.44 1211.29 L1476.85 1211.29 L1476.27 1211.29 L1475.68 1211.29 L1475.09 1211.29 L1474.51 1211.29 L1473.92 1211.29 L1473.33 1211.29 L1472.75 1211.29 L1472.16 1211.29 L1471.57 1211.29 L1470.99 1211.29 L1470.4 1211.29 L1469.82 1211.29 L1469.23 1211.29 L1468.64 1211.29 L1468.06 1211.29 L1467.47 1211.29 L1466.88 1211.29 L1466.3 1211.29 L1465.71 1211.29 L1465.12 1211.29 L1464.54 1211.29 L1463.95 1211.29 L1463.37 1211.29 L1462.78 1211.29 L1462.19 1211.29 L1461.61 1211.29 L1461.02 1211.29 L1460.43 1211.29 L1459.85 1211.29 L1459.26 1211.29 L1458.67 1211.29 L1458.09 1211.29 L1457.5 1211.29 L1456.91 1211.29 L1456.33 1211.29 L1455.74 1211.29 L1455.16 1211.29 L1454.57 1211.29 L1453.98 1211.29 L1453.4 1211.29 L1452.81 1211.29 L1452.22 1211.29 L1451.64 1211.29 L1451.05 1211.29 L1450.46 1211.29 L1449.88 1211.29 L1449.29 1211.29 L1448.7 1211.29 L1448.12 1211.29 L1447.53 1211.29 L1446.95 1211.29 L1446.36 1211.29 L1445.77 1211.29 L1445.19 1211.29 L1444.6 1211.29 L1444.01 1211.29 L1443.43 1211.29 L1442.84 1211.29 L1442.25 1211.29 L1441.67 1211.29 L1441.08 1211.29 L1440.5 1211.29 L1439.91 1211.29 L1439.32 1211.29 L1438.74 1211.29 L1438.15 1211.29 L1437.56 1211.29 L1436.98 1211.29 L1436.39 1211.29 L1435.8 1211.29 L1435.22 1211.29 L1434.63 1211.29 L1434.04 1211.29 L1433.46 1211.29 L1432.87 1211.29 L1432.29 1211.29 L1431.7 1211.29 L1431.11 1211.29 L1430.53 1211.29 L1429.94 1211.29 L1429.35 1211.29 L1428.77 1211.29 L1428.18 1211.29 L1427.59 1211.29 L1427.01 1211.29 L1426.42 1211.29 L1425.83 1211.29 L1425.25 1211.29 L1424.66 1211.29 L1424.08 1211.29 L1423.49 1211.29 L1422.9 1211.29 L1422.32 1211.29 L1421.73 1211.29 L1421.14 1211.29 L1420.56 1211.29 L1419.97 1211.29 L1419.38 1211.29 L1418.8 1211.29 L1418.21 1211.29 L1417.63 1211.29 L1417.04 1211.29 L1416.45 1211.29 L1415.87 1211.29 L1415.28 1211.29 L1414.69 1211.29 L1414.11 1211.29 L1413.52 1211.29 L1412.93 1211.29 L1412.35 1211.29 L1411.76 1211.29 L1411.17 1211.29 L1410.59 1211.29 L1410 1211.29 L1409.42 1211.29 L1408.83 1211.29 L1408.24 1211.29 L1407.66 1211.29 L1407.07 1211.29 L1406.48 1211.29 L1405.9 1211.29 L1405.31 1211.29 L1404.72 1211.29 L1404.14 1211.29 L1403.55 1211.29 L1402.96 1211.29 L1402.38 1211.29 L1401.79 1211.29 L1401.21 1211.29 L1400.62 1211.29 L1400.03 1211.29 L1399.45 1211.29 L1398.86 1211.29 L1398.27 1211.29 L1397.69 1211.29 L1397.1 1211.29 L1396.51 1211.29 L1395.93 1211.29 L1395.34 1211.29 L1394.75 1211.29 L1394.17 1211.29 L1393.58 1211.29 L1393 1211.29 L1392.41 1211.29 L1391.82 1211.29 L1391.24 1211.29 L1390.65 1211.29 L1390.06 1211.29 L1389.48 1211.29 L1388.89 1211.29 L1388.3 1211.29 L1387.72 1211.29 L1387.13 1211.29 L1386.55 1211.29 L1385.96 1211.29 L1385.37 1211.29 L1384.79 1211.29 L1384.2 1211.29 L1383.61 1211.29 L1383.03 1211.29 L1382.44 1211.29 L1381.85 1211.29 L1381.27 1211.29 L1380.68 1211.29 L1380.09 1211.29 L1379.51 1211.29 L1378.92 1211.29 L1378.34 1211.29 L1377.75 1211.29 L1377.16 1211.29 L1376.58 1211.29 L1375.99 1211.29 L1375.4 1211.29 L1374.82 1211.29 L1374.23 1211.29 L1373.64 1211.29 L1373.06 1211.29 L1372.47 1211.29 L1371.88 1211.29 L1371.3 1211.29 L1370.71 1211.29 L1370.13 1211.29 L1369.54 1211.29 L1368.95 1211.29 L1368.37 1211.29 L1367.78 1211.29 L1367.19 1211.29 L1366.61 1211.29 L1366.02 1211.29 L1365.43 1211.29 L1364.85 1211.29 L1364.26 1211.29 L1363.68 1211.29 L1363.09 1211.29 L1362.5 1211.29 L1361.92 1211.29 L1361.33 1211.29 L1360.74 1211.29 L1360.16 1211.29 L1359.57 1211.29 L1358.98 1211.29 L1358.4 1211.29 L1357.81 1211.29 L1357.22 1211.29 L1356.64 1211.29 L1356.05 1211.29 L1355.47 1211.29 L1354.88 1211.29 L1354.29 1211.29 L1353.71 1211.29 L1353.12 1211.29 L1352.53 1211.29 L1351.95 1211.29 L1351.36 1211.29 L1350.77 1211.29 L1350.19 1211.29 L1349.6 1211.29 L1349.01 1211.29 L1348.43 1211.29 L1347.84 1211.29 L1347.26 1211.29 L1346.67 1211.29 L1346.08 1211.29 L1345.5 1211.29 L1344.91 1211.29 L1344.32 1211.29 L1343.74 1211.29 L1343.15 1211.29 L1342.56 1211.29 L1341.98 1211.29 L1341.39 1211.29 L1340.8 1211.29 L1340.22 1211.29 L1339.63 1211.29 L1339.05 1211.29 L1338.46 1211.29 L1337.87 1211.29 L1337.29 1211.29 L1336.7 1211.29 L1336.11 1211.29 L1335.53 1211.29 L1334.94 1211.29 L1334.35 1211.29 L1333.77 1211.29 L1333.18 1211.29 L1332.6 1211.29 L1332.01 1211.29 L1331.42 1211.29 L1330.84 1211.29 L1330.25 1211.29 L1329.66 1211.29 L1329.08 1211.29 L1328.49 1211.29 L1327.9 1211.29 L1327.32 1211.29 L1326.73 1211.29 L1326.14 1211.29 L1325.56 1211.29 L1324.97 1211.29 L1324.39 1211.29 L1323.8 1211.29 L1323.21 1211.29 L1322.63 1211.29 L1322.04 1211.29 L1321.45 1211.29 L1320.87 1211.29 L1320.28 1211.29 L1319.69 1211.29 L1319.11 1211.29 L1318.52 1211.29 L1317.93 1211.29 L1317.35 1211.29 L1316.76 1211.29 L1316.18 1211.29 L1315.59 1211.29 L1315 1211.29 L1314.42 1211.29 L1313.83 1211.29 L1313.24 1211.29 L1312.66 1211.29 L1312.07 1211.29 L1311.48 1211.29 L1310.9 1211.29 L1310.31 1211.29 L1309.73 1211.29 L1309.14 1211.29 L1308.55 1211.29 L1307.97 1211.29 L1307.38 1211.29 L1306.79 1211.29 L1306.21 1211.29 L1305.62 1211.29 L1305.03 1211.29 L1304.45 1211.29 L1303.86 1211.29 L1303.27 1211.29 L1302.69 1211.29 L1302.1 1211.29 L1301.52 1211.29 L1300.93 1211.29 L1300.34 1211.29 L1299.76 1211.29 L1299.17 1211.29 L1298.58 1211.29 L1298 1211.29 L1297.41 1211.29 L1296.82 1211.29 L1296.24 1211.29 L1295.65 1211.29 L1295.06 1211.29 L1294.48 1211.29 L1293.89 1211.29 L1293.31 1211.29 L1292.72 1211.29 L1292.13 1211.29 L1291.55 1211.29 L1290.96 1211.29 L1290.37 1211.29 L1289.79 1211.29 L1289.2 1211.29 L1288.61 1211.29 L1288.03 1211.29 L1287.44 1211.29 L1286.86 1211.29 L1286.27 1211.29 L1285.68 1211.29 L1285.1 1211.29 L1284.51 1211.29 L1283.92 1211.29 L1283.34 1211.29 L1282.75 1211.29 L1282.16 1211.29 L1281.58 1211.29 L1280.99 1211.29 L1280.4 1211.29 L1279.82 1211.29 L1279.23 1211.29 L1278.65 1211.29 L1278.06 1211.29 L1277.47 1211.29 L1276.89 1211.29 L1276.3 1211.29 L1275.71 1211.29 L1275.13 1211.29 L1274.54 1211.29 L1273.95 1211.29 L1273.37 1211.29 L1272.78 1211.29 L1272.19 1211.29 L1271.61 1211.29 L1271.02 1211.29 L1270.44 1211.29 L1269.85 1211.29 L1269.26 1211.29 L1268.68 1211.29 L1268.09 1211.29 L1267.5 1211.29 L1266.92 1211.29 L1266.33 1211.29 L1265.74 1211.29 L1265.16 1211.29 L1264.57 1211.29 L1263.98 1211.29 L1263.4 1211.29 L1262.81 1211.29 L1262.23 1211.29 L1261.64 1211.29 L1261.05 1211.29 L1260.47 1211.29 L1259.88 1211.29 L1259.29 1211.29 L1258.71 1211.29 L1258.12 1211.29 L1257.53 1211.29 L1256.95 1211.29 L1256.36 1211.29 L1255.78 1211.29 L1255.19 1211.29 L1254.6 1211.29 L1254.02 1211.29 L1253.43 1211.29 L1252.84 1211.29 L1252.26 1211.29 L1251.67 1211.29 L1251.08 1211.29 L1250.5 1211.29 L1249.91 1211.29 L1249.32 1211.29 L1248.74 1211.29 L1248.15 1211.29 L1247.57 1211.29 L1246.98 1211.29 L1246.39 1211.29 L1245.81 1211.29 L1245.22 1211.29 L1244.63 1211.29 L1244.05 1211.29 L1243.46 1211.29 L1242.87 1211.29 L1242.29 1211.29 L1241.7 1211.29 L1241.11 1211.29 L1240.53 1211.29 L1239.94 1211.29 L1239.36 1211.29 L1238.77 1211.29 L1238.18 1211.29 L1237.6 1211.29 L1237.01 1211.29 L1236.42 1211.29 L1235.84 1211.29 L1235.25 1211.29 L1234.66 1211.29 L1234.08 1211.29 L1233.49 1211.29 L1232.91 1211.29 L1232.32 1211.29 L1231.73 1211.29 L1231.15 1211.29 L1230.56 1211.29 L1229.97 1211.29 L1229.39 1211.29 L1228.8 1211.29 L1228.21 1211.29 L1227.63 1211.29 L1227.04 1211.29 L1226.45 1211.29 L1225.87 1211.29 L1225.28 1211.29 L1224.7 1211.29 L1224.11 1211.29 L1223.52 1211.29 L1222.94 1211.29 L1222.35 1211.29 L1221.76 1211.29 L1221.18 1211.29 L1220.59 1211.29 L1220 1211.29 L1219.42 1211.29 L1218.83 1211.29 L1218.24 1211.29 L1217.66 1211.29 L1217.07 1211.29 L1216.49 1211.29 L1215.9 1211.29 L1215.31 1211.29 L1214.73 1211.29 L1214.14 1211.29 L1213.55 1211.29 L1212.97 1211.29 L1212.38 1211.29 L1211.79 1211.29 L1211.21 1211.29 L1210.62 1211.29 L1210.03 1211.29 L1209.45 1211.29 L1208.86 1211.29 L1208.28 1211.29 L1207.69 1211.29 L1207.1 1211.29 L1206.52 1211.29 L1205.93 1211.29 L1205.34 1211.29 L1204.76 1211.29 L1204.17 1211.29 L1203.58 1211.29 L1203 1211.29 L1202.41 1211.29 L1201.83 1211.29 L1201.24 1211.29 L1200.65 1211.29 L1200.07 1211.29 L1199.48 1211.29 L1198.89 1211.29 L1198.31 1211.29 L1197.72 1211.29 L1197.13 1211.29 L1196.55 1211.29 L1195.96 1211.29 L1195.37 1211.29 L1194.79 1211.29 L1194.2 1211.29 L1193.62 1211.29 L1193.03 1211.29 L1192.44 1211.29 L1191.86 1211.29 L1191.27 1211.29 L1190.68 1211.29 L1190.1 1211.29 L1189.51 1211.29 L1188.92 1211.29 L1188.34 1211.29 L1187.75 1211.29 L1187.16 1211.29 L1186.58 1211.29 L1185.99 1211.29 L1185.41 1211.29 L1184.82 1211.29 L1184.23 1211.29 L1183.65 1211.29 L1183.06 1211.29 L1182.47 1211.29 L1181.89 1211.29 L1181.3 1211.29 L1180.71 1211.29 L1180.13 1211.29 L1179.54 1211.29 L1178.96 1211.29 L1178.37 1211.29 L1177.78 1211.29 L1177.2 1211.29 L1176.61 1211.29 L1176.02 1211.29 L1175.44 1211.29 L1174.85 1211.29 L1174.26 1211.29 L1173.68 1211.29 L1173.09 1211.29 L1172.5 1211.29 L1171.92 1211.29 L1171.33 1211.29 L1170.75 1211.29 L1170.16 1211.29 L1169.57 1211.29 L1168.99 1211.29 L1168.4 1211.29 L1167.81 1211.29 L1167.23 1211.29 L1166.64 1211.29 L1166.05 1211.29 L1165.47 1211.29 L1164.88 1211.29 L1164.29 1211.29 L1163.71 1211.29 L1163.12 1211.29 L1162.54 1211.29 L1161.95 1211.29 L1161.36 1211.29 L1160.78 1211.29 L1160.19 1211.29 L1159.6 1211.29 L1159.02 1211.29 L1158.43 1211.29 L1157.84 1211.29 L1157.26 1211.29 L1156.67 1211.29 L1156.09 1211.29 L1155.5 1211.29 L1154.91 1211.29 L1154.33 1211.29 L1153.74 1211.29 L1153.15 1211.29 L1152.57 1211.29 L1151.98 1211.29 L1151.39 1211.29 L1150.81 1211.29 L1150.22 1211.29 L1149.63 1211.29 L1149.05 1211.29 L1148.46 1211.29 L1147.88 1211.29 L1147.29 1211.29 L1146.7 1211.29 L1146.12 1211.29 L1145.53 1211.29 L1144.94 1211.29 L1144.36 1211.29 L1143.77 1211.29 L1143.18 1211.29 L1142.6 1211.29 L1142.01 1211.29 L1141.42 1211.29 L1140.84 1211.29 L1140.25 1211.29 L1139.67 1211.29 L1139.08 1211.29 L1138.49 1211.29 L1137.91 1211.29 L1137.32 1211.29 L1136.73 1211.29 L1136.15 1211.29 L1135.56 1211.29 L1134.97 1211.29 L1134.39 1211.29 L1133.8 1211.29 L1133.21 1211.29 L1132.63 1211.29 L1132.04 1211.29 L1131.46 1211.29 L1130.87 1211.29 L1130.28 1211.29 L1129.7 1211.29 L1129.11 1211.29 L1128.52 1211.29 L1127.94 1211.29 L1127.35 1211.29 L1126.76 1211.29 L1126.18 1211.29 L1125.59 1211.29 L1125.01 1211.29 L1124.42 1211.29 L1123.83 1211.29 L1123.25 1211.29 L1122.66 1211.29 L1122.07 1211.29 L1121.49 1211.29 L1120.9 1211.29 L1120.31 1211.29 L1119.73 1211.29 L1119.14 1211.29 L1118.55 1211.29 L1117.97 1211.29 L1117.38 1211.29 L1116.8 1211.29 L1116.21 1211.29 L1115.62 1211.29 L1115.04 1211.29 L1114.45 1211.29 L1113.86 1211.29 L1113.28 1211.29 L1112.69 1211.29 L1112.1 1211.29 L1111.52 1211.29 L1110.93 1211.29 L1110.34 1211.29 L1109.76 1211.29 L1109.17 1211.29 L1108.59 1211.29 L1108 1211.29 L1107.41 1211.29 L1106.83 1211.29 L1106.24 1211.29 L1105.65 1211.29 L1105.07 1211.29 L1104.48 1211.29 L1103.89 1211.29 L1103.31 1211.29 L1102.72 1211.29 L1102.14 1211.29 L1101.55 1211.29 L1100.96 1211.29 L1100.38 1211.29 L1099.79 1211.29 L1099.2 1211.29 L1098.62 1211.29 L1098.03 1211.29 L1097.44 1211.29 L1096.86 1211.29 L1096.27 1211.29 L1095.68 1211.29 L1095.1 1211.29 L1094.51 1211.29 L1093.93 1211.29 L1093.34 1211.29 L1092.75 1211.29 L1092.17 1211.29 L1091.58 1211.29 L1090.99 1211.29 L1090.41 1211.29 L1089.82 1211.29 L1089.23 1211.29 L1088.65 1211.29 L1088.06 1211.29 L1087.47 1211.29 L1086.89 1211.29 L1086.3 1211.29 L1085.72 1211.29 L1085.13 1211.29 L1084.54 1211.29 L1083.96 1211.29 L1083.37 1211.29 L1082.78 1211.29 L1082.2 1211.29 L1081.61 1211.29 L1081.02 1211.29 L1080.44 1211.29 L1079.85 1211.29 L1079.26 1211.29 L1078.68 1211.29 L1078.09 1211.29 L1077.51 1211.29 L1076.92 1211.29 L1076.33 1211.29 L1075.75 1211.29 L1075.16 1211.29 L1074.57 1211.29 L1073.99 1211.29 L1073.4 1211.29 L1072.81 1211.29 L1072.23 1211.29 L1071.64 1211.29 L1071.06 1211.29 L1070.47 1211.29 L1069.88 1211.29 L1069.3 1211.29 L1068.71 1211.29 L1068.12 1211.29 L1067.54 1211.29 L1066.95 1211.29 L1066.36 1211.29 L1065.78 1211.29 L1065.19 1211.29 L1064.6 1211.29 L1064.02 1211.29 L1063.43 1211.29 L1062.85 1211.29 L1062.26 1211.29 L1061.67 1211.29 L1061.09 1211.29 L1060.5 1211.29 L1059.91 1211.29 L1059.33 1211.29 L1058.74 1211.29 L1058.15 1211.29 L1057.57 1211.29 L1056.98 1211.29 L1056.39 1211.29 L1055.81 1211.29 L1055.22 1211.29 L1054.64 1211.29 L1054.05 1211.29 L1053.46 1211.29 L1052.88 1211.29 L1052.29 1211.29 L1051.7 1211.29 L1051.12 1211.29 L1050.53 1211.29 L1049.94 1211.29 L1049.36 1211.29 L1048.77 1211.29 L1048.19 1211.29 L1047.6 1211.29 L1047.01 1211.29 L1046.43 1211.29 L1045.84 1211.29 L1045.25 1211.29 L1044.67 1211.29 L1044.08 1211.29 L1043.49 1211.29 L1042.91 1211.29 L1042.32 1211.29 L1041.73 1211.29 L1041.15 1211.29 L1040.56 1211.29 L1039.98 1211.29 L1039.39 1211.29 L1038.8 1211.29 L1038.22 1211.29 L1037.63 1211.29 L1037.04 1211.29 L1036.46 1211.29 L1035.87 1211.29 L1035.28 1211.29 L1034.7 1211.29 L1034.11 1211.29 L1033.52 1211.29 L1032.94 1211.29 L1032.35 1211.29 L1031.77 1211.29 L1031.18 1211.29 L1030.59 1211.29 L1030.01 1211.29 L1029.42 1211.29 L1028.83 1211.29 L1028.25 1211.29 L1027.66 1211.29 L1027.07 1211.29 L1026.49 1211.29 L1025.9 1211.29 L1025.32 1211.29 L1024.73 1211.29 L1024.14 1211.29 L1023.56 1211.29 L1022.97 1211.29 L1022.38 1211.29 L1021.8 1211.29 L1021.21 1211.29 L1020.62 1211.29 L1020.04 1211.29 L1019.45 1211.29 L1018.86 1211.29 L1018.28 1211.29 L1017.69 1211.29 L1017.11 1211.29 L1016.52 1211.29 L1015.93 1211.29 L1015.35 1211.29 L1014.76 1211.29 L1014.17 1211.29 L1013.59 1211.29 L1013 1211.29 L1012.41 1211.29 L1011.83 1211.29 L1011.24 1211.29 L1010.65 1211.29 L1010.07 1211.29 L1009.48 1211.29 L1008.9 1211.29 L1008.31 1211.29 L1007.72 1211.29 L1007.14 1211.29 L1006.55 1211.29 L1005.96 1211.29 L1005.38 1211.29 L1004.79 1211.29 L1004.2 1211.29 L1003.62 1211.29 L1003.03 1211.29 L1002.44 1211.29 L1001.86 1211.29 L1001.27 1211.29 L1000.69 1211.29 L1000.1 1211.29 L999.513 1211.29 L998.926 1211.29 L998.34 1211.29 L997.754 1211.29 L997.167 1211.29 L996.581 1211.29 L995.994 1211.29 L995.408 1211.29 L994.822 1211.29 L994.235 1211.29 L993.649 1211.29 L993.062 1211.29 L992.476 1211.29 L991.889 1211.29 L991.303 1211.29 L990.717 1211.29 L990.13 1211.29 L989.544 1211.29 L988.957 1211.29 L988.371 1211.29 L987.785 1211.29 L987.198 1211.29 L986.612 1211.29 L986.025 1211.29  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.36 986.612,1211.36 987.198,1211.36 987.785,1211.36 988.371,1211.36 988.957,1211.36 989.544,1211.36 990.13,1211.36 990.717,1211.36 991.303,1211.36 991.889,1211.36 992.476,1211.36 993.062,1211.36 993.649,1211.36 994.235,1211.36 994.822,1211.36 995.408,1211.36 995.994,1211.36 996.581,1211.36 997.167,1211.36 997.754,1211.36 998.34,1211.36 998.926,1211.36 999.513,1211.36 1000.1,1211.36 1000.69,1211.36 1001.27,1211.36 1001.86,1211.36 1002.44,1211.36 1003.03,1211.36 1003.62,1211.36 1004.2,1211.36 1004.79,1211.36 1005.38,1211.36 1005.96,1211.36 1006.55,1211.36 1007.14,1211.36 1007.72,1211.36 1008.31,1211.36 1008.9,1211.36 1009.48,1211.36 1010.07,1211.36 1010.65,1211.36 1011.24,1211.36 1011.83,1211.36 1012.41,1211.36 1013,1211.36 1013.59,1211.36 1014.17,1211.36 1014.76,1211.36 1015.35,1211.36 1015.93,1211.36 1016.52,1211.36 1017.11,1211.36 1017.69,1211.36 1018.28,1211.36 1018.86,1211.36 1019.45,1211.36 1020.04,1211.36 1020.62,1211.36 1021.21,1211.36 1021.8,1211.36 1022.38,1211.36 1022.97,1211.36 1023.56,1211.36 1024.14,1211.36 1024.73,1211.36 1025.32,1211.36 1025.9,1211.36 1026.49,1211.36 1027.07,1211.36 1027.66,1211.36 1028.25,1211.36 1028.83,1211.36 1029.42,1211.36 1030.01,1211.36 1030.59,1211.36 1031.18,1211.36 1031.77,1211.36 1032.35,1211.36 1032.94,1211.36 1033.52,1211.36 1034.11,1211.36 1034.7,1211.36 1035.28,1211.36 1035.87,1211.36 1036.46,1211.36 1037.04,1211.36 1037.63,1211.36 1038.22,1211.36 1038.8,1211.36 1039.39,1211.36 1039.98,1211.36 1040.56,1211.36 1041.15,1211.36 1041.73,1211.36 1042.32,1211.36 1042.91,1211.36 1043.49,1211.36 1044.08,1211.36 1044.67,1211.36 1045.25,1211.36 1045.84,1211.36 1046.43,1211.36 1047.01,1211.36 1047.6,1211.36 1048.19,1211.36 1048.77,1211.36 1049.36,1211.36 1049.94,1211.36 1050.53,1211.36 1051.12,1211.36 1051.7,1211.36 1052.29,1211.36 1052.88,1211.36 1053.46,1211.36 1054.05,1211.36 1054.64,1211.36 1055.22,1211.36 1055.81,1211.36 1056.39,1211.36 1056.98,1211.36 1057.57,1211.36 1058.15,1211.36 1058.74,1211.36 1059.33,1211.36 1059.91,1211.36 1060.5,1211.36 1061.09,1211.36 1061.67,1211.36 1062.26,1211.36 1062.85,1211.36 1063.43,1211.36 1064.02,1211.36 1064.6,1211.36 1065.19,1211.36 1065.78,1211.36 1066.36,1211.36 1066.95,1211.36 1067.54,1211.36 1068.12,1211.36 1068.71,1211.36 1069.3,1211.36 1069.88,1211.36 1070.47,1211.36 1071.06,1211.36 1071.64,1211.36 1072.23,1211.36 1072.81,1211.36 1073.4,1211.36 1073.99,1211.36 1074.57,1211.36 1075.16,1211.36 1075.75,1211.36 1076.33,1211.36 1076.92,1211.36 1077.51,1211.36 1078.09,1211.36 1078.68,1211.36 1079.26,1211.36 1079.85,1211.36 1080.44,1211.36 1081.02,1211.36 1081.61,1211.36 1082.2,1211.36 1082.78,1211.36 1083.37,1211.36 1083.96,1211.36 1084.54,1211.36 1085.13,1211.36 1085.72,1211.36 1086.3,1211.36 1086.89,1211.36 1087.47,1211.36 1088.06,1211.36 1088.65,1211.36 1089.23,1211.36 1089.82,1211.36 1090.41,1211.36 1090.99,1211.36 1091.58,1211.36 1092.17,1211.36 1092.75,1211.36 1093.34,1211.36 1093.93,1211.36 1094.51,1211.36 1095.1,1211.36 1095.68,1211.36 1096.27,1211.36 1096.86,1211.36 1097.44,1211.36 1098.03,1211.36 1098.62,1211.36 1099.2,1211.36 1099.79,1211.36 1100.38,1211.36 1100.96,1211.36 1101.55,1211.36 1102.14,1211.36 1102.72,1211.36 1103.31,1211.36 1103.89,1211.36 1104.48,1211.36 1105.07,1211.36 1105.65,1211.36 1106.24,1211.36 1106.83,1211.36 1107.41,1211.36 1108,1211.36 1108.59,1211.36 1109.17,1211.36 1109.76,1211.36 1110.34,1211.36 1110.93,1211.36 1111.52,1211.36 1112.1,1211.36 1112.69,1211.36 1113.28,1211.36 1113.86,1211.36 1114.45,1211.36 1115.04,1211.36 1115.62,1211.36 1116.21,1211.36 1116.8,1211.36 1117.38,1211.36 1117.97,1211.36 1118.55,1211.36 1119.14,1211.36 1119.73,1211.36 1120.31,1211.36 1120.9,1211.36 1121.49,1211.36 1122.07,1211.36 1122.66,1211.36 1123.25,1211.36 1123.83,1211.36 1124.42,1211.36 1125.01,1211.36 1125.59,1211.36 1126.18,1211.36 1126.76,1211.36 1127.35,1211.36 1127.94,1211.36 1128.52,1211.36 1129.11,1211.36 1129.7,1211.36 1130.28,1211.36 1130.87,1211.36 1131.46,1211.36 1132.04,1211.36 1132.63,1211.36 1133.21,1211.36 1133.8,1211.36 1134.39,1211.36 1134.97,1211.36 1135.56,1211.36 1136.15,1211.36 1136.73,1211.36 1137.32,1211.36 1137.91,1211.36 1138.49,1211.36 1139.08,1211.36 1139.67,1211.36 1140.25,1211.36 1140.84,1211.36 1141.42,1211.36 1142.01,1211.36 1142.6,1211.36 1143.18,1211.36 1143.77,1211.36 1144.36,1211.36 1144.94,1211.36 1145.53,1211.36 1146.12,1211.36 1146.7,1211.36 1147.29,1211.36 1147.88,1211.36 1148.46,1211.36 1149.05,1211.36 1149.63,1211.36 1150.22,1211.36 1150.81,1211.36 1151.39,1211.36 1151.98,1211.36 1152.57,1211.36 1153.15,1211.36 1153.74,1211.36 1154.33,1211.36 1154.91,1211.36 1155.5,1211.36 1156.09,1211.36 1156.67,1211.36 1157.26,1211.36 1157.84,1211.36 1158.43,1211.36 1159.02,1211.36 1159.6,1211.36 1160.19,1211.36 1160.78,1211.36 1161.36,1211.36 1161.95,1211.36 1162.54,1211.36 1163.12,1211.36 1163.71,1211.36 1164.29,1211.36 1164.88,1211.36 1165.47,1211.36 1166.05,1211.36 1166.64,1211.36 1167.23,1211.36 1167.81,1211.36 1168.4,1211.36 1168.99,1211.36 1169.57,1211.36 1170.16,1211.36 1170.75,1211.36 1171.33,1211.36 1171.92,1211.36 1172.5,1211.36 1173.09,1211.36 1173.68,1211.36 1174.26,1211.36 1174.85,1211.36 1175.44,1211.36 1176.02,1211.36 1176.61,1211.36 1177.2,1211.36 1177.78,1211.36 1178.37,1211.36 1178.96,1211.36 1179.54,1211.36 1180.13,1211.36 1180.71,1211.36 1181.3,1211.36 1181.89,1211.36 1182.47,1211.36 1183.06,1211.36 1183.65,1211.36 1184.23,1211.36 1184.82,1211.36 1185.41,1211.36 1185.99,1211.36 1186.58,1211.36 1187.16,1211.36 1187.75,1211.36 1188.34,1211.36 1188.92,1211.36 1189.51,1211.36 1190.1,1211.36 1190.68,1211.36 1191.27,1211.36 1191.86,1211.36 1192.44,1211.36 1193.03,1211.36 1193.62,1211.36 1194.2,1211.36 1194.79,1211.36 1195.37,1211.36 1195.96,1211.36 1196.55,1211.36 1197.13,1211.36 1197.72,1211.36 1198.31,1211.36 1198.89,1211.36 1199.48,1211.36 1200.07,1211.36 1200.65,1211.36 1201.24,1211.36 1201.83,1211.36 1202.41,1211.36 1203,1211.36 1203.58,1211.36 1204.17,1211.36 1204.76,1211.36 1205.34,1211.36 1205.93,1211.36 1206.52,1211.36 1207.1,1211.36 1207.69,1211.36 1208.28,1211.36 1208.86,1211.36 1209.45,1211.36 1210.03,1211.36 1210.62,1211.36 1211.21,1211.36 1211.79,1211.36 1212.38,1211.36 1212.97,1211.36 1213.55,1211.36 1214.14,1211.36 1214.73,1211.36 1215.31,1211.36 1215.9,1211.36 1216.49,1211.36 1217.07,1211.36 1217.66,1211.36 1218.24,1211.36 1218.83,1211.36 1219.42,1211.36 1220,1211.36 1220.59,1211.36 1221.18,1211.36 1221.76,1211.36 1222.35,1211.36 1222.94,1211.36 1223.52,1211.36 1224.11,1211.36 1224.7,1211.36 1225.28,1211.36 1225.87,1211.36 1226.45,1211.36 1227.04,1211.36 1227.63,1211.36 1228.21,1211.36 1228.8,1211.36 1229.39,1211.36 1229.97,1211.36 1230.56,1211.36 1231.15,1211.36 1231.73,1211.36 1232.32,1211.36 1232.91,1211.36 1233.49,1211.36 1234.08,1211.36 1234.66,1211.36 1235.25,1211.36 1235.84,1211.36 1236.42,1211.36 1237.01,1211.36 1237.6,1211.36 1238.18,1211.36 1238.77,1211.36 1239.36,1211.36 1239.94,1211.36 1240.53,1211.36 1241.11,1211.36 1241.7,1211.36 1242.29,1211.36 1242.87,1211.36 1243.46,1211.36 1244.05,1211.36 1244.63,1211.36 1245.22,1211.36 1245.81,1211.36 1246.39,1211.36 1246.98,1211.36 1247.57,1211.36 1248.15,1211.36 1248.74,1211.36 1249.32,1211.36 1249.91,1211.36 1250.5,1211.36 1251.08,1211.36 1251.67,1211.36 1252.26,1211.36 1252.84,1211.36 1253.43,1211.36 1254.02,1211.36 1254.6,1211.36 1255.19,1211.36 1255.78,1211.36 1256.36,1211.36 1256.95,1211.36 1257.53,1211.36 1258.12,1211.36 1258.71,1211.36 1259.29,1211.36 1259.88,1211.36 1260.47,1211.36 1261.05,1211.36 1261.64,1211.36 1262.23,1211.36 1262.81,1211.36 1263.4,1211.36 1263.98,1211.36 1264.57,1211.36 1265.16,1211.36 1265.74,1211.36 1266.33,1211.36 1266.92,1211.36 1267.5,1211.36 1268.09,1211.36 1268.68,1211.36 1269.26,1211.36 1269.85,1211.36 1270.44,1211.36 1271.02,1211.36 1271.61,1211.36 1272.19,1211.36 1272.78,1211.36 1273.37,1211.36 1273.95,1211.36 1274.54,1211.36 1275.13,1211.36 1275.71,1211.36 1276.3,1211.36 1276.89,1211.36 1277.47,1211.36 1278.06,1211.36 1278.65,1211.36 1279.23,1211.36 1279.82,1211.36 1280.4,1211.36 1280.99,1211.36 1281.58,1211.36 1282.16,1211.36 1282.75,1211.36 1283.34,1211.36 1283.92,1211.36 1284.51,1211.36 1285.1,1211.36 1285.68,1211.36 1286.27,1211.36 1286.86,1211.36 1287.44,1211.36 1288.03,1211.36 1288.61,1211.36 1289.2,1211.36 1289.79,1211.36 1290.37,1211.36 1290.96,1211.36 1291.55,1211.36 1292.13,1211.36 1292.72,1211.36 1293.31,1211.36 1293.89,1211.36 1294.48,1211.36 1295.06,1211.36 1295.65,1211.36 1296.24,1211.36 1296.82,1211.36 1297.41,1211.36 1298,1211.36 1298.58,1211.36 1299.17,1211.36 1299.76,1211.36 1300.34,1211.36 1300.93,1211.36 1301.52,1211.36 1302.1,1211.36 1302.69,1211.36 1303.27,1211.36 1303.86,1211.36 1304.45,1211.36 1305.03,1211.36 1305.62,1211.36 1306.21,1211.36 1306.79,1211.36 1307.38,1211.36 1307.97,1211.36 1308.55,1211.36 1309.14,1211.36 1309.73,1211.36 1310.31,1211.36 1310.9,1211.36 1311.48,1211.36 1312.07,1211.36 1312.66,1211.36 1313.24,1211.36 1313.83,1211.36 1314.42,1211.36 1315,1211.36 1315.59,1211.36 1316.18,1211.36 1316.76,1211.36 1317.35,1211.36 1317.93,1211.36 1318.52,1211.36 1319.11,1211.36 1319.69,1211.36 1320.28,1211.36 1320.87,1211.36 1321.45,1211.36 1322.04,1211.36 1322.63,1211.36 1323.21,1211.36 1323.8,1211.36 1324.39,1211.36 1324.97,1211.36 1325.56,1211.36 1326.14,1211.36 1326.73,1211.36 1327.32,1211.36 1327.9,1211.36 1328.49,1211.36 1329.08,1211.36 1329.66,1211.36 1330.25,1211.36 1330.84,1211.36 1331.42,1211.36 1332.01,1211.36 1332.6,1211.36 1333.18,1211.36 1333.77,1211.36 1334.35,1211.36 1334.94,1211.36 1335.53,1211.36 1336.11,1211.36 1336.7,1211.36 1337.29,1211.36 1337.87,1211.36 1338.46,1211.36 1339.05,1211.36 1339.63,1211.36 1340.22,1211.36 1340.8,1211.36 1341.39,1211.36 1341.98,1211.36 1342.56,1211.36 1343.15,1211.36 1343.74,1211.36 1344.32,1211.36 1344.91,1211.36 1345.5,1211.36 1346.08,1211.36 1346.67,1211.36 1347.26,1211.36 1347.84,1211.36 1348.43,1211.36 1349.01,1211.36 1349.6,1211.36 1350.19,1211.36 1350.77,1211.36 1351.36,1211.36 1351.95,1211.36 1352.53,1211.36 1353.12,1211.36 1353.71,1211.36 1354.29,1211.36 1354.88,1211.36 1355.47,1211.36 1356.05,1211.36 1356.64,1211.36 1357.22,1211.36 1357.81,1211.36 1358.4,1211.36 1358.98,1211.36 1359.57,1211.36 1360.16,1211.36 1360.74,1211.36 1361.33,1211.36 1361.92,1211.36 1362.5,1211.36 1363.09,1211.36 1363.68,1211.36 1364.26,1211.36 1364.85,1211.36 1365.43,1211.36 1366.02,1211.36 1366.61,1211.36 1367.19,1211.36 1367.78,1211.36 1368.37,1211.36 1368.95,1211.36 1369.54,1211.36 1370.13,1211.36 1370.71,1211.36 1371.3,1211.36 1371.88,1211.36 1372.47,1211.36 1373.06,1211.36 1373.64,1211.36 1374.23,1211.36 1374.82,1211.36 1375.4,1211.36 1375.99,1211.36 1376.58,1211.36 1377.16,1211.36 1377.75,1211.36 1378.34,1211.36 1378.92,1211.36 1379.51,1211.36 1380.09,1211.36 1380.68,1211.36 1381.27,1211.36 1381.85,1211.36 1382.44,1211.36 1383.03,1211.36 1383.61,1211.36 1384.2,1211.36 1384.79,1211.36 1385.37,1211.36 1385.96,1211.36 1386.55,1211.36 1387.13,1211.36 1387.72,1211.36 1388.3,1211.36 1388.89,1211.36 1389.48,1211.36 1390.06,1211.36 1390.65,1211.36 1391.24,1211.36 1391.82,1211.36 1392.41,1211.36 1393,1211.36 1393.58,1211.36 1394.17,1211.36 1394.75,1211.36 1395.34,1211.36 1395.93,1211.36 1396.51,1211.36 1397.1,1211.36 1397.69,1211.36 1398.27,1211.36 1398.86,1211.36 1399.45,1211.36 1400.03,1211.36 1400.62,1211.36 1401.21,1211.36 1401.79,1211.36 1402.38,1211.36 1402.96,1211.36 1403.55,1211.36 1404.14,1211.36 1404.72,1211.36 1405.31,1211.36 1405.9,1211.36 1406.48,1211.36 1407.07,1211.36 1407.66,1211.36 1408.24,1211.36 1408.83,1211.36 1409.42,1211.36 1410,1211.36 1410.59,1211.36 1411.17,1211.36 1411.76,1211.36 1412.35,1211.36 1412.93,1211.36 1413.52,1211.36 1414.11,1211.36 1414.69,1211.36 1415.28,1211.36 1415.87,1211.36 1416.45,1211.36 1417.04,1211.36 1417.63,1211.36 1418.21,1211.36 1418.8,1211.36 1419.38,1211.36 1419.97,1211.36 1420.56,1211.36 1421.14,1211.36 1421.73,1211.36 1422.32,1211.36 1422.9,1211.36 1423.49,1211.36 1424.08,1211.36 1424.66,1211.36 1425.25,1211.36 1425.83,1211.36 1426.42,1211.36 1427.01,1211.36 1427.59,1211.36 1428.18,1211.36 1428.77,1211.36 1429.35,1211.36 1429.94,1211.36 1430.53,1211.36 1431.11,1211.36 1431.7,1211.36 1432.29,1211.36 1432.87,1211.36 1433.46,1211.36 1434.04,1211.36 1434.63,1211.36 1435.22,1211.36 1435.8,1211.36 1436.39,1211.36 1436.98,1211.36 1437.56,1211.36 1438.15,1211.36 1438.74,1211.36 1439.32,1211.36 1439.91,1211.36 1440.5,1211.36 1441.08,1211.36 1441.67,1211.36 1442.25,1211.36 1442.84,1211.36 1443.43,1211.36 1444.01,1211.36 1444.6,1211.36 1445.19,1211.36 1445.77,1211.36 1446.36,1211.36 1446.95,1211.36 1447.53,1211.36 1448.12,1211.36 1448.7,1211.36 1449.29,1211.36 1449.88,1211.36 1450.46,1211.36 1451.05,1211.36 1451.64,1211.36 1452.22,1211.36 1452.81,1211.36 1453.4,1211.36 1453.98,1211.36 1454.57,1211.36 1455.16,1211.36 1455.74,1211.36 1456.33,1211.36 1456.91,1211.36 1457.5,1211.36 1458.09,1211.36 1458.67,1211.36 1459.26,1211.36 1459.85,1211.36 1460.43,1211.36 1461.02,1211.36 1461.61,1211.36 1462.19,1211.36 1462.78,1211.36 1463.37,1211.36 1463.95,1211.36 1464.54,1211.36 1465.12,1211.36 1465.71,1211.36 1466.3,1211.36 1466.88,1211.36 1467.47,1211.36 1468.06,1211.36 1468.64,1211.36 1469.23,1211.36 1469.82,1211.36 1470.4,1211.36 1470.99,1211.36 1471.57,1211.36 1472.16,1211.36 1472.75,1211.36 1473.33,1211.36 1473.92,1211.36 1474.51,1211.36 1475.09,1211.36 1475.68,1211.36 1476.27,1211.36 1476.85,1211.36 1477.44,1211.36 1478.03,1211.36 1478.61,1211.36 1479.2,1211.36 1479.78,1211.36 1480.37,1211.36 1480.96,1211.36 1481.54,1211.36 1482.13,1211.36 1482.72,1211.36 1483.3,1211.36 1483.89,1211.36 1484.48,1211.36 1485.06,1211.36 1485.65,1211.36 1486.24,1211.36 1486.82,1211.36 1487.41,1211.36 1487.99,1211.36 1488.58,1211.36 1489.17,1211.36 1489.75,1211.36 1490.34,1211.36 1490.93,1211.36 1491.51,1211.36 1492.1,1211.36 1492.69,1211.36 1493.27,1211.36 1493.86,1211.36 1494.45,1211.36 1495.03,1211.36 1495.62,1211.36 1496.2,1211.36 1496.79,1211.36 1497.38,1211.36 1497.96,1211.36 1498.55,1211.36 1499.14,1211.36 1499.72,1211.36 1500.31,1211.36 1500.9,1211.36 1501.48,1211.36 1502.07,1211.36 1502.65,1211.36 1503.24,1211.36 1503.83,1211.36 1504.41,1211.36 1505,1211.36 1505.59,1211.36 1506.17,1211.36 1506.76,1211.36 1507.35,1211.36 1507.93,1211.36 1508.52,1211.36 1509.11,1211.36 1509.69,1211.36 1510.28,1211.36 1510.86,1211.36 1511.45,1211.36 1512.04,1211.36 1512.62,1211.36 1513.21,1211.36 1513.8,1211.36 1514.38,1211.36 1514.97,1211.36 1515.56,1211.36 1516.14,1211.36 1516.73,1211.36 1517.32,1211.36 1517.9,1211.36 1518.49,1211.36 1519.07,1211.36 1519.66,1211.36 1520.25,1211.36 1520.83,1211.36 1521.42,1211.36 1522.01,1211.36 1522.59,1211.36 1523.18,1211.36 1523.77,1211.36 1524.35,1211.36 1524.94,1211.36 1525.52,1211.36 1526.11,1211.36 1526.7,1211.36 1527.28,1211.36 1527.87,1211.36 1528.46,1211.36 1529.04,1211.36 1529.63,1211.36 1530.22,1211.36 1530.8,1211.36 1531.39,1211.36 1531.98,1211.36 1532.56,1211.36 1533.15,1211.36 1533.73,1211.36 1534.32,1211.36 1534.91,1211.36 1535.49,1211.36 1536.08,1211.36 1536.67,1211.36 1537.25,1211.36 1537.84,1211.36 1538.43,1211.36 1539.01,1211.36 1539.6,1211.36 1540.19,1211.36 1540.77,1211.36 1541.36,1211.36 1541.94,1211.36 1542.53,1211.36 1543.12,1211.36 1543.7,1211.36 1544.29,1211.36 1544.88,1211.36 1545.46,1211.36 1546.05,1211.36 1546.64,1211.36 1547.22,1211.36 1547.81,1211.36 1548.4,1211.36 1548.98,1211.36 1549.57,1211.36 1550.15,1211.36 1550.74,1211.36 1551.33,1211.36 1551.91,1211.36 1552.5,1211.36 1553.09,1211.36 1553.67,1211.36 1554.26,1211.36 1554.85,1211.36 1555.43,1211.36 1556.02,1211.36 1556.6,1211.36 1557.19,1211.36 1557.78,1211.36 1558.36,1211.36 1558.95,1211.36 1559.54,1211.36 1560.12,1211.36 1560.71,1211.36 1561.3,1211.36 1561.88,1211.36 1562.47,1211.36 1563.06,1211.36 1563.64,1211.36 1564.23,1211.36 1564.81,1211.36 1565.4,1211.36 1565.99,1211.36 1566.57,1211.36 1567.16,1211.36 1567.75,1211.36 1568.33,1211.36 1568.92,1211.36 1569.51,1211.36 1570.09,1211.36 1570.68,1211.36 1571.27,1211.36 1571.85,1211.36 1572.44,1211.36 1573.02,1211.36 1573.61,1211.36 1574.2,1211.36 1574.78,1211.36 1575.37,1211.36 1575.96,1211.36 1576.54,1211.36 1577.13,1211.36 1577.72,1211.36 1578.3,1211.36 1578.89,1211.36 1579.47,1211.36 1580.06,1211.36 1580.65,1211.36 1581.23,1211.36 1581.82,1211.36 1582.41,1211.36 1582.99,1211.36 1583.58,1211.36 1584.17,1211.36 1584.75,1211.36 1585.34,1211.36 1585.93,1211.36 1586.51,1211.36 1587.1,1211.36 1587.68,1211.36 1588.27,1211.36 1588.86,1211.36 1589.44,1211.36 1590.03,1211.36 1590.62,1211.36 1591.2,1211.36 1591.79,1211.36 1592.38,1211.36 1592.96,1211.36 1593.55,1211.36 1594.14,1211.36 1594.72,1211.36 1595.31,1211.36 1595.89,1211.36 1596.48,1211.36 1597.07,1211.36 1597.65,1211.36 1598.24,1211.36 1598.83,1211.36 1599.41,1211.36 1600,1211.36 1600.59,1211.36 1601.17,1211.36 1601.76,1211.36 1602.34,1211.36 1602.93,1211.36 1603.52,1211.36 1604.1,1211.36 1604.69,1211.36 1605.28,1211.36 1605.86,1211.36 1606.45,1211.36 1607.04,1211.36 1607.62,1211.36 1608.21,1211.36 1608.8,1211.36 1609.38,1211.36 1609.97,1211.36 1610.55,1211.36 1611.14,1211.36 1611.73,1211.36 1612.31,1211.36 1612.9,1211.36 1613.49,1211.36 1614.07,1211.36 1614.66,1211.36 1615.25,1211.36 1615.83,1211.36 1616.42,1211.36 1617.01,1211.36 1617.59,1211.36 1618.18,1211.36 1618.76,1211.36 1619.35,1211.36 1619.94,1211.36 1620.52,1211.36 1621.11,1211.36 1621.7,1211.36 1622.28,1211.36 1622.87,1211.36 1623.46,1211.36 1624.04,1211.36 1624.63,1211.36 1625.22,1211.36 1625.8,1211.36 1626.39,1211.36 1626.97,1211.36 1627.56,1211.36 1628.15,1211.36 1628.73,1211.36 1629.32,1211.36 1629.91,1211.36 1630.49,1211.36 1631.08,1211.36 1631.67,1211.36 1632.25,1211.36 1632.84,1211.36 1633.42,1211.36 1634.01,1211.36 1634.6,1211.36 1635.18,1211.36 1635.77,1211.36 1636.36,1211.36 1636.94,1211.36 1637.53,1211.36 1638.12,1211.36 1638.7,1211.36 1639.29,1211.36 1639.88,1211.36 1640.46,1211.36 1641.05,1211.36 1641.63,1211.36 1642.22,1211.36 1642.81,1211.36 1643.39,1211.36 1643.98,1211.36 1644.57,1211.36 1645.15,1211.36 1645.74,1211.36 1646.33,1211.36 1646.91,1211.36 1647.5,1211.36 1648.09,1211.36 1648.67,1211.36 1649.26,1211.36 1649.84,1211.36 1650.43,1211.36 1651.02,1211.36 1651.6,1211.36 1652.19,1211.36 1652.78,1211.36 1653.36,1211.36 1653.95,1211.36 1654.54,1211.36 1655.12,1211.36 1655.71,1211.36 1656.29,1211.36 1656.88,1211.36 1657.47,1211.36 1658.05,1211.36 1658.64,1211.36 1659.23,1211.36 1659.81,1211.36 1660.4,1211.36 1660.99,1211.36 1661.57,1211.36 1662.16,1211.36 1662.75,1211.36 1663.33,1211.36 1663.92,1211.36 1664.5,1211.36 1665.09,1211.36 1665.68,1211.36 1666.26,1211.36 1666.85,1211.36 1667.44,1211.36 1668.02,1211.36 1668.61,1211.36 1669.2,1211.36 1669.78,1211.36 1670.37,1211.36 1670.96,1211.36 1671.54,1211.36 1672.13,1211.36 1672.71,1211.36 1673.3,1211.36 1673.89,1211.36 1674.47,1211.36 1675.06,1211.36 1675.65,1211.36 1676.23,1211.36 1676.82,1211.36 1677.41,1211.36 1677.99,1211.36 1678.58,1211.36 1679.17,1211.36 1679.75,1211.36 1680.34,1211.36 1680.92,1211.36 1681.51,1211.36 1682.1,1211.36 1682.68,1211.36 1683.27,1211.36 1683.86,1211.36 1684.44,1211.36 1685.03,1211.36 1685.62,1211.36 1686.2,1211.36 1686.79,1211.36 1687.37,1211.36 1687.96,1211.36 1688.55,1211.36 1689.13,1211.36 1689.72,1211.36 1690.31,1211.36 1690.89,1211.36 1691.48,1211.36 1692.07,1211.36 1692.65,1211.36 1693.24,1211.36 1693.83,1211.36 1694.41,1211.36 1695,1211.36 1695.58,1211.36 1696.17,1211.36 1696.76,1211.36 1697.34,1211.36 1697.93,1211.36 1698.52,1211.36 1699.1,1211.36 1699.69,1211.36 1700.28,1211.36 1700.86,1211.36 1701.45,1211.36 1702.04,1211.36 1702.62,1211.36 1703.21,1211.36 1703.79,1211.36 1704.38,1211.36 1704.97,1211.36 1705.55,1211.36 1706.14,1211.36 1706.73,1211.36 1707.31,1211.36 1707.9,1211.36 1708.49,1211.36 1709.07,1211.36 1709.66,1211.36 1710.24,1211.36 1710.83,1211.36 1711.42,1211.36 1712,1211.36 1712.59,1211.36 1713.18,1211.36 1713.76,1211.36 1714.35,1211.36 1714.94,1211.36 1715.52,1211.36 1716.11,1211.36 1716.7,1211.36 1717.28,1211.36 1717.87,1211.36 1718.45,1211.36 1719.04,1211.36 1719.63,1211.36 1720.21,1211.36 1720.8,1211.36 1721.39,1211.36 1721.97,1211.36 1722.56,1211.36 1723.15,1211.36 1723.73,1211.36 1724.32,1211.36 1724.91,1211.36 1725.49,1211.36 1726.08,1211.36 1726.66,1211.36 1727.25,1211.36 1727.84,1211.36 1728.42,1211.36 1729.01,1211.36 1729.6,1211.36 1730.18,1211.36 1730.77,1211.36 1731.36,1211.36 1731.94,1211.36 1732.53,1211.36 1733.11,1211.36 1733.7,1211.36 1734.29,1211.36 1734.87,1211.36 1735.46,1211.36 1736.05,1211.36 1736.63,1211.36 1737.22,1211.36 1737.81,1211.36 1738.39,1211.36 1738.98,1211.36 1739.57,1211.36 1740.15,1211.36 1740.74,1211.36 1741.32,1211.36 1741.91,1211.36 1742.5,1211.36 1743.08,1211.36 1743.67,1211.36 1744.26,1211.36 1744.84,1211.36 1745.43,1211.36 1746.02,1211.36 1746.6,1211.36 1747.19,1211.36 1747.78,1211.36 1748.36,1211.36 1748.95,1211.36 1749.53,1211.36 1750.12,1211.36 1750.71,1211.36 1751.29,1211.36 1751.88,1211.36 1752.47,1211.36 1753.05,1211.36 1753.64,1211.36 1754.23,1211.36 1754.81,1211.36 1755.4,1211.36 1755.99,1211.36 1756.57,1211.36 1757.16,1211.36 1757.74,1211.36 1758.33,1211.36 1758.92,1211.36 1759.5,1211.36 1760.09,1211.36 1760.68,1211.36 1761.26,1211.36 1761.85,1211.36 1762.44,1211.36 1763.02,1211.36 1763.61,1211.36 1764.19,1211.36 1764.78,1211.36 1765.37,1211.36 1765.95,1211.36 1766.54,1211.36 1767.13,1211.36 1767.71,1211.36 1768.3,1211.36 1768.89,1211.36 1769.47,1211.36 1770.06,1211.36 1770.65,1211.36 1771.23,1211.36 1771.82,1211.36 1772.4,1211.36 1772.99,1211.36 1773.58,1211.36 1774.16,1211.36 1774.75,1211.36 1775.34,1211.36 1775.92,1211.36 1776.51,1211.36 1777.1,1211.36 1777.68,1211.36 1778.27,1211.36 1778.86,1211.36 1779.44,1211.36 1780.03,1211.36 1780.61,1211.36 1781.2,1211.36 1781.79,1211.36 1782.37,1211.36 1782.96,1211.36 1783.55,1211.36 1784.13,1211.36 1784.72,1211.36 1785.31,1211.36 1785.89,1211.36 1786.48,1211.36 1787.06,1211.36 1787.65,1211.36 1788.24,1211.36 1788.82,1211.36 1789.41,1211.36 1790,1211.36 1790.58,1211.36 1791.17,1211.36 1791.76,1211.36 1792.34,1211.36 1792.93,1211.36 1793.52,1211.36 1794.1,1211.36 1794.69,1211.36 1795.27,1211.36 1795.86,1211.36 1796.45,1211.36 1797.03,1211.36 1797.62,1211.36 1798.21,1211.36 1798.79,1211.36 1799.38,1211.36 1799.97,1211.36 1800.55,1211.36 1801.14,1211.36 1801.73,1211.36 1802.31,1211.36 1802.9,1211.36 1803.48,1211.36 1804.07,1211.36 1804.66,1211.36 1805.24,1211.36 1805.83,1211.36 1806.42,1211.36 1807,1211.36 1807.59,1211.36 1808.18,1211.36 1808.76,1211.36 1809.35,1211.36 1809.94,1211.36 1810.52,1211.36 1811.11,1211.36 1811.69,1211.36 1812.28,1211.36 1812.87,1211.36 1813.45,1211.36 1814.04,1211.36 1814.63,1211.36 1815.21,1211.36 1815.8,1211.36 1816.39,1211.36 1816.97,1211.36 1817.56,1211.36 1818.14,1211.36 1818.73,1211.36 1819.32,1211.36 1819.9,1211.36 1820.49,1211.36 1821.08,1211.36 1821.66,1211.36 1822.25,1211.36 1822.84,1211.36 1823.42,1211.36 1824.01,1211.36 1824.6,1211.36 1825.18,1211.36 1825.77,1211.36 1826.35,1211.36 1826.94,1211.36 1827.53,1211.36 1828.11,1211.36 1828.7,1211.36 1829.29,1211.36 1829.87,1211.36 1830.46,1211.36 1831.05,1211.36 1831.63,1211.36 1832.22,1211.36 1832.81,1211.36 1833.39,1211.36 1833.98,1211.36 1834.56,1211.36 1835.15,1211.36 1835.74,1211.36 1836.32,1211.36 1836.91,1211.36 1837.5,1211.36 1838.08,1211.36 1838.67,1211.36 1839.26,1211.36 1839.84,1211.36 1840.43,1211.36 1841.01,1211.36 1841.6,1211.36 1842.19,1211.36 1842.77,1211.36 1843.36,1211.36 1843.95,1211.36 1844.53,1211.36 1845.12,1211.36 1845.71,1211.36 1846.29,1211.36 1846.88,1211.36 1847.47,1211.36 1848.05,1211.36 1848.64,1211.36 1849.22,1211.36 1849.81,1211.36 1850.4,1211.36 1850.98,1211.36 1851.57,1211.36 1852.16,1211.36 1852.74,1211.36 1853.33,1211.36 1853.92,1211.36 1854.5,1211.36 1855.09,1211.36 1855.68,1211.36 1856.26,1211.36 1856.85,1211.36 1857.43,1211.36 1858.02,1211.36 1858.61,1211.36 1859.19,1211.36 1859.78,1211.36 1860.37,1211.36 1860.95,1211.36 1861.54,1211.36 1862.13,1211.36 1862.71,1211.36 1863.3,1211.36 1863.88,1211.36 1864.47,1211.36 1865.06,1211.36 1865.64,1211.36 1866.23,1211.36 1866.82,1211.36 1867.4,1211.36 1867.99,1211.36 1868.58,1211.36 1869.16,1211.36 1869.75,1211.36 1870.34,1211.36 1870.92,1211.36 1871.51,1211.36 1872.09,1211.36 1872.68,1211.36 1873.27,1211.36 1873.85,1211.36 1874.44,1211.36 1875.03,1211.36 1875.61,1211.36 1876.2,1211.36 1876.79,1211.36 1877.37,1211.36 1877.96,1211.36 1878.55,1211.36 1879.13,1211.36 1879.72,1211.36 1880.3,1211.36 1880.89,1211.36 1881.48,1211.36 1882.06,1211.36 1882.65,1211.36 1883.24,1211.36 1883.82,1211.36 1884.41,1211.36 1885,1211.36 1885.58,1211.36 1886.17,1211.36 1886.76,1211.36 1887.34,1211.36 1887.93,1211.36 1888.51,1211.36 1889.1,1211.36 1889.69,1211.36 1890.27,1211.36 1890.86,1211.36 1891.45,1211.36 1892.03,1211.36 1892.62,1211.36 1893.21,1211.36 1893.79,1211.36 1894.38,1211.36 1894.96,1211.36 1895.55,1211.36 1896.14,1211.36 1896.72,1211.36 1897.31,1211.36 1897.9,1211.36 1898.48,1211.36 1899.07,1211.36 1899.66,1211.36 1900.24,1211.36 1900.83,1211.36 1901.42,1211.36 1902,1211.36 1902.59,1211.36 1903.17,1211.36 1903.76,1211.36 1904.35,1211.36 1904.93,1211.36 1905.52,1211.36 1906.11,1211.36 1906.69,1211.36 1907.28,1211.36 1907.87,1211.36 1908.45,1211.36 1909.04,1211.36 1909.63,1211.36 1910.21,1211.36 1910.8,1211.36 1911.38,1211.36 1911.97,1211.36 1912.56,1211.36 1913.14,1211.36 1913.73,1211.36 1914.32,1211.36 1914.9,1211.36 1915.49,1211.36 1916.08,1211.36 1916.66,1211.36 1917.25,1211.36 1917.83,1211.36 1918.42,1211.36 1919.01,1211.36 1919.59,1211.36 1920.18,1211.36 1920.77,1211.36 1921.35,1211.36 1921.94,1211.36 1922.53,1211.36 1923.11,1211.36 1923.7,1211.36 1924.29,1211.36 1924.87,1211.36 1925.46,1211.36 1926.04,1211.36 1926.63,1211.36 1927.22,1211.36 1927.8,1211.36 1928.39,1211.36 1928.98,1211.36 1929.56,1211.36 1930.15,1211.36 1930.74,1211.36 1931.32,1211.36 1931.91,1211.36 1932.5,1211.36 1933.08,1211.36 1933.67,1211.36 1934.25,1211.36 1934.84,1211.36 1935.43,1211.36 1936.01,1211.36 1936.6,1211.36 1937.19,1211.36 1937.77,1211.36 1938.36,1211.36 1938.95,1211.36 1939.53,1211.36 1940.12,1211.36 1940.71,1211.36 1941.29,1211.36 1941.88,1211.36 1942.46,1211.36 1943.05,1211.36 1943.64,1211.36 1944.22,1211.36 1944.81,1211.36 1945.4,1211.36 1945.98,1211.36 1946.57,1211.36 1947.16,1211.36 1947.74,1211.36 1948.33,1211.36 1948.91,1211.36 1949.5,1211.36 1950.09,1211.36 1950.67,1211.36 1951.26,1211.36 1951.85,1211.36 1952.43,1211.36 1953.02,1211.36 1953.61,1211.36 1954.19,1211.36 1954.78,1211.36 1955.37,1211.36 1955.95,1211.36 1956.54,1211.36 1957.12,1211.36 1957.71,1211.36 1958.3,1211.36 1958.88,1211.36 1959.47,1211.36 1960.06,1211.36 1960.64,1211.36 1961.23,1211.36 1961.82,1211.36 1962.4,1211.36 1962.99,1211.36 1963.58,1211.36 1964.16,1211.36 1964.75,1211.36 1965.33,1211.36 1965.92,1211.36 1966.51,1211.36 1967.09,1211.36 1967.68,1211.36 1968.27,1211.36 1968.85,1211.36 1969.44,1211.36 1970.03,1211.36 1970.61,1211.36 1971.2,1211.36 1971.78,1211.36 1972.37,1211.36 1972.96,1211.36 1973.54,1211.36 1974.13,1211.36 1974.72,1211.36 1975.3,1211.36 1975.89,1211.36 1976.48,1211.36 1977.06,1211.36 1977.65,1211.36 1978.24,1211.36 1978.82,1211.36 1979.41,1211.36 1979.99,1211.36 1980.58,1211.36 1981.17,1211.36 1981.75,1211.36 1982.34,1211.36 1982.93,1211.36 1983.51,1211.36 1984.1,1211.36 1984.69,1211.36 1985.27,1211.36 1985.86,1211.36 1986.45,1211.36 1987.03,1211.36 1987.62,1211.36 1988.2,1211.36 1988.79,1211.36 1989.38,1211.36 1989.96,1211.36 1990.55,1211.36 1991.14,1211.36 1991.72,1211.36 1992.31,1211.36 1992.9,1211.36 1993.48,1211.36 1994.07,1211.36 1994.65,1211.36 1995.24,1211.36 1995.83,1211.36 1996.41,1211.36 1997,1211.36 1997.59,1211.36 1998.17,1211.36 1998.76,1211.36 1999.35,1211.36 1999.93,1211.36 2000.52,1211.36 2001.11,1211.36 2001.69,1211.36 2002.28,1211.36 2002.86,1211.36 2003.45,1211.36 2004.04,1211.36 2004.62,1211.36 2005.21,1211.36 2005.8,1211.36 2006.38,1211.36 2006.97,1211.36 2007.56,1211.36 2008.14,1211.36 2008.73,1211.36 2009.32,1211.36 2009.9,1211.36 2010.49,1211.36 2011.07,1211.36 2011.66,1211.36 2012.25,1211.36 2012.83,1211.36 2013.42,1211.36 2014.01,1211.36 2014.59,1211.36 2015.18,1211.36 2015.77,1211.36 2016.35,1211.36 2016.94,1211.36 2017.53,1211.36 2018.11,1211.36 2018.7,1211.36 2019.28,1211.36 2019.87,1211.36 2020.46,1211.36 2021.04,1211.36 2021.63,1211.36 2022.22,1211.36 2022.8,1211.36 2023.39,1211.36 2023.98,1211.36 2024.56,1211.36 2025.15,1211.36 2025.73,1211.36 2026.32,1211.36 2026.91,1211.36 2027.49,1211.36 2028.08,1211.36 2028.67,1211.36 2029.25,1211.36 2029.84,1211.36 2030.43,1211.36 2031.01,1211.36 2031.6,1211.36 2032.19,1211.36 2032.77,1211.36 2033.36,1211.36 2033.94,1211.36 2034.53,1211.36 2035.12,1211.36 2035.7,1211.36 2036.29,1211.36 2036.88,1211.36 2037.46,1211.36 2038.05,1211.36 2038.64,1211.36 2039.22,1211.36 2039.81,1211.36 2040.4,1211.36 2040.98,1211.36 2041.57,1211.36 2042.15,1211.36 2042.74,1211.36 2043.33,1211.36 2043.91,1211.36 2044.5,1211.36 2045.09,1211.36 2045.67,1211.36 2046.26,1211.36 2046.85,1211.36 2047.43,1211.36 2048.02,1211.36 2048.6,1211.36 2049.19,1211.36 2049.78,1211.36 2050.36,1211.36 2050.95,1211.36 2051.54,1211.36 2052.12,1211.36 2052.71,1211.36 2053.3,1211.36 2053.88,1211.36 2054.47,1211.36 2055.06,1211.36 2055.64,1211.36 2056.23,1211.36 2056.81,1211.36 2057.4,1211.36 2057.99,1211.36 2058.57,1211.36 2059.16,1211.36 2059.75,1211.36 2060.33,1211.36 2060.92,1211.36 2061.51,1211.36 2062.09,1211.36 2062.68,1211.36 2063.27,1211.36 2063.85,1211.36 2064.44,1211.36 2065.02,1211.36 2065.61,1211.36 2066.2,1211.36 2066.78,1211.36 2067.37,1211.36 2067.96,1211.36 2068.54,1211.36 2069.13,1211.36 2069.72,1211.36 2070.3,1211.36 2070.89,1211.36 2071.48,1211.36 2072.06,1211.36 2072.65,1211.36 2073.23,1211.36 2073.82,1211.36 2074.41,1211.36 2074.99,1211.36 2075.58,1211.36 2076.17,1211.36 2076.75,1211.36 2077.34,1211.36 2077.93,1211.36 2078.51,1211.36 2079.1,1211.36 2079.68,1211.36 2080.27,1211.36 2080.86,1211.36 2081.44,1211.36 2082.03,1211.36 2082.62,1211.36 2083.2,1211.36 2083.79,1211.36 2084.38,1211.36 2084.96,1211.36 2085.55,1211.36 2086.14,1211.36 2086.72,1211.36 2087.31,1211.36 2087.89,1211.36 2088.48,1211.36 2089.07,1211.36 2089.65,1211.36 2090.24,1211.36 2090.83,1211.36 2091.41,1211.36 2092,1211.36 2092.59,1211.36 2093.17,1211.36 2093.76,1211.36 2094.35,1211.36 2094.93,1211.36 2095.52,1211.36 2096.1,1211.36 2096.69,1211.36 2097.28,1211.36 2097.86,1211.36 2098.45,1211.36 2099.04,1211.36 2099.62,1211.36 2100.21,1211.36 2100.8,1211.36 2101.38,1211.36 2101.97,1211.36 2102.55,1211.36 2103.14,1211.36 2103.73,1211.36 2104.31,1211.36 2104.9,1211.36 2105.49,1211.36 2106.07,1211.36 2106.66,1211.36 2107.25,1211.36 2107.83,1211.36 2108.42,1211.36 2109.01,1211.36 2109.59,1211.36 2110.18,1211.36 2110.76,1211.36 2111.35,1211.36 2111.94,1211.36 2112.52,1211.36 2113.11,1211.36 2113.7,1211.36 2114.28,1211.36 2114.87,1211.36 2115.46,1211.36 2116.04,1211.36 2116.63,1211.36 2117.22,1211.36 2117.8,1211.36 2118.39,1211.36 2118.97,1211.36 2119.56,1211.36 2120.15,1211.36 2120.73,1211.36 2121.32,1211.36 2121.91,1211.36 2122.49,1211.36 2123.08,1211.36 2123.67,1211.36 2124.25,1211.36 2124.84,1211.36 2125.42,1211.36 2126.01,1211.36 2126.6,1211.36 2127.18,1211.36 2127.77,1211.36 2128.36,1211.36 2128.94,1211.36 2129.53,1211.36 2130.12,1211.36 2130.7,1211.36 2131.29,1211.36 2131.88,1211.36 2132.46,1211.36 2133.05,1211.36 2133.63,1211.36 2134.22,1211.36 2134.81,1211.36 2135.39,1211.36 2135.98,1211.36 2136.57,1211.36 2137.15,1211.36 2137.74,1211.36 2138.33,1211.36 2138.91,1211.36 2139.5,1211.36 2140.09,1211.36 2140.67,1211.36 2141.26,1211.36 2141.84,1211.36 2142.43,1211.36 2143.02,1211.36 2143.6,1211.36 2144.19,1211.36 2144.78,1211.36 2145.36,1211.36 2145.95,1211.36 2146.54,1211.36 2147.12,1211.36 2147.71,1211.36 2148.3,1211.36 2148.88,1211.36 2149.47,1211.36 2150.05,1211.36 2150.64,1211.36 2151.23,1211.36 2151.81,1211.36 2152.4,1211.36 2152.99,1211.36 2153.57,1211.36 2154.16,1211.36 2154.75,1211.36 2155.33,1211.36 2155.92,1211.36 2156.5,1211.36 2157.09,1211.36 2157.68,1211.36 2158.26,1211.36 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1563.53,1196.04 1399.58,899.083 \"/>\n<polyline clip-path=\"url(#clip012)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1226.17 985.439,1196.04 2158.26,1196.04 2158.26,1226.17 985.439,1226.17 \"/>\n<path clip-path=\"url(#clip010)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip010)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip010)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip010)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip010)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip010)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip013\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip010)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip010)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip010)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip010)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip013)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-11791.5 168.266,-12195.6 168.825,-12550.4 169.384,-12859.3 169.943,-13125.1 170.503,-13350.8 171.062,-13539 171.621,-13692.4 172.18,-13179 172.74,-13288.5 173.299,-13360.7 173.858,-13415 174.417,-13444.4 174.977,-13450.8 175.536,-13435.8 176.095,-13013.2 176.655,-12261.8 177.214,-11565.8 177.773,-11498.4 178.332,-11141.4 178.892,-11068.7 179.451,-10978.5 180.01,-10867.2 180.569,-10751.4 181.129,-10634.1 181.688,-10130.7 182.247,-9986.56 182.806,-9837.44 183.366,-9683.27 183.925,-9522.88 184.484,-9219.22 185.043,-8655.93 185.603,-8475.18 186.162,-7955.99 186.721,-7688.74 187.28,-7541.94 187.84,-7199.48 188.399,-7033.58 188.958,-6876.9 189.517,-6547 190.077,-6321.99 190.636,-6182.74 191.195,-6042.5 191.754,-5838.65 192.314,-5701.31 192.873,-5570.47 193.432,-5440.82 193.991,-5181.05 194.551,-5052.92 195.11,-4932.24 195.669,-4750.36 196.228,-4629.71 196.788,-4511.56 197.347,-4292.49 197.906,-4129.27 198.465,-3926.32 199.025,-3731.69 199.584,-3629.53 200.143,-3529.37 200.702,-3350.98 201.262,-3215.88 201.821,-3047.06 202.38,-2885.08 202.939,-2766.98 203.499,-2689.53 204.058,-2578.52 204.617,-2467.89 205.176,-2323.73 205.736,-2221.75 206.295,-2052.7 206.854,-1986.93 207.413,-1827.47 207.973,-1704.51 208.532,-1641.49 209.091,-1551.64 209.65,-1497.06 210.21,-1411.34 210.769,-1354.67 211.328,-1214.22 211.887,-1136.87 212.447,-1084 213.006,-1005.69 213.565,-904.572 214.124,-732.485 214.684,-667.817 215.243,-576.296 215.802,-490.059 216.361,-453.516 216.921,-370.176 217.48,-316.347 218.039,-215.954 218.598,-187.117 219.158,-135.368 219.717,-105.911 220.276,-36.4524 220.835,13.9016 221.395,105.292 221.954,171.699 222.513,212.816 223.072,276.137 223.632,335.503 224.191,347.721 224.75,363.294 225.309,401.877 225.869,457.76 226.428,469.745 226.987,460.995 227.546,473.507 228.106,486.515 228.665,519.165 229.224,532.321 229.783,589.309 230.343,678.89 230.902,683.795 231.461,706.814 232.02,768.753 232.58,806.876 233.139,825.933 233.698,864.137 234.257,879.34 234.817,933.952 235.376,946.831 235.935,943.533 236.494,936.671 237.054,911.786 237.613,941.67 238.172,952.213 238.731,930.115 239.291,957.861 239.85,991.48 240.409,985.592 240.968,981.346 241.528,1010.4 242.087,987.301 242.646,1019.84 243.205,1033.5 243.765,1045.15 244.324,1072.12 244.883,1098.8 245.442,1127 246.002,1118.85 246.561,1124.29 247.12,1093.77 247.679,1082.53 248.239,1072.32 248.798,1081.69 249.357,1072.53 249.916,1097.56 250.476,1124.43 251.035,1154.67 251.594,1158.82 252.153,1165.01 252.713,1172.3 253.272,1175.34 253.831,1201.54 254.39,1224.46 254.95,1225.5 255.509,1230.84 256.068,1252.27 256.627,1224.51 257.187,1209.2 257.746,1229.36 258.305,1179.53 258.864,1202.28 259.424,1222.43 259.983,1226.09 260.542,1194.4 261.101,1143.5 261.661,1152.84 262.22,1109.94 262.779,1115.89 263.338,1089.58 263.898,1133.64 264.457,1159.25 265.016,1117.27 265.575,1141.09 266.135,1133.67 266.694,1094.6 267.253,1089.66 267.812,1117.94 268.372,1093.68 268.931,1085.46 269.49,1064.13 270.049,1080.63 270.609,1074.92 271.168,1119.59 271.727,1095.59 272.286,1086.74 272.846,1098.31 273.405,1137.5 273.964,1129.42 274.523,1139.52 275.083,1168.31 275.642,1158.19 276.201,1134.1 276.76,1110.36 277.32,1104.21 277.879,1100.13 278.438,1093.53 278.997,1071.24 279.557,1066.1 280.116,1077.92 280.675,1068.54 281.234,1059.35 281.794,1072.56 282.353,1081.15 282.912,1077.12 283.471,1055.91 284.031,1068.3 284.59,1095.7 285.149,1119.2 285.708,1129.56 286.268,1137.17 286.827,1161.07 287.386,1162.18 287.945,1135.24 288.505,1128.73 289.064,1105.01 289.623,1082.16 290.182,1062.5 290.742,1088.77 291.301,1086.2 291.86,1094.03 292.419,1087 292.979,1100.04 293.538,1093.18 294.097,1152.78 294.656,1126.07 295.216,1150.51 295.775,1154.46 296.334,1126.28 296.893,1117.97 297.453,1091.87 298.012,1083.16 298.571,1072.47 299.13,1067.52 299.69,1059.77 300.249,1054.57 300.808,1032.82 301.368,1044.52 301.927,1049.98 302.486,1040.09 303.045,1036.39 303.605,1046.45 304.164,1053.59 304.723,1014.49 305.282,1024.67 305.842,1018.22 306.401,1028.74 306.96,1055.65 307.519,1066.36 308.079,1044.74 308.638,1055.4 309.197,1065.86 309.756,1079.89 310.316,1072.34 310.875,1096.04 311.434,1120.7 311.993,1095.22 312.553,1069.25 313.112,1076.53 313.671,1114.58 314.23,1074.63 314.79,1080.72 315.349,1072.21 315.908,1031.73 316.467,1023.62 317.027,1036.31 317.586,1032.06 318.145,1022.38 318.704,997.795 319.264,995.486 319.823,987.739 320.382,967.86 320.941,980.009 321.501,992.47 322.06,987.511 322.619,967.269 323.178,977.295 323.738,973.633 324.297,987.603 324.856,1017.81 325.415,1010.59 325.975,1022.42 326.534,985.174 327.093,978.481 327.652,974.443 328.212,1015 328.771,1025.06 329.33,1000.18 329.889,994.127 330.449,943.211 331.008,956.675 331.567,954.84 332.126,950.526 332.686,962.505 333.245,938.718 333.804,965.77 334.363,1009.12 334.923,1004.55 335.482,1014.58 336.041,1024.61 336.6,1001.8 337.16,1024.61 337.719,1018.51 338.278,1041.43 338.837,1030.87 339.397,1065.82 339.956,1056.23 340.515,1045.67 341.074,1051.08 341.634,1044.4 342.193,1047.7 342.752,1087.93 343.311,1055.62 343.871,1043.86 344.43,1051.28 344.989,1023.62 345.548,1044.36 346.108,1065.32 346.667,1070.15 347.226,1006.16 347.785,966.067 348.345,927.045 348.904,926.062 349.463,939.447 350.022,934.375 350.582,928.543 351.141,911.499 351.7,890.554 352.259,872.69 352.819,876.8 353.378,909.114 353.937,919.236 354.496,915.521 355.056,927.152 355.615,906.914 356.174,917.824 356.733,898.401 357.293,882.14 357.852,917.588 358.411,913.214 358.97,926.644 359.53,906.857 360.089,889.179 360.648,904.681 361.207,932.878 361.767,916.684 362.326,892.909 362.885,922.187 363.444,965.369 364.004,942.189 364.563,967.982 365.122,1010.12 365.681,1003.34 366.241,980.182 366.8,952.438 367.359,963.157 367.918,936.509 368.478,916.522 369.037,912.57 369.596,892.001 370.155,916.835 370.715,906.585 371.274,917.856 371.833,945.379 372.392,938.186 372.952,896.927 373.511,894.571 374.07,903.311 374.629,863.726 375.189,846.094 375.748,864.122 376.307,859.838 376.866,860.964 377.426,843.022 377.985,874.272 378.544,872.563 379.103,868.031 379.663,895.579 380.222,887.369 380.781,932.5 381.34,923.567 381.9,902.839 382.459,899.667 383.018,880.139 383.577,856.056 384.137,856.694 384.696,852.839 385.255,834.877 385.814,865.961 386.374,849.775 386.933,846.934 387.492,845.103 388.051,875.863 388.611,873.65 389.17,871.366 389.729,864.303 390.288,870.608 390.848,866.68 391.407,845.952 391.966,829.906 392.525,859.15 393.085,900.155 393.644,907.766 394.203,901.307 394.762,894.774 395.322,910.226 395.881,918.734 396.44,896.493 396.999,876.801 397.559,876.24 398.118,903.641 398.677,868.693 399.236,864.549 399.796,876.538 400.355,855.551 400.914,801.405 401.473,779.156 402.033,792.63 402.592,809.605 403.151,808.77 403.71,804.734 404.27,785.718 404.829,769.411 405.388,784.551 405.947,796.239 406.507,797.06 407.066,814.337 407.625,783.753 408.184,811.974 408.744,827.456 409.303,841.069 409.862,855.635 410.421,850.553 410.981,830.979 411.54,825.635 412.099,806.638 412.658,803.009 413.218,783.536 413.777,784.095 414.336,783.11 414.895,781.603 415.455,765.236 416.014,782.973 416.573,767.904 417.132,766.196 417.692,770.107 418.251,737.269 418.81,772.725 419.369,789.198 419.929,789.787 420.488,771.8 421.047,806.984 421.606,786.697 422.166,786.138 422.725,784.843 423.284,783.695 423.843,784.157 424.403,779.574 424.962,777.427 425.521,779.299 426.08,778.993 426.64,841.184 427.199,839.339 427.758,842.519 428.318,840.165 428.877,785.365 429.436,780.677 429.995,780.519 430.555,780.405 431.114,764.616 431.673,748.839 432.232,752.902 432.792,754.853 433.351,789.058 433.91,791.085 434.469,808.141 435.029,804.818 435.588,803.485 436.147,767.952 436.706,751.615 437.266,769.658 437.825,767.614 438.384,752.204 438.943,735.127 439.503,738.68 440.062,756.141 440.621,770.504 441.18,734.108 441.74,738.864 442.299,740.834 442.858,772.735 443.417,771.047 443.977,751.607 444.536,766.504 445.095,764.977 445.654,798.28 446.214,813.303 446.773,812.58 447.332,840.311 447.891,836.314 448.451,814.476 449.01,812.134 449.569,826.956 450.128,824.431 450.688,834.526 451.247,828.686 451.806,810.538 452.365,823.235 452.925,834.768 453.484,846.961 454.043,840.418 454.602,848.581 455.162,848.801 455.721,843.287 456.28,805.11 456.839,838.074 457.399,837.204 457.958,817.222 458.517,815.075 459.076,845.182 459.636,859.487 460.195,839.186 460.754,851.477 461.313,813.144 461.873,891.932 462.432,866.971 462.991,907.813 463.55,916.911 464.11,910.279 464.669,869.311 465.228,846.139 465.787,793.021 466.347,756.607 466.906,741.005 467.465,723.707 468.024,727.946 468.584,726.257 469.143,760.661 469.702,742.616 470.261,740.422 470.821,709.544 471.38,728.146 471.939,745.54 472.498,761.552 473.058,760.596 473.617,776.148 474.176,792.902 474.735,773.812 475.295,785.727 475.854,795.294 476.413,806.788 476.972,805.26 477.532,801.793 478.091,799.833 478.65,812.506 479.209,809.923 479.769,793.572 480.328,789.099 480.887,754.779 481.446,771.058 482.006,753.613 482.565,772.73 483.124,790.036 483.683,770.701 484.243,767.867 484.802,736.206 485.361,702.537 485.92,704.036 486.48,706.742 487.039,693.367 487.598,662.512 488.157,651.071 488.717,656.852 489.276,632.065 489.835,622.39 490.394,626.747 490.954,634.791 491.513,670.611 492.072,706.987 492.631,724.165 493.191,725.229 493.75,741.172 494.309,739.721 494.868,724.357 495.428,726.461 495.987,741.662 496.546,757.394 497.105,757.185 497.665,770.482 498.224,736.433 498.783,740.364 499.342,740.088 499.902,771.17 500.461,772.846 501.02,787.774 501.579,785.526 502.139,782.011 502.698,777.574 503.257,775.766 503.816,742.746 504.376,744.866 504.935,744.826 505.494,762.211 506.053,776.948 506.613,761.946 507.172,760.439 507.731,759.066 508.29,737.285 508.85,740.549 509.409,740.075 509.968,723.662 510.527,710.403 511.087,679.862 511.646,688.315 512.205,690.843 512.764,692.624 513.324,709.022 513.883,692.473 514.442,712.184 515.001,681.768 515.561,686.858 516.12,689.211 516.679,692.904 517.238,697.137 517.798,700.098 518.357,719.442 518.916,735.486 519.475,767.78 520.035,765.027 520.594,763.093 521.153,792.186 521.712,756.198 522.272,755.268 522.831,754.218 523.39,736.363 523.949,755.302 524.509,738.791 525.068,725.569 525.627,725.354 526.186,721.883 526.746,709.472 527.305,727.507 527.864,728.982 528.423,728.357 528.983,707.465 529.542,709.177 530.101,676.223 530.66,695.592 531.22,677.825 531.779,681.586 532.338,684.352 532.897,670.252 533.457,687.661 534.016,705.209 534.575,705.487 535.134,721.723 535.694,734.707 536.253,765.012 536.812,776.094 537.371,772.09 537.931,769.705 538.49,750.011 539.049,748.551 539.608,731.326 540.168,715.511 540.727,733.716 541.286,733.969 541.845,748.837 542.405,748.768 542.964,764.33 543.523,764.773 544.082,764.298 544.642,777.603 545.201,772.136 545.76,754.032 546.319,738.015 546.879,703.467 547.438,733.074 547.997,733.303 548.556,732.551 549.116,747.858 549.675,728.758 550.234,728.626 550.793,714.099 551.353,762.801 551.912,759.916 552.471,806.688 553.031,804.489 553.59,815.981 554.149,810.541 554.708,775.309 555.268,787.925 555.827,768.023 556.386,781.329 556.945,760.89 557.505,759.879 558.064,775.716 558.623,772.903 559.182,754.214 559.742,768.158 560.301,730.21 560.86,742.397 561.419,706.788 561.979,755.303 562.538,803.983 563.097,784.739 563.656,782.293 564.216,780.385 564.775,789.611 565.334,784.565 565.893,750.759 566.453,734.887 567.012,717.971 567.571,684.088 568.13,668.683 568.69,653.928 569.249,660.4 569.808,676.605 570.367,628.554 570.927,648.505 571.486,655.939 572.045,674.883 572.604,664.617 573.164,685.385 573.723,719.323 574.282,723.411 574.841,726.832 575.401,742.351 575.96,790.23 576.519,783.404 577.078,765.13 577.638,794.832 578.197,774.335 578.756,769.661 579.315,751.877 579.875,735.168 580.434,767.248 580.993,780.343 581.552,789.676 582.112,800.942 582.671,831.194 583.23,826.269 583.789,820.551 584.349,819.395 584.908,830.961 585.467,793.912 586.026,790.341 586.586,817.385 587.145,794.099 587.704,791.059 588.263,787.527 588.823,802.4 589.382,764.228 589.941,741.457 590.5,742.83 591.06,725.639 591.619,708.199 592.178,670.108 592.737,689.627 593.297,660.583 593.856,648.814 594.415,668.141 594.974,683.743 595.534,684.667 596.093,669.984 596.652,657.973 597.211,677.686 597.771,726.203 598.33,724.816 598.889,741.577 599.448,727.155 600.008,805.322 600.567,782.333 601.126,776.742 601.685,754.645 602.245,737.697 602.804,720.77 603.363,703.551 603.922,706.792 604.482,708.076 605.041,707.441 605.6,676.765 606.159,677.905 606.719,662.668 607.278,650.555 607.837,620.195 608.396,642.412 608.956,644.917 609.515,632.856 610.074,683.886 610.633,684.501 611.193,705.996 611.752,672.402 612.311,673.483 612.87,674.614 613.43,693.817 613.989,675.857 614.548,662.142 615.107,695.528 615.667,697.09 616.226,695.552 616.785,682.487 617.344,665.916 617.904,681.23 618.463,680.259 619.022,683.822 619.581,669.746 620.141,639.654 620.7,612.803 621.259,600.518 621.818,640.646 622.378,661.081 622.937,681.638 623.496,684.965 624.055,703.008 624.615,701.83 625.174,705.09 625.733,655.299 626.292,657.566 626.852,645.86 627.411,666.085 627.97,670.305 628.529,691.174 629.089,690.086 629.648,676.583 630.207,660.873 630.766,681.075 631.326,664.219 631.885,681.72 632.444,687.228 633.003,720.972 633.563,739.378 634.122,702.803 634.681,721.784 635.24,705.022 635.8,718.138 636.359,721.541 636.918,771.484 637.477,749.608 638.037,760.065 638.596,754.087 639.155,784.194 639.714,779.226 640.274,792.46 640.833,754.137 641.392,764.265 641.951,727.478 642.511,691.483 643.07,727.221 643.629,742.406 644.188,743.351 644.748,757.993 645.307,738.758 645.866,687.741 646.425,655.433 646.985,692.121 647.544,674.976 648.103,676.468 648.662,660.49 649.222,694.605 649.781,694.561 650.34,711.392 650.899,710.45 651.459,708.911 652.018,695.327 652.577,712.349 653.136,712.076 653.696,677.586 654.255,680.664 654.814,716.796 655.373,712.571 655.933,726.046 656.492,754.21 657.051,734.126 657.61,728.693 658.17,728.352 658.729,711.162 659.288,695.024 659.847,711.173 660.407,693.676 660.966,710.78 661.525,681.095 662.084,683.952 662.644,702.475 663.203,684.641 663.762,638.502 664.321,624.627 664.881,659.477 665.44,661.357 665.999,629.504 666.558,601.275 667.118,638.07 667.677,640.35 668.236,659.59 668.795,643.259 669.355,678.508 669.914,697.959 670.473,664.827 671.032,647.693 671.592,649.837 672.151,701.604 672.71,697.159 673.269,727.96 673.829,690.472 674.388,693.635 674.947,693.252 675.506,715.776 676.066,746.944 676.625,742.681 677.184,707.5 677.743,705.008 678.303,671.809 678.862,706.463 679.421,675.724 679.981,661.82 680.54,681.77 681.099,682.135 681.658,678.252 682.218,647.406 682.777,649.988 683.336,635.634 683.895,624.397 684.455,647.808 685.014,665.068 685.573,666.396 686.132,666.601 686.692,670.798 687.251,672.27 687.81,704.945 688.369,702.71 688.929,705.304 689.488,720.768 690.047,720.68 690.606,719.632 691.166,735.151 691.725,734.495 692.284,732.282 692.843,747.812 693.403,780.318 693.962,762.393 694.521,744.098 695.08,753.908 695.64,767.422 696.199,764.438 696.758,762.037 697.317,792.468 697.877,755.431 698.436,742.371 698.995,739.693 699.554,736.331 700.114,749.1 700.673,730.207 701.232,730.296 701.791,711.031 702.351,725.104 702.91,707.111 703.469,706.99 704.028,709.208 704.588,693.095 705.147,677.169 705.706,675.482 706.265,708.399 706.825,739.836 707.384,769.147 707.943,764.485 708.502,744.267 709.062,772.418 709.621,753.022 710.18,732.482 710.739,761.031 711.299,741.611 711.858,738.376 712.417,704.048 712.976,702.623 713.536,686.367 714.095,671.413 714.654,673.09 715.213,671.226 715.773,685.842 716.332,688.402 716.891,707.588 717.45,706.669 718.01,690.479 718.569,657.668 719.128,691.957 719.687,661.004 720.247,661.449 720.806,695.33 721.365,710.834 721.924,694.882 722.484,680.805 723.043,682.475 723.602,635.635 724.161,638.273 724.721,639.44 725.28,659.647 725.839,594.822 726.398,584.946 726.958,592.385 727.517,599.338 728.076,686.373 728.635,685.755 729.195,699.651 729.754,696.632 730.313,711.015 730.872,725.225 731.432,705.442 731.991,719.523 732.55,699.988 733.109,688.103 733.669,690.193 734.228,690.62 734.787,692.692 735.346,644.84 735.906,645.964 736.465,712.17 737.024,691.147 737.583,723.616 738.143,708.194 738.702,692.125 739.261,689.996 739.82,672.136 740.38,656.813 740.939,627.407 741.498,646.03 742.057,663.337 742.617,715.081 743.176,696.629 743.735,695.967 744.294,680.718 744.854,700.469 745.413,701.323 745.972,700.416 746.531,717.08 747.091,714.718 747.65,698.97 748.209,699.464 748.768,678.122 749.328,711.811 749.887,724.011 750.446,725.048 751.005,756.252 751.565,786.087 752.124,781.045 752.683,791.059 753.242,816.968 753.802,808.871 754.361,801.141 754.92,810.588 755.479,758.736 756.039,790.244 756.598,830.474 757.157,851.488 757.716,843.885 758.276,854.817 758.835,816.709 759.394,812.319 759.953,805.765 760.513,796.457 761.072,808.166 761.631,850.587 762.19,827.47 762.75,818.655 763.309,815.358 763.868,795.582 764.427,773.496 764.987,785.8 765.546,802.311 766.105,813.235 766.664,788.47 767.224,771.021 767.783,751.872 768.342,728.904 768.901,770.932 769.461,713.806 770.02,693.642 770.579,642.608 771.138,630.305 771.698,633.863 772.257,686.236 772.816,701.765 773.375,718.033 773.935,701.008 774.494,699.121 775.053,700.307 775.612,710.925 776.172,723.264 776.731,736.913 777.29,732.904 777.849,749.631 778.409,779.759 778.968,792.833 779.527,788.137 780.086,798.185 780.646,791.162 781.205,740.008 781.764,685.936 782.323,672.276 782.883,654.19 783.442,656.786 784.001,674.39 784.56,661.154 785.12,647.811 785.679,632.086 786.238,623.889 786.797,628.063 787.357,582.35 787.916,586.517 788.475,593.714 789.034,565.553 789.594,573.141 790.153,594.912 790.712,619.498 791.271,591.968 791.831,582.1 792.39,590.603 792.949,577.858 793.508,581.322 794.068,588.331 794.627,593.176 795.186,612.582 795.745,615.433 796.305,635.29 796.864,672.029 797.423,692.345 797.982,708.191 798.542,690.224 799.101,691.082 799.66,724.521 800.219,756.214 800.779,771.931 801.338,754.678 801.897,767.437 802.456,749.453 803.016,779.458 803.575,761.586 804.134,758.61 804.693,755.09 805.253,781.981 805.812,762.98 806.371,760.503 806.931,769.291 807.49,765.938 808.049,794.95 808.608,822.203 809.168,802.124 809.727,761.375 810.286,753.593 810.845,778.726 811.405,790.933 811.964,785.37 812.523,747.212 813.082,728.116 813.642,722.917 814.201,768.499 814.76,747.842 815.319,763.916 815.879,761.365 816.438,775.625 816.997,772.234 817.556,735.78 818.116,714.013 818.675,728.095 819.234,775.092 819.793,739.994 820.353,706.052 820.912,724.229 821.471,706.576 822.03,688.819 822.59,686.711 823.149,686.166 823.708,700.874 824.267,696.055 824.827,692.777 825.386,692.471 825.945,726.161 826.504,739.046 827.064,718.732 827.623,766.338 828.182,796.489 828.741,805.122 829.301,766.978 829.86,761.563 830.419,787.821 830.978,731.608 831.538,745.074 832.097,773.389 832.656,783.693 833.215,791.956 833.775,770.919 834.334,786.663 834.893,797.443 835.452,805.734 836.012,782.653 836.571,714.998 837.13,682.241 837.689,653.706 838.249,666.07 838.808,712.752 839.367,663.212 839.926,615.73 840.486,618.512 841.045,605.386 841.604,611.688 842.163,618.093 842.723,636.081 843.282,656.585 843.841,642.476 844.4,580.961 844.96,584.034 845.519,616.983 846.078,634.628 846.637,637.911 847.197,638.645 847.756,656.737 848.315,668.998 848.874,675.088 849.434,694.707 849.993,683.035 850.552,652.169 851.111,685.578 851.671,638.023 852.23,657.454 852.789,628.206 853.348,612.648 853.908,633.469 854.467,669.758 855.026,686.146 855.585,685.717 856.145,735.043 856.704,730.143 857.263,726.02 857.822,724.986 858.382,740.204 858.941,686.552 859.5,684.188 860.059,668.496 860.619,655.1 861.178,685.985 861.737,670.222 862.296,687.786 862.856,689.937 863.415,690.066 863.974,657.902 864.533,677.238 865.093,678.999 865.652,677.294 866.211,647.167 866.77,651.238 867.33,635.755 867.889,637.73 868.448,659.565 869.007,644.055 869.567,628.401 870.126,616.465 870.685,554.68 871.244,546.163 871.804,522.012 872.363,563.326 872.922,569.32 873.481,578.978 874.041,586.666 874.6,610.661 875.159,631.297 875.718,651.816 876.278,686.262 876.837,669.289 877.396,670.986 877.955,673.799 878.515,708.727 879.074,674.608 879.633,708.032 880.192,707.801 880.752,723.019 881.311,736.593 881.87,737.708 882.429,752.097 882.989,748.503 883.548,749.75 884.107,763.782 884.666,773.827 885.226,755.697 885.785,754.39 886.344,719.039 886.903,683.925 887.463,716.371 888.022,697.861 888.581,697.393 889.14,696.211 889.7,727.815 890.259,708.044 890.818,739.078 891.377,754.807 891.937,739.417 892.496,725.63 893.055,743.092 893.614,770.661 894.174,765.87 894.733,788.895 895.292,766.795 895.851,793.367 896.411,773.303 896.97,785.819 897.529,765.693 898.088,764.044 898.648,775.411 899.207,771.901 899.766,766.161 900.325,733.564 900.885,715.828 901.444,699.334 902.003,697.25 902.562,695.927 903.122,693.763 903.681,708.477 904.24,676.673 904.799,664.037 905.359,615.172 905.918,681.915 906.477,678.811 907.036,664.757 907.596,650.758 908.155,653.248 908.714,704.844 909.273,687.62 909.833,701.847 910.392,699.992 910.951,697.313 911.51,711.599 912.07,694.344 912.629,664.131 913.188,644.384 913.747,663.176 914.307,667.905 914.866,653.775 915.425,653.343 915.984,651.19 916.544,668.532 917.103,655.278 917.662,657.19 918.221,613.325 918.781,649.631 919.34,603.602 919.899,609.178 920.458,597.326 921.018,584.902 921.577,589.974 922.136,614.113 922.695,617.367 923.255,606.546 923.814,594.22 924.373,596.218 924.932,615.082 925.492,601.759 926.051,639.183 926.61,643.151 927.169,612.257 927.729,629.205 928.288,633.966 928.847,647.865 929.406,649.481 929.966,670.36 930.525,669.713 931.084,638.483 931.644,676.931 932.203,710.96 932.762,743.627 933.321,741.022 933.881,739.033 934.44,733.425 934.999,716.867 935.558,730.453 936.118,710.574 936.677,695.345 937.236,677.799 937.795,709.563 938.355,676.457 938.914,671.935 939.473,688.514 940.032,703.957 940.592,701.226 941.151,715.861 941.71,749.113 942.269,760.81 942.829,787.15 943.388,782.433 943.947,759.836 944.506,737.217 945.066,714.922 945.625,746.798 946.184,747.068 946.743,776.09 947.303,758.4 947.862,721.68 948.421,735.927 948.98,699.656 949.54,730.486 950.099,694.441 950.658,679.49 951.217,682.135 951.777,666.866 952.336,684.653 952.895,713.421 953.454,679.463 954.014,661.172 954.573,710.984 955.132,691.084 955.691,640.93 956.251,627.357 956.81,597.756 957.369,617.675 957.928,672.552 958.488,624.862 959.047,639.257 959.606,691.105 960.165,678.154 960.725,664.143 961.284,665.763 961.843,665.271 962.402,666.822 962.962,684.619 963.521,697.711 964.08,680.838 964.639,665.125 965.199,698.843 965.758,684.747 966.317,668.31 966.876,671.486 967.436,686.964 967.995,671.041 968.554,685.257 969.113,704.902 969.673,703.868 970.232,672.743 970.791,693.373 971.35,693.19 971.91,708.677 972.469,707.623 973.028,725.743 973.587,726.338 974.147,756.487 974.706,787.032 975.265,798.849 975.824,773.271 976.384,749.121 976.943,729.836 977.502,730.673 978.061,714.007 978.621,745.292 979.18,724.746 979.739,724.079 980.298,705.893 980.858,734.977 981.417,713.74 981.976,709.148 982.535,706.698 983.095,710.666 983.654,693.835 984.213,672.923 984.772,640.262 985.332,672.912 985.891,705.285 986.45,688.56 987.009,691.332 987.569,673.205 988.128,654.743 988.687,607.543 989.246,612.138 989.806,631.596 990.365,618.382 990.924,655.261 991.483,624.194 992.043,644.361 992.602,663.479 993.161,666.171 993.72,680.953 994.28,700.176 994.839,730.379 995.398,744.946 995.957,726.457 996.517,695.273 997.076,710.447 997.635,693.349 998.194,726.096 998.754,738.729 999.313,690.401 999.872,673.565 1000.43,673.113 1000.99,693.553 1001.55,742.297 1002.11,721.762 1002.67,703.431 1003.23,688.968 1003.79,706.201 1004.35,703.789 1004.91,719.08 1005.46,731.625 1006.02,745.141 1006.58,741.887 1007.14,755.727 1007.7,736.751 1008.26,731.795 1008.82,749.557 1009.38,761.279 1009.94,758.685 1010.5,758.061 1011.06,752.539 1011.62,763.998 1012.18,726.556 1012.73,708.84 1013.29,721.937 1013.85,734.412 1014.41,750.941 1014.97,731.345 1015.53,681.177 1016.09,681.634 1016.65,679.396 1017.21,696.527 1017.77,698.119 1018.33,663.202 1018.89,681.492 1019.45,682.64 1020.01,715.733 1020.56,713.02 1021.12,708.635 1021.68,722.716 1022.24,690.51 1022.8,689.639 1023.36,703.487 1023.92,686.919 1024.48,702.595 1025.04,733.089 1025.6,760.52 1026.16,739.21 1026.72,751.743 1027.28,752.936 1027.83,735.352 1028.39,747.414 1028.95,730.934 1029.51,727.423 1030.07,708.446 1030.63,722.142 1031.19,719.365 1031.75,701.936 1032.31,666.482 1032.87,650.343 1033.43,654.486 1033.99,625.487 1034.55,658.48 1035.1,628.316 1035.66,600.249 1036.22,621.147 1036.78,641.19 1037.34,642.314 1037.9,645.626 1038.46,663.348 1039.02,666.067 1039.58,667.956 1040.14,651.634 1040.7,668.714 1041.26,653.319 1041.82,670.389 1042.38,637.378 1042.93,623.392 1043.49,644.939 1044.05,634.506 1044.61,633.572 1045.17,638.508 1045.73,626.418 1046.29,613.95 1046.85,668.082 1047.41,701.798 1047.97,670.876 1048.53,653.877 1049.09,643.465 1049.65,593.74 1050.2,578.989 1050.76,566.024 1051.32,557.057 1051.88,560.252 1052.44,582.247 1053,573.297 1053.56,561.303 1054.12,571.226 1054.68,546.079 1055.24,553.167 1055.8,558.036 1056.36,563.694 1056.92,533.758 1057.48,547.213 1058.03,553.056 1058.59,574.447 1059.15,578.617 1059.71,569.127 1060.27,611.182 1060.83,630.102 1061.39,633.356 1061.95,648.533 1062.51,632.927 1063.07,618.966 1063.63,636.127 1064.19,640.976 1064.75,660.281 1065.3,696.333 1065.86,728.844 1066.42,709.33 1066.98,722.991 1067.54,689.764 1068.1,675.858 1068.66,724.646 1069.22,754.459 1069.78,783.694 1070.34,763.178 1070.9,760.223 1071.46,755.525 1072.02,764.207 1072.57,742.992 1073.13,741.343 1073.69,768.483 1074.25,720.306 1074.81,703.627 1075.37,687.851 1075.93,657.471 1076.49,676.021 1077.05,660.675 1077.61,663.208 1078.17,645.341 1078.73,664.969 1079.29,651.306 1079.85,633.665 1080.4,589.828 1080.96,614.414 1081.52,618.466 1082.08,605.612 1082.64,593.686 1083.2,613.867 1083.76,602.617 1084.32,605.999 1084.88,563.26 1085.44,570.682 1086,576.765 1086.56,582.479 1087.12,572.052 1087.67,597.464 1088.23,648.031 1088.79,617.022 1089.35,603.922 1089.91,588.649 1090.47,592.886 1091.03,630.208 1091.59,618.403 1092.15,605.21 1092.71,614.04 1093.27,630.728 1093.83,600.668 1094.39,603.132 1094.94,578.578 1095.5,566.591 1096.06,556.745 1096.62,559.886 1097.18,601.036 1097.74,623.194 1098.3,609.097 1098.86,646.653 1099.42,634.759 1099.98,634.614 1100.54,621.038 1101.1,608.766 1101.66,630.747 1102.22,681.327 1102.77,650.844 1103.33,668.82 1103.89,655.899 1104.45,673.415 1105.01,674.835 1105.57,657.503 1106.13,676.137 1106.69,711.709 1107.25,728.034 1107.81,728.296 1108.37,775.47 1108.93,753.404 1109.49,718.876 1110.04,767.076 1110.6,749.239 1111.16,715.548 1111.72,744.803 1112.28,740.67 1112.84,756.068 1113.4,769.954 1113.96,780.571 1114.52,790.774 1115.08,815.048 1115.64,809.442 1116.2,786.898 1116.76,782.732 1117.31,777.429 1117.87,836.593 1118.43,815.49 1118.99,759.521 1119.55,772.442 1120.11,783.695 1120.67,792.634 1121.23,753.009 1121.79,749.321 1122.35,777.539 1122.91,771.968 1123.47,801.73 1124.03,793.711 1124.59,788.662 1125.14,781.845 1125.7,778.58 1126.26,790.071 1126.82,831.105 1127.38,822.739 1127.94,833.162 1128.5,812.4 1129.06,832.001 1129.62,855.463 1130.18,862.182 1130.74,819.258 1131.3,809.268 1131.86,832.596 1132.41,808.719 1132.97,784.756 1133.53,762.849 1134.09,808.682 1134.65,821.714 1135.21,813.608 1135.77,772.041 1136.33,779.732 1136.89,760.366 1137.45,752.308 1138.01,714.892 1138.57,698.706 1139.13,697.738 1139.68,680.062 1140.24,677.922 1140.8,694.613 1141.36,692.443 1141.92,704.862 1142.48,719.49 1143.04,731.782 1143.6,726.787 1144.16,707.849 1144.72,673.369 1145.28,658.31 1145.84,643.066 1146.4,644.188 1146.96,649.162 1147.51,652.458 1148.07,672.254 1148.63,657.199 1149.19,646.517 1149.75,650.957 1150.31,656.546 1150.87,627.793 1151.43,631.14 1151.99,637.411 1152.55,656.725 1153.11,692.269 1153.67,642.891 1154.23,662.008 1154.78,664.519 1155.34,637.498 1155.9,641.181 1156.46,643.885 1157.02,660.817 1157.58,662.388 1158.14,679.736 1158.7,677.131 1159.26,673.593 1159.82,658.303 1160.38,658.678 1160.94,657.235 1161.5,638.509 1162.05,655.683 1162.61,659.162 1163.17,641.86 1163.73,629.422 1164.29,630.13 1164.85,587.765 1165.41,592.389 1165.97,597.475 1166.53,601.286 1167.09,590.639 1167.65,564.947 1168.21,581.879 1168.77,572.762 1169.33,580.948 1169.88,556.799 1170.44,563.971 1171,541.724 1171.56,548.193 1172.12,590.488 1172.68,582.069 1173.24,637.516 1173.8,624.171 1174.36,625.923 1174.92,613.743 1175.48,635.958 1176.04,624.791 1176.6,610.542 1177.15,647.914 1177.71,631.542 1178.27,619.254 1178.83,623.817 1179.39,627.174 1179.95,631.385 1180.51,620.421 1181.07,629.115 1181.63,649.347 1182.19,637.288 1182.75,639.387 1183.31,626.774 1183.87,644.483 1184.43,680.616 1184.98,685.428 1185.54,681.764 1186.1,683.287 1186.66,679.784 1187.22,663.94 1187.78,667.383 1188.34,665.72 1188.9,696.862 1189.46,710.851 1190.02,709.384 1190.58,727.938 1191.14,757.978 1191.7,756.091 1192.25,801.438 1192.81,825.887 1193.37,805.349 1193.93,751.72 1194.49,748.128 1195.05,748.419 1195.61,760.728 1196.17,745.042 1196.73,727.092 1197.29,726.264 1197.85,738.704 1198.41,754.24 1198.97,732.97 1199.52,729.921 1200.08,760.731 1200.64,741.151 1201.2,719.592 1201.76,716.773 1202.32,731.886 1202.88,746.848 1203.44,758.009 1204,738.049 1204.56,719.565 1205.12,733.538 1205.68,762.261 1206.24,789.386 1206.8,770.401 1207.35,751.323 1207.91,714.648 1208.47,681.935 1209.03,666.046 1209.59,652.078 1210.15,653.893 1210.71,687.413 1211.27,670.515 1211.83,684.511 1212.39,667.013 1212.95,719.135 1213.51,731.435 1214.07,662.791 1214.62,647.723 1215.18,646.671 1215.74,654.629 1216.3,673.142 1216.86,675.56 1217.42,676.668 1217.98,708.688 1218.54,709.765 1219.1,709.304 1219.66,755.022 1220.22,765.1 1220.78,778.386 1221.34,773.473 1221.89,768.644 1222.45,765.252 1223.01,760.424 1223.57,741.75 1224.13,739.801 1224.69,751.268 1225.25,762.481 1225.81,743.096 1226.37,740.598 1226.93,705.954 1227.49,718.558 1228.05,698.767 1228.61,679.296 1229.17,696.044 1229.72,709.234 1230.28,727.292 1230.84,756.013 1231.4,750.709 1231.96,742.245 1232.52,724.379 1233.08,677.077 1233.64,632.971 1234.2,619.255 1234.76,577.155 1235.32,566.316 1235.88,586.775 1236.44,591.795 1236.99,594.787 1237.55,565.152 1238.11,569.013 1238.67,602.458 1239.23,625.019 1239.79,629.777 1240.35,632.499 1240.91,619.651 1241.47,659.002 1242.03,639.86 1242.59,658.569 1243.15,659.987 1243.71,647.087 1244.26,696.48 1244.82,715.343 1245.38,744.885 1245.94,740.206 1246.5,738.37 1247.06,722.423 1247.62,690.151 1248.18,723.753 1248.74,741.176 1249.3,737.036 1249.86,734.732 1250.42,713.554 1250.98,694.297 1251.54,674.421 1252.09,690.367 1252.65,655.674 1253.21,656.088 1253.77,691.394 1254.33,676.328 1254.89,644.115 1255.45,627.161 1256.01,630.586 1256.57,633.022 1257.13,636.437 1257.69,592.182 1258.25,612.979 1258.81,635.231 1259.36,673.127 1259.92,707.139 1260.48,678.008 1261.04,680.33 1261.6,714.548 1262.16,664.593 1262.72,645.694 1263.28,598.375 1263.84,586.267 1264.4,591.958 1264.96,577.748 1265.52,564.497 1266.08,560.361 1266.63,562.998 1267.19,614.469 1267.75,651.431 1268.31,668.181 1268.87,669.237 1269.43,703.545 1269.99,702.785 1270.55,705.459 1271.11,721.851 1271.67,688.256 1272.23,672.5 1272.79,674.237 1273.35,707.083 1273.91,737.063 1274.46,731.811 1275.02,714.667 1275.58,710.966 1276.14,694.07 1276.7,728.06 1277.26,726.702 1277.82,725.808 1278.38,674.581 1278.94,639.138 1279.5,641.173 1280.06,631.278 1280.62,670.827 1281.18,637.672 1281.73,674.468 1282.29,676.186 1282.85,676.547 1283.41,690.307 1283.97,690.138 1284.53,658.819 1285.09,650.284 1285.65,619.398 1286.21,622.491 1286.77,626.235 1287.33,631.628 1287.89,681.175 1288.45,699.852 1289,731.298 1289.56,744.559 1290.12,742.992 1290.68,708.181 1291.24,692.216 1291.8,676.665 1292.36,658.341 1292.92,691.719 1293.48,677.373 1294.04,644.583 1294.6,697.176 1295.16,712.651 1295.72,694.577 1296.28,691.956 1296.83,691.818 1297.39,726.14 1297.95,708.471 1298.51,707.013 1299.07,739.064 1299.63,719.154 1300.19,717.247 1300.75,711.254 1301.31,711.792 1301.87,708.43 1302.43,705.72 1302.99,720.575 1303.55,717.144 1304.1,731.859 1304.66,713.455 1305.22,742.889 1305.78,739.009 1306.34,737.712 1306.9,735.97 1307.46,749.434 1308.02,715.952 1308.58,699.964 1309.14,667.674 1309.7,667.058 1310.26,703.433 1310.82,718.365 1311.38,733.256 1311.93,744.346 1312.49,740.19 1313.05,756.645 1313.61,718.889 1314.17,733.859 1314.73,729.248 1315.29,709.109 1315.85,707.383 1316.41,670.957 1316.97,718.454 1317.53,749.493 1318.09,746.922 1318.65,744.119 1319.2,741.32 1319.76,691.435 1320.32,671.596 1320.88,657.591 1321.44,677.653 1322,633.94 1322.56,656.177 1323.12,662.034 1323.68,696.623 1324.24,694.467 1324.8,678.702 1325.36,660.172 1325.92,644.166 1326.47,651.286 1327.03,687.039 1327.59,689.375 1328.15,718.796 1328.71,748.879 1329.27,764.012 1329.83,715.869 1330.39,765.622 1330.95,761.985 1331.51,757.38 1332.07,813.637 1332.63,837.001 1333.19,826.987 1333.75,821.705 1334.3,844.786 1334.86,883.049 1335.42,857.269 1335.98,849.971 1336.54,825.732 1337.1,820.561 1337.66,779.98 1338.22,775.437 1338.78,736.243 1339.34,731.618 1339.9,743.616 1340.46,744.683 1341.02,775.12 1341.57,770.357 1342.13,747.705 1342.69,762.328 1343.25,773.41 1343.81,755.802 1344.37,737.826 1344.93,716.086 1345.49,729.48 1346.05,730.009 1346.61,744.878 1347.17,741.669 1347.73,735.995 1348.29,699.954 1348.84,715.185 1349.4,697.056 1349.96,670.126 1350.52,671.643 1351.08,639.028 1351.64,621.193 1352.2,592.595 1352.76,614.088 1353.32,620.56 1353.88,621.355 1354.44,587.911 1355,608.307 1355.56,580.777 1356.12,571.3 1356.67,575.145 1357.23,583.878 1357.79,606.83 1358.35,627.882 1358.91,618.602 1359.47,624.426 1360.03,629.029 1360.59,630.038 1361.15,647.267 1361.71,629.394 1362.27,647.503 1362.83,634.183 1363.39,638.014 1363.94,625.291 1364.5,612.096 1365.06,599.013 1365.62,602.957 1366.18,591.644 1366.74,594.382 1367.3,601.167 1367.86,639.554 1368.42,639.213 1368.98,654.393 1369.54,658.788 1370.1,690.782 1370.66,693.042 1371.21,694.819 1371.77,697.621 1372.33,694.027 1372.89,692.49 1373.45,678.502 1374.01,677.068 1374.57,663.232 1375.13,681.579 1375.69,648.777 1376.25,638.624 1376.81,605.986 1377.37,641.391 1377.93,629.296 1378.49,631.829 1379.04,621.988 1379.6,643.574 1380.16,647.034 1380.72,647.164 1381.28,650.554 1381.84,654.659 1382.4,637.202 1382.96,656.158 1383.52,643.512 1384.08,631.16 1384.64,618.451 1385.2,603.338 1385.76,609.362 1386.31,662.636 1386.87,661.063 1387.43,645.195 1387.99,631.185 1388.55,631.413 1389.11,648.919 1389.67,683.628 1390.23,731.554 1390.79,794.809 1391.35,757.732 1391.91,756.632 1392.47,767.805 1393.03,766.336 1393.58,714.39 1394.14,712.571 1394.7,695.24 1395.26,726.206 1395.82,724.047 1396.38,721.065 1396.94,721.357 1397.5,734.938 1398.06,715.837 1398.62,729.441 1399.18,727.618 1399.74,740.982 1400.3,720.392 1400.86,685.132 1401.41,668.829 1401.97,703.335 1402.53,686.648 1403.09,670.36 1403.65,688.156 1404.21,706.315 1404.77,741.104 1405.33,704.341 1405.89,704.121 1406.45,719.079 1407.01,697.703 1407.57,684.606 1408.13,671.718 1408.68,658.732 1409.24,645.568 1409.8,643.288 1410.36,648.856 1410.92,649.773 1411.48,637.169 1412.04,622.598 1412.6,592.816 1413.16,580.714 1413.72,586.446 1414.28,608.496 1414.84,562.056 1415.4,547.388 1415.95,559.206 1416.51,566.932 1417.07,562.627 1417.63,566.729 1418.19,589.682 1418.75,611.82 1419.31,614.877 1419.87,614.082 1420.43,617.1 1420.99,618.091 1421.55,638.361 1422.11,639.8 1422.67,614.167 1423.23,617.259 1423.78,606.938 1424.34,608.768 1424.9,614.612 1425.46,632.345 1426.02,685.187 1426.58,684.506 1427.14,638.838 1427.7,672.875 1428.26,670.952 1428.82,673.654 1429.38,674.384 1429.94,724.432 1430.5,724.219 1431.05,737.367 1431.61,765.602 1432.17,746.213 1432.73,746.066 1433.29,743.227 1433.85,741.013 1434.41,736.533 1434.97,750.994 1435.53,728.388 1436.09,740.76 1436.65,754.173 1437.21,732.242 1437.77,697.682 1438.33,743.715 1438.88,754.678 1439.44,737.474 1440,734.8 1440.56,715.354 1441.12,711.106 1441.68,689.796 1442.24,687.311 1442.8,718.299 1443.36,716.571 1443.92,712.696 1444.48,714.559 1445.04,745.731 1445.6,776.731 1446.15,753.109 1446.71,699.14 1447.27,712.236 1447.83,727.064 1448.39,724.93 1448.95,691.795 1449.51,705.872 1450.07,676.241 1450.63,657.687 1451.19,676.242 1451.75,678.92 1452.31,680.281 1452.87,663.438 1453.42,648.286 1453.98,681.48 1454.54,649.956 1455.1,633.077 1455.66,636.387 1456.22,618.858 1456.78,639.883 1457.34,623.046 1457.9,643.394 1458.46,662.361 1459.02,646.286 1459.58,683.542 1460.14,699.112 1460.7,727.713 1461.25,708.184 1461.81,724.463 1462.37,700.89 1462.93,702.861 1463.49,733.289 1464.05,742.986 1464.61,742.986 1465.17,755.818 1465.73,749.584 1466.29,762.97 1466.85,773.327 1467.41,782.587 1467.97,760.321 1468.52,757.993 1469.08,703.862 1469.64,702.173 1470.2,704.211 1470.76,702.559 1471.32,718.108 1471.88,651.368 1472.44,636.325 1473,654.641 1473.56,688.992 1474.12,674.339 1474.68,661.929 1475.24,647.792 1475.79,648.131 1476.35,653.073 1476.91,684.137 1477.47,701.452 1478.03,679.337 1478.59,692.945 1479.15,736.551 1479.71,715.728 1480.27,733.474 1480.83,714.063 1481.39,712.331 1481.95,713.273 1482.51,712.95 1483.07,730.907 1483.62,728.34 1484.18,713.85 1484.74,696.953 1485.3,697.883 1485.86,665.724 1486.42,684.767 1486.98,687.054 1487.54,688.406 1488.1,719.476 1488.66,713.758 1489.22,696.15 1489.78,694.352 1490.34,693.383 1490.89,677.411 1491.45,695.046 1492.01,681.044 1492.57,680.041 1493.13,713.922 1493.69,710.392 1494.25,723.062 1494.81,690.513 1495.37,704.783 1495.93,672.999 1496.49,673.707 1497.05,687.479 1497.61,655.806 1498.16,611.495 1498.72,597.673 1499.28,587.774 1499.84,577.29 1500.4,568.476 1500.96,572.27 1501.52,643.103 1502.08,643.723 1502.64,680.866 1503.2,679.637 1503.76,676.332 1504.32,661.399 1504.88,632.568 1505.44,616.004 1505.99,634.141 1506.55,637.131 1507.11,642.394 1507.67,659.58 1508.23,660.536 1508.79,657.838 1509.35,661.532 1509.91,664.003 1510.47,681.373 1511.03,701.286 1511.59,716.617 1512.15,718.198 1512.71,701.485 1513.26,688.66 1513.82,656.426 1514.38,657.266 1514.94,612.126 1515.5,618.055 1516.06,625.059 1516.62,661.388 1517.18,644.316 1517.74,646.44 1518.3,651.964 1518.86,637.461 1519.42,642.705 1519.98,633.614 1520.53,634.375 1521.09,637.445 1521.65,622.044 1522.21,622.446 1522.77,607.124 1523.33,641.444 1523.89,642.686 1524.45,647.896 1525.01,680.647 1525.57,663.508 1526.13,662.737 1526.69,646.779 1527.25,648.932 1527.81,650.692 1528.36,654.739 1528.92,639.374 1529.48,673.701 1530.04,686.72 1530.6,684.237 1531.16,685.628 1531.72,730.878 1532.28,677.214 1532.84,694.751 1533.4,694.344 1533.96,707.638 1534.52,689.164 1535.08,721.041 1535.63,704.259 1536.19,686.929 1536.75,620.174 1537.31,641.711 1537.87,626.4 1538.43,626.867 1538.99,647.507 1539.55,650.582 1540.11,621.961 1540.67,622.379 1541.23,662.66 1541.79,629.036 1542.35,633.392 1542.9,684.055 1543.46,683.213 1544.02,683.163 1544.58,714.787 1545.14,735.703 1545.7,714.092 1546.26,725.853 1546.82,705.657 1547.38,765.868 1547.94,775.635 1548.5,771.252 1549.06,798.796 1549.62,793.251 1550.18,807.051 1550.73,846.685 1551.29,854.266 1551.85,831.055 1552.41,820.333 1552.97,813.046 1553.53,794.728 1554.09,791.524 1554.65,816.044 1555.21,822.973 1555.77,860.755 1556.33,850.381 1556.89,826.311 1557.45,819.75 1558,826.904 1558.56,803.071 1559.12,798.649 1559.68,808.539 1560.24,803.223 1560.8,749.405 1561.36,764.16 1561.92,790.787 1562.48,765.925 1563.04,728.361 1563.6,756.688 1564.16,754.364 1564.72,735.084 1565.28,734.941 1565.83,715.245 1566.39,713.46 1566.95,709.409 1567.51,723.687 1568.07,720.2 1568.63,700.264 1569.19,711.911 1569.75,724.074 1570.31,689.97 1570.87,690.566 1571.43,687.664 1571.99,671.078 1572.55,622.592 1573.1,623.513 1573.66,643.278 1574.22,608.965 1574.78,597.782 1575.34,630.414 1575.9,649.252 1576.46,635.163 1577.02,588.092 1577.58,560.734 1578.14,584.772 1578.7,592.62 1579.26,595.551 1579.82,596.218 1580.37,572.231 1580.93,574.917 1581.49,532.578 1582.05,508.025 1582.61,532.419 1583.17,542.426 1583.73,532.506 1584.29,552.451 1584.85,543.653 1585.41,550.726 1585.97,558.049 1586.53,584.603 1587.09,620.05 1587.65,644.055 1588.2,646.848 1588.76,647.142 1589.32,651.24 1589.88,669.934 1590.44,684.487 1591,667.929 1591.56,652.172 1592.12,656.371 1592.68,691.027 1593.24,725.384 1593.8,755.812 1594.36,756.931 1594.92,754.278 1595.47,765.014 1596.03,809.762 1596.59,770.855 1597.15,734.018 1597.71,730.896 1598.27,729.706 1598.83,729.715 1599.39,723.724 1599.95,705.657 1600.51,705.563 1601.07,723.733 1601.63,723.646 1602.19,705.493 1602.74,686.221 1603.3,704.069 1603.86,687.841 1604.42,686.589 1604.98,671.608 1605.54,688.261 1606.1,670.08 1606.66,685.133 1607.22,651.661 1607.78,637.489 1608.34,639.505 1608.9,660.922 1609.46,646.73 1610.02,630.932 1610.57,681.637 1611.13,667.31 1611.69,683.296 1612.25,652.099 1612.81,658.38 1613.37,678.893 1613.93,679.45 1614.49,679.889 1615.05,675.982 1615.61,676.422 1616.17,694.147 1616.73,690.624 1617.29,688.82 1617.84,674.577 1618.4,673.14 1618.96,687.3 1619.52,669.133 1620.08,650.789 1620.64,687.705 1621.2,705.456 1621.76,721.078 1622.32,689.973 1622.88,690.628 1623.44,738.224 1624,703.144 1624.56,714.846 1625.11,762.132 1625.67,759.411 1626.23,736.688 1626.79,733.419 1627.35,717.831 1627.91,719.388 1628.47,718.071 1629.03,718.599 1629.59,718.661 1630.15,731.612 1630.71,712.66 1631.27,708.622 1631.83,703.469 1632.39,731.299 1632.94,761.109 1633.5,738.947 1634.06,751.529 1634.62,747.991 1635.18,774.757 1635.74,773.358 1636.3,819.103 1636.86,794.893 1637.42,771.048 1637.98,762.739 1638.54,729.008 1639.1,710.146 1639.66,742.315 1640.21,758.364 1640.77,738.801 1641.33,652.793 1641.89,654.087 1642.45,703.727 1643.01,686.583 1643.57,706.272 1644.13,700.97 1644.69,701.525 1645.25,652.316 1645.81,639.479 1646.37,658.68 1646.93,642.526 1647.48,633.335 1648.04,618.147 1648.6,634.908 1649.16,620.081 1649.72,603.853 1650.28,607.079 1650.84,628.129 1651.4,630.407 1651.96,637.515 1652.52,671.44 1653.08,687.715 1653.64,671.77 1654.2,641.479 1654.76,642.705 1655.31,629.693 1655.87,617.291 1656.43,623.852 1656.99,624.099 1657.55,674.747 1658.11,690.581 1658.67,688.557 1659.23,637.882 1659.79,607.567 1660.35,628.13 1660.91,629.289 1661.47,630.209 1662.03,648.463 1662.58,679.581 1663.14,663.923 1663.7,664.428 1664.26,669.158 1664.82,684.022 1665.38,670.448 1665.94,655.716 1666.5,658.845 1667.06,695.086 1667.62,680.369 1668.18,645.098 1668.74,666.92 1669.3,682.565 1669.85,700.171 1670.41,731.295 1670.97,729.562 1671.53,727.654 1672.09,743.827 1672.65,756.322 1673.21,710.122 1673.77,725.495 1674.33,704.974 1674.89,724.253 1675.45,738.055 1676.01,769.734 1676.57,796.517 1677.13,758.116 1677.68,756.948 1678.24,734.96 1678.8,704.216 1679.36,706.451 1679.92,704.043 1680.48,672.941 1681.04,675.286 1681.6,659.502 1682.16,706.29 1682.72,704.895 1683.28,703.139 1683.84,685.426 1684.4,718.98 1684.95,716.352 1685.51,697.447 1686.07,709.817 1686.63,695.127 1687.19,693.428 1687.75,646.172 1688.31,595.131 1688.87,584.988 1689.43,587.526 1689.99,604.843 1690.55,590.369 1691.11,596.9 1691.67,584.904 1692.23,571.418 1692.78,629.096 1693.34,635.438 1693.9,620.666 1694.46,654.883 1695.02,655.374 1695.58,640.858 1696.14,659.249 1696.7,678.071 1697.26,660.867 1697.82,648.28 1698.38,645.105 1698.94,643.383 1699.5,643.64 1700.05,645.665 1700.61,664.748 1701.17,652.813 1701.73,668.996 1702.29,735.574 1702.85,704.555 1703.41,700.683 1703.97,701.643 1704.53,715.917 1705.09,696.948 1705.65,729.107 1706.21,742.768 1706.77,707.036 1707.32,692.483 1707.88,695.614 1708.44,759.295 1709,755.001 1709.56,733.822 1710.12,696.718 1710.68,663.336 1711.24,662.987 1711.8,645.755 1712.36,599.285 1712.92,638.185 1713.48,658.173 1714.04,641.769 1714.6,625.859 1715.15,663 1715.71,697.659 1716.27,679.868 1716.83,682.434 1717.39,682.127 1717.95,699.859 1718.51,763.206 1719.07,776.878 1719.63,769.877 1720.19,762.442 1720.75,775.003 1721.31,755.522 1721.87,750.361 1722.42,748.163 1722.98,763.192 1723.54,761.421 1724.1,742.095 1724.66,742.757 1725.22,706.145 1725.78,722.331 1726.34,705.59 1726.9,690.466 1727.46,723.306 1728.02,736.201 1728.58,732.138 1729.14,728.074 1729.69,723.127 1730.25,739.283 1730.81,739.358 1731.37,767.444 1731.93,749.687 1732.49,762.554 1733.05,772.85 1733.61,749.727 1734.17,745.488 1734.73,755.184 1735.29,734.885 1735.85,764.798 1736.41,760.926 1736.97,821.401 1737.52,783.336 1738.08,793.935 1738.64,804.541 1739.2,785.002 1739.76,762.651 1740.32,721.87 1740.88,753.395 1741.44,783.695 1742,797.157 1742.56,747.059 1743.12,758.221 1743.68,753.356 1744.24,737.23 1744.79,733.878 1745.35,712.691 1745.91,710.749 1746.47,710.035 1747.03,659.396 1747.59,674.34 1748.15,693.277 1748.71,677.783 1749.27,706.133 1749.83,735.761 1750.39,719.962 1750.95,718.595 1751.51,669.463 1752.06,657.707 1752.62,658.405 1753.18,626.814 1753.74,648.624 1754.3,615.385 1754.86,602.044 1755.42,570.169 1755.98,595.499 1756.54,611.929 1757.1,618.014 1757.66,686.763 1758.22,687.985 1758.78,704.077 1759.34,685.408 1759.89,655.664 1760.45,673.588 1761.01,642.364 1761.57,660.852 1762.13,679.653 1762.69,695.042 1763.25,679.119 1763.81,693.519 1764.37,696.318 1764.93,709.319 1765.49,704.935 1766.05,669.554 1766.61,700.369 1767.16,700.832 1767.72,698.729 1768.28,681.817 1768.84,645.895 1769.4,662.967 1769.96,630.032 1770.52,647.761 1771.08,665.98 1771.64,636.261 1772.2,633.389 1772.76,670.501 1773.32,655.333 1773.88,642.25 1774.43,627.571 1774.99,664.533 1775.55,683.699 1776.11,699.01 1776.67,665.988 1777.23,652.172 1777.79,685.063 1778.35,702.268 1778.91,702.825 1779.47,669.179 1780.03,689.475 1780.59,656.547 1781.15,625.747 1781.71,659.386 1782.26,630.057 1782.82,633.899 1783.38,639.407 1783.94,642.151 1784.5,638.855 1785.06,625.559 1785.62,645.688 1786.18,680.711 1786.74,679.159 1787.3,680.689 1787.86,729.627 1788.42,745.355 1788.98,692.991 1789.53,692.013 1790.09,674.41 1790.65,673.441 1791.21,671.616 1791.77,656.832 1792.33,687.714 1792.89,690.538 1793.45,639.546 1794.01,627.877 1794.57,633.037 1795.13,651.532 1795.69,654.659 1796.25,656.219 1796.8,656.298 1797.36,676.161 1797.92,679.426 1798.48,662.662 1799.04,663.618 1799.6,601.387 1800.16,591.92 1800.72,628.111 1801.28,642.931 1801.84,649.165 1802.4,652.298 1802.96,640.46 1803.52,610.797 1804.08,600.95 1804.63,573.16 1805.19,580.997 1805.75,554.271 1806.31,561.093 1806.87,553.587 1807.43,561.042 1807.99,570.273 1808.55,593.902 1809.11,615.446 1809.67,637.102 1810.23,638.721 1810.79,643.967 1811.35,649.668 1811.9,650.73 1812.46,653.319 1813.02,639.209 1813.58,624.74 1814.14,627.683 1814.7,644.603 1815.26,644.81 1815.82,644.621 1816.38,633.956 1816.94,637.266 1817.5,607.127 1818.06,625.732 1818.62,632.793 1819.18,651.06 1819.73,670.152 1820.29,702.684 1820.85,735.836 1821.41,730.884 1821.97,693.44 1822.53,677.043 1823.09,678.558 1823.65,662.15 1824.21,646.248 1824.77,698.249 1825.33,682.004 1825.89,665.434 1826.45,649.57 1827,653.539 1827.56,672.205 1828.12,672.337 1828.68,704.417 1829.24,721.065 1829.8,755.811 1830.36,751.704 1830.92,698.855 1831.48,728.766 1832.04,744.929 1832.6,723.64 1833.16,720.7 1833.72,718.584 1834.27,731.962 1834.83,715.842 1835.39,694.457 1835.95,695.468 1836.51,695.129 1837.07,724.636 1837.63,719.826 1838.19,702.15 \"/>\n<path clip-path=\"url(#clip013)\" d=\"M720.247 693.224 L720.806 693.224 L721.365 693.224 L721.924 693.224 L722.484 693.224 L723.043 693.224 L723.602 693.224 L724.161 693.224 L724.721 693.224 L725.28 693.224 L725.839 693.224 L726.398 693.224 L726.958 693.224 L727.517 693.224 L728.076 693.224 L728.635 693.224 L729.195 693.224 L729.754 693.224 L730.313 693.224 L730.872 693.224 L731.432 693.224 L731.991 693.224 L732.55 693.224 L733.109 693.224 L733.669 693.224 L734.228 693.224 L734.787 693.224 L735.346 693.224 L735.906 693.224 L736.465 693.224 L737.024 693.224 L737.583 693.224 L738.143 693.224 L738.702 693.224 L739.261 693.224 L739.82 693.224 L740.38 693.224 L740.939 693.224 L741.498 693.224 L742.057 693.224 L742.617 693.224 L743.176 693.224 L743.735 693.224 L744.294 693.224 L744.854 693.224 L745.413 693.224 L745.972 693.224 L746.531 693.224 L747.091 693.224 L747.65 693.224 L748.209 693.224 L748.768 693.224 L749.328 693.224 L749.887 693.224 L750.446 693.224 L751.005 693.224 L751.565 693.224 L752.124 693.224 L752.683 693.224 L753.242 693.224 L753.802 693.224 L754.361 693.224 L754.92 693.224 L755.479 693.224 L756.039 693.224 L756.598 693.224 L757.157 693.224 L757.716 693.224 L758.276 693.224 L758.835 693.224 L759.394 693.224 L759.953 693.224 L760.513 693.224 L761.072 693.224 L761.631 693.224 L762.19 693.224 L762.75 693.224 L763.309 693.224 L763.868 693.224 L764.427 693.224 L764.987 693.224 L765.546 693.224 L766.105 693.224 L766.664 693.224 L767.224 693.224 L767.783 693.224 L768.342 693.224 L768.901 693.224 L769.461 693.224 L770.02 693.224 L770.579 693.224 L771.138 693.224 L771.698 693.224 L772.257 693.224 L772.816 693.224 L773.375 693.224 L773.935 693.224 L774.494 693.224 L775.053 693.224 L775.612 693.224 L776.172 693.224 L776.731 693.224 L777.29 693.224 L777.849 693.224 L778.409 693.224 L778.968 693.224 L779.527 693.224 L780.086 693.224 L780.646 693.224 L781.205 693.224 L781.764 693.224 L782.323 693.224 L782.883 693.224 L783.442 693.224 L784.001 693.224 L784.56 693.224 L785.12 693.224 L785.679 693.224 L786.238 693.224 L786.797 693.224 L787.357 693.224 L787.916 693.224 L788.475 693.224 L789.034 693.224 L789.594 693.224 L790.153 693.224 L790.712 693.224 L791.271 693.224 L791.831 693.224 L792.39 693.224 L792.949 693.224 L793.508 693.224 L794.068 693.224 L794.627 693.224 L795.186 693.224 L795.745 693.224 L796.305 693.224 L796.864 693.224 L797.423 693.224 L797.982 693.224 L798.542 693.224 L799.101 693.224 L799.66 693.224 L800.219 693.224 L800.779 693.224 L801.338 693.224 L801.897 693.224 L802.456 693.224 L803.016 693.224 L803.575 693.224 L804.134 693.224 L804.693 693.224 L805.253 693.224 L805.812 693.224 L806.371 693.224 L806.931 693.224 L807.49 693.224 L808.049 693.224 L808.608 693.224 L809.168 693.224 L809.727 693.224 L810.286 693.224 L810.845 693.224 L811.405 693.224 L811.964 693.224 L812.523 693.224 L813.082 693.224 L813.642 693.224 L814.201 693.224 L814.76 693.224 L815.319 693.224 L815.879 693.224 L816.438 693.224 L816.997 693.224 L817.556 693.224 L818.116 693.224 L818.675 693.224 L819.234 693.224 L819.793 693.224 L820.353 693.224 L820.912 693.224 L821.471 693.224 L822.03 693.224 L822.59 693.224 L823.149 693.224 L823.708 693.224 L824.267 693.224 L824.827 693.224 L825.386 693.224 L825.945 693.224 L826.504 693.224 L827.064 693.224 L827.623 693.224 L828.182 693.224 L828.741 693.224 L829.301 693.224 L829.86 693.224 L830.419 693.224 L830.978 693.224 L831.538 693.224 L832.097 693.224 L832.656 693.224 L833.215 693.224 L833.775 693.224 L834.334 693.224 L834.893 693.224 L835.452 693.224 L836.012 693.224 L836.571 693.224 L837.13 693.224 L837.689 693.224 L838.249 693.224 L838.808 693.224 L839.367 693.224 L839.926 693.224 L840.486 693.224 L841.045 693.224 L841.604 693.224 L842.163 693.224 L842.723 693.224 L843.282 693.224 L843.841 693.224 L844.4 693.224 L844.96 693.224 L845.519 693.224 L846.078 693.224 L846.637 693.224 L847.197 693.224 L847.756 693.224 L848.315 693.224 L848.874 693.224 L849.434 693.224 L849.993 693.224 L850.552 693.224 L851.111 693.224 L851.671 693.224 L852.23 693.224 L852.789 693.224 L853.348 693.224 L853.908 693.224 L854.467 693.224 L855.026 693.224 L855.585 693.224 L856.145 693.224 L856.704 693.224 L857.263 693.224 L857.822 693.224 L858.382 693.224 L858.941 693.224 L859.5 693.224 L860.059 693.224 L860.619 693.224 L861.178 693.224 L861.737 693.224 L862.296 693.224 L862.856 693.224 L863.415 693.224 L863.974 693.224 L864.533 693.224 L865.093 693.224 L865.652 693.224 L866.211 693.224 L866.77 693.224 L867.33 693.224 L867.889 693.224 L868.448 693.224 L869.007 693.224 L869.567 693.224 L870.126 693.224 L870.685 693.224 L871.244 693.224 L871.804 693.224 L872.363 693.224 L872.922 693.224 L873.481 693.224 L874.041 693.224 L874.6 693.224 L875.159 693.224 L875.718 693.224 L876.278 693.224 L876.837 693.224 L877.396 693.224 L877.955 693.224 L878.515 693.224 L879.074 693.224 L879.633 693.224 L880.192 693.224 L880.752 693.224 L881.311 693.224 L881.87 693.224 L882.429 693.224 L882.989 693.224 L883.548 693.224 L884.107 693.224 L884.666 693.224 L885.226 693.224 L885.785 693.224 L886.344 693.224 L886.903 693.224 L887.463 693.224 L888.022 693.224 L888.581 693.224 L889.14 693.224 L889.7 693.224 L890.259 693.224 L890.818 693.224 L891.377 693.224 L891.937 693.224 L892.496 693.224 L893.055 693.224 L893.614 693.224 L894.174 693.224 L894.733 693.224 L895.292 693.224 L895.851 693.224 L896.411 693.224 L896.97 693.224 L897.529 693.224 L898.088 693.224 L898.648 693.224 L899.207 693.224 L899.766 693.224 L900.325 693.224 L900.885 693.224 L901.444 693.224 L902.003 693.224 L902.562 693.224 L903.122 693.224 L903.681 693.224 L904.24 693.224 L904.799 693.224 L905.359 693.224 L905.918 693.224 L906.477 693.224 L907.036 693.224 L907.596 693.224 L908.155 693.224 L908.714 693.224 L909.273 693.224 L909.833 693.224 L910.392 693.224 L910.951 693.224 L911.51 693.224 L912.07 693.224 L912.629 693.224 L913.188 693.224 L913.747 693.224 L914.307 693.224 L914.866 693.224 L915.425 693.224 L915.984 693.224 L916.544 693.224 L917.103 693.224 L917.662 693.224 L918.221 693.224 L918.781 693.224 L919.34 693.224 L919.899 693.224 L920.458 693.224 L921.018 693.224 L921.577 693.224 L922.136 693.224 L922.695 693.224 L923.255 693.224 L923.814 693.224 L924.373 693.224 L924.932 693.224 L925.492 693.224 L926.051 693.224 L926.61 693.224 L927.169 693.224 L927.729 693.224 L928.288 693.224 L928.847 693.224 L929.406 693.224 L929.966 693.224 L930.525 693.224 L931.084 693.224 L931.644 693.224 L932.203 693.224 L932.762 693.224 L933.321 693.224 L933.881 693.224 L934.44 693.224 L934.999 693.224 L935.558 693.224 L936.118 693.224 L936.677 693.224 L937.236 693.224 L937.795 693.224 L938.355 693.224 L938.914 693.224 L939.473 693.224 L940.032 693.224 L940.592 693.224 L941.151 693.224 L941.71 693.224 L942.269 693.224 L942.829 693.224 L943.388 693.224 L943.947 693.224 L944.506 693.224 L945.066 693.224 L945.625 693.224 L946.184 693.224 L946.743 693.224 L947.303 693.224 L947.862 693.224 L948.421 693.224 L948.98 693.224 L949.54 693.224 L950.099 693.224 L950.658 693.224 L951.217 693.224 L951.777 693.224 L952.336 693.224 L952.895 693.224 L953.454 693.224 L954.014 693.224 L954.573 693.224 L955.132 693.224 L955.691 693.224 L956.251 693.224 L956.81 693.224 L957.369 693.224 L957.928 693.224 L958.488 693.224 L959.047 693.224 L959.606 693.224 L960.165 693.224 L960.725 693.224 L961.284 693.224 L961.843 693.224 L962.402 693.224 L962.962 693.224 L963.521 693.224 L964.08 693.224 L964.639 693.224 L965.199 693.224 L965.758 693.224 L966.317 693.224 L966.876 693.224 L967.436 693.224 L967.995 693.224 L968.554 693.224 L969.113 693.224 L969.673 693.224 L970.232 693.224 L970.791 693.224 L971.35 693.224 L971.91 693.224 L972.469 693.224 L973.028 693.224 L973.587 693.224 L974.147 693.224 L974.706 693.224 L975.265 693.224 L975.824 693.224 L976.384 693.224 L976.943 693.224 L977.502 693.224 L978.061 693.224 L978.621 693.224 L979.18 693.224 L979.739 693.224 L980.298 693.224 L980.858 693.224 L981.417 693.224 L981.976 693.224 L982.535 693.224 L983.095 693.224 L983.654 693.224 L984.213 693.224 L984.772 693.224 L985.332 693.224 L985.891 693.224 L986.45 693.224 L987.009 693.224 L987.569 693.224 L988.128 693.224 L988.687 693.224 L989.246 693.224 L989.806 693.224 L990.365 693.224 L990.924 693.224 L991.483 693.224 L992.043 693.224 L992.602 693.224 L993.161 693.224 L993.72 693.224 L994.28 693.224 L994.839 693.224 L995.398 693.224 L995.957 693.224 L996.517 693.224 L997.076 693.224 L997.635 693.224 L998.194 693.224 L998.754 693.224 L999.313 693.224 L999.872 693.224 L1000.43 693.224 L1000.99 693.224 L1001.55 693.224 L1002.11 693.224 L1002.67 693.224 L1003.23 693.224 L1003.79 693.224 L1004.35 693.224 L1004.91 693.224 L1005.46 693.224 L1006.02 693.224 L1006.58 693.224 L1007.14 693.224 L1007.7 693.224 L1008.26 693.224 L1008.82 693.224 L1009.38 693.224 L1009.94 693.224 L1010.5 693.224 L1011.06 693.224 L1011.62 693.224 L1012.18 693.224 L1012.73 693.224 L1013.29 693.224 L1013.85 693.224 L1014.41 693.224 L1014.97 693.224 L1015.53 693.224 L1016.09 693.224 L1016.65 693.224 L1017.21 693.224 L1017.77 693.224 L1018.33 693.224 L1018.89 693.224 L1019.45 693.224 L1020.01 693.224 L1020.56 693.224 L1021.12 693.224 L1021.68 693.224 L1022.24 693.224 L1022.8 693.224 L1023.36 693.224 L1023.92 693.224 L1024.48 693.224 L1025.04 693.224 L1025.6 693.224 L1026.16 693.224 L1026.72 693.224 L1027.28 693.224 L1027.83 693.224 L1028.39 693.224 L1028.95 693.224 L1029.51 693.224 L1030.07 693.224 L1030.63 693.224 L1031.19 693.224 L1031.75 693.224 L1032.31 693.224 L1032.87 693.224 L1033.43 693.224 L1033.99 693.224 L1034.55 693.224 L1035.1 693.224 L1035.66 693.224 L1036.22 693.224 L1036.78 693.224 L1037.34 693.224 L1037.9 693.224 L1038.46 693.224 L1039.02 693.224 L1039.58 693.224 L1040.14 693.224 L1040.7 693.224 L1041.26 693.224 L1041.82 693.224 L1042.38 693.224 L1042.93 693.224 L1043.49 693.224 L1044.05 693.224 L1044.61 693.224 L1045.17 693.224 L1045.73 693.224 L1046.29 693.224 L1046.85 693.224 L1047.41 693.224 L1047.97 693.224 L1048.53 693.224 L1049.09 693.224 L1049.65 693.224 L1050.2 693.224 L1050.76 693.224 L1051.32 693.224 L1051.88 693.224 L1052.44 693.224 L1053 693.224 L1053.56 693.224 L1054.12 693.224 L1054.68 693.224 L1055.24 693.224 L1055.8 693.224 L1056.36 693.224 L1056.92 693.224 L1057.48 693.224 L1058.03 693.224 L1058.59 693.224 L1059.15 693.224 L1059.71 693.224 L1060.27 693.224 L1060.83 693.224 L1061.39 693.224 L1061.95 693.224 L1062.51 693.224 L1063.07 693.224 L1063.63 693.224 L1064.19 693.224 L1064.75 693.224 L1065.3 693.224 L1065.86 693.224 L1066.42 693.224 L1066.98 693.224 L1067.54 693.224 L1068.1 693.224 L1068.66 693.224 L1069.22 693.224 L1069.78 693.224 L1070.34 693.224 L1070.9 693.224 L1071.46 693.224 L1072.02 693.224 L1072.57 693.224 L1073.13 693.224 L1073.69 693.224 L1074.25 693.224 L1074.81 693.224 L1075.37 693.224 L1075.93 693.224 L1076.49 693.224 L1077.05 693.224 L1077.61 693.224 L1078.17 693.224 L1078.73 693.224 L1079.29 693.224 L1079.85 693.224 L1080.4 693.224 L1080.96 693.224 L1081.52 693.224 L1082.08 693.224 L1082.64 693.224 L1083.2 693.224 L1083.76 693.224 L1084.32 693.224 L1084.88 693.224 L1085.44 693.224 L1086 693.224 L1086.56 693.224 L1087.12 693.224 L1087.67 693.224 L1088.23 693.224 L1088.79 693.224 L1089.35 693.224 L1089.91 693.224 L1090.47 693.224 L1091.03 693.224 L1091.59 693.224 L1092.15 693.224 L1092.71 693.224 L1093.27 693.224 L1093.83 693.224 L1094.39 693.224 L1094.94 693.224 L1095.5 693.224 L1096.06 693.224 L1096.62 693.224 L1097.18 693.224 L1097.74 693.224 L1098.3 693.224 L1098.86 693.224 L1099.42 693.224 L1099.98 693.224 L1100.54 693.224 L1101.1 693.224 L1101.66 693.224 L1102.22 693.224 L1102.77 693.224 L1103.33 693.224 L1103.89 693.224 L1104.45 693.224 L1105.01 693.224 L1105.57 693.224 L1106.13 693.224 L1106.69 693.224 L1107.25 693.224 L1107.81 693.224 L1108.37 693.224 L1108.93 693.224 L1109.49 693.224 L1110.04 693.224 L1110.6 693.224 L1111.16 693.224 L1111.72 693.224 L1112.28 693.224 L1112.84 693.224 L1113.4 693.224 L1113.96 693.224 L1114.52 693.224 L1115.08 693.224 L1115.64 693.224 L1116.2 693.224 L1116.76 693.224 L1117.31 693.224 L1117.87 693.224 L1118.43 693.224 L1118.99 693.224 L1119.55 693.224 L1120.11 693.224 L1120.67 693.224 L1121.23 693.224 L1121.79 693.224 L1122.35 693.224 L1122.91 693.224 L1123.47 693.224 L1124.03 693.224 L1124.59 693.224 L1125.14 693.224 L1125.7 693.224 L1126.26 693.224 L1126.82 693.224 L1127.38 693.224 L1127.94 693.224 L1128.5 693.224 L1129.06 693.224 L1129.62 693.224 L1130.18 693.224 L1130.74 693.224 L1131.3 693.224 L1131.86 693.224 L1132.41 693.224 L1132.97 693.224 L1133.53 693.224 L1134.09 693.224 L1134.65 693.224 L1135.21 693.224 L1135.77 693.224 L1136.33 693.224 L1136.89 693.224 L1137.45 693.224 L1138.01 693.224 L1138.57 693.224 L1139.13 693.224 L1139.68 693.224 L1140.24 693.224 L1140.8 693.224 L1141.36 693.224 L1141.92 693.224 L1142.48 693.224 L1143.04 693.224 L1143.6 693.224 L1144.16 693.224 L1144.72 693.224 L1145.28 693.224 L1145.84 693.224 L1146.4 693.224 L1146.96 693.224 L1147.51 693.224 L1148.07 693.224 L1148.63 693.224 L1149.19 693.224 L1149.75 693.224 L1150.31 693.224 L1150.87 693.224 L1151.43 693.224 L1151.99 693.224 L1152.55 693.224 L1153.11 693.224 L1153.67 693.224 L1154.23 693.224 L1154.78 693.224 L1155.34 693.224 L1155.9 693.224 L1156.46 693.224 L1157.02 693.224 L1157.58 693.224 L1158.14 693.224 L1158.7 693.224 L1159.26 693.224 L1159.82 693.224 L1160.38 693.224 L1160.94 693.224 L1161.5 693.224 L1162.05 693.224 L1162.61 693.224 L1163.17 693.224 L1163.73 693.224 L1164.29 693.224 L1164.85 693.224 L1165.41 693.224 L1165.97 693.224 L1166.53 693.224 L1167.09 693.224 L1167.65 693.224 L1168.21 693.224 L1168.77 693.224 L1169.33 693.224 L1169.88 693.224 L1170.44 693.224 L1171 693.224 L1171.56 693.224 L1172.12 693.224 L1172.68 693.224 L1173.24 693.224 L1173.8 693.224 L1174.36 693.224 L1174.92 693.224 L1175.48 693.224 L1176.04 693.224 L1176.6 693.224 L1177.15 693.224 L1177.71 693.224 L1178.27 693.224 L1178.83 693.224 L1179.39 693.224 L1179.95 693.224 L1180.51 693.224 L1181.07 693.224 L1181.63 693.224 L1182.19 693.224 L1182.75 693.224 L1183.31 693.224 L1183.87 693.224 L1184.43 693.224 L1184.98 693.224 L1185.54 693.224 L1186.1 693.224 L1186.66 693.224 L1187.22 693.224 L1187.78 693.224 L1188.34 693.224 L1188.9 693.224 L1189.46 693.224 L1190.02 693.224 L1190.58 693.224 L1191.14 693.224 L1191.7 693.224 L1192.25 693.224 L1192.81 693.224 L1193.37 693.224 L1193.93 693.224 L1194.49 693.224 L1195.05 693.224 L1195.61 693.224 L1196.17 693.224 L1196.73 693.224 L1197.29 693.224 L1197.85 693.224 L1198.41 693.224 L1198.97 693.224 L1199.52 693.224 L1200.08 693.224 L1200.64 693.224 L1201.2 693.224 L1201.76 693.224 L1202.32 693.224 L1202.88 693.224 L1203.44 693.224 L1204 693.224 L1204.56 693.224 L1205.12 693.224 L1205.68 693.224 L1206.24 693.224 L1206.8 693.224 L1207.35 693.224 L1207.91 693.224 L1208.47 693.224 L1209.03 693.224 L1209.59 693.224 L1210.15 693.224 L1210.71 693.224 L1211.27 693.224 L1211.83 693.224 L1212.39 693.224 L1212.95 693.224 L1213.51 693.224 L1214.07 693.224 L1214.62 693.224 L1215.18 693.224 L1215.74 693.224 L1216.3 693.224 L1216.86 693.224 L1217.42 693.224 L1217.98 693.224 L1218.54 693.224 L1219.1 693.224 L1219.66 693.224 L1220.22 693.224 L1220.78 693.224 L1221.34 693.224 L1221.89 693.224 L1222.45 693.224 L1223.01 693.224 L1223.57 693.224 L1224.13 693.224 L1224.69 693.224 L1225.25 693.224 L1225.81 693.224 L1226.37 693.224 L1226.93 693.224 L1227.49 693.224 L1228.05 693.224 L1228.61 693.224 L1229.17 693.224 L1229.72 693.224 L1230.28 693.224 L1230.84 693.224 L1231.4 693.224 L1231.96 693.224 L1232.52 693.224 L1233.08 693.224 L1233.64 693.224 L1234.2 693.224 L1234.76 693.224 L1235.32 693.224 L1235.88 693.224 L1236.44 693.224 L1236.99 693.224 L1237.55 693.224 L1238.11 693.224 L1238.67 693.224 L1239.23 693.224 L1239.79 693.224 L1240.35 693.224 L1240.91 693.224 L1241.47 693.224 L1242.03 693.224 L1242.59 693.224 L1243.15 693.224 L1243.71 693.224 L1244.26 693.224 L1244.82 693.224 L1245.38 693.224 L1245.94 693.224 L1246.5 693.224 L1247.06 693.224 L1247.62 693.224 L1248.18 693.224 L1248.74 693.224 L1249.3 693.224 L1249.86 693.224 L1250.42 693.224 L1250.98 693.224 L1251.54 693.224 L1252.09 693.224 L1252.65 693.224 L1253.21 693.224 L1253.77 693.224 L1254.33 693.224 L1254.89 693.224 L1255.45 693.224 L1256.01 693.224 L1256.57 693.224 L1257.13 693.224 L1257.69 693.224 L1258.25 693.224 L1258.81 693.224 L1259.36 693.224 L1259.92 693.224 L1260.48 693.224 L1261.04 693.224 L1261.6 693.224 L1262.16 693.224 L1262.72 693.224 L1263.28 693.224 L1263.84 693.224 L1264.4 693.224 L1264.96 693.224 L1265.52 693.224 L1266.08 693.224 L1266.63 693.224 L1267.19 693.224 L1267.75 693.224 L1268.31 693.224 L1268.87 693.224 L1269.43 693.224 L1269.99 693.224 L1270.55 693.224 L1271.11 693.224 L1271.67 693.224 L1272.23 693.224 L1272.79 693.224 L1273.35 693.224 L1273.91 693.224 L1274.46 693.224 L1275.02 693.224 L1275.58 693.224 L1276.14 693.224 L1276.7 693.224 L1277.26 693.224 L1277.82 693.224 L1278.38 693.224 L1278.94 693.224 L1279.5 693.224 L1280.06 693.224 L1280.62 693.224 L1281.18 693.224 L1281.73 693.224 L1282.29 693.224 L1282.85 693.224 L1283.41 693.224 L1283.97 693.224 L1284.53 693.224 L1285.09 693.224 L1285.65 693.224 L1286.21 693.224 L1286.77 693.224 L1287.33 693.224 L1287.89 693.224 L1288.45 693.224 L1289 693.224 L1289.56 693.224 L1290.12 693.224 L1290.68 693.224 L1291.24 693.224 L1291.8 693.224 L1292.36 693.224 L1292.92 693.224 L1293.48 693.224 L1294.04 693.224 L1294.6 693.224 L1295.16 693.224 L1295.72 693.224 L1296.28 693.224 L1296.83 693.224 L1297.39 693.224 L1297.95 693.224 L1298.51 693.224 L1299.07 693.224 L1299.63 693.224 L1300.19 693.224 L1300.75 693.224 L1301.31 693.224 L1301.87 693.224 L1302.43 693.224 L1302.99 693.224 L1303.55 693.224 L1304.1 693.224 L1304.66 693.224 L1305.22 693.224 L1305.78 693.224 L1306.34 693.224 L1306.9 693.224 L1307.46 693.224 L1308.02 693.224 L1308.58 693.224 L1309.14 693.224 L1309.7 693.224 L1310.26 693.224 L1310.82 693.224 L1311.38 693.224 L1311.93 693.224 L1312.49 693.224 L1313.05 693.224 L1313.61 693.224 L1314.17 693.224 L1314.73 693.224 L1315.29 693.224 L1315.85 693.224 L1316.41 693.224 L1316.97 693.224 L1317.53 693.224 L1318.09 693.224 L1318.65 693.224 L1319.2 693.224 L1319.76 693.224 L1320.32 693.224 L1320.88 693.224 L1321.44 693.224 L1322 693.224 L1322.56 693.224 L1323.12 693.224 L1323.68 693.224 L1324.24 693.224 L1324.8 693.224 L1325.36 693.224 L1325.92 693.224 L1326.47 693.224 L1327.03 693.224 L1327.59 693.224 L1328.15 693.224 L1328.71 693.224 L1329.27 693.224 L1329.83 693.224 L1330.39 693.224 L1330.95 693.224 L1331.51 693.224 L1332.07 693.224 L1332.63 693.224 L1333.19 693.224 L1333.75 693.224 L1334.3 693.224 L1334.86 693.224 L1335.42 693.224 L1335.98 693.224 L1336.54 693.224 L1337.1 693.224 L1337.66 693.224 L1338.22 693.224 L1338.78 693.224 L1339.34 693.224 L1339.9 693.224 L1340.46 693.224 L1341.02 693.224 L1341.57 693.224 L1342.13 693.224 L1342.69 693.224 L1343.25 693.224 L1343.81 693.224 L1344.37 693.224 L1344.93 693.224 L1345.49 693.224 L1346.05 693.224 L1346.61 693.224 L1347.17 693.224 L1347.73 693.224 L1348.29 693.224 L1348.84 693.224 L1349.4 693.224 L1349.96 693.224 L1350.52 693.224 L1351.08 693.224 L1351.64 693.224 L1352.2 693.224 L1352.76 693.224 L1353.32 693.224 L1353.88 693.224 L1354.44 693.224 L1355 693.224 L1355.56 693.224 L1356.12 693.224 L1356.67 693.224 L1357.23 693.224 L1357.79 693.224 L1358.35 693.224 L1358.91 693.224 L1359.47 693.224 L1360.03 693.224 L1360.59 693.224 L1361.15 693.224 L1361.71 693.224 L1362.27 693.224 L1362.83 693.224 L1363.39 693.224 L1363.94 693.224 L1364.5 693.224 L1365.06 693.224 L1365.62 693.224 L1366.18 693.224 L1366.74 693.224 L1367.3 693.224 L1367.86 693.224 L1368.42 693.224 L1368.98 693.224 L1369.54 693.224 L1370.1 693.224 L1370.66 693.224 L1371.21 693.224 L1371.77 693.224 L1372.33 693.224 L1372.89 693.224 L1373.45 693.224 L1374.01 693.224 L1374.57 693.224 L1375.13 693.224 L1375.69 693.224 L1376.25 693.224 L1376.81 693.224 L1377.37 693.224 L1377.93 693.224 L1378.49 693.224 L1379.04 693.224 L1379.6 693.224 L1380.16 693.224 L1380.72 693.224 L1381.28 693.224 L1381.84 693.224 L1382.4 693.224 L1382.96 693.224 L1383.52 693.224 L1384.08 693.224 L1384.64 693.224 L1385.2 693.224 L1385.76 693.224 L1386.31 693.224 L1386.87 693.224 L1387.43 693.224 L1387.99 693.224 L1388.55 693.224 L1389.11 693.224 L1389.67 693.224 L1390.23 693.224 L1390.79 693.224 L1391.35 693.224 L1391.91 693.224 L1392.47 693.224 L1393.03 693.224 L1393.58 693.224 L1394.14 693.224 L1394.7 693.224 L1395.26 693.224 L1395.82 693.224 L1396.38 693.224 L1396.94 693.224 L1397.5 693.224 L1398.06 693.224 L1398.62 693.224 L1399.18 693.224 L1399.74 693.224 L1400.3 693.224 L1400.86 693.224 L1401.41 693.224 L1401.97 693.224 L1402.53 693.224 L1403.09 693.224 L1403.65 693.224 L1404.21 693.224 L1404.77 693.224 L1405.33 693.224 L1405.89 693.224 L1406.45 693.224 L1407.01 693.224 L1407.57 693.224 L1408.13 693.224 L1408.68 693.224 L1409.24 693.224 L1409.8 693.224 L1410.36 693.224 L1410.92 693.224 L1411.48 693.224 L1412.04 693.224 L1412.6 693.224 L1413.16 693.224 L1413.72 693.224 L1414.28 693.224 L1414.84 693.224 L1415.4 693.224 L1415.95 693.224 L1416.51 693.224 L1417.07 693.224 L1417.63 693.224 L1418.19 693.224 L1418.75 693.224 L1419.31 693.224 L1419.87 693.224 L1420.43 693.224 L1420.99 693.224 L1421.55 693.224 L1422.11 693.224 L1422.67 693.224 L1423.23 693.224 L1423.78 693.224 L1424.34 693.224 L1424.9 693.224 L1425.46 693.224 L1426.02 693.224 L1426.58 693.224 L1427.14 693.224 L1427.7 693.224 L1428.26 693.224 L1428.82 693.224 L1429.38 693.224 L1429.94 693.224 L1430.5 693.224 L1431.05 693.224 L1431.61 693.224 L1432.17 693.224 L1432.73 693.224 L1433.29 693.224 L1433.85 693.224 L1434.41 693.224 L1434.97 693.224 L1435.53 693.224 L1436.09 693.224 L1436.65 693.224 L1437.21 693.224 L1437.77 693.224 L1438.33 693.224 L1438.88 693.224 L1439.44 693.224 L1440 693.224 L1440.56 693.224 L1441.12 693.224 L1441.68 693.224 L1442.24 693.224 L1442.8 693.224 L1443.36 693.224 L1443.92 693.224 L1444.48 693.224 L1445.04 693.224 L1445.6 693.224 L1446.15 693.224 L1446.71 693.224 L1447.27 693.224 L1447.83 693.224 L1448.39 693.224 L1448.95 693.224 L1449.51 693.224 L1450.07 693.224 L1450.63 693.224 L1451.19 693.224 L1451.75 693.224 L1452.31 693.224 L1452.87 693.224 L1453.42 693.224 L1453.98 693.224 L1454.54 693.224 L1455.1 693.224 L1455.66 693.224 L1456.22 693.224 L1456.78 693.224 L1457.34 693.224 L1457.9 693.224 L1458.46 693.224 L1459.02 693.224 L1459.58 693.224 L1460.14 693.224 L1460.7 693.224 L1461.25 693.224 L1461.81 693.224 L1462.37 693.224 L1462.93 693.224 L1463.49 693.224 L1464.05 693.224 L1464.61 693.224 L1465.17 693.224 L1465.73 693.224 L1466.29 693.224 L1466.85 693.224 L1467.41 693.224 L1467.97 693.224 L1468.52 693.224 L1469.08 693.224 L1469.64 693.224 L1470.2 693.224 L1470.76 693.224 L1471.32 693.224 L1471.88 693.224 L1472.44 693.224 L1473 693.224 L1473.56 693.224 L1474.12 693.224 L1474.68 693.224 L1475.24 693.224 L1475.79 693.224 L1476.35 693.224 L1476.91 693.224 L1477.47 693.224 L1478.03 693.224 L1478.59 693.224 L1479.15 693.224 L1479.71 693.224 L1480.27 693.224 L1480.83 693.224 L1481.39 693.224 L1481.95 693.224 L1482.51 693.224 L1483.07 693.224 L1483.62 693.224 L1484.18 693.224 L1484.74 693.224 L1485.3 693.224 L1485.86 693.224 L1486.42 693.224 L1486.98 693.224 L1487.54 693.224 L1488.1 693.224 L1488.66 693.224 L1489.22 693.224 L1489.78 693.224 L1490.34 693.224 L1490.89 693.224 L1491.45 693.224 L1492.01 693.224 L1492.57 693.224 L1493.13 693.224 L1493.69 693.224 L1494.25 693.224 L1494.81 693.224 L1495.37 693.224 L1495.93 693.224 L1496.49 693.224 L1497.05 693.224 L1497.61 693.224 L1498.16 693.224 L1498.72 693.224 L1499.28 693.224 L1499.84 693.224 L1500.4 693.224 L1500.96 693.224 L1501.52 693.224 L1502.08 693.224 L1502.64 693.224 L1503.2 693.224 L1503.76 693.224 L1504.32 693.224 L1504.88 693.224 L1505.44 693.224 L1505.99 693.224 L1506.55 693.224 L1507.11 693.224 L1507.67 693.224 L1508.23 693.224 L1508.79 693.224 L1509.35 693.224 L1509.91 693.224 L1510.47 693.224 L1511.03 693.224 L1511.59 693.224 L1512.15 693.224 L1512.71 693.224 L1513.26 693.224 L1513.82 693.224 L1514.38 693.224 L1514.94 693.224 L1515.5 693.224 L1516.06 693.224 L1516.62 693.224 L1517.18 693.224 L1517.74 693.224 L1518.3 693.224 L1518.86 693.224 L1519.42 693.224 L1519.98 693.224 L1520.53 693.224 L1521.09 693.224 L1521.65 693.224 L1522.21 693.224 L1522.77 693.224 L1523.33 693.224 L1523.89 693.224 L1524.45 693.224 L1525.01 693.224 L1525.57 693.224 L1526.13 693.224 L1526.69 693.224 L1527.25 693.224 L1527.81 693.224 L1528.36 693.224 L1528.92 693.224 L1529.48 693.224 L1530.04 693.224 L1530.6 693.224 L1531.16 693.224 L1531.72 693.224 L1532.28 693.224 L1532.84 693.224 L1533.4 693.224 L1533.96 693.224 L1534.52 693.224 L1535.08 693.224 L1535.63 693.224 L1536.19 693.224 L1536.75 693.224 L1537.31 693.224 L1537.87 693.224 L1538.43 693.224 L1538.99 693.224 L1539.55 693.224 L1540.11 693.224 L1540.67 693.224 L1541.23 693.224 L1541.79 693.224 L1542.35 693.224 L1542.9 693.224 L1543.46 693.224 L1544.02 693.224 L1544.58 693.224 L1545.14 693.224 L1545.7 693.224 L1546.26 693.224 L1546.82 693.224 L1547.38 693.224 L1547.94 693.224 L1548.5 693.224 L1549.06 693.224 L1549.62 693.224 L1550.18 693.224 L1550.73 693.224 L1551.29 693.224 L1551.85 693.224 L1552.41 693.224 L1552.97 693.224 L1553.53 693.224 L1554.09 693.224 L1554.65 693.224 L1555.21 693.224 L1555.77 693.224 L1556.33 693.224 L1556.89 693.224 L1557.45 693.224 L1558 693.224 L1558.56 693.224 L1559.12 693.224 L1559.68 693.224 L1560.24 693.224 L1560.8 693.224 L1561.36 693.224 L1561.92 693.224 L1562.48 693.224 L1563.04 693.224 L1563.6 693.224 L1564.16 693.224 L1564.72 693.224 L1565.28 693.224 L1565.83 693.224 L1566.39 693.224 L1566.95 693.224 L1567.51 693.224 L1568.07 693.224 L1568.63 693.224 L1569.19 693.224 L1569.75 693.224 L1570.31 693.224 L1570.87 693.224 L1571.43 693.224 L1571.99 693.224 L1572.55 693.224 L1573.1 693.224 L1573.66 693.224 L1574.22 693.224 L1574.78 693.224 L1575.34 693.224 L1575.9 693.224 L1576.46 693.224 L1577.02 693.224 L1577.58 693.224 L1578.14 693.224 L1578.7 693.224 L1579.26 693.224 L1579.82 693.224 L1580.37 693.224 L1580.93 693.224 L1581.49 693.224 L1582.05 693.224 L1582.61 693.224 L1583.17 693.224 L1583.73 693.224 L1584.29 693.224 L1584.85 693.224 L1585.41 693.224 L1585.97 693.224 L1586.53 693.224 L1587.09 693.224 L1587.65 693.224 L1588.2 693.224 L1588.76 693.224 L1589.32 693.224 L1589.88 693.224 L1590.44 693.224 L1591 693.224 L1591.56 693.224 L1592.12 693.224 L1592.68 693.224 L1593.24 693.224 L1593.8 693.224 L1594.36 693.224 L1594.92 693.224 L1595.47 693.224 L1596.03 693.224 L1596.59 693.224 L1597.15 693.224 L1597.71 693.224 L1598.27 693.224 L1598.83 693.224 L1599.39 693.224 L1599.95 693.224 L1600.51 693.224 L1601.07 693.224 L1601.63 693.224 L1602.19 693.224 L1602.74 693.224 L1603.3 693.224 L1603.86 693.224 L1604.42 693.224 L1604.98 693.224 L1605.54 693.224 L1606.1 693.224 L1606.66 693.224 L1607.22 693.224 L1607.78 693.224 L1608.34 693.224 L1608.9 693.224 L1609.46 693.224 L1610.02 693.224 L1610.57 693.224 L1611.13 693.224 L1611.69 693.224 L1612.25 693.224 L1612.81 693.224 L1613.37 693.224 L1613.93 693.224 L1614.49 693.224 L1615.05 693.224 L1615.61 693.224 L1616.17 693.224 L1616.73 693.224 L1617.29 693.224 L1617.84 693.224 L1618.4 693.224 L1618.96 693.224 L1619.52 693.224 L1620.08 693.224 L1620.64 693.224 L1621.2 693.224 L1621.76 693.224 L1622.32 693.224 L1622.88 693.224 L1623.44 693.224 L1624 693.224 L1624.56 693.224 L1625.11 693.224 L1625.67 693.224 L1626.23 693.224 L1626.79 693.224 L1627.35 693.224 L1627.91 693.224 L1628.47 693.224 L1629.03 693.224 L1629.59 693.224 L1630.15 693.224 L1630.71 693.224 L1631.27 693.224 L1631.83 693.224 L1632.39 693.224 L1632.94 693.224 L1633.5 693.224 L1634.06 693.224 L1634.62 693.224 L1635.18 693.224 L1635.74 693.224 L1636.3 693.224 L1636.86 693.224 L1637.42 693.224 L1637.98 693.224 L1638.54 693.224 L1639.1 693.224 L1639.66 693.224 L1640.21 693.224 L1640.77 693.224 L1641.33 693.224 L1641.89 693.224 L1642.45 693.224 L1643.01 693.224 L1643.57 693.224 L1644.13 693.224 L1644.69 693.224 L1645.25 693.224 L1645.81 693.224 L1646.37 693.224 L1646.93 693.224 L1647.48 693.224 L1648.04 693.224 L1648.6 693.224 L1649.16 693.224 L1649.72 693.224 L1650.28 693.224 L1650.84 693.224 L1651.4 693.224 L1651.96 693.224 L1652.52 693.224 L1653.08 693.224 L1653.64 693.224 L1654.2 693.224 L1654.76 693.224 L1655.31 693.224 L1655.87 693.224 L1656.43 693.224 L1656.99 693.224 L1657.55 693.224 L1658.11 693.224 L1658.67 693.224 L1659.23 693.224 L1659.79 693.224 L1660.35 693.224 L1660.91 693.224 L1661.47 693.224 L1662.03 693.224 L1662.58 693.224 L1663.14 693.224 L1663.7 693.224 L1664.26 693.224 L1664.82 693.224 L1665.38 693.224 L1665.94 693.224 L1666.5 693.224 L1667.06 693.224 L1667.62 693.224 L1668.18 693.224 L1668.74 693.224 L1669.3 693.224 L1669.85 693.224 L1670.41 693.224 L1670.97 693.224 L1671.53 693.224 L1672.09 693.224 L1672.65 693.224 L1673.21 693.224 L1673.77 693.224 L1674.33 693.224 L1674.89 693.224 L1675.45 693.224 L1676.01 693.224 L1676.57 693.224 L1677.13 693.224 L1677.68 693.224 L1678.24 693.224 L1678.8 693.224 L1679.36 693.224 L1679.92 693.224 L1680.48 693.224 L1681.04 693.224 L1681.6 693.224 L1682.16 693.224 L1682.72 693.224 L1683.28 693.224 L1683.84 693.224 L1684.4 693.224 L1684.95 693.224 L1685.51 693.224 L1686.07 693.224 L1686.63 693.224 L1687.19 693.224 L1687.75 693.224 L1688.31 693.224 L1688.87 693.224 L1689.43 693.224 L1689.99 693.224 L1690.55 693.224 L1691.11 693.224 L1691.67 693.224 L1692.23 693.224 L1692.78 693.224 L1693.34 693.224 L1693.9 693.224 L1694.46 693.224 L1695.02 693.224 L1695.58 693.224 L1696.14 693.224 L1696.7 693.224 L1697.26 693.224 L1697.82 693.224 L1698.38 693.224 L1698.94 693.224 L1699.5 693.224 L1700.05 693.224 L1700.61 693.224 L1701.17 693.224 L1701.73 693.224 L1702.29 693.224 L1702.85 693.224 L1703.41 693.224 L1703.97 693.224 L1704.53 693.224 L1705.09 693.224 L1705.65 693.224 L1706.21 693.224 L1706.77 693.224 L1707.32 693.224 L1707.88 693.224 L1708.44 693.224 L1709 693.224 L1709.56 693.224 L1710.12 693.224 L1710.68 693.224 L1711.24 693.224 L1711.8 693.224 L1712.36 693.224 L1712.92 693.224 L1713.48 693.224 L1714.04 693.224 L1714.6 693.224 L1715.15 693.224 L1715.71 693.224 L1716.27 693.224 L1716.83 693.224 L1717.39 693.224 L1717.95 693.224 L1718.51 693.224 L1719.07 693.224 L1719.63 693.224 L1720.19 693.224 L1720.75 693.224 L1721.31 693.224 L1721.87 693.224 L1722.42 693.224 L1722.98 693.224 L1723.54 693.224 L1724.1 693.224 L1724.66 693.224 L1725.22 693.224 L1725.78 693.224 L1726.34 693.224 L1726.9 693.224 L1727.46 693.224 L1728.02 693.224 L1728.58 693.224 L1729.14 693.224 L1729.69 693.224 L1730.25 693.224 L1730.81 693.224 L1731.37 693.224 L1731.93 693.224 L1732.49 693.224 L1733.05 693.224 L1733.61 693.224 L1734.17 693.224 L1734.73 693.224 L1735.29 693.224 L1735.85 693.224 L1736.41 693.224 L1736.97 693.224 L1737.52 693.224 L1738.08 693.224 L1738.64 693.224 L1739.2 693.224 L1739.76 693.224 L1740.32 693.224 L1740.88 693.224 L1741.44 693.224 L1742 693.224 L1742.56 693.224 L1743.12 693.224 L1743.68 693.224 L1744.24 693.224 L1744.79 693.224 L1745.35 693.224 L1745.91 693.224 L1746.47 693.224 L1747.03 693.224 L1747.59 693.224 L1748.15 693.224 L1748.71 693.224 L1749.27 693.224 L1749.83 693.224 L1750.39 693.224 L1750.95 693.224 L1751.51 693.224 L1752.06 693.224 L1752.62 693.224 L1753.18 693.224 L1753.74 693.224 L1754.3 693.224 L1754.86 693.224 L1755.42 693.224 L1755.98 693.224 L1756.54 693.224 L1757.1 693.224 L1757.66 693.224 L1758.22 693.224 L1758.78 693.224 L1759.34 693.224 L1759.89 693.224 L1760.45 693.224 L1761.01 693.224 L1761.57 693.224 L1762.13 693.224 L1762.69 693.224 L1763.25 693.224 L1763.81 693.224 L1764.37 693.224 L1764.93 693.224 L1765.49 693.224 L1766.05 693.224 L1766.61 693.224 L1767.16 693.224 L1767.72 693.224 L1768.28 693.224 L1768.84 693.224 L1769.4 693.224 L1769.96 693.224 L1770.52 693.224 L1771.08 693.224 L1771.64 693.224 L1772.2 693.224 L1772.76 693.224 L1773.32 693.224 L1773.88 693.224 L1774.43 693.224 L1774.99 693.224 L1775.55 693.224 L1776.11 693.224 L1776.67 693.224 L1777.23 693.224 L1777.79 693.224 L1778.35 693.224 L1778.91 693.224 L1779.47 693.224 L1780.03 693.224 L1780.59 693.224 L1781.15 693.224 L1781.71 693.224 L1782.26 693.224 L1782.82 693.224 L1783.38 693.224 L1783.94 693.224 L1784.5 693.224 L1785.06 693.224 L1785.62 693.224 L1786.18 693.224 L1786.74 693.224 L1787.3 693.224 L1787.86 693.224 L1788.42 693.224 L1788.98 693.224 L1789.53 693.224 L1790.09 693.224 L1790.65 693.224 L1791.21 693.224 L1791.77 693.224 L1792.33 693.224 L1792.89 693.224 L1793.45 693.224 L1794.01 693.224 L1794.57 693.224 L1795.13 693.224 L1795.69 693.224 L1796.25 693.224 L1796.8 693.224 L1797.36 693.224 L1797.92 693.224 L1798.48 693.224 L1799.04 693.224 L1799.6 693.224 L1800.16 693.224 L1800.72 693.224 L1801.28 693.224 L1801.84 693.224 L1802.4 693.224 L1802.96 693.224 L1803.52 693.224 L1804.08 693.224 L1804.63 693.224 L1805.19 693.224 L1805.75 693.224 L1806.31 693.224 L1806.87 693.224 L1807.43 693.224 L1807.99 693.224 L1808.55 693.224 L1809.11 693.224 L1809.67 693.224 L1810.23 693.224 L1810.79 693.224 L1811.35 693.224 L1811.9 693.224 L1812.46 693.224 L1813.02 693.224 L1813.58 693.224 L1814.14 693.224 L1814.7 693.224 L1815.26 693.224 L1815.82 693.224 L1816.38 693.224 L1816.94 693.224 L1817.5 693.224 L1818.06 693.224 L1818.62 693.224 L1819.18 693.224 L1819.73 693.224 L1820.29 693.224 L1820.85 693.224 L1821.41 693.224 L1821.97 693.224 L1822.53 693.224 L1823.09 693.224 L1823.65 693.224 L1824.21 693.224 L1824.77 693.224 L1825.33 693.224 L1825.89 693.224 L1826.45 693.224 L1827 693.224 L1827.56 693.224 L1828.12 693.224 L1828.68 693.224 L1829.24 693.224 L1829.8 693.224 L1830.36 693.224 L1830.92 693.224 L1831.48 693.224 L1832.04 693.224 L1832.6 693.224 L1833.16 693.224 L1833.72 693.224 L1834.27 693.224 L1834.83 693.224 L1835.39 693.224 L1835.95 693.224 L1836.51 693.224 L1837.07 693.224 L1837.63 693.224 L1838.19 693.224 L1838.19 682.606 L1837.63 682.606 L1837.07 682.606 L1836.51 682.606 L1835.95 682.606 L1835.39 682.606 L1834.83 682.606 L1834.27 682.606 L1833.72 682.606 L1833.16 682.606 L1832.6 682.606 L1832.04 682.606 L1831.48 682.606 L1830.92 682.606 L1830.36 682.606 L1829.8 682.606 L1829.24 682.606 L1828.68 682.606 L1828.12 682.606 L1827.56 682.606 L1827 682.606 L1826.45 682.606 L1825.89 682.606 L1825.33 682.606 L1824.77 682.606 L1824.21 682.606 L1823.65 682.606 L1823.09 682.606 L1822.53 682.606 L1821.97 682.606 L1821.41 682.606 L1820.85 682.606 L1820.29 682.606 L1819.73 682.606 L1819.18 682.606 L1818.62 682.606 L1818.06 682.606 L1817.5 682.606 L1816.94 682.606 L1816.38 682.606 L1815.82 682.606 L1815.26 682.606 L1814.7 682.606 L1814.14 682.606 L1813.58 682.606 L1813.02 682.606 L1812.46 682.606 L1811.9 682.606 L1811.35 682.606 L1810.79 682.606 L1810.23 682.606 L1809.67 682.606 L1809.11 682.606 L1808.55 682.606 L1807.99 682.606 L1807.43 682.606 L1806.87 682.606 L1806.31 682.606 L1805.75 682.606 L1805.19 682.606 L1804.63 682.606 L1804.08 682.606 L1803.52 682.606 L1802.96 682.606 L1802.4 682.606 L1801.84 682.606 L1801.28 682.606 L1800.72 682.606 L1800.16 682.606 L1799.6 682.606 L1799.04 682.606 L1798.48 682.606 L1797.92 682.606 L1797.36 682.606 L1796.8 682.606 L1796.25 682.606 L1795.69 682.606 L1795.13 682.606 L1794.57 682.606 L1794.01 682.606 L1793.45 682.606 L1792.89 682.606 L1792.33 682.606 L1791.77 682.606 L1791.21 682.606 L1790.65 682.606 L1790.09 682.606 L1789.53 682.606 L1788.98 682.606 L1788.42 682.606 L1787.86 682.606 L1787.3 682.606 L1786.74 682.606 L1786.18 682.606 L1785.62 682.606 L1785.06 682.606 L1784.5 682.606 L1783.94 682.606 L1783.38 682.606 L1782.82 682.606 L1782.26 682.606 L1781.71 682.606 L1781.15 682.606 L1780.59 682.606 L1780.03 682.606 L1779.47 682.606 L1778.91 682.606 L1778.35 682.606 L1777.79 682.606 L1777.23 682.606 L1776.67 682.606 L1776.11 682.606 L1775.55 682.606 L1774.99 682.606 L1774.43 682.606 L1773.88 682.606 L1773.32 682.606 L1772.76 682.606 L1772.2 682.606 L1771.64 682.606 L1771.08 682.606 L1770.52 682.606 L1769.96 682.606 L1769.4 682.606 L1768.84 682.606 L1768.28 682.606 L1767.72 682.606 L1767.16 682.606 L1766.61 682.606 L1766.05 682.606 L1765.49 682.606 L1764.93 682.606 L1764.37 682.606 L1763.81 682.606 L1763.25 682.606 L1762.69 682.606 L1762.13 682.606 L1761.57 682.606 L1761.01 682.606 L1760.45 682.606 L1759.89 682.606 L1759.34 682.606 L1758.78 682.606 L1758.22 682.606 L1757.66 682.606 L1757.1 682.606 L1756.54 682.606 L1755.98 682.606 L1755.42 682.606 L1754.86 682.606 L1754.3 682.606 L1753.74 682.606 L1753.18 682.606 L1752.62 682.606 L1752.06 682.606 L1751.51 682.606 L1750.95 682.606 L1750.39 682.606 L1749.83 682.606 L1749.27 682.606 L1748.71 682.606 L1748.15 682.606 L1747.59 682.606 L1747.03 682.606 L1746.47 682.606 L1745.91 682.606 L1745.35 682.606 L1744.79 682.606 L1744.24 682.606 L1743.68 682.606 L1743.12 682.606 L1742.56 682.606 L1742 682.606 L1741.44 682.606 L1740.88 682.606 L1740.32 682.606 L1739.76 682.606 L1739.2 682.606 L1738.64 682.606 L1738.08 682.606 L1737.52 682.606 L1736.97 682.606 L1736.41 682.606 L1735.85 682.606 L1735.29 682.606 L1734.73 682.606 L1734.17 682.606 L1733.61 682.606 L1733.05 682.606 L1732.49 682.606 L1731.93 682.606 L1731.37 682.606 L1730.81 682.606 L1730.25 682.606 L1729.69 682.606 L1729.14 682.606 L1728.58 682.606 L1728.02 682.606 L1727.46 682.606 L1726.9 682.606 L1726.34 682.606 L1725.78 682.606 L1725.22 682.606 L1724.66 682.606 L1724.1 682.606 L1723.54 682.606 L1722.98 682.606 L1722.42 682.606 L1721.87 682.606 L1721.31 682.606 L1720.75 682.606 L1720.19 682.606 L1719.63 682.606 L1719.07 682.606 L1718.51 682.606 L1717.95 682.606 L1717.39 682.606 L1716.83 682.606 L1716.27 682.606 L1715.71 682.606 L1715.15 682.606 L1714.6 682.606 L1714.04 682.606 L1713.48 682.606 L1712.92 682.606 L1712.36 682.606 L1711.8 682.606 L1711.24 682.606 L1710.68 682.606 L1710.12 682.606 L1709.56 682.606 L1709 682.606 L1708.44 682.606 L1707.88 682.606 L1707.32 682.606 L1706.77 682.606 L1706.21 682.606 L1705.65 682.606 L1705.09 682.606 L1704.53 682.606 L1703.97 682.606 L1703.41 682.606 L1702.85 682.606 L1702.29 682.606 L1701.73 682.606 L1701.17 682.606 L1700.61 682.606 L1700.05 682.606 L1699.5 682.606 L1698.94 682.606 L1698.38 682.606 L1697.82 682.606 L1697.26 682.606 L1696.7 682.606 L1696.14 682.606 L1695.58 682.606 L1695.02 682.606 L1694.46 682.606 L1693.9 682.606 L1693.34 682.606 L1692.78 682.606 L1692.23 682.606 L1691.67 682.606 L1691.11 682.606 L1690.55 682.606 L1689.99 682.606 L1689.43 682.606 L1688.87 682.606 L1688.31 682.606 L1687.75 682.606 L1687.19 682.606 L1686.63 682.606 L1686.07 682.606 L1685.51 682.606 L1684.95 682.606 L1684.4 682.606 L1683.84 682.606 L1683.28 682.606 L1682.72 682.606 L1682.16 682.606 L1681.6 682.606 L1681.04 682.606 L1680.48 682.606 L1679.92 682.606 L1679.36 682.606 L1678.8 682.606 L1678.24 682.606 L1677.68 682.606 L1677.13 682.606 L1676.57 682.606 L1676.01 682.606 L1675.45 682.606 L1674.89 682.606 L1674.33 682.606 L1673.77 682.606 L1673.21 682.606 L1672.65 682.606 L1672.09 682.606 L1671.53 682.606 L1670.97 682.606 L1670.41 682.606 L1669.85 682.606 L1669.3 682.606 L1668.74 682.606 L1668.18 682.606 L1667.62 682.606 L1667.06 682.606 L1666.5 682.606 L1665.94 682.606 L1665.38 682.606 L1664.82 682.606 L1664.26 682.606 L1663.7 682.606 L1663.14 682.606 L1662.58 682.606 L1662.03 682.606 L1661.47 682.606 L1660.91 682.606 L1660.35 682.606 L1659.79 682.606 L1659.23 682.606 L1658.67 682.606 L1658.11 682.606 L1657.55 682.606 L1656.99 682.606 L1656.43 682.606 L1655.87 682.606 L1655.31 682.606 L1654.76 682.606 L1654.2 682.606 L1653.64 682.606 L1653.08 682.606 L1652.52 682.606 L1651.96 682.606 L1651.4 682.606 L1650.84 682.606 L1650.28 682.606 L1649.72 682.606 L1649.16 682.606 L1648.6 682.606 L1648.04 682.606 L1647.48 682.606 L1646.93 682.606 L1646.37 682.606 L1645.81 682.606 L1645.25 682.606 L1644.69 682.606 L1644.13 682.606 L1643.57 682.606 L1643.01 682.606 L1642.45 682.606 L1641.89 682.606 L1641.33 682.606 L1640.77 682.606 L1640.21 682.606 L1639.66 682.606 L1639.1 682.606 L1638.54 682.606 L1637.98 682.606 L1637.42 682.606 L1636.86 682.606 L1636.3 682.606 L1635.74 682.606 L1635.18 682.606 L1634.62 682.606 L1634.06 682.606 L1633.5 682.606 L1632.94 682.606 L1632.39 682.606 L1631.83 682.606 L1631.27 682.606 L1630.71 682.606 L1630.15 682.606 L1629.59 682.606 L1629.03 682.606 L1628.47 682.606 L1627.91 682.606 L1627.35 682.606 L1626.79 682.606 L1626.23 682.606 L1625.67 682.606 L1625.11 682.606 L1624.56 682.606 L1624 682.606 L1623.44 682.606 L1622.88 682.606 L1622.32 682.606 L1621.76 682.606 L1621.2 682.606 L1620.64 682.606 L1620.08 682.606 L1619.52 682.606 L1618.96 682.606 L1618.4 682.606 L1617.84 682.606 L1617.29 682.606 L1616.73 682.606 L1616.17 682.606 L1615.61 682.606 L1615.05 682.606 L1614.49 682.606 L1613.93 682.606 L1613.37 682.606 L1612.81 682.606 L1612.25 682.606 L1611.69 682.606 L1611.13 682.606 L1610.57 682.606 L1610.02 682.606 L1609.46 682.606 L1608.9 682.606 L1608.34 682.606 L1607.78 682.606 L1607.22 682.606 L1606.66 682.606 L1606.1 682.606 L1605.54 682.606 L1604.98 682.606 L1604.42 682.606 L1603.86 682.606 L1603.3 682.606 L1602.74 682.606 L1602.19 682.606 L1601.63 682.606 L1601.07 682.606 L1600.51 682.606 L1599.95 682.606 L1599.39 682.606 L1598.83 682.606 L1598.27 682.606 L1597.71 682.606 L1597.15 682.606 L1596.59 682.606 L1596.03 682.606 L1595.47 682.606 L1594.92 682.606 L1594.36 682.606 L1593.8 682.606 L1593.24 682.606 L1592.68 682.606 L1592.12 682.606 L1591.56 682.606 L1591 682.606 L1590.44 682.606 L1589.88 682.606 L1589.32 682.606 L1588.76 682.606 L1588.2 682.606 L1587.65 682.606 L1587.09 682.606 L1586.53 682.606 L1585.97 682.606 L1585.41 682.606 L1584.85 682.606 L1584.29 682.606 L1583.73 682.606 L1583.17 682.606 L1582.61 682.606 L1582.05 682.606 L1581.49 682.606 L1580.93 682.606 L1580.37 682.606 L1579.82 682.606 L1579.26 682.606 L1578.7 682.606 L1578.14 682.606 L1577.58 682.606 L1577.02 682.606 L1576.46 682.606 L1575.9 682.606 L1575.34 682.606 L1574.78 682.606 L1574.22 682.606 L1573.66 682.606 L1573.1 682.606 L1572.55 682.606 L1571.99 682.606 L1571.43 682.606 L1570.87 682.606 L1570.31 682.606 L1569.75 682.606 L1569.19 682.606 L1568.63 682.606 L1568.07 682.606 L1567.51 682.606 L1566.95 682.606 L1566.39 682.606 L1565.83 682.606 L1565.28 682.606 L1564.72 682.606 L1564.16 682.606 L1563.6 682.606 L1563.04 682.606 L1562.48 682.606 L1561.92 682.606 L1561.36 682.606 L1560.8 682.606 L1560.24 682.606 L1559.68 682.606 L1559.12 682.606 L1558.56 682.606 L1558 682.606 L1557.45 682.606 L1556.89 682.606 L1556.33 682.606 L1555.77 682.606 L1555.21 682.606 L1554.65 682.606 L1554.09 682.606 L1553.53 682.606 L1552.97 682.606 L1552.41 682.606 L1551.85 682.606 L1551.29 682.606 L1550.73 682.606 L1550.18 682.606 L1549.62 682.606 L1549.06 682.606 L1548.5 682.606 L1547.94 682.606 L1547.38 682.606 L1546.82 682.606 L1546.26 682.606 L1545.7 682.606 L1545.14 682.606 L1544.58 682.606 L1544.02 682.606 L1543.46 682.606 L1542.9 682.606 L1542.35 682.606 L1541.79 682.606 L1541.23 682.606 L1540.67 682.606 L1540.11 682.606 L1539.55 682.606 L1538.99 682.606 L1538.43 682.606 L1537.87 682.606 L1537.31 682.606 L1536.75 682.606 L1536.19 682.606 L1535.63 682.606 L1535.08 682.606 L1534.52 682.606 L1533.96 682.606 L1533.4 682.606 L1532.84 682.606 L1532.28 682.606 L1531.72 682.606 L1531.16 682.606 L1530.6 682.606 L1530.04 682.606 L1529.48 682.606 L1528.92 682.606 L1528.36 682.606 L1527.81 682.606 L1527.25 682.606 L1526.69 682.606 L1526.13 682.606 L1525.57 682.606 L1525.01 682.606 L1524.45 682.606 L1523.89 682.606 L1523.33 682.606 L1522.77 682.606 L1522.21 682.606 L1521.65 682.606 L1521.09 682.606 L1520.53 682.606 L1519.98 682.606 L1519.42 682.606 L1518.86 682.606 L1518.3 682.606 L1517.74 682.606 L1517.18 682.606 L1516.62 682.606 L1516.06 682.606 L1515.5 682.606 L1514.94 682.606 L1514.38 682.606 L1513.82 682.606 L1513.26 682.606 L1512.71 682.606 L1512.15 682.606 L1511.59 682.606 L1511.03 682.606 L1510.47 682.606 L1509.91 682.606 L1509.35 682.606 L1508.79 682.606 L1508.23 682.606 L1507.67 682.606 L1507.11 682.606 L1506.55 682.606 L1505.99 682.606 L1505.44 682.606 L1504.88 682.606 L1504.32 682.606 L1503.76 682.606 L1503.2 682.606 L1502.64 682.606 L1502.08 682.606 L1501.52 682.606 L1500.96 682.606 L1500.4 682.606 L1499.84 682.606 L1499.28 682.606 L1498.72 682.606 L1498.16 682.606 L1497.61 682.606 L1497.05 682.606 L1496.49 682.606 L1495.93 682.606 L1495.37 682.606 L1494.81 682.606 L1494.25 682.606 L1493.69 682.606 L1493.13 682.606 L1492.57 682.606 L1492.01 682.606 L1491.45 682.606 L1490.89 682.606 L1490.34 682.606 L1489.78 682.606 L1489.22 682.606 L1488.66 682.606 L1488.1 682.606 L1487.54 682.606 L1486.98 682.606 L1486.42 682.606 L1485.86 682.606 L1485.3 682.606 L1484.74 682.606 L1484.18 682.606 L1483.62 682.606 L1483.07 682.606 L1482.51 682.606 L1481.95 682.606 L1481.39 682.606 L1480.83 682.606 L1480.27 682.606 L1479.71 682.606 L1479.15 682.606 L1478.59 682.606 L1478.03 682.606 L1477.47 682.606 L1476.91 682.606 L1476.35 682.606 L1475.79 682.606 L1475.24 682.606 L1474.68 682.606 L1474.12 682.606 L1473.56 682.606 L1473 682.606 L1472.44 682.606 L1471.88 682.606 L1471.32 682.606 L1470.76 682.606 L1470.2 682.606 L1469.64 682.606 L1469.08 682.606 L1468.52 682.606 L1467.97 682.606 L1467.41 682.606 L1466.85 682.606 L1466.29 682.606 L1465.73 682.606 L1465.17 682.606 L1464.61 682.606 L1464.05 682.606 L1463.49 682.606 L1462.93 682.606 L1462.37 682.606 L1461.81 682.606 L1461.25 682.606 L1460.7 682.606 L1460.14 682.606 L1459.58 682.606 L1459.02 682.606 L1458.46 682.606 L1457.9 682.606 L1457.34 682.606 L1456.78 682.606 L1456.22 682.606 L1455.66 682.606 L1455.1 682.606 L1454.54 682.606 L1453.98 682.606 L1453.42 682.606 L1452.87 682.606 L1452.31 682.606 L1451.75 682.606 L1451.19 682.606 L1450.63 682.606 L1450.07 682.606 L1449.51 682.606 L1448.95 682.606 L1448.39 682.606 L1447.83 682.606 L1447.27 682.606 L1446.71 682.606 L1446.15 682.606 L1445.6 682.606 L1445.04 682.606 L1444.48 682.606 L1443.92 682.606 L1443.36 682.606 L1442.8 682.606 L1442.24 682.606 L1441.68 682.606 L1441.12 682.606 L1440.56 682.606 L1440 682.606 L1439.44 682.606 L1438.88 682.606 L1438.33 682.606 L1437.77 682.606 L1437.21 682.606 L1436.65 682.606 L1436.09 682.606 L1435.53 682.606 L1434.97 682.606 L1434.41 682.606 L1433.85 682.606 L1433.29 682.606 L1432.73 682.606 L1432.17 682.606 L1431.61 682.606 L1431.05 682.606 L1430.5 682.606 L1429.94 682.606 L1429.38 682.606 L1428.82 682.606 L1428.26 682.606 L1427.7 682.606 L1427.14 682.606 L1426.58 682.606 L1426.02 682.606 L1425.46 682.606 L1424.9 682.606 L1424.34 682.606 L1423.78 682.606 L1423.23 682.606 L1422.67 682.606 L1422.11 682.606 L1421.55 682.606 L1420.99 682.606 L1420.43 682.606 L1419.87 682.606 L1419.31 682.606 L1418.75 682.606 L1418.19 682.606 L1417.63 682.606 L1417.07 682.606 L1416.51 682.606 L1415.95 682.606 L1415.4 682.606 L1414.84 682.606 L1414.28 682.606 L1413.72 682.606 L1413.16 682.606 L1412.6 682.606 L1412.04 682.606 L1411.48 682.606 L1410.92 682.606 L1410.36 682.606 L1409.8 682.606 L1409.24 682.606 L1408.68 682.606 L1408.13 682.606 L1407.57 682.606 L1407.01 682.606 L1406.45 682.606 L1405.89 682.606 L1405.33 682.606 L1404.77 682.606 L1404.21 682.606 L1403.65 682.606 L1403.09 682.606 L1402.53 682.606 L1401.97 682.606 L1401.41 682.606 L1400.86 682.606 L1400.3 682.606 L1399.74 682.606 L1399.18 682.606 L1398.62 682.606 L1398.06 682.606 L1397.5 682.606 L1396.94 682.606 L1396.38 682.606 L1395.82 682.606 L1395.26 682.606 L1394.7 682.606 L1394.14 682.606 L1393.58 682.606 L1393.03 682.606 L1392.47 682.606 L1391.91 682.606 L1391.35 682.606 L1390.79 682.606 L1390.23 682.606 L1389.67 682.606 L1389.11 682.606 L1388.55 682.606 L1387.99 682.606 L1387.43 682.606 L1386.87 682.606 L1386.31 682.606 L1385.76 682.606 L1385.2 682.606 L1384.64 682.606 L1384.08 682.606 L1383.52 682.606 L1382.96 682.606 L1382.4 682.606 L1381.84 682.606 L1381.28 682.606 L1380.72 682.606 L1380.16 682.606 L1379.6 682.606 L1379.04 682.606 L1378.49 682.606 L1377.93 682.606 L1377.37 682.606 L1376.81 682.606 L1376.25 682.606 L1375.69 682.606 L1375.13 682.606 L1374.57 682.606 L1374.01 682.606 L1373.45 682.606 L1372.89 682.606 L1372.33 682.606 L1371.77 682.606 L1371.21 682.606 L1370.66 682.606 L1370.1 682.606 L1369.54 682.606 L1368.98 682.606 L1368.42 682.606 L1367.86 682.606 L1367.3 682.606 L1366.74 682.606 L1366.18 682.606 L1365.62 682.606 L1365.06 682.606 L1364.5 682.606 L1363.94 682.606 L1363.39 682.606 L1362.83 682.606 L1362.27 682.606 L1361.71 682.606 L1361.15 682.606 L1360.59 682.606 L1360.03 682.606 L1359.47 682.606 L1358.91 682.606 L1358.35 682.606 L1357.79 682.606 L1357.23 682.606 L1356.67 682.606 L1356.12 682.606 L1355.56 682.606 L1355 682.606 L1354.44 682.606 L1353.88 682.606 L1353.32 682.606 L1352.76 682.606 L1352.2 682.606 L1351.64 682.606 L1351.08 682.606 L1350.52 682.606 L1349.96 682.606 L1349.4 682.606 L1348.84 682.606 L1348.29 682.606 L1347.73 682.606 L1347.17 682.606 L1346.61 682.606 L1346.05 682.606 L1345.49 682.606 L1344.93 682.606 L1344.37 682.606 L1343.81 682.606 L1343.25 682.606 L1342.69 682.606 L1342.13 682.606 L1341.57 682.606 L1341.02 682.606 L1340.46 682.606 L1339.9 682.606 L1339.34 682.606 L1338.78 682.606 L1338.22 682.606 L1337.66 682.606 L1337.1 682.606 L1336.54 682.606 L1335.98 682.606 L1335.42 682.606 L1334.86 682.606 L1334.3 682.606 L1333.75 682.606 L1333.19 682.606 L1332.63 682.606 L1332.07 682.606 L1331.51 682.606 L1330.95 682.606 L1330.39 682.606 L1329.83 682.606 L1329.27 682.606 L1328.71 682.606 L1328.15 682.606 L1327.59 682.606 L1327.03 682.606 L1326.47 682.606 L1325.92 682.606 L1325.36 682.606 L1324.8 682.606 L1324.24 682.606 L1323.68 682.606 L1323.12 682.606 L1322.56 682.606 L1322 682.606 L1321.44 682.606 L1320.88 682.606 L1320.32 682.606 L1319.76 682.606 L1319.2 682.606 L1318.65 682.606 L1318.09 682.606 L1317.53 682.606 L1316.97 682.606 L1316.41 682.606 L1315.85 682.606 L1315.29 682.606 L1314.73 682.606 L1314.17 682.606 L1313.61 682.606 L1313.05 682.606 L1312.49 682.606 L1311.93 682.606 L1311.38 682.606 L1310.82 682.606 L1310.26 682.606 L1309.7 682.606 L1309.14 682.606 L1308.58 682.606 L1308.02 682.606 L1307.46 682.606 L1306.9 682.606 L1306.34 682.606 L1305.78 682.606 L1305.22 682.606 L1304.66 682.606 L1304.1 682.606 L1303.55 682.606 L1302.99 682.606 L1302.43 682.606 L1301.87 682.606 L1301.31 682.606 L1300.75 682.606 L1300.19 682.606 L1299.63 682.606 L1299.07 682.606 L1298.51 682.606 L1297.95 682.606 L1297.39 682.606 L1296.83 682.606 L1296.28 682.606 L1295.72 682.606 L1295.16 682.606 L1294.6 682.606 L1294.04 682.606 L1293.48 682.606 L1292.92 682.606 L1292.36 682.606 L1291.8 682.606 L1291.24 682.606 L1290.68 682.606 L1290.12 682.606 L1289.56 682.606 L1289 682.606 L1288.45 682.606 L1287.89 682.606 L1287.33 682.606 L1286.77 682.606 L1286.21 682.606 L1285.65 682.606 L1285.09 682.606 L1284.53 682.606 L1283.97 682.606 L1283.41 682.606 L1282.85 682.606 L1282.29 682.606 L1281.73 682.606 L1281.18 682.606 L1280.62 682.606 L1280.06 682.606 L1279.5 682.606 L1278.94 682.606 L1278.38 682.606 L1277.82 682.606 L1277.26 682.606 L1276.7 682.606 L1276.14 682.606 L1275.58 682.606 L1275.02 682.606 L1274.46 682.606 L1273.91 682.606 L1273.35 682.606 L1272.79 682.606 L1272.23 682.606 L1271.67 682.606 L1271.11 682.606 L1270.55 682.606 L1269.99 682.606 L1269.43 682.606 L1268.87 682.606 L1268.31 682.606 L1267.75 682.606 L1267.19 682.606 L1266.63 682.606 L1266.08 682.606 L1265.52 682.606 L1264.96 682.606 L1264.4 682.606 L1263.84 682.606 L1263.28 682.606 L1262.72 682.606 L1262.16 682.606 L1261.6 682.606 L1261.04 682.606 L1260.48 682.606 L1259.92 682.606 L1259.36 682.606 L1258.81 682.606 L1258.25 682.606 L1257.69 682.606 L1257.13 682.606 L1256.57 682.606 L1256.01 682.606 L1255.45 682.606 L1254.89 682.606 L1254.33 682.606 L1253.77 682.606 L1253.21 682.606 L1252.65 682.606 L1252.09 682.606 L1251.54 682.606 L1250.98 682.606 L1250.42 682.606 L1249.86 682.606 L1249.3 682.606 L1248.74 682.606 L1248.18 682.606 L1247.62 682.606 L1247.06 682.606 L1246.5 682.606 L1245.94 682.606 L1245.38 682.606 L1244.82 682.606 L1244.26 682.606 L1243.71 682.606 L1243.15 682.606 L1242.59 682.606 L1242.03 682.606 L1241.47 682.606 L1240.91 682.606 L1240.35 682.606 L1239.79 682.606 L1239.23 682.606 L1238.67 682.606 L1238.11 682.606 L1237.55 682.606 L1236.99 682.606 L1236.44 682.606 L1235.88 682.606 L1235.32 682.606 L1234.76 682.606 L1234.2 682.606 L1233.64 682.606 L1233.08 682.606 L1232.52 682.606 L1231.96 682.606 L1231.4 682.606 L1230.84 682.606 L1230.28 682.606 L1229.72 682.606 L1229.17 682.606 L1228.61 682.606 L1228.05 682.606 L1227.49 682.606 L1226.93 682.606 L1226.37 682.606 L1225.81 682.606 L1225.25 682.606 L1224.69 682.606 L1224.13 682.606 L1223.57 682.606 L1223.01 682.606 L1222.45 682.606 L1221.89 682.606 L1221.34 682.606 L1220.78 682.606 L1220.22 682.606 L1219.66 682.606 L1219.1 682.606 L1218.54 682.606 L1217.98 682.606 L1217.42 682.606 L1216.86 682.606 L1216.3 682.606 L1215.74 682.606 L1215.18 682.606 L1214.62 682.606 L1214.07 682.606 L1213.51 682.606 L1212.95 682.606 L1212.39 682.606 L1211.83 682.606 L1211.27 682.606 L1210.71 682.606 L1210.15 682.606 L1209.59 682.606 L1209.03 682.606 L1208.47 682.606 L1207.91 682.606 L1207.35 682.606 L1206.8 682.606 L1206.24 682.606 L1205.68 682.606 L1205.12 682.606 L1204.56 682.606 L1204 682.606 L1203.44 682.606 L1202.88 682.606 L1202.32 682.606 L1201.76 682.606 L1201.2 682.606 L1200.64 682.606 L1200.08 682.606 L1199.52 682.606 L1198.97 682.606 L1198.41 682.606 L1197.85 682.606 L1197.29 682.606 L1196.73 682.606 L1196.17 682.606 L1195.61 682.606 L1195.05 682.606 L1194.49 682.606 L1193.93 682.606 L1193.37 682.606 L1192.81 682.606 L1192.25 682.606 L1191.7 682.606 L1191.14 682.606 L1190.58 682.606 L1190.02 682.606 L1189.46 682.606 L1188.9 682.606 L1188.34 682.606 L1187.78 682.606 L1187.22 682.606 L1186.66 682.606 L1186.1 682.606 L1185.54 682.606 L1184.98 682.606 L1184.43 682.606 L1183.87 682.606 L1183.31 682.606 L1182.75 682.606 L1182.19 682.606 L1181.63 682.606 L1181.07 682.606 L1180.51 682.606 L1179.95 682.606 L1179.39 682.606 L1178.83 682.606 L1178.27 682.606 L1177.71 682.606 L1177.15 682.606 L1176.6 682.606 L1176.04 682.606 L1175.48 682.606 L1174.92 682.606 L1174.36 682.606 L1173.8 682.606 L1173.24 682.606 L1172.68 682.606 L1172.12 682.606 L1171.56 682.606 L1171 682.606 L1170.44 682.606 L1169.88 682.606 L1169.33 682.606 L1168.77 682.606 L1168.21 682.606 L1167.65 682.606 L1167.09 682.606 L1166.53 682.606 L1165.97 682.606 L1165.41 682.606 L1164.85 682.606 L1164.29 682.606 L1163.73 682.606 L1163.17 682.606 L1162.61 682.606 L1162.05 682.606 L1161.5 682.606 L1160.94 682.606 L1160.38 682.606 L1159.82 682.606 L1159.26 682.606 L1158.7 682.606 L1158.14 682.606 L1157.58 682.606 L1157.02 682.606 L1156.46 682.606 L1155.9 682.606 L1155.34 682.606 L1154.78 682.606 L1154.23 682.606 L1153.67 682.606 L1153.11 682.606 L1152.55 682.606 L1151.99 682.606 L1151.43 682.606 L1150.87 682.606 L1150.31 682.606 L1149.75 682.606 L1149.19 682.606 L1148.63 682.606 L1148.07 682.606 L1147.51 682.606 L1146.96 682.606 L1146.4 682.606 L1145.84 682.606 L1145.28 682.606 L1144.72 682.606 L1144.16 682.606 L1143.6 682.606 L1143.04 682.606 L1142.48 682.606 L1141.92 682.606 L1141.36 682.606 L1140.8 682.606 L1140.24 682.606 L1139.68 682.606 L1139.13 682.606 L1138.57 682.606 L1138.01 682.606 L1137.45 682.606 L1136.89 682.606 L1136.33 682.606 L1135.77 682.606 L1135.21 682.606 L1134.65 682.606 L1134.09 682.606 L1133.53 682.606 L1132.97 682.606 L1132.41 682.606 L1131.86 682.606 L1131.3 682.606 L1130.74 682.606 L1130.18 682.606 L1129.62 682.606 L1129.06 682.606 L1128.5 682.606 L1127.94 682.606 L1127.38 682.606 L1126.82 682.606 L1126.26 682.606 L1125.7 682.606 L1125.14 682.606 L1124.59 682.606 L1124.03 682.606 L1123.47 682.606 L1122.91 682.606 L1122.35 682.606 L1121.79 682.606 L1121.23 682.606 L1120.67 682.606 L1120.11 682.606 L1119.55 682.606 L1118.99 682.606 L1118.43 682.606 L1117.87 682.606 L1117.31 682.606 L1116.76 682.606 L1116.2 682.606 L1115.64 682.606 L1115.08 682.606 L1114.52 682.606 L1113.96 682.606 L1113.4 682.606 L1112.84 682.606 L1112.28 682.606 L1111.72 682.606 L1111.16 682.606 L1110.6 682.606 L1110.04 682.606 L1109.49 682.606 L1108.93 682.606 L1108.37 682.606 L1107.81 682.606 L1107.25 682.606 L1106.69 682.606 L1106.13 682.606 L1105.57 682.606 L1105.01 682.606 L1104.45 682.606 L1103.89 682.606 L1103.33 682.606 L1102.77 682.606 L1102.22 682.606 L1101.66 682.606 L1101.1 682.606 L1100.54 682.606 L1099.98 682.606 L1099.42 682.606 L1098.86 682.606 L1098.3 682.606 L1097.74 682.606 L1097.18 682.606 L1096.62 682.606 L1096.06 682.606 L1095.5 682.606 L1094.94 682.606 L1094.39 682.606 L1093.83 682.606 L1093.27 682.606 L1092.71 682.606 L1092.15 682.606 L1091.59 682.606 L1091.03 682.606 L1090.47 682.606 L1089.91 682.606 L1089.35 682.606 L1088.79 682.606 L1088.23 682.606 L1087.67 682.606 L1087.12 682.606 L1086.56 682.606 L1086 682.606 L1085.44 682.606 L1084.88 682.606 L1084.32 682.606 L1083.76 682.606 L1083.2 682.606 L1082.64 682.606 L1082.08 682.606 L1081.52 682.606 L1080.96 682.606 L1080.4 682.606 L1079.85 682.606 L1079.29 682.606 L1078.73 682.606 L1078.17 682.606 L1077.61 682.606 L1077.05 682.606 L1076.49 682.606 L1075.93 682.606 L1075.37 682.606 L1074.81 682.606 L1074.25 682.606 L1073.69 682.606 L1073.13 682.606 L1072.57 682.606 L1072.02 682.606 L1071.46 682.606 L1070.9 682.606 L1070.34 682.606 L1069.78 682.606 L1069.22 682.606 L1068.66 682.606 L1068.1 682.606 L1067.54 682.606 L1066.98 682.606 L1066.42 682.606 L1065.86 682.606 L1065.3 682.606 L1064.75 682.606 L1064.19 682.606 L1063.63 682.606 L1063.07 682.606 L1062.51 682.606 L1061.95 682.606 L1061.39 682.606 L1060.83 682.606 L1060.27 682.606 L1059.71 682.606 L1059.15 682.606 L1058.59 682.606 L1058.03 682.606 L1057.48 682.606 L1056.92 682.606 L1056.36 682.606 L1055.8 682.606 L1055.24 682.606 L1054.68 682.606 L1054.12 682.606 L1053.56 682.606 L1053 682.606 L1052.44 682.606 L1051.88 682.606 L1051.32 682.606 L1050.76 682.606 L1050.2 682.606 L1049.65 682.606 L1049.09 682.606 L1048.53 682.606 L1047.97 682.606 L1047.41 682.606 L1046.85 682.606 L1046.29 682.606 L1045.73 682.606 L1045.17 682.606 L1044.61 682.606 L1044.05 682.606 L1043.49 682.606 L1042.93 682.606 L1042.38 682.606 L1041.82 682.606 L1041.26 682.606 L1040.7 682.606 L1040.14 682.606 L1039.58 682.606 L1039.02 682.606 L1038.46 682.606 L1037.9 682.606 L1037.34 682.606 L1036.78 682.606 L1036.22 682.606 L1035.66 682.606 L1035.1 682.606 L1034.55 682.606 L1033.99 682.606 L1033.43 682.606 L1032.87 682.606 L1032.31 682.606 L1031.75 682.606 L1031.19 682.606 L1030.63 682.606 L1030.07 682.606 L1029.51 682.606 L1028.95 682.606 L1028.39 682.606 L1027.83 682.606 L1027.28 682.606 L1026.72 682.606 L1026.16 682.606 L1025.6 682.606 L1025.04 682.606 L1024.48 682.606 L1023.92 682.606 L1023.36 682.606 L1022.8 682.606 L1022.24 682.606 L1021.68 682.606 L1021.12 682.606 L1020.56 682.606 L1020.01 682.606 L1019.45 682.606 L1018.89 682.606 L1018.33 682.606 L1017.77 682.606 L1017.21 682.606 L1016.65 682.606 L1016.09 682.606 L1015.53 682.606 L1014.97 682.606 L1014.41 682.606 L1013.85 682.606 L1013.29 682.606 L1012.73 682.606 L1012.18 682.606 L1011.62 682.606 L1011.06 682.606 L1010.5 682.606 L1009.94 682.606 L1009.38 682.606 L1008.82 682.606 L1008.26 682.606 L1007.7 682.606 L1007.14 682.606 L1006.58 682.606 L1006.02 682.606 L1005.46 682.606 L1004.91 682.606 L1004.35 682.606 L1003.79 682.606 L1003.23 682.606 L1002.67 682.606 L1002.11 682.606 L1001.55 682.606 L1000.99 682.606 L1000.43 682.606 L999.872 682.606 L999.313 682.606 L998.754 682.606 L998.194 682.606 L997.635 682.606 L997.076 682.606 L996.517 682.606 L995.957 682.606 L995.398 682.606 L994.839 682.606 L994.28 682.606 L993.72 682.606 L993.161 682.606 L992.602 682.606 L992.043 682.606 L991.483 682.606 L990.924 682.606 L990.365 682.606 L989.806 682.606 L989.246 682.606 L988.687 682.606 L988.128 682.606 L987.569 682.606 L987.009 682.606 L986.45 682.606 L985.891 682.606 L985.332 682.606 L984.772 682.606 L984.213 682.606 L983.654 682.606 L983.095 682.606 L982.535 682.606 L981.976 682.606 L981.417 682.606 L980.858 682.606 L980.298 682.606 L979.739 682.606 L979.18 682.606 L978.621 682.606 L978.061 682.606 L977.502 682.606 L976.943 682.606 L976.384 682.606 L975.824 682.606 L975.265 682.606 L974.706 682.606 L974.147 682.606 L973.587 682.606 L973.028 682.606 L972.469 682.606 L971.91 682.606 L971.35 682.606 L970.791 682.606 L970.232 682.606 L969.673 682.606 L969.113 682.606 L968.554 682.606 L967.995 682.606 L967.436 682.606 L966.876 682.606 L966.317 682.606 L965.758 682.606 L965.199 682.606 L964.639 682.606 L964.08 682.606 L963.521 682.606 L962.962 682.606 L962.402 682.606 L961.843 682.606 L961.284 682.606 L960.725 682.606 L960.165 682.606 L959.606 682.606 L959.047 682.606 L958.488 682.606 L957.928 682.606 L957.369 682.606 L956.81 682.606 L956.251 682.606 L955.691 682.606 L955.132 682.606 L954.573 682.606 L954.014 682.606 L953.454 682.606 L952.895 682.606 L952.336 682.606 L951.777 682.606 L951.217 682.606 L950.658 682.606 L950.099 682.606 L949.54 682.606 L948.98 682.606 L948.421 682.606 L947.862 682.606 L947.303 682.606 L946.743 682.606 L946.184 682.606 L945.625 682.606 L945.066 682.606 L944.506 682.606 L943.947 682.606 L943.388 682.606 L942.829 682.606 L942.269 682.606 L941.71 682.606 L941.151 682.606 L940.592 682.606 L940.032 682.606 L939.473 682.606 L938.914 682.606 L938.355 682.606 L937.795 682.606 L937.236 682.606 L936.677 682.606 L936.118 682.606 L935.558 682.606 L934.999 682.606 L934.44 682.606 L933.881 682.606 L933.321 682.606 L932.762 682.606 L932.203 682.606 L931.644 682.606 L931.084 682.606 L930.525 682.606 L929.966 682.606 L929.406 682.606 L928.847 682.606 L928.288 682.606 L927.729 682.606 L927.169 682.606 L926.61 682.606 L926.051 682.606 L925.492 682.606 L924.932 682.606 L924.373 682.606 L923.814 682.606 L923.255 682.606 L922.695 682.606 L922.136 682.606 L921.577 682.606 L921.018 682.606 L920.458 682.606 L919.899 682.606 L919.34 682.606 L918.781 682.606 L918.221 682.606 L917.662 682.606 L917.103 682.606 L916.544 682.606 L915.984 682.606 L915.425 682.606 L914.866 682.606 L914.307 682.606 L913.747 682.606 L913.188 682.606 L912.629 682.606 L912.07 682.606 L911.51 682.606 L910.951 682.606 L910.392 682.606 L909.833 682.606 L909.273 682.606 L908.714 682.606 L908.155 682.606 L907.596 682.606 L907.036 682.606 L906.477 682.606 L905.918 682.606 L905.359 682.606 L904.799 682.606 L904.24 682.606 L903.681 682.606 L903.122 682.606 L902.562 682.606 L902.003 682.606 L901.444 682.606 L900.885 682.606 L900.325 682.606 L899.766 682.606 L899.207 682.606 L898.648 682.606 L898.088 682.606 L897.529 682.606 L896.97 682.606 L896.411 682.606 L895.851 682.606 L895.292 682.606 L894.733 682.606 L894.174 682.606 L893.614 682.606 L893.055 682.606 L892.496 682.606 L891.937 682.606 L891.377 682.606 L890.818 682.606 L890.259 682.606 L889.7 682.606 L889.14 682.606 L888.581 682.606 L888.022 682.606 L887.463 682.606 L886.903 682.606 L886.344 682.606 L885.785 682.606 L885.226 682.606 L884.666 682.606 L884.107 682.606 L883.548 682.606 L882.989 682.606 L882.429 682.606 L881.87 682.606 L881.311 682.606 L880.752 682.606 L880.192 682.606 L879.633 682.606 L879.074 682.606 L878.515 682.606 L877.955 682.606 L877.396 682.606 L876.837 682.606 L876.278 682.606 L875.718 682.606 L875.159 682.606 L874.6 682.606 L874.041 682.606 L873.481 682.606 L872.922 682.606 L872.363 682.606 L871.804 682.606 L871.244 682.606 L870.685 682.606 L870.126 682.606 L869.567 682.606 L869.007 682.606 L868.448 682.606 L867.889 682.606 L867.33 682.606 L866.77 682.606 L866.211 682.606 L865.652 682.606 L865.093 682.606 L864.533 682.606 L863.974 682.606 L863.415 682.606 L862.856 682.606 L862.296 682.606 L861.737 682.606 L861.178 682.606 L860.619 682.606 L860.059 682.606 L859.5 682.606 L858.941 682.606 L858.382 682.606 L857.822 682.606 L857.263 682.606 L856.704 682.606 L856.145 682.606 L855.585 682.606 L855.026 682.606 L854.467 682.606 L853.908 682.606 L853.348 682.606 L852.789 682.606 L852.23 682.606 L851.671 682.606 L851.111 682.606 L850.552 682.606 L849.993 682.606 L849.434 682.606 L848.874 682.606 L848.315 682.606 L847.756 682.606 L847.197 682.606 L846.637 682.606 L846.078 682.606 L845.519 682.606 L844.96 682.606 L844.4 682.606 L843.841 682.606 L843.282 682.606 L842.723 682.606 L842.163 682.606 L841.604 682.606 L841.045 682.606 L840.486 682.606 L839.926 682.606 L839.367 682.606 L838.808 682.606 L838.249 682.606 L837.689 682.606 L837.13 682.606 L836.571 682.606 L836.012 682.606 L835.452 682.606 L834.893 682.606 L834.334 682.606 L833.775 682.606 L833.215 682.606 L832.656 682.606 L832.097 682.606 L831.538 682.606 L830.978 682.606 L830.419 682.606 L829.86 682.606 L829.301 682.606 L828.741 682.606 L828.182 682.606 L827.623 682.606 L827.064 682.606 L826.504 682.606 L825.945 682.606 L825.386 682.606 L824.827 682.606 L824.267 682.606 L823.708 682.606 L823.149 682.606 L822.59 682.606 L822.03 682.606 L821.471 682.606 L820.912 682.606 L820.353 682.606 L819.793 682.606 L819.234 682.606 L818.675 682.606 L818.116 682.606 L817.556 682.606 L816.997 682.606 L816.438 682.606 L815.879 682.606 L815.319 682.606 L814.76 682.606 L814.201 682.606 L813.642 682.606 L813.082 682.606 L812.523 682.606 L811.964 682.606 L811.405 682.606 L810.845 682.606 L810.286 682.606 L809.727 682.606 L809.168 682.606 L808.608 682.606 L808.049 682.606 L807.49 682.606 L806.931 682.606 L806.371 682.606 L805.812 682.606 L805.253 682.606 L804.693 682.606 L804.134 682.606 L803.575 682.606 L803.016 682.606 L802.456 682.606 L801.897 682.606 L801.338 682.606 L800.779 682.606 L800.219 682.606 L799.66 682.606 L799.101 682.606 L798.542 682.606 L797.982 682.606 L797.423 682.606 L796.864 682.606 L796.305 682.606 L795.745 682.606 L795.186 682.606 L794.627 682.606 L794.068 682.606 L793.508 682.606 L792.949 682.606 L792.39 682.606 L791.831 682.606 L791.271 682.606 L790.712 682.606 L790.153 682.606 L789.594 682.606 L789.034 682.606 L788.475 682.606 L787.916 682.606 L787.357 682.606 L786.797 682.606 L786.238 682.606 L785.679 682.606 L785.12 682.606 L784.56 682.606 L784.001 682.606 L783.442 682.606 L782.883 682.606 L782.323 682.606 L781.764 682.606 L781.205 682.606 L780.646 682.606 L780.086 682.606 L779.527 682.606 L778.968 682.606 L778.409 682.606 L777.849 682.606 L777.29 682.606 L776.731 682.606 L776.172 682.606 L775.612 682.606 L775.053 682.606 L774.494 682.606 L773.935 682.606 L773.375 682.606 L772.816 682.606 L772.257 682.606 L771.698 682.606 L771.138 682.606 L770.579 682.606 L770.02 682.606 L769.461 682.606 L768.901 682.606 L768.342 682.606 L767.783 682.606 L767.224 682.606 L766.664 682.606 L766.105 682.606 L765.546 682.606 L764.987 682.606 L764.427 682.606 L763.868 682.606 L763.309 682.606 L762.75 682.606 L762.19 682.606 L761.631 682.606 L761.072 682.606 L760.513 682.606 L759.953 682.606 L759.394 682.606 L758.835 682.606 L758.276 682.606 L757.716 682.606 L757.157 682.606 L756.598 682.606 L756.039 682.606 L755.479 682.606 L754.92 682.606 L754.361 682.606 L753.802 682.606 L753.242 682.606 L752.683 682.606 L752.124 682.606 L751.565 682.606 L751.005 682.606 L750.446 682.606 L749.887 682.606 L749.328 682.606 L748.768 682.606 L748.209 682.606 L747.65 682.606 L747.091 682.606 L746.531 682.606 L745.972 682.606 L745.413 682.606 L744.854 682.606 L744.294 682.606 L743.735 682.606 L743.176 682.606 L742.617 682.606 L742.057 682.606 L741.498 682.606 L740.939 682.606 L740.38 682.606 L739.82 682.606 L739.261 682.606 L738.702 682.606 L738.143 682.606 L737.583 682.606 L737.024 682.606 L736.465 682.606 L735.906 682.606 L735.346 682.606 L734.787 682.606 L734.228 682.606 L733.669 682.606 L733.109 682.606 L732.55 682.606 L731.991 682.606 L731.432 682.606 L730.872 682.606 L730.313 682.606 L729.754 682.606 L729.195 682.606 L728.635 682.606 L728.076 682.606 L727.517 682.606 L726.958 682.606 L726.398 682.606 L725.839 682.606 L725.28 682.606 L724.721 682.606 L724.161 682.606 L723.602 682.606 L723.043 682.606 L722.484 682.606 L721.924 682.606 L721.365 682.606 L720.806 682.606 L720.247 682.606  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.915 720.806,687.915 721.365,687.915 721.924,687.915 722.484,687.915 723.043,687.915 723.602,687.915 724.161,687.915 724.721,687.915 725.28,687.915 725.839,687.915 726.398,687.915 726.958,687.915 727.517,687.915 728.076,687.915 728.635,687.915 729.195,687.915 729.754,687.915 730.313,687.915 730.872,687.915 731.432,687.915 731.991,687.915 732.55,687.915 733.109,687.915 733.669,687.915 734.228,687.915 734.787,687.915 735.346,687.915 735.906,687.915 736.465,687.915 737.024,687.915 737.583,687.915 738.143,687.915 738.702,687.915 739.261,687.915 739.82,687.915 740.38,687.915 740.939,687.915 741.498,687.915 742.057,687.915 742.617,687.915 743.176,687.915 743.735,687.915 744.294,687.915 744.854,687.915 745.413,687.915 745.972,687.915 746.531,687.915 747.091,687.915 747.65,687.915 748.209,687.915 748.768,687.915 749.328,687.915 749.887,687.915 750.446,687.915 751.005,687.915 751.565,687.915 752.124,687.915 752.683,687.915 753.242,687.915 753.802,687.915 754.361,687.915 754.92,687.915 755.479,687.915 756.039,687.915 756.598,687.915 757.157,687.915 757.716,687.915 758.276,687.915 758.835,687.915 759.394,687.915 759.953,687.915 760.513,687.915 761.072,687.915 761.631,687.915 762.19,687.915 762.75,687.915 763.309,687.915 763.868,687.915 764.427,687.915 764.987,687.915 765.546,687.915 766.105,687.915 766.664,687.915 767.224,687.915 767.783,687.915 768.342,687.915 768.901,687.915 769.461,687.915 770.02,687.915 770.579,687.915 771.138,687.915 771.698,687.915 772.257,687.915 772.816,687.915 773.375,687.915 773.935,687.915 774.494,687.915 775.053,687.915 775.612,687.915 776.172,687.915 776.731,687.915 777.29,687.915 777.849,687.915 778.409,687.915 778.968,687.915 779.527,687.915 780.086,687.915 780.646,687.915 781.205,687.915 781.764,687.915 782.323,687.915 782.883,687.915 783.442,687.915 784.001,687.915 784.56,687.915 785.12,687.915 785.679,687.915 786.238,687.915 786.797,687.915 787.357,687.915 787.916,687.915 788.475,687.915 789.034,687.915 789.594,687.915 790.153,687.915 790.712,687.915 791.271,687.915 791.831,687.915 792.39,687.915 792.949,687.915 793.508,687.915 794.068,687.915 794.627,687.915 795.186,687.915 795.745,687.915 796.305,687.915 796.864,687.915 797.423,687.915 797.982,687.915 798.542,687.915 799.101,687.915 799.66,687.915 800.219,687.915 800.779,687.915 801.338,687.915 801.897,687.915 802.456,687.915 803.016,687.915 803.575,687.915 804.134,687.915 804.693,687.915 805.253,687.915 805.812,687.915 806.371,687.915 806.931,687.915 807.49,687.915 808.049,687.915 808.608,687.915 809.168,687.915 809.727,687.915 810.286,687.915 810.845,687.915 811.405,687.915 811.964,687.915 812.523,687.915 813.082,687.915 813.642,687.915 814.201,687.915 814.76,687.915 815.319,687.915 815.879,687.915 816.438,687.915 816.997,687.915 817.556,687.915 818.116,687.915 818.675,687.915 819.234,687.915 819.793,687.915 820.353,687.915 820.912,687.915 821.471,687.915 822.03,687.915 822.59,687.915 823.149,687.915 823.708,687.915 824.267,687.915 824.827,687.915 825.386,687.915 825.945,687.915 826.504,687.915 827.064,687.915 827.623,687.915 828.182,687.915 828.741,687.915 829.301,687.915 829.86,687.915 830.419,687.915 830.978,687.915 831.538,687.915 832.097,687.915 832.656,687.915 833.215,687.915 833.775,687.915 834.334,687.915 834.893,687.915 835.452,687.915 836.012,687.915 836.571,687.915 837.13,687.915 837.689,687.915 838.249,687.915 838.808,687.915 839.367,687.915 839.926,687.915 840.486,687.915 841.045,687.915 841.604,687.915 842.163,687.915 842.723,687.915 843.282,687.915 843.841,687.915 844.4,687.915 844.96,687.915 845.519,687.915 846.078,687.915 846.637,687.915 847.197,687.915 847.756,687.915 848.315,687.915 848.874,687.915 849.434,687.915 849.993,687.915 850.552,687.915 851.111,687.915 851.671,687.915 852.23,687.915 852.789,687.915 853.348,687.915 853.908,687.915 854.467,687.915 855.026,687.915 855.585,687.915 856.145,687.915 856.704,687.915 857.263,687.915 857.822,687.915 858.382,687.915 858.941,687.915 859.5,687.915 860.059,687.915 860.619,687.915 861.178,687.915 861.737,687.915 862.296,687.915 862.856,687.915 863.415,687.915 863.974,687.915 864.533,687.915 865.093,687.915 865.652,687.915 866.211,687.915 866.77,687.915 867.33,687.915 867.889,687.915 868.448,687.915 869.007,687.915 869.567,687.915 870.126,687.915 870.685,687.915 871.244,687.915 871.804,687.915 872.363,687.915 872.922,687.915 873.481,687.915 874.041,687.915 874.6,687.915 875.159,687.915 875.718,687.915 876.278,687.915 876.837,687.915 877.396,687.915 877.955,687.915 878.515,687.915 879.074,687.915 879.633,687.915 880.192,687.915 880.752,687.915 881.311,687.915 881.87,687.915 882.429,687.915 882.989,687.915 883.548,687.915 884.107,687.915 884.666,687.915 885.226,687.915 885.785,687.915 886.344,687.915 886.903,687.915 887.463,687.915 888.022,687.915 888.581,687.915 889.14,687.915 889.7,687.915 890.259,687.915 890.818,687.915 891.377,687.915 891.937,687.915 892.496,687.915 893.055,687.915 893.614,687.915 894.174,687.915 894.733,687.915 895.292,687.915 895.851,687.915 896.411,687.915 896.97,687.915 897.529,687.915 898.088,687.915 898.648,687.915 899.207,687.915 899.766,687.915 900.325,687.915 900.885,687.915 901.444,687.915 902.003,687.915 902.562,687.915 903.122,687.915 903.681,687.915 904.24,687.915 904.799,687.915 905.359,687.915 905.918,687.915 906.477,687.915 907.036,687.915 907.596,687.915 908.155,687.915 908.714,687.915 909.273,687.915 909.833,687.915 910.392,687.915 910.951,687.915 911.51,687.915 912.07,687.915 912.629,687.915 913.188,687.915 913.747,687.915 914.307,687.915 914.866,687.915 915.425,687.915 915.984,687.915 916.544,687.915 917.103,687.915 917.662,687.915 918.221,687.915 918.781,687.915 919.34,687.915 919.899,687.915 920.458,687.915 921.018,687.915 921.577,687.915 922.136,687.915 922.695,687.915 923.255,687.915 923.814,687.915 924.373,687.915 924.932,687.915 925.492,687.915 926.051,687.915 926.61,687.915 927.169,687.915 927.729,687.915 928.288,687.915 928.847,687.915 929.406,687.915 929.966,687.915 930.525,687.915 931.084,687.915 931.644,687.915 932.203,687.915 932.762,687.915 933.321,687.915 933.881,687.915 934.44,687.915 934.999,687.915 935.558,687.915 936.118,687.915 936.677,687.915 937.236,687.915 937.795,687.915 938.355,687.915 938.914,687.915 939.473,687.915 940.032,687.915 940.592,687.915 941.151,687.915 941.71,687.915 942.269,687.915 942.829,687.915 943.388,687.915 943.947,687.915 944.506,687.915 945.066,687.915 945.625,687.915 946.184,687.915 946.743,687.915 947.303,687.915 947.862,687.915 948.421,687.915 948.98,687.915 949.54,687.915 950.099,687.915 950.658,687.915 951.217,687.915 951.777,687.915 952.336,687.915 952.895,687.915 953.454,687.915 954.014,687.915 954.573,687.915 955.132,687.915 955.691,687.915 956.251,687.915 956.81,687.915 957.369,687.915 957.928,687.915 958.488,687.915 959.047,687.915 959.606,687.915 960.165,687.915 960.725,687.915 961.284,687.915 961.843,687.915 962.402,687.915 962.962,687.915 963.521,687.915 964.08,687.915 964.639,687.915 965.199,687.915 965.758,687.915 966.317,687.915 966.876,687.915 967.436,687.915 967.995,687.915 968.554,687.915 969.113,687.915 969.673,687.915 970.232,687.915 970.791,687.915 971.35,687.915 971.91,687.915 972.469,687.915 973.028,687.915 973.587,687.915 974.147,687.915 974.706,687.915 975.265,687.915 975.824,687.915 976.384,687.915 976.943,687.915 977.502,687.915 978.061,687.915 978.621,687.915 979.18,687.915 979.739,687.915 980.298,687.915 980.858,687.915 981.417,687.915 981.976,687.915 982.535,687.915 983.095,687.915 983.654,687.915 984.213,687.915 984.772,687.915 985.332,687.915 985.891,687.915 986.45,687.915 987.009,687.915 987.569,687.915 988.128,687.915 988.687,687.915 989.246,687.915 989.806,687.915 990.365,687.915 990.924,687.915 991.483,687.915 992.043,687.915 992.602,687.915 993.161,687.915 993.72,687.915 994.28,687.915 994.839,687.915 995.398,687.915 995.957,687.915 996.517,687.915 997.076,687.915 997.635,687.915 998.194,687.915 998.754,687.915 999.313,687.915 999.872,687.915 1000.43,687.915 1000.99,687.915 1001.55,687.915 1002.11,687.915 1002.67,687.915 1003.23,687.915 1003.79,687.915 1004.35,687.915 1004.91,687.915 1005.46,687.915 1006.02,687.915 1006.58,687.915 1007.14,687.915 1007.7,687.915 1008.26,687.915 1008.82,687.915 1009.38,687.915 1009.94,687.915 1010.5,687.915 1011.06,687.915 1011.62,687.915 1012.18,687.915 1012.73,687.915 1013.29,687.915 1013.85,687.915 1014.41,687.915 1014.97,687.915 1015.53,687.915 1016.09,687.915 1016.65,687.915 1017.21,687.915 1017.77,687.915 1018.33,687.915 1018.89,687.915 1019.45,687.915 1020.01,687.915 1020.56,687.915 1021.12,687.915 1021.68,687.915 1022.24,687.915 1022.8,687.915 1023.36,687.915 1023.92,687.915 1024.48,687.915 1025.04,687.915 1025.6,687.915 1026.16,687.915 1026.72,687.915 1027.28,687.915 1027.83,687.915 1028.39,687.915 1028.95,687.915 1029.51,687.915 1030.07,687.915 1030.63,687.915 1031.19,687.915 1031.75,687.915 1032.31,687.915 1032.87,687.915 1033.43,687.915 1033.99,687.915 1034.55,687.915 1035.1,687.915 1035.66,687.915 1036.22,687.915 1036.78,687.915 1037.34,687.915 1037.9,687.915 1038.46,687.915 1039.02,687.915 1039.58,687.915 1040.14,687.915 1040.7,687.915 1041.26,687.915 1041.82,687.915 1042.38,687.915 1042.93,687.915 1043.49,687.915 1044.05,687.915 1044.61,687.915 1045.17,687.915 1045.73,687.915 1046.29,687.915 1046.85,687.915 1047.41,687.915 1047.97,687.915 1048.53,687.915 1049.09,687.915 1049.65,687.915 1050.2,687.915 1050.76,687.915 1051.32,687.915 1051.88,687.915 1052.44,687.915 1053,687.915 1053.56,687.915 1054.12,687.915 1054.68,687.915 1055.24,687.915 1055.8,687.915 1056.36,687.915 1056.92,687.915 1057.48,687.915 1058.03,687.915 1058.59,687.915 1059.15,687.915 1059.71,687.915 1060.27,687.915 1060.83,687.915 1061.39,687.915 1061.95,687.915 1062.51,687.915 1063.07,687.915 1063.63,687.915 1064.19,687.915 1064.75,687.915 1065.3,687.915 1065.86,687.915 1066.42,687.915 1066.98,687.915 1067.54,687.915 1068.1,687.915 1068.66,687.915 1069.22,687.915 1069.78,687.915 1070.34,687.915 1070.9,687.915 1071.46,687.915 1072.02,687.915 1072.57,687.915 1073.13,687.915 1073.69,687.915 1074.25,687.915 1074.81,687.915 1075.37,687.915 1075.93,687.915 1076.49,687.915 1077.05,687.915 1077.61,687.915 1078.17,687.915 1078.73,687.915 1079.29,687.915 1079.85,687.915 1080.4,687.915 1080.96,687.915 1081.52,687.915 1082.08,687.915 1082.64,687.915 1083.2,687.915 1083.76,687.915 1084.32,687.915 1084.88,687.915 1085.44,687.915 1086,687.915 1086.56,687.915 1087.12,687.915 1087.67,687.915 1088.23,687.915 1088.79,687.915 1089.35,687.915 1089.91,687.915 1090.47,687.915 1091.03,687.915 1091.59,687.915 1092.15,687.915 1092.71,687.915 1093.27,687.915 1093.83,687.915 1094.39,687.915 1094.94,687.915 1095.5,687.915 1096.06,687.915 1096.62,687.915 1097.18,687.915 1097.74,687.915 1098.3,687.915 1098.86,687.915 1099.42,687.915 1099.98,687.915 1100.54,687.915 1101.1,687.915 1101.66,687.915 1102.22,687.915 1102.77,687.915 1103.33,687.915 1103.89,687.915 1104.45,687.915 1105.01,687.915 1105.57,687.915 1106.13,687.915 1106.69,687.915 1107.25,687.915 1107.81,687.915 1108.37,687.915 1108.93,687.915 1109.49,687.915 1110.04,687.915 1110.6,687.915 1111.16,687.915 1111.72,687.915 1112.28,687.915 1112.84,687.915 1113.4,687.915 1113.96,687.915 1114.52,687.915 1115.08,687.915 1115.64,687.915 1116.2,687.915 1116.76,687.915 1117.31,687.915 1117.87,687.915 1118.43,687.915 1118.99,687.915 1119.55,687.915 1120.11,687.915 1120.67,687.915 1121.23,687.915 1121.79,687.915 1122.35,687.915 1122.91,687.915 1123.47,687.915 1124.03,687.915 1124.59,687.915 1125.14,687.915 1125.7,687.915 1126.26,687.915 1126.82,687.915 1127.38,687.915 1127.94,687.915 1128.5,687.915 1129.06,687.915 1129.62,687.915 1130.18,687.915 1130.74,687.915 1131.3,687.915 1131.86,687.915 1132.41,687.915 1132.97,687.915 1133.53,687.915 1134.09,687.915 1134.65,687.915 1135.21,687.915 1135.77,687.915 1136.33,687.915 1136.89,687.915 1137.45,687.915 1138.01,687.915 1138.57,687.915 1139.13,687.915 1139.68,687.915 1140.24,687.915 1140.8,687.915 1141.36,687.915 1141.92,687.915 1142.48,687.915 1143.04,687.915 1143.6,687.915 1144.16,687.915 1144.72,687.915 1145.28,687.915 1145.84,687.915 1146.4,687.915 1146.96,687.915 1147.51,687.915 1148.07,687.915 1148.63,687.915 1149.19,687.915 1149.75,687.915 1150.31,687.915 1150.87,687.915 1151.43,687.915 1151.99,687.915 1152.55,687.915 1153.11,687.915 1153.67,687.915 1154.23,687.915 1154.78,687.915 1155.34,687.915 1155.9,687.915 1156.46,687.915 1157.02,687.915 1157.58,687.915 1158.14,687.915 1158.7,687.915 1159.26,687.915 1159.82,687.915 1160.38,687.915 1160.94,687.915 1161.5,687.915 1162.05,687.915 1162.61,687.915 1163.17,687.915 1163.73,687.915 1164.29,687.915 1164.85,687.915 1165.41,687.915 1165.97,687.915 1166.53,687.915 1167.09,687.915 1167.65,687.915 1168.21,687.915 1168.77,687.915 1169.33,687.915 1169.88,687.915 1170.44,687.915 1171,687.915 1171.56,687.915 1172.12,687.915 1172.68,687.915 1173.24,687.915 1173.8,687.915 1174.36,687.915 1174.92,687.915 1175.48,687.915 1176.04,687.915 1176.6,687.915 1177.15,687.915 1177.71,687.915 1178.27,687.915 1178.83,687.915 1179.39,687.915 1179.95,687.915 1180.51,687.915 1181.07,687.915 1181.63,687.915 1182.19,687.915 1182.75,687.915 1183.31,687.915 1183.87,687.915 1184.43,687.915 1184.98,687.915 1185.54,687.915 1186.1,687.915 1186.66,687.915 1187.22,687.915 1187.78,687.915 1188.34,687.915 1188.9,687.915 1189.46,687.915 1190.02,687.915 1190.58,687.915 1191.14,687.915 1191.7,687.915 1192.25,687.915 1192.81,687.915 1193.37,687.915 1193.93,687.915 1194.49,687.915 1195.05,687.915 1195.61,687.915 1196.17,687.915 1196.73,687.915 1197.29,687.915 1197.85,687.915 1198.41,687.915 1198.97,687.915 1199.52,687.915 1200.08,687.915 1200.64,687.915 1201.2,687.915 1201.76,687.915 1202.32,687.915 1202.88,687.915 1203.44,687.915 1204,687.915 1204.56,687.915 1205.12,687.915 1205.68,687.915 1206.24,687.915 1206.8,687.915 1207.35,687.915 1207.91,687.915 1208.47,687.915 1209.03,687.915 1209.59,687.915 1210.15,687.915 1210.71,687.915 1211.27,687.915 1211.83,687.915 1212.39,687.915 1212.95,687.915 1213.51,687.915 1214.07,687.915 1214.62,687.915 1215.18,687.915 1215.74,687.915 1216.3,687.915 1216.86,687.915 1217.42,687.915 1217.98,687.915 1218.54,687.915 1219.1,687.915 1219.66,687.915 1220.22,687.915 1220.78,687.915 1221.34,687.915 1221.89,687.915 1222.45,687.915 1223.01,687.915 1223.57,687.915 1224.13,687.915 1224.69,687.915 1225.25,687.915 1225.81,687.915 1226.37,687.915 1226.93,687.915 1227.49,687.915 1228.05,687.915 1228.61,687.915 1229.17,687.915 1229.72,687.915 1230.28,687.915 1230.84,687.915 1231.4,687.915 1231.96,687.915 1232.52,687.915 1233.08,687.915 1233.64,687.915 1234.2,687.915 1234.76,687.915 1235.32,687.915 1235.88,687.915 1236.44,687.915 1236.99,687.915 1237.55,687.915 1238.11,687.915 1238.67,687.915 1239.23,687.915 1239.79,687.915 1240.35,687.915 1240.91,687.915 1241.47,687.915 1242.03,687.915 1242.59,687.915 1243.15,687.915 1243.71,687.915 1244.26,687.915 1244.82,687.915 1245.38,687.915 1245.94,687.915 1246.5,687.915 1247.06,687.915 1247.62,687.915 1248.18,687.915 1248.74,687.915 1249.3,687.915 1249.86,687.915 1250.42,687.915 1250.98,687.915 1251.54,687.915 1252.09,687.915 1252.65,687.915 1253.21,687.915 1253.77,687.915 1254.33,687.915 1254.89,687.915 1255.45,687.915 1256.01,687.915 1256.57,687.915 1257.13,687.915 1257.69,687.915 1258.25,687.915 1258.81,687.915 1259.36,687.915 1259.92,687.915 1260.48,687.915 1261.04,687.915 1261.6,687.915 1262.16,687.915 1262.72,687.915 1263.28,687.915 1263.84,687.915 1264.4,687.915 1264.96,687.915 1265.52,687.915 1266.08,687.915 1266.63,687.915 1267.19,687.915 1267.75,687.915 1268.31,687.915 1268.87,687.915 1269.43,687.915 1269.99,687.915 1270.55,687.915 1271.11,687.915 1271.67,687.915 1272.23,687.915 1272.79,687.915 1273.35,687.915 1273.91,687.915 1274.46,687.915 1275.02,687.915 1275.58,687.915 1276.14,687.915 1276.7,687.915 1277.26,687.915 1277.82,687.915 1278.38,687.915 1278.94,687.915 1279.5,687.915 1280.06,687.915 1280.62,687.915 1281.18,687.915 1281.73,687.915 1282.29,687.915 1282.85,687.915 1283.41,687.915 1283.97,687.915 1284.53,687.915 1285.09,687.915 1285.65,687.915 1286.21,687.915 1286.77,687.915 1287.33,687.915 1287.89,687.915 1288.45,687.915 1289,687.915 1289.56,687.915 1290.12,687.915 1290.68,687.915 1291.24,687.915 1291.8,687.915 1292.36,687.915 1292.92,687.915 1293.48,687.915 1294.04,687.915 1294.6,687.915 1295.16,687.915 1295.72,687.915 1296.28,687.915 1296.83,687.915 1297.39,687.915 1297.95,687.915 1298.51,687.915 1299.07,687.915 1299.63,687.915 1300.19,687.915 1300.75,687.915 1301.31,687.915 1301.87,687.915 1302.43,687.915 1302.99,687.915 1303.55,687.915 1304.1,687.915 1304.66,687.915 1305.22,687.915 1305.78,687.915 1306.34,687.915 1306.9,687.915 1307.46,687.915 1308.02,687.915 1308.58,687.915 1309.14,687.915 1309.7,687.915 1310.26,687.915 1310.82,687.915 1311.38,687.915 1311.93,687.915 1312.49,687.915 1313.05,687.915 1313.61,687.915 1314.17,687.915 1314.73,687.915 1315.29,687.915 1315.85,687.915 1316.41,687.915 1316.97,687.915 1317.53,687.915 1318.09,687.915 1318.65,687.915 1319.2,687.915 1319.76,687.915 1320.32,687.915 1320.88,687.915 1321.44,687.915 1322,687.915 1322.56,687.915 1323.12,687.915 1323.68,687.915 1324.24,687.915 1324.8,687.915 1325.36,687.915 1325.92,687.915 1326.47,687.915 1327.03,687.915 1327.59,687.915 1328.15,687.915 1328.71,687.915 1329.27,687.915 1329.83,687.915 1330.39,687.915 1330.95,687.915 1331.51,687.915 1332.07,687.915 1332.63,687.915 1333.19,687.915 1333.75,687.915 1334.3,687.915 1334.86,687.915 1335.42,687.915 1335.98,687.915 1336.54,687.915 1337.1,687.915 1337.66,687.915 1338.22,687.915 1338.78,687.915 1339.34,687.915 1339.9,687.915 1340.46,687.915 1341.02,687.915 1341.57,687.915 1342.13,687.915 1342.69,687.915 1343.25,687.915 1343.81,687.915 1344.37,687.915 1344.93,687.915 1345.49,687.915 1346.05,687.915 1346.61,687.915 1347.17,687.915 1347.73,687.915 1348.29,687.915 1348.84,687.915 1349.4,687.915 1349.96,687.915 1350.52,687.915 1351.08,687.915 1351.64,687.915 1352.2,687.915 1352.76,687.915 1353.32,687.915 1353.88,687.915 1354.44,687.915 1355,687.915 1355.56,687.915 1356.12,687.915 1356.67,687.915 1357.23,687.915 1357.79,687.915 1358.35,687.915 1358.91,687.915 1359.47,687.915 1360.03,687.915 1360.59,687.915 1361.15,687.915 1361.71,687.915 1362.27,687.915 1362.83,687.915 1363.39,687.915 1363.94,687.915 1364.5,687.915 1365.06,687.915 1365.62,687.915 1366.18,687.915 1366.74,687.915 1367.3,687.915 1367.86,687.915 1368.42,687.915 1368.98,687.915 1369.54,687.915 1370.1,687.915 1370.66,687.915 1371.21,687.915 1371.77,687.915 1372.33,687.915 1372.89,687.915 1373.45,687.915 1374.01,687.915 1374.57,687.915 1375.13,687.915 1375.69,687.915 1376.25,687.915 1376.81,687.915 1377.37,687.915 1377.93,687.915 1378.49,687.915 1379.04,687.915 1379.6,687.915 1380.16,687.915 1380.72,687.915 1381.28,687.915 1381.84,687.915 1382.4,687.915 1382.96,687.915 1383.52,687.915 1384.08,687.915 1384.64,687.915 1385.2,687.915 1385.76,687.915 1386.31,687.915 1386.87,687.915 1387.43,687.915 1387.99,687.915 1388.55,687.915 1389.11,687.915 1389.67,687.915 1390.23,687.915 1390.79,687.915 1391.35,687.915 1391.91,687.915 1392.47,687.915 1393.03,687.915 1393.58,687.915 1394.14,687.915 1394.7,687.915 1395.26,687.915 1395.82,687.915 1396.38,687.915 1396.94,687.915 1397.5,687.915 1398.06,687.915 1398.62,687.915 1399.18,687.915 1399.74,687.915 1400.3,687.915 1400.86,687.915 1401.41,687.915 1401.97,687.915 1402.53,687.915 1403.09,687.915 1403.65,687.915 1404.21,687.915 1404.77,687.915 1405.33,687.915 1405.89,687.915 1406.45,687.915 1407.01,687.915 1407.57,687.915 1408.13,687.915 1408.68,687.915 1409.24,687.915 1409.8,687.915 1410.36,687.915 1410.92,687.915 1411.48,687.915 1412.04,687.915 1412.6,687.915 1413.16,687.915 1413.72,687.915 1414.28,687.915 1414.84,687.915 1415.4,687.915 1415.95,687.915 1416.51,687.915 1417.07,687.915 1417.63,687.915 1418.19,687.915 1418.75,687.915 1419.31,687.915 1419.87,687.915 1420.43,687.915 1420.99,687.915 1421.55,687.915 1422.11,687.915 1422.67,687.915 1423.23,687.915 1423.78,687.915 1424.34,687.915 1424.9,687.915 1425.46,687.915 1426.02,687.915 1426.58,687.915 1427.14,687.915 1427.7,687.915 1428.26,687.915 1428.82,687.915 1429.38,687.915 1429.94,687.915 1430.5,687.915 1431.05,687.915 1431.61,687.915 1432.17,687.915 1432.73,687.915 1433.29,687.915 1433.85,687.915 1434.41,687.915 1434.97,687.915 1435.53,687.915 1436.09,687.915 1436.65,687.915 1437.21,687.915 1437.77,687.915 1438.33,687.915 1438.88,687.915 1439.44,687.915 1440,687.915 1440.56,687.915 1441.12,687.915 1441.68,687.915 1442.24,687.915 1442.8,687.915 1443.36,687.915 1443.92,687.915 1444.48,687.915 1445.04,687.915 1445.6,687.915 1446.15,687.915 1446.71,687.915 1447.27,687.915 1447.83,687.915 1448.39,687.915 1448.95,687.915 1449.51,687.915 1450.07,687.915 1450.63,687.915 1451.19,687.915 1451.75,687.915 1452.31,687.915 1452.87,687.915 1453.42,687.915 1453.98,687.915 1454.54,687.915 1455.1,687.915 1455.66,687.915 1456.22,687.915 1456.78,687.915 1457.34,687.915 1457.9,687.915 1458.46,687.915 1459.02,687.915 1459.58,687.915 1460.14,687.915 1460.7,687.915 1461.25,687.915 1461.81,687.915 1462.37,687.915 1462.93,687.915 1463.49,687.915 1464.05,687.915 1464.61,687.915 1465.17,687.915 1465.73,687.915 1466.29,687.915 1466.85,687.915 1467.41,687.915 1467.97,687.915 1468.52,687.915 1469.08,687.915 1469.64,687.915 1470.2,687.915 1470.76,687.915 1471.32,687.915 1471.88,687.915 1472.44,687.915 1473,687.915 1473.56,687.915 1474.12,687.915 1474.68,687.915 1475.24,687.915 1475.79,687.915 1476.35,687.915 1476.91,687.915 1477.47,687.915 1478.03,687.915 1478.59,687.915 1479.15,687.915 1479.71,687.915 1480.27,687.915 1480.83,687.915 1481.39,687.915 1481.95,687.915 1482.51,687.915 1483.07,687.915 1483.62,687.915 1484.18,687.915 1484.74,687.915 1485.3,687.915 1485.86,687.915 1486.42,687.915 1486.98,687.915 1487.54,687.915 1488.1,687.915 1488.66,687.915 1489.22,687.915 1489.78,687.915 1490.34,687.915 1490.89,687.915 1491.45,687.915 1492.01,687.915 1492.57,687.915 1493.13,687.915 1493.69,687.915 1494.25,687.915 1494.81,687.915 1495.37,687.915 1495.93,687.915 1496.49,687.915 1497.05,687.915 1497.61,687.915 1498.16,687.915 1498.72,687.915 1499.28,687.915 1499.84,687.915 1500.4,687.915 1500.96,687.915 1501.52,687.915 1502.08,687.915 1502.64,687.915 1503.2,687.915 1503.76,687.915 1504.32,687.915 1504.88,687.915 1505.44,687.915 1505.99,687.915 1506.55,687.915 1507.11,687.915 1507.67,687.915 1508.23,687.915 1508.79,687.915 1509.35,687.915 1509.91,687.915 1510.47,687.915 1511.03,687.915 1511.59,687.915 1512.15,687.915 1512.71,687.915 1513.26,687.915 1513.82,687.915 1514.38,687.915 1514.94,687.915 1515.5,687.915 1516.06,687.915 1516.62,687.915 1517.18,687.915 1517.74,687.915 1518.3,687.915 1518.86,687.915 1519.42,687.915 1519.98,687.915 1520.53,687.915 1521.09,687.915 1521.65,687.915 1522.21,687.915 1522.77,687.915 1523.33,687.915 1523.89,687.915 1524.45,687.915 1525.01,687.915 1525.57,687.915 1526.13,687.915 1526.69,687.915 1527.25,687.915 1527.81,687.915 1528.36,687.915 1528.92,687.915 1529.48,687.915 1530.04,687.915 1530.6,687.915 1531.16,687.915 1531.72,687.915 1532.28,687.915 1532.84,687.915 1533.4,687.915 1533.96,687.915 1534.52,687.915 1535.08,687.915 1535.63,687.915 1536.19,687.915 1536.75,687.915 1537.31,687.915 1537.87,687.915 1538.43,687.915 1538.99,687.915 1539.55,687.915 1540.11,687.915 1540.67,687.915 1541.23,687.915 1541.79,687.915 1542.35,687.915 1542.9,687.915 1543.46,687.915 1544.02,687.915 1544.58,687.915 1545.14,687.915 1545.7,687.915 1546.26,687.915 1546.82,687.915 1547.38,687.915 1547.94,687.915 1548.5,687.915 1549.06,687.915 1549.62,687.915 1550.18,687.915 1550.73,687.915 1551.29,687.915 1551.85,687.915 1552.41,687.915 1552.97,687.915 1553.53,687.915 1554.09,687.915 1554.65,687.915 1555.21,687.915 1555.77,687.915 1556.33,687.915 1556.89,687.915 1557.45,687.915 1558,687.915 1558.56,687.915 1559.12,687.915 1559.68,687.915 1560.24,687.915 1560.8,687.915 1561.36,687.915 1561.92,687.915 1562.48,687.915 1563.04,687.915 1563.6,687.915 1564.16,687.915 1564.72,687.915 1565.28,687.915 1565.83,687.915 1566.39,687.915 1566.95,687.915 1567.51,687.915 1568.07,687.915 1568.63,687.915 1569.19,687.915 1569.75,687.915 1570.31,687.915 1570.87,687.915 1571.43,687.915 1571.99,687.915 1572.55,687.915 1573.1,687.915 1573.66,687.915 1574.22,687.915 1574.78,687.915 1575.34,687.915 1575.9,687.915 1576.46,687.915 1577.02,687.915 1577.58,687.915 1578.14,687.915 1578.7,687.915 1579.26,687.915 1579.82,687.915 1580.37,687.915 1580.93,687.915 1581.49,687.915 1582.05,687.915 1582.61,687.915 1583.17,687.915 1583.73,687.915 1584.29,687.915 1584.85,687.915 1585.41,687.915 1585.97,687.915 1586.53,687.915 1587.09,687.915 1587.65,687.915 1588.2,687.915 1588.76,687.915 1589.32,687.915 1589.88,687.915 1590.44,687.915 1591,687.915 1591.56,687.915 1592.12,687.915 1592.68,687.915 1593.24,687.915 1593.8,687.915 1594.36,687.915 1594.92,687.915 1595.47,687.915 1596.03,687.915 1596.59,687.915 1597.15,687.915 1597.71,687.915 1598.27,687.915 1598.83,687.915 1599.39,687.915 1599.95,687.915 1600.51,687.915 1601.07,687.915 1601.63,687.915 1602.19,687.915 1602.74,687.915 1603.3,687.915 1603.86,687.915 1604.42,687.915 1604.98,687.915 1605.54,687.915 1606.1,687.915 1606.66,687.915 1607.22,687.915 1607.78,687.915 1608.34,687.915 1608.9,687.915 1609.46,687.915 1610.02,687.915 1610.57,687.915 1611.13,687.915 1611.69,687.915 1612.25,687.915 1612.81,687.915 1613.37,687.915 1613.93,687.915 1614.49,687.915 1615.05,687.915 1615.61,687.915 1616.17,687.915 1616.73,687.915 1617.29,687.915 1617.84,687.915 1618.4,687.915 1618.96,687.915 1619.52,687.915 1620.08,687.915 1620.64,687.915 1621.2,687.915 1621.76,687.915 1622.32,687.915 1622.88,687.915 1623.44,687.915 1624,687.915 1624.56,687.915 1625.11,687.915 1625.67,687.915 1626.23,687.915 1626.79,687.915 1627.35,687.915 1627.91,687.915 1628.47,687.915 1629.03,687.915 1629.59,687.915 1630.15,687.915 1630.71,687.915 1631.27,687.915 1631.83,687.915 1632.39,687.915 1632.94,687.915 1633.5,687.915 1634.06,687.915 1634.62,687.915 1635.18,687.915 1635.74,687.915 1636.3,687.915 1636.86,687.915 1637.42,687.915 1637.98,687.915 1638.54,687.915 1639.1,687.915 1639.66,687.915 1640.21,687.915 1640.77,687.915 1641.33,687.915 1641.89,687.915 1642.45,687.915 1643.01,687.915 1643.57,687.915 1644.13,687.915 1644.69,687.915 1645.25,687.915 1645.81,687.915 1646.37,687.915 1646.93,687.915 1647.48,687.915 1648.04,687.915 1648.6,687.915 1649.16,687.915 1649.72,687.915 1650.28,687.915 1650.84,687.915 1651.4,687.915 1651.96,687.915 1652.52,687.915 1653.08,687.915 1653.64,687.915 1654.2,687.915 1654.76,687.915 1655.31,687.915 1655.87,687.915 1656.43,687.915 1656.99,687.915 1657.55,687.915 1658.11,687.915 1658.67,687.915 1659.23,687.915 1659.79,687.915 1660.35,687.915 1660.91,687.915 1661.47,687.915 1662.03,687.915 1662.58,687.915 1663.14,687.915 1663.7,687.915 1664.26,687.915 1664.82,687.915 1665.38,687.915 1665.94,687.915 1666.5,687.915 1667.06,687.915 1667.62,687.915 1668.18,687.915 1668.74,687.915 1669.3,687.915 1669.85,687.915 1670.41,687.915 1670.97,687.915 1671.53,687.915 1672.09,687.915 1672.65,687.915 1673.21,687.915 1673.77,687.915 1674.33,687.915 1674.89,687.915 1675.45,687.915 1676.01,687.915 1676.57,687.915 1677.13,687.915 1677.68,687.915 1678.24,687.915 1678.8,687.915 1679.36,687.915 1679.92,687.915 1680.48,687.915 1681.04,687.915 1681.6,687.915 1682.16,687.915 1682.72,687.915 1683.28,687.915 1683.84,687.915 1684.4,687.915 1684.95,687.915 1685.51,687.915 1686.07,687.915 1686.63,687.915 1687.19,687.915 1687.75,687.915 1688.31,687.915 1688.87,687.915 1689.43,687.915 1689.99,687.915 1690.55,687.915 1691.11,687.915 1691.67,687.915 1692.23,687.915 1692.78,687.915 1693.34,687.915 1693.9,687.915 1694.46,687.915 1695.02,687.915 1695.58,687.915 1696.14,687.915 1696.7,687.915 1697.26,687.915 1697.82,687.915 1698.38,687.915 1698.94,687.915 1699.5,687.915 1700.05,687.915 1700.61,687.915 1701.17,687.915 1701.73,687.915 1702.29,687.915 1702.85,687.915 1703.41,687.915 1703.97,687.915 1704.53,687.915 1705.09,687.915 1705.65,687.915 1706.21,687.915 1706.77,687.915 1707.32,687.915 1707.88,687.915 1708.44,687.915 1709,687.915 1709.56,687.915 1710.12,687.915 1710.68,687.915 1711.24,687.915 1711.8,687.915 1712.36,687.915 1712.92,687.915 1713.48,687.915 1714.04,687.915 1714.6,687.915 1715.15,687.915 1715.71,687.915 1716.27,687.915 1716.83,687.915 1717.39,687.915 1717.95,687.915 1718.51,687.915 1719.07,687.915 1719.63,687.915 1720.19,687.915 1720.75,687.915 1721.31,687.915 1721.87,687.915 1722.42,687.915 1722.98,687.915 1723.54,687.915 1724.1,687.915 1724.66,687.915 1725.22,687.915 1725.78,687.915 1726.34,687.915 1726.9,687.915 1727.46,687.915 1728.02,687.915 1728.58,687.915 1729.14,687.915 1729.69,687.915 1730.25,687.915 1730.81,687.915 1731.37,687.915 1731.93,687.915 1732.49,687.915 1733.05,687.915 1733.61,687.915 1734.17,687.915 1734.73,687.915 1735.29,687.915 1735.85,687.915 1736.41,687.915 1736.97,687.915 1737.52,687.915 1738.08,687.915 1738.64,687.915 1739.2,687.915 1739.76,687.915 1740.32,687.915 1740.88,687.915 1741.44,687.915 1742,687.915 1742.56,687.915 1743.12,687.915 1743.68,687.915 1744.24,687.915 1744.79,687.915 1745.35,687.915 1745.91,687.915 1746.47,687.915 1747.03,687.915 1747.59,687.915 1748.15,687.915 1748.71,687.915 1749.27,687.915 1749.83,687.915 1750.39,687.915 1750.95,687.915 1751.51,687.915 1752.06,687.915 1752.62,687.915 1753.18,687.915 1753.74,687.915 1754.3,687.915 1754.86,687.915 1755.42,687.915 1755.98,687.915 1756.54,687.915 1757.1,687.915 1757.66,687.915 1758.22,687.915 1758.78,687.915 1759.34,687.915 1759.89,687.915 1760.45,687.915 1761.01,687.915 1761.57,687.915 1762.13,687.915 1762.69,687.915 1763.25,687.915 1763.81,687.915 1764.37,687.915 1764.93,687.915 1765.49,687.915 1766.05,687.915 1766.61,687.915 1767.16,687.915 1767.72,687.915 1768.28,687.915 1768.84,687.915 1769.4,687.915 1769.96,687.915 1770.52,687.915 1771.08,687.915 1771.64,687.915 1772.2,687.915 1772.76,687.915 1773.32,687.915 1773.88,687.915 1774.43,687.915 1774.99,687.915 1775.55,687.915 1776.11,687.915 1776.67,687.915 1777.23,687.915 1777.79,687.915 1778.35,687.915 1778.91,687.915 1779.47,687.915 1780.03,687.915 1780.59,687.915 1781.15,687.915 1781.71,687.915 1782.26,687.915 1782.82,687.915 1783.38,687.915 1783.94,687.915 1784.5,687.915 1785.06,687.915 1785.62,687.915 1786.18,687.915 1786.74,687.915 1787.3,687.915 1787.86,687.915 1788.42,687.915 1788.98,687.915 1789.53,687.915 1790.09,687.915 1790.65,687.915 1791.21,687.915 1791.77,687.915 1792.33,687.915 1792.89,687.915 1793.45,687.915 1794.01,687.915 1794.57,687.915 1795.13,687.915 1795.69,687.915 1796.25,687.915 1796.8,687.915 1797.36,687.915 1797.92,687.915 1798.48,687.915 1799.04,687.915 1799.6,687.915 1800.16,687.915 1800.72,687.915 1801.28,687.915 1801.84,687.915 1802.4,687.915 1802.96,687.915 1803.52,687.915 1804.08,687.915 1804.63,687.915 1805.19,687.915 1805.75,687.915 1806.31,687.915 1806.87,687.915 1807.43,687.915 1807.99,687.915 1808.55,687.915 1809.11,687.915 1809.67,687.915 1810.23,687.915 1810.79,687.915 1811.35,687.915 1811.9,687.915 1812.46,687.915 1813.02,687.915 1813.58,687.915 1814.14,687.915 1814.7,687.915 1815.26,687.915 1815.82,687.915 1816.38,687.915 1816.94,687.915 1817.5,687.915 1818.06,687.915 1818.62,687.915 1819.18,687.915 1819.73,687.915 1820.29,687.915 1820.85,687.915 1821.41,687.915 1821.97,687.915 1822.53,687.915 1823.09,687.915 1823.65,687.915 1824.21,687.915 1824.77,687.915 1825.33,687.915 1825.89,687.915 1826.45,687.915 1827,687.915 1827.56,687.915 1828.12,687.915 1828.68,687.915 1829.24,687.915 1829.8,687.915 1830.36,687.915 1830.92,687.915 1831.48,687.915 1832.04,687.915 1832.6,687.915 1833.16,687.915 1833.72,687.915 1834.27,687.915 1834.83,687.915 1835.39,687.915 1835.95,687.915 1836.51,687.915 1837.07,687.915 1837.63,687.915 1838.19,687.915 \"/>\n<path clip-path=\"url(#clip013)\" d=\"M720.247 685.248 L720.806 685.248 L721.365 685.248 L721.924 685.248 L722.484 685.248 L723.043 685.248 L723.602 685.248 L724.161 685.248 L724.721 685.248 L725.28 685.248 L725.839 685.248 L726.398 685.248 L726.958 685.248 L727.517 685.248 L728.076 685.248 L728.635 685.248 L729.195 685.248 L729.754 685.248 L730.313 685.248 L730.872 685.248 L731.432 685.248 L731.991 685.248 L732.55 685.248 L733.109 685.248 L733.669 685.248 L734.228 685.248 L734.787 685.248 L735.346 685.248 L735.906 685.248 L736.465 685.248 L737.024 685.248 L737.583 685.248 L738.143 685.248 L738.702 685.248 L739.261 685.248 L739.82 685.248 L740.38 685.248 L740.939 685.248 L741.498 685.248 L742.057 685.248 L742.617 685.248 L743.176 685.248 L743.735 685.248 L744.294 685.248 L744.854 685.248 L745.413 685.248 L745.972 685.248 L746.531 685.248 L747.091 685.248 L747.65 685.248 L748.209 685.248 L748.768 685.248 L749.328 685.248 L749.887 685.248 L750.446 685.248 L751.005 685.248 L751.565 685.248 L752.124 685.248 L752.683 685.248 L753.242 685.248 L753.802 685.248 L754.361 685.248 L754.92 685.248 L755.479 685.248 L756.039 685.248 L756.598 685.248 L757.157 685.248 L757.716 685.248 L758.276 685.248 L758.835 685.248 L759.394 685.248 L759.953 685.248 L760.513 685.248 L761.072 685.248 L761.631 685.248 L762.19 685.248 L762.75 685.248 L763.309 685.248 L763.868 685.248 L764.427 685.248 L764.987 685.248 L765.546 685.248 L766.105 685.248 L766.664 685.248 L767.224 685.248 L767.783 685.248 L768.342 685.248 L768.901 685.248 L769.461 685.248 L770.02 685.248 L770.579 685.248 L771.138 685.248 L771.698 685.248 L772.257 685.248 L772.816 685.248 L773.375 685.248 L773.935 685.248 L774.494 685.248 L775.053 685.248 L775.612 685.248 L776.172 685.248 L776.731 685.248 L777.29 685.248 L777.849 685.248 L778.409 685.248 L778.968 685.248 L779.527 685.248 L780.086 685.248 L780.646 685.248 L781.205 685.248 L781.764 685.248 L782.323 685.248 L782.883 685.248 L783.442 685.248 L784.001 685.248 L784.56 685.248 L785.12 685.248 L785.679 685.248 L786.238 685.248 L786.797 685.248 L787.357 685.248 L787.916 685.248 L788.475 685.248 L789.034 685.248 L789.594 685.248 L790.153 685.248 L790.712 685.248 L791.271 685.248 L791.831 685.248 L792.39 685.248 L792.949 685.248 L793.508 685.248 L794.068 685.248 L794.627 685.248 L795.186 685.248 L795.745 685.248 L796.305 685.248 L796.864 685.248 L797.423 685.248 L797.982 685.248 L798.542 685.248 L799.101 685.248 L799.66 685.248 L800.219 685.248 L800.779 685.248 L801.338 685.248 L801.897 685.248 L802.456 685.248 L803.016 685.248 L803.575 685.248 L804.134 685.248 L804.693 685.248 L805.253 685.248 L805.812 685.248 L806.371 685.248 L806.931 685.248 L807.49 685.248 L808.049 685.248 L808.608 685.248 L809.168 685.248 L809.727 685.248 L810.286 685.248 L810.845 685.248 L811.405 685.248 L811.964 685.248 L812.523 685.248 L813.082 685.248 L813.642 685.248 L814.201 685.248 L814.76 685.248 L815.319 685.248 L815.879 685.248 L816.438 685.248 L816.997 685.248 L817.556 685.248 L818.116 685.248 L818.675 685.248 L819.234 685.248 L819.793 685.248 L820.353 685.248 L820.912 685.248 L821.471 685.248 L822.03 685.248 L822.59 685.248 L823.149 685.248 L823.708 685.248 L824.267 685.248 L824.827 685.248 L825.386 685.248 L825.945 685.248 L826.504 685.248 L827.064 685.248 L827.623 685.248 L828.182 685.248 L828.741 685.248 L829.301 685.248 L829.86 685.248 L830.419 685.248 L830.978 685.248 L831.538 685.248 L832.097 685.248 L832.656 685.248 L833.215 685.248 L833.775 685.248 L834.334 685.248 L834.893 685.248 L835.452 685.248 L836.012 685.248 L836.571 685.248 L837.13 685.248 L837.689 685.248 L838.249 685.248 L838.808 685.248 L839.367 685.248 L839.926 685.248 L840.486 685.248 L841.045 685.248 L841.604 685.248 L842.163 685.248 L842.723 685.248 L843.282 685.248 L843.841 685.248 L844.4 685.248 L844.96 685.248 L845.519 685.248 L846.078 685.248 L846.637 685.248 L847.197 685.248 L847.756 685.248 L848.315 685.248 L848.874 685.248 L849.434 685.248 L849.993 685.248 L850.552 685.248 L851.111 685.248 L851.671 685.248 L852.23 685.248 L852.789 685.248 L853.348 685.248 L853.908 685.248 L854.467 685.248 L855.026 685.248 L855.585 685.248 L856.145 685.248 L856.704 685.248 L857.263 685.248 L857.822 685.248 L858.382 685.248 L858.941 685.248 L859.5 685.248 L860.059 685.248 L860.619 685.248 L861.178 685.248 L861.737 685.248 L862.296 685.248 L862.856 685.248 L863.415 685.248 L863.974 685.248 L864.533 685.248 L865.093 685.248 L865.652 685.248 L866.211 685.248 L866.77 685.248 L867.33 685.248 L867.889 685.248 L868.448 685.248 L869.007 685.248 L869.567 685.248 L870.126 685.248 L870.685 685.248 L871.244 685.248 L871.804 685.248 L872.363 685.248 L872.922 685.248 L873.481 685.248 L874.041 685.248 L874.6 685.248 L875.159 685.248 L875.718 685.248 L876.278 685.248 L876.837 685.248 L877.396 685.248 L877.955 685.248 L878.515 685.248 L879.074 685.248 L879.633 685.248 L880.192 685.248 L880.752 685.248 L881.311 685.248 L881.87 685.248 L882.429 685.248 L882.989 685.248 L883.548 685.248 L884.107 685.248 L884.666 685.248 L885.226 685.248 L885.785 685.248 L886.344 685.248 L886.903 685.248 L887.463 685.248 L888.022 685.248 L888.581 685.248 L889.14 685.248 L889.7 685.248 L890.259 685.248 L890.818 685.248 L891.377 685.248 L891.937 685.248 L892.496 685.248 L893.055 685.248 L893.614 685.248 L894.174 685.248 L894.733 685.248 L895.292 685.248 L895.851 685.248 L896.411 685.248 L896.97 685.248 L897.529 685.248 L898.088 685.248 L898.648 685.248 L899.207 685.248 L899.766 685.248 L900.325 685.248 L900.885 685.248 L901.444 685.248 L902.003 685.248 L902.562 685.248 L903.122 685.248 L903.681 685.248 L904.24 685.248 L904.799 685.248 L905.359 685.248 L905.918 685.248 L906.477 685.248 L907.036 685.248 L907.596 685.248 L908.155 685.248 L908.714 685.248 L909.273 685.248 L909.833 685.248 L910.392 685.248 L910.951 685.248 L911.51 685.248 L912.07 685.248 L912.629 685.248 L913.188 685.248 L913.747 685.248 L914.307 685.248 L914.866 685.248 L915.425 685.248 L915.984 685.248 L916.544 685.248 L917.103 685.248 L917.662 685.248 L918.221 685.248 L918.781 685.248 L919.34 685.248 L919.899 685.248 L920.458 685.248 L921.018 685.248 L921.577 685.248 L922.136 685.248 L922.695 685.248 L923.255 685.248 L923.814 685.248 L924.373 685.248 L924.932 685.248 L925.492 685.248 L926.051 685.248 L926.61 685.248 L927.169 685.248 L927.729 685.248 L928.288 685.248 L928.847 685.248 L929.406 685.248 L929.966 685.248 L930.525 685.248 L931.084 685.248 L931.644 685.248 L932.203 685.248 L932.762 685.248 L933.321 685.248 L933.881 685.248 L934.44 685.248 L934.999 685.248 L935.558 685.248 L936.118 685.248 L936.677 685.248 L937.236 685.248 L937.795 685.248 L938.355 685.248 L938.914 685.248 L939.473 685.248 L940.032 685.248 L940.592 685.248 L941.151 685.248 L941.71 685.248 L942.269 685.248 L942.829 685.248 L943.388 685.248 L943.947 685.248 L944.506 685.248 L945.066 685.248 L945.625 685.248 L946.184 685.248 L946.743 685.248 L947.303 685.248 L947.862 685.248 L948.421 685.248 L948.98 685.248 L949.54 685.248 L950.099 685.248 L950.658 685.248 L951.217 685.248 L951.777 685.248 L952.336 685.248 L952.895 685.248 L953.454 685.248 L954.014 685.248 L954.573 685.248 L955.132 685.248 L955.691 685.248 L956.251 685.248 L956.81 685.248 L957.369 685.248 L957.928 685.248 L958.488 685.248 L959.047 685.248 L959.606 685.248 L960.165 685.248 L960.725 685.248 L961.284 685.248 L961.843 685.248 L962.402 685.248 L962.962 685.248 L963.521 685.248 L964.08 685.248 L964.639 685.248 L965.199 685.248 L965.758 685.248 L966.317 685.248 L966.876 685.248 L967.436 685.248 L967.995 685.248 L968.554 685.248 L969.113 685.248 L969.673 685.248 L970.232 685.248 L970.791 685.248 L971.35 685.248 L971.91 685.248 L972.469 685.248 L973.028 685.248 L973.587 685.248 L974.147 685.248 L974.706 685.248 L975.265 685.248 L975.824 685.248 L976.384 685.248 L976.943 685.248 L977.502 685.248 L978.061 685.248 L978.621 685.248 L979.18 685.248 L979.739 685.248 L980.298 685.248 L980.858 685.248 L981.417 685.248 L981.976 685.248 L982.535 685.248 L983.095 685.248 L983.654 685.248 L984.213 685.248 L984.772 685.248 L985.332 685.248 L985.891 685.248 L986.45 685.248 L987.009 685.248 L987.569 685.248 L988.128 685.248 L988.687 685.248 L989.246 685.248 L989.806 685.248 L990.365 685.248 L990.924 685.248 L991.483 685.248 L992.043 685.248 L992.602 685.248 L993.161 685.248 L993.72 685.248 L994.28 685.248 L994.839 685.248 L995.398 685.248 L995.957 685.248 L996.517 685.248 L997.076 685.248 L997.635 685.248 L998.194 685.248 L998.754 685.248 L999.313 685.248 L999.872 685.248 L1000.43 685.248 L1000.99 685.248 L1001.55 685.248 L1002.11 685.248 L1002.67 685.248 L1003.23 685.248 L1003.79 685.248 L1004.35 685.248 L1004.91 685.248 L1005.46 685.248 L1006.02 685.248 L1006.58 685.248 L1007.14 685.248 L1007.7 685.248 L1008.26 685.248 L1008.82 685.248 L1009.38 685.248 L1009.94 685.248 L1010.5 685.248 L1011.06 685.248 L1011.62 685.248 L1012.18 685.248 L1012.73 685.248 L1013.29 685.248 L1013.85 685.248 L1014.41 685.248 L1014.97 685.248 L1015.53 685.248 L1016.09 685.248 L1016.65 685.248 L1017.21 685.248 L1017.77 685.248 L1018.33 685.248 L1018.89 685.248 L1019.45 685.248 L1020.01 685.248 L1020.56 685.248 L1021.12 685.248 L1021.68 685.248 L1022.24 685.248 L1022.8 685.248 L1023.36 685.248 L1023.92 685.248 L1024.48 685.248 L1025.04 685.248 L1025.6 685.248 L1026.16 685.248 L1026.72 685.248 L1027.28 685.248 L1027.83 685.248 L1028.39 685.248 L1028.95 685.248 L1029.51 685.248 L1030.07 685.248 L1030.63 685.248 L1031.19 685.248 L1031.75 685.248 L1032.31 685.248 L1032.87 685.248 L1033.43 685.248 L1033.99 685.248 L1034.55 685.248 L1035.1 685.248 L1035.66 685.248 L1036.22 685.248 L1036.78 685.248 L1037.34 685.248 L1037.9 685.248 L1038.46 685.248 L1039.02 685.248 L1039.58 685.248 L1040.14 685.248 L1040.7 685.248 L1041.26 685.248 L1041.82 685.248 L1042.38 685.248 L1042.93 685.248 L1043.49 685.248 L1044.05 685.248 L1044.61 685.248 L1045.17 685.248 L1045.73 685.248 L1046.29 685.248 L1046.85 685.248 L1047.41 685.248 L1047.97 685.248 L1048.53 685.248 L1049.09 685.248 L1049.65 685.248 L1050.2 685.248 L1050.76 685.248 L1051.32 685.248 L1051.88 685.248 L1052.44 685.248 L1053 685.248 L1053.56 685.248 L1054.12 685.248 L1054.68 685.248 L1055.24 685.248 L1055.8 685.248 L1056.36 685.248 L1056.92 685.248 L1057.48 685.248 L1058.03 685.248 L1058.59 685.248 L1059.15 685.248 L1059.71 685.248 L1060.27 685.248 L1060.83 685.248 L1061.39 685.248 L1061.95 685.248 L1062.51 685.248 L1063.07 685.248 L1063.63 685.248 L1064.19 685.248 L1064.75 685.248 L1065.3 685.248 L1065.86 685.248 L1066.42 685.248 L1066.98 685.248 L1067.54 685.248 L1068.1 685.248 L1068.66 685.248 L1069.22 685.248 L1069.78 685.248 L1070.34 685.248 L1070.9 685.248 L1071.46 685.248 L1072.02 685.248 L1072.57 685.248 L1073.13 685.248 L1073.69 685.248 L1074.25 685.248 L1074.81 685.248 L1075.37 685.248 L1075.93 685.248 L1076.49 685.248 L1077.05 685.248 L1077.61 685.248 L1078.17 685.248 L1078.73 685.248 L1079.29 685.248 L1079.85 685.248 L1080.4 685.248 L1080.96 685.248 L1081.52 685.248 L1082.08 685.248 L1082.64 685.248 L1083.2 685.248 L1083.76 685.248 L1084.32 685.248 L1084.88 685.248 L1085.44 685.248 L1086 685.248 L1086.56 685.248 L1087.12 685.248 L1087.67 685.248 L1088.23 685.248 L1088.79 685.248 L1089.35 685.248 L1089.91 685.248 L1090.47 685.248 L1091.03 685.248 L1091.59 685.248 L1092.15 685.248 L1092.71 685.248 L1093.27 685.248 L1093.83 685.248 L1094.39 685.248 L1094.94 685.248 L1095.5 685.248 L1096.06 685.248 L1096.62 685.248 L1097.18 685.248 L1097.74 685.248 L1098.3 685.248 L1098.86 685.248 L1099.42 685.248 L1099.98 685.248 L1100.54 685.248 L1101.1 685.248 L1101.66 685.248 L1102.22 685.248 L1102.77 685.248 L1103.33 685.248 L1103.89 685.248 L1104.45 685.248 L1105.01 685.248 L1105.57 685.248 L1106.13 685.248 L1106.69 685.248 L1107.25 685.248 L1107.81 685.248 L1108.37 685.248 L1108.93 685.248 L1109.49 685.248 L1110.04 685.248 L1110.6 685.248 L1111.16 685.248 L1111.72 685.248 L1112.28 685.248 L1112.84 685.248 L1113.4 685.248 L1113.96 685.248 L1114.52 685.248 L1115.08 685.248 L1115.64 685.248 L1116.2 685.248 L1116.76 685.248 L1117.31 685.248 L1117.87 685.248 L1118.43 685.248 L1118.99 685.248 L1119.55 685.248 L1120.11 685.248 L1120.67 685.248 L1121.23 685.248 L1121.79 685.248 L1122.35 685.248 L1122.91 685.248 L1123.47 685.248 L1124.03 685.248 L1124.59 685.248 L1125.14 685.248 L1125.7 685.248 L1126.26 685.248 L1126.82 685.248 L1127.38 685.248 L1127.94 685.248 L1128.5 685.248 L1129.06 685.248 L1129.62 685.248 L1130.18 685.248 L1130.74 685.248 L1131.3 685.248 L1131.86 685.248 L1132.41 685.248 L1132.97 685.248 L1133.53 685.248 L1134.09 685.248 L1134.65 685.248 L1135.21 685.248 L1135.77 685.248 L1136.33 685.248 L1136.89 685.248 L1137.45 685.248 L1138.01 685.248 L1138.57 685.248 L1139.13 685.248 L1139.68 685.248 L1140.24 685.248 L1140.8 685.248 L1141.36 685.248 L1141.92 685.248 L1142.48 685.248 L1143.04 685.248 L1143.6 685.248 L1144.16 685.248 L1144.72 685.248 L1145.28 685.248 L1145.84 685.248 L1146.4 685.248 L1146.96 685.248 L1147.51 685.248 L1148.07 685.248 L1148.63 685.248 L1149.19 685.248 L1149.75 685.248 L1150.31 685.248 L1150.87 685.248 L1151.43 685.248 L1151.99 685.248 L1152.55 685.248 L1153.11 685.248 L1153.67 685.248 L1154.23 685.248 L1154.78 685.248 L1155.34 685.248 L1155.9 685.248 L1156.46 685.248 L1157.02 685.248 L1157.58 685.248 L1158.14 685.248 L1158.7 685.248 L1159.26 685.248 L1159.82 685.248 L1160.38 685.248 L1160.94 685.248 L1161.5 685.248 L1162.05 685.248 L1162.61 685.248 L1163.17 685.248 L1163.73 685.248 L1164.29 685.248 L1164.85 685.248 L1165.41 685.248 L1165.97 685.248 L1166.53 685.248 L1167.09 685.248 L1167.65 685.248 L1168.21 685.248 L1168.77 685.248 L1169.33 685.248 L1169.88 685.248 L1170.44 685.248 L1171 685.248 L1171.56 685.248 L1172.12 685.248 L1172.68 685.248 L1173.24 685.248 L1173.8 685.248 L1174.36 685.248 L1174.92 685.248 L1175.48 685.248 L1176.04 685.248 L1176.6 685.248 L1177.15 685.248 L1177.71 685.248 L1178.27 685.248 L1178.83 685.248 L1179.39 685.248 L1179.95 685.248 L1180.51 685.248 L1181.07 685.248 L1181.63 685.248 L1182.19 685.248 L1182.75 685.248 L1183.31 685.248 L1183.87 685.248 L1184.43 685.248 L1184.98 685.248 L1185.54 685.248 L1186.1 685.248 L1186.66 685.248 L1187.22 685.248 L1187.78 685.248 L1188.34 685.248 L1188.9 685.248 L1189.46 685.248 L1190.02 685.248 L1190.58 685.248 L1191.14 685.248 L1191.7 685.248 L1192.25 685.248 L1192.81 685.248 L1193.37 685.248 L1193.93 685.248 L1194.49 685.248 L1195.05 685.248 L1195.61 685.248 L1196.17 685.248 L1196.73 685.248 L1197.29 685.248 L1197.85 685.248 L1198.41 685.248 L1198.97 685.248 L1199.52 685.248 L1200.08 685.248 L1200.64 685.248 L1201.2 685.248 L1201.76 685.248 L1202.32 685.248 L1202.88 685.248 L1203.44 685.248 L1204 685.248 L1204.56 685.248 L1205.12 685.248 L1205.68 685.248 L1206.24 685.248 L1206.8 685.248 L1207.35 685.248 L1207.91 685.248 L1208.47 685.248 L1209.03 685.248 L1209.59 685.248 L1210.15 685.248 L1210.71 685.248 L1211.27 685.248 L1211.83 685.248 L1212.39 685.248 L1212.95 685.248 L1213.51 685.248 L1214.07 685.248 L1214.62 685.248 L1215.18 685.248 L1215.74 685.248 L1216.3 685.248 L1216.86 685.248 L1217.42 685.248 L1217.98 685.248 L1218.54 685.248 L1219.1 685.248 L1219.66 685.248 L1220.22 685.248 L1220.78 685.248 L1221.34 685.248 L1221.89 685.248 L1222.45 685.248 L1223.01 685.248 L1223.57 685.248 L1224.13 685.248 L1224.69 685.248 L1225.25 685.248 L1225.81 685.248 L1226.37 685.248 L1226.93 685.248 L1227.49 685.248 L1228.05 685.248 L1228.61 685.248 L1229.17 685.248 L1229.72 685.248 L1230.28 685.248 L1230.84 685.248 L1231.4 685.248 L1231.96 685.248 L1232.52 685.248 L1233.08 685.248 L1233.64 685.248 L1234.2 685.248 L1234.76 685.248 L1235.32 685.248 L1235.88 685.248 L1236.44 685.248 L1236.99 685.248 L1237.55 685.248 L1238.11 685.248 L1238.67 685.248 L1239.23 685.248 L1239.79 685.248 L1240.35 685.248 L1240.91 685.248 L1241.47 685.248 L1242.03 685.248 L1242.59 685.248 L1243.15 685.248 L1243.71 685.248 L1244.26 685.248 L1244.82 685.248 L1245.38 685.248 L1245.94 685.248 L1246.5 685.248 L1247.06 685.248 L1247.62 685.248 L1248.18 685.248 L1248.74 685.248 L1249.3 685.248 L1249.86 685.248 L1250.42 685.248 L1250.98 685.248 L1251.54 685.248 L1252.09 685.248 L1252.65 685.248 L1253.21 685.248 L1253.77 685.248 L1254.33 685.248 L1254.89 685.248 L1255.45 685.248 L1256.01 685.248 L1256.57 685.248 L1257.13 685.248 L1257.69 685.248 L1258.25 685.248 L1258.81 685.248 L1259.36 685.248 L1259.92 685.248 L1260.48 685.248 L1261.04 685.248 L1261.6 685.248 L1262.16 685.248 L1262.72 685.248 L1263.28 685.248 L1263.84 685.248 L1264.4 685.248 L1264.96 685.248 L1265.52 685.248 L1266.08 685.248 L1266.63 685.248 L1267.19 685.248 L1267.75 685.248 L1268.31 685.248 L1268.87 685.248 L1269.43 685.248 L1269.99 685.248 L1270.55 685.248 L1271.11 685.248 L1271.67 685.248 L1272.23 685.248 L1272.79 685.248 L1273.35 685.248 L1273.91 685.248 L1274.46 685.248 L1275.02 685.248 L1275.58 685.248 L1276.14 685.248 L1276.7 685.248 L1277.26 685.248 L1277.82 685.248 L1278.38 685.248 L1278.94 685.248 L1279.5 685.248 L1280.06 685.248 L1280.62 685.248 L1281.18 685.248 L1281.73 685.248 L1282.29 685.248 L1282.85 685.248 L1283.41 685.248 L1283.97 685.248 L1284.53 685.248 L1285.09 685.248 L1285.65 685.248 L1286.21 685.248 L1286.77 685.248 L1287.33 685.248 L1287.89 685.248 L1288.45 685.248 L1289 685.248 L1289.56 685.248 L1290.12 685.248 L1290.68 685.248 L1291.24 685.248 L1291.8 685.248 L1292.36 685.248 L1292.92 685.248 L1293.48 685.248 L1294.04 685.248 L1294.6 685.248 L1295.16 685.248 L1295.72 685.248 L1296.28 685.248 L1296.83 685.248 L1297.39 685.248 L1297.95 685.248 L1298.51 685.248 L1299.07 685.248 L1299.63 685.248 L1300.19 685.248 L1300.75 685.248 L1301.31 685.248 L1301.87 685.248 L1302.43 685.248 L1302.99 685.248 L1303.55 685.248 L1304.1 685.248 L1304.66 685.248 L1305.22 685.248 L1305.78 685.248 L1306.34 685.248 L1306.9 685.248 L1307.46 685.248 L1308.02 685.248 L1308.58 685.248 L1309.14 685.248 L1309.7 685.248 L1310.26 685.248 L1310.82 685.248 L1311.38 685.248 L1311.93 685.248 L1312.49 685.248 L1313.05 685.248 L1313.61 685.248 L1314.17 685.248 L1314.73 685.248 L1315.29 685.248 L1315.85 685.248 L1316.41 685.248 L1316.97 685.248 L1317.53 685.248 L1318.09 685.248 L1318.65 685.248 L1319.2 685.248 L1319.76 685.248 L1320.32 685.248 L1320.88 685.248 L1321.44 685.248 L1322 685.248 L1322.56 685.248 L1323.12 685.248 L1323.68 685.248 L1324.24 685.248 L1324.8 685.248 L1325.36 685.248 L1325.92 685.248 L1326.47 685.248 L1327.03 685.248 L1327.59 685.248 L1328.15 685.248 L1328.71 685.248 L1329.27 685.248 L1329.83 685.248 L1330.39 685.248 L1330.95 685.248 L1331.51 685.248 L1332.07 685.248 L1332.63 685.248 L1333.19 685.248 L1333.75 685.248 L1334.3 685.248 L1334.86 685.248 L1335.42 685.248 L1335.98 685.248 L1336.54 685.248 L1337.1 685.248 L1337.66 685.248 L1338.22 685.248 L1338.78 685.248 L1339.34 685.248 L1339.9 685.248 L1340.46 685.248 L1341.02 685.248 L1341.57 685.248 L1342.13 685.248 L1342.69 685.248 L1343.25 685.248 L1343.81 685.248 L1344.37 685.248 L1344.93 685.248 L1345.49 685.248 L1346.05 685.248 L1346.61 685.248 L1347.17 685.248 L1347.73 685.248 L1348.29 685.248 L1348.84 685.248 L1349.4 685.248 L1349.96 685.248 L1350.52 685.248 L1351.08 685.248 L1351.64 685.248 L1352.2 685.248 L1352.76 685.248 L1353.32 685.248 L1353.88 685.248 L1354.44 685.248 L1355 685.248 L1355.56 685.248 L1356.12 685.248 L1356.67 685.248 L1357.23 685.248 L1357.79 685.248 L1358.35 685.248 L1358.91 685.248 L1359.47 685.248 L1360.03 685.248 L1360.59 685.248 L1361.15 685.248 L1361.71 685.248 L1362.27 685.248 L1362.83 685.248 L1363.39 685.248 L1363.94 685.248 L1364.5 685.248 L1365.06 685.248 L1365.62 685.248 L1366.18 685.248 L1366.74 685.248 L1367.3 685.248 L1367.86 685.248 L1368.42 685.248 L1368.98 685.248 L1369.54 685.248 L1370.1 685.248 L1370.66 685.248 L1371.21 685.248 L1371.77 685.248 L1372.33 685.248 L1372.89 685.248 L1373.45 685.248 L1374.01 685.248 L1374.57 685.248 L1375.13 685.248 L1375.69 685.248 L1376.25 685.248 L1376.81 685.248 L1377.37 685.248 L1377.93 685.248 L1378.49 685.248 L1379.04 685.248 L1379.6 685.248 L1380.16 685.248 L1380.72 685.248 L1381.28 685.248 L1381.84 685.248 L1382.4 685.248 L1382.96 685.248 L1383.52 685.248 L1384.08 685.248 L1384.64 685.248 L1385.2 685.248 L1385.76 685.248 L1386.31 685.248 L1386.87 685.248 L1387.43 685.248 L1387.99 685.248 L1388.55 685.248 L1389.11 685.248 L1389.67 685.248 L1390.23 685.248 L1390.79 685.248 L1391.35 685.248 L1391.91 685.248 L1392.47 685.248 L1393.03 685.248 L1393.58 685.248 L1394.14 685.248 L1394.7 685.248 L1395.26 685.248 L1395.82 685.248 L1396.38 685.248 L1396.94 685.248 L1397.5 685.248 L1398.06 685.248 L1398.62 685.248 L1399.18 685.248 L1399.74 685.248 L1400.3 685.248 L1400.86 685.248 L1401.41 685.248 L1401.97 685.248 L1402.53 685.248 L1403.09 685.248 L1403.65 685.248 L1404.21 685.248 L1404.77 685.248 L1405.33 685.248 L1405.89 685.248 L1406.45 685.248 L1407.01 685.248 L1407.57 685.248 L1408.13 685.248 L1408.68 685.248 L1409.24 685.248 L1409.8 685.248 L1410.36 685.248 L1410.92 685.248 L1411.48 685.248 L1412.04 685.248 L1412.6 685.248 L1413.16 685.248 L1413.72 685.248 L1414.28 685.248 L1414.84 685.248 L1415.4 685.248 L1415.95 685.248 L1416.51 685.248 L1417.07 685.248 L1417.63 685.248 L1418.19 685.248 L1418.75 685.248 L1419.31 685.248 L1419.87 685.248 L1420.43 685.248 L1420.99 685.248 L1421.55 685.248 L1422.11 685.248 L1422.67 685.248 L1423.23 685.248 L1423.78 685.248 L1424.34 685.248 L1424.9 685.248 L1425.46 685.248 L1426.02 685.248 L1426.58 685.248 L1427.14 685.248 L1427.7 685.248 L1428.26 685.248 L1428.82 685.248 L1429.38 685.248 L1429.94 685.248 L1430.5 685.248 L1431.05 685.248 L1431.61 685.248 L1432.17 685.248 L1432.73 685.248 L1433.29 685.248 L1433.85 685.248 L1434.41 685.248 L1434.97 685.248 L1435.53 685.248 L1436.09 685.248 L1436.65 685.248 L1437.21 685.248 L1437.77 685.248 L1438.33 685.248 L1438.88 685.248 L1439.44 685.248 L1440 685.248 L1440.56 685.248 L1441.12 685.248 L1441.68 685.248 L1442.24 685.248 L1442.8 685.248 L1443.36 685.248 L1443.92 685.248 L1444.48 685.248 L1445.04 685.248 L1445.6 685.248 L1446.15 685.248 L1446.71 685.248 L1447.27 685.248 L1447.83 685.248 L1448.39 685.248 L1448.95 685.248 L1449.51 685.248 L1450.07 685.248 L1450.63 685.248 L1451.19 685.248 L1451.75 685.248 L1452.31 685.248 L1452.87 685.248 L1453.42 685.248 L1453.98 685.248 L1454.54 685.248 L1455.1 685.248 L1455.66 685.248 L1456.22 685.248 L1456.78 685.248 L1457.34 685.248 L1457.9 685.248 L1458.46 685.248 L1459.02 685.248 L1459.58 685.248 L1460.14 685.248 L1460.7 685.248 L1461.25 685.248 L1461.81 685.248 L1462.37 685.248 L1462.93 685.248 L1463.49 685.248 L1464.05 685.248 L1464.61 685.248 L1465.17 685.248 L1465.73 685.248 L1466.29 685.248 L1466.85 685.248 L1467.41 685.248 L1467.97 685.248 L1468.52 685.248 L1469.08 685.248 L1469.64 685.248 L1470.2 685.248 L1470.76 685.248 L1471.32 685.248 L1471.88 685.248 L1472.44 685.248 L1473 685.248 L1473.56 685.248 L1474.12 685.248 L1474.68 685.248 L1475.24 685.248 L1475.79 685.248 L1476.35 685.248 L1476.91 685.248 L1477.47 685.248 L1478.03 685.248 L1478.59 685.248 L1479.15 685.248 L1479.71 685.248 L1480.27 685.248 L1480.83 685.248 L1481.39 685.248 L1481.95 685.248 L1482.51 685.248 L1483.07 685.248 L1483.62 685.248 L1484.18 685.248 L1484.74 685.248 L1485.3 685.248 L1485.86 685.248 L1486.42 685.248 L1486.98 685.248 L1487.54 685.248 L1488.1 685.248 L1488.66 685.248 L1489.22 685.248 L1489.78 685.248 L1490.34 685.248 L1490.89 685.248 L1491.45 685.248 L1492.01 685.248 L1492.57 685.248 L1493.13 685.248 L1493.69 685.248 L1494.25 685.248 L1494.81 685.248 L1495.37 685.248 L1495.93 685.248 L1496.49 685.248 L1497.05 685.248 L1497.61 685.248 L1498.16 685.248 L1498.72 685.248 L1499.28 685.248 L1499.84 685.248 L1500.4 685.248 L1500.96 685.248 L1501.52 685.248 L1502.08 685.248 L1502.64 685.248 L1503.2 685.248 L1503.76 685.248 L1504.32 685.248 L1504.88 685.248 L1505.44 685.248 L1505.99 685.248 L1506.55 685.248 L1507.11 685.248 L1507.67 685.248 L1508.23 685.248 L1508.79 685.248 L1509.35 685.248 L1509.91 685.248 L1510.47 685.248 L1511.03 685.248 L1511.59 685.248 L1512.15 685.248 L1512.71 685.248 L1513.26 685.248 L1513.82 685.248 L1514.38 685.248 L1514.94 685.248 L1515.5 685.248 L1516.06 685.248 L1516.62 685.248 L1517.18 685.248 L1517.74 685.248 L1518.3 685.248 L1518.86 685.248 L1519.42 685.248 L1519.98 685.248 L1520.53 685.248 L1521.09 685.248 L1521.65 685.248 L1522.21 685.248 L1522.77 685.248 L1523.33 685.248 L1523.89 685.248 L1524.45 685.248 L1525.01 685.248 L1525.57 685.248 L1526.13 685.248 L1526.69 685.248 L1527.25 685.248 L1527.81 685.248 L1528.36 685.248 L1528.92 685.248 L1529.48 685.248 L1530.04 685.248 L1530.6 685.248 L1531.16 685.248 L1531.72 685.248 L1532.28 685.248 L1532.84 685.248 L1533.4 685.248 L1533.96 685.248 L1534.52 685.248 L1535.08 685.248 L1535.63 685.248 L1536.19 685.248 L1536.75 685.248 L1537.31 685.248 L1537.87 685.248 L1538.43 685.248 L1538.99 685.248 L1539.55 685.248 L1540.11 685.248 L1540.67 685.248 L1541.23 685.248 L1541.79 685.248 L1542.35 685.248 L1542.9 685.248 L1543.46 685.248 L1544.02 685.248 L1544.58 685.248 L1545.14 685.248 L1545.7 685.248 L1546.26 685.248 L1546.82 685.248 L1547.38 685.248 L1547.94 685.248 L1548.5 685.248 L1549.06 685.248 L1549.62 685.248 L1550.18 685.248 L1550.73 685.248 L1551.29 685.248 L1551.85 685.248 L1552.41 685.248 L1552.97 685.248 L1553.53 685.248 L1554.09 685.248 L1554.65 685.248 L1555.21 685.248 L1555.77 685.248 L1556.33 685.248 L1556.89 685.248 L1557.45 685.248 L1558 685.248 L1558.56 685.248 L1559.12 685.248 L1559.68 685.248 L1560.24 685.248 L1560.8 685.248 L1561.36 685.248 L1561.92 685.248 L1562.48 685.248 L1563.04 685.248 L1563.6 685.248 L1564.16 685.248 L1564.72 685.248 L1565.28 685.248 L1565.83 685.248 L1566.39 685.248 L1566.95 685.248 L1567.51 685.248 L1568.07 685.248 L1568.63 685.248 L1569.19 685.248 L1569.75 685.248 L1570.31 685.248 L1570.87 685.248 L1571.43 685.248 L1571.99 685.248 L1572.55 685.248 L1573.1 685.248 L1573.66 685.248 L1574.22 685.248 L1574.78 685.248 L1575.34 685.248 L1575.9 685.248 L1576.46 685.248 L1577.02 685.248 L1577.58 685.248 L1578.14 685.248 L1578.7 685.248 L1579.26 685.248 L1579.82 685.248 L1580.37 685.248 L1580.93 685.248 L1581.49 685.248 L1582.05 685.248 L1582.61 685.248 L1583.17 685.248 L1583.73 685.248 L1584.29 685.248 L1584.85 685.248 L1585.41 685.248 L1585.97 685.248 L1586.53 685.248 L1587.09 685.248 L1587.65 685.248 L1588.2 685.248 L1588.76 685.248 L1589.32 685.248 L1589.88 685.248 L1590.44 685.248 L1591 685.248 L1591.56 685.248 L1592.12 685.248 L1592.68 685.248 L1593.24 685.248 L1593.8 685.248 L1594.36 685.248 L1594.92 685.248 L1595.47 685.248 L1596.03 685.248 L1596.59 685.248 L1597.15 685.248 L1597.71 685.248 L1598.27 685.248 L1598.83 685.248 L1599.39 685.248 L1599.95 685.248 L1600.51 685.248 L1601.07 685.248 L1601.63 685.248 L1602.19 685.248 L1602.74 685.248 L1603.3 685.248 L1603.86 685.248 L1604.42 685.248 L1604.98 685.248 L1605.54 685.248 L1606.1 685.248 L1606.66 685.248 L1607.22 685.248 L1607.78 685.248 L1608.34 685.248 L1608.9 685.248 L1609.46 685.248 L1610.02 685.248 L1610.57 685.248 L1611.13 685.248 L1611.69 685.248 L1612.25 685.248 L1612.81 685.248 L1613.37 685.248 L1613.93 685.248 L1614.49 685.248 L1615.05 685.248 L1615.61 685.248 L1616.17 685.248 L1616.73 685.248 L1617.29 685.248 L1617.84 685.248 L1618.4 685.248 L1618.96 685.248 L1619.52 685.248 L1620.08 685.248 L1620.64 685.248 L1621.2 685.248 L1621.76 685.248 L1622.32 685.248 L1622.88 685.248 L1623.44 685.248 L1624 685.248 L1624.56 685.248 L1625.11 685.248 L1625.67 685.248 L1626.23 685.248 L1626.79 685.248 L1627.35 685.248 L1627.91 685.248 L1628.47 685.248 L1629.03 685.248 L1629.59 685.248 L1630.15 685.248 L1630.71 685.248 L1631.27 685.248 L1631.83 685.248 L1632.39 685.248 L1632.94 685.248 L1633.5 685.248 L1634.06 685.248 L1634.62 685.248 L1635.18 685.248 L1635.74 685.248 L1636.3 685.248 L1636.86 685.248 L1637.42 685.248 L1637.98 685.248 L1638.54 685.248 L1639.1 685.248 L1639.66 685.248 L1640.21 685.248 L1640.77 685.248 L1641.33 685.248 L1641.89 685.248 L1642.45 685.248 L1643.01 685.248 L1643.57 685.248 L1644.13 685.248 L1644.69 685.248 L1645.25 685.248 L1645.81 685.248 L1646.37 685.248 L1646.93 685.248 L1647.48 685.248 L1648.04 685.248 L1648.6 685.248 L1649.16 685.248 L1649.72 685.248 L1650.28 685.248 L1650.84 685.248 L1651.4 685.248 L1651.96 685.248 L1652.52 685.248 L1653.08 685.248 L1653.64 685.248 L1654.2 685.248 L1654.76 685.248 L1655.31 685.248 L1655.87 685.248 L1656.43 685.248 L1656.99 685.248 L1657.55 685.248 L1658.11 685.248 L1658.67 685.248 L1659.23 685.248 L1659.79 685.248 L1660.35 685.248 L1660.91 685.248 L1661.47 685.248 L1662.03 685.248 L1662.58 685.248 L1663.14 685.248 L1663.7 685.248 L1664.26 685.248 L1664.82 685.248 L1665.38 685.248 L1665.94 685.248 L1666.5 685.248 L1667.06 685.248 L1667.62 685.248 L1668.18 685.248 L1668.74 685.248 L1669.3 685.248 L1669.85 685.248 L1670.41 685.248 L1670.97 685.248 L1671.53 685.248 L1672.09 685.248 L1672.65 685.248 L1673.21 685.248 L1673.77 685.248 L1674.33 685.248 L1674.89 685.248 L1675.45 685.248 L1676.01 685.248 L1676.57 685.248 L1677.13 685.248 L1677.68 685.248 L1678.24 685.248 L1678.8 685.248 L1679.36 685.248 L1679.92 685.248 L1680.48 685.248 L1681.04 685.248 L1681.6 685.248 L1682.16 685.248 L1682.72 685.248 L1683.28 685.248 L1683.84 685.248 L1684.4 685.248 L1684.95 685.248 L1685.51 685.248 L1686.07 685.248 L1686.63 685.248 L1687.19 685.248 L1687.75 685.248 L1688.31 685.248 L1688.87 685.248 L1689.43 685.248 L1689.99 685.248 L1690.55 685.248 L1691.11 685.248 L1691.67 685.248 L1692.23 685.248 L1692.78 685.248 L1693.34 685.248 L1693.9 685.248 L1694.46 685.248 L1695.02 685.248 L1695.58 685.248 L1696.14 685.248 L1696.7 685.248 L1697.26 685.248 L1697.82 685.248 L1698.38 685.248 L1698.94 685.248 L1699.5 685.248 L1700.05 685.248 L1700.61 685.248 L1701.17 685.248 L1701.73 685.248 L1702.29 685.248 L1702.85 685.248 L1703.41 685.248 L1703.97 685.248 L1704.53 685.248 L1705.09 685.248 L1705.65 685.248 L1706.21 685.248 L1706.77 685.248 L1707.32 685.248 L1707.88 685.248 L1708.44 685.248 L1709 685.248 L1709.56 685.248 L1710.12 685.248 L1710.68 685.248 L1711.24 685.248 L1711.8 685.248 L1712.36 685.248 L1712.92 685.248 L1713.48 685.248 L1714.04 685.248 L1714.6 685.248 L1715.15 685.248 L1715.71 685.248 L1716.27 685.248 L1716.83 685.248 L1717.39 685.248 L1717.95 685.248 L1718.51 685.248 L1719.07 685.248 L1719.63 685.248 L1720.19 685.248 L1720.75 685.248 L1721.31 685.248 L1721.87 685.248 L1722.42 685.248 L1722.98 685.248 L1723.54 685.248 L1724.1 685.248 L1724.66 685.248 L1725.22 685.248 L1725.78 685.248 L1726.34 685.248 L1726.9 685.248 L1727.46 685.248 L1728.02 685.248 L1728.58 685.248 L1729.14 685.248 L1729.69 685.248 L1730.25 685.248 L1730.81 685.248 L1731.37 685.248 L1731.93 685.248 L1732.49 685.248 L1733.05 685.248 L1733.61 685.248 L1734.17 685.248 L1734.73 685.248 L1735.29 685.248 L1735.85 685.248 L1736.41 685.248 L1736.97 685.248 L1737.52 685.248 L1738.08 685.248 L1738.64 685.248 L1739.2 685.248 L1739.76 685.248 L1740.32 685.248 L1740.88 685.248 L1741.44 685.248 L1742 685.248 L1742.56 685.248 L1743.12 685.248 L1743.68 685.248 L1744.24 685.248 L1744.79 685.248 L1745.35 685.248 L1745.91 685.248 L1746.47 685.248 L1747.03 685.248 L1747.59 685.248 L1748.15 685.248 L1748.71 685.248 L1749.27 685.248 L1749.83 685.248 L1750.39 685.248 L1750.95 685.248 L1751.51 685.248 L1752.06 685.248 L1752.62 685.248 L1753.18 685.248 L1753.74 685.248 L1754.3 685.248 L1754.86 685.248 L1755.42 685.248 L1755.98 685.248 L1756.54 685.248 L1757.1 685.248 L1757.66 685.248 L1758.22 685.248 L1758.78 685.248 L1759.34 685.248 L1759.89 685.248 L1760.45 685.248 L1761.01 685.248 L1761.57 685.248 L1762.13 685.248 L1762.69 685.248 L1763.25 685.248 L1763.81 685.248 L1764.37 685.248 L1764.93 685.248 L1765.49 685.248 L1766.05 685.248 L1766.61 685.248 L1767.16 685.248 L1767.72 685.248 L1768.28 685.248 L1768.84 685.248 L1769.4 685.248 L1769.96 685.248 L1770.52 685.248 L1771.08 685.248 L1771.64 685.248 L1772.2 685.248 L1772.76 685.248 L1773.32 685.248 L1773.88 685.248 L1774.43 685.248 L1774.99 685.248 L1775.55 685.248 L1776.11 685.248 L1776.67 685.248 L1777.23 685.248 L1777.79 685.248 L1778.35 685.248 L1778.91 685.248 L1779.47 685.248 L1780.03 685.248 L1780.59 685.248 L1781.15 685.248 L1781.71 685.248 L1782.26 685.248 L1782.82 685.248 L1783.38 685.248 L1783.94 685.248 L1784.5 685.248 L1785.06 685.248 L1785.62 685.248 L1786.18 685.248 L1786.74 685.248 L1787.3 685.248 L1787.86 685.248 L1788.42 685.248 L1788.98 685.248 L1789.53 685.248 L1790.09 685.248 L1790.65 685.248 L1791.21 685.248 L1791.77 685.248 L1792.33 685.248 L1792.89 685.248 L1793.45 685.248 L1794.01 685.248 L1794.57 685.248 L1795.13 685.248 L1795.69 685.248 L1796.25 685.248 L1796.8 685.248 L1797.36 685.248 L1797.92 685.248 L1798.48 685.248 L1799.04 685.248 L1799.6 685.248 L1800.16 685.248 L1800.72 685.248 L1801.28 685.248 L1801.84 685.248 L1802.4 685.248 L1802.96 685.248 L1803.52 685.248 L1804.08 685.248 L1804.63 685.248 L1805.19 685.248 L1805.75 685.248 L1806.31 685.248 L1806.87 685.248 L1807.43 685.248 L1807.99 685.248 L1808.55 685.248 L1809.11 685.248 L1809.67 685.248 L1810.23 685.248 L1810.79 685.248 L1811.35 685.248 L1811.9 685.248 L1812.46 685.248 L1813.02 685.248 L1813.58 685.248 L1814.14 685.248 L1814.7 685.248 L1815.26 685.248 L1815.82 685.248 L1816.38 685.248 L1816.94 685.248 L1817.5 685.248 L1818.06 685.248 L1818.62 685.248 L1819.18 685.248 L1819.73 685.248 L1820.29 685.248 L1820.85 685.248 L1821.41 685.248 L1821.97 685.248 L1822.53 685.248 L1823.09 685.248 L1823.65 685.248 L1824.21 685.248 L1824.77 685.248 L1825.33 685.248 L1825.89 685.248 L1826.45 685.248 L1827 685.248 L1827.56 685.248 L1828.12 685.248 L1828.68 685.248 L1829.24 685.248 L1829.8 685.248 L1830.36 685.248 L1830.92 685.248 L1831.48 685.248 L1832.04 685.248 L1832.6 685.248 L1833.16 685.248 L1833.72 685.248 L1834.27 685.248 L1834.83 685.248 L1835.39 685.248 L1835.95 685.248 L1836.51 685.248 L1837.07 685.248 L1837.63 685.248 L1838.19 685.248 L1838.19 683.345 L1837.63 683.345 L1837.07 683.345 L1836.51 683.345 L1835.95 683.345 L1835.39 683.345 L1834.83 683.345 L1834.27 683.345 L1833.72 683.345 L1833.16 683.345 L1832.6 683.345 L1832.04 683.345 L1831.48 683.345 L1830.92 683.345 L1830.36 683.345 L1829.8 683.345 L1829.24 683.345 L1828.68 683.345 L1828.12 683.345 L1827.56 683.345 L1827 683.345 L1826.45 683.345 L1825.89 683.345 L1825.33 683.345 L1824.77 683.345 L1824.21 683.345 L1823.65 683.345 L1823.09 683.345 L1822.53 683.345 L1821.97 683.345 L1821.41 683.345 L1820.85 683.345 L1820.29 683.345 L1819.73 683.345 L1819.18 683.345 L1818.62 683.345 L1818.06 683.345 L1817.5 683.345 L1816.94 683.345 L1816.38 683.345 L1815.82 683.345 L1815.26 683.345 L1814.7 683.345 L1814.14 683.345 L1813.58 683.345 L1813.02 683.345 L1812.46 683.345 L1811.9 683.345 L1811.35 683.345 L1810.79 683.345 L1810.23 683.345 L1809.67 683.345 L1809.11 683.345 L1808.55 683.345 L1807.99 683.345 L1807.43 683.345 L1806.87 683.345 L1806.31 683.345 L1805.75 683.345 L1805.19 683.345 L1804.63 683.345 L1804.08 683.345 L1803.52 683.345 L1802.96 683.345 L1802.4 683.345 L1801.84 683.345 L1801.28 683.345 L1800.72 683.345 L1800.16 683.345 L1799.6 683.345 L1799.04 683.345 L1798.48 683.345 L1797.92 683.345 L1797.36 683.345 L1796.8 683.345 L1796.25 683.345 L1795.69 683.345 L1795.13 683.345 L1794.57 683.345 L1794.01 683.345 L1793.45 683.345 L1792.89 683.345 L1792.33 683.345 L1791.77 683.345 L1791.21 683.345 L1790.65 683.345 L1790.09 683.345 L1789.53 683.345 L1788.98 683.345 L1788.42 683.345 L1787.86 683.345 L1787.3 683.345 L1786.74 683.345 L1786.18 683.345 L1785.62 683.345 L1785.06 683.345 L1784.5 683.345 L1783.94 683.345 L1783.38 683.345 L1782.82 683.345 L1782.26 683.345 L1781.71 683.345 L1781.15 683.345 L1780.59 683.345 L1780.03 683.345 L1779.47 683.345 L1778.91 683.345 L1778.35 683.345 L1777.79 683.345 L1777.23 683.345 L1776.67 683.345 L1776.11 683.345 L1775.55 683.345 L1774.99 683.345 L1774.43 683.345 L1773.88 683.345 L1773.32 683.345 L1772.76 683.345 L1772.2 683.345 L1771.64 683.345 L1771.08 683.345 L1770.52 683.345 L1769.96 683.345 L1769.4 683.345 L1768.84 683.345 L1768.28 683.345 L1767.72 683.345 L1767.16 683.345 L1766.61 683.345 L1766.05 683.345 L1765.49 683.345 L1764.93 683.345 L1764.37 683.345 L1763.81 683.345 L1763.25 683.345 L1762.69 683.345 L1762.13 683.345 L1761.57 683.345 L1761.01 683.345 L1760.45 683.345 L1759.89 683.345 L1759.34 683.345 L1758.78 683.345 L1758.22 683.345 L1757.66 683.345 L1757.1 683.345 L1756.54 683.345 L1755.98 683.345 L1755.42 683.345 L1754.86 683.345 L1754.3 683.345 L1753.74 683.345 L1753.18 683.345 L1752.62 683.345 L1752.06 683.345 L1751.51 683.345 L1750.95 683.345 L1750.39 683.345 L1749.83 683.345 L1749.27 683.345 L1748.71 683.345 L1748.15 683.345 L1747.59 683.345 L1747.03 683.345 L1746.47 683.345 L1745.91 683.345 L1745.35 683.345 L1744.79 683.345 L1744.24 683.345 L1743.68 683.345 L1743.12 683.345 L1742.56 683.345 L1742 683.345 L1741.44 683.345 L1740.88 683.345 L1740.32 683.345 L1739.76 683.345 L1739.2 683.345 L1738.64 683.345 L1738.08 683.345 L1737.52 683.345 L1736.97 683.345 L1736.41 683.345 L1735.85 683.345 L1735.29 683.345 L1734.73 683.345 L1734.17 683.345 L1733.61 683.345 L1733.05 683.345 L1732.49 683.345 L1731.93 683.345 L1731.37 683.345 L1730.81 683.345 L1730.25 683.345 L1729.69 683.345 L1729.14 683.345 L1728.58 683.345 L1728.02 683.345 L1727.46 683.345 L1726.9 683.345 L1726.34 683.345 L1725.78 683.345 L1725.22 683.345 L1724.66 683.345 L1724.1 683.345 L1723.54 683.345 L1722.98 683.345 L1722.42 683.345 L1721.87 683.345 L1721.31 683.345 L1720.75 683.345 L1720.19 683.345 L1719.63 683.345 L1719.07 683.345 L1718.51 683.345 L1717.95 683.345 L1717.39 683.345 L1716.83 683.345 L1716.27 683.345 L1715.71 683.345 L1715.15 683.345 L1714.6 683.345 L1714.04 683.345 L1713.48 683.345 L1712.92 683.345 L1712.36 683.345 L1711.8 683.345 L1711.24 683.345 L1710.68 683.345 L1710.12 683.345 L1709.56 683.345 L1709 683.345 L1708.44 683.345 L1707.88 683.345 L1707.32 683.345 L1706.77 683.345 L1706.21 683.345 L1705.65 683.345 L1705.09 683.345 L1704.53 683.345 L1703.97 683.345 L1703.41 683.345 L1702.85 683.345 L1702.29 683.345 L1701.73 683.345 L1701.17 683.345 L1700.61 683.345 L1700.05 683.345 L1699.5 683.345 L1698.94 683.345 L1698.38 683.345 L1697.82 683.345 L1697.26 683.345 L1696.7 683.345 L1696.14 683.345 L1695.58 683.345 L1695.02 683.345 L1694.46 683.345 L1693.9 683.345 L1693.34 683.345 L1692.78 683.345 L1692.23 683.345 L1691.67 683.345 L1691.11 683.345 L1690.55 683.345 L1689.99 683.345 L1689.43 683.345 L1688.87 683.345 L1688.31 683.345 L1687.75 683.345 L1687.19 683.345 L1686.63 683.345 L1686.07 683.345 L1685.51 683.345 L1684.95 683.345 L1684.4 683.345 L1683.84 683.345 L1683.28 683.345 L1682.72 683.345 L1682.16 683.345 L1681.6 683.345 L1681.04 683.345 L1680.48 683.345 L1679.92 683.345 L1679.36 683.345 L1678.8 683.345 L1678.24 683.345 L1677.68 683.345 L1677.13 683.345 L1676.57 683.345 L1676.01 683.345 L1675.45 683.345 L1674.89 683.345 L1674.33 683.345 L1673.77 683.345 L1673.21 683.345 L1672.65 683.345 L1672.09 683.345 L1671.53 683.345 L1670.97 683.345 L1670.41 683.345 L1669.85 683.345 L1669.3 683.345 L1668.74 683.345 L1668.18 683.345 L1667.62 683.345 L1667.06 683.345 L1666.5 683.345 L1665.94 683.345 L1665.38 683.345 L1664.82 683.345 L1664.26 683.345 L1663.7 683.345 L1663.14 683.345 L1662.58 683.345 L1662.03 683.345 L1661.47 683.345 L1660.91 683.345 L1660.35 683.345 L1659.79 683.345 L1659.23 683.345 L1658.67 683.345 L1658.11 683.345 L1657.55 683.345 L1656.99 683.345 L1656.43 683.345 L1655.87 683.345 L1655.31 683.345 L1654.76 683.345 L1654.2 683.345 L1653.64 683.345 L1653.08 683.345 L1652.52 683.345 L1651.96 683.345 L1651.4 683.345 L1650.84 683.345 L1650.28 683.345 L1649.72 683.345 L1649.16 683.345 L1648.6 683.345 L1648.04 683.345 L1647.48 683.345 L1646.93 683.345 L1646.37 683.345 L1645.81 683.345 L1645.25 683.345 L1644.69 683.345 L1644.13 683.345 L1643.57 683.345 L1643.01 683.345 L1642.45 683.345 L1641.89 683.345 L1641.33 683.345 L1640.77 683.345 L1640.21 683.345 L1639.66 683.345 L1639.1 683.345 L1638.54 683.345 L1637.98 683.345 L1637.42 683.345 L1636.86 683.345 L1636.3 683.345 L1635.74 683.345 L1635.18 683.345 L1634.62 683.345 L1634.06 683.345 L1633.5 683.345 L1632.94 683.345 L1632.39 683.345 L1631.83 683.345 L1631.27 683.345 L1630.71 683.345 L1630.15 683.345 L1629.59 683.345 L1629.03 683.345 L1628.47 683.345 L1627.91 683.345 L1627.35 683.345 L1626.79 683.345 L1626.23 683.345 L1625.67 683.345 L1625.11 683.345 L1624.56 683.345 L1624 683.345 L1623.44 683.345 L1622.88 683.345 L1622.32 683.345 L1621.76 683.345 L1621.2 683.345 L1620.64 683.345 L1620.08 683.345 L1619.52 683.345 L1618.96 683.345 L1618.4 683.345 L1617.84 683.345 L1617.29 683.345 L1616.73 683.345 L1616.17 683.345 L1615.61 683.345 L1615.05 683.345 L1614.49 683.345 L1613.93 683.345 L1613.37 683.345 L1612.81 683.345 L1612.25 683.345 L1611.69 683.345 L1611.13 683.345 L1610.57 683.345 L1610.02 683.345 L1609.46 683.345 L1608.9 683.345 L1608.34 683.345 L1607.78 683.345 L1607.22 683.345 L1606.66 683.345 L1606.1 683.345 L1605.54 683.345 L1604.98 683.345 L1604.42 683.345 L1603.86 683.345 L1603.3 683.345 L1602.74 683.345 L1602.19 683.345 L1601.63 683.345 L1601.07 683.345 L1600.51 683.345 L1599.95 683.345 L1599.39 683.345 L1598.83 683.345 L1598.27 683.345 L1597.71 683.345 L1597.15 683.345 L1596.59 683.345 L1596.03 683.345 L1595.47 683.345 L1594.92 683.345 L1594.36 683.345 L1593.8 683.345 L1593.24 683.345 L1592.68 683.345 L1592.12 683.345 L1591.56 683.345 L1591 683.345 L1590.44 683.345 L1589.88 683.345 L1589.32 683.345 L1588.76 683.345 L1588.2 683.345 L1587.65 683.345 L1587.09 683.345 L1586.53 683.345 L1585.97 683.345 L1585.41 683.345 L1584.85 683.345 L1584.29 683.345 L1583.73 683.345 L1583.17 683.345 L1582.61 683.345 L1582.05 683.345 L1581.49 683.345 L1580.93 683.345 L1580.37 683.345 L1579.82 683.345 L1579.26 683.345 L1578.7 683.345 L1578.14 683.345 L1577.58 683.345 L1577.02 683.345 L1576.46 683.345 L1575.9 683.345 L1575.34 683.345 L1574.78 683.345 L1574.22 683.345 L1573.66 683.345 L1573.1 683.345 L1572.55 683.345 L1571.99 683.345 L1571.43 683.345 L1570.87 683.345 L1570.31 683.345 L1569.75 683.345 L1569.19 683.345 L1568.63 683.345 L1568.07 683.345 L1567.51 683.345 L1566.95 683.345 L1566.39 683.345 L1565.83 683.345 L1565.28 683.345 L1564.72 683.345 L1564.16 683.345 L1563.6 683.345 L1563.04 683.345 L1562.48 683.345 L1561.92 683.345 L1561.36 683.345 L1560.8 683.345 L1560.24 683.345 L1559.68 683.345 L1559.12 683.345 L1558.56 683.345 L1558 683.345 L1557.45 683.345 L1556.89 683.345 L1556.33 683.345 L1555.77 683.345 L1555.21 683.345 L1554.65 683.345 L1554.09 683.345 L1553.53 683.345 L1552.97 683.345 L1552.41 683.345 L1551.85 683.345 L1551.29 683.345 L1550.73 683.345 L1550.18 683.345 L1549.62 683.345 L1549.06 683.345 L1548.5 683.345 L1547.94 683.345 L1547.38 683.345 L1546.82 683.345 L1546.26 683.345 L1545.7 683.345 L1545.14 683.345 L1544.58 683.345 L1544.02 683.345 L1543.46 683.345 L1542.9 683.345 L1542.35 683.345 L1541.79 683.345 L1541.23 683.345 L1540.67 683.345 L1540.11 683.345 L1539.55 683.345 L1538.99 683.345 L1538.43 683.345 L1537.87 683.345 L1537.31 683.345 L1536.75 683.345 L1536.19 683.345 L1535.63 683.345 L1535.08 683.345 L1534.52 683.345 L1533.96 683.345 L1533.4 683.345 L1532.84 683.345 L1532.28 683.345 L1531.72 683.345 L1531.16 683.345 L1530.6 683.345 L1530.04 683.345 L1529.48 683.345 L1528.92 683.345 L1528.36 683.345 L1527.81 683.345 L1527.25 683.345 L1526.69 683.345 L1526.13 683.345 L1525.57 683.345 L1525.01 683.345 L1524.45 683.345 L1523.89 683.345 L1523.33 683.345 L1522.77 683.345 L1522.21 683.345 L1521.65 683.345 L1521.09 683.345 L1520.53 683.345 L1519.98 683.345 L1519.42 683.345 L1518.86 683.345 L1518.3 683.345 L1517.74 683.345 L1517.18 683.345 L1516.62 683.345 L1516.06 683.345 L1515.5 683.345 L1514.94 683.345 L1514.38 683.345 L1513.82 683.345 L1513.26 683.345 L1512.71 683.345 L1512.15 683.345 L1511.59 683.345 L1511.03 683.345 L1510.47 683.345 L1509.91 683.345 L1509.35 683.345 L1508.79 683.345 L1508.23 683.345 L1507.67 683.345 L1507.11 683.345 L1506.55 683.345 L1505.99 683.345 L1505.44 683.345 L1504.88 683.345 L1504.32 683.345 L1503.76 683.345 L1503.2 683.345 L1502.64 683.345 L1502.08 683.345 L1501.52 683.345 L1500.96 683.345 L1500.4 683.345 L1499.84 683.345 L1499.28 683.345 L1498.72 683.345 L1498.16 683.345 L1497.61 683.345 L1497.05 683.345 L1496.49 683.345 L1495.93 683.345 L1495.37 683.345 L1494.81 683.345 L1494.25 683.345 L1493.69 683.345 L1493.13 683.345 L1492.57 683.345 L1492.01 683.345 L1491.45 683.345 L1490.89 683.345 L1490.34 683.345 L1489.78 683.345 L1489.22 683.345 L1488.66 683.345 L1488.1 683.345 L1487.54 683.345 L1486.98 683.345 L1486.42 683.345 L1485.86 683.345 L1485.3 683.345 L1484.74 683.345 L1484.18 683.345 L1483.62 683.345 L1483.07 683.345 L1482.51 683.345 L1481.95 683.345 L1481.39 683.345 L1480.83 683.345 L1480.27 683.345 L1479.71 683.345 L1479.15 683.345 L1478.59 683.345 L1478.03 683.345 L1477.47 683.345 L1476.91 683.345 L1476.35 683.345 L1475.79 683.345 L1475.24 683.345 L1474.68 683.345 L1474.12 683.345 L1473.56 683.345 L1473 683.345 L1472.44 683.345 L1471.88 683.345 L1471.32 683.345 L1470.76 683.345 L1470.2 683.345 L1469.64 683.345 L1469.08 683.345 L1468.52 683.345 L1467.97 683.345 L1467.41 683.345 L1466.85 683.345 L1466.29 683.345 L1465.73 683.345 L1465.17 683.345 L1464.61 683.345 L1464.05 683.345 L1463.49 683.345 L1462.93 683.345 L1462.37 683.345 L1461.81 683.345 L1461.25 683.345 L1460.7 683.345 L1460.14 683.345 L1459.58 683.345 L1459.02 683.345 L1458.46 683.345 L1457.9 683.345 L1457.34 683.345 L1456.78 683.345 L1456.22 683.345 L1455.66 683.345 L1455.1 683.345 L1454.54 683.345 L1453.98 683.345 L1453.42 683.345 L1452.87 683.345 L1452.31 683.345 L1451.75 683.345 L1451.19 683.345 L1450.63 683.345 L1450.07 683.345 L1449.51 683.345 L1448.95 683.345 L1448.39 683.345 L1447.83 683.345 L1447.27 683.345 L1446.71 683.345 L1446.15 683.345 L1445.6 683.345 L1445.04 683.345 L1444.48 683.345 L1443.92 683.345 L1443.36 683.345 L1442.8 683.345 L1442.24 683.345 L1441.68 683.345 L1441.12 683.345 L1440.56 683.345 L1440 683.345 L1439.44 683.345 L1438.88 683.345 L1438.33 683.345 L1437.77 683.345 L1437.21 683.345 L1436.65 683.345 L1436.09 683.345 L1435.53 683.345 L1434.97 683.345 L1434.41 683.345 L1433.85 683.345 L1433.29 683.345 L1432.73 683.345 L1432.17 683.345 L1431.61 683.345 L1431.05 683.345 L1430.5 683.345 L1429.94 683.345 L1429.38 683.345 L1428.82 683.345 L1428.26 683.345 L1427.7 683.345 L1427.14 683.345 L1426.58 683.345 L1426.02 683.345 L1425.46 683.345 L1424.9 683.345 L1424.34 683.345 L1423.78 683.345 L1423.23 683.345 L1422.67 683.345 L1422.11 683.345 L1421.55 683.345 L1420.99 683.345 L1420.43 683.345 L1419.87 683.345 L1419.31 683.345 L1418.75 683.345 L1418.19 683.345 L1417.63 683.345 L1417.07 683.345 L1416.51 683.345 L1415.95 683.345 L1415.4 683.345 L1414.84 683.345 L1414.28 683.345 L1413.72 683.345 L1413.16 683.345 L1412.6 683.345 L1412.04 683.345 L1411.48 683.345 L1410.92 683.345 L1410.36 683.345 L1409.8 683.345 L1409.24 683.345 L1408.68 683.345 L1408.13 683.345 L1407.57 683.345 L1407.01 683.345 L1406.45 683.345 L1405.89 683.345 L1405.33 683.345 L1404.77 683.345 L1404.21 683.345 L1403.65 683.345 L1403.09 683.345 L1402.53 683.345 L1401.97 683.345 L1401.41 683.345 L1400.86 683.345 L1400.3 683.345 L1399.74 683.345 L1399.18 683.345 L1398.62 683.345 L1398.06 683.345 L1397.5 683.345 L1396.94 683.345 L1396.38 683.345 L1395.82 683.345 L1395.26 683.345 L1394.7 683.345 L1394.14 683.345 L1393.58 683.345 L1393.03 683.345 L1392.47 683.345 L1391.91 683.345 L1391.35 683.345 L1390.79 683.345 L1390.23 683.345 L1389.67 683.345 L1389.11 683.345 L1388.55 683.345 L1387.99 683.345 L1387.43 683.345 L1386.87 683.345 L1386.31 683.345 L1385.76 683.345 L1385.2 683.345 L1384.64 683.345 L1384.08 683.345 L1383.52 683.345 L1382.96 683.345 L1382.4 683.345 L1381.84 683.345 L1381.28 683.345 L1380.72 683.345 L1380.16 683.345 L1379.6 683.345 L1379.04 683.345 L1378.49 683.345 L1377.93 683.345 L1377.37 683.345 L1376.81 683.345 L1376.25 683.345 L1375.69 683.345 L1375.13 683.345 L1374.57 683.345 L1374.01 683.345 L1373.45 683.345 L1372.89 683.345 L1372.33 683.345 L1371.77 683.345 L1371.21 683.345 L1370.66 683.345 L1370.1 683.345 L1369.54 683.345 L1368.98 683.345 L1368.42 683.345 L1367.86 683.345 L1367.3 683.345 L1366.74 683.345 L1366.18 683.345 L1365.62 683.345 L1365.06 683.345 L1364.5 683.345 L1363.94 683.345 L1363.39 683.345 L1362.83 683.345 L1362.27 683.345 L1361.71 683.345 L1361.15 683.345 L1360.59 683.345 L1360.03 683.345 L1359.47 683.345 L1358.91 683.345 L1358.35 683.345 L1357.79 683.345 L1357.23 683.345 L1356.67 683.345 L1356.12 683.345 L1355.56 683.345 L1355 683.345 L1354.44 683.345 L1353.88 683.345 L1353.32 683.345 L1352.76 683.345 L1352.2 683.345 L1351.64 683.345 L1351.08 683.345 L1350.52 683.345 L1349.96 683.345 L1349.4 683.345 L1348.84 683.345 L1348.29 683.345 L1347.73 683.345 L1347.17 683.345 L1346.61 683.345 L1346.05 683.345 L1345.49 683.345 L1344.93 683.345 L1344.37 683.345 L1343.81 683.345 L1343.25 683.345 L1342.69 683.345 L1342.13 683.345 L1341.57 683.345 L1341.02 683.345 L1340.46 683.345 L1339.9 683.345 L1339.34 683.345 L1338.78 683.345 L1338.22 683.345 L1337.66 683.345 L1337.1 683.345 L1336.54 683.345 L1335.98 683.345 L1335.42 683.345 L1334.86 683.345 L1334.3 683.345 L1333.75 683.345 L1333.19 683.345 L1332.63 683.345 L1332.07 683.345 L1331.51 683.345 L1330.95 683.345 L1330.39 683.345 L1329.83 683.345 L1329.27 683.345 L1328.71 683.345 L1328.15 683.345 L1327.59 683.345 L1327.03 683.345 L1326.47 683.345 L1325.92 683.345 L1325.36 683.345 L1324.8 683.345 L1324.24 683.345 L1323.68 683.345 L1323.12 683.345 L1322.56 683.345 L1322 683.345 L1321.44 683.345 L1320.88 683.345 L1320.32 683.345 L1319.76 683.345 L1319.2 683.345 L1318.65 683.345 L1318.09 683.345 L1317.53 683.345 L1316.97 683.345 L1316.41 683.345 L1315.85 683.345 L1315.29 683.345 L1314.73 683.345 L1314.17 683.345 L1313.61 683.345 L1313.05 683.345 L1312.49 683.345 L1311.93 683.345 L1311.38 683.345 L1310.82 683.345 L1310.26 683.345 L1309.7 683.345 L1309.14 683.345 L1308.58 683.345 L1308.02 683.345 L1307.46 683.345 L1306.9 683.345 L1306.34 683.345 L1305.78 683.345 L1305.22 683.345 L1304.66 683.345 L1304.1 683.345 L1303.55 683.345 L1302.99 683.345 L1302.43 683.345 L1301.87 683.345 L1301.31 683.345 L1300.75 683.345 L1300.19 683.345 L1299.63 683.345 L1299.07 683.345 L1298.51 683.345 L1297.95 683.345 L1297.39 683.345 L1296.83 683.345 L1296.28 683.345 L1295.72 683.345 L1295.16 683.345 L1294.6 683.345 L1294.04 683.345 L1293.48 683.345 L1292.92 683.345 L1292.36 683.345 L1291.8 683.345 L1291.24 683.345 L1290.68 683.345 L1290.12 683.345 L1289.56 683.345 L1289 683.345 L1288.45 683.345 L1287.89 683.345 L1287.33 683.345 L1286.77 683.345 L1286.21 683.345 L1285.65 683.345 L1285.09 683.345 L1284.53 683.345 L1283.97 683.345 L1283.41 683.345 L1282.85 683.345 L1282.29 683.345 L1281.73 683.345 L1281.18 683.345 L1280.62 683.345 L1280.06 683.345 L1279.5 683.345 L1278.94 683.345 L1278.38 683.345 L1277.82 683.345 L1277.26 683.345 L1276.7 683.345 L1276.14 683.345 L1275.58 683.345 L1275.02 683.345 L1274.46 683.345 L1273.91 683.345 L1273.35 683.345 L1272.79 683.345 L1272.23 683.345 L1271.67 683.345 L1271.11 683.345 L1270.55 683.345 L1269.99 683.345 L1269.43 683.345 L1268.87 683.345 L1268.31 683.345 L1267.75 683.345 L1267.19 683.345 L1266.63 683.345 L1266.08 683.345 L1265.52 683.345 L1264.96 683.345 L1264.4 683.345 L1263.84 683.345 L1263.28 683.345 L1262.72 683.345 L1262.16 683.345 L1261.6 683.345 L1261.04 683.345 L1260.48 683.345 L1259.92 683.345 L1259.36 683.345 L1258.81 683.345 L1258.25 683.345 L1257.69 683.345 L1257.13 683.345 L1256.57 683.345 L1256.01 683.345 L1255.45 683.345 L1254.89 683.345 L1254.33 683.345 L1253.77 683.345 L1253.21 683.345 L1252.65 683.345 L1252.09 683.345 L1251.54 683.345 L1250.98 683.345 L1250.42 683.345 L1249.86 683.345 L1249.3 683.345 L1248.74 683.345 L1248.18 683.345 L1247.62 683.345 L1247.06 683.345 L1246.5 683.345 L1245.94 683.345 L1245.38 683.345 L1244.82 683.345 L1244.26 683.345 L1243.71 683.345 L1243.15 683.345 L1242.59 683.345 L1242.03 683.345 L1241.47 683.345 L1240.91 683.345 L1240.35 683.345 L1239.79 683.345 L1239.23 683.345 L1238.67 683.345 L1238.11 683.345 L1237.55 683.345 L1236.99 683.345 L1236.44 683.345 L1235.88 683.345 L1235.32 683.345 L1234.76 683.345 L1234.2 683.345 L1233.64 683.345 L1233.08 683.345 L1232.52 683.345 L1231.96 683.345 L1231.4 683.345 L1230.84 683.345 L1230.28 683.345 L1229.72 683.345 L1229.17 683.345 L1228.61 683.345 L1228.05 683.345 L1227.49 683.345 L1226.93 683.345 L1226.37 683.345 L1225.81 683.345 L1225.25 683.345 L1224.69 683.345 L1224.13 683.345 L1223.57 683.345 L1223.01 683.345 L1222.45 683.345 L1221.89 683.345 L1221.34 683.345 L1220.78 683.345 L1220.22 683.345 L1219.66 683.345 L1219.1 683.345 L1218.54 683.345 L1217.98 683.345 L1217.42 683.345 L1216.86 683.345 L1216.3 683.345 L1215.74 683.345 L1215.18 683.345 L1214.62 683.345 L1214.07 683.345 L1213.51 683.345 L1212.95 683.345 L1212.39 683.345 L1211.83 683.345 L1211.27 683.345 L1210.71 683.345 L1210.15 683.345 L1209.59 683.345 L1209.03 683.345 L1208.47 683.345 L1207.91 683.345 L1207.35 683.345 L1206.8 683.345 L1206.24 683.345 L1205.68 683.345 L1205.12 683.345 L1204.56 683.345 L1204 683.345 L1203.44 683.345 L1202.88 683.345 L1202.32 683.345 L1201.76 683.345 L1201.2 683.345 L1200.64 683.345 L1200.08 683.345 L1199.52 683.345 L1198.97 683.345 L1198.41 683.345 L1197.85 683.345 L1197.29 683.345 L1196.73 683.345 L1196.17 683.345 L1195.61 683.345 L1195.05 683.345 L1194.49 683.345 L1193.93 683.345 L1193.37 683.345 L1192.81 683.345 L1192.25 683.345 L1191.7 683.345 L1191.14 683.345 L1190.58 683.345 L1190.02 683.345 L1189.46 683.345 L1188.9 683.345 L1188.34 683.345 L1187.78 683.345 L1187.22 683.345 L1186.66 683.345 L1186.1 683.345 L1185.54 683.345 L1184.98 683.345 L1184.43 683.345 L1183.87 683.345 L1183.31 683.345 L1182.75 683.345 L1182.19 683.345 L1181.63 683.345 L1181.07 683.345 L1180.51 683.345 L1179.95 683.345 L1179.39 683.345 L1178.83 683.345 L1178.27 683.345 L1177.71 683.345 L1177.15 683.345 L1176.6 683.345 L1176.04 683.345 L1175.48 683.345 L1174.92 683.345 L1174.36 683.345 L1173.8 683.345 L1173.24 683.345 L1172.68 683.345 L1172.12 683.345 L1171.56 683.345 L1171 683.345 L1170.44 683.345 L1169.88 683.345 L1169.33 683.345 L1168.77 683.345 L1168.21 683.345 L1167.65 683.345 L1167.09 683.345 L1166.53 683.345 L1165.97 683.345 L1165.41 683.345 L1164.85 683.345 L1164.29 683.345 L1163.73 683.345 L1163.17 683.345 L1162.61 683.345 L1162.05 683.345 L1161.5 683.345 L1160.94 683.345 L1160.38 683.345 L1159.82 683.345 L1159.26 683.345 L1158.7 683.345 L1158.14 683.345 L1157.58 683.345 L1157.02 683.345 L1156.46 683.345 L1155.9 683.345 L1155.34 683.345 L1154.78 683.345 L1154.23 683.345 L1153.67 683.345 L1153.11 683.345 L1152.55 683.345 L1151.99 683.345 L1151.43 683.345 L1150.87 683.345 L1150.31 683.345 L1149.75 683.345 L1149.19 683.345 L1148.63 683.345 L1148.07 683.345 L1147.51 683.345 L1146.96 683.345 L1146.4 683.345 L1145.84 683.345 L1145.28 683.345 L1144.72 683.345 L1144.16 683.345 L1143.6 683.345 L1143.04 683.345 L1142.48 683.345 L1141.92 683.345 L1141.36 683.345 L1140.8 683.345 L1140.24 683.345 L1139.68 683.345 L1139.13 683.345 L1138.57 683.345 L1138.01 683.345 L1137.45 683.345 L1136.89 683.345 L1136.33 683.345 L1135.77 683.345 L1135.21 683.345 L1134.65 683.345 L1134.09 683.345 L1133.53 683.345 L1132.97 683.345 L1132.41 683.345 L1131.86 683.345 L1131.3 683.345 L1130.74 683.345 L1130.18 683.345 L1129.62 683.345 L1129.06 683.345 L1128.5 683.345 L1127.94 683.345 L1127.38 683.345 L1126.82 683.345 L1126.26 683.345 L1125.7 683.345 L1125.14 683.345 L1124.59 683.345 L1124.03 683.345 L1123.47 683.345 L1122.91 683.345 L1122.35 683.345 L1121.79 683.345 L1121.23 683.345 L1120.67 683.345 L1120.11 683.345 L1119.55 683.345 L1118.99 683.345 L1118.43 683.345 L1117.87 683.345 L1117.31 683.345 L1116.76 683.345 L1116.2 683.345 L1115.64 683.345 L1115.08 683.345 L1114.52 683.345 L1113.96 683.345 L1113.4 683.345 L1112.84 683.345 L1112.28 683.345 L1111.72 683.345 L1111.16 683.345 L1110.6 683.345 L1110.04 683.345 L1109.49 683.345 L1108.93 683.345 L1108.37 683.345 L1107.81 683.345 L1107.25 683.345 L1106.69 683.345 L1106.13 683.345 L1105.57 683.345 L1105.01 683.345 L1104.45 683.345 L1103.89 683.345 L1103.33 683.345 L1102.77 683.345 L1102.22 683.345 L1101.66 683.345 L1101.1 683.345 L1100.54 683.345 L1099.98 683.345 L1099.42 683.345 L1098.86 683.345 L1098.3 683.345 L1097.74 683.345 L1097.18 683.345 L1096.62 683.345 L1096.06 683.345 L1095.5 683.345 L1094.94 683.345 L1094.39 683.345 L1093.83 683.345 L1093.27 683.345 L1092.71 683.345 L1092.15 683.345 L1091.59 683.345 L1091.03 683.345 L1090.47 683.345 L1089.91 683.345 L1089.35 683.345 L1088.79 683.345 L1088.23 683.345 L1087.67 683.345 L1087.12 683.345 L1086.56 683.345 L1086 683.345 L1085.44 683.345 L1084.88 683.345 L1084.32 683.345 L1083.76 683.345 L1083.2 683.345 L1082.64 683.345 L1082.08 683.345 L1081.52 683.345 L1080.96 683.345 L1080.4 683.345 L1079.85 683.345 L1079.29 683.345 L1078.73 683.345 L1078.17 683.345 L1077.61 683.345 L1077.05 683.345 L1076.49 683.345 L1075.93 683.345 L1075.37 683.345 L1074.81 683.345 L1074.25 683.345 L1073.69 683.345 L1073.13 683.345 L1072.57 683.345 L1072.02 683.345 L1071.46 683.345 L1070.9 683.345 L1070.34 683.345 L1069.78 683.345 L1069.22 683.345 L1068.66 683.345 L1068.1 683.345 L1067.54 683.345 L1066.98 683.345 L1066.42 683.345 L1065.86 683.345 L1065.3 683.345 L1064.75 683.345 L1064.19 683.345 L1063.63 683.345 L1063.07 683.345 L1062.51 683.345 L1061.95 683.345 L1061.39 683.345 L1060.83 683.345 L1060.27 683.345 L1059.71 683.345 L1059.15 683.345 L1058.59 683.345 L1058.03 683.345 L1057.48 683.345 L1056.92 683.345 L1056.36 683.345 L1055.8 683.345 L1055.24 683.345 L1054.68 683.345 L1054.12 683.345 L1053.56 683.345 L1053 683.345 L1052.44 683.345 L1051.88 683.345 L1051.32 683.345 L1050.76 683.345 L1050.2 683.345 L1049.65 683.345 L1049.09 683.345 L1048.53 683.345 L1047.97 683.345 L1047.41 683.345 L1046.85 683.345 L1046.29 683.345 L1045.73 683.345 L1045.17 683.345 L1044.61 683.345 L1044.05 683.345 L1043.49 683.345 L1042.93 683.345 L1042.38 683.345 L1041.82 683.345 L1041.26 683.345 L1040.7 683.345 L1040.14 683.345 L1039.58 683.345 L1039.02 683.345 L1038.46 683.345 L1037.9 683.345 L1037.34 683.345 L1036.78 683.345 L1036.22 683.345 L1035.66 683.345 L1035.1 683.345 L1034.55 683.345 L1033.99 683.345 L1033.43 683.345 L1032.87 683.345 L1032.31 683.345 L1031.75 683.345 L1031.19 683.345 L1030.63 683.345 L1030.07 683.345 L1029.51 683.345 L1028.95 683.345 L1028.39 683.345 L1027.83 683.345 L1027.28 683.345 L1026.72 683.345 L1026.16 683.345 L1025.6 683.345 L1025.04 683.345 L1024.48 683.345 L1023.92 683.345 L1023.36 683.345 L1022.8 683.345 L1022.24 683.345 L1021.68 683.345 L1021.12 683.345 L1020.56 683.345 L1020.01 683.345 L1019.45 683.345 L1018.89 683.345 L1018.33 683.345 L1017.77 683.345 L1017.21 683.345 L1016.65 683.345 L1016.09 683.345 L1015.53 683.345 L1014.97 683.345 L1014.41 683.345 L1013.85 683.345 L1013.29 683.345 L1012.73 683.345 L1012.18 683.345 L1011.62 683.345 L1011.06 683.345 L1010.5 683.345 L1009.94 683.345 L1009.38 683.345 L1008.82 683.345 L1008.26 683.345 L1007.7 683.345 L1007.14 683.345 L1006.58 683.345 L1006.02 683.345 L1005.46 683.345 L1004.91 683.345 L1004.35 683.345 L1003.79 683.345 L1003.23 683.345 L1002.67 683.345 L1002.11 683.345 L1001.55 683.345 L1000.99 683.345 L1000.43 683.345 L999.872 683.345 L999.313 683.345 L998.754 683.345 L998.194 683.345 L997.635 683.345 L997.076 683.345 L996.517 683.345 L995.957 683.345 L995.398 683.345 L994.839 683.345 L994.28 683.345 L993.72 683.345 L993.161 683.345 L992.602 683.345 L992.043 683.345 L991.483 683.345 L990.924 683.345 L990.365 683.345 L989.806 683.345 L989.246 683.345 L988.687 683.345 L988.128 683.345 L987.569 683.345 L987.009 683.345 L986.45 683.345 L985.891 683.345 L985.332 683.345 L984.772 683.345 L984.213 683.345 L983.654 683.345 L983.095 683.345 L982.535 683.345 L981.976 683.345 L981.417 683.345 L980.858 683.345 L980.298 683.345 L979.739 683.345 L979.18 683.345 L978.621 683.345 L978.061 683.345 L977.502 683.345 L976.943 683.345 L976.384 683.345 L975.824 683.345 L975.265 683.345 L974.706 683.345 L974.147 683.345 L973.587 683.345 L973.028 683.345 L972.469 683.345 L971.91 683.345 L971.35 683.345 L970.791 683.345 L970.232 683.345 L969.673 683.345 L969.113 683.345 L968.554 683.345 L967.995 683.345 L967.436 683.345 L966.876 683.345 L966.317 683.345 L965.758 683.345 L965.199 683.345 L964.639 683.345 L964.08 683.345 L963.521 683.345 L962.962 683.345 L962.402 683.345 L961.843 683.345 L961.284 683.345 L960.725 683.345 L960.165 683.345 L959.606 683.345 L959.047 683.345 L958.488 683.345 L957.928 683.345 L957.369 683.345 L956.81 683.345 L956.251 683.345 L955.691 683.345 L955.132 683.345 L954.573 683.345 L954.014 683.345 L953.454 683.345 L952.895 683.345 L952.336 683.345 L951.777 683.345 L951.217 683.345 L950.658 683.345 L950.099 683.345 L949.54 683.345 L948.98 683.345 L948.421 683.345 L947.862 683.345 L947.303 683.345 L946.743 683.345 L946.184 683.345 L945.625 683.345 L945.066 683.345 L944.506 683.345 L943.947 683.345 L943.388 683.345 L942.829 683.345 L942.269 683.345 L941.71 683.345 L941.151 683.345 L940.592 683.345 L940.032 683.345 L939.473 683.345 L938.914 683.345 L938.355 683.345 L937.795 683.345 L937.236 683.345 L936.677 683.345 L936.118 683.345 L935.558 683.345 L934.999 683.345 L934.44 683.345 L933.881 683.345 L933.321 683.345 L932.762 683.345 L932.203 683.345 L931.644 683.345 L931.084 683.345 L930.525 683.345 L929.966 683.345 L929.406 683.345 L928.847 683.345 L928.288 683.345 L927.729 683.345 L927.169 683.345 L926.61 683.345 L926.051 683.345 L925.492 683.345 L924.932 683.345 L924.373 683.345 L923.814 683.345 L923.255 683.345 L922.695 683.345 L922.136 683.345 L921.577 683.345 L921.018 683.345 L920.458 683.345 L919.899 683.345 L919.34 683.345 L918.781 683.345 L918.221 683.345 L917.662 683.345 L917.103 683.345 L916.544 683.345 L915.984 683.345 L915.425 683.345 L914.866 683.345 L914.307 683.345 L913.747 683.345 L913.188 683.345 L912.629 683.345 L912.07 683.345 L911.51 683.345 L910.951 683.345 L910.392 683.345 L909.833 683.345 L909.273 683.345 L908.714 683.345 L908.155 683.345 L907.596 683.345 L907.036 683.345 L906.477 683.345 L905.918 683.345 L905.359 683.345 L904.799 683.345 L904.24 683.345 L903.681 683.345 L903.122 683.345 L902.562 683.345 L902.003 683.345 L901.444 683.345 L900.885 683.345 L900.325 683.345 L899.766 683.345 L899.207 683.345 L898.648 683.345 L898.088 683.345 L897.529 683.345 L896.97 683.345 L896.411 683.345 L895.851 683.345 L895.292 683.345 L894.733 683.345 L894.174 683.345 L893.614 683.345 L893.055 683.345 L892.496 683.345 L891.937 683.345 L891.377 683.345 L890.818 683.345 L890.259 683.345 L889.7 683.345 L889.14 683.345 L888.581 683.345 L888.022 683.345 L887.463 683.345 L886.903 683.345 L886.344 683.345 L885.785 683.345 L885.226 683.345 L884.666 683.345 L884.107 683.345 L883.548 683.345 L882.989 683.345 L882.429 683.345 L881.87 683.345 L881.311 683.345 L880.752 683.345 L880.192 683.345 L879.633 683.345 L879.074 683.345 L878.515 683.345 L877.955 683.345 L877.396 683.345 L876.837 683.345 L876.278 683.345 L875.718 683.345 L875.159 683.345 L874.6 683.345 L874.041 683.345 L873.481 683.345 L872.922 683.345 L872.363 683.345 L871.804 683.345 L871.244 683.345 L870.685 683.345 L870.126 683.345 L869.567 683.345 L869.007 683.345 L868.448 683.345 L867.889 683.345 L867.33 683.345 L866.77 683.345 L866.211 683.345 L865.652 683.345 L865.093 683.345 L864.533 683.345 L863.974 683.345 L863.415 683.345 L862.856 683.345 L862.296 683.345 L861.737 683.345 L861.178 683.345 L860.619 683.345 L860.059 683.345 L859.5 683.345 L858.941 683.345 L858.382 683.345 L857.822 683.345 L857.263 683.345 L856.704 683.345 L856.145 683.345 L855.585 683.345 L855.026 683.345 L854.467 683.345 L853.908 683.345 L853.348 683.345 L852.789 683.345 L852.23 683.345 L851.671 683.345 L851.111 683.345 L850.552 683.345 L849.993 683.345 L849.434 683.345 L848.874 683.345 L848.315 683.345 L847.756 683.345 L847.197 683.345 L846.637 683.345 L846.078 683.345 L845.519 683.345 L844.96 683.345 L844.4 683.345 L843.841 683.345 L843.282 683.345 L842.723 683.345 L842.163 683.345 L841.604 683.345 L841.045 683.345 L840.486 683.345 L839.926 683.345 L839.367 683.345 L838.808 683.345 L838.249 683.345 L837.689 683.345 L837.13 683.345 L836.571 683.345 L836.012 683.345 L835.452 683.345 L834.893 683.345 L834.334 683.345 L833.775 683.345 L833.215 683.345 L832.656 683.345 L832.097 683.345 L831.538 683.345 L830.978 683.345 L830.419 683.345 L829.86 683.345 L829.301 683.345 L828.741 683.345 L828.182 683.345 L827.623 683.345 L827.064 683.345 L826.504 683.345 L825.945 683.345 L825.386 683.345 L824.827 683.345 L824.267 683.345 L823.708 683.345 L823.149 683.345 L822.59 683.345 L822.03 683.345 L821.471 683.345 L820.912 683.345 L820.353 683.345 L819.793 683.345 L819.234 683.345 L818.675 683.345 L818.116 683.345 L817.556 683.345 L816.997 683.345 L816.438 683.345 L815.879 683.345 L815.319 683.345 L814.76 683.345 L814.201 683.345 L813.642 683.345 L813.082 683.345 L812.523 683.345 L811.964 683.345 L811.405 683.345 L810.845 683.345 L810.286 683.345 L809.727 683.345 L809.168 683.345 L808.608 683.345 L808.049 683.345 L807.49 683.345 L806.931 683.345 L806.371 683.345 L805.812 683.345 L805.253 683.345 L804.693 683.345 L804.134 683.345 L803.575 683.345 L803.016 683.345 L802.456 683.345 L801.897 683.345 L801.338 683.345 L800.779 683.345 L800.219 683.345 L799.66 683.345 L799.101 683.345 L798.542 683.345 L797.982 683.345 L797.423 683.345 L796.864 683.345 L796.305 683.345 L795.745 683.345 L795.186 683.345 L794.627 683.345 L794.068 683.345 L793.508 683.345 L792.949 683.345 L792.39 683.345 L791.831 683.345 L791.271 683.345 L790.712 683.345 L790.153 683.345 L789.594 683.345 L789.034 683.345 L788.475 683.345 L787.916 683.345 L787.357 683.345 L786.797 683.345 L786.238 683.345 L785.679 683.345 L785.12 683.345 L784.56 683.345 L784.001 683.345 L783.442 683.345 L782.883 683.345 L782.323 683.345 L781.764 683.345 L781.205 683.345 L780.646 683.345 L780.086 683.345 L779.527 683.345 L778.968 683.345 L778.409 683.345 L777.849 683.345 L777.29 683.345 L776.731 683.345 L776.172 683.345 L775.612 683.345 L775.053 683.345 L774.494 683.345 L773.935 683.345 L773.375 683.345 L772.816 683.345 L772.257 683.345 L771.698 683.345 L771.138 683.345 L770.579 683.345 L770.02 683.345 L769.461 683.345 L768.901 683.345 L768.342 683.345 L767.783 683.345 L767.224 683.345 L766.664 683.345 L766.105 683.345 L765.546 683.345 L764.987 683.345 L764.427 683.345 L763.868 683.345 L763.309 683.345 L762.75 683.345 L762.19 683.345 L761.631 683.345 L761.072 683.345 L760.513 683.345 L759.953 683.345 L759.394 683.345 L758.835 683.345 L758.276 683.345 L757.716 683.345 L757.157 683.345 L756.598 683.345 L756.039 683.345 L755.479 683.345 L754.92 683.345 L754.361 683.345 L753.802 683.345 L753.242 683.345 L752.683 683.345 L752.124 683.345 L751.565 683.345 L751.005 683.345 L750.446 683.345 L749.887 683.345 L749.328 683.345 L748.768 683.345 L748.209 683.345 L747.65 683.345 L747.091 683.345 L746.531 683.345 L745.972 683.345 L745.413 683.345 L744.854 683.345 L744.294 683.345 L743.735 683.345 L743.176 683.345 L742.617 683.345 L742.057 683.345 L741.498 683.345 L740.939 683.345 L740.38 683.345 L739.82 683.345 L739.261 683.345 L738.702 683.345 L738.143 683.345 L737.583 683.345 L737.024 683.345 L736.465 683.345 L735.906 683.345 L735.346 683.345 L734.787 683.345 L734.228 683.345 L733.669 683.345 L733.109 683.345 L732.55 683.345 L731.991 683.345 L731.432 683.345 L730.872 683.345 L730.313 683.345 L729.754 683.345 L729.195 683.345 L728.635 683.345 L728.076 683.345 L727.517 683.345 L726.958 683.345 L726.398 683.345 L725.839 683.345 L725.28 683.345 L724.721 683.345 L724.161 683.345 L723.602 683.345 L723.043 683.345 L722.484 683.345 L721.924 683.345 L721.365 683.345 L720.806 683.345 L720.247 683.345  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip013)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.288 720.806,684.288 721.365,684.288 721.924,684.288 722.484,684.288 723.043,684.288 723.602,684.288 724.161,684.288 724.721,684.288 725.28,684.288 725.839,684.288 726.398,684.288 726.958,684.288 727.517,684.288 728.076,684.288 728.635,684.288 729.195,684.288 729.754,684.288 730.313,684.288 730.872,684.288 731.432,684.288 731.991,684.288 732.55,684.288 733.109,684.288 733.669,684.288 734.228,684.288 734.787,684.288 735.346,684.288 735.906,684.288 736.465,684.288 737.024,684.288 737.583,684.288 738.143,684.288 738.702,684.288 739.261,684.288 739.82,684.288 740.38,684.288 740.939,684.288 741.498,684.288 742.057,684.288 742.617,684.288 743.176,684.288 743.735,684.288 744.294,684.288 744.854,684.288 745.413,684.288 745.972,684.288 746.531,684.288 747.091,684.288 747.65,684.288 748.209,684.288 748.768,684.288 749.328,684.288 749.887,684.288 750.446,684.288 751.005,684.288 751.565,684.288 752.124,684.288 752.683,684.288 753.242,684.288 753.802,684.288 754.361,684.288 754.92,684.288 755.479,684.288 756.039,684.288 756.598,684.288 757.157,684.288 757.716,684.288 758.276,684.288 758.835,684.288 759.394,684.288 759.953,684.288 760.513,684.288 761.072,684.288 761.631,684.288 762.19,684.288 762.75,684.288 763.309,684.288 763.868,684.288 764.427,684.288 764.987,684.288 765.546,684.288 766.105,684.288 766.664,684.288 767.224,684.288 767.783,684.288 768.342,684.288 768.901,684.288 769.461,684.288 770.02,684.288 770.579,684.288 771.138,684.288 771.698,684.288 772.257,684.288 772.816,684.288 773.375,684.288 773.935,684.288 774.494,684.288 775.053,684.288 775.612,684.288 776.172,684.288 776.731,684.288 777.29,684.288 777.849,684.288 778.409,684.288 778.968,684.288 779.527,684.288 780.086,684.288 780.646,684.288 781.205,684.288 781.764,684.288 782.323,684.288 782.883,684.288 783.442,684.288 784.001,684.288 784.56,684.288 785.12,684.288 785.679,684.288 786.238,684.288 786.797,684.288 787.357,684.288 787.916,684.288 788.475,684.288 789.034,684.288 789.594,684.288 790.153,684.288 790.712,684.288 791.271,684.288 791.831,684.288 792.39,684.288 792.949,684.288 793.508,684.288 794.068,684.288 794.627,684.288 795.186,684.288 795.745,684.288 796.305,684.288 796.864,684.288 797.423,684.288 797.982,684.288 798.542,684.288 799.101,684.288 799.66,684.288 800.219,684.288 800.779,684.288 801.338,684.288 801.897,684.288 802.456,684.288 803.016,684.288 803.575,684.288 804.134,684.288 804.693,684.288 805.253,684.288 805.812,684.288 806.371,684.288 806.931,684.288 807.49,684.288 808.049,684.288 808.608,684.288 809.168,684.288 809.727,684.288 810.286,684.288 810.845,684.288 811.405,684.288 811.964,684.288 812.523,684.288 813.082,684.288 813.642,684.288 814.201,684.288 814.76,684.288 815.319,684.288 815.879,684.288 816.438,684.288 816.997,684.288 817.556,684.288 818.116,684.288 818.675,684.288 819.234,684.288 819.793,684.288 820.353,684.288 820.912,684.288 821.471,684.288 822.03,684.288 822.59,684.288 823.149,684.288 823.708,684.288 824.267,684.288 824.827,684.288 825.386,684.288 825.945,684.288 826.504,684.288 827.064,684.288 827.623,684.288 828.182,684.288 828.741,684.288 829.301,684.288 829.86,684.288 830.419,684.288 830.978,684.288 831.538,684.288 832.097,684.288 832.656,684.288 833.215,684.288 833.775,684.288 834.334,684.288 834.893,684.288 835.452,684.288 836.012,684.288 836.571,684.288 837.13,684.288 837.689,684.288 838.249,684.288 838.808,684.288 839.367,684.288 839.926,684.288 840.486,684.288 841.045,684.288 841.604,684.288 842.163,684.288 842.723,684.288 843.282,684.288 843.841,684.288 844.4,684.288 844.96,684.288 845.519,684.288 846.078,684.288 846.637,684.288 847.197,684.288 847.756,684.288 848.315,684.288 848.874,684.288 849.434,684.288 849.993,684.288 850.552,684.288 851.111,684.288 851.671,684.288 852.23,684.288 852.789,684.288 853.348,684.288 853.908,684.288 854.467,684.288 855.026,684.288 855.585,684.288 856.145,684.288 856.704,684.288 857.263,684.288 857.822,684.288 858.382,684.288 858.941,684.288 859.5,684.288 860.059,684.288 860.619,684.288 861.178,684.288 861.737,684.288 862.296,684.288 862.856,684.288 863.415,684.288 863.974,684.288 864.533,684.288 865.093,684.288 865.652,684.288 866.211,684.288 866.77,684.288 867.33,684.288 867.889,684.288 868.448,684.288 869.007,684.288 869.567,684.288 870.126,684.288 870.685,684.288 871.244,684.288 871.804,684.288 872.363,684.288 872.922,684.288 873.481,684.288 874.041,684.288 874.6,684.288 875.159,684.288 875.718,684.288 876.278,684.288 876.837,684.288 877.396,684.288 877.955,684.288 878.515,684.288 879.074,684.288 879.633,684.288 880.192,684.288 880.752,684.288 881.311,684.288 881.87,684.288 882.429,684.288 882.989,684.288 883.548,684.288 884.107,684.288 884.666,684.288 885.226,684.288 885.785,684.288 886.344,684.288 886.903,684.288 887.463,684.288 888.022,684.288 888.581,684.288 889.14,684.288 889.7,684.288 890.259,684.288 890.818,684.288 891.377,684.288 891.937,684.288 892.496,684.288 893.055,684.288 893.614,684.288 894.174,684.288 894.733,684.288 895.292,684.288 895.851,684.288 896.411,684.288 896.97,684.288 897.529,684.288 898.088,684.288 898.648,684.288 899.207,684.288 899.766,684.288 900.325,684.288 900.885,684.288 901.444,684.288 902.003,684.288 902.562,684.288 903.122,684.288 903.681,684.288 904.24,684.288 904.799,684.288 905.359,684.288 905.918,684.288 906.477,684.288 907.036,684.288 907.596,684.288 908.155,684.288 908.714,684.288 909.273,684.288 909.833,684.288 910.392,684.288 910.951,684.288 911.51,684.288 912.07,684.288 912.629,684.288 913.188,684.288 913.747,684.288 914.307,684.288 914.866,684.288 915.425,684.288 915.984,684.288 916.544,684.288 917.103,684.288 917.662,684.288 918.221,684.288 918.781,684.288 919.34,684.288 919.899,684.288 920.458,684.288 921.018,684.288 921.577,684.288 922.136,684.288 922.695,684.288 923.255,684.288 923.814,684.288 924.373,684.288 924.932,684.288 925.492,684.288 926.051,684.288 926.61,684.288 927.169,684.288 927.729,684.288 928.288,684.288 928.847,684.288 929.406,684.288 929.966,684.288 930.525,684.288 931.084,684.288 931.644,684.288 932.203,684.288 932.762,684.288 933.321,684.288 933.881,684.288 934.44,684.288 934.999,684.288 935.558,684.288 936.118,684.288 936.677,684.288 937.236,684.288 937.795,684.288 938.355,684.288 938.914,684.288 939.473,684.288 940.032,684.288 940.592,684.288 941.151,684.288 941.71,684.288 942.269,684.288 942.829,684.288 943.388,684.288 943.947,684.288 944.506,684.288 945.066,684.288 945.625,684.288 946.184,684.288 946.743,684.288 947.303,684.288 947.862,684.288 948.421,684.288 948.98,684.288 949.54,684.288 950.099,684.288 950.658,684.288 951.217,684.288 951.777,684.288 952.336,684.288 952.895,684.288 953.454,684.288 954.014,684.288 954.573,684.288 955.132,684.288 955.691,684.288 956.251,684.288 956.81,684.288 957.369,684.288 957.928,684.288 958.488,684.288 959.047,684.288 959.606,684.288 960.165,684.288 960.725,684.288 961.284,684.288 961.843,684.288 962.402,684.288 962.962,684.288 963.521,684.288 964.08,684.288 964.639,684.288 965.199,684.288 965.758,684.288 966.317,684.288 966.876,684.288 967.436,684.288 967.995,684.288 968.554,684.288 969.113,684.288 969.673,684.288 970.232,684.288 970.791,684.288 971.35,684.288 971.91,684.288 972.469,684.288 973.028,684.288 973.587,684.288 974.147,684.288 974.706,684.288 975.265,684.288 975.824,684.288 976.384,684.288 976.943,684.288 977.502,684.288 978.061,684.288 978.621,684.288 979.18,684.288 979.739,684.288 980.298,684.288 980.858,684.288 981.417,684.288 981.976,684.288 982.535,684.288 983.095,684.288 983.654,684.288 984.213,684.288 984.772,684.288 985.332,684.288 985.891,684.288 986.45,684.288 987.009,684.288 987.569,684.288 988.128,684.288 988.687,684.288 989.246,684.288 989.806,684.288 990.365,684.288 990.924,684.288 991.483,684.288 992.043,684.288 992.602,684.288 993.161,684.288 993.72,684.288 994.28,684.288 994.839,684.288 995.398,684.288 995.957,684.288 996.517,684.288 997.076,684.288 997.635,684.288 998.194,684.288 998.754,684.288 999.313,684.288 999.872,684.288 1000.43,684.288 1000.99,684.288 1001.55,684.288 1002.11,684.288 1002.67,684.288 1003.23,684.288 1003.79,684.288 1004.35,684.288 1004.91,684.288 1005.46,684.288 1006.02,684.288 1006.58,684.288 1007.14,684.288 1007.7,684.288 1008.26,684.288 1008.82,684.288 1009.38,684.288 1009.94,684.288 1010.5,684.288 1011.06,684.288 1011.62,684.288 1012.18,684.288 1012.73,684.288 1013.29,684.288 1013.85,684.288 1014.41,684.288 1014.97,684.288 1015.53,684.288 1016.09,684.288 1016.65,684.288 1017.21,684.288 1017.77,684.288 1018.33,684.288 1018.89,684.288 1019.45,684.288 1020.01,684.288 1020.56,684.288 1021.12,684.288 1021.68,684.288 1022.24,684.288 1022.8,684.288 1023.36,684.288 1023.92,684.288 1024.48,684.288 1025.04,684.288 1025.6,684.288 1026.16,684.288 1026.72,684.288 1027.28,684.288 1027.83,684.288 1028.39,684.288 1028.95,684.288 1029.51,684.288 1030.07,684.288 1030.63,684.288 1031.19,684.288 1031.75,684.288 1032.31,684.288 1032.87,684.288 1033.43,684.288 1033.99,684.288 1034.55,684.288 1035.1,684.288 1035.66,684.288 1036.22,684.288 1036.78,684.288 1037.34,684.288 1037.9,684.288 1038.46,684.288 1039.02,684.288 1039.58,684.288 1040.14,684.288 1040.7,684.288 1041.26,684.288 1041.82,684.288 1042.38,684.288 1042.93,684.288 1043.49,684.288 1044.05,684.288 1044.61,684.288 1045.17,684.288 1045.73,684.288 1046.29,684.288 1046.85,684.288 1047.41,684.288 1047.97,684.288 1048.53,684.288 1049.09,684.288 1049.65,684.288 1050.2,684.288 1050.76,684.288 1051.32,684.288 1051.88,684.288 1052.44,684.288 1053,684.288 1053.56,684.288 1054.12,684.288 1054.68,684.288 1055.24,684.288 1055.8,684.288 1056.36,684.288 1056.92,684.288 1057.48,684.288 1058.03,684.288 1058.59,684.288 1059.15,684.288 1059.71,684.288 1060.27,684.288 1060.83,684.288 1061.39,684.288 1061.95,684.288 1062.51,684.288 1063.07,684.288 1063.63,684.288 1064.19,684.288 1064.75,684.288 1065.3,684.288 1065.86,684.288 1066.42,684.288 1066.98,684.288 1067.54,684.288 1068.1,684.288 1068.66,684.288 1069.22,684.288 1069.78,684.288 1070.34,684.288 1070.9,684.288 1071.46,684.288 1072.02,684.288 1072.57,684.288 1073.13,684.288 1073.69,684.288 1074.25,684.288 1074.81,684.288 1075.37,684.288 1075.93,684.288 1076.49,684.288 1077.05,684.288 1077.61,684.288 1078.17,684.288 1078.73,684.288 1079.29,684.288 1079.85,684.288 1080.4,684.288 1080.96,684.288 1081.52,684.288 1082.08,684.288 1082.64,684.288 1083.2,684.288 1083.76,684.288 1084.32,684.288 1084.88,684.288 1085.44,684.288 1086,684.288 1086.56,684.288 1087.12,684.288 1087.67,684.288 1088.23,684.288 1088.79,684.288 1089.35,684.288 1089.91,684.288 1090.47,684.288 1091.03,684.288 1091.59,684.288 1092.15,684.288 1092.71,684.288 1093.27,684.288 1093.83,684.288 1094.39,684.288 1094.94,684.288 1095.5,684.288 1096.06,684.288 1096.62,684.288 1097.18,684.288 1097.74,684.288 1098.3,684.288 1098.86,684.288 1099.42,684.288 1099.98,684.288 1100.54,684.288 1101.1,684.288 1101.66,684.288 1102.22,684.288 1102.77,684.288 1103.33,684.288 1103.89,684.288 1104.45,684.288 1105.01,684.288 1105.57,684.288 1106.13,684.288 1106.69,684.288 1107.25,684.288 1107.81,684.288 1108.37,684.288 1108.93,684.288 1109.49,684.288 1110.04,684.288 1110.6,684.288 1111.16,684.288 1111.72,684.288 1112.28,684.288 1112.84,684.288 1113.4,684.288 1113.96,684.288 1114.52,684.288 1115.08,684.288 1115.64,684.288 1116.2,684.288 1116.76,684.288 1117.31,684.288 1117.87,684.288 1118.43,684.288 1118.99,684.288 1119.55,684.288 1120.11,684.288 1120.67,684.288 1121.23,684.288 1121.79,684.288 1122.35,684.288 1122.91,684.288 1123.47,684.288 1124.03,684.288 1124.59,684.288 1125.14,684.288 1125.7,684.288 1126.26,684.288 1126.82,684.288 1127.38,684.288 1127.94,684.288 1128.5,684.288 1129.06,684.288 1129.62,684.288 1130.18,684.288 1130.74,684.288 1131.3,684.288 1131.86,684.288 1132.41,684.288 1132.97,684.288 1133.53,684.288 1134.09,684.288 1134.65,684.288 1135.21,684.288 1135.77,684.288 1136.33,684.288 1136.89,684.288 1137.45,684.288 1138.01,684.288 1138.57,684.288 1139.13,684.288 1139.68,684.288 1140.24,684.288 1140.8,684.288 1141.36,684.288 1141.92,684.288 1142.48,684.288 1143.04,684.288 1143.6,684.288 1144.16,684.288 1144.72,684.288 1145.28,684.288 1145.84,684.288 1146.4,684.288 1146.96,684.288 1147.51,684.288 1148.07,684.288 1148.63,684.288 1149.19,684.288 1149.75,684.288 1150.31,684.288 1150.87,684.288 1151.43,684.288 1151.99,684.288 1152.55,684.288 1153.11,684.288 1153.67,684.288 1154.23,684.288 1154.78,684.288 1155.34,684.288 1155.9,684.288 1156.46,684.288 1157.02,684.288 1157.58,684.288 1158.14,684.288 1158.7,684.288 1159.26,684.288 1159.82,684.288 1160.38,684.288 1160.94,684.288 1161.5,684.288 1162.05,684.288 1162.61,684.288 1163.17,684.288 1163.73,684.288 1164.29,684.288 1164.85,684.288 1165.41,684.288 1165.97,684.288 1166.53,684.288 1167.09,684.288 1167.65,684.288 1168.21,684.288 1168.77,684.288 1169.33,684.288 1169.88,684.288 1170.44,684.288 1171,684.288 1171.56,684.288 1172.12,684.288 1172.68,684.288 1173.24,684.288 1173.8,684.288 1174.36,684.288 1174.92,684.288 1175.48,684.288 1176.04,684.288 1176.6,684.288 1177.15,684.288 1177.71,684.288 1178.27,684.288 1178.83,684.288 1179.39,684.288 1179.95,684.288 1180.51,684.288 1181.07,684.288 1181.63,684.288 1182.19,684.288 1182.75,684.288 1183.31,684.288 1183.87,684.288 1184.43,684.288 1184.98,684.288 1185.54,684.288 1186.1,684.288 1186.66,684.288 1187.22,684.288 1187.78,684.288 1188.34,684.288 1188.9,684.288 1189.46,684.288 1190.02,684.288 1190.58,684.288 1191.14,684.288 1191.7,684.288 1192.25,684.288 1192.81,684.288 1193.37,684.288 1193.93,684.288 1194.49,684.288 1195.05,684.288 1195.61,684.288 1196.17,684.288 1196.73,684.288 1197.29,684.288 1197.85,684.288 1198.41,684.288 1198.97,684.288 1199.52,684.288 1200.08,684.288 1200.64,684.288 1201.2,684.288 1201.76,684.288 1202.32,684.288 1202.88,684.288 1203.44,684.288 1204,684.288 1204.56,684.288 1205.12,684.288 1205.68,684.288 1206.24,684.288 1206.8,684.288 1207.35,684.288 1207.91,684.288 1208.47,684.288 1209.03,684.288 1209.59,684.288 1210.15,684.288 1210.71,684.288 1211.27,684.288 1211.83,684.288 1212.39,684.288 1212.95,684.288 1213.51,684.288 1214.07,684.288 1214.62,684.288 1215.18,684.288 1215.74,684.288 1216.3,684.288 1216.86,684.288 1217.42,684.288 1217.98,684.288 1218.54,684.288 1219.1,684.288 1219.66,684.288 1220.22,684.288 1220.78,684.288 1221.34,684.288 1221.89,684.288 1222.45,684.288 1223.01,684.288 1223.57,684.288 1224.13,684.288 1224.69,684.288 1225.25,684.288 1225.81,684.288 1226.37,684.288 1226.93,684.288 1227.49,684.288 1228.05,684.288 1228.61,684.288 1229.17,684.288 1229.72,684.288 1230.28,684.288 1230.84,684.288 1231.4,684.288 1231.96,684.288 1232.52,684.288 1233.08,684.288 1233.64,684.288 1234.2,684.288 1234.76,684.288 1235.32,684.288 1235.88,684.288 1236.44,684.288 1236.99,684.288 1237.55,684.288 1238.11,684.288 1238.67,684.288 1239.23,684.288 1239.79,684.288 1240.35,684.288 1240.91,684.288 1241.47,684.288 1242.03,684.288 1242.59,684.288 1243.15,684.288 1243.71,684.288 1244.26,684.288 1244.82,684.288 1245.38,684.288 1245.94,684.288 1246.5,684.288 1247.06,684.288 1247.62,684.288 1248.18,684.288 1248.74,684.288 1249.3,684.288 1249.86,684.288 1250.42,684.288 1250.98,684.288 1251.54,684.288 1252.09,684.288 1252.65,684.288 1253.21,684.288 1253.77,684.288 1254.33,684.288 1254.89,684.288 1255.45,684.288 1256.01,684.288 1256.57,684.288 1257.13,684.288 1257.69,684.288 1258.25,684.288 1258.81,684.288 1259.36,684.288 1259.92,684.288 1260.48,684.288 1261.04,684.288 1261.6,684.288 1262.16,684.288 1262.72,684.288 1263.28,684.288 1263.84,684.288 1264.4,684.288 1264.96,684.288 1265.52,684.288 1266.08,684.288 1266.63,684.288 1267.19,684.288 1267.75,684.288 1268.31,684.288 1268.87,684.288 1269.43,684.288 1269.99,684.288 1270.55,684.288 1271.11,684.288 1271.67,684.288 1272.23,684.288 1272.79,684.288 1273.35,684.288 1273.91,684.288 1274.46,684.288 1275.02,684.288 1275.58,684.288 1276.14,684.288 1276.7,684.288 1277.26,684.288 1277.82,684.288 1278.38,684.288 1278.94,684.288 1279.5,684.288 1280.06,684.288 1280.62,684.288 1281.18,684.288 1281.73,684.288 1282.29,684.288 1282.85,684.288 1283.41,684.288 1283.97,684.288 1284.53,684.288 1285.09,684.288 1285.65,684.288 1286.21,684.288 1286.77,684.288 1287.33,684.288 1287.89,684.288 1288.45,684.288 1289,684.288 1289.56,684.288 1290.12,684.288 1290.68,684.288 1291.24,684.288 1291.8,684.288 1292.36,684.288 1292.92,684.288 1293.48,684.288 1294.04,684.288 1294.6,684.288 1295.16,684.288 1295.72,684.288 1296.28,684.288 1296.83,684.288 1297.39,684.288 1297.95,684.288 1298.51,684.288 1299.07,684.288 1299.63,684.288 1300.19,684.288 1300.75,684.288 1301.31,684.288 1301.87,684.288 1302.43,684.288 1302.99,684.288 1303.55,684.288 1304.1,684.288 1304.66,684.288 1305.22,684.288 1305.78,684.288 1306.34,684.288 1306.9,684.288 1307.46,684.288 1308.02,684.288 1308.58,684.288 1309.14,684.288 1309.7,684.288 1310.26,684.288 1310.82,684.288 1311.38,684.288 1311.93,684.288 1312.49,684.288 1313.05,684.288 1313.61,684.288 1314.17,684.288 1314.73,684.288 1315.29,684.288 1315.85,684.288 1316.41,684.288 1316.97,684.288 1317.53,684.288 1318.09,684.288 1318.65,684.288 1319.2,684.288 1319.76,684.288 1320.32,684.288 1320.88,684.288 1321.44,684.288 1322,684.288 1322.56,684.288 1323.12,684.288 1323.68,684.288 1324.24,684.288 1324.8,684.288 1325.36,684.288 1325.92,684.288 1326.47,684.288 1327.03,684.288 1327.59,684.288 1328.15,684.288 1328.71,684.288 1329.27,684.288 1329.83,684.288 1330.39,684.288 1330.95,684.288 1331.51,684.288 1332.07,684.288 1332.63,684.288 1333.19,684.288 1333.75,684.288 1334.3,684.288 1334.86,684.288 1335.42,684.288 1335.98,684.288 1336.54,684.288 1337.1,684.288 1337.66,684.288 1338.22,684.288 1338.78,684.288 1339.34,684.288 1339.9,684.288 1340.46,684.288 1341.02,684.288 1341.57,684.288 1342.13,684.288 1342.69,684.288 1343.25,684.288 1343.81,684.288 1344.37,684.288 1344.93,684.288 1345.49,684.288 1346.05,684.288 1346.61,684.288 1347.17,684.288 1347.73,684.288 1348.29,684.288 1348.84,684.288 1349.4,684.288 1349.96,684.288 1350.52,684.288 1351.08,684.288 1351.64,684.288 1352.2,684.288 1352.76,684.288 1353.32,684.288 1353.88,684.288 1354.44,684.288 1355,684.288 1355.56,684.288 1356.12,684.288 1356.67,684.288 1357.23,684.288 1357.79,684.288 1358.35,684.288 1358.91,684.288 1359.47,684.288 1360.03,684.288 1360.59,684.288 1361.15,684.288 1361.71,684.288 1362.27,684.288 1362.83,684.288 1363.39,684.288 1363.94,684.288 1364.5,684.288 1365.06,684.288 1365.62,684.288 1366.18,684.288 1366.74,684.288 1367.3,684.288 1367.86,684.288 1368.42,684.288 1368.98,684.288 1369.54,684.288 1370.1,684.288 1370.66,684.288 1371.21,684.288 1371.77,684.288 1372.33,684.288 1372.89,684.288 1373.45,684.288 1374.01,684.288 1374.57,684.288 1375.13,684.288 1375.69,684.288 1376.25,684.288 1376.81,684.288 1377.37,684.288 1377.93,684.288 1378.49,684.288 1379.04,684.288 1379.6,684.288 1380.16,684.288 1380.72,684.288 1381.28,684.288 1381.84,684.288 1382.4,684.288 1382.96,684.288 1383.52,684.288 1384.08,684.288 1384.64,684.288 1385.2,684.288 1385.76,684.288 1386.31,684.288 1386.87,684.288 1387.43,684.288 1387.99,684.288 1388.55,684.288 1389.11,684.288 1389.67,684.288 1390.23,684.288 1390.79,684.288 1391.35,684.288 1391.91,684.288 1392.47,684.288 1393.03,684.288 1393.58,684.288 1394.14,684.288 1394.7,684.288 1395.26,684.288 1395.82,684.288 1396.38,684.288 1396.94,684.288 1397.5,684.288 1398.06,684.288 1398.62,684.288 1399.18,684.288 1399.74,684.288 1400.3,684.288 1400.86,684.288 1401.41,684.288 1401.97,684.288 1402.53,684.288 1403.09,684.288 1403.65,684.288 1404.21,684.288 1404.77,684.288 1405.33,684.288 1405.89,684.288 1406.45,684.288 1407.01,684.288 1407.57,684.288 1408.13,684.288 1408.68,684.288 1409.24,684.288 1409.8,684.288 1410.36,684.288 1410.92,684.288 1411.48,684.288 1412.04,684.288 1412.6,684.288 1413.16,684.288 1413.72,684.288 1414.28,684.288 1414.84,684.288 1415.4,684.288 1415.95,684.288 1416.51,684.288 1417.07,684.288 1417.63,684.288 1418.19,684.288 1418.75,684.288 1419.31,684.288 1419.87,684.288 1420.43,684.288 1420.99,684.288 1421.55,684.288 1422.11,684.288 1422.67,684.288 1423.23,684.288 1423.78,684.288 1424.34,684.288 1424.9,684.288 1425.46,684.288 1426.02,684.288 1426.58,684.288 1427.14,684.288 1427.7,684.288 1428.26,684.288 1428.82,684.288 1429.38,684.288 1429.94,684.288 1430.5,684.288 1431.05,684.288 1431.61,684.288 1432.17,684.288 1432.73,684.288 1433.29,684.288 1433.85,684.288 1434.41,684.288 1434.97,684.288 1435.53,684.288 1436.09,684.288 1436.65,684.288 1437.21,684.288 1437.77,684.288 1438.33,684.288 1438.88,684.288 1439.44,684.288 1440,684.288 1440.56,684.288 1441.12,684.288 1441.68,684.288 1442.24,684.288 1442.8,684.288 1443.36,684.288 1443.92,684.288 1444.48,684.288 1445.04,684.288 1445.6,684.288 1446.15,684.288 1446.71,684.288 1447.27,684.288 1447.83,684.288 1448.39,684.288 1448.95,684.288 1449.51,684.288 1450.07,684.288 1450.63,684.288 1451.19,684.288 1451.75,684.288 1452.31,684.288 1452.87,684.288 1453.42,684.288 1453.98,684.288 1454.54,684.288 1455.1,684.288 1455.66,684.288 1456.22,684.288 1456.78,684.288 1457.34,684.288 1457.9,684.288 1458.46,684.288 1459.02,684.288 1459.58,684.288 1460.14,684.288 1460.7,684.288 1461.25,684.288 1461.81,684.288 1462.37,684.288 1462.93,684.288 1463.49,684.288 1464.05,684.288 1464.61,684.288 1465.17,684.288 1465.73,684.288 1466.29,684.288 1466.85,684.288 1467.41,684.288 1467.97,684.288 1468.52,684.288 1469.08,684.288 1469.64,684.288 1470.2,684.288 1470.76,684.288 1471.32,684.288 1471.88,684.288 1472.44,684.288 1473,684.288 1473.56,684.288 1474.12,684.288 1474.68,684.288 1475.24,684.288 1475.79,684.288 1476.35,684.288 1476.91,684.288 1477.47,684.288 1478.03,684.288 1478.59,684.288 1479.15,684.288 1479.71,684.288 1480.27,684.288 1480.83,684.288 1481.39,684.288 1481.95,684.288 1482.51,684.288 1483.07,684.288 1483.62,684.288 1484.18,684.288 1484.74,684.288 1485.3,684.288 1485.86,684.288 1486.42,684.288 1486.98,684.288 1487.54,684.288 1488.1,684.288 1488.66,684.288 1489.22,684.288 1489.78,684.288 1490.34,684.288 1490.89,684.288 1491.45,684.288 1492.01,684.288 1492.57,684.288 1493.13,684.288 1493.69,684.288 1494.25,684.288 1494.81,684.288 1495.37,684.288 1495.93,684.288 1496.49,684.288 1497.05,684.288 1497.61,684.288 1498.16,684.288 1498.72,684.288 1499.28,684.288 1499.84,684.288 1500.4,684.288 1500.96,684.288 1501.52,684.288 1502.08,684.288 1502.64,684.288 1503.2,684.288 1503.76,684.288 1504.32,684.288 1504.88,684.288 1505.44,684.288 1505.99,684.288 1506.55,684.288 1507.11,684.288 1507.67,684.288 1508.23,684.288 1508.79,684.288 1509.35,684.288 1509.91,684.288 1510.47,684.288 1511.03,684.288 1511.59,684.288 1512.15,684.288 1512.71,684.288 1513.26,684.288 1513.82,684.288 1514.38,684.288 1514.94,684.288 1515.5,684.288 1516.06,684.288 1516.62,684.288 1517.18,684.288 1517.74,684.288 1518.3,684.288 1518.86,684.288 1519.42,684.288 1519.98,684.288 1520.53,684.288 1521.09,684.288 1521.65,684.288 1522.21,684.288 1522.77,684.288 1523.33,684.288 1523.89,684.288 1524.45,684.288 1525.01,684.288 1525.57,684.288 1526.13,684.288 1526.69,684.288 1527.25,684.288 1527.81,684.288 1528.36,684.288 1528.92,684.288 1529.48,684.288 1530.04,684.288 1530.6,684.288 1531.16,684.288 1531.72,684.288 1532.28,684.288 1532.84,684.288 1533.4,684.288 1533.96,684.288 1534.52,684.288 1535.08,684.288 1535.63,684.288 1536.19,684.288 1536.75,684.288 1537.31,684.288 1537.87,684.288 1538.43,684.288 1538.99,684.288 1539.55,684.288 1540.11,684.288 1540.67,684.288 1541.23,684.288 1541.79,684.288 1542.35,684.288 1542.9,684.288 1543.46,684.288 1544.02,684.288 1544.58,684.288 1545.14,684.288 1545.7,684.288 1546.26,684.288 1546.82,684.288 1547.38,684.288 1547.94,684.288 1548.5,684.288 1549.06,684.288 1549.62,684.288 1550.18,684.288 1550.73,684.288 1551.29,684.288 1551.85,684.288 1552.41,684.288 1552.97,684.288 1553.53,684.288 1554.09,684.288 1554.65,684.288 1555.21,684.288 1555.77,684.288 1556.33,684.288 1556.89,684.288 1557.45,684.288 1558,684.288 1558.56,684.288 1559.12,684.288 1559.68,684.288 1560.24,684.288 1560.8,684.288 1561.36,684.288 1561.92,684.288 1562.48,684.288 1563.04,684.288 1563.6,684.288 1564.16,684.288 1564.72,684.288 1565.28,684.288 1565.83,684.288 1566.39,684.288 1566.95,684.288 1567.51,684.288 1568.07,684.288 1568.63,684.288 1569.19,684.288 1569.75,684.288 1570.31,684.288 1570.87,684.288 1571.43,684.288 1571.99,684.288 1572.55,684.288 1573.1,684.288 1573.66,684.288 1574.22,684.288 1574.78,684.288 1575.34,684.288 1575.9,684.288 1576.46,684.288 1577.02,684.288 1577.58,684.288 1578.14,684.288 1578.7,684.288 1579.26,684.288 1579.82,684.288 1580.37,684.288 1580.93,684.288 1581.49,684.288 1582.05,684.288 1582.61,684.288 1583.17,684.288 1583.73,684.288 1584.29,684.288 1584.85,684.288 1585.41,684.288 1585.97,684.288 1586.53,684.288 1587.09,684.288 1587.65,684.288 1588.2,684.288 1588.76,684.288 1589.32,684.288 1589.88,684.288 1590.44,684.288 1591,684.288 1591.56,684.288 1592.12,684.288 1592.68,684.288 1593.24,684.288 1593.8,684.288 1594.36,684.288 1594.92,684.288 1595.47,684.288 1596.03,684.288 1596.59,684.288 1597.15,684.288 1597.71,684.288 1598.27,684.288 1598.83,684.288 1599.39,684.288 1599.95,684.288 1600.51,684.288 1601.07,684.288 1601.63,684.288 1602.19,684.288 1602.74,684.288 1603.3,684.288 1603.86,684.288 1604.42,684.288 1604.98,684.288 1605.54,684.288 1606.1,684.288 1606.66,684.288 1607.22,684.288 1607.78,684.288 1608.34,684.288 1608.9,684.288 1609.46,684.288 1610.02,684.288 1610.57,684.288 1611.13,684.288 1611.69,684.288 1612.25,684.288 1612.81,684.288 1613.37,684.288 1613.93,684.288 1614.49,684.288 1615.05,684.288 1615.61,684.288 1616.17,684.288 1616.73,684.288 1617.29,684.288 1617.84,684.288 1618.4,684.288 1618.96,684.288 1619.52,684.288 1620.08,684.288 1620.64,684.288 1621.2,684.288 1621.76,684.288 1622.32,684.288 1622.88,684.288 1623.44,684.288 1624,684.288 1624.56,684.288 1625.11,684.288 1625.67,684.288 1626.23,684.288 1626.79,684.288 1627.35,684.288 1627.91,684.288 1628.47,684.288 1629.03,684.288 1629.59,684.288 1630.15,684.288 1630.71,684.288 1631.27,684.288 1631.83,684.288 1632.39,684.288 1632.94,684.288 1633.5,684.288 1634.06,684.288 1634.62,684.288 1635.18,684.288 1635.74,684.288 1636.3,684.288 1636.86,684.288 1637.42,684.288 1637.98,684.288 1638.54,684.288 1639.1,684.288 1639.66,684.288 1640.21,684.288 1640.77,684.288 1641.33,684.288 1641.89,684.288 1642.45,684.288 1643.01,684.288 1643.57,684.288 1644.13,684.288 1644.69,684.288 1645.25,684.288 1645.81,684.288 1646.37,684.288 1646.93,684.288 1647.48,684.288 1648.04,684.288 1648.6,684.288 1649.16,684.288 1649.72,684.288 1650.28,684.288 1650.84,684.288 1651.4,684.288 1651.96,684.288 1652.52,684.288 1653.08,684.288 1653.64,684.288 1654.2,684.288 1654.76,684.288 1655.31,684.288 1655.87,684.288 1656.43,684.288 1656.99,684.288 1657.55,684.288 1658.11,684.288 1658.67,684.288 1659.23,684.288 1659.79,684.288 1660.35,684.288 1660.91,684.288 1661.47,684.288 1662.03,684.288 1662.58,684.288 1663.14,684.288 1663.7,684.288 1664.26,684.288 1664.82,684.288 1665.38,684.288 1665.94,684.288 1666.5,684.288 1667.06,684.288 1667.62,684.288 1668.18,684.288 1668.74,684.288 1669.3,684.288 1669.85,684.288 1670.41,684.288 1670.97,684.288 1671.53,684.288 1672.09,684.288 1672.65,684.288 1673.21,684.288 1673.77,684.288 1674.33,684.288 1674.89,684.288 1675.45,684.288 1676.01,684.288 1676.57,684.288 1677.13,684.288 1677.68,684.288 1678.24,684.288 1678.8,684.288 1679.36,684.288 1679.92,684.288 1680.48,684.288 1681.04,684.288 1681.6,684.288 1682.16,684.288 1682.72,684.288 1683.28,684.288 1683.84,684.288 1684.4,684.288 1684.95,684.288 1685.51,684.288 1686.07,684.288 1686.63,684.288 1687.19,684.288 1687.75,684.288 1688.31,684.288 1688.87,684.288 1689.43,684.288 1689.99,684.288 1690.55,684.288 1691.11,684.288 1691.67,684.288 1692.23,684.288 1692.78,684.288 1693.34,684.288 1693.9,684.288 1694.46,684.288 1695.02,684.288 1695.58,684.288 1696.14,684.288 1696.7,684.288 1697.26,684.288 1697.82,684.288 1698.38,684.288 1698.94,684.288 1699.5,684.288 1700.05,684.288 1700.61,684.288 1701.17,684.288 1701.73,684.288 1702.29,684.288 1702.85,684.288 1703.41,684.288 1703.97,684.288 1704.53,684.288 1705.09,684.288 1705.65,684.288 1706.21,684.288 1706.77,684.288 1707.32,684.288 1707.88,684.288 1708.44,684.288 1709,684.288 1709.56,684.288 1710.12,684.288 1710.68,684.288 1711.24,684.288 1711.8,684.288 1712.36,684.288 1712.92,684.288 1713.48,684.288 1714.04,684.288 1714.6,684.288 1715.15,684.288 1715.71,684.288 1716.27,684.288 1716.83,684.288 1717.39,684.288 1717.95,684.288 1718.51,684.288 1719.07,684.288 1719.63,684.288 1720.19,684.288 1720.75,684.288 1721.31,684.288 1721.87,684.288 1722.42,684.288 1722.98,684.288 1723.54,684.288 1724.1,684.288 1724.66,684.288 1725.22,684.288 1725.78,684.288 1726.34,684.288 1726.9,684.288 1727.46,684.288 1728.02,684.288 1728.58,684.288 1729.14,684.288 1729.69,684.288 1730.25,684.288 1730.81,684.288 1731.37,684.288 1731.93,684.288 1732.49,684.288 1733.05,684.288 1733.61,684.288 1734.17,684.288 1734.73,684.288 1735.29,684.288 1735.85,684.288 1736.41,684.288 1736.97,684.288 1737.52,684.288 1738.08,684.288 1738.64,684.288 1739.2,684.288 1739.76,684.288 1740.32,684.288 1740.88,684.288 1741.44,684.288 1742,684.288 1742.56,684.288 1743.12,684.288 1743.68,684.288 1744.24,684.288 1744.79,684.288 1745.35,684.288 1745.91,684.288 1746.47,684.288 1747.03,684.288 1747.59,684.288 1748.15,684.288 1748.71,684.288 1749.27,684.288 1749.83,684.288 1750.39,684.288 1750.95,684.288 1751.51,684.288 1752.06,684.288 1752.62,684.288 1753.18,684.288 1753.74,684.288 1754.3,684.288 1754.86,684.288 1755.42,684.288 1755.98,684.288 1756.54,684.288 1757.1,684.288 1757.66,684.288 1758.22,684.288 1758.78,684.288 1759.34,684.288 1759.89,684.288 1760.45,684.288 1761.01,684.288 1761.57,684.288 1762.13,684.288 1762.69,684.288 1763.25,684.288 1763.81,684.288 1764.37,684.288 1764.93,684.288 1765.49,684.288 1766.05,684.288 1766.61,684.288 1767.16,684.288 1767.72,684.288 1768.28,684.288 1768.84,684.288 1769.4,684.288 1769.96,684.288 1770.52,684.288 1771.08,684.288 1771.64,684.288 1772.2,684.288 1772.76,684.288 1773.32,684.288 1773.88,684.288 1774.43,684.288 1774.99,684.288 1775.55,684.288 1776.11,684.288 1776.67,684.288 1777.23,684.288 1777.79,684.288 1778.35,684.288 1778.91,684.288 1779.47,684.288 1780.03,684.288 1780.59,684.288 1781.15,684.288 1781.71,684.288 1782.26,684.288 1782.82,684.288 1783.38,684.288 1783.94,684.288 1784.5,684.288 1785.06,684.288 1785.62,684.288 1786.18,684.288 1786.74,684.288 1787.3,684.288 1787.86,684.288 1788.42,684.288 1788.98,684.288 1789.53,684.288 1790.09,684.288 1790.65,684.288 1791.21,684.288 1791.77,684.288 1792.33,684.288 1792.89,684.288 1793.45,684.288 1794.01,684.288 1794.57,684.288 1795.13,684.288 1795.69,684.288 1796.25,684.288 1796.8,684.288 1797.36,684.288 1797.92,684.288 1798.48,684.288 1799.04,684.288 1799.6,684.288 1800.16,684.288 1800.72,684.288 1801.28,684.288 1801.84,684.288 1802.4,684.288 1802.96,684.288 1803.52,684.288 1804.08,684.288 1804.63,684.288 1805.19,684.288 1805.75,684.288 1806.31,684.288 1806.87,684.288 1807.43,684.288 1807.99,684.288 1808.55,684.288 1809.11,684.288 1809.67,684.288 1810.23,684.288 1810.79,684.288 1811.35,684.288 1811.9,684.288 1812.46,684.288 1813.02,684.288 1813.58,684.288 1814.14,684.288 1814.7,684.288 1815.26,684.288 1815.82,684.288 1816.38,684.288 1816.94,684.288 1817.5,684.288 1818.06,684.288 1818.62,684.288 1819.18,684.288 1819.73,684.288 1820.29,684.288 1820.85,684.288 1821.41,684.288 1821.97,684.288 1822.53,684.288 1823.09,684.288 1823.65,684.288 1824.21,684.288 1824.77,684.288 1825.33,684.288 1825.89,684.288 1826.45,684.288 1827,684.288 1827.56,684.288 1828.12,684.288 1828.68,684.288 1829.24,684.288 1829.8,684.288 1830.36,684.288 1830.92,684.288 1831.48,684.288 1832.04,684.288 1832.6,684.288 1833.16,684.288 1833.72,684.288 1834.27,684.288 1834.83,684.288 1835.39,684.288 1835.95,684.288 1836.51,684.288 1837.07,684.288 1837.63,684.288 1838.19,684.288 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0368877413440645 ± 0.026728036137269814\nProjected Energy: -4.018625921162279 ± (0.00483366125721485, 0.004748812417288306)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.485152</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4087e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0369e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.658e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.503e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.856e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.756e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321605\n -3.3631242916133672\n -0.7590191922770906\n  0.13584182219621965\n  0.15789998694609153\n  0.876711441178136\n  1.5305929970973224\n  1.5835732611867446\n  3.0728703303258635\n  3.125672653951842\n  4.862107221562173\n  6.260694850380595\n  6.402671211183114\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\n```jldoctest julia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian) BasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:   0.0  -1.0  -1.0  -1.0   0.0  -1.0  -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating BasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:   0.0  -1.0  -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues 3-element Vector{Float64}:  -1.9999999999999996   0.9999999999999997   1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector 3-element Vector{Float64}:  -0.5773502691896257  -0.5773502691896255  -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec DVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()   fs\"|0 0 1⟩\" => -0.57735   fs\"|0 1 0⟩\" => -0.57735   fs\"|1 0 0⟩\" => -0.57735   ``Has methods for [dimension](@ref), [sparse](@ref), [Matrix](@ref), [starting_address`](@ref).\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
