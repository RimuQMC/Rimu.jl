var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"mpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21500851788567876 ± 0.001706296999827278\n   G2(1) = 0.9161669101329845 ± 0.000608006780773675\n   G2(2) = 0.9812784488437478 ± 0.000724698447642638\n   G2(3) = 0.990100764160857 ± 0.0013245393884603086\n   G2(4) = 0.9812784488437478 ± 0.000724698447642638\n   G2(5) = 0.9161669101329845 ± 0.000608006780773675\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.054382297680308 ± 0.1263797923336837\n   Replica 2: -4.050402188347105 ± 0.121512694532149\n   Replica 3: -4.038496586750833 ± 0.1325414047682752\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip280\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip280)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip281\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip280)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip282\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.27 2211.02,1003.27 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.708 2211.02,745.708 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.146 2211.02,488.146 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.584 2211.02,230.584 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.27 423.181,1003.27 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.708 423.181,745.708 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.146 423.181,488.146 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.584 423.181,230.584 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M290.043 1016.61 L306.363 1016.61 L306.363 1020.55 L284.418 1020.55 L284.418 1016.61 Q287.08 1013.86 291.664 1009.23 Q296.27 1004.58 297.451 1003.23 Q299.696 1000.71 300.576 998.975 Q301.478 997.216 301.478 995.526 Q301.478 992.772 299.534 991.036 Q297.613 989.299 294.511 989.299 Q292.312 989.299 289.858 990.063 Q287.427 990.827 284.65 992.378 L284.65 987.656 Q287.474 986.522 289.927 985.943 Q292.381 985.364 294.418 985.364 Q299.789 985.364 302.983 988.049 Q306.177 990.735 306.177 995.225 Q306.177 997.355 305.367 999.276 Q304.58 1001.17 302.474 1003.77 Q301.895 1004.44 298.793 1007.66 Q295.691 1010.85 290.043 1016.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M316.224 985.989 L334.58 985.989 L334.58 989.924 L320.506 989.924 L320.506 998.397 Q321.524 998.049 322.543 997.887 Q323.562 997.702 324.58 997.702 Q330.367 997.702 333.747 1000.87 Q337.126 1004.04 337.126 1009.46 Q337.126 1015.04 333.654 1018.14 Q330.182 1021.22 323.862 1021.22 Q321.687 1021.22 319.418 1020.85 Q317.173 1020.48 314.765 1019.74 L314.765 1015.04 Q316.849 1016.17 319.071 1016.73 Q321.293 1017.29 323.77 1017.29 Q327.774 1017.29 330.112 1015.18 Q332.45 1013.07 332.45 1009.46 Q332.45 1005.85 330.112 1003.74 Q327.774 1001.64 323.77 1001.64 Q321.895 1001.64 320.02 1002.05 Q318.168 1002.47 316.224 1003.35 L316.224 985.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M356.339 989.068 Q352.728 989.068 350.899 992.633 Q349.094 996.174 349.094 1003.3 Q349.094 1010.41 350.899 1013.98 Q352.728 1017.52 356.339 1017.52 Q359.973 1017.52 361.779 1013.98 Q363.608 1010.41 363.608 1003.3 Q363.608 996.174 361.779 992.633 Q359.973 989.068 356.339 989.068 M356.339 985.364 Q362.149 985.364 365.205 989.971 Q368.284 994.554 368.284 1003.3 Q368.284 1012.03 365.205 1016.64 Q362.149 1021.22 356.339 1021.22 Q350.529 1021.22 347.45 1016.64 Q344.395 1012.03 344.395 1003.3 Q344.395 994.554 347.45 989.971 Q350.529 985.364 356.339 985.364 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M286.062 728.428 L304.418 728.428 L304.418 732.363 L290.344 732.363 L290.344 740.835 Q291.363 740.488 292.381 740.326 Q293.4 740.14 294.418 740.14 Q300.205 740.14 303.585 743.312 Q306.964 746.483 306.964 751.9 Q306.964 757.478 303.492 760.58 Q300.02 763.659 293.701 763.659 Q291.525 763.659 289.256 763.288 Q287.011 762.918 284.603 762.177 L284.603 757.478 Q286.687 758.613 288.909 759.168 Q291.131 759.724 293.608 759.724 Q297.613 759.724 299.951 757.617 Q302.288 755.511 302.288 751.9 Q302.288 748.289 299.951 746.182 Q297.613 744.076 293.608 744.076 Q291.733 744.076 289.858 744.492 Q288.006 744.909 286.062 745.789 L286.062 728.428 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M326.177 731.506 Q322.566 731.506 320.737 735.071 Q318.932 738.613 318.932 745.742 Q318.932 752.849 320.737 756.414 Q322.566 759.955 326.177 759.955 Q329.811 759.955 331.617 756.414 Q333.446 752.849 333.446 745.742 Q333.446 738.613 331.617 735.071 Q329.811 731.506 326.177 731.506 M326.177 727.803 Q331.987 727.803 335.043 732.409 Q338.122 736.992 338.122 745.742 Q338.122 754.469 335.043 759.076 Q331.987 763.659 326.177 763.659 Q320.367 763.659 317.288 759.076 Q314.233 754.469 314.233 745.742 Q314.233 736.992 317.288 732.409 Q320.367 727.803 326.177 727.803 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M356.339 731.506 Q352.728 731.506 350.899 735.071 Q349.094 738.613 349.094 745.742 Q349.094 752.849 350.899 756.414 Q352.728 759.955 356.339 759.955 Q359.973 759.955 361.779 756.414 Q363.608 752.849 363.608 745.742 Q363.608 738.613 361.779 735.071 Q359.973 731.506 356.339 731.506 M356.339 727.803 Q362.149 727.803 365.205 732.409 Q368.284 736.992 368.284 745.742 Q368.284 754.469 365.205 759.076 Q362.149 763.659 356.339 763.659 Q350.529 763.659 347.45 759.076 Q344.395 754.469 344.395 745.742 Q344.395 736.992 347.45 732.409 Q350.529 727.803 356.339 727.803 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M284.835 470.866 L307.057 470.866 L307.057 472.857 L294.511 505.426 L289.627 505.426 L301.432 474.801 L284.835 474.801 L284.835 470.866 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M316.224 470.866 L334.58 470.866 L334.58 474.801 L320.506 474.801 L320.506 483.273 Q321.524 482.926 322.543 482.764 Q323.562 482.579 324.58 482.579 Q330.367 482.579 333.747 485.75 Q337.126 488.921 337.126 494.338 Q337.126 499.917 333.654 503.018 Q330.182 506.097 323.862 506.097 Q321.687 506.097 319.418 505.727 Q317.173 505.356 314.765 504.616 L314.765 499.917 Q316.849 501.051 319.071 501.606 Q321.293 502.162 323.77 502.162 Q327.774 502.162 330.112 500.055 Q332.45 497.949 332.45 494.338 Q332.45 490.727 330.112 488.62 Q327.774 486.514 323.77 486.514 Q321.895 486.514 320.02 486.931 Q318.168 487.347 316.224 488.227 L316.224 470.866 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M356.339 473.944 Q352.728 473.944 350.899 477.509 Q349.094 481.051 349.094 488.181 Q349.094 495.287 350.899 498.852 Q352.728 502.393 356.339 502.393 Q359.973 502.393 361.779 498.852 Q363.608 495.287 363.608 488.181 Q363.608 481.051 361.779 477.509 Q359.973 473.944 356.339 473.944 M356.339 470.241 Q362.149 470.241 365.205 474.847 Q368.284 479.431 368.284 488.181 Q368.284 496.907 365.205 501.514 Q362.149 506.097 356.339 506.097 Q350.529 506.097 347.45 501.514 Q344.395 496.907 344.395 488.181 Q344.395 479.431 347.45 474.847 Q350.529 470.241 356.339 470.241 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M256.664 243.929 L264.303 243.929 L264.303 217.563 L255.992 219.23 L255.992 214.971 L264.256 213.304 L268.932 213.304 L268.932 243.929 L276.571 243.929 L276.571 247.864 L256.664 247.864 L256.664 243.929 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M296.015 216.383 Q292.404 216.383 290.576 219.948 Q288.77 223.489 288.77 230.619 Q288.77 237.725 290.576 241.29 Q292.404 244.832 296.015 244.832 Q299.65 244.832 301.455 241.29 Q303.284 237.725 303.284 230.619 Q303.284 223.489 301.455 219.948 Q299.65 216.383 296.015 216.383 M296.015 212.679 Q301.826 212.679 304.881 217.286 Q307.96 221.869 307.96 230.619 Q307.96 239.346 304.881 243.952 Q301.826 248.535 296.015 248.535 Q290.205 248.535 287.127 243.952 Q284.071 239.346 284.071 230.619 Q284.071 221.869 287.127 217.286 Q290.205 212.679 296.015 212.679 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M326.177 216.383 Q322.566 216.383 320.737 219.948 Q318.932 223.489 318.932 230.619 Q318.932 237.725 320.737 241.29 Q322.566 244.832 326.177 244.832 Q329.811 244.832 331.617 241.29 Q333.446 237.725 333.446 230.619 Q333.446 223.489 331.617 219.948 Q329.811 216.383 326.177 216.383 M326.177 212.679 Q331.987 212.679 335.043 217.286 Q338.122 221.869 338.122 230.619 Q338.122 239.346 335.043 243.952 Q331.987 248.535 326.177 248.535 Q320.367 248.535 317.288 243.952 Q314.233 239.346 314.233 230.619 Q314.233 221.869 317.288 217.286 Q320.367 212.679 326.177 212.679 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M356.339 216.383 Q352.728 216.383 350.899 219.948 Q349.094 223.489 349.094 230.619 Q349.094 237.725 350.899 241.29 Q352.728 244.832 356.339 244.832 Q359.973 244.832 361.779 241.29 Q363.608 237.725 363.608 230.619 Q363.608 223.489 361.779 219.948 Q359.973 216.383 356.339 216.383 M356.339 212.679 Q362.149 212.679 365.205 217.286 Q368.284 221.869 368.284 230.619 Q368.284 239.346 365.205 243.952 Q362.149 248.535 356.339 248.535 Q350.529 248.535 347.45 243.952 Q344.395 239.346 344.395 230.619 Q344.395 221.869 347.45 217.286 Q350.529 212.679 356.339 212.679 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip282)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.584 4017.76,230.584 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.75 461.669,1245.99 462.238,1245.15 462.806,1244.23 463.375,1243.22 463.943,1242.11 464.511,1240.91 465.08,1239.61 465.648,1238.2 466.216,1236.67 466.785,1235.01 467.353,1233.23 467.921,1230.29 468.49,1228.21 469.058,1225.98 469.626,1223.59 470.195,1221.04 470.763,1218.32 471.331,1214.39 471.9,1209.18 472.468,1205.77 473.036,1201.14 473.605,1196.23 474.173,1191.09 474.741,1185.65 475.31,1176.99 475.878,1172.04 476.446,1166.93 477.015,1161.6 477.583,1156.05 478.152,1149.19 478.72,1143.22 479.288,1135.98 479.857,1128.52 480.425,1120.87 480.993,1111.94 481.562,1103.8 482.13,1096.44 482.698,1088.93 483.267,1081.18 483.835,1073.16 484.403,1063.02 484.972,1052.67 485.54,1044.23 486.108,1034.58 486.677,1024.82 487.245,1016.06 487.813,1006.1 488.382,996.082 488.95,986.066 489.518,976.947 490.087,965.63 490.655,956.345 491.224,946.021 491.792,936.336 492.36,924.745 492.929,914.26 493.497,903.541 494.065,892.965 494.634,881.311 495.202,868.589 495.77,856.943 496.339,847.506 496.907,834.947 497.475,823.567 498.044,813.258 498.612,801.882 499.18,790.745 499.749,778.59 500.317,769.655 500.885,760.787 501.454,749.865 502.022,739.982 502.59,730.146 503.159,718.336 503.727,709.748 504.295,701.21 504.864,689.746 505.432,681.411 506.001,673.115 506.569,662.807 507.137,653.687 507.706,643.518 508.274,634.72 508.842,627.073 509.411,619.399 509.979,609.65 510.547,599.055 511.116,589.803 511.684,581.785 512.252,574.922 512.821,565.088 513.389,556.315 513.957,549.994 514.526,543.527 515.094,537.211 515.662,529.057 516.231,520.995 516.799,515.068 517.367,508.24 517.936,500.595 518.504,495.156 519.072,490.691 519.641,485.2 520.209,478.873 520.778,474.778 521.346,468.708 521.914,462.844 522.483,457.072 523.051,451.313 523.619,445.763 524.188,440.349 524.756,436.002 525.324,429.741 525.893,423.695 526.461,419.827 527.029,412.102 527.598,408.526 528.166,402.956 528.734,399.583 529.303,395.353 529.871,392.19 530.439,390.026 531.008,385.656 531.576,382.568 532.144,377.538 532.713,372.826 533.281,368.091 533.85,365.611 534.418,363.179 534.986,356.689 535.555,351.393 536.123,348.355 536.691,346.569 537.26,343.698 537.828,340.774 538.396,337.894 538.965,334.955 539.533,332.28 540.101,327.794 540.67,325.489 541.238,319.134 541.806,317.104 542.375,316.456 542.943,314.706 543.511,312.819 544.08,310.005 544.648,308.275 545.216,306.57 545.785,305.77 546.353,305.188 546.921,304.638 547.49,304.067 548.058,302.344 548.627,301.526 549.195,297.623 549.763,299.17 550.332,297.313 550.9,296.687 551.468,296.124 552.037,293.437 552.605,294.075 553.173,292.401 553.742,290.93 554.31,289.509 554.878,286.022 555.447,284.599 556.015,287.489 556.583,285.905 557.152,285.32 557.72,285.733 558.288,286.059 558.857,283.158 559.425,282.219 559.993,282.543 560.562,281.914 561.13,280.324 561.698,276.674 562.267,275.13 562.835,275.797 563.404,276.534 563.972,275.277 564.54,273.825 565.109,272.286 565.677,268.993 566.245,269.978 566.814,266.525 567.382,267.536 567.95,265.233 568.519,266.158 569.087,265.016 569.655,264.052 570.224,263.835 570.792,263.693 571.36,260.435 571.929,259.539 572.497,257.634 573.065,257.837 573.634,256.91 574.202,258.197 574.77,255.437 575.339,256.892 575.907,257.062 576.476,254.95 577.044,253.953 577.612,254.402 578.181,253.861 578.749,252.99 579.317,252.237 579.886,250.748 580.454,250.271 581.022,251.636 581.591,250.856 582.159,250.189 582.727,250.37 583.296,249.819 583.864,248.217 584.432,247.541 585.001,247.098 585.569,246.474 586.137,246.193 586.706,245.788 587.274,244.275 587.842,244.054 588.411,243.729 588.979,244.356 589.547,247.167 590.116,247.928 590.684,248.509 591.253,249.087 591.821,248.2 592.389,250.557 592.958,249.615 593.526,249.844 594.094,248.636 594.663,248.855 595.231,249.155 595.799,247.349 596.368,247.585 596.936,247.893 597.504,248.039 598.073,248.32 598.641,248.591 599.209,249.865 599.778,248.84 600.346,250.997 600.914,251.952 601.483,252.743 602.051,255.545 602.619,252.067 603.188,251.932 603.756,250.719 604.325,250.628 604.893,250.483 605.461,249.073 606.03,250.149 606.598,247.977 607.166,247.861 607.735,248.832 608.303,247.769 608.871,248.58 609.44,250.394 610.008,251.16 610.576,249.78 611.145,247.387 611.713,248.988 612.281,248.578 612.85,248.415 613.418,246.966 613.986,243.566 614.555,247.517 615.123,245.107 615.691,243.944 616.26,244.956 616.828,245.95 617.396,244.935 617.965,245.857 618.533,244.802 619.102,243.521 619.67,243.414 620.238,243.175 620.807,243.059 621.375,241.647 621.943,241.529 622.512,242.588 623.08,243.492 623.648,244.197 624.217,242.265 624.785,242.059 625.353,242.926 625.922,240.81 626.49,240.648 627.058,238.548 627.627,235.564 628.195,231.941 628.763,232.551 629.332,232.167 629.9,230.552 630.468,232.277 631.037,233.807 631.605,232.12 632.173,233.718 632.742,232.032 633.31,233.745 633.879,233.271 634.447,233.728 635.015,232.889 635.584,232.502 636.152,234.151 636.72,232.563 637.289,235.185 637.857,235.663 638.425,233.668 638.994,233.975 639.562,232.574 640.13,233.176 640.699,232.535 641.267,230.965 641.835,231.794 642.404,232.34 642.972,231.849 643.54,230.337 644.109,230.07 644.677,229.974 645.245,229.694 645.814,232.547 646.382,230.959 646.951,229.655 647.519,231.343 648.087,232.039 648.656,232.716 649.224,232.018 649.792,235.805 650.361,235.164 650.929,235.528 651.497,237.003 652.066,239.6 652.634,239.995 653.202,240.165 653.771,241.15 654.339,241.036 654.907,240.005 655.476,239.907 656.044,240.087 656.612,241.216 657.181,242.222 657.749,243.166 658.317,241.998 658.886,241.665 659.454,240.529 660.022,240.296 660.591,240.232 661.159,238.962 661.728,241.172 662.296,242.031 662.864,242.662 663.433,241.233 664.001,239.819 664.569,238.916 665.138,237.757 665.706,236.803 666.274,236.706 666.843,237.561 667.411,236.468 667.979,236.579 668.548,235.445 669.116,236.615 669.684,235.55 670.253,233.835 670.821,236.222 671.389,236.391 671.958,235.612 672.526,234.599 673.094,234.719 673.663,235.739 674.231,236.907 674.799,237.086 675.368,238.242 675.936,238.127 676.505,239.042 677.073,237.776 677.641,238.788 678.21,238.596 678.778,237.425 679.346,239.297 679.915,238.173 680.483,239.993 681.051,237.683 681.62,236.691 682.188,236.643 682.756,236.642 683.325,237.886 683.893,238.854 684.461,237.415 685.03,236.199 685.598,235.108 686.166,234.012 686.735,233.992 687.303,235.184 687.871,235.13 688.44,235.166 689.008,234.355 689.577,234.623 690.145,232.719 690.713,231.838 691.282,232.235 691.85,234.704 692.418,236.811 692.987,236.593 693.555,235.473 694.123,233.302 694.692,233.5 695.26,232.667 695.828,231.024 696.397,232.377 696.965,234.65 697.533,234.901 698.102,237.055 698.67,236.91 699.238,236.831 699.807,235.653 700.375,235.727 700.943,234.693 701.512,230.45 702.08,230.686 702.648,231.079 703.217,232.309 703.785,232.45 704.354,231.657 704.922,232.158 705.49,232.537 706.059,232.801 706.627,233.117 707.195,233.292 707.764,233.278 708.332,235.543 708.9,235.569 709.469,235.699 710.037,236.705 710.605,236.73 711.174,237.806 711.742,238.729 712.31,238.384 712.879,238.039 713.447,237.854 714.015,236.391 714.584,232.959 715.152,233.833 715.72,233.786 716.289,233.931 716.857,234.04 717.425,234.178 717.994,234.01 718.562,233.957 719.131,234.97 719.699,233.841 720.267,231.784 720.836,230.949 721.404,230.07 721.972,230.292 722.541,231.437 723.109,231.598 723.677,231.786 724.246,230.884 724.814,232.224 725.382,235.398 725.951,235.41 726.519,234.325 727.087,233.557 727.656,233.693 728.224,235.03 728.792,235.04 729.361,234.019 729.929,233.956 730.497,233.938 731.066,233.775 731.634,230.645 732.203,229.925 732.771,228.074 733.339,229.328 733.908,231.49 734.476,228.481 735.044,231.809 735.613,232.846 736.181,233.009 736.749,232.14 737.318,235.384 737.886,234.228 738.454,234.284 739.023,233.188 739.591,234.007 740.159,235.005 740.728,235.875 741.296,235.759 741.864,237.493 742.433,236.201 743.001,237.037 743.569,234.723 744.138,234.611 744.706,233.557 745.274,231.454 745.843,232.508 746.411,232.381 746.98,232.559 747.548,233.698 748.116,232.674 748.685,231.502 749.253,229.55 749.821,228.812 750.39,231.116 750.958,233.281 751.526,232.287 752.095,233.493 752.663,233.169 753.231,232.97 753.8,232.939 754.368,233.882 754.936,234.941 755.505,233.799 756.073,233.705 756.641,233.632 757.21,233.461 757.778,233.462 758.346,233.542 758.915,233.615 759.483,230.276 760.052,231.543 760.62,231.621 761.188,231.896 761.757,232.128 762.325,231.028 762.893,229.752 763.462,229.879 764.03,229.938 764.598,233.356 765.167,233.133 765.735,233.222 766.303,232.155 766.872,235.409 767.44,235.09 768.008,231.69 768.577,231.64 769.145,231.684 769.713,231.713 770.282,232.606 770.85,232.512 771.418,231.438 771.987,228.522 772.555,227.842 773.123,228.25 773.692,228.487 774.26,230.769 774.829,232.992 775.397,233.042 775.965,233.933 776.534,233.812 777.102,232.707 777.67,233.773 778.239,230.713 778.807,231.854 779.375,231.767 779.944,231.758 780.512,229.662 781.08,226.967 781.649,228.232 782.217,227.537 782.785,229.063 783.354,230.227 783.922,228.307 784.49,229.644 785.059,227.656 785.627,227.927 786.195,229.204 786.764,226.319 787.332,223.863 787.9,224.651 788.469,226.185 789.037,227.686 789.606,225.855 790.174,229.63 790.742,229.78 791.311,231.234 791.879,231.174 792.447,230.178 793.016,230.308 793.584,233.459 794.152,234.646 794.721,233.523 795.289,233.406 795.857,235.352 796.426,234.358 796.994,235.328 797.562,236.2 798.131,235.913 798.699,235.431 799.267,236.209 799.836,235.042 800.404,234.933 800.972,234.845 801.541,233.884 802.109,234.515 802.678,233.15 803.246,232.952 803.814,232.049 804.383,233.107 804.951,233.188 805.519,233.25 806.088,232.145 806.656,231.211 807.224,231.561 807.793,232.636 808.361,234.661 808.929,236.437 809.498,235.191 810.066,235.977 810.634,234.52 811.203,235.571 811.771,232.037 812.339,231.96 812.908,233.048 813.476,233.91 814.044,232.819 814.613,231.67 815.181,229.695 815.749,229.737 816.318,224.919 816.886,225.377 817.455,225.861 818.023,228.181 818.591,230.46 819.16,230.349 819.728,232.346 820.296,232.303 820.865,231.414 821.433,231.466 822.001,231.399 822.57,233.433 823.138,233.269 823.706,232.199 824.275,233.167 824.843,234.007 825.411,234.936 825.98,234.555 826.548,235.349 827.116,234.942 827.685,234.739 828.253,234.451 828.821,234.439 829.39,233.158 829.958,232.071 830.526,232.848 831.095,234.092 831.663,232.792 832.232,231.634 832.8,231.58 833.368,233.67 833.937,231.509 834.505,231.475 835.073,229.53 835.642,228.386 836.21,226.394 836.778,224.768 837.347,225.142 837.915,225.4 838.483,225.83 839.052,226.088 839.62,225.417 840.188,227.103 840.757,227.514 841.325,225.728 841.893,225.131 842.462,223.618 843.03,225.006 843.598,226.685 844.167,224.917 844.735,224.499 845.304,223.937 845.872,225.454 846.44,225.966 847.009,226.596 847.577,227.854 848.145,228.323 848.714,228.647 849.282,227.742 849.85,227.096 850.419,227.346 850.987,227.908 851.555,226.29 852.124,226.713 852.692,228.312 853.26,229.647 853.829,233.023 854.397,231.964 854.965,231.983 855.534,233.337 856.102,235.68 856.67,234.308 857.239,234.277 857.807,232.179 858.375,231.223 858.944,229.207 859.512,229.411 860.081,228.553 860.649,228.922 861.217,229.211 861.786,230.488 862.354,230.538 862.922,230.625 863.491,232.773 864.059,230.752 864.627,231.157 865.196,232.425 865.764,233.474 866.332,232.384 866.901,232.593 867.469,230.607 868.037,226.994 868.606,225.32 869.174,222.941 869.742,223.812 870.311,226.598 870.879,227.029 871.447,226.582 872.016,227 872.584,227.598 873.152,229.252 873.721,229.925 874.289,230.067 874.858,229.273 875.426,229.676 875.994,228.847 876.563,229.048 877.131,229.275 877.699,230.749 878.268,233.233 878.836,233.465 879.404,233.332 879.973,233.124 880.541,237.272 881.109,236.047 881.678,237.831 882.246,237.614 882.814,236.249 883.383,234.85 883.951,233.77 884.519,232.666 885.088,233.748 885.656,236.923 886.224,237.907 886.793,236.504 887.361,236.434 887.93,235.759 888.498,236.456 889.066,234.326 889.635,233.247 890.203,233.339 890.771,234.432 891.34,236.364 891.908,233.084 892.476,238.143 893.045,238.841 893.613,239.403 894.181,237.697 894.75,238.302 895.318,238 895.886,237.446 896.455,236.128 897.023,237.84 897.591,238.495 898.16,240.02 898.728,240.359 899.296,237.587 899.865,237.189 900.433,237.841 901.001,237.517 901.57,235.827 902.138,235.215 902.707,235.703 903.275,236.434 903.843,234.971 904.412,233.581 904.98,233.408 905.548,233.186 906.117,230.767 906.685,230.644 907.253,230.734 907.822,229.728 908.39,232.757 908.958,233.612 909.527,231.517 910.095,230.198 910.663,233.379 911.232,232.028 911.8,230.896 912.368,231.06 912.937,230.012 913.505,228.903 914.073,228.927 914.642,231.173 915.21,234.287 915.779,237.024 916.347,236.405 916.915,235.027 917.484,233.695 918.052,231.38 918.62,229.302 919.189,229.245 919.757,226.333 920.325,227.387 920.894,227.541 921.462,226.799 922.03,226.915 922.599,226.988 923.167,227.168 923.735,226.447 924.304,228.083 924.872,227.115 925.44,228.27 926.009,231.611 926.577,234.462 927.145,232.986 927.714,233.773 928.282,235.543 928.85,235.081 929.419,235.675 929.987,235.272 930.556,233.913 931.124,234.642 931.692,232.261 932.261,231.227 932.829,233.353 933.397,231.13 933.966,231.215 934.534,232.101 935.102,232.112 935.671,233.077 936.239,233.985 936.807,234.592 937.376,234.27 937.944,235.055 938.512,234.698 939.081,233.184 939.649,232.996 940.217,231.809 940.786,230.641 941.354,231.511 941.922,231.353 942.491,230.153 943.059,230.004 943.627,229.967 944.196,228.792 944.764,231.043 945.333,232.201 945.901,235.008 946.469,234.504 947.038,236.386 947.606,234.717 948.174,232.419 948.743,232.397 949.311,232.113 949.879,230.976 950.448,229.824 951.016,230.81 951.584,231.934 952.153,231.881 952.721,232.767 953.289,232.734 953.858,232.544 954.426,232.14 954.994,231.722 955.563,231.477 956.131,230.246 956.699,228.874 957.268,229.631 957.836,227.324 958.405,226.262 958.973,226.659 959.541,226.769 960.11,230.156 960.678,228.947 961.246,228.864 961.815,229.966 962.383,231.004 962.951,233.031 963.52,231.701 964.088,233.409 964.656,233.132 965.225,233.593 965.793,235.394 966.361,232.801 966.93,237.674 967.498,238.211 968.066,236.559 968.635,233.861 969.203,232.571 969.771,229.319 970.34,229.22 970.908,230.129 971.476,230.908 972.045,230.766 972.613,232.554 973.182,229.193 973.75,229.952 974.318,228.847 974.887,231.738 975.455,232.488 976.023,232.254 976.592,229.977 977.16,229.829 977.728,229.773 978.297,229.692 978.865,228.484 979.433,228.479 980.002,228.752 980.57,229.967 981.138,227.818 981.707,223.673 982.275,222.916 982.843,223.093 983.412,223.609 983.98,222.846 984.548,226.682 985.117,228.633 985.685,227.671 986.253,227.877 986.822,229.164 987.39,229.301 987.959,227.32 988.527,226.289 989.095,225.524 989.664,226.879 990.232,228.362 990.8,225.574 991.369,227.007 991.937,227.245 992.505,225.582 993.074,224.948 993.642,224.28 994.21,225.819 994.779,227.178 995.347,228.647 995.915,227.71 996.484,230.167 997.052,230.291 997.62,229.113 998.189,230.035 998.757,229.177 999.325,227.376 999.894,228.491 1000.46,229.61 1001.03,229.756 1001.6,228.947 1002.17,227.991 1002.74,228.165 1003.3,229.354 1003.87,230.56 1004.44,231.782 1005.01,232.688 1005.58,232.393 1006.15,229.044 1006.71,230.43 1007.28,228.445 1007.85,229.451 1008.42,228.516 1008.99,227.879 1009.56,228.278 1010.12,227.626 1010.69,226.923 1011.26,228.324 1011.83,228.705 1012.4,231.969 1012.97,229.98 1013.53,230.089 1014.1,230.275 1014.67,230.266 1015.24,230.478 1015.81,230.662 1016.38,230.828 1016.94,227.909 1017.51,229.163 1018.08,229.308 1018.65,228.286 1019.22,229.598 1019.79,229.966 1020.35,227.987 1020.92,228.233 1021.49,227.451 1022.06,226.983 1022.63,228.269 1023.2,226.63 1023.76,226.105 1024.33,225.565 1024.9,225.139 1025.47,228.641 1026.04,228.193 1026.61,226.403 1027.17,226.861 1027.74,227.055 1028.31,226.426 1028.88,228.862 1029.45,228.056 1030.02,228.547 1030.58,226.784 1031.15,227.352 1031.72,228.722 1032.29,229.204 1032.86,231.538 1033.43,230.813 1033.99,233.172 1034.56,233.098 1035.13,235.166 1035.7,233.795 1036.27,231.73 1036.84,230.717 1037.4,231.896 1037.97,231.827 1038.54,231.907 1039.11,228.794 1039.68,230.176 1040.25,229.45 1040.81,228.781 1041.38,228.156 1041.95,228.42 1042.52,228.836 1043.09,230.111 1043.66,232.254 1044.22,232.454 1044.79,231.316 1045.36,232.446 1045.93,231.323 1046.5,231.524 1047.07,234.772 1047.63,234.85 1048.2,234.677 1048.77,234.393 1049.34,232.097 1049.91,234.037 1050.48,234.921 1051.05,234.783 1051.61,235.722 1052.18,232.363 1052.75,231.303 1053.32,232.44 1053.89,233.548 1054.46,233.618 1055.02,233.462 1055.59,235.437 1056.16,235.326 1056.73,234.976 1057.3,233.761 1057.87,233.687 1058.43,235.707 1059,235.482 1059.57,236.049 1060.14,236.837 1060.71,237.413 1061.28,237.858 1061.84,238.246 1062.41,236.776 1062.98,235.275 1063.55,236.105 1064.12,235.753 1064.69,236.384 1065.25,236.015 1065.82,232.617 1066.39,233.594 1066.96,236.508 1067.53,235.048 1068.1,234.595 1068.66,234.126 1069.23,235.979 1069.8,237.695 1070.37,236.743 1070.94,237.311 1071.51,235.809 1072.07,236.365 1072.64,236.977 1073.21,236.27 1073.78,236.575 1074.35,236.188 1074.92,233.667 1075.48,232.383 1076.05,231.098 1076.62,231.911 1077.19,231.617 1077.76,230.377 1078.33,230.387 1078.89,231.073 1079.46,230.902 1080.03,230.747 1080.6,231.715 1081.17,230.525 1081.74,228.488 1082.3,227.352 1082.87,228.48 1083.44,228.735 1084.01,228.744 1084.58,226.702 1085.15,225.889 1085.71,226.135 1086.28,226.508 1086.85,225.649 1087.42,225.75 1087.99,225.086 1088.56,224.145 1089.12,225.611 1089.69,229.078 1090.26,226.106 1090.83,227.43 1091.4,227.716 1091.97,226.96 1092.53,225.29 1093.1,224.531 1093.67,223.816 1094.24,225.229 1094.81,225.609 1095.38,225.842 1095.94,228.151 1096.51,226.133 1097.08,226.422 1097.65,225.661 1098.22,229.154 1098.79,228.095 1099.35,230.421 1099.92,227.252 1100.49,229.758 1101.06,226.829 1101.63,225.942 1102.2,225.426 1102.76,224.934 1103.33,224.676 1103.9,226.111 1104.47,226.362 1105.04,229.944 1105.61,229.954 1106.17,230.284 1106.74,231.622 1107.31,231.333 1107.88,233.473 1108.45,234.322 1109.02,235.283 1109.58,236.07 1110.15,234.844 1110.72,233.349 1111.29,233.989 1111.86,231.696 1112.43,229.736 1112.99,228.696 1113.56,228.876 1114.13,227.767 1114.7,227.852 1115.27,229.198 1115.84,233.539 1116.4,234.416 1116.97,235.166 1117.54,233.865 1118.11,232.673 1118.68,232.59 1119.25,231.459 1119.81,230.045 1120.38,227.902 1120.95,228.154 1121.52,231.579 1122.09,231.781 1122.66,229.645 1123.23,228.785 1123.79,228.046 1124.36,227.194 1124.93,229.579 1125.5,230.753 1126.07,227.622 1126.64,228.84 1127.2,230.177 1127.77,231.065 1128.34,235.127 1128.91,234.954 1129.48,235.692 1130.05,232.325 1130.61,231.378 1131.18,229.378 1131.75,229.384 1132.32,229.589 1132.89,230.652 1133.46,232.805 1134.02,232.705 1134.59,232.794 1135.16,231.625 1135.73,232.786 1136.3,232.755 1136.87,230.67 1137.43,231.871 1138,230.725 1138.57,229.456 1139.14,225.442 1139.71,225.704 1140.28,227.172 1140.84,226.286 1141.41,225.622 1141.98,223.963 1142.55,224.66 1143.12,227.178 1143.69,228.276 1144.25,230.296 1144.82,230.362 1145.39,230.518 1145.96,229.583 1146.53,229.746 1147.1,229.723 1147.66,230.472 1148.23,231.525 1148.8,231.549 1149.37,229.538 1149.94,227.739 1150.51,227.998 1151.07,224.431 1151.64,227.015 1152.21,227.537 1152.78,232.752 1153.35,233.616 1153.92,233.508 1154.48,233.179 1155.05,235.075 1155.62,231.925 1156.19,236.238 1156.76,237.065 1157.33,235.42 1157.89,236.074 1158.46,236.646 1159.03,236.187 1159.6,234.922 1160.17,233.701 1160.74,233.68 1161.3,232.355 1161.87,234.093 1162.44,235.814 1163.01,235.357 1163.58,236.131 1164.15,235.757 1164.71,235.407 1165.28,237.083 1165.85,235.489 1166.42,234.9 1166.99,235.745 1167.56,235.256 1168.12,233.801 1168.69,233.552 1169.26,233.299 1169.83,234.047 1170.4,235.746 1170.97,235.049 1171.53,230.611 1172.1,233.489 1172.67,233.283 1173.24,233.101 1173.81,230.636 1174.38,233.412 1174.94,235.367 1175.51,235.213 1176.08,232.825 1176.65,232.704 1177.22,233.375 1177.79,232.999 1178.35,233.673 1178.92,232.178 1179.49,232.021 1180.06,234.97 1180.63,236.448 1181.2,236.778 1181.76,237.243 1182.33,236.573 1182.9,235.05 1183.47,231.547 1184.04,230.197 1184.61,229.161 1185.17,228.039 1185.74,227.984 1186.31,227.764 1186.88,227.791 1187.45,227.894 1188.02,225.897 1188.58,226.074 1189.15,226.221 1189.72,224.462 1190.29,225.937 1190.86,224.076 1191.43,224.356 1192,224.444 1192.56,223.624 1193.13,224.011 1193.7,223.588 1194.27,222.875 1194.84,222.304 1195.41,223.904 1195.97,224.442 1196.54,226.86 1197.11,225.976 1197.68,226.027 1198.25,226.467 1198.82,225.791 1199.38,224.078 1199.95,224.485 1200.52,224.944 1201.09,226.393 1201.66,224.588 1202.23,226.127 1202.79,226.538 1203.36,224.791 1203.93,227.332 1204.5,230.635 1205.07,233.953 1205.64,233.785 1206.2,232.55 1206.77,232.624 1207.34,235.651 1207.91,236.387 1208.48,234.968 1209.05,232.567 1209.61,234.392 1210.18,234.28 1210.75,234.082 1211.32,233.843 1211.89,234.741 1212.46,233.573 1213.02,233.273 1213.59,234.103 1214.16,232.74 1214.73,231.627 1215.3,231.506 1215.87,231.522 1216.43,233.485 1217,232.376 1217.57,234.438 1218.14,233.923 1218.71,233.023 1219.28,229.91 1219.84,230.87 1220.41,230.503 1220.98,230.339 1221.55,229.125 1222.12,232.358 1222.69,232.125 1223.25,232.003 1223.82,229.85 1224.39,230.848 1224.96,230.783 1225.53,231.724 1226.1,232.537 1226.66,232.492 1227.23,232.618 1227.8,232.534 1228.37,232.199 1228.94,233.382 1229.51,232.957 1230.07,231.854 1230.64,231.645 1231.21,235.617 1231.78,234.114 1232.35,235.036 1232.92,233.586 1233.48,231.233 1234.05,232.305 1234.62,232.232 1235.19,233.226 1235.76,231.8 1236.33,233.878 1236.89,231.513 1237.46,233.458 1238.03,233.148 1238.6,232.838 1239.17,232.534 1239.74,229.439 1240.3,231.657 1240.87,230.537 1241.44,230.618 1242.01,229.747 1242.58,227.579 1243.15,225.601 1243.71,227.203 1244.28,226.246 1244.85,225.395 1245.42,224.821 1245.99,224.274 1246.56,220.529 1247.12,223.192 1247.69,225.99 1248.26,227.291 1248.83,228.586 1249.4,228.701 1249.97,229.798 1250.53,228.634 1251.1,227.718 1251.67,226.999 1252.24,228.472 1252.81,228.43 1253.38,228.833 1253.94,227.979 1254.51,230.362 1255.08,230.37 1255.65,231.495 1256.22,232.532 1256.79,233.225 1257.35,234.093 1257.92,233.784 1258.49,235.316 1259.06,234.991 1259.63,233.692 1260.2,233.525 1260.76,233.157 1261.33,231.971 1261.9,230.88 1262.47,232.605 1263.04,233.551 1263.61,233.164 1264.18,231.667 1264.74,233.403 1265.31,232.909 1265.88,232.897 1266.45,232.68 1267.02,232.572 1267.59,231.811 1268.15,231.905 1268.72,229.701 1269.29,229.8 1269.86,230.84 1270.43,232.789 1271,231.475 1271.56,230.245 1272.13,228.08 1272.7,229.27 1273.27,231.342 1273.84,233.271 1274.41,232.99 1274.97,230.491 1275.54,231.372 1276.11,228.172 1276.68,228.258 1277.25,228.462 1277.82,229.621 1278.38,229.749 1278.95,229.639 1279.52,226.825 1280.09,229.094 1280.66,228.262 1281.23,227.495 1281.79,228.817 1282.36,230.9 1282.93,231.885 1283.5,231.742 1284.07,233.79 1284.64,234.69 1285.2,234.2 1285.77,234.733 1286.34,233.284 1286.91,232.813 1287.48,232.624 1288.05,232.33 1288.61,231.741 1289.18,231.414 1289.75,231.064 1290.32,228.901 1290.89,230.077 1291.46,227.886 1292.02,225.865 1292.59,229.183 1293.16,229.411 1293.73,225.163 1294.3,225.303 1294.87,226.485 1295.43,227.599 1296,227.816 1296.57,227.001 1297.14,227.111 1297.71,227.31 1298.28,226.369 1298.84,227.747 1299.41,226.874 1299.98,225.05 1300.55,222.456 1301.12,222.963 1301.69,226.558 1302.25,228.84 1302.82,227.908 1303.39,228.1 1303.96,228.012 1304.53,229.014 1305.1,229.011 1305.66,229.008 1306.23,229.123 1306.8,231.208 1307.37,229.337 1307.94,228.256 1308.51,228.63 1309.07,227.87 1309.64,229.077 1310.21,230.162 1310.78,229.384 1311.35,229.638 1311.92,229.715 1312.48,228.935 1313.05,230.186 1313.62,229.12 1314.19,230.335 1314.76,231.468 1315.33,230.446 1315.89,230.521 1316.46,231.682 1317.03,229.421 1317.6,225.473 1318.17,224.878 1318.74,224.404 1319.3,224.911 1319.87,225.462 1320.44,224.79 1321.01,224.459 1321.58,224.087 1322.15,224.756 1322.71,226.606 1323.28,227.961 1323.85,227.248 1324.42,228.85 1324.99,227.184 1325.56,229.555 1326.12,227.895 1326.69,226.028 1327.26,229.429 1327.83,228.851 1328.4,228.156 1328.97,227.544 1329.53,225.915 1330.1,225.472 1330.67,225.013 1331.24,226.439 1331.81,230.075 1332.38,231.388 1332.94,232.562 1333.51,232.671 1334.08,231.673 1334.65,231.873 1335.22,233.438 1335.79,230.288 1336.36,229.557 1336.92,230.973 1337.49,231.134 1338.06,231.558 1338.63,230.681 1339.2,230.862 1339.77,232.033 1340.33,229.959 1340.9,231.217 1341.47,232.285 1342.04,234.417 1342.61,234.509 1343.18,236.374 1343.74,235.809 1344.31,234.728 1344.88,235.515 1345.45,234.342 1346.02,234.006 1346.59,232.934 1347.15,233.118 1347.72,235.945 1348.29,234.543 1348.86,234.179 1349.43,234.167 1350,235.233 1350.56,233.901 1351.13,233.681 1351.7,233.632 1352.27,235.627 1352.84,236.447 1353.41,236.105 1353.97,233.498 1354.54,236.097 1355.11,234.895 1355.68,236.762 1356.25,238.497 1356.82,238.907 1357.38,238.465 1357.95,237.901 1358.52,239.434 1359.09,238.583 1359.66,235.999 1360.23,235.347 1360.79,233.934 1361.36,234.763 1361.93,234.409 1362.5,233.287 1363.07,235.128 1363.64,233.558 1364.2,233.346 1364.77,232.046 1365.34,232.691 1365.91,231.427 1366.48,233.364 1367.05,233.111 1367.61,234.834 1368.18,235.576 1368.75,235.115 1369.32,233.57 1369.89,233.207 1370.46,229.733 1371.02,228.81 1371.59,226.853 1372.16,226.034 1372.73,226.065 1373.3,226.031 1373.87,227.414 1374.43,227.782 1375,227.019 1375.57,227.242 1376.14,227.322 1376.71,230.718 1377.28,229.863 1377.84,227.789 1378.41,228.106 1378.98,226.356 1379.55,225.552 1380.12,227.071 1380.69,228.435 1381.25,226.799 1381.82,225.098 1382.39,225.546 1382.96,225.054 1383.53,229.578 1384.1,229.544 1384.66,228.53 1385.23,228.458 1385.8,230.65 1386.37,231.627 1386.94,231.58 1387.51,229.577 1388.07,230.46 1388.64,228.585 1389.21,229.893 1389.78,228.902 1390.35,229.068 1390.92,230.232 1391.48,230.132 1392.05,232.452 1392.62,231.634 1393.19,232.476 1393.76,231.5 1394.33,231.484 1394.89,230.541 1395.46,229.446 1396.03,229.711 1396.6,231.828 1397.17,231.777 1397.74,230.785 1398.3,228.605 1398.87,228.118 1399.44,228.512 1400.01,229.856 1400.58,229.886 1401.15,231.857 1401.71,230.759 1402.28,232.877 1402.85,232.703 1403.42,233.568 1403.99,235.504 1404.56,234.101 1405.13,232.786 1405.69,233.453 1406.26,234.289 1406.83,236.199 1407.4,235.998 1407.97,234.801 1408.54,233.334 1409.1,233.209 1409.67,233.939 1410.24,232.79 1410.81,232.815 1411.38,231.653 1411.95,231.554 1412.51,230.608 1413.08,230.734 1413.65,232.62 1414.22,232.452 1414.79,232.315 1415.36,234.349 1415.92,235.332 1416.49,234.111 1417.06,233.797 1417.63,232.236 1418.2,233.102 1418.77,231.744 1419.33,232.478 1419.9,233.239 1420.47,235.106 1421.04,232.62 1421.61,233.336 1422.18,233.117 1422.74,231.435 1423.31,231.22 1423.88,230.865 1424.45,230.824 1425.02,230.797 1425.59,230.862 1426.15,229.821 1426.72,228.895 1427.29,230.831 1427.86,230.485 1428.43,230.44 1429,230.431 1429.56,228.363 1430.13,226.229 1430.7,227.536 1431.27,227.668 1431.84,225.712 1432.41,226.144 1432.97,226.426 1433.54,224.391 1434.11,223.721 1434.68,222.084 1435.25,223.348 1435.82,226.992 1436.38,226.049 1436.95,226.311 1437.52,224.624 1438.09,223.966 1438.66,226.613 1439.23,226.132 1439.79,226.327 1440.36,226.756 1440.93,227.984 1441.5,226.179 1442.07,226.569 1442.64,226.702 1443.2,226.979 1443.77,228.143 1444.34,229.647 1444.91,233.859 1445.48,234.793 1446.05,232.42 1446.61,232.315 1447.18,231.169 1447.75,229.15 1448.32,230.295 1448.89,230.046 1449.46,230.751 1450.02,232.713 1450.59,229.637 1451.16,230.633 1451.73,229.423 1452.3,227.308 1452.87,227.455 1453.43,227.759 1454,227.944 1454.57,225.098 1455.14,225.26 1455.71,221.428 1456.28,222.048 1456.84,220.916 1457.41,220.618 1457.98,222.407 1458.55,224.369 1459.12,224.718 1459.69,227.202 1460.25,226.534 1460.82,227.046 1461.39,229.613 1461.96,229.547 1462.53,227.67 1463.1,229.179 1463.66,230.572 1464.23,231.696 1464.8,229.55 1465.37,229.669 1465.94,228.952 1466.51,229.245 1467.07,231.262 1467.64,231.233 1468.21,231.337 1468.78,230.445 1469.35,232.641 1469.92,233.728 1470.48,234.626 1471.05,232.345 1471.62,234.527 1472.19,233.59 1472.76,233.353 1473.33,233.336 1473.89,232.576 1474.46,234.837 1475.03,236.778 1475.6,236.422 1476.17,235.166 1476.74,233.818 1477.31,233.517 1477.87,233.189 1478.44,232.236 1479.01,234.936 1479.58,234.536 1480.15,235.303 1480.72,236.1 1481.28,235.815 1481.85,233.401 1482.42,232.429 1482.99,236.469 1483.56,234.957 1484.13,235.854 1484.69,235.23 1485.26,232.807 1485.83,232.854 1486.4,231.679 1486.97,233.535 1487.54,234.526 1488.1,232.391 1488.67,232.213 1489.24,235.284 1489.81,229.671 1490.38,229.865 1490.95,228.707 1491.51,227.905 1492.08,229.96 1492.65,231.039 1493.22,231.981 1493.79,232.934 1494.36,230.738 1494.92,229.589 1495.49,230.688 1496.06,229.657 1496.63,230.574 1497.2,231.556 1497.77,230.48 1498.33,231.582 1498.9,231.567 1499.47,230.596 1500.04,231.501 1500.61,233.48 1501.18,235.283 1501.74,234.044 1502.31,233.762 1502.88,233.578 1503.45,234.543 1504.02,235.144 1504.59,235.951 1505.15,233.468 1505.72,233.259 1506.29,233.769 1506.86,235.457 1507.43,234.991 1508,234.692 1508.56,233.138 1509.13,231.597 1509.7,230.273 1510.27,232.989 1510.84,231.651 1511.41,231.421 1511.97,232.287 1512.54,231.986 1513.11,231.679 1513.68,233.681 1514.25,234.17 1514.82,234.992 1515.38,235.661 1515.95,236.184 1516.52,237.704 1517.09,236.989 1517.66,236.382 1518.23,233.853 1518.79,234.348 1519.36,233.911 1519.93,233.601 1520.5,232.399 1521.07,230.136 1521.64,228.829 1522.2,228.918 1522.77,228.873 1523.34,227.825 1523.91,228.774 1524.48,228.628 1525.05,227.718 1525.61,227.805 1526.18,228.876 1526.75,226.771 1527.32,226.981 1527.89,226.041 1528.46,226.361 1529.02,228.631 1529.59,229.477 1530.16,229.574 1530.73,228.601 1531.3,230.62 1531.87,232.47 1532.43,230.038 1533,227.908 1533.57,227.919 1534.14,227.14 1534.71,229.214 1535.28,230.325 1535.84,230.265 1536.41,231.348 1536.98,232.227 1537.55,232.975 1538.12,232.616 1538.69,231.364 1539.25,230.052 1539.82,231.068 1540.39,231.165 1540.96,229.041 1541.53,229.061 1542.1,230.178 1542.66,230.377 1543.23,231.427 1543.8,230.135 1544.37,230.011 1544.94,228.032 1545.51,228.113 1546.08,228.243 1546.64,229.405 1547.21,231.498 1547.78,230.16 1548.35,230.094 1548.92,231.025 1549.49,230.957 1550.05,230.666 1550.62,231.489 1551.19,232.523 1551.76,231.3 1552.33,229.149 1552.9,229.043 1553.46,228.909 1554.03,228.842 1554.6,229.729 1555.17,227.675 1555.74,227.827 1556.31,227.932 1556.87,229.035 1557.44,226.079 1558.01,226.318 1558.58,227.508 1559.15,227.39 1559.72,227.573 1560.28,228.868 1560.85,228.945 1561.42,228.084 1561.99,228.235 1562.56,228.367 1563.13,228.676 1563.69,228.831 1564.26,228.682 1564.83,226.659 1565.4,226.738 1565.97,222.784 1566.54,225.444 1567.1,226.633 1567.67,224.186 1568.24,222.543 1568.81,222.297 1569.38,222.967 1569.95,224.836 1570.51,224.539 1571.08,225.132 1571.65,226.462 1572.22,227.076 1572.79,225.337 1573.36,227.706 1573.92,226.08 1574.49,225.413 1575.06,223.955 1575.63,225.599 1576.2,227.118 1576.77,227.161 1577.33,229.612 1577.9,229.508 1578.47,230.816 1579.04,232.069 1579.61,232.272 1580.18,235.249 1580.74,234.167 1581.31,229.897 1581.88,229.132 1582.45,227.155 1583.02,228.708 1583.59,227.973 1584.15,230.185 1584.72,229.27 1585.29,229.438 1585.86,226.35 1586.43,226.873 1587,230.315 1587.56,230.207 1588.13,230.204 1588.7,232.338 1589.27,233.447 1589.84,234.339 1590.41,233.093 1590.97,234.141 1591.54,232.796 1592.11,232.71 1592.68,233.584 1593.25,231.341 1593.82,232.478 1594.38,233.409 1594.95,231.324 1595.52,232.497 1596.09,231.331 1596.66,233.335 1597.23,233.453 1597.79,232.701 1598.36,232.635 1598.93,232.433 1599.5,233.302 1600.07,232.286 1600.64,232.12 1601.2,235.072 1601.77,233.856 1602.34,233.849 1602.91,233.814 1603.48,233.711 1604.05,232.716 1604.61,231.704 1605.18,232.712 1605.75,233.507 1606.32,230.227 1606.89,229.14 1607.46,229.129 1608.02,228.07 1608.59,230.555 1609.16,230.58 1609.73,230.532 1610.3,230.566 1610.87,231.708 1611.43,233.794 1612,233.677 1612.57,236.666 1613.14,235.32 1613.71,235.339 1614.28,233.854 1614.84,233.725 1615.41,233.72 1615.98,234.666 1616.55,235.047 1617.12,234.701 1617.69,236.233 1618.26,236.991 1618.82,237.565 1619.39,238.186 1619.96,237.725 1620.53,236.082 1621.1,234.727 1621.67,235.31 1622.23,234.834 1622.8,235.698 1623.37,233.221 1623.94,234.09 1624.51,232.604 1625.08,230.622 1625.64,231.69 1626.21,231.537 1626.78,230.273 1627.35,231.128 1627.92,229.12 1628.49,228.134 1629.05,228.222 1629.62,228.283 1630.19,228.403 1630.76,227.482 1631.33,228.704 1631.9,227.879 1632.46,226.795 1633.03,229.299 1633.6,225.453 1634.17,223.724 1634.74,225.304 1635.31,223.519 1635.87,225.001 1636.44,226.462 1637.01,226.773 1637.58,227.15 1638.15,226.608 1638.72,225.862 1639.28,226.396 1639.85,230.819 1640.42,229.85 1640.99,229.918 1641.56,230.022 1642.13,227.015 1642.69,230.385 1643.26,229.431 1643.83,230.583 1644.4,230.649 1644.97,232.886 1645.54,233.585 1646.1,233.175 1646.67,231.728 1647.24,231.594 1647.81,232.413 1648.38,233.297 1648.95,233.125 1649.51,231.92 1650.08,230.647 1650.65,229.582 1651.22,230.497 1651.79,230.437 1652.36,231.564 1652.92,231.424 1653.49,230.479 1654.06,231.525 1654.63,232.283 1655.2,232.283 1655.77,231.168 1656.33,231.064 1656.9,231.146 1657.47,228.856 1658.04,230.791 1658.61,229.775 1659.18,227.652 1659.74,228.938 1660.31,230.149 1660.88,233.118 1661.45,233.938 1662.02,231.542 1662.59,232.416 1663.15,232.379 1663.72,231.144 1664.29,231.847 1664.86,231.609 1665.43,230.498 1666,231.395 1666.56,230.342 1667.13,229.11 1667.7,229.239 1668.27,228.364 1668.84,225.71 1669.41,225.875 1669.97,228.242 1670.54,231.359 1671.11,232.273 1671.68,231.004 1672.25,229.61 1672.82,228.424 1673.38,227.451 1673.95,226.69 1674.52,222.731 1675.09,224.395 1675.66,225.834 1676.23,228.364 1676.79,229.664 1677.36,229.791 1677.93,229.772 1678.5,229.96 1679.07,228.011 1679.64,227.311 1680.2,226.567 1680.77,228.962 1681.34,228.929 1681.91,231.271 1682.48,230.427 1683.05,230.431 1683.61,231.765 1684.18,230.74 1684.75,227.564 1685.32,228.215 1685.89,229.417 1686.46,229.376 1687.02,229.625 1687.59,227.7 1688.16,228.128 1688.73,228.456 1689.3,228.814 1689.87,226.877 1690.44,225.091 1691,225.552 1691.57,226.109 1692.14,224.702 1692.71,225.296 1693.28,224.579 1693.85,225.867 1694.41,225.244 1694.98,226.696 1695.55,229.163 1696.12,229.689 1696.69,231.062 1697.26,232.404 1697.82,233.267 1698.39,233.168 1698.96,233.073 1699.53,235.084 1700.1,232.881 1700.67,232.8 1701.23,232.724 1701.8,232.63 1702.37,232.659 1702.94,232.74 1703.51,232.742 1704.08,232.658 1704.64,230.722 1705.21,229.775 1705.78,230.037 1706.35,230.216 1706.92,227.315 1707.49,228.778 1708.05,229.274 1708.62,229.496 1709.19,231.753 1709.76,232.682 1710.33,231.644 1710.9,229.629 1711.46,229.71 1712.03,230.84 1712.6,231.982 1713.17,232.031 1713.74,234.929 1714.31,232.524 1714.87,234.325 1715.44,235.081 1716.01,235.989 1716.58,235.609 1717.15,235.278 1717.72,234.977 1718.28,237.878 1718.85,237.635 1719.42,237.167 1719.99,237.733 1720.56,236.171 1721.13,230.779 1721.69,228.616 1722.26,227.959 1722.83,228.201 1723.4,228.277 1723.97,231.312 1724.54,232.332 1725.1,233.386 1725.67,232.042 1726.24,234.128 1726.81,235.948 1727.38,235.513 1727.95,236.095 1728.51,235.694 1729.08,234.347 1729.65,232.922 1730.22,232.661 1730.79,234.778 1731.36,235.502 1731.92,235.186 1732.49,234.833 1733.06,233.547 1733.63,231.305 1734.2,232.229 1734.77,232.073 1735.33,233.055 1735.9,232.809 1736.47,233.713 1737.04,234.49 1737.61,233.077 1738.18,232.965 1738.74,232.775 1739.31,232.732 1739.88,231.503 1740.45,230.422 1741.02,231.347 1741.59,231.043 1742.15,229.907 1742.72,228.983 1743.29,229.16 1743.86,231.197 1744.43,231.168 1745,230.936 1745.56,229.892 1746.13,229.791 1746.7,228.581 1747.27,228.66 1747.84,230.783 1748.41,231.704 1748.97,235.434 1749.54,234.113 1750.11,234.941 1750.68,235.742 1751.25,236.301 1751.82,235.656 1752.38,234.06 1752.95,235.875 1753.52,235.588 1754.09,235.129 1754.66,235.653 1755.23,233.14 1755.79,235.828 1756.36,235.326 1756.93,234.732 1757.5,234.344 1758.07,233.87 1758.64,233.461 1759.21,233.025 1759.77,233.802 1760.34,233.28 1760.91,232.758 1761.48,234.484 1762.05,235.03 1762.62,233.439 1763.18,234.184 1763.75,234.728 1764.32,235.278 1764.89,234.668 1765.46,232.223 1766.03,229.967 1766.59,228.634 1767.16,229.679 1767.73,229.585 1768.3,229.506 1768.87,229.057 1769.44,230.141 1770,229.813 1770.57,229.663 1771.14,230.576 1771.71,230.519 1772.28,229.448 1772.85,231.273 1773.41,230.966 1773.98,231.59 1774.55,234.38 1775.12,232.945 1775.69,231.557 1776.26,232.297 1776.82,233.2 1777.39,233.787 1777.96,235.481 1778.53,234.849 1779.1,231.292 1779.67,227.987 1780.23,226.771 1780.8,226.87 1781.37,226.842 1781.94,225.981 1782.51,224.877 1783.08,223.028 1783.64,223.292 1784.21,221.706 1784.78,222.022 1785.35,220.168 1785.92,222.781 1786.49,224.026 1787.05,224.439 1787.62,225.814 1788.19,224.933 1788.76,222.292 1789.33,222.822 1789.9,223.389 1790.46,223.9 1791.03,224.448 1791.6,226.858 1792.17,229.178 1792.74,229.138 1793.31,228.099 1793.87,226.255 1794.44,227.574 1795.01,227.764 1795.58,226.938 1796.15,227.207 1796.72,227.44 1797.28,223.44 1797.85,226.126 1798.42,226.414 1798.99,225.775 1799.56,227.073 1800.13,226.487 1800.69,226.794 1801.26,228.347 1801.83,228.496 1802.4,229.32 1802.97,229.495 1803.54,230.458 1804.1,229.492 1804.67,229.774 1805.24,233.012 1805.81,233.778 1806.38,233.442 1806.95,234.213 1807.51,233.89 1808.08,232.412 1808.65,231.513 1809.22,232.59 1809.79,233.615 1810.36,233.342 1810.92,234.229 1811.49,234.055 1812.06,232.979 1812.63,227.585 1813.2,225.951 1813.77,225.054 1814.33,225.447 1814.9,224.875 1815.47,224.238 1816.04,225.648 1816.61,226.086 1817.18,226.788 1817.74,229.138 1818.31,231.316 1818.88,230.454 1819.45,231.368 1820.02,230.307 1820.59,230.239 1821.15,230.232 1821.72,229.365 1822.29,229.446 1822.86,229.863 1823.43,230.792 1824,230.828 1824.56,229.648 1825.13,228.332 1825.7,227.549 1826.27,229.737 1826.84,227.648 1827.41,227.884 1827.97,229.23 1828.54,229.293 1829.11,227.407 1829.68,229.847 1830.25,232.156 1830.82,232.975 1831.39,235.004 1831.95,234.687 1832.52,233.437 1833.09,233.283 1833.66,231.892 1834.23,233.954 1834.8,232.696 1835.36,230.837 1835.93,227.642 1836.5,227.119 1837.07,226.293 1837.64,224.526 1838.21,228.014 1838.77,227.316 1839.34,228.488 1839.91,229.751 1840.48,229.825 1841.05,228.921 1841.62,228.098 1842.18,229.432 1842.75,227.422 1843.32,226.804 1843.89,230.144 1844.46,233.366 1845.03,233.114 1845.59,232.893 1846.16,232.782 1846.73,231.569 1847.3,234.643 1847.87,236.48 1848.44,235.2 1849,233.695 1849.57,227.581 1850.14,230.873 1850.71,230.972 1851.28,230.882 1851.85,228.053 1852.41,226.073 1852.98,226.268 1853.55,224.557 1854.12,226.019 1854.69,227.618 1855.26,229.024 1855.82,232.306 1856.39,232.174 1856.96,233.07 1857.53,233.174 1858.1,233.095 1858.67,230.825 1859.23,228.626 1859.8,230.73 1860.37,231.832 1860.94,231.944 1861.51,231.815 1862.08,230.625 1862.64,230.815 1863.21,229.792 1863.78,229.811 1864.35,227.955 1864.92,230.288 1865.49,230.278 1866.05,229.278 1866.62,228.335 1867.19,228.644 1867.76,229.814 1868.33,230.843 1868.9,230.886 1869.46,232.165 1870.03,233.087 1870.6,234.004 1871.17,232.635 1871.74,231.622 1872.31,231.38 1872.87,230.467 1873.44,230.46 1874.01,231.648 1874.58,231.409 1875.15,230.293 1875.72,230.115 1876.28,229.253 1876.85,230.357 1877.42,230.42 1877.99,229.384 1878.56,228.303 1879.13,230.572 1879.69,229.662 1880.26,229.621 1880.83,230.859 1881.4,230.812 1881.97,231.855 1882.54,231.705 1883.1,229.631 1883.67,229.901 1884.24,228.983 1884.81,227.993 1885.38,228.282 1885.95,228.694 1886.51,227.894 1887.08,228.439 1887.65,231.656 1888.22,231.513 1888.79,232.512 1889.36,232.566 1889.92,233.485 1890.49,233.244 1891.06,232.991 1891.63,231.799 1892.2,231.68 1892.77,233.824 1893.33,233.557 1893.9,232.31 1894.47,232.422 1895.04,235.399 1895.61,234.009 1896.18,232.928 1896.74,233.218 1897.31,230.884 1897.88,231.922 1898.45,231.832 1899.02,230.981 1899.59,232.94 1900.16,235.774 1900.72,234.479 1901.29,232.938 1901.86,233.838 1902.43,236.766 1903,236.571 1903.57,238.258 1904.13,237.597 1904.7,234.89 1905.27,234.64 1905.84,233.393 1906.41,231.27 1906.98,229.127 1907.54,231.242 1908.11,231.132 1908.68,228.997 1909.25,228.042 1909.82,229.148 1910.39,229.257 1910.95,228.072 1911.52,228.409 1912.09,229.696 1912.66,227.636 1913.23,227.805 1913.8,228.84 1914.36,229.058 1914.93,230.2 1915.5,235.369 1916.07,234.034 1916.64,230.886 1917.21,232.834 1917.77,231.687 1918.34,233.364 1918.91,232.154 1919.48,231.938 1920.05,231.812 1920.62,230.748 1921.18,226.524 1921.75,227.552 1922.32,227.884 1922.89,229.108 1923.46,228.012 1924.03,229.357 1924.59,228.637 1925.16,230.754 1925.73,231.59 1926.3,230.553 1926.87,231.832 1927.44,227.702 1928,224.755 1928.57,226.087 1929.14,225.337 1929.71,224.896 1930.28,227.345 1930.85,226.344 1931.41,225.682 1931.98,225.949 1932.55,226.443 1933.12,225.438 1933.69,224.561 1934.26,224.884 1934.82,228.389 1935.39,228.99 1935.96,226.056 1936.53,226.558 1937.1,225.646 1937.67,225.883 1938.23,225.217 1938.8,228.744 1939.37,226.881 1939.94,229.286 1940.51,229.432 1941.08,230.619 1941.64,231.78 1942.21,232.861 1942.78,231.752 1943.35,230.925 1943.92,231.925 1944.49,232.764 1945.05,229.631 1945.62,231.971 1946.19,231.025 1946.76,231.891 1947.33,231.724 1947.9,231.697 1948.46,230.854 1949.03,229.778 1949.6,229.624 1950.17,230.991 1950.74,230.044 1951.31,229.251 1951.87,228.557 1952.44,230.003 1953.01,230.505 1953.58,229.321 1954.15,228.806 1954.72,227.084 1955.28,228.396 1955.85,226.509 1956.42,226.028 1956.99,225.557 1957.56,226.02 1958.13,225.596 1958.69,226.008 1959.26,228.499 1959.83,230.976 1960.4,233.226 1960.97,233.242 1961.54,234.132 1962.1,234.103 1962.67,236.117 1963.24,235.823 1963.81,238.418 1964.38,236.774 1964.95,235.293 1965.51,234.8 1966.08,234.61 1966.65,233.317 1967.22,233.112 1967.79,233.008 1968.36,233.861 1968.92,232.447 1969.49,234.269 1970.06,234.948 1970.63,232.634 1971.2,232.557 1971.77,232.606 1972.34,231.404 1972.9,230.338 1973.47,230.483 1974.04,230.351 1974.61,230.451 1975.18,229.173 1975.75,229.206 1976.31,228.455 1976.88,229.53 1977.45,229.501 1978.02,227.816 1978.59,227.968 1979.16,228.241 1979.72,228.666 1980.29,228.819 1980.86,227.775 1981.43,226.033 1982,223.378 1982.57,222.985 1983.13,222.75 1983.7,223.352 1984.27,222.928 1984.84,222.615 1985.41,226.409 1985.98,224.453 1986.54,227.854 1987.11,228.065 1987.68,227.456 1988.25,228.836 1988.82,230.173 1989.39,232.344 1989.95,234.497 1990.52,234.261 1991.09,232.988 1991.66,231.791 1992.23,230.771 1992.8,230.679 1993.36,229.859 1993.93,231.005 1994.5,232.058 1995.07,233.983 1995.64,232.735 1996.21,230.659 1996.77,233.061 1997.34,232.85 1997.91,232.818 1998.48,234.729 1999.05,235.693 1999.62,235.223 2000.18,234.844 2000.75,235.536 2001.32,236.338 2001.89,237.995 2002.46,236.582 2003.03,235.221 2003.59,233.778 2004.16,233.583 2004.73,234.522 2005.3,231.149 2005.87,234.273 2006.44,235.102 2007,232.54 2007.57,233.552 2008.14,232.4 2008.71,231.229 2009.28,232.118 2009.85,232.008 2010.41,229.998 2010.98,228.151 2011.55,229.38 2012.12,229.346 2012.69,228.542 2013.26,229.576 2013.82,229.553 2014.39,231.841 2014.96,230.982 2015.53,231.013 2016.1,230.957 2016.67,230.875 2017.23,232.078 2017.8,232.027 2018.37,231.812 2018.94,231.806 2019.51,235.801 2020.08,232.333 2020.64,231.08 2021.21,228.965 2021.78,226.154 2022.35,231.645 2022.92,233.434 2023.49,232.211 2024.05,231.018 2024.62,230.853 2025.19,228.628 2025.76,228.839 2026.33,228.879 2026.9,230.996 2027.46,229.966 2028.03,232.016 2028.6,232.781 2029.17,232.541 2029.74,233.384 2030.31,234.095 2030.87,232.842 2031.44,235.84 2032.01,236.54 2032.58,238.172 2033.15,236.709 2033.72,237.28 2034.28,236.995 2034.85,238.339 2035.42,239.017 2035.99,236.428 2036.56,235.889 2037.13,235.332 2037.69,234.786 2038.26,234.419 2038.83,234.004 2039.4,233.475 2039.97,232.964 2040.54,232.363 2041.11,235.454 2041.67,234.816 2042.24,237.573 2042.81,236.054 2043.38,234.393 2043.95,233.794 2044.52,234.366 2045.08,232.827 2045.65,232.582 2046.22,233.102 2046.79,232.752 2047.36,232.407 2047.93,232.943 2048.49,233.66 2049.06,235.482 2049.63,234.965 2050.2,234.515 2050.77,232.959 2051.34,231.687 2051.9,232.346 2052.47,234.097 2053.04,233.478 2053.61,235.2 2054.18,233.744 2054.75,232.233 2055.31,229.727 2055.88,229.611 2056.45,228.533 2057.02,227.385 2057.59,227.097 2058.16,229.204 2058.72,230.183 2059.29,228.984 2059.86,228.032 2060.43,228.895 2061,229.878 2061.57,228.648 2062.13,229.831 2062.7,229.715 2063.27,228.516 2063.84,227.394 2064.41,227.407 2064.98,224.244 2065.54,227.696 2066.11,225.587 2066.68,226.92 2067.25,226.086 2067.82,227.267 2068.39,225.271 2068.95,225.537 2069.52,223.602 2070.09,222.684 2070.66,222.179 2071.23,222.711 2071.8,224.155 2072.36,224.431 2072.93,224.798 2073.5,226.078 2074.07,227.392 2074.64,225.706 2075.21,226.939 2075.77,226.3 2076.34,226.459 2076.91,226.744 2077.48,226.93 2078.05,228.375 2078.62,228.546 2079.18,229.548 2079.75,228.54 2080.32,229.794 2080.89,229.789 2081.46,232.032 2082.03,232.695 2082.59,232.475 2083.16,233.335 2083.73,236.188 2084.3,234.749 2084.87,231.359 2085.44,227.381 2086,224.655 2086.57,226.145 2087.14,223.309 2087.71,223.586 2088.28,220.662 2088.85,223.289 2089.41,222.79 2089.98,221.172 2090.55,219.895 2091.12,220.376 2091.69,221.324 2092.26,223.313 2092.82,223.792 2093.39,225.385 2093.96,227.819 2094.53,228.055 2095.1,231.481 2095.67,230.201 2096.23,228.236 2096.8,229.47 2097.37,229.778 2097.94,230.918 2098.51,233.298 2099.08,231.983 2099.64,232.826 2100.21,232.83 2100.78,233.856 2101.35,232.56 2101.92,232.386 2102.49,233.302 2103.05,233.277 2103.62,232.172 2104.19,230.966 2104.76,231.31 2105.33,230.28 2105.9,230.718 2106.46,228.583 2107.03,229.943 2107.6,231.351 2108.17,231.325 2108.74,233.434 2109.31,232.253 2109.87,229.379 2110.44,230.726 2111.01,230.802 2111.58,232.702 2112.15,230.289 2112.72,232.488 2113.29,231.411 2113.85,230.347 2114.42,231.614 2114.99,231.624 2115.56,231.462 2116.13,232.292 2116.7,232.265 2117.26,231.11 2117.83,232.113 2118.4,233.123 2118.97,233.241 2119.54,231.064 2120.11,228.142 2120.67,229.303 2121.24,229.223 2121.81,229.321 2122.38,228.758 2122.95,226.796 2123.52,227.085 2124.08,229.357 2124.65,227.466 2125.22,226.958 2125.79,227.048 2126.36,229.389 2126.93,230.667 2127.49,230.639 2128.06,230.865 2128.63,232.159 2129.2,233.443 2129.77,233.406 2130.34,232.193 2130.9,230.92 2131.47,233.129 2132.04,233.108 2132.61,236.288 2133.18,237.075 2133.75,237.812 2134.31,237.743 2134.88,238.131 2135.45,238.816 2136.02,240.425 2136.59,239.736 2137.16,240.016 2137.72,241.384 2138.29,240.393 2138.86,238.56 2139.43,237.997 2140,238.418 2140.57,237.6 2141.13,234.855 2141.7,232.595 2142.27,234.433 2142.84,236.111 2143.41,236.642 2143.98,235.116 2144.54,234.706 2145.11,233.157 2145.68,232.88 2146.25,232.807 2146.82,232.442 2147.39,231.942 2147.95,233.757 2148.52,234.349 2149.09,233.821 2149.66,233.451 2150.23,230.885 2150.8,231.788 2151.36,230.631 2151.93,227.42 2152.5,227.673 2153.07,225.787 2153.64,226.142 2154.21,227.354 2154.77,227.508 2155.34,227.665 2155.91,228.657 2156.48,227.601 2157.05,226.82 2157.62,226.897 2158.18,225.804 2158.75,225.038 2159.32,226.191 2159.89,226.243 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip280)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.025 ± 0.027\n  with uncertainty of ± 0.002485343124308578\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01473 ± (0.00223092, 0.00220951) (MC)\n  95% confidence interval: [-4.01953, -4.01057] (MC)\n  linear error propagation: -4.01489 ± 0.00222436\n  |δ_y| = |0.00149112| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014732157566965, val_l = 0.004796025352669986, val_u = 0.0041638159819124)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip310\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip310)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip311\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip310)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip312\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1158.75 2211.02,1158.75 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,888.286 2211.02,888.286 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,617.817 2211.02,617.817 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,347.348 2211.02,347.348 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1158.75 365.751,1158.75 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,888.286 365.751,888.286 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,617.817 365.751,617.817 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,347.348 365.751,347.348 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M298.909 1144.55 Q295.298 1144.55 293.469 1148.12 Q291.664 1151.66 291.664 1158.79 Q291.664 1165.9 293.469 1169.46 Q295.298 1173 298.909 1173 Q302.543 1173 304.349 1169.46 Q306.177 1165.9 306.177 1158.79 Q306.177 1151.66 304.349 1148.12 Q302.543 1144.55 298.909 1144.55 M298.909 1140.85 Q304.719 1140.85 307.775 1145.46 Q310.853 1150.04 310.853 1158.79 Q310.853 1167.52 307.775 1172.12 Q304.719 1176.71 298.909 1176.71 Q293.099 1176.71 290.02 1172.12 Q286.964 1167.52 286.964 1158.79 Q286.964 1150.04 290.02 1145.46 Q293.099 1140.85 298.909 1140.85 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M262.775 901.63 L279.094 901.63 L279.094 905.566 L257.15 905.566 L257.15 901.63 Q259.812 898.876 264.395 894.246 Q269.002 889.594 270.182 888.251 Q272.428 885.728 273.307 883.992 Q274.21 882.232 274.21 880.543 Q274.21 877.788 272.266 876.052 Q270.344 874.316 267.242 874.316 Q265.043 874.316 262.59 875.08 Q260.159 875.844 257.381 877.394 L257.381 872.672 Q260.205 871.538 262.659 870.959 Q265.113 870.381 267.15 870.381 Q272.52 870.381 275.715 873.066 Q278.909 875.751 278.909 880.242 Q278.909 882.371 278.099 884.293 Q277.312 886.191 275.205 888.783 Q274.627 889.455 271.525 892.672 Q268.423 895.867 262.775 901.63 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M298.909 874.084 Q295.298 874.084 293.469 877.649 Q291.664 881.191 291.664 888.32 Q291.664 895.427 293.469 898.992 Q295.298 902.533 298.909 902.533 Q302.543 902.533 304.349 898.992 Q306.177 895.427 306.177 888.32 Q306.177 881.191 304.349 877.649 Q302.543 874.084 298.909 874.084 M298.909 870.381 Q304.719 870.381 307.775 874.987 Q310.853 879.57 310.853 888.32 Q310.853 897.047 307.775 901.654 Q304.719 906.237 298.909 906.237 Q293.099 906.237 290.02 901.654 Q286.964 897.047 286.964 888.32 Q286.964 879.57 290.02 874.987 Q293.099 870.381 298.909 870.381 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M271.594 604.611 L259.789 623.06 L271.594 623.06 L271.594 604.611 M270.367 600.537 L276.247 600.537 L276.247 623.06 L281.177 623.06 L281.177 626.949 L276.247 626.949 L276.247 635.097 L271.594 635.097 L271.594 626.949 L255.992 626.949 L255.992 622.435 L270.367 600.537 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M298.909 603.616 Q295.298 603.616 293.469 607.181 Q291.664 610.722 291.664 617.852 Q291.664 624.958 293.469 628.523 Q295.298 632.065 298.909 632.065 Q302.543 632.065 304.349 628.523 Q306.177 624.958 306.177 617.852 Q306.177 610.722 304.349 607.181 Q302.543 603.616 298.909 603.616 M298.909 599.912 Q304.719 599.912 307.775 604.519 Q310.853 609.102 310.853 617.852 Q310.853 626.579 307.775 631.185 Q304.719 635.768 298.909 635.768 Q293.099 635.768 290.02 631.185 Q286.964 626.579 286.964 617.852 Q286.964 609.102 290.02 604.519 Q293.099 599.912 298.909 599.912 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M269.326 345.485 Q266.178 345.485 264.326 347.638 Q262.497 349.791 262.497 353.541 Q262.497 357.267 264.326 359.443 Q266.178 361.596 269.326 361.596 Q272.474 361.596 274.303 359.443 Q276.154 357.267 276.154 353.541 Q276.154 349.791 274.303 347.638 Q272.474 345.485 269.326 345.485 M278.608 330.832 L278.608 335.092 Q276.849 334.258 275.043 333.818 Q273.261 333.379 271.502 333.379 Q266.872 333.379 264.418 336.504 Q261.988 339.629 261.641 345.948 Q263.006 343.934 265.066 342.869 Q267.127 341.781 269.603 341.781 Q274.812 341.781 277.821 344.953 Q280.853 348.101 280.853 353.541 Q280.853 358.865 277.705 362.082 Q274.557 365.3 269.326 365.3 Q263.33 365.3 260.159 360.716 Q256.988 356.11 256.988 347.383 Q256.988 339.189 260.877 334.328 Q264.766 329.443 271.316 329.443 Q273.076 329.443 274.858 329.791 Q276.664 330.138 278.608 330.832 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M298.909 333.147 Q295.298 333.147 293.469 336.712 Q291.664 340.254 291.664 347.383 Q291.664 354.49 293.469 358.054 Q295.298 361.596 298.909 361.596 Q302.543 361.596 304.349 358.054 Q306.177 354.49 306.177 347.383 Q306.177 340.254 304.349 336.712 Q302.543 333.147 298.909 333.147 M298.909 329.443 Q304.719 329.443 307.775 334.05 Q310.853 338.633 310.853 347.383 Q310.853 356.11 307.775 360.716 Q304.719 365.3 298.909 365.3 Q293.099 365.3 290.02 360.716 Q286.964 356.11 286.964 347.383 Q286.964 338.633 290.02 334.05 Q293.099 329.443 298.909 329.443 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip312)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1059.11 400.199,967.567 400.786,883.573 401.372,806.621 401.958,736.241 402.545,672.001 403.131,613.498 403.718,560.358 404.304,512.235 404.891,468.802 405.477,429.756 406.063,394.815 406.65,363.712 407.236,336.197 407.823,312.038 408.409,291.012 408.995,272.914 409.582,257.549 410.168,244.732 410.755,234.292 411.341,226.064 411.927,219.895 412.514,253.503 413.1,250.079 413.687,248.334 414.273,248.145 414.86,249.396 415.446,251.976 416.032,280.538 416.619,330.772 417.205,336.53 417.792,362.391 418.378,387.893 418.964,412.551 419.551,437.067 420.137,500.736 420.724,509.828 421.31,518.503 421.896,527.553 422.483,536.967 423.069,557.494 423.656,566.924 424.242,585.902 424.829,604.305 425.415,621.925 426.001,646.934 426.588,663.824 427.174,673.707 427.761,683.284 428.347,693.177 428.933,703.604 429.52,724.796 430.106,745.381 430.693,754.642 431.279,769.004 431.865,782.783 432.452,791.135 433.038,804.031 433.625,816.382 434.211,827.958 434.798,835.391 435.384,850.637 435.97,857.769 436.557,868.189 437.143,875.972 437.73,889.704 438.316,899.368 438.902,909.409 439.489,918.683 440.075,930.818 440.662,945.595 441.248,956.986 441.835,962.213 442.421,975.481 443.007,985.467 443.594,992.638 444.18,1002.3 444.767,1011.26 445.353,1022.45 445.939,1026.29 446.526,1030 447.112,1038.21 447.699,1044.17 448.285,1050.06 448.871,1059.99 449.458,1063.45 450.044,1066.88 450.631,1076.05 451.217,1079.27 451.804,1082.51 452.39,1089.55 452.976,1094.48 453.563,1101.37 454.149,1105.9 454.736,1108.52 455.322,1111.29 455.908,1117.68 456.495,1125.57 457.081,1131.31 457.668,1135.14 458.254,1137.22 458.84,1144.13 459.427,1149.46 460.013,1151.09 460.6,1153.06 461.186,1154.9 461.773,1159.62 462.359,1164.31 462.945,1165.95 463.532,1169.01 464.118,1173.37 464.705,1174.66 465.291,1174.66 465.877,1176.2 466.464,1179.02 467.05,1178.82 467.637,1181.45 468.223,1183.91 468.809,1186.33 469.396,1188.84 469.982,1191.16 470.569,1193.4 471.155,1194.3 471.742,1197.84 472.328,1201.19 472.914,1201.78 473.501,1207.48 474.087,1207.93 474.674,1211.01 475.26,1211.38 475.846,1212.91 476.433,1213.17 477.019,1212.22 477.606,1214.11 478.192,1214.46 478.778,1217.31 479.365,1219.85 479.951,1222.51 480.538,1222.47 481.124,1222.42 481.711,1227.39 482.297,1231.01 482.883,1231.99 483.47,1231.52 484.056,1232.4 484.643,1233.39 485.229,1234.4 485.815,1235.52 486.402,1236.4 486.988,1239.47 487.575,1240.04 488.161,1245.43 488.748,1245.86 489.334,1244.72 489.92,1244.88 490.507,1245.23 491.093,1246.7 491.68,1246.97 492.266,1247.25 492.852,1246.52 493.439,1245.55 494.025,1244.56 494.612,1243.6 495.198,1243.99 495.784,1243.37 496.371,1246.3 496.957,1243.07 497.544,1243.71 498.13,1242.98 498.717,1242.19 499.303,1243.84 499.889,1241.75 500.476,1242.28 501.062,1242.62 501.649,1242.92 502.235,1245.61 502.821,1246.02 503.408,1241.58 503.994,1242.15 504.581,1241.61 505.167,1239.97 505.753,1238.41 506.34,1240.49 506.926,1240.41 507.513,1238.94 508.099,1238.53 508.686,1239.21 509.272,1242.24 509.858,1242.98 510.445,1241.28 511.031,1239.48 511.618,1239.9 512.204,1240.56 512.79,1241.36 513.377,1244.13 513.963,1242.21 514.55,1245.21 515.136,1243.32 515.722,1245.08 516.309,1243.32 516.895,1243.82 517.482,1244.16 518.068,1243.68 518.655,1243.13 519.241,1246.02 519.827,1246.37 520.414,1247.85 521,1247.06 521.587,1247.49 522.173,1245.52 522.759,1247.96 523.346,1245.84 523.932,1245.09 524.519,1246.85 525.105,1247.42 525.691,1246.43 526.278,1246.52 526.864,1246.98 527.451,1247.33 528.037,1248.5 528.624,1248.59 529.21,1246.68 529.796,1247.09 530.383,1247.39 530.969,1246.77 531.556,1246.95 532.142,1248.29 532.728,1248.66 533.315,1248.78 533.901,1249.11 534.488,1249.08 535.074,1249.19 535.661,1250.51 536.247,1250.46 536.833,1250.53 537.42,1249.57 538.006,1246.22 538.593,1245.04 539.179,1244.04 539.765,1243.03 540.352,1243.61 540.938,1240.66 541.525,1241.27 542.111,1240.61 542.697,1241.52 543.284,1240.9 543.87,1240.19 544.457,1241.76 545.043,1241.15 545.63,1240.46 546.216,1239.93 546.802,1239.25 547.389,1238.58 547.975,1236.81 548.562,1237.52 549.148,1234.78 549.734,1233.3 550.321,1231.98 550.907,1228.44 551.494,1231.72 552.08,1231.41 552.666,1232.29 553.253,1231.96 553.839,1231.69 554.426,1232.81 555.012,1231.24 555.599,1233.2 556.185,1232.95 556.771,1231.53 557.358,1232.3 557.944,1231.05 558.531,1228.69 559.117,1227.44 559.703,1228.51 560.29,1230.71 560.876,1228.61 561.463,1228.67 562.049,1228.46 562.635,1229.66 563.222,1233.01 563.808,1228.44 564.395,1230.71 564.981,1231.66 565.568,1230.28 566.154,1228.9 566.74,1229.67 567.327,1228.37 567.913,1229.19 568.5,1230.28 569.086,1230.12 569.672,1230.11 570.259,1229.97 570.845,1231.24 571.432,1231.13 572.018,1229.75 572.605,1228.52 573.191,1227.48 573.777,1229.29 574.364,1229.27 574.95,1228.08 575.537,1230.11 576.123,1230.07 576.709,1232.13 577.296,1235.18 577.882,1238.97 578.469,1238.28 579.055,1238.65 579.641,1240.35 580.228,1238.5 580.814,1236.83 581.401,1238.57 581.987,1236.82 582.574,1238.57 583.16,1236.7 583.746,1237.14 584.333,1236.59 584.919,1237.43 585.506,1237.79 586.092,1235.98 586.678,1237.61 587.265,1234.75 587.851,1234.14 588.438,1236.18 589.024,1235.79 589.61,1237.22 590.197,1236.53 590.783,1237.16 591.37,1238.81 591.956,1237.91 592.543,1237.3 593.129,1237.79 593.715,1239.38 594.302,1239.67 594.888,1239.79 595.475,1240.1 596.061,1237.06 596.647,1238.72 597.234,1240.11 597.82,1238.32 598.407,1237.56 598.993,1236.8 599.579,1237.51 600.166,1233.41 600.752,1233.99 601.339,1233.5 601.925,1231.81 602.512,1228.87 603.098,1228.25 603.684,1227.87 604.271,1226.6 604.857,1226.5 605.444,1227.4 606.03,1227.3 606.616,1226.91 607.203,1225.49 607.789,1224.18 608.376,1222.91 608.962,1223.91 609.548,1224.03 610.135,1225.02 610.721,1225.07 611.308,1224.93 611.894,1226.1 612.481,1223.53 613.067,1222.38 613.653,1221.45 614.24,1222.75 614.826,1224.05 615.413,1224.83 615.999,1225.91 616.585,1226.78 617.172,1226.76 617.758,1225.71 618.345,1226.74 618.931,1226.49 619.518,1227.59 620.104,1226.23 620.69,1227.25 621.277,1228.99 621.863,1226.35 622.45,1226.05 623.036,1226.77 623.622,1227.75 624.209,1227.54 624.795,1226.35 625.382,1224.98 625.968,1224.66 626.554,1223.28 627.141,1223.24 627.727,1222.09 628.314,1223.28 628.9,1222.04 629.487,1222.07 630.073,1223.16 630.659,1221 631.246,1222.03 631.832,1219.9 632.419,1222.2 633.005,1223.12 633.591,1223.04 634.178,1222.92 634.764,1221.45 635.351,1220.25 635.937,1221.63 636.523,1222.79 637.11,1223.85 637.696,1224.93 638.283,1224.88 638.869,1223.53 639.456,1223.49 640.042,1223.36 640.628,1224.13 641.215,1223.76 641.801,1225.72 642.388,1226.62 642.974,1226.17 643.56,1223.49 644.147,1221.13 644.733,1221.23 645.32,1222.31 645.906,1224.55 646.492,1224.28 647.079,1225.11 647.665,1226.83 648.252,1225.37 648.838,1222.89 649.425,1222.53 650.011,1220.12 650.597,1220.14 651.184,1220.09 651.77,1221.23 652.357,1221.04 652.943,1222.05 653.529,1226.52 654.116,1226.27 654.702,1225.84 655.289,1224.51 655.875,1224.33 656.462,1225.14 657.048,1224.58 657.634,1224.14 658.221,1223.81 658.807,1223.43 659.394,1223.19 659.98,1223.14 660.566,1220.65 661.153,1220.52 661.739,1220.28 662.326,1219.08 662.912,1218.93 663.498,1217.64 664.085,1216.49 664.671,1216.69 665.258,1216.9 665.844,1216.94 666.431,1218.37 667.017,1221.93 667.603,1220.94 668.19,1220.93 668.776,1220.7 669.363,1220.52 669.949,1220.3 670.535,1220.4 671.122,1220.38 671.708,1219.22 672.295,1220.35 672.881,1222.49 673.467,1223.36 674.054,1224.29 674.64,1224.06 675.227,1222.84 675.813,1222.65 676.4,1222.43 676.986,1223.37 677.572,1221.93 678.159,1218.48 678.745,1218.37 679.332,1219.43 679.918,1220.18 680.504,1219.97 681.091,1218.47 681.677,1218.36 682.264,1219.37 682.85,1219.36 683.436,1219.31 684.023,1219.42 684.609,1222.71 685.196,1223.48 685.782,1225.47 686.369,1224.18 686.955,1221.89 687.541,1225.1 688.128,1221.58 688.714,1220.44 689.301,1220.22 689.887,1221.1 690.473,1217.58 691.06,1218.72 691.646,1218.58 692.233,1219.68 692.819,1218.75 693.405,1217.6 693.992,1216.58 694.578,1216.59 695.165,1214.61 695.751,1215.86 696.338,1214.84 696.924,1217.19 697.51,1217.23 698.097,1218.28 698.683,1220.47 699.27,1219.32 699.856,1219.42 700.442,1219.19 701.029,1217.92 701.615,1218.96 702.202,1220.17 702.788,1222.24 703.375,1223.05 703.961,1220.62 704.547,1218.29 705.134,1219.3 705.72,1217.97 706.307,1218.26 706.893,1218.42 707.479,1218.4 708.066,1217.34 708.652,1216.13 709.239,1217.27 709.825,1217.3 710.411,1217.31 710.998,1217.43 711.584,1217.37 712.171,1217.22 712.757,1217.08 713.344,1220.6 713.93,1219.25 714.516,1219.15 715.103,1218.83 715.689,1218.55 716.276,1219.7 716.862,1221.06 717.448,1220.94 718.035,1220.89 718.621,1217.24 719.208,1217.42 719.794,1217.27 720.38,1218.36 720.967,1214.83 721.553,1215.07 722.14,1218.63 722.726,1218.66 723.313,1218.59 723.899,1218.54 724.485,1217.56 725.072,1217.61 725.658,1218.72 726.245,1221.83 726.831,1222.6 727.417,1222.22 728.004,1222.02 728.59,1219.62 729.177,1217.23 729.763,1217.12 730.349,1216.12 730.936,1216.18 731.522,1217.29 732.109,1216.1 732.695,1219.32 733.282,1218.1 733.868,1218.16 734.454,1218.15 735.041,1220.37 735.627,1223.27 736.214,1221.99 736.8,1222.78 737.386,1221.22 737.973,1220 738.559,1222.06 739.146,1220.68 739.732,1222.83 740.318,1222.6 740.905,1221.29 741.491,1224.4 742.078,1227.11 742.664,1226.41 743.251,1224.9 743.837,1223.39 744.423,1225.4 745.01,1221.47 745.596,1221.33 746.183,1219.79 746.769,1219.84 747.355,1220.89 747.942,1220.76 748.528,1217.39 749.115,1216.05 749.701,1217.17 750.288,1217.24 750.874,1215.09 751.46,1216.06 752.047,1214.93 752.633,1213.89 753.22,1214.09 753.806,1214.49 754.392,1213.55 754.979,1214.69 755.565,1214.71 756.152,1214.72 756.738,1215.66 757.324,1214.91 757.911,1216.3 758.497,1216.46 759.084,1217.37 759.67,1216.21 760.257,1216.07 760.843,1215.95 761.429,1217.08 762.016,1218.05 762.602,1217.66 763.189,1216.48 763.775,1214.26 764.361,1212.27 764.948,1213.49 765.534,1212.54 766.121,1214 766.707,1212.78 767.293,1216.48 767.88,1216.53 768.466,1215.33 769.053,1214.35 769.639,1215.46 770.226,1216.64 770.812,1218.73 771.398,1218.71 771.985,1223.87 772.571,1223.5 773.158,1223.09 773.744,1220.72 774.33,1218.33 774.917,1218.45 775.503,1216.31 776.09,1216.32 776.676,1217.24 777.262,1217.17 777.849,1217.22 778.435,1215.02 779.022,1215.14 779.608,1216.23 780.195,1215.16 780.781,1214.2 781.367,1213.13 781.954,1213.45 782.54,1212.51 783.127,1212.85 783.713,1212.97 784.299,1213.2 784.886,1213.13 785.472,1214.42 786.059,1215.53 786.645,1214.67 787.232,1213.29 787.818,1214.61 788.404,1215.8 788.991,1215.84 789.577,1213.58 790.164,1215.83 790.75,1215.85 791.336,1217.91 791.923,1219.16 792.509,1221.33 793.096,1223.15 793.682,1222.88 794.268,1222.71 794.855,1222.36 795.441,1222.19 796.028,1223 796.614,1221.31 797.201,1220.94 797.787,1222.91 798.373,1223.65 798.96,1225.38 799.546,1224.04 800.133,1222.37 800.719,1224.34 801.305,1224.9 801.892,1225.63 802.478,1224.15 803.065,1223.71 803.651,1223.14 804.237,1221.88 804.824,1221.43 805.41,1221.13 805.997,1222.14 806.583,1222.89 807.17,1222.7 807.756,1222.17 808.342,1223.95 808.929,1223.59 809.515,1221.96 810.102,1220.58 810.688,1216.98 811.274,1218.07 811.861,1218.02 812.447,1216.54 813.034,1213.96 813.62,1215.33 814.206,1215.28 814.793,1217.46 815.379,1218.45 815.966,1220.59 816.552,1220.4 817.139,1221.35 817.725,1220.99 818.311,1220.72 818.898,1219.38 819.484,1219.33 820.071,1219.24 820.657,1216.93 821.243,1219.06 821.83,1218.62 822.416,1217.25 823.003,1216.08 823.589,1217.19 824.175,1216.93 824.762,1219.02 825.348,1222.88 825.935,1224.74 826.521,1227.38 827.108,1226.62 827.694,1223.79 828.28,1223.41 828.867,1223.96 829.453,1223.6 830.04,1223.04 830.626,1221.33 831.212,1220.64 831.799,1220.5 832.385,1221.36 832.972,1220.96 833.558,1221.86 834.145,1221.69 834.731,1221.48 835.317,1219.93 835.904,1217.26 836.49,1216.95 837.077,1217.04 837.663,1217.2 838.249,1212.68 838.836,1213.86 839.422,1211.83 840.009,1211.91 840.595,1213.23 841.181,1214.62 841.768,1215.69 842.354,1216.81 842.941,1215.6 843.527,1212.12 844.114,1210.92 844.7,1212.28 845.286,1212.23 845.873,1212.84 846.459,1211.98 847.046,1214.14 847.632,1215.23 848.218,1215.07 848.805,1213.84 849.391,1211.68 849.978,1215.08 850.564,1209.59 851.15,1208.67 851.737,1207.89 852.323,1209.55 852.91,1208.74 853.496,1208.91 854.083,1209.35 854.669,1210.63 855.255,1208.66 855.842,1207.8 856.428,1205.99 857.015,1205.42 857.601,1208.21 858.187,1208.49 858.774,1207.65 859.36,1207.85 859.947,1209.52 860.533,1210.07 861.119,1209.45 861.706,1208.55 862.292,1210 862.879,1211.41 863.465,1211.53 864.052,1211.71 864.638,1214.25 865.224,1214.37 865.811,1214.28 866.397,1215.35 866.984,1212.12 867.57,1211.16 868.156,1213.34 868.743,1214.74 869.329,1211.33 869.916,1212.73 870.502,1213.91 871.089,1213.73 871.675,1214.84 872.261,1216.04 872.848,1216.05 873.434,1213.68 874.021,1210.32 874.607,1207.3 875.193,1207.83 875.78,1209.19 876.366,1210.53 876.953,1212.95 877.539,1215.16 878.125,1215.24 878.712,1218.38 879.298,1217.35 879.885,1217.25 880.471,1218.11 881.058,1218.06 881.644,1218.06 882.23,1217.94 882.817,1218.78 883.403,1217.13 883.99,1218.21 884.576,1217.05 885.162,1213.52 885.749,1210.44 886.335,1211.94 886.922,1211.05 887.508,1209.08 888.094,1209.47 888.681,1208.74 889.267,1209.06 889.854,1210.43 890.44,1209.57 891.027,1212.04 891.613,1213.12 892.199,1210.82 892.786,1213.15 893.372,1213.05 893.959,1212.08 894.545,1212.04 895.131,1210.97 895.718,1209.94 896.304,1209.22 896.891,1209.48 897.477,1208.56 898.063,1208.85 898.65,1210.39 899.236,1210.54 899.823,1211.76 900.409,1212.99 900.996,1212.05 901.582,1212.2 902.168,1213.47 902.755,1213.64 903.341,1213.69 903.928,1214.96 904.514,1212.59 905.1,1211.34 905.687,1208.29 906.273,1208.74 906.86,1206.63 907.446,1208.31 908.032,1210.69 908.619,1210.67 909.205,1210.94 909.792,1212.13 910.378,1213.35 910.965,1212.31 911.551,1211.1 912.137,1211.13 912.724,1210.15 913.31,1210.14 913.897,1210.3 914.483,1210.69 915.069,1211.11 915.656,1211.35 916.242,1212.65 916.829,1214.12 917.415,1213.35 918.002,1215.83 918.588,1217.04 919.174,1216.7 919.761,1216.67 920.347,1213.13 920.934,1214.43 921.52,1214.55 922.106,1213.41 922.693,1212.31 923.279,1210.13 923.866,1211.5 924.452,1209.65 925.038,1209.89 925.625,1209.34 926.211,1207.34 926.798,1210.02 927.384,1204.73 927.971,1204.01 928.557,1205.63 929.143,1208.4 929.73,1209.72 930.316,1213.16 930.903,1213.29 931.489,1212.35 932.075,1211.52 932.662,1211.67 933.248,1209.75 933.835,1213.31 934.421,1212.53 935.007,1213.72 935.594,1210.66 936.18,1209.83 936.767,1210.04 937.353,1212.45 937.94,1212.62 938.526,1212.7 939.112,1212.8 939.699,1214.11 940.285,1214.16 940.872,1213.91 941.458,1212.65 942.044,1214.96 942.631,1219.44 943.217,1220.39 943.804,1220.36 944.39,1219.97 944.976,1220.93 945.563,1217 946.149,1215 946.736,1216.07 947.322,1215.91 947.909,1214.59 948.495,1214.47 949.081,1216.62 949.668,1217.79 950.254,1218.69 950.841,1217.36 951.427,1215.85 952.013,1218.87 952.6,1217.45 953.186,1217.27 953.773,1219.11 954.359,1219.89 954.945,1220.72 955.532,1219.21 956.118,1217.87 956.705,1216.37 957.291,1217.41 957.878,1214.84 958.464,1214.72 959.05,1215.98 959.637,1215.03 960.223,1215.96 960.81,1217.91 961.396,1216.79 961.982,1215.64 962.569,1215.5 963.155,1216.38 963.742,1217.44 964.328,1217.31 964.915,1216.09 965.501,1214.82 966.087,1213.51 966.674,1212.52 967.26,1212.79 967.847,1216.34 968.433,1214.89 969.019,1217.01 969.606,1215.98 970.192,1217.01 970.779,1217.73 971.365,1217.36 971.951,1218.11 972.538,1218.92 973.124,1217.5 973.711,1217.14 974.297,1213.68 974.884,1215.79 975.47,1215.68 976.056,1215.49 976.643,1215.51 977.229,1215.29 977.816,1215.09 978.402,1214.91 978.988,1218.03 979.575,1216.75 980.161,1216.62 980.748,1217.74 981.334,1216.39 981.92,1216.01 982.507,1218.14 983.093,1217.93 983.68,1218.82 984.266,1219.38 984.853,1218.09 985.439,1219.89 986.025,1220.53 986.612,1221.2 987.198,1221.76 987.785,1218.13 988.371,1218.65 988.957,1220.61 989.544,1220.21 990.13,1220.08 990.717,1220.83 991.303,1218.31 991.889,1219.21 992.476,1218.74 993.062,1220.67 993.649,1220.14 994.235,1218.74 994.822,1218.27 995.408,1215.8 995.994,1216.55 996.581,1214.02 997.167,1214.04 997.754,1211.77 998.34,1213.15 998.926,1215.29 999.513,1216.36 1000.1,1215.09 1000.69,1215.14 1001.27,1215.02 1001.86,1218.33 1002.44,1216.89 1003.03,1217.67 1003.62,1218.41 1004.2,1219.12 1004.79,1218.89 1005.38,1218.49 1005.96,1217.16 1006.55,1214.88 1007.14,1214.63 1007.72,1215.81 1008.31,1214.58 1008.9,1215.75 1009.48,1215.51 1010.07,1212.01 1010.65,1211.83 1011.24,1211.93 1011.83,1212.15 1012.41,1214.54 1013,1212.42 1013.59,1211.4 1014.17,1211.45 1014.76,1210.36 1015.35,1213.86 1015.93,1214.96 1016.52,1213.72 1017.11,1212.49 1017.69,1212.36 1018.28,1212.46 1018.86,1210.28 1019.45,1210.29 1020.04,1210.57 1020.62,1211.78 1021.21,1211.8 1021.8,1209.56 1022.38,1209.69 1022.97,1208.98 1023.56,1208.02 1024.14,1207.26 1024.73,1206.64 1025.32,1206.07 1025.9,1207.49 1026.49,1208.98 1027.07,1207.98 1027.66,1208.25 1028.25,1207.46 1028.83,1207.73 1029.42,1211.27 1030.01,1210.18 1030.59,1206.98 1031.18,1208.43 1031.77,1208.82 1032.35,1209.24 1032.94,1207.18 1033.52,1205.21 1034.11,1206.09 1034.7,1205.35 1035.28,1206.82 1035.87,1206.11 1036.46,1205.33 1037.04,1205.96 1037.63,1205.51 1038.22,1205.8 1038.8,1208.4 1039.39,1209.71 1039.98,1211.05 1040.56,1210.17 1041.15,1210.46 1041.73,1211.76 1042.32,1211.76 1042.91,1211.03 1043.49,1211.2 1044.08,1211.36 1044.67,1210.32 1045.25,1211.57 1045.84,1213.75 1046.43,1215.01 1047.01,1213.87 1047.6,1213.64 1048.19,1213.67 1048.77,1215.89 1049.36,1216.84 1049.94,1216.67 1050.53,1216.37 1051.12,1217.37 1051.7,1217.37 1052.29,1218.18 1052.88,1219.29 1053.46,1217.87 1054.05,1214.27 1054.64,1217.47 1055.22,1216.16 1055.81,1215.92 1056.39,1216.78 1056.98,1218.64 1057.57,1219.56 1058.15,1220.45 1058.74,1219.08 1059.33,1218.79 1059.91,1218.65 1060.5,1216.28 1061.09,1218.49 1061.67,1218.27 1062.26,1219.17 1062.85,1215.55 1063.43,1216.71 1064.02,1214.27 1064.6,1217.66 1065.19,1215.05 1065.78,1218.2 1066.36,1219.23 1066.95,1219.87 1067.54,1220.51 1068.12,1220.9 1068.71,1219.49 1069.3,1219.32 1069.88,1215.58 1070.47,1215.58 1071.06,1215.24 1071.64,1213.82 1072.23,1214.1 1072.81,1211.79 1073.4,1210.82 1073.99,1209.71 1074.57,1208.76 1075.16,1209.96 1075.75,1211.48 1076.33,1210.74 1076.92,1213.13 1077.51,1215.2 1078.09,1216.33 1078.68,1216.18 1079.26,1217.4 1079.85,1217.37 1080.44,1215.99 1081.02,1211.36 1081.61,1210.36 1082.2,1209.47 1082.78,1210.77 1083.37,1211.99 1083.96,1212.03 1084.54,1213.2 1085.13,1214.7 1085.72,1217 1086.3,1216.79 1086.89,1213.17 1087.47,1212.94 1088.06,1215.2 1088.65,1216.14 1089.23,1216.97 1089.82,1217.93 1090.41,1215.45 1090.99,1214.21 1091.58,1217.56 1092.17,1216.32 1092.75,1214.93 1093.34,1213.98 1093.93,1209.61 1094.51,1209.7 1095.1,1208.82 1095.68,1212.33 1096.27,1213.31 1096.86,1215.43 1097.44,1215.45 1098.03,1215.26 1098.62,1214.14 1099.2,1211.83 1099.79,1211.89 1100.38,1211.75 1100.96,1212.96 1101.55,1211.69 1102.14,1211.68 1102.72,1213.87 1103.31,1212.58 1103.89,1213.78 1104.48,1215.14 1105.07,1219.45 1105.65,1219.27 1106.24,1217.81 1106.83,1218.83 1107.41,1219.63 1108,1221.5 1108.59,1220.89 1109.17,1218.33 1109.76,1217.23 1110.34,1215.12 1110.93,1215.05 1111.52,1214.89 1112.1,1215.89 1112.69,1215.74 1113.28,1215.78 1113.86,1215 1114.45,1213.87 1115.04,1213.83 1115.62,1215.96 1116.21,1217.91 1116.8,1217.69 1117.38,1221.55 1117.97,1218.92 1118.55,1218.44 1119.14,1212.92 1119.73,1211.95 1120.31,1212 1120.9,1212.29 1121.49,1210.2 1122.07,1213.49 1122.66,1208.82 1123.25,1207.81 1123.83,1209.45 1124.42,1208.64 1125.01,1207.91 1125.59,1208.28 1126.18,1209.52 1126.76,1210.74 1127.35,1210.7 1127.94,1212.06 1128.52,1210.15 1129.11,1208.23 1129.7,1208.61 1130.28,1207.68 1130.87,1207.96 1131.46,1208.23 1132.04,1206.32 1132.63,1207.9 1133.21,1208.43 1133.8,1207.43 1134.39,1207.85 1134.97,1209.32 1135.56,1209.52 1136.15,1209.73 1136.73,1208.87 1137.32,1206.96 1137.91,1207.61 1138.49,1212.28 1139.08,1209.19 1139.67,1209.35 1140.25,1209.49 1140.84,1212.08 1141.42,1209.1 1142.01,1206.94 1142.6,1207 1143.18,1209.47 1143.77,1209.56 1144.36,1208.79 1144.94,1209.14 1145.53,1208.36 1146.12,1209.9 1146.7,1210.04 1147.29,1206.84 1147.88,1205.15 1148.46,1204.68 1149.05,1204.04 1149.63,1204.63 1150.22,1206.14 1150.81,1209.81 1151.39,1211.23 1151.98,1212.35 1152.57,1213.58 1153.15,1213.69 1153.74,1213.98 1154.33,1214.01 1154.91,1213.96 1155.5,1216.15 1156.09,1216.06 1156.67,1215.99 1157.26,1217.96 1157.84,1216.52 1158.43,1218.6 1159.02,1218.44 1159.6,1218.47 1160.19,1219.47 1160.78,1219.21 1161.36,1219.8 1161.95,1220.7 1162.54,1221.47 1163.12,1219.94 1163.71,1219.51 1164.29,1217.06 1164.88,1218.08 1165.47,1218.12 1166.05,1217.75 1166.64,1218.56 1167.23,1220.48 1167.81,1220.18 1168.4,1219.82 1168.99,1218.4 1169.57,1220.41 1170.16,1218.89 1170.75,1218.55 1171.33,1220.49 1171.92,1217.91 1172.5,1214.44 1173.09,1210.88 1173.68,1210.99 1174.26,1212.25 1174.85,1212.13 1175.44,1208.83 1176.02,1207.93 1176.61,1209.34 1177.2,1211.83 1177.78,1209.82 1178.37,1209.86 1178.96,1210 1179.54,1210.18 1180.13,1209.15 1180.71,1210.32 1181.3,1210.58 1181.89,1209.63 1182.47,1211.02 1183.06,1212.17 1183.65,1212.27 1184.23,1212.24 1184.82,1210.11 1185.41,1211.24 1185.99,1208.99 1186.58,1209.46 1187.16,1210.36 1187.75,1213.64 1188.34,1212.63 1188.92,1213.02 1189.51,1213.19 1190.1,1214.5 1190.68,1211.06 1191.27,1211.28 1191.86,1211.38 1192.44,1213.65 1193.03,1212.6 1193.62,1212.66 1194.2,1211.65 1194.79,1210.76 1195.37,1210.76 1195.96,1210.59 1196.55,1210.63 1197.13,1210.95 1197.72,1209.65 1198.31,1210.05 1198.89,1211.18 1199.48,1211.38 1200.07,1207.09 1200.65,1208.6 1201.24,1207.53 1201.83,1209 1202.41,1211.46 1203,1210.3 1203.58,1210.34 1204.17,1209.24 1204.76,1210.71 1205.34,1208.46 1205.93,1210.93 1206.52,1208.82 1207.1,1209.09 1207.69,1209.37 1208.28,1209.65 1208.86,1212.92 1209.45,1210.57 1210.03,1211.75 1210.62,1211.66 1211.21,1212.6 1211.79,1214.93 1212.38,1217.11 1212.97,1215.5 1213.55,1216.59 1214.14,1217.59 1214.73,1218.31 1215.31,1219.02 1215.9,1223.13 1216.49,1220.51 1217.07,1217.68 1217.66,1216.39 1218.24,1215.08 1218.83,1215 1219.42,1213.86 1220,1215.12 1220.59,1216.14 1221.18,1216.97 1221.76,1215.47 1222.35,1215.56 1222.94,1215.18 1223.52,1216.13 1224.11,1213.63 1224.7,1213.63 1225.28,1212.43 1225.87,1211.3 1226.45,1210.51 1227.04,1209.52 1227.63,1209.78 1228.21,1208.07 1228.8,1208.32 1229.39,1209.62 1229.97,1209.73 1230.56,1210.07 1231.15,1211.29 1231.73,1212.43 1232.32,1210.57 1232.91,1209.51 1233.49,1209.87 1234.08,1211.42 1234.66,1209.53 1235.25,1210 1235.84,1209.97 1236.42,1210.15 1237.01,1210.22 1237.6,1211 1238.18,1210.87 1238.77,1213.2 1239.36,1213.12 1239.94,1212.02 1240.53,1209.92 1241.11,1211.29 1241.7,1212.59 1242.29,1214.91 1242.87,1213.69 1243.46,1211.5 1244.05,1209.41 1244.63,1209.66 1245.22,1212.29 1245.81,1211.35 1246.39,1214.75 1246.98,1214.71 1247.57,1214.54 1248.15,1213.35 1248.74,1213.23 1249.32,1213.37 1249.91,1216.39 1250.5,1214.05 1251.08,1214.97 1251.67,1215.84 1252.26,1214.49 1252.84,1212.3 1253.43,1211.23 1254.02,1211.36 1254.6,1209.14 1255.19,1208.1 1255.78,1208.54 1256.36,1207.89 1256.95,1209.36 1257.53,1209.81 1258.12,1209.97 1258.71,1210.24 1259.29,1210.84 1259.88,1211.16 1260.47,1211.52 1261.05,1213.83 1261.64,1212.6 1262.23,1214.96 1262.81,1217.17 1263.4,1213.73 1263.98,1213.51 1264.57,1218.07 1265.16,1218.04 1265.74,1216.89 1266.33,1215.78 1266.92,1215.61 1267.5,1216.54 1268.09,1216.5 1268.68,1216.36 1269.26,1217.43 1269.85,1216.05 1270.44,1217.04 1271.02,1219.06 1271.61,1221.94 1272.19,1221.57 1272.78,1217.9 1273.37,1215.55 1273.95,1216.58 1274.54,1216.43 1275.13,1216.58 1275.71,1215.56 1276.3,1215.6 1276.89,1215.64 1277.47,1215.54 1278.06,1213.34 1278.65,1215.33 1279.23,1216.52 1279.82,1216.16 1280.4,1217.02 1280.99,1215.78 1281.58,1214.65 1282.16,1215.5 1282.75,1215.25 1283.34,1215.19 1283.92,1216.04 1284.51,1214.74 1285.1,1215.89 1285.68,1214.62 1286.27,1213.41 1286.86,1214.48 1287.44,1214.41 1288.03,1213.16 1288.61,1215.56 1289.2,1219.8 1289.79,1220.54 1290.37,1221.17 1290.96,1220.76 1291.55,1220.29 1292.13,1221.11 1292.72,1221.59 1293.31,1222.11 1293.89,1221.53 1294.48,1219.68 1295.06,1218.32 1295.65,1219.14 1296.24,1217.5 1296.82,1219.31 1297.41,1216.85 1298,1218.65 1298.58,1220.69 1299.17,1217.16 1299.76,1217.8 1300.34,1218.58 1300.93,1219.28 1301.52,1221.09 1302.1,1221.66 1302.69,1222.25 1303.27,1220.85 1303.86,1217.05 1304.45,1215.65 1305.03,1214.38 1305.62,1214.22 1306.21,1215.25 1306.79,1215.01 1307.38,1213.3 1307.97,1216.62 1308.55,1217.41 1309.14,1215.91 1309.73,1215.73 1310.31,1215.27 1310.9,1216.19 1311.48,1215.99 1312.07,1214.73 1312.66,1216.92 1313.24,1215.59 1313.83,1214.43 1314.42,1212.1 1315,1211.92 1315.59,1209.83 1316.18,1210.32 1316.76,1211.37 1317.35,1210.44 1317.93,1211.6 1318.52,1211.88 1319.11,1212.96 1319.69,1212.71 1320.28,1209.62 1320.87,1211.01 1321.45,1211.32 1322.04,1211.26 1322.63,1210.04 1323.21,1211.37 1323.8,1211.54 1324.39,1211.53 1324.97,1209.32 1325.56,1208.33 1326.14,1208.57 1326.73,1211.26 1327.32,1208.4 1327.9,1209.58 1328.49,1207.48 1329.08,1205.48 1329.66,1204.87 1330.25,1205.17 1330.84,1205.61 1331.42,1203.81 1332.01,1204.54 1332.6,1207.15 1333.18,1207.74 1333.77,1209.16 1334.35,1208.2 1334.94,1208.49 1335.53,1209.62 1336.11,1207.58 1336.7,1209.17 1337.29,1209.34 1337.87,1210.68 1338.46,1209.95 1339.05,1211.27 1339.63,1209.17 1340.22,1209.38 1340.8,1207.48 1341.39,1206.59 1341.98,1206.98 1342.56,1208.55 1343.15,1208.87 1343.74,1212.54 1344.32,1213.55 1344.91,1215.68 1345.5,1216.63 1346.08,1216.69 1346.67,1216.82 1347.26,1215.44 1347.84,1215.11 1348.43,1215.99 1349.01,1215.82 1349.6,1215.81 1350.19,1212.25 1350.77,1213.16 1351.36,1215.39 1351.95,1215.11 1352.53,1217.03 1353.12,1217.98 1353.71,1216.46 1354.29,1215.08 1354.88,1216.87 1355.47,1218.76 1356.05,1218.4 1356.64,1219.03 1357.22,1214.32 1357.81,1214.37 1358.4,1215.48 1358.98,1215.6 1359.57,1213.3 1360.16,1212.25 1360.74,1212.28 1361.33,1214.4 1361.92,1213.48 1362.5,1215.49 1363.09,1214.13 1363.68,1215.21 1364.26,1215.06 1364.85,1213.85 1365.43,1213.97 1366.02,1211.49 1366.61,1212.33 1367.19,1211.4 1367.78,1212.41 1368.37,1212.41 1368.95,1213.4 1369.54,1214.57 1370.13,1214.31 1370.71,1212.06 1371.3,1212.09 1371.88,1213.13 1372.47,1215.46 1373.06,1216.02 1373.64,1215.65 1374.23,1214.26 1374.82,1214.24 1375.4,1212.14 1375.99,1213.29 1376.58,1211.02 1377.16,1211.15 1377.75,1210.18 1378.34,1208.04 1378.92,1209.44 1379.51,1210.78 1380.09,1210.02 1380.68,1209.06 1381.27,1206.93 1381.85,1207.02 1382.44,1208.2 1383.03,1209.69 1383.61,1209.76 1384.2,1208.92 1384.79,1210.09 1385.37,1210.01 1385.96,1211.21 1386.55,1211.3 1387.13,1212.29 1387.72,1212.16 1388.3,1210.13 1388.89,1210.27 1389.48,1210.38 1390.06,1208.16 1390.65,1207.02 1391.24,1208.23 1391.82,1208.49 1392.41,1210.1 1393,1209.14 1393.58,1210.54 1394.17,1209.73 1394.75,1208.87 1395.34,1206.81 1395.93,1209.39 1396.51,1208.58 1397.1,1208.75 1397.69,1210.51 1398.27,1210.72 1398.86,1211.08 1399.45,1211.12 1400.03,1211.15 1400.62,1211.07 1401.21,1212.18 1401.79,1213.19 1402.38,1211.15 1402.96,1211.52 1403.55,1211.57 1404.14,1211.58 1404.72,1213.79 1405.31,1216.12 1405.9,1214.82 1406.48,1214.74 1407.07,1216.89 1407.66,1216.53 1408.24,1216.32 1408.83,1218.58 1409.42,1219.42 1410,1221.3 1410.59,1220.14 1411.17,1216.41 1411.76,1217.49 1412.35,1217.3 1412.93,1219.19 1413.52,1220.02 1414.11,1217.34 1414.69,1217.93 1415.28,1217.82 1415.87,1217.45 1416.45,1216.22 1417.04,1218.2 1417.63,1217.87 1418.21,1217.82 1418.8,1217.6 1419.38,1216.44 1419.97,1214.88 1420.56,1210.38 1421.14,1209.31 1421.73,1211.77 1422.32,1211.84 1422.9,1213.04 1423.49,1215.18 1424.08,1213.99 1424.66,1214.26 1425.25,1213.52 1425.83,1211.41 1426.42,1214.66 1427.01,1213.62 1427.59,1214.91 1428.18,1217.2 1428.77,1217.11 1429.35,1216.85 1429.94,1216.71 1430.53,1219.8 1431.11,1219.74 1431.7,1223.93 1432.29,1223.47 1432.87,1224.84 1433.46,1225.36 1434.04,1223.67 1434.63,1221.76 1435.22,1221.52 1435.8,1218.99 1436.39,1219.77 1436.98,1219.31 1437.56,1216.64 1438.15,1216.73 1438.74,1218.76 1439.32,1217.21 1439.91,1215.75 1440.5,1214.54 1441.08,1216.82 1441.67,1216.71 1442.25,1217.5 1442.84,1217.22 1443.43,1215.09 1444.01,1215.11 1444.6,1214.98 1445.19,1215.92 1445.77,1213.57 1446.36,1212.36 1446.95,1211.33 1447.53,1213.69 1448.12,1211.31 1448.7,1212.24 1449.29,1212.43 1449.88,1212.39 1450.46,1213.15 1451.05,1210.67 1451.64,1208.5 1452.22,1208.75 1452.81,1209.98 1453.4,1211.33 1453.98,1211.59 1454.57,1211.88 1455.16,1212.84 1455.74,1209.91 1456.33,1210.25 1456.91,1209.34 1457.5,1208.38 1458.09,1208.57 1458.67,1211.06 1459.26,1212.04 1459.85,1207.66 1460.43,1209.16 1461.02,1208.11 1461.61,1208.67 1462.19,1211.17 1462.78,1211.08 1463.37,1212.29 1463.95,1210.27 1464.54,1209.15 1465.12,1211.36 1465.71,1211.51 1466.3,1208.18 1466.88,1214.1 1467.47,1213.91 1468.06,1215.17 1468.64,1216.06 1469.23,1213.92 1469.82,1212.78 1470.4,1211.76 1470.99,1210.71 1471.57,1213.01 1472.16,1214.24 1472.75,1213.08 1473.33,1214.19 1473.92,1213.22 1474.51,1212.17 1475.09,1213.3 1475.68,1212.13 1476.27,1212.12 1476.85,1213.14 1477.44,1212.17 1478.03,1210.03 1478.61,1208.03 1479.2,1209.26 1479.78,1209.49 1480.37,1209.62 1480.96,1208.52 1481.54,1207.79 1482.13,1206.83 1482.72,1209.39 1483.3,1209.55 1483.89,1208.95 1484.48,1207.06 1485.06,1207.46 1485.65,1207.69 1486.24,1209.27 1486.82,1210.87 1487.41,1212.27 1487.99,1209.37 1488.58,1210.75 1489.17,1210.98 1489.75,1210.03 1490.34,1210.32 1490.93,1210.62 1491.51,1208.44 1492.1,1207.85 1492.69,1206.89 1493.27,1206.08 1493.86,1205.41 1494.45,1203.66 1495.03,1204.28 1495.62,1204.79 1496.2,1207.39 1496.79,1206.79 1497.38,1207.18 1497.96,1207.45 1498.55,1208.67 1499.14,1211.06 1499.72,1212.47 1500.31,1212.41 1500.9,1212.49 1501.48,1213.65 1502.07,1212.69 1502.65,1212.89 1503.24,1213.9 1503.83,1213.87 1504.41,1212.78 1505,1215.07 1505.59,1214.92 1506.17,1216 1506.76,1215.75 1507.35,1213.42 1507.93,1212.55 1508.52,1212.47 1509.11,1213.54 1509.69,1211.42 1510.28,1209.43 1510.86,1212 1511.45,1214.29 1512.04,1214.33 1512.62,1215.22 1513.21,1213.08 1513.8,1211.92 1514.38,1211.99 1514.97,1210.83 1515.56,1209.88 1516.14,1209.04 1516.73,1209.37 1517.32,1210.67 1517.9,1212.06 1518.49,1210.98 1519.07,1210.87 1519.66,1213.13 1520.25,1213.14 1520.83,1211.98 1521.42,1211.78 1522.01,1210.65 1522.59,1212.02 1523.18,1212.16 1523.77,1214.29 1524.35,1214.26 1524.94,1214.17 1525.52,1212.98 1526.11,1210.76 1526.7,1212.18 1527.28,1212.26 1527.87,1211.27 1528.46,1211.33 1529.04,1211.64 1529.63,1210.75 1530.22,1209.62 1530.8,1210.9 1531.39,1213.18 1531.98,1213.33 1532.56,1213.5 1533.15,1213.61 1533.73,1212.7 1534.32,1214.91 1534.91,1214.81 1535.49,1214.76 1536.08,1213.63 1536.67,1216.82 1537.25,1216.66 1537.84,1215.48 1538.43,1215.67 1539.01,1215.54 1539.6,1214.22 1540.19,1214.18 1540.77,1215.13 1541.36,1215.02 1541.94,1214.93 1542.53,1214.65 1543.12,1214.52 1543.7,1214.72 1544.29,1216.92 1544.88,1216.92 1545.46,1221.21 1546.05,1218.54 1546.64,1217.38 1547.22,1220.07 1547.81,1221.95 1548.4,1222.38 1548.98,1221.84 1549.57,1220.01 1550.15,1220.45 1550.74,1219.94 1551.33,1218.64 1551.91,1218.07 1552.5,1220 1553.09,1217.58 1553.67,1219.38 1554.26,1220.18 1554.85,1221.84 1555.43,1220.23 1556.02,1218.72 1556.6,1218.74 1557.19,1216.19 1557.78,1216.33 1558.36,1214.95 1558.95,1213.6 1559.54,1213.35 1560.12,1210.12 1560.71,1211.18 1561.3,1215.69 1561.88,1216.52 1562.47,1218.66 1563.06,1217.08 1563.64,1217.9 1564.23,1215.59 1564.81,1216.58 1565.4,1216.43 1565.99,1219.75 1566.57,1219.28 1567.16,1215.68 1567.75,1215.8 1568.33,1215.81 1568.92,1213.53 1569.51,1212.3 1570.09,1211.28 1570.68,1212.54 1571.27,1211.37 1571.85,1212.74 1572.44,1212.78 1573.02,1211.8 1573.61,1214.14 1574.2,1212.91 1574.78,1211.87 1575.37,1214.05 1575.96,1212.77 1576.54,1213.98 1577.13,1211.82 1577.72,1211.63 1578.3,1212.38 1578.89,1212.4 1579.47,1212.58 1580.06,1211.61 1580.65,1212.64 1581.23,1212.78 1581.82,1209.58 1582.41,1210.79 1582.99,1210.73 1583.58,1210.7 1584.17,1210.74 1584.75,1211.74 1585.34,1212.79 1585.93,1211.68 1586.51,1210.78 1587.1,1214.24 1587.68,1215.41 1588.27,1215.45 1588.86,1216.61 1589.44,1214.01 1590.03,1213.98 1590.62,1214.03 1591.2,1214 1591.79,1212.78 1592.38,1210.51 1592.96,1210.57 1593.55,1207.29 1594.14,1208.61 1594.72,1208.49 1595.31,1209.99 1595.89,1210.06 1596.48,1210 1597.07,1208.91 1597.65,1208.42 1598.24,1208.7 1598.83,1206.96 1599.41,1206.03 1600,1205.27 1600.59,1204.45 1601.17,1204.79 1601.76,1206.41 1602.34,1207.75 1602.93,1207.04 1603.52,1207.45 1604.1,1206.43 1604.69,1208.99 1605.28,1208 1605.86,1209.52 1606.45,1211.6 1607.04,1210.46 1607.62,1210.6 1608.21,1211.93 1608.8,1211.03 1609.38,1213.16 1609.97,1214.25 1610.55,1214.2 1611.14,1214.19 1611.73,1214.11 1612.31,1215.14 1612.9,1213.9 1613.49,1214.82 1614.07,1216.03 1614.66,1213.44 1615.25,1217.57 1615.83,1219.52 1616.42,1217.98 1617.01,1219.99 1617.59,1218.56 1618.18,1217.12 1618.76,1216.88 1619.35,1216.55 1619.94,1217.2 1620.52,1218.08 1621.11,1217.61 1621.7,1212.97 1622.28,1214 1622.87,1213.95 1623.46,1213.85 1624.04,1217.08 1624.63,1213.55 1625.22,1214.57 1625.8,1213.37 1626.39,1213.29 1626.97,1210.89 1627.56,1210.09 1628.15,1210.47 1628.73,1211.97 1629.32,1212.09 1629.91,1211.19 1630.49,1210.2 1631.08,1210.33 1631.67,1211.57 1632.25,1212.91 1632.84,1214.05 1633.42,1213.09 1634.01,1213.15 1634.6,1211.95 1635.18,1212.08 1635.77,1213.07 1636.36,1211.95 1636.94,1211.12 1637.53,1211.09 1638.12,1212.25 1638.7,1212.35 1639.29,1212.25 1639.88,1214.69 1640.46,1212.65 1641.05,1213.74 1641.63,1216.02 1642.22,1214.71 1642.81,1213.45 1643.39,1210.27 1643.98,1209.34 1644.57,1211.84 1645.15,1210.88 1645.74,1210.88 1646.33,1212.17 1646.91,1211.41 1647.5,1211.63 1648.09,1212.8 1648.67,1211.84 1649.26,1212.95 1649.84,1214.28 1650.43,1214.17 1651.02,1215.14 1651.6,1218.02 1652.19,1217.94 1652.78,1215.51 1653.36,1212.23 1653.95,1211.23 1654.54,1212.55 1655.12,1214.04 1655.71,1215.33 1656.29,1216.41 1656.88,1217.29 1657.47,1221.59 1658.05,1219.98 1658.64,1218.58 1659.23,1215.98 1659.81,1214.63 1660.4,1214.52 1660.99,1214.55 1661.57,1214.37 1662.16,1216.47 1662.75,1217.27 1663.33,1218.13 1663.92,1215.66 1664.5,1215.73 1665.09,1213.25 1665.68,1214.14 1666.26,1214.14 1666.85,1212.72 1667.44,1213.79 1668.02,1217.19 1668.61,1216.55 1669.2,1215.32 1669.78,1215.39 1670.37,1215.14 1670.96,1217.22 1671.54,1216.83 1672.13,1216.53 1672.71,1216.19 1673.3,1218.3 1673.89,1220.28 1674.47,1219.9 1675.06,1219.41 1675.65,1221.01 1676.23,1220.5 1676.82,1221.37 1677.41,1220.12 1677.99,1220.89 1678.58,1219.45 1679.17,1216.9 1679.75,1216.36 1680.34,1214.91 1680.92,1213.46 1681.51,1212.5 1682.1,1212.55 1682.68,1212.6 1683.27,1210.38 1683.86,1212.66 1684.44,1212.69 1685.03,1212.73 1685.62,1212.78 1686.2,1212.71 1686.79,1212.58 1687.37,1212.53 1687.96,1212.58 1688.55,1214.61 1689.13,1215.62 1689.72,1215.36 1690.31,1215.18 1690.89,1218.29 1691.48,1216.79 1692.07,1216.3 1692.65,1216.09 1693.24,1213.69 1693.83,1212.67 1694.41,1213.74 1695,1215.88 1695.58,1215.81 1696.17,1214.62 1696.76,1213.39 1697.34,1213.31 1697.93,1210.17 1698.52,1212.66 1699.1,1210.68 1699.69,1209.79 1700.28,1208.72 1700.86,1209.02 1701.45,1209.26 1702.04,1209.49 1702.62,1206.27 1703.21,1206.38 1703.79,1206.74 1704.38,1205.99 1704.97,1207.52 1705.55,1213.2 1706.14,1215.51 1706.73,1216.25 1707.31,1216.05 1707.9,1216.01 1708.49,1212.81 1709.07,1211.71 1709.66,1210.54 1710.24,1211.92 1710.83,1209.65 1711.42,1207.62 1712,1207.97 1712.59,1207.24 1713.18,1207.56 1713.76,1208.9 1714.35,1210.35 1714.94,1210.58 1715.52,1208.26 1716.11,1207.4 1716.7,1207.63 1717.28,1207.92 1717.87,1209.21 1718.45,1211.55 1719.04,1210.55 1719.63,1210.68 1720.21,1209.59 1720.8,1209.81 1721.39,1208.79 1721.97,1207.89 1722.56,1209.32 1723.15,1209.39 1723.73,1209.55 1724.32,1209.55 1724.91,1210.82 1725.49,1211.96 1726.08,1210.97 1726.66,1211.28 1727.25,1212.49 1727.84,1213.49 1728.42,1213.33 1729.01,1211.18 1729.6,1211.2 1730.18,1211.44 1730.77,1212.55 1731.36,1212.67 1731.94,1213.98 1732.53,1213.94 1733.11,1211.71 1733.7,1210.72 1734.29,1206.69 1734.87,1208 1735.46,1207.04 1736.05,1206.09 1736.63,1205.38 1737.22,1205.95 1737.81,1207.56 1738.39,1205.54 1738.98,1205.73 1739.57,1206.12 1740.15,1205.46 1740.74,1208.06 1741.32,1205.11 1741.91,1205.54 1742.5,1206.08 1743.08,1206.41 1743.67,1206.84 1744.26,1207.21 1744.84,1207.62 1745.43,1206.73 1746.02,1207.23 1746.6,1207.73 1747.19,1205.83 1747.78,1205.16 1748.36,1206.78 1748.95,1205.92 1749.53,1205.26 1750.12,1204.58 1750.71,1205.14 1751.29,1207.68 1751.88,1210.06 1752.47,1211.5 1753.05,1210.42 1753.64,1210.54 1754.23,1210.65 1754.81,1211.15 1755.4,1210.02 1755.99,1210.38 1756.57,1210.56 1757.16,1209.6 1757.74,1209.66 1758.33,1210.81 1758.92,1208.88 1759.5,1209.19 1760.09,1208.52 1760.68,1205.5 1761.26,1206.96 1761.85,1208.4 1762.44,1207.59 1763.02,1206.58 1763.61,1205.9 1764.19,1204.01 1764.78,1204.58 1765.37,1208.31 1765.95,1211.84 1766.54,1213.19 1767.13,1213.16 1767.71,1213.27 1768.3,1214.27 1768.89,1215.54 1769.47,1217.63 1770.06,1217.51 1770.65,1219.34 1771.23,1219.19 1771.82,1221.34 1772.4,1218.78 1772.99,1217.62 1773.58,1217.32 1774.16,1215.98 1774.75,1217.02 1775.34,1219.95 1775.92,1219.56 1776.51,1219.12 1777.1,1218.73 1777.68,1218.28 1778.27,1215.84 1778.86,1213.44 1779.44,1213.52 1780.03,1214.66 1780.61,1216.68 1781.2,1215.36 1781.79,1215.22 1782.37,1216.16 1782.96,1215.95 1783.55,1215.77 1784.13,1220.1 1784.72,1217.39 1785.31,1217.18 1785.89,1217.94 1786.48,1216.66 1787.06,1217.36 1787.65,1217.12 1788.24,1215.54 1788.82,1215.43 1789.41,1214.59 1790,1214.43 1790.58,1213.42 1791.17,1214.46 1791.76,1214.18 1792.34,1210.73 1792.93,1209.85 1793.52,1210.15 1794.1,1209.26 1794.69,1209.53 1795.27,1211.04 1795.86,1211.97 1796.45,1210.8 1797.03,1209.65 1797.62,1209.88 1798.21,1208.87 1798.79,1208.98 1799.38,1210.06 1799.97,1215.79 1800.55,1217.6 1801.14,1218.65 1801.73,1218.35 1802.31,1219.06 1802.9,1219.86 1803.48,1218.49 1804.07,1218.13 1804.66,1217.47 1805.24,1215.04 1805.83,1212.74 1806.42,1213.65 1807,1212.67 1807.59,1213.79 1808.18,1213.87 1808.76,1213.89 1809.35,1214.82 1809.94,1214.76 1810.52,1214.34 1811.11,1213.36 1811.69,1213.32 1812.28,1214.57 1812.87,1216 1813.45,1216.89 1814.04,1214.61 1814.63,1216.86 1815.21,1216.67 1815.8,1215.29 1816.39,1215.25 1816.97,1217.29 1817.56,1214.75 1818.14,1212.29 1818.73,1211.38 1819.32,1209.15 1819.9,1209.4 1820.49,1210.65 1821.08,1210.76 1821.66,1212.2 1822.25,1209.95 1822.84,1211.23 1823.42,1213.18 1824.01,1216.6 1824.6,1217.22 1825.18,1218.17 1825.77,1220.14 1826.35,1216.55 1826.94,1217.35 1827.53,1216.17 1828.11,1214.86 1828.7,1214.8 1829.29,1215.78 1829.87,1216.69 1830.46,1215.32 1831.05,1217.49 1831.63,1218.22 1832.22,1214.73 1832.81,1211.28 1833.39,1211.49 1833.98,1211.68 1834.56,1211.75 1835.15,1213 1835.74,1209.68 1836.32,1207.62 1836.91,1208.87 1837.5,1210.39 1838.08,1216.88 1838.67,1213.42 1839.26,1213.31 1839.84,1213.4 1840.43,1216.42 1841.01,1218.58 1841.6,1218.47 1842.19,1220.38 1842.77,1218.95 1843.36,1217.34 1843.95,1215.9 1844.53,1212.42 1845.12,1212.52 1845.71,1211.53 1846.29,1211.36 1846.88,1211.4 1847.47,1213.78 1848.05,1216.12 1848.64,1213.91 1849.22,1212.73 1849.81,1212.58 1850.4,1212.69 1850.98,1213.94 1851.57,1213.74 1852.16,1214.83 1852.74,1214.83 1853.33,1216.83 1853.92,1214.39 1854.5,1214.4 1855.09,1215.48 1855.68,1216.52 1856.26,1216.23 1856.85,1215.02 1857.43,1213.94 1858.02,1213.88 1858.61,1212.51 1859.19,1211.48 1859.78,1210.45 1860.37,1211.85 1860.95,1212.89 1861.54,1213.13 1862.13,1214.09 1862.71,1214.1 1863.3,1212.83 1863.88,1213.06 1864.47,1214.24 1865.06,1214.44 1865.64,1215.37 1866.23,1214.21 1866.82,1214.15 1867.4,1215.26 1867.99,1216.45 1868.58,1214.07 1869.16,1215.04 1869.75,1215.1 1870.34,1213.8 1870.92,1213.84 1871.51,1212.72 1872.09,1212.85 1872.68,1215.05 1873.27,1214.78 1873.85,1215.78 1874.44,1216.87 1875.03,1216.62 1875.61,1216.23 1876.2,1217.12 1876.79,1216.59 1877.37,1213.19 1877.96,1213.33 1878.55,1212.23 1879.13,1212.14 1879.72,1211.11 1880.3,1211.31 1880.89,1211.52 1881.48,1212.75 1882.06,1212.85 1882.65,1210.53 1883.24,1210.75 1883.82,1212.02 1884.41,1211.87 1885,1208.63 1885.58,1210.02 1886.17,1211.11 1886.76,1210.75 1887.34,1213.2 1887.93,1212.08 1888.51,1212.15 1889.1,1213.03 1889.69,1210.92 1890.27,1207.83 1890.86,1209.11 1891.45,1210.69 1892.03,1209.67 1892.62,1206.45 1893.21,1206.53 1893.79,1204.58 1894.38,1205.14 1894.96,1207.9 1895.55,1208.08 1896.14,1209.34 1896.72,1211.56 1897.31,1213.84 1897.9,1211.6 1898.48,1211.71 1899.07,1213.98 1899.66,1215.03 1900.24,1213.91 1900.83,1213.82 1901.42,1215.11 1902,1214.81 1902.59,1213.48 1903.17,1215.7 1903.76,1215.58 1904.35,1214.53 1904.93,1214.33 1905.52,1213.14 1906.11,1207.6 1906.69,1208.94 1907.28,1212.24 1907.87,1210.15 1908.45,1211.33 1909.04,1209.51 1909.63,1210.75 1910.21,1210.95 1910.8,1211.05 1911.38,1212.17 1911.97,1216.68 1912.56,1215.67 1913.14,1215.38 1913.73,1214.13 1914.32,1215.33 1914.9,1213.94 1915.49,1214.74 1916.08,1212.52 1916.66,1211.62 1917.25,1212.71 1917.83,1211.34 1918.42,1215.73 1919.01,1218.93 1919.59,1217.64 1920.18,1218.53 1920.77,1219.11 1921.35,1216.62 1921.94,1217.75 1922.53,1218.55 1923.11,1218.37 1923.7,1217.94 1924.29,1219.09 1924.87,1220.14 1925.46,1219.92 1926.04,1216.3 1926.63,1215.7 1927.22,1218.87 1927.8,1218.43 1928.39,1219.49 1928.98,1219.34 1929.56,1220.14 1930.15,1216.49 1930.74,1218.52 1931.32,1216.03 1931.91,1215.9 1932.5,1214.65 1933.08,1213.41 1933.67,1212.22 1934.25,1213.37 1934.84,1214.23 1935.43,1213.15 1936.01,1212.22 1936.6,1215.53 1937.19,1213.04 1937.77,1214.03 1938.36,1213.09 1938.95,1213.24 1939.53,1213.25 1940.12,1214.13 1940.71,1215.28 1941.29,1215.46 1941.88,1214.01 1942.46,1215.02 1943.05,1215.88 1943.64,1216.65 1944.22,1215.15 1944.81,1214.62 1945.4,1215.89 1945.98,1216.47 1946.57,1218.34 1947.16,1217.02 1947.74,1219.08 1948.33,1219.67 1948.91,1220.27 1949.5,1219.88 1950.09,1220.43 1950.67,1220.1 1951.26,1217.53 1951.85,1214.93 1952.43,1212.5 1953.02,1212.43 1953.61,1211.42 1954.19,1211.38 1954.78,1209.13 1955.37,1209.34 1955.95,1206.43 1956.54,1208.03 1957.12,1209.5 1957.71,1209.93 1958.3,1210.05 1958.88,1211.35 1959.47,1211.51 1960.06,1211.57 1960.64,1210.61 1961.23,1212.05 1961.82,1210.06 1962.4,1209.25 1962.99,1211.65 1963.58,1211.68 1964.16,1211.59 1964.75,1212.84 1965.33,1213.96 1965.92,1213.81 1966.51,1213.96 1967.09,1213.85 1967.68,1215.22 1968.27,1215.22 1968.85,1216.05 1969.44,1214.95 1970.03,1215 1970.61,1216.82 1971.2,1216.72 1971.78,1216.48 1972.37,1216.08 1972.96,1215.95 1973.54,1217.11 1974.13,1219.02 1974.72,1221.95 1975.3,1222.52 1975.89,1222.92 1976.48,1222.45 1977.06,1223.05 1977.65,1223.54 1978.24,1219.67 1978.82,1221.84 1979.41,1218.34 1979.99,1218.18 1980.58,1218.88 1981.17,1217.47 1981.75,1216.08 1982.34,1213.76 1982.93,1211.41 1983.51,1211.58 1984.1,1212.87 1984.69,1214.1 1985.27,1215.17 1985.86,1215.27 1986.45,1216.14 1987.03,1214.93 1987.62,1213.79 1988.2,1211.69 1988.79,1212.96 1989.38,1215.14 1989.96,1212.57 1990.55,1212.74 1991.14,1212.73 1991.72,1210.63 1992.31,1209.5 1992.9,1209.9 1993.48,1210.21 1994.07,1209.38 1994.65,1208.41 1995.24,1206.5 1995.83,1207.87 1996.41,1209.21 1997,1210.66 1997.59,1210.8 1998.17,1209.73 1998.76,1213.27 1999.35,1209.91 1999.93,1208.94 2000.52,1211.59 2001.11,1210.47 2001.69,1211.64 2002.28,1212.86 2002.86,1211.89 2003.45,1211.98 2004.04,1214.1 2004.62,1216.09 2005.21,1214.83 2005.8,1214.89 2006.38,1215.77 2006.97,1214.71 2007.56,1214.76 2008.14,1212.33 2008.73,1213.22 2009.32,1213.18 2009.9,1213.23 2010.49,1213.31 2011.07,1212.01 2011.66,1212.04 2012.25,1212.24 2012.83,1212.22 2013.42,1207.9 2014.01,1211.52 2014.59,1212.83 2015.18,1215.08 2015.77,1218.11 2016.35,1212.34 2016.94,1210.39 2017.53,1211.65 2018.11,1212.89 2018.7,1213.06 2019.28,1215.43 2019.87,1215.25 2020.46,1215.24 2021.04,1213.01 2021.63,1214.11 2022.22,1211.92 2022.8,1211.07 2023.39,1211.29 2023.98,1210.34 2024.56,1209.52 2025.15,1210.79 2025.73,1207.52 2026.32,1206.65 2026.91,1204.77 2027.49,1206.19 2028.08,1205.44 2028.67,1205.61 2029.25,1204.02 2029.84,1203.13 2030.43,1205.74 2031.01,1206.2 2031.6,1206.69 2032.19,1207.17 2032.77,1207.48 2033.36,1207.85 2033.94,1208.34 2034.53,1208.83 2035.12,1209.43 2035.7,1206.07 2036.29,1206.65 2036.88,1203.59 2037.46,1205.08 2038.05,1206.75 2038.64,1207.32 2039.22,1206.64 2039.81,1208.21 2040.4,1208.42 2040.98,1207.82 2041.57,1208.15 2042.15,1208.47 2042.74,1207.86 2043.33,1207.04 2043.91,1205.01 2044.5,1205.47 2045.09,1205.86 2045.67,1207.45 2046.26,1208.76 2046.85,1208.03 2047.43,1206.12 2048.02,1206.71 2048.6,1204.8 2049.19,1206.26 2049.78,1207.82 2050.36,1210.47 2050.95,1210.61 2051.54,1211.79 2052.12,1213.06 2052.71,1213.43 2053.3,1211.25 2053.88,1210.23 2054.47,1211.52 2055.06,1212.57 2055.64,1211.71 2056.23,1210.69 2056.81,1212.02 2057.4,1210.8 2057.99,1210.94 2058.57,1212.24 2059.16,1213.48 2059.75,1213.53 2060.33,1216.97 2060.92,1213.42 2061.51,1215.73 2062.09,1214.42 2062.68,1215.38 2063.27,1214.22 2063.85,1216.41 2064.44,1216.24 2065.02,1218.41 2065.61,1219.53 2066.2,1220.23 2066.78,1219.84 2067.37,1218.47 2067.96,1218.31 2068.54,1218.05 2069.13,1216.81 2069.72,1215.5 2070.3,1217.37 2070.89,1216.15 2071.48,1216.91 2072.06,1216.83 2072.65,1216.61 2073.23,1216.5 2073.82,1215.03 2074.41,1214.89 2074.99,1213.86 2075.58,1214.96 2076.17,1213.67 2076.75,1213.69 2077.34,1211.3 2077.93,1210.56 2078.51,1210.75 2079.1,1209.79 2079.68,1206.66 2080.27,1208.09 2080.86,1211.64 2081.44,1215.88 2082.03,1218.86 2082.62,1217.39 2083.2,1220.51 2083.79,1220.37 2084.38,1223.62 2084.96,1221.03 2085.55,1221.72 2086.14,1223.6 2086.72,1225.15 2087.31,1224.86 2087.89,1224.07 2088.48,1222.15 2089.07,1221.8 2089.65,1220.24 2090.24,1217.75 2090.83,1217.56 2091.41,1213.95 2092,1215.3 2092.59,1217.41 2093.17,1216.14 2093.76,1215.83 2094.35,1214.63 2094.93,1212.07 2095.52,1213.42 2096.1,1212.49 2096.69,1212.44 2097.28,1211.29 2097.86,1212.61 2098.45,1212.75 2099.04,1211.73 2099.62,1211.7 2100.21,1212.83 2100.8,1214.09 2101.38,1213.72 2101.97,1214.8 2102.55,1214.34 2103.14,1216.62 2103.73,1215.21 2104.31,1213.72 2104.9,1213.73 2105.49,1211.45 2106.07,1212.66 2106.66,1215.7 2107.25,1214.28 2107.83,1214.2 2108.42,1212.16 2109.01,1214.7 2109.59,1212.35 2110.18,1213.46 2110.76,1214.59 2111.35,1213.23 2111.94,1213.2 2112.52,1213.35 2113.11,1212.44 2113.7,1212.44 2114.28,1213.64 2114.87,1212.55 2115.46,1211.44 2116.04,1211.26 2116.63,1213.54 2117.22,1216.65 2117.8,1215.46 2118.39,1215.58 2118.97,1215.5 2119.56,1216.13 2120.15,1218.26 2120.73,1218.03 2121.32,1215.68 2121.91,1217.73 2122.49,1218.33 2123.08,1218.31 2123.67,1215.89 2124.25,1214.54 2124.84,1214.57 2125.42,1214.33 2126.01,1212.94 2126.6,1211.52 2127.18,1211.5 2127.77,1212.75 2128.36,1214.08 2128.94,1211.7 2129.53,1211.67 2130.12,1208.2 2130.7,1207.23 2131.29,1206.3 2131.88,1206.22 2132.46,1205.65 2133.05,1204.75 2133.63,1202.84 2134.22,1203.38 2134.81,1202.88 2135.39,1201.2 2135.98,1202.05 2136.57,1203.82 2137.15,1204.26 2137.74,1203.65 2138.33,1204.37 2138.91,1207.17 2139.5,1209.51 2140.09,1207.5 2140.67,1205.61 2141.26,1204.92 2141.84,1206.44 2142.43,1206.78 2143.02,1208.36 2143.6,1208.6 2144.19,1208.63 2144.78,1208.98 2145.36,1209.48 2145.95,1207.5 2146.54,1206.8 2147.12,1207.29 2147.71,1207.61 2148.3,1210.31 2148.88,1209.33 2149.47,1210.55 2150.05,1213.98 2150.64,1213.78 2151.23,1215.85 2151.81,1215.57 2152.4,1214.37 2152.99,1214.28 2153.57,1214.17 2154.16,1213.17 2154.75,1214.34 2155.33,1215.24 2155.92,1215.24 2156.5,1216.48 2157.09,1217.39 2157.68,1216.28 2158.26,1216.32 \"/>\n<path clip-path=\"url(#clip312)\" d=\"M986.025 1213.55 L986.612 1213.55 L987.198 1213.55 L987.785 1213.55 L988.371 1213.55 L988.957 1213.55 L989.544 1213.55 L990.13 1213.55 L990.717 1213.55 L991.303 1213.55 L991.889 1213.55 L992.476 1213.55 L993.062 1213.55 L993.649 1213.55 L994.235 1213.55 L994.822 1213.55 L995.408 1213.55 L995.994 1213.55 L996.581 1213.55 L997.167 1213.55 L997.754 1213.55 L998.34 1213.55 L998.926 1213.55 L999.513 1213.55 L1000.1 1213.55 L1000.69 1213.55 L1001.27 1213.55 L1001.86 1213.55 L1002.44 1213.55 L1003.03 1213.55 L1003.62 1213.55 L1004.2 1213.55 L1004.79 1213.55 L1005.38 1213.55 L1005.96 1213.55 L1006.55 1213.55 L1007.14 1213.55 L1007.72 1213.55 L1008.31 1213.55 L1008.9 1213.55 L1009.48 1213.55 L1010.07 1213.55 L1010.65 1213.55 L1011.24 1213.55 L1011.83 1213.55 L1012.41 1213.55 L1013 1213.55 L1013.59 1213.55 L1014.17 1213.55 L1014.76 1213.55 L1015.35 1213.55 L1015.93 1213.55 L1016.52 1213.55 L1017.11 1213.55 L1017.69 1213.55 L1018.28 1213.55 L1018.86 1213.55 L1019.45 1213.55 L1020.04 1213.55 L1020.62 1213.55 L1021.21 1213.55 L1021.8 1213.55 L1022.38 1213.55 L1022.97 1213.55 L1023.56 1213.55 L1024.14 1213.55 L1024.73 1213.55 L1025.32 1213.55 L1025.9 1213.55 L1026.49 1213.55 L1027.07 1213.55 L1027.66 1213.55 L1028.25 1213.55 L1028.83 1213.55 L1029.42 1213.55 L1030.01 1213.55 L1030.59 1213.55 L1031.18 1213.55 L1031.77 1213.55 L1032.35 1213.55 L1032.94 1213.55 L1033.52 1213.55 L1034.11 1213.55 L1034.7 1213.55 L1035.28 1213.55 L1035.87 1213.55 L1036.46 1213.55 L1037.04 1213.55 L1037.63 1213.55 L1038.22 1213.55 L1038.8 1213.55 L1039.39 1213.55 L1039.98 1213.55 L1040.56 1213.55 L1041.15 1213.55 L1041.73 1213.55 L1042.32 1213.55 L1042.91 1213.55 L1043.49 1213.55 L1044.08 1213.55 L1044.67 1213.55 L1045.25 1213.55 L1045.84 1213.55 L1046.43 1213.55 L1047.01 1213.55 L1047.6 1213.55 L1048.19 1213.55 L1048.77 1213.55 L1049.36 1213.55 L1049.94 1213.55 L1050.53 1213.55 L1051.12 1213.55 L1051.7 1213.55 L1052.29 1213.55 L1052.88 1213.55 L1053.46 1213.55 L1054.05 1213.55 L1054.64 1213.55 L1055.22 1213.55 L1055.81 1213.55 L1056.39 1213.55 L1056.98 1213.55 L1057.57 1213.55 L1058.15 1213.55 L1058.74 1213.55 L1059.33 1213.55 L1059.91 1213.55 L1060.5 1213.55 L1061.09 1213.55 L1061.67 1213.55 L1062.26 1213.55 L1062.85 1213.55 L1063.43 1213.55 L1064.02 1213.55 L1064.6 1213.55 L1065.19 1213.55 L1065.78 1213.55 L1066.36 1213.55 L1066.95 1213.55 L1067.54 1213.55 L1068.12 1213.55 L1068.71 1213.55 L1069.3 1213.55 L1069.88 1213.55 L1070.47 1213.55 L1071.06 1213.55 L1071.64 1213.55 L1072.23 1213.55 L1072.81 1213.55 L1073.4 1213.55 L1073.99 1213.55 L1074.57 1213.55 L1075.16 1213.55 L1075.75 1213.55 L1076.33 1213.55 L1076.92 1213.55 L1077.51 1213.55 L1078.09 1213.55 L1078.68 1213.55 L1079.26 1213.55 L1079.85 1213.55 L1080.44 1213.55 L1081.02 1213.55 L1081.61 1213.55 L1082.2 1213.55 L1082.78 1213.55 L1083.37 1213.55 L1083.96 1213.55 L1084.54 1213.55 L1085.13 1213.55 L1085.72 1213.55 L1086.3 1213.55 L1086.89 1213.55 L1087.47 1213.55 L1088.06 1213.55 L1088.65 1213.55 L1089.23 1213.55 L1089.82 1213.55 L1090.41 1213.55 L1090.99 1213.55 L1091.58 1213.55 L1092.17 1213.55 L1092.75 1213.55 L1093.34 1213.55 L1093.93 1213.55 L1094.51 1213.55 L1095.1 1213.55 L1095.68 1213.55 L1096.27 1213.55 L1096.86 1213.55 L1097.44 1213.55 L1098.03 1213.55 L1098.62 1213.55 L1099.2 1213.55 L1099.79 1213.55 L1100.38 1213.55 L1100.96 1213.55 L1101.55 1213.55 L1102.14 1213.55 L1102.72 1213.55 L1103.31 1213.55 L1103.89 1213.55 L1104.48 1213.55 L1105.07 1213.55 L1105.65 1213.55 L1106.24 1213.55 L1106.83 1213.55 L1107.41 1213.55 L1108 1213.55 L1108.59 1213.55 L1109.17 1213.55 L1109.76 1213.55 L1110.34 1213.55 L1110.93 1213.55 L1111.52 1213.55 L1112.1 1213.55 L1112.69 1213.55 L1113.28 1213.55 L1113.86 1213.55 L1114.45 1213.55 L1115.04 1213.55 L1115.62 1213.55 L1116.21 1213.55 L1116.8 1213.55 L1117.38 1213.55 L1117.97 1213.55 L1118.55 1213.55 L1119.14 1213.55 L1119.73 1213.55 L1120.31 1213.55 L1120.9 1213.55 L1121.49 1213.55 L1122.07 1213.55 L1122.66 1213.55 L1123.25 1213.55 L1123.83 1213.55 L1124.42 1213.55 L1125.01 1213.55 L1125.59 1213.55 L1126.18 1213.55 L1126.76 1213.55 L1127.35 1213.55 L1127.94 1213.55 L1128.52 1213.55 L1129.11 1213.55 L1129.7 1213.55 L1130.28 1213.55 L1130.87 1213.55 L1131.46 1213.55 L1132.04 1213.55 L1132.63 1213.55 L1133.21 1213.55 L1133.8 1213.55 L1134.39 1213.55 L1134.97 1213.55 L1135.56 1213.55 L1136.15 1213.55 L1136.73 1213.55 L1137.32 1213.55 L1137.91 1213.55 L1138.49 1213.55 L1139.08 1213.55 L1139.67 1213.55 L1140.25 1213.55 L1140.84 1213.55 L1141.42 1213.55 L1142.01 1213.55 L1142.6 1213.55 L1143.18 1213.55 L1143.77 1213.55 L1144.36 1213.55 L1144.94 1213.55 L1145.53 1213.55 L1146.12 1213.55 L1146.7 1213.55 L1147.29 1213.55 L1147.88 1213.55 L1148.46 1213.55 L1149.05 1213.55 L1149.63 1213.55 L1150.22 1213.55 L1150.81 1213.55 L1151.39 1213.55 L1151.98 1213.55 L1152.57 1213.55 L1153.15 1213.55 L1153.74 1213.55 L1154.33 1213.55 L1154.91 1213.55 L1155.5 1213.55 L1156.09 1213.55 L1156.67 1213.55 L1157.26 1213.55 L1157.84 1213.55 L1158.43 1213.55 L1159.02 1213.55 L1159.6 1213.55 L1160.19 1213.55 L1160.78 1213.55 L1161.36 1213.55 L1161.95 1213.55 L1162.54 1213.55 L1163.12 1213.55 L1163.71 1213.55 L1164.29 1213.55 L1164.88 1213.55 L1165.47 1213.55 L1166.05 1213.55 L1166.64 1213.55 L1167.23 1213.55 L1167.81 1213.55 L1168.4 1213.55 L1168.99 1213.55 L1169.57 1213.55 L1170.16 1213.55 L1170.75 1213.55 L1171.33 1213.55 L1171.92 1213.55 L1172.5 1213.55 L1173.09 1213.55 L1173.68 1213.55 L1174.26 1213.55 L1174.85 1213.55 L1175.44 1213.55 L1176.02 1213.55 L1176.61 1213.55 L1177.2 1213.55 L1177.78 1213.55 L1178.37 1213.55 L1178.96 1213.55 L1179.54 1213.55 L1180.13 1213.55 L1180.71 1213.55 L1181.3 1213.55 L1181.89 1213.55 L1182.47 1213.55 L1183.06 1213.55 L1183.65 1213.55 L1184.23 1213.55 L1184.82 1213.55 L1185.41 1213.55 L1185.99 1213.55 L1186.58 1213.55 L1187.16 1213.55 L1187.75 1213.55 L1188.34 1213.55 L1188.92 1213.55 L1189.51 1213.55 L1190.1 1213.55 L1190.68 1213.55 L1191.27 1213.55 L1191.86 1213.55 L1192.44 1213.55 L1193.03 1213.55 L1193.62 1213.55 L1194.2 1213.55 L1194.79 1213.55 L1195.37 1213.55 L1195.96 1213.55 L1196.55 1213.55 L1197.13 1213.55 L1197.72 1213.55 L1198.31 1213.55 L1198.89 1213.55 L1199.48 1213.55 L1200.07 1213.55 L1200.65 1213.55 L1201.24 1213.55 L1201.83 1213.55 L1202.41 1213.55 L1203 1213.55 L1203.58 1213.55 L1204.17 1213.55 L1204.76 1213.55 L1205.34 1213.55 L1205.93 1213.55 L1206.52 1213.55 L1207.1 1213.55 L1207.69 1213.55 L1208.28 1213.55 L1208.86 1213.55 L1209.45 1213.55 L1210.03 1213.55 L1210.62 1213.55 L1211.21 1213.55 L1211.79 1213.55 L1212.38 1213.55 L1212.97 1213.55 L1213.55 1213.55 L1214.14 1213.55 L1214.73 1213.55 L1215.31 1213.55 L1215.9 1213.55 L1216.49 1213.55 L1217.07 1213.55 L1217.66 1213.55 L1218.24 1213.55 L1218.83 1213.55 L1219.42 1213.55 L1220 1213.55 L1220.59 1213.55 L1221.18 1213.55 L1221.76 1213.55 L1222.35 1213.55 L1222.94 1213.55 L1223.52 1213.55 L1224.11 1213.55 L1224.7 1213.55 L1225.28 1213.55 L1225.87 1213.55 L1226.45 1213.55 L1227.04 1213.55 L1227.63 1213.55 L1228.21 1213.55 L1228.8 1213.55 L1229.39 1213.55 L1229.97 1213.55 L1230.56 1213.55 L1231.15 1213.55 L1231.73 1213.55 L1232.32 1213.55 L1232.91 1213.55 L1233.49 1213.55 L1234.08 1213.55 L1234.66 1213.55 L1235.25 1213.55 L1235.84 1213.55 L1236.42 1213.55 L1237.01 1213.55 L1237.6 1213.55 L1238.18 1213.55 L1238.77 1213.55 L1239.36 1213.55 L1239.94 1213.55 L1240.53 1213.55 L1241.11 1213.55 L1241.7 1213.55 L1242.29 1213.55 L1242.87 1213.55 L1243.46 1213.55 L1244.05 1213.55 L1244.63 1213.55 L1245.22 1213.55 L1245.81 1213.55 L1246.39 1213.55 L1246.98 1213.55 L1247.57 1213.55 L1248.15 1213.55 L1248.74 1213.55 L1249.32 1213.55 L1249.91 1213.55 L1250.5 1213.55 L1251.08 1213.55 L1251.67 1213.55 L1252.26 1213.55 L1252.84 1213.55 L1253.43 1213.55 L1254.02 1213.55 L1254.6 1213.55 L1255.19 1213.55 L1255.78 1213.55 L1256.36 1213.55 L1256.95 1213.55 L1257.53 1213.55 L1258.12 1213.55 L1258.71 1213.55 L1259.29 1213.55 L1259.88 1213.55 L1260.47 1213.55 L1261.05 1213.55 L1261.64 1213.55 L1262.23 1213.55 L1262.81 1213.55 L1263.4 1213.55 L1263.98 1213.55 L1264.57 1213.55 L1265.16 1213.55 L1265.74 1213.55 L1266.33 1213.55 L1266.92 1213.55 L1267.5 1213.55 L1268.09 1213.55 L1268.68 1213.55 L1269.26 1213.55 L1269.85 1213.55 L1270.44 1213.55 L1271.02 1213.55 L1271.61 1213.55 L1272.19 1213.55 L1272.78 1213.55 L1273.37 1213.55 L1273.95 1213.55 L1274.54 1213.55 L1275.13 1213.55 L1275.71 1213.55 L1276.3 1213.55 L1276.89 1213.55 L1277.47 1213.55 L1278.06 1213.55 L1278.65 1213.55 L1279.23 1213.55 L1279.82 1213.55 L1280.4 1213.55 L1280.99 1213.55 L1281.58 1213.55 L1282.16 1213.55 L1282.75 1213.55 L1283.34 1213.55 L1283.92 1213.55 L1284.51 1213.55 L1285.1 1213.55 L1285.68 1213.55 L1286.27 1213.55 L1286.86 1213.55 L1287.44 1213.55 L1288.03 1213.55 L1288.61 1213.55 L1289.2 1213.55 L1289.79 1213.55 L1290.37 1213.55 L1290.96 1213.55 L1291.55 1213.55 L1292.13 1213.55 L1292.72 1213.55 L1293.31 1213.55 L1293.89 1213.55 L1294.48 1213.55 L1295.06 1213.55 L1295.65 1213.55 L1296.24 1213.55 L1296.82 1213.55 L1297.41 1213.55 L1298 1213.55 L1298.58 1213.55 L1299.17 1213.55 L1299.76 1213.55 L1300.34 1213.55 L1300.93 1213.55 L1301.52 1213.55 L1302.1 1213.55 L1302.69 1213.55 L1303.27 1213.55 L1303.86 1213.55 L1304.45 1213.55 L1305.03 1213.55 L1305.62 1213.55 L1306.21 1213.55 L1306.79 1213.55 L1307.38 1213.55 L1307.97 1213.55 L1308.55 1213.55 L1309.14 1213.55 L1309.73 1213.55 L1310.31 1213.55 L1310.9 1213.55 L1311.48 1213.55 L1312.07 1213.55 L1312.66 1213.55 L1313.24 1213.55 L1313.83 1213.55 L1314.42 1213.55 L1315 1213.55 L1315.59 1213.55 L1316.18 1213.55 L1316.76 1213.55 L1317.35 1213.55 L1317.93 1213.55 L1318.52 1213.55 L1319.11 1213.55 L1319.69 1213.55 L1320.28 1213.55 L1320.87 1213.55 L1321.45 1213.55 L1322.04 1213.55 L1322.63 1213.55 L1323.21 1213.55 L1323.8 1213.55 L1324.39 1213.55 L1324.97 1213.55 L1325.56 1213.55 L1326.14 1213.55 L1326.73 1213.55 L1327.32 1213.55 L1327.9 1213.55 L1328.49 1213.55 L1329.08 1213.55 L1329.66 1213.55 L1330.25 1213.55 L1330.84 1213.55 L1331.42 1213.55 L1332.01 1213.55 L1332.6 1213.55 L1333.18 1213.55 L1333.77 1213.55 L1334.35 1213.55 L1334.94 1213.55 L1335.53 1213.55 L1336.11 1213.55 L1336.7 1213.55 L1337.29 1213.55 L1337.87 1213.55 L1338.46 1213.55 L1339.05 1213.55 L1339.63 1213.55 L1340.22 1213.55 L1340.8 1213.55 L1341.39 1213.55 L1341.98 1213.55 L1342.56 1213.55 L1343.15 1213.55 L1343.74 1213.55 L1344.32 1213.55 L1344.91 1213.55 L1345.5 1213.55 L1346.08 1213.55 L1346.67 1213.55 L1347.26 1213.55 L1347.84 1213.55 L1348.43 1213.55 L1349.01 1213.55 L1349.6 1213.55 L1350.19 1213.55 L1350.77 1213.55 L1351.36 1213.55 L1351.95 1213.55 L1352.53 1213.55 L1353.12 1213.55 L1353.71 1213.55 L1354.29 1213.55 L1354.88 1213.55 L1355.47 1213.55 L1356.05 1213.55 L1356.64 1213.55 L1357.22 1213.55 L1357.81 1213.55 L1358.4 1213.55 L1358.98 1213.55 L1359.57 1213.55 L1360.16 1213.55 L1360.74 1213.55 L1361.33 1213.55 L1361.92 1213.55 L1362.5 1213.55 L1363.09 1213.55 L1363.68 1213.55 L1364.26 1213.55 L1364.85 1213.55 L1365.43 1213.55 L1366.02 1213.55 L1366.61 1213.55 L1367.19 1213.55 L1367.78 1213.55 L1368.37 1213.55 L1368.95 1213.55 L1369.54 1213.55 L1370.13 1213.55 L1370.71 1213.55 L1371.3 1213.55 L1371.88 1213.55 L1372.47 1213.55 L1373.06 1213.55 L1373.64 1213.55 L1374.23 1213.55 L1374.82 1213.55 L1375.4 1213.55 L1375.99 1213.55 L1376.58 1213.55 L1377.16 1213.55 L1377.75 1213.55 L1378.34 1213.55 L1378.92 1213.55 L1379.51 1213.55 L1380.09 1213.55 L1380.68 1213.55 L1381.27 1213.55 L1381.85 1213.55 L1382.44 1213.55 L1383.03 1213.55 L1383.61 1213.55 L1384.2 1213.55 L1384.79 1213.55 L1385.37 1213.55 L1385.96 1213.55 L1386.55 1213.55 L1387.13 1213.55 L1387.72 1213.55 L1388.3 1213.55 L1388.89 1213.55 L1389.48 1213.55 L1390.06 1213.55 L1390.65 1213.55 L1391.24 1213.55 L1391.82 1213.55 L1392.41 1213.55 L1393 1213.55 L1393.58 1213.55 L1394.17 1213.55 L1394.75 1213.55 L1395.34 1213.55 L1395.93 1213.55 L1396.51 1213.55 L1397.1 1213.55 L1397.69 1213.55 L1398.27 1213.55 L1398.86 1213.55 L1399.45 1213.55 L1400.03 1213.55 L1400.62 1213.55 L1401.21 1213.55 L1401.79 1213.55 L1402.38 1213.55 L1402.96 1213.55 L1403.55 1213.55 L1404.14 1213.55 L1404.72 1213.55 L1405.31 1213.55 L1405.9 1213.55 L1406.48 1213.55 L1407.07 1213.55 L1407.66 1213.55 L1408.24 1213.55 L1408.83 1213.55 L1409.42 1213.55 L1410 1213.55 L1410.59 1213.55 L1411.17 1213.55 L1411.76 1213.55 L1412.35 1213.55 L1412.93 1213.55 L1413.52 1213.55 L1414.11 1213.55 L1414.69 1213.55 L1415.28 1213.55 L1415.87 1213.55 L1416.45 1213.55 L1417.04 1213.55 L1417.63 1213.55 L1418.21 1213.55 L1418.8 1213.55 L1419.38 1213.55 L1419.97 1213.55 L1420.56 1213.55 L1421.14 1213.55 L1421.73 1213.55 L1422.32 1213.55 L1422.9 1213.55 L1423.49 1213.55 L1424.08 1213.55 L1424.66 1213.55 L1425.25 1213.55 L1425.83 1213.55 L1426.42 1213.55 L1427.01 1213.55 L1427.59 1213.55 L1428.18 1213.55 L1428.77 1213.55 L1429.35 1213.55 L1429.94 1213.55 L1430.53 1213.55 L1431.11 1213.55 L1431.7 1213.55 L1432.29 1213.55 L1432.87 1213.55 L1433.46 1213.55 L1434.04 1213.55 L1434.63 1213.55 L1435.22 1213.55 L1435.8 1213.55 L1436.39 1213.55 L1436.98 1213.55 L1437.56 1213.55 L1438.15 1213.55 L1438.74 1213.55 L1439.32 1213.55 L1439.91 1213.55 L1440.5 1213.55 L1441.08 1213.55 L1441.67 1213.55 L1442.25 1213.55 L1442.84 1213.55 L1443.43 1213.55 L1444.01 1213.55 L1444.6 1213.55 L1445.19 1213.55 L1445.77 1213.55 L1446.36 1213.55 L1446.95 1213.55 L1447.53 1213.55 L1448.12 1213.55 L1448.7 1213.55 L1449.29 1213.55 L1449.88 1213.55 L1450.46 1213.55 L1451.05 1213.55 L1451.64 1213.55 L1452.22 1213.55 L1452.81 1213.55 L1453.4 1213.55 L1453.98 1213.55 L1454.57 1213.55 L1455.16 1213.55 L1455.74 1213.55 L1456.33 1213.55 L1456.91 1213.55 L1457.5 1213.55 L1458.09 1213.55 L1458.67 1213.55 L1459.26 1213.55 L1459.85 1213.55 L1460.43 1213.55 L1461.02 1213.55 L1461.61 1213.55 L1462.19 1213.55 L1462.78 1213.55 L1463.37 1213.55 L1463.95 1213.55 L1464.54 1213.55 L1465.12 1213.55 L1465.71 1213.55 L1466.3 1213.55 L1466.88 1213.55 L1467.47 1213.55 L1468.06 1213.55 L1468.64 1213.55 L1469.23 1213.55 L1469.82 1213.55 L1470.4 1213.55 L1470.99 1213.55 L1471.57 1213.55 L1472.16 1213.55 L1472.75 1213.55 L1473.33 1213.55 L1473.92 1213.55 L1474.51 1213.55 L1475.09 1213.55 L1475.68 1213.55 L1476.27 1213.55 L1476.85 1213.55 L1477.44 1213.55 L1478.03 1213.55 L1478.61 1213.55 L1479.2 1213.55 L1479.78 1213.55 L1480.37 1213.55 L1480.96 1213.55 L1481.54 1213.55 L1482.13 1213.55 L1482.72 1213.55 L1483.3 1213.55 L1483.89 1213.55 L1484.48 1213.55 L1485.06 1213.55 L1485.65 1213.55 L1486.24 1213.55 L1486.82 1213.55 L1487.41 1213.55 L1487.99 1213.55 L1488.58 1213.55 L1489.17 1213.55 L1489.75 1213.55 L1490.34 1213.55 L1490.93 1213.55 L1491.51 1213.55 L1492.1 1213.55 L1492.69 1213.55 L1493.27 1213.55 L1493.86 1213.55 L1494.45 1213.55 L1495.03 1213.55 L1495.62 1213.55 L1496.2 1213.55 L1496.79 1213.55 L1497.38 1213.55 L1497.96 1213.55 L1498.55 1213.55 L1499.14 1213.55 L1499.72 1213.55 L1500.31 1213.55 L1500.9 1213.55 L1501.48 1213.55 L1502.07 1213.55 L1502.65 1213.55 L1503.24 1213.55 L1503.83 1213.55 L1504.41 1213.55 L1505 1213.55 L1505.59 1213.55 L1506.17 1213.55 L1506.76 1213.55 L1507.35 1213.55 L1507.93 1213.55 L1508.52 1213.55 L1509.11 1213.55 L1509.69 1213.55 L1510.28 1213.55 L1510.86 1213.55 L1511.45 1213.55 L1512.04 1213.55 L1512.62 1213.55 L1513.21 1213.55 L1513.8 1213.55 L1514.38 1213.55 L1514.97 1213.55 L1515.56 1213.55 L1516.14 1213.55 L1516.73 1213.55 L1517.32 1213.55 L1517.9 1213.55 L1518.49 1213.55 L1519.07 1213.55 L1519.66 1213.55 L1520.25 1213.55 L1520.83 1213.55 L1521.42 1213.55 L1522.01 1213.55 L1522.59 1213.55 L1523.18 1213.55 L1523.77 1213.55 L1524.35 1213.55 L1524.94 1213.55 L1525.52 1213.55 L1526.11 1213.55 L1526.7 1213.55 L1527.28 1213.55 L1527.87 1213.55 L1528.46 1213.55 L1529.04 1213.55 L1529.63 1213.55 L1530.22 1213.55 L1530.8 1213.55 L1531.39 1213.55 L1531.98 1213.55 L1532.56 1213.55 L1533.15 1213.55 L1533.73 1213.55 L1534.32 1213.55 L1534.91 1213.55 L1535.49 1213.55 L1536.08 1213.55 L1536.67 1213.55 L1537.25 1213.55 L1537.84 1213.55 L1538.43 1213.55 L1539.01 1213.55 L1539.6 1213.55 L1540.19 1213.55 L1540.77 1213.55 L1541.36 1213.55 L1541.94 1213.55 L1542.53 1213.55 L1543.12 1213.55 L1543.7 1213.55 L1544.29 1213.55 L1544.88 1213.55 L1545.46 1213.55 L1546.05 1213.55 L1546.64 1213.55 L1547.22 1213.55 L1547.81 1213.55 L1548.4 1213.55 L1548.98 1213.55 L1549.57 1213.55 L1550.15 1213.55 L1550.74 1213.55 L1551.33 1213.55 L1551.91 1213.55 L1552.5 1213.55 L1553.09 1213.55 L1553.67 1213.55 L1554.26 1213.55 L1554.85 1213.55 L1555.43 1213.55 L1556.02 1213.55 L1556.6 1213.55 L1557.19 1213.55 L1557.78 1213.55 L1558.36 1213.55 L1558.95 1213.55 L1559.54 1213.55 L1560.12 1213.55 L1560.71 1213.55 L1561.3 1213.55 L1561.88 1213.55 L1562.47 1213.55 L1563.06 1213.55 L1563.64 1213.55 L1564.23 1213.55 L1564.81 1213.55 L1565.4 1213.55 L1565.99 1213.55 L1566.57 1213.55 L1567.16 1213.55 L1567.75 1213.55 L1568.33 1213.55 L1568.92 1213.55 L1569.51 1213.55 L1570.09 1213.55 L1570.68 1213.55 L1571.27 1213.55 L1571.85 1213.55 L1572.44 1213.55 L1573.02 1213.55 L1573.61 1213.55 L1574.2 1213.55 L1574.78 1213.55 L1575.37 1213.55 L1575.96 1213.55 L1576.54 1213.55 L1577.13 1213.55 L1577.72 1213.55 L1578.3 1213.55 L1578.89 1213.55 L1579.47 1213.55 L1580.06 1213.55 L1580.65 1213.55 L1581.23 1213.55 L1581.82 1213.55 L1582.41 1213.55 L1582.99 1213.55 L1583.58 1213.55 L1584.17 1213.55 L1584.75 1213.55 L1585.34 1213.55 L1585.93 1213.55 L1586.51 1213.55 L1587.1 1213.55 L1587.68 1213.55 L1588.27 1213.55 L1588.86 1213.55 L1589.44 1213.55 L1590.03 1213.55 L1590.62 1213.55 L1591.2 1213.55 L1591.79 1213.55 L1592.38 1213.55 L1592.96 1213.55 L1593.55 1213.55 L1594.14 1213.55 L1594.72 1213.55 L1595.31 1213.55 L1595.89 1213.55 L1596.48 1213.55 L1597.07 1213.55 L1597.65 1213.55 L1598.24 1213.55 L1598.83 1213.55 L1599.41 1213.55 L1600 1213.55 L1600.59 1213.55 L1601.17 1213.55 L1601.76 1213.55 L1602.34 1213.55 L1602.93 1213.55 L1603.52 1213.55 L1604.1 1213.55 L1604.69 1213.55 L1605.28 1213.55 L1605.86 1213.55 L1606.45 1213.55 L1607.04 1213.55 L1607.62 1213.55 L1608.21 1213.55 L1608.8 1213.55 L1609.38 1213.55 L1609.97 1213.55 L1610.55 1213.55 L1611.14 1213.55 L1611.73 1213.55 L1612.31 1213.55 L1612.9 1213.55 L1613.49 1213.55 L1614.07 1213.55 L1614.66 1213.55 L1615.25 1213.55 L1615.83 1213.55 L1616.42 1213.55 L1617.01 1213.55 L1617.59 1213.55 L1618.18 1213.55 L1618.76 1213.55 L1619.35 1213.55 L1619.94 1213.55 L1620.52 1213.55 L1621.11 1213.55 L1621.7 1213.55 L1622.28 1213.55 L1622.87 1213.55 L1623.46 1213.55 L1624.04 1213.55 L1624.63 1213.55 L1625.22 1213.55 L1625.8 1213.55 L1626.39 1213.55 L1626.97 1213.55 L1627.56 1213.55 L1628.15 1213.55 L1628.73 1213.55 L1629.32 1213.55 L1629.91 1213.55 L1630.49 1213.55 L1631.08 1213.55 L1631.67 1213.55 L1632.25 1213.55 L1632.84 1213.55 L1633.42 1213.55 L1634.01 1213.55 L1634.6 1213.55 L1635.18 1213.55 L1635.77 1213.55 L1636.36 1213.55 L1636.94 1213.55 L1637.53 1213.55 L1638.12 1213.55 L1638.7 1213.55 L1639.29 1213.55 L1639.88 1213.55 L1640.46 1213.55 L1641.05 1213.55 L1641.63 1213.55 L1642.22 1213.55 L1642.81 1213.55 L1643.39 1213.55 L1643.98 1213.55 L1644.57 1213.55 L1645.15 1213.55 L1645.74 1213.55 L1646.33 1213.55 L1646.91 1213.55 L1647.5 1213.55 L1648.09 1213.55 L1648.67 1213.55 L1649.26 1213.55 L1649.84 1213.55 L1650.43 1213.55 L1651.02 1213.55 L1651.6 1213.55 L1652.19 1213.55 L1652.78 1213.55 L1653.36 1213.55 L1653.95 1213.55 L1654.54 1213.55 L1655.12 1213.55 L1655.71 1213.55 L1656.29 1213.55 L1656.88 1213.55 L1657.47 1213.55 L1658.05 1213.55 L1658.64 1213.55 L1659.23 1213.55 L1659.81 1213.55 L1660.4 1213.55 L1660.99 1213.55 L1661.57 1213.55 L1662.16 1213.55 L1662.75 1213.55 L1663.33 1213.55 L1663.92 1213.55 L1664.5 1213.55 L1665.09 1213.55 L1665.68 1213.55 L1666.26 1213.55 L1666.85 1213.55 L1667.44 1213.55 L1668.02 1213.55 L1668.61 1213.55 L1669.2 1213.55 L1669.78 1213.55 L1670.37 1213.55 L1670.96 1213.55 L1671.54 1213.55 L1672.13 1213.55 L1672.71 1213.55 L1673.3 1213.55 L1673.89 1213.55 L1674.47 1213.55 L1675.06 1213.55 L1675.65 1213.55 L1676.23 1213.55 L1676.82 1213.55 L1677.41 1213.55 L1677.99 1213.55 L1678.58 1213.55 L1679.17 1213.55 L1679.75 1213.55 L1680.34 1213.55 L1680.92 1213.55 L1681.51 1213.55 L1682.1 1213.55 L1682.68 1213.55 L1683.27 1213.55 L1683.86 1213.55 L1684.44 1213.55 L1685.03 1213.55 L1685.62 1213.55 L1686.2 1213.55 L1686.79 1213.55 L1687.37 1213.55 L1687.96 1213.55 L1688.55 1213.55 L1689.13 1213.55 L1689.72 1213.55 L1690.31 1213.55 L1690.89 1213.55 L1691.48 1213.55 L1692.07 1213.55 L1692.65 1213.55 L1693.24 1213.55 L1693.83 1213.55 L1694.41 1213.55 L1695 1213.55 L1695.58 1213.55 L1696.17 1213.55 L1696.76 1213.55 L1697.34 1213.55 L1697.93 1213.55 L1698.52 1213.55 L1699.1 1213.55 L1699.69 1213.55 L1700.28 1213.55 L1700.86 1213.55 L1701.45 1213.55 L1702.04 1213.55 L1702.62 1213.55 L1703.21 1213.55 L1703.79 1213.55 L1704.38 1213.55 L1704.97 1213.55 L1705.55 1213.55 L1706.14 1213.55 L1706.73 1213.55 L1707.31 1213.55 L1707.9 1213.55 L1708.49 1213.55 L1709.07 1213.55 L1709.66 1213.55 L1710.24 1213.55 L1710.83 1213.55 L1711.42 1213.55 L1712 1213.55 L1712.59 1213.55 L1713.18 1213.55 L1713.76 1213.55 L1714.35 1213.55 L1714.94 1213.55 L1715.52 1213.55 L1716.11 1213.55 L1716.7 1213.55 L1717.28 1213.55 L1717.87 1213.55 L1718.45 1213.55 L1719.04 1213.55 L1719.63 1213.55 L1720.21 1213.55 L1720.8 1213.55 L1721.39 1213.55 L1721.97 1213.55 L1722.56 1213.55 L1723.15 1213.55 L1723.73 1213.55 L1724.32 1213.55 L1724.91 1213.55 L1725.49 1213.55 L1726.08 1213.55 L1726.66 1213.55 L1727.25 1213.55 L1727.84 1213.55 L1728.42 1213.55 L1729.01 1213.55 L1729.6 1213.55 L1730.18 1213.55 L1730.77 1213.55 L1731.36 1213.55 L1731.94 1213.55 L1732.53 1213.55 L1733.11 1213.55 L1733.7 1213.55 L1734.29 1213.55 L1734.87 1213.55 L1735.46 1213.55 L1736.05 1213.55 L1736.63 1213.55 L1737.22 1213.55 L1737.81 1213.55 L1738.39 1213.55 L1738.98 1213.55 L1739.57 1213.55 L1740.15 1213.55 L1740.74 1213.55 L1741.32 1213.55 L1741.91 1213.55 L1742.5 1213.55 L1743.08 1213.55 L1743.67 1213.55 L1744.26 1213.55 L1744.84 1213.55 L1745.43 1213.55 L1746.02 1213.55 L1746.6 1213.55 L1747.19 1213.55 L1747.78 1213.55 L1748.36 1213.55 L1748.95 1213.55 L1749.53 1213.55 L1750.12 1213.55 L1750.71 1213.55 L1751.29 1213.55 L1751.88 1213.55 L1752.47 1213.55 L1753.05 1213.55 L1753.64 1213.55 L1754.23 1213.55 L1754.81 1213.55 L1755.4 1213.55 L1755.99 1213.55 L1756.57 1213.55 L1757.16 1213.55 L1757.74 1213.55 L1758.33 1213.55 L1758.92 1213.55 L1759.5 1213.55 L1760.09 1213.55 L1760.68 1213.55 L1761.26 1213.55 L1761.85 1213.55 L1762.44 1213.55 L1763.02 1213.55 L1763.61 1213.55 L1764.19 1213.55 L1764.78 1213.55 L1765.37 1213.55 L1765.95 1213.55 L1766.54 1213.55 L1767.13 1213.55 L1767.71 1213.55 L1768.3 1213.55 L1768.89 1213.55 L1769.47 1213.55 L1770.06 1213.55 L1770.65 1213.55 L1771.23 1213.55 L1771.82 1213.55 L1772.4 1213.55 L1772.99 1213.55 L1773.58 1213.55 L1774.16 1213.55 L1774.75 1213.55 L1775.34 1213.55 L1775.92 1213.55 L1776.51 1213.55 L1777.1 1213.55 L1777.68 1213.55 L1778.27 1213.55 L1778.86 1213.55 L1779.44 1213.55 L1780.03 1213.55 L1780.61 1213.55 L1781.2 1213.55 L1781.79 1213.55 L1782.37 1213.55 L1782.96 1213.55 L1783.55 1213.55 L1784.13 1213.55 L1784.72 1213.55 L1785.31 1213.55 L1785.89 1213.55 L1786.48 1213.55 L1787.06 1213.55 L1787.65 1213.55 L1788.24 1213.55 L1788.82 1213.55 L1789.41 1213.55 L1790 1213.55 L1790.58 1213.55 L1791.17 1213.55 L1791.76 1213.55 L1792.34 1213.55 L1792.93 1213.55 L1793.52 1213.55 L1794.1 1213.55 L1794.69 1213.55 L1795.27 1213.55 L1795.86 1213.55 L1796.45 1213.55 L1797.03 1213.55 L1797.62 1213.55 L1798.21 1213.55 L1798.79 1213.55 L1799.38 1213.55 L1799.97 1213.55 L1800.55 1213.55 L1801.14 1213.55 L1801.73 1213.55 L1802.31 1213.55 L1802.9 1213.55 L1803.48 1213.55 L1804.07 1213.55 L1804.66 1213.55 L1805.24 1213.55 L1805.83 1213.55 L1806.42 1213.55 L1807 1213.55 L1807.59 1213.55 L1808.18 1213.55 L1808.76 1213.55 L1809.35 1213.55 L1809.94 1213.55 L1810.52 1213.55 L1811.11 1213.55 L1811.69 1213.55 L1812.28 1213.55 L1812.87 1213.55 L1813.45 1213.55 L1814.04 1213.55 L1814.63 1213.55 L1815.21 1213.55 L1815.8 1213.55 L1816.39 1213.55 L1816.97 1213.55 L1817.56 1213.55 L1818.14 1213.55 L1818.73 1213.55 L1819.32 1213.55 L1819.9 1213.55 L1820.49 1213.55 L1821.08 1213.55 L1821.66 1213.55 L1822.25 1213.55 L1822.84 1213.55 L1823.42 1213.55 L1824.01 1213.55 L1824.6 1213.55 L1825.18 1213.55 L1825.77 1213.55 L1826.35 1213.55 L1826.94 1213.55 L1827.53 1213.55 L1828.11 1213.55 L1828.7 1213.55 L1829.29 1213.55 L1829.87 1213.55 L1830.46 1213.55 L1831.05 1213.55 L1831.63 1213.55 L1832.22 1213.55 L1832.81 1213.55 L1833.39 1213.55 L1833.98 1213.55 L1834.56 1213.55 L1835.15 1213.55 L1835.74 1213.55 L1836.32 1213.55 L1836.91 1213.55 L1837.5 1213.55 L1838.08 1213.55 L1838.67 1213.55 L1839.26 1213.55 L1839.84 1213.55 L1840.43 1213.55 L1841.01 1213.55 L1841.6 1213.55 L1842.19 1213.55 L1842.77 1213.55 L1843.36 1213.55 L1843.95 1213.55 L1844.53 1213.55 L1845.12 1213.55 L1845.71 1213.55 L1846.29 1213.55 L1846.88 1213.55 L1847.47 1213.55 L1848.05 1213.55 L1848.64 1213.55 L1849.22 1213.55 L1849.81 1213.55 L1850.4 1213.55 L1850.98 1213.55 L1851.57 1213.55 L1852.16 1213.55 L1852.74 1213.55 L1853.33 1213.55 L1853.92 1213.55 L1854.5 1213.55 L1855.09 1213.55 L1855.68 1213.55 L1856.26 1213.55 L1856.85 1213.55 L1857.43 1213.55 L1858.02 1213.55 L1858.61 1213.55 L1859.19 1213.55 L1859.78 1213.55 L1860.37 1213.55 L1860.95 1213.55 L1861.54 1213.55 L1862.13 1213.55 L1862.71 1213.55 L1863.3 1213.55 L1863.88 1213.55 L1864.47 1213.55 L1865.06 1213.55 L1865.64 1213.55 L1866.23 1213.55 L1866.82 1213.55 L1867.4 1213.55 L1867.99 1213.55 L1868.58 1213.55 L1869.16 1213.55 L1869.75 1213.55 L1870.34 1213.55 L1870.92 1213.55 L1871.51 1213.55 L1872.09 1213.55 L1872.68 1213.55 L1873.27 1213.55 L1873.85 1213.55 L1874.44 1213.55 L1875.03 1213.55 L1875.61 1213.55 L1876.2 1213.55 L1876.79 1213.55 L1877.37 1213.55 L1877.96 1213.55 L1878.55 1213.55 L1879.13 1213.55 L1879.72 1213.55 L1880.3 1213.55 L1880.89 1213.55 L1881.48 1213.55 L1882.06 1213.55 L1882.65 1213.55 L1883.24 1213.55 L1883.82 1213.55 L1884.41 1213.55 L1885 1213.55 L1885.58 1213.55 L1886.17 1213.55 L1886.76 1213.55 L1887.34 1213.55 L1887.93 1213.55 L1888.51 1213.55 L1889.1 1213.55 L1889.69 1213.55 L1890.27 1213.55 L1890.86 1213.55 L1891.45 1213.55 L1892.03 1213.55 L1892.62 1213.55 L1893.21 1213.55 L1893.79 1213.55 L1894.38 1213.55 L1894.96 1213.55 L1895.55 1213.55 L1896.14 1213.55 L1896.72 1213.55 L1897.31 1213.55 L1897.9 1213.55 L1898.48 1213.55 L1899.07 1213.55 L1899.66 1213.55 L1900.24 1213.55 L1900.83 1213.55 L1901.42 1213.55 L1902 1213.55 L1902.59 1213.55 L1903.17 1213.55 L1903.76 1213.55 L1904.35 1213.55 L1904.93 1213.55 L1905.52 1213.55 L1906.11 1213.55 L1906.69 1213.55 L1907.28 1213.55 L1907.87 1213.55 L1908.45 1213.55 L1909.04 1213.55 L1909.63 1213.55 L1910.21 1213.55 L1910.8 1213.55 L1911.38 1213.55 L1911.97 1213.55 L1912.56 1213.55 L1913.14 1213.55 L1913.73 1213.55 L1914.32 1213.55 L1914.9 1213.55 L1915.49 1213.55 L1916.08 1213.55 L1916.66 1213.55 L1917.25 1213.55 L1917.83 1213.55 L1918.42 1213.55 L1919.01 1213.55 L1919.59 1213.55 L1920.18 1213.55 L1920.77 1213.55 L1921.35 1213.55 L1921.94 1213.55 L1922.53 1213.55 L1923.11 1213.55 L1923.7 1213.55 L1924.29 1213.55 L1924.87 1213.55 L1925.46 1213.55 L1926.04 1213.55 L1926.63 1213.55 L1927.22 1213.55 L1927.8 1213.55 L1928.39 1213.55 L1928.98 1213.55 L1929.56 1213.55 L1930.15 1213.55 L1930.74 1213.55 L1931.32 1213.55 L1931.91 1213.55 L1932.5 1213.55 L1933.08 1213.55 L1933.67 1213.55 L1934.25 1213.55 L1934.84 1213.55 L1935.43 1213.55 L1936.01 1213.55 L1936.6 1213.55 L1937.19 1213.55 L1937.77 1213.55 L1938.36 1213.55 L1938.95 1213.55 L1939.53 1213.55 L1940.12 1213.55 L1940.71 1213.55 L1941.29 1213.55 L1941.88 1213.55 L1942.46 1213.55 L1943.05 1213.55 L1943.64 1213.55 L1944.22 1213.55 L1944.81 1213.55 L1945.4 1213.55 L1945.98 1213.55 L1946.57 1213.55 L1947.16 1213.55 L1947.74 1213.55 L1948.33 1213.55 L1948.91 1213.55 L1949.5 1213.55 L1950.09 1213.55 L1950.67 1213.55 L1951.26 1213.55 L1951.85 1213.55 L1952.43 1213.55 L1953.02 1213.55 L1953.61 1213.55 L1954.19 1213.55 L1954.78 1213.55 L1955.37 1213.55 L1955.95 1213.55 L1956.54 1213.55 L1957.12 1213.55 L1957.71 1213.55 L1958.3 1213.55 L1958.88 1213.55 L1959.47 1213.55 L1960.06 1213.55 L1960.64 1213.55 L1961.23 1213.55 L1961.82 1213.55 L1962.4 1213.55 L1962.99 1213.55 L1963.58 1213.55 L1964.16 1213.55 L1964.75 1213.55 L1965.33 1213.55 L1965.92 1213.55 L1966.51 1213.55 L1967.09 1213.55 L1967.68 1213.55 L1968.27 1213.55 L1968.85 1213.55 L1969.44 1213.55 L1970.03 1213.55 L1970.61 1213.55 L1971.2 1213.55 L1971.78 1213.55 L1972.37 1213.55 L1972.96 1213.55 L1973.54 1213.55 L1974.13 1213.55 L1974.72 1213.55 L1975.3 1213.55 L1975.89 1213.55 L1976.48 1213.55 L1977.06 1213.55 L1977.65 1213.55 L1978.24 1213.55 L1978.82 1213.55 L1979.41 1213.55 L1979.99 1213.55 L1980.58 1213.55 L1981.17 1213.55 L1981.75 1213.55 L1982.34 1213.55 L1982.93 1213.55 L1983.51 1213.55 L1984.1 1213.55 L1984.69 1213.55 L1985.27 1213.55 L1985.86 1213.55 L1986.45 1213.55 L1987.03 1213.55 L1987.62 1213.55 L1988.2 1213.55 L1988.79 1213.55 L1989.38 1213.55 L1989.96 1213.55 L1990.55 1213.55 L1991.14 1213.55 L1991.72 1213.55 L1992.31 1213.55 L1992.9 1213.55 L1993.48 1213.55 L1994.07 1213.55 L1994.65 1213.55 L1995.24 1213.55 L1995.83 1213.55 L1996.41 1213.55 L1997 1213.55 L1997.59 1213.55 L1998.17 1213.55 L1998.76 1213.55 L1999.35 1213.55 L1999.93 1213.55 L2000.52 1213.55 L2001.11 1213.55 L2001.69 1213.55 L2002.28 1213.55 L2002.86 1213.55 L2003.45 1213.55 L2004.04 1213.55 L2004.62 1213.55 L2005.21 1213.55 L2005.8 1213.55 L2006.38 1213.55 L2006.97 1213.55 L2007.56 1213.55 L2008.14 1213.55 L2008.73 1213.55 L2009.32 1213.55 L2009.9 1213.55 L2010.49 1213.55 L2011.07 1213.55 L2011.66 1213.55 L2012.25 1213.55 L2012.83 1213.55 L2013.42 1213.55 L2014.01 1213.55 L2014.59 1213.55 L2015.18 1213.55 L2015.77 1213.55 L2016.35 1213.55 L2016.94 1213.55 L2017.53 1213.55 L2018.11 1213.55 L2018.7 1213.55 L2019.28 1213.55 L2019.87 1213.55 L2020.46 1213.55 L2021.04 1213.55 L2021.63 1213.55 L2022.22 1213.55 L2022.8 1213.55 L2023.39 1213.55 L2023.98 1213.55 L2024.56 1213.55 L2025.15 1213.55 L2025.73 1213.55 L2026.32 1213.55 L2026.91 1213.55 L2027.49 1213.55 L2028.08 1213.55 L2028.67 1213.55 L2029.25 1213.55 L2029.84 1213.55 L2030.43 1213.55 L2031.01 1213.55 L2031.6 1213.55 L2032.19 1213.55 L2032.77 1213.55 L2033.36 1213.55 L2033.94 1213.55 L2034.53 1213.55 L2035.12 1213.55 L2035.7 1213.55 L2036.29 1213.55 L2036.88 1213.55 L2037.46 1213.55 L2038.05 1213.55 L2038.64 1213.55 L2039.22 1213.55 L2039.81 1213.55 L2040.4 1213.55 L2040.98 1213.55 L2041.57 1213.55 L2042.15 1213.55 L2042.74 1213.55 L2043.33 1213.55 L2043.91 1213.55 L2044.5 1213.55 L2045.09 1213.55 L2045.67 1213.55 L2046.26 1213.55 L2046.85 1213.55 L2047.43 1213.55 L2048.02 1213.55 L2048.6 1213.55 L2049.19 1213.55 L2049.78 1213.55 L2050.36 1213.55 L2050.95 1213.55 L2051.54 1213.55 L2052.12 1213.55 L2052.71 1213.55 L2053.3 1213.55 L2053.88 1213.55 L2054.47 1213.55 L2055.06 1213.55 L2055.64 1213.55 L2056.23 1213.55 L2056.81 1213.55 L2057.4 1213.55 L2057.99 1213.55 L2058.57 1213.55 L2059.16 1213.55 L2059.75 1213.55 L2060.33 1213.55 L2060.92 1213.55 L2061.51 1213.55 L2062.09 1213.55 L2062.68 1213.55 L2063.27 1213.55 L2063.85 1213.55 L2064.44 1213.55 L2065.02 1213.55 L2065.61 1213.55 L2066.2 1213.55 L2066.78 1213.55 L2067.37 1213.55 L2067.96 1213.55 L2068.54 1213.55 L2069.13 1213.55 L2069.72 1213.55 L2070.3 1213.55 L2070.89 1213.55 L2071.48 1213.55 L2072.06 1213.55 L2072.65 1213.55 L2073.23 1213.55 L2073.82 1213.55 L2074.41 1213.55 L2074.99 1213.55 L2075.58 1213.55 L2076.17 1213.55 L2076.75 1213.55 L2077.34 1213.55 L2077.93 1213.55 L2078.51 1213.55 L2079.1 1213.55 L2079.68 1213.55 L2080.27 1213.55 L2080.86 1213.55 L2081.44 1213.55 L2082.03 1213.55 L2082.62 1213.55 L2083.2 1213.55 L2083.79 1213.55 L2084.38 1213.55 L2084.96 1213.55 L2085.55 1213.55 L2086.14 1213.55 L2086.72 1213.55 L2087.31 1213.55 L2087.89 1213.55 L2088.48 1213.55 L2089.07 1213.55 L2089.65 1213.55 L2090.24 1213.55 L2090.83 1213.55 L2091.41 1213.55 L2092 1213.55 L2092.59 1213.55 L2093.17 1213.55 L2093.76 1213.55 L2094.35 1213.55 L2094.93 1213.55 L2095.52 1213.55 L2096.1 1213.55 L2096.69 1213.55 L2097.28 1213.55 L2097.86 1213.55 L2098.45 1213.55 L2099.04 1213.55 L2099.62 1213.55 L2100.21 1213.55 L2100.8 1213.55 L2101.38 1213.55 L2101.97 1213.55 L2102.55 1213.55 L2103.14 1213.55 L2103.73 1213.55 L2104.31 1213.55 L2104.9 1213.55 L2105.49 1213.55 L2106.07 1213.55 L2106.66 1213.55 L2107.25 1213.55 L2107.83 1213.55 L2108.42 1213.55 L2109.01 1213.55 L2109.59 1213.55 L2110.18 1213.55 L2110.76 1213.55 L2111.35 1213.55 L2111.94 1213.55 L2112.52 1213.55 L2113.11 1213.55 L2113.7 1213.55 L2114.28 1213.55 L2114.87 1213.55 L2115.46 1213.55 L2116.04 1213.55 L2116.63 1213.55 L2117.22 1213.55 L2117.8 1213.55 L2118.39 1213.55 L2118.97 1213.55 L2119.56 1213.55 L2120.15 1213.55 L2120.73 1213.55 L2121.32 1213.55 L2121.91 1213.55 L2122.49 1213.55 L2123.08 1213.55 L2123.67 1213.55 L2124.25 1213.55 L2124.84 1213.55 L2125.42 1213.55 L2126.01 1213.55 L2126.6 1213.55 L2127.18 1213.55 L2127.77 1213.55 L2128.36 1213.55 L2128.94 1213.55 L2129.53 1213.55 L2130.12 1213.55 L2130.7 1213.55 L2131.29 1213.55 L2131.88 1213.55 L2132.46 1213.55 L2133.05 1213.55 L2133.63 1213.55 L2134.22 1213.55 L2134.81 1213.55 L2135.39 1213.55 L2135.98 1213.55 L2136.57 1213.55 L2137.15 1213.55 L2137.74 1213.55 L2138.33 1213.55 L2138.91 1213.55 L2139.5 1213.55 L2140.09 1213.55 L2140.67 1213.55 L2141.26 1213.55 L2141.84 1213.55 L2142.43 1213.55 L2143.02 1213.55 L2143.6 1213.55 L2144.19 1213.55 L2144.78 1213.55 L2145.36 1213.55 L2145.95 1213.55 L2146.54 1213.55 L2147.12 1213.55 L2147.71 1213.55 L2148.3 1213.55 L2148.88 1213.55 L2149.47 1213.55 L2150.05 1213.55 L2150.64 1213.55 L2151.23 1213.55 L2151.81 1213.55 L2152.4 1213.55 L2152.99 1213.55 L2153.57 1213.55 L2154.16 1213.55 L2154.75 1213.55 L2155.33 1213.55 L2155.92 1213.55 L2156.5 1213.55 L2157.09 1213.55 L2157.68 1213.55 L2158.26 1213.55 L2158.26 1212.81 L2157.68 1212.81 L2157.09 1212.81 L2156.5 1212.81 L2155.92 1212.81 L2155.33 1212.81 L2154.75 1212.81 L2154.16 1212.81 L2153.57 1212.81 L2152.99 1212.81 L2152.4 1212.81 L2151.81 1212.81 L2151.23 1212.81 L2150.64 1212.81 L2150.05 1212.81 L2149.47 1212.81 L2148.88 1212.81 L2148.3 1212.81 L2147.71 1212.81 L2147.12 1212.81 L2146.54 1212.81 L2145.95 1212.81 L2145.36 1212.81 L2144.78 1212.81 L2144.19 1212.81 L2143.6 1212.81 L2143.02 1212.81 L2142.43 1212.81 L2141.84 1212.81 L2141.26 1212.81 L2140.67 1212.81 L2140.09 1212.81 L2139.5 1212.81 L2138.91 1212.81 L2138.33 1212.81 L2137.74 1212.81 L2137.15 1212.81 L2136.57 1212.81 L2135.98 1212.81 L2135.39 1212.81 L2134.81 1212.81 L2134.22 1212.81 L2133.63 1212.81 L2133.05 1212.81 L2132.46 1212.81 L2131.88 1212.81 L2131.29 1212.81 L2130.7 1212.81 L2130.12 1212.81 L2129.53 1212.81 L2128.94 1212.81 L2128.36 1212.81 L2127.77 1212.81 L2127.18 1212.81 L2126.6 1212.81 L2126.01 1212.81 L2125.42 1212.81 L2124.84 1212.81 L2124.25 1212.81 L2123.67 1212.81 L2123.08 1212.81 L2122.49 1212.81 L2121.91 1212.81 L2121.32 1212.81 L2120.73 1212.81 L2120.15 1212.81 L2119.56 1212.81 L2118.97 1212.81 L2118.39 1212.81 L2117.8 1212.81 L2117.22 1212.81 L2116.63 1212.81 L2116.04 1212.81 L2115.46 1212.81 L2114.87 1212.81 L2114.28 1212.81 L2113.7 1212.81 L2113.11 1212.81 L2112.52 1212.81 L2111.94 1212.81 L2111.35 1212.81 L2110.76 1212.81 L2110.18 1212.81 L2109.59 1212.81 L2109.01 1212.81 L2108.42 1212.81 L2107.83 1212.81 L2107.25 1212.81 L2106.66 1212.81 L2106.07 1212.81 L2105.49 1212.81 L2104.9 1212.81 L2104.31 1212.81 L2103.73 1212.81 L2103.14 1212.81 L2102.55 1212.81 L2101.97 1212.81 L2101.38 1212.81 L2100.8 1212.81 L2100.21 1212.81 L2099.62 1212.81 L2099.04 1212.81 L2098.45 1212.81 L2097.86 1212.81 L2097.28 1212.81 L2096.69 1212.81 L2096.1 1212.81 L2095.52 1212.81 L2094.93 1212.81 L2094.35 1212.81 L2093.76 1212.81 L2093.17 1212.81 L2092.59 1212.81 L2092 1212.81 L2091.41 1212.81 L2090.83 1212.81 L2090.24 1212.81 L2089.65 1212.81 L2089.07 1212.81 L2088.48 1212.81 L2087.89 1212.81 L2087.31 1212.81 L2086.72 1212.81 L2086.14 1212.81 L2085.55 1212.81 L2084.96 1212.81 L2084.38 1212.81 L2083.79 1212.81 L2083.2 1212.81 L2082.62 1212.81 L2082.03 1212.81 L2081.44 1212.81 L2080.86 1212.81 L2080.27 1212.81 L2079.68 1212.81 L2079.1 1212.81 L2078.51 1212.81 L2077.93 1212.81 L2077.34 1212.81 L2076.75 1212.81 L2076.17 1212.81 L2075.58 1212.81 L2074.99 1212.81 L2074.41 1212.81 L2073.82 1212.81 L2073.23 1212.81 L2072.65 1212.81 L2072.06 1212.81 L2071.48 1212.81 L2070.89 1212.81 L2070.3 1212.81 L2069.72 1212.81 L2069.13 1212.81 L2068.54 1212.81 L2067.96 1212.81 L2067.37 1212.81 L2066.78 1212.81 L2066.2 1212.81 L2065.61 1212.81 L2065.02 1212.81 L2064.44 1212.81 L2063.85 1212.81 L2063.27 1212.81 L2062.68 1212.81 L2062.09 1212.81 L2061.51 1212.81 L2060.92 1212.81 L2060.33 1212.81 L2059.75 1212.81 L2059.16 1212.81 L2058.57 1212.81 L2057.99 1212.81 L2057.4 1212.81 L2056.81 1212.81 L2056.23 1212.81 L2055.64 1212.81 L2055.06 1212.81 L2054.47 1212.81 L2053.88 1212.81 L2053.3 1212.81 L2052.71 1212.81 L2052.12 1212.81 L2051.54 1212.81 L2050.95 1212.81 L2050.36 1212.81 L2049.78 1212.81 L2049.19 1212.81 L2048.6 1212.81 L2048.02 1212.81 L2047.43 1212.81 L2046.85 1212.81 L2046.26 1212.81 L2045.67 1212.81 L2045.09 1212.81 L2044.5 1212.81 L2043.91 1212.81 L2043.33 1212.81 L2042.74 1212.81 L2042.15 1212.81 L2041.57 1212.81 L2040.98 1212.81 L2040.4 1212.81 L2039.81 1212.81 L2039.22 1212.81 L2038.64 1212.81 L2038.05 1212.81 L2037.46 1212.81 L2036.88 1212.81 L2036.29 1212.81 L2035.7 1212.81 L2035.12 1212.81 L2034.53 1212.81 L2033.94 1212.81 L2033.36 1212.81 L2032.77 1212.81 L2032.19 1212.81 L2031.6 1212.81 L2031.01 1212.81 L2030.43 1212.81 L2029.84 1212.81 L2029.25 1212.81 L2028.67 1212.81 L2028.08 1212.81 L2027.49 1212.81 L2026.91 1212.81 L2026.32 1212.81 L2025.73 1212.81 L2025.15 1212.81 L2024.56 1212.81 L2023.98 1212.81 L2023.39 1212.81 L2022.8 1212.81 L2022.22 1212.81 L2021.63 1212.81 L2021.04 1212.81 L2020.46 1212.81 L2019.87 1212.81 L2019.28 1212.81 L2018.7 1212.81 L2018.11 1212.81 L2017.53 1212.81 L2016.94 1212.81 L2016.35 1212.81 L2015.77 1212.81 L2015.18 1212.81 L2014.59 1212.81 L2014.01 1212.81 L2013.42 1212.81 L2012.83 1212.81 L2012.25 1212.81 L2011.66 1212.81 L2011.07 1212.81 L2010.49 1212.81 L2009.9 1212.81 L2009.32 1212.81 L2008.73 1212.81 L2008.14 1212.81 L2007.56 1212.81 L2006.97 1212.81 L2006.38 1212.81 L2005.8 1212.81 L2005.21 1212.81 L2004.62 1212.81 L2004.04 1212.81 L2003.45 1212.81 L2002.86 1212.81 L2002.28 1212.81 L2001.69 1212.81 L2001.11 1212.81 L2000.52 1212.81 L1999.93 1212.81 L1999.35 1212.81 L1998.76 1212.81 L1998.17 1212.81 L1997.59 1212.81 L1997 1212.81 L1996.41 1212.81 L1995.83 1212.81 L1995.24 1212.81 L1994.65 1212.81 L1994.07 1212.81 L1993.48 1212.81 L1992.9 1212.81 L1992.31 1212.81 L1991.72 1212.81 L1991.14 1212.81 L1990.55 1212.81 L1989.96 1212.81 L1989.38 1212.81 L1988.79 1212.81 L1988.2 1212.81 L1987.62 1212.81 L1987.03 1212.81 L1986.45 1212.81 L1985.86 1212.81 L1985.27 1212.81 L1984.69 1212.81 L1984.1 1212.81 L1983.51 1212.81 L1982.93 1212.81 L1982.34 1212.81 L1981.75 1212.81 L1981.17 1212.81 L1980.58 1212.81 L1979.99 1212.81 L1979.41 1212.81 L1978.82 1212.81 L1978.24 1212.81 L1977.65 1212.81 L1977.06 1212.81 L1976.48 1212.81 L1975.89 1212.81 L1975.3 1212.81 L1974.72 1212.81 L1974.13 1212.81 L1973.54 1212.81 L1972.96 1212.81 L1972.37 1212.81 L1971.78 1212.81 L1971.2 1212.81 L1970.61 1212.81 L1970.03 1212.81 L1969.44 1212.81 L1968.85 1212.81 L1968.27 1212.81 L1967.68 1212.81 L1967.09 1212.81 L1966.51 1212.81 L1965.92 1212.81 L1965.33 1212.81 L1964.75 1212.81 L1964.16 1212.81 L1963.58 1212.81 L1962.99 1212.81 L1962.4 1212.81 L1961.82 1212.81 L1961.23 1212.81 L1960.64 1212.81 L1960.06 1212.81 L1959.47 1212.81 L1958.88 1212.81 L1958.3 1212.81 L1957.71 1212.81 L1957.12 1212.81 L1956.54 1212.81 L1955.95 1212.81 L1955.37 1212.81 L1954.78 1212.81 L1954.19 1212.81 L1953.61 1212.81 L1953.02 1212.81 L1952.43 1212.81 L1951.85 1212.81 L1951.26 1212.81 L1950.67 1212.81 L1950.09 1212.81 L1949.5 1212.81 L1948.91 1212.81 L1948.33 1212.81 L1947.74 1212.81 L1947.16 1212.81 L1946.57 1212.81 L1945.98 1212.81 L1945.4 1212.81 L1944.81 1212.81 L1944.22 1212.81 L1943.64 1212.81 L1943.05 1212.81 L1942.46 1212.81 L1941.88 1212.81 L1941.29 1212.81 L1940.71 1212.81 L1940.12 1212.81 L1939.53 1212.81 L1938.95 1212.81 L1938.36 1212.81 L1937.77 1212.81 L1937.19 1212.81 L1936.6 1212.81 L1936.01 1212.81 L1935.43 1212.81 L1934.84 1212.81 L1934.25 1212.81 L1933.67 1212.81 L1933.08 1212.81 L1932.5 1212.81 L1931.91 1212.81 L1931.32 1212.81 L1930.74 1212.81 L1930.15 1212.81 L1929.56 1212.81 L1928.98 1212.81 L1928.39 1212.81 L1927.8 1212.81 L1927.22 1212.81 L1926.63 1212.81 L1926.04 1212.81 L1925.46 1212.81 L1924.87 1212.81 L1924.29 1212.81 L1923.7 1212.81 L1923.11 1212.81 L1922.53 1212.81 L1921.94 1212.81 L1921.35 1212.81 L1920.77 1212.81 L1920.18 1212.81 L1919.59 1212.81 L1919.01 1212.81 L1918.42 1212.81 L1917.83 1212.81 L1917.25 1212.81 L1916.66 1212.81 L1916.08 1212.81 L1915.49 1212.81 L1914.9 1212.81 L1914.32 1212.81 L1913.73 1212.81 L1913.14 1212.81 L1912.56 1212.81 L1911.97 1212.81 L1911.38 1212.81 L1910.8 1212.81 L1910.21 1212.81 L1909.63 1212.81 L1909.04 1212.81 L1908.45 1212.81 L1907.87 1212.81 L1907.28 1212.81 L1906.69 1212.81 L1906.11 1212.81 L1905.52 1212.81 L1904.93 1212.81 L1904.35 1212.81 L1903.76 1212.81 L1903.17 1212.81 L1902.59 1212.81 L1902 1212.81 L1901.42 1212.81 L1900.83 1212.81 L1900.24 1212.81 L1899.66 1212.81 L1899.07 1212.81 L1898.48 1212.81 L1897.9 1212.81 L1897.31 1212.81 L1896.72 1212.81 L1896.14 1212.81 L1895.55 1212.81 L1894.96 1212.81 L1894.38 1212.81 L1893.79 1212.81 L1893.21 1212.81 L1892.62 1212.81 L1892.03 1212.81 L1891.45 1212.81 L1890.86 1212.81 L1890.27 1212.81 L1889.69 1212.81 L1889.1 1212.81 L1888.51 1212.81 L1887.93 1212.81 L1887.34 1212.81 L1886.76 1212.81 L1886.17 1212.81 L1885.58 1212.81 L1885 1212.81 L1884.41 1212.81 L1883.82 1212.81 L1883.24 1212.81 L1882.65 1212.81 L1882.06 1212.81 L1881.48 1212.81 L1880.89 1212.81 L1880.3 1212.81 L1879.72 1212.81 L1879.13 1212.81 L1878.55 1212.81 L1877.96 1212.81 L1877.37 1212.81 L1876.79 1212.81 L1876.2 1212.81 L1875.61 1212.81 L1875.03 1212.81 L1874.44 1212.81 L1873.85 1212.81 L1873.27 1212.81 L1872.68 1212.81 L1872.09 1212.81 L1871.51 1212.81 L1870.92 1212.81 L1870.34 1212.81 L1869.75 1212.81 L1869.16 1212.81 L1868.58 1212.81 L1867.99 1212.81 L1867.4 1212.81 L1866.82 1212.81 L1866.23 1212.81 L1865.64 1212.81 L1865.06 1212.81 L1864.47 1212.81 L1863.88 1212.81 L1863.3 1212.81 L1862.71 1212.81 L1862.13 1212.81 L1861.54 1212.81 L1860.95 1212.81 L1860.37 1212.81 L1859.78 1212.81 L1859.19 1212.81 L1858.61 1212.81 L1858.02 1212.81 L1857.43 1212.81 L1856.85 1212.81 L1856.26 1212.81 L1855.68 1212.81 L1855.09 1212.81 L1854.5 1212.81 L1853.92 1212.81 L1853.33 1212.81 L1852.74 1212.81 L1852.16 1212.81 L1851.57 1212.81 L1850.98 1212.81 L1850.4 1212.81 L1849.81 1212.81 L1849.22 1212.81 L1848.64 1212.81 L1848.05 1212.81 L1847.47 1212.81 L1846.88 1212.81 L1846.29 1212.81 L1845.71 1212.81 L1845.12 1212.81 L1844.53 1212.81 L1843.95 1212.81 L1843.36 1212.81 L1842.77 1212.81 L1842.19 1212.81 L1841.6 1212.81 L1841.01 1212.81 L1840.43 1212.81 L1839.84 1212.81 L1839.26 1212.81 L1838.67 1212.81 L1838.08 1212.81 L1837.5 1212.81 L1836.91 1212.81 L1836.32 1212.81 L1835.74 1212.81 L1835.15 1212.81 L1834.56 1212.81 L1833.98 1212.81 L1833.39 1212.81 L1832.81 1212.81 L1832.22 1212.81 L1831.63 1212.81 L1831.05 1212.81 L1830.46 1212.81 L1829.87 1212.81 L1829.29 1212.81 L1828.7 1212.81 L1828.11 1212.81 L1827.53 1212.81 L1826.94 1212.81 L1826.35 1212.81 L1825.77 1212.81 L1825.18 1212.81 L1824.6 1212.81 L1824.01 1212.81 L1823.42 1212.81 L1822.84 1212.81 L1822.25 1212.81 L1821.66 1212.81 L1821.08 1212.81 L1820.49 1212.81 L1819.9 1212.81 L1819.32 1212.81 L1818.73 1212.81 L1818.14 1212.81 L1817.56 1212.81 L1816.97 1212.81 L1816.39 1212.81 L1815.8 1212.81 L1815.21 1212.81 L1814.63 1212.81 L1814.04 1212.81 L1813.45 1212.81 L1812.87 1212.81 L1812.28 1212.81 L1811.69 1212.81 L1811.11 1212.81 L1810.52 1212.81 L1809.94 1212.81 L1809.35 1212.81 L1808.76 1212.81 L1808.18 1212.81 L1807.59 1212.81 L1807 1212.81 L1806.42 1212.81 L1805.83 1212.81 L1805.24 1212.81 L1804.66 1212.81 L1804.07 1212.81 L1803.48 1212.81 L1802.9 1212.81 L1802.31 1212.81 L1801.73 1212.81 L1801.14 1212.81 L1800.55 1212.81 L1799.97 1212.81 L1799.38 1212.81 L1798.79 1212.81 L1798.21 1212.81 L1797.62 1212.81 L1797.03 1212.81 L1796.45 1212.81 L1795.86 1212.81 L1795.27 1212.81 L1794.69 1212.81 L1794.1 1212.81 L1793.52 1212.81 L1792.93 1212.81 L1792.34 1212.81 L1791.76 1212.81 L1791.17 1212.81 L1790.58 1212.81 L1790 1212.81 L1789.41 1212.81 L1788.82 1212.81 L1788.24 1212.81 L1787.65 1212.81 L1787.06 1212.81 L1786.48 1212.81 L1785.89 1212.81 L1785.31 1212.81 L1784.72 1212.81 L1784.13 1212.81 L1783.55 1212.81 L1782.96 1212.81 L1782.37 1212.81 L1781.79 1212.81 L1781.2 1212.81 L1780.61 1212.81 L1780.03 1212.81 L1779.44 1212.81 L1778.86 1212.81 L1778.27 1212.81 L1777.68 1212.81 L1777.1 1212.81 L1776.51 1212.81 L1775.92 1212.81 L1775.34 1212.81 L1774.75 1212.81 L1774.16 1212.81 L1773.58 1212.81 L1772.99 1212.81 L1772.4 1212.81 L1771.82 1212.81 L1771.23 1212.81 L1770.65 1212.81 L1770.06 1212.81 L1769.47 1212.81 L1768.89 1212.81 L1768.3 1212.81 L1767.71 1212.81 L1767.13 1212.81 L1766.54 1212.81 L1765.95 1212.81 L1765.37 1212.81 L1764.78 1212.81 L1764.19 1212.81 L1763.61 1212.81 L1763.02 1212.81 L1762.44 1212.81 L1761.85 1212.81 L1761.26 1212.81 L1760.68 1212.81 L1760.09 1212.81 L1759.5 1212.81 L1758.92 1212.81 L1758.33 1212.81 L1757.74 1212.81 L1757.16 1212.81 L1756.57 1212.81 L1755.99 1212.81 L1755.4 1212.81 L1754.81 1212.81 L1754.23 1212.81 L1753.64 1212.81 L1753.05 1212.81 L1752.47 1212.81 L1751.88 1212.81 L1751.29 1212.81 L1750.71 1212.81 L1750.12 1212.81 L1749.53 1212.81 L1748.95 1212.81 L1748.36 1212.81 L1747.78 1212.81 L1747.19 1212.81 L1746.6 1212.81 L1746.02 1212.81 L1745.43 1212.81 L1744.84 1212.81 L1744.26 1212.81 L1743.67 1212.81 L1743.08 1212.81 L1742.5 1212.81 L1741.91 1212.81 L1741.32 1212.81 L1740.74 1212.81 L1740.15 1212.81 L1739.57 1212.81 L1738.98 1212.81 L1738.39 1212.81 L1737.81 1212.81 L1737.22 1212.81 L1736.63 1212.81 L1736.05 1212.81 L1735.46 1212.81 L1734.87 1212.81 L1734.29 1212.81 L1733.7 1212.81 L1733.11 1212.81 L1732.53 1212.81 L1731.94 1212.81 L1731.36 1212.81 L1730.77 1212.81 L1730.18 1212.81 L1729.6 1212.81 L1729.01 1212.81 L1728.42 1212.81 L1727.84 1212.81 L1727.25 1212.81 L1726.66 1212.81 L1726.08 1212.81 L1725.49 1212.81 L1724.91 1212.81 L1724.32 1212.81 L1723.73 1212.81 L1723.15 1212.81 L1722.56 1212.81 L1721.97 1212.81 L1721.39 1212.81 L1720.8 1212.81 L1720.21 1212.81 L1719.63 1212.81 L1719.04 1212.81 L1718.45 1212.81 L1717.87 1212.81 L1717.28 1212.81 L1716.7 1212.81 L1716.11 1212.81 L1715.52 1212.81 L1714.94 1212.81 L1714.35 1212.81 L1713.76 1212.81 L1713.18 1212.81 L1712.59 1212.81 L1712 1212.81 L1711.42 1212.81 L1710.83 1212.81 L1710.24 1212.81 L1709.66 1212.81 L1709.07 1212.81 L1708.49 1212.81 L1707.9 1212.81 L1707.31 1212.81 L1706.73 1212.81 L1706.14 1212.81 L1705.55 1212.81 L1704.97 1212.81 L1704.38 1212.81 L1703.79 1212.81 L1703.21 1212.81 L1702.62 1212.81 L1702.04 1212.81 L1701.45 1212.81 L1700.86 1212.81 L1700.28 1212.81 L1699.69 1212.81 L1699.1 1212.81 L1698.52 1212.81 L1697.93 1212.81 L1697.34 1212.81 L1696.76 1212.81 L1696.17 1212.81 L1695.58 1212.81 L1695 1212.81 L1694.41 1212.81 L1693.83 1212.81 L1693.24 1212.81 L1692.65 1212.81 L1692.07 1212.81 L1691.48 1212.81 L1690.89 1212.81 L1690.31 1212.81 L1689.72 1212.81 L1689.13 1212.81 L1688.55 1212.81 L1687.96 1212.81 L1687.37 1212.81 L1686.79 1212.81 L1686.2 1212.81 L1685.62 1212.81 L1685.03 1212.81 L1684.44 1212.81 L1683.86 1212.81 L1683.27 1212.81 L1682.68 1212.81 L1682.1 1212.81 L1681.51 1212.81 L1680.92 1212.81 L1680.34 1212.81 L1679.75 1212.81 L1679.17 1212.81 L1678.58 1212.81 L1677.99 1212.81 L1677.41 1212.81 L1676.82 1212.81 L1676.23 1212.81 L1675.65 1212.81 L1675.06 1212.81 L1674.47 1212.81 L1673.89 1212.81 L1673.3 1212.81 L1672.71 1212.81 L1672.13 1212.81 L1671.54 1212.81 L1670.96 1212.81 L1670.37 1212.81 L1669.78 1212.81 L1669.2 1212.81 L1668.61 1212.81 L1668.02 1212.81 L1667.44 1212.81 L1666.85 1212.81 L1666.26 1212.81 L1665.68 1212.81 L1665.09 1212.81 L1664.5 1212.81 L1663.92 1212.81 L1663.33 1212.81 L1662.75 1212.81 L1662.16 1212.81 L1661.57 1212.81 L1660.99 1212.81 L1660.4 1212.81 L1659.81 1212.81 L1659.23 1212.81 L1658.64 1212.81 L1658.05 1212.81 L1657.47 1212.81 L1656.88 1212.81 L1656.29 1212.81 L1655.71 1212.81 L1655.12 1212.81 L1654.54 1212.81 L1653.95 1212.81 L1653.36 1212.81 L1652.78 1212.81 L1652.19 1212.81 L1651.6 1212.81 L1651.02 1212.81 L1650.43 1212.81 L1649.84 1212.81 L1649.26 1212.81 L1648.67 1212.81 L1648.09 1212.81 L1647.5 1212.81 L1646.91 1212.81 L1646.33 1212.81 L1645.74 1212.81 L1645.15 1212.81 L1644.57 1212.81 L1643.98 1212.81 L1643.39 1212.81 L1642.81 1212.81 L1642.22 1212.81 L1641.63 1212.81 L1641.05 1212.81 L1640.46 1212.81 L1639.88 1212.81 L1639.29 1212.81 L1638.7 1212.81 L1638.12 1212.81 L1637.53 1212.81 L1636.94 1212.81 L1636.36 1212.81 L1635.77 1212.81 L1635.18 1212.81 L1634.6 1212.81 L1634.01 1212.81 L1633.42 1212.81 L1632.84 1212.81 L1632.25 1212.81 L1631.67 1212.81 L1631.08 1212.81 L1630.49 1212.81 L1629.91 1212.81 L1629.32 1212.81 L1628.73 1212.81 L1628.15 1212.81 L1627.56 1212.81 L1626.97 1212.81 L1626.39 1212.81 L1625.8 1212.81 L1625.22 1212.81 L1624.63 1212.81 L1624.04 1212.81 L1623.46 1212.81 L1622.87 1212.81 L1622.28 1212.81 L1621.7 1212.81 L1621.11 1212.81 L1620.52 1212.81 L1619.94 1212.81 L1619.35 1212.81 L1618.76 1212.81 L1618.18 1212.81 L1617.59 1212.81 L1617.01 1212.81 L1616.42 1212.81 L1615.83 1212.81 L1615.25 1212.81 L1614.66 1212.81 L1614.07 1212.81 L1613.49 1212.81 L1612.9 1212.81 L1612.31 1212.81 L1611.73 1212.81 L1611.14 1212.81 L1610.55 1212.81 L1609.97 1212.81 L1609.38 1212.81 L1608.8 1212.81 L1608.21 1212.81 L1607.62 1212.81 L1607.04 1212.81 L1606.45 1212.81 L1605.86 1212.81 L1605.28 1212.81 L1604.69 1212.81 L1604.1 1212.81 L1603.52 1212.81 L1602.93 1212.81 L1602.34 1212.81 L1601.76 1212.81 L1601.17 1212.81 L1600.59 1212.81 L1600 1212.81 L1599.41 1212.81 L1598.83 1212.81 L1598.24 1212.81 L1597.65 1212.81 L1597.07 1212.81 L1596.48 1212.81 L1595.89 1212.81 L1595.31 1212.81 L1594.72 1212.81 L1594.14 1212.81 L1593.55 1212.81 L1592.96 1212.81 L1592.38 1212.81 L1591.79 1212.81 L1591.2 1212.81 L1590.62 1212.81 L1590.03 1212.81 L1589.44 1212.81 L1588.86 1212.81 L1588.27 1212.81 L1587.68 1212.81 L1587.1 1212.81 L1586.51 1212.81 L1585.93 1212.81 L1585.34 1212.81 L1584.75 1212.81 L1584.17 1212.81 L1583.58 1212.81 L1582.99 1212.81 L1582.41 1212.81 L1581.82 1212.81 L1581.23 1212.81 L1580.65 1212.81 L1580.06 1212.81 L1579.47 1212.81 L1578.89 1212.81 L1578.3 1212.81 L1577.72 1212.81 L1577.13 1212.81 L1576.54 1212.81 L1575.96 1212.81 L1575.37 1212.81 L1574.78 1212.81 L1574.2 1212.81 L1573.61 1212.81 L1573.02 1212.81 L1572.44 1212.81 L1571.85 1212.81 L1571.27 1212.81 L1570.68 1212.81 L1570.09 1212.81 L1569.51 1212.81 L1568.92 1212.81 L1568.33 1212.81 L1567.75 1212.81 L1567.16 1212.81 L1566.57 1212.81 L1565.99 1212.81 L1565.4 1212.81 L1564.81 1212.81 L1564.23 1212.81 L1563.64 1212.81 L1563.06 1212.81 L1562.47 1212.81 L1561.88 1212.81 L1561.3 1212.81 L1560.71 1212.81 L1560.12 1212.81 L1559.54 1212.81 L1558.95 1212.81 L1558.36 1212.81 L1557.78 1212.81 L1557.19 1212.81 L1556.6 1212.81 L1556.02 1212.81 L1555.43 1212.81 L1554.85 1212.81 L1554.26 1212.81 L1553.67 1212.81 L1553.09 1212.81 L1552.5 1212.81 L1551.91 1212.81 L1551.33 1212.81 L1550.74 1212.81 L1550.15 1212.81 L1549.57 1212.81 L1548.98 1212.81 L1548.4 1212.81 L1547.81 1212.81 L1547.22 1212.81 L1546.64 1212.81 L1546.05 1212.81 L1545.46 1212.81 L1544.88 1212.81 L1544.29 1212.81 L1543.7 1212.81 L1543.12 1212.81 L1542.53 1212.81 L1541.94 1212.81 L1541.36 1212.81 L1540.77 1212.81 L1540.19 1212.81 L1539.6 1212.81 L1539.01 1212.81 L1538.43 1212.81 L1537.84 1212.81 L1537.25 1212.81 L1536.67 1212.81 L1536.08 1212.81 L1535.49 1212.81 L1534.91 1212.81 L1534.32 1212.81 L1533.73 1212.81 L1533.15 1212.81 L1532.56 1212.81 L1531.98 1212.81 L1531.39 1212.81 L1530.8 1212.81 L1530.22 1212.81 L1529.63 1212.81 L1529.04 1212.81 L1528.46 1212.81 L1527.87 1212.81 L1527.28 1212.81 L1526.7 1212.81 L1526.11 1212.81 L1525.52 1212.81 L1524.94 1212.81 L1524.35 1212.81 L1523.77 1212.81 L1523.18 1212.81 L1522.59 1212.81 L1522.01 1212.81 L1521.42 1212.81 L1520.83 1212.81 L1520.25 1212.81 L1519.66 1212.81 L1519.07 1212.81 L1518.49 1212.81 L1517.9 1212.81 L1517.32 1212.81 L1516.73 1212.81 L1516.14 1212.81 L1515.56 1212.81 L1514.97 1212.81 L1514.38 1212.81 L1513.8 1212.81 L1513.21 1212.81 L1512.62 1212.81 L1512.04 1212.81 L1511.45 1212.81 L1510.86 1212.81 L1510.28 1212.81 L1509.69 1212.81 L1509.11 1212.81 L1508.52 1212.81 L1507.93 1212.81 L1507.35 1212.81 L1506.76 1212.81 L1506.17 1212.81 L1505.59 1212.81 L1505 1212.81 L1504.41 1212.81 L1503.83 1212.81 L1503.24 1212.81 L1502.65 1212.81 L1502.07 1212.81 L1501.48 1212.81 L1500.9 1212.81 L1500.31 1212.81 L1499.72 1212.81 L1499.14 1212.81 L1498.55 1212.81 L1497.96 1212.81 L1497.38 1212.81 L1496.79 1212.81 L1496.2 1212.81 L1495.62 1212.81 L1495.03 1212.81 L1494.45 1212.81 L1493.86 1212.81 L1493.27 1212.81 L1492.69 1212.81 L1492.1 1212.81 L1491.51 1212.81 L1490.93 1212.81 L1490.34 1212.81 L1489.75 1212.81 L1489.17 1212.81 L1488.58 1212.81 L1487.99 1212.81 L1487.41 1212.81 L1486.82 1212.81 L1486.24 1212.81 L1485.65 1212.81 L1485.06 1212.81 L1484.48 1212.81 L1483.89 1212.81 L1483.3 1212.81 L1482.72 1212.81 L1482.13 1212.81 L1481.54 1212.81 L1480.96 1212.81 L1480.37 1212.81 L1479.78 1212.81 L1479.2 1212.81 L1478.61 1212.81 L1478.03 1212.81 L1477.44 1212.81 L1476.85 1212.81 L1476.27 1212.81 L1475.68 1212.81 L1475.09 1212.81 L1474.51 1212.81 L1473.92 1212.81 L1473.33 1212.81 L1472.75 1212.81 L1472.16 1212.81 L1471.57 1212.81 L1470.99 1212.81 L1470.4 1212.81 L1469.82 1212.81 L1469.23 1212.81 L1468.64 1212.81 L1468.06 1212.81 L1467.47 1212.81 L1466.88 1212.81 L1466.3 1212.81 L1465.71 1212.81 L1465.12 1212.81 L1464.54 1212.81 L1463.95 1212.81 L1463.37 1212.81 L1462.78 1212.81 L1462.19 1212.81 L1461.61 1212.81 L1461.02 1212.81 L1460.43 1212.81 L1459.85 1212.81 L1459.26 1212.81 L1458.67 1212.81 L1458.09 1212.81 L1457.5 1212.81 L1456.91 1212.81 L1456.33 1212.81 L1455.74 1212.81 L1455.16 1212.81 L1454.57 1212.81 L1453.98 1212.81 L1453.4 1212.81 L1452.81 1212.81 L1452.22 1212.81 L1451.64 1212.81 L1451.05 1212.81 L1450.46 1212.81 L1449.88 1212.81 L1449.29 1212.81 L1448.7 1212.81 L1448.12 1212.81 L1447.53 1212.81 L1446.95 1212.81 L1446.36 1212.81 L1445.77 1212.81 L1445.19 1212.81 L1444.6 1212.81 L1444.01 1212.81 L1443.43 1212.81 L1442.84 1212.81 L1442.25 1212.81 L1441.67 1212.81 L1441.08 1212.81 L1440.5 1212.81 L1439.91 1212.81 L1439.32 1212.81 L1438.74 1212.81 L1438.15 1212.81 L1437.56 1212.81 L1436.98 1212.81 L1436.39 1212.81 L1435.8 1212.81 L1435.22 1212.81 L1434.63 1212.81 L1434.04 1212.81 L1433.46 1212.81 L1432.87 1212.81 L1432.29 1212.81 L1431.7 1212.81 L1431.11 1212.81 L1430.53 1212.81 L1429.94 1212.81 L1429.35 1212.81 L1428.77 1212.81 L1428.18 1212.81 L1427.59 1212.81 L1427.01 1212.81 L1426.42 1212.81 L1425.83 1212.81 L1425.25 1212.81 L1424.66 1212.81 L1424.08 1212.81 L1423.49 1212.81 L1422.9 1212.81 L1422.32 1212.81 L1421.73 1212.81 L1421.14 1212.81 L1420.56 1212.81 L1419.97 1212.81 L1419.38 1212.81 L1418.8 1212.81 L1418.21 1212.81 L1417.63 1212.81 L1417.04 1212.81 L1416.45 1212.81 L1415.87 1212.81 L1415.28 1212.81 L1414.69 1212.81 L1414.11 1212.81 L1413.52 1212.81 L1412.93 1212.81 L1412.35 1212.81 L1411.76 1212.81 L1411.17 1212.81 L1410.59 1212.81 L1410 1212.81 L1409.42 1212.81 L1408.83 1212.81 L1408.24 1212.81 L1407.66 1212.81 L1407.07 1212.81 L1406.48 1212.81 L1405.9 1212.81 L1405.31 1212.81 L1404.72 1212.81 L1404.14 1212.81 L1403.55 1212.81 L1402.96 1212.81 L1402.38 1212.81 L1401.79 1212.81 L1401.21 1212.81 L1400.62 1212.81 L1400.03 1212.81 L1399.45 1212.81 L1398.86 1212.81 L1398.27 1212.81 L1397.69 1212.81 L1397.1 1212.81 L1396.51 1212.81 L1395.93 1212.81 L1395.34 1212.81 L1394.75 1212.81 L1394.17 1212.81 L1393.58 1212.81 L1393 1212.81 L1392.41 1212.81 L1391.82 1212.81 L1391.24 1212.81 L1390.65 1212.81 L1390.06 1212.81 L1389.48 1212.81 L1388.89 1212.81 L1388.3 1212.81 L1387.72 1212.81 L1387.13 1212.81 L1386.55 1212.81 L1385.96 1212.81 L1385.37 1212.81 L1384.79 1212.81 L1384.2 1212.81 L1383.61 1212.81 L1383.03 1212.81 L1382.44 1212.81 L1381.85 1212.81 L1381.27 1212.81 L1380.68 1212.81 L1380.09 1212.81 L1379.51 1212.81 L1378.92 1212.81 L1378.34 1212.81 L1377.75 1212.81 L1377.16 1212.81 L1376.58 1212.81 L1375.99 1212.81 L1375.4 1212.81 L1374.82 1212.81 L1374.23 1212.81 L1373.64 1212.81 L1373.06 1212.81 L1372.47 1212.81 L1371.88 1212.81 L1371.3 1212.81 L1370.71 1212.81 L1370.13 1212.81 L1369.54 1212.81 L1368.95 1212.81 L1368.37 1212.81 L1367.78 1212.81 L1367.19 1212.81 L1366.61 1212.81 L1366.02 1212.81 L1365.43 1212.81 L1364.85 1212.81 L1364.26 1212.81 L1363.68 1212.81 L1363.09 1212.81 L1362.5 1212.81 L1361.92 1212.81 L1361.33 1212.81 L1360.74 1212.81 L1360.16 1212.81 L1359.57 1212.81 L1358.98 1212.81 L1358.4 1212.81 L1357.81 1212.81 L1357.22 1212.81 L1356.64 1212.81 L1356.05 1212.81 L1355.47 1212.81 L1354.88 1212.81 L1354.29 1212.81 L1353.71 1212.81 L1353.12 1212.81 L1352.53 1212.81 L1351.95 1212.81 L1351.36 1212.81 L1350.77 1212.81 L1350.19 1212.81 L1349.6 1212.81 L1349.01 1212.81 L1348.43 1212.81 L1347.84 1212.81 L1347.26 1212.81 L1346.67 1212.81 L1346.08 1212.81 L1345.5 1212.81 L1344.91 1212.81 L1344.32 1212.81 L1343.74 1212.81 L1343.15 1212.81 L1342.56 1212.81 L1341.98 1212.81 L1341.39 1212.81 L1340.8 1212.81 L1340.22 1212.81 L1339.63 1212.81 L1339.05 1212.81 L1338.46 1212.81 L1337.87 1212.81 L1337.29 1212.81 L1336.7 1212.81 L1336.11 1212.81 L1335.53 1212.81 L1334.94 1212.81 L1334.35 1212.81 L1333.77 1212.81 L1333.18 1212.81 L1332.6 1212.81 L1332.01 1212.81 L1331.42 1212.81 L1330.84 1212.81 L1330.25 1212.81 L1329.66 1212.81 L1329.08 1212.81 L1328.49 1212.81 L1327.9 1212.81 L1327.32 1212.81 L1326.73 1212.81 L1326.14 1212.81 L1325.56 1212.81 L1324.97 1212.81 L1324.39 1212.81 L1323.8 1212.81 L1323.21 1212.81 L1322.63 1212.81 L1322.04 1212.81 L1321.45 1212.81 L1320.87 1212.81 L1320.28 1212.81 L1319.69 1212.81 L1319.11 1212.81 L1318.52 1212.81 L1317.93 1212.81 L1317.35 1212.81 L1316.76 1212.81 L1316.18 1212.81 L1315.59 1212.81 L1315 1212.81 L1314.42 1212.81 L1313.83 1212.81 L1313.24 1212.81 L1312.66 1212.81 L1312.07 1212.81 L1311.48 1212.81 L1310.9 1212.81 L1310.31 1212.81 L1309.73 1212.81 L1309.14 1212.81 L1308.55 1212.81 L1307.97 1212.81 L1307.38 1212.81 L1306.79 1212.81 L1306.21 1212.81 L1305.62 1212.81 L1305.03 1212.81 L1304.45 1212.81 L1303.86 1212.81 L1303.27 1212.81 L1302.69 1212.81 L1302.1 1212.81 L1301.52 1212.81 L1300.93 1212.81 L1300.34 1212.81 L1299.76 1212.81 L1299.17 1212.81 L1298.58 1212.81 L1298 1212.81 L1297.41 1212.81 L1296.82 1212.81 L1296.24 1212.81 L1295.65 1212.81 L1295.06 1212.81 L1294.48 1212.81 L1293.89 1212.81 L1293.31 1212.81 L1292.72 1212.81 L1292.13 1212.81 L1291.55 1212.81 L1290.96 1212.81 L1290.37 1212.81 L1289.79 1212.81 L1289.2 1212.81 L1288.61 1212.81 L1288.03 1212.81 L1287.44 1212.81 L1286.86 1212.81 L1286.27 1212.81 L1285.68 1212.81 L1285.1 1212.81 L1284.51 1212.81 L1283.92 1212.81 L1283.34 1212.81 L1282.75 1212.81 L1282.16 1212.81 L1281.58 1212.81 L1280.99 1212.81 L1280.4 1212.81 L1279.82 1212.81 L1279.23 1212.81 L1278.65 1212.81 L1278.06 1212.81 L1277.47 1212.81 L1276.89 1212.81 L1276.3 1212.81 L1275.71 1212.81 L1275.13 1212.81 L1274.54 1212.81 L1273.95 1212.81 L1273.37 1212.81 L1272.78 1212.81 L1272.19 1212.81 L1271.61 1212.81 L1271.02 1212.81 L1270.44 1212.81 L1269.85 1212.81 L1269.26 1212.81 L1268.68 1212.81 L1268.09 1212.81 L1267.5 1212.81 L1266.92 1212.81 L1266.33 1212.81 L1265.74 1212.81 L1265.16 1212.81 L1264.57 1212.81 L1263.98 1212.81 L1263.4 1212.81 L1262.81 1212.81 L1262.23 1212.81 L1261.64 1212.81 L1261.05 1212.81 L1260.47 1212.81 L1259.88 1212.81 L1259.29 1212.81 L1258.71 1212.81 L1258.12 1212.81 L1257.53 1212.81 L1256.95 1212.81 L1256.36 1212.81 L1255.78 1212.81 L1255.19 1212.81 L1254.6 1212.81 L1254.02 1212.81 L1253.43 1212.81 L1252.84 1212.81 L1252.26 1212.81 L1251.67 1212.81 L1251.08 1212.81 L1250.5 1212.81 L1249.91 1212.81 L1249.32 1212.81 L1248.74 1212.81 L1248.15 1212.81 L1247.57 1212.81 L1246.98 1212.81 L1246.39 1212.81 L1245.81 1212.81 L1245.22 1212.81 L1244.63 1212.81 L1244.05 1212.81 L1243.46 1212.81 L1242.87 1212.81 L1242.29 1212.81 L1241.7 1212.81 L1241.11 1212.81 L1240.53 1212.81 L1239.94 1212.81 L1239.36 1212.81 L1238.77 1212.81 L1238.18 1212.81 L1237.6 1212.81 L1237.01 1212.81 L1236.42 1212.81 L1235.84 1212.81 L1235.25 1212.81 L1234.66 1212.81 L1234.08 1212.81 L1233.49 1212.81 L1232.91 1212.81 L1232.32 1212.81 L1231.73 1212.81 L1231.15 1212.81 L1230.56 1212.81 L1229.97 1212.81 L1229.39 1212.81 L1228.8 1212.81 L1228.21 1212.81 L1227.63 1212.81 L1227.04 1212.81 L1226.45 1212.81 L1225.87 1212.81 L1225.28 1212.81 L1224.7 1212.81 L1224.11 1212.81 L1223.52 1212.81 L1222.94 1212.81 L1222.35 1212.81 L1221.76 1212.81 L1221.18 1212.81 L1220.59 1212.81 L1220 1212.81 L1219.42 1212.81 L1218.83 1212.81 L1218.24 1212.81 L1217.66 1212.81 L1217.07 1212.81 L1216.49 1212.81 L1215.9 1212.81 L1215.31 1212.81 L1214.73 1212.81 L1214.14 1212.81 L1213.55 1212.81 L1212.97 1212.81 L1212.38 1212.81 L1211.79 1212.81 L1211.21 1212.81 L1210.62 1212.81 L1210.03 1212.81 L1209.45 1212.81 L1208.86 1212.81 L1208.28 1212.81 L1207.69 1212.81 L1207.1 1212.81 L1206.52 1212.81 L1205.93 1212.81 L1205.34 1212.81 L1204.76 1212.81 L1204.17 1212.81 L1203.58 1212.81 L1203 1212.81 L1202.41 1212.81 L1201.83 1212.81 L1201.24 1212.81 L1200.65 1212.81 L1200.07 1212.81 L1199.48 1212.81 L1198.89 1212.81 L1198.31 1212.81 L1197.72 1212.81 L1197.13 1212.81 L1196.55 1212.81 L1195.96 1212.81 L1195.37 1212.81 L1194.79 1212.81 L1194.2 1212.81 L1193.62 1212.81 L1193.03 1212.81 L1192.44 1212.81 L1191.86 1212.81 L1191.27 1212.81 L1190.68 1212.81 L1190.1 1212.81 L1189.51 1212.81 L1188.92 1212.81 L1188.34 1212.81 L1187.75 1212.81 L1187.16 1212.81 L1186.58 1212.81 L1185.99 1212.81 L1185.41 1212.81 L1184.82 1212.81 L1184.23 1212.81 L1183.65 1212.81 L1183.06 1212.81 L1182.47 1212.81 L1181.89 1212.81 L1181.3 1212.81 L1180.71 1212.81 L1180.13 1212.81 L1179.54 1212.81 L1178.96 1212.81 L1178.37 1212.81 L1177.78 1212.81 L1177.2 1212.81 L1176.61 1212.81 L1176.02 1212.81 L1175.44 1212.81 L1174.85 1212.81 L1174.26 1212.81 L1173.68 1212.81 L1173.09 1212.81 L1172.5 1212.81 L1171.92 1212.81 L1171.33 1212.81 L1170.75 1212.81 L1170.16 1212.81 L1169.57 1212.81 L1168.99 1212.81 L1168.4 1212.81 L1167.81 1212.81 L1167.23 1212.81 L1166.64 1212.81 L1166.05 1212.81 L1165.47 1212.81 L1164.88 1212.81 L1164.29 1212.81 L1163.71 1212.81 L1163.12 1212.81 L1162.54 1212.81 L1161.95 1212.81 L1161.36 1212.81 L1160.78 1212.81 L1160.19 1212.81 L1159.6 1212.81 L1159.02 1212.81 L1158.43 1212.81 L1157.84 1212.81 L1157.26 1212.81 L1156.67 1212.81 L1156.09 1212.81 L1155.5 1212.81 L1154.91 1212.81 L1154.33 1212.81 L1153.74 1212.81 L1153.15 1212.81 L1152.57 1212.81 L1151.98 1212.81 L1151.39 1212.81 L1150.81 1212.81 L1150.22 1212.81 L1149.63 1212.81 L1149.05 1212.81 L1148.46 1212.81 L1147.88 1212.81 L1147.29 1212.81 L1146.7 1212.81 L1146.12 1212.81 L1145.53 1212.81 L1144.94 1212.81 L1144.36 1212.81 L1143.77 1212.81 L1143.18 1212.81 L1142.6 1212.81 L1142.01 1212.81 L1141.42 1212.81 L1140.84 1212.81 L1140.25 1212.81 L1139.67 1212.81 L1139.08 1212.81 L1138.49 1212.81 L1137.91 1212.81 L1137.32 1212.81 L1136.73 1212.81 L1136.15 1212.81 L1135.56 1212.81 L1134.97 1212.81 L1134.39 1212.81 L1133.8 1212.81 L1133.21 1212.81 L1132.63 1212.81 L1132.04 1212.81 L1131.46 1212.81 L1130.87 1212.81 L1130.28 1212.81 L1129.7 1212.81 L1129.11 1212.81 L1128.52 1212.81 L1127.94 1212.81 L1127.35 1212.81 L1126.76 1212.81 L1126.18 1212.81 L1125.59 1212.81 L1125.01 1212.81 L1124.42 1212.81 L1123.83 1212.81 L1123.25 1212.81 L1122.66 1212.81 L1122.07 1212.81 L1121.49 1212.81 L1120.9 1212.81 L1120.31 1212.81 L1119.73 1212.81 L1119.14 1212.81 L1118.55 1212.81 L1117.97 1212.81 L1117.38 1212.81 L1116.8 1212.81 L1116.21 1212.81 L1115.62 1212.81 L1115.04 1212.81 L1114.45 1212.81 L1113.86 1212.81 L1113.28 1212.81 L1112.69 1212.81 L1112.1 1212.81 L1111.52 1212.81 L1110.93 1212.81 L1110.34 1212.81 L1109.76 1212.81 L1109.17 1212.81 L1108.59 1212.81 L1108 1212.81 L1107.41 1212.81 L1106.83 1212.81 L1106.24 1212.81 L1105.65 1212.81 L1105.07 1212.81 L1104.48 1212.81 L1103.89 1212.81 L1103.31 1212.81 L1102.72 1212.81 L1102.14 1212.81 L1101.55 1212.81 L1100.96 1212.81 L1100.38 1212.81 L1099.79 1212.81 L1099.2 1212.81 L1098.62 1212.81 L1098.03 1212.81 L1097.44 1212.81 L1096.86 1212.81 L1096.27 1212.81 L1095.68 1212.81 L1095.1 1212.81 L1094.51 1212.81 L1093.93 1212.81 L1093.34 1212.81 L1092.75 1212.81 L1092.17 1212.81 L1091.58 1212.81 L1090.99 1212.81 L1090.41 1212.81 L1089.82 1212.81 L1089.23 1212.81 L1088.65 1212.81 L1088.06 1212.81 L1087.47 1212.81 L1086.89 1212.81 L1086.3 1212.81 L1085.72 1212.81 L1085.13 1212.81 L1084.54 1212.81 L1083.96 1212.81 L1083.37 1212.81 L1082.78 1212.81 L1082.2 1212.81 L1081.61 1212.81 L1081.02 1212.81 L1080.44 1212.81 L1079.85 1212.81 L1079.26 1212.81 L1078.68 1212.81 L1078.09 1212.81 L1077.51 1212.81 L1076.92 1212.81 L1076.33 1212.81 L1075.75 1212.81 L1075.16 1212.81 L1074.57 1212.81 L1073.99 1212.81 L1073.4 1212.81 L1072.81 1212.81 L1072.23 1212.81 L1071.64 1212.81 L1071.06 1212.81 L1070.47 1212.81 L1069.88 1212.81 L1069.3 1212.81 L1068.71 1212.81 L1068.12 1212.81 L1067.54 1212.81 L1066.95 1212.81 L1066.36 1212.81 L1065.78 1212.81 L1065.19 1212.81 L1064.6 1212.81 L1064.02 1212.81 L1063.43 1212.81 L1062.85 1212.81 L1062.26 1212.81 L1061.67 1212.81 L1061.09 1212.81 L1060.5 1212.81 L1059.91 1212.81 L1059.33 1212.81 L1058.74 1212.81 L1058.15 1212.81 L1057.57 1212.81 L1056.98 1212.81 L1056.39 1212.81 L1055.81 1212.81 L1055.22 1212.81 L1054.64 1212.81 L1054.05 1212.81 L1053.46 1212.81 L1052.88 1212.81 L1052.29 1212.81 L1051.7 1212.81 L1051.12 1212.81 L1050.53 1212.81 L1049.94 1212.81 L1049.36 1212.81 L1048.77 1212.81 L1048.19 1212.81 L1047.6 1212.81 L1047.01 1212.81 L1046.43 1212.81 L1045.84 1212.81 L1045.25 1212.81 L1044.67 1212.81 L1044.08 1212.81 L1043.49 1212.81 L1042.91 1212.81 L1042.32 1212.81 L1041.73 1212.81 L1041.15 1212.81 L1040.56 1212.81 L1039.98 1212.81 L1039.39 1212.81 L1038.8 1212.81 L1038.22 1212.81 L1037.63 1212.81 L1037.04 1212.81 L1036.46 1212.81 L1035.87 1212.81 L1035.28 1212.81 L1034.7 1212.81 L1034.11 1212.81 L1033.52 1212.81 L1032.94 1212.81 L1032.35 1212.81 L1031.77 1212.81 L1031.18 1212.81 L1030.59 1212.81 L1030.01 1212.81 L1029.42 1212.81 L1028.83 1212.81 L1028.25 1212.81 L1027.66 1212.81 L1027.07 1212.81 L1026.49 1212.81 L1025.9 1212.81 L1025.32 1212.81 L1024.73 1212.81 L1024.14 1212.81 L1023.56 1212.81 L1022.97 1212.81 L1022.38 1212.81 L1021.8 1212.81 L1021.21 1212.81 L1020.62 1212.81 L1020.04 1212.81 L1019.45 1212.81 L1018.86 1212.81 L1018.28 1212.81 L1017.69 1212.81 L1017.11 1212.81 L1016.52 1212.81 L1015.93 1212.81 L1015.35 1212.81 L1014.76 1212.81 L1014.17 1212.81 L1013.59 1212.81 L1013 1212.81 L1012.41 1212.81 L1011.83 1212.81 L1011.24 1212.81 L1010.65 1212.81 L1010.07 1212.81 L1009.48 1212.81 L1008.9 1212.81 L1008.31 1212.81 L1007.72 1212.81 L1007.14 1212.81 L1006.55 1212.81 L1005.96 1212.81 L1005.38 1212.81 L1004.79 1212.81 L1004.2 1212.81 L1003.62 1212.81 L1003.03 1212.81 L1002.44 1212.81 L1001.86 1212.81 L1001.27 1212.81 L1000.69 1212.81 L1000.1 1212.81 L999.513 1212.81 L998.926 1212.81 L998.34 1212.81 L997.754 1212.81 L997.167 1212.81 L996.581 1212.81 L995.994 1212.81 L995.408 1212.81 L994.822 1212.81 L994.235 1212.81 L993.649 1212.81 L993.062 1212.81 L992.476 1212.81 L991.889 1212.81 L991.303 1212.81 L990.717 1212.81 L990.13 1212.81 L989.544 1212.81 L988.957 1212.81 L988.371 1212.81 L987.785 1212.81 L987.198 1212.81 L986.612 1212.81 L986.025 1212.81  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.18 986.612,1213.18 987.198,1213.18 987.785,1213.18 988.371,1213.18 988.957,1213.18 989.544,1213.18 990.13,1213.18 990.717,1213.18 991.303,1213.18 991.889,1213.18 992.476,1213.18 993.062,1213.18 993.649,1213.18 994.235,1213.18 994.822,1213.18 995.408,1213.18 995.994,1213.18 996.581,1213.18 997.167,1213.18 997.754,1213.18 998.34,1213.18 998.926,1213.18 999.513,1213.18 1000.1,1213.18 1000.69,1213.18 1001.27,1213.18 1001.86,1213.18 1002.44,1213.18 1003.03,1213.18 1003.62,1213.18 1004.2,1213.18 1004.79,1213.18 1005.38,1213.18 1005.96,1213.18 1006.55,1213.18 1007.14,1213.18 1007.72,1213.18 1008.31,1213.18 1008.9,1213.18 1009.48,1213.18 1010.07,1213.18 1010.65,1213.18 1011.24,1213.18 1011.83,1213.18 1012.41,1213.18 1013,1213.18 1013.59,1213.18 1014.17,1213.18 1014.76,1213.18 1015.35,1213.18 1015.93,1213.18 1016.52,1213.18 1017.11,1213.18 1017.69,1213.18 1018.28,1213.18 1018.86,1213.18 1019.45,1213.18 1020.04,1213.18 1020.62,1213.18 1021.21,1213.18 1021.8,1213.18 1022.38,1213.18 1022.97,1213.18 1023.56,1213.18 1024.14,1213.18 1024.73,1213.18 1025.32,1213.18 1025.9,1213.18 1026.49,1213.18 1027.07,1213.18 1027.66,1213.18 1028.25,1213.18 1028.83,1213.18 1029.42,1213.18 1030.01,1213.18 1030.59,1213.18 1031.18,1213.18 1031.77,1213.18 1032.35,1213.18 1032.94,1213.18 1033.52,1213.18 1034.11,1213.18 1034.7,1213.18 1035.28,1213.18 1035.87,1213.18 1036.46,1213.18 1037.04,1213.18 1037.63,1213.18 1038.22,1213.18 1038.8,1213.18 1039.39,1213.18 1039.98,1213.18 1040.56,1213.18 1041.15,1213.18 1041.73,1213.18 1042.32,1213.18 1042.91,1213.18 1043.49,1213.18 1044.08,1213.18 1044.67,1213.18 1045.25,1213.18 1045.84,1213.18 1046.43,1213.18 1047.01,1213.18 1047.6,1213.18 1048.19,1213.18 1048.77,1213.18 1049.36,1213.18 1049.94,1213.18 1050.53,1213.18 1051.12,1213.18 1051.7,1213.18 1052.29,1213.18 1052.88,1213.18 1053.46,1213.18 1054.05,1213.18 1054.64,1213.18 1055.22,1213.18 1055.81,1213.18 1056.39,1213.18 1056.98,1213.18 1057.57,1213.18 1058.15,1213.18 1058.74,1213.18 1059.33,1213.18 1059.91,1213.18 1060.5,1213.18 1061.09,1213.18 1061.67,1213.18 1062.26,1213.18 1062.85,1213.18 1063.43,1213.18 1064.02,1213.18 1064.6,1213.18 1065.19,1213.18 1065.78,1213.18 1066.36,1213.18 1066.95,1213.18 1067.54,1213.18 1068.12,1213.18 1068.71,1213.18 1069.3,1213.18 1069.88,1213.18 1070.47,1213.18 1071.06,1213.18 1071.64,1213.18 1072.23,1213.18 1072.81,1213.18 1073.4,1213.18 1073.99,1213.18 1074.57,1213.18 1075.16,1213.18 1075.75,1213.18 1076.33,1213.18 1076.92,1213.18 1077.51,1213.18 1078.09,1213.18 1078.68,1213.18 1079.26,1213.18 1079.85,1213.18 1080.44,1213.18 1081.02,1213.18 1081.61,1213.18 1082.2,1213.18 1082.78,1213.18 1083.37,1213.18 1083.96,1213.18 1084.54,1213.18 1085.13,1213.18 1085.72,1213.18 1086.3,1213.18 1086.89,1213.18 1087.47,1213.18 1088.06,1213.18 1088.65,1213.18 1089.23,1213.18 1089.82,1213.18 1090.41,1213.18 1090.99,1213.18 1091.58,1213.18 1092.17,1213.18 1092.75,1213.18 1093.34,1213.18 1093.93,1213.18 1094.51,1213.18 1095.1,1213.18 1095.68,1213.18 1096.27,1213.18 1096.86,1213.18 1097.44,1213.18 1098.03,1213.18 1098.62,1213.18 1099.2,1213.18 1099.79,1213.18 1100.38,1213.18 1100.96,1213.18 1101.55,1213.18 1102.14,1213.18 1102.72,1213.18 1103.31,1213.18 1103.89,1213.18 1104.48,1213.18 1105.07,1213.18 1105.65,1213.18 1106.24,1213.18 1106.83,1213.18 1107.41,1213.18 1108,1213.18 1108.59,1213.18 1109.17,1213.18 1109.76,1213.18 1110.34,1213.18 1110.93,1213.18 1111.52,1213.18 1112.1,1213.18 1112.69,1213.18 1113.28,1213.18 1113.86,1213.18 1114.45,1213.18 1115.04,1213.18 1115.62,1213.18 1116.21,1213.18 1116.8,1213.18 1117.38,1213.18 1117.97,1213.18 1118.55,1213.18 1119.14,1213.18 1119.73,1213.18 1120.31,1213.18 1120.9,1213.18 1121.49,1213.18 1122.07,1213.18 1122.66,1213.18 1123.25,1213.18 1123.83,1213.18 1124.42,1213.18 1125.01,1213.18 1125.59,1213.18 1126.18,1213.18 1126.76,1213.18 1127.35,1213.18 1127.94,1213.18 1128.52,1213.18 1129.11,1213.18 1129.7,1213.18 1130.28,1213.18 1130.87,1213.18 1131.46,1213.18 1132.04,1213.18 1132.63,1213.18 1133.21,1213.18 1133.8,1213.18 1134.39,1213.18 1134.97,1213.18 1135.56,1213.18 1136.15,1213.18 1136.73,1213.18 1137.32,1213.18 1137.91,1213.18 1138.49,1213.18 1139.08,1213.18 1139.67,1213.18 1140.25,1213.18 1140.84,1213.18 1141.42,1213.18 1142.01,1213.18 1142.6,1213.18 1143.18,1213.18 1143.77,1213.18 1144.36,1213.18 1144.94,1213.18 1145.53,1213.18 1146.12,1213.18 1146.7,1213.18 1147.29,1213.18 1147.88,1213.18 1148.46,1213.18 1149.05,1213.18 1149.63,1213.18 1150.22,1213.18 1150.81,1213.18 1151.39,1213.18 1151.98,1213.18 1152.57,1213.18 1153.15,1213.18 1153.74,1213.18 1154.33,1213.18 1154.91,1213.18 1155.5,1213.18 1156.09,1213.18 1156.67,1213.18 1157.26,1213.18 1157.84,1213.18 1158.43,1213.18 1159.02,1213.18 1159.6,1213.18 1160.19,1213.18 1160.78,1213.18 1161.36,1213.18 1161.95,1213.18 1162.54,1213.18 1163.12,1213.18 1163.71,1213.18 1164.29,1213.18 1164.88,1213.18 1165.47,1213.18 1166.05,1213.18 1166.64,1213.18 1167.23,1213.18 1167.81,1213.18 1168.4,1213.18 1168.99,1213.18 1169.57,1213.18 1170.16,1213.18 1170.75,1213.18 1171.33,1213.18 1171.92,1213.18 1172.5,1213.18 1173.09,1213.18 1173.68,1213.18 1174.26,1213.18 1174.85,1213.18 1175.44,1213.18 1176.02,1213.18 1176.61,1213.18 1177.2,1213.18 1177.78,1213.18 1178.37,1213.18 1178.96,1213.18 1179.54,1213.18 1180.13,1213.18 1180.71,1213.18 1181.3,1213.18 1181.89,1213.18 1182.47,1213.18 1183.06,1213.18 1183.65,1213.18 1184.23,1213.18 1184.82,1213.18 1185.41,1213.18 1185.99,1213.18 1186.58,1213.18 1187.16,1213.18 1187.75,1213.18 1188.34,1213.18 1188.92,1213.18 1189.51,1213.18 1190.1,1213.18 1190.68,1213.18 1191.27,1213.18 1191.86,1213.18 1192.44,1213.18 1193.03,1213.18 1193.62,1213.18 1194.2,1213.18 1194.79,1213.18 1195.37,1213.18 1195.96,1213.18 1196.55,1213.18 1197.13,1213.18 1197.72,1213.18 1198.31,1213.18 1198.89,1213.18 1199.48,1213.18 1200.07,1213.18 1200.65,1213.18 1201.24,1213.18 1201.83,1213.18 1202.41,1213.18 1203,1213.18 1203.58,1213.18 1204.17,1213.18 1204.76,1213.18 1205.34,1213.18 1205.93,1213.18 1206.52,1213.18 1207.1,1213.18 1207.69,1213.18 1208.28,1213.18 1208.86,1213.18 1209.45,1213.18 1210.03,1213.18 1210.62,1213.18 1211.21,1213.18 1211.79,1213.18 1212.38,1213.18 1212.97,1213.18 1213.55,1213.18 1214.14,1213.18 1214.73,1213.18 1215.31,1213.18 1215.9,1213.18 1216.49,1213.18 1217.07,1213.18 1217.66,1213.18 1218.24,1213.18 1218.83,1213.18 1219.42,1213.18 1220,1213.18 1220.59,1213.18 1221.18,1213.18 1221.76,1213.18 1222.35,1213.18 1222.94,1213.18 1223.52,1213.18 1224.11,1213.18 1224.7,1213.18 1225.28,1213.18 1225.87,1213.18 1226.45,1213.18 1227.04,1213.18 1227.63,1213.18 1228.21,1213.18 1228.8,1213.18 1229.39,1213.18 1229.97,1213.18 1230.56,1213.18 1231.15,1213.18 1231.73,1213.18 1232.32,1213.18 1232.91,1213.18 1233.49,1213.18 1234.08,1213.18 1234.66,1213.18 1235.25,1213.18 1235.84,1213.18 1236.42,1213.18 1237.01,1213.18 1237.6,1213.18 1238.18,1213.18 1238.77,1213.18 1239.36,1213.18 1239.94,1213.18 1240.53,1213.18 1241.11,1213.18 1241.7,1213.18 1242.29,1213.18 1242.87,1213.18 1243.46,1213.18 1244.05,1213.18 1244.63,1213.18 1245.22,1213.18 1245.81,1213.18 1246.39,1213.18 1246.98,1213.18 1247.57,1213.18 1248.15,1213.18 1248.74,1213.18 1249.32,1213.18 1249.91,1213.18 1250.5,1213.18 1251.08,1213.18 1251.67,1213.18 1252.26,1213.18 1252.84,1213.18 1253.43,1213.18 1254.02,1213.18 1254.6,1213.18 1255.19,1213.18 1255.78,1213.18 1256.36,1213.18 1256.95,1213.18 1257.53,1213.18 1258.12,1213.18 1258.71,1213.18 1259.29,1213.18 1259.88,1213.18 1260.47,1213.18 1261.05,1213.18 1261.64,1213.18 1262.23,1213.18 1262.81,1213.18 1263.4,1213.18 1263.98,1213.18 1264.57,1213.18 1265.16,1213.18 1265.74,1213.18 1266.33,1213.18 1266.92,1213.18 1267.5,1213.18 1268.09,1213.18 1268.68,1213.18 1269.26,1213.18 1269.85,1213.18 1270.44,1213.18 1271.02,1213.18 1271.61,1213.18 1272.19,1213.18 1272.78,1213.18 1273.37,1213.18 1273.95,1213.18 1274.54,1213.18 1275.13,1213.18 1275.71,1213.18 1276.3,1213.18 1276.89,1213.18 1277.47,1213.18 1278.06,1213.18 1278.65,1213.18 1279.23,1213.18 1279.82,1213.18 1280.4,1213.18 1280.99,1213.18 1281.58,1213.18 1282.16,1213.18 1282.75,1213.18 1283.34,1213.18 1283.92,1213.18 1284.51,1213.18 1285.1,1213.18 1285.68,1213.18 1286.27,1213.18 1286.86,1213.18 1287.44,1213.18 1288.03,1213.18 1288.61,1213.18 1289.2,1213.18 1289.79,1213.18 1290.37,1213.18 1290.96,1213.18 1291.55,1213.18 1292.13,1213.18 1292.72,1213.18 1293.31,1213.18 1293.89,1213.18 1294.48,1213.18 1295.06,1213.18 1295.65,1213.18 1296.24,1213.18 1296.82,1213.18 1297.41,1213.18 1298,1213.18 1298.58,1213.18 1299.17,1213.18 1299.76,1213.18 1300.34,1213.18 1300.93,1213.18 1301.52,1213.18 1302.1,1213.18 1302.69,1213.18 1303.27,1213.18 1303.86,1213.18 1304.45,1213.18 1305.03,1213.18 1305.62,1213.18 1306.21,1213.18 1306.79,1213.18 1307.38,1213.18 1307.97,1213.18 1308.55,1213.18 1309.14,1213.18 1309.73,1213.18 1310.31,1213.18 1310.9,1213.18 1311.48,1213.18 1312.07,1213.18 1312.66,1213.18 1313.24,1213.18 1313.83,1213.18 1314.42,1213.18 1315,1213.18 1315.59,1213.18 1316.18,1213.18 1316.76,1213.18 1317.35,1213.18 1317.93,1213.18 1318.52,1213.18 1319.11,1213.18 1319.69,1213.18 1320.28,1213.18 1320.87,1213.18 1321.45,1213.18 1322.04,1213.18 1322.63,1213.18 1323.21,1213.18 1323.8,1213.18 1324.39,1213.18 1324.97,1213.18 1325.56,1213.18 1326.14,1213.18 1326.73,1213.18 1327.32,1213.18 1327.9,1213.18 1328.49,1213.18 1329.08,1213.18 1329.66,1213.18 1330.25,1213.18 1330.84,1213.18 1331.42,1213.18 1332.01,1213.18 1332.6,1213.18 1333.18,1213.18 1333.77,1213.18 1334.35,1213.18 1334.94,1213.18 1335.53,1213.18 1336.11,1213.18 1336.7,1213.18 1337.29,1213.18 1337.87,1213.18 1338.46,1213.18 1339.05,1213.18 1339.63,1213.18 1340.22,1213.18 1340.8,1213.18 1341.39,1213.18 1341.98,1213.18 1342.56,1213.18 1343.15,1213.18 1343.74,1213.18 1344.32,1213.18 1344.91,1213.18 1345.5,1213.18 1346.08,1213.18 1346.67,1213.18 1347.26,1213.18 1347.84,1213.18 1348.43,1213.18 1349.01,1213.18 1349.6,1213.18 1350.19,1213.18 1350.77,1213.18 1351.36,1213.18 1351.95,1213.18 1352.53,1213.18 1353.12,1213.18 1353.71,1213.18 1354.29,1213.18 1354.88,1213.18 1355.47,1213.18 1356.05,1213.18 1356.64,1213.18 1357.22,1213.18 1357.81,1213.18 1358.4,1213.18 1358.98,1213.18 1359.57,1213.18 1360.16,1213.18 1360.74,1213.18 1361.33,1213.18 1361.92,1213.18 1362.5,1213.18 1363.09,1213.18 1363.68,1213.18 1364.26,1213.18 1364.85,1213.18 1365.43,1213.18 1366.02,1213.18 1366.61,1213.18 1367.19,1213.18 1367.78,1213.18 1368.37,1213.18 1368.95,1213.18 1369.54,1213.18 1370.13,1213.18 1370.71,1213.18 1371.3,1213.18 1371.88,1213.18 1372.47,1213.18 1373.06,1213.18 1373.64,1213.18 1374.23,1213.18 1374.82,1213.18 1375.4,1213.18 1375.99,1213.18 1376.58,1213.18 1377.16,1213.18 1377.75,1213.18 1378.34,1213.18 1378.92,1213.18 1379.51,1213.18 1380.09,1213.18 1380.68,1213.18 1381.27,1213.18 1381.85,1213.18 1382.44,1213.18 1383.03,1213.18 1383.61,1213.18 1384.2,1213.18 1384.79,1213.18 1385.37,1213.18 1385.96,1213.18 1386.55,1213.18 1387.13,1213.18 1387.72,1213.18 1388.3,1213.18 1388.89,1213.18 1389.48,1213.18 1390.06,1213.18 1390.65,1213.18 1391.24,1213.18 1391.82,1213.18 1392.41,1213.18 1393,1213.18 1393.58,1213.18 1394.17,1213.18 1394.75,1213.18 1395.34,1213.18 1395.93,1213.18 1396.51,1213.18 1397.1,1213.18 1397.69,1213.18 1398.27,1213.18 1398.86,1213.18 1399.45,1213.18 1400.03,1213.18 1400.62,1213.18 1401.21,1213.18 1401.79,1213.18 1402.38,1213.18 1402.96,1213.18 1403.55,1213.18 1404.14,1213.18 1404.72,1213.18 1405.31,1213.18 1405.9,1213.18 1406.48,1213.18 1407.07,1213.18 1407.66,1213.18 1408.24,1213.18 1408.83,1213.18 1409.42,1213.18 1410,1213.18 1410.59,1213.18 1411.17,1213.18 1411.76,1213.18 1412.35,1213.18 1412.93,1213.18 1413.52,1213.18 1414.11,1213.18 1414.69,1213.18 1415.28,1213.18 1415.87,1213.18 1416.45,1213.18 1417.04,1213.18 1417.63,1213.18 1418.21,1213.18 1418.8,1213.18 1419.38,1213.18 1419.97,1213.18 1420.56,1213.18 1421.14,1213.18 1421.73,1213.18 1422.32,1213.18 1422.9,1213.18 1423.49,1213.18 1424.08,1213.18 1424.66,1213.18 1425.25,1213.18 1425.83,1213.18 1426.42,1213.18 1427.01,1213.18 1427.59,1213.18 1428.18,1213.18 1428.77,1213.18 1429.35,1213.18 1429.94,1213.18 1430.53,1213.18 1431.11,1213.18 1431.7,1213.18 1432.29,1213.18 1432.87,1213.18 1433.46,1213.18 1434.04,1213.18 1434.63,1213.18 1435.22,1213.18 1435.8,1213.18 1436.39,1213.18 1436.98,1213.18 1437.56,1213.18 1438.15,1213.18 1438.74,1213.18 1439.32,1213.18 1439.91,1213.18 1440.5,1213.18 1441.08,1213.18 1441.67,1213.18 1442.25,1213.18 1442.84,1213.18 1443.43,1213.18 1444.01,1213.18 1444.6,1213.18 1445.19,1213.18 1445.77,1213.18 1446.36,1213.18 1446.95,1213.18 1447.53,1213.18 1448.12,1213.18 1448.7,1213.18 1449.29,1213.18 1449.88,1213.18 1450.46,1213.18 1451.05,1213.18 1451.64,1213.18 1452.22,1213.18 1452.81,1213.18 1453.4,1213.18 1453.98,1213.18 1454.57,1213.18 1455.16,1213.18 1455.74,1213.18 1456.33,1213.18 1456.91,1213.18 1457.5,1213.18 1458.09,1213.18 1458.67,1213.18 1459.26,1213.18 1459.85,1213.18 1460.43,1213.18 1461.02,1213.18 1461.61,1213.18 1462.19,1213.18 1462.78,1213.18 1463.37,1213.18 1463.95,1213.18 1464.54,1213.18 1465.12,1213.18 1465.71,1213.18 1466.3,1213.18 1466.88,1213.18 1467.47,1213.18 1468.06,1213.18 1468.64,1213.18 1469.23,1213.18 1469.82,1213.18 1470.4,1213.18 1470.99,1213.18 1471.57,1213.18 1472.16,1213.18 1472.75,1213.18 1473.33,1213.18 1473.92,1213.18 1474.51,1213.18 1475.09,1213.18 1475.68,1213.18 1476.27,1213.18 1476.85,1213.18 1477.44,1213.18 1478.03,1213.18 1478.61,1213.18 1479.2,1213.18 1479.78,1213.18 1480.37,1213.18 1480.96,1213.18 1481.54,1213.18 1482.13,1213.18 1482.72,1213.18 1483.3,1213.18 1483.89,1213.18 1484.48,1213.18 1485.06,1213.18 1485.65,1213.18 1486.24,1213.18 1486.82,1213.18 1487.41,1213.18 1487.99,1213.18 1488.58,1213.18 1489.17,1213.18 1489.75,1213.18 1490.34,1213.18 1490.93,1213.18 1491.51,1213.18 1492.1,1213.18 1492.69,1213.18 1493.27,1213.18 1493.86,1213.18 1494.45,1213.18 1495.03,1213.18 1495.62,1213.18 1496.2,1213.18 1496.79,1213.18 1497.38,1213.18 1497.96,1213.18 1498.55,1213.18 1499.14,1213.18 1499.72,1213.18 1500.31,1213.18 1500.9,1213.18 1501.48,1213.18 1502.07,1213.18 1502.65,1213.18 1503.24,1213.18 1503.83,1213.18 1504.41,1213.18 1505,1213.18 1505.59,1213.18 1506.17,1213.18 1506.76,1213.18 1507.35,1213.18 1507.93,1213.18 1508.52,1213.18 1509.11,1213.18 1509.69,1213.18 1510.28,1213.18 1510.86,1213.18 1511.45,1213.18 1512.04,1213.18 1512.62,1213.18 1513.21,1213.18 1513.8,1213.18 1514.38,1213.18 1514.97,1213.18 1515.56,1213.18 1516.14,1213.18 1516.73,1213.18 1517.32,1213.18 1517.9,1213.18 1518.49,1213.18 1519.07,1213.18 1519.66,1213.18 1520.25,1213.18 1520.83,1213.18 1521.42,1213.18 1522.01,1213.18 1522.59,1213.18 1523.18,1213.18 1523.77,1213.18 1524.35,1213.18 1524.94,1213.18 1525.52,1213.18 1526.11,1213.18 1526.7,1213.18 1527.28,1213.18 1527.87,1213.18 1528.46,1213.18 1529.04,1213.18 1529.63,1213.18 1530.22,1213.18 1530.8,1213.18 1531.39,1213.18 1531.98,1213.18 1532.56,1213.18 1533.15,1213.18 1533.73,1213.18 1534.32,1213.18 1534.91,1213.18 1535.49,1213.18 1536.08,1213.18 1536.67,1213.18 1537.25,1213.18 1537.84,1213.18 1538.43,1213.18 1539.01,1213.18 1539.6,1213.18 1540.19,1213.18 1540.77,1213.18 1541.36,1213.18 1541.94,1213.18 1542.53,1213.18 1543.12,1213.18 1543.7,1213.18 1544.29,1213.18 1544.88,1213.18 1545.46,1213.18 1546.05,1213.18 1546.64,1213.18 1547.22,1213.18 1547.81,1213.18 1548.4,1213.18 1548.98,1213.18 1549.57,1213.18 1550.15,1213.18 1550.74,1213.18 1551.33,1213.18 1551.91,1213.18 1552.5,1213.18 1553.09,1213.18 1553.67,1213.18 1554.26,1213.18 1554.85,1213.18 1555.43,1213.18 1556.02,1213.18 1556.6,1213.18 1557.19,1213.18 1557.78,1213.18 1558.36,1213.18 1558.95,1213.18 1559.54,1213.18 1560.12,1213.18 1560.71,1213.18 1561.3,1213.18 1561.88,1213.18 1562.47,1213.18 1563.06,1213.18 1563.64,1213.18 1564.23,1213.18 1564.81,1213.18 1565.4,1213.18 1565.99,1213.18 1566.57,1213.18 1567.16,1213.18 1567.75,1213.18 1568.33,1213.18 1568.92,1213.18 1569.51,1213.18 1570.09,1213.18 1570.68,1213.18 1571.27,1213.18 1571.85,1213.18 1572.44,1213.18 1573.02,1213.18 1573.61,1213.18 1574.2,1213.18 1574.78,1213.18 1575.37,1213.18 1575.96,1213.18 1576.54,1213.18 1577.13,1213.18 1577.72,1213.18 1578.3,1213.18 1578.89,1213.18 1579.47,1213.18 1580.06,1213.18 1580.65,1213.18 1581.23,1213.18 1581.82,1213.18 1582.41,1213.18 1582.99,1213.18 1583.58,1213.18 1584.17,1213.18 1584.75,1213.18 1585.34,1213.18 1585.93,1213.18 1586.51,1213.18 1587.1,1213.18 1587.68,1213.18 1588.27,1213.18 1588.86,1213.18 1589.44,1213.18 1590.03,1213.18 1590.62,1213.18 1591.2,1213.18 1591.79,1213.18 1592.38,1213.18 1592.96,1213.18 1593.55,1213.18 1594.14,1213.18 1594.72,1213.18 1595.31,1213.18 1595.89,1213.18 1596.48,1213.18 1597.07,1213.18 1597.65,1213.18 1598.24,1213.18 1598.83,1213.18 1599.41,1213.18 1600,1213.18 1600.59,1213.18 1601.17,1213.18 1601.76,1213.18 1602.34,1213.18 1602.93,1213.18 1603.52,1213.18 1604.1,1213.18 1604.69,1213.18 1605.28,1213.18 1605.86,1213.18 1606.45,1213.18 1607.04,1213.18 1607.62,1213.18 1608.21,1213.18 1608.8,1213.18 1609.38,1213.18 1609.97,1213.18 1610.55,1213.18 1611.14,1213.18 1611.73,1213.18 1612.31,1213.18 1612.9,1213.18 1613.49,1213.18 1614.07,1213.18 1614.66,1213.18 1615.25,1213.18 1615.83,1213.18 1616.42,1213.18 1617.01,1213.18 1617.59,1213.18 1618.18,1213.18 1618.76,1213.18 1619.35,1213.18 1619.94,1213.18 1620.52,1213.18 1621.11,1213.18 1621.7,1213.18 1622.28,1213.18 1622.87,1213.18 1623.46,1213.18 1624.04,1213.18 1624.63,1213.18 1625.22,1213.18 1625.8,1213.18 1626.39,1213.18 1626.97,1213.18 1627.56,1213.18 1628.15,1213.18 1628.73,1213.18 1629.32,1213.18 1629.91,1213.18 1630.49,1213.18 1631.08,1213.18 1631.67,1213.18 1632.25,1213.18 1632.84,1213.18 1633.42,1213.18 1634.01,1213.18 1634.6,1213.18 1635.18,1213.18 1635.77,1213.18 1636.36,1213.18 1636.94,1213.18 1637.53,1213.18 1638.12,1213.18 1638.7,1213.18 1639.29,1213.18 1639.88,1213.18 1640.46,1213.18 1641.05,1213.18 1641.63,1213.18 1642.22,1213.18 1642.81,1213.18 1643.39,1213.18 1643.98,1213.18 1644.57,1213.18 1645.15,1213.18 1645.74,1213.18 1646.33,1213.18 1646.91,1213.18 1647.5,1213.18 1648.09,1213.18 1648.67,1213.18 1649.26,1213.18 1649.84,1213.18 1650.43,1213.18 1651.02,1213.18 1651.6,1213.18 1652.19,1213.18 1652.78,1213.18 1653.36,1213.18 1653.95,1213.18 1654.54,1213.18 1655.12,1213.18 1655.71,1213.18 1656.29,1213.18 1656.88,1213.18 1657.47,1213.18 1658.05,1213.18 1658.64,1213.18 1659.23,1213.18 1659.81,1213.18 1660.4,1213.18 1660.99,1213.18 1661.57,1213.18 1662.16,1213.18 1662.75,1213.18 1663.33,1213.18 1663.92,1213.18 1664.5,1213.18 1665.09,1213.18 1665.68,1213.18 1666.26,1213.18 1666.85,1213.18 1667.44,1213.18 1668.02,1213.18 1668.61,1213.18 1669.2,1213.18 1669.78,1213.18 1670.37,1213.18 1670.96,1213.18 1671.54,1213.18 1672.13,1213.18 1672.71,1213.18 1673.3,1213.18 1673.89,1213.18 1674.47,1213.18 1675.06,1213.18 1675.65,1213.18 1676.23,1213.18 1676.82,1213.18 1677.41,1213.18 1677.99,1213.18 1678.58,1213.18 1679.17,1213.18 1679.75,1213.18 1680.34,1213.18 1680.92,1213.18 1681.51,1213.18 1682.1,1213.18 1682.68,1213.18 1683.27,1213.18 1683.86,1213.18 1684.44,1213.18 1685.03,1213.18 1685.62,1213.18 1686.2,1213.18 1686.79,1213.18 1687.37,1213.18 1687.96,1213.18 1688.55,1213.18 1689.13,1213.18 1689.72,1213.18 1690.31,1213.18 1690.89,1213.18 1691.48,1213.18 1692.07,1213.18 1692.65,1213.18 1693.24,1213.18 1693.83,1213.18 1694.41,1213.18 1695,1213.18 1695.58,1213.18 1696.17,1213.18 1696.76,1213.18 1697.34,1213.18 1697.93,1213.18 1698.52,1213.18 1699.1,1213.18 1699.69,1213.18 1700.28,1213.18 1700.86,1213.18 1701.45,1213.18 1702.04,1213.18 1702.62,1213.18 1703.21,1213.18 1703.79,1213.18 1704.38,1213.18 1704.97,1213.18 1705.55,1213.18 1706.14,1213.18 1706.73,1213.18 1707.31,1213.18 1707.9,1213.18 1708.49,1213.18 1709.07,1213.18 1709.66,1213.18 1710.24,1213.18 1710.83,1213.18 1711.42,1213.18 1712,1213.18 1712.59,1213.18 1713.18,1213.18 1713.76,1213.18 1714.35,1213.18 1714.94,1213.18 1715.52,1213.18 1716.11,1213.18 1716.7,1213.18 1717.28,1213.18 1717.87,1213.18 1718.45,1213.18 1719.04,1213.18 1719.63,1213.18 1720.21,1213.18 1720.8,1213.18 1721.39,1213.18 1721.97,1213.18 1722.56,1213.18 1723.15,1213.18 1723.73,1213.18 1724.32,1213.18 1724.91,1213.18 1725.49,1213.18 1726.08,1213.18 1726.66,1213.18 1727.25,1213.18 1727.84,1213.18 1728.42,1213.18 1729.01,1213.18 1729.6,1213.18 1730.18,1213.18 1730.77,1213.18 1731.36,1213.18 1731.94,1213.18 1732.53,1213.18 1733.11,1213.18 1733.7,1213.18 1734.29,1213.18 1734.87,1213.18 1735.46,1213.18 1736.05,1213.18 1736.63,1213.18 1737.22,1213.18 1737.81,1213.18 1738.39,1213.18 1738.98,1213.18 1739.57,1213.18 1740.15,1213.18 1740.74,1213.18 1741.32,1213.18 1741.91,1213.18 1742.5,1213.18 1743.08,1213.18 1743.67,1213.18 1744.26,1213.18 1744.84,1213.18 1745.43,1213.18 1746.02,1213.18 1746.6,1213.18 1747.19,1213.18 1747.78,1213.18 1748.36,1213.18 1748.95,1213.18 1749.53,1213.18 1750.12,1213.18 1750.71,1213.18 1751.29,1213.18 1751.88,1213.18 1752.47,1213.18 1753.05,1213.18 1753.64,1213.18 1754.23,1213.18 1754.81,1213.18 1755.4,1213.18 1755.99,1213.18 1756.57,1213.18 1757.16,1213.18 1757.74,1213.18 1758.33,1213.18 1758.92,1213.18 1759.5,1213.18 1760.09,1213.18 1760.68,1213.18 1761.26,1213.18 1761.85,1213.18 1762.44,1213.18 1763.02,1213.18 1763.61,1213.18 1764.19,1213.18 1764.78,1213.18 1765.37,1213.18 1765.95,1213.18 1766.54,1213.18 1767.13,1213.18 1767.71,1213.18 1768.3,1213.18 1768.89,1213.18 1769.47,1213.18 1770.06,1213.18 1770.65,1213.18 1771.23,1213.18 1771.82,1213.18 1772.4,1213.18 1772.99,1213.18 1773.58,1213.18 1774.16,1213.18 1774.75,1213.18 1775.34,1213.18 1775.92,1213.18 1776.51,1213.18 1777.1,1213.18 1777.68,1213.18 1778.27,1213.18 1778.86,1213.18 1779.44,1213.18 1780.03,1213.18 1780.61,1213.18 1781.2,1213.18 1781.79,1213.18 1782.37,1213.18 1782.96,1213.18 1783.55,1213.18 1784.13,1213.18 1784.72,1213.18 1785.31,1213.18 1785.89,1213.18 1786.48,1213.18 1787.06,1213.18 1787.65,1213.18 1788.24,1213.18 1788.82,1213.18 1789.41,1213.18 1790,1213.18 1790.58,1213.18 1791.17,1213.18 1791.76,1213.18 1792.34,1213.18 1792.93,1213.18 1793.52,1213.18 1794.1,1213.18 1794.69,1213.18 1795.27,1213.18 1795.86,1213.18 1796.45,1213.18 1797.03,1213.18 1797.62,1213.18 1798.21,1213.18 1798.79,1213.18 1799.38,1213.18 1799.97,1213.18 1800.55,1213.18 1801.14,1213.18 1801.73,1213.18 1802.31,1213.18 1802.9,1213.18 1803.48,1213.18 1804.07,1213.18 1804.66,1213.18 1805.24,1213.18 1805.83,1213.18 1806.42,1213.18 1807,1213.18 1807.59,1213.18 1808.18,1213.18 1808.76,1213.18 1809.35,1213.18 1809.94,1213.18 1810.52,1213.18 1811.11,1213.18 1811.69,1213.18 1812.28,1213.18 1812.87,1213.18 1813.45,1213.18 1814.04,1213.18 1814.63,1213.18 1815.21,1213.18 1815.8,1213.18 1816.39,1213.18 1816.97,1213.18 1817.56,1213.18 1818.14,1213.18 1818.73,1213.18 1819.32,1213.18 1819.9,1213.18 1820.49,1213.18 1821.08,1213.18 1821.66,1213.18 1822.25,1213.18 1822.84,1213.18 1823.42,1213.18 1824.01,1213.18 1824.6,1213.18 1825.18,1213.18 1825.77,1213.18 1826.35,1213.18 1826.94,1213.18 1827.53,1213.18 1828.11,1213.18 1828.7,1213.18 1829.29,1213.18 1829.87,1213.18 1830.46,1213.18 1831.05,1213.18 1831.63,1213.18 1832.22,1213.18 1832.81,1213.18 1833.39,1213.18 1833.98,1213.18 1834.56,1213.18 1835.15,1213.18 1835.74,1213.18 1836.32,1213.18 1836.91,1213.18 1837.5,1213.18 1838.08,1213.18 1838.67,1213.18 1839.26,1213.18 1839.84,1213.18 1840.43,1213.18 1841.01,1213.18 1841.6,1213.18 1842.19,1213.18 1842.77,1213.18 1843.36,1213.18 1843.95,1213.18 1844.53,1213.18 1845.12,1213.18 1845.71,1213.18 1846.29,1213.18 1846.88,1213.18 1847.47,1213.18 1848.05,1213.18 1848.64,1213.18 1849.22,1213.18 1849.81,1213.18 1850.4,1213.18 1850.98,1213.18 1851.57,1213.18 1852.16,1213.18 1852.74,1213.18 1853.33,1213.18 1853.92,1213.18 1854.5,1213.18 1855.09,1213.18 1855.68,1213.18 1856.26,1213.18 1856.85,1213.18 1857.43,1213.18 1858.02,1213.18 1858.61,1213.18 1859.19,1213.18 1859.78,1213.18 1860.37,1213.18 1860.95,1213.18 1861.54,1213.18 1862.13,1213.18 1862.71,1213.18 1863.3,1213.18 1863.88,1213.18 1864.47,1213.18 1865.06,1213.18 1865.64,1213.18 1866.23,1213.18 1866.82,1213.18 1867.4,1213.18 1867.99,1213.18 1868.58,1213.18 1869.16,1213.18 1869.75,1213.18 1870.34,1213.18 1870.92,1213.18 1871.51,1213.18 1872.09,1213.18 1872.68,1213.18 1873.27,1213.18 1873.85,1213.18 1874.44,1213.18 1875.03,1213.18 1875.61,1213.18 1876.2,1213.18 1876.79,1213.18 1877.37,1213.18 1877.96,1213.18 1878.55,1213.18 1879.13,1213.18 1879.72,1213.18 1880.3,1213.18 1880.89,1213.18 1881.48,1213.18 1882.06,1213.18 1882.65,1213.18 1883.24,1213.18 1883.82,1213.18 1884.41,1213.18 1885,1213.18 1885.58,1213.18 1886.17,1213.18 1886.76,1213.18 1887.34,1213.18 1887.93,1213.18 1888.51,1213.18 1889.1,1213.18 1889.69,1213.18 1890.27,1213.18 1890.86,1213.18 1891.45,1213.18 1892.03,1213.18 1892.62,1213.18 1893.21,1213.18 1893.79,1213.18 1894.38,1213.18 1894.96,1213.18 1895.55,1213.18 1896.14,1213.18 1896.72,1213.18 1897.31,1213.18 1897.9,1213.18 1898.48,1213.18 1899.07,1213.18 1899.66,1213.18 1900.24,1213.18 1900.83,1213.18 1901.42,1213.18 1902,1213.18 1902.59,1213.18 1903.17,1213.18 1903.76,1213.18 1904.35,1213.18 1904.93,1213.18 1905.52,1213.18 1906.11,1213.18 1906.69,1213.18 1907.28,1213.18 1907.87,1213.18 1908.45,1213.18 1909.04,1213.18 1909.63,1213.18 1910.21,1213.18 1910.8,1213.18 1911.38,1213.18 1911.97,1213.18 1912.56,1213.18 1913.14,1213.18 1913.73,1213.18 1914.32,1213.18 1914.9,1213.18 1915.49,1213.18 1916.08,1213.18 1916.66,1213.18 1917.25,1213.18 1917.83,1213.18 1918.42,1213.18 1919.01,1213.18 1919.59,1213.18 1920.18,1213.18 1920.77,1213.18 1921.35,1213.18 1921.94,1213.18 1922.53,1213.18 1923.11,1213.18 1923.7,1213.18 1924.29,1213.18 1924.87,1213.18 1925.46,1213.18 1926.04,1213.18 1926.63,1213.18 1927.22,1213.18 1927.8,1213.18 1928.39,1213.18 1928.98,1213.18 1929.56,1213.18 1930.15,1213.18 1930.74,1213.18 1931.32,1213.18 1931.91,1213.18 1932.5,1213.18 1933.08,1213.18 1933.67,1213.18 1934.25,1213.18 1934.84,1213.18 1935.43,1213.18 1936.01,1213.18 1936.6,1213.18 1937.19,1213.18 1937.77,1213.18 1938.36,1213.18 1938.95,1213.18 1939.53,1213.18 1940.12,1213.18 1940.71,1213.18 1941.29,1213.18 1941.88,1213.18 1942.46,1213.18 1943.05,1213.18 1943.64,1213.18 1944.22,1213.18 1944.81,1213.18 1945.4,1213.18 1945.98,1213.18 1946.57,1213.18 1947.16,1213.18 1947.74,1213.18 1948.33,1213.18 1948.91,1213.18 1949.5,1213.18 1950.09,1213.18 1950.67,1213.18 1951.26,1213.18 1951.85,1213.18 1952.43,1213.18 1953.02,1213.18 1953.61,1213.18 1954.19,1213.18 1954.78,1213.18 1955.37,1213.18 1955.95,1213.18 1956.54,1213.18 1957.12,1213.18 1957.71,1213.18 1958.3,1213.18 1958.88,1213.18 1959.47,1213.18 1960.06,1213.18 1960.64,1213.18 1961.23,1213.18 1961.82,1213.18 1962.4,1213.18 1962.99,1213.18 1963.58,1213.18 1964.16,1213.18 1964.75,1213.18 1965.33,1213.18 1965.92,1213.18 1966.51,1213.18 1967.09,1213.18 1967.68,1213.18 1968.27,1213.18 1968.85,1213.18 1969.44,1213.18 1970.03,1213.18 1970.61,1213.18 1971.2,1213.18 1971.78,1213.18 1972.37,1213.18 1972.96,1213.18 1973.54,1213.18 1974.13,1213.18 1974.72,1213.18 1975.3,1213.18 1975.89,1213.18 1976.48,1213.18 1977.06,1213.18 1977.65,1213.18 1978.24,1213.18 1978.82,1213.18 1979.41,1213.18 1979.99,1213.18 1980.58,1213.18 1981.17,1213.18 1981.75,1213.18 1982.34,1213.18 1982.93,1213.18 1983.51,1213.18 1984.1,1213.18 1984.69,1213.18 1985.27,1213.18 1985.86,1213.18 1986.45,1213.18 1987.03,1213.18 1987.62,1213.18 1988.2,1213.18 1988.79,1213.18 1989.38,1213.18 1989.96,1213.18 1990.55,1213.18 1991.14,1213.18 1991.72,1213.18 1992.31,1213.18 1992.9,1213.18 1993.48,1213.18 1994.07,1213.18 1994.65,1213.18 1995.24,1213.18 1995.83,1213.18 1996.41,1213.18 1997,1213.18 1997.59,1213.18 1998.17,1213.18 1998.76,1213.18 1999.35,1213.18 1999.93,1213.18 2000.52,1213.18 2001.11,1213.18 2001.69,1213.18 2002.28,1213.18 2002.86,1213.18 2003.45,1213.18 2004.04,1213.18 2004.62,1213.18 2005.21,1213.18 2005.8,1213.18 2006.38,1213.18 2006.97,1213.18 2007.56,1213.18 2008.14,1213.18 2008.73,1213.18 2009.32,1213.18 2009.9,1213.18 2010.49,1213.18 2011.07,1213.18 2011.66,1213.18 2012.25,1213.18 2012.83,1213.18 2013.42,1213.18 2014.01,1213.18 2014.59,1213.18 2015.18,1213.18 2015.77,1213.18 2016.35,1213.18 2016.94,1213.18 2017.53,1213.18 2018.11,1213.18 2018.7,1213.18 2019.28,1213.18 2019.87,1213.18 2020.46,1213.18 2021.04,1213.18 2021.63,1213.18 2022.22,1213.18 2022.8,1213.18 2023.39,1213.18 2023.98,1213.18 2024.56,1213.18 2025.15,1213.18 2025.73,1213.18 2026.32,1213.18 2026.91,1213.18 2027.49,1213.18 2028.08,1213.18 2028.67,1213.18 2029.25,1213.18 2029.84,1213.18 2030.43,1213.18 2031.01,1213.18 2031.6,1213.18 2032.19,1213.18 2032.77,1213.18 2033.36,1213.18 2033.94,1213.18 2034.53,1213.18 2035.12,1213.18 2035.7,1213.18 2036.29,1213.18 2036.88,1213.18 2037.46,1213.18 2038.05,1213.18 2038.64,1213.18 2039.22,1213.18 2039.81,1213.18 2040.4,1213.18 2040.98,1213.18 2041.57,1213.18 2042.15,1213.18 2042.74,1213.18 2043.33,1213.18 2043.91,1213.18 2044.5,1213.18 2045.09,1213.18 2045.67,1213.18 2046.26,1213.18 2046.85,1213.18 2047.43,1213.18 2048.02,1213.18 2048.6,1213.18 2049.19,1213.18 2049.78,1213.18 2050.36,1213.18 2050.95,1213.18 2051.54,1213.18 2052.12,1213.18 2052.71,1213.18 2053.3,1213.18 2053.88,1213.18 2054.47,1213.18 2055.06,1213.18 2055.64,1213.18 2056.23,1213.18 2056.81,1213.18 2057.4,1213.18 2057.99,1213.18 2058.57,1213.18 2059.16,1213.18 2059.75,1213.18 2060.33,1213.18 2060.92,1213.18 2061.51,1213.18 2062.09,1213.18 2062.68,1213.18 2063.27,1213.18 2063.85,1213.18 2064.44,1213.18 2065.02,1213.18 2065.61,1213.18 2066.2,1213.18 2066.78,1213.18 2067.37,1213.18 2067.96,1213.18 2068.54,1213.18 2069.13,1213.18 2069.72,1213.18 2070.3,1213.18 2070.89,1213.18 2071.48,1213.18 2072.06,1213.18 2072.65,1213.18 2073.23,1213.18 2073.82,1213.18 2074.41,1213.18 2074.99,1213.18 2075.58,1213.18 2076.17,1213.18 2076.75,1213.18 2077.34,1213.18 2077.93,1213.18 2078.51,1213.18 2079.1,1213.18 2079.68,1213.18 2080.27,1213.18 2080.86,1213.18 2081.44,1213.18 2082.03,1213.18 2082.62,1213.18 2083.2,1213.18 2083.79,1213.18 2084.38,1213.18 2084.96,1213.18 2085.55,1213.18 2086.14,1213.18 2086.72,1213.18 2087.31,1213.18 2087.89,1213.18 2088.48,1213.18 2089.07,1213.18 2089.65,1213.18 2090.24,1213.18 2090.83,1213.18 2091.41,1213.18 2092,1213.18 2092.59,1213.18 2093.17,1213.18 2093.76,1213.18 2094.35,1213.18 2094.93,1213.18 2095.52,1213.18 2096.1,1213.18 2096.69,1213.18 2097.28,1213.18 2097.86,1213.18 2098.45,1213.18 2099.04,1213.18 2099.62,1213.18 2100.21,1213.18 2100.8,1213.18 2101.38,1213.18 2101.97,1213.18 2102.55,1213.18 2103.14,1213.18 2103.73,1213.18 2104.31,1213.18 2104.9,1213.18 2105.49,1213.18 2106.07,1213.18 2106.66,1213.18 2107.25,1213.18 2107.83,1213.18 2108.42,1213.18 2109.01,1213.18 2109.59,1213.18 2110.18,1213.18 2110.76,1213.18 2111.35,1213.18 2111.94,1213.18 2112.52,1213.18 2113.11,1213.18 2113.7,1213.18 2114.28,1213.18 2114.87,1213.18 2115.46,1213.18 2116.04,1213.18 2116.63,1213.18 2117.22,1213.18 2117.8,1213.18 2118.39,1213.18 2118.97,1213.18 2119.56,1213.18 2120.15,1213.18 2120.73,1213.18 2121.32,1213.18 2121.91,1213.18 2122.49,1213.18 2123.08,1213.18 2123.67,1213.18 2124.25,1213.18 2124.84,1213.18 2125.42,1213.18 2126.01,1213.18 2126.6,1213.18 2127.18,1213.18 2127.77,1213.18 2128.36,1213.18 2128.94,1213.18 2129.53,1213.18 2130.12,1213.18 2130.7,1213.18 2131.29,1213.18 2131.88,1213.18 2132.46,1213.18 2133.05,1213.18 2133.63,1213.18 2134.22,1213.18 2134.81,1213.18 2135.39,1213.18 2135.98,1213.18 2136.57,1213.18 2137.15,1213.18 2137.74,1213.18 2138.33,1213.18 2138.91,1213.18 2139.5,1213.18 2140.09,1213.18 2140.67,1213.18 2141.26,1213.18 2141.84,1213.18 2142.43,1213.18 2143.02,1213.18 2143.6,1213.18 2144.19,1213.18 2144.78,1213.18 2145.36,1213.18 2145.95,1213.18 2146.54,1213.18 2147.12,1213.18 2147.71,1213.18 2148.3,1213.18 2148.88,1213.18 2149.47,1213.18 2150.05,1213.18 2150.64,1213.18 2151.23,1213.18 2151.81,1213.18 2152.4,1213.18 2152.99,1213.18 2153.57,1213.18 2154.16,1213.18 2154.75,1213.18 2155.33,1213.18 2155.92,1213.18 2156.5,1213.18 2157.09,1213.18 2157.68,1213.18 2158.26,1213.18 \"/>\n<path clip-path=\"url(#clip312)\" d=\"M986.025 1213.11 L986.612 1213.11 L987.198 1213.11 L987.785 1213.11 L988.371 1213.11 L988.957 1213.11 L989.544 1213.11 L990.13 1213.11 L990.717 1213.11 L991.303 1213.11 L991.889 1213.11 L992.476 1213.11 L993.062 1213.11 L993.649 1213.11 L994.235 1213.11 L994.822 1213.11 L995.408 1213.11 L995.994 1213.11 L996.581 1213.11 L997.167 1213.11 L997.754 1213.11 L998.34 1213.11 L998.926 1213.11 L999.513 1213.11 L1000.1 1213.11 L1000.69 1213.11 L1001.27 1213.11 L1001.86 1213.11 L1002.44 1213.11 L1003.03 1213.11 L1003.62 1213.11 L1004.2 1213.11 L1004.79 1213.11 L1005.38 1213.11 L1005.96 1213.11 L1006.55 1213.11 L1007.14 1213.11 L1007.72 1213.11 L1008.31 1213.11 L1008.9 1213.11 L1009.48 1213.11 L1010.07 1213.11 L1010.65 1213.11 L1011.24 1213.11 L1011.83 1213.11 L1012.41 1213.11 L1013 1213.11 L1013.59 1213.11 L1014.17 1213.11 L1014.76 1213.11 L1015.35 1213.11 L1015.93 1213.11 L1016.52 1213.11 L1017.11 1213.11 L1017.69 1213.11 L1018.28 1213.11 L1018.86 1213.11 L1019.45 1213.11 L1020.04 1213.11 L1020.62 1213.11 L1021.21 1213.11 L1021.8 1213.11 L1022.38 1213.11 L1022.97 1213.11 L1023.56 1213.11 L1024.14 1213.11 L1024.73 1213.11 L1025.32 1213.11 L1025.9 1213.11 L1026.49 1213.11 L1027.07 1213.11 L1027.66 1213.11 L1028.25 1213.11 L1028.83 1213.11 L1029.42 1213.11 L1030.01 1213.11 L1030.59 1213.11 L1031.18 1213.11 L1031.77 1213.11 L1032.35 1213.11 L1032.94 1213.11 L1033.52 1213.11 L1034.11 1213.11 L1034.7 1213.11 L1035.28 1213.11 L1035.87 1213.11 L1036.46 1213.11 L1037.04 1213.11 L1037.63 1213.11 L1038.22 1213.11 L1038.8 1213.11 L1039.39 1213.11 L1039.98 1213.11 L1040.56 1213.11 L1041.15 1213.11 L1041.73 1213.11 L1042.32 1213.11 L1042.91 1213.11 L1043.49 1213.11 L1044.08 1213.11 L1044.67 1213.11 L1045.25 1213.11 L1045.84 1213.11 L1046.43 1213.11 L1047.01 1213.11 L1047.6 1213.11 L1048.19 1213.11 L1048.77 1213.11 L1049.36 1213.11 L1049.94 1213.11 L1050.53 1213.11 L1051.12 1213.11 L1051.7 1213.11 L1052.29 1213.11 L1052.88 1213.11 L1053.46 1213.11 L1054.05 1213.11 L1054.64 1213.11 L1055.22 1213.11 L1055.81 1213.11 L1056.39 1213.11 L1056.98 1213.11 L1057.57 1213.11 L1058.15 1213.11 L1058.74 1213.11 L1059.33 1213.11 L1059.91 1213.11 L1060.5 1213.11 L1061.09 1213.11 L1061.67 1213.11 L1062.26 1213.11 L1062.85 1213.11 L1063.43 1213.11 L1064.02 1213.11 L1064.6 1213.11 L1065.19 1213.11 L1065.78 1213.11 L1066.36 1213.11 L1066.95 1213.11 L1067.54 1213.11 L1068.12 1213.11 L1068.71 1213.11 L1069.3 1213.11 L1069.88 1213.11 L1070.47 1213.11 L1071.06 1213.11 L1071.64 1213.11 L1072.23 1213.11 L1072.81 1213.11 L1073.4 1213.11 L1073.99 1213.11 L1074.57 1213.11 L1075.16 1213.11 L1075.75 1213.11 L1076.33 1213.11 L1076.92 1213.11 L1077.51 1213.11 L1078.09 1213.11 L1078.68 1213.11 L1079.26 1213.11 L1079.85 1213.11 L1080.44 1213.11 L1081.02 1213.11 L1081.61 1213.11 L1082.2 1213.11 L1082.78 1213.11 L1083.37 1213.11 L1083.96 1213.11 L1084.54 1213.11 L1085.13 1213.11 L1085.72 1213.11 L1086.3 1213.11 L1086.89 1213.11 L1087.47 1213.11 L1088.06 1213.11 L1088.65 1213.11 L1089.23 1213.11 L1089.82 1213.11 L1090.41 1213.11 L1090.99 1213.11 L1091.58 1213.11 L1092.17 1213.11 L1092.75 1213.11 L1093.34 1213.11 L1093.93 1213.11 L1094.51 1213.11 L1095.1 1213.11 L1095.68 1213.11 L1096.27 1213.11 L1096.86 1213.11 L1097.44 1213.11 L1098.03 1213.11 L1098.62 1213.11 L1099.2 1213.11 L1099.79 1213.11 L1100.38 1213.11 L1100.96 1213.11 L1101.55 1213.11 L1102.14 1213.11 L1102.72 1213.11 L1103.31 1213.11 L1103.89 1213.11 L1104.48 1213.11 L1105.07 1213.11 L1105.65 1213.11 L1106.24 1213.11 L1106.83 1213.11 L1107.41 1213.11 L1108 1213.11 L1108.59 1213.11 L1109.17 1213.11 L1109.76 1213.11 L1110.34 1213.11 L1110.93 1213.11 L1111.52 1213.11 L1112.1 1213.11 L1112.69 1213.11 L1113.28 1213.11 L1113.86 1213.11 L1114.45 1213.11 L1115.04 1213.11 L1115.62 1213.11 L1116.21 1213.11 L1116.8 1213.11 L1117.38 1213.11 L1117.97 1213.11 L1118.55 1213.11 L1119.14 1213.11 L1119.73 1213.11 L1120.31 1213.11 L1120.9 1213.11 L1121.49 1213.11 L1122.07 1213.11 L1122.66 1213.11 L1123.25 1213.11 L1123.83 1213.11 L1124.42 1213.11 L1125.01 1213.11 L1125.59 1213.11 L1126.18 1213.11 L1126.76 1213.11 L1127.35 1213.11 L1127.94 1213.11 L1128.52 1213.11 L1129.11 1213.11 L1129.7 1213.11 L1130.28 1213.11 L1130.87 1213.11 L1131.46 1213.11 L1132.04 1213.11 L1132.63 1213.11 L1133.21 1213.11 L1133.8 1213.11 L1134.39 1213.11 L1134.97 1213.11 L1135.56 1213.11 L1136.15 1213.11 L1136.73 1213.11 L1137.32 1213.11 L1137.91 1213.11 L1138.49 1213.11 L1139.08 1213.11 L1139.67 1213.11 L1140.25 1213.11 L1140.84 1213.11 L1141.42 1213.11 L1142.01 1213.11 L1142.6 1213.11 L1143.18 1213.11 L1143.77 1213.11 L1144.36 1213.11 L1144.94 1213.11 L1145.53 1213.11 L1146.12 1213.11 L1146.7 1213.11 L1147.29 1213.11 L1147.88 1213.11 L1148.46 1213.11 L1149.05 1213.11 L1149.63 1213.11 L1150.22 1213.11 L1150.81 1213.11 L1151.39 1213.11 L1151.98 1213.11 L1152.57 1213.11 L1153.15 1213.11 L1153.74 1213.11 L1154.33 1213.11 L1154.91 1213.11 L1155.5 1213.11 L1156.09 1213.11 L1156.67 1213.11 L1157.26 1213.11 L1157.84 1213.11 L1158.43 1213.11 L1159.02 1213.11 L1159.6 1213.11 L1160.19 1213.11 L1160.78 1213.11 L1161.36 1213.11 L1161.95 1213.11 L1162.54 1213.11 L1163.12 1213.11 L1163.71 1213.11 L1164.29 1213.11 L1164.88 1213.11 L1165.47 1213.11 L1166.05 1213.11 L1166.64 1213.11 L1167.23 1213.11 L1167.81 1213.11 L1168.4 1213.11 L1168.99 1213.11 L1169.57 1213.11 L1170.16 1213.11 L1170.75 1213.11 L1171.33 1213.11 L1171.92 1213.11 L1172.5 1213.11 L1173.09 1213.11 L1173.68 1213.11 L1174.26 1213.11 L1174.85 1213.11 L1175.44 1213.11 L1176.02 1213.11 L1176.61 1213.11 L1177.2 1213.11 L1177.78 1213.11 L1178.37 1213.11 L1178.96 1213.11 L1179.54 1213.11 L1180.13 1213.11 L1180.71 1213.11 L1181.3 1213.11 L1181.89 1213.11 L1182.47 1213.11 L1183.06 1213.11 L1183.65 1213.11 L1184.23 1213.11 L1184.82 1213.11 L1185.41 1213.11 L1185.99 1213.11 L1186.58 1213.11 L1187.16 1213.11 L1187.75 1213.11 L1188.34 1213.11 L1188.92 1213.11 L1189.51 1213.11 L1190.1 1213.11 L1190.68 1213.11 L1191.27 1213.11 L1191.86 1213.11 L1192.44 1213.11 L1193.03 1213.11 L1193.62 1213.11 L1194.2 1213.11 L1194.79 1213.11 L1195.37 1213.11 L1195.96 1213.11 L1196.55 1213.11 L1197.13 1213.11 L1197.72 1213.11 L1198.31 1213.11 L1198.89 1213.11 L1199.48 1213.11 L1200.07 1213.11 L1200.65 1213.11 L1201.24 1213.11 L1201.83 1213.11 L1202.41 1213.11 L1203 1213.11 L1203.58 1213.11 L1204.17 1213.11 L1204.76 1213.11 L1205.34 1213.11 L1205.93 1213.11 L1206.52 1213.11 L1207.1 1213.11 L1207.69 1213.11 L1208.28 1213.11 L1208.86 1213.11 L1209.45 1213.11 L1210.03 1213.11 L1210.62 1213.11 L1211.21 1213.11 L1211.79 1213.11 L1212.38 1213.11 L1212.97 1213.11 L1213.55 1213.11 L1214.14 1213.11 L1214.73 1213.11 L1215.31 1213.11 L1215.9 1213.11 L1216.49 1213.11 L1217.07 1213.11 L1217.66 1213.11 L1218.24 1213.11 L1218.83 1213.11 L1219.42 1213.11 L1220 1213.11 L1220.59 1213.11 L1221.18 1213.11 L1221.76 1213.11 L1222.35 1213.11 L1222.94 1213.11 L1223.52 1213.11 L1224.11 1213.11 L1224.7 1213.11 L1225.28 1213.11 L1225.87 1213.11 L1226.45 1213.11 L1227.04 1213.11 L1227.63 1213.11 L1228.21 1213.11 L1228.8 1213.11 L1229.39 1213.11 L1229.97 1213.11 L1230.56 1213.11 L1231.15 1213.11 L1231.73 1213.11 L1232.32 1213.11 L1232.91 1213.11 L1233.49 1213.11 L1234.08 1213.11 L1234.66 1213.11 L1235.25 1213.11 L1235.84 1213.11 L1236.42 1213.11 L1237.01 1213.11 L1237.6 1213.11 L1238.18 1213.11 L1238.77 1213.11 L1239.36 1213.11 L1239.94 1213.11 L1240.53 1213.11 L1241.11 1213.11 L1241.7 1213.11 L1242.29 1213.11 L1242.87 1213.11 L1243.46 1213.11 L1244.05 1213.11 L1244.63 1213.11 L1245.22 1213.11 L1245.81 1213.11 L1246.39 1213.11 L1246.98 1213.11 L1247.57 1213.11 L1248.15 1213.11 L1248.74 1213.11 L1249.32 1213.11 L1249.91 1213.11 L1250.5 1213.11 L1251.08 1213.11 L1251.67 1213.11 L1252.26 1213.11 L1252.84 1213.11 L1253.43 1213.11 L1254.02 1213.11 L1254.6 1213.11 L1255.19 1213.11 L1255.78 1213.11 L1256.36 1213.11 L1256.95 1213.11 L1257.53 1213.11 L1258.12 1213.11 L1258.71 1213.11 L1259.29 1213.11 L1259.88 1213.11 L1260.47 1213.11 L1261.05 1213.11 L1261.64 1213.11 L1262.23 1213.11 L1262.81 1213.11 L1263.4 1213.11 L1263.98 1213.11 L1264.57 1213.11 L1265.16 1213.11 L1265.74 1213.11 L1266.33 1213.11 L1266.92 1213.11 L1267.5 1213.11 L1268.09 1213.11 L1268.68 1213.11 L1269.26 1213.11 L1269.85 1213.11 L1270.44 1213.11 L1271.02 1213.11 L1271.61 1213.11 L1272.19 1213.11 L1272.78 1213.11 L1273.37 1213.11 L1273.95 1213.11 L1274.54 1213.11 L1275.13 1213.11 L1275.71 1213.11 L1276.3 1213.11 L1276.89 1213.11 L1277.47 1213.11 L1278.06 1213.11 L1278.65 1213.11 L1279.23 1213.11 L1279.82 1213.11 L1280.4 1213.11 L1280.99 1213.11 L1281.58 1213.11 L1282.16 1213.11 L1282.75 1213.11 L1283.34 1213.11 L1283.92 1213.11 L1284.51 1213.11 L1285.1 1213.11 L1285.68 1213.11 L1286.27 1213.11 L1286.86 1213.11 L1287.44 1213.11 L1288.03 1213.11 L1288.61 1213.11 L1289.2 1213.11 L1289.79 1213.11 L1290.37 1213.11 L1290.96 1213.11 L1291.55 1213.11 L1292.13 1213.11 L1292.72 1213.11 L1293.31 1213.11 L1293.89 1213.11 L1294.48 1213.11 L1295.06 1213.11 L1295.65 1213.11 L1296.24 1213.11 L1296.82 1213.11 L1297.41 1213.11 L1298 1213.11 L1298.58 1213.11 L1299.17 1213.11 L1299.76 1213.11 L1300.34 1213.11 L1300.93 1213.11 L1301.52 1213.11 L1302.1 1213.11 L1302.69 1213.11 L1303.27 1213.11 L1303.86 1213.11 L1304.45 1213.11 L1305.03 1213.11 L1305.62 1213.11 L1306.21 1213.11 L1306.79 1213.11 L1307.38 1213.11 L1307.97 1213.11 L1308.55 1213.11 L1309.14 1213.11 L1309.73 1213.11 L1310.31 1213.11 L1310.9 1213.11 L1311.48 1213.11 L1312.07 1213.11 L1312.66 1213.11 L1313.24 1213.11 L1313.83 1213.11 L1314.42 1213.11 L1315 1213.11 L1315.59 1213.11 L1316.18 1213.11 L1316.76 1213.11 L1317.35 1213.11 L1317.93 1213.11 L1318.52 1213.11 L1319.11 1213.11 L1319.69 1213.11 L1320.28 1213.11 L1320.87 1213.11 L1321.45 1213.11 L1322.04 1213.11 L1322.63 1213.11 L1323.21 1213.11 L1323.8 1213.11 L1324.39 1213.11 L1324.97 1213.11 L1325.56 1213.11 L1326.14 1213.11 L1326.73 1213.11 L1327.32 1213.11 L1327.9 1213.11 L1328.49 1213.11 L1329.08 1213.11 L1329.66 1213.11 L1330.25 1213.11 L1330.84 1213.11 L1331.42 1213.11 L1332.01 1213.11 L1332.6 1213.11 L1333.18 1213.11 L1333.77 1213.11 L1334.35 1213.11 L1334.94 1213.11 L1335.53 1213.11 L1336.11 1213.11 L1336.7 1213.11 L1337.29 1213.11 L1337.87 1213.11 L1338.46 1213.11 L1339.05 1213.11 L1339.63 1213.11 L1340.22 1213.11 L1340.8 1213.11 L1341.39 1213.11 L1341.98 1213.11 L1342.56 1213.11 L1343.15 1213.11 L1343.74 1213.11 L1344.32 1213.11 L1344.91 1213.11 L1345.5 1213.11 L1346.08 1213.11 L1346.67 1213.11 L1347.26 1213.11 L1347.84 1213.11 L1348.43 1213.11 L1349.01 1213.11 L1349.6 1213.11 L1350.19 1213.11 L1350.77 1213.11 L1351.36 1213.11 L1351.95 1213.11 L1352.53 1213.11 L1353.12 1213.11 L1353.71 1213.11 L1354.29 1213.11 L1354.88 1213.11 L1355.47 1213.11 L1356.05 1213.11 L1356.64 1213.11 L1357.22 1213.11 L1357.81 1213.11 L1358.4 1213.11 L1358.98 1213.11 L1359.57 1213.11 L1360.16 1213.11 L1360.74 1213.11 L1361.33 1213.11 L1361.92 1213.11 L1362.5 1213.11 L1363.09 1213.11 L1363.68 1213.11 L1364.26 1213.11 L1364.85 1213.11 L1365.43 1213.11 L1366.02 1213.11 L1366.61 1213.11 L1367.19 1213.11 L1367.78 1213.11 L1368.37 1213.11 L1368.95 1213.11 L1369.54 1213.11 L1370.13 1213.11 L1370.71 1213.11 L1371.3 1213.11 L1371.88 1213.11 L1372.47 1213.11 L1373.06 1213.11 L1373.64 1213.11 L1374.23 1213.11 L1374.82 1213.11 L1375.4 1213.11 L1375.99 1213.11 L1376.58 1213.11 L1377.16 1213.11 L1377.75 1213.11 L1378.34 1213.11 L1378.92 1213.11 L1379.51 1213.11 L1380.09 1213.11 L1380.68 1213.11 L1381.27 1213.11 L1381.85 1213.11 L1382.44 1213.11 L1383.03 1213.11 L1383.61 1213.11 L1384.2 1213.11 L1384.79 1213.11 L1385.37 1213.11 L1385.96 1213.11 L1386.55 1213.11 L1387.13 1213.11 L1387.72 1213.11 L1388.3 1213.11 L1388.89 1213.11 L1389.48 1213.11 L1390.06 1213.11 L1390.65 1213.11 L1391.24 1213.11 L1391.82 1213.11 L1392.41 1213.11 L1393 1213.11 L1393.58 1213.11 L1394.17 1213.11 L1394.75 1213.11 L1395.34 1213.11 L1395.93 1213.11 L1396.51 1213.11 L1397.1 1213.11 L1397.69 1213.11 L1398.27 1213.11 L1398.86 1213.11 L1399.45 1213.11 L1400.03 1213.11 L1400.62 1213.11 L1401.21 1213.11 L1401.79 1213.11 L1402.38 1213.11 L1402.96 1213.11 L1403.55 1213.11 L1404.14 1213.11 L1404.72 1213.11 L1405.31 1213.11 L1405.9 1213.11 L1406.48 1213.11 L1407.07 1213.11 L1407.66 1213.11 L1408.24 1213.11 L1408.83 1213.11 L1409.42 1213.11 L1410 1213.11 L1410.59 1213.11 L1411.17 1213.11 L1411.76 1213.11 L1412.35 1213.11 L1412.93 1213.11 L1413.52 1213.11 L1414.11 1213.11 L1414.69 1213.11 L1415.28 1213.11 L1415.87 1213.11 L1416.45 1213.11 L1417.04 1213.11 L1417.63 1213.11 L1418.21 1213.11 L1418.8 1213.11 L1419.38 1213.11 L1419.97 1213.11 L1420.56 1213.11 L1421.14 1213.11 L1421.73 1213.11 L1422.32 1213.11 L1422.9 1213.11 L1423.49 1213.11 L1424.08 1213.11 L1424.66 1213.11 L1425.25 1213.11 L1425.83 1213.11 L1426.42 1213.11 L1427.01 1213.11 L1427.59 1213.11 L1428.18 1213.11 L1428.77 1213.11 L1429.35 1213.11 L1429.94 1213.11 L1430.53 1213.11 L1431.11 1213.11 L1431.7 1213.11 L1432.29 1213.11 L1432.87 1213.11 L1433.46 1213.11 L1434.04 1213.11 L1434.63 1213.11 L1435.22 1213.11 L1435.8 1213.11 L1436.39 1213.11 L1436.98 1213.11 L1437.56 1213.11 L1438.15 1213.11 L1438.74 1213.11 L1439.32 1213.11 L1439.91 1213.11 L1440.5 1213.11 L1441.08 1213.11 L1441.67 1213.11 L1442.25 1213.11 L1442.84 1213.11 L1443.43 1213.11 L1444.01 1213.11 L1444.6 1213.11 L1445.19 1213.11 L1445.77 1213.11 L1446.36 1213.11 L1446.95 1213.11 L1447.53 1213.11 L1448.12 1213.11 L1448.7 1213.11 L1449.29 1213.11 L1449.88 1213.11 L1450.46 1213.11 L1451.05 1213.11 L1451.64 1213.11 L1452.22 1213.11 L1452.81 1213.11 L1453.4 1213.11 L1453.98 1213.11 L1454.57 1213.11 L1455.16 1213.11 L1455.74 1213.11 L1456.33 1213.11 L1456.91 1213.11 L1457.5 1213.11 L1458.09 1213.11 L1458.67 1213.11 L1459.26 1213.11 L1459.85 1213.11 L1460.43 1213.11 L1461.02 1213.11 L1461.61 1213.11 L1462.19 1213.11 L1462.78 1213.11 L1463.37 1213.11 L1463.95 1213.11 L1464.54 1213.11 L1465.12 1213.11 L1465.71 1213.11 L1466.3 1213.11 L1466.88 1213.11 L1467.47 1213.11 L1468.06 1213.11 L1468.64 1213.11 L1469.23 1213.11 L1469.82 1213.11 L1470.4 1213.11 L1470.99 1213.11 L1471.57 1213.11 L1472.16 1213.11 L1472.75 1213.11 L1473.33 1213.11 L1473.92 1213.11 L1474.51 1213.11 L1475.09 1213.11 L1475.68 1213.11 L1476.27 1213.11 L1476.85 1213.11 L1477.44 1213.11 L1478.03 1213.11 L1478.61 1213.11 L1479.2 1213.11 L1479.78 1213.11 L1480.37 1213.11 L1480.96 1213.11 L1481.54 1213.11 L1482.13 1213.11 L1482.72 1213.11 L1483.3 1213.11 L1483.89 1213.11 L1484.48 1213.11 L1485.06 1213.11 L1485.65 1213.11 L1486.24 1213.11 L1486.82 1213.11 L1487.41 1213.11 L1487.99 1213.11 L1488.58 1213.11 L1489.17 1213.11 L1489.75 1213.11 L1490.34 1213.11 L1490.93 1213.11 L1491.51 1213.11 L1492.1 1213.11 L1492.69 1213.11 L1493.27 1213.11 L1493.86 1213.11 L1494.45 1213.11 L1495.03 1213.11 L1495.62 1213.11 L1496.2 1213.11 L1496.79 1213.11 L1497.38 1213.11 L1497.96 1213.11 L1498.55 1213.11 L1499.14 1213.11 L1499.72 1213.11 L1500.31 1213.11 L1500.9 1213.11 L1501.48 1213.11 L1502.07 1213.11 L1502.65 1213.11 L1503.24 1213.11 L1503.83 1213.11 L1504.41 1213.11 L1505 1213.11 L1505.59 1213.11 L1506.17 1213.11 L1506.76 1213.11 L1507.35 1213.11 L1507.93 1213.11 L1508.52 1213.11 L1509.11 1213.11 L1509.69 1213.11 L1510.28 1213.11 L1510.86 1213.11 L1511.45 1213.11 L1512.04 1213.11 L1512.62 1213.11 L1513.21 1213.11 L1513.8 1213.11 L1514.38 1213.11 L1514.97 1213.11 L1515.56 1213.11 L1516.14 1213.11 L1516.73 1213.11 L1517.32 1213.11 L1517.9 1213.11 L1518.49 1213.11 L1519.07 1213.11 L1519.66 1213.11 L1520.25 1213.11 L1520.83 1213.11 L1521.42 1213.11 L1522.01 1213.11 L1522.59 1213.11 L1523.18 1213.11 L1523.77 1213.11 L1524.35 1213.11 L1524.94 1213.11 L1525.52 1213.11 L1526.11 1213.11 L1526.7 1213.11 L1527.28 1213.11 L1527.87 1213.11 L1528.46 1213.11 L1529.04 1213.11 L1529.63 1213.11 L1530.22 1213.11 L1530.8 1213.11 L1531.39 1213.11 L1531.98 1213.11 L1532.56 1213.11 L1533.15 1213.11 L1533.73 1213.11 L1534.32 1213.11 L1534.91 1213.11 L1535.49 1213.11 L1536.08 1213.11 L1536.67 1213.11 L1537.25 1213.11 L1537.84 1213.11 L1538.43 1213.11 L1539.01 1213.11 L1539.6 1213.11 L1540.19 1213.11 L1540.77 1213.11 L1541.36 1213.11 L1541.94 1213.11 L1542.53 1213.11 L1543.12 1213.11 L1543.7 1213.11 L1544.29 1213.11 L1544.88 1213.11 L1545.46 1213.11 L1546.05 1213.11 L1546.64 1213.11 L1547.22 1213.11 L1547.81 1213.11 L1548.4 1213.11 L1548.98 1213.11 L1549.57 1213.11 L1550.15 1213.11 L1550.74 1213.11 L1551.33 1213.11 L1551.91 1213.11 L1552.5 1213.11 L1553.09 1213.11 L1553.67 1213.11 L1554.26 1213.11 L1554.85 1213.11 L1555.43 1213.11 L1556.02 1213.11 L1556.6 1213.11 L1557.19 1213.11 L1557.78 1213.11 L1558.36 1213.11 L1558.95 1213.11 L1559.54 1213.11 L1560.12 1213.11 L1560.71 1213.11 L1561.3 1213.11 L1561.88 1213.11 L1562.47 1213.11 L1563.06 1213.11 L1563.64 1213.11 L1564.23 1213.11 L1564.81 1213.11 L1565.4 1213.11 L1565.99 1213.11 L1566.57 1213.11 L1567.16 1213.11 L1567.75 1213.11 L1568.33 1213.11 L1568.92 1213.11 L1569.51 1213.11 L1570.09 1213.11 L1570.68 1213.11 L1571.27 1213.11 L1571.85 1213.11 L1572.44 1213.11 L1573.02 1213.11 L1573.61 1213.11 L1574.2 1213.11 L1574.78 1213.11 L1575.37 1213.11 L1575.96 1213.11 L1576.54 1213.11 L1577.13 1213.11 L1577.72 1213.11 L1578.3 1213.11 L1578.89 1213.11 L1579.47 1213.11 L1580.06 1213.11 L1580.65 1213.11 L1581.23 1213.11 L1581.82 1213.11 L1582.41 1213.11 L1582.99 1213.11 L1583.58 1213.11 L1584.17 1213.11 L1584.75 1213.11 L1585.34 1213.11 L1585.93 1213.11 L1586.51 1213.11 L1587.1 1213.11 L1587.68 1213.11 L1588.27 1213.11 L1588.86 1213.11 L1589.44 1213.11 L1590.03 1213.11 L1590.62 1213.11 L1591.2 1213.11 L1591.79 1213.11 L1592.38 1213.11 L1592.96 1213.11 L1593.55 1213.11 L1594.14 1213.11 L1594.72 1213.11 L1595.31 1213.11 L1595.89 1213.11 L1596.48 1213.11 L1597.07 1213.11 L1597.65 1213.11 L1598.24 1213.11 L1598.83 1213.11 L1599.41 1213.11 L1600 1213.11 L1600.59 1213.11 L1601.17 1213.11 L1601.76 1213.11 L1602.34 1213.11 L1602.93 1213.11 L1603.52 1213.11 L1604.1 1213.11 L1604.69 1213.11 L1605.28 1213.11 L1605.86 1213.11 L1606.45 1213.11 L1607.04 1213.11 L1607.62 1213.11 L1608.21 1213.11 L1608.8 1213.11 L1609.38 1213.11 L1609.97 1213.11 L1610.55 1213.11 L1611.14 1213.11 L1611.73 1213.11 L1612.31 1213.11 L1612.9 1213.11 L1613.49 1213.11 L1614.07 1213.11 L1614.66 1213.11 L1615.25 1213.11 L1615.83 1213.11 L1616.42 1213.11 L1617.01 1213.11 L1617.59 1213.11 L1618.18 1213.11 L1618.76 1213.11 L1619.35 1213.11 L1619.94 1213.11 L1620.52 1213.11 L1621.11 1213.11 L1621.7 1213.11 L1622.28 1213.11 L1622.87 1213.11 L1623.46 1213.11 L1624.04 1213.11 L1624.63 1213.11 L1625.22 1213.11 L1625.8 1213.11 L1626.39 1213.11 L1626.97 1213.11 L1627.56 1213.11 L1628.15 1213.11 L1628.73 1213.11 L1629.32 1213.11 L1629.91 1213.11 L1630.49 1213.11 L1631.08 1213.11 L1631.67 1213.11 L1632.25 1213.11 L1632.84 1213.11 L1633.42 1213.11 L1634.01 1213.11 L1634.6 1213.11 L1635.18 1213.11 L1635.77 1213.11 L1636.36 1213.11 L1636.94 1213.11 L1637.53 1213.11 L1638.12 1213.11 L1638.7 1213.11 L1639.29 1213.11 L1639.88 1213.11 L1640.46 1213.11 L1641.05 1213.11 L1641.63 1213.11 L1642.22 1213.11 L1642.81 1213.11 L1643.39 1213.11 L1643.98 1213.11 L1644.57 1213.11 L1645.15 1213.11 L1645.74 1213.11 L1646.33 1213.11 L1646.91 1213.11 L1647.5 1213.11 L1648.09 1213.11 L1648.67 1213.11 L1649.26 1213.11 L1649.84 1213.11 L1650.43 1213.11 L1651.02 1213.11 L1651.6 1213.11 L1652.19 1213.11 L1652.78 1213.11 L1653.36 1213.11 L1653.95 1213.11 L1654.54 1213.11 L1655.12 1213.11 L1655.71 1213.11 L1656.29 1213.11 L1656.88 1213.11 L1657.47 1213.11 L1658.05 1213.11 L1658.64 1213.11 L1659.23 1213.11 L1659.81 1213.11 L1660.4 1213.11 L1660.99 1213.11 L1661.57 1213.11 L1662.16 1213.11 L1662.75 1213.11 L1663.33 1213.11 L1663.92 1213.11 L1664.5 1213.11 L1665.09 1213.11 L1665.68 1213.11 L1666.26 1213.11 L1666.85 1213.11 L1667.44 1213.11 L1668.02 1213.11 L1668.61 1213.11 L1669.2 1213.11 L1669.78 1213.11 L1670.37 1213.11 L1670.96 1213.11 L1671.54 1213.11 L1672.13 1213.11 L1672.71 1213.11 L1673.3 1213.11 L1673.89 1213.11 L1674.47 1213.11 L1675.06 1213.11 L1675.65 1213.11 L1676.23 1213.11 L1676.82 1213.11 L1677.41 1213.11 L1677.99 1213.11 L1678.58 1213.11 L1679.17 1213.11 L1679.75 1213.11 L1680.34 1213.11 L1680.92 1213.11 L1681.51 1213.11 L1682.1 1213.11 L1682.68 1213.11 L1683.27 1213.11 L1683.86 1213.11 L1684.44 1213.11 L1685.03 1213.11 L1685.62 1213.11 L1686.2 1213.11 L1686.79 1213.11 L1687.37 1213.11 L1687.96 1213.11 L1688.55 1213.11 L1689.13 1213.11 L1689.72 1213.11 L1690.31 1213.11 L1690.89 1213.11 L1691.48 1213.11 L1692.07 1213.11 L1692.65 1213.11 L1693.24 1213.11 L1693.83 1213.11 L1694.41 1213.11 L1695 1213.11 L1695.58 1213.11 L1696.17 1213.11 L1696.76 1213.11 L1697.34 1213.11 L1697.93 1213.11 L1698.52 1213.11 L1699.1 1213.11 L1699.69 1213.11 L1700.28 1213.11 L1700.86 1213.11 L1701.45 1213.11 L1702.04 1213.11 L1702.62 1213.11 L1703.21 1213.11 L1703.79 1213.11 L1704.38 1213.11 L1704.97 1213.11 L1705.55 1213.11 L1706.14 1213.11 L1706.73 1213.11 L1707.31 1213.11 L1707.9 1213.11 L1708.49 1213.11 L1709.07 1213.11 L1709.66 1213.11 L1710.24 1213.11 L1710.83 1213.11 L1711.42 1213.11 L1712 1213.11 L1712.59 1213.11 L1713.18 1213.11 L1713.76 1213.11 L1714.35 1213.11 L1714.94 1213.11 L1715.52 1213.11 L1716.11 1213.11 L1716.7 1213.11 L1717.28 1213.11 L1717.87 1213.11 L1718.45 1213.11 L1719.04 1213.11 L1719.63 1213.11 L1720.21 1213.11 L1720.8 1213.11 L1721.39 1213.11 L1721.97 1213.11 L1722.56 1213.11 L1723.15 1213.11 L1723.73 1213.11 L1724.32 1213.11 L1724.91 1213.11 L1725.49 1213.11 L1726.08 1213.11 L1726.66 1213.11 L1727.25 1213.11 L1727.84 1213.11 L1728.42 1213.11 L1729.01 1213.11 L1729.6 1213.11 L1730.18 1213.11 L1730.77 1213.11 L1731.36 1213.11 L1731.94 1213.11 L1732.53 1213.11 L1733.11 1213.11 L1733.7 1213.11 L1734.29 1213.11 L1734.87 1213.11 L1735.46 1213.11 L1736.05 1213.11 L1736.63 1213.11 L1737.22 1213.11 L1737.81 1213.11 L1738.39 1213.11 L1738.98 1213.11 L1739.57 1213.11 L1740.15 1213.11 L1740.74 1213.11 L1741.32 1213.11 L1741.91 1213.11 L1742.5 1213.11 L1743.08 1213.11 L1743.67 1213.11 L1744.26 1213.11 L1744.84 1213.11 L1745.43 1213.11 L1746.02 1213.11 L1746.6 1213.11 L1747.19 1213.11 L1747.78 1213.11 L1748.36 1213.11 L1748.95 1213.11 L1749.53 1213.11 L1750.12 1213.11 L1750.71 1213.11 L1751.29 1213.11 L1751.88 1213.11 L1752.47 1213.11 L1753.05 1213.11 L1753.64 1213.11 L1754.23 1213.11 L1754.81 1213.11 L1755.4 1213.11 L1755.99 1213.11 L1756.57 1213.11 L1757.16 1213.11 L1757.74 1213.11 L1758.33 1213.11 L1758.92 1213.11 L1759.5 1213.11 L1760.09 1213.11 L1760.68 1213.11 L1761.26 1213.11 L1761.85 1213.11 L1762.44 1213.11 L1763.02 1213.11 L1763.61 1213.11 L1764.19 1213.11 L1764.78 1213.11 L1765.37 1213.11 L1765.95 1213.11 L1766.54 1213.11 L1767.13 1213.11 L1767.71 1213.11 L1768.3 1213.11 L1768.89 1213.11 L1769.47 1213.11 L1770.06 1213.11 L1770.65 1213.11 L1771.23 1213.11 L1771.82 1213.11 L1772.4 1213.11 L1772.99 1213.11 L1773.58 1213.11 L1774.16 1213.11 L1774.75 1213.11 L1775.34 1213.11 L1775.92 1213.11 L1776.51 1213.11 L1777.1 1213.11 L1777.68 1213.11 L1778.27 1213.11 L1778.86 1213.11 L1779.44 1213.11 L1780.03 1213.11 L1780.61 1213.11 L1781.2 1213.11 L1781.79 1213.11 L1782.37 1213.11 L1782.96 1213.11 L1783.55 1213.11 L1784.13 1213.11 L1784.72 1213.11 L1785.31 1213.11 L1785.89 1213.11 L1786.48 1213.11 L1787.06 1213.11 L1787.65 1213.11 L1788.24 1213.11 L1788.82 1213.11 L1789.41 1213.11 L1790 1213.11 L1790.58 1213.11 L1791.17 1213.11 L1791.76 1213.11 L1792.34 1213.11 L1792.93 1213.11 L1793.52 1213.11 L1794.1 1213.11 L1794.69 1213.11 L1795.27 1213.11 L1795.86 1213.11 L1796.45 1213.11 L1797.03 1213.11 L1797.62 1213.11 L1798.21 1213.11 L1798.79 1213.11 L1799.38 1213.11 L1799.97 1213.11 L1800.55 1213.11 L1801.14 1213.11 L1801.73 1213.11 L1802.31 1213.11 L1802.9 1213.11 L1803.48 1213.11 L1804.07 1213.11 L1804.66 1213.11 L1805.24 1213.11 L1805.83 1213.11 L1806.42 1213.11 L1807 1213.11 L1807.59 1213.11 L1808.18 1213.11 L1808.76 1213.11 L1809.35 1213.11 L1809.94 1213.11 L1810.52 1213.11 L1811.11 1213.11 L1811.69 1213.11 L1812.28 1213.11 L1812.87 1213.11 L1813.45 1213.11 L1814.04 1213.11 L1814.63 1213.11 L1815.21 1213.11 L1815.8 1213.11 L1816.39 1213.11 L1816.97 1213.11 L1817.56 1213.11 L1818.14 1213.11 L1818.73 1213.11 L1819.32 1213.11 L1819.9 1213.11 L1820.49 1213.11 L1821.08 1213.11 L1821.66 1213.11 L1822.25 1213.11 L1822.84 1213.11 L1823.42 1213.11 L1824.01 1213.11 L1824.6 1213.11 L1825.18 1213.11 L1825.77 1213.11 L1826.35 1213.11 L1826.94 1213.11 L1827.53 1213.11 L1828.11 1213.11 L1828.7 1213.11 L1829.29 1213.11 L1829.87 1213.11 L1830.46 1213.11 L1831.05 1213.11 L1831.63 1213.11 L1832.22 1213.11 L1832.81 1213.11 L1833.39 1213.11 L1833.98 1213.11 L1834.56 1213.11 L1835.15 1213.11 L1835.74 1213.11 L1836.32 1213.11 L1836.91 1213.11 L1837.5 1213.11 L1838.08 1213.11 L1838.67 1213.11 L1839.26 1213.11 L1839.84 1213.11 L1840.43 1213.11 L1841.01 1213.11 L1841.6 1213.11 L1842.19 1213.11 L1842.77 1213.11 L1843.36 1213.11 L1843.95 1213.11 L1844.53 1213.11 L1845.12 1213.11 L1845.71 1213.11 L1846.29 1213.11 L1846.88 1213.11 L1847.47 1213.11 L1848.05 1213.11 L1848.64 1213.11 L1849.22 1213.11 L1849.81 1213.11 L1850.4 1213.11 L1850.98 1213.11 L1851.57 1213.11 L1852.16 1213.11 L1852.74 1213.11 L1853.33 1213.11 L1853.92 1213.11 L1854.5 1213.11 L1855.09 1213.11 L1855.68 1213.11 L1856.26 1213.11 L1856.85 1213.11 L1857.43 1213.11 L1858.02 1213.11 L1858.61 1213.11 L1859.19 1213.11 L1859.78 1213.11 L1860.37 1213.11 L1860.95 1213.11 L1861.54 1213.11 L1862.13 1213.11 L1862.71 1213.11 L1863.3 1213.11 L1863.88 1213.11 L1864.47 1213.11 L1865.06 1213.11 L1865.64 1213.11 L1866.23 1213.11 L1866.82 1213.11 L1867.4 1213.11 L1867.99 1213.11 L1868.58 1213.11 L1869.16 1213.11 L1869.75 1213.11 L1870.34 1213.11 L1870.92 1213.11 L1871.51 1213.11 L1872.09 1213.11 L1872.68 1213.11 L1873.27 1213.11 L1873.85 1213.11 L1874.44 1213.11 L1875.03 1213.11 L1875.61 1213.11 L1876.2 1213.11 L1876.79 1213.11 L1877.37 1213.11 L1877.96 1213.11 L1878.55 1213.11 L1879.13 1213.11 L1879.72 1213.11 L1880.3 1213.11 L1880.89 1213.11 L1881.48 1213.11 L1882.06 1213.11 L1882.65 1213.11 L1883.24 1213.11 L1883.82 1213.11 L1884.41 1213.11 L1885 1213.11 L1885.58 1213.11 L1886.17 1213.11 L1886.76 1213.11 L1887.34 1213.11 L1887.93 1213.11 L1888.51 1213.11 L1889.1 1213.11 L1889.69 1213.11 L1890.27 1213.11 L1890.86 1213.11 L1891.45 1213.11 L1892.03 1213.11 L1892.62 1213.11 L1893.21 1213.11 L1893.79 1213.11 L1894.38 1213.11 L1894.96 1213.11 L1895.55 1213.11 L1896.14 1213.11 L1896.72 1213.11 L1897.31 1213.11 L1897.9 1213.11 L1898.48 1213.11 L1899.07 1213.11 L1899.66 1213.11 L1900.24 1213.11 L1900.83 1213.11 L1901.42 1213.11 L1902 1213.11 L1902.59 1213.11 L1903.17 1213.11 L1903.76 1213.11 L1904.35 1213.11 L1904.93 1213.11 L1905.52 1213.11 L1906.11 1213.11 L1906.69 1213.11 L1907.28 1213.11 L1907.87 1213.11 L1908.45 1213.11 L1909.04 1213.11 L1909.63 1213.11 L1910.21 1213.11 L1910.8 1213.11 L1911.38 1213.11 L1911.97 1213.11 L1912.56 1213.11 L1913.14 1213.11 L1913.73 1213.11 L1914.32 1213.11 L1914.9 1213.11 L1915.49 1213.11 L1916.08 1213.11 L1916.66 1213.11 L1917.25 1213.11 L1917.83 1213.11 L1918.42 1213.11 L1919.01 1213.11 L1919.59 1213.11 L1920.18 1213.11 L1920.77 1213.11 L1921.35 1213.11 L1921.94 1213.11 L1922.53 1213.11 L1923.11 1213.11 L1923.7 1213.11 L1924.29 1213.11 L1924.87 1213.11 L1925.46 1213.11 L1926.04 1213.11 L1926.63 1213.11 L1927.22 1213.11 L1927.8 1213.11 L1928.39 1213.11 L1928.98 1213.11 L1929.56 1213.11 L1930.15 1213.11 L1930.74 1213.11 L1931.32 1213.11 L1931.91 1213.11 L1932.5 1213.11 L1933.08 1213.11 L1933.67 1213.11 L1934.25 1213.11 L1934.84 1213.11 L1935.43 1213.11 L1936.01 1213.11 L1936.6 1213.11 L1937.19 1213.11 L1937.77 1213.11 L1938.36 1213.11 L1938.95 1213.11 L1939.53 1213.11 L1940.12 1213.11 L1940.71 1213.11 L1941.29 1213.11 L1941.88 1213.11 L1942.46 1213.11 L1943.05 1213.11 L1943.64 1213.11 L1944.22 1213.11 L1944.81 1213.11 L1945.4 1213.11 L1945.98 1213.11 L1946.57 1213.11 L1947.16 1213.11 L1947.74 1213.11 L1948.33 1213.11 L1948.91 1213.11 L1949.5 1213.11 L1950.09 1213.11 L1950.67 1213.11 L1951.26 1213.11 L1951.85 1213.11 L1952.43 1213.11 L1953.02 1213.11 L1953.61 1213.11 L1954.19 1213.11 L1954.78 1213.11 L1955.37 1213.11 L1955.95 1213.11 L1956.54 1213.11 L1957.12 1213.11 L1957.71 1213.11 L1958.3 1213.11 L1958.88 1213.11 L1959.47 1213.11 L1960.06 1213.11 L1960.64 1213.11 L1961.23 1213.11 L1961.82 1213.11 L1962.4 1213.11 L1962.99 1213.11 L1963.58 1213.11 L1964.16 1213.11 L1964.75 1213.11 L1965.33 1213.11 L1965.92 1213.11 L1966.51 1213.11 L1967.09 1213.11 L1967.68 1213.11 L1968.27 1213.11 L1968.85 1213.11 L1969.44 1213.11 L1970.03 1213.11 L1970.61 1213.11 L1971.2 1213.11 L1971.78 1213.11 L1972.37 1213.11 L1972.96 1213.11 L1973.54 1213.11 L1974.13 1213.11 L1974.72 1213.11 L1975.3 1213.11 L1975.89 1213.11 L1976.48 1213.11 L1977.06 1213.11 L1977.65 1213.11 L1978.24 1213.11 L1978.82 1213.11 L1979.41 1213.11 L1979.99 1213.11 L1980.58 1213.11 L1981.17 1213.11 L1981.75 1213.11 L1982.34 1213.11 L1982.93 1213.11 L1983.51 1213.11 L1984.1 1213.11 L1984.69 1213.11 L1985.27 1213.11 L1985.86 1213.11 L1986.45 1213.11 L1987.03 1213.11 L1987.62 1213.11 L1988.2 1213.11 L1988.79 1213.11 L1989.38 1213.11 L1989.96 1213.11 L1990.55 1213.11 L1991.14 1213.11 L1991.72 1213.11 L1992.31 1213.11 L1992.9 1213.11 L1993.48 1213.11 L1994.07 1213.11 L1994.65 1213.11 L1995.24 1213.11 L1995.83 1213.11 L1996.41 1213.11 L1997 1213.11 L1997.59 1213.11 L1998.17 1213.11 L1998.76 1213.11 L1999.35 1213.11 L1999.93 1213.11 L2000.52 1213.11 L2001.11 1213.11 L2001.69 1213.11 L2002.28 1213.11 L2002.86 1213.11 L2003.45 1213.11 L2004.04 1213.11 L2004.62 1213.11 L2005.21 1213.11 L2005.8 1213.11 L2006.38 1213.11 L2006.97 1213.11 L2007.56 1213.11 L2008.14 1213.11 L2008.73 1213.11 L2009.32 1213.11 L2009.9 1213.11 L2010.49 1213.11 L2011.07 1213.11 L2011.66 1213.11 L2012.25 1213.11 L2012.83 1213.11 L2013.42 1213.11 L2014.01 1213.11 L2014.59 1213.11 L2015.18 1213.11 L2015.77 1213.11 L2016.35 1213.11 L2016.94 1213.11 L2017.53 1213.11 L2018.11 1213.11 L2018.7 1213.11 L2019.28 1213.11 L2019.87 1213.11 L2020.46 1213.11 L2021.04 1213.11 L2021.63 1213.11 L2022.22 1213.11 L2022.8 1213.11 L2023.39 1213.11 L2023.98 1213.11 L2024.56 1213.11 L2025.15 1213.11 L2025.73 1213.11 L2026.32 1213.11 L2026.91 1213.11 L2027.49 1213.11 L2028.08 1213.11 L2028.67 1213.11 L2029.25 1213.11 L2029.84 1213.11 L2030.43 1213.11 L2031.01 1213.11 L2031.6 1213.11 L2032.19 1213.11 L2032.77 1213.11 L2033.36 1213.11 L2033.94 1213.11 L2034.53 1213.11 L2035.12 1213.11 L2035.7 1213.11 L2036.29 1213.11 L2036.88 1213.11 L2037.46 1213.11 L2038.05 1213.11 L2038.64 1213.11 L2039.22 1213.11 L2039.81 1213.11 L2040.4 1213.11 L2040.98 1213.11 L2041.57 1213.11 L2042.15 1213.11 L2042.74 1213.11 L2043.33 1213.11 L2043.91 1213.11 L2044.5 1213.11 L2045.09 1213.11 L2045.67 1213.11 L2046.26 1213.11 L2046.85 1213.11 L2047.43 1213.11 L2048.02 1213.11 L2048.6 1213.11 L2049.19 1213.11 L2049.78 1213.11 L2050.36 1213.11 L2050.95 1213.11 L2051.54 1213.11 L2052.12 1213.11 L2052.71 1213.11 L2053.3 1213.11 L2053.88 1213.11 L2054.47 1213.11 L2055.06 1213.11 L2055.64 1213.11 L2056.23 1213.11 L2056.81 1213.11 L2057.4 1213.11 L2057.99 1213.11 L2058.57 1213.11 L2059.16 1213.11 L2059.75 1213.11 L2060.33 1213.11 L2060.92 1213.11 L2061.51 1213.11 L2062.09 1213.11 L2062.68 1213.11 L2063.27 1213.11 L2063.85 1213.11 L2064.44 1213.11 L2065.02 1213.11 L2065.61 1213.11 L2066.2 1213.11 L2066.78 1213.11 L2067.37 1213.11 L2067.96 1213.11 L2068.54 1213.11 L2069.13 1213.11 L2069.72 1213.11 L2070.3 1213.11 L2070.89 1213.11 L2071.48 1213.11 L2072.06 1213.11 L2072.65 1213.11 L2073.23 1213.11 L2073.82 1213.11 L2074.41 1213.11 L2074.99 1213.11 L2075.58 1213.11 L2076.17 1213.11 L2076.75 1213.11 L2077.34 1213.11 L2077.93 1213.11 L2078.51 1213.11 L2079.1 1213.11 L2079.68 1213.11 L2080.27 1213.11 L2080.86 1213.11 L2081.44 1213.11 L2082.03 1213.11 L2082.62 1213.11 L2083.2 1213.11 L2083.79 1213.11 L2084.38 1213.11 L2084.96 1213.11 L2085.55 1213.11 L2086.14 1213.11 L2086.72 1213.11 L2087.31 1213.11 L2087.89 1213.11 L2088.48 1213.11 L2089.07 1213.11 L2089.65 1213.11 L2090.24 1213.11 L2090.83 1213.11 L2091.41 1213.11 L2092 1213.11 L2092.59 1213.11 L2093.17 1213.11 L2093.76 1213.11 L2094.35 1213.11 L2094.93 1213.11 L2095.52 1213.11 L2096.1 1213.11 L2096.69 1213.11 L2097.28 1213.11 L2097.86 1213.11 L2098.45 1213.11 L2099.04 1213.11 L2099.62 1213.11 L2100.21 1213.11 L2100.8 1213.11 L2101.38 1213.11 L2101.97 1213.11 L2102.55 1213.11 L2103.14 1213.11 L2103.73 1213.11 L2104.31 1213.11 L2104.9 1213.11 L2105.49 1213.11 L2106.07 1213.11 L2106.66 1213.11 L2107.25 1213.11 L2107.83 1213.11 L2108.42 1213.11 L2109.01 1213.11 L2109.59 1213.11 L2110.18 1213.11 L2110.76 1213.11 L2111.35 1213.11 L2111.94 1213.11 L2112.52 1213.11 L2113.11 1213.11 L2113.7 1213.11 L2114.28 1213.11 L2114.87 1213.11 L2115.46 1213.11 L2116.04 1213.11 L2116.63 1213.11 L2117.22 1213.11 L2117.8 1213.11 L2118.39 1213.11 L2118.97 1213.11 L2119.56 1213.11 L2120.15 1213.11 L2120.73 1213.11 L2121.32 1213.11 L2121.91 1213.11 L2122.49 1213.11 L2123.08 1213.11 L2123.67 1213.11 L2124.25 1213.11 L2124.84 1213.11 L2125.42 1213.11 L2126.01 1213.11 L2126.6 1213.11 L2127.18 1213.11 L2127.77 1213.11 L2128.36 1213.11 L2128.94 1213.11 L2129.53 1213.11 L2130.12 1213.11 L2130.7 1213.11 L2131.29 1213.11 L2131.88 1213.11 L2132.46 1213.11 L2133.05 1213.11 L2133.63 1213.11 L2134.22 1213.11 L2134.81 1213.11 L2135.39 1213.11 L2135.98 1213.11 L2136.57 1213.11 L2137.15 1213.11 L2137.74 1213.11 L2138.33 1213.11 L2138.91 1213.11 L2139.5 1213.11 L2140.09 1213.11 L2140.67 1213.11 L2141.26 1213.11 L2141.84 1213.11 L2142.43 1213.11 L2143.02 1213.11 L2143.6 1213.11 L2144.19 1213.11 L2144.78 1213.11 L2145.36 1213.11 L2145.95 1213.11 L2146.54 1213.11 L2147.12 1213.11 L2147.71 1213.11 L2148.3 1213.11 L2148.88 1213.11 L2149.47 1213.11 L2150.05 1213.11 L2150.64 1213.11 L2151.23 1213.11 L2151.81 1213.11 L2152.4 1213.11 L2152.99 1213.11 L2153.57 1213.11 L2154.16 1213.11 L2154.75 1213.11 L2155.33 1213.11 L2155.92 1213.11 L2156.5 1213.11 L2157.09 1213.11 L2157.68 1213.11 L2158.26 1213.11 L2158.26 1212.99 L2157.68 1212.99 L2157.09 1212.99 L2156.5 1212.99 L2155.92 1212.99 L2155.33 1212.99 L2154.75 1212.99 L2154.16 1212.99 L2153.57 1212.99 L2152.99 1212.99 L2152.4 1212.99 L2151.81 1212.99 L2151.23 1212.99 L2150.64 1212.99 L2150.05 1212.99 L2149.47 1212.99 L2148.88 1212.99 L2148.3 1212.99 L2147.71 1212.99 L2147.12 1212.99 L2146.54 1212.99 L2145.95 1212.99 L2145.36 1212.99 L2144.78 1212.99 L2144.19 1212.99 L2143.6 1212.99 L2143.02 1212.99 L2142.43 1212.99 L2141.84 1212.99 L2141.26 1212.99 L2140.67 1212.99 L2140.09 1212.99 L2139.5 1212.99 L2138.91 1212.99 L2138.33 1212.99 L2137.74 1212.99 L2137.15 1212.99 L2136.57 1212.99 L2135.98 1212.99 L2135.39 1212.99 L2134.81 1212.99 L2134.22 1212.99 L2133.63 1212.99 L2133.05 1212.99 L2132.46 1212.99 L2131.88 1212.99 L2131.29 1212.99 L2130.7 1212.99 L2130.12 1212.99 L2129.53 1212.99 L2128.94 1212.99 L2128.36 1212.99 L2127.77 1212.99 L2127.18 1212.99 L2126.6 1212.99 L2126.01 1212.99 L2125.42 1212.99 L2124.84 1212.99 L2124.25 1212.99 L2123.67 1212.99 L2123.08 1212.99 L2122.49 1212.99 L2121.91 1212.99 L2121.32 1212.99 L2120.73 1212.99 L2120.15 1212.99 L2119.56 1212.99 L2118.97 1212.99 L2118.39 1212.99 L2117.8 1212.99 L2117.22 1212.99 L2116.63 1212.99 L2116.04 1212.99 L2115.46 1212.99 L2114.87 1212.99 L2114.28 1212.99 L2113.7 1212.99 L2113.11 1212.99 L2112.52 1212.99 L2111.94 1212.99 L2111.35 1212.99 L2110.76 1212.99 L2110.18 1212.99 L2109.59 1212.99 L2109.01 1212.99 L2108.42 1212.99 L2107.83 1212.99 L2107.25 1212.99 L2106.66 1212.99 L2106.07 1212.99 L2105.49 1212.99 L2104.9 1212.99 L2104.31 1212.99 L2103.73 1212.99 L2103.14 1212.99 L2102.55 1212.99 L2101.97 1212.99 L2101.38 1212.99 L2100.8 1212.99 L2100.21 1212.99 L2099.62 1212.99 L2099.04 1212.99 L2098.45 1212.99 L2097.86 1212.99 L2097.28 1212.99 L2096.69 1212.99 L2096.1 1212.99 L2095.52 1212.99 L2094.93 1212.99 L2094.35 1212.99 L2093.76 1212.99 L2093.17 1212.99 L2092.59 1212.99 L2092 1212.99 L2091.41 1212.99 L2090.83 1212.99 L2090.24 1212.99 L2089.65 1212.99 L2089.07 1212.99 L2088.48 1212.99 L2087.89 1212.99 L2087.31 1212.99 L2086.72 1212.99 L2086.14 1212.99 L2085.55 1212.99 L2084.96 1212.99 L2084.38 1212.99 L2083.79 1212.99 L2083.2 1212.99 L2082.62 1212.99 L2082.03 1212.99 L2081.44 1212.99 L2080.86 1212.99 L2080.27 1212.99 L2079.68 1212.99 L2079.1 1212.99 L2078.51 1212.99 L2077.93 1212.99 L2077.34 1212.99 L2076.75 1212.99 L2076.17 1212.99 L2075.58 1212.99 L2074.99 1212.99 L2074.41 1212.99 L2073.82 1212.99 L2073.23 1212.99 L2072.65 1212.99 L2072.06 1212.99 L2071.48 1212.99 L2070.89 1212.99 L2070.3 1212.99 L2069.72 1212.99 L2069.13 1212.99 L2068.54 1212.99 L2067.96 1212.99 L2067.37 1212.99 L2066.78 1212.99 L2066.2 1212.99 L2065.61 1212.99 L2065.02 1212.99 L2064.44 1212.99 L2063.85 1212.99 L2063.27 1212.99 L2062.68 1212.99 L2062.09 1212.99 L2061.51 1212.99 L2060.92 1212.99 L2060.33 1212.99 L2059.75 1212.99 L2059.16 1212.99 L2058.57 1212.99 L2057.99 1212.99 L2057.4 1212.99 L2056.81 1212.99 L2056.23 1212.99 L2055.64 1212.99 L2055.06 1212.99 L2054.47 1212.99 L2053.88 1212.99 L2053.3 1212.99 L2052.71 1212.99 L2052.12 1212.99 L2051.54 1212.99 L2050.95 1212.99 L2050.36 1212.99 L2049.78 1212.99 L2049.19 1212.99 L2048.6 1212.99 L2048.02 1212.99 L2047.43 1212.99 L2046.85 1212.99 L2046.26 1212.99 L2045.67 1212.99 L2045.09 1212.99 L2044.5 1212.99 L2043.91 1212.99 L2043.33 1212.99 L2042.74 1212.99 L2042.15 1212.99 L2041.57 1212.99 L2040.98 1212.99 L2040.4 1212.99 L2039.81 1212.99 L2039.22 1212.99 L2038.64 1212.99 L2038.05 1212.99 L2037.46 1212.99 L2036.88 1212.99 L2036.29 1212.99 L2035.7 1212.99 L2035.12 1212.99 L2034.53 1212.99 L2033.94 1212.99 L2033.36 1212.99 L2032.77 1212.99 L2032.19 1212.99 L2031.6 1212.99 L2031.01 1212.99 L2030.43 1212.99 L2029.84 1212.99 L2029.25 1212.99 L2028.67 1212.99 L2028.08 1212.99 L2027.49 1212.99 L2026.91 1212.99 L2026.32 1212.99 L2025.73 1212.99 L2025.15 1212.99 L2024.56 1212.99 L2023.98 1212.99 L2023.39 1212.99 L2022.8 1212.99 L2022.22 1212.99 L2021.63 1212.99 L2021.04 1212.99 L2020.46 1212.99 L2019.87 1212.99 L2019.28 1212.99 L2018.7 1212.99 L2018.11 1212.99 L2017.53 1212.99 L2016.94 1212.99 L2016.35 1212.99 L2015.77 1212.99 L2015.18 1212.99 L2014.59 1212.99 L2014.01 1212.99 L2013.42 1212.99 L2012.83 1212.99 L2012.25 1212.99 L2011.66 1212.99 L2011.07 1212.99 L2010.49 1212.99 L2009.9 1212.99 L2009.32 1212.99 L2008.73 1212.99 L2008.14 1212.99 L2007.56 1212.99 L2006.97 1212.99 L2006.38 1212.99 L2005.8 1212.99 L2005.21 1212.99 L2004.62 1212.99 L2004.04 1212.99 L2003.45 1212.99 L2002.86 1212.99 L2002.28 1212.99 L2001.69 1212.99 L2001.11 1212.99 L2000.52 1212.99 L1999.93 1212.99 L1999.35 1212.99 L1998.76 1212.99 L1998.17 1212.99 L1997.59 1212.99 L1997 1212.99 L1996.41 1212.99 L1995.83 1212.99 L1995.24 1212.99 L1994.65 1212.99 L1994.07 1212.99 L1993.48 1212.99 L1992.9 1212.99 L1992.31 1212.99 L1991.72 1212.99 L1991.14 1212.99 L1990.55 1212.99 L1989.96 1212.99 L1989.38 1212.99 L1988.79 1212.99 L1988.2 1212.99 L1987.62 1212.99 L1987.03 1212.99 L1986.45 1212.99 L1985.86 1212.99 L1985.27 1212.99 L1984.69 1212.99 L1984.1 1212.99 L1983.51 1212.99 L1982.93 1212.99 L1982.34 1212.99 L1981.75 1212.99 L1981.17 1212.99 L1980.58 1212.99 L1979.99 1212.99 L1979.41 1212.99 L1978.82 1212.99 L1978.24 1212.99 L1977.65 1212.99 L1977.06 1212.99 L1976.48 1212.99 L1975.89 1212.99 L1975.3 1212.99 L1974.72 1212.99 L1974.13 1212.99 L1973.54 1212.99 L1972.96 1212.99 L1972.37 1212.99 L1971.78 1212.99 L1971.2 1212.99 L1970.61 1212.99 L1970.03 1212.99 L1969.44 1212.99 L1968.85 1212.99 L1968.27 1212.99 L1967.68 1212.99 L1967.09 1212.99 L1966.51 1212.99 L1965.92 1212.99 L1965.33 1212.99 L1964.75 1212.99 L1964.16 1212.99 L1963.58 1212.99 L1962.99 1212.99 L1962.4 1212.99 L1961.82 1212.99 L1961.23 1212.99 L1960.64 1212.99 L1960.06 1212.99 L1959.47 1212.99 L1958.88 1212.99 L1958.3 1212.99 L1957.71 1212.99 L1957.12 1212.99 L1956.54 1212.99 L1955.95 1212.99 L1955.37 1212.99 L1954.78 1212.99 L1954.19 1212.99 L1953.61 1212.99 L1953.02 1212.99 L1952.43 1212.99 L1951.85 1212.99 L1951.26 1212.99 L1950.67 1212.99 L1950.09 1212.99 L1949.5 1212.99 L1948.91 1212.99 L1948.33 1212.99 L1947.74 1212.99 L1947.16 1212.99 L1946.57 1212.99 L1945.98 1212.99 L1945.4 1212.99 L1944.81 1212.99 L1944.22 1212.99 L1943.64 1212.99 L1943.05 1212.99 L1942.46 1212.99 L1941.88 1212.99 L1941.29 1212.99 L1940.71 1212.99 L1940.12 1212.99 L1939.53 1212.99 L1938.95 1212.99 L1938.36 1212.99 L1937.77 1212.99 L1937.19 1212.99 L1936.6 1212.99 L1936.01 1212.99 L1935.43 1212.99 L1934.84 1212.99 L1934.25 1212.99 L1933.67 1212.99 L1933.08 1212.99 L1932.5 1212.99 L1931.91 1212.99 L1931.32 1212.99 L1930.74 1212.99 L1930.15 1212.99 L1929.56 1212.99 L1928.98 1212.99 L1928.39 1212.99 L1927.8 1212.99 L1927.22 1212.99 L1926.63 1212.99 L1926.04 1212.99 L1925.46 1212.99 L1924.87 1212.99 L1924.29 1212.99 L1923.7 1212.99 L1923.11 1212.99 L1922.53 1212.99 L1921.94 1212.99 L1921.35 1212.99 L1920.77 1212.99 L1920.18 1212.99 L1919.59 1212.99 L1919.01 1212.99 L1918.42 1212.99 L1917.83 1212.99 L1917.25 1212.99 L1916.66 1212.99 L1916.08 1212.99 L1915.49 1212.99 L1914.9 1212.99 L1914.32 1212.99 L1913.73 1212.99 L1913.14 1212.99 L1912.56 1212.99 L1911.97 1212.99 L1911.38 1212.99 L1910.8 1212.99 L1910.21 1212.99 L1909.63 1212.99 L1909.04 1212.99 L1908.45 1212.99 L1907.87 1212.99 L1907.28 1212.99 L1906.69 1212.99 L1906.11 1212.99 L1905.52 1212.99 L1904.93 1212.99 L1904.35 1212.99 L1903.76 1212.99 L1903.17 1212.99 L1902.59 1212.99 L1902 1212.99 L1901.42 1212.99 L1900.83 1212.99 L1900.24 1212.99 L1899.66 1212.99 L1899.07 1212.99 L1898.48 1212.99 L1897.9 1212.99 L1897.31 1212.99 L1896.72 1212.99 L1896.14 1212.99 L1895.55 1212.99 L1894.96 1212.99 L1894.38 1212.99 L1893.79 1212.99 L1893.21 1212.99 L1892.62 1212.99 L1892.03 1212.99 L1891.45 1212.99 L1890.86 1212.99 L1890.27 1212.99 L1889.69 1212.99 L1889.1 1212.99 L1888.51 1212.99 L1887.93 1212.99 L1887.34 1212.99 L1886.76 1212.99 L1886.17 1212.99 L1885.58 1212.99 L1885 1212.99 L1884.41 1212.99 L1883.82 1212.99 L1883.24 1212.99 L1882.65 1212.99 L1882.06 1212.99 L1881.48 1212.99 L1880.89 1212.99 L1880.3 1212.99 L1879.72 1212.99 L1879.13 1212.99 L1878.55 1212.99 L1877.96 1212.99 L1877.37 1212.99 L1876.79 1212.99 L1876.2 1212.99 L1875.61 1212.99 L1875.03 1212.99 L1874.44 1212.99 L1873.85 1212.99 L1873.27 1212.99 L1872.68 1212.99 L1872.09 1212.99 L1871.51 1212.99 L1870.92 1212.99 L1870.34 1212.99 L1869.75 1212.99 L1869.16 1212.99 L1868.58 1212.99 L1867.99 1212.99 L1867.4 1212.99 L1866.82 1212.99 L1866.23 1212.99 L1865.64 1212.99 L1865.06 1212.99 L1864.47 1212.99 L1863.88 1212.99 L1863.3 1212.99 L1862.71 1212.99 L1862.13 1212.99 L1861.54 1212.99 L1860.95 1212.99 L1860.37 1212.99 L1859.78 1212.99 L1859.19 1212.99 L1858.61 1212.99 L1858.02 1212.99 L1857.43 1212.99 L1856.85 1212.99 L1856.26 1212.99 L1855.68 1212.99 L1855.09 1212.99 L1854.5 1212.99 L1853.92 1212.99 L1853.33 1212.99 L1852.74 1212.99 L1852.16 1212.99 L1851.57 1212.99 L1850.98 1212.99 L1850.4 1212.99 L1849.81 1212.99 L1849.22 1212.99 L1848.64 1212.99 L1848.05 1212.99 L1847.47 1212.99 L1846.88 1212.99 L1846.29 1212.99 L1845.71 1212.99 L1845.12 1212.99 L1844.53 1212.99 L1843.95 1212.99 L1843.36 1212.99 L1842.77 1212.99 L1842.19 1212.99 L1841.6 1212.99 L1841.01 1212.99 L1840.43 1212.99 L1839.84 1212.99 L1839.26 1212.99 L1838.67 1212.99 L1838.08 1212.99 L1837.5 1212.99 L1836.91 1212.99 L1836.32 1212.99 L1835.74 1212.99 L1835.15 1212.99 L1834.56 1212.99 L1833.98 1212.99 L1833.39 1212.99 L1832.81 1212.99 L1832.22 1212.99 L1831.63 1212.99 L1831.05 1212.99 L1830.46 1212.99 L1829.87 1212.99 L1829.29 1212.99 L1828.7 1212.99 L1828.11 1212.99 L1827.53 1212.99 L1826.94 1212.99 L1826.35 1212.99 L1825.77 1212.99 L1825.18 1212.99 L1824.6 1212.99 L1824.01 1212.99 L1823.42 1212.99 L1822.84 1212.99 L1822.25 1212.99 L1821.66 1212.99 L1821.08 1212.99 L1820.49 1212.99 L1819.9 1212.99 L1819.32 1212.99 L1818.73 1212.99 L1818.14 1212.99 L1817.56 1212.99 L1816.97 1212.99 L1816.39 1212.99 L1815.8 1212.99 L1815.21 1212.99 L1814.63 1212.99 L1814.04 1212.99 L1813.45 1212.99 L1812.87 1212.99 L1812.28 1212.99 L1811.69 1212.99 L1811.11 1212.99 L1810.52 1212.99 L1809.94 1212.99 L1809.35 1212.99 L1808.76 1212.99 L1808.18 1212.99 L1807.59 1212.99 L1807 1212.99 L1806.42 1212.99 L1805.83 1212.99 L1805.24 1212.99 L1804.66 1212.99 L1804.07 1212.99 L1803.48 1212.99 L1802.9 1212.99 L1802.31 1212.99 L1801.73 1212.99 L1801.14 1212.99 L1800.55 1212.99 L1799.97 1212.99 L1799.38 1212.99 L1798.79 1212.99 L1798.21 1212.99 L1797.62 1212.99 L1797.03 1212.99 L1796.45 1212.99 L1795.86 1212.99 L1795.27 1212.99 L1794.69 1212.99 L1794.1 1212.99 L1793.52 1212.99 L1792.93 1212.99 L1792.34 1212.99 L1791.76 1212.99 L1791.17 1212.99 L1790.58 1212.99 L1790 1212.99 L1789.41 1212.99 L1788.82 1212.99 L1788.24 1212.99 L1787.65 1212.99 L1787.06 1212.99 L1786.48 1212.99 L1785.89 1212.99 L1785.31 1212.99 L1784.72 1212.99 L1784.13 1212.99 L1783.55 1212.99 L1782.96 1212.99 L1782.37 1212.99 L1781.79 1212.99 L1781.2 1212.99 L1780.61 1212.99 L1780.03 1212.99 L1779.44 1212.99 L1778.86 1212.99 L1778.27 1212.99 L1777.68 1212.99 L1777.1 1212.99 L1776.51 1212.99 L1775.92 1212.99 L1775.34 1212.99 L1774.75 1212.99 L1774.16 1212.99 L1773.58 1212.99 L1772.99 1212.99 L1772.4 1212.99 L1771.82 1212.99 L1771.23 1212.99 L1770.65 1212.99 L1770.06 1212.99 L1769.47 1212.99 L1768.89 1212.99 L1768.3 1212.99 L1767.71 1212.99 L1767.13 1212.99 L1766.54 1212.99 L1765.95 1212.99 L1765.37 1212.99 L1764.78 1212.99 L1764.19 1212.99 L1763.61 1212.99 L1763.02 1212.99 L1762.44 1212.99 L1761.85 1212.99 L1761.26 1212.99 L1760.68 1212.99 L1760.09 1212.99 L1759.5 1212.99 L1758.92 1212.99 L1758.33 1212.99 L1757.74 1212.99 L1757.16 1212.99 L1756.57 1212.99 L1755.99 1212.99 L1755.4 1212.99 L1754.81 1212.99 L1754.23 1212.99 L1753.64 1212.99 L1753.05 1212.99 L1752.47 1212.99 L1751.88 1212.99 L1751.29 1212.99 L1750.71 1212.99 L1750.12 1212.99 L1749.53 1212.99 L1748.95 1212.99 L1748.36 1212.99 L1747.78 1212.99 L1747.19 1212.99 L1746.6 1212.99 L1746.02 1212.99 L1745.43 1212.99 L1744.84 1212.99 L1744.26 1212.99 L1743.67 1212.99 L1743.08 1212.99 L1742.5 1212.99 L1741.91 1212.99 L1741.32 1212.99 L1740.74 1212.99 L1740.15 1212.99 L1739.57 1212.99 L1738.98 1212.99 L1738.39 1212.99 L1737.81 1212.99 L1737.22 1212.99 L1736.63 1212.99 L1736.05 1212.99 L1735.46 1212.99 L1734.87 1212.99 L1734.29 1212.99 L1733.7 1212.99 L1733.11 1212.99 L1732.53 1212.99 L1731.94 1212.99 L1731.36 1212.99 L1730.77 1212.99 L1730.18 1212.99 L1729.6 1212.99 L1729.01 1212.99 L1728.42 1212.99 L1727.84 1212.99 L1727.25 1212.99 L1726.66 1212.99 L1726.08 1212.99 L1725.49 1212.99 L1724.91 1212.99 L1724.32 1212.99 L1723.73 1212.99 L1723.15 1212.99 L1722.56 1212.99 L1721.97 1212.99 L1721.39 1212.99 L1720.8 1212.99 L1720.21 1212.99 L1719.63 1212.99 L1719.04 1212.99 L1718.45 1212.99 L1717.87 1212.99 L1717.28 1212.99 L1716.7 1212.99 L1716.11 1212.99 L1715.52 1212.99 L1714.94 1212.99 L1714.35 1212.99 L1713.76 1212.99 L1713.18 1212.99 L1712.59 1212.99 L1712 1212.99 L1711.42 1212.99 L1710.83 1212.99 L1710.24 1212.99 L1709.66 1212.99 L1709.07 1212.99 L1708.49 1212.99 L1707.9 1212.99 L1707.31 1212.99 L1706.73 1212.99 L1706.14 1212.99 L1705.55 1212.99 L1704.97 1212.99 L1704.38 1212.99 L1703.79 1212.99 L1703.21 1212.99 L1702.62 1212.99 L1702.04 1212.99 L1701.45 1212.99 L1700.86 1212.99 L1700.28 1212.99 L1699.69 1212.99 L1699.1 1212.99 L1698.52 1212.99 L1697.93 1212.99 L1697.34 1212.99 L1696.76 1212.99 L1696.17 1212.99 L1695.58 1212.99 L1695 1212.99 L1694.41 1212.99 L1693.83 1212.99 L1693.24 1212.99 L1692.65 1212.99 L1692.07 1212.99 L1691.48 1212.99 L1690.89 1212.99 L1690.31 1212.99 L1689.72 1212.99 L1689.13 1212.99 L1688.55 1212.99 L1687.96 1212.99 L1687.37 1212.99 L1686.79 1212.99 L1686.2 1212.99 L1685.62 1212.99 L1685.03 1212.99 L1684.44 1212.99 L1683.86 1212.99 L1683.27 1212.99 L1682.68 1212.99 L1682.1 1212.99 L1681.51 1212.99 L1680.92 1212.99 L1680.34 1212.99 L1679.75 1212.99 L1679.17 1212.99 L1678.58 1212.99 L1677.99 1212.99 L1677.41 1212.99 L1676.82 1212.99 L1676.23 1212.99 L1675.65 1212.99 L1675.06 1212.99 L1674.47 1212.99 L1673.89 1212.99 L1673.3 1212.99 L1672.71 1212.99 L1672.13 1212.99 L1671.54 1212.99 L1670.96 1212.99 L1670.37 1212.99 L1669.78 1212.99 L1669.2 1212.99 L1668.61 1212.99 L1668.02 1212.99 L1667.44 1212.99 L1666.85 1212.99 L1666.26 1212.99 L1665.68 1212.99 L1665.09 1212.99 L1664.5 1212.99 L1663.92 1212.99 L1663.33 1212.99 L1662.75 1212.99 L1662.16 1212.99 L1661.57 1212.99 L1660.99 1212.99 L1660.4 1212.99 L1659.81 1212.99 L1659.23 1212.99 L1658.64 1212.99 L1658.05 1212.99 L1657.47 1212.99 L1656.88 1212.99 L1656.29 1212.99 L1655.71 1212.99 L1655.12 1212.99 L1654.54 1212.99 L1653.95 1212.99 L1653.36 1212.99 L1652.78 1212.99 L1652.19 1212.99 L1651.6 1212.99 L1651.02 1212.99 L1650.43 1212.99 L1649.84 1212.99 L1649.26 1212.99 L1648.67 1212.99 L1648.09 1212.99 L1647.5 1212.99 L1646.91 1212.99 L1646.33 1212.99 L1645.74 1212.99 L1645.15 1212.99 L1644.57 1212.99 L1643.98 1212.99 L1643.39 1212.99 L1642.81 1212.99 L1642.22 1212.99 L1641.63 1212.99 L1641.05 1212.99 L1640.46 1212.99 L1639.88 1212.99 L1639.29 1212.99 L1638.7 1212.99 L1638.12 1212.99 L1637.53 1212.99 L1636.94 1212.99 L1636.36 1212.99 L1635.77 1212.99 L1635.18 1212.99 L1634.6 1212.99 L1634.01 1212.99 L1633.42 1212.99 L1632.84 1212.99 L1632.25 1212.99 L1631.67 1212.99 L1631.08 1212.99 L1630.49 1212.99 L1629.91 1212.99 L1629.32 1212.99 L1628.73 1212.99 L1628.15 1212.99 L1627.56 1212.99 L1626.97 1212.99 L1626.39 1212.99 L1625.8 1212.99 L1625.22 1212.99 L1624.63 1212.99 L1624.04 1212.99 L1623.46 1212.99 L1622.87 1212.99 L1622.28 1212.99 L1621.7 1212.99 L1621.11 1212.99 L1620.52 1212.99 L1619.94 1212.99 L1619.35 1212.99 L1618.76 1212.99 L1618.18 1212.99 L1617.59 1212.99 L1617.01 1212.99 L1616.42 1212.99 L1615.83 1212.99 L1615.25 1212.99 L1614.66 1212.99 L1614.07 1212.99 L1613.49 1212.99 L1612.9 1212.99 L1612.31 1212.99 L1611.73 1212.99 L1611.14 1212.99 L1610.55 1212.99 L1609.97 1212.99 L1609.38 1212.99 L1608.8 1212.99 L1608.21 1212.99 L1607.62 1212.99 L1607.04 1212.99 L1606.45 1212.99 L1605.86 1212.99 L1605.28 1212.99 L1604.69 1212.99 L1604.1 1212.99 L1603.52 1212.99 L1602.93 1212.99 L1602.34 1212.99 L1601.76 1212.99 L1601.17 1212.99 L1600.59 1212.99 L1600 1212.99 L1599.41 1212.99 L1598.83 1212.99 L1598.24 1212.99 L1597.65 1212.99 L1597.07 1212.99 L1596.48 1212.99 L1595.89 1212.99 L1595.31 1212.99 L1594.72 1212.99 L1594.14 1212.99 L1593.55 1212.99 L1592.96 1212.99 L1592.38 1212.99 L1591.79 1212.99 L1591.2 1212.99 L1590.62 1212.99 L1590.03 1212.99 L1589.44 1212.99 L1588.86 1212.99 L1588.27 1212.99 L1587.68 1212.99 L1587.1 1212.99 L1586.51 1212.99 L1585.93 1212.99 L1585.34 1212.99 L1584.75 1212.99 L1584.17 1212.99 L1583.58 1212.99 L1582.99 1212.99 L1582.41 1212.99 L1581.82 1212.99 L1581.23 1212.99 L1580.65 1212.99 L1580.06 1212.99 L1579.47 1212.99 L1578.89 1212.99 L1578.3 1212.99 L1577.72 1212.99 L1577.13 1212.99 L1576.54 1212.99 L1575.96 1212.99 L1575.37 1212.99 L1574.78 1212.99 L1574.2 1212.99 L1573.61 1212.99 L1573.02 1212.99 L1572.44 1212.99 L1571.85 1212.99 L1571.27 1212.99 L1570.68 1212.99 L1570.09 1212.99 L1569.51 1212.99 L1568.92 1212.99 L1568.33 1212.99 L1567.75 1212.99 L1567.16 1212.99 L1566.57 1212.99 L1565.99 1212.99 L1565.4 1212.99 L1564.81 1212.99 L1564.23 1212.99 L1563.64 1212.99 L1563.06 1212.99 L1562.47 1212.99 L1561.88 1212.99 L1561.3 1212.99 L1560.71 1212.99 L1560.12 1212.99 L1559.54 1212.99 L1558.95 1212.99 L1558.36 1212.99 L1557.78 1212.99 L1557.19 1212.99 L1556.6 1212.99 L1556.02 1212.99 L1555.43 1212.99 L1554.85 1212.99 L1554.26 1212.99 L1553.67 1212.99 L1553.09 1212.99 L1552.5 1212.99 L1551.91 1212.99 L1551.33 1212.99 L1550.74 1212.99 L1550.15 1212.99 L1549.57 1212.99 L1548.98 1212.99 L1548.4 1212.99 L1547.81 1212.99 L1547.22 1212.99 L1546.64 1212.99 L1546.05 1212.99 L1545.46 1212.99 L1544.88 1212.99 L1544.29 1212.99 L1543.7 1212.99 L1543.12 1212.99 L1542.53 1212.99 L1541.94 1212.99 L1541.36 1212.99 L1540.77 1212.99 L1540.19 1212.99 L1539.6 1212.99 L1539.01 1212.99 L1538.43 1212.99 L1537.84 1212.99 L1537.25 1212.99 L1536.67 1212.99 L1536.08 1212.99 L1535.49 1212.99 L1534.91 1212.99 L1534.32 1212.99 L1533.73 1212.99 L1533.15 1212.99 L1532.56 1212.99 L1531.98 1212.99 L1531.39 1212.99 L1530.8 1212.99 L1530.22 1212.99 L1529.63 1212.99 L1529.04 1212.99 L1528.46 1212.99 L1527.87 1212.99 L1527.28 1212.99 L1526.7 1212.99 L1526.11 1212.99 L1525.52 1212.99 L1524.94 1212.99 L1524.35 1212.99 L1523.77 1212.99 L1523.18 1212.99 L1522.59 1212.99 L1522.01 1212.99 L1521.42 1212.99 L1520.83 1212.99 L1520.25 1212.99 L1519.66 1212.99 L1519.07 1212.99 L1518.49 1212.99 L1517.9 1212.99 L1517.32 1212.99 L1516.73 1212.99 L1516.14 1212.99 L1515.56 1212.99 L1514.97 1212.99 L1514.38 1212.99 L1513.8 1212.99 L1513.21 1212.99 L1512.62 1212.99 L1512.04 1212.99 L1511.45 1212.99 L1510.86 1212.99 L1510.28 1212.99 L1509.69 1212.99 L1509.11 1212.99 L1508.52 1212.99 L1507.93 1212.99 L1507.35 1212.99 L1506.76 1212.99 L1506.17 1212.99 L1505.59 1212.99 L1505 1212.99 L1504.41 1212.99 L1503.83 1212.99 L1503.24 1212.99 L1502.65 1212.99 L1502.07 1212.99 L1501.48 1212.99 L1500.9 1212.99 L1500.31 1212.99 L1499.72 1212.99 L1499.14 1212.99 L1498.55 1212.99 L1497.96 1212.99 L1497.38 1212.99 L1496.79 1212.99 L1496.2 1212.99 L1495.62 1212.99 L1495.03 1212.99 L1494.45 1212.99 L1493.86 1212.99 L1493.27 1212.99 L1492.69 1212.99 L1492.1 1212.99 L1491.51 1212.99 L1490.93 1212.99 L1490.34 1212.99 L1489.75 1212.99 L1489.17 1212.99 L1488.58 1212.99 L1487.99 1212.99 L1487.41 1212.99 L1486.82 1212.99 L1486.24 1212.99 L1485.65 1212.99 L1485.06 1212.99 L1484.48 1212.99 L1483.89 1212.99 L1483.3 1212.99 L1482.72 1212.99 L1482.13 1212.99 L1481.54 1212.99 L1480.96 1212.99 L1480.37 1212.99 L1479.78 1212.99 L1479.2 1212.99 L1478.61 1212.99 L1478.03 1212.99 L1477.44 1212.99 L1476.85 1212.99 L1476.27 1212.99 L1475.68 1212.99 L1475.09 1212.99 L1474.51 1212.99 L1473.92 1212.99 L1473.33 1212.99 L1472.75 1212.99 L1472.16 1212.99 L1471.57 1212.99 L1470.99 1212.99 L1470.4 1212.99 L1469.82 1212.99 L1469.23 1212.99 L1468.64 1212.99 L1468.06 1212.99 L1467.47 1212.99 L1466.88 1212.99 L1466.3 1212.99 L1465.71 1212.99 L1465.12 1212.99 L1464.54 1212.99 L1463.95 1212.99 L1463.37 1212.99 L1462.78 1212.99 L1462.19 1212.99 L1461.61 1212.99 L1461.02 1212.99 L1460.43 1212.99 L1459.85 1212.99 L1459.26 1212.99 L1458.67 1212.99 L1458.09 1212.99 L1457.5 1212.99 L1456.91 1212.99 L1456.33 1212.99 L1455.74 1212.99 L1455.16 1212.99 L1454.57 1212.99 L1453.98 1212.99 L1453.4 1212.99 L1452.81 1212.99 L1452.22 1212.99 L1451.64 1212.99 L1451.05 1212.99 L1450.46 1212.99 L1449.88 1212.99 L1449.29 1212.99 L1448.7 1212.99 L1448.12 1212.99 L1447.53 1212.99 L1446.95 1212.99 L1446.36 1212.99 L1445.77 1212.99 L1445.19 1212.99 L1444.6 1212.99 L1444.01 1212.99 L1443.43 1212.99 L1442.84 1212.99 L1442.25 1212.99 L1441.67 1212.99 L1441.08 1212.99 L1440.5 1212.99 L1439.91 1212.99 L1439.32 1212.99 L1438.74 1212.99 L1438.15 1212.99 L1437.56 1212.99 L1436.98 1212.99 L1436.39 1212.99 L1435.8 1212.99 L1435.22 1212.99 L1434.63 1212.99 L1434.04 1212.99 L1433.46 1212.99 L1432.87 1212.99 L1432.29 1212.99 L1431.7 1212.99 L1431.11 1212.99 L1430.53 1212.99 L1429.94 1212.99 L1429.35 1212.99 L1428.77 1212.99 L1428.18 1212.99 L1427.59 1212.99 L1427.01 1212.99 L1426.42 1212.99 L1425.83 1212.99 L1425.25 1212.99 L1424.66 1212.99 L1424.08 1212.99 L1423.49 1212.99 L1422.9 1212.99 L1422.32 1212.99 L1421.73 1212.99 L1421.14 1212.99 L1420.56 1212.99 L1419.97 1212.99 L1419.38 1212.99 L1418.8 1212.99 L1418.21 1212.99 L1417.63 1212.99 L1417.04 1212.99 L1416.45 1212.99 L1415.87 1212.99 L1415.28 1212.99 L1414.69 1212.99 L1414.11 1212.99 L1413.52 1212.99 L1412.93 1212.99 L1412.35 1212.99 L1411.76 1212.99 L1411.17 1212.99 L1410.59 1212.99 L1410 1212.99 L1409.42 1212.99 L1408.83 1212.99 L1408.24 1212.99 L1407.66 1212.99 L1407.07 1212.99 L1406.48 1212.99 L1405.9 1212.99 L1405.31 1212.99 L1404.72 1212.99 L1404.14 1212.99 L1403.55 1212.99 L1402.96 1212.99 L1402.38 1212.99 L1401.79 1212.99 L1401.21 1212.99 L1400.62 1212.99 L1400.03 1212.99 L1399.45 1212.99 L1398.86 1212.99 L1398.27 1212.99 L1397.69 1212.99 L1397.1 1212.99 L1396.51 1212.99 L1395.93 1212.99 L1395.34 1212.99 L1394.75 1212.99 L1394.17 1212.99 L1393.58 1212.99 L1393 1212.99 L1392.41 1212.99 L1391.82 1212.99 L1391.24 1212.99 L1390.65 1212.99 L1390.06 1212.99 L1389.48 1212.99 L1388.89 1212.99 L1388.3 1212.99 L1387.72 1212.99 L1387.13 1212.99 L1386.55 1212.99 L1385.96 1212.99 L1385.37 1212.99 L1384.79 1212.99 L1384.2 1212.99 L1383.61 1212.99 L1383.03 1212.99 L1382.44 1212.99 L1381.85 1212.99 L1381.27 1212.99 L1380.68 1212.99 L1380.09 1212.99 L1379.51 1212.99 L1378.92 1212.99 L1378.34 1212.99 L1377.75 1212.99 L1377.16 1212.99 L1376.58 1212.99 L1375.99 1212.99 L1375.4 1212.99 L1374.82 1212.99 L1374.23 1212.99 L1373.64 1212.99 L1373.06 1212.99 L1372.47 1212.99 L1371.88 1212.99 L1371.3 1212.99 L1370.71 1212.99 L1370.13 1212.99 L1369.54 1212.99 L1368.95 1212.99 L1368.37 1212.99 L1367.78 1212.99 L1367.19 1212.99 L1366.61 1212.99 L1366.02 1212.99 L1365.43 1212.99 L1364.85 1212.99 L1364.26 1212.99 L1363.68 1212.99 L1363.09 1212.99 L1362.5 1212.99 L1361.92 1212.99 L1361.33 1212.99 L1360.74 1212.99 L1360.16 1212.99 L1359.57 1212.99 L1358.98 1212.99 L1358.4 1212.99 L1357.81 1212.99 L1357.22 1212.99 L1356.64 1212.99 L1356.05 1212.99 L1355.47 1212.99 L1354.88 1212.99 L1354.29 1212.99 L1353.71 1212.99 L1353.12 1212.99 L1352.53 1212.99 L1351.95 1212.99 L1351.36 1212.99 L1350.77 1212.99 L1350.19 1212.99 L1349.6 1212.99 L1349.01 1212.99 L1348.43 1212.99 L1347.84 1212.99 L1347.26 1212.99 L1346.67 1212.99 L1346.08 1212.99 L1345.5 1212.99 L1344.91 1212.99 L1344.32 1212.99 L1343.74 1212.99 L1343.15 1212.99 L1342.56 1212.99 L1341.98 1212.99 L1341.39 1212.99 L1340.8 1212.99 L1340.22 1212.99 L1339.63 1212.99 L1339.05 1212.99 L1338.46 1212.99 L1337.87 1212.99 L1337.29 1212.99 L1336.7 1212.99 L1336.11 1212.99 L1335.53 1212.99 L1334.94 1212.99 L1334.35 1212.99 L1333.77 1212.99 L1333.18 1212.99 L1332.6 1212.99 L1332.01 1212.99 L1331.42 1212.99 L1330.84 1212.99 L1330.25 1212.99 L1329.66 1212.99 L1329.08 1212.99 L1328.49 1212.99 L1327.9 1212.99 L1327.32 1212.99 L1326.73 1212.99 L1326.14 1212.99 L1325.56 1212.99 L1324.97 1212.99 L1324.39 1212.99 L1323.8 1212.99 L1323.21 1212.99 L1322.63 1212.99 L1322.04 1212.99 L1321.45 1212.99 L1320.87 1212.99 L1320.28 1212.99 L1319.69 1212.99 L1319.11 1212.99 L1318.52 1212.99 L1317.93 1212.99 L1317.35 1212.99 L1316.76 1212.99 L1316.18 1212.99 L1315.59 1212.99 L1315 1212.99 L1314.42 1212.99 L1313.83 1212.99 L1313.24 1212.99 L1312.66 1212.99 L1312.07 1212.99 L1311.48 1212.99 L1310.9 1212.99 L1310.31 1212.99 L1309.73 1212.99 L1309.14 1212.99 L1308.55 1212.99 L1307.97 1212.99 L1307.38 1212.99 L1306.79 1212.99 L1306.21 1212.99 L1305.62 1212.99 L1305.03 1212.99 L1304.45 1212.99 L1303.86 1212.99 L1303.27 1212.99 L1302.69 1212.99 L1302.1 1212.99 L1301.52 1212.99 L1300.93 1212.99 L1300.34 1212.99 L1299.76 1212.99 L1299.17 1212.99 L1298.58 1212.99 L1298 1212.99 L1297.41 1212.99 L1296.82 1212.99 L1296.24 1212.99 L1295.65 1212.99 L1295.06 1212.99 L1294.48 1212.99 L1293.89 1212.99 L1293.31 1212.99 L1292.72 1212.99 L1292.13 1212.99 L1291.55 1212.99 L1290.96 1212.99 L1290.37 1212.99 L1289.79 1212.99 L1289.2 1212.99 L1288.61 1212.99 L1288.03 1212.99 L1287.44 1212.99 L1286.86 1212.99 L1286.27 1212.99 L1285.68 1212.99 L1285.1 1212.99 L1284.51 1212.99 L1283.92 1212.99 L1283.34 1212.99 L1282.75 1212.99 L1282.16 1212.99 L1281.58 1212.99 L1280.99 1212.99 L1280.4 1212.99 L1279.82 1212.99 L1279.23 1212.99 L1278.65 1212.99 L1278.06 1212.99 L1277.47 1212.99 L1276.89 1212.99 L1276.3 1212.99 L1275.71 1212.99 L1275.13 1212.99 L1274.54 1212.99 L1273.95 1212.99 L1273.37 1212.99 L1272.78 1212.99 L1272.19 1212.99 L1271.61 1212.99 L1271.02 1212.99 L1270.44 1212.99 L1269.85 1212.99 L1269.26 1212.99 L1268.68 1212.99 L1268.09 1212.99 L1267.5 1212.99 L1266.92 1212.99 L1266.33 1212.99 L1265.74 1212.99 L1265.16 1212.99 L1264.57 1212.99 L1263.98 1212.99 L1263.4 1212.99 L1262.81 1212.99 L1262.23 1212.99 L1261.64 1212.99 L1261.05 1212.99 L1260.47 1212.99 L1259.88 1212.99 L1259.29 1212.99 L1258.71 1212.99 L1258.12 1212.99 L1257.53 1212.99 L1256.95 1212.99 L1256.36 1212.99 L1255.78 1212.99 L1255.19 1212.99 L1254.6 1212.99 L1254.02 1212.99 L1253.43 1212.99 L1252.84 1212.99 L1252.26 1212.99 L1251.67 1212.99 L1251.08 1212.99 L1250.5 1212.99 L1249.91 1212.99 L1249.32 1212.99 L1248.74 1212.99 L1248.15 1212.99 L1247.57 1212.99 L1246.98 1212.99 L1246.39 1212.99 L1245.81 1212.99 L1245.22 1212.99 L1244.63 1212.99 L1244.05 1212.99 L1243.46 1212.99 L1242.87 1212.99 L1242.29 1212.99 L1241.7 1212.99 L1241.11 1212.99 L1240.53 1212.99 L1239.94 1212.99 L1239.36 1212.99 L1238.77 1212.99 L1238.18 1212.99 L1237.6 1212.99 L1237.01 1212.99 L1236.42 1212.99 L1235.84 1212.99 L1235.25 1212.99 L1234.66 1212.99 L1234.08 1212.99 L1233.49 1212.99 L1232.91 1212.99 L1232.32 1212.99 L1231.73 1212.99 L1231.15 1212.99 L1230.56 1212.99 L1229.97 1212.99 L1229.39 1212.99 L1228.8 1212.99 L1228.21 1212.99 L1227.63 1212.99 L1227.04 1212.99 L1226.45 1212.99 L1225.87 1212.99 L1225.28 1212.99 L1224.7 1212.99 L1224.11 1212.99 L1223.52 1212.99 L1222.94 1212.99 L1222.35 1212.99 L1221.76 1212.99 L1221.18 1212.99 L1220.59 1212.99 L1220 1212.99 L1219.42 1212.99 L1218.83 1212.99 L1218.24 1212.99 L1217.66 1212.99 L1217.07 1212.99 L1216.49 1212.99 L1215.9 1212.99 L1215.31 1212.99 L1214.73 1212.99 L1214.14 1212.99 L1213.55 1212.99 L1212.97 1212.99 L1212.38 1212.99 L1211.79 1212.99 L1211.21 1212.99 L1210.62 1212.99 L1210.03 1212.99 L1209.45 1212.99 L1208.86 1212.99 L1208.28 1212.99 L1207.69 1212.99 L1207.1 1212.99 L1206.52 1212.99 L1205.93 1212.99 L1205.34 1212.99 L1204.76 1212.99 L1204.17 1212.99 L1203.58 1212.99 L1203 1212.99 L1202.41 1212.99 L1201.83 1212.99 L1201.24 1212.99 L1200.65 1212.99 L1200.07 1212.99 L1199.48 1212.99 L1198.89 1212.99 L1198.31 1212.99 L1197.72 1212.99 L1197.13 1212.99 L1196.55 1212.99 L1195.96 1212.99 L1195.37 1212.99 L1194.79 1212.99 L1194.2 1212.99 L1193.62 1212.99 L1193.03 1212.99 L1192.44 1212.99 L1191.86 1212.99 L1191.27 1212.99 L1190.68 1212.99 L1190.1 1212.99 L1189.51 1212.99 L1188.92 1212.99 L1188.34 1212.99 L1187.75 1212.99 L1187.16 1212.99 L1186.58 1212.99 L1185.99 1212.99 L1185.41 1212.99 L1184.82 1212.99 L1184.23 1212.99 L1183.65 1212.99 L1183.06 1212.99 L1182.47 1212.99 L1181.89 1212.99 L1181.3 1212.99 L1180.71 1212.99 L1180.13 1212.99 L1179.54 1212.99 L1178.96 1212.99 L1178.37 1212.99 L1177.78 1212.99 L1177.2 1212.99 L1176.61 1212.99 L1176.02 1212.99 L1175.44 1212.99 L1174.85 1212.99 L1174.26 1212.99 L1173.68 1212.99 L1173.09 1212.99 L1172.5 1212.99 L1171.92 1212.99 L1171.33 1212.99 L1170.75 1212.99 L1170.16 1212.99 L1169.57 1212.99 L1168.99 1212.99 L1168.4 1212.99 L1167.81 1212.99 L1167.23 1212.99 L1166.64 1212.99 L1166.05 1212.99 L1165.47 1212.99 L1164.88 1212.99 L1164.29 1212.99 L1163.71 1212.99 L1163.12 1212.99 L1162.54 1212.99 L1161.95 1212.99 L1161.36 1212.99 L1160.78 1212.99 L1160.19 1212.99 L1159.6 1212.99 L1159.02 1212.99 L1158.43 1212.99 L1157.84 1212.99 L1157.26 1212.99 L1156.67 1212.99 L1156.09 1212.99 L1155.5 1212.99 L1154.91 1212.99 L1154.33 1212.99 L1153.74 1212.99 L1153.15 1212.99 L1152.57 1212.99 L1151.98 1212.99 L1151.39 1212.99 L1150.81 1212.99 L1150.22 1212.99 L1149.63 1212.99 L1149.05 1212.99 L1148.46 1212.99 L1147.88 1212.99 L1147.29 1212.99 L1146.7 1212.99 L1146.12 1212.99 L1145.53 1212.99 L1144.94 1212.99 L1144.36 1212.99 L1143.77 1212.99 L1143.18 1212.99 L1142.6 1212.99 L1142.01 1212.99 L1141.42 1212.99 L1140.84 1212.99 L1140.25 1212.99 L1139.67 1212.99 L1139.08 1212.99 L1138.49 1212.99 L1137.91 1212.99 L1137.32 1212.99 L1136.73 1212.99 L1136.15 1212.99 L1135.56 1212.99 L1134.97 1212.99 L1134.39 1212.99 L1133.8 1212.99 L1133.21 1212.99 L1132.63 1212.99 L1132.04 1212.99 L1131.46 1212.99 L1130.87 1212.99 L1130.28 1212.99 L1129.7 1212.99 L1129.11 1212.99 L1128.52 1212.99 L1127.94 1212.99 L1127.35 1212.99 L1126.76 1212.99 L1126.18 1212.99 L1125.59 1212.99 L1125.01 1212.99 L1124.42 1212.99 L1123.83 1212.99 L1123.25 1212.99 L1122.66 1212.99 L1122.07 1212.99 L1121.49 1212.99 L1120.9 1212.99 L1120.31 1212.99 L1119.73 1212.99 L1119.14 1212.99 L1118.55 1212.99 L1117.97 1212.99 L1117.38 1212.99 L1116.8 1212.99 L1116.21 1212.99 L1115.62 1212.99 L1115.04 1212.99 L1114.45 1212.99 L1113.86 1212.99 L1113.28 1212.99 L1112.69 1212.99 L1112.1 1212.99 L1111.52 1212.99 L1110.93 1212.99 L1110.34 1212.99 L1109.76 1212.99 L1109.17 1212.99 L1108.59 1212.99 L1108 1212.99 L1107.41 1212.99 L1106.83 1212.99 L1106.24 1212.99 L1105.65 1212.99 L1105.07 1212.99 L1104.48 1212.99 L1103.89 1212.99 L1103.31 1212.99 L1102.72 1212.99 L1102.14 1212.99 L1101.55 1212.99 L1100.96 1212.99 L1100.38 1212.99 L1099.79 1212.99 L1099.2 1212.99 L1098.62 1212.99 L1098.03 1212.99 L1097.44 1212.99 L1096.86 1212.99 L1096.27 1212.99 L1095.68 1212.99 L1095.1 1212.99 L1094.51 1212.99 L1093.93 1212.99 L1093.34 1212.99 L1092.75 1212.99 L1092.17 1212.99 L1091.58 1212.99 L1090.99 1212.99 L1090.41 1212.99 L1089.82 1212.99 L1089.23 1212.99 L1088.65 1212.99 L1088.06 1212.99 L1087.47 1212.99 L1086.89 1212.99 L1086.3 1212.99 L1085.72 1212.99 L1085.13 1212.99 L1084.54 1212.99 L1083.96 1212.99 L1083.37 1212.99 L1082.78 1212.99 L1082.2 1212.99 L1081.61 1212.99 L1081.02 1212.99 L1080.44 1212.99 L1079.85 1212.99 L1079.26 1212.99 L1078.68 1212.99 L1078.09 1212.99 L1077.51 1212.99 L1076.92 1212.99 L1076.33 1212.99 L1075.75 1212.99 L1075.16 1212.99 L1074.57 1212.99 L1073.99 1212.99 L1073.4 1212.99 L1072.81 1212.99 L1072.23 1212.99 L1071.64 1212.99 L1071.06 1212.99 L1070.47 1212.99 L1069.88 1212.99 L1069.3 1212.99 L1068.71 1212.99 L1068.12 1212.99 L1067.54 1212.99 L1066.95 1212.99 L1066.36 1212.99 L1065.78 1212.99 L1065.19 1212.99 L1064.6 1212.99 L1064.02 1212.99 L1063.43 1212.99 L1062.85 1212.99 L1062.26 1212.99 L1061.67 1212.99 L1061.09 1212.99 L1060.5 1212.99 L1059.91 1212.99 L1059.33 1212.99 L1058.74 1212.99 L1058.15 1212.99 L1057.57 1212.99 L1056.98 1212.99 L1056.39 1212.99 L1055.81 1212.99 L1055.22 1212.99 L1054.64 1212.99 L1054.05 1212.99 L1053.46 1212.99 L1052.88 1212.99 L1052.29 1212.99 L1051.7 1212.99 L1051.12 1212.99 L1050.53 1212.99 L1049.94 1212.99 L1049.36 1212.99 L1048.77 1212.99 L1048.19 1212.99 L1047.6 1212.99 L1047.01 1212.99 L1046.43 1212.99 L1045.84 1212.99 L1045.25 1212.99 L1044.67 1212.99 L1044.08 1212.99 L1043.49 1212.99 L1042.91 1212.99 L1042.32 1212.99 L1041.73 1212.99 L1041.15 1212.99 L1040.56 1212.99 L1039.98 1212.99 L1039.39 1212.99 L1038.8 1212.99 L1038.22 1212.99 L1037.63 1212.99 L1037.04 1212.99 L1036.46 1212.99 L1035.87 1212.99 L1035.28 1212.99 L1034.7 1212.99 L1034.11 1212.99 L1033.52 1212.99 L1032.94 1212.99 L1032.35 1212.99 L1031.77 1212.99 L1031.18 1212.99 L1030.59 1212.99 L1030.01 1212.99 L1029.42 1212.99 L1028.83 1212.99 L1028.25 1212.99 L1027.66 1212.99 L1027.07 1212.99 L1026.49 1212.99 L1025.9 1212.99 L1025.32 1212.99 L1024.73 1212.99 L1024.14 1212.99 L1023.56 1212.99 L1022.97 1212.99 L1022.38 1212.99 L1021.8 1212.99 L1021.21 1212.99 L1020.62 1212.99 L1020.04 1212.99 L1019.45 1212.99 L1018.86 1212.99 L1018.28 1212.99 L1017.69 1212.99 L1017.11 1212.99 L1016.52 1212.99 L1015.93 1212.99 L1015.35 1212.99 L1014.76 1212.99 L1014.17 1212.99 L1013.59 1212.99 L1013 1212.99 L1012.41 1212.99 L1011.83 1212.99 L1011.24 1212.99 L1010.65 1212.99 L1010.07 1212.99 L1009.48 1212.99 L1008.9 1212.99 L1008.31 1212.99 L1007.72 1212.99 L1007.14 1212.99 L1006.55 1212.99 L1005.96 1212.99 L1005.38 1212.99 L1004.79 1212.99 L1004.2 1212.99 L1003.62 1212.99 L1003.03 1212.99 L1002.44 1212.99 L1001.86 1212.99 L1001.27 1212.99 L1000.69 1212.99 L1000.1 1212.99 L999.513 1212.99 L998.926 1212.99 L998.34 1212.99 L997.754 1212.99 L997.167 1212.99 L996.581 1212.99 L995.994 1212.99 L995.408 1212.99 L994.822 1212.99 L994.235 1212.99 L993.649 1212.99 L993.062 1212.99 L992.476 1212.99 L991.889 1212.99 L991.303 1212.99 L990.717 1212.99 L990.13 1212.99 L989.544 1212.99 L988.957 1212.99 L988.371 1212.99 L987.785 1212.99 L987.198 1212.99 L986.612 1212.99 L986.025 1212.99  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.05 986.612,1213.05 987.198,1213.05 987.785,1213.05 988.371,1213.05 988.957,1213.05 989.544,1213.05 990.13,1213.05 990.717,1213.05 991.303,1213.05 991.889,1213.05 992.476,1213.05 993.062,1213.05 993.649,1213.05 994.235,1213.05 994.822,1213.05 995.408,1213.05 995.994,1213.05 996.581,1213.05 997.167,1213.05 997.754,1213.05 998.34,1213.05 998.926,1213.05 999.513,1213.05 1000.1,1213.05 1000.69,1213.05 1001.27,1213.05 1001.86,1213.05 1002.44,1213.05 1003.03,1213.05 1003.62,1213.05 1004.2,1213.05 1004.79,1213.05 1005.38,1213.05 1005.96,1213.05 1006.55,1213.05 1007.14,1213.05 1007.72,1213.05 1008.31,1213.05 1008.9,1213.05 1009.48,1213.05 1010.07,1213.05 1010.65,1213.05 1011.24,1213.05 1011.83,1213.05 1012.41,1213.05 1013,1213.05 1013.59,1213.05 1014.17,1213.05 1014.76,1213.05 1015.35,1213.05 1015.93,1213.05 1016.52,1213.05 1017.11,1213.05 1017.69,1213.05 1018.28,1213.05 1018.86,1213.05 1019.45,1213.05 1020.04,1213.05 1020.62,1213.05 1021.21,1213.05 1021.8,1213.05 1022.38,1213.05 1022.97,1213.05 1023.56,1213.05 1024.14,1213.05 1024.73,1213.05 1025.32,1213.05 1025.9,1213.05 1026.49,1213.05 1027.07,1213.05 1027.66,1213.05 1028.25,1213.05 1028.83,1213.05 1029.42,1213.05 1030.01,1213.05 1030.59,1213.05 1031.18,1213.05 1031.77,1213.05 1032.35,1213.05 1032.94,1213.05 1033.52,1213.05 1034.11,1213.05 1034.7,1213.05 1035.28,1213.05 1035.87,1213.05 1036.46,1213.05 1037.04,1213.05 1037.63,1213.05 1038.22,1213.05 1038.8,1213.05 1039.39,1213.05 1039.98,1213.05 1040.56,1213.05 1041.15,1213.05 1041.73,1213.05 1042.32,1213.05 1042.91,1213.05 1043.49,1213.05 1044.08,1213.05 1044.67,1213.05 1045.25,1213.05 1045.84,1213.05 1046.43,1213.05 1047.01,1213.05 1047.6,1213.05 1048.19,1213.05 1048.77,1213.05 1049.36,1213.05 1049.94,1213.05 1050.53,1213.05 1051.12,1213.05 1051.7,1213.05 1052.29,1213.05 1052.88,1213.05 1053.46,1213.05 1054.05,1213.05 1054.64,1213.05 1055.22,1213.05 1055.81,1213.05 1056.39,1213.05 1056.98,1213.05 1057.57,1213.05 1058.15,1213.05 1058.74,1213.05 1059.33,1213.05 1059.91,1213.05 1060.5,1213.05 1061.09,1213.05 1061.67,1213.05 1062.26,1213.05 1062.85,1213.05 1063.43,1213.05 1064.02,1213.05 1064.6,1213.05 1065.19,1213.05 1065.78,1213.05 1066.36,1213.05 1066.95,1213.05 1067.54,1213.05 1068.12,1213.05 1068.71,1213.05 1069.3,1213.05 1069.88,1213.05 1070.47,1213.05 1071.06,1213.05 1071.64,1213.05 1072.23,1213.05 1072.81,1213.05 1073.4,1213.05 1073.99,1213.05 1074.57,1213.05 1075.16,1213.05 1075.75,1213.05 1076.33,1213.05 1076.92,1213.05 1077.51,1213.05 1078.09,1213.05 1078.68,1213.05 1079.26,1213.05 1079.85,1213.05 1080.44,1213.05 1081.02,1213.05 1081.61,1213.05 1082.2,1213.05 1082.78,1213.05 1083.37,1213.05 1083.96,1213.05 1084.54,1213.05 1085.13,1213.05 1085.72,1213.05 1086.3,1213.05 1086.89,1213.05 1087.47,1213.05 1088.06,1213.05 1088.65,1213.05 1089.23,1213.05 1089.82,1213.05 1090.41,1213.05 1090.99,1213.05 1091.58,1213.05 1092.17,1213.05 1092.75,1213.05 1093.34,1213.05 1093.93,1213.05 1094.51,1213.05 1095.1,1213.05 1095.68,1213.05 1096.27,1213.05 1096.86,1213.05 1097.44,1213.05 1098.03,1213.05 1098.62,1213.05 1099.2,1213.05 1099.79,1213.05 1100.38,1213.05 1100.96,1213.05 1101.55,1213.05 1102.14,1213.05 1102.72,1213.05 1103.31,1213.05 1103.89,1213.05 1104.48,1213.05 1105.07,1213.05 1105.65,1213.05 1106.24,1213.05 1106.83,1213.05 1107.41,1213.05 1108,1213.05 1108.59,1213.05 1109.17,1213.05 1109.76,1213.05 1110.34,1213.05 1110.93,1213.05 1111.52,1213.05 1112.1,1213.05 1112.69,1213.05 1113.28,1213.05 1113.86,1213.05 1114.45,1213.05 1115.04,1213.05 1115.62,1213.05 1116.21,1213.05 1116.8,1213.05 1117.38,1213.05 1117.97,1213.05 1118.55,1213.05 1119.14,1213.05 1119.73,1213.05 1120.31,1213.05 1120.9,1213.05 1121.49,1213.05 1122.07,1213.05 1122.66,1213.05 1123.25,1213.05 1123.83,1213.05 1124.42,1213.05 1125.01,1213.05 1125.59,1213.05 1126.18,1213.05 1126.76,1213.05 1127.35,1213.05 1127.94,1213.05 1128.52,1213.05 1129.11,1213.05 1129.7,1213.05 1130.28,1213.05 1130.87,1213.05 1131.46,1213.05 1132.04,1213.05 1132.63,1213.05 1133.21,1213.05 1133.8,1213.05 1134.39,1213.05 1134.97,1213.05 1135.56,1213.05 1136.15,1213.05 1136.73,1213.05 1137.32,1213.05 1137.91,1213.05 1138.49,1213.05 1139.08,1213.05 1139.67,1213.05 1140.25,1213.05 1140.84,1213.05 1141.42,1213.05 1142.01,1213.05 1142.6,1213.05 1143.18,1213.05 1143.77,1213.05 1144.36,1213.05 1144.94,1213.05 1145.53,1213.05 1146.12,1213.05 1146.7,1213.05 1147.29,1213.05 1147.88,1213.05 1148.46,1213.05 1149.05,1213.05 1149.63,1213.05 1150.22,1213.05 1150.81,1213.05 1151.39,1213.05 1151.98,1213.05 1152.57,1213.05 1153.15,1213.05 1153.74,1213.05 1154.33,1213.05 1154.91,1213.05 1155.5,1213.05 1156.09,1213.05 1156.67,1213.05 1157.26,1213.05 1157.84,1213.05 1158.43,1213.05 1159.02,1213.05 1159.6,1213.05 1160.19,1213.05 1160.78,1213.05 1161.36,1213.05 1161.95,1213.05 1162.54,1213.05 1163.12,1213.05 1163.71,1213.05 1164.29,1213.05 1164.88,1213.05 1165.47,1213.05 1166.05,1213.05 1166.64,1213.05 1167.23,1213.05 1167.81,1213.05 1168.4,1213.05 1168.99,1213.05 1169.57,1213.05 1170.16,1213.05 1170.75,1213.05 1171.33,1213.05 1171.92,1213.05 1172.5,1213.05 1173.09,1213.05 1173.68,1213.05 1174.26,1213.05 1174.85,1213.05 1175.44,1213.05 1176.02,1213.05 1176.61,1213.05 1177.2,1213.05 1177.78,1213.05 1178.37,1213.05 1178.96,1213.05 1179.54,1213.05 1180.13,1213.05 1180.71,1213.05 1181.3,1213.05 1181.89,1213.05 1182.47,1213.05 1183.06,1213.05 1183.65,1213.05 1184.23,1213.05 1184.82,1213.05 1185.41,1213.05 1185.99,1213.05 1186.58,1213.05 1187.16,1213.05 1187.75,1213.05 1188.34,1213.05 1188.92,1213.05 1189.51,1213.05 1190.1,1213.05 1190.68,1213.05 1191.27,1213.05 1191.86,1213.05 1192.44,1213.05 1193.03,1213.05 1193.62,1213.05 1194.2,1213.05 1194.79,1213.05 1195.37,1213.05 1195.96,1213.05 1196.55,1213.05 1197.13,1213.05 1197.72,1213.05 1198.31,1213.05 1198.89,1213.05 1199.48,1213.05 1200.07,1213.05 1200.65,1213.05 1201.24,1213.05 1201.83,1213.05 1202.41,1213.05 1203,1213.05 1203.58,1213.05 1204.17,1213.05 1204.76,1213.05 1205.34,1213.05 1205.93,1213.05 1206.52,1213.05 1207.1,1213.05 1207.69,1213.05 1208.28,1213.05 1208.86,1213.05 1209.45,1213.05 1210.03,1213.05 1210.62,1213.05 1211.21,1213.05 1211.79,1213.05 1212.38,1213.05 1212.97,1213.05 1213.55,1213.05 1214.14,1213.05 1214.73,1213.05 1215.31,1213.05 1215.9,1213.05 1216.49,1213.05 1217.07,1213.05 1217.66,1213.05 1218.24,1213.05 1218.83,1213.05 1219.42,1213.05 1220,1213.05 1220.59,1213.05 1221.18,1213.05 1221.76,1213.05 1222.35,1213.05 1222.94,1213.05 1223.52,1213.05 1224.11,1213.05 1224.7,1213.05 1225.28,1213.05 1225.87,1213.05 1226.45,1213.05 1227.04,1213.05 1227.63,1213.05 1228.21,1213.05 1228.8,1213.05 1229.39,1213.05 1229.97,1213.05 1230.56,1213.05 1231.15,1213.05 1231.73,1213.05 1232.32,1213.05 1232.91,1213.05 1233.49,1213.05 1234.08,1213.05 1234.66,1213.05 1235.25,1213.05 1235.84,1213.05 1236.42,1213.05 1237.01,1213.05 1237.6,1213.05 1238.18,1213.05 1238.77,1213.05 1239.36,1213.05 1239.94,1213.05 1240.53,1213.05 1241.11,1213.05 1241.7,1213.05 1242.29,1213.05 1242.87,1213.05 1243.46,1213.05 1244.05,1213.05 1244.63,1213.05 1245.22,1213.05 1245.81,1213.05 1246.39,1213.05 1246.98,1213.05 1247.57,1213.05 1248.15,1213.05 1248.74,1213.05 1249.32,1213.05 1249.91,1213.05 1250.5,1213.05 1251.08,1213.05 1251.67,1213.05 1252.26,1213.05 1252.84,1213.05 1253.43,1213.05 1254.02,1213.05 1254.6,1213.05 1255.19,1213.05 1255.78,1213.05 1256.36,1213.05 1256.95,1213.05 1257.53,1213.05 1258.12,1213.05 1258.71,1213.05 1259.29,1213.05 1259.88,1213.05 1260.47,1213.05 1261.05,1213.05 1261.64,1213.05 1262.23,1213.05 1262.81,1213.05 1263.4,1213.05 1263.98,1213.05 1264.57,1213.05 1265.16,1213.05 1265.74,1213.05 1266.33,1213.05 1266.92,1213.05 1267.5,1213.05 1268.09,1213.05 1268.68,1213.05 1269.26,1213.05 1269.85,1213.05 1270.44,1213.05 1271.02,1213.05 1271.61,1213.05 1272.19,1213.05 1272.78,1213.05 1273.37,1213.05 1273.95,1213.05 1274.54,1213.05 1275.13,1213.05 1275.71,1213.05 1276.3,1213.05 1276.89,1213.05 1277.47,1213.05 1278.06,1213.05 1278.65,1213.05 1279.23,1213.05 1279.82,1213.05 1280.4,1213.05 1280.99,1213.05 1281.58,1213.05 1282.16,1213.05 1282.75,1213.05 1283.34,1213.05 1283.92,1213.05 1284.51,1213.05 1285.1,1213.05 1285.68,1213.05 1286.27,1213.05 1286.86,1213.05 1287.44,1213.05 1288.03,1213.05 1288.61,1213.05 1289.2,1213.05 1289.79,1213.05 1290.37,1213.05 1290.96,1213.05 1291.55,1213.05 1292.13,1213.05 1292.72,1213.05 1293.31,1213.05 1293.89,1213.05 1294.48,1213.05 1295.06,1213.05 1295.65,1213.05 1296.24,1213.05 1296.82,1213.05 1297.41,1213.05 1298,1213.05 1298.58,1213.05 1299.17,1213.05 1299.76,1213.05 1300.34,1213.05 1300.93,1213.05 1301.52,1213.05 1302.1,1213.05 1302.69,1213.05 1303.27,1213.05 1303.86,1213.05 1304.45,1213.05 1305.03,1213.05 1305.62,1213.05 1306.21,1213.05 1306.79,1213.05 1307.38,1213.05 1307.97,1213.05 1308.55,1213.05 1309.14,1213.05 1309.73,1213.05 1310.31,1213.05 1310.9,1213.05 1311.48,1213.05 1312.07,1213.05 1312.66,1213.05 1313.24,1213.05 1313.83,1213.05 1314.42,1213.05 1315,1213.05 1315.59,1213.05 1316.18,1213.05 1316.76,1213.05 1317.35,1213.05 1317.93,1213.05 1318.52,1213.05 1319.11,1213.05 1319.69,1213.05 1320.28,1213.05 1320.87,1213.05 1321.45,1213.05 1322.04,1213.05 1322.63,1213.05 1323.21,1213.05 1323.8,1213.05 1324.39,1213.05 1324.97,1213.05 1325.56,1213.05 1326.14,1213.05 1326.73,1213.05 1327.32,1213.05 1327.9,1213.05 1328.49,1213.05 1329.08,1213.05 1329.66,1213.05 1330.25,1213.05 1330.84,1213.05 1331.42,1213.05 1332.01,1213.05 1332.6,1213.05 1333.18,1213.05 1333.77,1213.05 1334.35,1213.05 1334.94,1213.05 1335.53,1213.05 1336.11,1213.05 1336.7,1213.05 1337.29,1213.05 1337.87,1213.05 1338.46,1213.05 1339.05,1213.05 1339.63,1213.05 1340.22,1213.05 1340.8,1213.05 1341.39,1213.05 1341.98,1213.05 1342.56,1213.05 1343.15,1213.05 1343.74,1213.05 1344.32,1213.05 1344.91,1213.05 1345.5,1213.05 1346.08,1213.05 1346.67,1213.05 1347.26,1213.05 1347.84,1213.05 1348.43,1213.05 1349.01,1213.05 1349.6,1213.05 1350.19,1213.05 1350.77,1213.05 1351.36,1213.05 1351.95,1213.05 1352.53,1213.05 1353.12,1213.05 1353.71,1213.05 1354.29,1213.05 1354.88,1213.05 1355.47,1213.05 1356.05,1213.05 1356.64,1213.05 1357.22,1213.05 1357.81,1213.05 1358.4,1213.05 1358.98,1213.05 1359.57,1213.05 1360.16,1213.05 1360.74,1213.05 1361.33,1213.05 1361.92,1213.05 1362.5,1213.05 1363.09,1213.05 1363.68,1213.05 1364.26,1213.05 1364.85,1213.05 1365.43,1213.05 1366.02,1213.05 1366.61,1213.05 1367.19,1213.05 1367.78,1213.05 1368.37,1213.05 1368.95,1213.05 1369.54,1213.05 1370.13,1213.05 1370.71,1213.05 1371.3,1213.05 1371.88,1213.05 1372.47,1213.05 1373.06,1213.05 1373.64,1213.05 1374.23,1213.05 1374.82,1213.05 1375.4,1213.05 1375.99,1213.05 1376.58,1213.05 1377.16,1213.05 1377.75,1213.05 1378.34,1213.05 1378.92,1213.05 1379.51,1213.05 1380.09,1213.05 1380.68,1213.05 1381.27,1213.05 1381.85,1213.05 1382.44,1213.05 1383.03,1213.05 1383.61,1213.05 1384.2,1213.05 1384.79,1213.05 1385.37,1213.05 1385.96,1213.05 1386.55,1213.05 1387.13,1213.05 1387.72,1213.05 1388.3,1213.05 1388.89,1213.05 1389.48,1213.05 1390.06,1213.05 1390.65,1213.05 1391.24,1213.05 1391.82,1213.05 1392.41,1213.05 1393,1213.05 1393.58,1213.05 1394.17,1213.05 1394.75,1213.05 1395.34,1213.05 1395.93,1213.05 1396.51,1213.05 1397.1,1213.05 1397.69,1213.05 1398.27,1213.05 1398.86,1213.05 1399.45,1213.05 1400.03,1213.05 1400.62,1213.05 1401.21,1213.05 1401.79,1213.05 1402.38,1213.05 1402.96,1213.05 1403.55,1213.05 1404.14,1213.05 1404.72,1213.05 1405.31,1213.05 1405.9,1213.05 1406.48,1213.05 1407.07,1213.05 1407.66,1213.05 1408.24,1213.05 1408.83,1213.05 1409.42,1213.05 1410,1213.05 1410.59,1213.05 1411.17,1213.05 1411.76,1213.05 1412.35,1213.05 1412.93,1213.05 1413.52,1213.05 1414.11,1213.05 1414.69,1213.05 1415.28,1213.05 1415.87,1213.05 1416.45,1213.05 1417.04,1213.05 1417.63,1213.05 1418.21,1213.05 1418.8,1213.05 1419.38,1213.05 1419.97,1213.05 1420.56,1213.05 1421.14,1213.05 1421.73,1213.05 1422.32,1213.05 1422.9,1213.05 1423.49,1213.05 1424.08,1213.05 1424.66,1213.05 1425.25,1213.05 1425.83,1213.05 1426.42,1213.05 1427.01,1213.05 1427.59,1213.05 1428.18,1213.05 1428.77,1213.05 1429.35,1213.05 1429.94,1213.05 1430.53,1213.05 1431.11,1213.05 1431.7,1213.05 1432.29,1213.05 1432.87,1213.05 1433.46,1213.05 1434.04,1213.05 1434.63,1213.05 1435.22,1213.05 1435.8,1213.05 1436.39,1213.05 1436.98,1213.05 1437.56,1213.05 1438.15,1213.05 1438.74,1213.05 1439.32,1213.05 1439.91,1213.05 1440.5,1213.05 1441.08,1213.05 1441.67,1213.05 1442.25,1213.05 1442.84,1213.05 1443.43,1213.05 1444.01,1213.05 1444.6,1213.05 1445.19,1213.05 1445.77,1213.05 1446.36,1213.05 1446.95,1213.05 1447.53,1213.05 1448.12,1213.05 1448.7,1213.05 1449.29,1213.05 1449.88,1213.05 1450.46,1213.05 1451.05,1213.05 1451.64,1213.05 1452.22,1213.05 1452.81,1213.05 1453.4,1213.05 1453.98,1213.05 1454.57,1213.05 1455.16,1213.05 1455.74,1213.05 1456.33,1213.05 1456.91,1213.05 1457.5,1213.05 1458.09,1213.05 1458.67,1213.05 1459.26,1213.05 1459.85,1213.05 1460.43,1213.05 1461.02,1213.05 1461.61,1213.05 1462.19,1213.05 1462.78,1213.05 1463.37,1213.05 1463.95,1213.05 1464.54,1213.05 1465.12,1213.05 1465.71,1213.05 1466.3,1213.05 1466.88,1213.05 1467.47,1213.05 1468.06,1213.05 1468.64,1213.05 1469.23,1213.05 1469.82,1213.05 1470.4,1213.05 1470.99,1213.05 1471.57,1213.05 1472.16,1213.05 1472.75,1213.05 1473.33,1213.05 1473.92,1213.05 1474.51,1213.05 1475.09,1213.05 1475.68,1213.05 1476.27,1213.05 1476.85,1213.05 1477.44,1213.05 1478.03,1213.05 1478.61,1213.05 1479.2,1213.05 1479.78,1213.05 1480.37,1213.05 1480.96,1213.05 1481.54,1213.05 1482.13,1213.05 1482.72,1213.05 1483.3,1213.05 1483.89,1213.05 1484.48,1213.05 1485.06,1213.05 1485.65,1213.05 1486.24,1213.05 1486.82,1213.05 1487.41,1213.05 1487.99,1213.05 1488.58,1213.05 1489.17,1213.05 1489.75,1213.05 1490.34,1213.05 1490.93,1213.05 1491.51,1213.05 1492.1,1213.05 1492.69,1213.05 1493.27,1213.05 1493.86,1213.05 1494.45,1213.05 1495.03,1213.05 1495.62,1213.05 1496.2,1213.05 1496.79,1213.05 1497.38,1213.05 1497.96,1213.05 1498.55,1213.05 1499.14,1213.05 1499.72,1213.05 1500.31,1213.05 1500.9,1213.05 1501.48,1213.05 1502.07,1213.05 1502.65,1213.05 1503.24,1213.05 1503.83,1213.05 1504.41,1213.05 1505,1213.05 1505.59,1213.05 1506.17,1213.05 1506.76,1213.05 1507.35,1213.05 1507.93,1213.05 1508.52,1213.05 1509.11,1213.05 1509.69,1213.05 1510.28,1213.05 1510.86,1213.05 1511.45,1213.05 1512.04,1213.05 1512.62,1213.05 1513.21,1213.05 1513.8,1213.05 1514.38,1213.05 1514.97,1213.05 1515.56,1213.05 1516.14,1213.05 1516.73,1213.05 1517.32,1213.05 1517.9,1213.05 1518.49,1213.05 1519.07,1213.05 1519.66,1213.05 1520.25,1213.05 1520.83,1213.05 1521.42,1213.05 1522.01,1213.05 1522.59,1213.05 1523.18,1213.05 1523.77,1213.05 1524.35,1213.05 1524.94,1213.05 1525.52,1213.05 1526.11,1213.05 1526.7,1213.05 1527.28,1213.05 1527.87,1213.05 1528.46,1213.05 1529.04,1213.05 1529.63,1213.05 1530.22,1213.05 1530.8,1213.05 1531.39,1213.05 1531.98,1213.05 1532.56,1213.05 1533.15,1213.05 1533.73,1213.05 1534.32,1213.05 1534.91,1213.05 1535.49,1213.05 1536.08,1213.05 1536.67,1213.05 1537.25,1213.05 1537.84,1213.05 1538.43,1213.05 1539.01,1213.05 1539.6,1213.05 1540.19,1213.05 1540.77,1213.05 1541.36,1213.05 1541.94,1213.05 1542.53,1213.05 1543.12,1213.05 1543.7,1213.05 1544.29,1213.05 1544.88,1213.05 1545.46,1213.05 1546.05,1213.05 1546.64,1213.05 1547.22,1213.05 1547.81,1213.05 1548.4,1213.05 1548.98,1213.05 1549.57,1213.05 1550.15,1213.05 1550.74,1213.05 1551.33,1213.05 1551.91,1213.05 1552.5,1213.05 1553.09,1213.05 1553.67,1213.05 1554.26,1213.05 1554.85,1213.05 1555.43,1213.05 1556.02,1213.05 1556.6,1213.05 1557.19,1213.05 1557.78,1213.05 1558.36,1213.05 1558.95,1213.05 1559.54,1213.05 1560.12,1213.05 1560.71,1213.05 1561.3,1213.05 1561.88,1213.05 1562.47,1213.05 1563.06,1213.05 1563.64,1213.05 1564.23,1213.05 1564.81,1213.05 1565.4,1213.05 1565.99,1213.05 1566.57,1213.05 1567.16,1213.05 1567.75,1213.05 1568.33,1213.05 1568.92,1213.05 1569.51,1213.05 1570.09,1213.05 1570.68,1213.05 1571.27,1213.05 1571.85,1213.05 1572.44,1213.05 1573.02,1213.05 1573.61,1213.05 1574.2,1213.05 1574.78,1213.05 1575.37,1213.05 1575.96,1213.05 1576.54,1213.05 1577.13,1213.05 1577.72,1213.05 1578.3,1213.05 1578.89,1213.05 1579.47,1213.05 1580.06,1213.05 1580.65,1213.05 1581.23,1213.05 1581.82,1213.05 1582.41,1213.05 1582.99,1213.05 1583.58,1213.05 1584.17,1213.05 1584.75,1213.05 1585.34,1213.05 1585.93,1213.05 1586.51,1213.05 1587.1,1213.05 1587.68,1213.05 1588.27,1213.05 1588.86,1213.05 1589.44,1213.05 1590.03,1213.05 1590.62,1213.05 1591.2,1213.05 1591.79,1213.05 1592.38,1213.05 1592.96,1213.05 1593.55,1213.05 1594.14,1213.05 1594.72,1213.05 1595.31,1213.05 1595.89,1213.05 1596.48,1213.05 1597.07,1213.05 1597.65,1213.05 1598.24,1213.05 1598.83,1213.05 1599.41,1213.05 1600,1213.05 1600.59,1213.05 1601.17,1213.05 1601.76,1213.05 1602.34,1213.05 1602.93,1213.05 1603.52,1213.05 1604.1,1213.05 1604.69,1213.05 1605.28,1213.05 1605.86,1213.05 1606.45,1213.05 1607.04,1213.05 1607.62,1213.05 1608.21,1213.05 1608.8,1213.05 1609.38,1213.05 1609.97,1213.05 1610.55,1213.05 1611.14,1213.05 1611.73,1213.05 1612.31,1213.05 1612.9,1213.05 1613.49,1213.05 1614.07,1213.05 1614.66,1213.05 1615.25,1213.05 1615.83,1213.05 1616.42,1213.05 1617.01,1213.05 1617.59,1213.05 1618.18,1213.05 1618.76,1213.05 1619.35,1213.05 1619.94,1213.05 1620.52,1213.05 1621.11,1213.05 1621.7,1213.05 1622.28,1213.05 1622.87,1213.05 1623.46,1213.05 1624.04,1213.05 1624.63,1213.05 1625.22,1213.05 1625.8,1213.05 1626.39,1213.05 1626.97,1213.05 1627.56,1213.05 1628.15,1213.05 1628.73,1213.05 1629.32,1213.05 1629.91,1213.05 1630.49,1213.05 1631.08,1213.05 1631.67,1213.05 1632.25,1213.05 1632.84,1213.05 1633.42,1213.05 1634.01,1213.05 1634.6,1213.05 1635.18,1213.05 1635.77,1213.05 1636.36,1213.05 1636.94,1213.05 1637.53,1213.05 1638.12,1213.05 1638.7,1213.05 1639.29,1213.05 1639.88,1213.05 1640.46,1213.05 1641.05,1213.05 1641.63,1213.05 1642.22,1213.05 1642.81,1213.05 1643.39,1213.05 1643.98,1213.05 1644.57,1213.05 1645.15,1213.05 1645.74,1213.05 1646.33,1213.05 1646.91,1213.05 1647.5,1213.05 1648.09,1213.05 1648.67,1213.05 1649.26,1213.05 1649.84,1213.05 1650.43,1213.05 1651.02,1213.05 1651.6,1213.05 1652.19,1213.05 1652.78,1213.05 1653.36,1213.05 1653.95,1213.05 1654.54,1213.05 1655.12,1213.05 1655.71,1213.05 1656.29,1213.05 1656.88,1213.05 1657.47,1213.05 1658.05,1213.05 1658.64,1213.05 1659.23,1213.05 1659.81,1213.05 1660.4,1213.05 1660.99,1213.05 1661.57,1213.05 1662.16,1213.05 1662.75,1213.05 1663.33,1213.05 1663.92,1213.05 1664.5,1213.05 1665.09,1213.05 1665.68,1213.05 1666.26,1213.05 1666.85,1213.05 1667.44,1213.05 1668.02,1213.05 1668.61,1213.05 1669.2,1213.05 1669.78,1213.05 1670.37,1213.05 1670.96,1213.05 1671.54,1213.05 1672.13,1213.05 1672.71,1213.05 1673.3,1213.05 1673.89,1213.05 1674.47,1213.05 1675.06,1213.05 1675.65,1213.05 1676.23,1213.05 1676.82,1213.05 1677.41,1213.05 1677.99,1213.05 1678.58,1213.05 1679.17,1213.05 1679.75,1213.05 1680.34,1213.05 1680.92,1213.05 1681.51,1213.05 1682.1,1213.05 1682.68,1213.05 1683.27,1213.05 1683.86,1213.05 1684.44,1213.05 1685.03,1213.05 1685.62,1213.05 1686.2,1213.05 1686.79,1213.05 1687.37,1213.05 1687.96,1213.05 1688.55,1213.05 1689.13,1213.05 1689.72,1213.05 1690.31,1213.05 1690.89,1213.05 1691.48,1213.05 1692.07,1213.05 1692.65,1213.05 1693.24,1213.05 1693.83,1213.05 1694.41,1213.05 1695,1213.05 1695.58,1213.05 1696.17,1213.05 1696.76,1213.05 1697.34,1213.05 1697.93,1213.05 1698.52,1213.05 1699.1,1213.05 1699.69,1213.05 1700.28,1213.05 1700.86,1213.05 1701.45,1213.05 1702.04,1213.05 1702.62,1213.05 1703.21,1213.05 1703.79,1213.05 1704.38,1213.05 1704.97,1213.05 1705.55,1213.05 1706.14,1213.05 1706.73,1213.05 1707.31,1213.05 1707.9,1213.05 1708.49,1213.05 1709.07,1213.05 1709.66,1213.05 1710.24,1213.05 1710.83,1213.05 1711.42,1213.05 1712,1213.05 1712.59,1213.05 1713.18,1213.05 1713.76,1213.05 1714.35,1213.05 1714.94,1213.05 1715.52,1213.05 1716.11,1213.05 1716.7,1213.05 1717.28,1213.05 1717.87,1213.05 1718.45,1213.05 1719.04,1213.05 1719.63,1213.05 1720.21,1213.05 1720.8,1213.05 1721.39,1213.05 1721.97,1213.05 1722.56,1213.05 1723.15,1213.05 1723.73,1213.05 1724.32,1213.05 1724.91,1213.05 1725.49,1213.05 1726.08,1213.05 1726.66,1213.05 1727.25,1213.05 1727.84,1213.05 1728.42,1213.05 1729.01,1213.05 1729.6,1213.05 1730.18,1213.05 1730.77,1213.05 1731.36,1213.05 1731.94,1213.05 1732.53,1213.05 1733.11,1213.05 1733.7,1213.05 1734.29,1213.05 1734.87,1213.05 1735.46,1213.05 1736.05,1213.05 1736.63,1213.05 1737.22,1213.05 1737.81,1213.05 1738.39,1213.05 1738.98,1213.05 1739.57,1213.05 1740.15,1213.05 1740.74,1213.05 1741.32,1213.05 1741.91,1213.05 1742.5,1213.05 1743.08,1213.05 1743.67,1213.05 1744.26,1213.05 1744.84,1213.05 1745.43,1213.05 1746.02,1213.05 1746.6,1213.05 1747.19,1213.05 1747.78,1213.05 1748.36,1213.05 1748.95,1213.05 1749.53,1213.05 1750.12,1213.05 1750.71,1213.05 1751.29,1213.05 1751.88,1213.05 1752.47,1213.05 1753.05,1213.05 1753.64,1213.05 1754.23,1213.05 1754.81,1213.05 1755.4,1213.05 1755.99,1213.05 1756.57,1213.05 1757.16,1213.05 1757.74,1213.05 1758.33,1213.05 1758.92,1213.05 1759.5,1213.05 1760.09,1213.05 1760.68,1213.05 1761.26,1213.05 1761.85,1213.05 1762.44,1213.05 1763.02,1213.05 1763.61,1213.05 1764.19,1213.05 1764.78,1213.05 1765.37,1213.05 1765.95,1213.05 1766.54,1213.05 1767.13,1213.05 1767.71,1213.05 1768.3,1213.05 1768.89,1213.05 1769.47,1213.05 1770.06,1213.05 1770.65,1213.05 1771.23,1213.05 1771.82,1213.05 1772.4,1213.05 1772.99,1213.05 1773.58,1213.05 1774.16,1213.05 1774.75,1213.05 1775.34,1213.05 1775.92,1213.05 1776.51,1213.05 1777.1,1213.05 1777.68,1213.05 1778.27,1213.05 1778.86,1213.05 1779.44,1213.05 1780.03,1213.05 1780.61,1213.05 1781.2,1213.05 1781.79,1213.05 1782.37,1213.05 1782.96,1213.05 1783.55,1213.05 1784.13,1213.05 1784.72,1213.05 1785.31,1213.05 1785.89,1213.05 1786.48,1213.05 1787.06,1213.05 1787.65,1213.05 1788.24,1213.05 1788.82,1213.05 1789.41,1213.05 1790,1213.05 1790.58,1213.05 1791.17,1213.05 1791.76,1213.05 1792.34,1213.05 1792.93,1213.05 1793.52,1213.05 1794.1,1213.05 1794.69,1213.05 1795.27,1213.05 1795.86,1213.05 1796.45,1213.05 1797.03,1213.05 1797.62,1213.05 1798.21,1213.05 1798.79,1213.05 1799.38,1213.05 1799.97,1213.05 1800.55,1213.05 1801.14,1213.05 1801.73,1213.05 1802.31,1213.05 1802.9,1213.05 1803.48,1213.05 1804.07,1213.05 1804.66,1213.05 1805.24,1213.05 1805.83,1213.05 1806.42,1213.05 1807,1213.05 1807.59,1213.05 1808.18,1213.05 1808.76,1213.05 1809.35,1213.05 1809.94,1213.05 1810.52,1213.05 1811.11,1213.05 1811.69,1213.05 1812.28,1213.05 1812.87,1213.05 1813.45,1213.05 1814.04,1213.05 1814.63,1213.05 1815.21,1213.05 1815.8,1213.05 1816.39,1213.05 1816.97,1213.05 1817.56,1213.05 1818.14,1213.05 1818.73,1213.05 1819.32,1213.05 1819.9,1213.05 1820.49,1213.05 1821.08,1213.05 1821.66,1213.05 1822.25,1213.05 1822.84,1213.05 1823.42,1213.05 1824.01,1213.05 1824.6,1213.05 1825.18,1213.05 1825.77,1213.05 1826.35,1213.05 1826.94,1213.05 1827.53,1213.05 1828.11,1213.05 1828.7,1213.05 1829.29,1213.05 1829.87,1213.05 1830.46,1213.05 1831.05,1213.05 1831.63,1213.05 1832.22,1213.05 1832.81,1213.05 1833.39,1213.05 1833.98,1213.05 1834.56,1213.05 1835.15,1213.05 1835.74,1213.05 1836.32,1213.05 1836.91,1213.05 1837.5,1213.05 1838.08,1213.05 1838.67,1213.05 1839.26,1213.05 1839.84,1213.05 1840.43,1213.05 1841.01,1213.05 1841.6,1213.05 1842.19,1213.05 1842.77,1213.05 1843.36,1213.05 1843.95,1213.05 1844.53,1213.05 1845.12,1213.05 1845.71,1213.05 1846.29,1213.05 1846.88,1213.05 1847.47,1213.05 1848.05,1213.05 1848.64,1213.05 1849.22,1213.05 1849.81,1213.05 1850.4,1213.05 1850.98,1213.05 1851.57,1213.05 1852.16,1213.05 1852.74,1213.05 1853.33,1213.05 1853.92,1213.05 1854.5,1213.05 1855.09,1213.05 1855.68,1213.05 1856.26,1213.05 1856.85,1213.05 1857.43,1213.05 1858.02,1213.05 1858.61,1213.05 1859.19,1213.05 1859.78,1213.05 1860.37,1213.05 1860.95,1213.05 1861.54,1213.05 1862.13,1213.05 1862.71,1213.05 1863.3,1213.05 1863.88,1213.05 1864.47,1213.05 1865.06,1213.05 1865.64,1213.05 1866.23,1213.05 1866.82,1213.05 1867.4,1213.05 1867.99,1213.05 1868.58,1213.05 1869.16,1213.05 1869.75,1213.05 1870.34,1213.05 1870.92,1213.05 1871.51,1213.05 1872.09,1213.05 1872.68,1213.05 1873.27,1213.05 1873.85,1213.05 1874.44,1213.05 1875.03,1213.05 1875.61,1213.05 1876.2,1213.05 1876.79,1213.05 1877.37,1213.05 1877.96,1213.05 1878.55,1213.05 1879.13,1213.05 1879.72,1213.05 1880.3,1213.05 1880.89,1213.05 1881.48,1213.05 1882.06,1213.05 1882.65,1213.05 1883.24,1213.05 1883.82,1213.05 1884.41,1213.05 1885,1213.05 1885.58,1213.05 1886.17,1213.05 1886.76,1213.05 1887.34,1213.05 1887.93,1213.05 1888.51,1213.05 1889.1,1213.05 1889.69,1213.05 1890.27,1213.05 1890.86,1213.05 1891.45,1213.05 1892.03,1213.05 1892.62,1213.05 1893.21,1213.05 1893.79,1213.05 1894.38,1213.05 1894.96,1213.05 1895.55,1213.05 1896.14,1213.05 1896.72,1213.05 1897.31,1213.05 1897.9,1213.05 1898.48,1213.05 1899.07,1213.05 1899.66,1213.05 1900.24,1213.05 1900.83,1213.05 1901.42,1213.05 1902,1213.05 1902.59,1213.05 1903.17,1213.05 1903.76,1213.05 1904.35,1213.05 1904.93,1213.05 1905.52,1213.05 1906.11,1213.05 1906.69,1213.05 1907.28,1213.05 1907.87,1213.05 1908.45,1213.05 1909.04,1213.05 1909.63,1213.05 1910.21,1213.05 1910.8,1213.05 1911.38,1213.05 1911.97,1213.05 1912.56,1213.05 1913.14,1213.05 1913.73,1213.05 1914.32,1213.05 1914.9,1213.05 1915.49,1213.05 1916.08,1213.05 1916.66,1213.05 1917.25,1213.05 1917.83,1213.05 1918.42,1213.05 1919.01,1213.05 1919.59,1213.05 1920.18,1213.05 1920.77,1213.05 1921.35,1213.05 1921.94,1213.05 1922.53,1213.05 1923.11,1213.05 1923.7,1213.05 1924.29,1213.05 1924.87,1213.05 1925.46,1213.05 1926.04,1213.05 1926.63,1213.05 1927.22,1213.05 1927.8,1213.05 1928.39,1213.05 1928.98,1213.05 1929.56,1213.05 1930.15,1213.05 1930.74,1213.05 1931.32,1213.05 1931.91,1213.05 1932.5,1213.05 1933.08,1213.05 1933.67,1213.05 1934.25,1213.05 1934.84,1213.05 1935.43,1213.05 1936.01,1213.05 1936.6,1213.05 1937.19,1213.05 1937.77,1213.05 1938.36,1213.05 1938.95,1213.05 1939.53,1213.05 1940.12,1213.05 1940.71,1213.05 1941.29,1213.05 1941.88,1213.05 1942.46,1213.05 1943.05,1213.05 1943.64,1213.05 1944.22,1213.05 1944.81,1213.05 1945.4,1213.05 1945.98,1213.05 1946.57,1213.05 1947.16,1213.05 1947.74,1213.05 1948.33,1213.05 1948.91,1213.05 1949.5,1213.05 1950.09,1213.05 1950.67,1213.05 1951.26,1213.05 1951.85,1213.05 1952.43,1213.05 1953.02,1213.05 1953.61,1213.05 1954.19,1213.05 1954.78,1213.05 1955.37,1213.05 1955.95,1213.05 1956.54,1213.05 1957.12,1213.05 1957.71,1213.05 1958.3,1213.05 1958.88,1213.05 1959.47,1213.05 1960.06,1213.05 1960.64,1213.05 1961.23,1213.05 1961.82,1213.05 1962.4,1213.05 1962.99,1213.05 1963.58,1213.05 1964.16,1213.05 1964.75,1213.05 1965.33,1213.05 1965.92,1213.05 1966.51,1213.05 1967.09,1213.05 1967.68,1213.05 1968.27,1213.05 1968.85,1213.05 1969.44,1213.05 1970.03,1213.05 1970.61,1213.05 1971.2,1213.05 1971.78,1213.05 1972.37,1213.05 1972.96,1213.05 1973.54,1213.05 1974.13,1213.05 1974.72,1213.05 1975.3,1213.05 1975.89,1213.05 1976.48,1213.05 1977.06,1213.05 1977.65,1213.05 1978.24,1213.05 1978.82,1213.05 1979.41,1213.05 1979.99,1213.05 1980.58,1213.05 1981.17,1213.05 1981.75,1213.05 1982.34,1213.05 1982.93,1213.05 1983.51,1213.05 1984.1,1213.05 1984.69,1213.05 1985.27,1213.05 1985.86,1213.05 1986.45,1213.05 1987.03,1213.05 1987.62,1213.05 1988.2,1213.05 1988.79,1213.05 1989.38,1213.05 1989.96,1213.05 1990.55,1213.05 1991.14,1213.05 1991.72,1213.05 1992.31,1213.05 1992.9,1213.05 1993.48,1213.05 1994.07,1213.05 1994.65,1213.05 1995.24,1213.05 1995.83,1213.05 1996.41,1213.05 1997,1213.05 1997.59,1213.05 1998.17,1213.05 1998.76,1213.05 1999.35,1213.05 1999.93,1213.05 2000.52,1213.05 2001.11,1213.05 2001.69,1213.05 2002.28,1213.05 2002.86,1213.05 2003.45,1213.05 2004.04,1213.05 2004.62,1213.05 2005.21,1213.05 2005.8,1213.05 2006.38,1213.05 2006.97,1213.05 2007.56,1213.05 2008.14,1213.05 2008.73,1213.05 2009.32,1213.05 2009.9,1213.05 2010.49,1213.05 2011.07,1213.05 2011.66,1213.05 2012.25,1213.05 2012.83,1213.05 2013.42,1213.05 2014.01,1213.05 2014.59,1213.05 2015.18,1213.05 2015.77,1213.05 2016.35,1213.05 2016.94,1213.05 2017.53,1213.05 2018.11,1213.05 2018.7,1213.05 2019.28,1213.05 2019.87,1213.05 2020.46,1213.05 2021.04,1213.05 2021.63,1213.05 2022.22,1213.05 2022.8,1213.05 2023.39,1213.05 2023.98,1213.05 2024.56,1213.05 2025.15,1213.05 2025.73,1213.05 2026.32,1213.05 2026.91,1213.05 2027.49,1213.05 2028.08,1213.05 2028.67,1213.05 2029.25,1213.05 2029.84,1213.05 2030.43,1213.05 2031.01,1213.05 2031.6,1213.05 2032.19,1213.05 2032.77,1213.05 2033.36,1213.05 2033.94,1213.05 2034.53,1213.05 2035.12,1213.05 2035.7,1213.05 2036.29,1213.05 2036.88,1213.05 2037.46,1213.05 2038.05,1213.05 2038.64,1213.05 2039.22,1213.05 2039.81,1213.05 2040.4,1213.05 2040.98,1213.05 2041.57,1213.05 2042.15,1213.05 2042.74,1213.05 2043.33,1213.05 2043.91,1213.05 2044.5,1213.05 2045.09,1213.05 2045.67,1213.05 2046.26,1213.05 2046.85,1213.05 2047.43,1213.05 2048.02,1213.05 2048.6,1213.05 2049.19,1213.05 2049.78,1213.05 2050.36,1213.05 2050.95,1213.05 2051.54,1213.05 2052.12,1213.05 2052.71,1213.05 2053.3,1213.05 2053.88,1213.05 2054.47,1213.05 2055.06,1213.05 2055.64,1213.05 2056.23,1213.05 2056.81,1213.05 2057.4,1213.05 2057.99,1213.05 2058.57,1213.05 2059.16,1213.05 2059.75,1213.05 2060.33,1213.05 2060.92,1213.05 2061.51,1213.05 2062.09,1213.05 2062.68,1213.05 2063.27,1213.05 2063.85,1213.05 2064.44,1213.05 2065.02,1213.05 2065.61,1213.05 2066.2,1213.05 2066.78,1213.05 2067.37,1213.05 2067.96,1213.05 2068.54,1213.05 2069.13,1213.05 2069.72,1213.05 2070.3,1213.05 2070.89,1213.05 2071.48,1213.05 2072.06,1213.05 2072.65,1213.05 2073.23,1213.05 2073.82,1213.05 2074.41,1213.05 2074.99,1213.05 2075.58,1213.05 2076.17,1213.05 2076.75,1213.05 2077.34,1213.05 2077.93,1213.05 2078.51,1213.05 2079.1,1213.05 2079.68,1213.05 2080.27,1213.05 2080.86,1213.05 2081.44,1213.05 2082.03,1213.05 2082.62,1213.05 2083.2,1213.05 2083.79,1213.05 2084.38,1213.05 2084.96,1213.05 2085.55,1213.05 2086.14,1213.05 2086.72,1213.05 2087.31,1213.05 2087.89,1213.05 2088.48,1213.05 2089.07,1213.05 2089.65,1213.05 2090.24,1213.05 2090.83,1213.05 2091.41,1213.05 2092,1213.05 2092.59,1213.05 2093.17,1213.05 2093.76,1213.05 2094.35,1213.05 2094.93,1213.05 2095.52,1213.05 2096.1,1213.05 2096.69,1213.05 2097.28,1213.05 2097.86,1213.05 2098.45,1213.05 2099.04,1213.05 2099.62,1213.05 2100.21,1213.05 2100.8,1213.05 2101.38,1213.05 2101.97,1213.05 2102.55,1213.05 2103.14,1213.05 2103.73,1213.05 2104.31,1213.05 2104.9,1213.05 2105.49,1213.05 2106.07,1213.05 2106.66,1213.05 2107.25,1213.05 2107.83,1213.05 2108.42,1213.05 2109.01,1213.05 2109.59,1213.05 2110.18,1213.05 2110.76,1213.05 2111.35,1213.05 2111.94,1213.05 2112.52,1213.05 2113.11,1213.05 2113.7,1213.05 2114.28,1213.05 2114.87,1213.05 2115.46,1213.05 2116.04,1213.05 2116.63,1213.05 2117.22,1213.05 2117.8,1213.05 2118.39,1213.05 2118.97,1213.05 2119.56,1213.05 2120.15,1213.05 2120.73,1213.05 2121.32,1213.05 2121.91,1213.05 2122.49,1213.05 2123.08,1213.05 2123.67,1213.05 2124.25,1213.05 2124.84,1213.05 2125.42,1213.05 2126.01,1213.05 2126.6,1213.05 2127.18,1213.05 2127.77,1213.05 2128.36,1213.05 2128.94,1213.05 2129.53,1213.05 2130.12,1213.05 2130.7,1213.05 2131.29,1213.05 2131.88,1213.05 2132.46,1213.05 2133.05,1213.05 2133.63,1213.05 2134.22,1213.05 2134.81,1213.05 2135.39,1213.05 2135.98,1213.05 2136.57,1213.05 2137.15,1213.05 2137.74,1213.05 2138.33,1213.05 2138.91,1213.05 2139.5,1213.05 2140.09,1213.05 2140.67,1213.05 2141.26,1213.05 2141.84,1213.05 2142.43,1213.05 2143.02,1213.05 2143.6,1213.05 2144.19,1213.05 2144.78,1213.05 2145.36,1213.05 2145.95,1213.05 2146.54,1213.05 2147.12,1213.05 2147.71,1213.05 2148.3,1213.05 2148.88,1213.05 2149.47,1213.05 2150.05,1213.05 2150.64,1213.05 2151.23,1213.05 2151.81,1213.05 2152.4,1213.05 2152.99,1213.05 2153.57,1213.05 2154.16,1213.05 2154.75,1213.05 2155.33,1213.05 2155.92,1213.05 2156.5,1213.05 2157.09,1213.05 2157.68,1213.05 2158.26,1213.05 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1563.67,1197.97 1399.18,899.083 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1227.72 985.439,1197.97 2158.26,1197.97 2158.26,1227.72 985.439,1227.72 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip310)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip310)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip313\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip313)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-11791.5 168.266,-12195.6 168.825,-12550.4 169.384,-12859.3 169.943,-13125.1 170.503,-13350.8 171.062,-13539 171.621,-13692.4 172.18,-13813.2 172.74,-13903.8 173.299,-13410.2 173.858,-13460.5 174.417,-13486.1 174.977,-13488.9 175.536,-13470.5 176.095,-13432.6 176.655,-13013.1 177.214,-12275.3 177.773,-12190.7 178.332,-11810.9 178.892,-11436.3 179.451,-11074.1 180.01,-10714 180.569,-9778.85 181.129,-9645.32 181.688,-9517.9 182.247,-9384.97 182.806,-9246.7 183.366,-8945.21 183.925,-8806.7 184.484,-8527.94 185.043,-8257.64 185.603,-7998.85 186.162,-7631.51 186.721,-7383.43 187.28,-7238.27 187.84,-7097.6 188.399,-6952.3 188.958,-6799.14 189.517,-6487.88 190.077,-6185.53 190.636,-6049.51 191.195,-5838.56 191.754,-5636.18 192.314,-5513.5 192.873,-5324.08 193.432,-5142.67 193.991,-4972.65 194.551,-4863.47 195.11,-4639.53 195.669,-4534.78 196.228,-4381.74 196.788,-4267.42 197.347,-4065.72 197.906,-3923.79 198.465,-3776.3 199.025,-3640.08 199.584,-3461.85 200.143,-3244.81 200.702,-3077.5 201.262,-3000.71 201.821,-2805.84 202.38,-2659.16 202.939,-2553.84 203.499,-2411.98 204.058,-2280.34 204.617,-2115.95 205.176,-2059.62 205.736,-2005.03 206.295,-1884.55 206.854,-1796.91 207.413,-1710.46 207.973,-1564.54 208.532,-1513.78 209.091,-1463.44 209.65,-1328.71 210.21,-1281.39 210.769,-1233.87 211.328,-1130.45 211.887,-1058 212.447,-956.829 213.006,-890.223 213.565,-851.738 214.124,-811.074 214.684,-717.193 215.243,-601.385 215.802,-517.03 216.361,-460.777 216.921,-430.251 217.48,-328.807 218.039,-250.48 218.598,-226.476 219.158,-197.637 219.717,-170.613 220.276,-101.27 220.835,-32.3872 221.395,-8.30198 221.954,36.7282 222.513,100.752 223.072,119.704 223.632,119.618 224.191,142.294 224.75,183.757 225.309,180.78 225.869,219.489 226.428,255.487 226.987,291.129 227.546,327.955 228.106,362.072 228.665,394.915 229.224,408.209 229.783,460.104 230.343,509.315 230.902,518.07 231.461,601.759 232.02,608.306 232.58,653.631 233.139,659.055 233.698,681.523 234.257,685.268 234.817,671.356 235.376,699.067 235.935,704.316 236.494,746.141 237.054,783.466 237.613,822.447 238.172,821.877 238.731,821.205 239.291,894.181 239.85,947.358 240.409,961.769 240.968,954.88 241.528,967.746 242.087,982.372 242.646,997.075 243.205,1013.65 243.765,1026.47 244.324,1071.56 244.883,1080.05 245.442,1159.09 246.002,1165.44 246.561,1148.68 247.12,1151.03 247.679,1156.25 248.239,1177.86 248.798,1181.82 249.357,1185.9 249.916,1175.13 250.476,1160.92 251.035,1146.35 251.594,1132.32 252.153,1137.97 252.713,1128.85 253.272,1171.99 253.831,1124.55 254.39,1133.92 254.95,1123.17 255.509,1111.56 256.068,1135.75 256.627,1105.05 257.187,1112.87 257.746,1117.81 258.305,1122.35 258.864,1161.73 259.424,1167.79 259.983,1102.62 260.542,1110.92 261.101,1103.1 261.661,1078.89 262.22,1055.99 262.779,1086.56 263.338,1085.47 263.898,1063.77 264.457,1057.74 265.016,1067.8 265.575,1112.29 266.135,1123.16 266.694,1098.14 267.253,1071.75 267.812,1077.93 268.372,1087.69 268.931,1099.32 269.49,1140.09 270.049,1111.91 270.609,1155.91 271.168,1128.13 271.727,1154.07 272.286,1128.13 272.846,1135.56 273.405,1140.44 273.964,1133.46 274.523,1125.34 275.083,1167.84 275.642,1173.01 276.201,1194.76 276.76,1183.02 277.32,1189.47 277.879,1160.45 278.438,1196.37 278.997,1165.14 279.557,1154.18 280.116,1179.96 280.675,1188.42 281.234,1173.9 281.794,1175.17 282.353,1181.92 282.912,1187.04 283.471,1204.2 284.031,1205.57 284.59,1177.54 285.149,1183.49 285.708,1187.87 286.268,1178.87 286.827,1181.55 287.386,1201.21 287.945,1206.54 288.505,1208.36 289.064,1213.19 289.623,1212.74 290.182,1214.35 290.742,1233.77 291.301,1233.05 291.86,1234.04 292.419,1219.97 292.979,1170.8 293.538,1153.47 294.097,1138.78 294.656,1123.95 295.216,1132.39 295.775,1089.13 296.334,1098.02 296.893,1088.42 297.453,1101.79 298.012,1092.66 298.571,1082.17 299.13,1105.3 299.69,1096.3 300.249,1086.09 300.808,1078.37 301.368,1068.44 301.927,1058.58 302.486,1032.56 303.045,1042.98 303.605,1002.72 304.164,981.019 304.723,961.652 305.282,909.632 305.842,957.815 306.401,953.275 306.96,966.107 307.519,961.284 308.079,957.381 308.638,973.771 309.197,950.78 309.756,979.483 310.316,975.916 310.875,955.009 311.434,966.342 311.993,948.009 312.553,913.342 313.112,894.875 313.671,910.612 314.23,942.94 314.79,912.089 315.349,912.932 315.908,909.946 316.467,927.574 317.027,976.747 317.586,909.64 318.145,942.881 318.704,956.911 319.264,936.621 319.823,916.293 320.382,927.721 320.941,908.551 321.501,920.642 322.06,936.643 322.619,934.325 323.178,934.148 323.738,932.103 324.297,950.701 324.856,949.146 325.415,928.898 325.975,910.77 326.534,895.531 327.093,922.075 327.652,921.73 328.212,904.369 328.771,934.194 329.33,933.608 329.889,963.816 330.449,1008.59 331.008,1064.22 331.567,1054.19 332.126,1059.64 332.686,1084.57 333.245,1057.43 333.804,1032.78 334.363,1058.38 334.923,1032.71 335.482,1058.32 336.041,1030.87 336.6,1037.36 337.16,1029.33 337.719,1041.6 338.278,1046.99 338.837,1020.38 339.397,1044.32 339.956,1002.33 340.515,993.361 341.074,1023.29 341.634,1017.5 342.193,1038.55 342.752,1028.45 343.311,1037.75 343.871,1061.88 344.43,1048.71 344.989,1039.73 345.548,1046.93 346.108,1070.34 346.667,1074.61 347.226,1076.28 347.785,1080.86 348.345,1036.24 348.904,1060.64 349.463,1081.03 350.022,1054.77 350.582,1043.57 351.141,1032.45 351.7,1042.78 352.259,982.57 352.819,991.089 353.378,983.928 353.937,959.067 354.496,915.917 355.056,906.845 355.615,901.238 356.174,882.611 356.733,881.148 357.293,894.291 357.852,892.923 358.411,887.181 358.97,866.293 359.53,846.989 360.089,828.365 360.648,843.039 361.207,844.807 361.767,859.422 362.326,860.037 362.885,858.038 363.444,875.205 364.004,837.529 364.563,820.577 365.122,806.994 365.681,825.978 366.241,845.133 366.8,856.597 367.359,872.395 367.918,885.274 368.478,884.882 369.037,869.46 369.596,884.601 370.155,881.027 370.715,897.106 371.274,877.096 371.833,892.077 372.392,917.623 372.952,878.915 373.511,874.487 374.07,885.013 374.629,899.469 375.189,896.337 375.748,878.937 376.307,858.855 376.866,854.07 377.426,833.744 377.985,833.201 378.544,816.356 379.103,833.798 379.663,815.538 380.222,816.049 380.781,832.113 381.34,800.318 381.9,815.457 382.459,784.228 383.018,817.954 383.577,831.454 384.137,830.325 384.696,828.462 385.255,806.89 385.814,789.295 386.374,809.538 386.933,826.672 387.492,842.175 388.051,858.089 388.611,857.342 389.17,837.476 389.729,836.906 390.288,834.921 390.848,846.313 391.407,840.928 391.966,869.711 392.525,882.941 393.085,876.296 393.644,836.839 394.203,802.247 394.762,803.776 395.322,819.627 395.881,852.403 396.44,848.441 396.999,860.676 397.559,885.912 398.118,864.462 398.677,828.045 399.236,822.832 399.796,787.425 400.355,787.717 400.914,787.017 401.473,803.71 402.033,800.973 402.592,815.725 403.151,881.331 403.71,877.66 404.27,871.456 404.829,851.926 405.388,849.175 405.947,861.082 406.507,852.859 407.066,846.41 407.625,841.636 408.184,835.976 408.744,832.434 409.303,831.82 409.862,795.217 410.421,793.28 410.981,789.681 411.54,772.176 412.099,769.895 412.658,750.955 413.218,734.088 413.777,737.039 414.336,740.088 414.895,740.706 415.455,761.626 416.014,814.033 416.573,799.509 417.132,799.246 417.692,795.98 418.251,793.221 418.81,789.98 419.369,791.512 419.929,791.288 420.488,774.253 421.047,790.732 421.606,822.152 422.166,834.932 422.725,848.637 423.284,845.314 423.843,827.387 424.403,824.588 424.962,821.314 425.521,835.144 426.08,813.938 426.64,763.353 427.199,761.663 427.758,777.31 428.318,788.288 428.877,785.221 429.436,763.14 429.995,761.615 430.555,776.368 431.114,776.295 431.673,775.53 432.232,777.079 432.792,825.405 433.351,836.709 433.91,865.999 434.469,847.069 435.029,813.453 435.588,860.48 436.147,808.802 436.706,792.077 437.266,788.81 437.825,801.765 438.384,750.084 438.943,766.868 439.503,764.844 440.062,781.002 440.621,767.278 441.18,750.454 441.74,735.336 442.299,735.543 442.858,706.492 443.417,724.803 443.977,709.832 444.536,744.431 445.095,744.927 445.654,760.317 446.214,792.554 446.773,775.675 447.332,777.087 447.891,773.725 448.451,755.153 449.01,770.33 449.569,788.161 450.128,818.578 450.688,830.498 451.247,794.816 451.806,760.54 452.365,775.374 452.925,755.837 453.484,760.052 454.043,762.382 454.602,762.134 455.162,746.533 455.721,728.801 456.28,745.484 456.839,745.976 457.399,746.164 457.958,747.909 458.517,747.017 459.076,744.866 459.636,742.797 460.195,794.463 460.754,774.619 461.313,773.088 461.873,768.433 462.432,764.375 462.991,781.227 463.55,801.161 464.11,799.417 464.669,798.701 465.228,745.075 465.787,747.732 466.347,745.553 466.906,761.554 467.465,709.714 468.024,713.258 468.584,765.5 469.143,765.947 469.702,764.938 470.261,764.136 470.821,749.725 471.38,750.583 471.939,766.904 472.498,812.482 473.058,823.799 473.617,818.235 474.176,815.243 474.735,780.009 475.295,744.934 475.854,743.404 476.413,728.587 476.972,729.458 477.532,745.903 478.091,728.426 478.65,775.658 479.209,757.662 479.769,758.633 480.328,758.412 480.887,791.029 481.446,833.629 482.006,814.897 482.565,826.518 483.124,803.503 483.683,785.684 484.243,815.961 484.802,795.661 485.361,827.159 485.92,823.806 486.48,804.581 487.039,850.271 487.598,890.014 488.157,879.768 488.717,857.582 489.276,835.395 489.835,864.995 490.394,807.214 490.954,805.157 491.513,782.53 492.072,783.274 492.631,798.756 493.191,796.85 493.75,747.293 494.309,727.671 494.868,744.141 495.428,745.085 495.987,713.478 496.546,727.71 497.105,711.214 497.665,695.958 498.224,698.759 498.783,704.736 499.342,690.943 499.902,707.642 500.461,707.99 501.02,708.033 501.579,721.899 502.139,710.903 502.698,731.241 503.257,733.569 503.816,747.065 504.376,729.945 504.935,727.882 505.494,726.109 506.053,742.701 506.613,756.926 507.172,751.218 507.731,733.987 508.29,701.401 508.85,672.068 509.409,689.959 509.968,676.106 510.527,697.461 511.087,679.641 511.646,733.873 512.205,734.633 512.764,717.061 513.324,702.698 513.883,718.886 514.442,736.305 515.001,767.03 515.561,766.651 516.12,842.48 516.679,837.054 517.238,831.066 517.798,796.156 518.357,761.082 518.916,762.86 519.475,731.493 520.035,731.635 520.594,745.109 521.153,744.025 521.712,744.805 522.272,712.504 522.831,714.209 523.39,730.253 523.949,714.498 524.509,700.439 525.068,684.715 525.627,689.39 526.186,675.616 526.746,680.574 527.305,682.427 527.864,685.702 528.423,684.688 528.983,703.721 529.542,720.05 530.101,707.354 530.66,687.019 531.22,706.453 531.779,724.009 532.338,724.547 532.897,691.294 533.457,724.404 534.016,724.646 534.575,754.973 535.134,773.261 535.694,805.183 536.253,831.938 536.812,827.865 537.371,825.511 537.931,820.363 538.49,817.794 539.049,829.689 539.608,804.853 540.168,799.481 540.727,828.419 541.286,839.253 541.845,864.604 542.405,845.039 542.964,820.459 543.523,849.344 544.082,857.626 544.642,868.283 545.201,846.597 545.76,840.161 546.319,831.715 546.879,813.216 547.438,806.7 547.997,802.3 548.556,817.109 549.116,828.111 549.675,825.264 550.234,817.447 550.793,843.633 551.353,838.338 551.912,814.447 552.471,794.174 553.031,741.305 553.59,757.244 554.149,756.525 554.708,734.745 555.268,696.891 555.827,716.994 556.386,716.34 556.945,748.283 557.505,762.852 558.064,794.363 558.623,791.576 559.182,805.415 559.742,800.244 560.301,796.215 560.86,776.565 561.419,775.817 561.979,774.46 562.538,740.618 563.097,771.774 563.656,765.342 564.216,745.191 564.775,728.085 565.334,744.383 565.893,740.534 566.453,771.189 567.012,827.928 567.571,855.251 568.13,894.071 568.69,882.8 569.249,841.283 569.808,835.754 570.367,843.861 570.927,838.535 571.486,830.261 572.045,805.217 572.604,795.047 573.164,793.026 573.723,805.663 574.282,799.729 574.841,813.029 575.401,810.409 575.96,807.328 576.519,784.551 577.078,745.361 577.638,740.891 578.197,742.102 578.756,744.532 579.315,678.191 579.875,695.51 580.434,665.584 580.993,666.777 581.552,686.202 582.112,706.574 582.671,722.309 583.23,738.727 583.789,721.02 584.349,669.867 584.908,652.31 585.467,672.27 586.026,671.545 586.586,680.404 587.145,667.79 587.704,699.63 588.263,715.51 588.823,713.224 589.382,695.134 589.941,663.401 590.5,713.431 591.06,632.669 591.619,619.262 592.178,607.791 592.737,632.115 593.297,620.317 593.856,622.709 594.415,629.196 594.974,647.941 595.534,619.115 596.093,606.484 596.652,579.841 597.211,571.529 597.771,612.48 598.33,616.606 598.889,604.24 599.448,607.13 600.008,631.724 600.567,639.784 601.126,630.633 601.685,617.487 602.245,638.802 602.804,659.401 603.363,661.211 603.922,663.837 604.482,701.142 605.041,703.015 605.6,701.587 606.159,717.358 606.719,669.941 607.278,655.784 607.837,687.863 608.396,708.337 608.956,658.35 609.515,678.79 610.074,696.173 610.633,693.496 611.193,709.835 611.752,727.427 612.311,727.583 612.87,692.769 613.43,643.5 613.989,599.081 614.548,606.889 615.107,626.869 615.667,646.523 616.226,682.052 616.785,714.495 617.344,715.794 617.904,761.891 618.463,746.674 619.022,745.237 619.581,757.819 620.141,757.156 620.7,757.153 621.259,755.439 621.818,767.79 622.378,743.413 622.937,759.363 623.496,742.312 624.055,690.487 624.615,645.219 625.174,667.302 625.733,654.16 626.292,625.217 626.852,630.977 627.411,620.196 627.97,624.99 628.529,645.008 629.089,632.467 629.648,668.784 630.207,684.544 630.766,650.849 631.326,685.015 631.885,683.508 632.444,669.366 633.003,668.722 633.563,653.035 634.122,637.939 634.681,627.313 635.24,631.154 635.8,617.626 636.359,621.874 636.918,644.5 637.477,646.661 638.037,664.625 638.596,682.632 639.155,668.922 639.714,671.119 640.274,689.765 640.833,692.248 641.392,693.008 641.951,711.666 642.511,676.822 643.07,658.446 643.629,613.662 644.188,620.243 644.748,589.29 645.307,613.879 645.866,648.861 646.425,648.64 646.985,652.554 647.544,669.991 648.103,687.984 648.662,672.72 649.222,654.943 649.781,655.361 650.34,641.007 650.899,640.84 651.459,643.185 652.018,648.933 652.577,655.048 653.136,658.555 653.696,677.646 654.255,699.322 654.814,687.952 655.373,724.456 655.933,742.121 656.492,737.22 657.051,736.712 657.61,684.707 658.17,703.838 658.729,705.656 659.288,688.862 659.847,672.717 660.407,640.667 660.966,660.856 661.525,633.597 662.084,637.097 662.644,629.031 663.203,599.67 663.762,639.106 664.321,561.412 664.881,550.707 665.44,574.511 665.999,615.292 666.558,634.638 667.118,685.2 667.677,687.141 668.236,673.282 668.795,661.157 669.355,663.305 669.914,635.084 670.473,687.367 671.032,675.862 671.592,693.418 672.151,648.485 672.71,636.317 673.269,639.413 673.829,674.745 674.388,677.259 674.947,678.366 675.506,679.89 676.066,699.138 676.625,699.863 677.184,696.237 677.743,677.702 678.303,711.644 678.862,777.406 679.421,791.359 679.981,790.944 680.54,785.186 681.099,799.25 681.658,741.619 682.218,712.212 682.777,727.912 683.336,725.578 683.895,706.203 684.455,704.486 685.014,735.986 685.573,753.154 686.132,766.456 686.692,746.79 687.251,724.655 687.81,769.06 688.369,748.138 688.929,745.522 689.488,772.608 690.047,784.059 690.606,796.251 691.166,774.096 691.725,754.28 692.284,732.264 692.843,747.572 693.403,709.873 693.962,708.038 694.521,726.654 695.08,712.62 695.64,726.276 696.199,754.971 696.758,738.463 697.317,721.534 697.877,719.545 698.436,732.505 698.995,748.025 699.554,746.082 700.114,728.162 700.673,709.58 701.232,690.353 701.791,675.709 702.351,679.709 702.91,731.839 703.469,710.522 704.028,741.77 704.588,726.621 705.147,741.67 705.706,752.297 706.265,746.875 706.825,757.81 707.384,769.75 707.943,748.898 708.502,743.607 709.062,692.852 709.621,723.728 710.18,722.2 710.739,719.428 711.299,719.662 711.858,716.423 712.417,713.559 712.976,710.928 713.536,756.729 714.095,737.865 714.654,736.021 715.213,752.464 715.773,732.569 716.332,727.077 716.891,758.365 717.45,755.303 718.01,768.291 718.569,776.603 719.128,757.527 719.687,783.956 720.247,793.392 720.806,803.236 721.365,811.448 721.924,758.226 722.484,765.858 723.043,794.66 723.602,788.776 724.161,786.876 724.721,797.827 725.28,760.88 725.839,774.07 726.398,767.136 726.958,795.427 727.517,787.695 728.076,767.192 728.635,760.187 729.195,723.898 729.754,735.016 730.313,697.786 730.872,698.154 731.432,664.725 731.991,684.96 732.55,716.523 733.109,732.116 733.669,713.514 734.228,714.197 734.787,712.564 735.346,761.114 735.906,739.946 736.465,751.48 737.024,762.34 737.583,772.711 738.143,769.325 738.702,763.454 739.261,743.956 739.82,710.373 740.38,706.693 740.939,724.047 741.498,706.021 742.057,723.14 742.617,719.738 743.176,668.221 743.735,665.698 744.294,667.118 744.854,670.331 745.413,705.374 745.972,674.316 746.531,659.282 747.091,660.116 747.65,643.98 748.209,695.413 748.768,711.565 749.328,693.432 749.887,675.393 750.446,673.365 751.005,674.896 751.565,642.811 752.124,643.07 752.683,647.127 753.242,664.954 753.802,665.154 754.361,632.274 754.92,634.257 755.479,623.771 756.039,609.61 756.598,598.554 757.157,589.403 757.716,580.997 758.276,601.916 758.835,623.74 759.394,609.155 759.953,613.021 760.513,601.433 761.072,605.484 761.631,657.463 762.19,641.414 762.75,594.442 763.309,615.693 763.868,621.47 764.427,627.641 764.987,597.27 765.546,568.434 766.105,581.308 766.664,570.418 767.224,592.094 767.783,581.689 768.342,570.22 768.901,579.431 769.461,572.834 770.02,577.113 770.579,615.2 771.138,634.509 771.698,654.182 772.257,641.231 772.816,645.449 773.375,664.644 773.935,664.553 774.494,653.82 775.053,656.352 775.612,658.703 776.172,643.412 776.731,661.799 777.29,693.83 777.849,712.29 778.409,695.589 778.968,692.235 779.527,692.669 780.086,725.261 780.646,739.198 781.205,736.793 781.764,732.325 782.323,747.022 782.883,746.965 783.442,758.851 784.001,775.256 784.56,754.303 785.12,701.463 785.679,748.538 786.238,729.174 786.797,725.655 787.357,738.4 787.916,765.678 788.475,779.169 789.034,792.22 789.594,772.194 790.153,767.889 790.712,765.775 791.271,731.042 791.831,763.432 792.39,760.269 792.949,773.468 793.508,720.204 794.068,737.273 794.627,701.499 795.186,751.32 795.745,713.001 796.305,759.23 796.864,774.283 797.423,783.784 797.982,793.076 798.542,798.846 799.101,778.202 799.66,775.654 800.219,720.738 800.779,720.77 801.338,715.783 801.897,694.804 802.456,699.047 803.016,665.088 803.575,650.788 804.134,634.448 804.693,620.56 805.253,638.243 805.812,660.53 806.371,649.577 806.931,684.675 807.49,715.171 808.049,731.77 808.608,729.533 809.168,747.456 809.727,746.997 810.286,726.701 810.845,658.788 811.405,644.026 811.964,630.99 812.523,650.129 813.082,667.92 813.642,668.577 814.201,685.778 814.76,707.755 815.319,741.592 815.879,738.458 816.438,685.363 816.997,681.868 817.556,715.107 818.116,728.914 818.675,741.065 819.234,755.223 819.793,718.818 820.353,700.666 820.912,749.805 821.471,731.595 822.03,711.131 822.59,697.283 823.149,633.061 823.708,634.396 824.267,621.38 824.827,672.945 825.386,687.327 825.945,718.543 826.504,718.828 827.064,715.965 827.623,699.553 828.182,665.632 828.741,666.519 829.301,664.469 829.86,682.205 830.419,663.579 830.978,663.401 831.538,695.563 832.097,676.62 832.656,694.271 833.215,714.191 833.775,777.492 834.334,774.977 834.893,753.466 835.452,768.412 836.012,780.136 836.571,807.612 837.13,798.742 837.689,761.14 838.249,744.959 838.808,713.93 839.367,712.979 839.926,710.599 840.486,725.318 841.045,723.065 841.604,723.679 842.163,712.174 842.723,695.632 843.282,694.97 843.841,726.298 844.4,754.869 844.96,751.68 845.519,808.364 846.078,769.794 846.637,762.707 847.197,681.638 847.756,667.334 848.315,668.112 848.874,672.396 849.434,641.666 849.993,689.972 850.552,621.47 851.111,606.636 851.671,630.65 852.23,618.813 852.789,608.065 853.348,613.455 853.908,631.715 854.467,649.664 855.026,649.021 855.585,668.964 856.145,640.998 856.704,612.724 857.263,618.33 857.822,604.62 858.382,608.817 858.941,612.754 859.5,584.752 860.059,607.949 860.619,615.755 861.178,601.061 861.737,607.198 862.296,628.726 862.856,631.662 863.415,634.733 863.974,622.089 864.533,594.179 865.093,603.607 865.652,672.198 866.211,626.847 866.77,629.205 867.33,631.232 867.889,669.283 868.448,625.538 869.007,593.784 869.567,594.744 870.126,631.006 870.685,632.23 871.244,620.987 871.804,626.063 872.363,614.676 872.922,637.305 873.481,639.277 874.041,592.308 874.6,567.59 875.159,560.55 875.718,551.278 876.278,559.815 876.837,582.052 877.396,635.915 877.955,656.862 878.515,673.268 879.074,691.325 879.633,692.971 880.192,697.237 880.752,697.668 881.311,696.922 881.87,729.054 882.429,727.726 882.989,726.804 883.548,755.679 884.107,734.48 884.666,765.04 885.226,762.663 885.785,763.194 886.344,777.911 886.903,773.999 887.463,782.636 888.022,795.916 888.581,807.193 889.14,784.75 889.7,778.393 890.259,742.43 890.818,757.422 891.377,758.047 891.937,752.555 892.496,764.414 893.055,792.686 893.614,788.32 894.174,783.016 894.733,762.064 895.292,791.616 895.851,769.364 896.411,764.293 896.97,792.907 897.529,754.88 898.088,703.994 898.648,651.69 899.207,653.309 899.766,671.801 900.325,670.021 900.885,621.605 901.444,608.396 902.003,629.043 902.562,665.573 903.122,636.171 903.681,636.765 904.24,638.747 904.799,641.431 905.359,626.246 905.918,643.397 906.477,647.209 907.036,633.288 907.596,653.707 908.155,670.576 908.714,672.159 909.273,671.625 909.833,640.395 910.392,656.977 910.951,623.891 911.51,630.841 912.07,644.009 912.629,692.262 913.188,677.38 913.747,683.064 914.307,685.663 914.866,704.821 915.425,654.398 915.984,657.524 916.544,658.982 917.103,692.427 917.662,676.949 918.221,677.886 918.781,663.022 919.34,649.854 919.899,649.965 920.458,647.382 921.018,648.075 921.577,652.761 922.136,633.605 922.695,639.441 923.255,656.099 923.814,659.006 924.373,595.995 924.932,618.189 925.492,602.525 926.051,624.046 926.61,660.212 927.169,643.125 927.729,643.734 928.288,627.564 928.847,649.223 929.406,616.09 929.966,652.351 930.525,621.407 931.084,625.407 931.644,629.503 932.203,633.606 932.762,681.706 933.321,647.177 933.881,664.467 934.44,663.211 934.999,676.891 935.558,711.202 936.118,743.126 936.677,719.551 937.236,735.602 937.795,750.26 938.355,760.841 938.914,771.17 939.473,831.555 940.032,793.096 940.592,751.614 941.151,732.635 941.71,713.327 942.269,712.139 942.829,695.476 943.388,714.019 943.947,728.99 944.506,741.15 945.066,719.143 945.625,720.45 946.184,714.786 946.743,728.736 947.303,692.097 947.862,692.036 948.421,674.402 948.98,657.785 949.54,646.264 950.099,631.74 950.658,635.545 951.217,610.357 951.777,614.022 952.336,633.171 952.895,634.844 953.454,639.739 954.014,657.648 954.573,674.401 955.132,647.134 955.691,631.6 956.251,636.788 956.81,659.577 957.369,631.883 957.928,638.794 958.488,638.272 959.047,640.985 959.606,642.042 960.165,653.415 960.725,651.547 961.284,685.823 961.843,684.549 962.402,668.424 962.962,637.647 963.521,657.673 964.08,676.758 964.639,710.868 965.199,692.963 965.758,660.771 966.317,630.136 966.876,633.733 967.436,672.359 967.995,658.528 968.554,708.589 969.113,707.973 969.673,705.494 970.232,687.934 970.791,686.22 971.35,688.211 971.91,732.677 972.469,698.22 973.028,711.752 973.587,724.491 974.147,704.7 974.706,672.49 975.265,656.89 975.824,658.744 976.384,626.088 976.943,610.887 977.502,617.356 978.061,607.831 978.621,629.412 979.18,636.014 979.739,638.302 980.298,642.311 980.858,651.044 981.417,655.836 981.976,661.097 982.535,694.948 983.095,676.99 983.654,711.572 984.213,744.077 984.772,693.487 985.332,690.326 985.891,757.312 986.45,756.787 987.009,739.897 987.569,723.699 988.128,721.215 988.687,734.852 989.246,734.231 989.806,732.178 990.365,747.936 990.924,727.63 991.483,742.188 992.043,771.897 992.602,814.148 993.161,808.729 993.72,754.83 994.28,720.264 994.839,735.432 995.398,733.251 995.957,735.393 996.517,720.463 997.076,720.985 997.635,721.525 998.194,720.192 998.754,687.859 999.313,717.095 999.872,734.456 1000.43,729.306 1000.99,741.828 1001.55,723.721 1002.11,707.128 1002.67,719.49 1003.23,715.867 1003.79,714.951 1004.35,727.472 1004.91,708.317 1005.46,725.205 1006.02,706.546 1006.58,688.793 1007.14,704.615 1007.7,703.466 1008.26,685.211 1008.82,720.444 1009.38,782.737 1009.94,793.612 1010.5,802.787 1011.06,796.752 1011.62,789.881 1012.18,801.966 1012.73,808.936 1013.29,816.636 1013.85,808.161 1014.41,780.989 1014.97,760.958 1015.53,772.966 1016.09,748.852 1016.65,775.517 1017.21,739.344 1017.77,765.742 1018.33,795.835 1018.89,743.878 1019.45,753.322 1020.01,764.768 1020.56,775.12 1021.12,801.583 1021.68,809.958 1022.24,818.713 1022.8,798.097 1023.36,742.305 1023.92,721.8 1024.48,703.053 1025.04,700.73 1025.6,715.803 1026.16,712.315 1026.72,687.251 1027.28,735.987 1027.83,747.571 1028.39,725.62 1028.95,722.971 1029.51,716.112 1030.07,729.623 1030.63,726.741 1031.19,708.227 1031.75,740.415 1032.31,720.823 1032.87,703.795 1033.43,669.644 1033.99,667.014 1034.55,636.307 1035.1,643.459 1035.66,658.926 1036.22,645.212 1036.78,662.222 1037.34,666.359 1037.9,682.216 1038.46,678.583 1039.02,633.153 1039.58,653.653 1040.14,658.177 1040.7,657.265 1041.26,639.315 1041.82,658.911 1042.38,661.356 1042.93,661.181 1043.49,628.723 1044.05,614.203 1044.61,617.796 1045.17,657.269 1045.73,615.318 1046.29,632.605 1046.85,601.747 1047.41,572.352 1047.97,563.405 1048.53,567.838 1049.09,574.341 1049.65,547.769 1050.2,558.513 1050.76,596.965 1051.32,605.592 1051.88,626.44 1052.44,612.321 1053,616.609 1053.56,633.146 1054.12,603.237 1054.68,626.621 1055.24,629.046 1055.8,648.686 1056.36,638.076 1056.92,657.34 1057.48,626.544 1058.03,629.681 1058.59,601.707 1059.15,588.67 1059.71,594.407 1060.27,617.406 1060.83,622.204 1061.39,676.103 1061.95,690.869 1062.51,722.117 1063.07,736.107 1063.63,737.022 1064.19,738.943 1064.75,718.661 1065.3,713.874 1065.86,726.703 1066.42,724.292 1066.98,724.076 1067.54,671.735 1068.1,685.142 1068.66,717.935 1069.22,713.822 1069.78,742.029 1070.34,755.92 1070.9,733.665 1071.46,713.343 1072.02,739.68 1072.57,767.48 1073.13,762.162 1073.69,771.404 1074.25,702.157 1074.81,703.002 1075.37,719.252 1075.93,721.025 1076.49,687.221 1077.05,671.827 1077.61,672.237 1078.17,703.442 1078.73,689.878 1079.29,719.388 1079.85,699.449 1080.4,715.239 1080.96,713.147 1081.52,695.313 1082.08,696.999 1082.64,660.612 1083.2,672.919 1083.76,659.334 1084.32,674.121 1084.88,674.095 1085.44,688.661 1086,705.895 1086.56,702.068 1087.12,669.032 1087.67,669.452 1088.23,684.706 1088.79,718.9 1089.35,727.158 1089.91,721.731 1090.47,701.258 1091.03,701.01 1091.59,670.204 1092.15,687.1 1092.71,653.68 1093.27,655.716 1093.83,641.429 1094.39,609.925 1094.94,630.568 1095.5,650.23 1096.06,639.033 1096.62,624.946 1097.18,593.624 1097.74,595.057 1098.3,612.311 1098.86,634.165 1099.42,635.282 1099.98,622.949 1100.54,640.046 1101.1,638.972 1101.66,656.596 1102.22,657.817 1102.77,672.402 1103.33,670.413 1103.89,640.668 1104.45,642.692 1105.01,644.272 1105.57,611.659 1106.13,594.961 1106.69,612.783 1107.25,616.644 1107.81,640.27 1108.37,626.114 1108.93,646.73 1109.49,634.803 1110.04,622.229 1110.6,591.928 1111.16,629.77 1111.72,617.851 1112.28,620.449 1112.84,646.182 1113.4,649.295 1113.96,654.688 1114.52,655.241 1115.08,655.593 1115.64,654.508 1116.2,670.794 1116.76,685.576 1117.31,655.672 1117.87,661.037 1118.43,661.771 1118.99,661.958 1119.55,694.498 1120.11,728.659 1120.67,709.508 1121.23,708.382 1121.79,739.935 1122.35,734.657 1122.91,731.612 1123.47,764.752 1124.03,777.134 1124.59,804.794 1125.14,787.674 1125.7,732.877 1126.26,748.763 1126.82,746.051 1127.38,773.767 1127.94,785.891 1128.5,746.502 1129.06,755.262 1129.62,753.578 1130.18,748.156 1130.74,730.082 1131.3,759.186 1131.86,754.424 1132.41,753.575 1132.97,750.434 1133.53,733.284 1134.09,710.416 1134.65,644.366 1135.21,628.604 1135.77,664.746 1136.33,665.832 1136.89,683.345 1137.45,714.913 1138.01,697.36 1138.57,701.369 1139.13,690.44 1139.68,659.485 1140.24,707.26 1140.8,691.885 1141.36,710.891 1141.92,744.455 1142.48,743.154 1143.04,739.352 1143.6,737.315 1144.16,782.731 1144.72,781.889 1145.28,843.393 1145.84,836.534 1146.4,856.797 1146.96,864.419 1147.51,839.579 1148.07,811.431 1148.63,807.895 1149.19,770.783 1149.75,782.3 1150.31,775.522 1150.87,736.316 1151.43,737.657 1151.99,767.443 1152.55,744.66 1153.11,723.183 1153.67,705.504 1154.23,738.921 1154.78,737.37 1155.34,748.921 1155.9,744.807 1156.46,713.502 1157.02,713.758 1157.58,711.913 1158.14,725.723 1158.7,691.183 1159.26,673.409 1159.82,658.249 1160.38,692.991 1160.94,658.032 1161.5,671.603 1162.05,674.408 1162.61,673.816 1163.17,684.954 1163.73,648.657 1164.29,616.654 1164.85,620.371 1165.41,638.424 1165.97,658.3 1166.53,662.049 1167.09,666.32 1167.65,680.535 1168.21,637.428 1168.77,642.4 1169.33,629.055 1169.88,614.992 1170.44,617.796 1171,654.308 1171.56,668.759 1172.12,604.4 1172.68,626.485 1173.24,610.953 1173.8,619.192 1174.36,655.996 1174.92,654.572 1175.48,672.388 1176.04,642.785 1176.6,626.228 1177.15,658.694 1177.71,660.951 1178.27,611.972 1178.83,698.99 1179.39,696.222 1179.95,714.643 1180.51,727.807 1181.07,696.366 1181.63,679.577 1182.19,664.603 1182.75,649.157 1183.31,683.012 1183.87,701.037 1184.43,684.062 1184.98,700.241 1185.54,686.108 1186.1,670.654 1186.66,687.293 1187.22,669.972 1187.78,669.905 1188.34,684.883 1188.9,670.639 1189.46,639.172 1190.02,609.805 1190.58,627.916 1191.14,631.304 1191.7,633.22 1192.25,617.068 1192.81,606.35 1193.37,592.18 1193.93,629.735 1194.49,632.145 1195.05,623.273 1195.61,595.623 1196.17,601.483 1196.73,604.853 1197.29,628.108 1197.85,651.603 1198.41,672.127 1198.97,629.445 1199.52,649.798 1200.08,653.087 1200.64,639.188 1201.2,643.402 1201.76,647.801 1202.32,615.899 1202.88,607.23 1203.44,593.136 1204,581.197 1204.56,571.356 1205.12,545.575 1205.68,554.688 1206.24,562.307 1206.8,600.483 1207.35,591.661 1207.91,597.399 1208.47,601.256 1209.03,619.276 1209.59,654.346 1210.15,675.024 1210.71,674.161 1211.27,675.394 1211.83,692.37 1212.39,678.326 1212.95,681.176 1213.51,696.05 1214.07,695.57 1214.62,679.617 1215.18,713.176 1215.74,711.059 1216.3,726.9 1216.86,723.279 1217.42,688.973 1217.98,676.282 1218.54,675.107 1219.1,690.7 1219.66,659.578 1220.22,630.431 1220.78,668.144 1221.34,701.766 1221.89,702.417 1222.45,715.454 1223.01,683.963 1223.57,666.916 1224.13,667.942 1224.69,651.004 1225.25,636.924 1225.81,624.616 1226.37,629.544 1226.93,648.643 1227.49,669.037 1228.05,653.22 1228.61,651.543 1229.17,684.767 1229.72,684.925 1230.28,667.844 1230.84,664.842 1231.4,648.377 1231.96,668.45 1232.52,670.531 1233.08,701.803 1233.64,701.313 1234.2,700.042 1234.76,682.511 1235.32,649.939 1235.88,670.728 1236.44,671.89 1236.99,657.397 1237.55,658.329 1238.11,662.786 1238.67,649.81 1239.23,633.244 1239.79,651.906 1240.35,685.516 1240.91,687.629 1241.47,690.202 1242.03,691.771 1242.59,678.367 1243.15,710.899 1243.71,709.407 1244.26,708.607 1244.82,692.102 1245.38,738.946 1245.94,736.595 1246.5,719.257 1247.06,722.051 1247.62,720.166 1248.18,700.77 1248.74,700.089 1249.3,714.11 1249.86,712.501 1250.42,711.161 1250.98,706.989 1251.54,705.148 1252.09,708.018 1252.65,740.344 1253.21,740.325 1253.77,803.366 1254.33,764.171 1254.89,747.13 1255.45,786.651 1256.01,814.278 1256.57,820.589 1257.13,812.688 1257.69,785.805 1258.25,792.23 1258.81,784.806 1259.36,765.653 1259.92,757.295 1260.48,785.624 1261.04,750.111 1261.6,776.497 1262.16,788.317 1262.72,812.723 1263.28,789.036 1263.84,766.78 1264.4,767.171 1264.96,729.738 1265.52,731.673 1266.08,711.434 1266.63,691.642 1267.19,687.985 1267.75,640.476 1268.31,656.135 1268.87,722.295 1269.43,734.527 1269.99,766.007 1270.55,742.697 1271.11,754.813 1271.67,720.867 1272.23,735.373 1272.79,733.142 1273.35,781.949 1273.91,775.054 1274.46,722.146 1275.02,723.933 1275.58,724.086 1276.14,690.621 1276.7,672.586 1277.26,657.626 1277.82,676.128 1278.38,658.82 1278.94,678.934 1279.5,679.6 1280.06,665.171 1280.62,699.587 1281.18,681.448 1281.73,666.184 1282.29,698.172 1282.85,679.46 1283.41,697.243 1283.97,665.433 1284.53,662.71 1285.09,673.687 1285.65,674.069 1286.21,676.621 1286.77,662.346 1287.33,677.538 1287.89,679.62 1288.45,632.567 1289,650.384 1289.56,649.488 1290.12,649.023 1290.68,649.66 1291.24,664.383 1291.8,679.674 1292.36,663.449 1292.92,650.253 1293.48,701.012 1294.04,718.209 1294.6,718.827 1295.16,735.899 1295.72,697.627 1296.28,697.24 1296.83,697.997 1297.39,697.48 1297.95,679.518 1298.51,646.28 1299.07,647.13 1299.63,598.949 1300.19,618.342 1300.75,616.591 1301.31,638.572 1301.87,639.598 1302.43,638.696 1302.99,622.791 1303.55,615.525 1304.1,619.612 1304.66,594.12 1305.22,580.377 1305.78,569.3 1306.34,557.299 1306.9,562.253 1307.46,586.054 1308.02,605.759 1308.58,595.275 1309.14,601.329 1309.7,586.372 1310.26,623.907 1310.82,609.372 1311.38,631.732 1311.93,662.323 1312.49,645.492 1313.05,647.567 1313.61,667.171 1314.17,653.814 1314.73,685.214 1315.29,701.155 1315.85,700.52 1316.41,700.293 1316.97,699.124 1317.53,714.243 1318.09,696.021 1318.65,709.544 1319.2,727.391 1319.76,689.25 1320.32,749.972 1320.88,778.59 1321.44,755.99 1322,785.528 1322.56,764.521 1323.12,743.367 1323.68,739.769 1324.24,735.021 1324.8,744.575 1325.36,757.492 1325.92,750.585 1326.47,682.416 1327.03,697.58 1327.59,696.744 1328.15,695.314 1328.71,742.703 1329.27,690.88 1329.83,705.941 1330.39,688.183 1330.95,687.148 1331.51,651.893 1332.07,640.151 1332.63,645.689 1333.19,667.701 1333.75,669.46 1334.3,656.245 1334.86,641.737 1335.42,643.608 1335.98,661.821 1336.54,681.449 1337.1,698.178 1337.66,684.102 1338.22,685.067 1338.78,667.37 1339.34,669.275 1339.9,683.889 1340.46,667.457 1341.02,655.236 1341.57,654.7 1342.13,671.739 1342.69,673.207 1343.25,671.766 1343.81,707.598 1344.37,677.708 1344.93,693.623 1345.49,727.208 1346.05,707.927 1346.61,689.396 1347.17,642.787 1347.73,629.058 1348.29,665.801 1348.84,651.731 1349.4,651.751 1349.96,670.651 1350.52,659.403 1351.08,662.768 1351.64,679.932 1352.2,665.852 1352.76,682.159 1353.32,701.601 1353.88,700.028 1354.44,714.197 1355,756.49 1355.56,755.403 1356.12,719.741 1356.67,671.457 1357.23,656.819 1357.79,676.282 1358.35,698.086 1358.91,717.006 1359.47,732.947 1360.03,745.843 1360.59,808.98 1361.15,785.391 1361.71,764.776 1362.27,726.571 1362.83,706.823 1363.39,705.114 1363.94,705.656 1364.5,702.945 1365.06,733.758 1365.62,745.535 1366.18,758.205 1366.74,721.873 1367.3,722.882 1367.86,686.566 1368.42,699.633 1368.98,699.618 1369.54,678.664 1370.1,694.438 1370.66,744.296 1371.21,735.007 1371.77,716.856 1372.33,717.856 1372.89,714.318 1373.45,744.841 1374.01,739.013 1374.57,734.63 1375.13,729.661 1375.69,760.603 1376.25,789.718 1376.81,784.189 1377.37,777.019 1377.93,800.422 1378.49,792.926 1379.04,805.774 1379.6,787.465 1380.16,798.665 1380.72,777.565 1381.28,740.051 1381.84,732.223 1382.4,710.908 1382.96,689.63 1383.52,675.452 1384.08,676.187 1384.64,676.89 1385.2,644.375 1385.76,677.756 1386.31,678.33 1386.87,678.842 1387.43,679.662 1387.99,678.574 1388.55,676.65 1389.11,675.951 1389.67,676.609 1390.23,706.466 1390.79,721.322 1391.35,717.447 1391.91,714.794 1392.47,760.472 1393.03,738.525 1393.58,731.284 1394.14,728.205 1394.7,693.024 1395.26,678.028 1395.82,693.734 1396.38,725.113 1396.94,724.136 1397.5,706.624 1398.06,688.564 1398.62,687.357 1399.18,641.204 1399.74,677.813 1400.3,648.796 1400.86,635.7 1401.41,619.958 1401.97,624.292 1402.53,627.962 1403.09,631.28 1403.65,584.02 1404.21,585.613 1404.77,590.829 1405.33,579.832 1405.89,602.341 1406.45,685.695 1407.01,719.624 1407.57,730.555 1408.13,727.565 1408.68,727.104 1409.24,680.1 1409.8,663.814 1410.36,646.648 1410.92,666.979 1411.48,633.625 1412.04,603.77 1412.6,609 1413.16,598.261 1413.72,602.9 1414.28,622.604 1414.84,643.928 1415.4,647.318 1415.95,613.273 1416.51,600.531 1417.07,604.005 1417.63,608.166 1418.19,627.146 1418.75,661.57 1419.31,646.791 1419.87,648.741 1420.43,632.801 1420.99,635.921 1421.55,620.979 1422.11,607.746 1422.67,628.834 1423.23,629.837 1423.78,632.087 1424.34,632.094 1424.9,650.791 1425.46,667.519 1426.02,653.015 1426.58,657.56 1427.14,675.292 1427.7,690.02 1428.26,687.735 1428.82,656.14 1429.38,656.403 1429.94,659.878 1430.5,676.19 1431.05,678.004 1431.61,697.251 1432.17,696.627 1432.73,663.851 1433.29,649.286 1433.85,590.092 1434.41,609.453 1434.97,595.285 1435.53,581.287 1436.09,570.852 1436.65,579.282 1437.21,602.927 1437.77,573.178 1438.33,576.076 1438.88,581.778 1439.44,572.104 1440,610.214 1440.56,566.971 1441.12,573.291 1441.68,581.208 1442.24,586.056 1442.8,592.369 1443.36,597.819 1443.92,603.793 1444.48,590.784 1445.04,598.024 1445.6,605.426 1446.15,577.518 1446.71,567.698 1447.27,591.44 1447.83,578.801 1448.39,569.088 1448.95,559.123 1449.51,567.31 1450.07,604.619 1450.63,639.621 1451.19,660.766 1451.75,644.951 1452.31,646.702 1452.87,648.252 1453.42,655.636 1453.98,639.067 1454.54,644.371 1455.1,646.961 1455.66,632.894 1456.22,633.786 1456.78,650.648 1457.34,622.29 1457.9,626.918 1458.46,616.973 1459.02,572.656 1459.58,594.128 1460.14,615.274 1460.7,603.318 1461.25,588.555 1461.81,578.478 1462.37,550.741 1462.93,559.206 1463.49,613.981 1464.05,665.713 1464.61,685.594 1465.17,685.208 1465.73,686.79 1466.29,701.432 1466.85,720.136 1467.41,750.795 1467.97,748.995 1468.52,775.992 1469.08,773.784 1469.64,805.316 1470.2,767.775 1470.76,750.717 1471.32,746.269 1471.88,726.642 1472.44,741.91 1473,784.911 1473.56,779.186 1474.12,772.719 1474.68,766.938 1475.24,760.429 1475.79,724.587 1476.35,689.322 1476.91,690.387 1477.47,707.139 1478.03,736.83 1478.59,717.477 1479.15,715.421 1479.71,729.256 1480.27,726.152 1480.83,723.549 1481.39,787.127 1481.95,747.308 1482.51,744.157 1483.07,755.449 1483.62,736.598 1484.18,746.87 1484.74,743.311 1485.3,720.118 1485.86,718.477 1486.42,706.165 1486.98,703.818 1487.54,689.008 1488.1,704.228 1488.66,700.138 1489.22,649.407 1489.78,636.572 1490.34,640.893 1490.89,627.837 1491.45,631.815 1492.01,654.104 1492.57,667.702 1493.13,650.44 1493.69,633.662 1494.25,637.029 1494.81,622.174 1495.37,623.808 1495.93,639.71 1496.49,723.809 1497.05,750.338 1497.61,765.807 1498.16,761.357 1498.72,771.897 1499.28,783.615 1499.84,763.497 1500.4,758.162 1500.96,748.548 1501.52,712.829 1502.08,679.026 1502.64,692.374 1503.2,678.023 1503.76,694.477 1504.32,695.633 1504.88,695.848 1505.44,709.581 1505.99,708.694 1506.55,702.484 1507.11,688.091 1507.67,687.463 1508.23,705.946 1508.79,726.913 1509.35,739.893 1509.91,706.46 1510.47,739.538 1511.03,736.74 1511.59,716.429 1512.15,715.867 1512.71,745.869 1513.26,708.528 1513.82,672.418 1514.38,659.015 1514.94,626.263 1515.5,629.897 1516.06,648.359 1516.62,649.915 1517.18,671.001 1517.74,638.083 1518.3,656.89 1518.86,685.52 1519.42,735.637 1519.98,744.738 1520.53,758.764 1521.09,787.737 1521.65,734.961 1522.21,746.706 1522.77,729.323 1523.33,710.124 1523.89,709.215 1524.45,723.648 1525.01,737.083 1525.57,716.896 1526.13,748.817 1526.69,759.478 1527.25,708.201 1527.81,657.588 1528.36,660.701 1528.92,663.408 1529.48,664.447 1530.04,682.881 1530.6,634.104 1531.16,603.797 1531.72,622.215 1532.28,644.55 1532.84,739.785 1533.4,688.989 1533.96,687.349 1534.52,688.638 1535.08,733.011 1535.63,764.836 1536.19,763.171 1536.75,791.273 1537.31,770.251 1537.87,746.591 1538.43,725.435 1538.99,674.278 1539.55,675.828 1540.11,661.213 1540.67,658.795 1541.23,659.248 1541.79,694.225 1542.35,728.718 1542.9,696.253 1543.46,678.859 1544.02,676.706 1544.58,678.319 1545.14,696.677 1545.7,693.677 1546.26,709.695 1546.82,709.639 1547.38,739.028 1547.94,703.189 1548.5,703.429 1549.06,719.256 1549.62,734.461 1550.18,730.307 1550.73,712.517 1551.29,696.578 1551.85,695.816 1552.41,675.578 1552.97,660.557 1553.53,645.318 1554.09,665.86 1554.65,681.188 1555.21,684.673 1555.77,698.805 1556.33,698.952 1556.89,680.289 1557.45,683.717 1558,701.028 1558.56,703.923 1559.12,717.609 1559.68,700.662 1560.24,699.74 1560.8,716.075 1561.36,733.425 1561.92,698.476 1562.48,712.784 1563.04,713.722 1563.6,694.55 1564.16,695.193 1564.72,678.708 1565.28,680.679 1565.83,712.964 1566.39,709.02 1566.95,723.652 1567.51,739.696 1568.07,735.958 1568.63,730.196 1569.19,743.329 1569.75,735.602 1570.31,685.683 1570.87,687.605 1571.43,671.579 1571.99,670.14 1572.55,655.025 1573.1,657.939 1573.66,661.104 1574.22,679.146 1574.78,680.649 1575.34,646.503 1575.9,649.724 1576.46,668.458 1577.02,666.167 1577.58,618.609 1578.14,639.072 1578.7,655.072 1579.26,649.768 1579.82,685.736 1580.37,669.294 1580.93,670.304 1581.49,683.317 1582.05,652.33 1582.61,606.861 1583.17,625.709 1583.73,648.831 1584.29,633.909 1584.85,586.619 1585.41,587.789 1585.97,559.216 1586.53,567.329 1587.09,607.976 1587.65,610.591 1588.2,629.024 1588.76,661.607 1589.32,695.094 1589.88,662.293 1590.44,663.813 1591,697.223 1591.56,712.706 1592.12,696.127 1592.68,694.854 1593.24,713.871 1593.8,709.351 1594.36,689.813 1594.92,722.421 1595.47,720.679 1596.03,705.296 1596.59,702.41 1597.15,684.929 1597.71,603.553 1598.27,623.152 1598.83,671.707 1599.39,640.929 1599.95,658.309 1600.51,631.539 1601.07,649.759 1601.63,652.672 1602.19,654.236 1602.74,670.612 1603.3,736.884 1603.86,722.027 1604.42,717.749 1604.98,699.359 1605.54,717.021 1606.1,696.697 1606.66,708.38 1607.22,675.707 1607.78,662.492 1608.34,678.512 1608.9,658.38 1609.46,722.923 1610.02,769.974 1610.57,750.927 1611.13,764.054 1611.69,772.563 1612.25,735.944 1612.81,752.636 1613.37,764.309 1613.93,761.636 1614.49,755.33 1615.05,772.338 1615.61,787.657 1616.17,784.455 1616.73,731.274 1617.29,722.512 1617.84,769.022 1618.4,762.547 1618.96,778.073 1619.52,775.888 1620.08,787.755 1620.64,734.116 1621.2,763.916 1621.76,727.317 1622.32,725.413 1622.88,707.1 1623.44,688.826 1624,671.417 1624.56,688.183 1625.11,700.846 1625.67,684.999 1626.23,671.356 1626.79,720.004 1627.35,683.473 1627.91,697.94 1628.47,684.175 1629.03,686.408 1629.59,686.479 1630.15,699.409 1630.71,716.241 1631.27,718.92 1631.83,697.71 1632.39,712.477 1632.94,725.107 1633.5,736.424 1634.06,714.329 1634.62,706.619 1635.18,725.258 1635.74,733.732 1636.3,761.303 1636.86,741.802 1637.42,772.064 1637.98,780.858 1638.54,789.629 1639.1,783.932 1639.66,791.97 1640.21,787.054 1640.77,749.406 1641.33,711.106 1641.89,675.535 1642.45,674.468 1643.01,659.609 1643.57,658.961 1644.13,626.047 1644.69,628.993 1645.25,586.293 1645.81,609.895 1646.37,631.41 1646.93,637.746 1647.48,639.439 1648.04,658.601 1648.6,660.999 1649.16,661.861 1649.72,647.645 1650.28,668.933 1650.84,639.623 1651.4,627.751 1651.96,662.921 1652.52,663.505 1653.08,662.132 1653.64,680.431 1654.2,696.96 1654.76,694.751 1655.31,696.863 1655.87,695.366 1656.43,715.497 1656.99,715.409 1657.55,727.635 1658.11,711.403 1658.67,712.181 1659.23,738.967 1659.79,737.445 1660.35,733.963 1660.91,728.009 1661.47,726.203 1662.03,743.141 1662.58,771.315 1663.14,814.237 1663.7,822.596 1664.26,828.593 1664.82,821.607 1665.38,830.459 1665.94,837.692 1666.5,780.796 1667.06,812.699 1667.62,761.315 1668.18,758.845 1668.74,769.18 1669.3,748.477 1669.85,728.01 1670.41,693.957 1670.97,659.442 1671.53,661.963 1672.09,680.909 1672.65,699.043 1673.21,714.72 1673.77,716.113 1674.33,728.98 1674.89,711.173 1675.45,694.46 1676.01,663.646 1676.57,682.294 1677.13,714.324 1677.68,676.457 1678.24,679.029 1678.8,678.821 1679.36,647.973 1679.92,631.465 1680.48,637.319 1681.04,641.865 1681.6,629.617 1682.16,615.398 1682.72,587.381 1683.28,607.463 1683.84,627.132 1684.4,648.488 1684.95,650.574 1685.51,634.835 1686.07,686.797 1686.63,637.373 1687.19,623.131 1687.75,662.169 1688.31,645.615 1688.87,662.855 1689.43,680.746 1689.99,666.543 1690.55,667.807 1691.11,698.994 1691.67,728.186 1692.23,709.635 1692.78,710.54 1693.34,723.566 1693.9,707.943 1694.46,708.612 1695.02,672.94 1695.58,686.073 1696.14,685.464 1696.7,686.213 1697.26,687.386 1697.82,668.349 1698.38,668.703 1698.94,671.639 1699.5,671.359 1700.05,607.932 1700.61,661.063 1701.17,680.257 1701.73,713.355 1702.29,757.944 1702.85,673.068 1703.41,644.545 1703.97,662.949 1704.53,681.231 1705.09,683.699 1705.65,718.581 1706.21,715.868 1706.77,715.785 1707.32,683.018 1707.88,699.104 1708.44,667.02 1709,654.526 1709.56,657.639 1710.12,643.729 1710.68,631.648 1711.24,650.329 1711.8,602.291 1712.36,589.601 1712.92,561.906 1713.48,582.727 1714.04,571.798 1714.6,574.241 1715.15,550.968 1715.71,537.807 1716.27,576.213 1716.83,582.928 1717.39,590.096 1717.95,597.251 1718.51,601.755 1719.07,607.115 1719.63,614.415 1720.19,621.577 1720.75,630.32 1721.31,580.984 1721.87,589.56 1722.42,544.634 1722.98,566.516 1723.54,591.072 1724.1,599.358 1724.66,589.335 1725.22,612.446 1725.78,615.624 1726.34,606.799 1726.9,611.537 1727.46,616.32 1728.02,607.297 1728.58,595.269 1729.14,565.531 1729.69,572.19 1730.25,577.938 1730.81,601.29 1731.37,620.598 1731.93,609.87 1732.49,581.706 1733.05,590.394 1733.61,562.318 1734.17,583.881 1734.73,606.732 1735.29,645.668 1735.85,647.744 1736.41,664.98 1736.97,683.633 1737.52,689.132 1738.08,657.131 1738.64,642.171 1739.2,661.134 1739.76,676.576 1740.32,663.82 1740.88,648.888 1741.44,668.429 1742,650.444 1742.56,652.501 1743.12,671.609 1743.68,689.843 1744.24,690.633 1744.79,741.143 1745.35,689.027 1745.91,722.971 1746.47,703.62 1747.03,717.818 1747.59,700.699 1748.15,732.979 1748.71,730.461 1749.27,762.28 1749.83,778.764 1750.39,789.063 1750.95,783.351 1751.51,763.208 1752.06,760.872 1752.62,757.019 1753.18,738.769 1753.74,719.552 1754.3,746.958 1754.86,729.147 1755.42,740.285 1755.98,739.104 1756.54,735.903 1757.1,734.175 1757.66,712.639 1758.22,710.622 1758.78,695.522 1759.34,711.677 1759.89,692.605 1760.45,692.921 1761.01,657.874 1761.57,646.977 1762.13,649.788 1762.69,635.636 1763.25,589.721 1763.81,610.743 1764.37,662.906 1764.93,725.191 1765.49,768.875 1766.05,747.367 1766.61,793.1 1767.16,791.001 1767.72,838.785 1768.28,800.838 1768.84,810.881 1769.4,838.515 1769.96,861.302 1770.52,857.09 1771.08,845.451 1771.64,817.258 1772.2,812.005 1772.76,789.18 1773.32,752.625 1773.88,749.773 1774.43,696.704 1774.99,716.566 1775.55,747.562 1776.11,728.901 1776.67,724.402 1777.23,706.722 1777.79,669.128 1778.35,689.013 1778.91,675.298 1779.47,674.533 1780.03,657.661 1780.59,677.091 1781.15,679.223 1781.71,664.227 1782.26,663.778 1782.82,680.364 1783.38,698.873 1783.94,693.333 1784.5,709.322 1785.06,702.528 1785.62,736.038 1786.18,715.296 1786.74,693.336 1787.3,693.513 1787.86,660.044 1788.42,677.781 1788.98,722.487 1789.53,701.682 1790.09,700.448 1790.65,670.447 1791.21,707.789 1791.77,673.267 1792.33,689.638 1792.89,706.129 1793.45,686.256 1794.01,685.778 1794.57,688.021 1795.13,674.662 1795.69,674.566 1796.25,692.237 1796.8,676.285 1797.36,659.88 1797.92,657.249 1798.48,690.725 1799.04,736.504 1799.6,719.017 1800.16,720.675 1800.72,719.56 1801.28,728.784 1801.84,760.127 1802.4,756.762 1802.96,722.191 1803.52,752.256 1804.08,761.176 1804.63,760.881 1805.19,725.233 1805.75,705.499 1806.31,705.914 1806.87,702.347 1807.43,681.875 1807.99,661.141 1808.55,660.842 1809.11,679.109 1809.67,698.653 1810.23,663.748 1810.79,663.288 1811.35,612.288 1811.9,598.064 1812.46,584.388 1813.02,583.236 1813.58,574.879 1814.14,561.681 1814.7,533.595 1815.26,541.474 1815.82,534.196 1816.38,509.544 1816.94,521.939 1817.5,547.995 1818.06,554.449 1818.62,545.48 1819.18,556.006 1819.73,597.259 1820.29,631.608 1820.85,601.985 1821.41,574.281 1821.97,564.165 1822.53,586.418 1823.09,591.498 1823.65,614.679 1824.21,618.248 1824.77,618.697 1825.33,623.759 1825.89,631.059 1826.45,602.024 1827,591.696 1827.56,598.88 1828.12,603.704 1828.68,643.259 1829.24,628.944 1829.8,646.795 1830.36,697.212 1830.92,694.219 1831.48,724.682 1832.04,720.598 1832.6,702.963 1833.16,701.552 1833.72,700.029 1834.27,685.352 1834.83,702.519 1835.39,715.691 1835.95,715.651 1836.51,733.905 1837.07,747.372 1837.63,731.02 1838.19,731.562 \"/>\n<path clip-path=\"url(#clip313)\" d=\"M720.247 690.924 L720.806 690.924 L721.365 690.924 L721.924 690.924 L722.484 690.924 L723.043 690.924 L723.602 690.924 L724.161 690.924 L724.721 690.924 L725.28 690.924 L725.839 690.924 L726.398 690.924 L726.958 690.924 L727.517 690.924 L728.076 690.924 L728.635 690.924 L729.195 690.924 L729.754 690.924 L730.313 690.924 L730.872 690.924 L731.432 690.924 L731.991 690.924 L732.55 690.924 L733.109 690.924 L733.669 690.924 L734.228 690.924 L734.787 690.924 L735.346 690.924 L735.906 690.924 L736.465 690.924 L737.024 690.924 L737.583 690.924 L738.143 690.924 L738.702 690.924 L739.261 690.924 L739.82 690.924 L740.38 690.924 L740.939 690.924 L741.498 690.924 L742.057 690.924 L742.617 690.924 L743.176 690.924 L743.735 690.924 L744.294 690.924 L744.854 690.924 L745.413 690.924 L745.972 690.924 L746.531 690.924 L747.091 690.924 L747.65 690.924 L748.209 690.924 L748.768 690.924 L749.328 690.924 L749.887 690.924 L750.446 690.924 L751.005 690.924 L751.565 690.924 L752.124 690.924 L752.683 690.924 L753.242 690.924 L753.802 690.924 L754.361 690.924 L754.92 690.924 L755.479 690.924 L756.039 690.924 L756.598 690.924 L757.157 690.924 L757.716 690.924 L758.276 690.924 L758.835 690.924 L759.394 690.924 L759.953 690.924 L760.513 690.924 L761.072 690.924 L761.631 690.924 L762.19 690.924 L762.75 690.924 L763.309 690.924 L763.868 690.924 L764.427 690.924 L764.987 690.924 L765.546 690.924 L766.105 690.924 L766.664 690.924 L767.224 690.924 L767.783 690.924 L768.342 690.924 L768.901 690.924 L769.461 690.924 L770.02 690.924 L770.579 690.924 L771.138 690.924 L771.698 690.924 L772.257 690.924 L772.816 690.924 L773.375 690.924 L773.935 690.924 L774.494 690.924 L775.053 690.924 L775.612 690.924 L776.172 690.924 L776.731 690.924 L777.29 690.924 L777.849 690.924 L778.409 690.924 L778.968 690.924 L779.527 690.924 L780.086 690.924 L780.646 690.924 L781.205 690.924 L781.764 690.924 L782.323 690.924 L782.883 690.924 L783.442 690.924 L784.001 690.924 L784.56 690.924 L785.12 690.924 L785.679 690.924 L786.238 690.924 L786.797 690.924 L787.357 690.924 L787.916 690.924 L788.475 690.924 L789.034 690.924 L789.594 690.924 L790.153 690.924 L790.712 690.924 L791.271 690.924 L791.831 690.924 L792.39 690.924 L792.949 690.924 L793.508 690.924 L794.068 690.924 L794.627 690.924 L795.186 690.924 L795.745 690.924 L796.305 690.924 L796.864 690.924 L797.423 690.924 L797.982 690.924 L798.542 690.924 L799.101 690.924 L799.66 690.924 L800.219 690.924 L800.779 690.924 L801.338 690.924 L801.897 690.924 L802.456 690.924 L803.016 690.924 L803.575 690.924 L804.134 690.924 L804.693 690.924 L805.253 690.924 L805.812 690.924 L806.371 690.924 L806.931 690.924 L807.49 690.924 L808.049 690.924 L808.608 690.924 L809.168 690.924 L809.727 690.924 L810.286 690.924 L810.845 690.924 L811.405 690.924 L811.964 690.924 L812.523 690.924 L813.082 690.924 L813.642 690.924 L814.201 690.924 L814.76 690.924 L815.319 690.924 L815.879 690.924 L816.438 690.924 L816.997 690.924 L817.556 690.924 L818.116 690.924 L818.675 690.924 L819.234 690.924 L819.793 690.924 L820.353 690.924 L820.912 690.924 L821.471 690.924 L822.03 690.924 L822.59 690.924 L823.149 690.924 L823.708 690.924 L824.267 690.924 L824.827 690.924 L825.386 690.924 L825.945 690.924 L826.504 690.924 L827.064 690.924 L827.623 690.924 L828.182 690.924 L828.741 690.924 L829.301 690.924 L829.86 690.924 L830.419 690.924 L830.978 690.924 L831.538 690.924 L832.097 690.924 L832.656 690.924 L833.215 690.924 L833.775 690.924 L834.334 690.924 L834.893 690.924 L835.452 690.924 L836.012 690.924 L836.571 690.924 L837.13 690.924 L837.689 690.924 L838.249 690.924 L838.808 690.924 L839.367 690.924 L839.926 690.924 L840.486 690.924 L841.045 690.924 L841.604 690.924 L842.163 690.924 L842.723 690.924 L843.282 690.924 L843.841 690.924 L844.4 690.924 L844.96 690.924 L845.519 690.924 L846.078 690.924 L846.637 690.924 L847.197 690.924 L847.756 690.924 L848.315 690.924 L848.874 690.924 L849.434 690.924 L849.993 690.924 L850.552 690.924 L851.111 690.924 L851.671 690.924 L852.23 690.924 L852.789 690.924 L853.348 690.924 L853.908 690.924 L854.467 690.924 L855.026 690.924 L855.585 690.924 L856.145 690.924 L856.704 690.924 L857.263 690.924 L857.822 690.924 L858.382 690.924 L858.941 690.924 L859.5 690.924 L860.059 690.924 L860.619 690.924 L861.178 690.924 L861.737 690.924 L862.296 690.924 L862.856 690.924 L863.415 690.924 L863.974 690.924 L864.533 690.924 L865.093 690.924 L865.652 690.924 L866.211 690.924 L866.77 690.924 L867.33 690.924 L867.889 690.924 L868.448 690.924 L869.007 690.924 L869.567 690.924 L870.126 690.924 L870.685 690.924 L871.244 690.924 L871.804 690.924 L872.363 690.924 L872.922 690.924 L873.481 690.924 L874.041 690.924 L874.6 690.924 L875.159 690.924 L875.718 690.924 L876.278 690.924 L876.837 690.924 L877.396 690.924 L877.955 690.924 L878.515 690.924 L879.074 690.924 L879.633 690.924 L880.192 690.924 L880.752 690.924 L881.311 690.924 L881.87 690.924 L882.429 690.924 L882.989 690.924 L883.548 690.924 L884.107 690.924 L884.666 690.924 L885.226 690.924 L885.785 690.924 L886.344 690.924 L886.903 690.924 L887.463 690.924 L888.022 690.924 L888.581 690.924 L889.14 690.924 L889.7 690.924 L890.259 690.924 L890.818 690.924 L891.377 690.924 L891.937 690.924 L892.496 690.924 L893.055 690.924 L893.614 690.924 L894.174 690.924 L894.733 690.924 L895.292 690.924 L895.851 690.924 L896.411 690.924 L896.97 690.924 L897.529 690.924 L898.088 690.924 L898.648 690.924 L899.207 690.924 L899.766 690.924 L900.325 690.924 L900.885 690.924 L901.444 690.924 L902.003 690.924 L902.562 690.924 L903.122 690.924 L903.681 690.924 L904.24 690.924 L904.799 690.924 L905.359 690.924 L905.918 690.924 L906.477 690.924 L907.036 690.924 L907.596 690.924 L908.155 690.924 L908.714 690.924 L909.273 690.924 L909.833 690.924 L910.392 690.924 L910.951 690.924 L911.51 690.924 L912.07 690.924 L912.629 690.924 L913.188 690.924 L913.747 690.924 L914.307 690.924 L914.866 690.924 L915.425 690.924 L915.984 690.924 L916.544 690.924 L917.103 690.924 L917.662 690.924 L918.221 690.924 L918.781 690.924 L919.34 690.924 L919.899 690.924 L920.458 690.924 L921.018 690.924 L921.577 690.924 L922.136 690.924 L922.695 690.924 L923.255 690.924 L923.814 690.924 L924.373 690.924 L924.932 690.924 L925.492 690.924 L926.051 690.924 L926.61 690.924 L927.169 690.924 L927.729 690.924 L928.288 690.924 L928.847 690.924 L929.406 690.924 L929.966 690.924 L930.525 690.924 L931.084 690.924 L931.644 690.924 L932.203 690.924 L932.762 690.924 L933.321 690.924 L933.881 690.924 L934.44 690.924 L934.999 690.924 L935.558 690.924 L936.118 690.924 L936.677 690.924 L937.236 690.924 L937.795 690.924 L938.355 690.924 L938.914 690.924 L939.473 690.924 L940.032 690.924 L940.592 690.924 L941.151 690.924 L941.71 690.924 L942.269 690.924 L942.829 690.924 L943.388 690.924 L943.947 690.924 L944.506 690.924 L945.066 690.924 L945.625 690.924 L946.184 690.924 L946.743 690.924 L947.303 690.924 L947.862 690.924 L948.421 690.924 L948.98 690.924 L949.54 690.924 L950.099 690.924 L950.658 690.924 L951.217 690.924 L951.777 690.924 L952.336 690.924 L952.895 690.924 L953.454 690.924 L954.014 690.924 L954.573 690.924 L955.132 690.924 L955.691 690.924 L956.251 690.924 L956.81 690.924 L957.369 690.924 L957.928 690.924 L958.488 690.924 L959.047 690.924 L959.606 690.924 L960.165 690.924 L960.725 690.924 L961.284 690.924 L961.843 690.924 L962.402 690.924 L962.962 690.924 L963.521 690.924 L964.08 690.924 L964.639 690.924 L965.199 690.924 L965.758 690.924 L966.317 690.924 L966.876 690.924 L967.436 690.924 L967.995 690.924 L968.554 690.924 L969.113 690.924 L969.673 690.924 L970.232 690.924 L970.791 690.924 L971.35 690.924 L971.91 690.924 L972.469 690.924 L973.028 690.924 L973.587 690.924 L974.147 690.924 L974.706 690.924 L975.265 690.924 L975.824 690.924 L976.384 690.924 L976.943 690.924 L977.502 690.924 L978.061 690.924 L978.621 690.924 L979.18 690.924 L979.739 690.924 L980.298 690.924 L980.858 690.924 L981.417 690.924 L981.976 690.924 L982.535 690.924 L983.095 690.924 L983.654 690.924 L984.213 690.924 L984.772 690.924 L985.332 690.924 L985.891 690.924 L986.45 690.924 L987.009 690.924 L987.569 690.924 L988.128 690.924 L988.687 690.924 L989.246 690.924 L989.806 690.924 L990.365 690.924 L990.924 690.924 L991.483 690.924 L992.043 690.924 L992.602 690.924 L993.161 690.924 L993.72 690.924 L994.28 690.924 L994.839 690.924 L995.398 690.924 L995.957 690.924 L996.517 690.924 L997.076 690.924 L997.635 690.924 L998.194 690.924 L998.754 690.924 L999.313 690.924 L999.872 690.924 L1000.43 690.924 L1000.99 690.924 L1001.55 690.924 L1002.11 690.924 L1002.67 690.924 L1003.23 690.924 L1003.79 690.924 L1004.35 690.924 L1004.91 690.924 L1005.46 690.924 L1006.02 690.924 L1006.58 690.924 L1007.14 690.924 L1007.7 690.924 L1008.26 690.924 L1008.82 690.924 L1009.38 690.924 L1009.94 690.924 L1010.5 690.924 L1011.06 690.924 L1011.62 690.924 L1012.18 690.924 L1012.73 690.924 L1013.29 690.924 L1013.85 690.924 L1014.41 690.924 L1014.97 690.924 L1015.53 690.924 L1016.09 690.924 L1016.65 690.924 L1017.21 690.924 L1017.77 690.924 L1018.33 690.924 L1018.89 690.924 L1019.45 690.924 L1020.01 690.924 L1020.56 690.924 L1021.12 690.924 L1021.68 690.924 L1022.24 690.924 L1022.8 690.924 L1023.36 690.924 L1023.92 690.924 L1024.48 690.924 L1025.04 690.924 L1025.6 690.924 L1026.16 690.924 L1026.72 690.924 L1027.28 690.924 L1027.83 690.924 L1028.39 690.924 L1028.95 690.924 L1029.51 690.924 L1030.07 690.924 L1030.63 690.924 L1031.19 690.924 L1031.75 690.924 L1032.31 690.924 L1032.87 690.924 L1033.43 690.924 L1033.99 690.924 L1034.55 690.924 L1035.1 690.924 L1035.66 690.924 L1036.22 690.924 L1036.78 690.924 L1037.34 690.924 L1037.9 690.924 L1038.46 690.924 L1039.02 690.924 L1039.58 690.924 L1040.14 690.924 L1040.7 690.924 L1041.26 690.924 L1041.82 690.924 L1042.38 690.924 L1042.93 690.924 L1043.49 690.924 L1044.05 690.924 L1044.61 690.924 L1045.17 690.924 L1045.73 690.924 L1046.29 690.924 L1046.85 690.924 L1047.41 690.924 L1047.97 690.924 L1048.53 690.924 L1049.09 690.924 L1049.65 690.924 L1050.2 690.924 L1050.76 690.924 L1051.32 690.924 L1051.88 690.924 L1052.44 690.924 L1053 690.924 L1053.56 690.924 L1054.12 690.924 L1054.68 690.924 L1055.24 690.924 L1055.8 690.924 L1056.36 690.924 L1056.92 690.924 L1057.48 690.924 L1058.03 690.924 L1058.59 690.924 L1059.15 690.924 L1059.71 690.924 L1060.27 690.924 L1060.83 690.924 L1061.39 690.924 L1061.95 690.924 L1062.51 690.924 L1063.07 690.924 L1063.63 690.924 L1064.19 690.924 L1064.75 690.924 L1065.3 690.924 L1065.86 690.924 L1066.42 690.924 L1066.98 690.924 L1067.54 690.924 L1068.1 690.924 L1068.66 690.924 L1069.22 690.924 L1069.78 690.924 L1070.34 690.924 L1070.9 690.924 L1071.46 690.924 L1072.02 690.924 L1072.57 690.924 L1073.13 690.924 L1073.69 690.924 L1074.25 690.924 L1074.81 690.924 L1075.37 690.924 L1075.93 690.924 L1076.49 690.924 L1077.05 690.924 L1077.61 690.924 L1078.17 690.924 L1078.73 690.924 L1079.29 690.924 L1079.85 690.924 L1080.4 690.924 L1080.96 690.924 L1081.52 690.924 L1082.08 690.924 L1082.64 690.924 L1083.2 690.924 L1083.76 690.924 L1084.32 690.924 L1084.88 690.924 L1085.44 690.924 L1086 690.924 L1086.56 690.924 L1087.12 690.924 L1087.67 690.924 L1088.23 690.924 L1088.79 690.924 L1089.35 690.924 L1089.91 690.924 L1090.47 690.924 L1091.03 690.924 L1091.59 690.924 L1092.15 690.924 L1092.71 690.924 L1093.27 690.924 L1093.83 690.924 L1094.39 690.924 L1094.94 690.924 L1095.5 690.924 L1096.06 690.924 L1096.62 690.924 L1097.18 690.924 L1097.74 690.924 L1098.3 690.924 L1098.86 690.924 L1099.42 690.924 L1099.98 690.924 L1100.54 690.924 L1101.1 690.924 L1101.66 690.924 L1102.22 690.924 L1102.77 690.924 L1103.33 690.924 L1103.89 690.924 L1104.45 690.924 L1105.01 690.924 L1105.57 690.924 L1106.13 690.924 L1106.69 690.924 L1107.25 690.924 L1107.81 690.924 L1108.37 690.924 L1108.93 690.924 L1109.49 690.924 L1110.04 690.924 L1110.6 690.924 L1111.16 690.924 L1111.72 690.924 L1112.28 690.924 L1112.84 690.924 L1113.4 690.924 L1113.96 690.924 L1114.52 690.924 L1115.08 690.924 L1115.64 690.924 L1116.2 690.924 L1116.76 690.924 L1117.31 690.924 L1117.87 690.924 L1118.43 690.924 L1118.99 690.924 L1119.55 690.924 L1120.11 690.924 L1120.67 690.924 L1121.23 690.924 L1121.79 690.924 L1122.35 690.924 L1122.91 690.924 L1123.47 690.924 L1124.03 690.924 L1124.59 690.924 L1125.14 690.924 L1125.7 690.924 L1126.26 690.924 L1126.82 690.924 L1127.38 690.924 L1127.94 690.924 L1128.5 690.924 L1129.06 690.924 L1129.62 690.924 L1130.18 690.924 L1130.74 690.924 L1131.3 690.924 L1131.86 690.924 L1132.41 690.924 L1132.97 690.924 L1133.53 690.924 L1134.09 690.924 L1134.65 690.924 L1135.21 690.924 L1135.77 690.924 L1136.33 690.924 L1136.89 690.924 L1137.45 690.924 L1138.01 690.924 L1138.57 690.924 L1139.13 690.924 L1139.68 690.924 L1140.24 690.924 L1140.8 690.924 L1141.36 690.924 L1141.92 690.924 L1142.48 690.924 L1143.04 690.924 L1143.6 690.924 L1144.16 690.924 L1144.72 690.924 L1145.28 690.924 L1145.84 690.924 L1146.4 690.924 L1146.96 690.924 L1147.51 690.924 L1148.07 690.924 L1148.63 690.924 L1149.19 690.924 L1149.75 690.924 L1150.31 690.924 L1150.87 690.924 L1151.43 690.924 L1151.99 690.924 L1152.55 690.924 L1153.11 690.924 L1153.67 690.924 L1154.23 690.924 L1154.78 690.924 L1155.34 690.924 L1155.9 690.924 L1156.46 690.924 L1157.02 690.924 L1157.58 690.924 L1158.14 690.924 L1158.7 690.924 L1159.26 690.924 L1159.82 690.924 L1160.38 690.924 L1160.94 690.924 L1161.5 690.924 L1162.05 690.924 L1162.61 690.924 L1163.17 690.924 L1163.73 690.924 L1164.29 690.924 L1164.85 690.924 L1165.41 690.924 L1165.97 690.924 L1166.53 690.924 L1167.09 690.924 L1167.65 690.924 L1168.21 690.924 L1168.77 690.924 L1169.33 690.924 L1169.88 690.924 L1170.44 690.924 L1171 690.924 L1171.56 690.924 L1172.12 690.924 L1172.68 690.924 L1173.24 690.924 L1173.8 690.924 L1174.36 690.924 L1174.92 690.924 L1175.48 690.924 L1176.04 690.924 L1176.6 690.924 L1177.15 690.924 L1177.71 690.924 L1178.27 690.924 L1178.83 690.924 L1179.39 690.924 L1179.95 690.924 L1180.51 690.924 L1181.07 690.924 L1181.63 690.924 L1182.19 690.924 L1182.75 690.924 L1183.31 690.924 L1183.87 690.924 L1184.43 690.924 L1184.98 690.924 L1185.54 690.924 L1186.1 690.924 L1186.66 690.924 L1187.22 690.924 L1187.78 690.924 L1188.34 690.924 L1188.9 690.924 L1189.46 690.924 L1190.02 690.924 L1190.58 690.924 L1191.14 690.924 L1191.7 690.924 L1192.25 690.924 L1192.81 690.924 L1193.37 690.924 L1193.93 690.924 L1194.49 690.924 L1195.05 690.924 L1195.61 690.924 L1196.17 690.924 L1196.73 690.924 L1197.29 690.924 L1197.85 690.924 L1198.41 690.924 L1198.97 690.924 L1199.52 690.924 L1200.08 690.924 L1200.64 690.924 L1201.2 690.924 L1201.76 690.924 L1202.32 690.924 L1202.88 690.924 L1203.44 690.924 L1204 690.924 L1204.56 690.924 L1205.12 690.924 L1205.68 690.924 L1206.24 690.924 L1206.8 690.924 L1207.35 690.924 L1207.91 690.924 L1208.47 690.924 L1209.03 690.924 L1209.59 690.924 L1210.15 690.924 L1210.71 690.924 L1211.27 690.924 L1211.83 690.924 L1212.39 690.924 L1212.95 690.924 L1213.51 690.924 L1214.07 690.924 L1214.62 690.924 L1215.18 690.924 L1215.74 690.924 L1216.3 690.924 L1216.86 690.924 L1217.42 690.924 L1217.98 690.924 L1218.54 690.924 L1219.1 690.924 L1219.66 690.924 L1220.22 690.924 L1220.78 690.924 L1221.34 690.924 L1221.89 690.924 L1222.45 690.924 L1223.01 690.924 L1223.57 690.924 L1224.13 690.924 L1224.69 690.924 L1225.25 690.924 L1225.81 690.924 L1226.37 690.924 L1226.93 690.924 L1227.49 690.924 L1228.05 690.924 L1228.61 690.924 L1229.17 690.924 L1229.72 690.924 L1230.28 690.924 L1230.84 690.924 L1231.4 690.924 L1231.96 690.924 L1232.52 690.924 L1233.08 690.924 L1233.64 690.924 L1234.2 690.924 L1234.76 690.924 L1235.32 690.924 L1235.88 690.924 L1236.44 690.924 L1236.99 690.924 L1237.55 690.924 L1238.11 690.924 L1238.67 690.924 L1239.23 690.924 L1239.79 690.924 L1240.35 690.924 L1240.91 690.924 L1241.47 690.924 L1242.03 690.924 L1242.59 690.924 L1243.15 690.924 L1243.71 690.924 L1244.26 690.924 L1244.82 690.924 L1245.38 690.924 L1245.94 690.924 L1246.5 690.924 L1247.06 690.924 L1247.62 690.924 L1248.18 690.924 L1248.74 690.924 L1249.3 690.924 L1249.86 690.924 L1250.42 690.924 L1250.98 690.924 L1251.54 690.924 L1252.09 690.924 L1252.65 690.924 L1253.21 690.924 L1253.77 690.924 L1254.33 690.924 L1254.89 690.924 L1255.45 690.924 L1256.01 690.924 L1256.57 690.924 L1257.13 690.924 L1257.69 690.924 L1258.25 690.924 L1258.81 690.924 L1259.36 690.924 L1259.92 690.924 L1260.48 690.924 L1261.04 690.924 L1261.6 690.924 L1262.16 690.924 L1262.72 690.924 L1263.28 690.924 L1263.84 690.924 L1264.4 690.924 L1264.96 690.924 L1265.52 690.924 L1266.08 690.924 L1266.63 690.924 L1267.19 690.924 L1267.75 690.924 L1268.31 690.924 L1268.87 690.924 L1269.43 690.924 L1269.99 690.924 L1270.55 690.924 L1271.11 690.924 L1271.67 690.924 L1272.23 690.924 L1272.79 690.924 L1273.35 690.924 L1273.91 690.924 L1274.46 690.924 L1275.02 690.924 L1275.58 690.924 L1276.14 690.924 L1276.7 690.924 L1277.26 690.924 L1277.82 690.924 L1278.38 690.924 L1278.94 690.924 L1279.5 690.924 L1280.06 690.924 L1280.62 690.924 L1281.18 690.924 L1281.73 690.924 L1282.29 690.924 L1282.85 690.924 L1283.41 690.924 L1283.97 690.924 L1284.53 690.924 L1285.09 690.924 L1285.65 690.924 L1286.21 690.924 L1286.77 690.924 L1287.33 690.924 L1287.89 690.924 L1288.45 690.924 L1289 690.924 L1289.56 690.924 L1290.12 690.924 L1290.68 690.924 L1291.24 690.924 L1291.8 690.924 L1292.36 690.924 L1292.92 690.924 L1293.48 690.924 L1294.04 690.924 L1294.6 690.924 L1295.16 690.924 L1295.72 690.924 L1296.28 690.924 L1296.83 690.924 L1297.39 690.924 L1297.95 690.924 L1298.51 690.924 L1299.07 690.924 L1299.63 690.924 L1300.19 690.924 L1300.75 690.924 L1301.31 690.924 L1301.87 690.924 L1302.43 690.924 L1302.99 690.924 L1303.55 690.924 L1304.1 690.924 L1304.66 690.924 L1305.22 690.924 L1305.78 690.924 L1306.34 690.924 L1306.9 690.924 L1307.46 690.924 L1308.02 690.924 L1308.58 690.924 L1309.14 690.924 L1309.7 690.924 L1310.26 690.924 L1310.82 690.924 L1311.38 690.924 L1311.93 690.924 L1312.49 690.924 L1313.05 690.924 L1313.61 690.924 L1314.17 690.924 L1314.73 690.924 L1315.29 690.924 L1315.85 690.924 L1316.41 690.924 L1316.97 690.924 L1317.53 690.924 L1318.09 690.924 L1318.65 690.924 L1319.2 690.924 L1319.76 690.924 L1320.32 690.924 L1320.88 690.924 L1321.44 690.924 L1322 690.924 L1322.56 690.924 L1323.12 690.924 L1323.68 690.924 L1324.24 690.924 L1324.8 690.924 L1325.36 690.924 L1325.92 690.924 L1326.47 690.924 L1327.03 690.924 L1327.59 690.924 L1328.15 690.924 L1328.71 690.924 L1329.27 690.924 L1329.83 690.924 L1330.39 690.924 L1330.95 690.924 L1331.51 690.924 L1332.07 690.924 L1332.63 690.924 L1333.19 690.924 L1333.75 690.924 L1334.3 690.924 L1334.86 690.924 L1335.42 690.924 L1335.98 690.924 L1336.54 690.924 L1337.1 690.924 L1337.66 690.924 L1338.22 690.924 L1338.78 690.924 L1339.34 690.924 L1339.9 690.924 L1340.46 690.924 L1341.02 690.924 L1341.57 690.924 L1342.13 690.924 L1342.69 690.924 L1343.25 690.924 L1343.81 690.924 L1344.37 690.924 L1344.93 690.924 L1345.49 690.924 L1346.05 690.924 L1346.61 690.924 L1347.17 690.924 L1347.73 690.924 L1348.29 690.924 L1348.84 690.924 L1349.4 690.924 L1349.96 690.924 L1350.52 690.924 L1351.08 690.924 L1351.64 690.924 L1352.2 690.924 L1352.76 690.924 L1353.32 690.924 L1353.88 690.924 L1354.44 690.924 L1355 690.924 L1355.56 690.924 L1356.12 690.924 L1356.67 690.924 L1357.23 690.924 L1357.79 690.924 L1358.35 690.924 L1358.91 690.924 L1359.47 690.924 L1360.03 690.924 L1360.59 690.924 L1361.15 690.924 L1361.71 690.924 L1362.27 690.924 L1362.83 690.924 L1363.39 690.924 L1363.94 690.924 L1364.5 690.924 L1365.06 690.924 L1365.62 690.924 L1366.18 690.924 L1366.74 690.924 L1367.3 690.924 L1367.86 690.924 L1368.42 690.924 L1368.98 690.924 L1369.54 690.924 L1370.1 690.924 L1370.66 690.924 L1371.21 690.924 L1371.77 690.924 L1372.33 690.924 L1372.89 690.924 L1373.45 690.924 L1374.01 690.924 L1374.57 690.924 L1375.13 690.924 L1375.69 690.924 L1376.25 690.924 L1376.81 690.924 L1377.37 690.924 L1377.93 690.924 L1378.49 690.924 L1379.04 690.924 L1379.6 690.924 L1380.16 690.924 L1380.72 690.924 L1381.28 690.924 L1381.84 690.924 L1382.4 690.924 L1382.96 690.924 L1383.52 690.924 L1384.08 690.924 L1384.64 690.924 L1385.2 690.924 L1385.76 690.924 L1386.31 690.924 L1386.87 690.924 L1387.43 690.924 L1387.99 690.924 L1388.55 690.924 L1389.11 690.924 L1389.67 690.924 L1390.23 690.924 L1390.79 690.924 L1391.35 690.924 L1391.91 690.924 L1392.47 690.924 L1393.03 690.924 L1393.58 690.924 L1394.14 690.924 L1394.7 690.924 L1395.26 690.924 L1395.82 690.924 L1396.38 690.924 L1396.94 690.924 L1397.5 690.924 L1398.06 690.924 L1398.62 690.924 L1399.18 690.924 L1399.74 690.924 L1400.3 690.924 L1400.86 690.924 L1401.41 690.924 L1401.97 690.924 L1402.53 690.924 L1403.09 690.924 L1403.65 690.924 L1404.21 690.924 L1404.77 690.924 L1405.33 690.924 L1405.89 690.924 L1406.45 690.924 L1407.01 690.924 L1407.57 690.924 L1408.13 690.924 L1408.68 690.924 L1409.24 690.924 L1409.8 690.924 L1410.36 690.924 L1410.92 690.924 L1411.48 690.924 L1412.04 690.924 L1412.6 690.924 L1413.16 690.924 L1413.72 690.924 L1414.28 690.924 L1414.84 690.924 L1415.4 690.924 L1415.95 690.924 L1416.51 690.924 L1417.07 690.924 L1417.63 690.924 L1418.19 690.924 L1418.75 690.924 L1419.31 690.924 L1419.87 690.924 L1420.43 690.924 L1420.99 690.924 L1421.55 690.924 L1422.11 690.924 L1422.67 690.924 L1423.23 690.924 L1423.78 690.924 L1424.34 690.924 L1424.9 690.924 L1425.46 690.924 L1426.02 690.924 L1426.58 690.924 L1427.14 690.924 L1427.7 690.924 L1428.26 690.924 L1428.82 690.924 L1429.38 690.924 L1429.94 690.924 L1430.5 690.924 L1431.05 690.924 L1431.61 690.924 L1432.17 690.924 L1432.73 690.924 L1433.29 690.924 L1433.85 690.924 L1434.41 690.924 L1434.97 690.924 L1435.53 690.924 L1436.09 690.924 L1436.65 690.924 L1437.21 690.924 L1437.77 690.924 L1438.33 690.924 L1438.88 690.924 L1439.44 690.924 L1440 690.924 L1440.56 690.924 L1441.12 690.924 L1441.68 690.924 L1442.24 690.924 L1442.8 690.924 L1443.36 690.924 L1443.92 690.924 L1444.48 690.924 L1445.04 690.924 L1445.6 690.924 L1446.15 690.924 L1446.71 690.924 L1447.27 690.924 L1447.83 690.924 L1448.39 690.924 L1448.95 690.924 L1449.51 690.924 L1450.07 690.924 L1450.63 690.924 L1451.19 690.924 L1451.75 690.924 L1452.31 690.924 L1452.87 690.924 L1453.42 690.924 L1453.98 690.924 L1454.54 690.924 L1455.1 690.924 L1455.66 690.924 L1456.22 690.924 L1456.78 690.924 L1457.34 690.924 L1457.9 690.924 L1458.46 690.924 L1459.02 690.924 L1459.58 690.924 L1460.14 690.924 L1460.7 690.924 L1461.25 690.924 L1461.81 690.924 L1462.37 690.924 L1462.93 690.924 L1463.49 690.924 L1464.05 690.924 L1464.61 690.924 L1465.17 690.924 L1465.73 690.924 L1466.29 690.924 L1466.85 690.924 L1467.41 690.924 L1467.97 690.924 L1468.52 690.924 L1469.08 690.924 L1469.64 690.924 L1470.2 690.924 L1470.76 690.924 L1471.32 690.924 L1471.88 690.924 L1472.44 690.924 L1473 690.924 L1473.56 690.924 L1474.12 690.924 L1474.68 690.924 L1475.24 690.924 L1475.79 690.924 L1476.35 690.924 L1476.91 690.924 L1477.47 690.924 L1478.03 690.924 L1478.59 690.924 L1479.15 690.924 L1479.71 690.924 L1480.27 690.924 L1480.83 690.924 L1481.39 690.924 L1481.95 690.924 L1482.51 690.924 L1483.07 690.924 L1483.62 690.924 L1484.18 690.924 L1484.74 690.924 L1485.3 690.924 L1485.86 690.924 L1486.42 690.924 L1486.98 690.924 L1487.54 690.924 L1488.1 690.924 L1488.66 690.924 L1489.22 690.924 L1489.78 690.924 L1490.34 690.924 L1490.89 690.924 L1491.45 690.924 L1492.01 690.924 L1492.57 690.924 L1493.13 690.924 L1493.69 690.924 L1494.25 690.924 L1494.81 690.924 L1495.37 690.924 L1495.93 690.924 L1496.49 690.924 L1497.05 690.924 L1497.61 690.924 L1498.16 690.924 L1498.72 690.924 L1499.28 690.924 L1499.84 690.924 L1500.4 690.924 L1500.96 690.924 L1501.52 690.924 L1502.08 690.924 L1502.64 690.924 L1503.2 690.924 L1503.76 690.924 L1504.32 690.924 L1504.88 690.924 L1505.44 690.924 L1505.99 690.924 L1506.55 690.924 L1507.11 690.924 L1507.67 690.924 L1508.23 690.924 L1508.79 690.924 L1509.35 690.924 L1509.91 690.924 L1510.47 690.924 L1511.03 690.924 L1511.59 690.924 L1512.15 690.924 L1512.71 690.924 L1513.26 690.924 L1513.82 690.924 L1514.38 690.924 L1514.94 690.924 L1515.5 690.924 L1516.06 690.924 L1516.62 690.924 L1517.18 690.924 L1517.74 690.924 L1518.3 690.924 L1518.86 690.924 L1519.42 690.924 L1519.98 690.924 L1520.53 690.924 L1521.09 690.924 L1521.65 690.924 L1522.21 690.924 L1522.77 690.924 L1523.33 690.924 L1523.89 690.924 L1524.45 690.924 L1525.01 690.924 L1525.57 690.924 L1526.13 690.924 L1526.69 690.924 L1527.25 690.924 L1527.81 690.924 L1528.36 690.924 L1528.92 690.924 L1529.48 690.924 L1530.04 690.924 L1530.6 690.924 L1531.16 690.924 L1531.72 690.924 L1532.28 690.924 L1532.84 690.924 L1533.4 690.924 L1533.96 690.924 L1534.52 690.924 L1535.08 690.924 L1535.63 690.924 L1536.19 690.924 L1536.75 690.924 L1537.31 690.924 L1537.87 690.924 L1538.43 690.924 L1538.99 690.924 L1539.55 690.924 L1540.11 690.924 L1540.67 690.924 L1541.23 690.924 L1541.79 690.924 L1542.35 690.924 L1542.9 690.924 L1543.46 690.924 L1544.02 690.924 L1544.58 690.924 L1545.14 690.924 L1545.7 690.924 L1546.26 690.924 L1546.82 690.924 L1547.38 690.924 L1547.94 690.924 L1548.5 690.924 L1549.06 690.924 L1549.62 690.924 L1550.18 690.924 L1550.73 690.924 L1551.29 690.924 L1551.85 690.924 L1552.41 690.924 L1552.97 690.924 L1553.53 690.924 L1554.09 690.924 L1554.65 690.924 L1555.21 690.924 L1555.77 690.924 L1556.33 690.924 L1556.89 690.924 L1557.45 690.924 L1558 690.924 L1558.56 690.924 L1559.12 690.924 L1559.68 690.924 L1560.24 690.924 L1560.8 690.924 L1561.36 690.924 L1561.92 690.924 L1562.48 690.924 L1563.04 690.924 L1563.6 690.924 L1564.16 690.924 L1564.72 690.924 L1565.28 690.924 L1565.83 690.924 L1566.39 690.924 L1566.95 690.924 L1567.51 690.924 L1568.07 690.924 L1568.63 690.924 L1569.19 690.924 L1569.75 690.924 L1570.31 690.924 L1570.87 690.924 L1571.43 690.924 L1571.99 690.924 L1572.55 690.924 L1573.1 690.924 L1573.66 690.924 L1574.22 690.924 L1574.78 690.924 L1575.34 690.924 L1575.9 690.924 L1576.46 690.924 L1577.02 690.924 L1577.58 690.924 L1578.14 690.924 L1578.7 690.924 L1579.26 690.924 L1579.82 690.924 L1580.37 690.924 L1580.93 690.924 L1581.49 690.924 L1582.05 690.924 L1582.61 690.924 L1583.17 690.924 L1583.73 690.924 L1584.29 690.924 L1584.85 690.924 L1585.41 690.924 L1585.97 690.924 L1586.53 690.924 L1587.09 690.924 L1587.65 690.924 L1588.2 690.924 L1588.76 690.924 L1589.32 690.924 L1589.88 690.924 L1590.44 690.924 L1591 690.924 L1591.56 690.924 L1592.12 690.924 L1592.68 690.924 L1593.24 690.924 L1593.8 690.924 L1594.36 690.924 L1594.92 690.924 L1595.47 690.924 L1596.03 690.924 L1596.59 690.924 L1597.15 690.924 L1597.71 690.924 L1598.27 690.924 L1598.83 690.924 L1599.39 690.924 L1599.95 690.924 L1600.51 690.924 L1601.07 690.924 L1601.63 690.924 L1602.19 690.924 L1602.74 690.924 L1603.3 690.924 L1603.86 690.924 L1604.42 690.924 L1604.98 690.924 L1605.54 690.924 L1606.1 690.924 L1606.66 690.924 L1607.22 690.924 L1607.78 690.924 L1608.34 690.924 L1608.9 690.924 L1609.46 690.924 L1610.02 690.924 L1610.57 690.924 L1611.13 690.924 L1611.69 690.924 L1612.25 690.924 L1612.81 690.924 L1613.37 690.924 L1613.93 690.924 L1614.49 690.924 L1615.05 690.924 L1615.61 690.924 L1616.17 690.924 L1616.73 690.924 L1617.29 690.924 L1617.84 690.924 L1618.4 690.924 L1618.96 690.924 L1619.52 690.924 L1620.08 690.924 L1620.64 690.924 L1621.2 690.924 L1621.76 690.924 L1622.32 690.924 L1622.88 690.924 L1623.44 690.924 L1624 690.924 L1624.56 690.924 L1625.11 690.924 L1625.67 690.924 L1626.23 690.924 L1626.79 690.924 L1627.35 690.924 L1627.91 690.924 L1628.47 690.924 L1629.03 690.924 L1629.59 690.924 L1630.15 690.924 L1630.71 690.924 L1631.27 690.924 L1631.83 690.924 L1632.39 690.924 L1632.94 690.924 L1633.5 690.924 L1634.06 690.924 L1634.62 690.924 L1635.18 690.924 L1635.74 690.924 L1636.3 690.924 L1636.86 690.924 L1637.42 690.924 L1637.98 690.924 L1638.54 690.924 L1639.1 690.924 L1639.66 690.924 L1640.21 690.924 L1640.77 690.924 L1641.33 690.924 L1641.89 690.924 L1642.45 690.924 L1643.01 690.924 L1643.57 690.924 L1644.13 690.924 L1644.69 690.924 L1645.25 690.924 L1645.81 690.924 L1646.37 690.924 L1646.93 690.924 L1647.48 690.924 L1648.04 690.924 L1648.6 690.924 L1649.16 690.924 L1649.72 690.924 L1650.28 690.924 L1650.84 690.924 L1651.4 690.924 L1651.96 690.924 L1652.52 690.924 L1653.08 690.924 L1653.64 690.924 L1654.2 690.924 L1654.76 690.924 L1655.31 690.924 L1655.87 690.924 L1656.43 690.924 L1656.99 690.924 L1657.55 690.924 L1658.11 690.924 L1658.67 690.924 L1659.23 690.924 L1659.79 690.924 L1660.35 690.924 L1660.91 690.924 L1661.47 690.924 L1662.03 690.924 L1662.58 690.924 L1663.14 690.924 L1663.7 690.924 L1664.26 690.924 L1664.82 690.924 L1665.38 690.924 L1665.94 690.924 L1666.5 690.924 L1667.06 690.924 L1667.62 690.924 L1668.18 690.924 L1668.74 690.924 L1669.3 690.924 L1669.85 690.924 L1670.41 690.924 L1670.97 690.924 L1671.53 690.924 L1672.09 690.924 L1672.65 690.924 L1673.21 690.924 L1673.77 690.924 L1674.33 690.924 L1674.89 690.924 L1675.45 690.924 L1676.01 690.924 L1676.57 690.924 L1677.13 690.924 L1677.68 690.924 L1678.24 690.924 L1678.8 690.924 L1679.36 690.924 L1679.92 690.924 L1680.48 690.924 L1681.04 690.924 L1681.6 690.924 L1682.16 690.924 L1682.72 690.924 L1683.28 690.924 L1683.84 690.924 L1684.4 690.924 L1684.95 690.924 L1685.51 690.924 L1686.07 690.924 L1686.63 690.924 L1687.19 690.924 L1687.75 690.924 L1688.31 690.924 L1688.87 690.924 L1689.43 690.924 L1689.99 690.924 L1690.55 690.924 L1691.11 690.924 L1691.67 690.924 L1692.23 690.924 L1692.78 690.924 L1693.34 690.924 L1693.9 690.924 L1694.46 690.924 L1695.02 690.924 L1695.58 690.924 L1696.14 690.924 L1696.7 690.924 L1697.26 690.924 L1697.82 690.924 L1698.38 690.924 L1698.94 690.924 L1699.5 690.924 L1700.05 690.924 L1700.61 690.924 L1701.17 690.924 L1701.73 690.924 L1702.29 690.924 L1702.85 690.924 L1703.41 690.924 L1703.97 690.924 L1704.53 690.924 L1705.09 690.924 L1705.65 690.924 L1706.21 690.924 L1706.77 690.924 L1707.32 690.924 L1707.88 690.924 L1708.44 690.924 L1709 690.924 L1709.56 690.924 L1710.12 690.924 L1710.68 690.924 L1711.24 690.924 L1711.8 690.924 L1712.36 690.924 L1712.92 690.924 L1713.48 690.924 L1714.04 690.924 L1714.6 690.924 L1715.15 690.924 L1715.71 690.924 L1716.27 690.924 L1716.83 690.924 L1717.39 690.924 L1717.95 690.924 L1718.51 690.924 L1719.07 690.924 L1719.63 690.924 L1720.19 690.924 L1720.75 690.924 L1721.31 690.924 L1721.87 690.924 L1722.42 690.924 L1722.98 690.924 L1723.54 690.924 L1724.1 690.924 L1724.66 690.924 L1725.22 690.924 L1725.78 690.924 L1726.34 690.924 L1726.9 690.924 L1727.46 690.924 L1728.02 690.924 L1728.58 690.924 L1729.14 690.924 L1729.69 690.924 L1730.25 690.924 L1730.81 690.924 L1731.37 690.924 L1731.93 690.924 L1732.49 690.924 L1733.05 690.924 L1733.61 690.924 L1734.17 690.924 L1734.73 690.924 L1735.29 690.924 L1735.85 690.924 L1736.41 690.924 L1736.97 690.924 L1737.52 690.924 L1738.08 690.924 L1738.64 690.924 L1739.2 690.924 L1739.76 690.924 L1740.32 690.924 L1740.88 690.924 L1741.44 690.924 L1742 690.924 L1742.56 690.924 L1743.12 690.924 L1743.68 690.924 L1744.24 690.924 L1744.79 690.924 L1745.35 690.924 L1745.91 690.924 L1746.47 690.924 L1747.03 690.924 L1747.59 690.924 L1748.15 690.924 L1748.71 690.924 L1749.27 690.924 L1749.83 690.924 L1750.39 690.924 L1750.95 690.924 L1751.51 690.924 L1752.06 690.924 L1752.62 690.924 L1753.18 690.924 L1753.74 690.924 L1754.3 690.924 L1754.86 690.924 L1755.42 690.924 L1755.98 690.924 L1756.54 690.924 L1757.1 690.924 L1757.66 690.924 L1758.22 690.924 L1758.78 690.924 L1759.34 690.924 L1759.89 690.924 L1760.45 690.924 L1761.01 690.924 L1761.57 690.924 L1762.13 690.924 L1762.69 690.924 L1763.25 690.924 L1763.81 690.924 L1764.37 690.924 L1764.93 690.924 L1765.49 690.924 L1766.05 690.924 L1766.61 690.924 L1767.16 690.924 L1767.72 690.924 L1768.28 690.924 L1768.84 690.924 L1769.4 690.924 L1769.96 690.924 L1770.52 690.924 L1771.08 690.924 L1771.64 690.924 L1772.2 690.924 L1772.76 690.924 L1773.32 690.924 L1773.88 690.924 L1774.43 690.924 L1774.99 690.924 L1775.55 690.924 L1776.11 690.924 L1776.67 690.924 L1777.23 690.924 L1777.79 690.924 L1778.35 690.924 L1778.91 690.924 L1779.47 690.924 L1780.03 690.924 L1780.59 690.924 L1781.15 690.924 L1781.71 690.924 L1782.26 690.924 L1782.82 690.924 L1783.38 690.924 L1783.94 690.924 L1784.5 690.924 L1785.06 690.924 L1785.62 690.924 L1786.18 690.924 L1786.74 690.924 L1787.3 690.924 L1787.86 690.924 L1788.42 690.924 L1788.98 690.924 L1789.53 690.924 L1790.09 690.924 L1790.65 690.924 L1791.21 690.924 L1791.77 690.924 L1792.33 690.924 L1792.89 690.924 L1793.45 690.924 L1794.01 690.924 L1794.57 690.924 L1795.13 690.924 L1795.69 690.924 L1796.25 690.924 L1796.8 690.924 L1797.36 690.924 L1797.92 690.924 L1798.48 690.924 L1799.04 690.924 L1799.6 690.924 L1800.16 690.924 L1800.72 690.924 L1801.28 690.924 L1801.84 690.924 L1802.4 690.924 L1802.96 690.924 L1803.52 690.924 L1804.08 690.924 L1804.63 690.924 L1805.19 690.924 L1805.75 690.924 L1806.31 690.924 L1806.87 690.924 L1807.43 690.924 L1807.99 690.924 L1808.55 690.924 L1809.11 690.924 L1809.67 690.924 L1810.23 690.924 L1810.79 690.924 L1811.35 690.924 L1811.9 690.924 L1812.46 690.924 L1813.02 690.924 L1813.58 690.924 L1814.14 690.924 L1814.7 690.924 L1815.26 690.924 L1815.82 690.924 L1816.38 690.924 L1816.94 690.924 L1817.5 690.924 L1818.06 690.924 L1818.62 690.924 L1819.18 690.924 L1819.73 690.924 L1820.29 690.924 L1820.85 690.924 L1821.41 690.924 L1821.97 690.924 L1822.53 690.924 L1823.09 690.924 L1823.65 690.924 L1824.21 690.924 L1824.77 690.924 L1825.33 690.924 L1825.89 690.924 L1826.45 690.924 L1827 690.924 L1827.56 690.924 L1828.12 690.924 L1828.68 690.924 L1829.24 690.924 L1829.8 690.924 L1830.36 690.924 L1830.92 690.924 L1831.48 690.924 L1832.04 690.924 L1832.6 690.924 L1833.16 690.924 L1833.72 690.924 L1834.27 690.924 L1834.83 690.924 L1835.39 690.924 L1835.95 690.924 L1836.51 690.924 L1837.07 690.924 L1837.63 690.924 L1838.19 690.924 L1838.19 680.019 L1837.63 680.019 L1837.07 680.019 L1836.51 680.019 L1835.95 680.019 L1835.39 680.019 L1834.83 680.019 L1834.27 680.019 L1833.72 680.019 L1833.16 680.019 L1832.6 680.019 L1832.04 680.019 L1831.48 680.019 L1830.92 680.019 L1830.36 680.019 L1829.8 680.019 L1829.24 680.019 L1828.68 680.019 L1828.12 680.019 L1827.56 680.019 L1827 680.019 L1826.45 680.019 L1825.89 680.019 L1825.33 680.019 L1824.77 680.019 L1824.21 680.019 L1823.65 680.019 L1823.09 680.019 L1822.53 680.019 L1821.97 680.019 L1821.41 680.019 L1820.85 680.019 L1820.29 680.019 L1819.73 680.019 L1819.18 680.019 L1818.62 680.019 L1818.06 680.019 L1817.5 680.019 L1816.94 680.019 L1816.38 680.019 L1815.82 680.019 L1815.26 680.019 L1814.7 680.019 L1814.14 680.019 L1813.58 680.019 L1813.02 680.019 L1812.46 680.019 L1811.9 680.019 L1811.35 680.019 L1810.79 680.019 L1810.23 680.019 L1809.67 680.019 L1809.11 680.019 L1808.55 680.019 L1807.99 680.019 L1807.43 680.019 L1806.87 680.019 L1806.31 680.019 L1805.75 680.019 L1805.19 680.019 L1804.63 680.019 L1804.08 680.019 L1803.52 680.019 L1802.96 680.019 L1802.4 680.019 L1801.84 680.019 L1801.28 680.019 L1800.72 680.019 L1800.16 680.019 L1799.6 680.019 L1799.04 680.019 L1798.48 680.019 L1797.92 680.019 L1797.36 680.019 L1796.8 680.019 L1796.25 680.019 L1795.69 680.019 L1795.13 680.019 L1794.57 680.019 L1794.01 680.019 L1793.45 680.019 L1792.89 680.019 L1792.33 680.019 L1791.77 680.019 L1791.21 680.019 L1790.65 680.019 L1790.09 680.019 L1789.53 680.019 L1788.98 680.019 L1788.42 680.019 L1787.86 680.019 L1787.3 680.019 L1786.74 680.019 L1786.18 680.019 L1785.62 680.019 L1785.06 680.019 L1784.5 680.019 L1783.94 680.019 L1783.38 680.019 L1782.82 680.019 L1782.26 680.019 L1781.71 680.019 L1781.15 680.019 L1780.59 680.019 L1780.03 680.019 L1779.47 680.019 L1778.91 680.019 L1778.35 680.019 L1777.79 680.019 L1777.23 680.019 L1776.67 680.019 L1776.11 680.019 L1775.55 680.019 L1774.99 680.019 L1774.43 680.019 L1773.88 680.019 L1773.32 680.019 L1772.76 680.019 L1772.2 680.019 L1771.64 680.019 L1771.08 680.019 L1770.52 680.019 L1769.96 680.019 L1769.4 680.019 L1768.84 680.019 L1768.28 680.019 L1767.72 680.019 L1767.16 680.019 L1766.61 680.019 L1766.05 680.019 L1765.49 680.019 L1764.93 680.019 L1764.37 680.019 L1763.81 680.019 L1763.25 680.019 L1762.69 680.019 L1762.13 680.019 L1761.57 680.019 L1761.01 680.019 L1760.45 680.019 L1759.89 680.019 L1759.34 680.019 L1758.78 680.019 L1758.22 680.019 L1757.66 680.019 L1757.1 680.019 L1756.54 680.019 L1755.98 680.019 L1755.42 680.019 L1754.86 680.019 L1754.3 680.019 L1753.74 680.019 L1753.18 680.019 L1752.62 680.019 L1752.06 680.019 L1751.51 680.019 L1750.95 680.019 L1750.39 680.019 L1749.83 680.019 L1749.27 680.019 L1748.71 680.019 L1748.15 680.019 L1747.59 680.019 L1747.03 680.019 L1746.47 680.019 L1745.91 680.019 L1745.35 680.019 L1744.79 680.019 L1744.24 680.019 L1743.68 680.019 L1743.12 680.019 L1742.56 680.019 L1742 680.019 L1741.44 680.019 L1740.88 680.019 L1740.32 680.019 L1739.76 680.019 L1739.2 680.019 L1738.64 680.019 L1738.08 680.019 L1737.52 680.019 L1736.97 680.019 L1736.41 680.019 L1735.85 680.019 L1735.29 680.019 L1734.73 680.019 L1734.17 680.019 L1733.61 680.019 L1733.05 680.019 L1732.49 680.019 L1731.93 680.019 L1731.37 680.019 L1730.81 680.019 L1730.25 680.019 L1729.69 680.019 L1729.14 680.019 L1728.58 680.019 L1728.02 680.019 L1727.46 680.019 L1726.9 680.019 L1726.34 680.019 L1725.78 680.019 L1725.22 680.019 L1724.66 680.019 L1724.1 680.019 L1723.54 680.019 L1722.98 680.019 L1722.42 680.019 L1721.87 680.019 L1721.31 680.019 L1720.75 680.019 L1720.19 680.019 L1719.63 680.019 L1719.07 680.019 L1718.51 680.019 L1717.95 680.019 L1717.39 680.019 L1716.83 680.019 L1716.27 680.019 L1715.71 680.019 L1715.15 680.019 L1714.6 680.019 L1714.04 680.019 L1713.48 680.019 L1712.92 680.019 L1712.36 680.019 L1711.8 680.019 L1711.24 680.019 L1710.68 680.019 L1710.12 680.019 L1709.56 680.019 L1709 680.019 L1708.44 680.019 L1707.88 680.019 L1707.32 680.019 L1706.77 680.019 L1706.21 680.019 L1705.65 680.019 L1705.09 680.019 L1704.53 680.019 L1703.97 680.019 L1703.41 680.019 L1702.85 680.019 L1702.29 680.019 L1701.73 680.019 L1701.17 680.019 L1700.61 680.019 L1700.05 680.019 L1699.5 680.019 L1698.94 680.019 L1698.38 680.019 L1697.82 680.019 L1697.26 680.019 L1696.7 680.019 L1696.14 680.019 L1695.58 680.019 L1695.02 680.019 L1694.46 680.019 L1693.9 680.019 L1693.34 680.019 L1692.78 680.019 L1692.23 680.019 L1691.67 680.019 L1691.11 680.019 L1690.55 680.019 L1689.99 680.019 L1689.43 680.019 L1688.87 680.019 L1688.31 680.019 L1687.75 680.019 L1687.19 680.019 L1686.63 680.019 L1686.07 680.019 L1685.51 680.019 L1684.95 680.019 L1684.4 680.019 L1683.84 680.019 L1683.28 680.019 L1682.72 680.019 L1682.16 680.019 L1681.6 680.019 L1681.04 680.019 L1680.48 680.019 L1679.92 680.019 L1679.36 680.019 L1678.8 680.019 L1678.24 680.019 L1677.68 680.019 L1677.13 680.019 L1676.57 680.019 L1676.01 680.019 L1675.45 680.019 L1674.89 680.019 L1674.33 680.019 L1673.77 680.019 L1673.21 680.019 L1672.65 680.019 L1672.09 680.019 L1671.53 680.019 L1670.97 680.019 L1670.41 680.019 L1669.85 680.019 L1669.3 680.019 L1668.74 680.019 L1668.18 680.019 L1667.62 680.019 L1667.06 680.019 L1666.5 680.019 L1665.94 680.019 L1665.38 680.019 L1664.82 680.019 L1664.26 680.019 L1663.7 680.019 L1663.14 680.019 L1662.58 680.019 L1662.03 680.019 L1661.47 680.019 L1660.91 680.019 L1660.35 680.019 L1659.79 680.019 L1659.23 680.019 L1658.67 680.019 L1658.11 680.019 L1657.55 680.019 L1656.99 680.019 L1656.43 680.019 L1655.87 680.019 L1655.31 680.019 L1654.76 680.019 L1654.2 680.019 L1653.64 680.019 L1653.08 680.019 L1652.52 680.019 L1651.96 680.019 L1651.4 680.019 L1650.84 680.019 L1650.28 680.019 L1649.72 680.019 L1649.16 680.019 L1648.6 680.019 L1648.04 680.019 L1647.48 680.019 L1646.93 680.019 L1646.37 680.019 L1645.81 680.019 L1645.25 680.019 L1644.69 680.019 L1644.13 680.019 L1643.57 680.019 L1643.01 680.019 L1642.45 680.019 L1641.89 680.019 L1641.33 680.019 L1640.77 680.019 L1640.21 680.019 L1639.66 680.019 L1639.1 680.019 L1638.54 680.019 L1637.98 680.019 L1637.42 680.019 L1636.86 680.019 L1636.3 680.019 L1635.74 680.019 L1635.18 680.019 L1634.62 680.019 L1634.06 680.019 L1633.5 680.019 L1632.94 680.019 L1632.39 680.019 L1631.83 680.019 L1631.27 680.019 L1630.71 680.019 L1630.15 680.019 L1629.59 680.019 L1629.03 680.019 L1628.47 680.019 L1627.91 680.019 L1627.35 680.019 L1626.79 680.019 L1626.23 680.019 L1625.67 680.019 L1625.11 680.019 L1624.56 680.019 L1624 680.019 L1623.44 680.019 L1622.88 680.019 L1622.32 680.019 L1621.76 680.019 L1621.2 680.019 L1620.64 680.019 L1620.08 680.019 L1619.52 680.019 L1618.96 680.019 L1618.4 680.019 L1617.84 680.019 L1617.29 680.019 L1616.73 680.019 L1616.17 680.019 L1615.61 680.019 L1615.05 680.019 L1614.49 680.019 L1613.93 680.019 L1613.37 680.019 L1612.81 680.019 L1612.25 680.019 L1611.69 680.019 L1611.13 680.019 L1610.57 680.019 L1610.02 680.019 L1609.46 680.019 L1608.9 680.019 L1608.34 680.019 L1607.78 680.019 L1607.22 680.019 L1606.66 680.019 L1606.1 680.019 L1605.54 680.019 L1604.98 680.019 L1604.42 680.019 L1603.86 680.019 L1603.3 680.019 L1602.74 680.019 L1602.19 680.019 L1601.63 680.019 L1601.07 680.019 L1600.51 680.019 L1599.95 680.019 L1599.39 680.019 L1598.83 680.019 L1598.27 680.019 L1597.71 680.019 L1597.15 680.019 L1596.59 680.019 L1596.03 680.019 L1595.47 680.019 L1594.92 680.019 L1594.36 680.019 L1593.8 680.019 L1593.24 680.019 L1592.68 680.019 L1592.12 680.019 L1591.56 680.019 L1591 680.019 L1590.44 680.019 L1589.88 680.019 L1589.32 680.019 L1588.76 680.019 L1588.2 680.019 L1587.65 680.019 L1587.09 680.019 L1586.53 680.019 L1585.97 680.019 L1585.41 680.019 L1584.85 680.019 L1584.29 680.019 L1583.73 680.019 L1583.17 680.019 L1582.61 680.019 L1582.05 680.019 L1581.49 680.019 L1580.93 680.019 L1580.37 680.019 L1579.82 680.019 L1579.26 680.019 L1578.7 680.019 L1578.14 680.019 L1577.58 680.019 L1577.02 680.019 L1576.46 680.019 L1575.9 680.019 L1575.34 680.019 L1574.78 680.019 L1574.22 680.019 L1573.66 680.019 L1573.1 680.019 L1572.55 680.019 L1571.99 680.019 L1571.43 680.019 L1570.87 680.019 L1570.31 680.019 L1569.75 680.019 L1569.19 680.019 L1568.63 680.019 L1568.07 680.019 L1567.51 680.019 L1566.95 680.019 L1566.39 680.019 L1565.83 680.019 L1565.28 680.019 L1564.72 680.019 L1564.16 680.019 L1563.6 680.019 L1563.04 680.019 L1562.48 680.019 L1561.92 680.019 L1561.36 680.019 L1560.8 680.019 L1560.24 680.019 L1559.68 680.019 L1559.12 680.019 L1558.56 680.019 L1558 680.019 L1557.45 680.019 L1556.89 680.019 L1556.33 680.019 L1555.77 680.019 L1555.21 680.019 L1554.65 680.019 L1554.09 680.019 L1553.53 680.019 L1552.97 680.019 L1552.41 680.019 L1551.85 680.019 L1551.29 680.019 L1550.73 680.019 L1550.18 680.019 L1549.62 680.019 L1549.06 680.019 L1548.5 680.019 L1547.94 680.019 L1547.38 680.019 L1546.82 680.019 L1546.26 680.019 L1545.7 680.019 L1545.14 680.019 L1544.58 680.019 L1544.02 680.019 L1543.46 680.019 L1542.9 680.019 L1542.35 680.019 L1541.79 680.019 L1541.23 680.019 L1540.67 680.019 L1540.11 680.019 L1539.55 680.019 L1538.99 680.019 L1538.43 680.019 L1537.87 680.019 L1537.31 680.019 L1536.75 680.019 L1536.19 680.019 L1535.63 680.019 L1535.08 680.019 L1534.52 680.019 L1533.96 680.019 L1533.4 680.019 L1532.84 680.019 L1532.28 680.019 L1531.72 680.019 L1531.16 680.019 L1530.6 680.019 L1530.04 680.019 L1529.48 680.019 L1528.92 680.019 L1528.36 680.019 L1527.81 680.019 L1527.25 680.019 L1526.69 680.019 L1526.13 680.019 L1525.57 680.019 L1525.01 680.019 L1524.45 680.019 L1523.89 680.019 L1523.33 680.019 L1522.77 680.019 L1522.21 680.019 L1521.65 680.019 L1521.09 680.019 L1520.53 680.019 L1519.98 680.019 L1519.42 680.019 L1518.86 680.019 L1518.3 680.019 L1517.74 680.019 L1517.18 680.019 L1516.62 680.019 L1516.06 680.019 L1515.5 680.019 L1514.94 680.019 L1514.38 680.019 L1513.82 680.019 L1513.26 680.019 L1512.71 680.019 L1512.15 680.019 L1511.59 680.019 L1511.03 680.019 L1510.47 680.019 L1509.91 680.019 L1509.35 680.019 L1508.79 680.019 L1508.23 680.019 L1507.67 680.019 L1507.11 680.019 L1506.55 680.019 L1505.99 680.019 L1505.44 680.019 L1504.88 680.019 L1504.32 680.019 L1503.76 680.019 L1503.2 680.019 L1502.64 680.019 L1502.08 680.019 L1501.52 680.019 L1500.96 680.019 L1500.4 680.019 L1499.84 680.019 L1499.28 680.019 L1498.72 680.019 L1498.16 680.019 L1497.61 680.019 L1497.05 680.019 L1496.49 680.019 L1495.93 680.019 L1495.37 680.019 L1494.81 680.019 L1494.25 680.019 L1493.69 680.019 L1493.13 680.019 L1492.57 680.019 L1492.01 680.019 L1491.45 680.019 L1490.89 680.019 L1490.34 680.019 L1489.78 680.019 L1489.22 680.019 L1488.66 680.019 L1488.1 680.019 L1487.54 680.019 L1486.98 680.019 L1486.42 680.019 L1485.86 680.019 L1485.3 680.019 L1484.74 680.019 L1484.18 680.019 L1483.62 680.019 L1483.07 680.019 L1482.51 680.019 L1481.95 680.019 L1481.39 680.019 L1480.83 680.019 L1480.27 680.019 L1479.71 680.019 L1479.15 680.019 L1478.59 680.019 L1478.03 680.019 L1477.47 680.019 L1476.91 680.019 L1476.35 680.019 L1475.79 680.019 L1475.24 680.019 L1474.68 680.019 L1474.12 680.019 L1473.56 680.019 L1473 680.019 L1472.44 680.019 L1471.88 680.019 L1471.32 680.019 L1470.76 680.019 L1470.2 680.019 L1469.64 680.019 L1469.08 680.019 L1468.52 680.019 L1467.97 680.019 L1467.41 680.019 L1466.85 680.019 L1466.29 680.019 L1465.73 680.019 L1465.17 680.019 L1464.61 680.019 L1464.05 680.019 L1463.49 680.019 L1462.93 680.019 L1462.37 680.019 L1461.81 680.019 L1461.25 680.019 L1460.7 680.019 L1460.14 680.019 L1459.58 680.019 L1459.02 680.019 L1458.46 680.019 L1457.9 680.019 L1457.34 680.019 L1456.78 680.019 L1456.22 680.019 L1455.66 680.019 L1455.1 680.019 L1454.54 680.019 L1453.98 680.019 L1453.42 680.019 L1452.87 680.019 L1452.31 680.019 L1451.75 680.019 L1451.19 680.019 L1450.63 680.019 L1450.07 680.019 L1449.51 680.019 L1448.95 680.019 L1448.39 680.019 L1447.83 680.019 L1447.27 680.019 L1446.71 680.019 L1446.15 680.019 L1445.6 680.019 L1445.04 680.019 L1444.48 680.019 L1443.92 680.019 L1443.36 680.019 L1442.8 680.019 L1442.24 680.019 L1441.68 680.019 L1441.12 680.019 L1440.56 680.019 L1440 680.019 L1439.44 680.019 L1438.88 680.019 L1438.33 680.019 L1437.77 680.019 L1437.21 680.019 L1436.65 680.019 L1436.09 680.019 L1435.53 680.019 L1434.97 680.019 L1434.41 680.019 L1433.85 680.019 L1433.29 680.019 L1432.73 680.019 L1432.17 680.019 L1431.61 680.019 L1431.05 680.019 L1430.5 680.019 L1429.94 680.019 L1429.38 680.019 L1428.82 680.019 L1428.26 680.019 L1427.7 680.019 L1427.14 680.019 L1426.58 680.019 L1426.02 680.019 L1425.46 680.019 L1424.9 680.019 L1424.34 680.019 L1423.78 680.019 L1423.23 680.019 L1422.67 680.019 L1422.11 680.019 L1421.55 680.019 L1420.99 680.019 L1420.43 680.019 L1419.87 680.019 L1419.31 680.019 L1418.75 680.019 L1418.19 680.019 L1417.63 680.019 L1417.07 680.019 L1416.51 680.019 L1415.95 680.019 L1415.4 680.019 L1414.84 680.019 L1414.28 680.019 L1413.72 680.019 L1413.16 680.019 L1412.6 680.019 L1412.04 680.019 L1411.48 680.019 L1410.92 680.019 L1410.36 680.019 L1409.8 680.019 L1409.24 680.019 L1408.68 680.019 L1408.13 680.019 L1407.57 680.019 L1407.01 680.019 L1406.45 680.019 L1405.89 680.019 L1405.33 680.019 L1404.77 680.019 L1404.21 680.019 L1403.65 680.019 L1403.09 680.019 L1402.53 680.019 L1401.97 680.019 L1401.41 680.019 L1400.86 680.019 L1400.3 680.019 L1399.74 680.019 L1399.18 680.019 L1398.62 680.019 L1398.06 680.019 L1397.5 680.019 L1396.94 680.019 L1396.38 680.019 L1395.82 680.019 L1395.26 680.019 L1394.7 680.019 L1394.14 680.019 L1393.58 680.019 L1393.03 680.019 L1392.47 680.019 L1391.91 680.019 L1391.35 680.019 L1390.79 680.019 L1390.23 680.019 L1389.67 680.019 L1389.11 680.019 L1388.55 680.019 L1387.99 680.019 L1387.43 680.019 L1386.87 680.019 L1386.31 680.019 L1385.76 680.019 L1385.2 680.019 L1384.64 680.019 L1384.08 680.019 L1383.52 680.019 L1382.96 680.019 L1382.4 680.019 L1381.84 680.019 L1381.28 680.019 L1380.72 680.019 L1380.16 680.019 L1379.6 680.019 L1379.04 680.019 L1378.49 680.019 L1377.93 680.019 L1377.37 680.019 L1376.81 680.019 L1376.25 680.019 L1375.69 680.019 L1375.13 680.019 L1374.57 680.019 L1374.01 680.019 L1373.45 680.019 L1372.89 680.019 L1372.33 680.019 L1371.77 680.019 L1371.21 680.019 L1370.66 680.019 L1370.1 680.019 L1369.54 680.019 L1368.98 680.019 L1368.42 680.019 L1367.86 680.019 L1367.3 680.019 L1366.74 680.019 L1366.18 680.019 L1365.62 680.019 L1365.06 680.019 L1364.5 680.019 L1363.94 680.019 L1363.39 680.019 L1362.83 680.019 L1362.27 680.019 L1361.71 680.019 L1361.15 680.019 L1360.59 680.019 L1360.03 680.019 L1359.47 680.019 L1358.91 680.019 L1358.35 680.019 L1357.79 680.019 L1357.23 680.019 L1356.67 680.019 L1356.12 680.019 L1355.56 680.019 L1355 680.019 L1354.44 680.019 L1353.88 680.019 L1353.32 680.019 L1352.76 680.019 L1352.2 680.019 L1351.64 680.019 L1351.08 680.019 L1350.52 680.019 L1349.96 680.019 L1349.4 680.019 L1348.84 680.019 L1348.29 680.019 L1347.73 680.019 L1347.17 680.019 L1346.61 680.019 L1346.05 680.019 L1345.49 680.019 L1344.93 680.019 L1344.37 680.019 L1343.81 680.019 L1343.25 680.019 L1342.69 680.019 L1342.13 680.019 L1341.57 680.019 L1341.02 680.019 L1340.46 680.019 L1339.9 680.019 L1339.34 680.019 L1338.78 680.019 L1338.22 680.019 L1337.66 680.019 L1337.1 680.019 L1336.54 680.019 L1335.98 680.019 L1335.42 680.019 L1334.86 680.019 L1334.3 680.019 L1333.75 680.019 L1333.19 680.019 L1332.63 680.019 L1332.07 680.019 L1331.51 680.019 L1330.95 680.019 L1330.39 680.019 L1329.83 680.019 L1329.27 680.019 L1328.71 680.019 L1328.15 680.019 L1327.59 680.019 L1327.03 680.019 L1326.47 680.019 L1325.92 680.019 L1325.36 680.019 L1324.8 680.019 L1324.24 680.019 L1323.68 680.019 L1323.12 680.019 L1322.56 680.019 L1322 680.019 L1321.44 680.019 L1320.88 680.019 L1320.32 680.019 L1319.76 680.019 L1319.2 680.019 L1318.65 680.019 L1318.09 680.019 L1317.53 680.019 L1316.97 680.019 L1316.41 680.019 L1315.85 680.019 L1315.29 680.019 L1314.73 680.019 L1314.17 680.019 L1313.61 680.019 L1313.05 680.019 L1312.49 680.019 L1311.93 680.019 L1311.38 680.019 L1310.82 680.019 L1310.26 680.019 L1309.7 680.019 L1309.14 680.019 L1308.58 680.019 L1308.02 680.019 L1307.46 680.019 L1306.9 680.019 L1306.34 680.019 L1305.78 680.019 L1305.22 680.019 L1304.66 680.019 L1304.1 680.019 L1303.55 680.019 L1302.99 680.019 L1302.43 680.019 L1301.87 680.019 L1301.31 680.019 L1300.75 680.019 L1300.19 680.019 L1299.63 680.019 L1299.07 680.019 L1298.51 680.019 L1297.95 680.019 L1297.39 680.019 L1296.83 680.019 L1296.28 680.019 L1295.72 680.019 L1295.16 680.019 L1294.6 680.019 L1294.04 680.019 L1293.48 680.019 L1292.92 680.019 L1292.36 680.019 L1291.8 680.019 L1291.24 680.019 L1290.68 680.019 L1290.12 680.019 L1289.56 680.019 L1289 680.019 L1288.45 680.019 L1287.89 680.019 L1287.33 680.019 L1286.77 680.019 L1286.21 680.019 L1285.65 680.019 L1285.09 680.019 L1284.53 680.019 L1283.97 680.019 L1283.41 680.019 L1282.85 680.019 L1282.29 680.019 L1281.73 680.019 L1281.18 680.019 L1280.62 680.019 L1280.06 680.019 L1279.5 680.019 L1278.94 680.019 L1278.38 680.019 L1277.82 680.019 L1277.26 680.019 L1276.7 680.019 L1276.14 680.019 L1275.58 680.019 L1275.02 680.019 L1274.46 680.019 L1273.91 680.019 L1273.35 680.019 L1272.79 680.019 L1272.23 680.019 L1271.67 680.019 L1271.11 680.019 L1270.55 680.019 L1269.99 680.019 L1269.43 680.019 L1268.87 680.019 L1268.31 680.019 L1267.75 680.019 L1267.19 680.019 L1266.63 680.019 L1266.08 680.019 L1265.52 680.019 L1264.96 680.019 L1264.4 680.019 L1263.84 680.019 L1263.28 680.019 L1262.72 680.019 L1262.16 680.019 L1261.6 680.019 L1261.04 680.019 L1260.48 680.019 L1259.92 680.019 L1259.36 680.019 L1258.81 680.019 L1258.25 680.019 L1257.69 680.019 L1257.13 680.019 L1256.57 680.019 L1256.01 680.019 L1255.45 680.019 L1254.89 680.019 L1254.33 680.019 L1253.77 680.019 L1253.21 680.019 L1252.65 680.019 L1252.09 680.019 L1251.54 680.019 L1250.98 680.019 L1250.42 680.019 L1249.86 680.019 L1249.3 680.019 L1248.74 680.019 L1248.18 680.019 L1247.62 680.019 L1247.06 680.019 L1246.5 680.019 L1245.94 680.019 L1245.38 680.019 L1244.82 680.019 L1244.26 680.019 L1243.71 680.019 L1243.15 680.019 L1242.59 680.019 L1242.03 680.019 L1241.47 680.019 L1240.91 680.019 L1240.35 680.019 L1239.79 680.019 L1239.23 680.019 L1238.67 680.019 L1238.11 680.019 L1237.55 680.019 L1236.99 680.019 L1236.44 680.019 L1235.88 680.019 L1235.32 680.019 L1234.76 680.019 L1234.2 680.019 L1233.64 680.019 L1233.08 680.019 L1232.52 680.019 L1231.96 680.019 L1231.4 680.019 L1230.84 680.019 L1230.28 680.019 L1229.72 680.019 L1229.17 680.019 L1228.61 680.019 L1228.05 680.019 L1227.49 680.019 L1226.93 680.019 L1226.37 680.019 L1225.81 680.019 L1225.25 680.019 L1224.69 680.019 L1224.13 680.019 L1223.57 680.019 L1223.01 680.019 L1222.45 680.019 L1221.89 680.019 L1221.34 680.019 L1220.78 680.019 L1220.22 680.019 L1219.66 680.019 L1219.1 680.019 L1218.54 680.019 L1217.98 680.019 L1217.42 680.019 L1216.86 680.019 L1216.3 680.019 L1215.74 680.019 L1215.18 680.019 L1214.62 680.019 L1214.07 680.019 L1213.51 680.019 L1212.95 680.019 L1212.39 680.019 L1211.83 680.019 L1211.27 680.019 L1210.71 680.019 L1210.15 680.019 L1209.59 680.019 L1209.03 680.019 L1208.47 680.019 L1207.91 680.019 L1207.35 680.019 L1206.8 680.019 L1206.24 680.019 L1205.68 680.019 L1205.12 680.019 L1204.56 680.019 L1204 680.019 L1203.44 680.019 L1202.88 680.019 L1202.32 680.019 L1201.76 680.019 L1201.2 680.019 L1200.64 680.019 L1200.08 680.019 L1199.52 680.019 L1198.97 680.019 L1198.41 680.019 L1197.85 680.019 L1197.29 680.019 L1196.73 680.019 L1196.17 680.019 L1195.61 680.019 L1195.05 680.019 L1194.49 680.019 L1193.93 680.019 L1193.37 680.019 L1192.81 680.019 L1192.25 680.019 L1191.7 680.019 L1191.14 680.019 L1190.58 680.019 L1190.02 680.019 L1189.46 680.019 L1188.9 680.019 L1188.34 680.019 L1187.78 680.019 L1187.22 680.019 L1186.66 680.019 L1186.1 680.019 L1185.54 680.019 L1184.98 680.019 L1184.43 680.019 L1183.87 680.019 L1183.31 680.019 L1182.75 680.019 L1182.19 680.019 L1181.63 680.019 L1181.07 680.019 L1180.51 680.019 L1179.95 680.019 L1179.39 680.019 L1178.83 680.019 L1178.27 680.019 L1177.71 680.019 L1177.15 680.019 L1176.6 680.019 L1176.04 680.019 L1175.48 680.019 L1174.92 680.019 L1174.36 680.019 L1173.8 680.019 L1173.24 680.019 L1172.68 680.019 L1172.12 680.019 L1171.56 680.019 L1171 680.019 L1170.44 680.019 L1169.88 680.019 L1169.33 680.019 L1168.77 680.019 L1168.21 680.019 L1167.65 680.019 L1167.09 680.019 L1166.53 680.019 L1165.97 680.019 L1165.41 680.019 L1164.85 680.019 L1164.29 680.019 L1163.73 680.019 L1163.17 680.019 L1162.61 680.019 L1162.05 680.019 L1161.5 680.019 L1160.94 680.019 L1160.38 680.019 L1159.82 680.019 L1159.26 680.019 L1158.7 680.019 L1158.14 680.019 L1157.58 680.019 L1157.02 680.019 L1156.46 680.019 L1155.9 680.019 L1155.34 680.019 L1154.78 680.019 L1154.23 680.019 L1153.67 680.019 L1153.11 680.019 L1152.55 680.019 L1151.99 680.019 L1151.43 680.019 L1150.87 680.019 L1150.31 680.019 L1149.75 680.019 L1149.19 680.019 L1148.63 680.019 L1148.07 680.019 L1147.51 680.019 L1146.96 680.019 L1146.4 680.019 L1145.84 680.019 L1145.28 680.019 L1144.72 680.019 L1144.16 680.019 L1143.6 680.019 L1143.04 680.019 L1142.48 680.019 L1141.92 680.019 L1141.36 680.019 L1140.8 680.019 L1140.24 680.019 L1139.68 680.019 L1139.13 680.019 L1138.57 680.019 L1138.01 680.019 L1137.45 680.019 L1136.89 680.019 L1136.33 680.019 L1135.77 680.019 L1135.21 680.019 L1134.65 680.019 L1134.09 680.019 L1133.53 680.019 L1132.97 680.019 L1132.41 680.019 L1131.86 680.019 L1131.3 680.019 L1130.74 680.019 L1130.18 680.019 L1129.62 680.019 L1129.06 680.019 L1128.5 680.019 L1127.94 680.019 L1127.38 680.019 L1126.82 680.019 L1126.26 680.019 L1125.7 680.019 L1125.14 680.019 L1124.59 680.019 L1124.03 680.019 L1123.47 680.019 L1122.91 680.019 L1122.35 680.019 L1121.79 680.019 L1121.23 680.019 L1120.67 680.019 L1120.11 680.019 L1119.55 680.019 L1118.99 680.019 L1118.43 680.019 L1117.87 680.019 L1117.31 680.019 L1116.76 680.019 L1116.2 680.019 L1115.64 680.019 L1115.08 680.019 L1114.52 680.019 L1113.96 680.019 L1113.4 680.019 L1112.84 680.019 L1112.28 680.019 L1111.72 680.019 L1111.16 680.019 L1110.6 680.019 L1110.04 680.019 L1109.49 680.019 L1108.93 680.019 L1108.37 680.019 L1107.81 680.019 L1107.25 680.019 L1106.69 680.019 L1106.13 680.019 L1105.57 680.019 L1105.01 680.019 L1104.45 680.019 L1103.89 680.019 L1103.33 680.019 L1102.77 680.019 L1102.22 680.019 L1101.66 680.019 L1101.1 680.019 L1100.54 680.019 L1099.98 680.019 L1099.42 680.019 L1098.86 680.019 L1098.3 680.019 L1097.74 680.019 L1097.18 680.019 L1096.62 680.019 L1096.06 680.019 L1095.5 680.019 L1094.94 680.019 L1094.39 680.019 L1093.83 680.019 L1093.27 680.019 L1092.71 680.019 L1092.15 680.019 L1091.59 680.019 L1091.03 680.019 L1090.47 680.019 L1089.91 680.019 L1089.35 680.019 L1088.79 680.019 L1088.23 680.019 L1087.67 680.019 L1087.12 680.019 L1086.56 680.019 L1086 680.019 L1085.44 680.019 L1084.88 680.019 L1084.32 680.019 L1083.76 680.019 L1083.2 680.019 L1082.64 680.019 L1082.08 680.019 L1081.52 680.019 L1080.96 680.019 L1080.4 680.019 L1079.85 680.019 L1079.29 680.019 L1078.73 680.019 L1078.17 680.019 L1077.61 680.019 L1077.05 680.019 L1076.49 680.019 L1075.93 680.019 L1075.37 680.019 L1074.81 680.019 L1074.25 680.019 L1073.69 680.019 L1073.13 680.019 L1072.57 680.019 L1072.02 680.019 L1071.46 680.019 L1070.9 680.019 L1070.34 680.019 L1069.78 680.019 L1069.22 680.019 L1068.66 680.019 L1068.1 680.019 L1067.54 680.019 L1066.98 680.019 L1066.42 680.019 L1065.86 680.019 L1065.3 680.019 L1064.75 680.019 L1064.19 680.019 L1063.63 680.019 L1063.07 680.019 L1062.51 680.019 L1061.95 680.019 L1061.39 680.019 L1060.83 680.019 L1060.27 680.019 L1059.71 680.019 L1059.15 680.019 L1058.59 680.019 L1058.03 680.019 L1057.48 680.019 L1056.92 680.019 L1056.36 680.019 L1055.8 680.019 L1055.24 680.019 L1054.68 680.019 L1054.12 680.019 L1053.56 680.019 L1053 680.019 L1052.44 680.019 L1051.88 680.019 L1051.32 680.019 L1050.76 680.019 L1050.2 680.019 L1049.65 680.019 L1049.09 680.019 L1048.53 680.019 L1047.97 680.019 L1047.41 680.019 L1046.85 680.019 L1046.29 680.019 L1045.73 680.019 L1045.17 680.019 L1044.61 680.019 L1044.05 680.019 L1043.49 680.019 L1042.93 680.019 L1042.38 680.019 L1041.82 680.019 L1041.26 680.019 L1040.7 680.019 L1040.14 680.019 L1039.58 680.019 L1039.02 680.019 L1038.46 680.019 L1037.9 680.019 L1037.34 680.019 L1036.78 680.019 L1036.22 680.019 L1035.66 680.019 L1035.1 680.019 L1034.55 680.019 L1033.99 680.019 L1033.43 680.019 L1032.87 680.019 L1032.31 680.019 L1031.75 680.019 L1031.19 680.019 L1030.63 680.019 L1030.07 680.019 L1029.51 680.019 L1028.95 680.019 L1028.39 680.019 L1027.83 680.019 L1027.28 680.019 L1026.72 680.019 L1026.16 680.019 L1025.6 680.019 L1025.04 680.019 L1024.48 680.019 L1023.92 680.019 L1023.36 680.019 L1022.8 680.019 L1022.24 680.019 L1021.68 680.019 L1021.12 680.019 L1020.56 680.019 L1020.01 680.019 L1019.45 680.019 L1018.89 680.019 L1018.33 680.019 L1017.77 680.019 L1017.21 680.019 L1016.65 680.019 L1016.09 680.019 L1015.53 680.019 L1014.97 680.019 L1014.41 680.019 L1013.85 680.019 L1013.29 680.019 L1012.73 680.019 L1012.18 680.019 L1011.62 680.019 L1011.06 680.019 L1010.5 680.019 L1009.94 680.019 L1009.38 680.019 L1008.82 680.019 L1008.26 680.019 L1007.7 680.019 L1007.14 680.019 L1006.58 680.019 L1006.02 680.019 L1005.46 680.019 L1004.91 680.019 L1004.35 680.019 L1003.79 680.019 L1003.23 680.019 L1002.67 680.019 L1002.11 680.019 L1001.55 680.019 L1000.99 680.019 L1000.43 680.019 L999.872 680.019 L999.313 680.019 L998.754 680.019 L998.194 680.019 L997.635 680.019 L997.076 680.019 L996.517 680.019 L995.957 680.019 L995.398 680.019 L994.839 680.019 L994.28 680.019 L993.72 680.019 L993.161 680.019 L992.602 680.019 L992.043 680.019 L991.483 680.019 L990.924 680.019 L990.365 680.019 L989.806 680.019 L989.246 680.019 L988.687 680.019 L988.128 680.019 L987.569 680.019 L987.009 680.019 L986.45 680.019 L985.891 680.019 L985.332 680.019 L984.772 680.019 L984.213 680.019 L983.654 680.019 L983.095 680.019 L982.535 680.019 L981.976 680.019 L981.417 680.019 L980.858 680.019 L980.298 680.019 L979.739 680.019 L979.18 680.019 L978.621 680.019 L978.061 680.019 L977.502 680.019 L976.943 680.019 L976.384 680.019 L975.824 680.019 L975.265 680.019 L974.706 680.019 L974.147 680.019 L973.587 680.019 L973.028 680.019 L972.469 680.019 L971.91 680.019 L971.35 680.019 L970.791 680.019 L970.232 680.019 L969.673 680.019 L969.113 680.019 L968.554 680.019 L967.995 680.019 L967.436 680.019 L966.876 680.019 L966.317 680.019 L965.758 680.019 L965.199 680.019 L964.639 680.019 L964.08 680.019 L963.521 680.019 L962.962 680.019 L962.402 680.019 L961.843 680.019 L961.284 680.019 L960.725 680.019 L960.165 680.019 L959.606 680.019 L959.047 680.019 L958.488 680.019 L957.928 680.019 L957.369 680.019 L956.81 680.019 L956.251 680.019 L955.691 680.019 L955.132 680.019 L954.573 680.019 L954.014 680.019 L953.454 680.019 L952.895 680.019 L952.336 680.019 L951.777 680.019 L951.217 680.019 L950.658 680.019 L950.099 680.019 L949.54 680.019 L948.98 680.019 L948.421 680.019 L947.862 680.019 L947.303 680.019 L946.743 680.019 L946.184 680.019 L945.625 680.019 L945.066 680.019 L944.506 680.019 L943.947 680.019 L943.388 680.019 L942.829 680.019 L942.269 680.019 L941.71 680.019 L941.151 680.019 L940.592 680.019 L940.032 680.019 L939.473 680.019 L938.914 680.019 L938.355 680.019 L937.795 680.019 L937.236 680.019 L936.677 680.019 L936.118 680.019 L935.558 680.019 L934.999 680.019 L934.44 680.019 L933.881 680.019 L933.321 680.019 L932.762 680.019 L932.203 680.019 L931.644 680.019 L931.084 680.019 L930.525 680.019 L929.966 680.019 L929.406 680.019 L928.847 680.019 L928.288 680.019 L927.729 680.019 L927.169 680.019 L926.61 680.019 L926.051 680.019 L925.492 680.019 L924.932 680.019 L924.373 680.019 L923.814 680.019 L923.255 680.019 L922.695 680.019 L922.136 680.019 L921.577 680.019 L921.018 680.019 L920.458 680.019 L919.899 680.019 L919.34 680.019 L918.781 680.019 L918.221 680.019 L917.662 680.019 L917.103 680.019 L916.544 680.019 L915.984 680.019 L915.425 680.019 L914.866 680.019 L914.307 680.019 L913.747 680.019 L913.188 680.019 L912.629 680.019 L912.07 680.019 L911.51 680.019 L910.951 680.019 L910.392 680.019 L909.833 680.019 L909.273 680.019 L908.714 680.019 L908.155 680.019 L907.596 680.019 L907.036 680.019 L906.477 680.019 L905.918 680.019 L905.359 680.019 L904.799 680.019 L904.24 680.019 L903.681 680.019 L903.122 680.019 L902.562 680.019 L902.003 680.019 L901.444 680.019 L900.885 680.019 L900.325 680.019 L899.766 680.019 L899.207 680.019 L898.648 680.019 L898.088 680.019 L897.529 680.019 L896.97 680.019 L896.411 680.019 L895.851 680.019 L895.292 680.019 L894.733 680.019 L894.174 680.019 L893.614 680.019 L893.055 680.019 L892.496 680.019 L891.937 680.019 L891.377 680.019 L890.818 680.019 L890.259 680.019 L889.7 680.019 L889.14 680.019 L888.581 680.019 L888.022 680.019 L887.463 680.019 L886.903 680.019 L886.344 680.019 L885.785 680.019 L885.226 680.019 L884.666 680.019 L884.107 680.019 L883.548 680.019 L882.989 680.019 L882.429 680.019 L881.87 680.019 L881.311 680.019 L880.752 680.019 L880.192 680.019 L879.633 680.019 L879.074 680.019 L878.515 680.019 L877.955 680.019 L877.396 680.019 L876.837 680.019 L876.278 680.019 L875.718 680.019 L875.159 680.019 L874.6 680.019 L874.041 680.019 L873.481 680.019 L872.922 680.019 L872.363 680.019 L871.804 680.019 L871.244 680.019 L870.685 680.019 L870.126 680.019 L869.567 680.019 L869.007 680.019 L868.448 680.019 L867.889 680.019 L867.33 680.019 L866.77 680.019 L866.211 680.019 L865.652 680.019 L865.093 680.019 L864.533 680.019 L863.974 680.019 L863.415 680.019 L862.856 680.019 L862.296 680.019 L861.737 680.019 L861.178 680.019 L860.619 680.019 L860.059 680.019 L859.5 680.019 L858.941 680.019 L858.382 680.019 L857.822 680.019 L857.263 680.019 L856.704 680.019 L856.145 680.019 L855.585 680.019 L855.026 680.019 L854.467 680.019 L853.908 680.019 L853.348 680.019 L852.789 680.019 L852.23 680.019 L851.671 680.019 L851.111 680.019 L850.552 680.019 L849.993 680.019 L849.434 680.019 L848.874 680.019 L848.315 680.019 L847.756 680.019 L847.197 680.019 L846.637 680.019 L846.078 680.019 L845.519 680.019 L844.96 680.019 L844.4 680.019 L843.841 680.019 L843.282 680.019 L842.723 680.019 L842.163 680.019 L841.604 680.019 L841.045 680.019 L840.486 680.019 L839.926 680.019 L839.367 680.019 L838.808 680.019 L838.249 680.019 L837.689 680.019 L837.13 680.019 L836.571 680.019 L836.012 680.019 L835.452 680.019 L834.893 680.019 L834.334 680.019 L833.775 680.019 L833.215 680.019 L832.656 680.019 L832.097 680.019 L831.538 680.019 L830.978 680.019 L830.419 680.019 L829.86 680.019 L829.301 680.019 L828.741 680.019 L828.182 680.019 L827.623 680.019 L827.064 680.019 L826.504 680.019 L825.945 680.019 L825.386 680.019 L824.827 680.019 L824.267 680.019 L823.708 680.019 L823.149 680.019 L822.59 680.019 L822.03 680.019 L821.471 680.019 L820.912 680.019 L820.353 680.019 L819.793 680.019 L819.234 680.019 L818.675 680.019 L818.116 680.019 L817.556 680.019 L816.997 680.019 L816.438 680.019 L815.879 680.019 L815.319 680.019 L814.76 680.019 L814.201 680.019 L813.642 680.019 L813.082 680.019 L812.523 680.019 L811.964 680.019 L811.405 680.019 L810.845 680.019 L810.286 680.019 L809.727 680.019 L809.168 680.019 L808.608 680.019 L808.049 680.019 L807.49 680.019 L806.931 680.019 L806.371 680.019 L805.812 680.019 L805.253 680.019 L804.693 680.019 L804.134 680.019 L803.575 680.019 L803.016 680.019 L802.456 680.019 L801.897 680.019 L801.338 680.019 L800.779 680.019 L800.219 680.019 L799.66 680.019 L799.101 680.019 L798.542 680.019 L797.982 680.019 L797.423 680.019 L796.864 680.019 L796.305 680.019 L795.745 680.019 L795.186 680.019 L794.627 680.019 L794.068 680.019 L793.508 680.019 L792.949 680.019 L792.39 680.019 L791.831 680.019 L791.271 680.019 L790.712 680.019 L790.153 680.019 L789.594 680.019 L789.034 680.019 L788.475 680.019 L787.916 680.019 L787.357 680.019 L786.797 680.019 L786.238 680.019 L785.679 680.019 L785.12 680.019 L784.56 680.019 L784.001 680.019 L783.442 680.019 L782.883 680.019 L782.323 680.019 L781.764 680.019 L781.205 680.019 L780.646 680.019 L780.086 680.019 L779.527 680.019 L778.968 680.019 L778.409 680.019 L777.849 680.019 L777.29 680.019 L776.731 680.019 L776.172 680.019 L775.612 680.019 L775.053 680.019 L774.494 680.019 L773.935 680.019 L773.375 680.019 L772.816 680.019 L772.257 680.019 L771.698 680.019 L771.138 680.019 L770.579 680.019 L770.02 680.019 L769.461 680.019 L768.901 680.019 L768.342 680.019 L767.783 680.019 L767.224 680.019 L766.664 680.019 L766.105 680.019 L765.546 680.019 L764.987 680.019 L764.427 680.019 L763.868 680.019 L763.309 680.019 L762.75 680.019 L762.19 680.019 L761.631 680.019 L761.072 680.019 L760.513 680.019 L759.953 680.019 L759.394 680.019 L758.835 680.019 L758.276 680.019 L757.716 680.019 L757.157 680.019 L756.598 680.019 L756.039 680.019 L755.479 680.019 L754.92 680.019 L754.361 680.019 L753.802 680.019 L753.242 680.019 L752.683 680.019 L752.124 680.019 L751.565 680.019 L751.005 680.019 L750.446 680.019 L749.887 680.019 L749.328 680.019 L748.768 680.019 L748.209 680.019 L747.65 680.019 L747.091 680.019 L746.531 680.019 L745.972 680.019 L745.413 680.019 L744.854 680.019 L744.294 680.019 L743.735 680.019 L743.176 680.019 L742.617 680.019 L742.057 680.019 L741.498 680.019 L740.939 680.019 L740.38 680.019 L739.82 680.019 L739.261 680.019 L738.702 680.019 L738.143 680.019 L737.583 680.019 L737.024 680.019 L736.465 680.019 L735.906 680.019 L735.346 680.019 L734.787 680.019 L734.228 680.019 L733.669 680.019 L733.109 680.019 L732.55 680.019 L731.991 680.019 L731.432 680.019 L730.872 680.019 L730.313 680.019 L729.754 680.019 L729.195 680.019 L728.635 680.019 L728.076 680.019 L727.517 680.019 L726.958 680.019 L726.398 680.019 L725.839 680.019 L725.28 680.019 L724.721 680.019 L724.161 680.019 L723.602 680.019 L723.043 680.019 L722.484 680.019 L721.924 680.019 L721.365 680.019 L720.806 680.019 L720.247 680.019  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,685.472 720.806,685.472 721.365,685.472 721.924,685.472 722.484,685.472 723.043,685.472 723.602,685.472 724.161,685.472 724.721,685.472 725.28,685.472 725.839,685.472 726.398,685.472 726.958,685.472 727.517,685.472 728.076,685.472 728.635,685.472 729.195,685.472 729.754,685.472 730.313,685.472 730.872,685.472 731.432,685.472 731.991,685.472 732.55,685.472 733.109,685.472 733.669,685.472 734.228,685.472 734.787,685.472 735.346,685.472 735.906,685.472 736.465,685.472 737.024,685.472 737.583,685.472 738.143,685.472 738.702,685.472 739.261,685.472 739.82,685.472 740.38,685.472 740.939,685.472 741.498,685.472 742.057,685.472 742.617,685.472 743.176,685.472 743.735,685.472 744.294,685.472 744.854,685.472 745.413,685.472 745.972,685.472 746.531,685.472 747.091,685.472 747.65,685.472 748.209,685.472 748.768,685.472 749.328,685.472 749.887,685.472 750.446,685.472 751.005,685.472 751.565,685.472 752.124,685.472 752.683,685.472 753.242,685.472 753.802,685.472 754.361,685.472 754.92,685.472 755.479,685.472 756.039,685.472 756.598,685.472 757.157,685.472 757.716,685.472 758.276,685.472 758.835,685.472 759.394,685.472 759.953,685.472 760.513,685.472 761.072,685.472 761.631,685.472 762.19,685.472 762.75,685.472 763.309,685.472 763.868,685.472 764.427,685.472 764.987,685.472 765.546,685.472 766.105,685.472 766.664,685.472 767.224,685.472 767.783,685.472 768.342,685.472 768.901,685.472 769.461,685.472 770.02,685.472 770.579,685.472 771.138,685.472 771.698,685.472 772.257,685.472 772.816,685.472 773.375,685.472 773.935,685.472 774.494,685.472 775.053,685.472 775.612,685.472 776.172,685.472 776.731,685.472 777.29,685.472 777.849,685.472 778.409,685.472 778.968,685.472 779.527,685.472 780.086,685.472 780.646,685.472 781.205,685.472 781.764,685.472 782.323,685.472 782.883,685.472 783.442,685.472 784.001,685.472 784.56,685.472 785.12,685.472 785.679,685.472 786.238,685.472 786.797,685.472 787.357,685.472 787.916,685.472 788.475,685.472 789.034,685.472 789.594,685.472 790.153,685.472 790.712,685.472 791.271,685.472 791.831,685.472 792.39,685.472 792.949,685.472 793.508,685.472 794.068,685.472 794.627,685.472 795.186,685.472 795.745,685.472 796.305,685.472 796.864,685.472 797.423,685.472 797.982,685.472 798.542,685.472 799.101,685.472 799.66,685.472 800.219,685.472 800.779,685.472 801.338,685.472 801.897,685.472 802.456,685.472 803.016,685.472 803.575,685.472 804.134,685.472 804.693,685.472 805.253,685.472 805.812,685.472 806.371,685.472 806.931,685.472 807.49,685.472 808.049,685.472 808.608,685.472 809.168,685.472 809.727,685.472 810.286,685.472 810.845,685.472 811.405,685.472 811.964,685.472 812.523,685.472 813.082,685.472 813.642,685.472 814.201,685.472 814.76,685.472 815.319,685.472 815.879,685.472 816.438,685.472 816.997,685.472 817.556,685.472 818.116,685.472 818.675,685.472 819.234,685.472 819.793,685.472 820.353,685.472 820.912,685.472 821.471,685.472 822.03,685.472 822.59,685.472 823.149,685.472 823.708,685.472 824.267,685.472 824.827,685.472 825.386,685.472 825.945,685.472 826.504,685.472 827.064,685.472 827.623,685.472 828.182,685.472 828.741,685.472 829.301,685.472 829.86,685.472 830.419,685.472 830.978,685.472 831.538,685.472 832.097,685.472 832.656,685.472 833.215,685.472 833.775,685.472 834.334,685.472 834.893,685.472 835.452,685.472 836.012,685.472 836.571,685.472 837.13,685.472 837.689,685.472 838.249,685.472 838.808,685.472 839.367,685.472 839.926,685.472 840.486,685.472 841.045,685.472 841.604,685.472 842.163,685.472 842.723,685.472 843.282,685.472 843.841,685.472 844.4,685.472 844.96,685.472 845.519,685.472 846.078,685.472 846.637,685.472 847.197,685.472 847.756,685.472 848.315,685.472 848.874,685.472 849.434,685.472 849.993,685.472 850.552,685.472 851.111,685.472 851.671,685.472 852.23,685.472 852.789,685.472 853.348,685.472 853.908,685.472 854.467,685.472 855.026,685.472 855.585,685.472 856.145,685.472 856.704,685.472 857.263,685.472 857.822,685.472 858.382,685.472 858.941,685.472 859.5,685.472 860.059,685.472 860.619,685.472 861.178,685.472 861.737,685.472 862.296,685.472 862.856,685.472 863.415,685.472 863.974,685.472 864.533,685.472 865.093,685.472 865.652,685.472 866.211,685.472 866.77,685.472 867.33,685.472 867.889,685.472 868.448,685.472 869.007,685.472 869.567,685.472 870.126,685.472 870.685,685.472 871.244,685.472 871.804,685.472 872.363,685.472 872.922,685.472 873.481,685.472 874.041,685.472 874.6,685.472 875.159,685.472 875.718,685.472 876.278,685.472 876.837,685.472 877.396,685.472 877.955,685.472 878.515,685.472 879.074,685.472 879.633,685.472 880.192,685.472 880.752,685.472 881.311,685.472 881.87,685.472 882.429,685.472 882.989,685.472 883.548,685.472 884.107,685.472 884.666,685.472 885.226,685.472 885.785,685.472 886.344,685.472 886.903,685.472 887.463,685.472 888.022,685.472 888.581,685.472 889.14,685.472 889.7,685.472 890.259,685.472 890.818,685.472 891.377,685.472 891.937,685.472 892.496,685.472 893.055,685.472 893.614,685.472 894.174,685.472 894.733,685.472 895.292,685.472 895.851,685.472 896.411,685.472 896.97,685.472 897.529,685.472 898.088,685.472 898.648,685.472 899.207,685.472 899.766,685.472 900.325,685.472 900.885,685.472 901.444,685.472 902.003,685.472 902.562,685.472 903.122,685.472 903.681,685.472 904.24,685.472 904.799,685.472 905.359,685.472 905.918,685.472 906.477,685.472 907.036,685.472 907.596,685.472 908.155,685.472 908.714,685.472 909.273,685.472 909.833,685.472 910.392,685.472 910.951,685.472 911.51,685.472 912.07,685.472 912.629,685.472 913.188,685.472 913.747,685.472 914.307,685.472 914.866,685.472 915.425,685.472 915.984,685.472 916.544,685.472 917.103,685.472 917.662,685.472 918.221,685.472 918.781,685.472 919.34,685.472 919.899,685.472 920.458,685.472 921.018,685.472 921.577,685.472 922.136,685.472 922.695,685.472 923.255,685.472 923.814,685.472 924.373,685.472 924.932,685.472 925.492,685.472 926.051,685.472 926.61,685.472 927.169,685.472 927.729,685.472 928.288,685.472 928.847,685.472 929.406,685.472 929.966,685.472 930.525,685.472 931.084,685.472 931.644,685.472 932.203,685.472 932.762,685.472 933.321,685.472 933.881,685.472 934.44,685.472 934.999,685.472 935.558,685.472 936.118,685.472 936.677,685.472 937.236,685.472 937.795,685.472 938.355,685.472 938.914,685.472 939.473,685.472 940.032,685.472 940.592,685.472 941.151,685.472 941.71,685.472 942.269,685.472 942.829,685.472 943.388,685.472 943.947,685.472 944.506,685.472 945.066,685.472 945.625,685.472 946.184,685.472 946.743,685.472 947.303,685.472 947.862,685.472 948.421,685.472 948.98,685.472 949.54,685.472 950.099,685.472 950.658,685.472 951.217,685.472 951.777,685.472 952.336,685.472 952.895,685.472 953.454,685.472 954.014,685.472 954.573,685.472 955.132,685.472 955.691,685.472 956.251,685.472 956.81,685.472 957.369,685.472 957.928,685.472 958.488,685.472 959.047,685.472 959.606,685.472 960.165,685.472 960.725,685.472 961.284,685.472 961.843,685.472 962.402,685.472 962.962,685.472 963.521,685.472 964.08,685.472 964.639,685.472 965.199,685.472 965.758,685.472 966.317,685.472 966.876,685.472 967.436,685.472 967.995,685.472 968.554,685.472 969.113,685.472 969.673,685.472 970.232,685.472 970.791,685.472 971.35,685.472 971.91,685.472 972.469,685.472 973.028,685.472 973.587,685.472 974.147,685.472 974.706,685.472 975.265,685.472 975.824,685.472 976.384,685.472 976.943,685.472 977.502,685.472 978.061,685.472 978.621,685.472 979.18,685.472 979.739,685.472 980.298,685.472 980.858,685.472 981.417,685.472 981.976,685.472 982.535,685.472 983.095,685.472 983.654,685.472 984.213,685.472 984.772,685.472 985.332,685.472 985.891,685.472 986.45,685.472 987.009,685.472 987.569,685.472 988.128,685.472 988.687,685.472 989.246,685.472 989.806,685.472 990.365,685.472 990.924,685.472 991.483,685.472 992.043,685.472 992.602,685.472 993.161,685.472 993.72,685.472 994.28,685.472 994.839,685.472 995.398,685.472 995.957,685.472 996.517,685.472 997.076,685.472 997.635,685.472 998.194,685.472 998.754,685.472 999.313,685.472 999.872,685.472 1000.43,685.472 1000.99,685.472 1001.55,685.472 1002.11,685.472 1002.67,685.472 1003.23,685.472 1003.79,685.472 1004.35,685.472 1004.91,685.472 1005.46,685.472 1006.02,685.472 1006.58,685.472 1007.14,685.472 1007.7,685.472 1008.26,685.472 1008.82,685.472 1009.38,685.472 1009.94,685.472 1010.5,685.472 1011.06,685.472 1011.62,685.472 1012.18,685.472 1012.73,685.472 1013.29,685.472 1013.85,685.472 1014.41,685.472 1014.97,685.472 1015.53,685.472 1016.09,685.472 1016.65,685.472 1017.21,685.472 1017.77,685.472 1018.33,685.472 1018.89,685.472 1019.45,685.472 1020.01,685.472 1020.56,685.472 1021.12,685.472 1021.68,685.472 1022.24,685.472 1022.8,685.472 1023.36,685.472 1023.92,685.472 1024.48,685.472 1025.04,685.472 1025.6,685.472 1026.16,685.472 1026.72,685.472 1027.28,685.472 1027.83,685.472 1028.39,685.472 1028.95,685.472 1029.51,685.472 1030.07,685.472 1030.63,685.472 1031.19,685.472 1031.75,685.472 1032.31,685.472 1032.87,685.472 1033.43,685.472 1033.99,685.472 1034.55,685.472 1035.1,685.472 1035.66,685.472 1036.22,685.472 1036.78,685.472 1037.34,685.472 1037.9,685.472 1038.46,685.472 1039.02,685.472 1039.58,685.472 1040.14,685.472 1040.7,685.472 1041.26,685.472 1041.82,685.472 1042.38,685.472 1042.93,685.472 1043.49,685.472 1044.05,685.472 1044.61,685.472 1045.17,685.472 1045.73,685.472 1046.29,685.472 1046.85,685.472 1047.41,685.472 1047.97,685.472 1048.53,685.472 1049.09,685.472 1049.65,685.472 1050.2,685.472 1050.76,685.472 1051.32,685.472 1051.88,685.472 1052.44,685.472 1053,685.472 1053.56,685.472 1054.12,685.472 1054.68,685.472 1055.24,685.472 1055.8,685.472 1056.36,685.472 1056.92,685.472 1057.48,685.472 1058.03,685.472 1058.59,685.472 1059.15,685.472 1059.71,685.472 1060.27,685.472 1060.83,685.472 1061.39,685.472 1061.95,685.472 1062.51,685.472 1063.07,685.472 1063.63,685.472 1064.19,685.472 1064.75,685.472 1065.3,685.472 1065.86,685.472 1066.42,685.472 1066.98,685.472 1067.54,685.472 1068.1,685.472 1068.66,685.472 1069.22,685.472 1069.78,685.472 1070.34,685.472 1070.9,685.472 1071.46,685.472 1072.02,685.472 1072.57,685.472 1073.13,685.472 1073.69,685.472 1074.25,685.472 1074.81,685.472 1075.37,685.472 1075.93,685.472 1076.49,685.472 1077.05,685.472 1077.61,685.472 1078.17,685.472 1078.73,685.472 1079.29,685.472 1079.85,685.472 1080.4,685.472 1080.96,685.472 1081.52,685.472 1082.08,685.472 1082.64,685.472 1083.2,685.472 1083.76,685.472 1084.32,685.472 1084.88,685.472 1085.44,685.472 1086,685.472 1086.56,685.472 1087.12,685.472 1087.67,685.472 1088.23,685.472 1088.79,685.472 1089.35,685.472 1089.91,685.472 1090.47,685.472 1091.03,685.472 1091.59,685.472 1092.15,685.472 1092.71,685.472 1093.27,685.472 1093.83,685.472 1094.39,685.472 1094.94,685.472 1095.5,685.472 1096.06,685.472 1096.62,685.472 1097.18,685.472 1097.74,685.472 1098.3,685.472 1098.86,685.472 1099.42,685.472 1099.98,685.472 1100.54,685.472 1101.1,685.472 1101.66,685.472 1102.22,685.472 1102.77,685.472 1103.33,685.472 1103.89,685.472 1104.45,685.472 1105.01,685.472 1105.57,685.472 1106.13,685.472 1106.69,685.472 1107.25,685.472 1107.81,685.472 1108.37,685.472 1108.93,685.472 1109.49,685.472 1110.04,685.472 1110.6,685.472 1111.16,685.472 1111.72,685.472 1112.28,685.472 1112.84,685.472 1113.4,685.472 1113.96,685.472 1114.52,685.472 1115.08,685.472 1115.64,685.472 1116.2,685.472 1116.76,685.472 1117.31,685.472 1117.87,685.472 1118.43,685.472 1118.99,685.472 1119.55,685.472 1120.11,685.472 1120.67,685.472 1121.23,685.472 1121.79,685.472 1122.35,685.472 1122.91,685.472 1123.47,685.472 1124.03,685.472 1124.59,685.472 1125.14,685.472 1125.7,685.472 1126.26,685.472 1126.82,685.472 1127.38,685.472 1127.94,685.472 1128.5,685.472 1129.06,685.472 1129.62,685.472 1130.18,685.472 1130.74,685.472 1131.3,685.472 1131.86,685.472 1132.41,685.472 1132.97,685.472 1133.53,685.472 1134.09,685.472 1134.65,685.472 1135.21,685.472 1135.77,685.472 1136.33,685.472 1136.89,685.472 1137.45,685.472 1138.01,685.472 1138.57,685.472 1139.13,685.472 1139.68,685.472 1140.24,685.472 1140.8,685.472 1141.36,685.472 1141.92,685.472 1142.48,685.472 1143.04,685.472 1143.6,685.472 1144.16,685.472 1144.72,685.472 1145.28,685.472 1145.84,685.472 1146.4,685.472 1146.96,685.472 1147.51,685.472 1148.07,685.472 1148.63,685.472 1149.19,685.472 1149.75,685.472 1150.31,685.472 1150.87,685.472 1151.43,685.472 1151.99,685.472 1152.55,685.472 1153.11,685.472 1153.67,685.472 1154.23,685.472 1154.78,685.472 1155.34,685.472 1155.9,685.472 1156.46,685.472 1157.02,685.472 1157.58,685.472 1158.14,685.472 1158.7,685.472 1159.26,685.472 1159.82,685.472 1160.38,685.472 1160.94,685.472 1161.5,685.472 1162.05,685.472 1162.61,685.472 1163.17,685.472 1163.73,685.472 1164.29,685.472 1164.85,685.472 1165.41,685.472 1165.97,685.472 1166.53,685.472 1167.09,685.472 1167.65,685.472 1168.21,685.472 1168.77,685.472 1169.33,685.472 1169.88,685.472 1170.44,685.472 1171,685.472 1171.56,685.472 1172.12,685.472 1172.68,685.472 1173.24,685.472 1173.8,685.472 1174.36,685.472 1174.92,685.472 1175.48,685.472 1176.04,685.472 1176.6,685.472 1177.15,685.472 1177.71,685.472 1178.27,685.472 1178.83,685.472 1179.39,685.472 1179.95,685.472 1180.51,685.472 1181.07,685.472 1181.63,685.472 1182.19,685.472 1182.75,685.472 1183.31,685.472 1183.87,685.472 1184.43,685.472 1184.98,685.472 1185.54,685.472 1186.1,685.472 1186.66,685.472 1187.22,685.472 1187.78,685.472 1188.34,685.472 1188.9,685.472 1189.46,685.472 1190.02,685.472 1190.58,685.472 1191.14,685.472 1191.7,685.472 1192.25,685.472 1192.81,685.472 1193.37,685.472 1193.93,685.472 1194.49,685.472 1195.05,685.472 1195.61,685.472 1196.17,685.472 1196.73,685.472 1197.29,685.472 1197.85,685.472 1198.41,685.472 1198.97,685.472 1199.52,685.472 1200.08,685.472 1200.64,685.472 1201.2,685.472 1201.76,685.472 1202.32,685.472 1202.88,685.472 1203.44,685.472 1204,685.472 1204.56,685.472 1205.12,685.472 1205.68,685.472 1206.24,685.472 1206.8,685.472 1207.35,685.472 1207.91,685.472 1208.47,685.472 1209.03,685.472 1209.59,685.472 1210.15,685.472 1210.71,685.472 1211.27,685.472 1211.83,685.472 1212.39,685.472 1212.95,685.472 1213.51,685.472 1214.07,685.472 1214.62,685.472 1215.18,685.472 1215.74,685.472 1216.3,685.472 1216.86,685.472 1217.42,685.472 1217.98,685.472 1218.54,685.472 1219.1,685.472 1219.66,685.472 1220.22,685.472 1220.78,685.472 1221.34,685.472 1221.89,685.472 1222.45,685.472 1223.01,685.472 1223.57,685.472 1224.13,685.472 1224.69,685.472 1225.25,685.472 1225.81,685.472 1226.37,685.472 1226.93,685.472 1227.49,685.472 1228.05,685.472 1228.61,685.472 1229.17,685.472 1229.72,685.472 1230.28,685.472 1230.84,685.472 1231.4,685.472 1231.96,685.472 1232.52,685.472 1233.08,685.472 1233.64,685.472 1234.2,685.472 1234.76,685.472 1235.32,685.472 1235.88,685.472 1236.44,685.472 1236.99,685.472 1237.55,685.472 1238.11,685.472 1238.67,685.472 1239.23,685.472 1239.79,685.472 1240.35,685.472 1240.91,685.472 1241.47,685.472 1242.03,685.472 1242.59,685.472 1243.15,685.472 1243.71,685.472 1244.26,685.472 1244.82,685.472 1245.38,685.472 1245.94,685.472 1246.5,685.472 1247.06,685.472 1247.62,685.472 1248.18,685.472 1248.74,685.472 1249.3,685.472 1249.86,685.472 1250.42,685.472 1250.98,685.472 1251.54,685.472 1252.09,685.472 1252.65,685.472 1253.21,685.472 1253.77,685.472 1254.33,685.472 1254.89,685.472 1255.45,685.472 1256.01,685.472 1256.57,685.472 1257.13,685.472 1257.69,685.472 1258.25,685.472 1258.81,685.472 1259.36,685.472 1259.92,685.472 1260.48,685.472 1261.04,685.472 1261.6,685.472 1262.16,685.472 1262.72,685.472 1263.28,685.472 1263.84,685.472 1264.4,685.472 1264.96,685.472 1265.52,685.472 1266.08,685.472 1266.63,685.472 1267.19,685.472 1267.75,685.472 1268.31,685.472 1268.87,685.472 1269.43,685.472 1269.99,685.472 1270.55,685.472 1271.11,685.472 1271.67,685.472 1272.23,685.472 1272.79,685.472 1273.35,685.472 1273.91,685.472 1274.46,685.472 1275.02,685.472 1275.58,685.472 1276.14,685.472 1276.7,685.472 1277.26,685.472 1277.82,685.472 1278.38,685.472 1278.94,685.472 1279.5,685.472 1280.06,685.472 1280.62,685.472 1281.18,685.472 1281.73,685.472 1282.29,685.472 1282.85,685.472 1283.41,685.472 1283.97,685.472 1284.53,685.472 1285.09,685.472 1285.65,685.472 1286.21,685.472 1286.77,685.472 1287.33,685.472 1287.89,685.472 1288.45,685.472 1289,685.472 1289.56,685.472 1290.12,685.472 1290.68,685.472 1291.24,685.472 1291.8,685.472 1292.36,685.472 1292.92,685.472 1293.48,685.472 1294.04,685.472 1294.6,685.472 1295.16,685.472 1295.72,685.472 1296.28,685.472 1296.83,685.472 1297.39,685.472 1297.95,685.472 1298.51,685.472 1299.07,685.472 1299.63,685.472 1300.19,685.472 1300.75,685.472 1301.31,685.472 1301.87,685.472 1302.43,685.472 1302.99,685.472 1303.55,685.472 1304.1,685.472 1304.66,685.472 1305.22,685.472 1305.78,685.472 1306.34,685.472 1306.9,685.472 1307.46,685.472 1308.02,685.472 1308.58,685.472 1309.14,685.472 1309.7,685.472 1310.26,685.472 1310.82,685.472 1311.38,685.472 1311.93,685.472 1312.49,685.472 1313.05,685.472 1313.61,685.472 1314.17,685.472 1314.73,685.472 1315.29,685.472 1315.85,685.472 1316.41,685.472 1316.97,685.472 1317.53,685.472 1318.09,685.472 1318.65,685.472 1319.2,685.472 1319.76,685.472 1320.32,685.472 1320.88,685.472 1321.44,685.472 1322,685.472 1322.56,685.472 1323.12,685.472 1323.68,685.472 1324.24,685.472 1324.8,685.472 1325.36,685.472 1325.92,685.472 1326.47,685.472 1327.03,685.472 1327.59,685.472 1328.15,685.472 1328.71,685.472 1329.27,685.472 1329.83,685.472 1330.39,685.472 1330.95,685.472 1331.51,685.472 1332.07,685.472 1332.63,685.472 1333.19,685.472 1333.75,685.472 1334.3,685.472 1334.86,685.472 1335.42,685.472 1335.98,685.472 1336.54,685.472 1337.1,685.472 1337.66,685.472 1338.22,685.472 1338.78,685.472 1339.34,685.472 1339.9,685.472 1340.46,685.472 1341.02,685.472 1341.57,685.472 1342.13,685.472 1342.69,685.472 1343.25,685.472 1343.81,685.472 1344.37,685.472 1344.93,685.472 1345.49,685.472 1346.05,685.472 1346.61,685.472 1347.17,685.472 1347.73,685.472 1348.29,685.472 1348.84,685.472 1349.4,685.472 1349.96,685.472 1350.52,685.472 1351.08,685.472 1351.64,685.472 1352.2,685.472 1352.76,685.472 1353.32,685.472 1353.88,685.472 1354.44,685.472 1355,685.472 1355.56,685.472 1356.12,685.472 1356.67,685.472 1357.23,685.472 1357.79,685.472 1358.35,685.472 1358.91,685.472 1359.47,685.472 1360.03,685.472 1360.59,685.472 1361.15,685.472 1361.71,685.472 1362.27,685.472 1362.83,685.472 1363.39,685.472 1363.94,685.472 1364.5,685.472 1365.06,685.472 1365.62,685.472 1366.18,685.472 1366.74,685.472 1367.3,685.472 1367.86,685.472 1368.42,685.472 1368.98,685.472 1369.54,685.472 1370.1,685.472 1370.66,685.472 1371.21,685.472 1371.77,685.472 1372.33,685.472 1372.89,685.472 1373.45,685.472 1374.01,685.472 1374.57,685.472 1375.13,685.472 1375.69,685.472 1376.25,685.472 1376.81,685.472 1377.37,685.472 1377.93,685.472 1378.49,685.472 1379.04,685.472 1379.6,685.472 1380.16,685.472 1380.72,685.472 1381.28,685.472 1381.84,685.472 1382.4,685.472 1382.96,685.472 1383.52,685.472 1384.08,685.472 1384.64,685.472 1385.2,685.472 1385.76,685.472 1386.31,685.472 1386.87,685.472 1387.43,685.472 1387.99,685.472 1388.55,685.472 1389.11,685.472 1389.67,685.472 1390.23,685.472 1390.79,685.472 1391.35,685.472 1391.91,685.472 1392.47,685.472 1393.03,685.472 1393.58,685.472 1394.14,685.472 1394.7,685.472 1395.26,685.472 1395.82,685.472 1396.38,685.472 1396.94,685.472 1397.5,685.472 1398.06,685.472 1398.62,685.472 1399.18,685.472 1399.74,685.472 1400.3,685.472 1400.86,685.472 1401.41,685.472 1401.97,685.472 1402.53,685.472 1403.09,685.472 1403.65,685.472 1404.21,685.472 1404.77,685.472 1405.33,685.472 1405.89,685.472 1406.45,685.472 1407.01,685.472 1407.57,685.472 1408.13,685.472 1408.68,685.472 1409.24,685.472 1409.8,685.472 1410.36,685.472 1410.92,685.472 1411.48,685.472 1412.04,685.472 1412.6,685.472 1413.16,685.472 1413.72,685.472 1414.28,685.472 1414.84,685.472 1415.4,685.472 1415.95,685.472 1416.51,685.472 1417.07,685.472 1417.63,685.472 1418.19,685.472 1418.75,685.472 1419.31,685.472 1419.87,685.472 1420.43,685.472 1420.99,685.472 1421.55,685.472 1422.11,685.472 1422.67,685.472 1423.23,685.472 1423.78,685.472 1424.34,685.472 1424.9,685.472 1425.46,685.472 1426.02,685.472 1426.58,685.472 1427.14,685.472 1427.7,685.472 1428.26,685.472 1428.82,685.472 1429.38,685.472 1429.94,685.472 1430.5,685.472 1431.05,685.472 1431.61,685.472 1432.17,685.472 1432.73,685.472 1433.29,685.472 1433.85,685.472 1434.41,685.472 1434.97,685.472 1435.53,685.472 1436.09,685.472 1436.65,685.472 1437.21,685.472 1437.77,685.472 1438.33,685.472 1438.88,685.472 1439.44,685.472 1440,685.472 1440.56,685.472 1441.12,685.472 1441.68,685.472 1442.24,685.472 1442.8,685.472 1443.36,685.472 1443.92,685.472 1444.48,685.472 1445.04,685.472 1445.6,685.472 1446.15,685.472 1446.71,685.472 1447.27,685.472 1447.83,685.472 1448.39,685.472 1448.95,685.472 1449.51,685.472 1450.07,685.472 1450.63,685.472 1451.19,685.472 1451.75,685.472 1452.31,685.472 1452.87,685.472 1453.42,685.472 1453.98,685.472 1454.54,685.472 1455.1,685.472 1455.66,685.472 1456.22,685.472 1456.78,685.472 1457.34,685.472 1457.9,685.472 1458.46,685.472 1459.02,685.472 1459.58,685.472 1460.14,685.472 1460.7,685.472 1461.25,685.472 1461.81,685.472 1462.37,685.472 1462.93,685.472 1463.49,685.472 1464.05,685.472 1464.61,685.472 1465.17,685.472 1465.73,685.472 1466.29,685.472 1466.85,685.472 1467.41,685.472 1467.97,685.472 1468.52,685.472 1469.08,685.472 1469.64,685.472 1470.2,685.472 1470.76,685.472 1471.32,685.472 1471.88,685.472 1472.44,685.472 1473,685.472 1473.56,685.472 1474.12,685.472 1474.68,685.472 1475.24,685.472 1475.79,685.472 1476.35,685.472 1476.91,685.472 1477.47,685.472 1478.03,685.472 1478.59,685.472 1479.15,685.472 1479.71,685.472 1480.27,685.472 1480.83,685.472 1481.39,685.472 1481.95,685.472 1482.51,685.472 1483.07,685.472 1483.62,685.472 1484.18,685.472 1484.74,685.472 1485.3,685.472 1485.86,685.472 1486.42,685.472 1486.98,685.472 1487.54,685.472 1488.1,685.472 1488.66,685.472 1489.22,685.472 1489.78,685.472 1490.34,685.472 1490.89,685.472 1491.45,685.472 1492.01,685.472 1492.57,685.472 1493.13,685.472 1493.69,685.472 1494.25,685.472 1494.81,685.472 1495.37,685.472 1495.93,685.472 1496.49,685.472 1497.05,685.472 1497.61,685.472 1498.16,685.472 1498.72,685.472 1499.28,685.472 1499.84,685.472 1500.4,685.472 1500.96,685.472 1501.52,685.472 1502.08,685.472 1502.64,685.472 1503.2,685.472 1503.76,685.472 1504.32,685.472 1504.88,685.472 1505.44,685.472 1505.99,685.472 1506.55,685.472 1507.11,685.472 1507.67,685.472 1508.23,685.472 1508.79,685.472 1509.35,685.472 1509.91,685.472 1510.47,685.472 1511.03,685.472 1511.59,685.472 1512.15,685.472 1512.71,685.472 1513.26,685.472 1513.82,685.472 1514.38,685.472 1514.94,685.472 1515.5,685.472 1516.06,685.472 1516.62,685.472 1517.18,685.472 1517.74,685.472 1518.3,685.472 1518.86,685.472 1519.42,685.472 1519.98,685.472 1520.53,685.472 1521.09,685.472 1521.65,685.472 1522.21,685.472 1522.77,685.472 1523.33,685.472 1523.89,685.472 1524.45,685.472 1525.01,685.472 1525.57,685.472 1526.13,685.472 1526.69,685.472 1527.25,685.472 1527.81,685.472 1528.36,685.472 1528.92,685.472 1529.48,685.472 1530.04,685.472 1530.6,685.472 1531.16,685.472 1531.72,685.472 1532.28,685.472 1532.84,685.472 1533.4,685.472 1533.96,685.472 1534.52,685.472 1535.08,685.472 1535.63,685.472 1536.19,685.472 1536.75,685.472 1537.31,685.472 1537.87,685.472 1538.43,685.472 1538.99,685.472 1539.55,685.472 1540.11,685.472 1540.67,685.472 1541.23,685.472 1541.79,685.472 1542.35,685.472 1542.9,685.472 1543.46,685.472 1544.02,685.472 1544.58,685.472 1545.14,685.472 1545.7,685.472 1546.26,685.472 1546.82,685.472 1547.38,685.472 1547.94,685.472 1548.5,685.472 1549.06,685.472 1549.62,685.472 1550.18,685.472 1550.73,685.472 1551.29,685.472 1551.85,685.472 1552.41,685.472 1552.97,685.472 1553.53,685.472 1554.09,685.472 1554.65,685.472 1555.21,685.472 1555.77,685.472 1556.33,685.472 1556.89,685.472 1557.45,685.472 1558,685.472 1558.56,685.472 1559.12,685.472 1559.68,685.472 1560.24,685.472 1560.8,685.472 1561.36,685.472 1561.92,685.472 1562.48,685.472 1563.04,685.472 1563.6,685.472 1564.16,685.472 1564.72,685.472 1565.28,685.472 1565.83,685.472 1566.39,685.472 1566.95,685.472 1567.51,685.472 1568.07,685.472 1568.63,685.472 1569.19,685.472 1569.75,685.472 1570.31,685.472 1570.87,685.472 1571.43,685.472 1571.99,685.472 1572.55,685.472 1573.1,685.472 1573.66,685.472 1574.22,685.472 1574.78,685.472 1575.34,685.472 1575.9,685.472 1576.46,685.472 1577.02,685.472 1577.58,685.472 1578.14,685.472 1578.7,685.472 1579.26,685.472 1579.82,685.472 1580.37,685.472 1580.93,685.472 1581.49,685.472 1582.05,685.472 1582.61,685.472 1583.17,685.472 1583.73,685.472 1584.29,685.472 1584.85,685.472 1585.41,685.472 1585.97,685.472 1586.53,685.472 1587.09,685.472 1587.65,685.472 1588.2,685.472 1588.76,685.472 1589.32,685.472 1589.88,685.472 1590.44,685.472 1591,685.472 1591.56,685.472 1592.12,685.472 1592.68,685.472 1593.24,685.472 1593.8,685.472 1594.36,685.472 1594.92,685.472 1595.47,685.472 1596.03,685.472 1596.59,685.472 1597.15,685.472 1597.71,685.472 1598.27,685.472 1598.83,685.472 1599.39,685.472 1599.95,685.472 1600.51,685.472 1601.07,685.472 1601.63,685.472 1602.19,685.472 1602.74,685.472 1603.3,685.472 1603.86,685.472 1604.42,685.472 1604.98,685.472 1605.54,685.472 1606.1,685.472 1606.66,685.472 1607.22,685.472 1607.78,685.472 1608.34,685.472 1608.9,685.472 1609.46,685.472 1610.02,685.472 1610.57,685.472 1611.13,685.472 1611.69,685.472 1612.25,685.472 1612.81,685.472 1613.37,685.472 1613.93,685.472 1614.49,685.472 1615.05,685.472 1615.61,685.472 1616.17,685.472 1616.73,685.472 1617.29,685.472 1617.84,685.472 1618.4,685.472 1618.96,685.472 1619.52,685.472 1620.08,685.472 1620.64,685.472 1621.2,685.472 1621.76,685.472 1622.32,685.472 1622.88,685.472 1623.44,685.472 1624,685.472 1624.56,685.472 1625.11,685.472 1625.67,685.472 1626.23,685.472 1626.79,685.472 1627.35,685.472 1627.91,685.472 1628.47,685.472 1629.03,685.472 1629.59,685.472 1630.15,685.472 1630.71,685.472 1631.27,685.472 1631.83,685.472 1632.39,685.472 1632.94,685.472 1633.5,685.472 1634.06,685.472 1634.62,685.472 1635.18,685.472 1635.74,685.472 1636.3,685.472 1636.86,685.472 1637.42,685.472 1637.98,685.472 1638.54,685.472 1639.1,685.472 1639.66,685.472 1640.21,685.472 1640.77,685.472 1641.33,685.472 1641.89,685.472 1642.45,685.472 1643.01,685.472 1643.57,685.472 1644.13,685.472 1644.69,685.472 1645.25,685.472 1645.81,685.472 1646.37,685.472 1646.93,685.472 1647.48,685.472 1648.04,685.472 1648.6,685.472 1649.16,685.472 1649.72,685.472 1650.28,685.472 1650.84,685.472 1651.4,685.472 1651.96,685.472 1652.52,685.472 1653.08,685.472 1653.64,685.472 1654.2,685.472 1654.76,685.472 1655.31,685.472 1655.87,685.472 1656.43,685.472 1656.99,685.472 1657.55,685.472 1658.11,685.472 1658.67,685.472 1659.23,685.472 1659.79,685.472 1660.35,685.472 1660.91,685.472 1661.47,685.472 1662.03,685.472 1662.58,685.472 1663.14,685.472 1663.7,685.472 1664.26,685.472 1664.82,685.472 1665.38,685.472 1665.94,685.472 1666.5,685.472 1667.06,685.472 1667.62,685.472 1668.18,685.472 1668.74,685.472 1669.3,685.472 1669.85,685.472 1670.41,685.472 1670.97,685.472 1671.53,685.472 1672.09,685.472 1672.65,685.472 1673.21,685.472 1673.77,685.472 1674.33,685.472 1674.89,685.472 1675.45,685.472 1676.01,685.472 1676.57,685.472 1677.13,685.472 1677.68,685.472 1678.24,685.472 1678.8,685.472 1679.36,685.472 1679.92,685.472 1680.48,685.472 1681.04,685.472 1681.6,685.472 1682.16,685.472 1682.72,685.472 1683.28,685.472 1683.84,685.472 1684.4,685.472 1684.95,685.472 1685.51,685.472 1686.07,685.472 1686.63,685.472 1687.19,685.472 1687.75,685.472 1688.31,685.472 1688.87,685.472 1689.43,685.472 1689.99,685.472 1690.55,685.472 1691.11,685.472 1691.67,685.472 1692.23,685.472 1692.78,685.472 1693.34,685.472 1693.9,685.472 1694.46,685.472 1695.02,685.472 1695.58,685.472 1696.14,685.472 1696.7,685.472 1697.26,685.472 1697.82,685.472 1698.38,685.472 1698.94,685.472 1699.5,685.472 1700.05,685.472 1700.61,685.472 1701.17,685.472 1701.73,685.472 1702.29,685.472 1702.85,685.472 1703.41,685.472 1703.97,685.472 1704.53,685.472 1705.09,685.472 1705.65,685.472 1706.21,685.472 1706.77,685.472 1707.32,685.472 1707.88,685.472 1708.44,685.472 1709,685.472 1709.56,685.472 1710.12,685.472 1710.68,685.472 1711.24,685.472 1711.8,685.472 1712.36,685.472 1712.92,685.472 1713.48,685.472 1714.04,685.472 1714.6,685.472 1715.15,685.472 1715.71,685.472 1716.27,685.472 1716.83,685.472 1717.39,685.472 1717.95,685.472 1718.51,685.472 1719.07,685.472 1719.63,685.472 1720.19,685.472 1720.75,685.472 1721.31,685.472 1721.87,685.472 1722.42,685.472 1722.98,685.472 1723.54,685.472 1724.1,685.472 1724.66,685.472 1725.22,685.472 1725.78,685.472 1726.34,685.472 1726.9,685.472 1727.46,685.472 1728.02,685.472 1728.58,685.472 1729.14,685.472 1729.69,685.472 1730.25,685.472 1730.81,685.472 1731.37,685.472 1731.93,685.472 1732.49,685.472 1733.05,685.472 1733.61,685.472 1734.17,685.472 1734.73,685.472 1735.29,685.472 1735.85,685.472 1736.41,685.472 1736.97,685.472 1737.52,685.472 1738.08,685.472 1738.64,685.472 1739.2,685.472 1739.76,685.472 1740.32,685.472 1740.88,685.472 1741.44,685.472 1742,685.472 1742.56,685.472 1743.12,685.472 1743.68,685.472 1744.24,685.472 1744.79,685.472 1745.35,685.472 1745.91,685.472 1746.47,685.472 1747.03,685.472 1747.59,685.472 1748.15,685.472 1748.71,685.472 1749.27,685.472 1749.83,685.472 1750.39,685.472 1750.95,685.472 1751.51,685.472 1752.06,685.472 1752.62,685.472 1753.18,685.472 1753.74,685.472 1754.3,685.472 1754.86,685.472 1755.42,685.472 1755.98,685.472 1756.54,685.472 1757.1,685.472 1757.66,685.472 1758.22,685.472 1758.78,685.472 1759.34,685.472 1759.89,685.472 1760.45,685.472 1761.01,685.472 1761.57,685.472 1762.13,685.472 1762.69,685.472 1763.25,685.472 1763.81,685.472 1764.37,685.472 1764.93,685.472 1765.49,685.472 1766.05,685.472 1766.61,685.472 1767.16,685.472 1767.72,685.472 1768.28,685.472 1768.84,685.472 1769.4,685.472 1769.96,685.472 1770.52,685.472 1771.08,685.472 1771.64,685.472 1772.2,685.472 1772.76,685.472 1773.32,685.472 1773.88,685.472 1774.43,685.472 1774.99,685.472 1775.55,685.472 1776.11,685.472 1776.67,685.472 1777.23,685.472 1777.79,685.472 1778.35,685.472 1778.91,685.472 1779.47,685.472 1780.03,685.472 1780.59,685.472 1781.15,685.472 1781.71,685.472 1782.26,685.472 1782.82,685.472 1783.38,685.472 1783.94,685.472 1784.5,685.472 1785.06,685.472 1785.62,685.472 1786.18,685.472 1786.74,685.472 1787.3,685.472 1787.86,685.472 1788.42,685.472 1788.98,685.472 1789.53,685.472 1790.09,685.472 1790.65,685.472 1791.21,685.472 1791.77,685.472 1792.33,685.472 1792.89,685.472 1793.45,685.472 1794.01,685.472 1794.57,685.472 1795.13,685.472 1795.69,685.472 1796.25,685.472 1796.8,685.472 1797.36,685.472 1797.92,685.472 1798.48,685.472 1799.04,685.472 1799.6,685.472 1800.16,685.472 1800.72,685.472 1801.28,685.472 1801.84,685.472 1802.4,685.472 1802.96,685.472 1803.52,685.472 1804.08,685.472 1804.63,685.472 1805.19,685.472 1805.75,685.472 1806.31,685.472 1806.87,685.472 1807.43,685.472 1807.99,685.472 1808.55,685.472 1809.11,685.472 1809.67,685.472 1810.23,685.472 1810.79,685.472 1811.35,685.472 1811.9,685.472 1812.46,685.472 1813.02,685.472 1813.58,685.472 1814.14,685.472 1814.7,685.472 1815.26,685.472 1815.82,685.472 1816.38,685.472 1816.94,685.472 1817.5,685.472 1818.06,685.472 1818.62,685.472 1819.18,685.472 1819.73,685.472 1820.29,685.472 1820.85,685.472 1821.41,685.472 1821.97,685.472 1822.53,685.472 1823.09,685.472 1823.65,685.472 1824.21,685.472 1824.77,685.472 1825.33,685.472 1825.89,685.472 1826.45,685.472 1827,685.472 1827.56,685.472 1828.12,685.472 1828.68,685.472 1829.24,685.472 1829.8,685.472 1830.36,685.472 1830.92,685.472 1831.48,685.472 1832.04,685.472 1832.6,685.472 1833.16,685.472 1833.72,685.472 1834.27,685.472 1834.83,685.472 1835.39,685.472 1835.95,685.472 1836.51,685.472 1837.07,685.472 1837.63,685.472 1838.19,685.472 \"/>\n<path clip-path=\"url(#clip313)\" d=\"M720.247 684.467 L720.806 684.467 L721.365 684.467 L721.924 684.467 L722.484 684.467 L723.043 684.467 L723.602 684.467 L724.161 684.467 L724.721 684.467 L725.28 684.467 L725.839 684.467 L726.398 684.467 L726.958 684.467 L727.517 684.467 L728.076 684.467 L728.635 684.467 L729.195 684.467 L729.754 684.467 L730.313 684.467 L730.872 684.467 L731.432 684.467 L731.991 684.467 L732.55 684.467 L733.109 684.467 L733.669 684.467 L734.228 684.467 L734.787 684.467 L735.346 684.467 L735.906 684.467 L736.465 684.467 L737.024 684.467 L737.583 684.467 L738.143 684.467 L738.702 684.467 L739.261 684.467 L739.82 684.467 L740.38 684.467 L740.939 684.467 L741.498 684.467 L742.057 684.467 L742.617 684.467 L743.176 684.467 L743.735 684.467 L744.294 684.467 L744.854 684.467 L745.413 684.467 L745.972 684.467 L746.531 684.467 L747.091 684.467 L747.65 684.467 L748.209 684.467 L748.768 684.467 L749.328 684.467 L749.887 684.467 L750.446 684.467 L751.005 684.467 L751.565 684.467 L752.124 684.467 L752.683 684.467 L753.242 684.467 L753.802 684.467 L754.361 684.467 L754.92 684.467 L755.479 684.467 L756.039 684.467 L756.598 684.467 L757.157 684.467 L757.716 684.467 L758.276 684.467 L758.835 684.467 L759.394 684.467 L759.953 684.467 L760.513 684.467 L761.072 684.467 L761.631 684.467 L762.19 684.467 L762.75 684.467 L763.309 684.467 L763.868 684.467 L764.427 684.467 L764.987 684.467 L765.546 684.467 L766.105 684.467 L766.664 684.467 L767.224 684.467 L767.783 684.467 L768.342 684.467 L768.901 684.467 L769.461 684.467 L770.02 684.467 L770.579 684.467 L771.138 684.467 L771.698 684.467 L772.257 684.467 L772.816 684.467 L773.375 684.467 L773.935 684.467 L774.494 684.467 L775.053 684.467 L775.612 684.467 L776.172 684.467 L776.731 684.467 L777.29 684.467 L777.849 684.467 L778.409 684.467 L778.968 684.467 L779.527 684.467 L780.086 684.467 L780.646 684.467 L781.205 684.467 L781.764 684.467 L782.323 684.467 L782.883 684.467 L783.442 684.467 L784.001 684.467 L784.56 684.467 L785.12 684.467 L785.679 684.467 L786.238 684.467 L786.797 684.467 L787.357 684.467 L787.916 684.467 L788.475 684.467 L789.034 684.467 L789.594 684.467 L790.153 684.467 L790.712 684.467 L791.271 684.467 L791.831 684.467 L792.39 684.467 L792.949 684.467 L793.508 684.467 L794.068 684.467 L794.627 684.467 L795.186 684.467 L795.745 684.467 L796.305 684.467 L796.864 684.467 L797.423 684.467 L797.982 684.467 L798.542 684.467 L799.101 684.467 L799.66 684.467 L800.219 684.467 L800.779 684.467 L801.338 684.467 L801.897 684.467 L802.456 684.467 L803.016 684.467 L803.575 684.467 L804.134 684.467 L804.693 684.467 L805.253 684.467 L805.812 684.467 L806.371 684.467 L806.931 684.467 L807.49 684.467 L808.049 684.467 L808.608 684.467 L809.168 684.467 L809.727 684.467 L810.286 684.467 L810.845 684.467 L811.405 684.467 L811.964 684.467 L812.523 684.467 L813.082 684.467 L813.642 684.467 L814.201 684.467 L814.76 684.467 L815.319 684.467 L815.879 684.467 L816.438 684.467 L816.997 684.467 L817.556 684.467 L818.116 684.467 L818.675 684.467 L819.234 684.467 L819.793 684.467 L820.353 684.467 L820.912 684.467 L821.471 684.467 L822.03 684.467 L822.59 684.467 L823.149 684.467 L823.708 684.467 L824.267 684.467 L824.827 684.467 L825.386 684.467 L825.945 684.467 L826.504 684.467 L827.064 684.467 L827.623 684.467 L828.182 684.467 L828.741 684.467 L829.301 684.467 L829.86 684.467 L830.419 684.467 L830.978 684.467 L831.538 684.467 L832.097 684.467 L832.656 684.467 L833.215 684.467 L833.775 684.467 L834.334 684.467 L834.893 684.467 L835.452 684.467 L836.012 684.467 L836.571 684.467 L837.13 684.467 L837.689 684.467 L838.249 684.467 L838.808 684.467 L839.367 684.467 L839.926 684.467 L840.486 684.467 L841.045 684.467 L841.604 684.467 L842.163 684.467 L842.723 684.467 L843.282 684.467 L843.841 684.467 L844.4 684.467 L844.96 684.467 L845.519 684.467 L846.078 684.467 L846.637 684.467 L847.197 684.467 L847.756 684.467 L848.315 684.467 L848.874 684.467 L849.434 684.467 L849.993 684.467 L850.552 684.467 L851.111 684.467 L851.671 684.467 L852.23 684.467 L852.789 684.467 L853.348 684.467 L853.908 684.467 L854.467 684.467 L855.026 684.467 L855.585 684.467 L856.145 684.467 L856.704 684.467 L857.263 684.467 L857.822 684.467 L858.382 684.467 L858.941 684.467 L859.5 684.467 L860.059 684.467 L860.619 684.467 L861.178 684.467 L861.737 684.467 L862.296 684.467 L862.856 684.467 L863.415 684.467 L863.974 684.467 L864.533 684.467 L865.093 684.467 L865.652 684.467 L866.211 684.467 L866.77 684.467 L867.33 684.467 L867.889 684.467 L868.448 684.467 L869.007 684.467 L869.567 684.467 L870.126 684.467 L870.685 684.467 L871.244 684.467 L871.804 684.467 L872.363 684.467 L872.922 684.467 L873.481 684.467 L874.041 684.467 L874.6 684.467 L875.159 684.467 L875.718 684.467 L876.278 684.467 L876.837 684.467 L877.396 684.467 L877.955 684.467 L878.515 684.467 L879.074 684.467 L879.633 684.467 L880.192 684.467 L880.752 684.467 L881.311 684.467 L881.87 684.467 L882.429 684.467 L882.989 684.467 L883.548 684.467 L884.107 684.467 L884.666 684.467 L885.226 684.467 L885.785 684.467 L886.344 684.467 L886.903 684.467 L887.463 684.467 L888.022 684.467 L888.581 684.467 L889.14 684.467 L889.7 684.467 L890.259 684.467 L890.818 684.467 L891.377 684.467 L891.937 684.467 L892.496 684.467 L893.055 684.467 L893.614 684.467 L894.174 684.467 L894.733 684.467 L895.292 684.467 L895.851 684.467 L896.411 684.467 L896.97 684.467 L897.529 684.467 L898.088 684.467 L898.648 684.467 L899.207 684.467 L899.766 684.467 L900.325 684.467 L900.885 684.467 L901.444 684.467 L902.003 684.467 L902.562 684.467 L903.122 684.467 L903.681 684.467 L904.24 684.467 L904.799 684.467 L905.359 684.467 L905.918 684.467 L906.477 684.467 L907.036 684.467 L907.596 684.467 L908.155 684.467 L908.714 684.467 L909.273 684.467 L909.833 684.467 L910.392 684.467 L910.951 684.467 L911.51 684.467 L912.07 684.467 L912.629 684.467 L913.188 684.467 L913.747 684.467 L914.307 684.467 L914.866 684.467 L915.425 684.467 L915.984 684.467 L916.544 684.467 L917.103 684.467 L917.662 684.467 L918.221 684.467 L918.781 684.467 L919.34 684.467 L919.899 684.467 L920.458 684.467 L921.018 684.467 L921.577 684.467 L922.136 684.467 L922.695 684.467 L923.255 684.467 L923.814 684.467 L924.373 684.467 L924.932 684.467 L925.492 684.467 L926.051 684.467 L926.61 684.467 L927.169 684.467 L927.729 684.467 L928.288 684.467 L928.847 684.467 L929.406 684.467 L929.966 684.467 L930.525 684.467 L931.084 684.467 L931.644 684.467 L932.203 684.467 L932.762 684.467 L933.321 684.467 L933.881 684.467 L934.44 684.467 L934.999 684.467 L935.558 684.467 L936.118 684.467 L936.677 684.467 L937.236 684.467 L937.795 684.467 L938.355 684.467 L938.914 684.467 L939.473 684.467 L940.032 684.467 L940.592 684.467 L941.151 684.467 L941.71 684.467 L942.269 684.467 L942.829 684.467 L943.388 684.467 L943.947 684.467 L944.506 684.467 L945.066 684.467 L945.625 684.467 L946.184 684.467 L946.743 684.467 L947.303 684.467 L947.862 684.467 L948.421 684.467 L948.98 684.467 L949.54 684.467 L950.099 684.467 L950.658 684.467 L951.217 684.467 L951.777 684.467 L952.336 684.467 L952.895 684.467 L953.454 684.467 L954.014 684.467 L954.573 684.467 L955.132 684.467 L955.691 684.467 L956.251 684.467 L956.81 684.467 L957.369 684.467 L957.928 684.467 L958.488 684.467 L959.047 684.467 L959.606 684.467 L960.165 684.467 L960.725 684.467 L961.284 684.467 L961.843 684.467 L962.402 684.467 L962.962 684.467 L963.521 684.467 L964.08 684.467 L964.639 684.467 L965.199 684.467 L965.758 684.467 L966.317 684.467 L966.876 684.467 L967.436 684.467 L967.995 684.467 L968.554 684.467 L969.113 684.467 L969.673 684.467 L970.232 684.467 L970.791 684.467 L971.35 684.467 L971.91 684.467 L972.469 684.467 L973.028 684.467 L973.587 684.467 L974.147 684.467 L974.706 684.467 L975.265 684.467 L975.824 684.467 L976.384 684.467 L976.943 684.467 L977.502 684.467 L978.061 684.467 L978.621 684.467 L979.18 684.467 L979.739 684.467 L980.298 684.467 L980.858 684.467 L981.417 684.467 L981.976 684.467 L982.535 684.467 L983.095 684.467 L983.654 684.467 L984.213 684.467 L984.772 684.467 L985.332 684.467 L985.891 684.467 L986.45 684.467 L987.009 684.467 L987.569 684.467 L988.128 684.467 L988.687 684.467 L989.246 684.467 L989.806 684.467 L990.365 684.467 L990.924 684.467 L991.483 684.467 L992.043 684.467 L992.602 684.467 L993.161 684.467 L993.72 684.467 L994.28 684.467 L994.839 684.467 L995.398 684.467 L995.957 684.467 L996.517 684.467 L997.076 684.467 L997.635 684.467 L998.194 684.467 L998.754 684.467 L999.313 684.467 L999.872 684.467 L1000.43 684.467 L1000.99 684.467 L1001.55 684.467 L1002.11 684.467 L1002.67 684.467 L1003.23 684.467 L1003.79 684.467 L1004.35 684.467 L1004.91 684.467 L1005.46 684.467 L1006.02 684.467 L1006.58 684.467 L1007.14 684.467 L1007.7 684.467 L1008.26 684.467 L1008.82 684.467 L1009.38 684.467 L1009.94 684.467 L1010.5 684.467 L1011.06 684.467 L1011.62 684.467 L1012.18 684.467 L1012.73 684.467 L1013.29 684.467 L1013.85 684.467 L1014.41 684.467 L1014.97 684.467 L1015.53 684.467 L1016.09 684.467 L1016.65 684.467 L1017.21 684.467 L1017.77 684.467 L1018.33 684.467 L1018.89 684.467 L1019.45 684.467 L1020.01 684.467 L1020.56 684.467 L1021.12 684.467 L1021.68 684.467 L1022.24 684.467 L1022.8 684.467 L1023.36 684.467 L1023.92 684.467 L1024.48 684.467 L1025.04 684.467 L1025.6 684.467 L1026.16 684.467 L1026.72 684.467 L1027.28 684.467 L1027.83 684.467 L1028.39 684.467 L1028.95 684.467 L1029.51 684.467 L1030.07 684.467 L1030.63 684.467 L1031.19 684.467 L1031.75 684.467 L1032.31 684.467 L1032.87 684.467 L1033.43 684.467 L1033.99 684.467 L1034.55 684.467 L1035.1 684.467 L1035.66 684.467 L1036.22 684.467 L1036.78 684.467 L1037.34 684.467 L1037.9 684.467 L1038.46 684.467 L1039.02 684.467 L1039.58 684.467 L1040.14 684.467 L1040.7 684.467 L1041.26 684.467 L1041.82 684.467 L1042.38 684.467 L1042.93 684.467 L1043.49 684.467 L1044.05 684.467 L1044.61 684.467 L1045.17 684.467 L1045.73 684.467 L1046.29 684.467 L1046.85 684.467 L1047.41 684.467 L1047.97 684.467 L1048.53 684.467 L1049.09 684.467 L1049.65 684.467 L1050.2 684.467 L1050.76 684.467 L1051.32 684.467 L1051.88 684.467 L1052.44 684.467 L1053 684.467 L1053.56 684.467 L1054.12 684.467 L1054.68 684.467 L1055.24 684.467 L1055.8 684.467 L1056.36 684.467 L1056.92 684.467 L1057.48 684.467 L1058.03 684.467 L1058.59 684.467 L1059.15 684.467 L1059.71 684.467 L1060.27 684.467 L1060.83 684.467 L1061.39 684.467 L1061.95 684.467 L1062.51 684.467 L1063.07 684.467 L1063.63 684.467 L1064.19 684.467 L1064.75 684.467 L1065.3 684.467 L1065.86 684.467 L1066.42 684.467 L1066.98 684.467 L1067.54 684.467 L1068.1 684.467 L1068.66 684.467 L1069.22 684.467 L1069.78 684.467 L1070.34 684.467 L1070.9 684.467 L1071.46 684.467 L1072.02 684.467 L1072.57 684.467 L1073.13 684.467 L1073.69 684.467 L1074.25 684.467 L1074.81 684.467 L1075.37 684.467 L1075.93 684.467 L1076.49 684.467 L1077.05 684.467 L1077.61 684.467 L1078.17 684.467 L1078.73 684.467 L1079.29 684.467 L1079.85 684.467 L1080.4 684.467 L1080.96 684.467 L1081.52 684.467 L1082.08 684.467 L1082.64 684.467 L1083.2 684.467 L1083.76 684.467 L1084.32 684.467 L1084.88 684.467 L1085.44 684.467 L1086 684.467 L1086.56 684.467 L1087.12 684.467 L1087.67 684.467 L1088.23 684.467 L1088.79 684.467 L1089.35 684.467 L1089.91 684.467 L1090.47 684.467 L1091.03 684.467 L1091.59 684.467 L1092.15 684.467 L1092.71 684.467 L1093.27 684.467 L1093.83 684.467 L1094.39 684.467 L1094.94 684.467 L1095.5 684.467 L1096.06 684.467 L1096.62 684.467 L1097.18 684.467 L1097.74 684.467 L1098.3 684.467 L1098.86 684.467 L1099.42 684.467 L1099.98 684.467 L1100.54 684.467 L1101.1 684.467 L1101.66 684.467 L1102.22 684.467 L1102.77 684.467 L1103.33 684.467 L1103.89 684.467 L1104.45 684.467 L1105.01 684.467 L1105.57 684.467 L1106.13 684.467 L1106.69 684.467 L1107.25 684.467 L1107.81 684.467 L1108.37 684.467 L1108.93 684.467 L1109.49 684.467 L1110.04 684.467 L1110.6 684.467 L1111.16 684.467 L1111.72 684.467 L1112.28 684.467 L1112.84 684.467 L1113.4 684.467 L1113.96 684.467 L1114.52 684.467 L1115.08 684.467 L1115.64 684.467 L1116.2 684.467 L1116.76 684.467 L1117.31 684.467 L1117.87 684.467 L1118.43 684.467 L1118.99 684.467 L1119.55 684.467 L1120.11 684.467 L1120.67 684.467 L1121.23 684.467 L1121.79 684.467 L1122.35 684.467 L1122.91 684.467 L1123.47 684.467 L1124.03 684.467 L1124.59 684.467 L1125.14 684.467 L1125.7 684.467 L1126.26 684.467 L1126.82 684.467 L1127.38 684.467 L1127.94 684.467 L1128.5 684.467 L1129.06 684.467 L1129.62 684.467 L1130.18 684.467 L1130.74 684.467 L1131.3 684.467 L1131.86 684.467 L1132.41 684.467 L1132.97 684.467 L1133.53 684.467 L1134.09 684.467 L1134.65 684.467 L1135.21 684.467 L1135.77 684.467 L1136.33 684.467 L1136.89 684.467 L1137.45 684.467 L1138.01 684.467 L1138.57 684.467 L1139.13 684.467 L1139.68 684.467 L1140.24 684.467 L1140.8 684.467 L1141.36 684.467 L1141.92 684.467 L1142.48 684.467 L1143.04 684.467 L1143.6 684.467 L1144.16 684.467 L1144.72 684.467 L1145.28 684.467 L1145.84 684.467 L1146.4 684.467 L1146.96 684.467 L1147.51 684.467 L1148.07 684.467 L1148.63 684.467 L1149.19 684.467 L1149.75 684.467 L1150.31 684.467 L1150.87 684.467 L1151.43 684.467 L1151.99 684.467 L1152.55 684.467 L1153.11 684.467 L1153.67 684.467 L1154.23 684.467 L1154.78 684.467 L1155.34 684.467 L1155.9 684.467 L1156.46 684.467 L1157.02 684.467 L1157.58 684.467 L1158.14 684.467 L1158.7 684.467 L1159.26 684.467 L1159.82 684.467 L1160.38 684.467 L1160.94 684.467 L1161.5 684.467 L1162.05 684.467 L1162.61 684.467 L1163.17 684.467 L1163.73 684.467 L1164.29 684.467 L1164.85 684.467 L1165.41 684.467 L1165.97 684.467 L1166.53 684.467 L1167.09 684.467 L1167.65 684.467 L1168.21 684.467 L1168.77 684.467 L1169.33 684.467 L1169.88 684.467 L1170.44 684.467 L1171 684.467 L1171.56 684.467 L1172.12 684.467 L1172.68 684.467 L1173.24 684.467 L1173.8 684.467 L1174.36 684.467 L1174.92 684.467 L1175.48 684.467 L1176.04 684.467 L1176.6 684.467 L1177.15 684.467 L1177.71 684.467 L1178.27 684.467 L1178.83 684.467 L1179.39 684.467 L1179.95 684.467 L1180.51 684.467 L1181.07 684.467 L1181.63 684.467 L1182.19 684.467 L1182.75 684.467 L1183.31 684.467 L1183.87 684.467 L1184.43 684.467 L1184.98 684.467 L1185.54 684.467 L1186.1 684.467 L1186.66 684.467 L1187.22 684.467 L1187.78 684.467 L1188.34 684.467 L1188.9 684.467 L1189.46 684.467 L1190.02 684.467 L1190.58 684.467 L1191.14 684.467 L1191.7 684.467 L1192.25 684.467 L1192.81 684.467 L1193.37 684.467 L1193.93 684.467 L1194.49 684.467 L1195.05 684.467 L1195.61 684.467 L1196.17 684.467 L1196.73 684.467 L1197.29 684.467 L1197.85 684.467 L1198.41 684.467 L1198.97 684.467 L1199.52 684.467 L1200.08 684.467 L1200.64 684.467 L1201.2 684.467 L1201.76 684.467 L1202.32 684.467 L1202.88 684.467 L1203.44 684.467 L1204 684.467 L1204.56 684.467 L1205.12 684.467 L1205.68 684.467 L1206.24 684.467 L1206.8 684.467 L1207.35 684.467 L1207.91 684.467 L1208.47 684.467 L1209.03 684.467 L1209.59 684.467 L1210.15 684.467 L1210.71 684.467 L1211.27 684.467 L1211.83 684.467 L1212.39 684.467 L1212.95 684.467 L1213.51 684.467 L1214.07 684.467 L1214.62 684.467 L1215.18 684.467 L1215.74 684.467 L1216.3 684.467 L1216.86 684.467 L1217.42 684.467 L1217.98 684.467 L1218.54 684.467 L1219.1 684.467 L1219.66 684.467 L1220.22 684.467 L1220.78 684.467 L1221.34 684.467 L1221.89 684.467 L1222.45 684.467 L1223.01 684.467 L1223.57 684.467 L1224.13 684.467 L1224.69 684.467 L1225.25 684.467 L1225.81 684.467 L1226.37 684.467 L1226.93 684.467 L1227.49 684.467 L1228.05 684.467 L1228.61 684.467 L1229.17 684.467 L1229.72 684.467 L1230.28 684.467 L1230.84 684.467 L1231.4 684.467 L1231.96 684.467 L1232.52 684.467 L1233.08 684.467 L1233.64 684.467 L1234.2 684.467 L1234.76 684.467 L1235.32 684.467 L1235.88 684.467 L1236.44 684.467 L1236.99 684.467 L1237.55 684.467 L1238.11 684.467 L1238.67 684.467 L1239.23 684.467 L1239.79 684.467 L1240.35 684.467 L1240.91 684.467 L1241.47 684.467 L1242.03 684.467 L1242.59 684.467 L1243.15 684.467 L1243.71 684.467 L1244.26 684.467 L1244.82 684.467 L1245.38 684.467 L1245.94 684.467 L1246.5 684.467 L1247.06 684.467 L1247.62 684.467 L1248.18 684.467 L1248.74 684.467 L1249.3 684.467 L1249.86 684.467 L1250.42 684.467 L1250.98 684.467 L1251.54 684.467 L1252.09 684.467 L1252.65 684.467 L1253.21 684.467 L1253.77 684.467 L1254.33 684.467 L1254.89 684.467 L1255.45 684.467 L1256.01 684.467 L1256.57 684.467 L1257.13 684.467 L1257.69 684.467 L1258.25 684.467 L1258.81 684.467 L1259.36 684.467 L1259.92 684.467 L1260.48 684.467 L1261.04 684.467 L1261.6 684.467 L1262.16 684.467 L1262.72 684.467 L1263.28 684.467 L1263.84 684.467 L1264.4 684.467 L1264.96 684.467 L1265.52 684.467 L1266.08 684.467 L1266.63 684.467 L1267.19 684.467 L1267.75 684.467 L1268.31 684.467 L1268.87 684.467 L1269.43 684.467 L1269.99 684.467 L1270.55 684.467 L1271.11 684.467 L1271.67 684.467 L1272.23 684.467 L1272.79 684.467 L1273.35 684.467 L1273.91 684.467 L1274.46 684.467 L1275.02 684.467 L1275.58 684.467 L1276.14 684.467 L1276.7 684.467 L1277.26 684.467 L1277.82 684.467 L1278.38 684.467 L1278.94 684.467 L1279.5 684.467 L1280.06 684.467 L1280.62 684.467 L1281.18 684.467 L1281.73 684.467 L1282.29 684.467 L1282.85 684.467 L1283.41 684.467 L1283.97 684.467 L1284.53 684.467 L1285.09 684.467 L1285.65 684.467 L1286.21 684.467 L1286.77 684.467 L1287.33 684.467 L1287.89 684.467 L1288.45 684.467 L1289 684.467 L1289.56 684.467 L1290.12 684.467 L1290.68 684.467 L1291.24 684.467 L1291.8 684.467 L1292.36 684.467 L1292.92 684.467 L1293.48 684.467 L1294.04 684.467 L1294.6 684.467 L1295.16 684.467 L1295.72 684.467 L1296.28 684.467 L1296.83 684.467 L1297.39 684.467 L1297.95 684.467 L1298.51 684.467 L1299.07 684.467 L1299.63 684.467 L1300.19 684.467 L1300.75 684.467 L1301.31 684.467 L1301.87 684.467 L1302.43 684.467 L1302.99 684.467 L1303.55 684.467 L1304.1 684.467 L1304.66 684.467 L1305.22 684.467 L1305.78 684.467 L1306.34 684.467 L1306.9 684.467 L1307.46 684.467 L1308.02 684.467 L1308.58 684.467 L1309.14 684.467 L1309.7 684.467 L1310.26 684.467 L1310.82 684.467 L1311.38 684.467 L1311.93 684.467 L1312.49 684.467 L1313.05 684.467 L1313.61 684.467 L1314.17 684.467 L1314.73 684.467 L1315.29 684.467 L1315.85 684.467 L1316.41 684.467 L1316.97 684.467 L1317.53 684.467 L1318.09 684.467 L1318.65 684.467 L1319.2 684.467 L1319.76 684.467 L1320.32 684.467 L1320.88 684.467 L1321.44 684.467 L1322 684.467 L1322.56 684.467 L1323.12 684.467 L1323.68 684.467 L1324.24 684.467 L1324.8 684.467 L1325.36 684.467 L1325.92 684.467 L1326.47 684.467 L1327.03 684.467 L1327.59 684.467 L1328.15 684.467 L1328.71 684.467 L1329.27 684.467 L1329.83 684.467 L1330.39 684.467 L1330.95 684.467 L1331.51 684.467 L1332.07 684.467 L1332.63 684.467 L1333.19 684.467 L1333.75 684.467 L1334.3 684.467 L1334.86 684.467 L1335.42 684.467 L1335.98 684.467 L1336.54 684.467 L1337.1 684.467 L1337.66 684.467 L1338.22 684.467 L1338.78 684.467 L1339.34 684.467 L1339.9 684.467 L1340.46 684.467 L1341.02 684.467 L1341.57 684.467 L1342.13 684.467 L1342.69 684.467 L1343.25 684.467 L1343.81 684.467 L1344.37 684.467 L1344.93 684.467 L1345.49 684.467 L1346.05 684.467 L1346.61 684.467 L1347.17 684.467 L1347.73 684.467 L1348.29 684.467 L1348.84 684.467 L1349.4 684.467 L1349.96 684.467 L1350.52 684.467 L1351.08 684.467 L1351.64 684.467 L1352.2 684.467 L1352.76 684.467 L1353.32 684.467 L1353.88 684.467 L1354.44 684.467 L1355 684.467 L1355.56 684.467 L1356.12 684.467 L1356.67 684.467 L1357.23 684.467 L1357.79 684.467 L1358.35 684.467 L1358.91 684.467 L1359.47 684.467 L1360.03 684.467 L1360.59 684.467 L1361.15 684.467 L1361.71 684.467 L1362.27 684.467 L1362.83 684.467 L1363.39 684.467 L1363.94 684.467 L1364.5 684.467 L1365.06 684.467 L1365.62 684.467 L1366.18 684.467 L1366.74 684.467 L1367.3 684.467 L1367.86 684.467 L1368.42 684.467 L1368.98 684.467 L1369.54 684.467 L1370.1 684.467 L1370.66 684.467 L1371.21 684.467 L1371.77 684.467 L1372.33 684.467 L1372.89 684.467 L1373.45 684.467 L1374.01 684.467 L1374.57 684.467 L1375.13 684.467 L1375.69 684.467 L1376.25 684.467 L1376.81 684.467 L1377.37 684.467 L1377.93 684.467 L1378.49 684.467 L1379.04 684.467 L1379.6 684.467 L1380.16 684.467 L1380.72 684.467 L1381.28 684.467 L1381.84 684.467 L1382.4 684.467 L1382.96 684.467 L1383.52 684.467 L1384.08 684.467 L1384.64 684.467 L1385.2 684.467 L1385.76 684.467 L1386.31 684.467 L1386.87 684.467 L1387.43 684.467 L1387.99 684.467 L1388.55 684.467 L1389.11 684.467 L1389.67 684.467 L1390.23 684.467 L1390.79 684.467 L1391.35 684.467 L1391.91 684.467 L1392.47 684.467 L1393.03 684.467 L1393.58 684.467 L1394.14 684.467 L1394.7 684.467 L1395.26 684.467 L1395.82 684.467 L1396.38 684.467 L1396.94 684.467 L1397.5 684.467 L1398.06 684.467 L1398.62 684.467 L1399.18 684.467 L1399.74 684.467 L1400.3 684.467 L1400.86 684.467 L1401.41 684.467 L1401.97 684.467 L1402.53 684.467 L1403.09 684.467 L1403.65 684.467 L1404.21 684.467 L1404.77 684.467 L1405.33 684.467 L1405.89 684.467 L1406.45 684.467 L1407.01 684.467 L1407.57 684.467 L1408.13 684.467 L1408.68 684.467 L1409.24 684.467 L1409.8 684.467 L1410.36 684.467 L1410.92 684.467 L1411.48 684.467 L1412.04 684.467 L1412.6 684.467 L1413.16 684.467 L1413.72 684.467 L1414.28 684.467 L1414.84 684.467 L1415.4 684.467 L1415.95 684.467 L1416.51 684.467 L1417.07 684.467 L1417.63 684.467 L1418.19 684.467 L1418.75 684.467 L1419.31 684.467 L1419.87 684.467 L1420.43 684.467 L1420.99 684.467 L1421.55 684.467 L1422.11 684.467 L1422.67 684.467 L1423.23 684.467 L1423.78 684.467 L1424.34 684.467 L1424.9 684.467 L1425.46 684.467 L1426.02 684.467 L1426.58 684.467 L1427.14 684.467 L1427.7 684.467 L1428.26 684.467 L1428.82 684.467 L1429.38 684.467 L1429.94 684.467 L1430.5 684.467 L1431.05 684.467 L1431.61 684.467 L1432.17 684.467 L1432.73 684.467 L1433.29 684.467 L1433.85 684.467 L1434.41 684.467 L1434.97 684.467 L1435.53 684.467 L1436.09 684.467 L1436.65 684.467 L1437.21 684.467 L1437.77 684.467 L1438.33 684.467 L1438.88 684.467 L1439.44 684.467 L1440 684.467 L1440.56 684.467 L1441.12 684.467 L1441.68 684.467 L1442.24 684.467 L1442.8 684.467 L1443.36 684.467 L1443.92 684.467 L1444.48 684.467 L1445.04 684.467 L1445.6 684.467 L1446.15 684.467 L1446.71 684.467 L1447.27 684.467 L1447.83 684.467 L1448.39 684.467 L1448.95 684.467 L1449.51 684.467 L1450.07 684.467 L1450.63 684.467 L1451.19 684.467 L1451.75 684.467 L1452.31 684.467 L1452.87 684.467 L1453.42 684.467 L1453.98 684.467 L1454.54 684.467 L1455.1 684.467 L1455.66 684.467 L1456.22 684.467 L1456.78 684.467 L1457.34 684.467 L1457.9 684.467 L1458.46 684.467 L1459.02 684.467 L1459.58 684.467 L1460.14 684.467 L1460.7 684.467 L1461.25 684.467 L1461.81 684.467 L1462.37 684.467 L1462.93 684.467 L1463.49 684.467 L1464.05 684.467 L1464.61 684.467 L1465.17 684.467 L1465.73 684.467 L1466.29 684.467 L1466.85 684.467 L1467.41 684.467 L1467.97 684.467 L1468.52 684.467 L1469.08 684.467 L1469.64 684.467 L1470.2 684.467 L1470.76 684.467 L1471.32 684.467 L1471.88 684.467 L1472.44 684.467 L1473 684.467 L1473.56 684.467 L1474.12 684.467 L1474.68 684.467 L1475.24 684.467 L1475.79 684.467 L1476.35 684.467 L1476.91 684.467 L1477.47 684.467 L1478.03 684.467 L1478.59 684.467 L1479.15 684.467 L1479.71 684.467 L1480.27 684.467 L1480.83 684.467 L1481.39 684.467 L1481.95 684.467 L1482.51 684.467 L1483.07 684.467 L1483.62 684.467 L1484.18 684.467 L1484.74 684.467 L1485.3 684.467 L1485.86 684.467 L1486.42 684.467 L1486.98 684.467 L1487.54 684.467 L1488.1 684.467 L1488.66 684.467 L1489.22 684.467 L1489.78 684.467 L1490.34 684.467 L1490.89 684.467 L1491.45 684.467 L1492.01 684.467 L1492.57 684.467 L1493.13 684.467 L1493.69 684.467 L1494.25 684.467 L1494.81 684.467 L1495.37 684.467 L1495.93 684.467 L1496.49 684.467 L1497.05 684.467 L1497.61 684.467 L1498.16 684.467 L1498.72 684.467 L1499.28 684.467 L1499.84 684.467 L1500.4 684.467 L1500.96 684.467 L1501.52 684.467 L1502.08 684.467 L1502.64 684.467 L1503.2 684.467 L1503.76 684.467 L1504.32 684.467 L1504.88 684.467 L1505.44 684.467 L1505.99 684.467 L1506.55 684.467 L1507.11 684.467 L1507.67 684.467 L1508.23 684.467 L1508.79 684.467 L1509.35 684.467 L1509.91 684.467 L1510.47 684.467 L1511.03 684.467 L1511.59 684.467 L1512.15 684.467 L1512.71 684.467 L1513.26 684.467 L1513.82 684.467 L1514.38 684.467 L1514.94 684.467 L1515.5 684.467 L1516.06 684.467 L1516.62 684.467 L1517.18 684.467 L1517.74 684.467 L1518.3 684.467 L1518.86 684.467 L1519.42 684.467 L1519.98 684.467 L1520.53 684.467 L1521.09 684.467 L1521.65 684.467 L1522.21 684.467 L1522.77 684.467 L1523.33 684.467 L1523.89 684.467 L1524.45 684.467 L1525.01 684.467 L1525.57 684.467 L1526.13 684.467 L1526.69 684.467 L1527.25 684.467 L1527.81 684.467 L1528.36 684.467 L1528.92 684.467 L1529.48 684.467 L1530.04 684.467 L1530.6 684.467 L1531.16 684.467 L1531.72 684.467 L1532.28 684.467 L1532.84 684.467 L1533.4 684.467 L1533.96 684.467 L1534.52 684.467 L1535.08 684.467 L1535.63 684.467 L1536.19 684.467 L1536.75 684.467 L1537.31 684.467 L1537.87 684.467 L1538.43 684.467 L1538.99 684.467 L1539.55 684.467 L1540.11 684.467 L1540.67 684.467 L1541.23 684.467 L1541.79 684.467 L1542.35 684.467 L1542.9 684.467 L1543.46 684.467 L1544.02 684.467 L1544.58 684.467 L1545.14 684.467 L1545.7 684.467 L1546.26 684.467 L1546.82 684.467 L1547.38 684.467 L1547.94 684.467 L1548.5 684.467 L1549.06 684.467 L1549.62 684.467 L1550.18 684.467 L1550.73 684.467 L1551.29 684.467 L1551.85 684.467 L1552.41 684.467 L1552.97 684.467 L1553.53 684.467 L1554.09 684.467 L1554.65 684.467 L1555.21 684.467 L1555.77 684.467 L1556.33 684.467 L1556.89 684.467 L1557.45 684.467 L1558 684.467 L1558.56 684.467 L1559.12 684.467 L1559.68 684.467 L1560.24 684.467 L1560.8 684.467 L1561.36 684.467 L1561.92 684.467 L1562.48 684.467 L1563.04 684.467 L1563.6 684.467 L1564.16 684.467 L1564.72 684.467 L1565.28 684.467 L1565.83 684.467 L1566.39 684.467 L1566.95 684.467 L1567.51 684.467 L1568.07 684.467 L1568.63 684.467 L1569.19 684.467 L1569.75 684.467 L1570.31 684.467 L1570.87 684.467 L1571.43 684.467 L1571.99 684.467 L1572.55 684.467 L1573.1 684.467 L1573.66 684.467 L1574.22 684.467 L1574.78 684.467 L1575.34 684.467 L1575.9 684.467 L1576.46 684.467 L1577.02 684.467 L1577.58 684.467 L1578.14 684.467 L1578.7 684.467 L1579.26 684.467 L1579.82 684.467 L1580.37 684.467 L1580.93 684.467 L1581.49 684.467 L1582.05 684.467 L1582.61 684.467 L1583.17 684.467 L1583.73 684.467 L1584.29 684.467 L1584.85 684.467 L1585.41 684.467 L1585.97 684.467 L1586.53 684.467 L1587.09 684.467 L1587.65 684.467 L1588.2 684.467 L1588.76 684.467 L1589.32 684.467 L1589.88 684.467 L1590.44 684.467 L1591 684.467 L1591.56 684.467 L1592.12 684.467 L1592.68 684.467 L1593.24 684.467 L1593.8 684.467 L1594.36 684.467 L1594.92 684.467 L1595.47 684.467 L1596.03 684.467 L1596.59 684.467 L1597.15 684.467 L1597.71 684.467 L1598.27 684.467 L1598.83 684.467 L1599.39 684.467 L1599.95 684.467 L1600.51 684.467 L1601.07 684.467 L1601.63 684.467 L1602.19 684.467 L1602.74 684.467 L1603.3 684.467 L1603.86 684.467 L1604.42 684.467 L1604.98 684.467 L1605.54 684.467 L1606.1 684.467 L1606.66 684.467 L1607.22 684.467 L1607.78 684.467 L1608.34 684.467 L1608.9 684.467 L1609.46 684.467 L1610.02 684.467 L1610.57 684.467 L1611.13 684.467 L1611.69 684.467 L1612.25 684.467 L1612.81 684.467 L1613.37 684.467 L1613.93 684.467 L1614.49 684.467 L1615.05 684.467 L1615.61 684.467 L1616.17 684.467 L1616.73 684.467 L1617.29 684.467 L1617.84 684.467 L1618.4 684.467 L1618.96 684.467 L1619.52 684.467 L1620.08 684.467 L1620.64 684.467 L1621.2 684.467 L1621.76 684.467 L1622.32 684.467 L1622.88 684.467 L1623.44 684.467 L1624 684.467 L1624.56 684.467 L1625.11 684.467 L1625.67 684.467 L1626.23 684.467 L1626.79 684.467 L1627.35 684.467 L1627.91 684.467 L1628.47 684.467 L1629.03 684.467 L1629.59 684.467 L1630.15 684.467 L1630.71 684.467 L1631.27 684.467 L1631.83 684.467 L1632.39 684.467 L1632.94 684.467 L1633.5 684.467 L1634.06 684.467 L1634.62 684.467 L1635.18 684.467 L1635.74 684.467 L1636.3 684.467 L1636.86 684.467 L1637.42 684.467 L1637.98 684.467 L1638.54 684.467 L1639.1 684.467 L1639.66 684.467 L1640.21 684.467 L1640.77 684.467 L1641.33 684.467 L1641.89 684.467 L1642.45 684.467 L1643.01 684.467 L1643.57 684.467 L1644.13 684.467 L1644.69 684.467 L1645.25 684.467 L1645.81 684.467 L1646.37 684.467 L1646.93 684.467 L1647.48 684.467 L1648.04 684.467 L1648.6 684.467 L1649.16 684.467 L1649.72 684.467 L1650.28 684.467 L1650.84 684.467 L1651.4 684.467 L1651.96 684.467 L1652.52 684.467 L1653.08 684.467 L1653.64 684.467 L1654.2 684.467 L1654.76 684.467 L1655.31 684.467 L1655.87 684.467 L1656.43 684.467 L1656.99 684.467 L1657.55 684.467 L1658.11 684.467 L1658.67 684.467 L1659.23 684.467 L1659.79 684.467 L1660.35 684.467 L1660.91 684.467 L1661.47 684.467 L1662.03 684.467 L1662.58 684.467 L1663.14 684.467 L1663.7 684.467 L1664.26 684.467 L1664.82 684.467 L1665.38 684.467 L1665.94 684.467 L1666.5 684.467 L1667.06 684.467 L1667.62 684.467 L1668.18 684.467 L1668.74 684.467 L1669.3 684.467 L1669.85 684.467 L1670.41 684.467 L1670.97 684.467 L1671.53 684.467 L1672.09 684.467 L1672.65 684.467 L1673.21 684.467 L1673.77 684.467 L1674.33 684.467 L1674.89 684.467 L1675.45 684.467 L1676.01 684.467 L1676.57 684.467 L1677.13 684.467 L1677.68 684.467 L1678.24 684.467 L1678.8 684.467 L1679.36 684.467 L1679.92 684.467 L1680.48 684.467 L1681.04 684.467 L1681.6 684.467 L1682.16 684.467 L1682.72 684.467 L1683.28 684.467 L1683.84 684.467 L1684.4 684.467 L1684.95 684.467 L1685.51 684.467 L1686.07 684.467 L1686.63 684.467 L1687.19 684.467 L1687.75 684.467 L1688.31 684.467 L1688.87 684.467 L1689.43 684.467 L1689.99 684.467 L1690.55 684.467 L1691.11 684.467 L1691.67 684.467 L1692.23 684.467 L1692.78 684.467 L1693.34 684.467 L1693.9 684.467 L1694.46 684.467 L1695.02 684.467 L1695.58 684.467 L1696.14 684.467 L1696.7 684.467 L1697.26 684.467 L1697.82 684.467 L1698.38 684.467 L1698.94 684.467 L1699.5 684.467 L1700.05 684.467 L1700.61 684.467 L1701.17 684.467 L1701.73 684.467 L1702.29 684.467 L1702.85 684.467 L1703.41 684.467 L1703.97 684.467 L1704.53 684.467 L1705.09 684.467 L1705.65 684.467 L1706.21 684.467 L1706.77 684.467 L1707.32 684.467 L1707.88 684.467 L1708.44 684.467 L1709 684.467 L1709.56 684.467 L1710.12 684.467 L1710.68 684.467 L1711.24 684.467 L1711.8 684.467 L1712.36 684.467 L1712.92 684.467 L1713.48 684.467 L1714.04 684.467 L1714.6 684.467 L1715.15 684.467 L1715.71 684.467 L1716.27 684.467 L1716.83 684.467 L1717.39 684.467 L1717.95 684.467 L1718.51 684.467 L1719.07 684.467 L1719.63 684.467 L1720.19 684.467 L1720.75 684.467 L1721.31 684.467 L1721.87 684.467 L1722.42 684.467 L1722.98 684.467 L1723.54 684.467 L1724.1 684.467 L1724.66 684.467 L1725.22 684.467 L1725.78 684.467 L1726.34 684.467 L1726.9 684.467 L1727.46 684.467 L1728.02 684.467 L1728.58 684.467 L1729.14 684.467 L1729.69 684.467 L1730.25 684.467 L1730.81 684.467 L1731.37 684.467 L1731.93 684.467 L1732.49 684.467 L1733.05 684.467 L1733.61 684.467 L1734.17 684.467 L1734.73 684.467 L1735.29 684.467 L1735.85 684.467 L1736.41 684.467 L1736.97 684.467 L1737.52 684.467 L1738.08 684.467 L1738.64 684.467 L1739.2 684.467 L1739.76 684.467 L1740.32 684.467 L1740.88 684.467 L1741.44 684.467 L1742 684.467 L1742.56 684.467 L1743.12 684.467 L1743.68 684.467 L1744.24 684.467 L1744.79 684.467 L1745.35 684.467 L1745.91 684.467 L1746.47 684.467 L1747.03 684.467 L1747.59 684.467 L1748.15 684.467 L1748.71 684.467 L1749.27 684.467 L1749.83 684.467 L1750.39 684.467 L1750.95 684.467 L1751.51 684.467 L1752.06 684.467 L1752.62 684.467 L1753.18 684.467 L1753.74 684.467 L1754.3 684.467 L1754.86 684.467 L1755.42 684.467 L1755.98 684.467 L1756.54 684.467 L1757.1 684.467 L1757.66 684.467 L1758.22 684.467 L1758.78 684.467 L1759.34 684.467 L1759.89 684.467 L1760.45 684.467 L1761.01 684.467 L1761.57 684.467 L1762.13 684.467 L1762.69 684.467 L1763.25 684.467 L1763.81 684.467 L1764.37 684.467 L1764.93 684.467 L1765.49 684.467 L1766.05 684.467 L1766.61 684.467 L1767.16 684.467 L1767.72 684.467 L1768.28 684.467 L1768.84 684.467 L1769.4 684.467 L1769.96 684.467 L1770.52 684.467 L1771.08 684.467 L1771.64 684.467 L1772.2 684.467 L1772.76 684.467 L1773.32 684.467 L1773.88 684.467 L1774.43 684.467 L1774.99 684.467 L1775.55 684.467 L1776.11 684.467 L1776.67 684.467 L1777.23 684.467 L1777.79 684.467 L1778.35 684.467 L1778.91 684.467 L1779.47 684.467 L1780.03 684.467 L1780.59 684.467 L1781.15 684.467 L1781.71 684.467 L1782.26 684.467 L1782.82 684.467 L1783.38 684.467 L1783.94 684.467 L1784.5 684.467 L1785.06 684.467 L1785.62 684.467 L1786.18 684.467 L1786.74 684.467 L1787.3 684.467 L1787.86 684.467 L1788.42 684.467 L1788.98 684.467 L1789.53 684.467 L1790.09 684.467 L1790.65 684.467 L1791.21 684.467 L1791.77 684.467 L1792.33 684.467 L1792.89 684.467 L1793.45 684.467 L1794.01 684.467 L1794.57 684.467 L1795.13 684.467 L1795.69 684.467 L1796.25 684.467 L1796.8 684.467 L1797.36 684.467 L1797.92 684.467 L1798.48 684.467 L1799.04 684.467 L1799.6 684.467 L1800.16 684.467 L1800.72 684.467 L1801.28 684.467 L1801.84 684.467 L1802.4 684.467 L1802.96 684.467 L1803.52 684.467 L1804.08 684.467 L1804.63 684.467 L1805.19 684.467 L1805.75 684.467 L1806.31 684.467 L1806.87 684.467 L1807.43 684.467 L1807.99 684.467 L1808.55 684.467 L1809.11 684.467 L1809.67 684.467 L1810.23 684.467 L1810.79 684.467 L1811.35 684.467 L1811.9 684.467 L1812.46 684.467 L1813.02 684.467 L1813.58 684.467 L1814.14 684.467 L1814.7 684.467 L1815.26 684.467 L1815.82 684.467 L1816.38 684.467 L1816.94 684.467 L1817.5 684.467 L1818.06 684.467 L1818.62 684.467 L1819.18 684.467 L1819.73 684.467 L1820.29 684.467 L1820.85 684.467 L1821.41 684.467 L1821.97 684.467 L1822.53 684.467 L1823.09 684.467 L1823.65 684.467 L1824.21 684.467 L1824.77 684.467 L1825.33 684.467 L1825.89 684.467 L1826.45 684.467 L1827 684.467 L1827.56 684.467 L1828.12 684.467 L1828.68 684.467 L1829.24 684.467 L1829.8 684.467 L1830.36 684.467 L1830.92 684.467 L1831.48 684.467 L1832.04 684.467 L1832.6 684.467 L1833.16 684.467 L1833.72 684.467 L1834.27 684.467 L1834.83 684.467 L1835.39 684.467 L1835.95 684.467 L1836.51 684.467 L1837.07 684.467 L1837.63 684.467 L1838.19 684.467 L1838.19 682.688 L1837.63 682.688 L1837.07 682.688 L1836.51 682.688 L1835.95 682.688 L1835.39 682.688 L1834.83 682.688 L1834.27 682.688 L1833.72 682.688 L1833.16 682.688 L1832.6 682.688 L1832.04 682.688 L1831.48 682.688 L1830.92 682.688 L1830.36 682.688 L1829.8 682.688 L1829.24 682.688 L1828.68 682.688 L1828.12 682.688 L1827.56 682.688 L1827 682.688 L1826.45 682.688 L1825.89 682.688 L1825.33 682.688 L1824.77 682.688 L1824.21 682.688 L1823.65 682.688 L1823.09 682.688 L1822.53 682.688 L1821.97 682.688 L1821.41 682.688 L1820.85 682.688 L1820.29 682.688 L1819.73 682.688 L1819.18 682.688 L1818.62 682.688 L1818.06 682.688 L1817.5 682.688 L1816.94 682.688 L1816.38 682.688 L1815.82 682.688 L1815.26 682.688 L1814.7 682.688 L1814.14 682.688 L1813.58 682.688 L1813.02 682.688 L1812.46 682.688 L1811.9 682.688 L1811.35 682.688 L1810.79 682.688 L1810.23 682.688 L1809.67 682.688 L1809.11 682.688 L1808.55 682.688 L1807.99 682.688 L1807.43 682.688 L1806.87 682.688 L1806.31 682.688 L1805.75 682.688 L1805.19 682.688 L1804.63 682.688 L1804.08 682.688 L1803.52 682.688 L1802.96 682.688 L1802.4 682.688 L1801.84 682.688 L1801.28 682.688 L1800.72 682.688 L1800.16 682.688 L1799.6 682.688 L1799.04 682.688 L1798.48 682.688 L1797.92 682.688 L1797.36 682.688 L1796.8 682.688 L1796.25 682.688 L1795.69 682.688 L1795.13 682.688 L1794.57 682.688 L1794.01 682.688 L1793.45 682.688 L1792.89 682.688 L1792.33 682.688 L1791.77 682.688 L1791.21 682.688 L1790.65 682.688 L1790.09 682.688 L1789.53 682.688 L1788.98 682.688 L1788.42 682.688 L1787.86 682.688 L1787.3 682.688 L1786.74 682.688 L1786.18 682.688 L1785.62 682.688 L1785.06 682.688 L1784.5 682.688 L1783.94 682.688 L1783.38 682.688 L1782.82 682.688 L1782.26 682.688 L1781.71 682.688 L1781.15 682.688 L1780.59 682.688 L1780.03 682.688 L1779.47 682.688 L1778.91 682.688 L1778.35 682.688 L1777.79 682.688 L1777.23 682.688 L1776.67 682.688 L1776.11 682.688 L1775.55 682.688 L1774.99 682.688 L1774.43 682.688 L1773.88 682.688 L1773.32 682.688 L1772.76 682.688 L1772.2 682.688 L1771.64 682.688 L1771.08 682.688 L1770.52 682.688 L1769.96 682.688 L1769.4 682.688 L1768.84 682.688 L1768.28 682.688 L1767.72 682.688 L1767.16 682.688 L1766.61 682.688 L1766.05 682.688 L1765.49 682.688 L1764.93 682.688 L1764.37 682.688 L1763.81 682.688 L1763.25 682.688 L1762.69 682.688 L1762.13 682.688 L1761.57 682.688 L1761.01 682.688 L1760.45 682.688 L1759.89 682.688 L1759.34 682.688 L1758.78 682.688 L1758.22 682.688 L1757.66 682.688 L1757.1 682.688 L1756.54 682.688 L1755.98 682.688 L1755.42 682.688 L1754.86 682.688 L1754.3 682.688 L1753.74 682.688 L1753.18 682.688 L1752.62 682.688 L1752.06 682.688 L1751.51 682.688 L1750.95 682.688 L1750.39 682.688 L1749.83 682.688 L1749.27 682.688 L1748.71 682.688 L1748.15 682.688 L1747.59 682.688 L1747.03 682.688 L1746.47 682.688 L1745.91 682.688 L1745.35 682.688 L1744.79 682.688 L1744.24 682.688 L1743.68 682.688 L1743.12 682.688 L1742.56 682.688 L1742 682.688 L1741.44 682.688 L1740.88 682.688 L1740.32 682.688 L1739.76 682.688 L1739.2 682.688 L1738.64 682.688 L1738.08 682.688 L1737.52 682.688 L1736.97 682.688 L1736.41 682.688 L1735.85 682.688 L1735.29 682.688 L1734.73 682.688 L1734.17 682.688 L1733.61 682.688 L1733.05 682.688 L1732.49 682.688 L1731.93 682.688 L1731.37 682.688 L1730.81 682.688 L1730.25 682.688 L1729.69 682.688 L1729.14 682.688 L1728.58 682.688 L1728.02 682.688 L1727.46 682.688 L1726.9 682.688 L1726.34 682.688 L1725.78 682.688 L1725.22 682.688 L1724.66 682.688 L1724.1 682.688 L1723.54 682.688 L1722.98 682.688 L1722.42 682.688 L1721.87 682.688 L1721.31 682.688 L1720.75 682.688 L1720.19 682.688 L1719.63 682.688 L1719.07 682.688 L1718.51 682.688 L1717.95 682.688 L1717.39 682.688 L1716.83 682.688 L1716.27 682.688 L1715.71 682.688 L1715.15 682.688 L1714.6 682.688 L1714.04 682.688 L1713.48 682.688 L1712.92 682.688 L1712.36 682.688 L1711.8 682.688 L1711.24 682.688 L1710.68 682.688 L1710.12 682.688 L1709.56 682.688 L1709 682.688 L1708.44 682.688 L1707.88 682.688 L1707.32 682.688 L1706.77 682.688 L1706.21 682.688 L1705.65 682.688 L1705.09 682.688 L1704.53 682.688 L1703.97 682.688 L1703.41 682.688 L1702.85 682.688 L1702.29 682.688 L1701.73 682.688 L1701.17 682.688 L1700.61 682.688 L1700.05 682.688 L1699.5 682.688 L1698.94 682.688 L1698.38 682.688 L1697.82 682.688 L1697.26 682.688 L1696.7 682.688 L1696.14 682.688 L1695.58 682.688 L1695.02 682.688 L1694.46 682.688 L1693.9 682.688 L1693.34 682.688 L1692.78 682.688 L1692.23 682.688 L1691.67 682.688 L1691.11 682.688 L1690.55 682.688 L1689.99 682.688 L1689.43 682.688 L1688.87 682.688 L1688.31 682.688 L1687.75 682.688 L1687.19 682.688 L1686.63 682.688 L1686.07 682.688 L1685.51 682.688 L1684.95 682.688 L1684.4 682.688 L1683.84 682.688 L1683.28 682.688 L1682.72 682.688 L1682.16 682.688 L1681.6 682.688 L1681.04 682.688 L1680.48 682.688 L1679.92 682.688 L1679.36 682.688 L1678.8 682.688 L1678.24 682.688 L1677.68 682.688 L1677.13 682.688 L1676.57 682.688 L1676.01 682.688 L1675.45 682.688 L1674.89 682.688 L1674.33 682.688 L1673.77 682.688 L1673.21 682.688 L1672.65 682.688 L1672.09 682.688 L1671.53 682.688 L1670.97 682.688 L1670.41 682.688 L1669.85 682.688 L1669.3 682.688 L1668.74 682.688 L1668.18 682.688 L1667.62 682.688 L1667.06 682.688 L1666.5 682.688 L1665.94 682.688 L1665.38 682.688 L1664.82 682.688 L1664.26 682.688 L1663.7 682.688 L1663.14 682.688 L1662.58 682.688 L1662.03 682.688 L1661.47 682.688 L1660.91 682.688 L1660.35 682.688 L1659.79 682.688 L1659.23 682.688 L1658.67 682.688 L1658.11 682.688 L1657.55 682.688 L1656.99 682.688 L1656.43 682.688 L1655.87 682.688 L1655.31 682.688 L1654.76 682.688 L1654.2 682.688 L1653.64 682.688 L1653.08 682.688 L1652.52 682.688 L1651.96 682.688 L1651.4 682.688 L1650.84 682.688 L1650.28 682.688 L1649.72 682.688 L1649.16 682.688 L1648.6 682.688 L1648.04 682.688 L1647.48 682.688 L1646.93 682.688 L1646.37 682.688 L1645.81 682.688 L1645.25 682.688 L1644.69 682.688 L1644.13 682.688 L1643.57 682.688 L1643.01 682.688 L1642.45 682.688 L1641.89 682.688 L1641.33 682.688 L1640.77 682.688 L1640.21 682.688 L1639.66 682.688 L1639.1 682.688 L1638.54 682.688 L1637.98 682.688 L1637.42 682.688 L1636.86 682.688 L1636.3 682.688 L1635.74 682.688 L1635.18 682.688 L1634.62 682.688 L1634.06 682.688 L1633.5 682.688 L1632.94 682.688 L1632.39 682.688 L1631.83 682.688 L1631.27 682.688 L1630.71 682.688 L1630.15 682.688 L1629.59 682.688 L1629.03 682.688 L1628.47 682.688 L1627.91 682.688 L1627.35 682.688 L1626.79 682.688 L1626.23 682.688 L1625.67 682.688 L1625.11 682.688 L1624.56 682.688 L1624 682.688 L1623.44 682.688 L1622.88 682.688 L1622.32 682.688 L1621.76 682.688 L1621.2 682.688 L1620.64 682.688 L1620.08 682.688 L1619.52 682.688 L1618.96 682.688 L1618.4 682.688 L1617.84 682.688 L1617.29 682.688 L1616.73 682.688 L1616.17 682.688 L1615.61 682.688 L1615.05 682.688 L1614.49 682.688 L1613.93 682.688 L1613.37 682.688 L1612.81 682.688 L1612.25 682.688 L1611.69 682.688 L1611.13 682.688 L1610.57 682.688 L1610.02 682.688 L1609.46 682.688 L1608.9 682.688 L1608.34 682.688 L1607.78 682.688 L1607.22 682.688 L1606.66 682.688 L1606.1 682.688 L1605.54 682.688 L1604.98 682.688 L1604.42 682.688 L1603.86 682.688 L1603.3 682.688 L1602.74 682.688 L1602.19 682.688 L1601.63 682.688 L1601.07 682.688 L1600.51 682.688 L1599.95 682.688 L1599.39 682.688 L1598.83 682.688 L1598.27 682.688 L1597.71 682.688 L1597.15 682.688 L1596.59 682.688 L1596.03 682.688 L1595.47 682.688 L1594.92 682.688 L1594.36 682.688 L1593.8 682.688 L1593.24 682.688 L1592.68 682.688 L1592.12 682.688 L1591.56 682.688 L1591 682.688 L1590.44 682.688 L1589.88 682.688 L1589.32 682.688 L1588.76 682.688 L1588.2 682.688 L1587.65 682.688 L1587.09 682.688 L1586.53 682.688 L1585.97 682.688 L1585.41 682.688 L1584.85 682.688 L1584.29 682.688 L1583.73 682.688 L1583.17 682.688 L1582.61 682.688 L1582.05 682.688 L1581.49 682.688 L1580.93 682.688 L1580.37 682.688 L1579.82 682.688 L1579.26 682.688 L1578.7 682.688 L1578.14 682.688 L1577.58 682.688 L1577.02 682.688 L1576.46 682.688 L1575.9 682.688 L1575.34 682.688 L1574.78 682.688 L1574.22 682.688 L1573.66 682.688 L1573.1 682.688 L1572.55 682.688 L1571.99 682.688 L1571.43 682.688 L1570.87 682.688 L1570.31 682.688 L1569.75 682.688 L1569.19 682.688 L1568.63 682.688 L1568.07 682.688 L1567.51 682.688 L1566.95 682.688 L1566.39 682.688 L1565.83 682.688 L1565.28 682.688 L1564.72 682.688 L1564.16 682.688 L1563.6 682.688 L1563.04 682.688 L1562.48 682.688 L1561.92 682.688 L1561.36 682.688 L1560.8 682.688 L1560.24 682.688 L1559.68 682.688 L1559.12 682.688 L1558.56 682.688 L1558 682.688 L1557.45 682.688 L1556.89 682.688 L1556.33 682.688 L1555.77 682.688 L1555.21 682.688 L1554.65 682.688 L1554.09 682.688 L1553.53 682.688 L1552.97 682.688 L1552.41 682.688 L1551.85 682.688 L1551.29 682.688 L1550.73 682.688 L1550.18 682.688 L1549.62 682.688 L1549.06 682.688 L1548.5 682.688 L1547.94 682.688 L1547.38 682.688 L1546.82 682.688 L1546.26 682.688 L1545.7 682.688 L1545.14 682.688 L1544.58 682.688 L1544.02 682.688 L1543.46 682.688 L1542.9 682.688 L1542.35 682.688 L1541.79 682.688 L1541.23 682.688 L1540.67 682.688 L1540.11 682.688 L1539.55 682.688 L1538.99 682.688 L1538.43 682.688 L1537.87 682.688 L1537.31 682.688 L1536.75 682.688 L1536.19 682.688 L1535.63 682.688 L1535.08 682.688 L1534.52 682.688 L1533.96 682.688 L1533.4 682.688 L1532.84 682.688 L1532.28 682.688 L1531.72 682.688 L1531.16 682.688 L1530.6 682.688 L1530.04 682.688 L1529.48 682.688 L1528.92 682.688 L1528.36 682.688 L1527.81 682.688 L1527.25 682.688 L1526.69 682.688 L1526.13 682.688 L1525.57 682.688 L1525.01 682.688 L1524.45 682.688 L1523.89 682.688 L1523.33 682.688 L1522.77 682.688 L1522.21 682.688 L1521.65 682.688 L1521.09 682.688 L1520.53 682.688 L1519.98 682.688 L1519.42 682.688 L1518.86 682.688 L1518.3 682.688 L1517.74 682.688 L1517.18 682.688 L1516.62 682.688 L1516.06 682.688 L1515.5 682.688 L1514.94 682.688 L1514.38 682.688 L1513.82 682.688 L1513.26 682.688 L1512.71 682.688 L1512.15 682.688 L1511.59 682.688 L1511.03 682.688 L1510.47 682.688 L1509.91 682.688 L1509.35 682.688 L1508.79 682.688 L1508.23 682.688 L1507.67 682.688 L1507.11 682.688 L1506.55 682.688 L1505.99 682.688 L1505.44 682.688 L1504.88 682.688 L1504.32 682.688 L1503.76 682.688 L1503.2 682.688 L1502.64 682.688 L1502.08 682.688 L1501.52 682.688 L1500.96 682.688 L1500.4 682.688 L1499.84 682.688 L1499.28 682.688 L1498.72 682.688 L1498.16 682.688 L1497.61 682.688 L1497.05 682.688 L1496.49 682.688 L1495.93 682.688 L1495.37 682.688 L1494.81 682.688 L1494.25 682.688 L1493.69 682.688 L1493.13 682.688 L1492.57 682.688 L1492.01 682.688 L1491.45 682.688 L1490.89 682.688 L1490.34 682.688 L1489.78 682.688 L1489.22 682.688 L1488.66 682.688 L1488.1 682.688 L1487.54 682.688 L1486.98 682.688 L1486.42 682.688 L1485.86 682.688 L1485.3 682.688 L1484.74 682.688 L1484.18 682.688 L1483.62 682.688 L1483.07 682.688 L1482.51 682.688 L1481.95 682.688 L1481.39 682.688 L1480.83 682.688 L1480.27 682.688 L1479.71 682.688 L1479.15 682.688 L1478.59 682.688 L1478.03 682.688 L1477.47 682.688 L1476.91 682.688 L1476.35 682.688 L1475.79 682.688 L1475.24 682.688 L1474.68 682.688 L1474.12 682.688 L1473.56 682.688 L1473 682.688 L1472.44 682.688 L1471.88 682.688 L1471.32 682.688 L1470.76 682.688 L1470.2 682.688 L1469.64 682.688 L1469.08 682.688 L1468.52 682.688 L1467.97 682.688 L1467.41 682.688 L1466.85 682.688 L1466.29 682.688 L1465.73 682.688 L1465.17 682.688 L1464.61 682.688 L1464.05 682.688 L1463.49 682.688 L1462.93 682.688 L1462.37 682.688 L1461.81 682.688 L1461.25 682.688 L1460.7 682.688 L1460.14 682.688 L1459.58 682.688 L1459.02 682.688 L1458.46 682.688 L1457.9 682.688 L1457.34 682.688 L1456.78 682.688 L1456.22 682.688 L1455.66 682.688 L1455.1 682.688 L1454.54 682.688 L1453.98 682.688 L1453.42 682.688 L1452.87 682.688 L1452.31 682.688 L1451.75 682.688 L1451.19 682.688 L1450.63 682.688 L1450.07 682.688 L1449.51 682.688 L1448.95 682.688 L1448.39 682.688 L1447.83 682.688 L1447.27 682.688 L1446.71 682.688 L1446.15 682.688 L1445.6 682.688 L1445.04 682.688 L1444.48 682.688 L1443.92 682.688 L1443.36 682.688 L1442.8 682.688 L1442.24 682.688 L1441.68 682.688 L1441.12 682.688 L1440.56 682.688 L1440 682.688 L1439.44 682.688 L1438.88 682.688 L1438.33 682.688 L1437.77 682.688 L1437.21 682.688 L1436.65 682.688 L1436.09 682.688 L1435.53 682.688 L1434.97 682.688 L1434.41 682.688 L1433.85 682.688 L1433.29 682.688 L1432.73 682.688 L1432.17 682.688 L1431.61 682.688 L1431.05 682.688 L1430.5 682.688 L1429.94 682.688 L1429.38 682.688 L1428.82 682.688 L1428.26 682.688 L1427.7 682.688 L1427.14 682.688 L1426.58 682.688 L1426.02 682.688 L1425.46 682.688 L1424.9 682.688 L1424.34 682.688 L1423.78 682.688 L1423.23 682.688 L1422.67 682.688 L1422.11 682.688 L1421.55 682.688 L1420.99 682.688 L1420.43 682.688 L1419.87 682.688 L1419.31 682.688 L1418.75 682.688 L1418.19 682.688 L1417.63 682.688 L1417.07 682.688 L1416.51 682.688 L1415.95 682.688 L1415.4 682.688 L1414.84 682.688 L1414.28 682.688 L1413.72 682.688 L1413.16 682.688 L1412.6 682.688 L1412.04 682.688 L1411.48 682.688 L1410.92 682.688 L1410.36 682.688 L1409.8 682.688 L1409.24 682.688 L1408.68 682.688 L1408.13 682.688 L1407.57 682.688 L1407.01 682.688 L1406.45 682.688 L1405.89 682.688 L1405.33 682.688 L1404.77 682.688 L1404.21 682.688 L1403.65 682.688 L1403.09 682.688 L1402.53 682.688 L1401.97 682.688 L1401.41 682.688 L1400.86 682.688 L1400.3 682.688 L1399.74 682.688 L1399.18 682.688 L1398.62 682.688 L1398.06 682.688 L1397.5 682.688 L1396.94 682.688 L1396.38 682.688 L1395.82 682.688 L1395.26 682.688 L1394.7 682.688 L1394.14 682.688 L1393.58 682.688 L1393.03 682.688 L1392.47 682.688 L1391.91 682.688 L1391.35 682.688 L1390.79 682.688 L1390.23 682.688 L1389.67 682.688 L1389.11 682.688 L1388.55 682.688 L1387.99 682.688 L1387.43 682.688 L1386.87 682.688 L1386.31 682.688 L1385.76 682.688 L1385.2 682.688 L1384.64 682.688 L1384.08 682.688 L1383.52 682.688 L1382.96 682.688 L1382.4 682.688 L1381.84 682.688 L1381.28 682.688 L1380.72 682.688 L1380.16 682.688 L1379.6 682.688 L1379.04 682.688 L1378.49 682.688 L1377.93 682.688 L1377.37 682.688 L1376.81 682.688 L1376.25 682.688 L1375.69 682.688 L1375.13 682.688 L1374.57 682.688 L1374.01 682.688 L1373.45 682.688 L1372.89 682.688 L1372.33 682.688 L1371.77 682.688 L1371.21 682.688 L1370.66 682.688 L1370.1 682.688 L1369.54 682.688 L1368.98 682.688 L1368.42 682.688 L1367.86 682.688 L1367.3 682.688 L1366.74 682.688 L1366.18 682.688 L1365.62 682.688 L1365.06 682.688 L1364.5 682.688 L1363.94 682.688 L1363.39 682.688 L1362.83 682.688 L1362.27 682.688 L1361.71 682.688 L1361.15 682.688 L1360.59 682.688 L1360.03 682.688 L1359.47 682.688 L1358.91 682.688 L1358.35 682.688 L1357.79 682.688 L1357.23 682.688 L1356.67 682.688 L1356.12 682.688 L1355.56 682.688 L1355 682.688 L1354.44 682.688 L1353.88 682.688 L1353.32 682.688 L1352.76 682.688 L1352.2 682.688 L1351.64 682.688 L1351.08 682.688 L1350.52 682.688 L1349.96 682.688 L1349.4 682.688 L1348.84 682.688 L1348.29 682.688 L1347.73 682.688 L1347.17 682.688 L1346.61 682.688 L1346.05 682.688 L1345.49 682.688 L1344.93 682.688 L1344.37 682.688 L1343.81 682.688 L1343.25 682.688 L1342.69 682.688 L1342.13 682.688 L1341.57 682.688 L1341.02 682.688 L1340.46 682.688 L1339.9 682.688 L1339.34 682.688 L1338.78 682.688 L1338.22 682.688 L1337.66 682.688 L1337.1 682.688 L1336.54 682.688 L1335.98 682.688 L1335.42 682.688 L1334.86 682.688 L1334.3 682.688 L1333.75 682.688 L1333.19 682.688 L1332.63 682.688 L1332.07 682.688 L1331.51 682.688 L1330.95 682.688 L1330.39 682.688 L1329.83 682.688 L1329.27 682.688 L1328.71 682.688 L1328.15 682.688 L1327.59 682.688 L1327.03 682.688 L1326.47 682.688 L1325.92 682.688 L1325.36 682.688 L1324.8 682.688 L1324.24 682.688 L1323.68 682.688 L1323.12 682.688 L1322.56 682.688 L1322 682.688 L1321.44 682.688 L1320.88 682.688 L1320.32 682.688 L1319.76 682.688 L1319.2 682.688 L1318.65 682.688 L1318.09 682.688 L1317.53 682.688 L1316.97 682.688 L1316.41 682.688 L1315.85 682.688 L1315.29 682.688 L1314.73 682.688 L1314.17 682.688 L1313.61 682.688 L1313.05 682.688 L1312.49 682.688 L1311.93 682.688 L1311.38 682.688 L1310.82 682.688 L1310.26 682.688 L1309.7 682.688 L1309.14 682.688 L1308.58 682.688 L1308.02 682.688 L1307.46 682.688 L1306.9 682.688 L1306.34 682.688 L1305.78 682.688 L1305.22 682.688 L1304.66 682.688 L1304.1 682.688 L1303.55 682.688 L1302.99 682.688 L1302.43 682.688 L1301.87 682.688 L1301.31 682.688 L1300.75 682.688 L1300.19 682.688 L1299.63 682.688 L1299.07 682.688 L1298.51 682.688 L1297.95 682.688 L1297.39 682.688 L1296.83 682.688 L1296.28 682.688 L1295.72 682.688 L1295.16 682.688 L1294.6 682.688 L1294.04 682.688 L1293.48 682.688 L1292.92 682.688 L1292.36 682.688 L1291.8 682.688 L1291.24 682.688 L1290.68 682.688 L1290.12 682.688 L1289.56 682.688 L1289 682.688 L1288.45 682.688 L1287.89 682.688 L1287.33 682.688 L1286.77 682.688 L1286.21 682.688 L1285.65 682.688 L1285.09 682.688 L1284.53 682.688 L1283.97 682.688 L1283.41 682.688 L1282.85 682.688 L1282.29 682.688 L1281.73 682.688 L1281.18 682.688 L1280.62 682.688 L1280.06 682.688 L1279.5 682.688 L1278.94 682.688 L1278.38 682.688 L1277.82 682.688 L1277.26 682.688 L1276.7 682.688 L1276.14 682.688 L1275.58 682.688 L1275.02 682.688 L1274.46 682.688 L1273.91 682.688 L1273.35 682.688 L1272.79 682.688 L1272.23 682.688 L1271.67 682.688 L1271.11 682.688 L1270.55 682.688 L1269.99 682.688 L1269.43 682.688 L1268.87 682.688 L1268.31 682.688 L1267.75 682.688 L1267.19 682.688 L1266.63 682.688 L1266.08 682.688 L1265.52 682.688 L1264.96 682.688 L1264.4 682.688 L1263.84 682.688 L1263.28 682.688 L1262.72 682.688 L1262.16 682.688 L1261.6 682.688 L1261.04 682.688 L1260.48 682.688 L1259.92 682.688 L1259.36 682.688 L1258.81 682.688 L1258.25 682.688 L1257.69 682.688 L1257.13 682.688 L1256.57 682.688 L1256.01 682.688 L1255.45 682.688 L1254.89 682.688 L1254.33 682.688 L1253.77 682.688 L1253.21 682.688 L1252.65 682.688 L1252.09 682.688 L1251.54 682.688 L1250.98 682.688 L1250.42 682.688 L1249.86 682.688 L1249.3 682.688 L1248.74 682.688 L1248.18 682.688 L1247.62 682.688 L1247.06 682.688 L1246.5 682.688 L1245.94 682.688 L1245.38 682.688 L1244.82 682.688 L1244.26 682.688 L1243.71 682.688 L1243.15 682.688 L1242.59 682.688 L1242.03 682.688 L1241.47 682.688 L1240.91 682.688 L1240.35 682.688 L1239.79 682.688 L1239.23 682.688 L1238.67 682.688 L1238.11 682.688 L1237.55 682.688 L1236.99 682.688 L1236.44 682.688 L1235.88 682.688 L1235.32 682.688 L1234.76 682.688 L1234.2 682.688 L1233.64 682.688 L1233.08 682.688 L1232.52 682.688 L1231.96 682.688 L1231.4 682.688 L1230.84 682.688 L1230.28 682.688 L1229.72 682.688 L1229.17 682.688 L1228.61 682.688 L1228.05 682.688 L1227.49 682.688 L1226.93 682.688 L1226.37 682.688 L1225.81 682.688 L1225.25 682.688 L1224.69 682.688 L1224.13 682.688 L1223.57 682.688 L1223.01 682.688 L1222.45 682.688 L1221.89 682.688 L1221.34 682.688 L1220.78 682.688 L1220.22 682.688 L1219.66 682.688 L1219.1 682.688 L1218.54 682.688 L1217.98 682.688 L1217.42 682.688 L1216.86 682.688 L1216.3 682.688 L1215.74 682.688 L1215.18 682.688 L1214.62 682.688 L1214.07 682.688 L1213.51 682.688 L1212.95 682.688 L1212.39 682.688 L1211.83 682.688 L1211.27 682.688 L1210.71 682.688 L1210.15 682.688 L1209.59 682.688 L1209.03 682.688 L1208.47 682.688 L1207.91 682.688 L1207.35 682.688 L1206.8 682.688 L1206.24 682.688 L1205.68 682.688 L1205.12 682.688 L1204.56 682.688 L1204 682.688 L1203.44 682.688 L1202.88 682.688 L1202.32 682.688 L1201.76 682.688 L1201.2 682.688 L1200.64 682.688 L1200.08 682.688 L1199.52 682.688 L1198.97 682.688 L1198.41 682.688 L1197.85 682.688 L1197.29 682.688 L1196.73 682.688 L1196.17 682.688 L1195.61 682.688 L1195.05 682.688 L1194.49 682.688 L1193.93 682.688 L1193.37 682.688 L1192.81 682.688 L1192.25 682.688 L1191.7 682.688 L1191.14 682.688 L1190.58 682.688 L1190.02 682.688 L1189.46 682.688 L1188.9 682.688 L1188.34 682.688 L1187.78 682.688 L1187.22 682.688 L1186.66 682.688 L1186.1 682.688 L1185.54 682.688 L1184.98 682.688 L1184.43 682.688 L1183.87 682.688 L1183.31 682.688 L1182.75 682.688 L1182.19 682.688 L1181.63 682.688 L1181.07 682.688 L1180.51 682.688 L1179.95 682.688 L1179.39 682.688 L1178.83 682.688 L1178.27 682.688 L1177.71 682.688 L1177.15 682.688 L1176.6 682.688 L1176.04 682.688 L1175.48 682.688 L1174.92 682.688 L1174.36 682.688 L1173.8 682.688 L1173.24 682.688 L1172.68 682.688 L1172.12 682.688 L1171.56 682.688 L1171 682.688 L1170.44 682.688 L1169.88 682.688 L1169.33 682.688 L1168.77 682.688 L1168.21 682.688 L1167.65 682.688 L1167.09 682.688 L1166.53 682.688 L1165.97 682.688 L1165.41 682.688 L1164.85 682.688 L1164.29 682.688 L1163.73 682.688 L1163.17 682.688 L1162.61 682.688 L1162.05 682.688 L1161.5 682.688 L1160.94 682.688 L1160.38 682.688 L1159.82 682.688 L1159.26 682.688 L1158.7 682.688 L1158.14 682.688 L1157.58 682.688 L1157.02 682.688 L1156.46 682.688 L1155.9 682.688 L1155.34 682.688 L1154.78 682.688 L1154.23 682.688 L1153.67 682.688 L1153.11 682.688 L1152.55 682.688 L1151.99 682.688 L1151.43 682.688 L1150.87 682.688 L1150.31 682.688 L1149.75 682.688 L1149.19 682.688 L1148.63 682.688 L1148.07 682.688 L1147.51 682.688 L1146.96 682.688 L1146.4 682.688 L1145.84 682.688 L1145.28 682.688 L1144.72 682.688 L1144.16 682.688 L1143.6 682.688 L1143.04 682.688 L1142.48 682.688 L1141.92 682.688 L1141.36 682.688 L1140.8 682.688 L1140.24 682.688 L1139.68 682.688 L1139.13 682.688 L1138.57 682.688 L1138.01 682.688 L1137.45 682.688 L1136.89 682.688 L1136.33 682.688 L1135.77 682.688 L1135.21 682.688 L1134.65 682.688 L1134.09 682.688 L1133.53 682.688 L1132.97 682.688 L1132.41 682.688 L1131.86 682.688 L1131.3 682.688 L1130.74 682.688 L1130.18 682.688 L1129.62 682.688 L1129.06 682.688 L1128.5 682.688 L1127.94 682.688 L1127.38 682.688 L1126.82 682.688 L1126.26 682.688 L1125.7 682.688 L1125.14 682.688 L1124.59 682.688 L1124.03 682.688 L1123.47 682.688 L1122.91 682.688 L1122.35 682.688 L1121.79 682.688 L1121.23 682.688 L1120.67 682.688 L1120.11 682.688 L1119.55 682.688 L1118.99 682.688 L1118.43 682.688 L1117.87 682.688 L1117.31 682.688 L1116.76 682.688 L1116.2 682.688 L1115.64 682.688 L1115.08 682.688 L1114.52 682.688 L1113.96 682.688 L1113.4 682.688 L1112.84 682.688 L1112.28 682.688 L1111.72 682.688 L1111.16 682.688 L1110.6 682.688 L1110.04 682.688 L1109.49 682.688 L1108.93 682.688 L1108.37 682.688 L1107.81 682.688 L1107.25 682.688 L1106.69 682.688 L1106.13 682.688 L1105.57 682.688 L1105.01 682.688 L1104.45 682.688 L1103.89 682.688 L1103.33 682.688 L1102.77 682.688 L1102.22 682.688 L1101.66 682.688 L1101.1 682.688 L1100.54 682.688 L1099.98 682.688 L1099.42 682.688 L1098.86 682.688 L1098.3 682.688 L1097.74 682.688 L1097.18 682.688 L1096.62 682.688 L1096.06 682.688 L1095.5 682.688 L1094.94 682.688 L1094.39 682.688 L1093.83 682.688 L1093.27 682.688 L1092.71 682.688 L1092.15 682.688 L1091.59 682.688 L1091.03 682.688 L1090.47 682.688 L1089.91 682.688 L1089.35 682.688 L1088.79 682.688 L1088.23 682.688 L1087.67 682.688 L1087.12 682.688 L1086.56 682.688 L1086 682.688 L1085.44 682.688 L1084.88 682.688 L1084.32 682.688 L1083.76 682.688 L1083.2 682.688 L1082.64 682.688 L1082.08 682.688 L1081.52 682.688 L1080.96 682.688 L1080.4 682.688 L1079.85 682.688 L1079.29 682.688 L1078.73 682.688 L1078.17 682.688 L1077.61 682.688 L1077.05 682.688 L1076.49 682.688 L1075.93 682.688 L1075.37 682.688 L1074.81 682.688 L1074.25 682.688 L1073.69 682.688 L1073.13 682.688 L1072.57 682.688 L1072.02 682.688 L1071.46 682.688 L1070.9 682.688 L1070.34 682.688 L1069.78 682.688 L1069.22 682.688 L1068.66 682.688 L1068.1 682.688 L1067.54 682.688 L1066.98 682.688 L1066.42 682.688 L1065.86 682.688 L1065.3 682.688 L1064.75 682.688 L1064.19 682.688 L1063.63 682.688 L1063.07 682.688 L1062.51 682.688 L1061.95 682.688 L1061.39 682.688 L1060.83 682.688 L1060.27 682.688 L1059.71 682.688 L1059.15 682.688 L1058.59 682.688 L1058.03 682.688 L1057.48 682.688 L1056.92 682.688 L1056.36 682.688 L1055.8 682.688 L1055.24 682.688 L1054.68 682.688 L1054.12 682.688 L1053.56 682.688 L1053 682.688 L1052.44 682.688 L1051.88 682.688 L1051.32 682.688 L1050.76 682.688 L1050.2 682.688 L1049.65 682.688 L1049.09 682.688 L1048.53 682.688 L1047.97 682.688 L1047.41 682.688 L1046.85 682.688 L1046.29 682.688 L1045.73 682.688 L1045.17 682.688 L1044.61 682.688 L1044.05 682.688 L1043.49 682.688 L1042.93 682.688 L1042.38 682.688 L1041.82 682.688 L1041.26 682.688 L1040.7 682.688 L1040.14 682.688 L1039.58 682.688 L1039.02 682.688 L1038.46 682.688 L1037.9 682.688 L1037.34 682.688 L1036.78 682.688 L1036.22 682.688 L1035.66 682.688 L1035.1 682.688 L1034.55 682.688 L1033.99 682.688 L1033.43 682.688 L1032.87 682.688 L1032.31 682.688 L1031.75 682.688 L1031.19 682.688 L1030.63 682.688 L1030.07 682.688 L1029.51 682.688 L1028.95 682.688 L1028.39 682.688 L1027.83 682.688 L1027.28 682.688 L1026.72 682.688 L1026.16 682.688 L1025.6 682.688 L1025.04 682.688 L1024.48 682.688 L1023.92 682.688 L1023.36 682.688 L1022.8 682.688 L1022.24 682.688 L1021.68 682.688 L1021.12 682.688 L1020.56 682.688 L1020.01 682.688 L1019.45 682.688 L1018.89 682.688 L1018.33 682.688 L1017.77 682.688 L1017.21 682.688 L1016.65 682.688 L1016.09 682.688 L1015.53 682.688 L1014.97 682.688 L1014.41 682.688 L1013.85 682.688 L1013.29 682.688 L1012.73 682.688 L1012.18 682.688 L1011.62 682.688 L1011.06 682.688 L1010.5 682.688 L1009.94 682.688 L1009.38 682.688 L1008.82 682.688 L1008.26 682.688 L1007.7 682.688 L1007.14 682.688 L1006.58 682.688 L1006.02 682.688 L1005.46 682.688 L1004.91 682.688 L1004.35 682.688 L1003.79 682.688 L1003.23 682.688 L1002.67 682.688 L1002.11 682.688 L1001.55 682.688 L1000.99 682.688 L1000.43 682.688 L999.872 682.688 L999.313 682.688 L998.754 682.688 L998.194 682.688 L997.635 682.688 L997.076 682.688 L996.517 682.688 L995.957 682.688 L995.398 682.688 L994.839 682.688 L994.28 682.688 L993.72 682.688 L993.161 682.688 L992.602 682.688 L992.043 682.688 L991.483 682.688 L990.924 682.688 L990.365 682.688 L989.806 682.688 L989.246 682.688 L988.687 682.688 L988.128 682.688 L987.569 682.688 L987.009 682.688 L986.45 682.688 L985.891 682.688 L985.332 682.688 L984.772 682.688 L984.213 682.688 L983.654 682.688 L983.095 682.688 L982.535 682.688 L981.976 682.688 L981.417 682.688 L980.858 682.688 L980.298 682.688 L979.739 682.688 L979.18 682.688 L978.621 682.688 L978.061 682.688 L977.502 682.688 L976.943 682.688 L976.384 682.688 L975.824 682.688 L975.265 682.688 L974.706 682.688 L974.147 682.688 L973.587 682.688 L973.028 682.688 L972.469 682.688 L971.91 682.688 L971.35 682.688 L970.791 682.688 L970.232 682.688 L969.673 682.688 L969.113 682.688 L968.554 682.688 L967.995 682.688 L967.436 682.688 L966.876 682.688 L966.317 682.688 L965.758 682.688 L965.199 682.688 L964.639 682.688 L964.08 682.688 L963.521 682.688 L962.962 682.688 L962.402 682.688 L961.843 682.688 L961.284 682.688 L960.725 682.688 L960.165 682.688 L959.606 682.688 L959.047 682.688 L958.488 682.688 L957.928 682.688 L957.369 682.688 L956.81 682.688 L956.251 682.688 L955.691 682.688 L955.132 682.688 L954.573 682.688 L954.014 682.688 L953.454 682.688 L952.895 682.688 L952.336 682.688 L951.777 682.688 L951.217 682.688 L950.658 682.688 L950.099 682.688 L949.54 682.688 L948.98 682.688 L948.421 682.688 L947.862 682.688 L947.303 682.688 L946.743 682.688 L946.184 682.688 L945.625 682.688 L945.066 682.688 L944.506 682.688 L943.947 682.688 L943.388 682.688 L942.829 682.688 L942.269 682.688 L941.71 682.688 L941.151 682.688 L940.592 682.688 L940.032 682.688 L939.473 682.688 L938.914 682.688 L938.355 682.688 L937.795 682.688 L937.236 682.688 L936.677 682.688 L936.118 682.688 L935.558 682.688 L934.999 682.688 L934.44 682.688 L933.881 682.688 L933.321 682.688 L932.762 682.688 L932.203 682.688 L931.644 682.688 L931.084 682.688 L930.525 682.688 L929.966 682.688 L929.406 682.688 L928.847 682.688 L928.288 682.688 L927.729 682.688 L927.169 682.688 L926.61 682.688 L926.051 682.688 L925.492 682.688 L924.932 682.688 L924.373 682.688 L923.814 682.688 L923.255 682.688 L922.695 682.688 L922.136 682.688 L921.577 682.688 L921.018 682.688 L920.458 682.688 L919.899 682.688 L919.34 682.688 L918.781 682.688 L918.221 682.688 L917.662 682.688 L917.103 682.688 L916.544 682.688 L915.984 682.688 L915.425 682.688 L914.866 682.688 L914.307 682.688 L913.747 682.688 L913.188 682.688 L912.629 682.688 L912.07 682.688 L911.51 682.688 L910.951 682.688 L910.392 682.688 L909.833 682.688 L909.273 682.688 L908.714 682.688 L908.155 682.688 L907.596 682.688 L907.036 682.688 L906.477 682.688 L905.918 682.688 L905.359 682.688 L904.799 682.688 L904.24 682.688 L903.681 682.688 L903.122 682.688 L902.562 682.688 L902.003 682.688 L901.444 682.688 L900.885 682.688 L900.325 682.688 L899.766 682.688 L899.207 682.688 L898.648 682.688 L898.088 682.688 L897.529 682.688 L896.97 682.688 L896.411 682.688 L895.851 682.688 L895.292 682.688 L894.733 682.688 L894.174 682.688 L893.614 682.688 L893.055 682.688 L892.496 682.688 L891.937 682.688 L891.377 682.688 L890.818 682.688 L890.259 682.688 L889.7 682.688 L889.14 682.688 L888.581 682.688 L888.022 682.688 L887.463 682.688 L886.903 682.688 L886.344 682.688 L885.785 682.688 L885.226 682.688 L884.666 682.688 L884.107 682.688 L883.548 682.688 L882.989 682.688 L882.429 682.688 L881.87 682.688 L881.311 682.688 L880.752 682.688 L880.192 682.688 L879.633 682.688 L879.074 682.688 L878.515 682.688 L877.955 682.688 L877.396 682.688 L876.837 682.688 L876.278 682.688 L875.718 682.688 L875.159 682.688 L874.6 682.688 L874.041 682.688 L873.481 682.688 L872.922 682.688 L872.363 682.688 L871.804 682.688 L871.244 682.688 L870.685 682.688 L870.126 682.688 L869.567 682.688 L869.007 682.688 L868.448 682.688 L867.889 682.688 L867.33 682.688 L866.77 682.688 L866.211 682.688 L865.652 682.688 L865.093 682.688 L864.533 682.688 L863.974 682.688 L863.415 682.688 L862.856 682.688 L862.296 682.688 L861.737 682.688 L861.178 682.688 L860.619 682.688 L860.059 682.688 L859.5 682.688 L858.941 682.688 L858.382 682.688 L857.822 682.688 L857.263 682.688 L856.704 682.688 L856.145 682.688 L855.585 682.688 L855.026 682.688 L854.467 682.688 L853.908 682.688 L853.348 682.688 L852.789 682.688 L852.23 682.688 L851.671 682.688 L851.111 682.688 L850.552 682.688 L849.993 682.688 L849.434 682.688 L848.874 682.688 L848.315 682.688 L847.756 682.688 L847.197 682.688 L846.637 682.688 L846.078 682.688 L845.519 682.688 L844.96 682.688 L844.4 682.688 L843.841 682.688 L843.282 682.688 L842.723 682.688 L842.163 682.688 L841.604 682.688 L841.045 682.688 L840.486 682.688 L839.926 682.688 L839.367 682.688 L838.808 682.688 L838.249 682.688 L837.689 682.688 L837.13 682.688 L836.571 682.688 L836.012 682.688 L835.452 682.688 L834.893 682.688 L834.334 682.688 L833.775 682.688 L833.215 682.688 L832.656 682.688 L832.097 682.688 L831.538 682.688 L830.978 682.688 L830.419 682.688 L829.86 682.688 L829.301 682.688 L828.741 682.688 L828.182 682.688 L827.623 682.688 L827.064 682.688 L826.504 682.688 L825.945 682.688 L825.386 682.688 L824.827 682.688 L824.267 682.688 L823.708 682.688 L823.149 682.688 L822.59 682.688 L822.03 682.688 L821.471 682.688 L820.912 682.688 L820.353 682.688 L819.793 682.688 L819.234 682.688 L818.675 682.688 L818.116 682.688 L817.556 682.688 L816.997 682.688 L816.438 682.688 L815.879 682.688 L815.319 682.688 L814.76 682.688 L814.201 682.688 L813.642 682.688 L813.082 682.688 L812.523 682.688 L811.964 682.688 L811.405 682.688 L810.845 682.688 L810.286 682.688 L809.727 682.688 L809.168 682.688 L808.608 682.688 L808.049 682.688 L807.49 682.688 L806.931 682.688 L806.371 682.688 L805.812 682.688 L805.253 682.688 L804.693 682.688 L804.134 682.688 L803.575 682.688 L803.016 682.688 L802.456 682.688 L801.897 682.688 L801.338 682.688 L800.779 682.688 L800.219 682.688 L799.66 682.688 L799.101 682.688 L798.542 682.688 L797.982 682.688 L797.423 682.688 L796.864 682.688 L796.305 682.688 L795.745 682.688 L795.186 682.688 L794.627 682.688 L794.068 682.688 L793.508 682.688 L792.949 682.688 L792.39 682.688 L791.831 682.688 L791.271 682.688 L790.712 682.688 L790.153 682.688 L789.594 682.688 L789.034 682.688 L788.475 682.688 L787.916 682.688 L787.357 682.688 L786.797 682.688 L786.238 682.688 L785.679 682.688 L785.12 682.688 L784.56 682.688 L784.001 682.688 L783.442 682.688 L782.883 682.688 L782.323 682.688 L781.764 682.688 L781.205 682.688 L780.646 682.688 L780.086 682.688 L779.527 682.688 L778.968 682.688 L778.409 682.688 L777.849 682.688 L777.29 682.688 L776.731 682.688 L776.172 682.688 L775.612 682.688 L775.053 682.688 L774.494 682.688 L773.935 682.688 L773.375 682.688 L772.816 682.688 L772.257 682.688 L771.698 682.688 L771.138 682.688 L770.579 682.688 L770.02 682.688 L769.461 682.688 L768.901 682.688 L768.342 682.688 L767.783 682.688 L767.224 682.688 L766.664 682.688 L766.105 682.688 L765.546 682.688 L764.987 682.688 L764.427 682.688 L763.868 682.688 L763.309 682.688 L762.75 682.688 L762.19 682.688 L761.631 682.688 L761.072 682.688 L760.513 682.688 L759.953 682.688 L759.394 682.688 L758.835 682.688 L758.276 682.688 L757.716 682.688 L757.157 682.688 L756.598 682.688 L756.039 682.688 L755.479 682.688 L754.92 682.688 L754.361 682.688 L753.802 682.688 L753.242 682.688 L752.683 682.688 L752.124 682.688 L751.565 682.688 L751.005 682.688 L750.446 682.688 L749.887 682.688 L749.328 682.688 L748.768 682.688 L748.209 682.688 L747.65 682.688 L747.091 682.688 L746.531 682.688 L745.972 682.688 L745.413 682.688 L744.854 682.688 L744.294 682.688 L743.735 682.688 L743.176 682.688 L742.617 682.688 L742.057 682.688 L741.498 682.688 L740.939 682.688 L740.38 682.688 L739.82 682.688 L739.261 682.688 L738.702 682.688 L738.143 682.688 L737.583 682.688 L737.024 682.688 L736.465 682.688 L735.906 682.688 L735.346 682.688 L734.787 682.688 L734.228 682.688 L733.669 682.688 L733.109 682.688 L732.55 682.688 L731.991 682.688 L731.432 682.688 L730.872 682.688 L730.313 682.688 L729.754 682.688 L729.195 682.688 L728.635 682.688 L728.076 682.688 L727.517 682.688 L726.958 682.688 L726.398 682.688 L725.839 682.688 L725.28 682.688 L724.721 682.688 L724.161 682.688 L723.602 682.688 L723.043 682.688 L722.484 682.688 L721.924 682.688 L721.365 682.688 L720.806 682.688 L720.247 682.688  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.515 720.806,683.515 721.365,683.515 721.924,683.515 722.484,683.515 723.043,683.515 723.602,683.515 724.161,683.515 724.721,683.515 725.28,683.515 725.839,683.515 726.398,683.515 726.958,683.515 727.517,683.515 728.076,683.515 728.635,683.515 729.195,683.515 729.754,683.515 730.313,683.515 730.872,683.515 731.432,683.515 731.991,683.515 732.55,683.515 733.109,683.515 733.669,683.515 734.228,683.515 734.787,683.515 735.346,683.515 735.906,683.515 736.465,683.515 737.024,683.515 737.583,683.515 738.143,683.515 738.702,683.515 739.261,683.515 739.82,683.515 740.38,683.515 740.939,683.515 741.498,683.515 742.057,683.515 742.617,683.515 743.176,683.515 743.735,683.515 744.294,683.515 744.854,683.515 745.413,683.515 745.972,683.515 746.531,683.515 747.091,683.515 747.65,683.515 748.209,683.515 748.768,683.515 749.328,683.515 749.887,683.515 750.446,683.515 751.005,683.515 751.565,683.515 752.124,683.515 752.683,683.515 753.242,683.515 753.802,683.515 754.361,683.515 754.92,683.515 755.479,683.515 756.039,683.515 756.598,683.515 757.157,683.515 757.716,683.515 758.276,683.515 758.835,683.515 759.394,683.515 759.953,683.515 760.513,683.515 761.072,683.515 761.631,683.515 762.19,683.515 762.75,683.515 763.309,683.515 763.868,683.515 764.427,683.515 764.987,683.515 765.546,683.515 766.105,683.515 766.664,683.515 767.224,683.515 767.783,683.515 768.342,683.515 768.901,683.515 769.461,683.515 770.02,683.515 770.579,683.515 771.138,683.515 771.698,683.515 772.257,683.515 772.816,683.515 773.375,683.515 773.935,683.515 774.494,683.515 775.053,683.515 775.612,683.515 776.172,683.515 776.731,683.515 777.29,683.515 777.849,683.515 778.409,683.515 778.968,683.515 779.527,683.515 780.086,683.515 780.646,683.515 781.205,683.515 781.764,683.515 782.323,683.515 782.883,683.515 783.442,683.515 784.001,683.515 784.56,683.515 785.12,683.515 785.679,683.515 786.238,683.515 786.797,683.515 787.357,683.515 787.916,683.515 788.475,683.515 789.034,683.515 789.594,683.515 790.153,683.515 790.712,683.515 791.271,683.515 791.831,683.515 792.39,683.515 792.949,683.515 793.508,683.515 794.068,683.515 794.627,683.515 795.186,683.515 795.745,683.515 796.305,683.515 796.864,683.515 797.423,683.515 797.982,683.515 798.542,683.515 799.101,683.515 799.66,683.515 800.219,683.515 800.779,683.515 801.338,683.515 801.897,683.515 802.456,683.515 803.016,683.515 803.575,683.515 804.134,683.515 804.693,683.515 805.253,683.515 805.812,683.515 806.371,683.515 806.931,683.515 807.49,683.515 808.049,683.515 808.608,683.515 809.168,683.515 809.727,683.515 810.286,683.515 810.845,683.515 811.405,683.515 811.964,683.515 812.523,683.515 813.082,683.515 813.642,683.515 814.201,683.515 814.76,683.515 815.319,683.515 815.879,683.515 816.438,683.515 816.997,683.515 817.556,683.515 818.116,683.515 818.675,683.515 819.234,683.515 819.793,683.515 820.353,683.515 820.912,683.515 821.471,683.515 822.03,683.515 822.59,683.515 823.149,683.515 823.708,683.515 824.267,683.515 824.827,683.515 825.386,683.515 825.945,683.515 826.504,683.515 827.064,683.515 827.623,683.515 828.182,683.515 828.741,683.515 829.301,683.515 829.86,683.515 830.419,683.515 830.978,683.515 831.538,683.515 832.097,683.515 832.656,683.515 833.215,683.515 833.775,683.515 834.334,683.515 834.893,683.515 835.452,683.515 836.012,683.515 836.571,683.515 837.13,683.515 837.689,683.515 838.249,683.515 838.808,683.515 839.367,683.515 839.926,683.515 840.486,683.515 841.045,683.515 841.604,683.515 842.163,683.515 842.723,683.515 843.282,683.515 843.841,683.515 844.4,683.515 844.96,683.515 845.519,683.515 846.078,683.515 846.637,683.515 847.197,683.515 847.756,683.515 848.315,683.515 848.874,683.515 849.434,683.515 849.993,683.515 850.552,683.515 851.111,683.515 851.671,683.515 852.23,683.515 852.789,683.515 853.348,683.515 853.908,683.515 854.467,683.515 855.026,683.515 855.585,683.515 856.145,683.515 856.704,683.515 857.263,683.515 857.822,683.515 858.382,683.515 858.941,683.515 859.5,683.515 860.059,683.515 860.619,683.515 861.178,683.515 861.737,683.515 862.296,683.515 862.856,683.515 863.415,683.515 863.974,683.515 864.533,683.515 865.093,683.515 865.652,683.515 866.211,683.515 866.77,683.515 867.33,683.515 867.889,683.515 868.448,683.515 869.007,683.515 869.567,683.515 870.126,683.515 870.685,683.515 871.244,683.515 871.804,683.515 872.363,683.515 872.922,683.515 873.481,683.515 874.041,683.515 874.6,683.515 875.159,683.515 875.718,683.515 876.278,683.515 876.837,683.515 877.396,683.515 877.955,683.515 878.515,683.515 879.074,683.515 879.633,683.515 880.192,683.515 880.752,683.515 881.311,683.515 881.87,683.515 882.429,683.515 882.989,683.515 883.548,683.515 884.107,683.515 884.666,683.515 885.226,683.515 885.785,683.515 886.344,683.515 886.903,683.515 887.463,683.515 888.022,683.515 888.581,683.515 889.14,683.515 889.7,683.515 890.259,683.515 890.818,683.515 891.377,683.515 891.937,683.515 892.496,683.515 893.055,683.515 893.614,683.515 894.174,683.515 894.733,683.515 895.292,683.515 895.851,683.515 896.411,683.515 896.97,683.515 897.529,683.515 898.088,683.515 898.648,683.515 899.207,683.515 899.766,683.515 900.325,683.515 900.885,683.515 901.444,683.515 902.003,683.515 902.562,683.515 903.122,683.515 903.681,683.515 904.24,683.515 904.799,683.515 905.359,683.515 905.918,683.515 906.477,683.515 907.036,683.515 907.596,683.515 908.155,683.515 908.714,683.515 909.273,683.515 909.833,683.515 910.392,683.515 910.951,683.515 911.51,683.515 912.07,683.515 912.629,683.515 913.188,683.515 913.747,683.515 914.307,683.515 914.866,683.515 915.425,683.515 915.984,683.515 916.544,683.515 917.103,683.515 917.662,683.515 918.221,683.515 918.781,683.515 919.34,683.515 919.899,683.515 920.458,683.515 921.018,683.515 921.577,683.515 922.136,683.515 922.695,683.515 923.255,683.515 923.814,683.515 924.373,683.515 924.932,683.515 925.492,683.515 926.051,683.515 926.61,683.515 927.169,683.515 927.729,683.515 928.288,683.515 928.847,683.515 929.406,683.515 929.966,683.515 930.525,683.515 931.084,683.515 931.644,683.515 932.203,683.515 932.762,683.515 933.321,683.515 933.881,683.515 934.44,683.515 934.999,683.515 935.558,683.515 936.118,683.515 936.677,683.515 937.236,683.515 937.795,683.515 938.355,683.515 938.914,683.515 939.473,683.515 940.032,683.515 940.592,683.515 941.151,683.515 941.71,683.515 942.269,683.515 942.829,683.515 943.388,683.515 943.947,683.515 944.506,683.515 945.066,683.515 945.625,683.515 946.184,683.515 946.743,683.515 947.303,683.515 947.862,683.515 948.421,683.515 948.98,683.515 949.54,683.515 950.099,683.515 950.658,683.515 951.217,683.515 951.777,683.515 952.336,683.515 952.895,683.515 953.454,683.515 954.014,683.515 954.573,683.515 955.132,683.515 955.691,683.515 956.251,683.515 956.81,683.515 957.369,683.515 957.928,683.515 958.488,683.515 959.047,683.515 959.606,683.515 960.165,683.515 960.725,683.515 961.284,683.515 961.843,683.515 962.402,683.515 962.962,683.515 963.521,683.515 964.08,683.515 964.639,683.515 965.199,683.515 965.758,683.515 966.317,683.515 966.876,683.515 967.436,683.515 967.995,683.515 968.554,683.515 969.113,683.515 969.673,683.515 970.232,683.515 970.791,683.515 971.35,683.515 971.91,683.515 972.469,683.515 973.028,683.515 973.587,683.515 974.147,683.515 974.706,683.515 975.265,683.515 975.824,683.515 976.384,683.515 976.943,683.515 977.502,683.515 978.061,683.515 978.621,683.515 979.18,683.515 979.739,683.515 980.298,683.515 980.858,683.515 981.417,683.515 981.976,683.515 982.535,683.515 983.095,683.515 983.654,683.515 984.213,683.515 984.772,683.515 985.332,683.515 985.891,683.515 986.45,683.515 987.009,683.515 987.569,683.515 988.128,683.515 988.687,683.515 989.246,683.515 989.806,683.515 990.365,683.515 990.924,683.515 991.483,683.515 992.043,683.515 992.602,683.515 993.161,683.515 993.72,683.515 994.28,683.515 994.839,683.515 995.398,683.515 995.957,683.515 996.517,683.515 997.076,683.515 997.635,683.515 998.194,683.515 998.754,683.515 999.313,683.515 999.872,683.515 1000.43,683.515 1000.99,683.515 1001.55,683.515 1002.11,683.515 1002.67,683.515 1003.23,683.515 1003.79,683.515 1004.35,683.515 1004.91,683.515 1005.46,683.515 1006.02,683.515 1006.58,683.515 1007.14,683.515 1007.7,683.515 1008.26,683.515 1008.82,683.515 1009.38,683.515 1009.94,683.515 1010.5,683.515 1011.06,683.515 1011.62,683.515 1012.18,683.515 1012.73,683.515 1013.29,683.515 1013.85,683.515 1014.41,683.515 1014.97,683.515 1015.53,683.515 1016.09,683.515 1016.65,683.515 1017.21,683.515 1017.77,683.515 1018.33,683.515 1018.89,683.515 1019.45,683.515 1020.01,683.515 1020.56,683.515 1021.12,683.515 1021.68,683.515 1022.24,683.515 1022.8,683.515 1023.36,683.515 1023.92,683.515 1024.48,683.515 1025.04,683.515 1025.6,683.515 1026.16,683.515 1026.72,683.515 1027.28,683.515 1027.83,683.515 1028.39,683.515 1028.95,683.515 1029.51,683.515 1030.07,683.515 1030.63,683.515 1031.19,683.515 1031.75,683.515 1032.31,683.515 1032.87,683.515 1033.43,683.515 1033.99,683.515 1034.55,683.515 1035.1,683.515 1035.66,683.515 1036.22,683.515 1036.78,683.515 1037.34,683.515 1037.9,683.515 1038.46,683.515 1039.02,683.515 1039.58,683.515 1040.14,683.515 1040.7,683.515 1041.26,683.515 1041.82,683.515 1042.38,683.515 1042.93,683.515 1043.49,683.515 1044.05,683.515 1044.61,683.515 1045.17,683.515 1045.73,683.515 1046.29,683.515 1046.85,683.515 1047.41,683.515 1047.97,683.515 1048.53,683.515 1049.09,683.515 1049.65,683.515 1050.2,683.515 1050.76,683.515 1051.32,683.515 1051.88,683.515 1052.44,683.515 1053,683.515 1053.56,683.515 1054.12,683.515 1054.68,683.515 1055.24,683.515 1055.8,683.515 1056.36,683.515 1056.92,683.515 1057.48,683.515 1058.03,683.515 1058.59,683.515 1059.15,683.515 1059.71,683.515 1060.27,683.515 1060.83,683.515 1061.39,683.515 1061.95,683.515 1062.51,683.515 1063.07,683.515 1063.63,683.515 1064.19,683.515 1064.75,683.515 1065.3,683.515 1065.86,683.515 1066.42,683.515 1066.98,683.515 1067.54,683.515 1068.1,683.515 1068.66,683.515 1069.22,683.515 1069.78,683.515 1070.34,683.515 1070.9,683.515 1071.46,683.515 1072.02,683.515 1072.57,683.515 1073.13,683.515 1073.69,683.515 1074.25,683.515 1074.81,683.515 1075.37,683.515 1075.93,683.515 1076.49,683.515 1077.05,683.515 1077.61,683.515 1078.17,683.515 1078.73,683.515 1079.29,683.515 1079.85,683.515 1080.4,683.515 1080.96,683.515 1081.52,683.515 1082.08,683.515 1082.64,683.515 1083.2,683.515 1083.76,683.515 1084.32,683.515 1084.88,683.515 1085.44,683.515 1086,683.515 1086.56,683.515 1087.12,683.515 1087.67,683.515 1088.23,683.515 1088.79,683.515 1089.35,683.515 1089.91,683.515 1090.47,683.515 1091.03,683.515 1091.59,683.515 1092.15,683.515 1092.71,683.515 1093.27,683.515 1093.83,683.515 1094.39,683.515 1094.94,683.515 1095.5,683.515 1096.06,683.515 1096.62,683.515 1097.18,683.515 1097.74,683.515 1098.3,683.515 1098.86,683.515 1099.42,683.515 1099.98,683.515 1100.54,683.515 1101.1,683.515 1101.66,683.515 1102.22,683.515 1102.77,683.515 1103.33,683.515 1103.89,683.515 1104.45,683.515 1105.01,683.515 1105.57,683.515 1106.13,683.515 1106.69,683.515 1107.25,683.515 1107.81,683.515 1108.37,683.515 1108.93,683.515 1109.49,683.515 1110.04,683.515 1110.6,683.515 1111.16,683.515 1111.72,683.515 1112.28,683.515 1112.84,683.515 1113.4,683.515 1113.96,683.515 1114.52,683.515 1115.08,683.515 1115.64,683.515 1116.2,683.515 1116.76,683.515 1117.31,683.515 1117.87,683.515 1118.43,683.515 1118.99,683.515 1119.55,683.515 1120.11,683.515 1120.67,683.515 1121.23,683.515 1121.79,683.515 1122.35,683.515 1122.91,683.515 1123.47,683.515 1124.03,683.515 1124.59,683.515 1125.14,683.515 1125.7,683.515 1126.26,683.515 1126.82,683.515 1127.38,683.515 1127.94,683.515 1128.5,683.515 1129.06,683.515 1129.62,683.515 1130.18,683.515 1130.74,683.515 1131.3,683.515 1131.86,683.515 1132.41,683.515 1132.97,683.515 1133.53,683.515 1134.09,683.515 1134.65,683.515 1135.21,683.515 1135.77,683.515 1136.33,683.515 1136.89,683.515 1137.45,683.515 1138.01,683.515 1138.57,683.515 1139.13,683.515 1139.68,683.515 1140.24,683.515 1140.8,683.515 1141.36,683.515 1141.92,683.515 1142.48,683.515 1143.04,683.515 1143.6,683.515 1144.16,683.515 1144.72,683.515 1145.28,683.515 1145.84,683.515 1146.4,683.515 1146.96,683.515 1147.51,683.515 1148.07,683.515 1148.63,683.515 1149.19,683.515 1149.75,683.515 1150.31,683.515 1150.87,683.515 1151.43,683.515 1151.99,683.515 1152.55,683.515 1153.11,683.515 1153.67,683.515 1154.23,683.515 1154.78,683.515 1155.34,683.515 1155.9,683.515 1156.46,683.515 1157.02,683.515 1157.58,683.515 1158.14,683.515 1158.7,683.515 1159.26,683.515 1159.82,683.515 1160.38,683.515 1160.94,683.515 1161.5,683.515 1162.05,683.515 1162.61,683.515 1163.17,683.515 1163.73,683.515 1164.29,683.515 1164.85,683.515 1165.41,683.515 1165.97,683.515 1166.53,683.515 1167.09,683.515 1167.65,683.515 1168.21,683.515 1168.77,683.515 1169.33,683.515 1169.88,683.515 1170.44,683.515 1171,683.515 1171.56,683.515 1172.12,683.515 1172.68,683.515 1173.24,683.515 1173.8,683.515 1174.36,683.515 1174.92,683.515 1175.48,683.515 1176.04,683.515 1176.6,683.515 1177.15,683.515 1177.71,683.515 1178.27,683.515 1178.83,683.515 1179.39,683.515 1179.95,683.515 1180.51,683.515 1181.07,683.515 1181.63,683.515 1182.19,683.515 1182.75,683.515 1183.31,683.515 1183.87,683.515 1184.43,683.515 1184.98,683.515 1185.54,683.515 1186.1,683.515 1186.66,683.515 1187.22,683.515 1187.78,683.515 1188.34,683.515 1188.9,683.515 1189.46,683.515 1190.02,683.515 1190.58,683.515 1191.14,683.515 1191.7,683.515 1192.25,683.515 1192.81,683.515 1193.37,683.515 1193.93,683.515 1194.49,683.515 1195.05,683.515 1195.61,683.515 1196.17,683.515 1196.73,683.515 1197.29,683.515 1197.85,683.515 1198.41,683.515 1198.97,683.515 1199.52,683.515 1200.08,683.515 1200.64,683.515 1201.2,683.515 1201.76,683.515 1202.32,683.515 1202.88,683.515 1203.44,683.515 1204,683.515 1204.56,683.515 1205.12,683.515 1205.68,683.515 1206.24,683.515 1206.8,683.515 1207.35,683.515 1207.91,683.515 1208.47,683.515 1209.03,683.515 1209.59,683.515 1210.15,683.515 1210.71,683.515 1211.27,683.515 1211.83,683.515 1212.39,683.515 1212.95,683.515 1213.51,683.515 1214.07,683.515 1214.62,683.515 1215.18,683.515 1215.74,683.515 1216.3,683.515 1216.86,683.515 1217.42,683.515 1217.98,683.515 1218.54,683.515 1219.1,683.515 1219.66,683.515 1220.22,683.515 1220.78,683.515 1221.34,683.515 1221.89,683.515 1222.45,683.515 1223.01,683.515 1223.57,683.515 1224.13,683.515 1224.69,683.515 1225.25,683.515 1225.81,683.515 1226.37,683.515 1226.93,683.515 1227.49,683.515 1228.05,683.515 1228.61,683.515 1229.17,683.515 1229.72,683.515 1230.28,683.515 1230.84,683.515 1231.4,683.515 1231.96,683.515 1232.52,683.515 1233.08,683.515 1233.64,683.515 1234.2,683.515 1234.76,683.515 1235.32,683.515 1235.88,683.515 1236.44,683.515 1236.99,683.515 1237.55,683.515 1238.11,683.515 1238.67,683.515 1239.23,683.515 1239.79,683.515 1240.35,683.515 1240.91,683.515 1241.47,683.515 1242.03,683.515 1242.59,683.515 1243.15,683.515 1243.71,683.515 1244.26,683.515 1244.82,683.515 1245.38,683.515 1245.94,683.515 1246.5,683.515 1247.06,683.515 1247.62,683.515 1248.18,683.515 1248.74,683.515 1249.3,683.515 1249.86,683.515 1250.42,683.515 1250.98,683.515 1251.54,683.515 1252.09,683.515 1252.65,683.515 1253.21,683.515 1253.77,683.515 1254.33,683.515 1254.89,683.515 1255.45,683.515 1256.01,683.515 1256.57,683.515 1257.13,683.515 1257.69,683.515 1258.25,683.515 1258.81,683.515 1259.36,683.515 1259.92,683.515 1260.48,683.515 1261.04,683.515 1261.6,683.515 1262.16,683.515 1262.72,683.515 1263.28,683.515 1263.84,683.515 1264.4,683.515 1264.96,683.515 1265.52,683.515 1266.08,683.515 1266.63,683.515 1267.19,683.515 1267.75,683.515 1268.31,683.515 1268.87,683.515 1269.43,683.515 1269.99,683.515 1270.55,683.515 1271.11,683.515 1271.67,683.515 1272.23,683.515 1272.79,683.515 1273.35,683.515 1273.91,683.515 1274.46,683.515 1275.02,683.515 1275.58,683.515 1276.14,683.515 1276.7,683.515 1277.26,683.515 1277.82,683.515 1278.38,683.515 1278.94,683.515 1279.5,683.515 1280.06,683.515 1280.62,683.515 1281.18,683.515 1281.73,683.515 1282.29,683.515 1282.85,683.515 1283.41,683.515 1283.97,683.515 1284.53,683.515 1285.09,683.515 1285.65,683.515 1286.21,683.515 1286.77,683.515 1287.33,683.515 1287.89,683.515 1288.45,683.515 1289,683.515 1289.56,683.515 1290.12,683.515 1290.68,683.515 1291.24,683.515 1291.8,683.515 1292.36,683.515 1292.92,683.515 1293.48,683.515 1294.04,683.515 1294.6,683.515 1295.16,683.515 1295.72,683.515 1296.28,683.515 1296.83,683.515 1297.39,683.515 1297.95,683.515 1298.51,683.515 1299.07,683.515 1299.63,683.515 1300.19,683.515 1300.75,683.515 1301.31,683.515 1301.87,683.515 1302.43,683.515 1302.99,683.515 1303.55,683.515 1304.1,683.515 1304.66,683.515 1305.22,683.515 1305.78,683.515 1306.34,683.515 1306.9,683.515 1307.46,683.515 1308.02,683.515 1308.58,683.515 1309.14,683.515 1309.7,683.515 1310.26,683.515 1310.82,683.515 1311.38,683.515 1311.93,683.515 1312.49,683.515 1313.05,683.515 1313.61,683.515 1314.17,683.515 1314.73,683.515 1315.29,683.515 1315.85,683.515 1316.41,683.515 1316.97,683.515 1317.53,683.515 1318.09,683.515 1318.65,683.515 1319.2,683.515 1319.76,683.515 1320.32,683.515 1320.88,683.515 1321.44,683.515 1322,683.515 1322.56,683.515 1323.12,683.515 1323.68,683.515 1324.24,683.515 1324.8,683.515 1325.36,683.515 1325.92,683.515 1326.47,683.515 1327.03,683.515 1327.59,683.515 1328.15,683.515 1328.71,683.515 1329.27,683.515 1329.83,683.515 1330.39,683.515 1330.95,683.515 1331.51,683.515 1332.07,683.515 1332.63,683.515 1333.19,683.515 1333.75,683.515 1334.3,683.515 1334.86,683.515 1335.42,683.515 1335.98,683.515 1336.54,683.515 1337.1,683.515 1337.66,683.515 1338.22,683.515 1338.78,683.515 1339.34,683.515 1339.9,683.515 1340.46,683.515 1341.02,683.515 1341.57,683.515 1342.13,683.515 1342.69,683.515 1343.25,683.515 1343.81,683.515 1344.37,683.515 1344.93,683.515 1345.49,683.515 1346.05,683.515 1346.61,683.515 1347.17,683.515 1347.73,683.515 1348.29,683.515 1348.84,683.515 1349.4,683.515 1349.96,683.515 1350.52,683.515 1351.08,683.515 1351.64,683.515 1352.2,683.515 1352.76,683.515 1353.32,683.515 1353.88,683.515 1354.44,683.515 1355,683.515 1355.56,683.515 1356.12,683.515 1356.67,683.515 1357.23,683.515 1357.79,683.515 1358.35,683.515 1358.91,683.515 1359.47,683.515 1360.03,683.515 1360.59,683.515 1361.15,683.515 1361.71,683.515 1362.27,683.515 1362.83,683.515 1363.39,683.515 1363.94,683.515 1364.5,683.515 1365.06,683.515 1365.62,683.515 1366.18,683.515 1366.74,683.515 1367.3,683.515 1367.86,683.515 1368.42,683.515 1368.98,683.515 1369.54,683.515 1370.1,683.515 1370.66,683.515 1371.21,683.515 1371.77,683.515 1372.33,683.515 1372.89,683.515 1373.45,683.515 1374.01,683.515 1374.57,683.515 1375.13,683.515 1375.69,683.515 1376.25,683.515 1376.81,683.515 1377.37,683.515 1377.93,683.515 1378.49,683.515 1379.04,683.515 1379.6,683.515 1380.16,683.515 1380.72,683.515 1381.28,683.515 1381.84,683.515 1382.4,683.515 1382.96,683.515 1383.52,683.515 1384.08,683.515 1384.64,683.515 1385.2,683.515 1385.76,683.515 1386.31,683.515 1386.87,683.515 1387.43,683.515 1387.99,683.515 1388.55,683.515 1389.11,683.515 1389.67,683.515 1390.23,683.515 1390.79,683.515 1391.35,683.515 1391.91,683.515 1392.47,683.515 1393.03,683.515 1393.58,683.515 1394.14,683.515 1394.7,683.515 1395.26,683.515 1395.82,683.515 1396.38,683.515 1396.94,683.515 1397.5,683.515 1398.06,683.515 1398.62,683.515 1399.18,683.515 1399.74,683.515 1400.3,683.515 1400.86,683.515 1401.41,683.515 1401.97,683.515 1402.53,683.515 1403.09,683.515 1403.65,683.515 1404.21,683.515 1404.77,683.515 1405.33,683.515 1405.89,683.515 1406.45,683.515 1407.01,683.515 1407.57,683.515 1408.13,683.515 1408.68,683.515 1409.24,683.515 1409.8,683.515 1410.36,683.515 1410.92,683.515 1411.48,683.515 1412.04,683.515 1412.6,683.515 1413.16,683.515 1413.72,683.515 1414.28,683.515 1414.84,683.515 1415.4,683.515 1415.95,683.515 1416.51,683.515 1417.07,683.515 1417.63,683.515 1418.19,683.515 1418.75,683.515 1419.31,683.515 1419.87,683.515 1420.43,683.515 1420.99,683.515 1421.55,683.515 1422.11,683.515 1422.67,683.515 1423.23,683.515 1423.78,683.515 1424.34,683.515 1424.9,683.515 1425.46,683.515 1426.02,683.515 1426.58,683.515 1427.14,683.515 1427.7,683.515 1428.26,683.515 1428.82,683.515 1429.38,683.515 1429.94,683.515 1430.5,683.515 1431.05,683.515 1431.61,683.515 1432.17,683.515 1432.73,683.515 1433.29,683.515 1433.85,683.515 1434.41,683.515 1434.97,683.515 1435.53,683.515 1436.09,683.515 1436.65,683.515 1437.21,683.515 1437.77,683.515 1438.33,683.515 1438.88,683.515 1439.44,683.515 1440,683.515 1440.56,683.515 1441.12,683.515 1441.68,683.515 1442.24,683.515 1442.8,683.515 1443.36,683.515 1443.92,683.515 1444.48,683.515 1445.04,683.515 1445.6,683.515 1446.15,683.515 1446.71,683.515 1447.27,683.515 1447.83,683.515 1448.39,683.515 1448.95,683.515 1449.51,683.515 1450.07,683.515 1450.63,683.515 1451.19,683.515 1451.75,683.515 1452.31,683.515 1452.87,683.515 1453.42,683.515 1453.98,683.515 1454.54,683.515 1455.1,683.515 1455.66,683.515 1456.22,683.515 1456.78,683.515 1457.34,683.515 1457.9,683.515 1458.46,683.515 1459.02,683.515 1459.58,683.515 1460.14,683.515 1460.7,683.515 1461.25,683.515 1461.81,683.515 1462.37,683.515 1462.93,683.515 1463.49,683.515 1464.05,683.515 1464.61,683.515 1465.17,683.515 1465.73,683.515 1466.29,683.515 1466.85,683.515 1467.41,683.515 1467.97,683.515 1468.52,683.515 1469.08,683.515 1469.64,683.515 1470.2,683.515 1470.76,683.515 1471.32,683.515 1471.88,683.515 1472.44,683.515 1473,683.515 1473.56,683.515 1474.12,683.515 1474.68,683.515 1475.24,683.515 1475.79,683.515 1476.35,683.515 1476.91,683.515 1477.47,683.515 1478.03,683.515 1478.59,683.515 1479.15,683.515 1479.71,683.515 1480.27,683.515 1480.83,683.515 1481.39,683.515 1481.95,683.515 1482.51,683.515 1483.07,683.515 1483.62,683.515 1484.18,683.515 1484.74,683.515 1485.3,683.515 1485.86,683.515 1486.42,683.515 1486.98,683.515 1487.54,683.515 1488.1,683.515 1488.66,683.515 1489.22,683.515 1489.78,683.515 1490.34,683.515 1490.89,683.515 1491.45,683.515 1492.01,683.515 1492.57,683.515 1493.13,683.515 1493.69,683.515 1494.25,683.515 1494.81,683.515 1495.37,683.515 1495.93,683.515 1496.49,683.515 1497.05,683.515 1497.61,683.515 1498.16,683.515 1498.72,683.515 1499.28,683.515 1499.84,683.515 1500.4,683.515 1500.96,683.515 1501.52,683.515 1502.08,683.515 1502.64,683.515 1503.2,683.515 1503.76,683.515 1504.32,683.515 1504.88,683.515 1505.44,683.515 1505.99,683.515 1506.55,683.515 1507.11,683.515 1507.67,683.515 1508.23,683.515 1508.79,683.515 1509.35,683.515 1509.91,683.515 1510.47,683.515 1511.03,683.515 1511.59,683.515 1512.15,683.515 1512.71,683.515 1513.26,683.515 1513.82,683.515 1514.38,683.515 1514.94,683.515 1515.5,683.515 1516.06,683.515 1516.62,683.515 1517.18,683.515 1517.74,683.515 1518.3,683.515 1518.86,683.515 1519.42,683.515 1519.98,683.515 1520.53,683.515 1521.09,683.515 1521.65,683.515 1522.21,683.515 1522.77,683.515 1523.33,683.515 1523.89,683.515 1524.45,683.515 1525.01,683.515 1525.57,683.515 1526.13,683.515 1526.69,683.515 1527.25,683.515 1527.81,683.515 1528.36,683.515 1528.92,683.515 1529.48,683.515 1530.04,683.515 1530.6,683.515 1531.16,683.515 1531.72,683.515 1532.28,683.515 1532.84,683.515 1533.4,683.515 1533.96,683.515 1534.52,683.515 1535.08,683.515 1535.63,683.515 1536.19,683.515 1536.75,683.515 1537.31,683.515 1537.87,683.515 1538.43,683.515 1538.99,683.515 1539.55,683.515 1540.11,683.515 1540.67,683.515 1541.23,683.515 1541.79,683.515 1542.35,683.515 1542.9,683.515 1543.46,683.515 1544.02,683.515 1544.58,683.515 1545.14,683.515 1545.7,683.515 1546.26,683.515 1546.82,683.515 1547.38,683.515 1547.94,683.515 1548.5,683.515 1549.06,683.515 1549.62,683.515 1550.18,683.515 1550.73,683.515 1551.29,683.515 1551.85,683.515 1552.41,683.515 1552.97,683.515 1553.53,683.515 1554.09,683.515 1554.65,683.515 1555.21,683.515 1555.77,683.515 1556.33,683.515 1556.89,683.515 1557.45,683.515 1558,683.515 1558.56,683.515 1559.12,683.515 1559.68,683.515 1560.24,683.515 1560.8,683.515 1561.36,683.515 1561.92,683.515 1562.48,683.515 1563.04,683.515 1563.6,683.515 1564.16,683.515 1564.72,683.515 1565.28,683.515 1565.83,683.515 1566.39,683.515 1566.95,683.515 1567.51,683.515 1568.07,683.515 1568.63,683.515 1569.19,683.515 1569.75,683.515 1570.31,683.515 1570.87,683.515 1571.43,683.515 1571.99,683.515 1572.55,683.515 1573.1,683.515 1573.66,683.515 1574.22,683.515 1574.78,683.515 1575.34,683.515 1575.9,683.515 1576.46,683.515 1577.02,683.515 1577.58,683.515 1578.14,683.515 1578.7,683.515 1579.26,683.515 1579.82,683.515 1580.37,683.515 1580.93,683.515 1581.49,683.515 1582.05,683.515 1582.61,683.515 1583.17,683.515 1583.73,683.515 1584.29,683.515 1584.85,683.515 1585.41,683.515 1585.97,683.515 1586.53,683.515 1587.09,683.515 1587.65,683.515 1588.2,683.515 1588.76,683.515 1589.32,683.515 1589.88,683.515 1590.44,683.515 1591,683.515 1591.56,683.515 1592.12,683.515 1592.68,683.515 1593.24,683.515 1593.8,683.515 1594.36,683.515 1594.92,683.515 1595.47,683.515 1596.03,683.515 1596.59,683.515 1597.15,683.515 1597.71,683.515 1598.27,683.515 1598.83,683.515 1599.39,683.515 1599.95,683.515 1600.51,683.515 1601.07,683.515 1601.63,683.515 1602.19,683.515 1602.74,683.515 1603.3,683.515 1603.86,683.515 1604.42,683.515 1604.98,683.515 1605.54,683.515 1606.1,683.515 1606.66,683.515 1607.22,683.515 1607.78,683.515 1608.34,683.515 1608.9,683.515 1609.46,683.515 1610.02,683.515 1610.57,683.515 1611.13,683.515 1611.69,683.515 1612.25,683.515 1612.81,683.515 1613.37,683.515 1613.93,683.515 1614.49,683.515 1615.05,683.515 1615.61,683.515 1616.17,683.515 1616.73,683.515 1617.29,683.515 1617.84,683.515 1618.4,683.515 1618.96,683.515 1619.52,683.515 1620.08,683.515 1620.64,683.515 1621.2,683.515 1621.76,683.515 1622.32,683.515 1622.88,683.515 1623.44,683.515 1624,683.515 1624.56,683.515 1625.11,683.515 1625.67,683.515 1626.23,683.515 1626.79,683.515 1627.35,683.515 1627.91,683.515 1628.47,683.515 1629.03,683.515 1629.59,683.515 1630.15,683.515 1630.71,683.515 1631.27,683.515 1631.83,683.515 1632.39,683.515 1632.94,683.515 1633.5,683.515 1634.06,683.515 1634.62,683.515 1635.18,683.515 1635.74,683.515 1636.3,683.515 1636.86,683.515 1637.42,683.515 1637.98,683.515 1638.54,683.515 1639.1,683.515 1639.66,683.515 1640.21,683.515 1640.77,683.515 1641.33,683.515 1641.89,683.515 1642.45,683.515 1643.01,683.515 1643.57,683.515 1644.13,683.515 1644.69,683.515 1645.25,683.515 1645.81,683.515 1646.37,683.515 1646.93,683.515 1647.48,683.515 1648.04,683.515 1648.6,683.515 1649.16,683.515 1649.72,683.515 1650.28,683.515 1650.84,683.515 1651.4,683.515 1651.96,683.515 1652.52,683.515 1653.08,683.515 1653.64,683.515 1654.2,683.515 1654.76,683.515 1655.31,683.515 1655.87,683.515 1656.43,683.515 1656.99,683.515 1657.55,683.515 1658.11,683.515 1658.67,683.515 1659.23,683.515 1659.79,683.515 1660.35,683.515 1660.91,683.515 1661.47,683.515 1662.03,683.515 1662.58,683.515 1663.14,683.515 1663.7,683.515 1664.26,683.515 1664.82,683.515 1665.38,683.515 1665.94,683.515 1666.5,683.515 1667.06,683.515 1667.62,683.515 1668.18,683.515 1668.74,683.515 1669.3,683.515 1669.85,683.515 1670.41,683.515 1670.97,683.515 1671.53,683.515 1672.09,683.515 1672.65,683.515 1673.21,683.515 1673.77,683.515 1674.33,683.515 1674.89,683.515 1675.45,683.515 1676.01,683.515 1676.57,683.515 1677.13,683.515 1677.68,683.515 1678.24,683.515 1678.8,683.515 1679.36,683.515 1679.92,683.515 1680.48,683.515 1681.04,683.515 1681.6,683.515 1682.16,683.515 1682.72,683.515 1683.28,683.515 1683.84,683.515 1684.4,683.515 1684.95,683.515 1685.51,683.515 1686.07,683.515 1686.63,683.515 1687.19,683.515 1687.75,683.515 1688.31,683.515 1688.87,683.515 1689.43,683.515 1689.99,683.515 1690.55,683.515 1691.11,683.515 1691.67,683.515 1692.23,683.515 1692.78,683.515 1693.34,683.515 1693.9,683.515 1694.46,683.515 1695.02,683.515 1695.58,683.515 1696.14,683.515 1696.7,683.515 1697.26,683.515 1697.82,683.515 1698.38,683.515 1698.94,683.515 1699.5,683.515 1700.05,683.515 1700.61,683.515 1701.17,683.515 1701.73,683.515 1702.29,683.515 1702.85,683.515 1703.41,683.515 1703.97,683.515 1704.53,683.515 1705.09,683.515 1705.65,683.515 1706.21,683.515 1706.77,683.515 1707.32,683.515 1707.88,683.515 1708.44,683.515 1709,683.515 1709.56,683.515 1710.12,683.515 1710.68,683.515 1711.24,683.515 1711.8,683.515 1712.36,683.515 1712.92,683.515 1713.48,683.515 1714.04,683.515 1714.6,683.515 1715.15,683.515 1715.71,683.515 1716.27,683.515 1716.83,683.515 1717.39,683.515 1717.95,683.515 1718.51,683.515 1719.07,683.515 1719.63,683.515 1720.19,683.515 1720.75,683.515 1721.31,683.515 1721.87,683.515 1722.42,683.515 1722.98,683.515 1723.54,683.515 1724.1,683.515 1724.66,683.515 1725.22,683.515 1725.78,683.515 1726.34,683.515 1726.9,683.515 1727.46,683.515 1728.02,683.515 1728.58,683.515 1729.14,683.515 1729.69,683.515 1730.25,683.515 1730.81,683.515 1731.37,683.515 1731.93,683.515 1732.49,683.515 1733.05,683.515 1733.61,683.515 1734.17,683.515 1734.73,683.515 1735.29,683.515 1735.85,683.515 1736.41,683.515 1736.97,683.515 1737.52,683.515 1738.08,683.515 1738.64,683.515 1739.2,683.515 1739.76,683.515 1740.32,683.515 1740.88,683.515 1741.44,683.515 1742,683.515 1742.56,683.515 1743.12,683.515 1743.68,683.515 1744.24,683.515 1744.79,683.515 1745.35,683.515 1745.91,683.515 1746.47,683.515 1747.03,683.515 1747.59,683.515 1748.15,683.515 1748.71,683.515 1749.27,683.515 1749.83,683.515 1750.39,683.515 1750.95,683.515 1751.51,683.515 1752.06,683.515 1752.62,683.515 1753.18,683.515 1753.74,683.515 1754.3,683.515 1754.86,683.515 1755.42,683.515 1755.98,683.515 1756.54,683.515 1757.1,683.515 1757.66,683.515 1758.22,683.515 1758.78,683.515 1759.34,683.515 1759.89,683.515 1760.45,683.515 1761.01,683.515 1761.57,683.515 1762.13,683.515 1762.69,683.515 1763.25,683.515 1763.81,683.515 1764.37,683.515 1764.93,683.515 1765.49,683.515 1766.05,683.515 1766.61,683.515 1767.16,683.515 1767.72,683.515 1768.28,683.515 1768.84,683.515 1769.4,683.515 1769.96,683.515 1770.52,683.515 1771.08,683.515 1771.64,683.515 1772.2,683.515 1772.76,683.515 1773.32,683.515 1773.88,683.515 1774.43,683.515 1774.99,683.515 1775.55,683.515 1776.11,683.515 1776.67,683.515 1777.23,683.515 1777.79,683.515 1778.35,683.515 1778.91,683.515 1779.47,683.515 1780.03,683.515 1780.59,683.515 1781.15,683.515 1781.71,683.515 1782.26,683.515 1782.82,683.515 1783.38,683.515 1783.94,683.515 1784.5,683.515 1785.06,683.515 1785.62,683.515 1786.18,683.515 1786.74,683.515 1787.3,683.515 1787.86,683.515 1788.42,683.515 1788.98,683.515 1789.53,683.515 1790.09,683.515 1790.65,683.515 1791.21,683.515 1791.77,683.515 1792.33,683.515 1792.89,683.515 1793.45,683.515 1794.01,683.515 1794.57,683.515 1795.13,683.515 1795.69,683.515 1796.25,683.515 1796.8,683.515 1797.36,683.515 1797.92,683.515 1798.48,683.515 1799.04,683.515 1799.6,683.515 1800.16,683.515 1800.72,683.515 1801.28,683.515 1801.84,683.515 1802.4,683.515 1802.96,683.515 1803.52,683.515 1804.08,683.515 1804.63,683.515 1805.19,683.515 1805.75,683.515 1806.31,683.515 1806.87,683.515 1807.43,683.515 1807.99,683.515 1808.55,683.515 1809.11,683.515 1809.67,683.515 1810.23,683.515 1810.79,683.515 1811.35,683.515 1811.9,683.515 1812.46,683.515 1813.02,683.515 1813.58,683.515 1814.14,683.515 1814.7,683.515 1815.26,683.515 1815.82,683.515 1816.38,683.515 1816.94,683.515 1817.5,683.515 1818.06,683.515 1818.62,683.515 1819.18,683.515 1819.73,683.515 1820.29,683.515 1820.85,683.515 1821.41,683.515 1821.97,683.515 1822.53,683.515 1823.09,683.515 1823.65,683.515 1824.21,683.515 1824.77,683.515 1825.33,683.515 1825.89,683.515 1826.45,683.515 1827,683.515 1827.56,683.515 1828.12,683.515 1828.68,683.515 1829.24,683.515 1829.8,683.515 1830.36,683.515 1830.92,683.515 1831.48,683.515 1832.04,683.515 1832.6,683.515 1833.16,683.515 1833.72,683.515 1834.27,683.515 1834.83,683.515 1835.39,683.515 1835.95,683.515 1836.51,683.515 1837.07,683.515 1837.63,683.515 1838.19,683.515 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.024584003562964 ± 0.02745151205957236\nProjected Energy: -4.014732157566965 ± (0.004796025352669986, 0.0041638159819124)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.586079</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">2.0618e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.2283e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.064e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.553e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.176e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.879e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321637\n -3.363124291613353\n -0.7590191922770906\n  0.1358418221962232\n  0.15789998694608087\n  0.8767114411781378\n  1.530592997097333\n  1.5835732611867401\n  3.072870330325867\n  3.1256726539518302\n  4.862107221562172\n  6.260694850380591\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix{T=Float64}(p) <: AbstractObservable{Hermitian{T, Matrix{T}}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1) => 0.5, BoseFS(2,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix{Float64}(1)\n\njulia> dot(dvec_b, Op1, dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix{Float32}(2)\nReducedDensityMatrix{Float32}(2)\n\njulia> dot(dvec_b, Op2, dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0) => 0.5, FermiFS(0,1,1,0) => 0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f, Op2, dvec_f)\n6×6 Hermitian{Float32, Matrix{Float32}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, minimum_size, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. Setting a minimum_size will stop generating addresses once at least minimum_size addresses have been generated, rather than returning the full basis. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://RimuQMC.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for parsing by Literate. The process of generating documentation is automated in the docs/make.jl file and assumes that the following line is at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example,","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt(S; orthogonalization_interval = 1) <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation, and they are orthogonalized every  orthogonalization_interval steps.\n\nUse with the keyword argument spectral_strategy in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\nn_spectral = 1: Number of targeted spectral states. Set n_spectral > 1 to find excited states.\nspectral_strategy = GramSchmidt(n_spectral): The SpectralStrategy used for  orthogonalizing spectral states.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\nminimum_size = 2*num_spectral_states(spectral_strategy): The minimum size of the basis   used to construct starting vectors for simulations of spectral states, if start_at   is not provided.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\nImplemented Strategies\n\nGramSchmidt: Orthogonalize the spectral states using the Gram-Schmidt procedure.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators.  The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.is_mpi_root","page":"API","title":"Rimu.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_allprintln-Tuple","page":"API","title":"Rimu.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.mpi_barrier","page":"API","title":"Rimu.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_rank","page":"API","title":"Rimu.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_seed!","page":"API","title":"Rimu.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.mpi_size","page":"API","title":"Rimu.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{S}, Tuple{R}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{R, S}, Any, Any}} where {R, S}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.@mpi_root-Tuple","page":"API","title":"Rimu.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise,add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.mpi_comm","page":"Dict vectors","title":"Rimu.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_rank","page":"Dict vectors","title":"Rimu.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.mpi_size","page":"Dict vectors","title":"Rimu.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
