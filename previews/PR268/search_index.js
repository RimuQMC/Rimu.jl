var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PNCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PNCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PNCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). The is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21183135575568326 ± 0.0016084655530583228\n   G2(1) = 0.9169164605712872 ± 0.0007453628044268338\n   G2(2) = 0.983222263071452 ± 0.0006114266554326992\n   G2(3) = 0.9878911969588368 ± 0.0008494220917039566\n   G2(4) = 0.983222263071452 ± 0.0006114266554326992\n   G2(5) = 0.9169164605712872 ± 0.0007453628044268338\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9975950225708243 ± 0.12890780741441513\n   Replica 2: -4.027319893473991 ± 0.1421879129756651\n   Replica 3: -4.0565698140283315 ± 0.1370826147461209\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip190\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip190)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip191\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip190)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip192\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.56 2211.02,1003.56 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.305 2211.02,746.305 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.048 2211.02,489.048 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.791 2211.02,231.791 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.56 423.181,1003.56 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.305 423.181,746.305 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.048 423.181,489.048 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.791 423.181,231.791 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.18 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.96 350.899 1271.52 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.52 Q363.608 1267.96 363.608 1260.85 Q363.608 1253.72 361.779 1250.18 Q359.973 1246.62 356.339 1246.62 M356.339 1242.91 Q362.149 1242.91 365.205 1247.52 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.58 365.205 1274.19 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.19 Q344.395 1269.58 344.395 1260.85 Q344.395 1252.1 347.45 1247.52 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M290.043 1016.91 L306.363 1016.91 L306.363 1020.84 L284.418 1020.84 L284.418 1016.91 Q287.08 1014.15 291.664 1009.52 Q296.27 1004.87 297.451 1003.53 Q299.696 1001 300.576 999.268 Q301.478 997.509 301.478 995.819 Q301.478 993.064 299.534 991.328 Q297.613 989.592 294.511 989.592 Q292.312 989.592 289.858 990.356 Q287.427 991.12 284.65 992.671 L284.65 987.948 Q287.474 986.814 289.927 986.236 Q292.381 985.657 294.418 985.657 Q299.789 985.657 302.983 988.342 Q306.177 991.027 306.177 995.518 Q306.177 997.647 305.367 999.569 Q304.58 1001.47 302.474 1004.06 Q301.895 1004.73 298.793 1007.95 Q295.691 1011.14 290.043 1016.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M316.224 986.282 L334.58 986.282 L334.58 990.217 L320.506 990.217 L320.506 998.689 Q321.524 998.342 322.543 998.18 Q323.562 997.995 324.58 997.995 Q330.367 997.995 333.747 1001.17 Q337.126 1004.34 337.126 1009.75 Q337.126 1015.33 333.654 1018.43 Q330.182 1021.51 323.862 1021.51 Q321.687 1021.51 319.418 1021.14 Q317.173 1020.77 314.765 1020.03 L314.765 1015.33 Q316.849 1016.47 319.071 1017.02 Q321.293 1017.58 323.77 1017.58 Q327.774 1017.58 330.112 1015.47 Q332.45 1013.36 332.45 1009.75 Q332.45 1006.14 330.112 1004.04 Q327.774 1001.93 323.77 1001.93 Q321.895 1001.93 320.02 1002.35 Q318.168 1002.76 316.224 1003.64 L316.224 986.282 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M356.339 989.36 Q352.728 989.36 350.899 992.925 Q349.094 996.467 349.094 1003.6 Q349.094 1010.7 350.899 1014.27 Q352.728 1017.81 356.339 1017.81 Q359.973 1017.81 361.779 1014.27 Q363.608 1010.7 363.608 1003.6 Q363.608 996.467 361.779 992.925 Q359.973 989.36 356.339 989.36 M356.339 985.657 Q362.149 985.657 365.205 990.263 Q368.284 994.847 368.284 1003.6 Q368.284 1012.32 365.205 1016.93 Q362.149 1021.51 356.339 1021.51 Q350.529 1021.51 347.45 1016.93 Q344.395 1012.32 344.395 1003.6 Q344.395 994.847 347.45 990.263 Q350.529 985.657 356.339 985.657 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M286.062 729.025 L304.418 729.025 L304.418 732.96 L290.344 732.96 L290.344 741.432 Q291.363 741.085 292.381 740.923 Q293.4 740.738 294.418 740.738 Q300.205 740.738 303.585 743.909 Q306.964 747.08 306.964 752.497 Q306.964 758.076 303.492 761.177 Q300.02 764.256 293.701 764.256 Q291.525 764.256 289.256 763.886 Q287.011 763.515 284.603 762.775 L284.603 758.076 Q286.687 759.21 288.909 759.765 Q291.131 760.321 293.608 760.321 Q297.613 760.321 299.951 758.214 Q302.288 756.108 302.288 752.497 Q302.288 748.886 299.951 746.779 Q297.613 744.673 293.608 744.673 Q291.733 744.673 289.858 745.089 Q288.006 745.506 286.062 746.386 L286.062 729.025 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M326.177 732.103 Q322.566 732.103 320.737 735.668 Q318.932 739.21 318.932 746.339 Q318.932 753.446 320.737 757.011 Q322.566 760.552 326.177 760.552 Q329.811 760.552 331.617 757.011 Q333.446 753.446 333.446 746.339 Q333.446 739.21 331.617 735.668 Q329.811 732.103 326.177 732.103 M326.177 728.4 Q331.987 728.4 335.043 733.006 Q338.122 737.59 338.122 746.339 Q338.122 755.066 335.043 759.673 Q331.987 764.256 326.177 764.256 Q320.367 764.256 317.288 759.673 Q314.233 755.066 314.233 746.339 Q314.233 737.59 317.288 733.006 Q320.367 728.4 326.177 728.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M356.339 732.103 Q352.728 732.103 350.899 735.668 Q349.094 739.21 349.094 746.339 Q349.094 753.446 350.899 757.011 Q352.728 760.552 356.339 760.552 Q359.973 760.552 361.779 757.011 Q363.608 753.446 363.608 746.339 Q363.608 739.21 361.779 735.668 Q359.973 732.103 356.339 732.103 M356.339 728.4 Q362.149 728.4 365.205 733.006 Q368.284 737.59 368.284 746.339 Q368.284 755.066 365.205 759.673 Q362.149 764.256 356.339 764.256 Q350.529 764.256 347.45 759.673 Q344.395 755.066 344.395 746.339 Q344.395 737.59 347.45 733.006 Q350.529 728.4 356.339 728.4 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M284.835 471.768 L307.057 471.768 L307.057 473.758 L294.511 506.328 L289.627 506.328 L301.432 475.703 L284.835 475.703 L284.835 471.768 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M316.224 471.768 L334.58 471.768 L334.58 475.703 L320.506 475.703 L320.506 484.175 Q321.524 483.828 322.543 483.666 Q323.562 483.481 324.58 483.481 Q330.367 483.481 333.747 486.652 Q337.126 489.823 337.126 495.24 Q337.126 500.818 333.654 503.92 Q330.182 506.999 323.862 506.999 Q321.687 506.999 319.418 506.629 Q317.173 506.258 314.765 505.518 L314.765 500.818 Q316.849 501.953 319.071 502.508 Q321.293 503.064 323.77 503.064 Q327.774 503.064 330.112 500.957 Q332.45 498.851 332.45 495.24 Q332.45 491.629 330.112 489.522 Q327.774 487.416 323.77 487.416 Q321.895 487.416 320.02 487.832 Q318.168 488.249 316.224 489.129 L316.224 471.768 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M356.339 474.846 Q352.728 474.846 350.899 478.411 Q349.094 481.953 349.094 489.082 Q349.094 496.189 350.899 499.754 Q352.728 503.295 356.339 503.295 Q359.973 503.295 361.779 499.754 Q363.608 496.189 363.608 489.082 Q363.608 481.953 361.779 478.411 Q359.973 474.846 356.339 474.846 M356.339 471.143 Q362.149 471.143 365.205 475.749 Q368.284 480.332 368.284 489.082 Q368.284 497.809 365.205 502.416 Q362.149 506.999 356.339 506.999 Q350.529 506.999 347.45 502.416 Q344.395 497.809 344.395 489.082 Q344.395 480.332 347.45 475.749 Q350.529 471.143 356.339 471.143 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M256.664 245.136 L264.303 245.136 L264.303 218.77 L255.992 220.437 L255.992 216.177 L264.256 214.511 L268.932 214.511 L268.932 245.136 L276.571 245.136 L276.571 249.071 L256.664 249.071 L256.664 245.136 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M296.015 217.589 Q292.404 217.589 290.576 221.154 Q288.77 224.696 288.77 231.825 Q288.77 238.932 290.576 242.497 Q292.404 246.038 296.015 246.038 Q299.65 246.038 301.455 242.497 Q303.284 238.932 303.284 231.825 Q303.284 224.696 301.455 221.154 Q299.65 217.589 296.015 217.589 M296.015 213.886 Q301.826 213.886 304.881 218.492 Q307.96 223.075 307.96 231.825 Q307.96 240.552 304.881 245.159 Q301.826 249.742 296.015 249.742 Q290.205 249.742 287.127 245.159 Q284.071 240.552 284.071 231.825 Q284.071 223.075 287.127 218.492 Q290.205 213.886 296.015 213.886 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M326.177 217.589 Q322.566 217.589 320.737 221.154 Q318.932 224.696 318.932 231.825 Q318.932 238.932 320.737 242.497 Q322.566 246.038 326.177 246.038 Q329.811 246.038 331.617 242.497 Q333.446 238.932 333.446 231.825 Q333.446 224.696 331.617 221.154 Q329.811 217.589 326.177 217.589 M326.177 213.886 Q331.987 213.886 335.043 218.492 Q338.122 223.075 338.122 231.825 Q338.122 240.552 335.043 245.159 Q331.987 249.742 326.177 249.742 Q320.367 249.742 317.288 245.159 Q314.233 240.552 314.233 231.825 Q314.233 223.075 317.288 218.492 Q320.367 213.886 326.177 213.886 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M356.339 217.589 Q352.728 217.589 350.899 221.154 Q349.094 224.696 349.094 231.825 Q349.094 238.932 350.899 242.497 Q352.728 246.038 356.339 246.038 Q359.973 246.038 361.779 242.497 Q363.608 238.932 363.608 231.825 Q363.608 224.696 361.779 221.154 Q359.973 217.589 356.339 217.589 M356.339 213.886 Q362.149 213.886 365.205 218.492 Q368.284 223.075 368.284 231.825 Q368.284 240.552 365.205 245.159 Q362.149 249.742 356.339 249.742 Q350.529 249.742 347.45 245.159 Q344.395 240.552 344.395 231.825 Q344.395 223.075 347.45 218.492 Q350.529 213.886 356.339 213.886 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip192)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.791 4017.76,231.791 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1249.06 457.691,1248.84 458.259,1247.49 458.828,1247.14 459.396,1246.76 459.964,1245.21 460.533,1244.7 461.101,1242.03 461.669,1241.44 462.238,1240.75 462.806,1239.98 463.375,1239.12 463.943,1238.14 464.511,1236.05 465.08,1233.85 465.648,1232.6 466.216,1230.23 466.785,1228.74 467.353,1226.16 467.921,1223.45 468.49,1220.7 469.058,1218.79 469.626,1215.67 470.195,1213.57 470.763,1211.28 471.331,1208.77 471.9,1206.13 472.468,1203.28 473.036,1200.2 473.605,1197.03 474.173,1192.64 474.741,1189.02 475.31,1185.18 475.878,1181.15 476.446,1175.9 477.015,1170.47 477.583,1165.85 478.152,1161 478.72,1155.95 479.288,1150.63 479.857,1144.02 480.425,1138.33 480.993,1130.33 481.562,1121.18 482.13,1113.94 482.698,1105.59 483.267,1099.08 483.835,1090.4 484.403,1082.52 484.972,1074.52 485.54,1065.29 486.108,1056.89 486.677,1048.33 487.245,1040.61 487.813,1030.6 488.382,1021.53 488.95,1012.34 489.518,1003.94 490.087,992.364 490.655,983.667 491.224,972.796 491.792,962.731 492.36,952.825 492.929,942.722 493.497,932.654 494.065,923.344 494.634,912.94 495.202,903.603 495.77,893.004 496.339,883.608 496.907,873.055 497.475,860.368 498.044,850.653 498.612,839.128 499.18,828.486 499.749,813.789 500.317,804.388 500.885,794.015 501.454,784.65 502.022,774.298 502.59,763.045 503.159,752.87 503.727,740.553 504.295,730.503 504.864,720.498 505.432,711.695 506.001,700.862 506.569,691.078 507.137,682.254 507.706,671.704 508.274,663.418 508.842,655.11 509.411,644.664 509.979,636.444 510.547,627.548 511.116,618.699 511.684,607.768 512.252,597.972 512.821,590.449 513.389,579.09 513.957,572.133 514.526,565.318 515.094,555.452 515.662,545.791 516.231,536.273 516.799,528.99 517.367,523.009 517.936,514.748 518.504,507.83 519.072,500.967 519.641,495.419 520.209,486.654 520.778,480.122 521.346,472.802 521.914,466.677 522.483,461.674 523.051,457.003 523.619,451.129 524.188,445.268 524.756,435.531 525.324,429.372 525.893,426.347 526.461,422.431 527.029,418.69 527.598,410.648 528.166,408.018 528.734,403.224 529.303,397.433 529.871,392.799 530.439,389.67 531.008,383.372 531.576,379.273 532.144,375.353 532.713,373.424 533.281,369.516 533.85,365.86 534.418,362.976 534.986,358.209 535.555,356.567 536.123,354.151 536.691,352.797 537.26,344.08 537.828,340.818 538.396,337.629 538.965,334.57 539.533,330.717 540.101,329.87 540.67,326.897 541.238,322.965 541.806,320.424 542.375,319.819 542.943,317.256 543.511,314.702 544.08,311.177 544.648,307.727 545.216,305.652 545.785,304.643 546.353,301.674 546.921,299.839 547.49,299.136 548.058,298.178 548.627,295.442 549.195,294.76 549.763,295.189 550.332,292.3 550.9,290.407 551.468,290.862 552.037,290.98 552.605,289.137 553.173,288.311 553.742,288.56 554.31,286.702 554.878,285.945 555.447,285.11 556.015,285.203 556.583,284.188 557.152,280.204 557.72,275.524 558.288,273.234 558.857,273.995 559.425,273.485 559.993,273.217 560.562,271.672 561.13,271.382 561.698,269.164 562.267,270.228 562.835,270.956 563.404,270.547 563.972,270.098 564.54,270.502 565.109,270.001 565.677,266.453 566.245,266.209 566.814,264.803 567.382,262.612 567.95,260.453 568.519,260.512 569.087,257.382 569.655,258.578 570.224,261.575 570.792,260.523 571.36,258.502 571.929,260.618 572.497,260.493 573.065,259.414 573.634,258.251 574.202,257.244 574.77,260.261 575.339,258.023 575.907,257.739 576.476,257.907 577.044,257.603 577.612,258.442 578.181,256.167 578.749,254.004 579.317,249.719 579.886,247.822 580.454,248.298 581.022,247.431 581.591,247.954 582.159,247.294 582.727,247.947 583.296,248.215 583.864,247.407 584.432,246.651 585.001,248.05 585.569,248.236 586.137,246.497 586.706,248.12 587.274,248.27 587.842,250.514 588.411,250.44 588.979,248.379 589.547,248.512 590.116,244.44 590.684,244.691 591.253,245.009 591.821,247.313 592.389,246.471 592.958,245.512 593.526,241.515 594.094,242.118 594.663,244.625 595.231,244.827 595.799,243.818 596.368,244.21 596.936,242.365 597.504,241.893 598.073,243.203 598.641,242.554 599.209,242.125 599.778,241.548 600.346,240.879 600.914,242.445 601.483,242.637 602.051,240.822 602.619,240.446 603.188,239.801 603.756,241.302 604.325,241.95 604.893,242.135 605.461,242.491 606.03,242.911 606.598,244.319 607.166,246.494 607.735,246.333 608.303,244.392 608.871,245.578 609.44,246.7 610.008,245.693 610.576,245.467 611.145,244.488 611.713,243.393 612.281,243.341 612.85,243.35 613.418,242.375 613.986,241.633 614.555,241.954 615.123,239.968 615.691,240.445 616.26,240.751 616.828,241.916 617.396,241.925 617.965,242.057 618.533,239.934 619.102,241.234 619.67,239.393 620.238,240.64 620.807,239.804 621.375,240.175 621.943,238.483 622.512,237.724 623.08,237.023 623.648,235.535 624.217,235.089 624.785,235.587 625.353,237.065 625.922,237.662 626.49,238.264 627.058,239.588 627.627,241.866 628.195,243.009 628.763,241.832 629.332,241.704 629.9,241.637 630.468,241.752 631.037,243.471 631.605,244.622 632.173,243.449 632.742,242.389 633.31,242.353 633.879,240.251 634.447,240.538 635.015,240.561 635.584,240.491 636.152,238.493 636.72,239.706 637.289,243.937 637.857,243.592 638.425,241.361 638.994,241.308 639.562,241.256 640.13,243.168 640.699,243.771 641.267,242.264 641.835,242.091 642.404,239.606 642.972,240.585 643.54,240.405 644.109,238.217 644.677,237.211 645.245,238.404 645.814,237.362 646.382,238.631 646.951,240.524 647.519,241.535 648.087,241.385 648.656,238.193 649.224,237.417 649.792,237.343 650.361,237.35 650.929,238.331 651.497,238.362 652.066,237.093 652.634,236.172 653.202,237.497 653.771,237.511 654.339,238.855 654.907,238.88 655.476,237.735 656.044,236.659 656.612,236.783 657.181,235.164 657.749,235.542 658.317,238.133 658.886,235.999 659.454,239.147 660.022,239.136 660.591,240.022 661.159,239.905 661.728,238.456 662.296,239.348 662.864,235.108 663.433,236.218 664.001,236.291 664.569,235.215 665.138,233.35 665.706,236.514 666.274,236.746 666.843,233.604 667.411,233.952 667.979,235.193 668.548,235.454 669.116,233.523 669.684,234.845 670.253,234.112 670.821,232.201 671.389,231.702 671.958,233.363 672.526,233.84 673.094,233.009 673.663,233.032 674.231,234.416 674.799,234.277 675.368,231.383 675.936,232.718 676.505,233.102 677.073,232.362 677.641,233.719 678.21,231.777 678.778,233.176 679.346,232.421 679.915,230.848 680.483,232.552 681.051,235.083 681.62,235.281 682.188,236.476 682.756,236.381 683.325,236.214 683.893,236.277 684.461,235.309 685.03,234.18 685.598,234.495 686.166,233.634 686.735,232.737 687.303,232.087 687.871,230.232 688.44,229.398 689.008,230.048 689.577,231.424 690.145,232.732 690.713,233.855 691.282,233.134 691.85,232.264 692.418,232.456 692.987,233.607 693.555,234.83 694.123,235.261 694.692,235.421 695.26,236.348 695.828,236.499 696.397,237.519 696.965,238.63 697.533,237.395 698.102,236.052 698.67,235.077 699.238,235.162 699.807,237.294 700.375,236.272 700.943,234.195 701.512,235.408 702.08,235.332 702.648,237.454 703.217,237.472 703.785,237.474 704.354,236.481 704.922,236.519 705.49,236.412 706.059,238.373 706.627,238.194 707.195,239.138 707.764,236.761 708.332,237.49 708.9,235.309 709.469,235.366 710.037,236.443 710.605,236.431 711.174,234.365 711.742,234.438 712.31,233.756 712.879,233.932 713.447,235.064 714.015,236.151 714.584,236.907 715.152,236.606 715.72,237.508 716.289,237.349 716.857,236.19 717.425,235.226 717.994,236.19 718.562,236.237 719.131,236.268 719.699,235.942 720.267,234.836 720.836,234.69 721.404,233.503 721.972,230.767 722.541,233.057 723.109,231.103 723.677,231.478 724.246,228.518 724.814,228.702 725.382,228.089 725.951,227.497 726.519,229.017 727.087,229.267 727.656,229.869 728.224,230.23 728.792,227.613 729.361,229.076 729.929,228.406 730.497,228.827 731.066,231.313 731.634,232.64 732.203,233.73 732.771,233.753 733.339,234.02 733.908,235.193 734.476,233.377 735.044,231.653 735.613,230.064 736.181,230.367 736.749,230.669 737.318,230.014 737.886,230.388 738.454,230.532 739.023,231.878 739.591,232.098 740.159,231.378 740.728,231.629 741.296,231.576 741.864,232.814 742.433,235.935 743.001,234.794 743.569,231.753 744.138,234.141 744.706,239.593 745.274,238.376 745.843,240.075 746.411,237.783 746.98,238.711 747.548,238.661 748.116,238.349 748.685,239.047 749.253,242.023 749.821,242.324 750.39,241.562 750.958,243.119 751.526,241.663 752.095,241.216 752.663,240.691 753.231,241.284 753.8,241.816 754.368,239.303 754.936,236.753 755.505,235.424 756.073,235.151 756.641,235.008 757.21,232.783 757.778,233.709 758.346,232.612 758.915,232.61 759.483,231.555 760.052,232.677 760.62,232.876 761.188,231.838 761.757,229.739 762.325,228.925 762.893,229.321 763.462,227.697 764.03,228.271 764.598,228.517 765.167,228.828 765.735,227.056 766.303,229.346 766.872,230.608 767.44,231.793 768.008,230.936 768.577,231.099 769.145,231.129 769.713,231.476 770.282,232.891 770.85,230.858 771.418,231.991 771.987,231.351 772.555,230.259 773.123,232.697 773.692,234.96 774.26,234.198 774.829,233.078 775.397,237.184 775.965,236.911 776.534,236.574 777.102,235.223 777.67,233.091 778.239,233.123 778.807,234.253 779.375,234.449 779.944,236.699 780.512,236.371 781.08,235.381 781.649,239.432 782.217,239.051 782.785,238.491 783.354,240.935 783.922,240.455 784.49,238.999 785.059,239.546 785.627,238.079 786.195,237.824 786.764,237.517 787.332,235.979 787.9,237.86 788.469,237.472 789.037,236.27 789.606,232.966 790.174,234.978 790.742,235.929 791.311,234.659 791.879,235.37 792.447,235.382 793.016,235.229 793.584,233.996 794.152,231.776 794.721,233.825 795.289,232.46 795.857,236.396 796.426,236.143 796.994,234.698 797.562,234.318 798.131,234.201 798.699,233.99 799.267,234.818 799.836,233.621 800.404,233.577 800.972,232.57 801.541,232.269 802.109,231.18 802.678,232.116 803.246,233.934 803.814,233.548 804.383,233.372 804.951,233.156 805.519,231.933 806.088,232.947 806.656,231.796 807.224,232.884 807.793,233.821 808.361,233.82 808.929,231.446 809.498,231.308 810.066,232.089 810.634,233.129 811.203,231.958 811.771,230.749 812.339,229.919 812.908,231.29 813.476,231.292 814.044,231.482 814.613,231.494 815.181,231.541 815.749,231.611 816.318,228.705 816.886,228.863 817.455,230.33 818.023,229.492 818.591,228.396 819.16,228.461 819.728,229.792 820.296,228.975 820.865,229.197 821.433,229.565 822.001,229.771 822.57,230.77 823.138,230.923 823.706,229.99 824.275,231.332 824.843,231.568 825.411,230.62 825.98,229.601 826.548,229.765 827.116,228.045 827.685,227.338 828.253,228.686 828.821,226.627 829.39,226.955 829.958,228.202 830.526,229.548 831.095,229.866 831.663,229.039 832.232,228.55 832.8,229.846 833.368,230.974 833.937,233.056 834.505,232.004 835.073,231.979 835.642,229.961 836.21,230.417 836.778,230.597 837.347,231.826 837.915,232.611 838.483,232.65 839.052,232.601 839.62,230.807 840.188,230.835 840.757,231.197 841.325,232.464 841.893,232.769 842.462,234.009 843.03,231.827 843.598,232.967 844.167,232.953 844.735,231.849 845.304,231.899 845.872,230.004 846.44,231.199 847.009,234.214 847.577,234.268 848.145,235.253 848.714,234.112 849.282,234.137 849.85,233.863 850.419,232.626 850.987,233.822 851.555,234.613 852.124,234.498 852.692,233.192 853.26,234.224 853.829,235.196 854.397,236.235 854.965,234.06 855.534,232.972 856.102,232.987 856.67,231.832 857.239,231.759 857.807,230.665 858.375,231.748 858.944,227.698 859.512,230.31 860.081,227.631 860.649,228.1 861.217,227.414 861.786,227.017 862.354,227.467 862.922,227.942 863.491,228.204 864.059,228.479 864.627,231.749 865.196,232.703 865.764,231.866 866.332,228.832 866.901,227.119 867.469,228.665 868.037,229.858 868.606,230.042 869.174,229.19 869.742,229.377 870.311,229.742 870.879,231.146 871.447,230.341 872.016,231.727 872.584,231.836 873.152,227.97 873.721,228.35 874.289,228.651 874.858,225.855 875.426,226.333 875.994,226.744 876.563,227.335 877.131,228.935 877.699,232.333 878.268,230.396 878.836,232.634 879.404,232.732 879.973,231.941 880.541,232.032 881.109,233.445 881.678,233.483 882.246,233.781 882.814,234.832 883.383,235.862 883.951,234.86 884.519,234.726 885.088,234.755 885.656,234.669 886.224,233.374 886.793,234.511 887.361,234.864 887.93,235.793 888.498,235.79 889.066,236.656 889.635,237.539 890.203,239.34 890.771,238.794 891.34,240.502 891.908,240.864 892.476,240.407 893.045,238.803 893.613,237.474 894.181,237.301 894.75,237.027 895.318,234.685 895.886,234.492 896.455,233.29 897.023,231.164 897.591,231.394 898.16,232.516 898.728,232.489 899.296,232.891 899.865,230.718 900.433,230.779 901.001,230.752 901.57,231.863 902.138,232.974 902.707,234.946 903.275,233.747 903.843,233.664 904.412,231.333 904.98,230.467 905.548,230.734 906.117,232.871 906.685,234.086 907.253,235.861 907.822,235.595 908.39,236.077 908.958,235.739 909.527,236.515 910.095,237.266 910.663,235.812 911.232,234.532 911.8,233.37 912.368,235.592 912.937,236.211 913.505,232.777 914.073,230.562 914.642,229.439 915.21,229.405 915.779,234.844 916.347,234.806 916.915,237.104 917.484,236.714 918.052,234.364 918.62,233.159 919.189,232.997 919.757,231.998 920.325,230.976 920.894,233.292 921.462,234.035 922.03,234.864 922.599,235.562 923.167,235.311 923.735,236.202 924.304,233.951 924.872,232.868 925.44,233.945 926.009,228.627 926.577,225.849 927.145,227.293 927.714,225.353 928.282,226.593 928.85,226.823 929.419,229.094 929.987,229.483 930.556,228.679 931.124,228.083 931.692,226.385 932.261,226.071 932.829,224.613 933.397,225.279 933.966,221.77 934.534,223.532 935.102,225.339 935.671,225.958 936.239,228.452 936.807,228.736 937.376,230.196 937.944,230.323 938.512,231.519 939.081,229.403 939.649,228.53 940.217,228.91 940.786,227.968 941.354,227.511 941.922,227.832 942.491,229.169 943.059,228.484 943.627,228.898 944.196,229.265 944.764,230.663 945.333,229.929 945.901,230.098 946.469,231.239 947.038,231.442 947.606,234.636 948.174,232.529 948.743,230.624 949.311,234.706 949.879,233.833 950.448,237.037 951.016,235.721 951.584,233.601 952.153,237.569 952.721,238.368 953.289,236.861 953.858,235.492 954.426,238.592 954.994,240.356 955.563,243.025 956.131,243.178 956.699,239.292 957.268,237.78 957.836,237.384 958.405,236.092 958.973,234.927 959.541,235.8 960.11,235.696 960.678,236.466 961.246,236.325 961.815,238.016 962.383,236.57 962.951,236.233 963.52,234.934 964.088,235.07 964.656,235.533 965.225,235.105 965.793,235.867 966.361,235.522 966.93,234.241 967.498,234.757 968.066,235.242 968.635,233.95 969.203,232.963 969.771,231.973 970.34,231.91 970.908,230.79 971.476,232.924 972.045,232.69 972.613,233.486 973.182,234.277 973.75,236.085 974.318,232.655 974.887,232.618 975.455,234.437 976.023,235.149 976.592,233.798 977.16,235.524 977.728,233.052 978.297,234.143 978.865,235.192 979.433,235.895 980.002,235.504 980.57,235.192 981.138,235.85 981.707,234.614 982.275,234.405 982.843,232.292 983.412,231.98 983.98,230.965 984.548,232.143 985.117,231.09 985.685,233.05 986.253,232.867 986.822,232.623 987.39,232.421 987.959,234.243 988.527,235.896 989.095,235.417 989.664,236.029 990.232,234.285 990.8,235.212 991.369,234.591 991.937,234.483 992.505,232.875 993.074,229.52 993.642,227.523 994.21,228.736 994.779,229.696 995.347,229.788 995.915,230.151 996.484,226.02 997.052,225.351 997.62,226.762 998.189,225.137 998.757,225.705 999.325,227.133 999.894,227.334 1000.46,227.674 1001.03,228.045 1001.6,230.32 1002.17,228.526 1002.74,226.557 1003.3,228.083 1003.87,227.445 1004.44,226.698 1005.01,228.202 1005.58,230.391 1006.15,229.736 1006.71,228.807 1007.28,231.046 1007.85,230.057 1008.42,231.307 1008.99,231.374 1009.56,231.412 1010.12,233.335 1010.69,233.394 1011.26,232.375 1011.83,230.267 1012.4,230.229 1012.97,228.448 1013.53,228.724 1014.1,228.871 1014.67,228.26 1015.24,227.686 1015.81,229.084 1016.38,230.413 1016.94,228.506 1017.51,226.826 1018.08,229.286 1018.65,228.615 1019.22,229.865 1019.79,227.074 1020.35,228.593 1020.92,228.82 1021.49,229.174 1022.06,227.531 1022.63,230.012 1023.2,230.31 1023.76,230.551 1024.33,230.667 1024.9,231.757 1025.47,230.812 1026.04,231.065 1026.61,231.286 1027.17,231.347 1027.74,232.194 1028.31,235.105 1028.88,236.038 1029.45,233.723 1030.02,233.761 1030.58,232.649 1031.15,233.529 1031.72,232.269 1032.29,232.236 1032.86,232.149 1033.43,232.266 1033.99,234.348 1034.56,234.258 1035.13,234.259 1035.7,234.936 1036.27,233.668 1036.84,235.45 1037.4,235.159 1037.97,234.079 1038.54,235.88 1039.11,236.566 1039.68,235.204 1040.25,233.97 1040.81,233.648 1041.38,232.579 1041.95,231.516 1042.52,230.255 1043.09,230.618 1043.66,230.699 1044.22,230.866 1044.79,230.947 1045.36,232.043 1045.93,231.864 1046.5,230.835 1047.07,232.843 1047.63,230.827 1048.2,229.811 1048.77,227.875 1049.34,227.169 1049.91,227.705 1050.48,227.994 1051.05,227.452 1051.61,227.984 1052.18,228.272 1052.75,228.482 1053.32,227.955 1053.89,228.467 1054.46,228.812 1055.02,232.01 1055.59,230.879 1056.16,231.288 1056.73,231.447 1057.3,232.705 1057.87,233.774 1058.43,235.714 1059,234.659 1059.57,233.654 1060.14,233.705 1060.71,233.572 1061.28,232.533 1061.84,230.612 1062.41,229.937 1062.98,233.423 1063.55,235.375 1064.12,236.182 1064.69,238.94 1065.25,238.37 1065.82,238.314 1066.39,238.069 1066.96,235.566 1067.53,236.194 1068.1,238.907 1068.66,237.333 1069.23,236.861 1069.8,235.553 1070.37,235.227 1070.94,235.091 1071.51,234.999 1072.07,233.639 1072.64,234.474 1073.21,234.183 1073.78,232.899 1074.35,232.8 1074.92,232.745 1075.48,232.619 1076.05,231.522 1076.62,228.662 1077.19,231.083 1077.76,228.792 1078.33,229.124 1078.89,229.079 1079.46,229.611 1080.03,230.678 1080.6,229.654 1081.17,228.039 1081.74,226.466 1082.3,225.688 1082.87,227.273 1083.44,228.764 1084.01,229.116 1084.58,228.414 1085.15,228.772 1085.71,228.987 1086.28,232.182 1086.85,232.18 1087.42,231.332 1087.99,229.359 1088.56,230.695 1089.12,228.722 1089.69,229.105 1090.26,229.401 1090.83,229.527 1091.4,227.632 1091.97,226.749 1092.53,230.157 1093.1,229.306 1093.67,229.681 1094.24,229.901 1094.81,230.091 1095.38,230.237 1095.94,232.333 1096.51,231.339 1097.08,233.414 1097.65,233.458 1098.22,234.284 1098.79,233.807 1099.35,233.801 1099.92,232.7 1100.49,233.793 1101.06,236.841 1101.63,235.471 1102.2,235.472 1102.76,233.179 1103.33,233.151 1103.9,232.128 1104.47,232.124 1105.04,232.203 1105.61,231.323 1106.17,230.453 1106.74,232.739 1107.31,232.663 1107.88,234.479 1108.45,233.408 1109.02,233.416 1109.58,233.398 1110.15,227.215 1110.72,228.475 1111.29,230.035 1111.86,229.062 1112.43,230.084 1112.99,231.462 1113.56,230.569 1114.13,231.692 1114.7,231.8 1115.27,231.879 1115.84,232.965 1116.4,233.073 1116.97,232.861 1117.54,231.806 1118.11,232.091 1118.68,233.139 1119.25,233.018 1119.81,232.76 1120.38,231.808 1120.95,232.821 1121.52,230.736 1122.09,230.987 1122.66,228.124 1123.23,226.651 1123.79,227.346 1124.36,228.658 1124.93,233.853 1125.5,234.697 1126.07,232.528 1126.64,233.549 1127.2,232.371 1127.77,232.336 1128.34,232.052 1128.91,233.177 1129.48,233.43 1130.05,233.239 1130.61,236.045 1131.18,233.79 1131.75,235.631 1132.32,235.286 1132.89,235.168 1133.46,234.992 1134.02,237.086 1134.59,234.811 1135.16,232.753 1135.73,232.665 1136.3,233.764 1136.87,232.517 1137.43,232.336 1138,232.261 1138.57,233.119 1139.14,234.125 1139.71,234.018 1140.28,229.818 1140.84,226.865 1141.41,227.32 1141.98,229.618 1142.55,229.921 1143.12,231.1 1143.69,227.204 1144.25,225.394 1144.82,226.913 1145.39,228.599 1145.96,230.036 1146.53,230.042 1147.1,230.03 1147.66,230.319 1148.23,231.5 1148.8,230.561 1149.37,230.79 1149.94,230.882 1150.51,232.957 1151.07,234.07 1151.64,235.047 1152.21,235.797 1152.78,234.502 1153.35,234.351 1153.92,234.076 1154.48,235.852 1155.05,232.4 1155.62,231.391 1156.19,230.013 1156.76,232.3 1157.33,231.279 1157.89,232.496 1158.46,231.467 1159.03,233.726 1159.6,234.358 1160.17,235.038 1160.74,232.782 1161.3,231.92 1161.87,230.861 1162.44,229.97 1163.01,230.977 1163.58,230.827 1164.15,231.895 1164.71,233.061 1165.28,232.024 1165.85,230.986 1166.42,228.214 1166.99,231.624 1167.56,232.694 1168.12,231.477 1168.69,231.515 1169.26,231.836 1169.83,233.889 1170.4,235.629 1170.97,236.511 1171.53,236.081 1172.1,234.861 1172.67,235.827 1173.24,234.392 1173.81,235.235 1174.38,235.379 1174.94,234.348 1175.51,234.088 1176.08,231.879 1176.65,228.756 1177.22,229.867 1177.79,230.963 1178.35,231.979 1178.92,233.037 1179.49,232.804 1180.06,230.845 1180.63,230.782 1181.2,230.735 1181.76,229.998 1182.33,229.303 1182.9,230.483 1183.47,232.558 1184.04,232.551 1184.61,230.219 1185.17,229.203 1185.74,231.552 1186.31,231.71 1186.88,233.032 1187.45,230.864 1188.02,230.049 1188.58,228.362 1189.15,227.543 1189.72,226.985 1190.29,229.704 1190.86,230.861 1191.43,232.898 1192,233.978 1192.56,232.787 1193.13,234.687 1193.7,236.42 1194.27,236.298 1194.84,237.931 1195.41,237.566 1195.97,234.954 1196.54,234.821 1197.11,233.529 1197.68,236.303 1198.25,235.979 1198.82,235.68 1199.38,233.33 1199.95,233.117 1200.52,237.229 1201.09,237.701 1201.66,237.375 1202.23,238.942 1202.79,238.425 1203.36,237.866 1203.93,237.336 1204.5,237.703 1205.07,235.99 1205.64,234.348 1206.2,234.166 1206.77,235.054 1207.34,234.652 1207.91,235.158 1208.48,233.897 1209.05,234.733 1209.61,233.418 1210.18,231.036 1210.75,233.175 1211.32,235.006 1211.89,233.448 1212.46,235.185 1213.02,231.707 1213.59,229.523 1214.16,228.55 1214.73,228.534 1215.3,230.718 1215.87,230.561 1216.43,231.51 1217,230.283 1217.57,231.33 1218.14,231.213 1218.71,229.043 1219.28,229.256 1219.84,231.322 1220.41,229.337 1220.98,230.555 1221.55,231.543 1222.12,232.449 1222.69,232.228 1223.25,235.989 1223.82,234.395 1224.39,234.082 1224.96,236.87 1225.53,237.24 1226.1,237.893 1226.66,237.189 1227.23,233.66 1227.8,234.524 1228.37,236.271 1228.94,237.939 1229.51,235.458 1230.07,233.239 1230.64,232.015 1231.21,230.901 1231.78,230.998 1232.35,231.173 1232.92,231.169 1233.48,230.915 1234.05,229.652 1234.62,229.752 1235.19,229.93 1235.76,228.768 1236.33,227.711 1236.89,227.89 1237.46,228.23 1238.03,228.244 1238.6,230.366 1239.17,229.383 1239.74,231.488 1240.3,230.588 1240.87,231.497 1241.44,231.408 1242.01,232.106 1242.58,229.016 1243.15,228.873 1243.71,227 1244.28,226.322 1244.85,226.659 1245.42,228.01 1245.99,229.147 1246.56,228.313 1247.12,227.405 1247.69,227.596 1248.26,226.758 1248.83,226.185 1249.4,225.609 1249.97,225.927 1250.53,227.25 1251.1,229.678 1251.67,230.611 1252.24,230.556 1252.81,229.704 1253.38,226.794 1253.94,225.113 1254.51,225.611 1255.08,227.206 1255.65,226.308 1256.22,226.732 1256.79,226.029 1257.35,227.606 1257.92,227.826 1258.49,229.341 1259.06,229.657 1259.63,229.879 1260.2,231.121 1260.76,232.25 1261.33,232.233 1261.9,232.052 1262.47,232.807 1263.04,233.679 1263.61,237.603 1264.18,235.321 1264.74,234.137 1265.31,233.815 1265.88,233.866 1266.45,233.773 1267.02,232.768 1267.59,230.864 1268.15,230.163 1268.72,230.283 1269.29,231.44 1269.86,231.619 1270.43,232.535 1271,230.29 1271.56,232.511 1272.13,234.458 1272.7,233.129 1273.27,233.253 1273.84,233.204 1274.41,234.073 1274.97,232.845 1275.54,231.964 1276.11,232.994 1276.68,234.249 1277.25,233.113 1277.82,232.104 1278.38,232.079 1278.95,231.967 1279.52,232.09 1280.09,233.07 1280.66,231.913 1281.23,231.888 1281.79,233.93 1282.36,232.442 1282.93,231.453 1283.5,231.605 1284.07,230.441 1284.64,230.474 1285.2,232.835 1285.77,234.51 1286.34,237.471 1286.91,234.989 1287.48,232.736 1288.05,232.512 1288.61,231.408 1289.18,230.409 1289.75,228.392 1290.32,228.627 1290.89,230.721 1291.46,228.564 1292.02,226.53 1292.59,225.77 1293.16,227.035 1293.73,226.377 1294.3,225.637 1294.87,226.325 1295.43,227.937 1296,229.084 1296.57,227.199 1297.14,227.578 1297.71,226.765 1298.28,228.271 1298.84,229.648 1299.41,229.848 1299.98,231.064 1300.55,231.366 1301.12,231.507 1301.69,233.462 1302.25,233.478 1302.82,232.291 1303.39,232.289 1303.96,230.274 1304.53,230.402 1305.1,228.54 1305.66,230.299 1306.23,232.601 1306.8,230.566 1307.37,230.973 1307.94,231.998 1308.51,231.763 1309.07,228.614 1309.64,230.011 1310.21,228.146 1310.78,229.393 1311.35,230.661 1311.92,230.678 1312.48,231.919 1313.05,230.866 1313.62,232.231 1314.19,231.578 1314.76,230.504 1315.33,231.638 1315.89,231.765 1316.46,231.961 1317.03,233.032 1317.6,234.14 1318.17,235.131 1318.74,236.049 1319.3,237.814 1319.87,237.533 1320.44,238.266 1321.01,236.86 1321.58,239.645 1322.15,239.152 1322.71,237.437 1323.28,238.204 1323.85,237.64 1324.42,236.248 1324.99,238.015 1325.56,237.164 1326.12,237.754 1326.69,236.115 1327.26,237.822 1327.83,238.49 1328.4,237.849 1328.97,237.652 1329.53,237.079 1330.1,237.661 1330.67,238.324 1331.24,236.502 1331.81,235.174 1332.38,233.901 1332.94,233.648 1333.51,233.408 1334.08,235.173 1334.65,234.986 1335.22,236.907 1335.79,235.384 1336.36,235.059 1336.92,237.905 1337.49,237.363 1338.06,234.712 1338.63,235.182 1339.2,234.772 1339.77,234.573 1340.33,235.469 1340.9,234.006 1341.47,233.708 1342.04,231.389 1342.61,231.357 1343.18,229.416 1343.74,227.244 1344.31,227.458 1344.88,227.689 1345.45,225.868 1346.02,226.074 1346.59,225.303 1347.15,224.494 1347.72,223.966 1348.29,224.444 1348.86,222.802 1349.43,220.316 1350,220.072 1350.56,219.895 1351.13,223.713 1351.7,224.195 1352.27,223.554 1352.84,223.088 1353.41,223.642 1353.97,226.098 1354.54,226.505 1355.11,227.176 1355.68,226.537 1356.25,229.23 1356.82,230.567 1357.38,231.639 1357.95,234.958 1358.52,233.806 1359.09,233.8 1359.66,230.309 1360.23,231.499 1360.79,230.604 1361.36,231.648 1361.93,231.87 1362.5,229.857 1363.07,233.335 1363.64,233.167 1364.2,231.169 1364.77,231.354 1365.34,230.323 1365.91,230.605 1366.48,230.728 1367.05,231.91 1367.61,232.041 1368.18,234.051 1368.75,233.997 1369.32,232.734 1369.89,231.789 1370.46,231.757 1371.02,232.86 1371.59,232.578 1372.16,231.661 1372.73,233.941 1373.3,234.811 1373.87,233.337 1374.43,232.315 1375,231.916 1375.57,231.963 1376.14,230.616 1376.71,231.637 1377.28,230.538 1377.84,233.722 1378.41,230.699 1378.98,230.744 1379.55,231.616 1380.12,231.669 1380.69,232.686 1381.25,234.585 1381.82,235.325 1382.39,235.97 1382.96,234.412 1383.53,233.216 1384.1,233.233 1384.66,235.226 1385.23,235.085 1385.8,234.918 1386.37,234.786 1386.94,232.546 1387.51,230.361 1388.07,230.559 1388.64,229.6 1389.21,229.637 1389.78,223.676 1390.35,225.43 1390.92,225.576 1391.48,226.952 1392.05,228.197 1392.62,229.424 1393.19,231.56 1393.76,231.584 1394.33,230.576 1394.89,230.687 1395.46,231.787 1396.03,232.838 1396.6,230.711 1397.17,229.819 1397.74,230.169 1398.3,230.359 1398.87,231.713 1399.44,231.847 1400.01,232.041 1400.58,234.153 1401.15,235.095 1401.71,236.007 1402.28,235.712 1402.85,235.591 1403.42,235.215 1403.99,234.843 1404.56,232.74 1405.13,232.489 1405.69,230.511 1406.26,230.641 1406.83,230.774 1407.4,230.902 1407.97,231.958 1408.54,234.141 1409.1,235.051 1409.67,235.507 1410.24,235.117 1410.81,234.105 1411.38,230.071 1411.95,230.144 1412.51,230.167 1413.08,230.252 1413.65,231.447 1414.22,231.659 1414.79,228.584 1415.36,228.666 1415.92,228.735 1416.49,227.001 1417.06,227.346 1417.63,227.603 1418.2,226.812 1418.77,230.281 1419.33,230.429 1419.9,231.567 1420.47,230.559 1421.04,230.768 1421.61,232.967 1422.18,231.843 1422.74,231.763 1423.31,232.739 1423.88,233.88 1424.45,232.925 1425.02,233.987 1425.59,233.896 1426.15,232.614 1426.72,233.553 1427.29,230.547 1427.86,231.509 1428.43,233.324 1429,233.057 1429.56,231.977 1430.13,230.925 1430.7,232.057 1431.27,234.084 1431.84,232.865 1432.41,231.84 1432.97,232.009 1433.54,230.892 1434.11,230.975 1434.68,230.03 1435.25,234.207 1435.82,233.979 1436.38,236.16 1436.95,235.897 1437.52,235.749 1438.09,235.606 1438.66,234.535 1439.23,234.324 1439.79,234.06 1440.36,234.081 1440.93,233.985 1441.5,232.778 1442.07,232.496 1442.64,230.224 1443.2,229.477 1443.77,229.743 1444.34,232.048 1444.91,230.998 1445.48,231.22 1446.05,231.35 1446.61,231.318 1447.18,231.539 1447.75,232.677 1448.32,233.632 1448.89,233.538 1449.46,235.826 1450.02,235.276 1450.59,236.099 1451.16,236.586 1451.73,236.231 1452.3,236.849 1452.87,235.305 1453.43,235.969 1454,235.564 1454.57,238.263 1455.14,236.565 1455.71,235.088 1456.28,235.82 1456.84,234.509 1457.41,232.361 1457.98,232.09 1458.55,231.923 1459.12,231.006 1459.69,230.081 1460.25,229.95 1460.82,227.999 1461.39,226.949 1461.96,225.268 1462.53,224.715 1463.1,224.268 1463.66,224.637 1464.23,224.914 1464.8,222.23 1465.37,222.989 1465.94,224.874 1466.51,222.536 1467.07,223.307 1467.64,223.528 1468.21,225.129 1468.78,225.525 1469.35,228.027 1469.92,228.318 1470.48,229.622 1471.05,230.735 1471.62,230.089 1472.19,233.219 1472.76,231.422 1473.33,227.581 1473.89,229.956 1474.46,233.138 1475.03,231.906 1475.6,232.071 1476.17,232.321 1476.74,234.4 1477.31,233.248 1477.87,233.243 1478.44,235.232 1479.01,235.286 1479.58,234.967 1480.15,237.214 1480.72,236.907 1481.28,236.6 1481.85,235.484 1482.42,234.104 1482.99,232.878 1483.56,231.81 1484.13,228.98 1484.69,231.136 1485.26,229.161 1485.83,230.246 1486.4,232.469 1486.97,232.18 1487.54,231.172 1488.1,233.421 1488.67,234.431 1489.24,233.971 1489.81,232.574 1490.38,232.457 1490.95,233.401 1491.51,235.365 1492.08,235.062 1492.65,235.743 1493.22,234.259 1493.79,234.154 1494.36,231.01 1494.92,230.924 1495.49,230.237 1496.06,231.28 1496.63,231.174 1497.2,230.297 1497.77,231.571 1498.33,234.915 1498.9,233.478 1499.47,231.454 1500.04,232.4 1500.61,234.355 1501.18,236.174 1501.74,236.034 1502.31,236.714 1502.88,236.404 1503.45,236.028 1504.02,237.703 1504.59,238.329 1505.15,238.785 1505.72,238.275 1506.29,237.87 1506.86,236.361 1507.43,234.854 1508,235.555 1508.56,234.035 1509.13,231.624 1509.7,231.463 1510.27,231.422 1510.84,232.257 1511.41,229.038 1511.97,227.854 1512.54,228.285 1513.11,227.415 1513.68,227.525 1514.25,227.864 1514.82,230.332 1515.38,230.278 1515.95,230.388 1516.52,230.573 1517.09,230.659 1517.66,231.026 1518.23,231.08 1518.79,231.18 1519.36,232.284 1519.93,233.307 1520.5,231.211 1521.07,231.154 1521.64,231.329 1522.2,231.402 1522.77,229.393 1523.34,230.542 1523.91,228.494 1524.48,228.613 1525.05,226.739 1525.61,227.095 1526.18,227.462 1526.75,226.699 1527.32,228.181 1527.89,227.281 1528.46,226.638 1529.02,227.035 1529.59,228.468 1530.16,227.705 1530.73,227.93 1531.3,229.185 1531.87,230.471 1532.43,229.584 1533,230.636 1533.57,232.946 1534.14,232.957 1534.71,233.89 1535.28,233.685 1535.84,230.131 1536.41,230.389 1536.98,231.598 1537.55,231.71 1538.12,231.469 1538.69,234.743 1539.25,231.484 1539.82,229.535 1540.39,228.786 1540.96,228.023 1541.53,228.366 1542.1,230.438 1542.66,231.695 1543.23,233.776 1543.8,232.662 1544.37,233.775 1544.94,234.635 1545.51,235.396 1546.08,236.193 1546.64,235.951 1547.21,237.825 1547.78,237.261 1548.35,238.046 1548.92,237.551 1549.49,238.844 1550.05,239.2 1550.62,235.67 1551.19,235.245 1551.76,233.045 1552.33,238.96 1552.9,237.215 1553.46,236.65 1554.03,235.142 1554.6,233.728 1555.17,231.411 1555.74,230.095 1556.31,233.018 1556.87,234.121 1557.44,235.826 1558.01,236.454 1558.58,235.802 1559.15,236.51 1559.72,234.97 1560.28,234.564 1560.85,236.23 1561.42,234.951 1561.99,233.722 1562.56,233.585 1563.13,233.376 1563.69,231.104 1564.26,230.889 1564.83,228.809 1565.4,227.888 1565.97,228.047 1566.54,227.251 1567.1,228.489 1567.67,228.675 1568.24,227.99 1568.81,226.299 1569.38,226.628 1569.95,227.965 1570.51,228.203 1571.08,226.462 1571.65,227.852 1572.22,228.111 1572.79,228.358 1573.36,228.269 1573.92,226.624 1574.49,228.164 1575.06,226.555 1575.63,226.89 1576.2,225.011 1576.77,225.635 1577.33,226.295 1577.9,226.981 1578.47,226.422 1579.04,227.64 1579.61,227.948 1580.18,228.239 1580.74,227.664 1581.31,229.278 1581.88,228.679 1582.45,230.024 1583.02,230.462 1583.59,231.705 1584.15,232.808 1584.72,231.814 1585.29,232.913 1585.86,231.915 1586.43,230.936 1587,232.257 1587.56,232.302 1588.13,233.562 1588.7,232.503 1589.27,233.55 1589.84,231.373 1590.41,230.395 1590.97,232.546 1591.54,230.362 1592.11,230.785 1592.68,231.059 1593.25,231.409 1593.82,232.546 1594.38,233.677 1594.95,234.368 1595.52,233.221 1596.09,234.08 1596.66,232.061 1597.23,233.121 1597.79,233.014 1598.36,230.851 1598.93,230.043 1599.5,228.96 1600.07,228.133 1600.64,228.396 1601.2,228.654 1601.77,229.039 1602.34,229.245 1602.91,230.491 1603.48,231.609 1604.05,233.745 1604.61,233.793 1605.18,232.524 1605.75,232.645 1606.32,233.966 1606.89,233.889 1607.46,231.614 1608.02,230.37 1608.59,230.412 1609.16,227.502 1609.73,227.057 1610.3,225.379 1610.87,226.976 1611.43,229.519 1612,229.623 1612.57,229.93 1613.14,229.14 1613.71,228.581 1614.28,228.724 1614.84,229.209 1615.41,228.603 1615.98,230.295 1616.55,232.579 1617.12,233.753 1617.69,234.74 1618.26,233.512 1618.82,232.479 1619.39,229.508 1619.96,230.781 1620.53,228.841 1621.1,229.151 1621.67,230.444 1622.23,232.63 1622.8,231.839 1623.37,235.015 1623.94,234.96 1624.51,235.894 1625.08,232.937 1625.64,235.237 1626.21,234.132 1626.78,233.076 1627.35,237.021 1627.92,238.69 1628.49,239.303 1629.05,237.917 1629.62,237.446 1630.19,237.117 1630.76,235.919 1631.33,235.607 1631.9,236.389 1632.46,238.386 1633.03,236.971 1633.6,236.788 1634.17,236.553 1634.74,235.167 1635.31,236.071 1635.87,237.001 1636.44,238.635 1637.01,238.998 1637.58,237.543 1638.15,236.944 1638.72,237.529 1639.28,235.987 1639.85,235.711 1640.42,233.357 1640.99,234.008 1641.56,232.617 1642.13,231.48 1642.69,231.304 1643.26,231.26 1643.83,231.016 1644.4,231.105 1644.97,228.201 1645.54,228.56 1646.1,227.671 1646.67,231.191 1647.24,228.011 1647.81,229.408 1648.38,227.617 1648.95,229.904 1649.51,231.954 1650.08,232.95 1650.65,234.174 1651.22,232.976 1651.79,233.783 1652.36,233.677 1652.92,235.312 1653.49,231.877 1654.06,230.939 1654.63,230.945 1655.2,230.779 1655.77,232.715 1656.33,234.678 1656.9,234.331 1657.47,233.076 1658.04,234.954 1658.61,235.355 1659.18,233.984 1659.74,232.807 1660.31,230.741 1660.88,228.78 1661.45,227.779 1662.02,227.005 1662.59,229.431 1663.15,230.807 1663.72,231.908 1664.29,230.89 1664.86,230.581 1665.43,230.701 1666,228.872 1666.56,229.996 1667.13,230.256 1667.7,229.245 1668.27,228.315 1668.84,227.362 1669.41,227.546 1669.97,227.749 1670.54,225.901 1671.11,227.368 1671.68,229.669 1672.25,229.649 1672.82,228.591 1673.38,230.021 1673.95,229.238 1674.52,230.652 1675.09,232.573 1675.66,232.608 1676.23,233.568 1676.79,233.434 1677.36,233.471 1677.93,235.408 1678.5,234.224 1679.07,233.222 1679.64,235.292 1680.2,235.13 1680.77,235.855 1681.34,235.582 1681.91,236.102 1682.48,234.661 1683.05,233.285 1683.61,235.191 1684.18,235.974 1684.75,234.581 1685.32,234.597 1685.89,234.474 1686.46,232.265 1687.02,233.341 1687.59,234.23 1688.16,233.146 1688.73,230.883 1689.3,230.625 1689.87,232.981 1690.44,231.812 1691,231.725 1691.57,234.828 1692.14,233.725 1692.71,234.536 1693.28,234.387 1693.85,232.277 1694.41,233.212 1694.98,232.004 1695.55,232.074 1696.12,228.997 1696.69,229.085 1697.26,229.291 1697.82,231.671 1698.39,229.526 1698.96,225.49 1699.53,226.817 1700.1,230.184 1700.67,229.114 1701.23,230.416 1701.8,230.495 1702.37,230.538 1702.94,229.574 1703.51,231.657 1704.08,230.615 1704.64,228.747 1705.21,228.845 1705.78,228.079 1706.35,228.303 1706.92,230.649 1707.49,230.722 1708.05,234.16 1708.62,234.098 1709.19,232.789 1709.76,232.904 1710.33,232.492 1710.9,232.477 1711.46,233.414 1712.03,232.241 1712.6,232.203 1713.17,233.979 1713.74,232.933 1714.31,232.824 1714.87,232.707 1715.44,232.492 1716.01,231.396 1716.58,230.655 1717.15,230.684 1717.72,231.67 1718.28,231.769 1718.85,232.689 1719.42,232.452 1719.99,232.392 1720.56,232.301 1721.13,232.045 1721.69,231.827 1722.26,232.922 1722.83,233.881 1723.4,231.487 1723.97,230.346 1724.54,231.377 1725.1,231.334 1725.67,231.481 1726.24,232.444 1726.81,231.508 1727.38,231.503 1727.95,232.512 1728.51,232.478 1729.08,233.427 1729.65,231.38 1730.22,231.126 1730.79,231.258 1731.36,233.101 1731.92,232.923 1732.49,233.904 1733.06,230.631 1733.63,230.682 1734.2,231.805 1734.77,232.66 1735.33,232.644 1735.9,234.619 1736.47,234.196 1737.04,235.203 1737.61,233.813 1738.18,234.699 1738.74,236.47 1739.31,236.052 1739.88,233.616 1740.45,233.598 1741.02,231.294 1741.59,232.226 1742.15,229.308 1742.72,231.421 1743.29,233.443 1743.86,233.141 1744.43,232.837 1745,233.68 1745.56,231.377 1746.13,232.261 1746.7,231.04 1747.27,232.054 1747.84,232.907 1748.41,233.936 1748.97,233.674 1749.54,234.719 1750.11,234.534 1750.68,233.383 1751.25,234.174 1751.82,234.06 1752.38,232.942 1752.95,231.942 1753.52,230.63 1754.09,229.667 1754.66,228.7 1755.23,228.869 1755.79,231.185 1756.36,232.242 1756.93,233.218 1757.5,232.077 1758.07,231.998 1758.64,230.946 1759.21,231.771 1759.77,231.561 1760.34,229.411 1760.91,229.436 1761.48,229.671 1762.05,228.66 1762.62,224.597 1763.18,225.058 1763.75,224.578 1764.32,225.22 1764.89,225.827 1765.46,226.159 1766.03,225.353 1766.59,226.662 1767.16,227.064 1767.73,227.312 1768.3,226.601 1768.87,229.065 1769.44,231.475 1770,232.64 1770.57,230.403 1771.14,230.568 1771.71,227.614 1772.28,227.637 1772.85,226.774 1773.41,226.381 1773.98,224.621 1774.55,227.053 1775.12,226.328 1775.69,227.699 1776.26,225.971 1776.82,227.528 1777.39,229.942 1777.96,228.177 1778.53,229.56 1779.1,228.931 1779.67,230.301 1780.23,230.375 1780.8,228.589 1781.37,228.928 1781.94,228.01 1782.51,230.472 1783.08,232.73 1783.64,232.633 1784.21,232.526 1784.78,231.345 1785.35,230.572 1785.92,231.792 1786.49,231.753 1787.05,231.998 1787.62,235.195 1788.19,236.449 1788.76,237.389 1789.33,237.266 1789.9,237.119 1790.46,238.834 1791.03,238.436 1791.6,237.258 1792.17,235.764 1792.74,235.296 1793.31,237.365 1793.87,235.005 1794.44,234.817 1795.01,235.801 1795.58,235.67 1796.15,234.235 1796.72,234.204 1797.28,231.989 1797.85,230.291 1798.42,230.521 1798.99,230.435 1799.56,234.579 1800.13,235.213 1800.69,234.971 1801.26,234.798 1801.83,234.86 1802.4,234.826 1802.97,234.706 1803.54,234.493 1804.1,235.255 1804.67,234.957 1805.24,236.845 1805.81,235.484 1806.38,235.174 1806.95,235.191 1807.51,234.019 1808.08,233.761 1808.65,233.697 1809.22,233.723 1809.79,234.417 1810.36,234.08 1810.92,232.865 1811.49,232.608 1812.06,231.434 1812.63,231.634 1813.2,230.467 1813.77,229.572 1814.33,228.651 1814.9,229.848 1815.47,233.992 1816.04,236.767 1816.61,235.114 1817.18,233.686 1817.74,231.603 1818.31,231.516 1818.88,230.353 1819.45,232.539 1820.02,233.44 1820.59,234.281 1821.15,234.348 1821.72,233.097 1822.29,235.117 1822.86,234.822 1823.43,234.411 1824,235.199 1824.56,233.784 1825.13,234.888 1825.7,234.671 1826.27,233.494 1826.84,231.247 1827.41,230.403 1827.97,231.706 1828.54,229.759 1829.11,233.845 1829.68,234.618 1830.25,235.415 1830.82,233.002 1831.39,233.88 1831.95,232.565 1832.52,230.642 1833.09,228.487 1833.66,228.761 1834.23,227.689 1834.8,226.946 1835.36,227.146 1835.93,226.253 1836.5,225.405 1837.07,225.779 1837.64,226.161 1838.21,228.578 1838.77,225.862 1839.34,226.426 1839.91,227.77 1840.48,227.295 1841.05,227.563 1841.62,227.022 1842.18,227.43 1842.75,229.848 1843.32,232.157 1843.89,233.347 1844.46,233.277 1845.03,234.117 1845.59,232.868 1846.16,234.047 1846.73,233.978 1847.3,235.025 1847.87,235.742 1848.44,235.336 1849,233.033 1849.57,233.144 1850.14,230.875 1850.71,232.927 1851.28,233.86 1851.85,233.742 1852.41,232.602 1852.98,233.54 1853.55,234.404 1854.12,233.159 1854.69,234.986 1855.26,234.846 1855.82,234.416 1856.39,236.303 1856.96,235.884 1857.53,234.681 1858.1,233.43 1858.67,234.503 1859.23,234.448 1859.8,234.218 1860.37,236.168 1860.94,235.769 1861.51,235.454 1862.08,233.008 1862.64,232.629 1863.21,231.291 1863.78,229.211 1864.35,230.263 1864.92,229.27 1865.49,229.442 1866.05,231.703 1866.62,232.617 1867.19,232.433 1867.76,232.272 1868.33,232.122 1868.9,232.948 1869.46,233.937 1870.03,231.826 1870.6,231.723 1871.17,232.642 1871.74,232.732 1872.31,231.561 1872.87,233.452 1873.44,233.331 1874.01,233.228 1874.58,233.128 1875.15,232.104 1875.72,230.011 1876.28,229.793 1876.85,227.577 1877.42,226.827 1877.99,228.038 1878.56,226.38 1879.13,223.855 1879.69,226.153 1880.26,225.34 1880.83,223.717 1881.4,226.136 1881.97,226.456 1882.54,228.543 1883.1,229.816 1883.67,230.992 1884.24,231.957 1884.81,232.002 1885.38,231.988 1885.95,231.76 1886.51,232.689 1887.08,230.689 1887.65,232.039 1888.22,233.95 1888.79,234.896 1889.36,234.641 1889.92,234.37 1890.49,232.996 1891.06,232.71 1891.63,232.512 1892.2,231.156 1892.77,234.37 1893.33,236.078 1893.9,236.766 1894.47,238.667 1895.04,238.097 1895.61,237.552 1896.18,237.085 1896.74,235.693 1897.31,235.35 1897.88,235.01 1898.45,233.583 1899.02,234.232 1899.59,235.035 1900.16,232.856 1900.72,230.777 1901.29,230.967 1901.86,230.952 1902.43,230.881 1903,232.818 1903.57,233.381 1904.13,232.264 1904.7,229.879 1905.27,228.087 1905.84,229.249 1906.41,229.353 1906.98,230.393 1907.54,231.473 1908.11,232.178 1908.68,231.125 1909.25,234.102 1909.82,233.963 1910.39,233.769 1910.95,230.673 1911.52,230.661 1912.09,227.661 1912.66,227.907 1913.23,227.993 1913.8,227.21 1914.36,228.704 1914.93,227.596 1915.5,227.869 1916.07,229.998 1916.64,230.016 1917.21,230.032 1917.77,229.173 1918.34,230.408 1918.91,230.429 1919.48,229.498 1920.05,231.505 1920.62,231.679 1921.18,230.443 1921.75,229.111 1922.32,229.299 1922.89,231.377 1923.46,231.346 1924.03,231.546 1924.59,230.469 1925.16,231.675 1925.73,232.686 1926.3,231.467 1926.87,231.406 1927.44,232.402 1928,232.163 1928.57,233.292 1929.14,233.175 1929.71,230.108 1930.28,230.188 1930.85,230.374 1931.41,231.436 1931.98,231.386 1932.55,231.422 1933.12,232.435 1933.69,233.383 1934.26,230.979 1934.82,232.151 1935.39,229.971 1935.96,231.129 1936.53,231.327 1937.1,231.335 1937.67,232.439 1938.23,232.474 1938.8,231.373 1939.37,230.294 1939.94,228.645 1940.51,228.784 1941.08,227.832 1941.64,227.932 1942.21,226.234 1942.78,226.584 1943.35,228.838 1943.92,232.316 1944.49,231.355 1945.05,231.309 1945.62,231.317 1946.19,231.412 1946.76,231.351 1947.33,230.515 1947.9,230.812 1948.46,231.761 1949.03,231.785 1949.6,231.909 1950.17,230.875 1950.74,232.073 1951.31,228.848 1951.87,227.04 1952.44,226.167 1953.01,227.44 1953.58,226.734 1954.15,227.038 1954.72,227.515 1955.28,227.951 1955.85,227.229 1956.42,225.618 1956.99,226.308 1957.56,227.924 1958.13,229.497 1958.69,228.7 1959.26,228.916 1959.83,229.099 1960.4,229.495 1960.97,229.937 1961.54,230.141 1962.1,230.55 1962.67,231.798 1963.24,234.938 1963.81,234.595 1964.38,232.37 1964.95,233.435 1965.51,232.406 1966.08,231.278 1966.65,231.448 1967.22,230.501 1967.79,228.759 1968.36,229.097 1968.92,229.408 1969.49,227.579 1970.06,225.958 1970.63,227.418 1971.2,228.801 1971.77,230.155 1972.34,233.432 1972.9,234.584 1973.47,235.597 1974.04,234.5 1974.61,234.388 1975.18,234.5 1975.75,234.482 1976.31,232.58 1976.88,233.745 1977.45,233.667 1978.02,233.807 1978.59,234.77 1979.16,235.815 1979.72,236.734 1980.29,235.438 1980.86,236.388 1981.43,234.925 1982,235.601 1982.57,235.204 1983.13,235.013 1983.7,234.699 1984.27,233.685 1984.84,231.604 1985.41,231.543 1985.98,232.571 1986.54,232.379 1987.11,233.405 1987.68,232.273 1988.25,231.221 1988.82,230.197 1989.39,231.47 1989.95,232.64 1990.52,231.513 1991.09,230.34 1991.66,230.448 1992.23,230.719 1992.8,228.963 1993.36,230.11 1993.93,230.169 1994.5,231.287 1995.07,230.246 1995.64,230.403 1996.21,229.675 1996.77,227.91 1997.34,228.203 1997.91,228.396 1998.48,230.704 1999.05,231.947 1999.62,232.257 2000.18,233.436 2000.75,232.558 2001.32,234.774 2001.89,235.835 2002.46,237.485 2003.03,236.068 2003.59,233.749 2004.16,233.615 2004.73,233.522 2005.3,231.388 2005.87,230.504 2006.44,231.61 2007,232.728 2007.57,231.769 2008.14,235.032 2008.71,233.656 2009.28,231.575 2009.85,233.592 2010.41,230.381 2010.98,230.471 2011.55,228.653 2012.12,228.09 2012.69,228.39 2013.26,228.646 2013.82,226.827 2014.39,228.277 2014.96,227.704 2015.53,226.932 2016.1,227.201 2016.67,228.775 2017.23,230.124 2017.8,233.375 2018.37,232.454 2018.94,232.558 2019.51,232.717 2020.08,233.77 2020.64,232.636 2021.21,232.702 2021.78,232.469 2022.35,232.485 2022.92,231.487 2023.49,230.628 2024.05,232.777 2024.62,231.9 2025.19,234.08 2025.76,233.91 2026.33,237.729 2026.9,234.478 2027.46,233.306 2028.03,231.374 2028.6,231.619 2029.17,230.743 2029.74,230.976 2030.31,231.061 2030.87,231.133 2031.44,232.194 2032.01,234.495 2032.58,235.137 2033.15,236.915 2033.72,235.529 2034.28,236.404 2034.85,237.465 2035.42,237.147 2035.99,237.974 2036.56,237.423 2037.13,235.894 2037.69,234.47 2038.26,235.468 2038.83,232.191 2039.4,228.045 2039.97,230.344 2040.54,230.384 2041.11,228.351 2041.67,229.773 2042.24,232.026 2042.81,232.008 2043.38,230.929 2043.95,230.038 2044.52,232.311 2045.08,231.088 2045.65,232.058 2046.22,232.987 2046.79,235.94 2047.36,235.802 2047.93,234.457 2048.49,233.182 2049.06,237.217 2049.63,238.862 2050.2,238.485 2050.77,238.917 2051.34,240.34 2051.9,237.831 2052.47,237.424 2053.04,234.766 2053.61,234.4 2054.18,233.22 2054.75,232.84 2055.31,231.592 2055.88,231.715 2056.45,231.795 2057.02,231.905 2057.59,231.93 2058.16,230.878 2058.72,231.092 2059.29,229.952 2059.86,226.767 2060.43,228.245 2061,229.619 2061.57,229.751 2062.13,230.765 2062.7,229.967 2063.27,231.191 2063.84,232.087 2064.41,233.02 2064.98,233.958 2065.54,232.675 2066.11,234.501 2066.68,233.352 2067.25,232.146 2067.82,234.031 2068.39,233.82 2068.95,234.479 2069.52,234.242 2070.09,233.179 2070.66,233.133 2071.23,233.176 2071.8,231.937 2072.36,233.988 2072.93,235.836 2073.5,235.442 2074.07,234.842 2074.64,235.753 2075.21,234.315 2075.77,233.278 2076.34,235.343 2076.91,234.168 2077.48,233.033 2078.05,232.829 2078.62,232.756 2079.18,231.376 2079.75,229.244 2080.32,229.323 2080.89,230.672 2081.46,232.655 2082.03,230.67 2082.59,230.581 2083.16,229.534 2083.73,227.647 2084.3,226.768 2084.87,228.003 2085.44,228.283 2086,228.607 2086.57,230.898 2087.14,232.212 2087.71,231.008 2088.28,229.111 2088.85,230.458 2089.41,231.541 2089.98,229.494 2090.55,230.735 2091.12,229.879 2091.69,232.047 2092.26,232.031 2092.82,231.671 2093.39,232.324 2093.96,231.032 2094.53,230.769 2095.1,231.832 2095.67,232.712 2096.23,235.791 2096.8,237.487 2097.37,237.058 2097.94,236.676 2098.51,236.114 2099.08,236.726 2099.64,235.294 2100.21,233.942 2100.78,232.568 2101.35,232.488 2101.92,232.505 2102.49,230.099 2103.05,230.028 2103.62,229.987 2104.19,230.041 2104.76,228.946 2105.33,230.156 2105.9,230.289 2106.46,230.355 2107.03,231.535 2107.6,232.709 2108.17,232.74 2108.74,231.607 2109.31,232.624 2109.87,231.502 2110.44,232.2 2111.01,232.141 2111.58,231.202 2112.15,232.239 2112.72,229.132 2113.29,229.041 2113.85,224.368 2114.42,225.981 2114.99,226.617 2115.56,225.782 2116.13,226.255 2116.7,227.635 2117.26,228.871 2117.83,230.17 2118.4,230.32 2118.97,230.463 2119.54,231.659 2120.11,230.733 2120.67,229.923 2121.24,233.211 2121.81,232.174 2122.38,231.295 2122.95,233.425 2123.52,232.289 2124.08,233.511 2124.65,233.292 2125.22,232.099 2125.79,229.007 2126.36,232.359 2126.93,231.123 2127.49,232.182 2128.06,232.285 2128.63,231.322 2129.2,231.346 2129.77,231.334 2130.34,229.529 2130.9,230.552 2131.47,228.773 2132.04,228.895 2132.61,229.199 2133.18,227.23 2133.75,228.587 2134.31,228.835 2134.88,228.909 2135.45,229.246 2136.02,228.619 2136.59,229.934 2137.16,230.153 2137.72,231.214 2138.29,230.564 2138.86,229.667 2139.43,229.951 2140,230.98 2140.57,231.017 2141.13,230.999 2141.7,229.95 2142.27,233.025 2142.84,233.91 2143.41,232.732 2143.98,232.765 2144.54,233.57 2145.11,229.47 2145.68,229.497 2146.25,231.613 2146.82,231.673 2147.39,230.856 2147.95,229.91 2148.52,230.055 2149.09,231.014 2149.66,231.108 2150.23,232.095 2150.8,235.211 2151.36,234.022 2151.93,232.969 2152.5,231.766 2153.07,231.588 2153.64,232.83 2154.21,230.547 2154.77,231.626 2155.34,231.686 2155.91,231.628 2156.48,231.36 2157.05,230.424 2157.62,230.623 2158.18,230.827 2158.75,230.948 2159.32,230.079 2159.89,231.273 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip190)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.029 ± 0.017\n  with uncertainty of ± 0.0011089792025866583\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01353 ± (0.00388166, 0.00378656) (MC)\n  95% confidence interval: [-4.02114, -4.0061]) (MC)\n  linear error propagation: -4.01327 ± 0.00380257\n  |δ_y| = |0.00202544| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.013525762727243, val_l = 0.007613709453798911, val_u = 0.007425722479872832)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip220\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip220)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip221\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip220)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip222\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1135.45 2211.02,1135.45 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,951.066 2211.02,951.066 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,766.686 2211.02,766.686 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,582.306 2211.02,582.306 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,397.926 2211.02,397.926 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,213.546 2211.02,213.546 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1135.45 365.751,1135.45 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,951.066 365.751,951.066 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,766.686 365.751,766.686 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,582.306 365.751,582.306 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,397.926 365.751,397.926 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,213.546 365.751,213.546 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M298.909 1121.24 Q295.298 1121.24 293.469 1124.81 Q291.664 1128.35 291.664 1135.48 Q291.664 1142.59 293.469 1146.15 Q295.298 1149.69 298.909 1149.69 Q302.543 1149.69 304.349 1146.15 Q306.177 1142.59 306.177 1135.48 Q306.177 1128.35 304.349 1124.81 Q302.543 1121.24 298.909 1121.24 M298.909 1117.54 Q304.719 1117.54 307.775 1122.15 Q310.853 1126.73 310.853 1135.48 Q310.853 1144.21 307.775 1148.81 Q304.719 1153.4 298.909 1153.4 Q293.099 1153.4 290.02 1148.81 Q286.964 1144.21 286.964 1135.48 Q286.964 1126.73 290.02 1122.15 Q293.099 1117.54 298.909 1117.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M259.557 964.411 L267.196 964.411 L267.196 938.045 L258.886 939.712 L258.886 935.452 L267.15 933.786 L271.826 933.786 L271.826 964.411 L279.465 964.411 L279.465 968.346 L259.557 968.346 L259.557 964.411 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 936.864 Q295.298 936.864 293.469 940.429 Q291.664 943.971 291.664 951.1 Q291.664 958.207 293.469 961.772 Q295.298 965.313 298.909 965.313 Q302.543 965.313 304.349 961.772 Q306.177 958.207 306.177 951.1 Q306.177 943.971 304.349 940.429 Q302.543 936.864 298.909 936.864 M298.909 933.161 Q304.719 933.161 307.775 937.767 Q310.853 942.35 310.853 951.1 Q310.853 959.827 307.775 964.434 Q304.719 969.017 298.909 969.017 Q293.099 969.017 290.02 964.434 Q286.964 959.827 286.964 951.1 Q286.964 942.35 290.02 937.767 Q293.099 933.161 298.909 933.161 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M262.775 780.031 L279.094 780.031 L279.094 783.966 L257.15 783.966 L257.15 780.031 Q259.812 777.276 264.395 772.646 Q269.002 767.994 270.182 766.651 Q272.428 764.128 273.307 762.392 Q274.21 760.632 274.21 758.943 Q274.21 756.188 272.266 754.452 Q270.344 752.716 267.242 752.716 Q265.043 752.716 262.59 753.48 Q260.159 754.244 257.381 755.795 L257.381 751.072 Q260.205 749.938 262.659 749.359 Q265.113 748.781 267.15 748.781 Q272.52 748.781 275.715 751.466 Q278.909 754.151 278.909 758.642 Q278.909 760.771 278.099 762.693 Q277.312 764.591 275.205 767.183 Q274.627 767.855 271.525 771.072 Q268.423 774.267 262.775 780.031 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 752.484 Q295.298 752.484 293.469 756.049 Q291.664 759.591 291.664 766.72 Q291.664 773.827 293.469 777.392 Q295.298 780.933 298.909 780.933 Q302.543 780.933 304.349 777.392 Q306.177 773.827 306.177 766.72 Q306.177 759.591 304.349 756.049 Q302.543 752.484 298.909 752.484 M298.909 748.781 Q304.719 748.781 307.775 753.387 Q310.853 757.97 310.853 766.72 Q310.853 775.447 307.775 780.054 Q304.719 784.637 298.909 784.637 Q293.099 784.637 290.02 780.054 Q286.964 775.447 286.964 766.72 Q286.964 757.97 290.02 753.387 Q293.099 748.781 298.909 748.781 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M272.914 580.951 Q276.27 581.669 278.145 583.938 Q280.043 586.206 280.043 589.539 Q280.043 594.655 276.525 597.456 Q273.006 600.257 266.525 600.257 Q264.349 600.257 262.034 599.817 Q259.742 599.4 257.289 598.544 L257.289 594.03 Q259.233 595.164 261.548 595.743 Q263.863 596.322 266.386 596.322 Q270.784 596.322 273.076 594.586 Q275.39 592.85 275.39 589.539 Q275.39 586.484 273.238 584.771 Q271.108 583.035 267.289 583.035 L263.261 583.035 L263.261 579.192 L267.474 579.192 Q270.923 579.192 272.752 577.826 Q274.58 576.438 274.58 573.845 Q274.58 571.183 272.682 569.771 Q270.807 568.336 267.289 568.336 Q265.367 568.336 263.168 568.752 Q260.969 569.169 258.33 570.049 L258.33 565.882 Q260.992 565.141 263.307 564.771 Q265.645 564.401 267.705 564.401 Q273.029 564.401 276.131 566.831 Q279.233 569.239 279.233 573.359 Q279.233 576.229 277.59 578.22 Q275.946 580.188 272.914 580.951 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 568.104 Q295.298 568.104 293.469 571.669 Q291.664 575.211 291.664 582.34 Q291.664 589.447 293.469 593.012 Q295.298 596.553 298.909 596.553 Q302.543 596.553 304.349 593.012 Q306.177 589.447 306.177 582.34 Q306.177 575.211 304.349 571.669 Q302.543 568.104 298.909 568.104 M298.909 564.401 Q304.719 564.401 307.775 569.007 Q310.853 573.59 310.853 582.34 Q310.853 591.067 307.775 595.674 Q304.719 600.257 298.909 600.257 Q293.099 600.257 290.02 595.674 Q286.964 591.067 286.964 582.34 Q286.964 573.59 290.02 569.007 Q293.099 564.401 298.909 564.401 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M271.594 384.72 L259.789 403.169 L271.594 403.169 L271.594 384.72 M270.367 380.646 L276.247 380.646 L276.247 403.169 L281.177 403.169 L281.177 407.057 L276.247 407.057 L276.247 415.206 L271.594 415.206 L271.594 407.057 L255.992 407.057 L255.992 402.544 L270.367 380.646 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 383.724 Q295.298 383.724 293.469 387.289 Q291.664 390.831 291.664 397.96 Q291.664 405.067 293.469 408.632 Q295.298 412.173 298.909 412.173 Q302.543 412.173 304.349 408.632 Q306.177 405.067 306.177 397.96 Q306.177 390.831 304.349 387.289 Q302.543 383.724 298.909 383.724 M298.909 380.021 Q304.719 380.021 307.775 384.627 Q310.853 389.21 310.853 397.96 Q310.853 406.687 307.775 411.294 Q304.719 415.877 298.909 415.877 Q293.099 415.877 290.02 411.294 Q286.964 406.687 286.964 397.96 Q286.964 389.21 290.02 384.627 Q293.099 380.021 298.909 380.021 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M258.793 196.266 L277.15 196.266 L277.15 200.201 L263.076 200.201 L263.076 208.673 Q264.094 208.326 265.113 208.164 Q266.131 207.978 267.15 207.978 Q272.937 207.978 276.316 211.15 Q279.696 214.321 279.696 219.738 Q279.696 225.316 276.224 228.418 Q272.752 231.497 266.432 231.497 Q264.256 231.497 261.988 231.126 Q259.742 230.756 257.335 230.015 L257.335 225.316 Q259.418 226.451 261.641 227.006 Q263.863 227.562 266.34 227.562 Q270.344 227.562 272.682 225.455 Q275.02 223.349 275.02 219.738 Q275.02 216.127 272.682 214.02 Q270.344 211.914 266.34 211.914 Q264.465 211.914 262.59 212.33 Q260.738 212.747 258.793 213.627 L258.793 196.266 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 199.344 Q295.298 199.344 293.469 202.909 Q291.664 206.451 291.664 213.58 Q291.664 220.687 293.469 224.252 Q295.298 227.793 298.909 227.793 Q302.543 227.793 304.349 224.252 Q306.177 220.687 306.177 213.58 Q306.177 206.451 304.349 202.909 Q302.543 199.344 298.909 199.344 M298.909 195.641 Q304.719 195.641 307.775 200.247 Q310.853 204.83 310.853 213.58 Q310.853 222.307 307.775 226.914 Q304.719 231.497 298.909 231.497 Q293.099 231.497 290.02 226.914 Q286.964 222.307 286.964 213.58 Q286.964 204.83 290.02 200.247 Q293.099 195.641 298.909 195.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip222)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,999.59 400.199,874.779 400.786,760.26 401.372,793.167 401.958,689.965 402.545,719.157 403.131,629.411 403.718,543.15 404.304,574.443 404.891,499.129 405.477,606.573 406.063,535.442 406.65,470.898 407.236,410.988 407.823,356.86 408.409,309.666 408.995,329.745 409.582,347.626 410.168,308.845 410.755,323.681 411.341,291.866 411.927,305.857 412.514,318.858 413.1,328.022 413.687,302.293 414.273,315.744 414.86,291.942 415.446,272.3 416.032,257.16 416.619,243.47 417.205,233.343 417.792,226.559 418.378,219.895 418.964,238.009 419.551,235.692 420.137,235.544 420.724,236.666 421.31,257.082 421.896,276.815 422.483,280.023 423.069,284.674 423.656,290.204 424.242,297.295 424.829,318.99 425.415,326.323 426.001,358.765 426.588,399.769 427.174,416.877 427.761,442.694 428.347,448.713 428.933,472.717 429.52,487.753 430.106,502.008 430.693,524.413 431.279,538.648 431.865,552.77 432.452,559.972 433.038,581.367 433.625,595.329 434.211,608.989 434.798,617.08 435.384,642.45 435.97,650.778 436.557,669.967 437.143,684.08 437.73,696.715 438.316,709.692 438.902,721.938 439.489,730.312 440.075,743.107 440.662,750.96 441.248,763.74 441.835,771.339 442.421,783.247 443.007,802.895 443.594,811.118 444.18,825.674 444.767,836.855 445.353,861.567 445.939,868.285 446.526,878.113 447.112,884.678 447.699,894.304 448.285,906.608 448.871,915.628 449.458,930.848 450.044,939.513 450.631,948.077 451.217,953.388 451.804,964.253 452.39,972.363 452.976,978.045 453.563,988.245 454.149,992.806 454.736,997.544 455.322,1007.63 455.908,1012.44 456.495,1018.99 457.081,1025.55 457.668,1037.03 458.254,1046.02 458.84,1050.02 459.427,1062.66 460.013,1065.79 460.6,1068.76 461.186,1078.39 461.773,1087.72 462.359,1096.87 462.945,1101.57 463.532,1103.76 464.118,1110.7 464.705,1115.1 465.291,1119.54 465.877,1121.54 466.464,1129.94 467.05,1134.19 467.637,1140.08 468.223,1143.86 468.809,1145.66 469.396,1146.97 469.982,1150.64 470.569,1154.42 471.155,1165.41 471.742,1170.09 472.328,1169.27 472.914,1170.13 473.501,1170.78 474.087,1179.17 474.674,1178.18 475.26,1181.08 475.846,1185.82 476.433,1188.7 477.019,1189.1 477.606,1195.02 478.192,1197.33 478.778,1199.44 479.365,1198.28 479.951,1200.53 480.538,1202.45 481.124,1203.17 481.711,1207.11 482.297,1205.98 482.883,1206.18 483.47,1204.69 484.056,1215.38 484.643,1217.31 485.229,1219.21 485.815,1220.99 486.402,1224.13 486.988,1222.52 487.575,1224.36 488.161,1227.82 488.748,1229.15 489.334,1227.47 489.92,1228.92 490.507,1230.43 491.093,1233.55 491.68,1236.63 492.266,1237.64 492.852,1237.03 493.439,1239.53 494.025,1240.33 494.612,1239.42 495.198,1238.92 495.784,1241.22 496.371,1240.4 496.957,1237.87 497.544,1240.49 498.13,1241.64 498.717,1239.2 499.303,1237.27 499.889,1238.38 500.476,1237.97 501.062,1235.92 501.649,1237.12 502.235,1236.67 502.821,1236.36 503.408,1234.65 503.994,1234.64 504.581,1239.22 505.167,1244.96 505.753,1247.18 506.34,1244.8 506.926,1244.34 507.513,1243.53 508.099,1244.67 508.686,1243.95 509.272,1246.16 509.858,1243.45 510.445,1241.22 511.031,1240.7 511.618,1240.25 512.204,1238.52 512.79,1238.15 513.377,1242.41 513.963,1241.77 514.55,1242.89 515.136,1245.23 515.722,1247.59 516.309,1246.66 516.895,1250.53 517.482,1247.99 518.068,1242.71 518.655,1243.42 519.241,1245.62 519.827,1241.67 520.414,1241.02 521,1241.81 521.587,1242.75 522.173,1243.49 522.759,1238.22 523.346,1240.76 523.932,1240.42 524.519,1239.42 525.105,1239.11 525.691,1237.11 526.278,1239.74 526.864,1242.27 527.451,1248.02 528.037,1250.32 528.624,1249.15 529.21,1249.96 529.796,1248.73 530.383,1249.24 530.969,1247.83 531.556,1246.96 532.142,1247.69 532.728,1248.36 533.315,1245.85 533.901,1245.1 534.488,1247.21 535.074,1244.38 535.661,1243.68 536.247,1239.87 536.833,1239.44 537.42,1241.96 538.006,1241.29 538.593,1246.84 539.179,1246.11 539.765,1245.26 540.352,1241.47 540.938,1242.27 541.525,1243.26 542.111,1248.78 542.697,1247.61 543.284,1243.6 543.87,1242.93 544.457,1244.05 545.043,1243.13 545.63,1245.5 546.216,1245.89 546.802,1243.66 547.389,1244.29 547.975,1244.61 548.562,1245.17 549.148,1245.87 549.734,1243.3 550.321,1242.71 550.907,1245.08 551.494,1245.37 552.08,1246.07 552.666,1243.63 553.253,1242.4 553.839,1241.83 554.426,1241.01 555.012,1240.08 555.599,1237.68 556.185,1234.09 556.771,1233.91 557.358,1236.36 557.944,1234.24 558.531,1232.18 559.117,1233.24 559.703,1233.18 560.29,1234.23 560.876,1235.49 561.463,1235.23 562.049,1234.88 562.635,1235.99 563.222,1236.78 563.808,1236.02 564.395,1238.66 564.981,1237.72 565.568,1237.02 566.154,1235.05 566.74,1234.74 567.327,1234.25 567.913,1237.09 568.5,1234.94 569.086,1237.38 569.672,1235.32 570.259,1236.3 570.845,1235.52 571.432,1237.77 572.018,1238.7 572.605,1239.56 573.191,1241.59 573.777,1242.14 574.364,1241.31 574.95,1239.04 575.537,1238.01 576.123,1236.95 576.709,1234.82 577.296,1231.23 577.882,1229.25 578.469,1230.67 579.055,1230.57 579.641,1230.38 580.228,1229.93 580.814,1227.1 581.401,1225.06 581.987,1226.43 582.574,1227.66 583.16,1227.41 583.746,1230.2 584.333,1229.54 584.919,1229.25 585.506,1229.1 586.092,1231.79 586.678,1229.82 587.265,1223.34 587.851,1223.5 588.438,1226.46 589.024,1226.26 589.61,1226.06 590.197,1222.96 590.783,1221.74 591.37,1223.63 591.956,1223.58 592.543,1226.95 593.129,1225.28 593.715,1225.29 594.302,1228.27 594.888,1229.56 595.475,1227.65 596.061,1228.99 596.647,1226.97 597.234,1223.98 597.82,1222.24 598.407,1222.18 598.993,1226.61 599.579,1227.56 600.166,1227.51 600.752,1227.34 601.339,1225.74 601.925,1225.5 602.512,1227.18 603.098,1228.38 603.684,1226.31 604.271,1226.13 604.857,1223.98 605.444,1223.74 606.03,1225.22 606.616,1226.64 607.203,1226.31 607.789,1228.55 608.376,1227.89 608.962,1223.98 609.548,1226.93 610.135,1222.18 610.721,1221.99 611.308,1220.47 611.894,1220.41 612.481,1222.31 613.067,1220.8 613.653,1226.82 614.24,1225.09 614.826,1224.86 615.413,1226.31 615.999,1228.94 616.585,1224.26 617.172,1223.78 617.758,1228.25 618.345,1227.69 618.931,1225.81 619.518,1225.33 620.104,1228.05 620.69,1226.06 621.277,1227.05 621.863,1229.78 622.45,1230.5 623.036,1228.07 623.622,1227.33 624.209,1228.49 624.795,1228.42 625.382,1226.36 625.968,1226.48 626.554,1230.65 627.141,1228.71 627.727,1228.12 628.314,1229.16 628.9,1227.16 629.487,1229.95 630.073,1227.9 630.659,1228.97 631.246,1231.25 631.832,1228.78 632.419,1225.05 633.005,1224.67 633.591,1222.81 634.178,1222.82 634.764,1222.93 635.351,1222.71 635.937,1224 636.523,1225.56 637.11,1225.03 637.696,1226.21 638.283,1227.47 638.869,1228.4 639.456,1231.1 640.042,1232.36 640.628,1231.48 641.215,1229.52 641.801,1227.62 642.388,1225.95 642.974,1226.94 643.56,1228.18 644.147,1227.88 644.733,1226.18 645.32,1224.34 645.906,1223.62 646.492,1223.28 647.079,1221.82 647.665,1221.46 648.252,1219.83 648.838,1218.03 649.425,1219.65 650.011,1221.46 650.597,1222.77 651.184,1222.55 651.77,1219.32 652.357,1220.67 652.943,1223.59 653.529,1221.74 654.116,1221.75 654.702,1218.53 655.289,1218.34 655.875,1218.17 656.462,1219.47 657.048,1219.28 657.634,1219.3 658.221,1216.28 658.807,1216.36 659.394,1214.78 659.98,1218.07 660.566,1216.85 661.153,1219.89 661.739,1219.71 662.326,1218.03 662.912,1217.91 663.498,1220.81 664.085,1220.63 664.671,1221.55 665.258,1221.24 665.844,1219.52 666.431,1217.83 667.017,1216.59 667.603,1216.89 668.19,1215.42 668.776,1215.49 669.363,1217.03 669.949,1218.32 670.535,1216.81 671.122,1216.61 671.708,1216.44 672.295,1216.79 672.881,1218.29 673.467,1218.42 674.054,1220.08 674.64,1224.03 675.227,1220.71 675.813,1223.53 676.4,1223 676.986,1227.33 677.572,1227.16 678.159,1228.14 678.745,1229.11 679.332,1227.02 679.918,1226.73 680.504,1225.92 681.091,1225.45 681.677,1229.31 682.264,1227.3 682.85,1228.35 683.436,1227.84 684.023,1224.29 684.609,1222.37 685.196,1220.75 685.782,1220.66 686.369,1220.21 686.955,1218.43 687.541,1220.99 688.128,1223.47 688.714,1225.79 689.301,1225.4 689.887,1225 690.473,1225.99 691.06,1225.49 691.646,1225.32 692.233,1223.39 692.819,1223.07 693.405,1224.11 693.992,1223.76 694.578,1223.84 695.165,1222.03 695.751,1217.43 696.338,1218.98 696.924,1223.35 697.51,1219.86 698.097,1211.78 698.683,1213.35 699.27,1210.65 699.856,1213.79 700.442,1212.25 701.029,1212.13 701.615,1212.39 702.202,1211.17 702.788,1206.58 703.375,1205.84 703.961,1206.66 704.547,1204.08 705.134,1205.9 705.72,1206.28 706.307,1206.78 706.893,1205.65 707.479,1204.59 708.066,1208.01 708.652,1211.54 709.239,1213.35 709.825,1213.65 710.411,1213.76 710.998,1216.93 711.584,1215.54 712.171,1217.09 712.757,1217.07 713.344,1218.59 713.93,1216.96 714.516,1216.64 715.103,1218.13 715.689,1221.19 716.276,1222.44 716.862,1221.94 717.448,1224.38 718.035,1223.66 718.621,1223.4 719.208,1223.04 719.794,1225.71 720.38,1222.51 720.967,1220.74 721.553,1219.04 722.14,1220.29 722.726,1220.08 723.313,1220.05 723.899,1219.57 724.485,1217.51 725.072,1220.45 725.658,1218.82 726.245,1219.75 726.831,1221.36 727.417,1217.84 728.004,1214.49 728.59,1215.52 729.177,1217.09 729.763,1211.03 730.349,1211.28 730.936,1211.63 731.522,1213.47 732.109,1216.5 732.695,1216.41 733.282,1214.72 733.868,1214.36 734.454,1210.98 735.041,1211.33 735.627,1212.65 736.214,1206.59 736.8,1206.93 737.386,1207.55 737.973,1203.75 738.559,1204.2 739.146,1206.09 739.732,1205.08 740.318,1207.02 740.905,1207.21 741.491,1207.49 742.078,1209.58 742.664,1206.7 743.251,1207.09 743.837,1208.7 744.423,1213.41 745.01,1210.43 745.596,1208.94 746.183,1210.69 746.769,1209.56 747.355,1209.44 747.942,1209.56 748.528,1211.27 749.115,1214.46 749.701,1211.46 750.288,1213.4 750.874,1207.61 751.46,1207.85 752.047,1209.85 752.633,1210.32 753.22,1210.42 753.806,1210.66 754.392,1209.38 754.979,1211.05 755.565,1211.06 756.152,1212.48 756.738,1212.9 757.324,1214.48 757.911,1213.13 758.497,1210.46 759.084,1210.96 759.67,1211.17 760.257,1211.44 760.843,1213.19 761.429,1211.7 762.016,1213.35 762.602,1211.76 763.189,1210.36 763.775,1210.3 764.361,1213.72 764.948,1213.93 765.534,1212.8 766.121,1211.27 766.707,1212.95 767.293,1214.71 767.88,1215.95 768.466,1214 769.053,1214.01 769.639,1213.75 770.226,1213.74 770.812,1213.68 771.398,1213.58 771.985,1217.83 772.571,1217.69 773.158,1215.63 773.744,1216.9 774.33,1218.56 774.917,1218.57 775.503,1216.72 776.09,1217.97 776.676,1217.73 777.262,1217.26 777.849,1217.03 778.435,1215.63 779.022,1215.43 779.608,1216.82 780.195,1214.91 780.781,1214.58 781.367,1215.97 781.954,1217.49 782.54,1217.31 783.127,1219.88 783.713,1221.02 784.299,1219.18 784.886,1222.27 785.472,1221.94 786.059,1220.26 786.645,1218.4 787.232,1218 787.818,1219.26 788.404,1220.05 788.991,1218.26 789.577,1216.66 790.164,1213.64 790.75,1215.15 791.336,1215.18 791.923,1218.12 792.509,1217.51 793.096,1217.28 793.682,1215.52 794.268,1214.37 794.855,1214.29 795.441,1214.34 796.028,1216.94 796.614,1216.93 797.201,1216.42 797.787,1214.59 798.373,1214.12 798.96,1212.28 799.546,1215.41 800.133,1213.74 800.719,1213.73 801.305,1215.31 801.892,1215.23 802.478,1218 803.065,1216.31 803.651,1211.91 804.237,1211.76 804.824,1210.25 805.41,1211.82 805.997,1211.72 806.583,1212.05 807.17,1213.8 807.756,1212.03 808.342,1210.81 808.929,1210.9 809.515,1212.73 810.102,1211.18 810.688,1209.69 811.274,1208.06 811.861,1211.13 812.447,1212.65 813.034,1212.6 813.62,1214.25 814.206,1214.36 814.793,1215.96 815.379,1214.41 815.966,1220.32 816.552,1216.63 817.139,1220.58 817.725,1220.01 818.311,1221.12 818.898,1221.82 819.484,1221.3 820.071,1220.73 820.657,1220.46 821.243,1220.16 821.83,1215.49 822.416,1214.09 823.003,1215.29 823.589,1219.72 824.175,1222.3 824.762,1220.18 825.348,1218.53 825.935,1218.31 826.521,1219.61 827.108,1219.41 827.694,1218.95 828.28,1216.96 828.867,1218.15 829.453,1216.17 830.04,1216.01 830.626,1221.65 831.212,1221.21 831.799,1220.86 832.385,1225.03 832.972,1224.5 833.558,1224.06 834.145,1223.34 834.731,1221.14 835.317,1216.26 835.904,1219.07 836.49,1215.84 837.077,1215.67 837.663,1216.8 838.249,1216.67 838.836,1214.59 839.422,1214.49 840.009,1214 840.595,1212.41 841.181,1210.81 841.768,1212.16 842.354,1212.27 842.941,1212.14 843.527,1212.18 844.114,1214 844.7,1212.29 845.286,1211.69 845.873,1210.24 846.459,1210.13 847.046,1208.74 847.632,1207.3 848.218,1204.49 848.805,1205.08 849.391,1202.36 849.978,1201.57 850.564,1201.99 851.15,1204.1 851.737,1205.86 852.323,1205.95 852.91,1206.19 853.496,1209.48 854.083,1209.68 854.669,1211.36 855.255,1214.43 855.842,1214.11 856.428,1212.48 857.015,1212.5 857.601,1211.89 858.187,1215.04 858.774,1214.98 859.36,1215.05 859.947,1213.45 860.533,1211.83 861.119,1208.9 861.706,1210.57 862.292,1210.63 862.879,1213.99 863.465,1215.27 864.052,1214.92 864.638,1211.82 865.224,1210.01 865.811,1207.34 866.397,1207.62 866.984,1206.8 867.57,1207.17 868.156,1205.92 868.743,1204.68 869.329,1206.66 869.916,1208.42 870.502,1210.05 871.089,1206.74 871.675,1205.72 872.261,1210.63 872.848,1213.84 873.434,1215.52 874.021,1215.63 874.607,1207.75 875.193,1207.71 875.78,1204.25 876.366,1204.68 876.953,1207.98 877.539,1209.67 878.125,1209.87 878.712,1211.3 879.298,1212.79 879.885,1209.42 880.471,1208.29 881.058,1207.01 881.644,1205.9 882.23,1206.16 882.817,1204.75 883.403,1207.92 883.99,1209.45 884.576,1207.84 885.162,1215.55 885.749,1219.69 886.335,1217.75 886.922,1220.7 887.508,1219.09 888.094,1218.9 888.681,1215.73 889.267,1215.24 889.854,1216.48 890.44,1217.44 891.027,1220.02 891.613,1220.63 892.199,1222.91 892.786,1222.15 893.372,1227.42 893.959,1225.16 894.545,1222.77 895.131,1222.05 895.718,1218.59 896.304,1218.27 896.891,1216.23 897.477,1216.09 898.063,1214.38 898.65,1217.48 899.236,1218.82 899.823,1218.36 900.409,1219.82 900.996,1220.59 901.582,1220.25 902.168,1218.41 902.755,1219.49 903.341,1218.98 903.928,1218.52 904.514,1216.56 905.1,1217.66 905.687,1217.47 906.273,1215.85 906.86,1215.57 907.446,1210.9 908.032,1213.91 908.619,1216.67 909.205,1210.73 909.792,1211.93 910.378,1207.17 910.965,1208.95 911.551,1211.94 912.137,1206.07 912.724,1204.73 913.31,1206.75 913.897,1208.62 914.483,1203.96 915.069,1201.16 915.656,1196.98 916.242,1196.43 916.829,1201.83 917.415,1203.84 918.002,1204.25 918.588,1205.99 919.174,1207.57 919.761,1206.2 920.347,1206.24 920.934,1205 921.52,1205.07 922.106,1202.46 922.693,1204.4 923.279,1204.76 923.866,1206.54 924.452,1206.25 925.038,1205.48 925.625,1206 926.211,1204.78 926.798,1205.17 927.384,1206.94 927.971,1206.12 928.557,1205.32 929.143,1207.11 929.73,1208.5 930.316,1209.91 930.903,1210 931.489,1211.63 932.075,1208.54 932.662,1208.85 933.248,1207.66 933.835,1206.45 934.421,1203.73 935.007,1208.63 935.594,1208.66 936.18,1205.97 936.767,1204.85 937.353,1206.74 937.94,1204.15 938.526,1207.67 939.112,1206.03 939.699,1204.43 940.285,1203.3 940.872,1203.75 941.458,1204.11 942.044,1203.04 942.631,1204.74 943.217,1204.96 943.804,1207.98 944.39,1208.42 944.976,1209.9 945.563,1208.21 946.149,1209.73 946.736,1206.89 947.322,1207.12 947.909,1207.45 948.495,1207.72 949.081,1205.03 949.668,1202.54 950.254,1203.12 950.841,1202.12 951.427,1204.56 952.013,1203.13 952.6,1203.94 953.186,1204.01 953.773,1206.29 954.359,1211.16 954.945,1214.14 955.532,1212.5 956.118,1211.18 956.705,1211.11 957.291,1210.64 957.878,1216.7 958.464,1217.84 959.05,1215.97 959.637,1218.48 960.223,1217.84 960.81,1215.94 961.396,1215.78 961.982,1215.41 962.569,1214.99 963.155,1211.78 963.742,1214.44 964.328,1217.4 964.915,1215.33 965.501,1216.36 966.087,1217.57 966.674,1215.53 967.26,1212.44 967.847,1213.43 968.433,1214.85 969.019,1211.67 969.606,1213.13 970.192,1211.36 970.779,1211.27 971.365,1211.23 971.951,1208.43 972.538,1208.3 973.124,1209.74 973.711,1212.8 974.297,1212.9 974.884,1215.55 975.47,1215.24 976.056,1215.11 976.643,1216.09 977.229,1217.02 977.816,1215.11 978.402,1213.24 978.988,1216.06 979.575,1218.61 980.161,1215.16 980.748,1216.21 981.334,1214.48 981.92,1218.6 982.507,1216.53 983.093,1216.29 983.68,1215.86 984.266,1218.32 984.853,1214.83 985.439,1214.45 986.025,1214.14 986.612,1214 987.198,1212.44 987.785,1213.82 988.371,1213.48 988.957,1213.18 989.544,1213.11 990.13,1211.88 990.717,1207.6 991.303,1206.14 991.889,1209.41 992.476,1209.3 993.062,1210.87 993.649,1209.56 994.235,1211.35 994.822,1211.39 995.408,1211.5 995.994,1211.32 996.581,1208.26 997.167,1208.32 997.754,1208.25 998.34,1207.18 998.926,1208.95 999.513,1206.29 1000.1,1206.61 1000.69,1208.09 1001.27,1205.39 1001.86,1204.26 1002.44,1206.12 1003.03,1207.84 1003.62,1208.24 1004.2,1209.76 1004.79,1211.29 1005.38,1213.14 1005.96,1212.65 1006.55,1212.57 1007.14,1212.35 1007.72,1212.26 1008.31,1210.69 1008.9,1210.94 1009.48,1212.44 1010.07,1209.53 1010.65,1212.45 1011.24,1213.96 1011.83,1216.84 1012.41,1217.98 1013,1217.33 1013.59,1217.03 1014.17,1217.93 1014.76,1217.28 1015.35,1216.96 1015.93,1216.76 1016.52,1217.62 1017.11,1216.99 1017.69,1216.58 1018.28,1211.99 1018.86,1213.64 1019.45,1213.07 1020.04,1212.85 1020.62,1211.02 1021.21,1209.43 1021.8,1206.53 1022.38,1207.96 1022.97,1209.35 1023.56,1209.22 1024.14,1209.37 1024.73,1210.84 1025.32,1213.62 1025.9,1214.64 1026.49,1209.6 1027.07,1206.69 1027.66,1205.4 1028.25,1201.22 1028.83,1201.85 1029.42,1201.75 1030.01,1201.92 1030.59,1205.42 1031.18,1204.39 1031.77,1200.27 1032.35,1202.38 1032.94,1202.92 1033.52,1204.69 1034.11,1205.06 1034.7,1205.16 1035.28,1205.2 1035.87,1207.1 1036.46,1205.83 1037.04,1206.18 1037.63,1207.99 1038.22,1208.1 1038.8,1208.15 1039.39,1208.31 1039.98,1209.89 1040.56,1214.07 1041.15,1210.63 1041.73,1213.99 1042.32,1213.6 1042.91,1213.74 1043.49,1213.04 1044.08,1211.54 1044.67,1213.07 1045.25,1215.49 1045.84,1217.88 1046.43,1219.17 1047.01,1217.04 1047.6,1214.99 1048.19,1214.57 1048.77,1215.67 1049.36,1215.24 1049.94,1215.01 1050.53,1210.43 1051.12,1210.42 1051.7,1211.65 1052.29,1214.54 1052.88,1212.66 1053.46,1215.57 1054.05,1215.1 1054.64,1214.75 1055.22,1214.63 1055.81,1217.46 1056.39,1218.86 1056.98,1214.04 1057.57,1215.33 1058.15,1214.85 1058.74,1214.59 1059.33,1214.37 1059.91,1214.2 1060.5,1211.19 1061.09,1212.62 1061.67,1209.6 1062.26,1209.49 1062.85,1208.23 1063.43,1208.86 1064.02,1208.81 1064.6,1210.36 1065.19,1208.74 1065.78,1204.21 1066.36,1206.08 1066.95,1205.97 1067.54,1209.22 1068.12,1209.23 1068.71,1210.68 1069.3,1210.68 1069.88,1210.56 1070.47,1211.83 1071.06,1213.11 1071.64,1209.81 1072.23,1209.89 1072.81,1207.21 1073.4,1208.7 1073.99,1208.64 1074.57,1208.62 1075.16,1217.6 1075.75,1215.9 1076.33,1213.72 1076.92,1215.19 1077.51,1213.78 1078.09,1211.81 1078.68,1213.13 1079.26,1211.52 1079.85,1211.36 1080.44,1211.25 1081.02,1209.66 1081.61,1209.47 1082.2,1209.74 1082.78,1211.25 1083.37,1210.83 1083.96,1209.29 1084.54,1209.43 1085.13,1209.77 1085.72,1211.14 1086.3,1209.66 1086.89,1212.67 1087.47,1212.34 1088.06,1216.54 1088.65,1218.79 1089.23,1217.92 1089.82,1216.14 1090.41,1208.64 1090.99,1207.34 1091.58,1210.43 1092.17,1208.92 1092.75,1210.59 1093.34,1210.63 1093.93,1211.03 1094.51,1209.37 1095.1,1208.96 1095.68,1209.2 1096.27,1205.04 1096.86,1208.23 1097.44,1205.47 1098.03,1205.86 1098.62,1205.94 1099.2,1206.1 1099.79,1202.93 1100.38,1206.12 1100.96,1209.05 1101.55,1209.15 1102.14,1207.51 1102.72,1209.28 1103.31,1209.53 1103.89,1209.62 1104.48,1208.35 1105.07,1206.84 1105.65,1206.93 1106.24,1213.01 1106.83,1217.37 1107.41,1216.85 1108,1213.63 1108.59,1213.25 1109.17,1211.58 1109.76,1217.28 1110.34,1220.04 1110.93,1218.02 1111.52,1215.7 1112.1,1213.7 1112.69,1213.74 1113.28,1213.81 1113.86,1213.43 1114.45,1211.75 1115.04,1213.13 1115.62,1212.83 1116.21,1212.73 1116.8,1209.72 1117.38,1208.06 1117.97,1206.56 1118.55,1205.36 1119.14,1207.15 1119.73,1207.29 1120.31,1207.62 1120.9,1204.95 1121.49,1209.89 1122.07,1211.35 1122.66,1213.37 1123.25,1210.08 1123.83,1211.56 1124.42,1209.8 1125.01,1211.28 1125.59,1207.99 1126.18,1207 1126.76,1205.93 1127.35,1209.15 1127.94,1210.38 1128.52,1211.92 1129.11,1213.25 1129.7,1211.83 1130.28,1212.07 1130.87,1210.54 1131.46,1208.83 1132.04,1210.31 1132.63,1211.82 1133.21,1215.89 1133.8,1211.02 1134.39,1209.46 1134.97,1211.21 1135.56,1211.16 1136.15,1210.7 1136.73,1207.7 1137.32,1205.08 1137.91,1203.68 1138.49,1204.17 1139.08,1205.84 1139.67,1204.34 1140.25,1206.32 1140.84,1205.01 1141.42,1204.7 1142.01,1206.11 1142.6,1206.42 1143.18,1209.59 1143.77,1214.14 1144.36,1212.61 1144.94,1211.07 1145.53,1209.6 1146.12,1208.05 1146.7,1208.36 1147.29,1211.19 1147.88,1211.31 1148.46,1211.41 1149.05,1212.52 1149.63,1213.58 1150.22,1211.93 1150.81,1208.93 1151.39,1208.92 1151.98,1212.31 1152.57,1213.84 1153.15,1210.48 1153.74,1210.26 1154.33,1208.33 1154.91,1211.46 1155.5,1212.68 1156.09,1215.19 1156.67,1216.48 1157.26,1217.41 1157.84,1213.59 1158.43,1211.96 1159.02,1209 1159.6,1207.39 1160.19,1209.07 1160.78,1206.26 1161.36,1203.64 1161.95,1203.68 1162.54,1201.15 1163.12,1201.51 1163.71,1205.18 1164.29,1205.29 1164.88,1207.09 1165.47,1202.97 1166.05,1203.32 1166.64,1203.64 1167.23,1206.97 1167.81,1207.24 1168.4,1201.17 1168.99,1200.32 1169.57,1200.63 1170.16,1198.16 1170.75,1198.72 1171.33,1199.35 1171.92,1199.95 1172.5,1199.25 1173.09,1201.6 1173.68,1203.89 1174.26,1204.08 1174.85,1202.71 1175.44,1203.21 1176.02,1202.39 1176.61,1204.14 1177.2,1202.85 1177.78,1204.69 1178.37,1208.13 1178.96,1205.02 1179.54,1202.3 1180.13,1204.49 1180.71,1201.9 1181.3,1206.9 1181.89,1210.09 1182.47,1211.57 1183.06,1211.69 1183.65,1208.59 1184.23,1208.85 1184.82,1207.5 1185.41,1209.3 1185.99,1207.82 1186.58,1208 1187.16,1211.19 1187.75,1210.95 1188.34,1208.01 1188.92,1210.92 1189.51,1209.21 1190.1,1207.8 1190.68,1206.49 1191.27,1206.79 1191.86,1201.27 1192.44,1203.49 1193.03,1203.87 1193.62,1199.71 1194.2,1199.02 1194.79,1197.91 1195.37,1198.77 1195.96,1203.79 1196.55,1202.47 1197.13,1199.83 1197.72,1197.25 1198.31,1200.72 1198.89,1203.86 1199.48,1205.61 1200.07,1207.23 1200.65,1207.12 1201.24,1206.88 1201.83,1206.91 1202.41,1207.3 1203,1209.17 1203.58,1209.08 1204.17,1208.88 1204.76,1210.63 1205.34,1212.26 1205.93,1212.11 1206.52,1211.73 1207.1,1211.81 1207.69,1208.82 1208.28,1210.29 1208.86,1207.29 1209.45,1208.61 1210.03,1207.32 1210.62,1207.46 1211.21,1206.45 1211.79,1210.95 1212.38,1211.24 1212.97,1214.05 1213.55,1215.17 1214.14,1214.84 1214.73,1213.02 1215.31,1211.47 1215.9,1212.76 1216.49,1214.18 1217.07,1214.03 1217.66,1215.37 1218.24,1216.35 1218.83,1217.34 1219.42,1217.06 1220,1215.3 1220.59,1211.89 1221.18,1210.59 1221.76,1210.71 1222.35,1211.99 1222.94,1216.28 1223.52,1218.87 1224.11,1218.34 1224.7,1216.2 1225.28,1217.63 1225.87,1217.17 1226.45,1218.34 1227.04,1216.21 1227.63,1216.01 1228.21,1213.92 1228.8,1213.52 1229.39,1213.26 1229.97,1211.5 1230.56,1209.87 1231.15,1209.88 1231.73,1210.13 1232.32,1209.02 1232.91,1207.72 1233.49,1201.9 1234.08,1205.09 1234.66,1206.72 1235.25,1207.13 1235.84,1206.99 1236.42,1207.07 1237.01,1208.49 1237.6,1211.24 1238.18,1212.29 1238.77,1212.16 1239.36,1210.52 1239.94,1210.26 1240.53,1208.93 1241.11,1212.19 1241.7,1208.99 1242.29,1206.11 1242.87,1207.99 1243.46,1207.77 1244.05,1207.8 1244.63,1206.48 1245.22,1208.22 1245.81,1209.47 1246.39,1207.96 1246.98,1206.09 1247.57,1207.68 1248.15,1209.12 1248.74,1209.15 1249.32,1209.3 1249.91,1209.12 1250.5,1207.68 1251.08,1209.33 1251.67,1209.37 1252.26,1206.37 1252.84,1208.49 1253.43,1209.92 1254.02,1209.71 1254.6,1211.41 1255.19,1211.4 1255.78,1207.99 1256.36,1205.51 1256.95,1201.08 1257.53,1204.56 1258.12,1207.77 1258.71,1208.07 1259.29,1209.66 1259.88,1211.13 1260.47,1214.12 1261.05,1213.87 1261.64,1210.91 1262.23,1214.08 1262.81,1217.14 1263.4,1218.39 1263.98,1216.73 1264.57,1217.82 1265.16,1219.05 1265.74,1218.23 1266.33,1216.04 1266.92,1214.48 1267.5,1217.3 1268.09,1216.88 1268.68,1218.18 1269.26,1216.13 1269.85,1214.23 1270.44,1214 1271.02,1212.28 1271.61,1211.86 1272.19,1211.66 1272.78,1208.81 1273.37,1208.74 1273.95,1210.43 1274.54,1210.41 1275.13,1213.35 1275.71,1213.2 1276.3,1215.96 1276.89,1213.48 1277.47,1210.16 1278.06,1213.12 1278.65,1212.56 1279.23,1211.08 1279.82,1211.42 1280.4,1216.02 1280.99,1214.07 1281.58,1216.84 1282.16,1215.13 1282.75,1213.35 1283.34,1213.35 1283.92,1211.57 1284.51,1213.11 1285.1,1211.14 1285.68,1212.08 1286.27,1213.65 1286.86,1212.03 1287.44,1211.85 1288.03,1211.57 1288.61,1210 1289.2,1208.34 1289.79,1206.82 1290.37,1205.37 1290.96,1202.66 1291.55,1202.9 1292.13,1201.65 1292.72,1203.54 1293.31,1199.29 1293.89,1199.79 1294.48,1202.1 1295.06,1200.81 1295.65,1201.46 1296.24,1203.34 1296.82,1200.61 1297.41,1201.68 1298,1200.66 1298.58,1202.9 1299.17,1200.27 1299.76,1199.11 1300.34,1199.86 1300.93,1199.97 1301.52,1200.65 1302.1,1199.64 1302.69,1198.5 1303.27,1200.99 1303.86,1202.8 1304.45,1204.57 1305.03,1204.88 1305.62,1205.18 1306.21,1202.55 1306.79,1202.72 1307.38,1199.81 1307.97,1201.9 1308.55,1202.27 1309.14,1198 1309.73,1198.62 1310.31,1202.35 1310.9,1201.58 1311.48,1202.08 1312.07,1202.29 1312.66,1200.9 1313.24,1202.94 1313.83,1203.31 1314.42,1206.65 1315,1206.71 1315.59,1209.55 1316.18,1212.78 1316.76,1212.6 1317.35,1212.39 1317.93,1215.16 1318.52,1215.03 1319.11,1216.31 1319.69,1217.67 1320.28,1218.65 1320.87,1218.18 1321.45,1220.77 1322.04,1224.62 1322.63,1225.3 1323.21,1225.89 1323.8,1220.7 1324.39,1220.24 1324.97,1221.38 1325.56,1222.29 1326.14,1221.74 1326.73,1218.4 1327.32,1217.98 1327.9,1217.15 1328.49,1218.21 1329.08,1214.44 1329.66,1212.56 1330.25,1211.03 1330.84,1206.18 1331.42,1207.77 1332.01,1207.72 1332.6,1212.77 1333.18,1211.07 1333.77,1212.39 1334.35,1210.9 1334.94,1210.58 1335.53,1213.52 1336.11,1208.49 1336.7,1208.69 1337.29,1211.57 1337.87,1211.32 1338.46,1212.84 1339.05,1212.47 1339.63,1212.32 1340.22,1210.63 1340.8,1210.43 1341.39,1207.48 1341.98,1207.5 1342.56,1209.28 1343.15,1210.64 1343.74,1210.68 1344.32,1209.07 1344.91,1209.45 1345.5,1210.77 1346.08,1207.44 1346.67,1206.1 1347.26,1208.18 1347.84,1209.63 1348.43,1210.2 1349.01,1210.12 1349.6,1212.09 1350.19,1210.63 1350.77,1212.24 1351.36,1207.62 1351.95,1211.98 1352.53,1211.95 1353.12,1210.71 1353.71,1210.63 1354.29,1209.15 1354.88,1206.34 1355.47,1205.18 1356.05,1204.13 1356.64,1206.29 1357.22,1207.97 1357.81,1207.9 1358.4,1204.94 1358.98,1205.05 1359.57,1205.2 1360.16,1205.31 1360.74,1208.5 1361.33,1211.67 1361.92,1211.42 1362.5,1212.86 1363.09,1212.87 1363.68,1221.6 1364.26,1219.29 1364.85,1219.26 1365.43,1217.43 1366.02,1215.76 1366.61,1214.07 1367.19,1211.02 1367.78,1210.99 1368.37,1212.47 1368.95,1212.34 1369.54,1210.77 1370.13,1209.23 1370.71,1212.31 1371.3,1213.64 1371.88,1213.19 1372.47,1212.96 1373.06,1211.02 1373.64,1210.83 1374.23,1210.54 1374.82,1207.44 1375.4,1206 1375.99,1204.56 1376.58,1204.87 1377.16,1204.94 1377.75,1205.38 1378.34,1205.83 1378.92,1208.82 1379.51,1209.16 1380.09,1212.03 1380.68,1211.88 1381.27,1211.72 1381.85,1211.56 1382.44,1210.04 1383.03,1206.84 1383.61,1205.44 1384.2,1204.68 1384.79,1205.14 1385.37,1206.53 1385.96,1212.37 1386.55,1212.31 1387.13,1212.32 1387.72,1212.24 1388.3,1210.54 1388.89,1210.24 1389.48,1214.73 1390.06,1214.71 1390.65,1214.7 1391.24,1217.31 1391.82,1216.94 1392.41,1216.7 1393,1217.97 1393.58,1213.05 1394.17,1212.88 1394.75,1211.26 1395.34,1212.74 1395.93,1212.47 1396.51,1209.28 1397.1,1210.89 1397.69,1211.01 1398.27,1209.58 1398.86,1207.88 1399.45,1209.22 1400.03,1207.63 1400.62,1207.7 1401.21,1209.52 1401.79,1208.12 1402.38,1212.47 1402.96,1211.1 1403.55,1208.45 1404.14,1208.8 1404.72,1210.34 1405.31,1211.87 1405.9,1210.24 1406.48,1207.27 1407.07,1208.99 1407.66,1210.46 1408.24,1210.21 1408.83,1211.83 1409.42,1211.74 1410,1213.14 1410.59,1207.08 1411.17,1207.35 1411.76,1204.09 1412.35,1204.35 1412.93,1204.45 1413.52,1204.54 1414.11,1206 1414.69,1206.23 1415.28,1206.55 1415.87,1206.45 1416.45,1206.53 1417.04,1208.23 1417.63,1208.62 1418.21,1211.92 1418.8,1213.05 1419.38,1212.73 1419.97,1209.42 1420.56,1210.95 1421.14,1210.65 1421.73,1210.47 1422.32,1210.53 1422.9,1210.22 1423.49,1208.57 1424.08,1207.14 1424.66,1207.23 1425.25,1203.82 1425.83,1204.51 1426.42,1203.2 1427.01,1202.37 1427.59,1202.75 1428.18,1201.71 1428.77,1203.84 1429.35,1202.76 1429.94,1203.24 1430.53,1199.16 1431.11,1201.47 1431.7,1203.5 1432.29,1202.33 1432.87,1204.14 1433.46,1207.21 1434.04,1207.59 1434.63,1207.82 1435.22,1209.16 1435.8,1210.53 1436.39,1210.77 1436.98,1213.67 1437.56,1215.31 1438.15,1217.89 1438.74,1218.88 1439.32,1219.73 1439.91,1219.41 1440.5,1219.21 1441.08,1223.3 1441.67,1222.48 1442.25,1219.99 1442.84,1223.58 1443.43,1222.73 1444.01,1222.65 1444.6,1220.56 1445.19,1220.18 1445.77,1216.71 1446.36,1216.4 1446.95,1214.6 1447.53,1213.03 1448.12,1214.01 1448.7,1209.48 1449.29,1212.07 1449.88,1217.68 1450.46,1214.34 1451.05,1209.74 1451.64,1211.51 1452.22,1211.26 1452.81,1210.89 1453.4,1207.83 1453.98,1209.44 1454.57,1209.41 1455.16,1206.45 1455.74,1206.27 1456.33,1206.64 1456.91,1203.25 1457.5,1203.54 1458.09,1203.85 1458.67,1205.35 1459.26,1207.27 1459.85,1208.99 1460.43,1210.53 1461.02,1214.66 1461.61,1211.59 1462.19,1214.49 1462.78,1212.99 1463.37,1209.78 1463.95,1210.18 1464.54,1211.65 1465.12,1208.37 1465.71,1206.85 1466.3,1207.45 1466.88,1209.43 1467.47,1209.58 1468.06,1208.18 1468.64,1205.25 1469.23,1205.59 1469.82,1204.5 1470.4,1206.56 1470.99,1206.65 1471.57,1211.18 1472.16,1211.33 1472.75,1212.36 1473.33,1210.88 1473.92,1211.04 1474.51,1212.34 1475.09,1210.53 1475.68,1205.64 1476.27,1207.65 1476.85,1210.56 1477.44,1209.19 1478.03,1206.31 1478.61,1203.57 1479.2,1203.65 1479.78,1202.53 1480.37,1202.84 1480.96,1203.26 1481.54,1200.68 1482.13,1199.59 1482.72,1198.73 1483.3,1199.28 1483.89,1199.69 1484.48,1201.73 1485.06,1203.81 1485.65,1202.69 1486.24,1204.82 1486.82,1208.28 1487.41,1208.52 1487.99,1208.59 1488.58,1207.38 1489.17,1212.07 1489.75,1213.87 1490.34,1213.35 1490.93,1214.72 1491.51,1214.69 1492.1,1214.32 1492.69,1210.83 1493.27,1210.95 1493.86,1210.83 1494.45,1210.6 1495.03,1210.51 1495.62,1210.01 1496.2,1209.95 1496.79,1209.83 1497.38,1208.23 1497.96,1206.72 1498.55,1209.74 1499.14,1209.84 1499.72,1209.6 1500.31,1209.51 1500.9,1212.45 1501.48,1210.85 1502.07,1213.87 1502.65,1213.79 1503.24,1216.61 1503.83,1216.24 1504.41,1215.84 1505,1217.07 1505.59,1215.06 1506.17,1216.47 1506.76,1217.54 1507.35,1217.11 1507.93,1215.16 1508.52,1216.36 1509.11,1216.15 1509.69,1214.43 1510.28,1212.63 1510.86,1213.96 1511.45,1212.49 1512.04,1209.15 1512.62,1209.1 1513.21,1207.7 1513.8,1207.94 1514.38,1213.08 1514.97,1212.75 1515.56,1211.03 1516.14,1210.87 1516.73,1211.22 1517.32,1206.44 1517.9,1211.12 1518.49,1213.98 1519.07,1215.14 1519.66,1216.33 1520.25,1215.94 1520.83,1213.02 1521.42,1211.22 1522.01,1208.18 1522.59,1209.75 1523.18,1208.1 1523.77,1206.78 1524.35,1205.58 1524.94,1204.31 1525.52,1204.54 1526.11,1201.66 1526.7,1202.32 1527.28,1201.01 1527.87,1201.56 1528.46,1199.49 1529.04,1198.76 1529.63,1203.74 1530.22,1204.25 1530.8,1207.37 1531.39,1198.65 1531.98,1201.02 1532.56,1201.69 1533.15,1203.76 1533.73,1205.74 1534.32,1209.08 1534.91,1211.01 1535.49,1206.78 1536.08,1205.13 1536.67,1202.57 1537.25,1201.53 1537.84,1202.35 1538.43,1201.2 1539.01,1203.32 1539.6,1203.82 1540.19,1201.3 1540.77,1203.05 1541.36,1204.76 1541.94,1204.91 1542.53,1205.16 1543.12,1208.44 1543.7,1208.77 1544.29,1211.83 1544.88,1213.26 1545.46,1213.14 1546.05,1214.41 1546.64,1212.73 1547.22,1212.56 1547.81,1213.65 1548.4,1216.22 1548.98,1215.89 1549.57,1214.1 1550.15,1213.86 1550.74,1216.49 1551.33,1214.62 1551.91,1214.36 1552.5,1214.11 1553.09,1214.33 1553.67,1216.83 1554.26,1214.73 1554.85,1217.18 1555.43,1216.84 1556.02,1219.72 1556.6,1219 1557.19,1218.22 1557.78,1217.38 1558.36,1218.33 1558.95,1216.71 1559.54,1216.38 1560.12,1216.06 1560.71,1217 1561.3,1214.77 1561.88,1215.72 1562.47,1213.84 1563.06,1213.25 1563.64,1211.48 1564.23,1209.87 1564.81,1211.29 1565.4,1209.68 1565.99,1211.11 1566.57,1212.54 1567.16,1210.63 1567.75,1210.55 1568.33,1208.69 1568.92,1210.19 1569.51,1208.64 1570.09,1211.77 1570.68,1213.21 1571.27,1210.11 1571.85,1213.28 1572.44,1212.7 1573.02,1212.33 1573.61,1211.84 1574.2,1210.19 1574.78,1208.51 1575.37,1207.45 1575.96,1209.05 1576.54,1207.75 1577.13,1210.64 1577.72,1209.08 1578.3,1209.2 1578.89,1212.33 1579.47,1213.54 1580.06,1215.17 1580.65,1216.45 1581.23,1216.17 1581.82,1215.9 1582.41,1215.42 1582.99,1215.2 1583.58,1213.46 1584.17,1211.86 1584.75,1208.74 1585.34,1208.61 1585.93,1210.41 1586.51,1210.22 1587.1,1208.26 1587.68,1208.31 1588.27,1211.58 1588.86,1213.4 1589.44,1213.38 1590.03,1217.66 1590.62,1218.43 1591.2,1221.01 1591.79,1218.87 1592.38,1215.3 1592.96,1215.21 1593.55,1214.83 1594.14,1216.03 1594.72,1216.93 1595.31,1216.81 1595.89,1216.19 1596.48,1217.15 1597.07,1214.77 1597.65,1211.47 1598.24,1209.73 1598.83,1208.23 1599.41,1209.95 1600,1211.41 1600.59,1215.73 1601.17,1213.94 1601.76,1216.79 1602.34,1216.43 1602.93,1214.62 1603.52,1211.46 1604.1,1212.59 1604.69,1207.94 1605.28,1207.93 1605.86,1206.47 1606.45,1210.68 1607.04,1207.28 1607.62,1208.8 1608.21,1210.28 1608.8,1204.46 1609.38,1201.85 1609.97,1200.75 1610.55,1202.58 1611.14,1203.09 1611.73,1203.41 1612.31,1205.02 1612.9,1205.36 1613.49,1204.1 1614.07,1201.03 1614.66,1202.92 1615.25,1203.04 1615.83,1203.25 1616.42,1205.14 1617.01,1203.72 1617.59,1202.23 1618.18,1199.68 1618.76,1198.95 1619.35,1200.88 1619.94,1201.59 1620.52,1200.59 1621.11,1202.69 1621.7,1202.97 1622.28,1206.31 1622.87,1205.31 1623.46,1207.29 1624.04,1208.92 1624.63,1209.19 1625.22,1209.27 1625.8,1209.64 1626.39,1209.53 1626.97,1213.79 1627.56,1213.37 1628.15,1214.76 1628.73,1209.74 1629.32,1214.4 1629.91,1212.47 1630.49,1215.15 1631.08,1211.93 1631.67,1208.99 1632.25,1207.53 1632.84,1205.7 1633.42,1207.39 1634.01,1206.17 1634.6,1206.27 1635.18,1203.82 1635.77,1208.75 1636.36,1210.12 1636.94,1210.14 1637.53,1210.4 1638.12,1207.6 1638.7,1204.7 1639.29,1205.13 1639.88,1206.89 1640.46,1204.1 1641.05,1203.42 1641.63,1205.33 1642.22,1206.99 1642.81,1209.98 1643.39,1212.87 1643.98,1214.42 1644.57,1215.66 1645.15,1212.26 1645.74,1210.32 1646.33,1208.74 1646.91,1210.23 1647.5,1210.7 1648.09,1210.56 1648.67,1213.26 1649.26,1211.71 1649.84,1211.38 1650.43,1212.9 1651.02,1214.33 1651.6,1215.81 1652.19,1215.67 1652.78,1215.5 1653.36,1218.3 1653.95,1216.34 1654.54,1213.11 1655.12,1213.2 1655.71,1214.8 1656.29,1212.81 1656.88,1214 1657.47,1212.01 1658.05,1209.24 1658.64,1209.16 1659.23,1207.73 1659.81,1207.88 1660.4,1207.78 1660.99,1204.89 1661.57,1206.52 1662.16,1207.92 1662.75,1204.85 1663.33,1204.98 1663.92,1203.82 1664.5,1204.11 1665.09,1203.23 1665.68,1205.22 1666.26,1207.16 1666.85,1204.32 1667.44,1203.08 1668.02,1205 1668.61,1204.9 1669.2,1205 1669.78,1208.15 1670.37,1206.56 1670.96,1205.22 1671.54,1206.74 1672.13,1210.01 1672.71,1210.41 1673.3,1207 1673.89,1208.67 1674.47,1208.8 1675.06,1204.26 1675.65,1205.79 1676.23,1204.54 1676.82,1204.68 1677.41,1207.7 1677.99,1206.32 1678.58,1208.04 1679.17,1207.94 1679.75,1212.42 1680.34,1212.37 1680.92,1212.15 1681.51,1208.75 1682.1,1211.88 1682.68,1217.82 1683.27,1216.07 1683.86,1211.31 1684.44,1212.92 1685.03,1211.09 1685.62,1211.02 1686.2,1210.99 1686.79,1212.43 1687.37,1209.46 1687.96,1210.98 1688.55,1213.74 1689.13,1213.69 1689.72,1214.89 1690.31,1214.66 1690.89,1211.34 1691.48,1211.27 1692.07,1206.27 1692.65,1206.29 1693.24,1208.14 1693.83,1207.95 1694.41,1208.52 1695,1208.52 1695.58,1207.13 1696.17,1208.8 1696.76,1208.84 1697.34,1206.23 1697.93,1207.7 1698.52,1207.83 1699.1,1207.97 1699.69,1208.25 1700.28,1209.84 1700.86,1210.93 1701.45,1210.92 1702.04,1209.51 1702.62,1209.37 1703.21,1208.03 1703.79,1208.35 1704.38,1208.42 1704.97,1208.53 1705.55,1208.89 1706.14,1209.2 1706.73,1207.6 1707.31,1206.16 1707.9,1209.61 1708.49,1211.28 1709.07,1209.82 1709.66,1209.89 1710.24,1209.69 1710.83,1208.29 1711.42,1209.64 1712,1209.66 1712.59,1208.19 1713.18,1208.22 1713.76,1206.81 1714.35,1209.76 1714.94,1210.14 1715.52,1209.97 1716.11,1207.29 1716.7,1207.51 1717.28,1206.04 1717.87,1210.77 1718.45,1210.73 1719.04,1209.12 1719.63,1207.87 1720.21,1207.86 1720.8,1204.95 1721.39,1205.49 1721.97,1203.94 1722.56,1205.88 1723.15,1204.52 1723.73,1201.84 1724.32,1202.32 1724.91,1205.77 1725.49,1205.74 1726.08,1209.06 1726.66,1207.71 1727.25,1211.96 1727.84,1208.95 1728.42,1206 1729.01,1206.4 1729.6,1206.8 1730.18,1205.54 1730.77,1208.85 1731.36,1207.57 1731.94,1209.34 1732.53,1207.88 1733.11,1206.63 1733.7,1205.09 1734.29,1205.41 1734.87,1203.83 1735.46,1204.01 1736.05,1205.62 1736.63,1204.42 1737.22,1204.52 1737.81,1206.09 1738.39,1207.52 1738.98,1209.43 1739.57,1210.87 1740.15,1212.34 1740.74,1212.18 1741.32,1208.89 1741.91,1207.36 1742.5,1205.92 1743.08,1207.55 1743.67,1207.65 1744.26,1209.19 1744.84,1208 1745.43,1208.31 1746.02,1211.46 1746.6,1211.49 1747.19,1211.21 1747.78,1212.75 1748.36,1218.75 1748.95,1218.29 1749.53,1219.17 1750.12,1218.45 1750.71,1217.75 1751.29,1217.44 1751.88,1218.77 1752.47,1217.05 1753.05,1216.62 1753.64,1216.39 1754.23,1217.55 1754.81,1214.11 1755.4,1210.67 1755.99,1208.98 1756.57,1212.22 1757.16,1212.02 1757.74,1216.37 1758.33,1216.45 1758.92,1217.83 1759.5,1218.54 1760.09,1221.25 1760.68,1217.92 1761.26,1219.11 1761.85,1217.27 1762.44,1219.91 1763.02,1217.81 1763.61,1214.41 1764.19,1217.04 1764.78,1215.12 1765.37,1216.1 1765.95,1214.19 1766.54,1214.12 1767.13,1216.77 1767.71,1216.37 1768.3,1217.79 1768.89,1214.3 1769.47,1211.04 1770.06,1211.16 1770.65,1211.29 1771.23,1212.99 1771.82,1214.14 1772.4,1212.39 1772.99,1212.44 1773.58,1212.09 1774.16,1207.4 1774.75,1205.46 1775.34,1203.95 1775.92,1203.97 1776.51,1204.02 1777.1,1201.35 1777.68,1201.73 1778.27,1203.27 1778.86,1205.31 1779.44,1205.88 1780.03,1202.74 1780.61,1206.05 1781.2,1206.23 1781.79,1204.7 1782.37,1204.78 1782.96,1206.77 1783.55,1206.75 1784.13,1209.92 1784.72,1212.4 1785.31,1212.1 1785.89,1212.27 1786.48,1206.24 1787.06,1205.23 1787.65,1205.49 1788.24,1205.65 1788.82,1205.47 1789.41,1205.44 1790,1205.52 1790.58,1205.75 1791.17,1204.56 1791.76,1204.89 1792.34,1202.03 1792.93,1203.88 1793.52,1204.23 1794.1,1204.11 1794.69,1205.73 1795.27,1206.05 1795.86,1206.08 1796.45,1205.99 1797.03,1204.92 1797.62,1205.34 1798.21,1207.05 1798.79,1207.4 1799.38,1209.09 1799.97,1208.81 1800.55,1210.52 1801.14,1211.86 1801.73,1213.27 1802.31,1211.61 1802.9,1205.61 1803.48,1201.47 1804.07,1203.76 1804.66,1205.75 1805.24,1208.75 1805.83,1208.88 1806.42,1210.59 1807,1207.43 1807.59,1206.09 1808.18,1204.81 1808.76,1204.64 1809.35,1206.4 1809.94,1203.41 1810.52,1203.74 1811.11,1204.26 1811.69,1203.03 1812.28,1205 1812.87,1203.33 1813.45,1203.56 1814.04,1205.2 1814.63,1208.44 1815.21,1209.69 1815.8,1207.82 1816.39,1210.67 1816.97,1204.75 1817.56,1203.56 1818.14,1202.31 1818.73,1205.74 1819.32,1204.42 1819.9,1206.29 1820.49,1209.08 1821.08,1212.25 1821.66,1211.95 1822.25,1213.6 1822.84,1214.8 1823.42,1214.64 1824.01,1216.08 1824.6,1217.47 1825.18,1217.11 1825.77,1216.72 1826.35,1213.37 1826.94,1217.41 1827.53,1216.76 1828.11,1214.96 1828.7,1215.76 1829.29,1215.5 1829.87,1216.41 1830.46,1215.95 1831.05,1212.55 1831.63,1209.24 1832.22,1207.48 1832.81,1207.54 1833.39,1206.27 1833.98,1208.03 1834.56,1206.27 1835.15,1206.31 1835.74,1204.71 1836.32,1203.57 1836.91,1204.05 1837.5,1207.32 1838.08,1207.12 1838.67,1210.4 1839.26,1207.43 1839.84,1206.03 1840.43,1206.14 1841.01,1207.76 1841.6,1206.36 1842.19,1205.04 1842.77,1206.79 1843.36,1204.08 1843.95,1204.19 1844.53,1204.73 1845.12,1201.89 1845.71,1202.37 1846.29,1204.02 1846.88,1205.77 1847.47,1204.15 1848.05,1204.16 1848.64,1204.42 1849.22,1201.49 1849.81,1201.95 1850.4,1202.29 1850.98,1205.77 1851.57,1206.29 1852.16,1208.23 1852.74,1211.28 1853.33,1209.82 1853.92,1211.31 1854.5,1211.13 1855.09,1207.9 1855.68,1206.56 1856.26,1206.81 1856.85,1207.02 1857.43,1207.23 1858.02,1206.01 1858.61,1204.53 1859.19,1207.56 1859.78,1207.71 1860.37,1206.37 1860.95,1206.21 1861.54,1207.89 1862.13,1205.13 1862.71,1205.27 1863.3,1205.37 1863.88,1205.48 1864.47,1206.94 1865.06,1209.99 1865.64,1210.35 1866.23,1213.64 1866.82,1214.85 1867.4,1213.23 1867.99,1215.75 1868.58,1219.58 1869.16,1216.47 1869.75,1217.81 1870.34,1220.35 1870.92,1217.07 1871.51,1216.76 1872.09,1213.88 1872.68,1212.11 1873.27,1210.45 1873.85,1209.06 1874.44,1208.99 1875.03,1209.01 1875.61,1209.34 1876.2,1207.98 1876.79,1210.88 1877.37,1208.94 1877.96,1206.13 1878.55,1204.68 1879.13,1204.97 1879.72,1205.28 1880.3,1207.22 1880.89,1207.6 1881.48,1207.87 1882.06,1209.83 1882.65,1205.14 1883.24,1202.56 1883.82,1201.43 1884.41,1198.49 1885,1199.13 1885.58,1199.75 1886.17,1200.27 1886.76,1202.17 1887.34,1202.56 1887.93,1202.95 1888.51,1204.95 1889.1,1203.95 1889.69,1202.7 1890.27,1205.8 1890.86,1208.81 1891.45,1208.56 1892.03,1208.61 1892.62,1208.74 1893.21,1205.93 1893.79,1205.08 1894.38,1206.67 1894.96,1210.14 1895.55,1212.81 1896.14,1211.22 1896.72,1211.14 1897.31,1209.69 1897.9,1208.15 1898.48,1207.13 1899.07,1208.66 1899.66,1204.32 1900.24,1204.46 1900.83,1204.68 1901.42,1209.15 1902,1209.2 1902.59,1213.61 1903.17,1213.37 1903.76,1213.36 1904.35,1214.6 1904.93,1212.56 1905.52,1214.26 1906.11,1213.98 1906.69,1210.99 1907.28,1211.02 1907.87,1211.05 1908.45,1212.35 1909.04,1210.62 1909.63,1210.63 1910.21,1212.03 1910.8,1209.16 1911.38,1208.92 1911.97,1210.73 1912.56,1212.71 1913.14,1212.51 1913.73,1209.55 1914.32,1209.61 1914.9,1209.33 1915.49,1210.91 1916.08,1209.18 1916.66,1207.71 1917.25,1209.46 1917.83,1209.56 1918.42,1208.12 1919.01,1208.45 1919.59,1206.79 1920.18,1206.91 1920.77,1211.36 1921.35,1211.29 1921.94,1211.06 1922.53,1209.55 1923.11,1209.64 1923.7,1209.6 1924.29,1208.13 1924.87,1206.72 1925.46,1210.19 1926.04,1208.5 1926.63,1211.68 1927.22,1210.03 1927.8,1209.77 1928.39,1209.77 1928.98,1208.17 1929.56,1208.1 1930.15,1209.69 1930.74,1211.27 1931.32,1213.72 1931.91,1213.61 1932.5,1215.08 1933.08,1215.05 1933.67,1217.63 1934.25,1217.28 1934.84,1214.15 1935.43,1209.15 1936.01,1210.54 1936.6,1210.62 1937.19,1210.63 1937.77,1210.5 1938.36,1210.6 1938.95,1211.83 1939.53,1211.44 1940.12,1210.08 1940.71,1210.04 1941.29,1209.86 1941.88,1211.37 1942.46,1209.65 1943.05,1214.35 1943.64,1217.06 1944.22,1218.47 1944.81,1216.78 1945.4,1217.93 1945.98,1217.63 1946.57,1217.08 1947.16,1216.56 1947.74,1217.72 1948.33,1220.2 1948.91,1219.37 1949.5,1217.18 1950.09,1214.99 1950.67,1216.22 1951.26,1215.99 1951.85,1215.81 1952.43,1215.31 1953.02,1214.73 1953.61,1214.49 1954.19,1213.94 1954.78,1212.15 1955.37,1207.55 1955.95,1207.96 1956.54,1211.14 1957.12,1209.57 1957.71,1211.02 1958.3,1212.66 1958.88,1212.42 1959.47,1213.82 1960.06,1216.39 1960.64,1215.99 1961.23,1215.61 1961.82,1218.34 1962.4,1220.82 1962.99,1218.87 1963.58,1216.98 1964.16,1215.09 1964.75,1210.34 1965.33,1208.61 1965.92,1207.04 1966.51,1208.54 1967.09,1208.63 1967.68,1208.39 1968.27,1208.34 1968.85,1211.05 1969.44,1209.32 1970.03,1209.38 1970.61,1209.12 1971.2,1207.65 1971.78,1206.03 1972.37,1204.56 1972.96,1206.32 1973.54,1204.82 1974.13,1206.84 1974.72,1205.76 1975.3,1206.23 1975.89,1206.41 1976.48,1206.78 1977.06,1208.18 1977.65,1211.18 1978.24,1211.27 1978.82,1209.77 1979.41,1210.03 1979.99,1208.51 1980.58,1210.12 1981.17,1211.65 1981.75,1213.16 1982.34,1211.35 1982.93,1209.64 1983.51,1211.27 1984.1,1212.99 1984.69,1212.87 1985.27,1212.52 1985.86,1215.11 1986.45,1213.52 1987.03,1213.48 1987.62,1211.89 1988.2,1213.43 1988.79,1213.24 1989.38,1214.34 1989.96,1216.98 1990.55,1216.66 1991.14,1216.48 1991.72,1213.21 1992.31,1211.43 1992.9,1210.97 1993.48,1209.23 1994.07,1210.47 1994.65,1207.2 1995.24,1205.56 1995.83,1203.02 1996.41,1204.94 1997,1208.22 1997.59,1208.36 1998.17,1208.44 1998.76,1211.51 1999.35,1212.82 1999.93,1211.24 2000.52,1209.61 2001.11,1210.98 2001.69,1206.2 2002.28,1208.13 2002.86,1211.12 2003.45,1208.17 2004.04,1212.82 2004.62,1212.73 2005.21,1215.42 2005.8,1216.33 2006.38,1216 2006.97,1215.72 2007.56,1218.46 2008.14,1216.49 2008.73,1217.43 2009.32,1218.67 2009.9,1218.41 2010.49,1216.25 2011.07,1214.37 2011.66,1209.67 2012.25,1210.97 2012.83,1210.8 2013.42,1210.54 2014.01,1208.97 2014.59,1210.58 2015.18,1210.46 2015.77,1210.77 2016.35,1210.73 2016.94,1212.17 2017.53,1213.43 2018.11,1210.32 2018.7,1211.58 2019.28,1208.38 2019.87,1208.57 2020.46,1202.9 2021.04,1207.5 2021.63,1209.14 2022.22,1211.93 2022.8,1211.58 2023.39,1212.86 2023.98,1212.56 2024.56,1212.45 2025.15,1212.37 2025.73,1210.84 2026.32,1207.46 2026.91,1206.44 2027.49,1203.73 2028.08,1205.62 2028.67,1204.23 2029.25,1202.53 2029.84,1202.84 2030.43,1201.47 2031.01,1202.1 2031.6,1204.19 2032.19,1206.16 2032.77,1204.62 2033.36,1209.31 2033.94,1215.35 2034.53,1212.11 2035.12,1212.09 2035.7,1215.1 2036.29,1213.12 2036.88,1209.89 2037.46,1209.91 2038.05,1211.48 2038.64,1212.8 2039.22,1209.53 2039.81,1211.3 2040.4,1209.91 2040.98,1208.54 2041.57,1204.18 2042.15,1204.26 2042.74,1206.12 2043.33,1207.91 2043.91,1201.95 2044.5,1199.37 2045.09,1199.73 2045.67,1198.9 2046.26,1196.6 2046.85,1200.05 2047.43,1200.47 2048.02,1204.21 2048.6,1204.66 2049.19,1206.31 2049.78,1206.83 2050.36,1208.63 2050.95,1208.45 2051.54,1208.34 2052.12,1208.18 2052.71,1208.14 2053.3,1209.67 2053.88,1209.38 2054.47,1211.07 2055.06,1215.76 2055.64,1213.75 2056.23,1211.85 2056.81,1211.72 2057.4,1210.3 2057.99,1211.49 2058.57,1209.76 2059.16,1208.47 2059.75,1207.09 2060.33,1205.68 2060.92,1207.5 2061.51,1204.8 2062.09,1206.41 2062.68,1208.13 2063.27,1205.36 2063.85,1205.6 2064.44,1204.58 2065.02,1204.85 2065.61,1206.33 2066.2,1206.36 2066.78,1206.26 2067.37,1208.03 2067.96,1205.03 2068.54,1202.25 2069.13,1202.72 2069.72,1203.49 2070.3,1202.07 2070.89,1204.06 2071.48,1205.51 2072.06,1202.44 2072.65,1204.06 2073.23,1205.65 2073.82,1205.92 2074.41,1205.99 2074.99,1207.98 2075.58,1211.11 2076.17,1211.07 2076.75,1209.17 2077.34,1206.3 2077.93,1209.18 2078.51,1209.34 2079.1,1210.9 2079.68,1213.72 2080.27,1215.12 2080.86,1213.46 2081.44,1213.16 2082.03,1212.79 2082.62,1209.54 2083.2,1207.64 2083.79,1209.39 2084.38,1212.18 2084.96,1210.29 2085.55,1208.75 2086.14,1211.75 2086.72,1210 2087.31,1211.28 2087.89,1208.17 2088.48,1208.19 2089.07,1208.7 2089.65,1207.75 2090.24,1209.63 2090.83,1210.03 2091.41,1208.51 2092,1207.22 2092.59,1202.68 2093.17,1200.07 2093.76,1200.54 2094.35,1200.95 2094.93,1201.64 2095.52,1200.61 2096.1,1202.57 2096.69,1204.46 2097.28,1206.41 2097.86,1206.5 2098.45,1206.46 2099.04,1209.95 2099.62,1210.1 2100.21,1210.21 2100.8,1210.19 2101.38,1211.83 2101.97,1210.15 2102.55,1210 2103.14,1209.95 2103.73,1208.27 2104.31,1206.56 2104.9,1206.48 2105.49,1208.12 2106.07,1206.63 2106.66,1208.25 2107.25,1207.24 2107.83,1207.31 2108.42,1208.67 2109.01,1207.17 2109.59,1211.7 2110.18,1211.91 2110.76,1218.79 2111.35,1216.66 2111.94,1215.9 2112.52,1217.26 2113.11,1216.74 2113.7,1214.89 2114.28,1213.21 2114.87,1211.4 2115.46,1211.23 2116.04,1211.06 2116.63,1209.35 2117.22,1210.71 2117.8,1211.92 2118.39,1207.17 2118.97,1208.64 2119.56,1209.92 2120.15,1206.82 2120.73,1208.43 2121.32,1206.63 2121.91,1206.9 2122.49,1208.6 2123.08,1213.11 2123.67,1208.29 2124.25,1210.09 2124.84,1208.56 2125.42,1208.39 2126.01,1209.79 2126.6,1209.77 2127.18,1209.8 2127.77,1212.44 2128.36,1211.02 2128.94,1213.65 2129.53,1213.56 2130.12,1213.2 2130.7,1216.14 2131.29,1214.29 2131.88,1214.02 2132.46,1214 2133.05,1213.59 2133.63,1214.58 2134.22,1212.75 2134.81,1212.48 2135.39,1210.98 2135.98,1211.95 2136.57,1213.29 2137.15,1212.94 2137.74,1211.49 2138.33,1211.46 2138.91,1211.51 2139.5,1213.06 2140.09,1208.62 2140.67,1207.29 2141.26,1208.95 2141.84,1208.88 2142.43,1207.67 2143.02,1213.61 2143.6,1213.64 2144.19,1210.61 2144.78,1210.53 2145.36,1211.73 2145.95,1213.14 2146.54,1212.98 2147.12,1211.63 2147.71,1211.51 2148.3,1210.09 2148.88,1205.52 2149.47,1207.16 2150.05,1208.64 2150.64,1210.37 2151.23,1210.63 2151.81,1208.82 2152.4,1212.13 2152.99,1210.58 2153.57,1210.5 2154.16,1210.59 2154.75,1210.99 2155.33,1212.37 2155.92,1212.11 2156.5,1211.85 2157.09,1211.7 2157.68,1212.99 2158.26,1211.3 \"/>\n<path clip-path=\"url(#clip222)\" d=\"M986.025 1210.05 L986.612 1210.05 L987.198 1210.05 L987.785 1210.05 L988.371 1210.05 L988.957 1210.05 L989.544 1210.05 L990.13 1210.05 L990.717 1210.05 L991.303 1210.05 L991.889 1210.05 L992.476 1210.05 L993.062 1210.05 L993.649 1210.05 L994.235 1210.05 L994.822 1210.05 L995.408 1210.05 L995.994 1210.05 L996.581 1210.05 L997.167 1210.05 L997.754 1210.05 L998.34 1210.05 L998.926 1210.05 L999.513 1210.05 L1000.1 1210.05 L1000.69 1210.05 L1001.27 1210.05 L1001.86 1210.05 L1002.44 1210.05 L1003.03 1210.05 L1003.62 1210.05 L1004.2 1210.05 L1004.79 1210.05 L1005.38 1210.05 L1005.96 1210.05 L1006.55 1210.05 L1007.14 1210.05 L1007.72 1210.05 L1008.31 1210.05 L1008.9 1210.05 L1009.48 1210.05 L1010.07 1210.05 L1010.65 1210.05 L1011.24 1210.05 L1011.83 1210.05 L1012.41 1210.05 L1013 1210.05 L1013.59 1210.05 L1014.17 1210.05 L1014.76 1210.05 L1015.35 1210.05 L1015.93 1210.05 L1016.52 1210.05 L1017.11 1210.05 L1017.69 1210.05 L1018.28 1210.05 L1018.86 1210.05 L1019.45 1210.05 L1020.04 1210.05 L1020.62 1210.05 L1021.21 1210.05 L1021.8 1210.05 L1022.38 1210.05 L1022.97 1210.05 L1023.56 1210.05 L1024.14 1210.05 L1024.73 1210.05 L1025.32 1210.05 L1025.9 1210.05 L1026.49 1210.05 L1027.07 1210.05 L1027.66 1210.05 L1028.25 1210.05 L1028.83 1210.05 L1029.42 1210.05 L1030.01 1210.05 L1030.59 1210.05 L1031.18 1210.05 L1031.77 1210.05 L1032.35 1210.05 L1032.94 1210.05 L1033.52 1210.05 L1034.11 1210.05 L1034.7 1210.05 L1035.28 1210.05 L1035.87 1210.05 L1036.46 1210.05 L1037.04 1210.05 L1037.63 1210.05 L1038.22 1210.05 L1038.8 1210.05 L1039.39 1210.05 L1039.98 1210.05 L1040.56 1210.05 L1041.15 1210.05 L1041.73 1210.05 L1042.32 1210.05 L1042.91 1210.05 L1043.49 1210.05 L1044.08 1210.05 L1044.67 1210.05 L1045.25 1210.05 L1045.84 1210.05 L1046.43 1210.05 L1047.01 1210.05 L1047.6 1210.05 L1048.19 1210.05 L1048.77 1210.05 L1049.36 1210.05 L1049.94 1210.05 L1050.53 1210.05 L1051.12 1210.05 L1051.7 1210.05 L1052.29 1210.05 L1052.88 1210.05 L1053.46 1210.05 L1054.05 1210.05 L1054.64 1210.05 L1055.22 1210.05 L1055.81 1210.05 L1056.39 1210.05 L1056.98 1210.05 L1057.57 1210.05 L1058.15 1210.05 L1058.74 1210.05 L1059.33 1210.05 L1059.91 1210.05 L1060.5 1210.05 L1061.09 1210.05 L1061.67 1210.05 L1062.26 1210.05 L1062.85 1210.05 L1063.43 1210.05 L1064.02 1210.05 L1064.6 1210.05 L1065.19 1210.05 L1065.78 1210.05 L1066.36 1210.05 L1066.95 1210.05 L1067.54 1210.05 L1068.12 1210.05 L1068.71 1210.05 L1069.3 1210.05 L1069.88 1210.05 L1070.47 1210.05 L1071.06 1210.05 L1071.64 1210.05 L1072.23 1210.05 L1072.81 1210.05 L1073.4 1210.05 L1073.99 1210.05 L1074.57 1210.05 L1075.16 1210.05 L1075.75 1210.05 L1076.33 1210.05 L1076.92 1210.05 L1077.51 1210.05 L1078.09 1210.05 L1078.68 1210.05 L1079.26 1210.05 L1079.85 1210.05 L1080.44 1210.05 L1081.02 1210.05 L1081.61 1210.05 L1082.2 1210.05 L1082.78 1210.05 L1083.37 1210.05 L1083.96 1210.05 L1084.54 1210.05 L1085.13 1210.05 L1085.72 1210.05 L1086.3 1210.05 L1086.89 1210.05 L1087.47 1210.05 L1088.06 1210.05 L1088.65 1210.05 L1089.23 1210.05 L1089.82 1210.05 L1090.41 1210.05 L1090.99 1210.05 L1091.58 1210.05 L1092.17 1210.05 L1092.75 1210.05 L1093.34 1210.05 L1093.93 1210.05 L1094.51 1210.05 L1095.1 1210.05 L1095.68 1210.05 L1096.27 1210.05 L1096.86 1210.05 L1097.44 1210.05 L1098.03 1210.05 L1098.62 1210.05 L1099.2 1210.05 L1099.79 1210.05 L1100.38 1210.05 L1100.96 1210.05 L1101.55 1210.05 L1102.14 1210.05 L1102.72 1210.05 L1103.31 1210.05 L1103.89 1210.05 L1104.48 1210.05 L1105.07 1210.05 L1105.65 1210.05 L1106.24 1210.05 L1106.83 1210.05 L1107.41 1210.05 L1108 1210.05 L1108.59 1210.05 L1109.17 1210.05 L1109.76 1210.05 L1110.34 1210.05 L1110.93 1210.05 L1111.52 1210.05 L1112.1 1210.05 L1112.69 1210.05 L1113.28 1210.05 L1113.86 1210.05 L1114.45 1210.05 L1115.04 1210.05 L1115.62 1210.05 L1116.21 1210.05 L1116.8 1210.05 L1117.38 1210.05 L1117.97 1210.05 L1118.55 1210.05 L1119.14 1210.05 L1119.73 1210.05 L1120.31 1210.05 L1120.9 1210.05 L1121.49 1210.05 L1122.07 1210.05 L1122.66 1210.05 L1123.25 1210.05 L1123.83 1210.05 L1124.42 1210.05 L1125.01 1210.05 L1125.59 1210.05 L1126.18 1210.05 L1126.76 1210.05 L1127.35 1210.05 L1127.94 1210.05 L1128.52 1210.05 L1129.11 1210.05 L1129.7 1210.05 L1130.28 1210.05 L1130.87 1210.05 L1131.46 1210.05 L1132.04 1210.05 L1132.63 1210.05 L1133.21 1210.05 L1133.8 1210.05 L1134.39 1210.05 L1134.97 1210.05 L1135.56 1210.05 L1136.15 1210.05 L1136.73 1210.05 L1137.32 1210.05 L1137.91 1210.05 L1138.49 1210.05 L1139.08 1210.05 L1139.67 1210.05 L1140.25 1210.05 L1140.84 1210.05 L1141.42 1210.05 L1142.01 1210.05 L1142.6 1210.05 L1143.18 1210.05 L1143.77 1210.05 L1144.36 1210.05 L1144.94 1210.05 L1145.53 1210.05 L1146.12 1210.05 L1146.7 1210.05 L1147.29 1210.05 L1147.88 1210.05 L1148.46 1210.05 L1149.05 1210.05 L1149.63 1210.05 L1150.22 1210.05 L1150.81 1210.05 L1151.39 1210.05 L1151.98 1210.05 L1152.57 1210.05 L1153.15 1210.05 L1153.74 1210.05 L1154.33 1210.05 L1154.91 1210.05 L1155.5 1210.05 L1156.09 1210.05 L1156.67 1210.05 L1157.26 1210.05 L1157.84 1210.05 L1158.43 1210.05 L1159.02 1210.05 L1159.6 1210.05 L1160.19 1210.05 L1160.78 1210.05 L1161.36 1210.05 L1161.95 1210.05 L1162.54 1210.05 L1163.12 1210.05 L1163.71 1210.05 L1164.29 1210.05 L1164.88 1210.05 L1165.47 1210.05 L1166.05 1210.05 L1166.64 1210.05 L1167.23 1210.05 L1167.81 1210.05 L1168.4 1210.05 L1168.99 1210.05 L1169.57 1210.05 L1170.16 1210.05 L1170.75 1210.05 L1171.33 1210.05 L1171.92 1210.05 L1172.5 1210.05 L1173.09 1210.05 L1173.68 1210.05 L1174.26 1210.05 L1174.85 1210.05 L1175.44 1210.05 L1176.02 1210.05 L1176.61 1210.05 L1177.2 1210.05 L1177.78 1210.05 L1178.37 1210.05 L1178.96 1210.05 L1179.54 1210.05 L1180.13 1210.05 L1180.71 1210.05 L1181.3 1210.05 L1181.89 1210.05 L1182.47 1210.05 L1183.06 1210.05 L1183.65 1210.05 L1184.23 1210.05 L1184.82 1210.05 L1185.41 1210.05 L1185.99 1210.05 L1186.58 1210.05 L1187.16 1210.05 L1187.75 1210.05 L1188.34 1210.05 L1188.92 1210.05 L1189.51 1210.05 L1190.1 1210.05 L1190.68 1210.05 L1191.27 1210.05 L1191.86 1210.05 L1192.44 1210.05 L1193.03 1210.05 L1193.62 1210.05 L1194.2 1210.05 L1194.79 1210.05 L1195.37 1210.05 L1195.96 1210.05 L1196.55 1210.05 L1197.13 1210.05 L1197.72 1210.05 L1198.31 1210.05 L1198.89 1210.05 L1199.48 1210.05 L1200.07 1210.05 L1200.65 1210.05 L1201.24 1210.05 L1201.83 1210.05 L1202.41 1210.05 L1203 1210.05 L1203.58 1210.05 L1204.17 1210.05 L1204.76 1210.05 L1205.34 1210.05 L1205.93 1210.05 L1206.52 1210.05 L1207.1 1210.05 L1207.69 1210.05 L1208.28 1210.05 L1208.86 1210.05 L1209.45 1210.05 L1210.03 1210.05 L1210.62 1210.05 L1211.21 1210.05 L1211.79 1210.05 L1212.38 1210.05 L1212.97 1210.05 L1213.55 1210.05 L1214.14 1210.05 L1214.73 1210.05 L1215.31 1210.05 L1215.9 1210.05 L1216.49 1210.05 L1217.07 1210.05 L1217.66 1210.05 L1218.24 1210.05 L1218.83 1210.05 L1219.42 1210.05 L1220 1210.05 L1220.59 1210.05 L1221.18 1210.05 L1221.76 1210.05 L1222.35 1210.05 L1222.94 1210.05 L1223.52 1210.05 L1224.11 1210.05 L1224.7 1210.05 L1225.28 1210.05 L1225.87 1210.05 L1226.45 1210.05 L1227.04 1210.05 L1227.63 1210.05 L1228.21 1210.05 L1228.8 1210.05 L1229.39 1210.05 L1229.97 1210.05 L1230.56 1210.05 L1231.15 1210.05 L1231.73 1210.05 L1232.32 1210.05 L1232.91 1210.05 L1233.49 1210.05 L1234.08 1210.05 L1234.66 1210.05 L1235.25 1210.05 L1235.84 1210.05 L1236.42 1210.05 L1237.01 1210.05 L1237.6 1210.05 L1238.18 1210.05 L1238.77 1210.05 L1239.36 1210.05 L1239.94 1210.05 L1240.53 1210.05 L1241.11 1210.05 L1241.7 1210.05 L1242.29 1210.05 L1242.87 1210.05 L1243.46 1210.05 L1244.05 1210.05 L1244.63 1210.05 L1245.22 1210.05 L1245.81 1210.05 L1246.39 1210.05 L1246.98 1210.05 L1247.57 1210.05 L1248.15 1210.05 L1248.74 1210.05 L1249.32 1210.05 L1249.91 1210.05 L1250.5 1210.05 L1251.08 1210.05 L1251.67 1210.05 L1252.26 1210.05 L1252.84 1210.05 L1253.43 1210.05 L1254.02 1210.05 L1254.6 1210.05 L1255.19 1210.05 L1255.78 1210.05 L1256.36 1210.05 L1256.95 1210.05 L1257.53 1210.05 L1258.12 1210.05 L1258.71 1210.05 L1259.29 1210.05 L1259.88 1210.05 L1260.47 1210.05 L1261.05 1210.05 L1261.64 1210.05 L1262.23 1210.05 L1262.81 1210.05 L1263.4 1210.05 L1263.98 1210.05 L1264.57 1210.05 L1265.16 1210.05 L1265.74 1210.05 L1266.33 1210.05 L1266.92 1210.05 L1267.5 1210.05 L1268.09 1210.05 L1268.68 1210.05 L1269.26 1210.05 L1269.85 1210.05 L1270.44 1210.05 L1271.02 1210.05 L1271.61 1210.05 L1272.19 1210.05 L1272.78 1210.05 L1273.37 1210.05 L1273.95 1210.05 L1274.54 1210.05 L1275.13 1210.05 L1275.71 1210.05 L1276.3 1210.05 L1276.89 1210.05 L1277.47 1210.05 L1278.06 1210.05 L1278.65 1210.05 L1279.23 1210.05 L1279.82 1210.05 L1280.4 1210.05 L1280.99 1210.05 L1281.58 1210.05 L1282.16 1210.05 L1282.75 1210.05 L1283.34 1210.05 L1283.92 1210.05 L1284.51 1210.05 L1285.1 1210.05 L1285.68 1210.05 L1286.27 1210.05 L1286.86 1210.05 L1287.44 1210.05 L1288.03 1210.05 L1288.61 1210.05 L1289.2 1210.05 L1289.79 1210.05 L1290.37 1210.05 L1290.96 1210.05 L1291.55 1210.05 L1292.13 1210.05 L1292.72 1210.05 L1293.31 1210.05 L1293.89 1210.05 L1294.48 1210.05 L1295.06 1210.05 L1295.65 1210.05 L1296.24 1210.05 L1296.82 1210.05 L1297.41 1210.05 L1298 1210.05 L1298.58 1210.05 L1299.17 1210.05 L1299.76 1210.05 L1300.34 1210.05 L1300.93 1210.05 L1301.52 1210.05 L1302.1 1210.05 L1302.69 1210.05 L1303.27 1210.05 L1303.86 1210.05 L1304.45 1210.05 L1305.03 1210.05 L1305.62 1210.05 L1306.21 1210.05 L1306.79 1210.05 L1307.38 1210.05 L1307.97 1210.05 L1308.55 1210.05 L1309.14 1210.05 L1309.73 1210.05 L1310.31 1210.05 L1310.9 1210.05 L1311.48 1210.05 L1312.07 1210.05 L1312.66 1210.05 L1313.24 1210.05 L1313.83 1210.05 L1314.42 1210.05 L1315 1210.05 L1315.59 1210.05 L1316.18 1210.05 L1316.76 1210.05 L1317.35 1210.05 L1317.93 1210.05 L1318.52 1210.05 L1319.11 1210.05 L1319.69 1210.05 L1320.28 1210.05 L1320.87 1210.05 L1321.45 1210.05 L1322.04 1210.05 L1322.63 1210.05 L1323.21 1210.05 L1323.8 1210.05 L1324.39 1210.05 L1324.97 1210.05 L1325.56 1210.05 L1326.14 1210.05 L1326.73 1210.05 L1327.32 1210.05 L1327.9 1210.05 L1328.49 1210.05 L1329.08 1210.05 L1329.66 1210.05 L1330.25 1210.05 L1330.84 1210.05 L1331.42 1210.05 L1332.01 1210.05 L1332.6 1210.05 L1333.18 1210.05 L1333.77 1210.05 L1334.35 1210.05 L1334.94 1210.05 L1335.53 1210.05 L1336.11 1210.05 L1336.7 1210.05 L1337.29 1210.05 L1337.87 1210.05 L1338.46 1210.05 L1339.05 1210.05 L1339.63 1210.05 L1340.22 1210.05 L1340.8 1210.05 L1341.39 1210.05 L1341.98 1210.05 L1342.56 1210.05 L1343.15 1210.05 L1343.74 1210.05 L1344.32 1210.05 L1344.91 1210.05 L1345.5 1210.05 L1346.08 1210.05 L1346.67 1210.05 L1347.26 1210.05 L1347.84 1210.05 L1348.43 1210.05 L1349.01 1210.05 L1349.6 1210.05 L1350.19 1210.05 L1350.77 1210.05 L1351.36 1210.05 L1351.95 1210.05 L1352.53 1210.05 L1353.12 1210.05 L1353.71 1210.05 L1354.29 1210.05 L1354.88 1210.05 L1355.47 1210.05 L1356.05 1210.05 L1356.64 1210.05 L1357.22 1210.05 L1357.81 1210.05 L1358.4 1210.05 L1358.98 1210.05 L1359.57 1210.05 L1360.16 1210.05 L1360.74 1210.05 L1361.33 1210.05 L1361.92 1210.05 L1362.5 1210.05 L1363.09 1210.05 L1363.68 1210.05 L1364.26 1210.05 L1364.85 1210.05 L1365.43 1210.05 L1366.02 1210.05 L1366.61 1210.05 L1367.19 1210.05 L1367.78 1210.05 L1368.37 1210.05 L1368.95 1210.05 L1369.54 1210.05 L1370.13 1210.05 L1370.71 1210.05 L1371.3 1210.05 L1371.88 1210.05 L1372.47 1210.05 L1373.06 1210.05 L1373.64 1210.05 L1374.23 1210.05 L1374.82 1210.05 L1375.4 1210.05 L1375.99 1210.05 L1376.58 1210.05 L1377.16 1210.05 L1377.75 1210.05 L1378.34 1210.05 L1378.92 1210.05 L1379.51 1210.05 L1380.09 1210.05 L1380.68 1210.05 L1381.27 1210.05 L1381.85 1210.05 L1382.44 1210.05 L1383.03 1210.05 L1383.61 1210.05 L1384.2 1210.05 L1384.79 1210.05 L1385.37 1210.05 L1385.96 1210.05 L1386.55 1210.05 L1387.13 1210.05 L1387.72 1210.05 L1388.3 1210.05 L1388.89 1210.05 L1389.48 1210.05 L1390.06 1210.05 L1390.65 1210.05 L1391.24 1210.05 L1391.82 1210.05 L1392.41 1210.05 L1393 1210.05 L1393.58 1210.05 L1394.17 1210.05 L1394.75 1210.05 L1395.34 1210.05 L1395.93 1210.05 L1396.51 1210.05 L1397.1 1210.05 L1397.69 1210.05 L1398.27 1210.05 L1398.86 1210.05 L1399.45 1210.05 L1400.03 1210.05 L1400.62 1210.05 L1401.21 1210.05 L1401.79 1210.05 L1402.38 1210.05 L1402.96 1210.05 L1403.55 1210.05 L1404.14 1210.05 L1404.72 1210.05 L1405.31 1210.05 L1405.9 1210.05 L1406.48 1210.05 L1407.07 1210.05 L1407.66 1210.05 L1408.24 1210.05 L1408.83 1210.05 L1409.42 1210.05 L1410 1210.05 L1410.59 1210.05 L1411.17 1210.05 L1411.76 1210.05 L1412.35 1210.05 L1412.93 1210.05 L1413.52 1210.05 L1414.11 1210.05 L1414.69 1210.05 L1415.28 1210.05 L1415.87 1210.05 L1416.45 1210.05 L1417.04 1210.05 L1417.63 1210.05 L1418.21 1210.05 L1418.8 1210.05 L1419.38 1210.05 L1419.97 1210.05 L1420.56 1210.05 L1421.14 1210.05 L1421.73 1210.05 L1422.32 1210.05 L1422.9 1210.05 L1423.49 1210.05 L1424.08 1210.05 L1424.66 1210.05 L1425.25 1210.05 L1425.83 1210.05 L1426.42 1210.05 L1427.01 1210.05 L1427.59 1210.05 L1428.18 1210.05 L1428.77 1210.05 L1429.35 1210.05 L1429.94 1210.05 L1430.53 1210.05 L1431.11 1210.05 L1431.7 1210.05 L1432.29 1210.05 L1432.87 1210.05 L1433.46 1210.05 L1434.04 1210.05 L1434.63 1210.05 L1435.22 1210.05 L1435.8 1210.05 L1436.39 1210.05 L1436.98 1210.05 L1437.56 1210.05 L1438.15 1210.05 L1438.74 1210.05 L1439.32 1210.05 L1439.91 1210.05 L1440.5 1210.05 L1441.08 1210.05 L1441.67 1210.05 L1442.25 1210.05 L1442.84 1210.05 L1443.43 1210.05 L1444.01 1210.05 L1444.6 1210.05 L1445.19 1210.05 L1445.77 1210.05 L1446.36 1210.05 L1446.95 1210.05 L1447.53 1210.05 L1448.12 1210.05 L1448.7 1210.05 L1449.29 1210.05 L1449.88 1210.05 L1450.46 1210.05 L1451.05 1210.05 L1451.64 1210.05 L1452.22 1210.05 L1452.81 1210.05 L1453.4 1210.05 L1453.98 1210.05 L1454.57 1210.05 L1455.16 1210.05 L1455.74 1210.05 L1456.33 1210.05 L1456.91 1210.05 L1457.5 1210.05 L1458.09 1210.05 L1458.67 1210.05 L1459.26 1210.05 L1459.85 1210.05 L1460.43 1210.05 L1461.02 1210.05 L1461.61 1210.05 L1462.19 1210.05 L1462.78 1210.05 L1463.37 1210.05 L1463.95 1210.05 L1464.54 1210.05 L1465.12 1210.05 L1465.71 1210.05 L1466.3 1210.05 L1466.88 1210.05 L1467.47 1210.05 L1468.06 1210.05 L1468.64 1210.05 L1469.23 1210.05 L1469.82 1210.05 L1470.4 1210.05 L1470.99 1210.05 L1471.57 1210.05 L1472.16 1210.05 L1472.75 1210.05 L1473.33 1210.05 L1473.92 1210.05 L1474.51 1210.05 L1475.09 1210.05 L1475.68 1210.05 L1476.27 1210.05 L1476.85 1210.05 L1477.44 1210.05 L1478.03 1210.05 L1478.61 1210.05 L1479.2 1210.05 L1479.78 1210.05 L1480.37 1210.05 L1480.96 1210.05 L1481.54 1210.05 L1482.13 1210.05 L1482.72 1210.05 L1483.3 1210.05 L1483.89 1210.05 L1484.48 1210.05 L1485.06 1210.05 L1485.65 1210.05 L1486.24 1210.05 L1486.82 1210.05 L1487.41 1210.05 L1487.99 1210.05 L1488.58 1210.05 L1489.17 1210.05 L1489.75 1210.05 L1490.34 1210.05 L1490.93 1210.05 L1491.51 1210.05 L1492.1 1210.05 L1492.69 1210.05 L1493.27 1210.05 L1493.86 1210.05 L1494.45 1210.05 L1495.03 1210.05 L1495.62 1210.05 L1496.2 1210.05 L1496.79 1210.05 L1497.38 1210.05 L1497.96 1210.05 L1498.55 1210.05 L1499.14 1210.05 L1499.72 1210.05 L1500.31 1210.05 L1500.9 1210.05 L1501.48 1210.05 L1502.07 1210.05 L1502.65 1210.05 L1503.24 1210.05 L1503.83 1210.05 L1504.41 1210.05 L1505 1210.05 L1505.59 1210.05 L1506.17 1210.05 L1506.76 1210.05 L1507.35 1210.05 L1507.93 1210.05 L1508.52 1210.05 L1509.11 1210.05 L1509.69 1210.05 L1510.28 1210.05 L1510.86 1210.05 L1511.45 1210.05 L1512.04 1210.05 L1512.62 1210.05 L1513.21 1210.05 L1513.8 1210.05 L1514.38 1210.05 L1514.97 1210.05 L1515.56 1210.05 L1516.14 1210.05 L1516.73 1210.05 L1517.32 1210.05 L1517.9 1210.05 L1518.49 1210.05 L1519.07 1210.05 L1519.66 1210.05 L1520.25 1210.05 L1520.83 1210.05 L1521.42 1210.05 L1522.01 1210.05 L1522.59 1210.05 L1523.18 1210.05 L1523.77 1210.05 L1524.35 1210.05 L1524.94 1210.05 L1525.52 1210.05 L1526.11 1210.05 L1526.7 1210.05 L1527.28 1210.05 L1527.87 1210.05 L1528.46 1210.05 L1529.04 1210.05 L1529.63 1210.05 L1530.22 1210.05 L1530.8 1210.05 L1531.39 1210.05 L1531.98 1210.05 L1532.56 1210.05 L1533.15 1210.05 L1533.73 1210.05 L1534.32 1210.05 L1534.91 1210.05 L1535.49 1210.05 L1536.08 1210.05 L1536.67 1210.05 L1537.25 1210.05 L1537.84 1210.05 L1538.43 1210.05 L1539.01 1210.05 L1539.6 1210.05 L1540.19 1210.05 L1540.77 1210.05 L1541.36 1210.05 L1541.94 1210.05 L1542.53 1210.05 L1543.12 1210.05 L1543.7 1210.05 L1544.29 1210.05 L1544.88 1210.05 L1545.46 1210.05 L1546.05 1210.05 L1546.64 1210.05 L1547.22 1210.05 L1547.81 1210.05 L1548.4 1210.05 L1548.98 1210.05 L1549.57 1210.05 L1550.15 1210.05 L1550.74 1210.05 L1551.33 1210.05 L1551.91 1210.05 L1552.5 1210.05 L1553.09 1210.05 L1553.67 1210.05 L1554.26 1210.05 L1554.85 1210.05 L1555.43 1210.05 L1556.02 1210.05 L1556.6 1210.05 L1557.19 1210.05 L1557.78 1210.05 L1558.36 1210.05 L1558.95 1210.05 L1559.54 1210.05 L1560.12 1210.05 L1560.71 1210.05 L1561.3 1210.05 L1561.88 1210.05 L1562.47 1210.05 L1563.06 1210.05 L1563.64 1210.05 L1564.23 1210.05 L1564.81 1210.05 L1565.4 1210.05 L1565.99 1210.05 L1566.57 1210.05 L1567.16 1210.05 L1567.75 1210.05 L1568.33 1210.05 L1568.92 1210.05 L1569.51 1210.05 L1570.09 1210.05 L1570.68 1210.05 L1571.27 1210.05 L1571.85 1210.05 L1572.44 1210.05 L1573.02 1210.05 L1573.61 1210.05 L1574.2 1210.05 L1574.78 1210.05 L1575.37 1210.05 L1575.96 1210.05 L1576.54 1210.05 L1577.13 1210.05 L1577.72 1210.05 L1578.3 1210.05 L1578.89 1210.05 L1579.47 1210.05 L1580.06 1210.05 L1580.65 1210.05 L1581.23 1210.05 L1581.82 1210.05 L1582.41 1210.05 L1582.99 1210.05 L1583.58 1210.05 L1584.17 1210.05 L1584.75 1210.05 L1585.34 1210.05 L1585.93 1210.05 L1586.51 1210.05 L1587.1 1210.05 L1587.68 1210.05 L1588.27 1210.05 L1588.86 1210.05 L1589.44 1210.05 L1590.03 1210.05 L1590.62 1210.05 L1591.2 1210.05 L1591.79 1210.05 L1592.38 1210.05 L1592.96 1210.05 L1593.55 1210.05 L1594.14 1210.05 L1594.72 1210.05 L1595.31 1210.05 L1595.89 1210.05 L1596.48 1210.05 L1597.07 1210.05 L1597.65 1210.05 L1598.24 1210.05 L1598.83 1210.05 L1599.41 1210.05 L1600 1210.05 L1600.59 1210.05 L1601.17 1210.05 L1601.76 1210.05 L1602.34 1210.05 L1602.93 1210.05 L1603.52 1210.05 L1604.1 1210.05 L1604.69 1210.05 L1605.28 1210.05 L1605.86 1210.05 L1606.45 1210.05 L1607.04 1210.05 L1607.62 1210.05 L1608.21 1210.05 L1608.8 1210.05 L1609.38 1210.05 L1609.97 1210.05 L1610.55 1210.05 L1611.14 1210.05 L1611.73 1210.05 L1612.31 1210.05 L1612.9 1210.05 L1613.49 1210.05 L1614.07 1210.05 L1614.66 1210.05 L1615.25 1210.05 L1615.83 1210.05 L1616.42 1210.05 L1617.01 1210.05 L1617.59 1210.05 L1618.18 1210.05 L1618.76 1210.05 L1619.35 1210.05 L1619.94 1210.05 L1620.52 1210.05 L1621.11 1210.05 L1621.7 1210.05 L1622.28 1210.05 L1622.87 1210.05 L1623.46 1210.05 L1624.04 1210.05 L1624.63 1210.05 L1625.22 1210.05 L1625.8 1210.05 L1626.39 1210.05 L1626.97 1210.05 L1627.56 1210.05 L1628.15 1210.05 L1628.73 1210.05 L1629.32 1210.05 L1629.91 1210.05 L1630.49 1210.05 L1631.08 1210.05 L1631.67 1210.05 L1632.25 1210.05 L1632.84 1210.05 L1633.42 1210.05 L1634.01 1210.05 L1634.6 1210.05 L1635.18 1210.05 L1635.77 1210.05 L1636.36 1210.05 L1636.94 1210.05 L1637.53 1210.05 L1638.12 1210.05 L1638.7 1210.05 L1639.29 1210.05 L1639.88 1210.05 L1640.46 1210.05 L1641.05 1210.05 L1641.63 1210.05 L1642.22 1210.05 L1642.81 1210.05 L1643.39 1210.05 L1643.98 1210.05 L1644.57 1210.05 L1645.15 1210.05 L1645.74 1210.05 L1646.33 1210.05 L1646.91 1210.05 L1647.5 1210.05 L1648.09 1210.05 L1648.67 1210.05 L1649.26 1210.05 L1649.84 1210.05 L1650.43 1210.05 L1651.02 1210.05 L1651.6 1210.05 L1652.19 1210.05 L1652.78 1210.05 L1653.36 1210.05 L1653.95 1210.05 L1654.54 1210.05 L1655.12 1210.05 L1655.71 1210.05 L1656.29 1210.05 L1656.88 1210.05 L1657.47 1210.05 L1658.05 1210.05 L1658.64 1210.05 L1659.23 1210.05 L1659.81 1210.05 L1660.4 1210.05 L1660.99 1210.05 L1661.57 1210.05 L1662.16 1210.05 L1662.75 1210.05 L1663.33 1210.05 L1663.92 1210.05 L1664.5 1210.05 L1665.09 1210.05 L1665.68 1210.05 L1666.26 1210.05 L1666.85 1210.05 L1667.44 1210.05 L1668.02 1210.05 L1668.61 1210.05 L1669.2 1210.05 L1669.78 1210.05 L1670.37 1210.05 L1670.96 1210.05 L1671.54 1210.05 L1672.13 1210.05 L1672.71 1210.05 L1673.3 1210.05 L1673.89 1210.05 L1674.47 1210.05 L1675.06 1210.05 L1675.65 1210.05 L1676.23 1210.05 L1676.82 1210.05 L1677.41 1210.05 L1677.99 1210.05 L1678.58 1210.05 L1679.17 1210.05 L1679.75 1210.05 L1680.34 1210.05 L1680.92 1210.05 L1681.51 1210.05 L1682.1 1210.05 L1682.68 1210.05 L1683.27 1210.05 L1683.86 1210.05 L1684.44 1210.05 L1685.03 1210.05 L1685.62 1210.05 L1686.2 1210.05 L1686.79 1210.05 L1687.37 1210.05 L1687.96 1210.05 L1688.55 1210.05 L1689.13 1210.05 L1689.72 1210.05 L1690.31 1210.05 L1690.89 1210.05 L1691.48 1210.05 L1692.07 1210.05 L1692.65 1210.05 L1693.24 1210.05 L1693.83 1210.05 L1694.41 1210.05 L1695 1210.05 L1695.58 1210.05 L1696.17 1210.05 L1696.76 1210.05 L1697.34 1210.05 L1697.93 1210.05 L1698.52 1210.05 L1699.1 1210.05 L1699.69 1210.05 L1700.28 1210.05 L1700.86 1210.05 L1701.45 1210.05 L1702.04 1210.05 L1702.62 1210.05 L1703.21 1210.05 L1703.79 1210.05 L1704.38 1210.05 L1704.97 1210.05 L1705.55 1210.05 L1706.14 1210.05 L1706.73 1210.05 L1707.31 1210.05 L1707.9 1210.05 L1708.49 1210.05 L1709.07 1210.05 L1709.66 1210.05 L1710.24 1210.05 L1710.83 1210.05 L1711.42 1210.05 L1712 1210.05 L1712.59 1210.05 L1713.18 1210.05 L1713.76 1210.05 L1714.35 1210.05 L1714.94 1210.05 L1715.52 1210.05 L1716.11 1210.05 L1716.7 1210.05 L1717.28 1210.05 L1717.87 1210.05 L1718.45 1210.05 L1719.04 1210.05 L1719.63 1210.05 L1720.21 1210.05 L1720.8 1210.05 L1721.39 1210.05 L1721.97 1210.05 L1722.56 1210.05 L1723.15 1210.05 L1723.73 1210.05 L1724.32 1210.05 L1724.91 1210.05 L1725.49 1210.05 L1726.08 1210.05 L1726.66 1210.05 L1727.25 1210.05 L1727.84 1210.05 L1728.42 1210.05 L1729.01 1210.05 L1729.6 1210.05 L1730.18 1210.05 L1730.77 1210.05 L1731.36 1210.05 L1731.94 1210.05 L1732.53 1210.05 L1733.11 1210.05 L1733.7 1210.05 L1734.29 1210.05 L1734.87 1210.05 L1735.46 1210.05 L1736.05 1210.05 L1736.63 1210.05 L1737.22 1210.05 L1737.81 1210.05 L1738.39 1210.05 L1738.98 1210.05 L1739.57 1210.05 L1740.15 1210.05 L1740.74 1210.05 L1741.32 1210.05 L1741.91 1210.05 L1742.5 1210.05 L1743.08 1210.05 L1743.67 1210.05 L1744.26 1210.05 L1744.84 1210.05 L1745.43 1210.05 L1746.02 1210.05 L1746.6 1210.05 L1747.19 1210.05 L1747.78 1210.05 L1748.36 1210.05 L1748.95 1210.05 L1749.53 1210.05 L1750.12 1210.05 L1750.71 1210.05 L1751.29 1210.05 L1751.88 1210.05 L1752.47 1210.05 L1753.05 1210.05 L1753.64 1210.05 L1754.23 1210.05 L1754.81 1210.05 L1755.4 1210.05 L1755.99 1210.05 L1756.57 1210.05 L1757.16 1210.05 L1757.74 1210.05 L1758.33 1210.05 L1758.92 1210.05 L1759.5 1210.05 L1760.09 1210.05 L1760.68 1210.05 L1761.26 1210.05 L1761.85 1210.05 L1762.44 1210.05 L1763.02 1210.05 L1763.61 1210.05 L1764.19 1210.05 L1764.78 1210.05 L1765.37 1210.05 L1765.95 1210.05 L1766.54 1210.05 L1767.13 1210.05 L1767.71 1210.05 L1768.3 1210.05 L1768.89 1210.05 L1769.47 1210.05 L1770.06 1210.05 L1770.65 1210.05 L1771.23 1210.05 L1771.82 1210.05 L1772.4 1210.05 L1772.99 1210.05 L1773.58 1210.05 L1774.16 1210.05 L1774.75 1210.05 L1775.34 1210.05 L1775.92 1210.05 L1776.51 1210.05 L1777.1 1210.05 L1777.68 1210.05 L1778.27 1210.05 L1778.86 1210.05 L1779.44 1210.05 L1780.03 1210.05 L1780.61 1210.05 L1781.2 1210.05 L1781.79 1210.05 L1782.37 1210.05 L1782.96 1210.05 L1783.55 1210.05 L1784.13 1210.05 L1784.72 1210.05 L1785.31 1210.05 L1785.89 1210.05 L1786.48 1210.05 L1787.06 1210.05 L1787.65 1210.05 L1788.24 1210.05 L1788.82 1210.05 L1789.41 1210.05 L1790 1210.05 L1790.58 1210.05 L1791.17 1210.05 L1791.76 1210.05 L1792.34 1210.05 L1792.93 1210.05 L1793.52 1210.05 L1794.1 1210.05 L1794.69 1210.05 L1795.27 1210.05 L1795.86 1210.05 L1796.45 1210.05 L1797.03 1210.05 L1797.62 1210.05 L1798.21 1210.05 L1798.79 1210.05 L1799.38 1210.05 L1799.97 1210.05 L1800.55 1210.05 L1801.14 1210.05 L1801.73 1210.05 L1802.31 1210.05 L1802.9 1210.05 L1803.48 1210.05 L1804.07 1210.05 L1804.66 1210.05 L1805.24 1210.05 L1805.83 1210.05 L1806.42 1210.05 L1807 1210.05 L1807.59 1210.05 L1808.18 1210.05 L1808.76 1210.05 L1809.35 1210.05 L1809.94 1210.05 L1810.52 1210.05 L1811.11 1210.05 L1811.69 1210.05 L1812.28 1210.05 L1812.87 1210.05 L1813.45 1210.05 L1814.04 1210.05 L1814.63 1210.05 L1815.21 1210.05 L1815.8 1210.05 L1816.39 1210.05 L1816.97 1210.05 L1817.56 1210.05 L1818.14 1210.05 L1818.73 1210.05 L1819.32 1210.05 L1819.9 1210.05 L1820.49 1210.05 L1821.08 1210.05 L1821.66 1210.05 L1822.25 1210.05 L1822.84 1210.05 L1823.42 1210.05 L1824.01 1210.05 L1824.6 1210.05 L1825.18 1210.05 L1825.77 1210.05 L1826.35 1210.05 L1826.94 1210.05 L1827.53 1210.05 L1828.11 1210.05 L1828.7 1210.05 L1829.29 1210.05 L1829.87 1210.05 L1830.46 1210.05 L1831.05 1210.05 L1831.63 1210.05 L1832.22 1210.05 L1832.81 1210.05 L1833.39 1210.05 L1833.98 1210.05 L1834.56 1210.05 L1835.15 1210.05 L1835.74 1210.05 L1836.32 1210.05 L1836.91 1210.05 L1837.5 1210.05 L1838.08 1210.05 L1838.67 1210.05 L1839.26 1210.05 L1839.84 1210.05 L1840.43 1210.05 L1841.01 1210.05 L1841.6 1210.05 L1842.19 1210.05 L1842.77 1210.05 L1843.36 1210.05 L1843.95 1210.05 L1844.53 1210.05 L1845.12 1210.05 L1845.71 1210.05 L1846.29 1210.05 L1846.88 1210.05 L1847.47 1210.05 L1848.05 1210.05 L1848.64 1210.05 L1849.22 1210.05 L1849.81 1210.05 L1850.4 1210.05 L1850.98 1210.05 L1851.57 1210.05 L1852.16 1210.05 L1852.74 1210.05 L1853.33 1210.05 L1853.92 1210.05 L1854.5 1210.05 L1855.09 1210.05 L1855.68 1210.05 L1856.26 1210.05 L1856.85 1210.05 L1857.43 1210.05 L1858.02 1210.05 L1858.61 1210.05 L1859.19 1210.05 L1859.78 1210.05 L1860.37 1210.05 L1860.95 1210.05 L1861.54 1210.05 L1862.13 1210.05 L1862.71 1210.05 L1863.3 1210.05 L1863.88 1210.05 L1864.47 1210.05 L1865.06 1210.05 L1865.64 1210.05 L1866.23 1210.05 L1866.82 1210.05 L1867.4 1210.05 L1867.99 1210.05 L1868.58 1210.05 L1869.16 1210.05 L1869.75 1210.05 L1870.34 1210.05 L1870.92 1210.05 L1871.51 1210.05 L1872.09 1210.05 L1872.68 1210.05 L1873.27 1210.05 L1873.85 1210.05 L1874.44 1210.05 L1875.03 1210.05 L1875.61 1210.05 L1876.2 1210.05 L1876.79 1210.05 L1877.37 1210.05 L1877.96 1210.05 L1878.55 1210.05 L1879.13 1210.05 L1879.72 1210.05 L1880.3 1210.05 L1880.89 1210.05 L1881.48 1210.05 L1882.06 1210.05 L1882.65 1210.05 L1883.24 1210.05 L1883.82 1210.05 L1884.41 1210.05 L1885 1210.05 L1885.58 1210.05 L1886.17 1210.05 L1886.76 1210.05 L1887.34 1210.05 L1887.93 1210.05 L1888.51 1210.05 L1889.1 1210.05 L1889.69 1210.05 L1890.27 1210.05 L1890.86 1210.05 L1891.45 1210.05 L1892.03 1210.05 L1892.62 1210.05 L1893.21 1210.05 L1893.79 1210.05 L1894.38 1210.05 L1894.96 1210.05 L1895.55 1210.05 L1896.14 1210.05 L1896.72 1210.05 L1897.31 1210.05 L1897.9 1210.05 L1898.48 1210.05 L1899.07 1210.05 L1899.66 1210.05 L1900.24 1210.05 L1900.83 1210.05 L1901.42 1210.05 L1902 1210.05 L1902.59 1210.05 L1903.17 1210.05 L1903.76 1210.05 L1904.35 1210.05 L1904.93 1210.05 L1905.52 1210.05 L1906.11 1210.05 L1906.69 1210.05 L1907.28 1210.05 L1907.87 1210.05 L1908.45 1210.05 L1909.04 1210.05 L1909.63 1210.05 L1910.21 1210.05 L1910.8 1210.05 L1911.38 1210.05 L1911.97 1210.05 L1912.56 1210.05 L1913.14 1210.05 L1913.73 1210.05 L1914.32 1210.05 L1914.9 1210.05 L1915.49 1210.05 L1916.08 1210.05 L1916.66 1210.05 L1917.25 1210.05 L1917.83 1210.05 L1918.42 1210.05 L1919.01 1210.05 L1919.59 1210.05 L1920.18 1210.05 L1920.77 1210.05 L1921.35 1210.05 L1921.94 1210.05 L1922.53 1210.05 L1923.11 1210.05 L1923.7 1210.05 L1924.29 1210.05 L1924.87 1210.05 L1925.46 1210.05 L1926.04 1210.05 L1926.63 1210.05 L1927.22 1210.05 L1927.8 1210.05 L1928.39 1210.05 L1928.98 1210.05 L1929.56 1210.05 L1930.15 1210.05 L1930.74 1210.05 L1931.32 1210.05 L1931.91 1210.05 L1932.5 1210.05 L1933.08 1210.05 L1933.67 1210.05 L1934.25 1210.05 L1934.84 1210.05 L1935.43 1210.05 L1936.01 1210.05 L1936.6 1210.05 L1937.19 1210.05 L1937.77 1210.05 L1938.36 1210.05 L1938.95 1210.05 L1939.53 1210.05 L1940.12 1210.05 L1940.71 1210.05 L1941.29 1210.05 L1941.88 1210.05 L1942.46 1210.05 L1943.05 1210.05 L1943.64 1210.05 L1944.22 1210.05 L1944.81 1210.05 L1945.4 1210.05 L1945.98 1210.05 L1946.57 1210.05 L1947.16 1210.05 L1947.74 1210.05 L1948.33 1210.05 L1948.91 1210.05 L1949.5 1210.05 L1950.09 1210.05 L1950.67 1210.05 L1951.26 1210.05 L1951.85 1210.05 L1952.43 1210.05 L1953.02 1210.05 L1953.61 1210.05 L1954.19 1210.05 L1954.78 1210.05 L1955.37 1210.05 L1955.95 1210.05 L1956.54 1210.05 L1957.12 1210.05 L1957.71 1210.05 L1958.3 1210.05 L1958.88 1210.05 L1959.47 1210.05 L1960.06 1210.05 L1960.64 1210.05 L1961.23 1210.05 L1961.82 1210.05 L1962.4 1210.05 L1962.99 1210.05 L1963.58 1210.05 L1964.16 1210.05 L1964.75 1210.05 L1965.33 1210.05 L1965.92 1210.05 L1966.51 1210.05 L1967.09 1210.05 L1967.68 1210.05 L1968.27 1210.05 L1968.85 1210.05 L1969.44 1210.05 L1970.03 1210.05 L1970.61 1210.05 L1971.2 1210.05 L1971.78 1210.05 L1972.37 1210.05 L1972.96 1210.05 L1973.54 1210.05 L1974.13 1210.05 L1974.72 1210.05 L1975.3 1210.05 L1975.89 1210.05 L1976.48 1210.05 L1977.06 1210.05 L1977.65 1210.05 L1978.24 1210.05 L1978.82 1210.05 L1979.41 1210.05 L1979.99 1210.05 L1980.58 1210.05 L1981.17 1210.05 L1981.75 1210.05 L1982.34 1210.05 L1982.93 1210.05 L1983.51 1210.05 L1984.1 1210.05 L1984.69 1210.05 L1985.27 1210.05 L1985.86 1210.05 L1986.45 1210.05 L1987.03 1210.05 L1987.62 1210.05 L1988.2 1210.05 L1988.79 1210.05 L1989.38 1210.05 L1989.96 1210.05 L1990.55 1210.05 L1991.14 1210.05 L1991.72 1210.05 L1992.31 1210.05 L1992.9 1210.05 L1993.48 1210.05 L1994.07 1210.05 L1994.65 1210.05 L1995.24 1210.05 L1995.83 1210.05 L1996.41 1210.05 L1997 1210.05 L1997.59 1210.05 L1998.17 1210.05 L1998.76 1210.05 L1999.35 1210.05 L1999.93 1210.05 L2000.52 1210.05 L2001.11 1210.05 L2001.69 1210.05 L2002.28 1210.05 L2002.86 1210.05 L2003.45 1210.05 L2004.04 1210.05 L2004.62 1210.05 L2005.21 1210.05 L2005.8 1210.05 L2006.38 1210.05 L2006.97 1210.05 L2007.56 1210.05 L2008.14 1210.05 L2008.73 1210.05 L2009.32 1210.05 L2009.9 1210.05 L2010.49 1210.05 L2011.07 1210.05 L2011.66 1210.05 L2012.25 1210.05 L2012.83 1210.05 L2013.42 1210.05 L2014.01 1210.05 L2014.59 1210.05 L2015.18 1210.05 L2015.77 1210.05 L2016.35 1210.05 L2016.94 1210.05 L2017.53 1210.05 L2018.11 1210.05 L2018.7 1210.05 L2019.28 1210.05 L2019.87 1210.05 L2020.46 1210.05 L2021.04 1210.05 L2021.63 1210.05 L2022.22 1210.05 L2022.8 1210.05 L2023.39 1210.05 L2023.98 1210.05 L2024.56 1210.05 L2025.15 1210.05 L2025.73 1210.05 L2026.32 1210.05 L2026.91 1210.05 L2027.49 1210.05 L2028.08 1210.05 L2028.67 1210.05 L2029.25 1210.05 L2029.84 1210.05 L2030.43 1210.05 L2031.01 1210.05 L2031.6 1210.05 L2032.19 1210.05 L2032.77 1210.05 L2033.36 1210.05 L2033.94 1210.05 L2034.53 1210.05 L2035.12 1210.05 L2035.7 1210.05 L2036.29 1210.05 L2036.88 1210.05 L2037.46 1210.05 L2038.05 1210.05 L2038.64 1210.05 L2039.22 1210.05 L2039.81 1210.05 L2040.4 1210.05 L2040.98 1210.05 L2041.57 1210.05 L2042.15 1210.05 L2042.74 1210.05 L2043.33 1210.05 L2043.91 1210.05 L2044.5 1210.05 L2045.09 1210.05 L2045.67 1210.05 L2046.26 1210.05 L2046.85 1210.05 L2047.43 1210.05 L2048.02 1210.05 L2048.6 1210.05 L2049.19 1210.05 L2049.78 1210.05 L2050.36 1210.05 L2050.95 1210.05 L2051.54 1210.05 L2052.12 1210.05 L2052.71 1210.05 L2053.3 1210.05 L2053.88 1210.05 L2054.47 1210.05 L2055.06 1210.05 L2055.64 1210.05 L2056.23 1210.05 L2056.81 1210.05 L2057.4 1210.05 L2057.99 1210.05 L2058.57 1210.05 L2059.16 1210.05 L2059.75 1210.05 L2060.33 1210.05 L2060.92 1210.05 L2061.51 1210.05 L2062.09 1210.05 L2062.68 1210.05 L2063.27 1210.05 L2063.85 1210.05 L2064.44 1210.05 L2065.02 1210.05 L2065.61 1210.05 L2066.2 1210.05 L2066.78 1210.05 L2067.37 1210.05 L2067.96 1210.05 L2068.54 1210.05 L2069.13 1210.05 L2069.72 1210.05 L2070.3 1210.05 L2070.89 1210.05 L2071.48 1210.05 L2072.06 1210.05 L2072.65 1210.05 L2073.23 1210.05 L2073.82 1210.05 L2074.41 1210.05 L2074.99 1210.05 L2075.58 1210.05 L2076.17 1210.05 L2076.75 1210.05 L2077.34 1210.05 L2077.93 1210.05 L2078.51 1210.05 L2079.1 1210.05 L2079.68 1210.05 L2080.27 1210.05 L2080.86 1210.05 L2081.44 1210.05 L2082.03 1210.05 L2082.62 1210.05 L2083.2 1210.05 L2083.79 1210.05 L2084.38 1210.05 L2084.96 1210.05 L2085.55 1210.05 L2086.14 1210.05 L2086.72 1210.05 L2087.31 1210.05 L2087.89 1210.05 L2088.48 1210.05 L2089.07 1210.05 L2089.65 1210.05 L2090.24 1210.05 L2090.83 1210.05 L2091.41 1210.05 L2092 1210.05 L2092.59 1210.05 L2093.17 1210.05 L2093.76 1210.05 L2094.35 1210.05 L2094.93 1210.05 L2095.52 1210.05 L2096.1 1210.05 L2096.69 1210.05 L2097.28 1210.05 L2097.86 1210.05 L2098.45 1210.05 L2099.04 1210.05 L2099.62 1210.05 L2100.21 1210.05 L2100.8 1210.05 L2101.38 1210.05 L2101.97 1210.05 L2102.55 1210.05 L2103.14 1210.05 L2103.73 1210.05 L2104.31 1210.05 L2104.9 1210.05 L2105.49 1210.05 L2106.07 1210.05 L2106.66 1210.05 L2107.25 1210.05 L2107.83 1210.05 L2108.42 1210.05 L2109.01 1210.05 L2109.59 1210.05 L2110.18 1210.05 L2110.76 1210.05 L2111.35 1210.05 L2111.94 1210.05 L2112.52 1210.05 L2113.11 1210.05 L2113.7 1210.05 L2114.28 1210.05 L2114.87 1210.05 L2115.46 1210.05 L2116.04 1210.05 L2116.63 1210.05 L2117.22 1210.05 L2117.8 1210.05 L2118.39 1210.05 L2118.97 1210.05 L2119.56 1210.05 L2120.15 1210.05 L2120.73 1210.05 L2121.32 1210.05 L2121.91 1210.05 L2122.49 1210.05 L2123.08 1210.05 L2123.67 1210.05 L2124.25 1210.05 L2124.84 1210.05 L2125.42 1210.05 L2126.01 1210.05 L2126.6 1210.05 L2127.18 1210.05 L2127.77 1210.05 L2128.36 1210.05 L2128.94 1210.05 L2129.53 1210.05 L2130.12 1210.05 L2130.7 1210.05 L2131.29 1210.05 L2131.88 1210.05 L2132.46 1210.05 L2133.05 1210.05 L2133.63 1210.05 L2134.22 1210.05 L2134.81 1210.05 L2135.39 1210.05 L2135.98 1210.05 L2136.57 1210.05 L2137.15 1210.05 L2137.74 1210.05 L2138.33 1210.05 L2138.91 1210.05 L2139.5 1210.05 L2140.09 1210.05 L2140.67 1210.05 L2141.26 1210.05 L2141.84 1210.05 L2142.43 1210.05 L2143.02 1210.05 L2143.6 1210.05 L2144.19 1210.05 L2144.78 1210.05 L2145.36 1210.05 L2145.95 1210.05 L2146.54 1210.05 L2147.12 1210.05 L2147.71 1210.05 L2148.3 1210.05 L2148.88 1210.05 L2149.47 1210.05 L2150.05 1210.05 L2150.64 1210.05 L2151.23 1210.05 L2151.81 1210.05 L2152.4 1210.05 L2152.99 1210.05 L2153.57 1210.05 L2154.16 1210.05 L2154.75 1210.05 L2155.33 1210.05 L2155.92 1210.05 L2156.5 1210.05 L2157.09 1210.05 L2157.68 1210.05 L2158.26 1210.05 L2158.26 1209.41 L2157.68 1209.41 L2157.09 1209.41 L2156.5 1209.41 L2155.92 1209.41 L2155.33 1209.41 L2154.75 1209.41 L2154.16 1209.41 L2153.57 1209.41 L2152.99 1209.41 L2152.4 1209.41 L2151.81 1209.41 L2151.23 1209.41 L2150.64 1209.41 L2150.05 1209.41 L2149.47 1209.41 L2148.88 1209.41 L2148.3 1209.41 L2147.71 1209.41 L2147.12 1209.41 L2146.54 1209.41 L2145.95 1209.41 L2145.36 1209.41 L2144.78 1209.41 L2144.19 1209.41 L2143.6 1209.41 L2143.02 1209.41 L2142.43 1209.41 L2141.84 1209.41 L2141.26 1209.41 L2140.67 1209.41 L2140.09 1209.41 L2139.5 1209.41 L2138.91 1209.41 L2138.33 1209.41 L2137.74 1209.41 L2137.15 1209.41 L2136.57 1209.41 L2135.98 1209.41 L2135.39 1209.41 L2134.81 1209.41 L2134.22 1209.41 L2133.63 1209.41 L2133.05 1209.41 L2132.46 1209.41 L2131.88 1209.41 L2131.29 1209.41 L2130.7 1209.41 L2130.12 1209.41 L2129.53 1209.41 L2128.94 1209.41 L2128.36 1209.41 L2127.77 1209.41 L2127.18 1209.41 L2126.6 1209.41 L2126.01 1209.41 L2125.42 1209.41 L2124.84 1209.41 L2124.25 1209.41 L2123.67 1209.41 L2123.08 1209.41 L2122.49 1209.41 L2121.91 1209.41 L2121.32 1209.41 L2120.73 1209.41 L2120.15 1209.41 L2119.56 1209.41 L2118.97 1209.41 L2118.39 1209.41 L2117.8 1209.41 L2117.22 1209.41 L2116.63 1209.41 L2116.04 1209.41 L2115.46 1209.41 L2114.87 1209.41 L2114.28 1209.41 L2113.7 1209.41 L2113.11 1209.41 L2112.52 1209.41 L2111.94 1209.41 L2111.35 1209.41 L2110.76 1209.41 L2110.18 1209.41 L2109.59 1209.41 L2109.01 1209.41 L2108.42 1209.41 L2107.83 1209.41 L2107.25 1209.41 L2106.66 1209.41 L2106.07 1209.41 L2105.49 1209.41 L2104.9 1209.41 L2104.31 1209.41 L2103.73 1209.41 L2103.14 1209.41 L2102.55 1209.41 L2101.97 1209.41 L2101.38 1209.41 L2100.8 1209.41 L2100.21 1209.41 L2099.62 1209.41 L2099.04 1209.41 L2098.45 1209.41 L2097.86 1209.41 L2097.28 1209.41 L2096.69 1209.41 L2096.1 1209.41 L2095.52 1209.41 L2094.93 1209.41 L2094.35 1209.41 L2093.76 1209.41 L2093.17 1209.41 L2092.59 1209.41 L2092 1209.41 L2091.41 1209.41 L2090.83 1209.41 L2090.24 1209.41 L2089.65 1209.41 L2089.07 1209.41 L2088.48 1209.41 L2087.89 1209.41 L2087.31 1209.41 L2086.72 1209.41 L2086.14 1209.41 L2085.55 1209.41 L2084.96 1209.41 L2084.38 1209.41 L2083.79 1209.41 L2083.2 1209.41 L2082.62 1209.41 L2082.03 1209.41 L2081.44 1209.41 L2080.86 1209.41 L2080.27 1209.41 L2079.68 1209.41 L2079.1 1209.41 L2078.51 1209.41 L2077.93 1209.41 L2077.34 1209.41 L2076.75 1209.41 L2076.17 1209.41 L2075.58 1209.41 L2074.99 1209.41 L2074.41 1209.41 L2073.82 1209.41 L2073.23 1209.41 L2072.65 1209.41 L2072.06 1209.41 L2071.48 1209.41 L2070.89 1209.41 L2070.3 1209.41 L2069.72 1209.41 L2069.13 1209.41 L2068.54 1209.41 L2067.96 1209.41 L2067.37 1209.41 L2066.78 1209.41 L2066.2 1209.41 L2065.61 1209.41 L2065.02 1209.41 L2064.44 1209.41 L2063.85 1209.41 L2063.27 1209.41 L2062.68 1209.41 L2062.09 1209.41 L2061.51 1209.41 L2060.92 1209.41 L2060.33 1209.41 L2059.75 1209.41 L2059.16 1209.41 L2058.57 1209.41 L2057.99 1209.41 L2057.4 1209.41 L2056.81 1209.41 L2056.23 1209.41 L2055.64 1209.41 L2055.06 1209.41 L2054.47 1209.41 L2053.88 1209.41 L2053.3 1209.41 L2052.71 1209.41 L2052.12 1209.41 L2051.54 1209.41 L2050.95 1209.41 L2050.36 1209.41 L2049.78 1209.41 L2049.19 1209.41 L2048.6 1209.41 L2048.02 1209.41 L2047.43 1209.41 L2046.85 1209.41 L2046.26 1209.41 L2045.67 1209.41 L2045.09 1209.41 L2044.5 1209.41 L2043.91 1209.41 L2043.33 1209.41 L2042.74 1209.41 L2042.15 1209.41 L2041.57 1209.41 L2040.98 1209.41 L2040.4 1209.41 L2039.81 1209.41 L2039.22 1209.41 L2038.64 1209.41 L2038.05 1209.41 L2037.46 1209.41 L2036.88 1209.41 L2036.29 1209.41 L2035.7 1209.41 L2035.12 1209.41 L2034.53 1209.41 L2033.94 1209.41 L2033.36 1209.41 L2032.77 1209.41 L2032.19 1209.41 L2031.6 1209.41 L2031.01 1209.41 L2030.43 1209.41 L2029.84 1209.41 L2029.25 1209.41 L2028.67 1209.41 L2028.08 1209.41 L2027.49 1209.41 L2026.91 1209.41 L2026.32 1209.41 L2025.73 1209.41 L2025.15 1209.41 L2024.56 1209.41 L2023.98 1209.41 L2023.39 1209.41 L2022.8 1209.41 L2022.22 1209.41 L2021.63 1209.41 L2021.04 1209.41 L2020.46 1209.41 L2019.87 1209.41 L2019.28 1209.41 L2018.7 1209.41 L2018.11 1209.41 L2017.53 1209.41 L2016.94 1209.41 L2016.35 1209.41 L2015.77 1209.41 L2015.18 1209.41 L2014.59 1209.41 L2014.01 1209.41 L2013.42 1209.41 L2012.83 1209.41 L2012.25 1209.41 L2011.66 1209.41 L2011.07 1209.41 L2010.49 1209.41 L2009.9 1209.41 L2009.32 1209.41 L2008.73 1209.41 L2008.14 1209.41 L2007.56 1209.41 L2006.97 1209.41 L2006.38 1209.41 L2005.8 1209.41 L2005.21 1209.41 L2004.62 1209.41 L2004.04 1209.41 L2003.45 1209.41 L2002.86 1209.41 L2002.28 1209.41 L2001.69 1209.41 L2001.11 1209.41 L2000.52 1209.41 L1999.93 1209.41 L1999.35 1209.41 L1998.76 1209.41 L1998.17 1209.41 L1997.59 1209.41 L1997 1209.41 L1996.41 1209.41 L1995.83 1209.41 L1995.24 1209.41 L1994.65 1209.41 L1994.07 1209.41 L1993.48 1209.41 L1992.9 1209.41 L1992.31 1209.41 L1991.72 1209.41 L1991.14 1209.41 L1990.55 1209.41 L1989.96 1209.41 L1989.38 1209.41 L1988.79 1209.41 L1988.2 1209.41 L1987.62 1209.41 L1987.03 1209.41 L1986.45 1209.41 L1985.86 1209.41 L1985.27 1209.41 L1984.69 1209.41 L1984.1 1209.41 L1983.51 1209.41 L1982.93 1209.41 L1982.34 1209.41 L1981.75 1209.41 L1981.17 1209.41 L1980.58 1209.41 L1979.99 1209.41 L1979.41 1209.41 L1978.82 1209.41 L1978.24 1209.41 L1977.65 1209.41 L1977.06 1209.41 L1976.48 1209.41 L1975.89 1209.41 L1975.3 1209.41 L1974.72 1209.41 L1974.13 1209.41 L1973.54 1209.41 L1972.96 1209.41 L1972.37 1209.41 L1971.78 1209.41 L1971.2 1209.41 L1970.61 1209.41 L1970.03 1209.41 L1969.44 1209.41 L1968.85 1209.41 L1968.27 1209.41 L1967.68 1209.41 L1967.09 1209.41 L1966.51 1209.41 L1965.92 1209.41 L1965.33 1209.41 L1964.75 1209.41 L1964.16 1209.41 L1963.58 1209.41 L1962.99 1209.41 L1962.4 1209.41 L1961.82 1209.41 L1961.23 1209.41 L1960.64 1209.41 L1960.06 1209.41 L1959.47 1209.41 L1958.88 1209.41 L1958.3 1209.41 L1957.71 1209.41 L1957.12 1209.41 L1956.54 1209.41 L1955.95 1209.41 L1955.37 1209.41 L1954.78 1209.41 L1954.19 1209.41 L1953.61 1209.41 L1953.02 1209.41 L1952.43 1209.41 L1951.85 1209.41 L1951.26 1209.41 L1950.67 1209.41 L1950.09 1209.41 L1949.5 1209.41 L1948.91 1209.41 L1948.33 1209.41 L1947.74 1209.41 L1947.16 1209.41 L1946.57 1209.41 L1945.98 1209.41 L1945.4 1209.41 L1944.81 1209.41 L1944.22 1209.41 L1943.64 1209.41 L1943.05 1209.41 L1942.46 1209.41 L1941.88 1209.41 L1941.29 1209.41 L1940.71 1209.41 L1940.12 1209.41 L1939.53 1209.41 L1938.95 1209.41 L1938.36 1209.41 L1937.77 1209.41 L1937.19 1209.41 L1936.6 1209.41 L1936.01 1209.41 L1935.43 1209.41 L1934.84 1209.41 L1934.25 1209.41 L1933.67 1209.41 L1933.08 1209.41 L1932.5 1209.41 L1931.91 1209.41 L1931.32 1209.41 L1930.74 1209.41 L1930.15 1209.41 L1929.56 1209.41 L1928.98 1209.41 L1928.39 1209.41 L1927.8 1209.41 L1927.22 1209.41 L1926.63 1209.41 L1926.04 1209.41 L1925.46 1209.41 L1924.87 1209.41 L1924.29 1209.41 L1923.7 1209.41 L1923.11 1209.41 L1922.53 1209.41 L1921.94 1209.41 L1921.35 1209.41 L1920.77 1209.41 L1920.18 1209.41 L1919.59 1209.41 L1919.01 1209.41 L1918.42 1209.41 L1917.83 1209.41 L1917.25 1209.41 L1916.66 1209.41 L1916.08 1209.41 L1915.49 1209.41 L1914.9 1209.41 L1914.32 1209.41 L1913.73 1209.41 L1913.14 1209.41 L1912.56 1209.41 L1911.97 1209.41 L1911.38 1209.41 L1910.8 1209.41 L1910.21 1209.41 L1909.63 1209.41 L1909.04 1209.41 L1908.45 1209.41 L1907.87 1209.41 L1907.28 1209.41 L1906.69 1209.41 L1906.11 1209.41 L1905.52 1209.41 L1904.93 1209.41 L1904.35 1209.41 L1903.76 1209.41 L1903.17 1209.41 L1902.59 1209.41 L1902 1209.41 L1901.42 1209.41 L1900.83 1209.41 L1900.24 1209.41 L1899.66 1209.41 L1899.07 1209.41 L1898.48 1209.41 L1897.9 1209.41 L1897.31 1209.41 L1896.72 1209.41 L1896.14 1209.41 L1895.55 1209.41 L1894.96 1209.41 L1894.38 1209.41 L1893.79 1209.41 L1893.21 1209.41 L1892.62 1209.41 L1892.03 1209.41 L1891.45 1209.41 L1890.86 1209.41 L1890.27 1209.41 L1889.69 1209.41 L1889.1 1209.41 L1888.51 1209.41 L1887.93 1209.41 L1887.34 1209.41 L1886.76 1209.41 L1886.17 1209.41 L1885.58 1209.41 L1885 1209.41 L1884.41 1209.41 L1883.82 1209.41 L1883.24 1209.41 L1882.65 1209.41 L1882.06 1209.41 L1881.48 1209.41 L1880.89 1209.41 L1880.3 1209.41 L1879.72 1209.41 L1879.13 1209.41 L1878.55 1209.41 L1877.96 1209.41 L1877.37 1209.41 L1876.79 1209.41 L1876.2 1209.41 L1875.61 1209.41 L1875.03 1209.41 L1874.44 1209.41 L1873.85 1209.41 L1873.27 1209.41 L1872.68 1209.41 L1872.09 1209.41 L1871.51 1209.41 L1870.92 1209.41 L1870.34 1209.41 L1869.75 1209.41 L1869.16 1209.41 L1868.58 1209.41 L1867.99 1209.41 L1867.4 1209.41 L1866.82 1209.41 L1866.23 1209.41 L1865.64 1209.41 L1865.06 1209.41 L1864.47 1209.41 L1863.88 1209.41 L1863.3 1209.41 L1862.71 1209.41 L1862.13 1209.41 L1861.54 1209.41 L1860.95 1209.41 L1860.37 1209.41 L1859.78 1209.41 L1859.19 1209.41 L1858.61 1209.41 L1858.02 1209.41 L1857.43 1209.41 L1856.85 1209.41 L1856.26 1209.41 L1855.68 1209.41 L1855.09 1209.41 L1854.5 1209.41 L1853.92 1209.41 L1853.33 1209.41 L1852.74 1209.41 L1852.16 1209.41 L1851.57 1209.41 L1850.98 1209.41 L1850.4 1209.41 L1849.81 1209.41 L1849.22 1209.41 L1848.64 1209.41 L1848.05 1209.41 L1847.47 1209.41 L1846.88 1209.41 L1846.29 1209.41 L1845.71 1209.41 L1845.12 1209.41 L1844.53 1209.41 L1843.95 1209.41 L1843.36 1209.41 L1842.77 1209.41 L1842.19 1209.41 L1841.6 1209.41 L1841.01 1209.41 L1840.43 1209.41 L1839.84 1209.41 L1839.26 1209.41 L1838.67 1209.41 L1838.08 1209.41 L1837.5 1209.41 L1836.91 1209.41 L1836.32 1209.41 L1835.74 1209.41 L1835.15 1209.41 L1834.56 1209.41 L1833.98 1209.41 L1833.39 1209.41 L1832.81 1209.41 L1832.22 1209.41 L1831.63 1209.41 L1831.05 1209.41 L1830.46 1209.41 L1829.87 1209.41 L1829.29 1209.41 L1828.7 1209.41 L1828.11 1209.41 L1827.53 1209.41 L1826.94 1209.41 L1826.35 1209.41 L1825.77 1209.41 L1825.18 1209.41 L1824.6 1209.41 L1824.01 1209.41 L1823.42 1209.41 L1822.84 1209.41 L1822.25 1209.41 L1821.66 1209.41 L1821.08 1209.41 L1820.49 1209.41 L1819.9 1209.41 L1819.32 1209.41 L1818.73 1209.41 L1818.14 1209.41 L1817.56 1209.41 L1816.97 1209.41 L1816.39 1209.41 L1815.8 1209.41 L1815.21 1209.41 L1814.63 1209.41 L1814.04 1209.41 L1813.45 1209.41 L1812.87 1209.41 L1812.28 1209.41 L1811.69 1209.41 L1811.11 1209.41 L1810.52 1209.41 L1809.94 1209.41 L1809.35 1209.41 L1808.76 1209.41 L1808.18 1209.41 L1807.59 1209.41 L1807 1209.41 L1806.42 1209.41 L1805.83 1209.41 L1805.24 1209.41 L1804.66 1209.41 L1804.07 1209.41 L1803.48 1209.41 L1802.9 1209.41 L1802.31 1209.41 L1801.73 1209.41 L1801.14 1209.41 L1800.55 1209.41 L1799.97 1209.41 L1799.38 1209.41 L1798.79 1209.41 L1798.21 1209.41 L1797.62 1209.41 L1797.03 1209.41 L1796.45 1209.41 L1795.86 1209.41 L1795.27 1209.41 L1794.69 1209.41 L1794.1 1209.41 L1793.52 1209.41 L1792.93 1209.41 L1792.34 1209.41 L1791.76 1209.41 L1791.17 1209.41 L1790.58 1209.41 L1790 1209.41 L1789.41 1209.41 L1788.82 1209.41 L1788.24 1209.41 L1787.65 1209.41 L1787.06 1209.41 L1786.48 1209.41 L1785.89 1209.41 L1785.31 1209.41 L1784.72 1209.41 L1784.13 1209.41 L1783.55 1209.41 L1782.96 1209.41 L1782.37 1209.41 L1781.79 1209.41 L1781.2 1209.41 L1780.61 1209.41 L1780.03 1209.41 L1779.44 1209.41 L1778.86 1209.41 L1778.27 1209.41 L1777.68 1209.41 L1777.1 1209.41 L1776.51 1209.41 L1775.92 1209.41 L1775.34 1209.41 L1774.75 1209.41 L1774.16 1209.41 L1773.58 1209.41 L1772.99 1209.41 L1772.4 1209.41 L1771.82 1209.41 L1771.23 1209.41 L1770.65 1209.41 L1770.06 1209.41 L1769.47 1209.41 L1768.89 1209.41 L1768.3 1209.41 L1767.71 1209.41 L1767.13 1209.41 L1766.54 1209.41 L1765.95 1209.41 L1765.37 1209.41 L1764.78 1209.41 L1764.19 1209.41 L1763.61 1209.41 L1763.02 1209.41 L1762.44 1209.41 L1761.85 1209.41 L1761.26 1209.41 L1760.68 1209.41 L1760.09 1209.41 L1759.5 1209.41 L1758.92 1209.41 L1758.33 1209.41 L1757.74 1209.41 L1757.16 1209.41 L1756.57 1209.41 L1755.99 1209.41 L1755.4 1209.41 L1754.81 1209.41 L1754.23 1209.41 L1753.64 1209.41 L1753.05 1209.41 L1752.47 1209.41 L1751.88 1209.41 L1751.29 1209.41 L1750.71 1209.41 L1750.12 1209.41 L1749.53 1209.41 L1748.95 1209.41 L1748.36 1209.41 L1747.78 1209.41 L1747.19 1209.41 L1746.6 1209.41 L1746.02 1209.41 L1745.43 1209.41 L1744.84 1209.41 L1744.26 1209.41 L1743.67 1209.41 L1743.08 1209.41 L1742.5 1209.41 L1741.91 1209.41 L1741.32 1209.41 L1740.74 1209.41 L1740.15 1209.41 L1739.57 1209.41 L1738.98 1209.41 L1738.39 1209.41 L1737.81 1209.41 L1737.22 1209.41 L1736.63 1209.41 L1736.05 1209.41 L1735.46 1209.41 L1734.87 1209.41 L1734.29 1209.41 L1733.7 1209.41 L1733.11 1209.41 L1732.53 1209.41 L1731.94 1209.41 L1731.36 1209.41 L1730.77 1209.41 L1730.18 1209.41 L1729.6 1209.41 L1729.01 1209.41 L1728.42 1209.41 L1727.84 1209.41 L1727.25 1209.41 L1726.66 1209.41 L1726.08 1209.41 L1725.49 1209.41 L1724.91 1209.41 L1724.32 1209.41 L1723.73 1209.41 L1723.15 1209.41 L1722.56 1209.41 L1721.97 1209.41 L1721.39 1209.41 L1720.8 1209.41 L1720.21 1209.41 L1719.63 1209.41 L1719.04 1209.41 L1718.45 1209.41 L1717.87 1209.41 L1717.28 1209.41 L1716.7 1209.41 L1716.11 1209.41 L1715.52 1209.41 L1714.94 1209.41 L1714.35 1209.41 L1713.76 1209.41 L1713.18 1209.41 L1712.59 1209.41 L1712 1209.41 L1711.42 1209.41 L1710.83 1209.41 L1710.24 1209.41 L1709.66 1209.41 L1709.07 1209.41 L1708.49 1209.41 L1707.9 1209.41 L1707.31 1209.41 L1706.73 1209.41 L1706.14 1209.41 L1705.55 1209.41 L1704.97 1209.41 L1704.38 1209.41 L1703.79 1209.41 L1703.21 1209.41 L1702.62 1209.41 L1702.04 1209.41 L1701.45 1209.41 L1700.86 1209.41 L1700.28 1209.41 L1699.69 1209.41 L1699.1 1209.41 L1698.52 1209.41 L1697.93 1209.41 L1697.34 1209.41 L1696.76 1209.41 L1696.17 1209.41 L1695.58 1209.41 L1695 1209.41 L1694.41 1209.41 L1693.83 1209.41 L1693.24 1209.41 L1692.65 1209.41 L1692.07 1209.41 L1691.48 1209.41 L1690.89 1209.41 L1690.31 1209.41 L1689.72 1209.41 L1689.13 1209.41 L1688.55 1209.41 L1687.96 1209.41 L1687.37 1209.41 L1686.79 1209.41 L1686.2 1209.41 L1685.62 1209.41 L1685.03 1209.41 L1684.44 1209.41 L1683.86 1209.41 L1683.27 1209.41 L1682.68 1209.41 L1682.1 1209.41 L1681.51 1209.41 L1680.92 1209.41 L1680.34 1209.41 L1679.75 1209.41 L1679.17 1209.41 L1678.58 1209.41 L1677.99 1209.41 L1677.41 1209.41 L1676.82 1209.41 L1676.23 1209.41 L1675.65 1209.41 L1675.06 1209.41 L1674.47 1209.41 L1673.89 1209.41 L1673.3 1209.41 L1672.71 1209.41 L1672.13 1209.41 L1671.54 1209.41 L1670.96 1209.41 L1670.37 1209.41 L1669.78 1209.41 L1669.2 1209.41 L1668.61 1209.41 L1668.02 1209.41 L1667.44 1209.41 L1666.85 1209.41 L1666.26 1209.41 L1665.68 1209.41 L1665.09 1209.41 L1664.5 1209.41 L1663.92 1209.41 L1663.33 1209.41 L1662.75 1209.41 L1662.16 1209.41 L1661.57 1209.41 L1660.99 1209.41 L1660.4 1209.41 L1659.81 1209.41 L1659.23 1209.41 L1658.64 1209.41 L1658.05 1209.41 L1657.47 1209.41 L1656.88 1209.41 L1656.29 1209.41 L1655.71 1209.41 L1655.12 1209.41 L1654.54 1209.41 L1653.95 1209.41 L1653.36 1209.41 L1652.78 1209.41 L1652.19 1209.41 L1651.6 1209.41 L1651.02 1209.41 L1650.43 1209.41 L1649.84 1209.41 L1649.26 1209.41 L1648.67 1209.41 L1648.09 1209.41 L1647.5 1209.41 L1646.91 1209.41 L1646.33 1209.41 L1645.74 1209.41 L1645.15 1209.41 L1644.57 1209.41 L1643.98 1209.41 L1643.39 1209.41 L1642.81 1209.41 L1642.22 1209.41 L1641.63 1209.41 L1641.05 1209.41 L1640.46 1209.41 L1639.88 1209.41 L1639.29 1209.41 L1638.7 1209.41 L1638.12 1209.41 L1637.53 1209.41 L1636.94 1209.41 L1636.36 1209.41 L1635.77 1209.41 L1635.18 1209.41 L1634.6 1209.41 L1634.01 1209.41 L1633.42 1209.41 L1632.84 1209.41 L1632.25 1209.41 L1631.67 1209.41 L1631.08 1209.41 L1630.49 1209.41 L1629.91 1209.41 L1629.32 1209.41 L1628.73 1209.41 L1628.15 1209.41 L1627.56 1209.41 L1626.97 1209.41 L1626.39 1209.41 L1625.8 1209.41 L1625.22 1209.41 L1624.63 1209.41 L1624.04 1209.41 L1623.46 1209.41 L1622.87 1209.41 L1622.28 1209.41 L1621.7 1209.41 L1621.11 1209.41 L1620.52 1209.41 L1619.94 1209.41 L1619.35 1209.41 L1618.76 1209.41 L1618.18 1209.41 L1617.59 1209.41 L1617.01 1209.41 L1616.42 1209.41 L1615.83 1209.41 L1615.25 1209.41 L1614.66 1209.41 L1614.07 1209.41 L1613.49 1209.41 L1612.9 1209.41 L1612.31 1209.41 L1611.73 1209.41 L1611.14 1209.41 L1610.55 1209.41 L1609.97 1209.41 L1609.38 1209.41 L1608.8 1209.41 L1608.21 1209.41 L1607.62 1209.41 L1607.04 1209.41 L1606.45 1209.41 L1605.86 1209.41 L1605.28 1209.41 L1604.69 1209.41 L1604.1 1209.41 L1603.52 1209.41 L1602.93 1209.41 L1602.34 1209.41 L1601.76 1209.41 L1601.17 1209.41 L1600.59 1209.41 L1600 1209.41 L1599.41 1209.41 L1598.83 1209.41 L1598.24 1209.41 L1597.65 1209.41 L1597.07 1209.41 L1596.48 1209.41 L1595.89 1209.41 L1595.31 1209.41 L1594.72 1209.41 L1594.14 1209.41 L1593.55 1209.41 L1592.96 1209.41 L1592.38 1209.41 L1591.79 1209.41 L1591.2 1209.41 L1590.62 1209.41 L1590.03 1209.41 L1589.44 1209.41 L1588.86 1209.41 L1588.27 1209.41 L1587.68 1209.41 L1587.1 1209.41 L1586.51 1209.41 L1585.93 1209.41 L1585.34 1209.41 L1584.75 1209.41 L1584.17 1209.41 L1583.58 1209.41 L1582.99 1209.41 L1582.41 1209.41 L1581.82 1209.41 L1581.23 1209.41 L1580.65 1209.41 L1580.06 1209.41 L1579.47 1209.41 L1578.89 1209.41 L1578.3 1209.41 L1577.72 1209.41 L1577.13 1209.41 L1576.54 1209.41 L1575.96 1209.41 L1575.37 1209.41 L1574.78 1209.41 L1574.2 1209.41 L1573.61 1209.41 L1573.02 1209.41 L1572.44 1209.41 L1571.85 1209.41 L1571.27 1209.41 L1570.68 1209.41 L1570.09 1209.41 L1569.51 1209.41 L1568.92 1209.41 L1568.33 1209.41 L1567.75 1209.41 L1567.16 1209.41 L1566.57 1209.41 L1565.99 1209.41 L1565.4 1209.41 L1564.81 1209.41 L1564.23 1209.41 L1563.64 1209.41 L1563.06 1209.41 L1562.47 1209.41 L1561.88 1209.41 L1561.3 1209.41 L1560.71 1209.41 L1560.12 1209.41 L1559.54 1209.41 L1558.95 1209.41 L1558.36 1209.41 L1557.78 1209.41 L1557.19 1209.41 L1556.6 1209.41 L1556.02 1209.41 L1555.43 1209.41 L1554.85 1209.41 L1554.26 1209.41 L1553.67 1209.41 L1553.09 1209.41 L1552.5 1209.41 L1551.91 1209.41 L1551.33 1209.41 L1550.74 1209.41 L1550.15 1209.41 L1549.57 1209.41 L1548.98 1209.41 L1548.4 1209.41 L1547.81 1209.41 L1547.22 1209.41 L1546.64 1209.41 L1546.05 1209.41 L1545.46 1209.41 L1544.88 1209.41 L1544.29 1209.41 L1543.7 1209.41 L1543.12 1209.41 L1542.53 1209.41 L1541.94 1209.41 L1541.36 1209.41 L1540.77 1209.41 L1540.19 1209.41 L1539.6 1209.41 L1539.01 1209.41 L1538.43 1209.41 L1537.84 1209.41 L1537.25 1209.41 L1536.67 1209.41 L1536.08 1209.41 L1535.49 1209.41 L1534.91 1209.41 L1534.32 1209.41 L1533.73 1209.41 L1533.15 1209.41 L1532.56 1209.41 L1531.98 1209.41 L1531.39 1209.41 L1530.8 1209.41 L1530.22 1209.41 L1529.63 1209.41 L1529.04 1209.41 L1528.46 1209.41 L1527.87 1209.41 L1527.28 1209.41 L1526.7 1209.41 L1526.11 1209.41 L1525.52 1209.41 L1524.94 1209.41 L1524.35 1209.41 L1523.77 1209.41 L1523.18 1209.41 L1522.59 1209.41 L1522.01 1209.41 L1521.42 1209.41 L1520.83 1209.41 L1520.25 1209.41 L1519.66 1209.41 L1519.07 1209.41 L1518.49 1209.41 L1517.9 1209.41 L1517.32 1209.41 L1516.73 1209.41 L1516.14 1209.41 L1515.56 1209.41 L1514.97 1209.41 L1514.38 1209.41 L1513.8 1209.41 L1513.21 1209.41 L1512.62 1209.41 L1512.04 1209.41 L1511.45 1209.41 L1510.86 1209.41 L1510.28 1209.41 L1509.69 1209.41 L1509.11 1209.41 L1508.52 1209.41 L1507.93 1209.41 L1507.35 1209.41 L1506.76 1209.41 L1506.17 1209.41 L1505.59 1209.41 L1505 1209.41 L1504.41 1209.41 L1503.83 1209.41 L1503.24 1209.41 L1502.65 1209.41 L1502.07 1209.41 L1501.48 1209.41 L1500.9 1209.41 L1500.31 1209.41 L1499.72 1209.41 L1499.14 1209.41 L1498.55 1209.41 L1497.96 1209.41 L1497.38 1209.41 L1496.79 1209.41 L1496.2 1209.41 L1495.62 1209.41 L1495.03 1209.41 L1494.45 1209.41 L1493.86 1209.41 L1493.27 1209.41 L1492.69 1209.41 L1492.1 1209.41 L1491.51 1209.41 L1490.93 1209.41 L1490.34 1209.41 L1489.75 1209.41 L1489.17 1209.41 L1488.58 1209.41 L1487.99 1209.41 L1487.41 1209.41 L1486.82 1209.41 L1486.24 1209.41 L1485.65 1209.41 L1485.06 1209.41 L1484.48 1209.41 L1483.89 1209.41 L1483.3 1209.41 L1482.72 1209.41 L1482.13 1209.41 L1481.54 1209.41 L1480.96 1209.41 L1480.37 1209.41 L1479.78 1209.41 L1479.2 1209.41 L1478.61 1209.41 L1478.03 1209.41 L1477.44 1209.41 L1476.85 1209.41 L1476.27 1209.41 L1475.68 1209.41 L1475.09 1209.41 L1474.51 1209.41 L1473.92 1209.41 L1473.33 1209.41 L1472.75 1209.41 L1472.16 1209.41 L1471.57 1209.41 L1470.99 1209.41 L1470.4 1209.41 L1469.82 1209.41 L1469.23 1209.41 L1468.64 1209.41 L1468.06 1209.41 L1467.47 1209.41 L1466.88 1209.41 L1466.3 1209.41 L1465.71 1209.41 L1465.12 1209.41 L1464.54 1209.41 L1463.95 1209.41 L1463.37 1209.41 L1462.78 1209.41 L1462.19 1209.41 L1461.61 1209.41 L1461.02 1209.41 L1460.43 1209.41 L1459.85 1209.41 L1459.26 1209.41 L1458.67 1209.41 L1458.09 1209.41 L1457.5 1209.41 L1456.91 1209.41 L1456.33 1209.41 L1455.74 1209.41 L1455.16 1209.41 L1454.57 1209.41 L1453.98 1209.41 L1453.4 1209.41 L1452.81 1209.41 L1452.22 1209.41 L1451.64 1209.41 L1451.05 1209.41 L1450.46 1209.41 L1449.88 1209.41 L1449.29 1209.41 L1448.7 1209.41 L1448.12 1209.41 L1447.53 1209.41 L1446.95 1209.41 L1446.36 1209.41 L1445.77 1209.41 L1445.19 1209.41 L1444.6 1209.41 L1444.01 1209.41 L1443.43 1209.41 L1442.84 1209.41 L1442.25 1209.41 L1441.67 1209.41 L1441.08 1209.41 L1440.5 1209.41 L1439.91 1209.41 L1439.32 1209.41 L1438.74 1209.41 L1438.15 1209.41 L1437.56 1209.41 L1436.98 1209.41 L1436.39 1209.41 L1435.8 1209.41 L1435.22 1209.41 L1434.63 1209.41 L1434.04 1209.41 L1433.46 1209.41 L1432.87 1209.41 L1432.29 1209.41 L1431.7 1209.41 L1431.11 1209.41 L1430.53 1209.41 L1429.94 1209.41 L1429.35 1209.41 L1428.77 1209.41 L1428.18 1209.41 L1427.59 1209.41 L1427.01 1209.41 L1426.42 1209.41 L1425.83 1209.41 L1425.25 1209.41 L1424.66 1209.41 L1424.08 1209.41 L1423.49 1209.41 L1422.9 1209.41 L1422.32 1209.41 L1421.73 1209.41 L1421.14 1209.41 L1420.56 1209.41 L1419.97 1209.41 L1419.38 1209.41 L1418.8 1209.41 L1418.21 1209.41 L1417.63 1209.41 L1417.04 1209.41 L1416.45 1209.41 L1415.87 1209.41 L1415.28 1209.41 L1414.69 1209.41 L1414.11 1209.41 L1413.52 1209.41 L1412.93 1209.41 L1412.35 1209.41 L1411.76 1209.41 L1411.17 1209.41 L1410.59 1209.41 L1410 1209.41 L1409.42 1209.41 L1408.83 1209.41 L1408.24 1209.41 L1407.66 1209.41 L1407.07 1209.41 L1406.48 1209.41 L1405.9 1209.41 L1405.31 1209.41 L1404.72 1209.41 L1404.14 1209.41 L1403.55 1209.41 L1402.96 1209.41 L1402.38 1209.41 L1401.79 1209.41 L1401.21 1209.41 L1400.62 1209.41 L1400.03 1209.41 L1399.45 1209.41 L1398.86 1209.41 L1398.27 1209.41 L1397.69 1209.41 L1397.1 1209.41 L1396.51 1209.41 L1395.93 1209.41 L1395.34 1209.41 L1394.75 1209.41 L1394.17 1209.41 L1393.58 1209.41 L1393 1209.41 L1392.41 1209.41 L1391.82 1209.41 L1391.24 1209.41 L1390.65 1209.41 L1390.06 1209.41 L1389.48 1209.41 L1388.89 1209.41 L1388.3 1209.41 L1387.72 1209.41 L1387.13 1209.41 L1386.55 1209.41 L1385.96 1209.41 L1385.37 1209.41 L1384.79 1209.41 L1384.2 1209.41 L1383.61 1209.41 L1383.03 1209.41 L1382.44 1209.41 L1381.85 1209.41 L1381.27 1209.41 L1380.68 1209.41 L1380.09 1209.41 L1379.51 1209.41 L1378.92 1209.41 L1378.34 1209.41 L1377.75 1209.41 L1377.16 1209.41 L1376.58 1209.41 L1375.99 1209.41 L1375.4 1209.41 L1374.82 1209.41 L1374.23 1209.41 L1373.64 1209.41 L1373.06 1209.41 L1372.47 1209.41 L1371.88 1209.41 L1371.3 1209.41 L1370.71 1209.41 L1370.13 1209.41 L1369.54 1209.41 L1368.95 1209.41 L1368.37 1209.41 L1367.78 1209.41 L1367.19 1209.41 L1366.61 1209.41 L1366.02 1209.41 L1365.43 1209.41 L1364.85 1209.41 L1364.26 1209.41 L1363.68 1209.41 L1363.09 1209.41 L1362.5 1209.41 L1361.92 1209.41 L1361.33 1209.41 L1360.74 1209.41 L1360.16 1209.41 L1359.57 1209.41 L1358.98 1209.41 L1358.4 1209.41 L1357.81 1209.41 L1357.22 1209.41 L1356.64 1209.41 L1356.05 1209.41 L1355.47 1209.41 L1354.88 1209.41 L1354.29 1209.41 L1353.71 1209.41 L1353.12 1209.41 L1352.53 1209.41 L1351.95 1209.41 L1351.36 1209.41 L1350.77 1209.41 L1350.19 1209.41 L1349.6 1209.41 L1349.01 1209.41 L1348.43 1209.41 L1347.84 1209.41 L1347.26 1209.41 L1346.67 1209.41 L1346.08 1209.41 L1345.5 1209.41 L1344.91 1209.41 L1344.32 1209.41 L1343.74 1209.41 L1343.15 1209.41 L1342.56 1209.41 L1341.98 1209.41 L1341.39 1209.41 L1340.8 1209.41 L1340.22 1209.41 L1339.63 1209.41 L1339.05 1209.41 L1338.46 1209.41 L1337.87 1209.41 L1337.29 1209.41 L1336.7 1209.41 L1336.11 1209.41 L1335.53 1209.41 L1334.94 1209.41 L1334.35 1209.41 L1333.77 1209.41 L1333.18 1209.41 L1332.6 1209.41 L1332.01 1209.41 L1331.42 1209.41 L1330.84 1209.41 L1330.25 1209.41 L1329.66 1209.41 L1329.08 1209.41 L1328.49 1209.41 L1327.9 1209.41 L1327.32 1209.41 L1326.73 1209.41 L1326.14 1209.41 L1325.56 1209.41 L1324.97 1209.41 L1324.39 1209.41 L1323.8 1209.41 L1323.21 1209.41 L1322.63 1209.41 L1322.04 1209.41 L1321.45 1209.41 L1320.87 1209.41 L1320.28 1209.41 L1319.69 1209.41 L1319.11 1209.41 L1318.52 1209.41 L1317.93 1209.41 L1317.35 1209.41 L1316.76 1209.41 L1316.18 1209.41 L1315.59 1209.41 L1315 1209.41 L1314.42 1209.41 L1313.83 1209.41 L1313.24 1209.41 L1312.66 1209.41 L1312.07 1209.41 L1311.48 1209.41 L1310.9 1209.41 L1310.31 1209.41 L1309.73 1209.41 L1309.14 1209.41 L1308.55 1209.41 L1307.97 1209.41 L1307.38 1209.41 L1306.79 1209.41 L1306.21 1209.41 L1305.62 1209.41 L1305.03 1209.41 L1304.45 1209.41 L1303.86 1209.41 L1303.27 1209.41 L1302.69 1209.41 L1302.1 1209.41 L1301.52 1209.41 L1300.93 1209.41 L1300.34 1209.41 L1299.76 1209.41 L1299.17 1209.41 L1298.58 1209.41 L1298 1209.41 L1297.41 1209.41 L1296.82 1209.41 L1296.24 1209.41 L1295.65 1209.41 L1295.06 1209.41 L1294.48 1209.41 L1293.89 1209.41 L1293.31 1209.41 L1292.72 1209.41 L1292.13 1209.41 L1291.55 1209.41 L1290.96 1209.41 L1290.37 1209.41 L1289.79 1209.41 L1289.2 1209.41 L1288.61 1209.41 L1288.03 1209.41 L1287.44 1209.41 L1286.86 1209.41 L1286.27 1209.41 L1285.68 1209.41 L1285.1 1209.41 L1284.51 1209.41 L1283.92 1209.41 L1283.34 1209.41 L1282.75 1209.41 L1282.16 1209.41 L1281.58 1209.41 L1280.99 1209.41 L1280.4 1209.41 L1279.82 1209.41 L1279.23 1209.41 L1278.65 1209.41 L1278.06 1209.41 L1277.47 1209.41 L1276.89 1209.41 L1276.3 1209.41 L1275.71 1209.41 L1275.13 1209.41 L1274.54 1209.41 L1273.95 1209.41 L1273.37 1209.41 L1272.78 1209.41 L1272.19 1209.41 L1271.61 1209.41 L1271.02 1209.41 L1270.44 1209.41 L1269.85 1209.41 L1269.26 1209.41 L1268.68 1209.41 L1268.09 1209.41 L1267.5 1209.41 L1266.92 1209.41 L1266.33 1209.41 L1265.74 1209.41 L1265.16 1209.41 L1264.57 1209.41 L1263.98 1209.41 L1263.4 1209.41 L1262.81 1209.41 L1262.23 1209.41 L1261.64 1209.41 L1261.05 1209.41 L1260.47 1209.41 L1259.88 1209.41 L1259.29 1209.41 L1258.71 1209.41 L1258.12 1209.41 L1257.53 1209.41 L1256.95 1209.41 L1256.36 1209.41 L1255.78 1209.41 L1255.19 1209.41 L1254.6 1209.41 L1254.02 1209.41 L1253.43 1209.41 L1252.84 1209.41 L1252.26 1209.41 L1251.67 1209.41 L1251.08 1209.41 L1250.5 1209.41 L1249.91 1209.41 L1249.32 1209.41 L1248.74 1209.41 L1248.15 1209.41 L1247.57 1209.41 L1246.98 1209.41 L1246.39 1209.41 L1245.81 1209.41 L1245.22 1209.41 L1244.63 1209.41 L1244.05 1209.41 L1243.46 1209.41 L1242.87 1209.41 L1242.29 1209.41 L1241.7 1209.41 L1241.11 1209.41 L1240.53 1209.41 L1239.94 1209.41 L1239.36 1209.41 L1238.77 1209.41 L1238.18 1209.41 L1237.6 1209.41 L1237.01 1209.41 L1236.42 1209.41 L1235.84 1209.41 L1235.25 1209.41 L1234.66 1209.41 L1234.08 1209.41 L1233.49 1209.41 L1232.91 1209.41 L1232.32 1209.41 L1231.73 1209.41 L1231.15 1209.41 L1230.56 1209.41 L1229.97 1209.41 L1229.39 1209.41 L1228.8 1209.41 L1228.21 1209.41 L1227.63 1209.41 L1227.04 1209.41 L1226.45 1209.41 L1225.87 1209.41 L1225.28 1209.41 L1224.7 1209.41 L1224.11 1209.41 L1223.52 1209.41 L1222.94 1209.41 L1222.35 1209.41 L1221.76 1209.41 L1221.18 1209.41 L1220.59 1209.41 L1220 1209.41 L1219.42 1209.41 L1218.83 1209.41 L1218.24 1209.41 L1217.66 1209.41 L1217.07 1209.41 L1216.49 1209.41 L1215.9 1209.41 L1215.31 1209.41 L1214.73 1209.41 L1214.14 1209.41 L1213.55 1209.41 L1212.97 1209.41 L1212.38 1209.41 L1211.79 1209.41 L1211.21 1209.41 L1210.62 1209.41 L1210.03 1209.41 L1209.45 1209.41 L1208.86 1209.41 L1208.28 1209.41 L1207.69 1209.41 L1207.1 1209.41 L1206.52 1209.41 L1205.93 1209.41 L1205.34 1209.41 L1204.76 1209.41 L1204.17 1209.41 L1203.58 1209.41 L1203 1209.41 L1202.41 1209.41 L1201.83 1209.41 L1201.24 1209.41 L1200.65 1209.41 L1200.07 1209.41 L1199.48 1209.41 L1198.89 1209.41 L1198.31 1209.41 L1197.72 1209.41 L1197.13 1209.41 L1196.55 1209.41 L1195.96 1209.41 L1195.37 1209.41 L1194.79 1209.41 L1194.2 1209.41 L1193.62 1209.41 L1193.03 1209.41 L1192.44 1209.41 L1191.86 1209.41 L1191.27 1209.41 L1190.68 1209.41 L1190.1 1209.41 L1189.51 1209.41 L1188.92 1209.41 L1188.34 1209.41 L1187.75 1209.41 L1187.16 1209.41 L1186.58 1209.41 L1185.99 1209.41 L1185.41 1209.41 L1184.82 1209.41 L1184.23 1209.41 L1183.65 1209.41 L1183.06 1209.41 L1182.47 1209.41 L1181.89 1209.41 L1181.3 1209.41 L1180.71 1209.41 L1180.13 1209.41 L1179.54 1209.41 L1178.96 1209.41 L1178.37 1209.41 L1177.78 1209.41 L1177.2 1209.41 L1176.61 1209.41 L1176.02 1209.41 L1175.44 1209.41 L1174.85 1209.41 L1174.26 1209.41 L1173.68 1209.41 L1173.09 1209.41 L1172.5 1209.41 L1171.92 1209.41 L1171.33 1209.41 L1170.75 1209.41 L1170.16 1209.41 L1169.57 1209.41 L1168.99 1209.41 L1168.4 1209.41 L1167.81 1209.41 L1167.23 1209.41 L1166.64 1209.41 L1166.05 1209.41 L1165.47 1209.41 L1164.88 1209.41 L1164.29 1209.41 L1163.71 1209.41 L1163.12 1209.41 L1162.54 1209.41 L1161.95 1209.41 L1161.36 1209.41 L1160.78 1209.41 L1160.19 1209.41 L1159.6 1209.41 L1159.02 1209.41 L1158.43 1209.41 L1157.84 1209.41 L1157.26 1209.41 L1156.67 1209.41 L1156.09 1209.41 L1155.5 1209.41 L1154.91 1209.41 L1154.33 1209.41 L1153.74 1209.41 L1153.15 1209.41 L1152.57 1209.41 L1151.98 1209.41 L1151.39 1209.41 L1150.81 1209.41 L1150.22 1209.41 L1149.63 1209.41 L1149.05 1209.41 L1148.46 1209.41 L1147.88 1209.41 L1147.29 1209.41 L1146.7 1209.41 L1146.12 1209.41 L1145.53 1209.41 L1144.94 1209.41 L1144.36 1209.41 L1143.77 1209.41 L1143.18 1209.41 L1142.6 1209.41 L1142.01 1209.41 L1141.42 1209.41 L1140.84 1209.41 L1140.25 1209.41 L1139.67 1209.41 L1139.08 1209.41 L1138.49 1209.41 L1137.91 1209.41 L1137.32 1209.41 L1136.73 1209.41 L1136.15 1209.41 L1135.56 1209.41 L1134.97 1209.41 L1134.39 1209.41 L1133.8 1209.41 L1133.21 1209.41 L1132.63 1209.41 L1132.04 1209.41 L1131.46 1209.41 L1130.87 1209.41 L1130.28 1209.41 L1129.7 1209.41 L1129.11 1209.41 L1128.52 1209.41 L1127.94 1209.41 L1127.35 1209.41 L1126.76 1209.41 L1126.18 1209.41 L1125.59 1209.41 L1125.01 1209.41 L1124.42 1209.41 L1123.83 1209.41 L1123.25 1209.41 L1122.66 1209.41 L1122.07 1209.41 L1121.49 1209.41 L1120.9 1209.41 L1120.31 1209.41 L1119.73 1209.41 L1119.14 1209.41 L1118.55 1209.41 L1117.97 1209.41 L1117.38 1209.41 L1116.8 1209.41 L1116.21 1209.41 L1115.62 1209.41 L1115.04 1209.41 L1114.45 1209.41 L1113.86 1209.41 L1113.28 1209.41 L1112.69 1209.41 L1112.1 1209.41 L1111.52 1209.41 L1110.93 1209.41 L1110.34 1209.41 L1109.76 1209.41 L1109.17 1209.41 L1108.59 1209.41 L1108 1209.41 L1107.41 1209.41 L1106.83 1209.41 L1106.24 1209.41 L1105.65 1209.41 L1105.07 1209.41 L1104.48 1209.41 L1103.89 1209.41 L1103.31 1209.41 L1102.72 1209.41 L1102.14 1209.41 L1101.55 1209.41 L1100.96 1209.41 L1100.38 1209.41 L1099.79 1209.41 L1099.2 1209.41 L1098.62 1209.41 L1098.03 1209.41 L1097.44 1209.41 L1096.86 1209.41 L1096.27 1209.41 L1095.68 1209.41 L1095.1 1209.41 L1094.51 1209.41 L1093.93 1209.41 L1093.34 1209.41 L1092.75 1209.41 L1092.17 1209.41 L1091.58 1209.41 L1090.99 1209.41 L1090.41 1209.41 L1089.82 1209.41 L1089.23 1209.41 L1088.65 1209.41 L1088.06 1209.41 L1087.47 1209.41 L1086.89 1209.41 L1086.3 1209.41 L1085.72 1209.41 L1085.13 1209.41 L1084.54 1209.41 L1083.96 1209.41 L1083.37 1209.41 L1082.78 1209.41 L1082.2 1209.41 L1081.61 1209.41 L1081.02 1209.41 L1080.44 1209.41 L1079.85 1209.41 L1079.26 1209.41 L1078.68 1209.41 L1078.09 1209.41 L1077.51 1209.41 L1076.92 1209.41 L1076.33 1209.41 L1075.75 1209.41 L1075.16 1209.41 L1074.57 1209.41 L1073.99 1209.41 L1073.4 1209.41 L1072.81 1209.41 L1072.23 1209.41 L1071.64 1209.41 L1071.06 1209.41 L1070.47 1209.41 L1069.88 1209.41 L1069.3 1209.41 L1068.71 1209.41 L1068.12 1209.41 L1067.54 1209.41 L1066.95 1209.41 L1066.36 1209.41 L1065.78 1209.41 L1065.19 1209.41 L1064.6 1209.41 L1064.02 1209.41 L1063.43 1209.41 L1062.85 1209.41 L1062.26 1209.41 L1061.67 1209.41 L1061.09 1209.41 L1060.5 1209.41 L1059.91 1209.41 L1059.33 1209.41 L1058.74 1209.41 L1058.15 1209.41 L1057.57 1209.41 L1056.98 1209.41 L1056.39 1209.41 L1055.81 1209.41 L1055.22 1209.41 L1054.64 1209.41 L1054.05 1209.41 L1053.46 1209.41 L1052.88 1209.41 L1052.29 1209.41 L1051.7 1209.41 L1051.12 1209.41 L1050.53 1209.41 L1049.94 1209.41 L1049.36 1209.41 L1048.77 1209.41 L1048.19 1209.41 L1047.6 1209.41 L1047.01 1209.41 L1046.43 1209.41 L1045.84 1209.41 L1045.25 1209.41 L1044.67 1209.41 L1044.08 1209.41 L1043.49 1209.41 L1042.91 1209.41 L1042.32 1209.41 L1041.73 1209.41 L1041.15 1209.41 L1040.56 1209.41 L1039.98 1209.41 L1039.39 1209.41 L1038.8 1209.41 L1038.22 1209.41 L1037.63 1209.41 L1037.04 1209.41 L1036.46 1209.41 L1035.87 1209.41 L1035.28 1209.41 L1034.7 1209.41 L1034.11 1209.41 L1033.52 1209.41 L1032.94 1209.41 L1032.35 1209.41 L1031.77 1209.41 L1031.18 1209.41 L1030.59 1209.41 L1030.01 1209.41 L1029.42 1209.41 L1028.83 1209.41 L1028.25 1209.41 L1027.66 1209.41 L1027.07 1209.41 L1026.49 1209.41 L1025.9 1209.41 L1025.32 1209.41 L1024.73 1209.41 L1024.14 1209.41 L1023.56 1209.41 L1022.97 1209.41 L1022.38 1209.41 L1021.8 1209.41 L1021.21 1209.41 L1020.62 1209.41 L1020.04 1209.41 L1019.45 1209.41 L1018.86 1209.41 L1018.28 1209.41 L1017.69 1209.41 L1017.11 1209.41 L1016.52 1209.41 L1015.93 1209.41 L1015.35 1209.41 L1014.76 1209.41 L1014.17 1209.41 L1013.59 1209.41 L1013 1209.41 L1012.41 1209.41 L1011.83 1209.41 L1011.24 1209.41 L1010.65 1209.41 L1010.07 1209.41 L1009.48 1209.41 L1008.9 1209.41 L1008.31 1209.41 L1007.72 1209.41 L1007.14 1209.41 L1006.55 1209.41 L1005.96 1209.41 L1005.38 1209.41 L1004.79 1209.41 L1004.2 1209.41 L1003.62 1209.41 L1003.03 1209.41 L1002.44 1209.41 L1001.86 1209.41 L1001.27 1209.41 L1000.69 1209.41 L1000.1 1209.41 L999.513 1209.41 L998.926 1209.41 L998.34 1209.41 L997.754 1209.41 L997.167 1209.41 L996.581 1209.41 L995.994 1209.41 L995.408 1209.41 L994.822 1209.41 L994.235 1209.41 L993.649 1209.41 L993.062 1209.41 L992.476 1209.41 L991.889 1209.41 L991.303 1209.41 L990.717 1209.41 L990.13 1209.41 L989.544 1209.41 L988.957 1209.41 L988.371 1209.41 L987.785 1209.41 L987.198 1209.41 L986.612 1209.41 L986.025 1209.41  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.73 986.612,1209.73 987.198,1209.73 987.785,1209.73 988.371,1209.73 988.957,1209.73 989.544,1209.73 990.13,1209.73 990.717,1209.73 991.303,1209.73 991.889,1209.73 992.476,1209.73 993.062,1209.73 993.649,1209.73 994.235,1209.73 994.822,1209.73 995.408,1209.73 995.994,1209.73 996.581,1209.73 997.167,1209.73 997.754,1209.73 998.34,1209.73 998.926,1209.73 999.513,1209.73 1000.1,1209.73 1000.69,1209.73 1001.27,1209.73 1001.86,1209.73 1002.44,1209.73 1003.03,1209.73 1003.62,1209.73 1004.2,1209.73 1004.79,1209.73 1005.38,1209.73 1005.96,1209.73 1006.55,1209.73 1007.14,1209.73 1007.72,1209.73 1008.31,1209.73 1008.9,1209.73 1009.48,1209.73 1010.07,1209.73 1010.65,1209.73 1011.24,1209.73 1011.83,1209.73 1012.41,1209.73 1013,1209.73 1013.59,1209.73 1014.17,1209.73 1014.76,1209.73 1015.35,1209.73 1015.93,1209.73 1016.52,1209.73 1017.11,1209.73 1017.69,1209.73 1018.28,1209.73 1018.86,1209.73 1019.45,1209.73 1020.04,1209.73 1020.62,1209.73 1021.21,1209.73 1021.8,1209.73 1022.38,1209.73 1022.97,1209.73 1023.56,1209.73 1024.14,1209.73 1024.73,1209.73 1025.32,1209.73 1025.9,1209.73 1026.49,1209.73 1027.07,1209.73 1027.66,1209.73 1028.25,1209.73 1028.83,1209.73 1029.42,1209.73 1030.01,1209.73 1030.59,1209.73 1031.18,1209.73 1031.77,1209.73 1032.35,1209.73 1032.94,1209.73 1033.52,1209.73 1034.11,1209.73 1034.7,1209.73 1035.28,1209.73 1035.87,1209.73 1036.46,1209.73 1037.04,1209.73 1037.63,1209.73 1038.22,1209.73 1038.8,1209.73 1039.39,1209.73 1039.98,1209.73 1040.56,1209.73 1041.15,1209.73 1041.73,1209.73 1042.32,1209.73 1042.91,1209.73 1043.49,1209.73 1044.08,1209.73 1044.67,1209.73 1045.25,1209.73 1045.84,1209.73 1046.43,1209.73 1047.01,1209.73 1047.6,1209.73 1048.19,1209.73 1048.77,1209.73 1049.36,1209.73 1049.94,1209.73 1050.53,1209.73 1051.12,1209.73 1051.7,1209.73 1052.29,1209.73 1052.88,1209.73 1053.46,1209.73 1054.05,1209.73 1054.64,1209.73 1055.22,1209.73 1055.81,1209.73 1056.39,1209.73 1056.98,1209.73 1057.57,1209.73 1058.15,1209.73 1058.74,1209.73 1059.33,1209.73 1059.91,1209.73 1060.5,1209.73 1061.09,1209.73 1061.67,1209.73 1062.26,1209.73 1062.85,1209.73 1063.43,1209.73 1064.02,1209.73 1064.6,1209.73 1065.19,1209.73 1065.78,1209.73 1066.36,1209.73 1066.95,1209.73 1067.54,1209.73 1068.12,1209.73 1068.71,1209.73 1069.3,1209.73 1069.88,1209.73 1070.47,1209.73 1071.06,1209.73 1071.64,1209.73 1072.23,1209.73 1072.81,1209.73 1073.4,1209.73 1073.99,1209.73 1074.57,1209.73 1075.16,1209.73 1075.75,1209.73 1076.33,1209.73 1076.92,1209.73 1077.51,1209.73 1078.09,1209.73 1078.68,1209.73 1079.26,1209.73 1079.85,1209.73 1080.44,1209.73 1081.02,1209.73 1081.61,1209.73 1082.2,1209.73 1082.78,1209.73 1083.37,1209.73 1083.96,1209.73 1084.54,1209.73 1085.13,1209.73 1085.72,1209.73 1086.3,1209.73 1086.89,1209.73 1087.47,1209.73 1088.06,1209.73 1088.65,1209.73 1089.23,1209.73 1089.82,1209.73 1090.41,1209.73 1090.99,1209.73 1091.58,1209.73 1092.17,1209.73 1092.75,1209.73 1093.34,1209.73 1093.93,1209.73 1094.51,1209.73 1095.1,1209.73 1095.68,1209.73 1096.27,1209.73 1096.86,1209.73 1097.44,1209.73 1098.03,1209.73 1098.62,1209.73 1099.2,1209.73 1099.79,1209.73 1100.38,1209.73 1100.96,1209.73 1101.55,1209.73 1102.14,1209.73 1102.72,1209.73 1103.31,1209.73 1103.89,1209.73 1104.48,1209.73 1105.07,1209.73 1105.65,1209.73 1106.24,1209.73 1106.83,1209.73 1107.41,1209.73 1108,1209.73 1108.59,1209.73 1109.17,1209.73 1109.76,1209.73 1110.34,1209.73 1110.93,1209.73 1111.52,1209.73 1112.1,1209.73 1112.69,1209.73 1113.28,1209.73 1113.86,1209.73 1114.45,1209.73 1115.04,1209.73 1115.62,1209.73 1116.21,1209.73 1116.8,1209.73 1117.38,1209.73 1117.97,1209.73 1118.55,1209.73 1119.14,1209.73 1119.73,1209.73 1120.31,1209.73 1120.9,1209.73 1121.49,1209.73 1122.07,1209.73 1122.66,1209.73 1123.25,1209.73 1123.83,1209.73 1124.42,1209.73 1125.01,1209.73 1125.59,1209.73 1126.18,1209.73 1126.76,1209.73 1127.35,1209.73 1127.94,1209.73 1128.52,1209.73 1129.11,1209.73 1129.7,1209.73 1130.28,1209.73 1130.87,1209.73 1131.46,1209.73 1132.04,1209.73 1132.63,1209.73 1133.21,1209.73 1133.8,1209.73 1134.39,1209.73 1134.97,1209.73 1135.56,1209.73 1136.15,1209.73 1136.73,1209.73 1137.32,1209.73 1137.91,1209.73 1138.49,1209.73 1139.08,1209.73 1139.67,1209.73 1140.25,1209.73 1140.84,1209.73 1141.42,1209.73 1142.01,1209.73 1142.6,1209.73 1143.18,1209.73 1143.77,1209.73 1144.36,1209.73 1144.94,1209.73 1145.53,1209.73 1146.12,1209.73 1146.7,1209.73 1147.29,1209.73 1147.88,1209.73 1148.46,1209.73 1149.05,1209.73 1149.63,1209.73 1150.22,1209.73 1150.81,1209.73 1151.39,1209.73 1151.98,1209.73 1152.57,1209.73 1153.15,1209.73 1153.74,1209.73 1154.33,1209.73 1154.91,1209.73 1155.5,1209.73 1156.09,1209.73 1156.67,1209.73 1157.26,1209.73 1157.84,1209.73 1158.43,1209.73 1159.02,1209.73 1159.6,1209.73 1160.19,1209.73 1160.78,1209.73 1161.36,1209.73 1161.95,1209.73 1162.54,1209.73 1163.12,1209.73 1163.71,1209.73 1164.29,1209.73 1164.88,1209.73 1165.47,1209.73 1166.05,1209.73 1166.64,1209.73 1167.23,1209.73 1167.81,1209.73 1168.4,1209.73 1168.99,1209.73 1169.57,1209.73 1170.16,1209.73 1170.75,1209.73 1171.33,1209.73 1171.92,1209.73 1172.5,1209.73 1173.09,1209.73 1173.68,1209.73 1174.26,1209.73 1174.85,1209.73 1175.44,1209.73 1176.02,1209.73 1176.61,1209.73 1177.2,1209.73 1177.78,1209.73 1178.37,1209.73 1178.96,1209.73 1179.54,1209.73 1180.13,1209.73 1180.71,1209.73 1181.3,1209.73 1181.89,1209.73 1182.47,1209.73 1183.06,1209.73 1183.65,1209.73 1184.23,1209.73 1184.82,1209.73 1185.41,1209.73 1185.99,1209.73 1186.58,1209.73 1187.16,1209.73 1187.75,1209.73 1188.34,1209.73 1188.92,1209.73 1189.51,1209.73 1190.1,1209.73 1190.68,1209.73 1191.27,1209.73 1191.86,1209.73 1192.44,1209.73 1193.03,1209.73 1193.62,1209.73 1194.2,1209.73 1194.79,1209.73 1195.37,1209.73 1195.96,1209.73 1196.55,1209.73 1197.13,1209.73 1197.72,1209.73 1198.31,1209.73 1198.89,1209.73 1199.48,1209.73 1200.07,1209.73 1200.65,1209.73 1201.24,1209.73 1201.83,1209.73 1202.41,1209.73 1203,1209.73 1203.58,1209.73 1204.17,1209.73 1204.76,1209.73 1205.34,1209.73 1205.93,1209.73 1206.52,1209.73 1207.1,1209.73 1207.69,1209.73 1208.28,1209.73 1208.86,1209.73 1209.45,1209.73 1210.03,1209.73 1210.62,1209.73 1211.21,1209.73 1211.79,1209.73 1212.38,1209.73 1212.97,1209.73 1213.55,1209.73 1214.14,1209.73 1214.73,1209.73 1215.31,1209.73 1215.9,1209.73 1216.49,1209.73 1217.07,1209.73 1217.66,1209.73 1218.24,1209.73 1218.83,1209.73 1219.42,1209.73 1220,1209.73 1220.59,1209.73 1221.18,1209.73 1221.76,1209.73 1222.35,1209.73 1222.94,1209.73 1223.52,1209.73 1224.11,1209.73 1224.7,1209.73 1225.28,1209.73 1225.87,1209.73 1226.45,1209.73 1227.04,1209.73 1227.63,1209.73 1228.21,1209.73 1228.8,1209.73 1229.39,1209.73 1229.97,1209.73 1230.56,1209.73 1231.15,1209.73 1231.73,1209.73 1232.32,1209.73 1232.91,1209.73 1233.49,1209.73 1234.08,1209.73 1234.66,1209.73 1235.25,1209.73 1235.84,1209.73 1236.42,1209.73 1237.01,1209.73 1237.6,1209.73 1238.18,1209.73 1238.77,1209.73 1239.36,1209.73 1239.94,1209.73 1240.53,1209.73 1241.11,1209.73 1241.7,1209.73 1242.29,1209.73 1242.87,1209.73 1243.46,1209.73 1244.05,1209.73 1244.63,1209.73 1245.22,1209.73 1245.81,1209.73 1246.39,1209.73 1246.98,1209.73 1247.57,1209.73 1248.15,1209.73 1248.74,1209.73 1249.32,1209.73 1249.91,1209.73 1250.5,1209.73 1251.08,1209.73 1251.67,1209.73 1252.26,1209.73 1252.84,1209.73 1253.43,1209.73 1254.02,1209.73 1254.6,1209.73 1255.19,1209.73 1255.78,1209.73 1256.36,1209.73 1256.95,1209.73 1257.53,1209.73 1258.12,1209.73 1258.71,1209.73 1259.29,1209.73 1259.88,1209.73 1260.47,1209.73 1261.05,1209.73 1261.64,1209.73 1262.23,1209.73 1262.81,1209.73 1263.4,1209.73 1263.98,1209.73 1264.57,1209.73 1265.16,1209.73 1265.74,1209.73 1266.33,1209.73 1266.92,1209.73 1267.5,1209.73 1268.09,1209.73 1268.68,1209.73 1269.26,1209.73 1269.85,1209.73 1270.44,1209.73 1271.02,1209.73 1271.61,1209.73 1272.19,1209.73 1272.78,1209.73 1273.37,1209.73 1273.95,1209.73 1274.54,1209.73 1275.13,1209.73 1275.71,1209.73 1276.3,1209.73 1276.89,1209.73 1277.47,1209.73 1278.06,1209.73 1278.65,1209.73 1279.23,1209.73 1279.82,1209.73 1280.4,1209.73 1280.99,1209.73 1281.58,1209.73 1282.16,1209.73 1282.75,1209.73 1283.34,1209.73 1283.92,1209.73 1284.51,1209.73 1285.1,1209.73 1285.68,1209.73 1286.27,1209.73 1286.86,1209.73 1287.44,1209.73 1288.03,1209.73 1288.61,1209.73 1289.2,1209.73 1289.79,1209.73 1290.37,1209.73 1290.96,1209.73 1291.55,1209.73 1292.13,1209.73 1292.72,1209.73 1293.31,1209.73 1293.89,1209.73 1294.48,1209.73 1295.06,1209.73 1295.65,1209.73 1296.24,1209.73 1296.82,1209.73 1297.41,1209.73 1298,1209.73 1298.58,1209.73 1299.17,1209.73 1299.76,1209.73 1300.34,1209.73 1300.93,1209.73 1301.52,1209.73 1302.1,1209.73 1302.69,1209.73 1303.27,1209.73 1303.86,1209.73 1304.45,1209.73 1305.03,1209.73 1305.62,1209.73 1306.21,1209.73 1306.79,1209.73 1307.38,1209.73 1307.97,1209.73 1308.55,1209.73 1309.14,1209.73 1309.73,1209.73 1310.31,1209.73 1310.9,1209.73 1311.48,1209.73 1312.07,1209.73 1312.66,1209.73 1313.24,1209.73 1313.83,1209.73 1314.42,1209.73 1315,1209.73 1315.59,1209.73 1316.18,1209.73 1316.76,1209.73 1317.35,1209.73 1317.93,1209.73 1318.52,1209.73 1319.11,1209.73 1319.69,1209.73 1320.28,1209.73 1320.87,1209.73 1321.45,1209.73 1322.04,1209.73 1322.63,1209.73 1323.21,1209.73 1323.8,1209.73 1324.39,1209.73 1324.97,1209.73 1325.56,1209.73 1326.14,1209.73 1326.73,1209.73 1327.32,1209.73 1327.9,1209.73 1328.49,1209.73 1329.08,1209.73 1329.66,1209.73 1330.25,1209.73 1330.84,1209.73 1331.42,1209.73 1332.01,1209.73 1332.6,1209.73 1333.18,1209.73 1333.77,1209.73 1334.35,1209.73 1334.94,1209.73 1335.53,1209.73 1336.11,1209.73 1336.7,1209.73 1337.29,1209.73 1337.87,1209.73 1338.46,1209.73 1339.05,1209.73 1339.63,1209.73 1340.22,1209.73 1340.8,1209.73 1341.39,1209.73 1341.98,1209.73 1342.56,1209.73 1343.15,1209.73 1343.74,1209.73 1344.32,1209.73 1344.91,1209.73 1345.5,1209.73 1346.08,1209.73 1346.67,1209.73 1347.26,1209.73 1347.84,1209.73 1348.43,1209.73 1349.01,1209.73 1349.6,1209.73 1350.19,1209.73 1350.77,1209.73 1351.36,1209.73 1351.95,1209.73 1352.53,1209.73 1353.12,1209.73 1353.71,1209.73 1354.29,1209.73 1354.88,1209.73 1355.47,1209.73 1356.05,1209.73 1356.64,1209.73 1357.22,1209.73 1357.81,1209.73 1358.4,1209.73 1358.98,1209.73 1359.57,1209.73 1360.16,1209.73 1360.74,1209.73 1361.33,1209.73 1361.92,1209.73 1362.5,1209.73 1363.09,1209.73 1363.68,1209.73 1364.26,1209.73 1364.85,1209.73 1365.43,1209.73 1366.02,1209.73 1366.61,1209.73 1367.19,1209.73 1367.78,1209.73 1368.37,1209.73 1368.95,1209.73 1369.54,1209.73 1370.13,1209.73 1370.71,1209.73 1371.3,1209.73 1371.88,1209.73 1372.47,1209.73 1373.06,1209.73 1373.64,1209.73 1374.23,1209.73 1374.82,1209.73 1375.4,1209.73 1375.99,1209.73 1376.58,1209.73 1377.16,1209.73 1377.75,1209.73 1378.34,1209.73 1378.92,1209.73 1379.51,1209.73 1380.09,1209.73 1380.68,1209.73 1381.27,1209.73 1381.85,1209.73 1382.44,1209.73 1383.03,1209.73 1383.61,1209.73 1384.2,1209.73 1384.79,1209.73 1385.37,1209.73 1385.96,1209.73 1386.55,1209.73 1387.13,1209.73 1387.72,1209.73 1388.3,1209.73 1388.89,1209.73 1389.48,1209.73 1390.06,1209.73 1390.65,1209.73 1391.24,1209.73 1391.82,1209.73 1392.41,1209.73 1393,1209.73 1393.58,1209.73 1394.17,1209.73 1394.75,1209.73 1395.34,1209.73 1395.93,1209.73 1396.51,1209.73 1397.1,1209.73 1397.69,1209.73 1398.27,1209.73 1398.86,1209.73 1399.45,1209.73 1400.03,1209.73 1400.62,1209.73 1401.21,1209.73 1401.79,1209.73 1402.38,1209.73 1402.96,1209.73 1403.55,1209.73 1404.14,1209.73 1404.72,1209.73 1405.31,1209.73 1405.9,1209.73 1406.48,1209.73 1407.07,1209.73 1407.66,1209.73 1408.24,1209.73 1408.83,1209.73 1409.42,1209.73 1410,1209.73 1410.59,1209.73 1411.17,1209.73 1411.76,1209.73 1412.35,1209.73 1412.93,1209.73 1413.52,1209.73 1414.11,1209.73 1414.69,1209.73 1415.28,1209.73 1415.87,1209.73 1416.45,1209.73 1417.04,1209.73 1417.63,1209.73 1418.21,1209.73 1418.8,1209.73 1419.38,1209.73 1419.97,1209.73 1420.56,1209.73 1421.14,1209.73 1421.73,1209.73 1422.32,1209.73 1422.9,1209.73 1423.49,1209.73 1424.08,1209.73 1424.66,1209.73 1425.25,1209.73 1425.83,1209.73 1426.42,1209.73 1427.01,1209.73 1427.59,1209.73 1428.18,1209.73 1428.77,1209.73 1429.35,1209.73 1429.94,1209.73 1430.53,1209.73 1431.11,1209.73 1431.7,1209.73 1432.29,1209.73 1432.87,1209.73 1433.46,1209.73 1434.04,1209.73 1434.63,1209.73 1435.22,1209.73 1435.8,1209.73 1436.39,1209.73 1436.98,1209.73 1437.56,1209.73 1438.15,1209.73 1438.74,1209.73 1439.32,1209.73 1439.91,1209.73 1440.5,1209.73 1441.08,1209.73 1441.67,1209.73 1442.25,1209.73 1442.84,1209.73 1443.43,1209.73 1444.01,1209.73 1444.6,1209.73 1445.19,1209.73 1445.77,1209.73 1446.36,1209.73 1446.95,1209.73 1447.53,1209.73 1448.12,1209.73 1448.7,1209.73 1449.29,1209.73 1449.88,1209.73 1450.46,1209.73 1451.05,1209.73 1451.64,1209.73 1452.22,1209.73 1452.81,1209.73 1453.4,1209.73 1453.98,1209.73 1454.57,1209.73 1455.16,1209.73 1455.74,1209.73 1456.33,1209.73 1456.91,1209.73 1457.5,1209.73 1458.09,1209.73 1458.67,1209.73 1459.26,1209.73 1459.85,1209.73 1460.43,1209.73 1461.02,1209.73 1461.61,1209.73 1462.19,1209.73 1462.78,1209.73 1463.37,1209.73 1463.95,1209.73 1464.54,1209.73 1465.12,1209.73 1465.71,1209.73 1466.3,1209.73 1466.88,1209.73 1467.47,1209.73 1468.06,1209.73 1468.64,1209.73 1469.23,1209.73 1469.82,1209.73 1470.4,1209.73 1470.99,1209.73 1471.57,1209.73 1472.16,1209.73 1472.75,1209.73 1473.33,1209.73 1473.92,1209.73 1474.51,1209.73 1475.09,1209.73 1475.68,1209.73 1476.27,1209.73 1476.85,1209.73 1477.44,1209.73 1478.03,1209.73 1478.61,1209.73 1479.2,1209.73 1479.78,1209.73 1480.37,1209.73 1480.96,1209.73 1481.54,1209.73 1482.13,1209.73 1482.72,1209.73 1483.3,1209.73 1483.89,1209.73 1484.48,1209.73 1485.06,1209.73 1485.65,1209.73 1486.24,1209.73 1486.82,1209.73 1487.41,1209.73 1487.99,1209.73 1488.58,1209.73 1489.17,1209.73 1489.75,1209.73 1490.34,1209.73 1490.93,1209.73 1491.51,1209.73 1492.1,1209.73 1492.69,1209.73 1493.27,1209.73 1493.86,1209.73 1494.45,1209.73 1495.03,1209.73 1495.62,1209.73 1496.2,1209.73 1496.79,1209.73 1497.38,1209.73 1497.96,1209.73 1498.55,1209.73 1499.14,1209.73 1499.72,1209.73 1500.31,1209.73 1500.9,1209.73 1501.48,1209.73 1502.07,1209.73 1502.65,1209.73 1503.24,1209.73 1503.83,1209.73 1504.41,1209.73 1505,1209.73 1505.59,1209.73 1506.17,1209.73 1506.76,1209.73 1507.35,1209.73 1507.93,1209.73 1508.52,1209.73 1509.11,1209.73 1509.69,1209.73 1510.28,1209.73 1510.86,1209.73 1511.45,1209.73 1512.04,1209.73 1512.62,1209.73 1513.21,1209.73 1513.8,1209.73 1514.38,1209.73 1514.97,1209.73 1515.56,1209.73 1516.14,1209.73 1516.73,1209.73 1517.32,1209.73 1517.9,1209.73 1518.49,1209.73 1519.07,1209.73 1519.66,1209.73 1520.25,1209.73 1520.83,1209.73 1521.42,1209.73 1522.01,1209.73 1522.59,1209.73 1523.18,1209.73 1523.77,1209.73 1524.35,1209.73 1524.94,1209.73 1525.52,1209.73 1526.11,1209.73 1526.7,1209.73 1527.28,1209.73 1527.87,1209.73 1528.46,1209.73 1529.04,1209.73 1529.63,1209.73 1530.22,1209.73 1530.8,1209.73 1531.39,1209.73 1531.98,1209.73 1532.56,1209.73 1533.15,1209.73 1533.73,1209.73 1534.32,1209.73 1534.91,1209.73 1535.49,1209.73 1536.08,1209.73 1536.67,1209.73 1537.25,1209.73 1537.84,1209.73 1538.43,1209.73 1539.01,1209.73 1539.6,1209.73 1540.19,1209.73 1540.77,1209.73 1541.36,1209.73 1541.94,1209.73 1542.53,1209.73 1543.12,1209.73 1543.7,1209.73 1544.29,1209.73 1544.88,1209.73 1545.46,1209.73 1546.05,1209.73 1546.64,1209.73 1547.22,1209.73 1547.81,1209.73 1548.4,1209.73 1548.98,1209.73 1549.57,1209.73 1550.15,1209.73 1550.74,1209.73 1551.33,1209.73 1551.91,1209.73 1552.5,1209.73 1553.09,1209.73 1553.67,1209.73 1554.26,1209.73 1554.85,1209.73 1555.43,1209.73 1556.02,1209.73 1556.6,1209.73 1557.19,1209.73 1557.78,1209.73 1558.36,1209.73 1558.95,1209.73 1559.54,1209.73 1560.12,1209.73 1560.71,1209.73 1561.3,1209.73 1561.88,1209.73 1562.47,1209.73 1563.06,1209.73 1563.64,1209.73 1564.23,1209.73 1564.81,1209.73 1565.4,1209.73 1565.99,1209.73 1566.57,1209.73 1567.16,1209.73 1567.75,1209.73 1568.33,1209.73 1568.92,1209.73 1569.51,1209.73 1570.09,1209.73 1570.68,1209.73 1571.27,1209.73 1571.85,1209.73 1572.44,1209.73 1573.02,1209.73 1573.61,1209.73 1574.2,1209.73 1574.78,1209.73 1575.37,1209.73 1575.96,1209.73 1576.54,1209.73 1577.13,1209.73 1577.72,1209.73 1578.3,1209.73 1578.89,1209.73 1579.47,1209.73 1580.06,1209.73 1580.65,1209.73 1581.23,1209.73 1581.82,1209.73 1582.41,1209.73 1582.99,1209.73 1583.58,1209.73 1584.17,1209.73 1584.75,1209.73 1585.34,1209.73 1585.93,1209.73 1586.51,1209.73 1587.1,1209.73 1587.68,1209.73 1588.27,1209.73 1588.86,1209.73 1589.44,1209.73 1590.03,1209.73 1590.62,1209.73 1591.2,1209.73 1591.79,1209.73 1592.38,1209.73 1592.96,1209.73 1593.55,1209.73 1594.14,1209.73 1594.72,1209.73 1595.31,1209.73 1595.89,1209.73 1596.48,1209.73 1597.07,1209.73 1597.65,1209.73 1598.24,1209.73 1598.83,1209.73 1599.41,1209.73 1600,1209.73 1600.59,1209.73 1601.17,1209.73 1601.76,1209.73 1602.34,1209.73 1602.93,1209.73 1603.52,1209.73 1604.1,1209.73 1604.69,1209.73 1605.28,1209.73 1605.86,1209.73 1606.45,1209.73 1607.04,1209.73 1607.62,1209.73 1608.21,1209.73 1608.8,1209.73 1609.38,1209.73 1609.97,1209.73 1610.55,1209.73 1611.14,1209.73 1611.73,1209.73 1612.31,1209.73 1612.9,1209.73 1613.49,1209.73 1614.07,1209.73 1614.66,1209.73 1615.25,1209.73 1615.83,1209.73 1616.42,1209.73 1617.01,1209.73 1617.59,1209.73 1618.18,1209.73 1618.76,1209.73 1619.35,1209.73 1619.94,1209.73 1620.52,1209.73 1621.11,1209.73 1621.7,1209.73 1622.28,1209.73 1622.87,1209.73 1623.46,1209.73 1624.04,1209.73 1624.63,1209.73 1625.22,1209.73 1625.8,1209.73 1626.39,1209.73 1626.97,1209.73 1627.56,1209.73 1628.15,1209.73 1628.73,1209.73 1629.32,1209.73 1629.91,1209.73 1630.49,1209.73 1631.08,1209.73 1631.67,1209.73 1632.25,1209.73 1632.84,1209.73 1633.42,1209.73 1634.01,1209.73 1634.6,1209.73 1635.18,1209.73 1635.77,1209.73 1636.36,1209.73 1636.94,1209.73 1637.53,1209.73 1638.12,1209.73 1638.7,1209.73 1639.29,1209.73 1639.88,1209.73 1640.46,1209.73 1641.05,1209.73 1641.63,1209.73 1642.22,1209.73 1642.81,1209.73 1643.39,1209.73 1643.98,1209.73 1644.57,1209.73 1645.15,1209.73 1645.74,1209.73 1646.33,1209.73 1646.91,1209.73 1647.5,1209.73 1648.09,1209.73 1648.67,1209.73 1649.26,1209.73 1649.84,1209.73 1650.43,1209.73 1651.02,1209.73 1651.6,1209.73 1652.19,1209.73 1652.78,1209.73 1653.36,1209.73 1653.95,1209.73 1654.54,1209.73 1655.12,1209.73 1655.71,1209.73 1656.29,1209.73 1656.88,1209.73 1657.47,1209.73 1658.05,1209.73 1658.64,1209.73 1659.23,1209.73 1659.81,1209.73 1660.4,1209.73 1660.99,1209.73 1661.57,1209.73 1662.16,1209.73 1662.75,1209.73 1663.33,1209.73 1663.92,1209.73 1664.5,1209.73 1665.09,1209.73 1665.68,1209.73 1666.26,1209.73 1666.85,1209.73 1667.44,1209.73 1668.02,1209.73 1668.61,1209.73 1669.2,1209.73 1669.78,1209.73 1670.37,1209.73 1670.96,1209.73 1671.54,1209.73 1672.13,1209.73 1672.71,1209.73 1673.3,1209.73 1673.89,1209.73 1674.47,1209.73 1675.06,1209.73 1675.65,1209.73 1676.23,1209.73 1676.82,1209.73 1677.41,1209.73 1677.99,1209.73 1678.58,1209.73 1679.17,1209.73 1679.75,1209.73 1680.34,1209.73 1680.92,1209.73 1681.51,1209.73 1682.1,1209.73 1682.68,1209.73 1683.27,1209.73 1683.86,1209.73 1684.44,1209.73 1685.03,1209.73 1685.62,1209.73 1686.2,1209.73 1686.79,1209.73 1687.37,1209.73 1687.96,1209.73 1688.55,1209.73 1689.13,1209.73 1689.72,1209.73 1690.31,1209.73 1690.89,1209.73 1691.48,1209.73 1692.07,1209.73 1692.65,1209.73 1693.24,1209.73 1693.83,1209.73 1694.41,1209.73 1695,1209.73 1695.58,1209.73 1696.17,1209.73 1696.76,1209.73 1697.34,1209.73 1697.93,1209.73 1698.52,1209.73 1699.1,1209.73 1699.69,1209.73 1700.28,1209.73 1700.86,1209.73 1701.45,1209.73 1702.04,1209.73 1702.62,1209.73 1703.21,1209.73 1703.79,1209.73 1704.38,1209.73 1704.97,1209.73 1705.55,1209.73 1706.14,1209.73 1706.73,1209.73 1707.31,1209.73 1707.9,1209.73 1708.49,1209.73 1709.07,1209.73 1709.66,1209.73 1710.24,1209.73 1710.83,1209.73 1711.42,1209.73 1712,1209.73 1712.59,1209.73 1713.18,1209.73 1713.76,1209.73 1714.35,1209.73 1714.94,1209.73 1715.52,1209.73 1716.11,1209.73 1716.7,1209.73 1717.28,1209.73 1717.87,1209.73 1718.45,1209.73 1719.04,1209.73 1719.63,1209.73 1720.21,1209.73 1720.8,1209.73 1721.39,1209.73 1721.97,1209.73 1722.56,1209.73 1723.15,1209.73 1723.73,1209.73 1724.32,1209.73 1724.91,1209.73 1725.49,1209.73 1726.08,1209.73 1726.66,1209.73 1727.25,1209.73 1727.84,1209.73 1728.42,1209.73 1729.01,1209.73 1729.6,1209.73 1730.18,1209.73 1730.77,1209.73 1731.36,1209.73 1731.94,1209.73 1732.53,1209.73 1733.11,1209.73 1733.7,1209.73 1734.29,1209.73 1734.87,1209.73 1735.46,1209.73 1736.05,1209.73 1736.63,1209.73 1737.22,1209.73 1737.81,1209.73 1738.39,1209.73 1738.98,1209.73 1739.57,1209.73 1740.15,1209.73 1740.74,1209.73 1741.32,1209.73 1741.91,1209.73 1742.5,1209.73 1743.08,1209.73 1743.67,1209.73 1744.26,1209.73 1744.84,1209.73 1745.43,1209.73 1746.02,1209.73 1746.6,1209.73 1747.19,1209.73 1747.78,1209.73 1748.36,1209.73 1748.95,1209.73 1749.53,1209.73 1750.12,1209.73 1750.71,1209.73 1751.29,1209.73 1751.88,1209.73 1752.47,1209.73 1753.05,1209.73 1753.64,1209.73 1754.23,1209.73 1754.81,1209.73 1755.4,1209.73 1755.99,1209.73 1756.57,1209.73 1757.16,1209.73 1757.74,1209.73 1758.33,1209.73 1758.92,1209.73 1759.5,1209.73 1760.09,1209.73 1760.68,1209.73 1761.26,1209.73 1761.85,1209.73 1762.44,1209.73 1763.02,1209.73 1763.61,1209.73 1764.19,1209.73 1764.78,1209.73 1765.37,1209.73 1765.95,1209.73 1766.54,1209.73 1767.13,1209.73 1767.71,1209.73 1768.3,1209.73 1768.89,1209.73 1769.47,1209.73 1770.06,1209.73 1770.65,1209.73 1771.23,1209.73 1771.82,1209.73 1772.4,1209.73 1772.99,1209.73 1773.58,1209.73 1774.16,1209.73 1774.75,1209.73 1775.34,1209.73 1775.92,1209.73 1776.51,1209.73 1777.1,1209.73 1777.68,1209.73 1778.27,1209.73 1778.86,1209.73 1779.44,1209.73 1780.03,1209.73 1780.61,1209.73 1781.2,1209.73 1781.79,1209.73 1782.37,1209.73 1782.96,1209.73 1783.55,1209.73 1784.13,1209.73 1784.72,1209.73 1785.31,1209.73 1785.89,1209.73 1786.48,1209.73 1787.06,1209.73 1787.65,1209.73 1788.24,1209.73 1788.82,1209.73 1789.41,1209.73 1790,1209.73 1790.58,1209.73 1791.17,1209.73 1791.76,1209.73 1792.34,1209.73 1792.93,1209.73 1793.52,1209.73 1794.1,1209.73 1794.69,1209.73 1795.27,1209.73 1795.86,1209.73 1796.45,1209.73 1797.03,1209.73 1797.62,1209.73 1798.21,1209.73 1798.79,1209.73 1799.38,1209.73 1799.97,1209.73 1800.55,1209.73 1801.14,1209.73 1801.73,1209.73 1802.31,1209.73 1802.9,1209.73 1803.48,1209.73 1804.07,1209.73 1804.66,1209.73 1805.24,1209.73 1805.83,1209.73 1806.42,1209.73 1807,1209.73 1807.59,1209.73 1808.18,1209.73 1808.76,1209.73 1809.35,1209.73 1809.94,1209.73 1810.52,1209.73 1811.11,1209.73 1811.69,1209.73 1812.28,1209.73 1812.87,1209.73 1813.45,1209.73 1814.04,1209.73 1814.63,1209.73 1815.21,1209.73 1815.8,1209.73 1816.39,1209.73 1816.97,1209.73 1817.56,1209.73 1818.14,1209.73 1818.73,1209.73 1819.32,1209.73 1819.9,1209.73 1820.49,1209.73 1821.08,1209.73 1821.66,1209.73 1822.25,1209.73 1822.84,1209.73 1823.42,1209.73 1824.01,1209.73 1824.6,1209.73 1825.18,1209.73 1825.77,1209.73 1826.35,1209.73 1826.94,1209.73 1827.53,1209.73 1828.11,1209.73 1828.7,1209.73 1829.29,1209.73 1829.87,1209.73 1830.46,1209.73 1831.05,1209.73 1831.63,1209.73 1832.22,1209.73 1832.81,1209.73 1833.39,1209.73 1833.98,1209.73 1834.56,1209.73 1835.15,1209.73 1835.74,1209.73 1836.32,1209.73 1836.91,1209.73 1837.5,1209.73 1838.08,1209.73 1838.67,1209.73 1839.26,1209.73 1839.84,1209.73 1840.43,1209.73 1841.01,1209.73 1841.6,1209.73 1842.19,1209.73 1842.77,1209.73 1843.36,1209.73 1843.95,1209.73 1844.53,1209.73 1845.12,1209.73 1845.71,1209.73 1846.29,1209.73 1846.88,1209.73 1847.47,1209.73 1848.05,1209.73 1848.64,1209.73 1849.22,1209.73 1849.81,1209.73 1850.4,1209.73 1850.98,1209.73 1851.57,1209.73 1852.16,1209.73 1852.74,1209.73 1853.33,1209.73 1853.92,1209.73 1854.5,1209.73 1855.09,1209.73 1855.68,1209.73 1856.26,1209.73 1856.85,1209.73 1857.43,1209.73 1858.02,1209.73 1858.61,1209.73 1859.19,1209.73 1859.78,1209.73 1860.37,1209.73 1860.95,1209.73 1861.54,1209.73 1862.13,1209.73 1862.71,1209.73 1863.3,1209.73 1863.88,1209.73 1864.47,1209.73 1865.06,1209.73 1865.64,1209.73 1866.23,1209.73 1866.82,1209.73 1867.4,1209.73 1867.99,1209.73 1868.58,1209.73 1869.16,1209.73 1869.75,1209.73 1870.34,1209.73 1870.92,1209.73 1871.51,1209.73 1872.09,1209.73 1872.68,1209.73 1873.27,1209.73 1873.85,1209.73 1874.44,1209.73 1875.03,1209.73 1875.61,1209.73 1876.2,1209.73 1876.79,1209.73 1877.37,1209.73 1877.96,1209.73 1878.55,1209.73 1879.13,1209.73 1879.72,1209.73 1880.3,1209.73 1880.89,1209.73 1881.48,1209.73 1882.06,1209.73 1882.65,1209.73 1883.24,1209.73 1883.82,1209.73 1884.41,1209.73 1885,1209.73 1885.58,1209.73 1886.17,1209.73 1886.76,1209.73 1887.34,1209.73 1887.93,1209.73 1888.51,1209.73 1889.1,1209.73 1889.69,1209.73 1890.27,1209.73 1890.86,1209.73 1891.45,1209.73 1892.03,1209.73 1892.62,1209.73 1893.21,1209.73 1893.79,1209.73 1894.38,1209.73 1894.96,1209.73 1895.55,1209.73 1896.14,1209.73 1896.72,1209.73 1897.31,1209.73 1897.9,1209.73 1898.48,1209.73 1899.07,1209.73 1899.66,1209.73 1900.24,1209.73 1900.83,1209.73 1901.42,1209.73 1902,1209.73 1902.59,1209.73 1903.17,1209.73 1903.76,1209.73 1904.35,1209.73 1904.93,1209.73 1905.52,1209.73 1906.11,1209.73 1906.69,1209.73 1907.28,1209.73 1907.87,1209.73 1908.45,1209.73 1909.04,1209.73 1909.63,1209.73 1910.21,1209.73 1910.8,1209.73 1911.38,1209.73 1911.97,1209.73 1912.56,1209.73 1913.14,1209.73 1913.73,1209.73 1914.32,1209.73 1914.9,1209.73 1915.49,1209.73 1916.08,1209.73 1916.66,1209.73 1917.25,1209.73 1917.83,1209.73 1918.42,1209.73 1919.01,1209.73 1919.59,1209.73 1920.18,1209.73 1920.77,1209.73 1921.35,1209.73 1921.94,1209.73 1922.53,1209.73 1923.11,1209.73 1923.7,1209.73 1924.29,1209.73 1924.87,1209.73 1925.46,1209.73 1926.04,1209.73 1926.63,1209.73 1927.22,1209.73 1927.8,1209.73 1928.39,1209.73 1928.98,1209.73 1929.56,1209.73 1930.15,1209.73 1930.74,1209.73 1931.32,1209.73 1931.91,1209.73 1932.5,1209.73 1933.08,1209.73 1933.67,1209.73 1934.25,1209.73 1934.84,1209.73 1935.43,1209.73 1936.01,1209.73 1936.6,1209.73 1937.19,1209.73 1937.77,1209.73 1938.36,1209.73 1938.95,1209.73 1939.53,1209.73 1940.12,1209.73 1940.71,1209.73 1941.29,1209.73 1941.88,1209.73 1942.46,1209.73 1943.05,1209.73 1943.64,1209.73 1944.22,1209.73 1944.81,1209.73 1945.4,1209.73 1945.98,1209.73 1946.57,1209.73 1947.16,1209.73 1947.74,1209.73 1948.33,1209.73 1948.91,1209.73 1949.5,1209.73 1950.09,1209.73 1950.67,1209.73 1951.26,1209.73 1951.85,1209.73 1952.43,1209.73 1953.02,1209.73 1953.61,1209.73 1954.19,1209.73 1954.78,1209.73 1955.37,1209.73 1955.95,1209.73 1956.54,1209.73 1957.12,1209.73 1957.71,1209.73 1958.3,1209.73 1958.88,1209.73 1959.47,1209.73 1960.06,1209.73 1960.64,1209.73 1961.23,1209.73 1961.82,1209.73 1962.4,1209.73 1962.99,1209.73 1963.58,1209.73 1964.16,1209.73 1964.75,1209.73 1965.33,1209.73 1965.92,1209.73 1966.51,1209.73 1967.09,1209.73 1967.68,1209.73 1968.27,1209.73 1968.85,1209.73 1969.44,1209.73 1970.03,1209.73 1970.61,1209.73 1971.2,1209.73 1971.78,1209.73 1972.37,1209.73 1972.96,1209.73 1973.54,1209.73 1974.13,1209.73 1974.72,1209.73 1975.3,1209.73 1975.89,1209.73 1976.48,1209.73 1977.06,1209.73 1977.65,1209.73 1978.24,1209.73 1978.82,1209.73 1979.41,1209.73 1979.99,1209.73 1980.58,1209.73 1981.17,1209.73 1981.75,1209.73 1982.34,1209.73 1982.93,1209.73 1983.51,1209.73 1984.1,1209.73 1984.69,1209.73 1985.27,1209.73 1985.86,1209.73 1986.45,1209.73 1987.03,1209.73 1987.62,1209.73 1988.2,1209.73 1988.79,1209.73 1989.38,1209.73 1989.96,1209.73 1990.55,1209.73 1991.14,1209.73 1991.72,1209.73 1992.31,1209.73 1992.9,1209.73 1993.48,1209.73 1994.07,1209.73 1994.65,1209.73 1995.24,1209.73 1995.83,1209.73 1996.41,1209.73 1997,1209.73 1997.59,1209.73 1998.17,1209.73 1998.76,1209.73 1999.35,1209.73 1999.93,1209.73 2000.52,1209.73 2001.11,1209.73 2001.69,1209.73 2002.28,1209.73 2002.86,1209.73 2003.45,1209.73 2004.04,1209.73 2004.62,1209.73 2005.21,1209.73 2005.8,1209.73 2006.38,1209.73 2006.97,1209.73 2007.56,1209.73 2008.14,1209.73 2008.73,1209.73 2009.32,1209.73 2009.9,1209.73 2010.49,1209.73 2011.07,1209.73 2011.66,1209.73 2012.25,1209.73 2012.83,1209.73 2013.42,1209.73 2014.01,1209.73 2014.59,1209.73 2015.18,1209.73 2015.77,1209.73 2016.35,1209.73 2016.94,1209.73 2017.53,1209.73 2018.11,1209.73 2018.7,1209.73 2019.28,1209.73 2019.87,1209.73 2020.46,1209.73 2021.04,1209.73 2021.63,1209.73 2022.22,1209.73 2022.8,1209.73 2023.39,1209.73 2023.98,1209.73 2024.56,1209.73 2025.15,1209.73 2025.73,1209.73 2026.32,1209.73 2026.91,1209.73 2027.49,1209.73 2028.08,1209.73 2028.67,1209.73 2029.25,1209.73 2029.84,1209.73 2030.43,1209.73 2031.01,1209.73 2031.6,1209.73 2032.19,1209.73 2032.77,1209.73 2033.36,1209.73 2033.94,1209.73 2034.53,1209.73 2035.12,1209.73 2035.7,1209.73 2036.29,1209.73 2036.88,1209.73 2037.46,1209.73 2038.05,1209.73 2038.64,1209.73 2039.22,1209.73 2039.81,1209.73 2040.4,1209.73 2040.98,1209.73 2041.57,1209.73 2042.15,1209.73 2042.74,1209.73 2043.33,1209.73 2043.91,1209.73 2044.5,1209.73 2045.09,1209.73 2045.67,1209.73 2046.26,1209.73 2046.85,1209.73 2047.43,1209.73 2048.02,1209.73 2048.6,1209.73 2049.19,1209.73 2049.78,1209.73 2050.36,1209.73 2050.95,1209.73 2051.54,1209.73 2052.12,1209.73 2052.71,1209.73 2053.3,1209.73 2053.88,1209.73 2054.47,1209.73 2055.06,1209.73 2055.64,1209.73 2056.23,1209.73 2056.81,1209.73 2057.4,1209.73 2057.99,1209.73 2058.57,1209.73 2059.16,1209.73 2059.75,1209.73 2060.33,1209.73 2060.92,1209.73 2061.51,1209.73 2062.09,1209.73 2062.68,1209.73 2063.27,1209.73 2063.85,1209.73 2064.44,1209.73 2065.02,1209.73 2065.61,1209.73 2066.2,1209.73 2066.78,1209.73 2067.37,1209.73 2067.96,1209.73 2068.54,1209.73 2069.13,1209.73 2069.72,1209.73 2070.3,1209.73 2070.89,1209.73 2071.48,1209.73 2072.06,1209.73 2072.65,1209.73 2073.23,1209.73 2073.82,1209.73 2074.41,1209.73 2074.99,1209.73 2075.58,1209.73 2076.17,1209.73 2076.75,1209.73 2077.34,1209.73 2077.93,1209.73 2078.51,1209.73 2079.1,1209.73 2079.68,1209.73 2080.27,1209.73 2080.86,1209.73 2081.44,1209.73 2082.03,1209.73 2082.62,1209.73 2083.2,1209.73 2083.79,1209.73 2084.38,1209.73 2084.96,1209.73 2085.55,1209.73 2086.14,1209.73 2086.72,1209.73 2087.31,1209.73 2087.89,1209.73 2088.48,1209.73 2089.07,1209.73 2089.65,1209.73 2090.24,1209.73 2090.83,1209.73 2091.41,1209.73 2092,1209.73 2092.59,1209.73 2093.17,1209.73 2093.76,1209.73 2094.35,1209.73 2094.93,1209.73 2095.52,1209.73 2096.1,1209.73 2096.69,1209.73 2097.28,1209.73 2097.86,1209.73 2098.45,1209.73 2099.04,1209.73 2099.62,1209.73 2100.21,1209.73 2100.8,1209.73 2101.38,1209.73 2101.97,1209.73 2102.55,1209.73 2103.14,1209.73 2103.73,1209.73 2104.31,1209.73 2104.9,1209.73 2105.49,1209.73 2106.07,1209.73 2106.66,1209.73 2107.25,1209.73 2107.83,1209.73 2108.42,1209.73 2109.01,1209.73 2109.59,1209.73 2110.18,1209.73 2110.76,1209.73 2111.35,1209.73 2111.94,1209.73 2112.52,1209.73 2113.11,1209.73 2113.7,1209.73 2114.28,1209.73 2114.87,1209.73 2115.46,1209.73 2116.04,1209.73 2116.63,1209.73 2117.22,1209.73 2117.8,1209.73 2118.39,1209.73 2118.97,1209.73 2119.56,1209.73 2120.15,1209.73 2120.73,1209.73 2121.32,1209.73 2121.91,1209.73 2122.49,1209.73 2123.08,1209.73 2123.67,1209.73 2124.25,1209.73 2124.84,1209.73 2125.42,1209.73 2126.01,1209.73 2126.6,1209.73 2127.18,1209.73 2127.77,1209.73 2128.36,1209.73 2128.94,1209.73 2129.53,1209.73 2130.12,1209.73 2130.7,1209.73 2131.29,1209.73 2131.88,1209.73 2132.46,1209.73 2133.05,1209.73 2133.63,1209.73 2134.22,1209.73 2134.81,1209.73 2135.39,1209.73 2135.98,1209.73 2136.57,1209.73 2137.15,1209.73 2137.74,1209.73 2138.33,1209.73 2138.91,1209.73 2139.5,1209.73 2140.09,1209.73 2140.67,1209.73 2141.26,1209.73 2141.84,1209.73 2142.43,1209.73 2143.02,1209.73 2143.6,1209.73 2144.19,1209.73 2144.78,1209.73 2145.36,1209.73 2145.95,1209.73 2146.54,1209.73 2147.12,1209.73 2147.71,1209.73 2148.3,1209.73 2148.88,1209.73 2149.47,1209.73 2150.05,1209.73 2150.64,1209.73 2151.23,1209.73 2151.81,1209.73 2152.4,1209.73 2152.99,1209.73 2153.57,1209.73 2154.16,1209.73 2154.75,1209.73 2155.33,1209.73 2155.92,1209.73 2156.5,1209.73 2157.09,1209.73 2157.68,1209.73 2158.26,1209.73 \"/>\n<path clip-path=\"url(#clip222)\" d=\"M986.025 1209.59 L986.612 1209.59 L987.198 1209.59 L987.785 1209.59 L988.371 1209.59 L988.957 1209.59 L989.544 1209.59 L990.13 1209.59 L990.717 1209.59 L991.303 1209.59 L991.889 1209.59 L992.476 1209.59 L993.062 1209.59 L993.649 1209.59 L994.235 1209.59 L994.822 1209.59 L995.408 1209.59 L995.994 1209.59 L996.581 1209.59 L997.167 1209.59 L997.754 1209.59 L998.34 1209.59 L998.926 1209.59 L999.513 1209.59 L1000.1 1209.59 L1000.69 1209.59 L1001.27 1209.59 L1001.86 1209.59 L1002.44 1209.59 L1003.03 1209.59 L1003.62 1209.59 L1004.2 1209.59 L1004.79 1209.59 L1005.38 1209.59 L1005.96 1209.59 L1006.55 1209.59 L1007.14 1209.59 L1007.72 1209.59 L1008.31 1209.59 L1008.9 1209.59 L1009.48 1209.59 L1010.07 1209.59 L1010.65 1209.59 L1011.24 1209.59 L1011.83 1209.59 L1012.41 1209.59 L1013 1209.59 L1013.59 1209.59 L1014.17 1209.59 L1014.76 1209.59 L1015.35 1209.59 L1015.93 1209.59 L1016.52 1209.59 L1017.11 1209.59 L1017.69 1209.59 L1018.28 1209.59 L1018.86 1209.59 L1019.45 1209.59 L1020.04 1209.59 L1020.62 1209.59 L1021.21 1209.59 L1021.8 1209.59 L1022.38 1209.59 L1022.97 1209.59 L1023.56 1209.59 L1024.14 1209.59 L1024.73 1209.59 L1025.32 1209.59 L1025.9 1209.59 L1026.49 1209.59 L1027.07 1209.59 L1027.66 1209.59 L1028.25 1209.59 L1028.83 1209.59 L1029.42 1209.59 L1030.01 1209.59 L1030.59 1209.59 L1031.18 1209.59 L1031.77 1209.59 L1032.35 1209.59 L1032.94 1209.59 L1033.52 1209.59 L1034.11 1209.59 L1034.7 1209.59 L1035.28 1209.59 L1035.87 1209.59 L1036.46 1209.59 L1037.04 1209.59 L1037.63 1209.59 L1038.22 1209.59 L1038.8 1209.59 L1039.39 1209.59 L1039.98 1209.59 L1040.56 1209.59 L1041.15 1209.59 L1041.73 1209.59 L1042.32 1209.59 L1042.91 1209.59 L1043.49 1209.59 L1044.08 1209.59 L1044.67 1209.59 L1045.25 1209.59 L1045.84 1209.59 L1046.43 1209.59 L1047.01 1209.59 L1047.6 1209.59 L1048.19 1209.59 L1048.77 1209.59 L1049.36 1209.59 L1049.94 1209.59 L1050.53 1209.59 L1051.12 1209.59 L1051.7 1209.59 L1052.29 1209.59 L1052.88 1209.59 L1053.46 1209.59 L1054.05 1209.59 L1054.64 1209.59 L1055.22 1209.59 L1055.81 1209.59 L1056.39 1209.59 L1056.98 1209.59 L1057.57 1209.59 L1058.15 1209.59 L1058.74 1209.59 L1059.33 1209.59 L1059.91 1209.59 L1060.5 1209.59 L1061.09 1209.59 L1061.67 1209.59 L1062.26 1209.59 L1062.85 1209.59 L1063.43 1209.59 L1064.02 1209.59 L1064.6 1209.59 L1065.19 1209.59 L1065.78 1209.59 L1066.36 1209.59 L1066.95 1209.59 L1067.54 1209.59 L1068.12 1209.59 L1068.71 1209.59 L1069.3 1209.59 L1069.88 1209.59 L1070.47 1209.59 L1071.06 1209.59 L1071.64 1209.59 L1072.23 1209.59 L1072.81 1209.59 L1073.4 1209.59 L1073.99 1209.59 L1074.57 1209.59 L1075.16 1209.59 L1075.75 1209.59 L1076.33 1209.59 L1076.92 1209.59 L1077.51 1209.59 L1078.09 1209.59 L1078.68 1209.59 L1079.26 1209.59 L1079.85 1209.59 L1080.44 1209.59 L1081.02 1209.59 L1081.61 1209.59 L1082.2 1209.59 L1082.78 1209.59 L1083.37 1209.59 L1083.96 1209.59 L1084.54 1209.59 L1085.13 1209.59 L1085.72 1209.59 L1086.3 1209.59 L1086.89 1209.59 L1087.47 1209.59 L1088.06 1209.59 L1088.65 1209.59 L1089.23 1209.59 L1089.82 1209.59 L1090.41 1209.59 L1090.99 1209.59 L1091.58 1209.59 L1092.17 1209.59 L1092.75 1209.59 L1093.34 1209.59 L1093.93 1209.59 L1094.51 1209.59 L1095.1 1209.59 L1095.68 1209.59 L1096.27 1209.59 L1096.86 1209.59 L1097.44 1209.59 L1098.03 1209.59 L1098.62 1209.59 L1099.2 1209.59 L1099.79 1209.59 L1100.38 1209.59 L1100.96 1209.59 L1101.55 1209.59 L1102.14 1209.59 L1102.72 1209.59 L1103.31 1209.59 L1103.89 1209.59 L1104.48 1209.59 L1105.07 1209.59 L1105.65 1209.59 L1106.24 1209.59 L1106.83 1209.59 L1107.41 1209.59 L1108 1209.59 L1108.59 1209.59 L1109.17 1209.59 L1109.76 1209.59 L1110.34 1209.59 L1110.93 1209.59 L1111.52 1209.59 L1112.1 1209.59 L1112.69 1209.59 L1113.28 1209.59 L1113.86 1209.59 L1114.45 1209.59 L1115.04 1209.59 L1115.62 1209.59 L1116.21 1209.59 L1116.8 1209.59 L1117.38 1209.59 L1117.97 1209.59 L1118.55 1209.59 L1119.14 1209.59 L1119.73 1209.59 L1120.31 1209.59 L1120.9 1209.59 L1121.49 1209.59 L1122.07 1209.59 L1122.66 1209.59 L1123.25 1209.59 L1123.83 1209.59 L1124.42 1209.59 L1125.01 1209.59 L1125.59 1209.59 L1126.18 1209.59 L1126.76 1209.59 L1127.35 1209.59 L1127.94 1209.59 L1128.52 1209.59 L1129.11 1209.59 L1129.7 1209.59 L1130.28 1209.59 L1130.87 1209.59 L1131.46 1209.59 L1132.04 1209.59 L1132.63 1209.59 L1133.21 1209.59 L1133.8 1209.59 L1134.39 1209.59 L1134.97 1209.59 L1135.56 1209.59 L1136.15 1209.59 L1136.73 1209.59 L1137.32 1209.59 L1137.91 1209.59 L1138.49 1209.59 L1139.08 1209.59 L1139.67 1209.59 L1140.25 1209.59 L1140.84 1209.59 L1141.42 1209.59 L1142.01 1209.59 L1142.6 1209.59 L1143.18 1209.59 L1143.77 1209.59 L1144.36 1209.59 L1144.94 1209.59 L1145.53 1209.59 L1146.12 1209.59 L1146.7 1209.59 L1147.29 1209.59 L1147.88 1209.59 L1148.46 1209.59 L1149.05 1209.59 L1149.63 1209.59 L1150.22 1209.59 L1150.81 1209.59 L1151.39 1209.59 L1151.98 1209.59 L1152.57 1209.59 L1153.15 1209.59 L1153.74 1209.59 L1154.33 1209.59 L1154.91 1209.59 L1155.5 1209.59 L1156.09 1209.59 L1156.67 1209.59 L1157.26 1209.59 L1157.84 1209.59 L1158.43 1209.59 L1159.02 1209.59 L1159.6 1209.59 L1160.19 1209.59 L1160.78 1209.59 L1161.36 1209.59 L1161.95 1209.59 L1162.54 1209.59 L1163.12 1209.59 L1163.71 1209.59 L1164.29 1209.59 L1164.88 1209.59 L1165.47 1209.59 L1166.05 1209.59 L1166.64 1209.59 L1167.23 1209.59 L1167.81 1209.59 L1168.4 1209.59 L1168.99 1209.59 L1169.57 1209.59 L1170.16 1209.59 L1170.75 1209.59 L1171.33 1209.59 L1171.92 1209.59 L1172.5 1209.59 L1173.09 1209.59 L1173.68 1209.59 L1174.26 1209.59 L1174.85 1209.59 L1175.44 1209.59 L1176.02 1209.59 L1176.61 1209.59 L1177.2 1209.59 L1177.78 1209.59 L1178.37 1209.59 L1178.96 1209.59 L1179.54 1209.59 L1180.13 1209.59 L1180.71 1209.59 L1181.3 1209.59 L1181.89 1209.59 L1182.47 1209.59 L1183.06 1209.59 L1183.65 1209.59 L1184.23 1209.59 L1184.82 1209.59 L1185.41 1209.59 L1185.99 1209.59 L1186.58 1209.59 L1187.16 1209.59 L1187.75 1209.59 L1188.34 1209.59 L1188.92 1209.59 L1189.51 1209.59 L1190.1 1209.59 L1190.68 1209.59 L1191.27 1209.59 L1191.86 1209.59 L1192.44 1209.59 L1193.03 1209.59 L1193.62 1209.59 L1194.2 1209.59 L1194.79 1209.59 L1195.37 1209.59 L1195.96 1209.59 L1196.55 1209.59 L1197.13 1209.59 L1197.72 1209.59 L1198.31 1209.59 L1198.89 1209.59 L1199.48 1209.59 L1200.07 1209.59 L1200.65 1209.59 L1201.24 1209.59 L1201.83 1209.59 L1202.41 1209.59 L1203 1209.59 L1203.58 1209.59 L1204.17 1209.59 L1204.76 1209.59 L1205.34 1209.59 L1205.93 1209.59 L1206.52 1209.59 L1207.1 1209.59 L1207.69 1209.59 L1208.28 1209.59 L1208.86 1209.59 L1209.45 1209.59 L1210.03 1209.59 L1210.62 1209.59 L1211.21 1209.59 L1211.79 1209.59 L1212.38 1209.59 L1212.97 1209.59 L1213.55 1209.59 L1214.14 1209.59 L1214.73 1209.59 L1215.31 1209.59 L1215.9 1209.59 L1216.49 1209.59 L1217.07 1209.59 L1217.66 1209.59 L1218.24 1209.59 L1218.83 1209.59 L1219.42 1209.59 L1220 1209.59 L1220.59 1209.59 L1221.18 1209.59 L1221.76 1209.59 L1222.35 1209.59 L1222.94 1209.59 L1223.52 1209.59 L1224.11 1209.59 L1224.7 1209.59 L1225.28 1209.59 L1225.87 1209.59 L1226.45 1209.59 L1227.04 1209.59 L1227.63 1209.59 L1228.21 1209.59 L1228.8 1209.59 L1229.39 1209.59 L1229.97 1209.59 L1230.56 1209.59 L1231.15 1209.59 L1231.73 1209.59 L1232.32 1209.59 L1232.91 1209.59 L1233.49 1209.59 L1234.08 1209.59 L1234.66 1209.59 L1235.25 1209.59 L1235.84 1209.59 L1236.42 1209.59 L1237.01 1209.59 L1237.6 1209.59 L1238.18 1209.59 L1238.77 1209.59 L1239.36 1209.59 L1239.94 1209.59 L1240.53 1209.59 L1241.11 1209.59 L1241.7 1209.59 L1242.29 1209.59 L1242.87 1209.59 L1243.46 1209.59 L1244.05 1209.59 L1244.63 1209.59 L1245.22 1209.59 L1245.81 1209.59 L1246.39 1209.59 L1246.98 1209.59 L1247.57 1209.59 L1248.15 1209.59 L1248.74 1209.59 L1249.32 1209.59 L1249.91 1209.59 L1250.5 1209.59 L1251.08 1209.59 L1251.67 1209.59 L1252.26 1209.59 L1252.84 1209.59 L1253.43 1209.59 L1254.02 1209.59 L1254.6 1209.59 L1255.19 1209.59 L1255.78 1209.59 L1256.36 1209.59 L1256.95 1209.59 L1257.53 1209.59 L1258.12 1209.59 L1258.71 1209.59 L1259.29 1209.59 L1259.88 1209.59 L1260.47 1209.59 L1261.05 1209.59 L1261.64 1209.59 L1262.23 1209.59 L1262.81 1209.59 L1263.4 1209.59 L1263.98 1209.59 L1264.57 1209.59 L1265.16 1209.59 L1265.74 1209.59 L1266.33 1209.59 L1266.92 1209.59 L1267.5 1209.59 L1268.09 1209.59 L1268.68 1209.59 L1269.26 1209.59 L1269.85 1209.59 L1270.44 1209.59 L1271.02 1209.59 L1271.61 1209.59 L1272.19 1209.59 L1272.78 1209.59 L1273.37 1209.59 L1273.95 1209.59 L1274.54 1209.59 L1275.13 1209.59 L1275.71 1209.59 L1276.3 1209.59 L1276.89 1209.59 L1277.47 1209.59 L1278.06 1209.59 L1278.65 1209.59 L1279.23 1209.59 L1279.82 1209.59 L1280.4 1209.59 L1280.99 1209.59 L1281.58 1209.59 L1282.16 1209.59 L1282.75 1209.59 L1283.34 1209.59 L1283.92 1209.59 L1284.51 1209.59 L1285.1 1209.59 L1285.68 1209.59 L1286.27 1209.59 L1286.86 1209.59 L1287.44 1209.59 L1288.03 1209.59 L1288.61 1209.59 L1289.2 1209.59 L1289.79 1209.59 L1290.37 1209.59 L1290.96 1209.59 L1291.55 1209.59 L1292.13 1209.59 L1292.72 1209.59 L1293.31 1209.59 L1293.89 1209.59 L1294.48 1209.59 L1295.06 1209.59 L1295.65 1209.59 L1296.24 1209.59 L1296.82 1209.59 L1297.41 1209.59 L1298 1209.59 L1298.58 1209.59 L1299.17 1209.59 L1299.76 1209.59 L1300.34 1209.59 L1300.93 1209.59 L1301.52 1209.59 L1302.1 1209.59 L1302.69 1209.59 L1303.27 1209.59 L1303.86 1209.59 L1304.45 1209.59 L1305.03 1209.59 L1305.62 1209.59 L1306.21 1209.59 L1306.79 1209.59 L1307.38 1209.59 L1307.97 1209.59 L1308.55 1209.59 L1309.14 1209.59 L1309.73 1209.59 L1310.31 1209.59 L1310.9 1209.59 L1311.48 1209.59 L1312.07 1209.59 L1312.66 1209.59 L1313.24 1209.59 L1313.83 1209.59 L1314.42 1209.59 L1315 1209.59 L1315.59 1209.59 L1316.18 1209.59 L1316.76 1209.59 L1317.35 1209.59 L1317.93 1209.59 L1318.52 1209.59 L1319.11 1209.59 L1319.69 1209.59 L1320.28 1209.59 L1320.87 1209.59 L1321.45 1209.59 L1322.04 1209.59 L1322.63 1209.59 L1323.21 1209.59 L1323.8 1209.59 L1324.39 1209.59 L1324.97 1209.59 L1325.56 1209.59 L1326.14 1209.59 L1326.73 1209.59 L1327.32 1209.59 L1327.9 1209.59 L1328.49 1209.59 L1329.08 1209.59 L1329.66 1209.59 L1330.25 1209.59 L1330.84 1209.59 L1331.42 1209.59 L1332.01 1209.59 L1332.6 1209.59 L1333.18 1209.59 L1333.77 1209.59 L1334.35 1209.59 L1334.94 1209.59 L1335.53 1209.59 L1336.11 1209.59 L1336.7 1209.59 L1337.29 1209.59 L1337.87 1209.59 L1338.46 1209.59 L1339.05 1209.59 L1339.63 1209.59 L1340.22 1209.59 L1340.8 1209.59 L1341.39 1209.59 L1341.98 1209.59 L1342.56 1209.59 L1343.15 1209.59 L1343.74 1209.59 L1344.32 1209.59 L1344.91 1209.59 L1345.5 1209.59 L1346.08 1209.59 L1346.67 1209.59 L1347.26 1209.59 L1347.84 1209.59 L1348.43 1209.59 L1349.01 1209.59 L1349.6 1209.59 L1350.19 1209.59 L1350.77 1209.59 L1351.36 1209.59 L1351.95 1209.59 L1352.53 1209.59 L1353.12 1209.59 L1353.71 1209.59 L1354.29 1209.59 L1354.88 1209.59 L1355.47 1209.59 L1356.05 1209.59 L1356.64 1209.59 L1357.22 1209.59 L1357.81 1209.59 L1358.4 1209.59 L1358.98 1209.59 L1359.57 1209.59 L1360.16 1209.59 L1360.74 1209.59 L1361.33 1209.59 L1361.92 1209.59 L1362.5 1209.59 L1363.09 1209.59 L1363.68 1209.59 L1364.26 1209.59 L1364.85 1209.59 L1365.43 1209.59 L1366.02 1209.59 L1366.61 1209.59 L1367.19 1209.59 L1367.78 1209.59 L1368.37 1209.59 L1368.95 1209.59 L1369.54 1209.59 L1370.13 1209.59 L1370.71 1209.59 L1371.3 1209.59 L1371.88 1209.59 L1372.47 1209.59 L1373.06 1209.59 L1373.64 1209.59 L1374.23 1209.59 L1374.82 1209.59 L1375.4 1209.59 L1375.99 1209.59 L1376.58 1209.59 L1377.16 1209.59 L1377.75 1209.59 L1378.34 1209.59 L1378.92 1209.59 L1379.51 1209.59 L1380.09 1209.59 L1380.68 1209.59 L1381.27 1209.59 L1381.85 1209.59 L1382.44 1209.59 L1383.03 1209.59 L1383.61 1209.59 L1384.2 1209.59 L1384.79 1209.59 L1385.37 1209.59 L1385.96 1209.59 L1386.55 1209.59 L1387.13 1209.59 L1387.72 1209.59 L1388.3 1209.59 L1388.89 1209.59 L1389.48 1209.59 L1390.06 1209.59 L1390.65 1209.59 L1391.24 1209.59 L1391.82 1209.59 L1392.41 1209.59 L1393 1209.59 L1393.58 1209.59 L1394.17 1209.59 L1394.75 1209.59 L1395.34 1209.59 L1395.93 1209.59 L1396.51 1209.59 L1397.1 1209.59 L1397.69 1209.59 L1398.27 1209.59 L1398.86 1209.59 L1399.45 1209.59 L1400.03 1209.59 L1400.62 1209.59 L1401.21 1209.59 L1401.79 1209.59 L1402.38 1209.59 L1402.96 1209.59 L1403.55 1209.59 L1404.14 1209.59 L1404.72 1209.59 L1405.31 1209.59 L1405.9 1209.59 L1406.48 1209.59 L1407.07 1209.59 L1407.66 1209.59 L1408.24 1209.59 L1408.83 1209.59 L1409.42 1209.59 L1410 1209.59 L1410.59 1209.59 L1411.17 1209.59 L1411.76 1209.59 L1412.35 1209.59 L1412.93 1209.59 L1413.52 1209.59 L1414.11 1209.59 L1414.69 1209.59 L1415.28 1209.59 L1415.87 1209.59 L1416.45 1209.59 L1417.04 1209.59 L1417.63 1209.59 L1418.21 1209.59 L1418.8 1209.59 L1419.38 1209.59 L1419.97 1209.59 L1420.56 1209.59 L1421.14 1209.59 L1421.73 1209.59 L1422.32 1209.59 L1422.9 1209.59 L1423.49 1209.59 L1424.08 1209.59 L1424.66 1209.59 L1425.25 1209.59 L1425.83 1209.59 L1426.42 1209.59 L1427.01 1209.59 L1427.59 1209.59 L1428.18 1209.59 L1428.77 1209.59 L1429.35 1209.59 L1429.94 1209.59 L1430.53 1209.59 L1431.11 1209.59 L1431.7 1209.59 L1432.29 1209.59 L1432.87 1209.59 L1433.46 1209.59 L1434.04 1209.59 L1434.63 1209.59 L1435.22 1209.59 L1435.8 1209.59 L1436.39 1209.59 L1436.98 1209.59 L1437.56 1209.59 L1438.15 1209.59 L1438.74 1209.59 L1439.32 1209.59 L1439.91 1209.59 L1440.5 1209.59 L1441.08 1209.59 L1441.67 1209.59 L1442.25 1209.59 L1442.84 1209.59 L1443.43 1209.59 L1444.01 1209.59 L1444.6 1209.59 L1445.19 1209.59 L1445.77 1209.59 L1446.36 1209.59 L1446.95 1209.59 L1447.53 1209.59 L1448.12 1209.59 L1448.7 1209.59 L1449.29 1209.59 L1449.88 1209.59 L1450.46 1209.59 L1451.05 1209.59 L1451.64 1209.59 L1452.22 1209.59 L1452.81 1209.59 L1453.4 1209.59 L1453.98 1209.59 L1454.57 1209.59 L1455.16 1209.59 L1455.74 1209.59 L1456.33 1209.59 L1456.91 1209.59 L1457.5 1209.59 L1458.09 1209.59 L1458.67 1209.59 L1459.26 1209.59 L1459.85 1209.59 L1460.43 1209.59 L1461.02 1209.59 L1461.61 1209.59 L1462.19 1209.59 L1462.78 1209.59 L1463.37 1209.59 L1463.95 1209.59 L1464.54 1209.59 L1465.12 1209.59 L1465.71 1209.59 L1466.3 1209.59 L1466.88 1209.59 L1467.47 1209.59 L1468.06 1209.59 L1468.64 1209.59 L1469.23 1209.59 L1469.82 1209.59 L1470.4 1209.59 L1470.99 1209.59 L1471.57 1209.59 L1472.16 1209.59 L1472.75 1209.59 L1473.33 1209.59 L1473.92 1209.59 L1474.51 1209.59 L1475.09 1209.59 L1475.68 1209.59 L1476.27 1209.59 L1476.85 1209.59 L1477.44 1209.59 L1478.03 1209.59 L1478.61 1209.59 L1479.2 1209.59 L1479.78 1209.59 L1480.37 1209.59 L1480.96 1209.59 L1481.54 1209.59 L1482.13 1209.59 L1482.72 1209.59 L1483.3 1209.59 L1483.89 1209.59 L1484.48 1209.59 L1485.06 1209.59 L1485.65 1209.59 L1486.24 1209.59 L1486.82 1209.59 L1487.41 1209.59 L1487.99 1209.59 L1488.58 1209.59 L1489.17 1209.59 L1489.75 1209.59 L1490.34 1209.59 L1490.93 1209.59 L1491.51 1209.59 L1492.1 1209.59 L1492.69 1209.59 L1493.27 1209.59 L1493.86 1209.59 L1494.45 1209.59 L1495.03 1209.59 L1495.62 1209.59 L1496.2 1209.59 L1496.79 1209.59 L1497.38 1209.59 L1497.96 1209.59 L1498.55 1209.59 L1499.14 1209.59 L1499.72 1209.59 L1500.31 1209.59 L1500.9 1209.59 L1501.48 1209.59 L1502.07 1209.59 L1502.65 1209.59 L1503.24 1209.59 L1503.83 1209.59 L1504.41 1209.59 L1505 1209.59 L1505.59 1209.59 L1506.17 1209.59 L1506.76 1209.59 L1507.35 1209.59 L1507.93 1209.59 L1508.52 1209.59 L1509.11 1209.59 L1509.69 1209.59 L1510.28 1209.59 L1510.86 1209.59 L1511.45 1209.59 L1512.04 1209.59 L1512.62 1209.59 L1513.21 1209.59 L1513.8 1209.59 L1514.38 1209.59 L1514.97 1209.59 L1515.56 1209.59 L1516.14 1209.59 L1516.73 1209.59 L1517.32 1209.59 L1517.9 1209.59 L1518.49 1209.59 L1519.07 1209.59 L1519.66 1209.59 L1520.25 1209.59 L1520.83 1209.59 L1521.42 1209.59 L1522.01 1209.59 L1522.59 1209.59 L1523.18 1209.59 L1523.77 1209.59 L1524.35 1209.59 L1524.94 1209.59 L1525.52 1209.59 L1526.11 1209.59 L1526.7 1209.59 L1527.28 1209.59 L1527.87 1209.59 L1528.46 1209.59 L1529.04 1209.59 L1529.63 1209.59 L1530.22 1209.59 L1530.8 1209.59 L1531.39 1209.59 L1531.98 1209.59 L1532.56 1209.59 L1533.15 1209.59 L1533.73 1209.59 L1534.32 1209.59 L1534.91 1209.59 L1535.49 1209.59 L1536.08 1209.59 L1536.67 1209.59 L1537.25 1209.59 L1537.84 1209.59 L1538.43 1209.59 L1539.01 1209.59 L1539.6 1209.59 L1540.19 1209.59 L1540.77 1209.59 L1541.36 1209.59 L1541.94 1209.59 L1542.53 1209.59 L1543.12 1209.59 L1543.7 1209.59 L1544.29 1209.59 L1544.88 1209.59 L1545.46 1209.59 L1546.05 1209.59 L1546.64 1209.59 L1547.22 1209.59 L1547.81 1209.59 L1548.4 1209.59 L1548.98 1209.59 L1549.57 1209.59 L1550.15 1209.59 L1550.74 1209.59 L1551.33 1209.59 L1551.91 1209.59 L1552.5 1209.59 L1553.09 1209.59 L1553.67 1209.59 L1554.26 1209.59 L1554.85 1209.59 L1555.43 1209.59 L1556.02 1209.59 L1556.6 1209.59 L1557.19 1209.59 L1557.78 1209.59 L1558.36 1209.59 L1558.95 1209.59 L1559.54 1209.59 L1560.12 1209.59 L1560.71 1209.59 L1561.3 1209.59 L1561.88 1209.59 L1562.47 1209.59 L1563.06 1209.59 L1563.64 1209.59 L1564.23 1209.59 L1564.81 1209.59 L1565.4 1209.59 L1565.99 1209.59 L1566.57 1209.59 L1567.16 1209.59 L1567.75 1209.59 L1568.33 1209.59 L1568.92 1209.59 L1569.51 1209.59 L1570.09 1209.59 L1570.68 1209.59 L1571.27 1209.59 L1571.85 1209.59 L1572.44 1209.59 L1573.02 1209.59 L1573.61 1209.59 L1574.2 1209.59 L1574.78 1209.59 L1575.37 1209.59 L1575.96 1209.59 L1576.54 1209.59 L1577.13 1209.59 L1577.72 1209.59 L1578.3 1209.59 L1578.89 1209.59 L1579.47 1209.59 L1580.06 1209.59 L1580.65 1209.59 L1581.23 1209.59 L1581.82 1209.59 L1582.41 1209.59 L1582.99 1209.59 L1583.58 1209.59 L1584.17 1209.59 L1584.75 1209.59 L1585.34 1209.59 L1585.93 1209.59 L1586.51 1209.59 L1587.1 1209.59 L1587.68 1209.59 L1588.27 1209.59 L1588.86 1209.59 L1589.44 1209.59 L1590.03 1209.59 L1590.62 1209.59 L1591.2 1209.59 L1591.79 1209.59 L1592.38 1209.59 L1592.96 1209.59 L1593.55 1209.59 L1594.14 1209.59 L1594.72 1209.59 L1595.31 1209.59 L1595.89 1209.59 L1596.48 1209.59 L1597.07 1209.59 L1597.65 1209.59 L1598.24 1209.59 L1598.83 1209.59 L1599.41 1209.59 L1600 1209.59 L1600.59 1209.59 L1601.17 1209.59 L1601.76 1209.59 L1602.34 1209.59 L1602.93 1209.59 L1603.52 1209.59 L1604.1 1209.59 L1604.69 1209.59 L1605.28 1209.59 L1605.86 1209.59 L1606.45 1209.59 L1607.04 1209.59 L1607.62 1209.59 L1608.21 1209.59 L1608.8 1209.59 L1609.38 1209.59 L1609.97 1209.59 L1610.55 1209.59 L1611.14 1209.59 L1611.73 1209.59 L1612.31 1209.59 L1612.9 1209.59 L1613.49 1209.59 L1614.07 1209.59 L1614.66 1209.59 L1615.25 1209.59 L1615.83 1209.59 L1616.42 1209.59 L1617.01 1209.59 L1617.59 1209.59 L1618.18 1209.59 L1618.76 1209.59 L1619.35 1209.59 L1619.94 1209.59 L1620.52 1209.59 L1621.11 1209.59 L1621.7 1209.59 L1622.28 1209.59 L1622.87 1209.59 L1623.46 1209.59 L1624.04 1209.59 L1624.63 1209.59 L1625.22 1209.59 L1625.8 1209.59 L1626.39 1209.59 L1626.97 1209.59 L1627.56 1209.59 L1628.15 1209.59 L1628.73 1209.59 L1629.32 1209.59 L1629.91 1209.59 L1630.49 1209.59 L1631.08 1209.59 L1631.67 1209.59 L1632.25 1209.59 L1632.84 1209.59 L1633.42 1209.59 L1634.01 1209.59 L1634.6 1209.59 L1635.18 1209.59 L1635.77 1209.59 L1636.36 1209.59 L1636.94 1209.59 L1637.53 1209.59 L1638.12 1209.59 L1638.7 1209.59 L1639.29 1209.59 L1639.88 1209.59 L1640.46 1209.59 L1641.05 1209.59 L1641.63 1209.59 L1642.22 1209.59 L1642.81 1209.59 L1643.39 1209.59 L1643.98 1209.59 L1644.57 1209.59 L1645.15 1209.59 L1645.74 1209.59 L1646.33 1209.59 L1646.91 1209.59 L1647.5 1209.59 L1648.09 1209.59 L1648.67 1209.59 L1649.26 1209.59 L1649.84 1209.59 L1650.43 1209.59 L1651.02 1209.59 L1651.6 1209.59 L1652.19 1209.59 L1652.78 1209.59 L1653.36 1209.59 L1653.95 1209.59 L1654.54 1209.59 L1655.12 1209.59 L1655.71 1209.59 L1656.29 1209.59 L1656.88 1209.59 L1657.47 1209.59 L1658.05 1209.59 L1658.64 1209.59 L1659.23 1209.59 L1659.81 1209.59 L1660.4 1209.59 L1660.99 1209.59 L1661.57 1209.59 L1662.16 1209.59 L1662.75 1209.59 L1663.33 1209.59 L1663.92 1209.59 L1664.5 1209.59 L1665.09 1209.59 L1665.68 1209.59 L1666.26 1209.59 L1666.85 1209.59 L1667.44 1209.59 L1668.02 1209.59 L1668.61 1209.59 L1669.2 1209.59 L1669.78 1209.59 L1670.37 1209.59 L1670.96 1209.59 L1671.54 1209.59 L1672.13 1209.59 L1672.71 1209.59 L1673.3 1209.59 L1673.89 1209.59 L1674.47 1209.59 L1675.06 1209.59 L1675.65 1209.59 L1676.23 1209.59 L1676.82 1209.59 L1677.41 1209.59 L1677.99 1209.59 L1678.58 1209.59 L1679.17 1209.59 L1679.75 1209.59 L1680.34 1209.59 L1680.92 1209.59 L1681.51 1209.59 L1682.1 1209.59 L1682.68 1209.59 L1683.27 1209.59 L1683.86 1209.59 L1684.44 1209.59 L1685.03 1209.59 L1685.62 1209.59 L1686.2 1209.59 L1686.79 1209.59 L1687.37 1209.59 L1687.96 1209.59 L1688.55 1209.59 L1689.13 1209.59 L1689.72 1209.59 L1690.31 1209.59 L1690.89 1209.59 L1691.48 1209.59 L1692.07 1209.59 L1692.65 1209.59 L1693.24 1209.59 L1693.83 1209.59 L1694.41 1209.59 L1695 1209.59 L1695.58 1209.59 L1696.17 1209.59 L1696.76 1209.59 L1697.34 1209.59 L1697.93 1209.59 L1698.52 1209.59 L1699.1 1209.59 L1699.69 1209.59 L1700.28 1209.59 L1700.86 1209.59 L1701.45 1209.59 L1702.04 1209.59 L1702.62 1209.59 L1703.21 1209.59 L1703.79 1209.59 L1704.38 1209.59 L1704.97 1209.59 L1705.55 1209.59 L1706.14 1209.59 L1706.73 1209.59 L1707.31 1209.59 L1707.9 1209.59 L1708.49 1209.59 L1709.07 1209.59 L1709.66 1209.59 L1710.24 1209.59 L1710.83 1209.59 L1711.42 1209.59 L1712 1209.59 L1712.59 1209.59 L1713.18 1209.59 L1713.76 1209.59 L1714.35 1209.59 L1714.94 1209.59 L1715.52 1209.59 L1716.11 1209.59 L1716.7 1209.59 L1717.28 1209.59 L1717.87 1209.59 L1718.45 1209.59 L1719.04 1209.59 L1719.63 1209.59 L1720.21 1209.59 L1720.8 1209.59 L1721.39 1209.59 L1721.97 1209.59 L1722.56 1209.59 L1723.15 1209.59 L1723.73 1209.59 L1724.32 1209.59 L1724.91 1209.59 L1725.49 1209.59 L1726.08 1209.59 L1726.66 1209.59 L1727.25 1209.59 L1727.84 1209.59 L1728.42 1209.59 L1729.01 1209.59 L1729.6 1209.59 L1730.18 1209.59 L1730.77 1209.59 L1731.36 1209.59 L1731.94 1209.59 L1732.53 1209.59 L1733.11 1209.59 L1733.7 1209.59 L1734.29 1209.59 L1734.87 1209.59 L1735.46 1209.59 L1736.05 1209.59 L1736.63 1209.59 L1737.22 1209.59 L1737.81 1209.59 L1738.39 1209.59 L1738.98 1209.59 L1739.57 1209.59 L1740.15 1209.59 L1740.74 1209.59 L1741.32 1209.59 L1741.91 1209.59 L1742.5 1209.59 L1743.08 1209.59 L1743.67 1209.59 L1744.26 1209.59 L1744.84 1209.59 L1745.43 1209.59 L1746.02 1209.59 L1746.6 1209.59 L1747.19 1209.59 L1747.78 1209.59 L1748.36 1209.59 L1748.95 1209.59 L1749.53 1209.59 L1750.12 1209.59 L1750.71 1209.59 L1751.29 1209.59 L1751.88 1209.59 L1752.47 1209.59 L1753.05 1209.59 L1753.64 1209.59 L1754.23 1209.59 L1754.81 1209.59 L1755.4 1209.59 L1755.99 1209.59 L1756.57 1209.59 L1757.16 1209.59 L1757.74 1209.59 L1758.33 1209.59 L1758.92 1209.59 L1759.5 1209.59 L1760.09 1209.59 L1760.68 1209.59 L1761.26 1209.59 L1761.85 1209.59 L1762.44 1209.59 L1763.02 1209.59 L1763.61 1209.59 L1764.19 1209.59 L1764.78 1209.59 L1765.37 1209.59 L1765.95 1209.59 L1766.54 1209.59 L1767.13 1209.59 L1767.71 1209.59 L1768.3 1209.59 L1768.89 1209.59 L1769.47 1209.59 L1770.06 1209.59 L1770.65 1209.59 L1771.23 1209.59 L1771.82 1209.59 L1772.4 1209.59 L1772.99 1209.59 L1773.58 1209.59 L1774.16 1209.59 L1774.75 1209.59 L1775.34 1209.59 L1775.92 1209.59 L1776.51 1209.59 L1777.1 1209.59 L1777.68 1209.59 L1778.27 1209.59 L1778.86 1209.59 L1779.44 1209.59 L1780.03 1209.59 L1780.61 1209.59 L1781.2 1209.59 L1781.79 1209.59 L1782.37 1209.59 L1782.96 1209.59 L1783.55 1209.59 L1784.13 1209.59 L1784.72 1209.59 L1785.31 1209.59 L1785.89 1209.59 L1786.48 1209.59 L1787.06 1209.59 L1787.65 1209.59 L1788.24 1209.59 L1788.82 1209.59 L1789.41 1209.59 L1790 1209.59 L1790.58 1209.59 L1791.17 1209.59 L1791.76 1209.59 L1792.34 1209.59 L1792.93 1209.59 L1793.52 1209.59 L1794.1 1209.59 L1794.69 1209.59 L1795.27 1209.59 L1795.86 1209.59 L1796.45 1209.59 L1797.03 1209.59 L1797.62 1209.59 L1798.21 1209.59 L1798.79 1209.59 L1799.38 1209.59 L1799.97 1209.59 L1800.55 1209.59 L1801.14 1209.59 L1801.73 1209.59 L1802.31 1209.59 L1802.9 1209.59 L1803.48 1209.59 L1804.07 1209.59 L1804.66 1209.59 L1805.24 1209.59 L1805.83 1209.59 L1806.42 1209.59 L1807 1209.59 L1807.59 1209.59 L1808.18 1209.59 L1808.76 1209.59 L1809.35 1209.59 L1809.94 1209.59 L1810.52 1209.59 L1811.11 1209.59 L1811.69 1209.59 L1812.28 1209.59 L1812.87 1209.59 L1813.45 1209.59 L1814.04 1209.59 L1814.63 1209.59 L1815.21 1209.59 L1815.8 1209.59 L1816.39 1209.59 L1816.97 1209.59 L1817.56 1209.59 L1818.14 1209.59 L1818.73 1209.59 L1819.32 1209.59 L1819.9 1209.59 L1820.49 1209.59 L1821.08 1209.59 L1821.66 1209.59 L1822.25 1209.59 L1822.84 1209.59 L1823.42 1209.59 L1824.01 1209.59 L1824.6 1209.59 L1825.18 1209.59 L1825.77 1209.59 L1826.35 1209.59 L1826.94 1209.59 L1827.53 1209.59 L1828.11 1209.59 L1828.7 1209.59 L1829.29 1209.59 L1829.87 1209.59 L1830.46 1209.59 L1831.05 1209.59 L1831.63 1209.59 L1832.22 1209.59 L1832.81 1209.59 L1833.39 1209.59 L1833.98 1209.59 L1834.56 1209.59 L1835.15 1209.59 L1835.74 1209.59 L1836.32 1209.59 L1836.91 1209.59 L1837.5 1209.59 L1838.08 1209.59 L1838.67 1209.59 L1839.26 1209.59 L1839.84 1209.59 L1840.43 1209.59 L1841.01 1209.59 L1841.6 1209.59 L1842.19 1209.59 L1842.77 1209.59 L1843.36 1209.59 L1843.95 1209.59 L1844.53 1209.59 L1845.12 1209.59 L1845.71 1209.59 L1846.29 1209.59 L1846.88 1209.59 L1847.47 1209.59 L1848.05 1209.59 L1848.64 1209.59 L1849.22 1209.59 L1849.81 1209.59 L1850.4 1209.59 L1850.98 1209.59 L1851.57 1209.59 L1852.16 1209.59 L1852.74 1209.59 L1853.33 1209.59 L1853.92 1209.59 L1854.5 1209.59 L1855.09 1209.59 L1855.68 1209.59 L1856.26 1209.59 L1856.85 1209.59 L1857.43 1209.59 L1858.02 1209.59 L1858.61 1209.59 L1859.19 1209.59 L1859.78 1209.59 L1860.37 1209.59 L1860.95 1209.59 L1861.54 1209.59 L1862.13 1209.59 L1862.71 1209.59 L1863.3 1209.59 L1863.88 1209.59 L1864.47 1209.59 L1865.06 1209.59 L1865.64 1209.59 L1866.23 1209.59 L1866.82 1209.59 L1867.4 1209.59 L1867.99 1209.59 L1868.58 1209.59 L1869.16 1209.59 L1869.75 1209.59 L1870.34 1209.59 L1870.92 1209.59 L1871.51 1209.59 L1872.09 1209.59 L1872.68 1209.59 L1873.27 1209.59 L1873.85 1209.59 L1874.44 1209.59 L1875.03 1209.59 L1875.61 1209.59 L1876.2 1209.59 L1876.79 1209.59 L1877.37 1209.59 L1877.96 1209.59 L1878.55 1209.59 L1879.13 1209.59 L1879.72 1209.59 L1880.3 1209.59 L1880.89 1209.59 L1881.48 1209.59 L1882.06 1209.59 L1882.65 1209.59 L1883.24 1209.59 L1883.82 1209.59 L1884.41 1209.59 L1885 1209.59 L1885.58 1209.59 L1886.17 1209.59 L1886.76 1209.59 L1887.34 1209.59 L1887.93 1209.59 L1888.51 1209.59 L1889.1 1209.59 L1889.69 1209.59 L1890.27 1209.59 L1890.86 1209.59 L1891.45 1209.59 L1892.03 1209.59 L1892.62 1209.59 L1893.21 1209.59 L1893.79 1209.59 L1894.38 1209.59 L1894.96 1209.59 L1895.55 1209.59 L1896.14 1209.59 L1896.72 1209.59 L1897.31 1209.59 L1897.9 1209.59 L1898.48 1209.59 L1899.07 1209.59 L1899.66 1209.59 L1900.24 1209.59 L1900.83 1209.59 L1901.42 1209.59 L1902 1209.59 L1902.59 1209.59 L1903.17 1209.59 L1903.76 1209.59 L1904.35 1209.59 L1904.93 1209.59 L1905.52 1209.59 L1906.11 1209.59 L1906.69 1209.59 L1907.28 1209.59 L1907.87 1209.59 L1908.45 1209.59 L1909.04 1209.59 L1909.63 1209.59 L1910.21 1209.59 L1910.8 1209.59 L1911.38 1209.59 L1911.97 1209.59 L1912.56 1209.59 L1913.14 1209.59 L1913.73 1209.59 L1914.32 1209.59 L1914.9 1209.59 L1915.49 1209.59 L1916.08 1209.59 L1916.66 1209.59 L1917.25 1209.59 L1917.83 1209.59 L1918.42 1209.59 L1919.01 1209.59 L1919.59 1209.59 L1920.18 1209.59 L1920.77 1209.59 L1921.35 1209.59 L1921.94 1209.59 L1922.53 1209.59 L1923.11 1209.59 L1923.7 1209.59 L1924.29 1209.59 L1924.87 1209.59 L1925.46 1209.59 L1926.04 1209.59 L1926.63 1209.59 L1927.22 1209.59 L1927.8 1209.59 L1928.39 1209.59 L1928.98 1209.59 L1929.56 1209.59 L1930.15 1209.59 L1930.74 1209.59 L1931.32 1209.59 L1931.91 1209.59 L1932.5 1209.59 L1933.08 1209.59 L1933.67 1209.59 L1934.25 1209.59 L1934.84 1209.59 L1935.43 1209.59 L1936.01 1209.59 L1936.6 1209.59 L1937.19 1209.59 L1937.77 1209.59 L1938.36 1209.59 L1938.95 1209.59 L1939.53 1209.59 L1940.12 1209.59 L1940.71 1209.59 L1941.29 1209.59 L1941.88 1209.59 L1942.46 1209.59 L1943.05 1209.59 L1943.64 1209.59 L1944.22 1209.59 L1944.81 1209.59 L1945.4 1209.59 L1945.98 1209.59 L1946.57 1209.59 L1947.16 1209.59 L1947.74 1209.59 L1948.33 1209.59 L1948.91 1209.59 L1949.5 1209.59 L1950.09 1209.59 L1950.67 1209.59 L1951.26 1209.59 L1951.85 1209.59 L1952.43 1209.59 L1953.02 1209.59 L1953.61 1209.59 L1954.19 1209.59 L1954.78 1209.59 L1955.37 1209.59 L1955.95 1209.59 L1956.54 1209.59 L1957.12 1209.59 L1957.71 1209.59 L1958.3 1209.59 L1958.88 1209.59 L1959.47 1209.59 L1960.06 1209.59 L1960.64 1209.59 L1961.23 1209.59 L1961.82 1209.59 L1962.4 1209.59 L1962.99 1209.59 L1963.58 1209.59 L1964.16 1209.59 L1964.75 1209.59 L1965.33 1209.59 L1965.92 1209.59 L1966.51 1209.59 L1967.09 1209.59 L1967.68 1209.59 L1968.27 1209.59 L1968.85 1209.59 L1969.44 1209.59 L1970.03 1209.59 L1970.61 1209.59 L1971.2 1209.59 L1971.78 1209.59 L1972.37 1209.59 L1972.96 1209.59 L1973.54 1209.59 L1974.13 1209.59 L1974.72 1209.59 L1975.3 1209.59 L1975.89 1209.59 L1976.48 1209.59 L1977.06 1209.59 L1977.65 1209.59 L1978.24 1209.59 L1978.82 1209.59 L1979.41 1209.59 L1979.99 1209.59 L1980.58 1209.59 L1981.17 1209.59 L1981.75 1209.59 L1982.34 1209.59 L1982.93 1209.59 L1983.51 1209.59 L1984.1 1209.59 L1984.69 1209.59 L1985.27 1209.59 L1985.86 1209.59 L1986.45 1209.59 L1987.03 1209.59 L1987.62 1209.59 L1988.2 1209.59 L1988.79 1209.59 L1989.38 1209.59 L1989.96 1209.59 L1990.55 1209.59 L1991.14 1209.59 L1991.72 1209.59 L1992.31 1209.59 L1992.9 1209.59 L1993.48 1209.59 L1994.07 1209.59 L1994.65 1209.59 L1995.24 1209.59 L1995.83 1209.59 L1996.41 1209.59 L1997 1209.59 L1997.59 1209.59 L1998.17 1209.59 L1998.76 1209.59 L1999.35 1209.59 L1999.93 1209.59 L2000.52 1209.59 L2001.11 1209.59 L2001.69 1209.59 L2002.28 1209.59 L2002.86 1209.59 L2003.45 1209.59 L2004.04 1209.59 L2004.62 1209.59 L2005.21 1209.59 L2005.8 1209.59 L2006.38 1209.59 L2006.97 1209.59 L2007.56 1209.59 L2008.14 1209.59 L2008.73 1209.59 L2009.32 1209.59 L2009.9 1209.59 L2010.49 1209.59 L2011.07 1209.59 L2011.66 1209.59 L2012.25 1209.59 L2012.83 1209.59 L2013.42 1209.59 L2014.01 1209.59 L2014.59 1209.59 L2015.18 1209.59 L2015.77 1209.59 L2016.35 1209.59 L2016.94 1209.59 L2017.53 1209.59 L2018.11 1209.59 L2018.7 1209.59 L2019.28 1209.59 L2019.87 1209.59 L2020.46 1209.59 L2021.04 1209.59 L2021.63 1209.59 L2022.22 1209.59 L2022.8 1209.59 L2023.39 1209.59 L2023.98 1209.59 L2024.56 1209.59 L2025.15 1209.59 L2025.73 1209.59 L2026.32 1209.59 L2026.91 1209.59 L2027.49 1209.59 L2028.08 1209.59 L2028.67 1209.59 L2029.25 1209.59 L2029.84 1209.59 L2030.43 1209.59 L2031.01 1209.59 L2031.6 1209.59 L2032.19 1209.59 L2032.77 1209.59 L2033.36 1209.59 L2033.94 1209.59 L2034.53 1209.59 L2035.12 1209.59 L2035.7 1209.59 L2036.29 1209.59 L2036.88 1209.59 L2037.46 1209.59 L2038.05 1209.59 L2038.64 1209.59 L2039.22 1209.59 L2039.81 1209.59 L2040.4 1209.59 L2040.98 1209.59 L2041.57 1209.59 L2042.15 1209.59 L2042.74 1209.59 L2043.33 1209.59 L2043.91 1209.59 L2044.5 1209.59 L2045.09 1209.59 L2045.67 1209.59 L2046.26 1209.59 L2046.85 1209.59 L2047.43 1209.59 L2048.02 1209.59 L2048.6 1209.59 L2049.19 1209.59 L2049.78 1209.59 L2050.36 1209.59 L2050.95 1209.59 L2051.54 1209.59 L2052.12 1209.59 L2052.71 1209.59 L2053.3 1209.59 L2053.88 1209.59 L2054.47 1209.59 L2055.06 1209.59 L2055.64 1209.59 L2056.23 1209.59 L2056.81 1209.59 L2057.4 1209.59 L2057.99 1209.59 L2058.57 1209.59 L2059.16 1209.59 L2059.75 1209.59 L2060.33 1209.59 L2060.92 1209.59 L2061.51 1209.59 L2062.09 1209.59 L2062.68 1209.59 L2063.27 1209.59 L2063.85 1209.59 L2064.44 1209.59 L2065.02 1209.59 L2065.61 1209.59 L2066.2 1209.59 L2066.78 1209.59 L2067.37 1209.59 L2067.96 1209.59 L2068.54 1209.59 L2069.13 1209.59 L2069.72 1209.59 L2070.3 1209.59 L2070.89 1209.59 L2071.48 1209.59 L2072.06 1209.59 L2072.65 1209.59 L2073.23 1209.59 L2073.82 1209.59 L2074.41 1209.59 L2074.99 1209.59 L2075.58 1209.59 L2076.17 1209.59 L2076.75 1209.59 L2077.34 1209.59 L2077.93 1209.59 L2078.51 1209.59 L2079.1 1209.59 L2079.68 1209.59 L2080.27 1209.59 L2080.86 1209.59 L2081.44 1209.59 L2082.03 1209.59 L2082.62 1209.59 L2083.2 1209.59 L2083.79 1209.59 L2084.38 1209.59 L2084.96 1209.59 L2085.55 1209.59 L2086.14 1209.59 L2086.72 1209.59 L2087.31 1209.59 L2087.89 1209.59 L2088.48 1209.59 L2089.07 1209.59 L2089.65 1209.59 L2090.24 1209.59 L2090.83 1209.59 L2091.41 1209.59 L2092 1209.59 L2092.59 1209.59 L2093.17 1209.59 L2093.76 1209.59 L2094.35 1209.59 L2094.93 1209.59 L2095.52 1209.59 L2096.1 1209.59 L2096.69 1209.59 L2097.28 1209.59 L2097.86 1209.59 L2098.45 1209.59 L2099.04 1209.59 L2099.62 1209.59 L2100.21 1209.59 L2100.8 1209.59 L2101.38 1209.59 L2101.97 1209.59 L2102.55 1209.59 L2103.14 1209.59 L2103.73 1209.59 L2104.31 1209.59 L2104.9 1209.59 L2105.49 1209.59 L2106.07 1209.59 L2106.66 1209.59 L2107.25 1209.59 L2107.83 1209.59 L2108.42 1209.59 L2109.01 1209.59 L2109.59 1209.59 L2110.18 1209.59 L2110.76 1209.59 L2111.35 1209.59 L2111.94 1209.59 L2112.52 1209.59 L2113.11 1209.59 L2113.7 1209.59 L2114.28 1209.59 L2114.87 1209.59 L2115.46 1209.59 L2116.04 1209.59 L2116.63 1209.59 L2117.22 1209.59 L2117.8 1209.59 L2118.39 1209.59 L2118.97 1209.59 L2119.56 1209.59 L2120.15 1209.59 L2120.73 1209.59 L2121.32 1209.59 L2121.91 1209.59 L2122.49 1209.59 L2123.08 1209.59 L2123.67 1209.59 L2124.25 1209.59 L2124.84 1209.59 L2125.42 1209.59 L2126.01 1209.59 L2126.6 1209.59 L2127.18 1209.59 L2127.77 1209.59 L2128.36 1209.59 L2128.94 1209.59 L2129.53 1209.59 L2130.12 1209.59 L2130.7 1209.59 L2131.29 1209.59 L2131.88 1209.59 L2132.46 1209.59 L2133.05 1209.59 L2133.63 1209.59 L2134.22 1209.59 L2134.81 1209.59 L2135.39 1209.59 L2135.98 1209.59 L2136.57 1209.59 L2137.15 1209.59 L2137.74 1209.59 L2138.33 1209.59 L2138.91 1209.59 L2139.5 1209.59 L2140.09 1209.59 L2140.67 1209.59 L2141.26 1209.59 L2141.84 1209.59 L2142.43 1209.59 L2143.02 1209.59 L2143.6 1209.59 L2144.19 1209.59 L2144.78 1209.59 L2145.36 1209.59 L2145.95 1209.59 L2146.54 1209.59 L2147.12 1209.59 L2147.71 1209.59 L2148.3 1209.59 L2148.88 1209.59 L2149.47 1209.59 L2150.05 1209.59 L2150.64 1209.59 L2151.23 1209.59 L2151.81 1209.59 L2152.4 1209.59 L2152.99 1209.59 L2153.57 1209.59 L2154.16 1209.59 L2154.75 1209.59 L2155.33 1209.59 L2155.92 1209.59 L2156.5 1209.59 L2157.09 1209.59 L2157.68 1209.59 L2158.26 1209.59 L2158.26 1209.31 L2157.68 1209.31 L2157.09 1209.31 L2156.5 1209.31 L2155.92 1209.31 L2155.33 1209.31 L2154.75 1209.31 L2154.16 1209.31 L2153.57 1209.31 L2152.99 1209.31 L2152.4 1209.31 L2151.81 1209.31 L2151.23 1209.31 L2150.64 1209.31 L2150.05 1209.31 L2149.47 1209.31 L2148.88 1209.31 L2148.3 1209.31 L2147.71 1209.31 L2147.12 1209.31 L2146.54 1209.31 L2145.95 1209.31 L2145.36 1209.31 L2144.78 1209.31 L2144.19 1209.31 L2143.6 1209.31 L2143.02 1209.31 L2142.43 1209.31 L2141.84 1209.31 L2141.26 1209.31 L2140.67 1209.31 L2140.09 1209.31 L2139.5 1209.31 L2138.91 1209.31 L2138.33 1209.31 L2137.74 1209.31 L2137.15 1209.31 L2136.57 1209.31 L2135.98 1209.31 L2135.39 1209.31 L2134.81 1209.31 L2134.22 1209.31 L2133.63 1209.31 L2133.05 1209.31 L2132.46 1209.31 L2131.88 1209.31 L2131.29 1209.31 L2130.7 1209.31 L2130.12 1209.31 L2129.53 1209.31 L2128.94 1209.31 L2128.36 1209.31 L2127.77 1209.31 L2127.18 1209.31 L2126.6 1209.31 L2126.01 1209.31 L2125.42 1209.31 L2124.84 1209.31 L2124.25 1209.31 L2123.67 1209.31 L2123.08 1209.31 L2122.49 1209.31 L2121.91 1209.31 L2121.32 1209.31 L2120.73 1209.31 L2120.15 1209.31 L2119.56 1209.31 L2118.97 1209.31 L2118.39 1209.31 L2117.8 1209.31 L2117.22 1209.31 L2116.63 1209.31 L2116.04 1209.31 L2115.46 1209.31 L2114.87 1209.31 L2114.28 1209.31 L2113.7 1209.31 L2113.11 1209.31 L2112.52 1209.31 L2111.94 1209.31 L2111.35 1209.31 L2110.76 1209.31 L2110.18 1209.31 L2109.59 1209.31 L2109.01 1209.31 L2108.42 1209.31 L2107.83 1209.31 L2107.25 1209.31 L2106.66 1209.31 L2106.07 1209.31 L2105.49 1209.31 L2104.9 1209.31 L2104.31 1209.31 L2103.73 1209.31 L2103.14 1209.31 L2102.55 1209.31 L2101.97 1209.31 L2101.38 1209.31 L2100.8 1209.31 L2100.21 1209.31 L2099.62 1209.31 L2099.04 1209.31 L2098.45 1209.31 L2097.86 1209.31 L2097.28 1209.31 L2096.69 1209.31 L2096.1 1209.31 L2095.52 1209.31 L2094.93 1209.31 L2094.35 1209.31 L2093.76 1209.31 L2093.17 1209.31 L2092.59 1209.31 L2092 1209.31 L2091.41 1209.31 L2090.83 1209.31 L2090.24 1209.31 L2089.65 1209.31 L2089.07 1209.31 L2088.48 1209.31 L2087.89 1209.31 L2087.31 1209.31 L2086.72 1209.31 L2086.14 1209.31 L2085.55 1209.31 L2084.96 1209.31 L2084.38 1209.31 L2083.79 1209.31 L2083.2 1209.31 L2082.62 1209.31 L2082.03 1209.31 L2081.44 1209.31 L2080.86 1209.31 L2080.27 1209.31 L2079.68 1209.31 L2079.1 1209.31 L2078.51 1209.31 L2077.93 1209.31 L2077.34 1209.31 L2076.75 1209.31 L2076.17 1209.31 L2075.58 1209.31 L2074.99 1209.31 L2074.41 1209.31 L2073.82 1209.31 L2073.23 1209.31 L2072.65 1209.31 L2072.06 1209.31 L2071.48 1209.31 L2070.89 1209.31 L2070.3 1209.31 L2069.72 1209.31 L2069.13 1209.31 L2068.54 1209.31 L2067.96 1209.31 L2067.37 1209.31 L2066.78 1209.31 L2066.2 1209.31 L2065.61 1209.31 L2065.02 1209.31 L2064.44 1209.31 L2063.85 1209.31 L2063.27 1209.31 L2062.68 1209.31 L2062.09 1209.31 L2061.51 1209.31 L2060.92 1209.31 L2060.33 1209.31 L2059.75 1209.31 L2059.16 1209.31 L2058.57 1209.31 L2057.99 1209.31 L2057.4 1209.31 L2056.81 1209.31 L2056.23 1209.31 L2055.64 1209.31 L2055.06 1209.31 L2054.47 1209.31 L2053.88 1209.31 L2053.3 1209.31 L2052.71 1209.31 L2052.12 1209.31 L2051.54 1209.31 L2050.95 1209.31 L2050.36 1209.31 L2049.78 1209.31 L2049.19 1209.31 L2048.6 1209.31 L2048.02 1209.31 L2047.43 1209.31 L2046.85 1209.31 L2046.26 1209.31 L2045.67 1209.31 L2045.09 1209.31 L2044.5 1209.31 L2043.91 1209.31 L2043.33 1209.31 L2042.74 1209.31 L2042.15 1209.31 L2041.57 1209.31 L2040.98 1209.31 L2040.4 1209.31 L2039.81 1209.31 L2039.22 1209.31 L2038.64 1209.31 L2038.05 1209.31 L2037.46 1209.31 L2036.88 1209.31 L2036.29 1209.31 L2035.7 1209.31 L2035.12 1209.31 L2034.53 1209.31 L2033.94 1209.31 L2033.36 1209.31 L2032.77 1209.31 L2032.19 1209.31 L2031.6 1209.31 L2031.01 1209.31 L2030.43 1209.31 L2029.84 1209.31 L2029.25 1209.31 L2028.67 1209.31 L2028.08 1209.31 L2027.49 1209.31 L2026.91 1209.31 L2026.32 1209.31 L2025.73 1209.31 L2025.15 1209.31 L2024.56 1209.31 L2023.98 1209.31 L2023.39 1209.31 L2022.8 1209.31 L2022.22 1209.31 L2021.63 1209.31 L2021.04 1209.31 L2020.46 1209.31 L2019.87 1209.31 L2019.28 1209.31 L2018.7 1209.31 L2018.11 1209.31 L2017.53 1209.31 L2016.94 1209.31 L2016.35 1209.31 L2015.77 1209.31 L2015.18 1209.31 L2014.59 1209.31 L2014.01 1209.31 L2013.42 1209.31 L2012.83 1209.31 L2012.25 1209.31 L2011.66 1209.31 L2011.07 1209.31 L2010.49 1209.31 L2009.9 1209.31 L2009.32 1209.31 L2008.73 1209.31 L2008.14 1209.31 L2007.56 1209.31 L2006.97 1209.31 L2006.38 1209.31 L2005.8 1209.31 L2005.21 1209.31 L2004.62 1209.31 L2004.04 1209.31 L2003.45 1209.31 L2002.86 1209.31 L2002.28 1209.31 L2001.69 1209.31 L2001.11 1209.31 L2000.52 1209.31 L1999.93 1209.31 L1999.35 1209.31 L1998.76 1209.31 L1998.17 1209.31 L1997.59 1209.31 L1997 1209.31 L1996.41 1209.31 L1995.83 1209.31 L1995.24 1209.31 L1994.65 1209.31 L1994.07 1209.31 L1993.48 1209.31 L1992.9 1209.31 L1992.31 1209.31 L1991.72 1209.31 L1991.14 1209.31 L1990.55 1209.31 L1989.96 1209.31 L1989.38 1209.31 L1988.79 1209.31 L1988.2 1209.31 L1987.62 1209.31 L1987.03 1209.31 L1986.45 1209.31 L1985.86 1209.31 L1985.27 1209.31 L1984.69 1209.31 L1984.1 1209.31 L1983.51 1209.31 L1982.93 1209.31 L1982.34 1209.31 L1981.75 1209.31 L1981.17 1209.31 L1980.58 1209.31 L1979.99 1209.31 L1979.41 1209.31 L1978.82 1209.31 L1978.24 1209.31 L1977.65 1209.31 L1977.06 1209.31 L1976.48 1209.31 L1975.89 1209.31 L1975.3 1209.31 L1974.72 1209.31 L1974.13 1209.31 L1973.54 1209.31 L1972.96 1209.31 L1972.37 1209.31 L1971.78 1209.31 L1971.2 1209.31 L1970.61 1209.31 L1970.03 1209.31 L1969.44 1209.31 L1968.85 1209.31 L1968.27 1209.31 L1967.68 1209.31 L1967.09 1209.31 L1966.51 1209.31 L1965.92 1209.31 L1965.33 1209.31 L1964.75 1209.31 L1964.16 1209.31 L1963.58 1209.31 L1962.99 1209.31 L1962.4 1209.31 L1961.82 1209.31 L1961.23 1209.31 L1960.64 1209.31 L1960.06 1209.31 L1959.47 1209.31 L1958.88 1209.31 L1958.3 1209.31 L1957.71 1209.31 L1957.12 1209.31 L1956.54 1209.31 L1955.95 1209.31 L1955.37 1209.31 L1954.78 1209.31 L1954.19 1209.31 L1953.61 1209.31 L1953.02 1209.31 L1952.43 1209.31 L1951.85 1209.31 L1951.26 1209.31 L1950.67 1209.31 L1950.09 1209.31 L1949.5 1209.31 L1948.91 1209.31 L1948.33 1209.31 L1947.74 1209.31 L1947.16 1209.31 L1946.57 1209.31 L1945.98 1209.31 L1945.4 1209.31 L1944.81 1209.31 L1944.22 1209.31 L1943.64 1209.31 L1943.05 1209.31 L1942.46 1209.31 L1941.88 1209.31 L1941.29 1209.31 L1940.71 1209.31 L1940.12 1209.31 L1939.53 1209.31 L1938.95 1209.31 L1938.36 1209.31 L1937.77 1209.31 L1937.19 1209.31 L1936.6 1209.31 L1936.01 1209.31 L1935.43 1209.31 L1934.84 1209.31 L1934.25 1209.31 L1933.67 1209.31 L1933.08 1209.31 L1932.5 1209.31 L1931.91 1209.31 L1931.32 1209.31 L1930.74 1209.31 L1930.15 1209.31 L1929.56 1209.31 L1928.98 1209.31 L1928.39 1209.31 L1927.8 1209.31 L1927.22 1209.31 L1926.63 1209.31 L1926.04 1209.31 L1925.46 1209.31 L1924.87 1209.31 L1924.29 1209.31 L1923.7 1209.31 L1923.11 1209.31 L1922.53 1209.31 L1921.94 1209.31 L1921.35 1209.31 L1920.77 1209.31 L1920.18 1209.31 L1919.59 1209.31 L1919.01 1209.31 L1918.42 1209.31 L1917.83 1209.31 L1917.25 1209.31 L1916.66 1209.31 L1916.08 1209.31 L1915.49 1209.31 L1914.9 1209.31 L1914.32 1209.31 L1913.73 1209.31 L1913.14 1209.31 L1912.56 1209.31 L1911.97 1209.31 L1911.38 1209.31 L1910.8 1209.31 L1910.21 1209.31 L1909.63 1209.31 L1909.04 1209.31 L1908.45 1209.31 L1907.87 1209.31 L1907.28 1209.31 L1906.69 1209.31 L1906.11 1209.31 L1905.52 1209.31 L1904.93 1209.31 L1904.35 1209.31 L1903.76 1209.31 L1903.17 1209.31 L1902.59 1209.31 L1902 1209.31 L1901.42 1209.31 L1900.83 1209.31 L1900.24 1209.31 L1899.66 1209.31 L1899.07 1209.31 L1898.48 1209.31 L1897.9 1209.31 L1897.31 1209.31 L1896.72 1209.31 L1896.14 1209.31 L1895.55 1209.31 L1894.96 1209.31 L1894.38 1209.31 L1893.79 1209.31 L1893.21 1209.31 L1892.62 1209.31 L1892.03 1209.31 L1891.45 1209.31 L1890.86 1209.31 L1890.27 1209.31 L1889.69 1209.31 L1889.1 1209.31 L1888.51 1209.31 L1887.93 1209.31 L1887.34 1209.31 L1886.76 1209.31 L1886.17 1209.31 L1885.58 1209.31 L1885 1209.31 L1884.41 1209.31 L1883.82 1209.31 L1883.24 1209.31 L1882.65 1209.31 L1882.06 1209.31 L1881.48 1209.31 L1880.89 1209.31 L1880.3 1209.31 L1879.72 1209.31 L1879.13 1209.31 L1878.55 1209.31 L1877.96 1209.31 L1877.37 1209.31 L1876.79 1209.31 L1876.2 1209.31 L1875.61 1209.31 L1875.03 1209.31 L1874.44 1209.31 L1873.85 1209.31 L1873.27 1209.31 L1872.68 1209.31 L1872.09 1209.31 L1871.51 1209.31 L1870.92 1209.31 L1870.34 1209.31 L1869.75 1209.31 L1869.16 1209.31 L1868.58 1209.31 L1867.99 1209.31 L1867.4 1209.31 L1866.82 1209.31 L1866.23 1209.31 L1865.64 1209.31 L1865.06 1209.31 L1864.47 1209.31 L1863.88 1209.31 L1863.3 1209.31 L1862.71 1209.31 L1862.13 1209.31 L1861.54 1209.31 L1860.95 1209.31 L1860.37 1209.31 L1859.78 1209.31 L1859.19 1209.31 L1858.61 1209.31 L1858.02 1209.31 L1857.43 1209.31 L1856.85 1209.31 L1856.26 1209.31 L1855.68 1209.31 L1855.09 1209.31 L1854.5 1209.31 L1853.92 1209.31 L1853.33 1209.31 L1852.74 1209.31 L1852.16 1209.31 L1851.57 1209.31 L1850.98 1209.31 L1850.4 1209.31 L1849.81 1209.31 L1849.22 1209.31 L1848.64 1209.31 L1848.05 1209.31 L1847.47 1209.31 L1846.88 1209.31 L1846.29 1209.31 L1845.71 1209.31 L1845.12 1209.31 L1844.53 1209.31 L1843.95 1209.31 L1843.36 1209.31 L1842.77 1209.31 L1842.19 1209.31 L1841.6 1209.31 L1841.01 1209.31 L1840.43 1209.31 L1839.84 1209.31 L1839.26 1209.31 L1838.67 1209.31 L1838.08 1209.31 L1837.5 1209.31 L1836.91 1209.31 L1836.32 1209.31 L1835.74 1209.31 L1835.15 1209.31 L1834.56 1209.31 L1833.98 1209.31 L1833.39 1209.31 L1832.81 1209.31 L1832.22 1209.31 L1831.63 1209.31 L1831.05 1209.31 L1830.46 1209.31 L1829.87 1209.31 L1829.29 1209.31 L1828.7 1209.31 L1828.11 1209.31 L1827.53 1209.31 L1826.94 1209.31 L1826.35 1209.31 L1825.77 1209.31 L1825.18 1209.31 L1824.6 1209.31 L1824.01 1209.31 L1823.42 1209.31 L1822.84 1209.31 L1822.25 1209.31 L1821.66 1209.31 L1821.08 1209.31 L1820.49 1209.31 L1819.9 1209.31 L1819.32 1209.31 L1818.73 1209.31 L1818.14 1209.31 L1817.56 1209.31 L1816.97 1209.31 L1816.39 1209.31 L1815.8 1209.31 L1815.21 1209.31 L1814.63 1209.31 L1814.04 1209.31 L1813.45 1209.31 L1812.87 1209.31 L1812.28 1209.31 L1811.69 1209.31 L1811.11 1209.31 L1810.52 1209.31 L1809.94 1209.31 L1809.35 1209.31 L1808.76 1209.31 L1808.18 1209.31 L1807.59 1209.31 L1807 1209.31 L1806.42 1209.31 L1805.83 1209.31 L1805.24 1209.31 L1804.66 1209.31 L1804.07 1209.31 L1803.48 1209.31 L1802.9 1209.31 L1802.31 1209.31 L1801.73 1209.31 L1801.14 1209.31 L1800.55 1209.31 L1799.97 1209.31 L1799.38 1209.31 L1798.79 1209.31 L1798.21 1209.31 L1797.62 1209.31 L1797.03 1209.31 L1796.45 1209.31 L1795.86 1209.31 L1795.27 1209.31 L1794.69 1209.31 L1794.1 1209.31 L1793.52 1209.31 L1792.93 1209.31 L1792.34 1209.31 L1791.76 1209.31 L1791.17 1209.31 L1790.58 1209.31 L1790 1209.31 L1789.41 1209.31 L1788.82 1209.31 L1788.24 1209.31 L1787.65 1209.31 L1787.06 1209.31 L1786.48 1209.31 L1785.89 1209.31 L1785.31 1209.31 L1784.72 1209.31 L1784.13 1209.31 L1783.55 1209.31 L1782.96 1209.31 L1782.37 1209.31 L1781.79 1209.31 L1781.2 1209.31 L1780.61 1209.31 L1780.03 1209.31 L1779.44 1209.31 L1778.86 1209.31 L1778.27 1209.31 L1777.68 1209.31 L1777.1 1209.31 L1776.51 1209.31 L1775.92 1209.31 L1775.34 1209.31 L1774.75 1209.31 L1774.16 1209.31 L1773.58 1209.31 L1772.99 1209.31 L1772.4 1209.31 L1771.82 1209.31 L1771.23 1209.31 L1770.65 1209.31 L1770.06 1209.31 L1769.47 1209.31 L1768.89 1209.31 L1768.3 1209.31 L1767.71 1209.31 L1767.13 1209.31 L1766.54 1209.31 L1765.95 1209.31 L1765.37 1209.31 L1764.78 1209.31 L1764.19 1209.31 L1763.61 1209.31 L1763.02 1209.31 L1762.44 1209.31 L1761.85 1209.31 L1761.26 1209.31 L1760.68 1209.31 L1760.09 1209.31 L1759.5 1209.31 L1758.92 1209.31 L1758.33 1209.31 L1757.74 1209.31 L1757.16 1209.31 L1756.57 1209.31 L1755.99 1209.31 L1755.4 1209.31 L1754.81 1209.31 L1754.23 1209.31 L1753.64 1209.31 L1753.05 1209.31 L1752.47 1209.31 L1751.88 1209.31 L1751.29 1209.31 L1750.71 1209.31 L1750.12 1209.31 L1749.53 1209.31 L1748.95 1209.31 L1748.36 1209.31 L1747.78 1209.31 L1747.19 1209.31 L1746.6 1209.31 L1746.02 1209.31 L1745.43 1209.31 L1744.84 1209.31 L1744.26 1209.31 L1743.67 1209.31 L1743.08 1209.31 L1742.5 1209.31 L1741.91 1209.31 L1741.32 1209.31 L1740.74 1209.31 L1740.15 1209.31 L1739.57 1209.31 L1738.98 1209.31 L1738.39 1209.31 L1737.81 1209.31 L1737.22 1209.31 L1736.63 1209.31 L1736.05 1209.31 L1735.46 1209.31 L1734.87 1209.31 L1734.29 1209.31 L1733.7 1209.31 L1733.11 1209.31 L1732.53 1209.31 L1731.94 1209.31 L1731.36 1209.31 L1730.77 1209.31 L1730.18 1209.31 L1729.6 1209.31 L1729.01 1209.31 L1728.42 1209.31 L1727.84 1209.31 L1727.25 1209.31 L1726.66 1209.31 L1726.08 1209.31 L1725.49 1209.31 L1724.91 1209.31 L1724.32 1209.31 L1723.73 1209.31 L1723.15 1209.31 L1722.56 1209.31 L1721.97 1209.31 L1721.39 1209.31 L1720.8 1209.31 L1720.21 1209.31 L1719.63 1209.31 L1719.04 1209.31 L1718.45 1209.31 L1717.87 1209.31 L1717.28 1209.31 L1716.7 1209.31 L1716.11 1209.31 L1715.52 1209.31 L1714.94 1209.31 L1714.35 1209.31 L1713.76 1209.31 L1713.18 1209.31 L1712.59 1209.31 L1712 1209.31 L1711.42 1209.31 L1710.83 1209.31 L1710.24 1209.31 L1709.66 1209.31 L1709.07 1209.31 L1708.49 1209.31 L1707.9 1209.31 L1707.31 1209.31 L1706.73 1209.31 L1706.14 1209.31 L1705.55 1209.31 L1704.97 1209.31 L1704.38 1209.31 L1703.79 1209.31 L1703.21 1209.31 L1702.62 1209.31 L1702.04 1209.31 L1701.45 1209.31 L1700.86 1209.31 L1700.28 1209.31 L1699.69 1209.31 L1699.1 1209.31 L1698.52 1209.31 L1697.93 1209.31 L1697.34 1209.31 L1696.76 1209.31 L1696.17 1209.31 L1695.58 1209.31 L1695 1209.31 L1694.41 1209.31 L1693.83 1209.31 L1693.24 1209.31 L1692.65 1209.31 L1692.07 1209.31 L1691.48 1209.31 L1690.89 1209.31 L1690.31 1209.31 L1689.72 1209.31 L1689.13 1209.31 L1688.55 1209.31 L1687.96 1209.31 L1687.37 1209.31 L1686.79 1209.31 L1686.2 1209.31 L1685.62 1209.31 L1685.03 1209.31 L1684.44 1209.31 L1683.86 1209.31 L1683.27 1209.31 L1682.68 1209.31 L1682.1 1209.31 L1681.51 1209.31 L1680.92 1209.31 L1680.34 1209.31 L1679.75 1209.31 L1679.17 1209.31 L1678.58 1209.31 L1677.99 1209.31 L1677.41 1209.31 L1676.82 1209.31 L1676.23 1209.31 L1675.65 1209.31 L1675.06 1209.31 L1674.47 1209.31 L1673.89 1209.31 L1673.3 1209.31 L1672.71 1209.31 L1672.13 1209.31 L1671.54 1209.31 L1670.96 1209.31 L1670.37 1209.31 L1669.78 1209.31 L1669.2 1209.31 L1668.61 1209.31 L1668.02 1209.31 L1667.44 1209.31 L1666.85 1209.31 L1666.26 1209.31 L1665.68 1209.31 L1665.09 1209.31 L1664.5 1209.31 L1663.92 1209.31 L1663.33 1209.31 L1662.75 1209.31 L1662.16 1209.31 L1661.57 1209.31 L1660.99 1209.31 L1660.4 1209.31 L1659.81 1209.31 L1659.23 1209.31 L1658.64 1209.31 L1658.05 1209.31 L1657.47 1209.31 L1656.88 1209.31 L1656.29 1209.31 L1655.71 1209.31 L1655.12 1209.31 L1654.54 1209.31 L1653.95 1209.31 L1653.36 1209.31 L1652.78 1209.31 L1652.19 1209.31 L1651.6 1209.31 L1651.02 1209.31 L1650.43 1209.31 L1649.84 1209.31 L1649.26 1209.31 L1648.67 1209.31 L1648.09 1209.31 L1647.5 1209.31 L1646.91 1209.31 L1646.33 1209.31 L1645.74 1209.31 L1645.15 1209.31 L1644.57 1209.31 L1643.98 1209.31 L1643.39 1209.31 L1642.81 1209.31 L1642.22 1209.31 L1641.63 1209.31 L1641.05 1209.31 L1640.46 1209.31 L1639.88 1209.31 L1639.29 1209.31 L1638.7 1209.31 L1638.12 1209.31 L1637.53 1209.31 L1636.94 1209.31 L1636.36 1209.31 L1635.77 1209.31 L1635.18 1209.31 L1634.6 1209.31 L1634.01 1209.31 L1633.42 1209.31 L1632.84 1209.31 L1632.25 1209.31 L1631.67 1209.31 L1631.08 1209.31 L1630.49 1209.31 L1629.91 1209.31 L1629.32 1209.31 L1628.73 1209.31 L1628.15 1209.31 L1627.56 1209.31 L1626.97 1209.31 L1626.39 1209.31 L1625.8 1209.31 L1625.22 1209.31 L1624.63 1209.31 L1624.04 1209.31 L1623.46 1209.31 L1622.87 1209.31 L1622.28 1209.31 L1621.7 1209.31 L1621.11 1209.31 L1620.52 1209.31 L1619.94 1209.31 L1619.35 1209.31 L1618.76 1209.31 L1618.18 1209.31 L1617.59 1209.31 L1617.01 1209.31 L1616.42 1209.31 L1615.83 1209.31 L1615.25 1209.31 L1614.66 1209.31 L1614.07 1209.31 L1613.49 1209.31 L1612.9 1209.31 L1612.31 1209.31 L1611.73 1209.31 L1611.14 1209.31 L1610.55 1209.31 L1609.97 1209.31 L1609.38 1209.31 L1608.8 1209.31 L1608.21 1209.31 L1607.62 1209.31 L1607.04 1209.31 L1606.45 1209.31 L1605.86 1209.31 L1605.28 1209.31 L1604.69 1209.31 L1604.1 1209.31 L1603.52 1209.31 L1602.93 1209.31 L1602.34 1209.31 L1601.76 1209.31 L1601.17 1209.31 L1600.59 1209.31 L1600 1209.31 L1599.41 1209.31 L1598.83 1209.31 L1598.24 1209.31 L1597.65 1209.31 L1597.07 1209.31 L1596.48 1209.31 L1595.89 1209.31 L1595.31 1209.31 L1594.72 1209.31 L1594.14 1209.31 L1593.55 1209.31 L1592.96 1209.31 L1592.38 1209.31 L1591.79 1209.31 L1591.2 1209.31 L1590.62 1209.31 L1590.03 1209.31 L1589.44 1209.31 L1588.86 1209.31 L1588.27 1209.31 L1587.68 1209.31 L1587.1 1209.31 L1586.51 1209.31 L1585.93 1209.31 L1585.34 1209.31 L1584.75 1209.31 L1584.17 1209.31 L1583.58 1209.31 L1582.99 1209.31 L1582.41 1209.31 L1581.82 1209.31 L1581.23 1209.31 L1580.65 1209.31 L1580.06 1209.31 L1579.47 1209.31 L1578.89 1209.31 L1578.3 1209.31 L1577.72 1209.31 L1577.13 1209.31 L1576.54 1209.31 L1575.96 1209.31 L1575.37 1209.31 L1574.78 1209.31 L1574.2 1209.31 L1573.61 1209.31 L1573.02 1209.31 L1572.44 1209.31 L1571.85 1209.31 L1571.27 1209.31 L1570.68 1209.31 L1570.09 1209.31 L1569.51 1209.31 L1568.92 1209.31 L1568.33 1209.31 L1567.75 1209.31 L1567.16 1209.31 L1566.57 1209.31 L1565.99 1209.31 L1565.4 1209.31 L1564.81 1209.31 L1564.23 1209.31 L1563.64 1209.31 L1563.06 1209.31 L1562.47 1209.31 L1561.88 1209.31 L1561.3 1209.31 L1560.71 1209.31 L1560.12 1209.31 L1559.54 1209.31 L1558.95 1209.31 L1558.36 1209.31 L1557.78 1209.31 L1557.19 1209.31 L1556.6 1209.31 L1556.02 1209.31 L1555.43 1209.31 L1554.85 1209.31 L1554.26 1209.31 L1553.67 1209.31 L1553.09 1209.31 L1552.5 1209.31 L1551.91 1209.31 L1551.33 1209.31 L1550.74 1209.31 L1550.15 1209.31 L1549.57 1209.31 L1548.98 1209.31 L1548.4 1209.31 L1547.81 1209.31 L1547.22 1209.31 L1546.64 1209.31 L1546.05 1209.31 L1545.46 1209.31 L1544.88 1209.31 L1544.29 1209.31 L1543.7 1209.31 L1543.12 1209.31 L1542.53 1209.31 L1541.94 1209.31 L1541.36 1209.31 L1540.77 1209.31 L1540.19 1209.31 L1539.6 1209.31 L1539.01 1209.31 L1538.43 1209.31 L1537.84 1209.31 L1537.25 1209.31 L1536.67 1209.31 L1536.08 1209.31 L1535.49 1209.31 L1534.91 1209.31 L1534.32 1209.31 L1533.73 1209.31 L1533.15 1209.31 L1532.56 1209.31 L1531.98 1209.31 L1531.39 1209.31 L1530.8 1209.31 L1530.22 1209.31 L1529.63 1209.31 L1529.04 1209.31 L1528.46 1209.31 L1527.87 1209.31 L1527.28 1209.31 L1526.7 1209.31 L1526.11 1209.31 L1525.52 1209.31 L1524.94 1209.31 L1524.35 1209.31 L1523.77 1209.31 L1523.18 1209.31 L1522.59 1209.31 L1522.01 1209.31 L1521.42 1209.31 L1520.83 1209.31 L1520.25 1209.31 L1519.66 1209.31 L1519.07 1209.31 L1518.49 1209.31 L1517.9 1209.31 L1517.32 1209.31 L1516.73 1209.31 L1516.14 1209.31 L1515.56 1209.31 L1514.97 1209.31 L1514.38 1209.31 L1513.8 1209.31 L1513.21 1209.31 L1512.62 1209.31 L1512.04 1209.31 L1511.45 1209.31 L1510.86 1209.31 L1510.28 1209.31 L1509.69 1209.31 L1509.11 1209.31 L1508.52 1209.31 L1507.93 1209.31 L1507.35 1209.31 L1506.76 1209.31 L1506.17 1209.31 L1505.59 1209.31 L1505 1209.31 L1504.41 1209.31 L1503.83 1209.31 L1503.24 1209.31 L1502.65 1209.31 L1502.07 1209.31 L1501.48 1209.31 L1500.9 1209.31 L1500.31 1209.31 L1499.72 1209.31 L1499.14 1209.31 L1498.55 1209.31 L1497.96 1209.31 L1497.38 1209.31 L1496.79 1209.31 L1496.2 1209.31 L1495.62 1209.31 L1495.03 1209.31 L1494.45 1209.31 L1493.86 1209.31 L1493.27 1209.31 L1492.69 1209.31 L1492.1 1209.31 L1491.51 1209.31 L1490.93 1209.31 L1490.34 1209.31 L1489.75 1209.31 L1489.17 1209.31 L1488.58 1209.31 L1487.99 1209.31 L1487.41 1209.31 L1486.82 1209.31 L1486.24 1209.31 L1485.65 1209.31 L1485.06 1209.31 L1484.48 1209.31 L1483.89 1209.31 L1483.3 1209.31 L1482.72 1209.31 L1482.13 1209.31 L1481.54 1209.31 L1480.96 1209.31 L1480.37 1209.31 L1479.78 1209.31 L1479.2 1209.31 L1478.61 1209.31 L1478.03 1209.31 L1477.44 1209.31 L1476.85 1209.31 L1476.27 1209.31 L1475.68 1209.31 L1475.09 1209.31 L1474.51 1209.31 L1473.92 1209.31 L1473.33 1209.31 L1472.75 1209.31 L1472.16 1209.31 L1471.57 1209.31 L1470.99 1209.31 L1470.4 1209.31 L1469.82 1209.31 L1469.23 1209.31 L1468.64 1209.31 L1468.06 1209.31 L1467.47 1209.31 L1466.88 1209.31 L1466.3 1209.31 L1465.71 1209.31 L1465.12 1209.31 L1464.54 1209.31 L1463.95 1209.31 L1463.37 1209.31 L1462.78 1209.31 L1462.19 1209.31 L1461.61 1209.31 L1461.02 1209.31 L1460.43 1209.31 L1459.85 1209.31 L1459.26 1209.31 L1458.67 1209.31 L1458.09 1209.31 L1457.5 1209.31 L1456.91 1209.31 L1456.33 1209.31 L1455.74 1209.31 L1455.16 1209.31 L1454.57 1209.31 L1453.98 1209.31 L1453.4 1209.31 L1452.81 1209.31 L1452.22 1209.31 L1451.64 1209.31 L1451.05 1209.31 L1450.46 1209.31 L1449.88 1209.31 L1449.29 1209.31 L1448.7 1209.31 L1448.12 1209.31 L1447.53 1209.31 L1446.95 1209.31 L1446.36 1209.31 L1445.77 1209.31 L1445.19 1209.31 L1444.6 1209.31 L1444.01 1209.31 L1443.43 1209.31 L1442.84 1209.31 L1442.25 1209.31 L1441.67 1209.31 L1441.08 1209.31 L1440.5 1209.31 L1439.91 1209.31 L1439.32 1209.31 L1438.74 1209.31 L1438.15 1209.31 L1437.56 1209.31 L1436.98 1209.31 L1436.39 1209.31 L1435.8 1209.31 L1435.22 1209.31 L1434.63 1209.31 L1434.04 1209.31 L1433.46 1209.31 L1432.87 1209.31 L1432.29 1209.31 L1431.7 1209.31 L1431.11 1209.31 L1430.53 1209.31 L1429.94 1209.31 L1429.35 1209.31 L1428.77 1209.31 L1428.18 1209.31 L1427.59 1209.31 L1427.01 1209.31 L1426.42 1209.31 L1425.83 1209.31 L1425.25 1209.31 L1424.66 1209.31 L1424.08 1209.31 L1423.49 1209.31 L1422.9 1209.31 L1422.32 1209.31 L1421.73 1209.31 L1421.14 1209.31 L1420.56 1209.31 L1419.97 1209.31 L1419.38 1209.31 L1418.8 1209.31 L1418.21 1209.31 L1417.63 1209.31 L1417.04 1209.31 L1416.45 1209.31 L1415.87 1209.31 L1415.28 1209.31 L1414.69 1209.31 L1414.11 1209.31 L1413.52 1209.31 L1412.93 1209.31 L1412.35 1209.31 L1411.76 1209.31 L1411.17 1209.31 L1410.59 1209.31 L1410 1209.31 L1409.42 1209.31 L1408.83 1209.31 L1408.24 1209.31 L1407.66 1209.31 L1407.07 1209.31 L1406.48 1209.31 L1405.9 1209.31 L1405.31 1209.31 L1404.72 1209.31 L1404.14 1209.31 L1403.55 1209.31 L1402.96 1209.31 L1402.38 1209.31 L1401.79 1209.31 L1401.21 1209.31 L1400.62 1209.31 L1400.03 1209.31 L1399.45 1209.31 L1398.86 1209.31 L1398.27 1209.31 L1397.69 1209.31 L1397.1 1209.31 L1396.51 1209.31 L1395.93 1209.31 L1395.34 1209.31 L1394.75 1209.31 L1394.17 1209.31 L1393.58 1209.31 L1393 1209.31 L1392.41 1209.31 L1391.82 1209.31 L1391.24 1209.31 L1390.65 1209.31 L1390.06 1209.31 L1389.48 1209.31 L1388.89 1209.31 L1388.3 1209.31 L1387.72 1209.31 L1387.13 1209.31 L1386.55 1209.31 L1385.96 1209.31 L1385.37 1209.31 L1384.79 1209.31 L1384.2 1209.31 L1383.61 1209.31 L1383.03 1209.31 L1382.44 1209.31 L1381.85 1209.31 L1381.27 1209.31 L1380.68 1209.31 L1380.09 1209.31 L1379.51 1209.31 L1378.92 1209.31 L1378.34 1209.31 L1377.75 1209.31 L1377.16 1209.31 L1376.58 1209.31 L1375.99 1209.31 L1375.4 1209.31 L1374.82 1209.31 L1374.23 1209.31 L1373.64 1209.31 L1373.06 1209.31 L1372.47 1209.31 L1371.88 1209.31 L1371.3 1209.31 L1370.71 1209.31 L1370.13 1209.31 L1369.54 1209.31 L1368.95 1209.31 L1368.37 1209.31 L1367.78 1209.31 L1367.19 1209.31 L1366.61 1209.31 L1366.02 1209.31 L1365.43 1209.31 L1364.85 1209.31 L1364.26 1209.31 L1363.68 1209.31 L1363.09 1209.31 L1362.5 1209.31 L1361.92 1209.31 L1361.33 1209.31 L1360.74 1209.31 L1360.16 1209.31 L1359.57 1209.31 L1358.98 1209.31 L1358.4 1209.31 L1357.81 1209.31 L1357.22 1209.31 L1356.64 1209.31 L1356.05 1209.31 L1355.47 1209.31 L1354.88 1209.31 L1354.29 1209.31 L1353.71 1209.31 L1353.12 1209.31 L1352.53 1209.31 L1351.95 1209.31 L1351.36 1209.31 L1350.77 1209.31 L1350.19 1209.31 L1349.6 1209.31 L1349.01 1209.31 L1348.43 1209.31 L1347.84 1209.31 L1347.26 1209.31 L1346.67 1209.31 L1346.08 1209.31 L1345.5 1209.31 L1344.91 1209.31 L1344.32 1209.31 L1343.74 1209.31 L1343.15 1209.31 L1342.56 1209.31 L1341.98 1209.31 L1341.39 1209.31 L1340.8 1209.31 L1340.22 1209.31 L1339.63 1209.31 L1339.05 1209.31 L1338.46 1209.31 L1337.87 1209.31 L1337.29 1209.31 L1336.7 1209.31 L1336.11 1209.31 L1335.53 1209.31 L1334.94 1209.31 L1334.35 1209.31 L1333.77 1209.31 L1333.18 1209.31 L1332.6 1209.31 L1332.01 1209.31 L1331.42 1209.31 L1330.84 1209.31 L1330.25 1209.31 L1329.66 1209.31 L1329.08 1209.31 L1328.49 1209.31 L1327.9 1209.31 L1327.32 1209.31 L1326.73 1209.31 L1326.14 1209.31 L1325.56 1209.31 L1324.97 1209.31 L1324.39 1209.31 L1323.8 1209.31 L1323.21 1209.31 L1322.63 1209.31 L1322.04 1209.31 L1321.45 1209.31 L1320.87 1209.31 L1320.28 1209.31 L1319.69 1209.31 L1319.11 1209.31 L1318.52 1209.31 L1317.93 1209.31 L1317.35 1209.31 L1316.76 1209.31 L1316.18 1209.31 L1315.59 1209.31 L1315 1209.31 L1314.42 1209.31 L1313.83 1209.31 L1313.24 1209.31 L1312.66 1209.31 L1312.07 1209.31 L1311.48 1209.31 L1310.9 1209.31 L1310.31 1209.31 L1309.73 1209.31 L1309.14 1209.31 L1308.55 1209.31 L1307.97 1209.31 L1307.38 1209.31 L1306.79 1209.31 L1306.21 1209.31 L1305.62 1209.31 L1305.03 1209.31 L1304.45 1209.31 L1303.86 1209.31 L1303.27 1209.31 L1302.69 1209.31 L1302.1 1209.31 L1301.52 1209.31 L1300.93 1209.31 L1300.34 1209.31 L1299.76 1209.31 L1299.17 1209.31 L1298.58 1209.31 L1298 1209.31 L1297.41 1209.31 L1296.82 1209.31 L1296.24 1209.31 L1295.65 1209.31 L1295.06 1209.31 L1294.48 1209.31 L1293.89 1209.31 L1293.31 1209.31 L1292.72 1209.31 L1292.13 1209.31 L1291.55 1209.31 L1290.96 1209.31 L1290.37 1209.31 L1289.79 1209.31 L1289.2 1209.31 L1288.61 1209.31 L1288.03 1209.31 L1287.44 1209.31 L1286.86 1209.31 L1286.27 1209.31 L1285.68 1209.31 L1285.1 1209.31 L1284.51 1209.31 L1283.92 1209.31 L1283.34 1209.31 L1282.75 1209.31 L1282.16 1209.31 L1281.58 1209.31 L1280.99 1209.31 L1280.4 1209.31 L1279.82 1209.31 L1279.23 1209.31 L1278.65 1209.31 L1278.06 1209.31 L1277.47 1209.31 L1276.89 1209.31 L1276.3 1209.31 L1275.71 1209.31 L1275.13 1209.31 L1274.54 1209.31 L1273.95 1209.31 L1273.37 1209.31 L1272.78 1209.31 L1272.19 1209.31 L1271.61 1209.31 L1271.02 1209.31 L1270.44 1209.31 L1269.85 1209.31 L1269.26 1209.31 L1268.68 1209.31 L1268.09 1209.31 L1267.5 1209.31 L1266.92 1209.31 L1266.33 1209.31 L1265.74 1209.31 L1265.16 1209.31 L1264.57 1209.31 L1263.98 1209.31 L1263.4 1209.31 L1262.81 1209.31 L1262.23 1209.31 L1261.64 1209.31 L1261.05 1209.31 L1260.47 1209.31 L1259.88 1209.31 L1259.29 1209.31 L1258.71 1209.31 L1258.12 1209.31 L1257.53 1209.31 L1256.95 1209.31 L1256.36 1209.31 L1255.78 1209.31 L1255.19 1209.31 L1254.6 1209.31 L1254.02 1209.31 L1253.43 1209.31 L1252.84 1209.31 L1252.26 1209.31 L1251.67 1209.31 L1251.08 1209.31 L1250.5 1209.31 L1249.91 1209.31 L1249.32 1209.31 L1248.74 1209.31 L1248.15 1209.31 L1247.57 1209.31 L1246.98 1209.31 L1246.39 1209.31 L1245.81 1209.31 L1245.22 1209.31 L1244.63 1209.31 L1244.05 1209.31 L1243.46 1209.31 L1242.87 1209.31 L1242.29 1209.31 L1241.7 1209.31 L1241.11 1209.31 L1240.53 1209.31 L1239.94 1209.31 L1239.36 1209.31 L1238.77 1209.31 L1238.18 1209.31 L1237.6 1209.31 L1237.01 1209.31 L1236.42 1209.31 L1235.84 1209.31 L1235.25 1209.31 L1234.66 1209.31 L1234.08 1209.31 L1233.49 1209.31 L1232.91 1209.31 L1232.32 1209.31 L1231.73 1209.31 L1231.15 1209.31 L1230.56 1209.31 L1229.97 1209.31 L1229.39 1209.31 L1228.8 1209.31 L1228.21 1209.31 L1227.63 1209.31 L1227.04 1209.31 L1226.45 1209.31 L1225.87 1209.31 L1225.28 1209.31 L1224.7 1209.31 L1224.11 1209.31 L1223.52 1209.31 L1222.94 1209.31 L1222.35 1209.31 L1221.76 1209.31 L1221.18 1209.31 L1220.59 1209.31 L1220 1209.31 L1219.42 1209.31 L1218.83 1209.31 L1218.24 1209.31 L1217.66 1209.31 L1217.07 1209.31 L1216.49 1209.31 L1215.9 1209.31 L1215.31 1209.31 L1214.73 1209.31 L1214.14 1209.31 L1213.55 1209.31 L1212.97 1209.31 L1212.38 1209.31 L1211.79 1209.31 L1211.21 1209.31 L1210.62 1209.31 L1210.03 1209.31 L1209.45 1209.31 L1208.86 1209.31 L1208.28 1209.31 L1207.69 1209.31 L1207.1 1209.31 L1206.52 1209.31 L1205.93 1209.31 L1205.34 1209.31 L1204.76 1209.31 L1204.17 1209.31 L1203.58 1209.31 L1203 1209.31 L1202.41 1209.31 L1201.83 1209.31 L1201.24 1209.31 L1200.65 1209.31 L1200.07 1209.31 L1199.48 1209.31 L1198.89 1209.31 L1198.31 1209.31 L1197.72 1209.31 L1197.13 1209.31 L1196.55 1209.31 L1195.96 1209.31 L1195.37 1209.31 L1194.79 1209.31 L1194.2 1209.31 L1193.62 1209.31 L1193.03 1209.31 L1192.44 1209.31 L1191.86 1209.31 L1191.27 1209.31 L1190.68 1209.31 L1190.1 1209.31 L1189.51 1209.31 L1188.92 1209.31 L1188.34 1209.31 L1187.75 1209.31 L1187.16 1209.31 L1186.58 1209.31 L1185.99 1209.31 L1185.41 1209.31 L1184.82 1209.31 L1184.23 1209.31 L1183.65 1209.31 L1183.06 1209.31 L1182.47 1209.31 L1181.89 1209.31 L1181.3 1209.31 L1180.71 1209.31 L1180.13 1209.31 L1179.54 1209.31 L1178.96 1209.31 L1178.37 1209.31 L1177.78 1209.31 L1177.2 1209.31 L1176.61 1209.31 L1176.02 1209.31 L1175.44 1209.31 L1174.85 1209.31 L1174.26 1209.31 L1173.68 1209.31 L1173.09 1209.31 L1172.5 1209.31 L1171.92 1209.31 L1171.33 1209.31 L1170.75 1209.31 L1170.16 1209.31 L1169.57 1209.31 L1168.99 1209.31 L1168.4 1209.31 L1167.81 1209.31 L1167.23 1209.31 L1166.64 1209.31 L1166.05 1209.31 L1165.47 1209.31 L1164.88 1209.31 L1164.29 1209.31 L1163.71 1209.31 L1163.12 1209.31 L1162.54 1209.31 L1161.95 1209.31 L1161.36 1209.31 L1160.78 1209.31 L1160.19 1209.31 L1159.6 1209.31 L1159.02 1209.31 L1158.43 1209.31 L1157.84 1209.31 L1157.26 1209.31 L1156.67 1209.31 L1156.09 1209.31 L1155.5 1209.31 L1154.91 1209.31 L1154.33 1209.31 L1153.74 1209.31 L1153.15 1209.31 L1152.57 1209.31 L1151.98 1209.31 L1151.39 1209.31 L1150.81 1209.31 L1150.22 1209.31 L1149.63 1209.31 L1149.05 1209.31 L1148.46 1209.31 L1147.88 1209.31 L1147.29 1209.31 L1146.7 1209.31 L1146.12 1209.31 L1145.53 1209.31 L1144.94 1209.31 L1144.36 1209.31 L1143.77 1209.31 L1143.18 1209.31 L1142.6 1209.31 L1142.01 1209.31 L1141.42 1209.31 L1140.84 1209.31 L1140.25 1209.31 L1139.67 1209.31 L1139.08 1209.31 L1138.49 1209.31 L1137.91 1209.31 L1137.32 1209.31 L1136.73 1209.31 L1136.15 1209.31 L1135.56 1209.31 L1134.97 1209.31 L1134.39 1209.31 L1133.8 1209.31 L1133.21 1209.31 L1132.63 1209.31 L1132.04 1209.31 L1131.46 1209.31 L1130.87 1209.31 L1130.28 1209.31 L1129.7 1209.31 L1129.11 1209.31 L1128.52 1209.31 L1127.94 1209.31 L1127.35 1209.31 L1126.76 1209.31 L1126.18 1209.31 L1125.59 1209.31 L1125.01 1209.31 L1124.42 1209.31 L1123.83 1209.31 L1123.25 1209.31 L1122.66 1209.31 L1122.07 1209.31 L1121.49 1209.31 L1120.9 1209.31 L1120.31 1209.31 L1119.73 1209.31 L1119.14 1209.31 L1118.55 1209.31 L1117.97 1209.31 L1117.38 1209.31 L1116.8 1209.31 L1116.21 1209.31 L1115.62 1209.31 L1115.04 1209.31 L1114.45 1209.31 L1113.86 1209.31 L1113.28 1209.31 L1112.69 1209.31 L1112.1 1209.31 L1111.52 1209.31 L1110.93 1209.31 L1110.34 1209.31 L1109.76 1209.31 L1109.17 1209.31 L1108.59 1209.31 L1108 1209.31 L1107.41 1209.31 L1106.83 1209.31 L1106.24 1209.31 L1105.65 1209.31 L1105.07 1209.31 L1104.48 1209.31 L1103.89 1209.31 L1103.31 1209.31 L1102.72 1209.31 L1102.14 1209.31 L1101.55 1209.31 L1100.96 1209.31 L1100.38 1209.31 L1099.79 1209.31 L1099.2 1209.31 L1098.62 1209.31 L1098.03 1209.31 L1097.44 1209.31 L1096.86 1209.31 L1096.27 1209.31 L1095.68 1209.31 L1095.1 1209.31 L1094.51 1209.31 L1093.93 1209.31 L1093.34 1209.31 L1092.75 1209.31 L1092.17 1209.31 L1091.58 1209.31 L1090.99 1209.31 L1090.41 1209.31 L1089.82 1209.31 L1089.23 1209.31 L1088.65 1209.31 L1088.06 1209.31 L1087.47 1209.31 L1086.89 1209.31 L1086.3 1209.31 L1085.72 1209.31 L1085.13 1209.31 L1084.54 1209.31 L1083.96 1209.31 L1083.37 1209.31 L1082.78 1209.31 L1082.2 1209.31 L1081.61 1209.31 L1081.02 1209.31 L1080.44 1209.31 L1079.85 1209.31 L1079.26 1209.31 L1078.68 1209.31 L1078.09 1209.31 L1077.51 1209.31 L1076.92 1209.31 L1076.33 1209.31 L1075.75 1209.31 L1075.16 1209.31 L1074.57 1209.31 L1073.99 1209.31 L1073.4 1209.31 L1072.81 1209.31 L1072.23 1209.31 L1071.64 1209.31 L1071.06 1209.31 L1070.47 1209.31 L1069.88 1209.31 L1069.3 1209.31 L1068.71 1209.31 L1068.12 1209.31 L1067.54 1209.31 L1066.95 1209.31 L1066.36 1209.31 L1065.78 1209.31 L1065.19 1209.31 L1064.6 1209.31 L1064.02 1209.31 L1063.43 1209.31 L1062.85 1209.31 L1062.26 1209.31 L1061.67 1209.31 L1061.09 1209.31 L1060.5 1209.31 L1059.91 1209.31 L1059.33 1209.31 L1058.74 1209.31 L1058.15 1209.31 L1057.57 1209.31 L1056.98 1209.31 L1056.39 1209.31 L1055.81 1209.31 L1055.22 1209.31 L1054.64 1209.31 L1054.05 1209.31 L1053.46 1209.31 L1052.88 1209.31 L1052.29 1209.31 L1051.7 1209.31 L1051.12 1209.31 L1050.53 1209.31 L1049.94 1209.31 L1049.36 1209.31 L1048.77 1209.31 L1048.19 1209.31 L1047.6 1209.31 L1047.01 1209.31 L1046.43 1209.31 L1045.84 1209.31 L1045.25 1209.31 L1044.67 1209.31 L1044.08 1209.31 L1043.49 1209.31 L1042.91 1209.31 L1042.32 1209.31 L1041.73 1209.31 L1041.15 1209.31 L1040.56 1209.31 L1039.98 1209.31 L1039.39 1209.31 L1038.8 1209.31 L1038.22 1209.31 L1037.63 1209.31 L1037.04 1209.31 L1036.46 1209.31 L1035.87 1209.31 L1035.28 1209.31 L1034.7 1209.31 L1034.11 1209.31 L1033.52 1209.31 L1032.94 1209.31 L1032.35 1209.31 L1031.77 1209.31 L1031.18 1209.31 L1030.59 1209.31 L1030.01 1209.31 L1029.42 1209.31 L1028.83 1209.31 L1028.25 1209.31 L1027.66 1209.31 L1027.07 1209.31 L1026.49 1209.31 L1025.9 1209.31 L1025.32 1209.31 L1024.73 1209.31 L1024.14 1209.31 L1023.56 1209.31 L1022.97 1209.31 L1022.38 1209.31 L1021.8 1209.31 L1021.21 1209.31 L1020.62 1209.31 L1020.04 1209.31 L1019.45 1209.31 L1018.86 1209.31 L1018.28 1209.31 L1017.69 1209.31 L1017.11 1209.31 L1016.52 1209.31 L1015.93 1209.31 L1015.35 1209.31 L1014.76 1209.31 L1014.17 1209.31 L1013.59 1209.31 L1013 1209.31 L1012.41 1209.31 L1011.83 1209.31 L1011.24 1209.31 L1010.65 1209.31 L1010.07 1209.31 L1009.48 1209.31 L1008.9 1209.31 L1008.31 1209.31 L1007.72 1209.31 L1007.14 1209.31 L1006.55 1209.31 L1005.96 1209.31 L1005.38 1209.31 L1004.79 1209.31 L1004.2 1209.31 L1003.62 1209.31 L1003.03 1209.31 L1002.44 1209.31 L1001.86 1209.31 L1001.27 1209.31 L1000.69 1209.31 L1000.1 1209.31 L999.513 1209.31 L998.926 1209.31 L998.34 1209.31 L997.754 1209.31 L997.167 1209.31 L996.581 1209.31 L995.994 1209.31 L995.408 1209.31 L994.822 1209.31 L994.235 1209.31 L993.649 1209.31 L993.062 1209.31 L992.476 1209.31 L991.889 1209.31 L991.303 1209.31 L990.717 1209.31 L990.13 1209.31 L989.544 1209.31 L988.957 1209.31 L988.371 1209.31 L987.785 1209.31 L987.198 1209.31 L986.612 1209.31 L986.025 1209.31  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.45 986.612,1209.45 987.198,1209.45 987.785,1209.45 988.371,1209.45 988.957,1209.45 989.544,1209.45 990.13,1209.45 990.717,1209.45 991.303,1209.45 991.889,1209.45 992.476,1209.45 993.062,1209.45 993.649,1209.45 994.235,1209.45 994.822,1209.45 995.408,1209.45 995.994,1209.45 996.581,1209.45 997.167,1209.45 997.754,1209.45 998.34,1209.45 998.926,1209.45 999.513,1209.45 1000.1,1209.45 1000.69,1209.45 1001.27,1209.45 1001.86,1209.45 1002.44,1209.45 1003.03,1209.45 1003.62,1209.45 1004.2,1209.45 1004.79,1209.45 1005.38,1209.45 1005.96,1209.45 1006.55,1209.45 1007.14,1209.45 1007.72,1209.45 1008.31,1209.45 1008.9,1209.45 1009.48,1209.45 1010.07,1209.45 1010.65,1209.45 1011.24,1209.45 1011.83,1209.45 1012.41,1209.45 1013,1209.45 1013.59,1209.45 1014.17,1209.45 1014.76,1209.45 1015.35,1209.45 1015.93,1209.45 1016.52,1209.45 1017.11,1209.45 1017.69,1209.45 1018.28,1209.45 1018.86,1209.45 1019.45,1209.45 1020.04,1209.45 1020.62,1209.45 1021.21,1209.45 1021.8,1209.45 1022.38,1209.45 1022.97,1209.45 1023.56,1209.45 1024.14,1209.45 1024.73,1209.45 1025.32,1209.45 1025.9,1209.45 1026.49,1209.45 1027.07,1209.45 1027.66,1209.45 1028.25,1209.45 1028.83,1209.45 1029.42,1209.45 1030.01,1209.45 1030.59,1209.45 1031.18,1209.45 1031.77,1209.45 1032.35,1209.45 1032.94,1209.45 1033.52,1209.45 1034.11,1209.45 1034.7,1209.45 1035.28,1209.45 1035.87,1209.45 1036.46,1209.45 1037.04,1209.45 1037.63,1209.45 1038.22,1209.45 1038.8,1209.45 1039.39,1209.45 1039.98,1209.45 1040.56,1209.45 1041.15,1209.45 1041.73,1209.45 1042.32,1209.45 1042.91,1209.45 1043.49,1209.45 1044.08,1209.45 1044.67,1209.45 1045.25,1209.45 1045.84,1209.45 1046.43,1209.45 1047.01,1209.45 1047.6,1209.45 1048.19,1209.45 1048.77,1209.45 1049.36,1209.45 1049.94,1209.45 1050.53,1209.45 1051.12,1209.45 1051.7,1209.45 1052.29,1209.45 1052.88,1209.45 1053.46,1209.45 1054.05,1209.45 1054.64,1209.45 1055.22,1209.45 1055.81,1209.45 1056.39,1209.45 1056.98,1209.45 1057.57,1209.45 1058.15,1209.45 1058.74,1209.45 1059.33,1209.45 1059.91,1209.45 1060.5,1209.45 1061.09,1209.45 1061.67,1209.45 1062.26,1209.45 1062.85,1209.45 1063.43,1209.45 1064.02,1209.45 1064.6,1209.45 1065.19,1209.45 1065.78,1209.45 1066.36,1209.45 1066.95,1209.45 1067.54,1209.45 1068.12,1209.45 1068.71,1209.45 1069.3,1209.45 1069.88,1209.45 1070.47,1209.45 1071.06,1209.45 1071.64,1209.45 1072.23,1209.45 1072.81,1209.45 1073.4,1209.45 1073.99,1209.45 1074.57,1209.45 1075.16,1209.45 1075.75,1209.45 1076.33,1209.45 1076.92,1209.45 1077.51,1209.45 1078.09,1209.45 1078.68,1209.45 1079.26,1209.45 1079.85,1209.45 1080.44,1209.45 1081.02,1209.45 1081.61,1209.45 1082.2,1209.45 1082.78,1209.45 1083.37,1209.45 1083.96,1209.45 1084.54,1209.45 1085.13,1209.45 1085.72,1209.45 1086.3,1209.45 1086.89,1209.45 1087.47,1209.45 1088.06,1209.45 1088.65,1209.45 1089.23,1209.45 1089.82,1209.45 1090.41,1209.45 1090.99,1209.45 1091.58,1209.45 1092.17,1209.45 1092.75,1209.45 1093.34,1209.45 1093.93,1209.45 1094.51,1209.45 1095.1,1209.45 1095.68,1209.45 1096.27,1209.45 1096.86,1209.45 1097.44,1209.45 1098.03,1209.45 1098.62,1209.45 1099.2,1209.45 1099.79,1209.45 1100.38,1209.45 1100.96,1209.45 1101.55,1209.45 1102.14,1209.45 1102.72,1209.45 1103.31,1209.45 1103.89,1209.45 1104.48,1209.45 1105.07,1209.45 1105.65,1209.45 1106.24,1209.45 1106.83,1209.45 1107.41,1209.45 1108,1209.45 1108.59,1209.45 1109.17,1209.45 1109.76,1209.45 1110.34,1209.45 1110.93,1209.45 1111.52,1209.45 1112.1,1209.45 1112.69,1209.45 1113.28,1209.45 1113.86,1209.45 1114.45,1209.45 1115.04,1209.45 1115.62,1209.45 1116.21,1209.45 1116.8,1209.45 1117.38,1209.45 1117.97,1209.45 1118.55,1209.45 1119.14,1209.45 1119.73,1209.45 1120.31,1209.45 1120.9,1209.45 1121.49,1209.45 1122.07,1209.45 1122.66,1209.45 1123.25,1209.45 1123.83,1209.45 1124.42,1209.45 1125.01,1209.45 1125.59,1209.45 1126.18,1209.45 1126.76,1209.45 1127.35,1209.45 1127.94,1209.45 1128.52,1209.45 1129.11,1209.45 1129.7,1209.45 1130.28,1209.45 1130.87,1209.45 1131.46,1209.45 1132.04,1209.45 1132.63,1209.45 1133.21,1209.45 1133.8,1209.45 1134.39,1209.45 1134.97,1209.45 1135.56,1209.45 1136.15,1209.45 1136.73,1209.45 1137.32,1209.45 1137.91,1209.45 1138.49,1209.45 1139.08,1209.45 1139.67,1209.45 1140.25,1209.45 1140.84,1209.45 1141.42,1209.45 1142.01,1209.45 1142.6,1209.45 1143.18,1209.45 1143.77,1209.45 1144.36,1209.45 1144.94,1209.45 1145.53,1209.45 1146.12,1209.45 1146.7,1209.45 1147.29,1209.45 1147.88,1209.45 1148.46,1209.45 1149.05,1209.45 1149.63,1209.45 1150.22,1209.45 1150.81,1209.45 1151.39,1209.45 1151.98,1209.45 1152.57,1209.45 1153.15,1209.45 1153.74,1209.45 1154.33,1209.45 1154.91,1209.45 1155.5,1209.45 1156.09,1209.45 1156.67,1209.45 1157.26,1209.45 1157.84,1209.45 1158.43,1209.45 1159.02,1209.45 1159.6,1209.45 1160.19,1209.45 1160.78,1209.45 1161.36,1209.45 1161.95,1209.45 1162.54,1209.45 1163.12,1209.45 1163.71,1209.45 1164.29,1209.45 1164.88,1209.45 1165.47,1209.45 1166.05,1209.45 1166.64,1209.45 1167.23,1209.45 1167.81,1209.45 1168.4,1209.45 1168.99,1209.45 1169.57,1209.45 1170.16,1209.45 1170.75,1209.45 1171.33,1209.45 1171.92,1209.45 1172.5,1209.45 1173.09,1209.45 1173.68,1209.45 1174.26,1209.45 1174.85,1209.45 1175.44,1209.45 1176.02,1209.45 1176.61,1209.45 1177.2,1209.45 1177.78,1209.45 1178.37,1209.45 1178.96,1209.45 1179.54,1209.45 1180.13,1209.45 1180.71,1209.45 1181.3,1209.45 1181.89,1209.45 1182.47,1209.45 1183.06,1209.45 1183.65,1209.45 1184.23,1209.45 1184.82,1209.45 1185.41,1209.45 1185.99,1209.45 1186.58,1209.45 1187.16,1209.45 1187.75,1209.45 1188.34,1209.45 1188.92,1209.45 1189.51,1209.45 1190.1,1209.45 1190.68,1209.45 1191.27,1209.45 1191.86,1209.45 1192.44,1209.45 1193.03,1209.45 1193.62,1209.45 1194.2,1209.45 1194.79,1209.45 1195.37,1209.45 1195.96,1209.45 1196.55,1209.45 1197.13,1209.45 1197.72,1209.45 1198.31,1209.45 1198.89,1209.45 1199.48,1209.45 1200.07,1209.45 1200.65,1209.45 1201.24,1209.45 1201.83,1209.45 1202.41,1209.45 1203,1209.45 1203.58,1209.45 1204.17,1209.45 1204.76,1209.45 1205.34,1209.45 1205.93,1209.45 1206.52,1209.45 1207.1,1209.45 1207.69,1209.45 1208.28,1209.45 1208.86,1209.45 1209.45,1209.45 1210.03,1209.45 1210.62,1209.45 1211.21,1209.45 1211.79,1209.45 1212.38,1209.45 1212.97,1209.45 1213.55,1209.45 1214.14,1209.45 1214.73,1209.45 1215.31,1209.45 1215.9,1209.45 1216.49,1209.45 1217.07,1209.45 1217.66,1209.45 1218.24,1209.45 1218.83,1209.45 1219.42,1209.45 1220,1209.45 1220.59,1209.45 1221.18,1209.45 1221.76,1209.45 1222.35,1209.45 1222.94,1209.45 1223.52,1209.45 1224.11,1209.45 1224.7,1209.45 1225.28,1209.45 1225.87,1209.45 1226.45,1209.45 1227.04,1209.45 1227.63,1209.45 1228.21,1209.45 1228.8,1209.45 1229.39,1209.45 1229.97,1209.45 1230.56,1209.45 1231.15,1209.45 1231.73,1209.45 1232.32,1209.45 1232.91,1209.45 1233.49,1209.45 1234.08,1209.45 1234.66,1209.45 1235.25,1209.45 1235.84,1209.45 1236.42,1209.45 1237.01,1209.45 1237.6,1209.45 1238.18,1209.45 1238.77,1209.45 1239.36,1209.45 1239.94,1209.45 1240.53,1209.45 1241.11,1209.45 1241.7,1209.45 1242.29,1209.45 1242.87,1209.45 1243.46,1209.45 1244.05,1209.45 1244.63,1209.45 1245.22,1209.45 1245.81,1209.45 1246.39,1209.45 1246.98,1209.45 1247.57,1209.45 1248.15,1209.45 1248.74,1209.45 1249.32,1209.45 1249.91,1209.45 1250.5,1209.45 1251.08,1209.45 1251.67,1209.45 1252.26,1209.45 1252.84,1209.45 1253.43,1209.45 1254.02,1209.45 1254.6,1209.45 1255.19,1209.45 1255.78,1209.45 1256.36,1209.45 1256.95,1209.45 1257.53,1209.45 1258.12,1209.45 1258.71,1209.45 1259.29,1209.45 1259.88,1209.45 1260.47,1209.45 1261.05,1209.45 1261.64,1209.45 1262.23,1209.45 1262.81,1209.45 1263.4,1209.45 1263.98,1209.45 1264.57,1209.45 1265.16,1209.45 1265.74,1209.45 1266.33,1209.45 1266.92,1209.45 1267.5,1209.45 1268.09,1209.45 1268.68,1209.45 1269.26,1209.45 1269.85,1209.45 1270.44,1209.45 1271.02,1209.45 1271.61,1209.45 1272.19,1209.45 1272.78,1209.45 1273.37,1209.45 1273.95,1209.45 1274.54,1209.45 1275.13,1209.45 1275.71,1209.45 1276.3,1209.45 1276.89,1209.45 1277.47,1209.45 1278.06,1209.45 1278.65,1209.45 1279.23,1209.45 1279.82,1209.45 1280.4,1209.45 1280.99,1209.45 1281.58,1209.45 1282.16,1209.45 1282.75,1209.45 1283.34,1209.45 1283.92,1209.45 1284.51,1209.45 1285.1,1209.45 1285.68,1209.45 1286.27,1209.45 1286.86,1209.45 1287.44,1209.45 1288.03,1209.45 1288.61,1209.45 1289.2,1209.45 1289.79,1209.45 1290.37,1209.45 1290.96,1209.45 1291.55,1209.45 1292.13,1209.45 1292.72,1209.45 1293.31,1209.45 1293.89,1209.45 1294.48,1209.45 1295.06,1209.45 1295.65,1209.45 1296.24,1209.45 1296.82,1209.45 1297.41,1209.45 1298,1209.45 1298.58,1209.45 1299.17,1209.45 1299.76,1209.45 1300.34,1209.45 1300.93,1209.45 1301.52,1209.45 1302.1,1209.45 1302.69,1209.45 1303.27,1209.45 1303.86,1209.45 1304.45,1209.45 1305.03,1209.45 1305.62,1209.45 1306.21,1209.45 1306.79,1209.45 1307.38,1209.45 1307.97,1209.45 1308.55,1209.45 1309.14,1209.45 1309.73,1209.45 1310.31,1209.45 1310.9,1209.45 1311.48,1209.45 1312.07,1209.45 1312.66,1209.45 1313.24,1209.45 1313.83,1209.45 1314.42,1209.45 1315,1209.45 1315.59,1209.45 1316.18,1209.45 1316.76,1209.45 1317.35,1209.45 1317.93,1209.45 1318.52,1209.45 1319.11,1209.45 1319.69,1209.45 1320.28,1209.45 1320.87,1209.45 1321.45,1209.45 1322.04,1209.45 1322.63,1209.45 1323.21,1209.45 1323.8,1209.45 1324.39,1209.45 1324.97,1209.45 1325.56,1209.45 1326.14,1209.45 1326.73,1209.45 1327.32,1209.45 1327.9,1209.45 1328.49,1209.45 1329.08,1209.45 1329.66,1209.45 1330.25,1209.45 1330.84,1209.45 1331.42,1209.45 1332.01,1209.45 1332.6,1209.45 1333.18,1209.45 1333.77,1209.45 1334.35,1209.45 1334.94,1209.45 1335.53,1209.45 1336.11,1209.45 1336.7,1209.45 1337.29,1209.45 1337.87,1209.45 1338.46,1209.45 1339.05,1209.45 1339.63,1209.45 1340.22,1209.45 1340.8,1209.45 1341.39,1209.45 1341.98,1209.45 1342.56,1209.45 1343.15,1209.45 1343.74,1209.45 1344.32,1209.45 1344.91,1209.45 1345.5,1209.45 1346.08,1209.45 1346.67,1209.45 1347.26,1209.45 1347.84,1209.45 1348.43,1209.45 1349.01,1209.45 1349.6,1209.45 1350.19,1209.45 1350.77,1209.45 1351.36,1209.45 1351.95,1209.45 1352.53,1209.45 1353.12,1209.45 1353.71,1209.45 1354.29,1209.45 1354.88,1209.45 1355.47,1209.45 1356.05,1209.45 1356.64,1209.45 1357.22,1209.45 1357.81,1209.45 1358.4,1209.45 1358.98,1209.45 1359.57,1209.45 1360.16,1209.45 1360.74,1209.45 1361.33,1209.45 1361.92,1209.45 1362.5,1209.45 1363.09,1209.45 1363.68,1209.45 1364.26,1209.45 1364.85,1209.45 1365.43,1209.45 1366.02,1209.45 1366.61,1209.45 1367.19,1209.45 1367.78,1209.45 1368.37,1209.45 1368.95,1209.45 1369.54,1209.45 1370.13,1209.45 1370.71,1209.45 1371.3,1209.45 1371.88,1209.45 1372.47,1209.45 1373.06,1209.45 1373.64,1209.45 1374.23,1209.45 1374.82,1209.45 1375.4,1209.45 1375.99,1209.45 1376.58,1209.45 1377.16,1209.45 1377.75,1209.45 1378.34,1209.45 1378.92,1209.45 1379.51,1209.45 1380.09,1209.45 1380.68,1209.45 1381.27,1209.45 1381.85,1209.45 1382.44,1209.45 1383.03,1209.45 1383.61,1209.45 1384.2,1209.45 1384.79,1209.45 1385.37,1209.45 1385.96,1209.45 1386.55,1209.45 1387.13,1209.45 1387.72,1209.45 1388.3,1209.45 1388.89,1209.45 1389.48,1209.45 1390.06,1209.45 1390.65,1209.45 1391.24,1209.45 1391.82,1209.45 1392.41,1209.45 1393,1209.45 1393.58,1209.45 1394.17,1209.45 1394.75,1209.45 1395.34,1209.45 1395.93,1209.45 1396.51,1209.45 1397.1,1209.45 1397.69,1209.45 1398.27,1209.45 1398.86,1209.45 1399.45,1209.45 1400.03,1209.45 1400.62,1209.45 1401.21,1209.45 1401.79,1209.45 1402.38,1209.45 1402.96,1209.45 1403.55,1209.45 1404.14,1209.45 1404.72,1209.45 1405.31,1209.45 1405.9,1209.45 1406.48,1209.45 1407.07,1209.45 1407.66,1209.45 1408.24,1209.45 1408.83,1209.45 1409.42,1209.45 1410,1209.45 1410.59,1209.45 1411.17,1209.45 1411.76,1209.45 1412.35,1209.45 1412.93,1209.45 1413.52,1209.45 1414.11,1209.45 1414.69,1209.45 1415.28,1209.45 1415.87,1209.45 1416.45,1209.45 1417.04,1209.45 1417.63,1209.45 1418.21,1209.45 1418.8,1209.45 1419.38,1209.45 1419.97,1209.45 1420.56,1209.45 1421.14,1209.45 1421.73,1209.45 1422.32,1209.45 1422.9,1209.45 1423.49,1209.45 1424.08,1209.45 1424.66,1209.45 1425.25,1209.45 1425.83,1209.45 1426.42,1209.45 1427.01,1209.45 1427.59,1209.45 1428.18,1209.45 1428.77,1209.45 1429.35,1209.45 1429.94,1209.45 1430.53,1209.45 1431.11,1209.45 1431.7,1209.45 1432.29,1209.45 1432.87,1209.45 1433.46,1209.45 1434.04,1209.45 1434.63,1209.45 1435.22,1209.45 1435.8,1209.45 1436.39,1209.45 1436.98,1209.45 1437.56,1209.45 1438.15,1209.45 1438.74,1209.45 1439.32,1209.45 1439.91,1209.45 1440.5,1209.45 1441.08,1209.45 1441.67,1209.45 1442.25,1209.45 1442.84,1209.45 1443.43,1209.45 1444.01,1209.45 1444.6,1209.45 1445.19,1209.45 1445.77,1209.45 1446.36,1209.45 1446.95,1209.45 1447.53,1209.45 1448.12,1209.45 1448.7,1209.45 1449.29,1209.45 1449.88,1209.45 1450.46,1209.45 1451.05,1209.45 1451.64,1209.45 1452.22,1209.45 1452.81,1209.45 1453.4,1209.45 1453.98,1209.45 1454.57,1209.45 1455.16,1209.45 1455.74,1209.45 1456.33,1209.45 1456.91,1209.45 1457.5,1209.45 1458.09,1209.45 1458.67,1209.45 1459.26,1209.45 1459.85,1209.45 1460.43,1209.45 1461.02,1209.45 1461.61,1209.45 1462.19,1209.45 1462.78,1209.45 1463.37,1209.45 1463.95,1209.45 1464.54,1209.45 1465.12,1209.45 1465.71,1209.45 1466.3,1209.45 1466.88,1209.45 1467.47,1209.45 1468.06,1209.45 1468.64,1209.45 1469.23,1209.45 1469.82,1209.45 1470.4,1209.45 1470.99,1209.45 1471.57,1209.45 1472.16,1209.45 1472.75,1209.45 1473.33,1209.45 1473.92,1209.45 1474.51,1209.45 1475.09,1209.45 1475.68,1209.45 1476.27,1209.45 1476.85,1209.45 1477.44,1209.45 1478.03,1209.45 1478.61,1209.45 1479.2,1209.45 1479.78,1209.45 1480.37,1209.45 1480.96,1209.45 1481.54,1209.45 1482.13,1209.45 1482.72,1209.45 1483.3,1209.45 1483.89,1209.45 1484.48,1209.45 1485.06,1209.45 1485.65,1209.45 1486.24,1209.45 1486.82,1209.45 1487.41,1209.45 1487.99,1209.45 1488.58,1209.45 1489.17,1209.45 1489.75,1209.45 1490.34,1209.45 1490.93,1209.45 1491.51,1209.45 1492.1,1209.45 1492.69,1209.45 1493.27,1209.45 1493.86,1209.45 1494.45,1209.45 1495.03,1209.45 1495.62,1209.45 1496.2,1209.45 1496.79,1209.45 1497.38,1209.45 1497.96,1209.45 1498.55,1209.45 1499.14,1209.45 1499.72,1209.45 1500.31,1209.45 1500.9,1209.45 1501.48,1209.45 1502.07,1209.45 1502.65,1209.45 1503.24,1209.45 1503.83,1209.45 1504.41,1209.45 1505,1209.45 1505.59,1209.45 1506.17,1209.45 1506.76,1209.45 1507.35,1209.45 1507.93,1209.45 1508.52,1209.45 1509.11,1209.45 1509.69,1209.45 1510.28,1209.45 1510.86,1209.45 1511.45,1209.45 1512.04,1209.45 1512.62,1209.45 1513.21,1209.45 1513.8,1209.45 1514.38,1209.45 1514.97,1209.45 1515.56,1209.45 1516.14,1209.45 1516.73,1209.45 1517.32,1209.45 1517.9,1209.45 1518.49,1209.45 1519.07,1209.45 1519.66,1209.45 1520.25,1209.45 1520.83,1209.45 1521.42,1209.45 1522.01,1209.45 1522.59,1209.45 1523.18,1209.45 1523.77,1209.45 1524.35,1209.45 1524.94,1209.45 1525.52,1209.45 1526.11,1209.45 1526.7,1209.45 1527.28,1209.45 1527.87,1209.45 1528.46,1209.45 1529.04,1209.45 1529.63,1209.45 1530.22,1209.45 1530.8,1209.45 1531.39,1209.45 1531.98,1209.45 1532.56,1209.45 1533.15,1209.45 1533.73,1209.45 1534.32,1209.45 1534.91,1209.45 1535.49,1209.45 1536.08,1209.45 1536.67,1209.45 1537.25,1209.45 1537.84,1209.45 1538.43,1209.45 1539.01,1209.45 1539.6,1209.45 1540.19,1209.45 1540.77,1209.45 1541.36,1209.45 1541.94,1209.45 1542.53,1209.45 1543.12,1209.45 1543.7,1209.45 1544.29,1209.45 1544.88,1209.45 1545.46,1209.45 1546.05,1209.45 1546.64,1209.45 1547.22,1209.45 1547.81,1209.45 1548.4,1209.45 1548.98,1209.45 1549.57,1209.45 1550.15,1209.45 1550.74,1209.45 1551.33,1209.45 1551.91,1209.45 1552.5,1209.45 1553.09,1209.45 1553.67,1209.45 1554.26,1209.45 1554.85,1209.45 1555.43,1209.45 1556.02,1209.45 1556.6,1209.45 1557.19,1209.45 1557.78,1209.45 1558.36,1209.45 1558.95,1209.45 1559.54,1209.45 1560.12,1209.45 1560.71,1209.45 1561.3,1209.45 1561.88,1209.45 1562.47,1209.45 1563.06,1209.45 1563.64,1209.45 1564.23,1209.45 1564.81,1209.45 1565.4,1209.45 1565.99,1209.45 1566.57,1209.45 1567.16,1209.45 1567.75,1209.45 1568.33,1209.45 1568.92,1209.45 1569.51,1209.45 1570.09,1209.45 1570.68,1209.45 1571.27,1209.45 1571.85,1209.45 1572.44,1209.45 1573.02,1209.45 1573.61,1209.45 1574.2,1209.45 1574.78,1209.45 1575.37,1209.45 1575.96,1209.45 1576.54,1209.45 1577.13,1209.45 1577.72,1209.45 1578.3,1209.45 1578.89,1209.45 1579.47,1209.45 1580.06,1209.45 1580.65,1209.45 1581.23,1209.45 1581.82,1209.45 1582.41,1209.45 1582.99,1209.45 1583.58,1209.45 1584.17,1209.45 1584.75,1209.45 1585.34,1209.45 1585.93,1209.45 1586.51,1209.45 1587.1,1209.45 1587.68,1209.45 1588.27,1209.45 1588.86,1209.45 1589.44,1209.45 1590.03,1209.45 1590.62,1209.45 1591.2,1209.45 1591.79,1209.45 1592.38,1209.45 1592.96,1209.45 1593.55,1209.45 1594.14,1209.45 1594.72,1209.45 1595.31,1209.45 1595.89,1209.45 1596.48,1209.45 1597.07,1209.45 1597.65,1209.45 1598.24,1209.45 1598.83,1209.45 1599.41,1209.45 1600,1209.45 1600.59,1209.45 1601.17,1209.45 1601.76,1209.45 1602.34,1209.45 1602.93,1209.45 1603.52,1209.45 1604.1,1209.45 1604.69,1209.45 1605.28,1209.45 1605.86,1209.45 1606.45,1209.45 1607.04,1209.45 1607.62,1209.45 1608.21,1209.45 1608.8,1209.45 1609.38,1209.45 1609.97,1209.45 1610.55,1209.45 1611.14,1209.45 1611.73,1209.45 1612.31,1209.45 1612.9,1209.45 1613.49,1209.45 1614.07,1209.45 1614.66,1209.45 1615.25,1209.45 1615.83,1209.45 1616.42,1209.45 1617.01,1209.45 1617.59,1209.45 1618.18,1209.45 1618.76,1209.45 1619.35,1209.45 1619.94,1209.45 1620.52,1209.45 1621.11,1209.45 1621.7,1209.45 1622.28,1209.45 1622.87,1209.45 1623.46,1209.45 1624.04,1209.45 1624.63,1209.45 1625.22,1209.45 1625.8,1209.45 1626.39,1209.45 1626.97,1209.45 1627.56,1209.45 1628.15,1209.45 1628.73,1209.45 1629.32,1209.45 1629.91,1209.45 1630.49,1209.45 1631.08,1209.45 1631.67,1209.45 1632.25,1209.45 1632.84,1209.45 1633.42,1209.45 1634.01,1209.45 1634.6,1209.45 1635.18,1209.45 1635.77,1209.45 1636.36,1209.45 1636.94,1209.45 1637.53,1209.45 1638.12,1209.45 1638.7,1209.45 1639.29,1209.45 1639.88,1209.45 1640.46,1209.45 1641.05,1209.45 1641.63,1209.45 1642.22,1209.45 1642.81,1209.45 1643.39,1209.45 1643.98,1209.45 1644.57,1209.45 1645.15,1209.45 1645.74,1209.45 1646.33,1209.45 1646.91,1209.45 1647.5,1209.45 1648.09,1209.45 1648.67,1209.45 1649.26,1209.45 1649.84,1209.45 1650.43,1209.45 1651.02,1209.45 1651.6,1209.45 1652.19,1209.45 1652.78,1209.45 1653.36,1209.45 1653.95,1209.45 1654.54,1209.45 1655.12,1209.45 1655.71,1209.45 1656.29,1209.45 1656.88,1209.45 1657.47,1209.45 1658.05,1209.45 1658.64,1209.45 1659.23,1209.45 1659.81,1209.45 1660.4,1209.45 1660.99,1209.45 1661.57,1209.45 1662.16,1209.45 1662.75,1209.45 1663.33,1209.45 1663.92,1209.45 1664.5,1209.45 1665.09,1209.45 1665.68,1209.45 1666.26,1209.45 1666.85,1209.45 1667.44,1209.45 1668.02,1209.45 1668.61,1209.45 1669.2,1209.45 1669.78,1209.45 1670.37,1209.45 1670.96,1209.45 1671.54,1209.45 1672.13,1209.45 1672.71,1209.45 1673.3,1209.45 1673.89,1209.45 1674.47,1209.45 1675.06,1209.45 1675.65,1209.45 1676.23,1209.45 1676.82,1209.45 1677.41,1209.45 1677.99,1209.45 1678.58,1209.45 1679.17,1209.45 1679.75,1209.45 1680.34,1209.45 1680.92,1209.45 1681.51,1209.45 1682.1,1209.45 1682.68,1209.45 1683.27,1209.45 1683.86,1209.45 1684.44,1209.45 1685.03,1209.45 1685.62,1209.45 1686.2,1209.45 1686.79,1209.45 1687.37,1209.45 1687.96,1209.45 1688.55,1209.45 1689.13,1209.45 1689.72,1209.45 1690.31,1209.45 1690.89,1209.45 1691.48,1209.45 1692.07,1209.45 1692.65,1209.45 1693.24,1209.45 1693.83,1209.45 1694.41,1209.45 1695,1209.45 1695.58,1209.45 1696.17,1209.45 1696.76,1209.45 1697.34,1209.45 1697.93,1209.45 1698.52,1209.45 1699.1,1209.45 1699.69,1209.45 1700.28,1209.45 1700.86,1209.45 1701.45,1209.45 1702.04,1209.45 1702.62,1209.45 1703.21,1209.45 1703.79,1209.45 1704.38,1209.45 1704.97,1209.45 1705.55,1209.45 1706.14,1209.45 1706.73,1209.45 1707.31,1209.45 1707.9,1209.45 1708.49,1209.45 1709.07,1209.45 1709.66,1209.45 1710.24,1209.45 1710.83,1209.45 1711.42,1209.45 1712,1209.45 1712.59,1209.45 1713.18,1209.45 1713.76,1209.45 1714.35,1209.45 1714.94,1209.45 1715.52,1209.45 1716.11,1209.45 1716.7,1209.45 1717.28,1209.45 1717.87,1209.45 1718.45,1209.45 1719.04,1209.45 1719.63,1209.45 1720.21,1209.45 1720.8,1209.45 1721.39,1209.45 1721.97,1209.45 1722.56,1209.45 1723.15,1209.45 1723.73,1209.45 1724.32,1209.45 1724.91,1209.45 1725.49,1209.45 1726.08,1209.45 1726.66,1209.45 1727.25,1209.45 1727.84,1209.45 1728.42,1209.45 1729.01,1209.45 1729.6,1209.45 1730.18,1209.45 1730.77,1209.45 1731.36,1209.45 1731.94,1209.45 1732.53,1209.45 1733.11,1209.45 1733.7,1209.45 1734.29,1209.45 1734.87,1209.45 1735.46,1209.45 1736.05,1209.45 1736.63,1209.45 1737.22,1209.45 1737.81,1209.45 1738.39,1209.45 1738.98,1209.45 1739.57,1209.45 1740.15,1209.45 1740.74,1209.45 1741.32,1209.45 1741.91,1209.45 1742.5,1209.45 1743.08,1209.45 1743.67,1209.45 1744.26,1209.45 1744.84,1209.45 1745.43,1209.45 1746.02,1209.45 1746.6,1209.45 1747.19,1209.45 1747.78,1209.45 1748.36,1209.45 1748.95,1209.45 1749.53,1209.45 1750.12,1209.45 1750.71,1209.45 1751.29,1209.45 1751.88,1209.45 1752.47,1209.45 1753.05,1209.45 1753.64,1209.45 1754.23,1209.45 1754.81,1209.45 1755.4,1209.45 1755.99,1209.45 1756.57,1209.45 1757.16,1209.45 1757.74,1209.45 1758.33,1209.45 1758.92,1209.45 1759.5,1209.45 1760.09,1209.45 1760.68,1209.45 1761.26,1209.45 1761.85,1209.45 1762.44,1209.45 1763.02,1209.45 1763.61,1209.45 1764.19,1209.45 1764.78,1209.45 1765.37,1209.45 1765.95,1209.45 1766.54,1209.45 1767.13,1209.45 1767.71,1209.45 1768.3,1209.45 1768.89,1209.45 1769.47,1209.45 1770.06,1209.45 1770.65,1209.45 1771.23,1209.45 1771.82,1209.45 1772.4,1209.45 1772.99,1209.45 1773.58,1209.45 1774.16,1209.45 1774.75,1209.45 1775.34,1209.45 1775.92,1209.45 1776.51,1209.45 1777.1,1209.45 1777.68,1209.45 1778.27,1209.45 1778.86,1209.45 1779.44,1209.45 1780.03,1209.45 1780.61,1209.45 1781.2,1209.45 1781.79,1209.45 1782.37,1209.45 1782.96,1209.45 1783.55,1209.45 1784.13,1209.45 1784.72,1209.45 1785.31,1209.45 1785.89,1209.45 1786.48,1209.45 1787.06,1209.45 1787.65,1209.45 1788.24,1209.45 1788.82,1209.45 1789.41,1209.45 1790,1209.45 1790.58,1209.45 1791.17,1209.45 1791.76,1209.45 1792.34,1209.45 1792.93,1209.45 1793.52,1209.45 1794.1,1209.45 1794.69,1209.45 1795.27,1209.45 1795.86,1209.45 1796.45,1209.45 1797.03,1209.45 1797.62,1209.45 1798.21,1209.45 1798.79,1209.45 1799.38,1209.45 1799.97,1209.45 1800.55,1209.45 1801.14,1209.45 1801.73,1209.45 1802.31,1209.45 1802.9,1209.45 1803.48,1209.45 1804.07,1209.45 1804.66,1209.45 1805.24,1209.45 1805.83,1209.45 1806.42,1209.45 1807,1209.45 1807.59,1209.45 1808.18,1209.45 1808.76,1209.45 1809.35,1209.45 1809.94,1209.45 1810.52,1209.45 1811.11,1209.45 1811.69,1209.45 1812.28,1209.45 1812.87,1209.45 1813.45,1209.45 1814.04,1209.45 1814.63,1209.45 1815.21,1209.45 1815.8,1209.45 1816.39,1209.45 1816.97,1209.45 1817.56,1209.45 1818.14,1209.45 1818.73,1209.45 1819.32,1209.45 1819.9,1209.45 1820.49,1209.45 1821.08,1209.45 1821.66,1209.45 1822.25,1209.45 1822.84,1209.45 1823.42,1209.45 1824.01,1209.45 1824.6,1209.45 1825.18,1209.45 1825.77,1209.45 1826.35,1209.45 1826.94,1209.45 1827.53,1209.45 1828.11,1209.45 1828.7,1209.45 1829.29,1209.45 1829.87,1209.45 1830.46,1209.45 1831.05,1209.45 1831.63,1209.45 1832.22,1209.45 1832.81,1209.45 1833.39,1209.45 1833.98,1209.45 1834.56,1209.45 1835.15,1209.45 1835.74,1209.45 1836.32,1209.45 1836.91,1209.45 1837.5,1209.45 1838.08,1209.45 1838.67,1209.45 1839.26,1209.45 1839.84,1209.45 1840.43,1209.45 1841.01,1209.45 1841.6,1209.45 1842.19,1209.45 1842.77,1209.45 1843.36,1209.45 1843.95,1209.45 1844.53,1209.45 1845.12,1209.45 1845.71,1209.45 1846.29,1209.45 1846.88,1209.45 1847.47,1209.45 1848.05,1209.45 1848.64,1209.45 1849.22,1209.45 1849.81,1209.45 1850.4,1209.45 1850.98,1209.45 1851.57,1209.45 1852.16,1209.45 1852.74,1209.45 1853.33,1209.45 1853.92,1209.45 1854.5,1209.45 1855.09,1209.45 1855.68,1209.45 1856.26,1209.45 1856.85,1209.45 1857.43,1209.45 1858.02,1209.45 1858.61,1209.45 1859.19,1209.45 1859.78,1209.45 1860.37,1209.45 1860.95,1209.45 1861.54,1209.45 1862.13,1209.45 1862.71,1209.45 1863.3,1209.45 1863.88,1209.45 1864.47,1209.45 1865.06,1209.45 1865.64,1209.45 1866.23,1209.45 1866.82,1209.45 1867.4,1209.45 1867.99,1209.45 1868.58,1209.45 1869.16,1209.45 1869.75,1209.45 1870.34,1209.45 1870.92,1209.45 1871.51,1209.45 1872.09,1209.45 1872.68,1209.45 1873.27,1209.45 1873.85,1209.45 1874.44,1209.45 1875.03,1209.45 1875.61,1209.45 1876.2,1209.45 1876.79,1209.45 1877.37,1209.45 1877.96,1209.45 1878.55,1209.45 1879.13,1209.45 1879.72,1209.45 1880.3,1209.45 1880.89,1209.45 1881.48,1209.45 1882.06,1209.45 1882.65,1209.45 1883.24,1209.45 1883.82,1209.45 1884.41,1209.45 1885,1209.45 1885.58,1209.45 1886.17,1209.45 1886.76,1209.45 1887.34,1209.45 1887.93,1209.45 1888.51,1209.45 1889.1,1209.45 1889.69,1209.45 1890.27,1209.45 1890.86,1209.45 1891.45,1209.45 1892.03,1209.45 1892.62,1209.45 1893.21,1209.45 1893.79,1209.45 1894.38,1209.45 1894.96,1209.45 1895.55,1209.45 1896.14,1209.45 1896.72,1209.45 1897.31,1209.45 1897.9,1209.45 1898.48,1209.45 1899.07,1209.45 1899.66,1209.45 1900.24,1209.45 1900.83,1209.45 1901.42,1209.45 1902,1209.45 1902.59,1209.45 1903.17,1209.45 1903.76,1209.45 1904.35,1209.45 1904.93,1209.45 1905.52,1209.45 1906.11,1209.45 1906.69,1209.45 1907.28,1209.45 1907.87,1209.45 1908.45,1209.45 1909.04,1209.45 1909.63,1209.45 1910.21,1209.45 1910.8,1209.45 1911.38,1209.45 1911.97,1209.45 1912.56,1209.45 1913.14,1209.45 1913.73,1209.45 1914.32,1209.45 1914.9,1209.45 1915.49,1209.45 1916.08,1209.45 1916.66,1209.45 1917.25,1209.45 1917.83,1209.45 1918.42,1209.45 1919.01,1209.45 1919.59,1209.45 1920.18,1209.45 1920.77,1209.45 1921.35,1209.45 1921.94,1209.45 1922.53,1209.45 1923.11,1209.45 1923.7,1209.45 1924.29,1209.45 1924.87,1209.45 1925.46,1209.45 1926.04,1209.45 1926.63,1209.45 1927.22,1209.45 1927.8,1209.45 1928.39,1209.45 1928.98,1209.45 1929.56,1209.45 1930.15,1209.45 1930.74,1209.45 1931.32,1209.45 1931.91,1209.45 1932.5,1209.45 1933.08,1209.45 1933.67,1209.45 1934.25,1209.45 1934.84,1209.45 1935.43,1209.45 1936.01,1209.45 1936.6,1209.45 1937.19,1209.45 1937.77,1209.45 1938.36,1209.45 1938.95,1209.45 1939.53,1209.45 1940.12,1209.45 1940.71,1209.45 1941.29,1209.45 1941.88,1209.45 1942.46,1209.45 1943.05,1209.45 1943.64,1209.45 1944.22,1209.45 1944.81,1209.45 1945.4,1209.45 1945.98,1209.45 1946.57,1209.45 1947.16,1209.45 1947.74,1209.45 1948.33,1209.45 1948.91,1209.45 1949.5,1209.45 1950.09,1209.45 1950.67,1209.45 1951.26,1209.45 1951.85,1209.45 1952.43,1209.45 1953.02,1209.45 1953.61,1209.45 1954.19,1209.45 1954.78,1209.45 1955.37,1209.45 1955.95,1209.45 1956.54,1209.45 1957.12,1209.45 1957.71,1209.45 1958.3,1209.45 1958.88,1209.45 1959.47,1209.45 1960.06,1209.45 1960.64,1209.45 1961.23,1209.45 1961.82,1209.45 1962.4,1209.45 1962.99,1209.45 1963.58,1209.45 1964.16,1209.45 1964.75,1209.45 1965.33,1209.45 1965.92,1209.45 1966.51,1209.45 1967.09,1209.45 1967.68,1209.45 1968.27,1209.45 1968.85,1209.45 1969.44,1209.45 1970.03,1209.45 1970.61,1209.45 1971.2,1209.45 1971.78,1209.45 1972.37,1209.45 1972.96,1209.45 1973.54,1209.45 1974.13,1209.45 1974.72,1209.45 1975.3,1209.45 1975.89,1209.45 1976.48,1209.45 1977.06,1209.45 1977.65,1209.45 1978.24,1209.45 1978.82,1209.45 1979.41,1209.45 1979.99,1209.45 1980.58,1209.45 1981.17,1209.45 1981.75,1209.45 1982.34,1209.45 1982.93,1209.45 1983.51,1209.45 1984.1,1209.45 1984.69,1209.45 1985.27,1209.45 1985.86,1209.45 1986.45,1209.45 1987.03,1209.45 1987.62,1209.45 1988.2,1209.45 1988.79,1209.45 1989.38,1209.45 1989.96,1209.45 1990.55,1209.45 1991.14,1209.45 1991.72,1209.45 1992.31,1209.45 1992.9,1209.45 1993.48,1209.45 1994.07,1209.45 1994.65,1209.45 1995.24,1209.45 1995.83,1209.45 1996.41,1209.45 1997,1209.45 1997.59,1209.45 1998.17,1209.45 1998.76,1209.45 1999.35,1209.45 1999.93,1209.45 2000.52,1209.45 2001.11,1209.45 2001.69,1209.45 2002.28,1209.45 2002.86,1209.45 2003.45,1209.45 2004.04,1209.45 2004.62,1209.45 2005.21,1209.45 2005.8,1209.45 2006.38,1209.45 2006.97,1209.45 2007.56,1209.45 2008.14,1209.45 2008.73,1209.45 2009.32,1209.45 2009.9,1209.45 2010.49,1209.45 2011.07,1209.45 2011.66,1209.45 2012.25,1209.45 2012.83,1209.45 2013.42,1209.45 2014.01,1209.45 2014.59,1209.45 2015.18,1209.45 2015.77,1209.45 2016.35,1209.45 2016.94,1209.45 2017.53,1209.45 2018.11,1209.45 2018.7,1209.45 2019.28,1209.45 2019.87,1209.45 2020.46,1209.45 2021.04,1209.45 2021.63,1209.45 2022.22,1209.45 2022.8,1209.45 2023.39,1209.45 2023.98,1209.45 2024.56,1209.45 2025.15,1209.45 2025.73,1209.45 2026.32,1209.45 2026.91,1209.45 2027.49,1209.45 2028.08,1209.45 2028.67,1209.45 2029.25,1209.45 2029.84,1209.45 2030.43,1209.45 2031.01,1209.45 2031.6,1209.45 2032.19,1209.45 2032.77,1209.45 2033.36,1209.45 2033.94,1209.45 2034.53,1209.45 2035.12,1209.45 2035.7,1209.45 2036.29,1209.45 2036.88,1209.45 2037.46,1209.45 2038.05,1209.45 2038.64,1209.45 2039.22,1209.45 2039.81,1209.45 2040.4,1209.45 2040.98,1209.45 2041.57,1209.45 2042.15,1209.45 2042.74,1209.45 2043.33,1209.45 2043.91,1209.45 2044.5,1209.45 2045.09,1209.45 2045.67,1209.45 2046.26,1209.45 2046.85,1209.45 2047.43,1209.45 2048.02,1209.45 2048.6,1209.45 2049.19,1209.45 2049.78,1209.45 2050.36,1209.45 2050.95,1209.45 2051.54,1209.45 2052.12,1209.45 2052.71,1209.45 2053.3,1209.45 2053.88,1209.45 2054.47,1209.45 2055.06,1209.45 2055.64,1209.45 2056.23,1209.45 2056.81,1209.45 2057.4,1209.45 2057.99,1209.45 2058.57,1209.45 2059.16,1209.45 2059.75,1209.45 2060.33,1209.45 2060.92,1209.45 2061.51,1209.45 2062.09,1209.45 2062.68,1209.45 2063.27,1209.45 2063.85,1209.45 2064.44,1209.45 2065.02,1209.45 2065.61,1209.45 2066.2,1209.45 2066.78,1209.45 2067.37,1209.45 2067.96,1209.45 2068.54,1209.45 2069.13,1209.45 2069.72,1209.45 2070.3,1209.45 2070.89,1209.45 2071.48,1209.45 2072.06,1209.45 2072.65,1209.45 2073.23,1209.45 2073.82,1209.45 2074.41,1209.45 2074.99,1209.45 2075.58,1209.45 2076.17,1209.45 2076.75,1209.45 2077.34,1209.45 2077.93,1209.45 2078.51,1209.45 2079.1,1209.45 2079.68,1209.45 2080.27,1209.45 2080.86,1209.45 2081.44,1209.45 2082.03,1209.45 2082.62,1209.45 2083.2,1209.45 2083.79,1209.45 2084.38,1209.45 2084.96,1209.45 2085.55,1209.45 2086.14,1209.45 2086.72,1209.45 2087.31,1209.45 2087.89,1209.45 2088.48,1209.45 2089.07,1209.45 2089.65,1209.45 2090.24,1209.45 2090.83,1209.45 2091.41,1209.45 2092,1209.45 2092.59,1209.45 2093.17,1209.45 2093.76,1209.45 2094.35,1209.45 2094.93,1209.45 2095.52,1209.45 2096.1,1209.45 2096.69,1209.45 2097.28,1209.45 2097.86,1209.45 2098.45,1209.45 2099.04,1209.45 2099.62,1209.45 2100.21,1209.45 2100.8,1209.45 2101.38,1209.45 2101.97,1209.45 2102.55,1209.45 2103.14,1209.45 2103.73,1209.45 2104.31,1209.45 2104.9,1209.45 2105.49,1209.45 2106.07,1209.45 2106.66,1209.45 2107.25,1209.45 2107.83,1209.45 2108.42,1209.45 2109.01,1209.45 2109.59,1209.45 2110.18,1209.45 2110.76,1209.45 2111.35,1209.45 2111.94,1209.45 2112.52,1209.45 2113.11,1209.45 2113.7,1209.45 2114.28,1209.45 2114.87,1209.45 2115.46,1209.45 2116.04,1209.45 2116.63,1209.45 2117.22,1209.45 2117.8,1209.45 2118.39,1209.45 2118.97,1209.45 2119.56,1209.45 2120.15,1209.45 2120.73,1209.45 2121.32,1209.45 2121.91,1209.45 2122.49,1209.45 2123.08,1209.45 2123.67,1209.45 2124.25,1209.45 2124.84,1209.45 2125.42,1209.45 2126.01,1209.45 2126.6,1209.45 2127.18,1209.45 2127.77,1209.45 2128.36,1209.45 2128.94,1209.45 2129.53,1209.45 2130.12,1209.45 2130.7,1209.45 2131.29,1209.45 2131.88,1209.45 2132.46,1209.45 2133.05,1209.45 2133.63,1209.45 2134.22,1209.45 2134.81,1209.45 2135.39,1209.45 2135.98,1209.45 2136.57,1209.45 2137.15,1209.45 2137.74,1209.45 2138.33,1209.45 2138.91,1209.45 2139.5,1209.45 2140.09,1209.45 2140.67,1209.45 2141.26,1209.45 2141.84,1209.45 2142.43,1209.45 2143.02,1209.45 2143.6,1209.45 2144.19,1209.45 2144.78,1209.45 2145.36,1209.45 2145.95,1209.45 2146.54,1209.45 2147.12,1209.45 2147.71,1209.45 2148.3,1209.45 2148.88,1209.45 2149.47,1209.45 2150.05,1209.45 2150.64,1209.45 2151.23,1209.45 2151.81,1209.45 2152.4,1209.45 2152.99,1209.45 2153.57,1209.45 2154.16,1209.45 2154.75,1209.45 2155.33,1209.45 2155.92,1209.45 2156.5,1209.45 2157.09,1209.45 2157.68,1209.45 2158.26,1209.45 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1560.61,1188.92 1400.01,899.083 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1229.48 985.439,1188.92 2158.26,1188.92 2158.26,1229.48 985.439,1229.48 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip220)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip220)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip223\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip223)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-3801.28 163.232,-4913.07 163.792,-4598.58 164.351,-5565.41 164.91,-6494.69 165.469,-6157.57 166.029,-6968.93 166.588,-5811.43 167.147,-6577.72 167.706,-7273.06 168.266,-7918.46 168.825,-8501.58 169.384,-9009.99 169.943,-8793.68 170.503,-8601.06 171.062,-9018.84 171.621,-8859.02 172.18,-9201.75 172.74,-9051.02 173.299,-8910.96 173.858,-8812.25 174.417,-9089.42 174.977,-8944.52 175.536,-9200.93 176.095,-9412.54 176.655,-9575.64 177.214,-9723.12 177.773,-9832.22 178.332,-9905.3 178.892,-9977.09 179.451,-9781.95 180.01,-9806.91 180.569,-9808.51 181.129,-9796.42 181.688,-9576.48 182.247,-9363.9 182.806,-9329.34 183.366,-9279.23 183.925,-9219.65 184.484,-9143.26 185.043,-8909.54 185.603,-8830.55 186.162,-8481.05 186.721,-8039.33 187.28,-7855.02 187.84,-7576.89 188.399,-7512.05 188.958,-7253.46 189.517,-7091.48 190.077,-6937.91 190.636,-6696.54 191.195,-6543.19 191.754,-6391.06 192.314,-6313.47 192.873,-6082.98 193.432,-5932.57 193.991,-5785.41 194.551,-5698.25 195.11,-5424.94 195.669,-5335.22 196.228,-5128.51 196.788,-4976.46 197.347,-4840.35 197.906,-4700.54 198.465,-4568.62 199.025,-4478.41 199.584,-4340.57 200.143,-4255.97 200.702,-4118.29 201.262,-4036.42 201.821,-3908.14 202.38,-3696.48 202.939,-3607.9 203.499,-3451.09 204.058,-3330.63 204.617,-3064.41 205.176,-2992.04 205.736,-2886.16 206.295,-2815.44 206.854,-2711.73 207.413,-2579.19 207.973,-2482.02 208.532,-2318.05 209.091,-2224.71 209.65,-2132.44 210.21,-2075.23 210.769,-1958.19 211.328,-1870.81 211.887,-1809.6 212.447,-1699.71 213.006,-1650.58 213.565,-1599.54 214.124,-1490.84 214.684,-1439.01 215.243,-1368.51 215.802,-1297.87 216.361,-1174.16 216.921,-1077.35 217.48,-1034.19 218.039,-898.051 218.598,-864.343 219.158,-832.38 219.717,-728.551 220.276,-628.084 220.835,-529.457 221.395,-478.858 221.954,-455.24 222.513,-380.501 223.072,-333.085 223.632,-285.285 224.191,-263.745 224.75,-173.258 225.309,-127.514 225.869,-64.0308 226.428,-23.3417 226.987,-3.89931 227.546,10.2137 228.106,49.7303 228.665,90.4521 229.224,208.92 229.783,259.308 230.343,250.416 230.902,259.692 231.461,266.742 232.02,357.095 232.58,346.465 233.139,377.642 233.698,428.789 234.257,459.783 234.817,464.032 235.376,527.841 235.935,552.747 236.494,575.498 237.054,563.016 237.613,587.181 238.172,607.856 238.731,615.651 239.291,658.133 239.85,645.931 240.409,648.101 240.968,632.051 241.528,747.156 242.087,768.007 242.646,788.492 243.205,807.625 243.765,841.458 244.324,824.094 244.883,843.927 245.442,881.21 246.002,895.578 246.561,877.382 247.12,893.052 247.679,909.3 248.239,942.889 248.798,976.149 249.357,987.025 249.916,980.469 250.476,1007.38 251.035,1016.01 251.594,1006.12 252.153,1000.74 252.713,1025.56 253.272,1016.71 253.831,989.437 254.39,1017.65 254.95,1030.03 255.509,1003.8 256.068,983.041 256.627,994.979 257.187,990.526 257.746,968.434 258.305,981.342 258.864,976.502 259.424,973.203 259.983,954.747 260.542,954.664 261.101,1004.04 261.661,1065.88 262.22,1089.72 262.779,1064.16 263.338,1059.22 263.898,1050.47 264.457,1062.75 265.016,1054.94 265.575,1078.77 266.135,1049.61 266.694,1025.58 267.253,1019.96 267.812,1015.1 268.372,996.437 268.931,992.441 269.49,1038.36 270.049,1031.44 270.609,1043.52 271.168,1068.78 271.727,1094.13 272.286,1084.2 272.846,1125.84 273.405,1098.5 273.964,1041.58 274.523,1049.3 275.083,1073.01 275.642,1030.41 276.201,1023.39 276.76,1031.89 277.32,1042.05 277.879,1050.04 278.438,993.283 278.997,1020.57 279.557,1016.97 280.116,1006.13 280.675,1002.88 281.234,981.245 281.794,1009.65 282.353,1036.88 282.912,1098.79 283.471,1123.58 284.031,1110.97 284.59,1119.7 285.149,1106.47 285.708,1111.99 286.268,1096.73 286.827,1087.41 287.386,1095.23 287.945,1102.44 288.505,1075.46 289.064,1067.41 289.623,1090.1 290.182,1059.58 290.742,1052.08 291.301,1010.99 291.86,1006.35 292.419,1033.57 292.979,1026.27 293.538,1086.13 294.097,1078.2 294.656,1069.11 295.216,1028.21 295.775,1036.83 296.334,1047.58 296.893,1106.99 297.453,1094.38 298.012,1051.25 298.571,1044.03 299.13,1056.07 299.69,1046.09 300.249,1071.62 300.808,1075.84 301.368,1051.85 301.927,1058.64 302.486,1062.13 303.045,1068.11 303.605,1075.71 304.164,1047.98 304.723,1041.62 305.282,1067.12 305.842,1070.29 306.401,1077.85 306.96,1051.51 307.519,1038.26 308.079,1032.16 308.638,1023.3 309.197,1013.29 309.756,987.4 310.316,948.781 310.875,946.778 311.434,973.245 311.993,950.4 312.553,928.185 313.112,939.637 313.671,938.923 314.23,950.287 314.79,963.807 315.349,961.032 315.908,957.296 316.467,969.226 317.027,977.744 317.586,969.582 318.145,998 318.704,987.882 319.264,980.341 319.823,959.041 320.382,955.744 320.941,950.513 321.501,981.063 322.06,957.879 322.619,984.187 323.178,962.036 323.738,972.566 324.297,964.198 324.856,988.445 325.415,998.4 325.975,1007.65 326.534,1029.57 327.093,1035.47 327.652,1026.58 328.212,1002.03 328.771,990.941 329.33,979.571 329.889,956.572 330.449,917.956 331.008,896.642 331.567,911.888 332.126,910.808 332.686,908.797 333.245,903.919 333.804,873.457 334.363,851.479 334.923,866.189 335.482,879.455 336.041,876.735 336.6,906.868 337.16,899.681 337.719,896.612 338.278,895.005 338.837,924.018 339.397,902.697 339.956,832.942 340.515,834.67 341.074,866.502 341.634,864.387 342.193,862.249 342.752,828.896 343.311,815.749 343.871,836.023 344.43,835.538 344.989,871.829 345.548,853.855 346.108,853.979 346.667,886.035 347.226,899.978 347.785,879.392 348.345,893.862 348.904,872.022 349.463,839.853 350.022,821.09 350.582,820.445 351.141,868.145 351.7,878.452 352.259,877.878 352.819,876.047 353.378,858.791 353.937,856.262 354.496,874.328 355.056,887.262 355.615,864.944 356.174,862.951 356.733,839.879 357.293,837.287 357.852,853.236 358.411,868.441 358.97,864.976 359.53,889.037 360.089,882.004 360.648,839.841 361.207,871.666 361.767,820.494 362.326,818.393 362.885,802.044 363.444,801.353 364.004,821.823 364.563,805.612 365.122,870.411 365.681,851.83 366.241,849.311 366.8,864.924 367.359,893.31 367.918,842.845 368.478,837.71 369.037,885.836 369.596,879.781 370.155,859.513 370.715,854.337 371.274,883.695 371.833,862.292 372.392,872.915 372.952,902.347 373.511,910.071 374.07,883.919 374.629,875.904 375.189,888.391 375.748,887.647 376.307,865.423 376.866,866.801 377.426,911.671 377.985,890.754 378.544,884.417 379.103,895.683 379.663,874.103 380.222,904.117 380.781,882.077 381.34,893.556 381.9,918.137 382.459,891.588 383.018,851.412 383.577,847.259 384.137,827.272 384.696,827.327 385.255,828.549 385.814,826.183 386.374,840.102 386.933,856.851 387.492,851.144 388.051,863.895 388.611,877.472 389.17,887.421 389.729,916.532 390.288,930.119 390.848,920.649 391.407,899.532 391.966,879.033 392.525,861.035 393.085,871.767 393.644,885.072 394.203,881.902 394.762,863.547 395.322,843.666 395.881,835.915 396.44,832.323 396.999,816.529 397.559,812.739 398.118,795.135 398.677,775.752 399.236,793.199 399.796,812.718 400.355,826.821 400.914,824.456 401.473,789.687 402.033,804.157 402.592,835.592 403.151,815.69 403.71,815.767 404.27,781.1 404.829,779.065 405.388,777.28 405.947,791.234 406.507,789.181 407.066,789.413 407.625,756.917 408.184,757.715 408.744,740.759 409.303,776.157 409.862,763.069 410.421,795.82 410.981,793.823 411.54,775.69 412.099,774.444 412.658,805.653 413.218,803.71 413.777,813.664 414.336,810.276 414.895,791.736 415.455,773.531 416.014,760.221 416.573,763.408 417.132,747.634 417.692,748.381 418.251,765.001 418.81,778.878 419.369,762.573 419.929,760.475 420.488,758.603 421.047,762.379 421.606,778.571 422.166,779.943 422.725,797.774 423.284,840.355 423.843,804.599 424.403,835.003 424.962,829.306 425.521,875.939 426.08,874.068 426.64,884.645 427.199,895.075 427.758,872.538 428.318,869.461 428.877,860.78 429.436,855.696 429.995,897.276 430.555,875.599 431.114,886.959 431.673,881.398 432.232,843.22 432.792,822.456 433.351,804.998 433.91,804.035 434.469,799.213 435.029,780.001 435.588,807.619 436.147,834.302 436.706,859.353 437.266,855.12 437.825,850.813 438.384,861.463 438.943,856.121 439.503,854.292 440.062,833.503 440.621,830.004 441.18,841.246 441.74,837.42 442.299,838.306 442.858,818.872 443.417,769.26 443.977,786.024 444.536,833.058 445.095,795.415 445.654,708.391 446.214,725.28 446.773,696.282 447.332,730.054 447.891,713.496 448.451,712.144 449.01,714.964 449.569,701.858 450.128,652.338 450.688,644.374 451.247,653.221 451.806,625.404 452.365,645.072 452.925,649.104 453.484,654.534 454.043,642.337 454.602,630.938 455.162,667.751 455.721,705.828 456.28,725.312 456.839,728.505 457.399,729.727 457.958,763.848 458.517,748.942 459.076,765.649 459.636,765.429 460.195,781.787 460.754,764.185 461.313,760.771 461.873,776.804 462.432,809.813 462.991,823.24 463.55,817.899 464.11,844.158 464.669,836.42 465.228,833.629 465.787,829.762 466.347,858.483 466.906,823.99 467.465,804.905 468.024,786.614 468.584,800.116 469.143,797.814 469.702,797.548 470.261,792.29 470.821,770.088 471.38,801.78 471.939,784.22 472.498,794.238 473.058,811.564 473.617,773.642 474.176,737.648 474.735,748.71 475.295,765.631 475.854,700.354 476.413,702.998 476.972,706.758 477.532,726.637 478.091,759.233 478.65,758.333 479.209,740.08 479.769,736.226 480.328,699.832 480.887,703.506 481.446,717.743 482.006,652.48 482.565,656.152 483.124,662.788 483.683,621.904 484.243,626.697 484.802,647.119 485.361,636.214 485.92,657.078 486.48,659.161 487.039,662.166 487.598,684.736 488.157,653.657 488.717,657.925 489.276,675.185 489.835,725.981 490.394,693.866 490.954,677.854 491.513,696.636 492.072,684.521 492.631,683.22 493.191,684.532 493.75,702.938 494.309,737.264 494.868,704.957 495.428,725.868 495.987,663.504 496.546,666.07 497.105,687.565 497.665,692.673 498.224,693.738 498.783,696.33 499.342,682.571 499.902,700.529 500.461,700.651 501.02,715.987 501.579,720.489 502.139,737.487 502.698,722.943 503.257,694.175 503.816,699.603 504.376,701.828 504.935,704.759 505.494,723.608 506.053,707.586 506.613,725.366 507.172,708.216 507.731,693.103 508.29,692.485 508.85,729.286 509.409,731.556 509.968,719.403 510.527,702.926 511.087,720.976 511.646,739.959 512.205,753.335 512.764,732.329 513.324,732.453 513.883,729.619 514.442,729.535 515.001,728.876 515.561,727.847 516.12,773.604 516.679,772.075 517.238,749.926 517.798,763.55 518.357,781.473 518.916,781.504 519.475,761.611 520.035,775.067 520.594,772.453 521.153,767.465 521.712,764.923 522.272,749.837 522.831,747.732 523.39,762.675 523.949,742.127 524.509,738.545 525.068,753.541 525.627,769.928 526.186,768.015 526.746,795.659 527.305,807.913 527.864,788.126 528.423,821.384 528.983,817.842 529.542,799.758 530.101,779.726 530.66,775.425 531.22,789.006 531.779,797.537 532.338,778.181 532.897,761.03 533.457,728.494 534.016,744.685 534.575,745.012 535.134,776.712 535.694,770.106 536.253,767.696 536.812,748.716 537.371,736.332 537.931,735.467 538.49,735.971 539.049,763.986 539.608,763.838 540.168,758.444 540.727,738.661 541.286,733.643 541.845,713.788 542.405,747.503 542.964,729.531 543.523,729.378 544.082,746.432 544.642,745.617 545.201,775.404 545.76,757.161 546.319,709.809 546.879,708.213 547.438,691.887 547.997,708.839 548.556,707.716 549.116,711.327 549.675,730.189 550.234,711.064 550.793,697.96 551.353,698.905 551.912,718.678 552.471,701.95 553.031,685.85 553.59,668.364 554.149,701.361 554.708,717.823 555.268,717.222 555.827,735.057 556.386,736.202 556.945,753.432 557.505,736.732 558.064,800.408 558.623,760.627 559.182,803.17 559.742,797.101 560.301,808.996 560.86,816.567 561.419,810.978 561.979,804.866 562.538,801.936 563.097,798.726 563.656,748.333 564.216,733.307 564.775,746.219 565.334,793.917 565.893,821.709 566.453,798.887 567.012,781.1 567.571,778.807 568.13,792.742 568.69,790.608 569.249,785.617 569.808,764.163 570.367,777.025 570.927,755.656 571.486,753.967 572.045,814.73 572.604,809.949 573.164,806.277 573.723,851.098 574.282,845.432 574.841,840.673 575.401,832.964 575.96,809.23 576.519,756.649 577.078,786.979 577.638,752.164 578.197,750.355 578.756,762.533 579.315,761.054 579.875,738.692 580.434,737.58 580.993,732.357 581.552,715.147 582.112,697.926 582.671,712.506 583.23,713.671 583.789,712.304 584.349,712.75 584.908,732.307 585.467,713.867 586.026,707.451 586.586,691.82 587.145,690.619 587.704,675.692 588.263,660.195 588.823,629.869 589.382,636.188 589.941,606.909 590.5,598.451 591.06,602.905 591.619,625.683 592.178,644.579 592.737,645.557 593.297,648.192 593.856,683.608 594.415,685.758 594.974,703.896 595.534,736.939 596.093,733.507 596.652,715.954 597.211,716.147 597.771,709.599 598.33,743.479 598.889,742.855 599.448,743.601 600.008,726.418 600.567,708.893 601.126,677.406 601.685,695.358 602.245,696.068 602.804,732.218 603.363,745.998 603.922,742.197 604.482,708.873 605.041,689.365 605.6,660.604 606.159,663.557 606.719,654.761 607.278,658.78 607.837,645.285 608.396,631.933 608.956,653.247 609.515,672.219 610.074,689.719 610.633,654.136 611.193,643.172 611.752,696.044 612.311,730.614 612.87,748.655 613.43,749.913 613.989,664.948 614.548,664.611 615.107,627.328 615.667,631.867 616.226,667.489 616.785,685.708 617.344,687.835 617.904,703.21 618.463,719.238 619.022,682.999 619.581,670.812 620.141,657.027 620.7,645.052 621.259,647.854 621.818,632.674 622.378,666.877 622.937,683.295 623.496,665.963 624.055,749.019 624.615,793.571 625.174,772.76 625.733,804.54 626.292,787.108 626.852,785.098 627.411,750.994 627.97,745.711 628.529,759.064 629.089,769.374 629.648,797.151 630.207,803.727 630.766,828.317 631.326,820.107 631.885,876.929 632.444,852.499 633.003,826.79 633.563,819.074 634.122,781.773 634.681,778.333 635.24,756.336 635.8,754.834 636.359,736.467 636.918,769.836 637.477,784.274 638.037,779.322 638.596,794.997 639.155,803.34 639.714,799.629 640.274,779.853 640.833,791.421 641.392,785.948 641.951,781.067 642.511,759.861 643.07,771.764 643.629,769.676 644.188,752.253 644.748,749.223 645.307,698.96 645.866,731.319 646.425,761.095 646.985,697.109 647.544,709.99 648.103,658.708 648.662,677.909 649.222,710.177 649.781,646.884 650.34,632.433 650.899,654.269 651.459,674.351 652.018,624.128 652.577,594.026 653.136,548.926 653.696,543.002 654.255,601.23 654.814,622.883 655.373,627.304 655.933,646.017 656.492,663.105 657.051,648.341 657.61,648.736 658.17,635.355 658.729,636.134 659.288,607.952 659.847,628.933 660.407,632.772 660.966,651.935 661.525,648.814 662.084,640.484 662.644,646.088 663.203,633.021 663.762,637.223 664.321,656.304 664.881,647.398 665.44,638.819 665.999,658.146 666.558,673.056 667.118,688.299 667.677,689.226 668.236,706.831 668.795,673.529 669.355,676.86 669.914,664.032 670.473,651.015 671.032,621.68 671.592,674.522 672.151,674.836 672.71,645.869 673.269,633.802 673.829,654.099 674.388,626.229 674.947,664.102 675.506,646.499 676.066,629.205 676.625,617.034 677.184,621.939 677.743,625.725 678.303,614.274 678.862,632.546 679.421,634.971 679.981,667.497 680.54,672.261 681.099,688.179 681.658,669.895 682.218,686.359 682.777,655.704 683.336,658.204 683.895,661.71 684.455,664.64 685.014,635.71 685.573,608.821 686.132,615.127 686.692,604.328 687.251,630.579 687.81,615.17 688.369,623.915 688.929,624.748 689.488,649.295 690.047,701.774 690.606,733.828 691.166,716.111 691.725,701.961 692.284,701.163 692.843,696.085 693.403,761.422 693.962,773.675 694.521,753.55 695.08,780.545 695.64,773.708 696.199,753.208 696.758,751.494 697.317,747.524 697.877,742.975 698.436,708.391 698.995,737.035 699.554,768.933 700.114,746.606 700.673,757.762 701.232,770.811 701.791,748.797 702.351,715.505 702.91,726.235 703.469,741.462 704.028,707.183 704.588,722.976 705.147,703.841 705.706,702.942 706.265,702.472 706.825,672.269 707.384,670.867 707.943,686.436 708.502,719.446 709.062,720.514 709.621,748.987 710.18,745.686 710.739,744.316 711.299,754.805 711.858,764.908 712.417,744.231 712.976,724.175 713.536,754.556 714.095,781.937 714.654,744.853 715.213,756.173 715.773,737.501 716.332,781.913 716.891,759.545 717.45,756.967 718.01,752.319 718.569,778.914 719.128,741.263 719.687,737.131 720.247,733.795 720.806,732.344 721.365,715.541 721.924,730.426 722.484,726.747 723.043,723.493 723.602,722.686 724.161,709.481 724.721,663.423 725.28,647.647 725.839,682.905 726.398,681.713 726.958,698.647 727.517,684.504 728.076,703.823 728.635,704.202 729.195,705.435 729.754,703.485 730.313,670.484 730.872,671.123 731.432,670.349 731.991,658.883 732.55,677.933 733.109,649.217 733.669,652.674 734.228,668.692 734.787,639.526 735.346,627.414 735.906,647.467 736.465,665.908 737.024,670.316 737.583,686.604 738.143,703.096 738.702,723.03 739.261,717.793 739.82,716.884 740.38,714.593 740.939,713.606 741.498,696.614 742.057,699.343 742.617,715.526 743.176,684.187 743.735,715.619 744.294,731.898 744.854,762.918 745.413,775.194 745.972,768.209 746.531,764.947 747.091,774.609 747.65,767.605 748.209,764.262 748.768,762.05 749.328,771.336 749.887,764.491 750.446,760.098 751.005,710.704 751.565,728.453 752.124,722.295 752.683,719.944 753.242,700.231 753.802,683.089 754.361,651.826 754.92,667.281 755.479,682.256 756.039,680.878 756.598,682.394 757.157,698.23 757.716,728.247 758.276,739.228 758.835,684.892 759.394,653.567 759.953,639.7 760.513,594.647 761.072,601.478 761.631,600.33 762.19,602.18 762.75,639.859 763.309,628.759 763.868,584.429 764.427,607.169 764.987,612.922 765.546,632.035 766.105,636.027 766.664,637.113 767.224,637.558 767.783,658.032 768.342,644.272 768.901,648.038 769.461,667.571 770.02,668.789 770.579,669.332 771.138,671.032 771.698,688.058 772.257,733.114 772.816,696.021 773.375,732.251 773.935,727.969 774.494,729.488 775.053,721.978 775.612,705.87 776.172,722.312 776.731,748.329 777.29,774.156 777.849,787.99 778.409,765.025 778.968,743.026 779.527,738.431 780.086,750.284 780.646,745.696 781.205,743.253 781.764,693.847 782.323,693.758 782.883,707.001 783.442,738.17 784.001,717.918 784.56,749.27 785.12,744.193 785.679,740.379 786.238,739.13 786.797,769.585 787.357,784.712 787.916,732.767 788.475,746.643 789.034,741.51 789.594,738.713 790.153,736.302 790.712,734.529 791.271,702.013 791.831,717.507 792.39,684.943 792.949,683.748 793.508,670.191 794.068,676.948 794.627,676.428 795.186,693.16 795.745,675.644 796.305,626.845 796.864,646.953 797.423,645.809 797.982,680.877 798.542,680.89 799.101,696.588 799.66,696.552 800.219,695.21 800.779,708.933 801.338,722.77 801.897,687.179 802.456,688.091 803.016,659.17 803.575,675.244 804.134,674.619 804.693,674.403 805.253,771.154 805.812,752.79 806.371,729.299 806.931,745.128 807.49,729.914 808.049,708.747 808.608,722.914 809.168,705.618 809.727,703.934 810.286,702.687 810.845,685.555 811.405,683.488 811.964,686.435 812.523,702.723 813.082,698.224 813.642,681.62 814.201,683.103 814.76,686.805 815.319,701.503 815.879,685.539 816.438,718.048 816.997,714.429 817.556,759.681 818.116,783.907 818.675,774.602 819.234,755.374 819.793,674.563 820.353,660.589 820.912,693.913 821.471,677.597 822.03,695.628 822.59,695.989 823.149,700.297 823.708,682.488 824.267,678.075 824.827,680.572 825.386,635.802 825.945,670.114 826.504,640.424 827.064,644.677 827.623,645.471 828.182,647.2 828.741,613.096 829.301,647.44 829.86,678.979 830.419,680.062 830.978,662.459 831.538,681.524 832.097,684.142 832.656,685.158 833.215,671.49 833.775,655.2 834.334,656.181 834.893,721.646 835.452,768.618 836.012,763.004 836.571,728.303 837.13,724.205 837.689,706.236 838.249,767.66 838.808,797.433 839.367,775.608 839.926,750.657 840.486,729.062 841.045,729.506 841.604,730.237 842.163,726.236 842.723,708.103 843.282,722.969 843.841,719.75 844.4,718.612 844.96,686.198 845.519,668.282 846.078,652.143 846.637,639.278 847.197,658.507 847.756,660.056 848.315,663.607 848.874,634.826 849.434,688.074 849.993,703.782 850.552,725.58 851.111,690.135 851.671,706.064 852.23,687.042 852.789,703.032 853.348,667.535 853.908,656.946 854.467,645.419 855.026,680.025 855.585,693.302 856.145,709.927 856.704,724.232 857.263,708.963 857.822,711.575 858.382,695.046 858.941,676.635 859.5,692.599 860.059,708.875 860.619,752.692 861.178,700.171 861.737,683.363 862.296,702.264 862.856,701.76 863.415,696.794 863.974,664.406 864.533,636.278 865.093,621.136 865.652,626.471 866.211,644.437 866.77,628.21 867.33,649.639 867.889,635.512 868.448,632.171 869.007,647.347 869.567,650.665 870.126,684.79 870.685,733.882 871.244,717.36 871.804,700.717 872.363,684.971 872.922,668.24 873.481,671.523 874.041,702.067 874.6,703.356 875.159,704.408 875.718,716.331 876.278,727.805 876.837,710.022 877.396,677.749 877.955,677.622 878.515,714.108 879.074,730.558 879.633,694.402 880.192,691.993 880.752,671.19 881.311,704.962 881.87,718.068 882.429,745.1 882.989,759.016 883.548,769.066 884.107,727.875 884.666,710.316 885.226,678.511 885.785,661.139 886.344,679.241 886.903,648.953 887.463,620.666 888.022,621.159 888.581,593.902 889.14,597.79 889.7,637.322 890.259,638.439 890.818,657.906 891.377,613.546 891.937,617.265 892.496,620.701 893.055,656.609 893.614,659.493 894.174,594.102 894.733,584.943 895.292,588.281 895.851,561.716 896.411,567.694 896.97,574.499 897.529,581.01 898.088,573.475 898.648,598.768 899.207,623.41 899.766,625.496 900.325,610.735 900.885,616.07 901.444,607.197 902.003,626.068 902.562,612.225 903.122,632.067 903.681,669.104 904.24,635.629 904.799,606.307 905.359,629.901 905.918,601.959 906.477,655.783 907.036,690.168 907.596,706.149 908.155,707.4 908.714,674.089 909.273,676.887 909.833,662.321 910.392,681.718 910.951,665.719 911.51,667.692 912.07,702.002 912.629,699.508 913.188,667.782 913.747,699.157 914.307,680.763 914.866,665.584 915.425,651.397 915.984,654.67 916.544,595.161 917.103,619.053 917.662,623.198 918.221,578.405 918.781,570.975 919.34,558.951 919.899,568.215 920.458,622.316 921.018,608.1 921.577,579.647 922.136,551.845 922.695,589.206 923.255,623.111 923.814,641.957 924.373,659.441 924.932,658.18 925.492,655.668 926.051,655.933 926.61,660.114 927.169,680.253 927.729,679.341 928.288,677.168 928.847,696.002 929.406,713.531 929.966,711.979 930.525,707.835 931.084,708.715 931.644,676.474 932.203,692.366 932.762,659.997 933.321,674.251 933.881,660.314 934.44,661.816 934.999,650.94 935.558,699.446 936.118,702.554 936.677,732.848 937.236,744.94 937.795,741.35 938.355,721.743 938.914,705.056 939.473,718.969 940.032,734.287 940.592,732.638 941.151,747.073 941.71,757.605 942.269,768.348 942.829,765.284 943.388,746.356 943.947,709.621 944.506,695.612 945.066,696.829 945.625,710.622 946.184,756.937 946.743,784.803 947.303,779.067 947.862,755.98 948.421,771.458 948.98,766.511 949.54,779.081 950.099,756.135 950.658,753.977 951.217,731.415 951.777,727.201 952.336,724.366 952.895,705.422 953.454,687.838 954.014,687.973 954.573,690.68 955.132,678.705 955.691,664.637 956.251,602.021 956.81,636.315 957.369,653.935 957.928,658.292 958.488,656.853 959.047,657.678 959.606,672.925 960.165,702.612 960.725,713.931 961.284,712.54 961.843,694.798 962.402,692.085 962.962,677.703 963.521,712.824 964.08,678.32 964.639,647.378 965.199,667.537 965.758,665.154 966.317,665.489 966.876,651.33 967.436,670.003 967.995,683.566 968.554,667.279 969.113,647.102 969.673,664.261 970.232,679.762 970.791,680.053 971.35,681.732 971.91,679.745 972.469,664.198 973.028,682.04 973.587,682.398 974.147,650.167 974.706,672.971 975.265,688.362 975.824,686.07 976.384,704.439 976.943,704.337 977.502,667.558 978.061,640.807 978.621,593.143 979.18,630.642 979.739,665.212 980.298,668.454 980.858,685.616 981.417,701.456 981.976,733.581 982.535,730.943 983.095,699.004 983.654,733.233 984.213,766.14 984.772,779.657 985.332,761.701 985.891,773.474 986.45,786.735 987.009,777.856 987.569,754.261 988.128,737.441 988.687,767.866 989.246,763.325 989.806,777.384 990.365,755.297 990.924,734.759 991.483,732.276 992.043,713.74 992.602,709.223 993.161,707.133 993.72,676.404 994.28,675.635 994.839,693.834 995.398,693.7 995.957,725.275 996.517,723.73 997.076,753.413 997.635,726.774 998.194,691 998.754,722.796 999.313,716.768 999.872,700.879 1000.43,704.506 1000.99,754.05 1001.55,733.07 1002.11,762.919 1002.67,744.459 1003.23,725.266 1003.79,725.342 1004.35,706.152 1004.91,722.692 1005.46,701.476 1006.02,711.632 1006.58,728.594 1007.14,711.153 1007.7,709.199 1008.26,706.114 1008.82,689.182 1009.38,671.312 1009.94,654.935 1010.5,639.392 1011.06,610.126 1011.62,612.715 1012.18,599.326 1012.73,619.591 1013.29,573.878 1013.85,579.269 1014.41,604.174 1014.97,590.267 1015.53,597.22 1016.09,617.444 1016.65,588.09 1017.21,599.639 1017.77,588.621 1018.33,612.722 1018.89,584.37 1019.45,571.913 1020.01,579.988 1020.56,581.231 1021.12,588.492 1021.68,577.647 1022.24,565.318 1022.8,592.151 1023.36,611.688 1023.92,630.754 1024.48,634.089 1025.04,637.303 1025.6,608.94 1026.16,610.841 1026.72,579.481 1027.28,601.976 1027.83,605.999 1028.39,559.953 1028.95,566.656 1029.51,606.849 1030.07,598.53 1030.63,603.947 1031.19,606.176 1031.75,591.166 1032.31,613.135 1032.87,617.147 1033.43,653.103 1033.99,653.738 1034.55,684.409 1035.1,719.227 1035.66,717.273 1036.22,714.993 1036.78,744.798 1037.34,743.398 1037.9,757.221 1038.46,771.876 1039.02,782.38 1039.58,777.312 1040.14,805.232 1040.7,846.773 1041.26,854.092 1041.82,860.447 1042.38,804.545 1042.93,799.496 1043.49,811.859 1044.05,821.667 1044.61,815.687 1045.17,779.763 1045.73,775.152 1046.29,766.256 1046.85,777.699 1047.41,737.059 1047.97,716.82 1048.53,700.324 1049.09,648.025 1049.65,665.239 1050.2,664.706 1050.76,719.078 1051.32,700.809 1051.88,714.998 1052.44,698.93 1053,695.473 1053.56,727.128 1054.12,672.944 1054.68,675.12 1055.24,706.179 1055.8,703.459 1056.36,719.816 1056.92,715.838 1057.48,714.265 1058.03,695.988 1058.59,693.876 1059.15,662.109 1059.71,662.254 1060.27,681.504 1060.83,696.097 1061.39,696.603 1061.95,679.229 1062.51,683.352 1063.07,697.552 1063.63,661.65 1064.19,647.241 1064.75,669.587 1065.3,685.217 1065.86,691.34 1066.42,690.555 1066.98,711.721 1067.54,696.004 1068.1,713.348 1068.66,663.576 1069.22,710.612 1069.78,710.239 1070.34,696.836 1070.9,696.046 1071.46,680.061 1072.02,649.831 1072.57,637.272 1073.13,625.975 1073.69,649.3 1074.25,667.363 1074.81,666.654 1075.37,634.743 1075.93,635.917 1076.49,637.529 1077.05,638.655 1077.61,673.08 1078.17,707.24 1078.73,704.578 1079.29,720.026 1079.85,720.118 1080.4,814.217 1080.96,789.279 1081.52,788.943 1082.08,769.306 1082.64,751.264 1083.2,733.106 1083.76,700.231 1084.32,699.929 1084.88,715.855 1085.44,714.477 1086,697.506 1086.56,680.948 1087.12,714.124 1087.67,728.486 1088.23,723.587 1088.79,721.101 1089.35,700.237 1089.91,698.155 1090.47,695.07 1091.03,661.694 1091.59,646.087 1092.15,630.644 1092.71,634.004 1093.27,634.707 1093.83,639.467 1094.39,644.28 1094.94,676.525 1095.5,680.186 1096.06,711.125 1096.62,709.471 1097.18,707.732 1097.74,706.039 1098.3,689.677 1098.86,655.213 1099.42,640.1 1099.98,631.884 1100.54,636.904 1101.1,651.865 1101.66,714.709 1102.22,714.084 1102.77,714.233 1103.33,713.39 1103.89,695.064 1104.45,691.836 1105.01,740.231 1105.57,739.924 1106.13,739.813 1106.69,767.961 1107.25,764.033 1107.81,761.364 1108.37,775.056 1108.93,722.125 1109.49,720.261 1110.04,702.769 1110.6,718.708 1111.16,715.793 1111.72,681.47 1112.28,698.826 1112.84,700.07 1113.4,684.706 1113.96,666.41 1114.52,680.828 1115.08,663.722 1115.64,664.473 1116.2,684.049 1116.76,668.987 1117.31,715.799 1117.87,701.049 1118.43,672.529 1118.99,676.265 1119.55,692.899 1120.11,709.406 1120.67,691.847 1121.23,659.802 1121.79,678.323 1122.35,694.139 1122.91,691.468 1123.47,708.977 1124.03,707.96 1124.59,723.079 1125.14,657.807 1125.7,660.657 1126.26,625.518 1126.82,628.33 1127.38,629.396 1127.94,630.428 1128.5,646.165 1129.06,648.654 1129.62,652.043 1130.18,651.009 1130.74,651.817 1131.3,670.183 1131.86,674.32 1132.41,709.878 1132.97,722.103 1133.53,718.63 1134.09,682.992 1134.65,699.445 1135.21,696.2 1135.77,694.317 1136.33,694.971 1136.89,691.631 1137.45,673.775 1138.01,658.441 1138.57,659.349 1139.13,622.682 1139.68,630.126 1140.24,616.023 1140.8,606.989 1141.36,611.125 1141.92,599.974 1142.48,622.83 1143.04,611.234 1143.6,616.352 1144.16,572.464 1144.72,597.343 1145.28,619.224 1145.84,606.64 1146.4,626.103 1146.96,659.155 1147.51,663.24 1148.07,665.787 1148.63,680.179 1149.19,694.973 1149.75,697.566 1150.31,728.773 1150.87,746.424 1151.43,774.234 1151.99,784.909 1152.55,794.064 1153.11,790.611 1153.67,788.482 1154.23,832.548 1154.78,823.637 1155.34,796.87 1155.9,835.545 1156.46,826.346 1157.02,825.505 1157.58,803.013 1158.14,798.861 1158.7,761.567 1159.26,758.158 1159.82,738.756 1160.38,721.911 1160.94,732.41 1161.5,683.637 1162.05,711.52 1162.61,771.987 1163.17,735.988 1163.73,686.446 1164.29,705.455 1164.85,702.819 1165.41,698.789 1165.97,665.834 1166.53,683.21 1167.09,682.835 1167.65,650.978 1168.21,649.061 1168.77,653.021 1169.33,616.5 1169.88,619.684 1170.44,622.947 1171,639.12 1171.56,659.772 1172.12,678.402 1172.68,694.893 1173.24,739.404 1173.8,706.364 1174.36,737.627 1174.92,721.392 1175.48,686.858 1176.04,691.203 1176.6,706.96 1177.15,671.712 1177.71,655.273 1178.27,661.718 1178.83,683.074 1179.39,684.672 1179.95,669.592 1180.51,638.071 1181.07,641.76 1181.63,629.984 1182.19,652.199 1182.75,653.108 1183.31,701.927 1183.87,703.517 1184.43,714.607 1184.98,698.66 1185.54,700.488 1186.1,714.491 1186.66,694.9 1187.22,642.219 1187.78,663.933 1188.34,695.312 1188.9,680.524 1189.46,649.492 1190.02,619.947 1190.58,620.802 1191.14,608.74 1191.7,612.121 1192.25,616.638 1192.81,588.812 1193.37,577.058 1193.93,567.802 1194.49,573.715 1195.05,578.127 1195.61,600.139 1196.17,622.549 1196.73,610.53 1197.29,633.375 1197.85,670.686 1198.41,673.271 1198.97,674.029 1199.52,660.982 1200.08,711.49 1200.64,730.924 1201.2,725.372 1201.76,740.107 1202.32,739.723 1202.88,735.729 1203.44,698.165 1204,699.466 1204.56,698.209 1205.12,695.72 1205.68,694.748 1206.24,689.316 1206.8,688.711 1207.35,687.357 1207.91,670.155 1208.47,653.877 1209.03,686.439 1209.59,687.513 1210.15,684.947 1210.71,683.95 1211.27,715.659 1211.83,698.342 1212.39,730.911 1212.95,730.066 1213.51,760.436 1214.07,756.406 1214.62,752.109 1215.18,765.397 1215.74,743.727 1216.3,758.961 1216.86,770.423 1217.42,765.799 1217.98,744.772 1218.54,757.777 1219.1,755.507 1219.66,736.993 1220.22,717.569 1220.78,731.923 1221.34,716.069 1221.89,680.047 1222.45,679.509 1223.01,664.435 1223.57,667.012 1224.13,722.413 1224.69,718.876 1225.25,700.275 1225.81,698.567 1226.37,702.39 1226.93,650.859 1227.49,701.346 1228.05,732.097 1228.61,744.561 1229.17,757.468 1229.72,753.239 1230.28,721.746 1230.84,702.373 1231.4,669.585 1231.96,686.553 1232.52,668.729 1233.08,654.54 1233.64,641.633 1234.2,627.912 1234.76,630.374 1235.32,599.422 1235.88,606.496 1236.44,592.357 1236.99,598.26 1237.55,575.993 1238.11,568.155 1238.67,621.76 1239.23,627.288 1239.79,660.951 1240.35,567.011 1240.91,592.442 1241.47,599.7 1242.03,622.055 1242.59,643.34 1243.15,679.273 1243.71,700.086 1244.26,654.583 1244.82,636.799 1245.38,609.144 1245.94,597.953 1246.5,606.826 1247.06,594.382 1247.62,617.281 1248.18,622.707 1248.74,595.514 1249.3,614.356 1249.86,632.785 1250.42,634.35 1250.98,637.1 1251.54,672.407 1252.09,676.006 1252.65,708.984 1253.21,724.359 1253.77,723.07 1254.33,736.71 1254.89,718.687 1255.45,716.787 1256.01,728.499 1256.57,756.187 1257.13,752.725 1257.69,733.349 1258.25,730.791 1258.81,759.19 1259.36,739.044 1259.92,736.188 1260.48,733.454 1261.04,735.898 1261.6,762.798 1262.16,740.229 1262.72,766.592 1263.28,762.953 1263.84,793.892 1264.4,786.202 1264.96,777.757 1265.52,768.698 1266.08,778.949 1266.63,761.502 1267.19,757.956 1267.75,754.563 1268.31,764.687 1268.87,740.612 1269.43,750.801 1269.99,730.621 1270.55,724.288 1271.11,705.124 1271.67,687.777 1272.23,703.125 1272.79,685.801 1273.35,701.178 1273.91,716.564 1274.46,696.016 1275.02,695.163 1275.58,675.139 1276.14,691.297 1276.7,674.564 1277.26,708.326 1277.82,723.85 1278.38,690.405 1278.94,724.563 1279.5,718.349 1280.06,714.347 1280.62,709.072 1281.18,691.276 1281.73,673.198 1282.29,661.707 1282.85,679.021 1283.41,665.017 1283.97,696.158 1284.53,679.351 1285.09,680.636 1285.65,714.335 1286.21,727.327 1286.77,744.891 1287.33,758.756 1287.89,755.748 1288.45,752.739 1289,747.665 1289.56,745.281 1290.12,726.467 1290.68,709.279 1291.24,675.657 1291.8,674.291 1292.36,693.694 1292.92,691.56 1293.48,670.462 1294.04,671.006 1294.6,706.216 1295.16,725.846 1295.72,725.635 1296.28,771.772 1296.83,780.068 1297.39,807.818 1297.95,784.769 1298.51,746.331 1299.07,745.408 1299.63,741.24 1300.19,754.228 1300.75,763.834 1301.31,762.581 1301.87,755.898 1302.43,766.221 1302.99,740.609 1303.55,705.111 1304.1,686.353 1304.66,670.155 1305.22,688.64 1305.78,704.387 1306.34,750.933 1306.9,731.628 1307.46,762.431 1308.02,758.466 1308.58,738.963 1309.14,704.958 1309.7,717.161 1310.26,667.035 1310.82,666.913 1311.38,651.171 1311.93,696.585 1312.49,659.932 1313.05,676.32 1313.61,692.251 1314.17,629.53 1314.73,601.456 1315.29,589.593 1315.85,609.251 1316.41,614.815 1316.97,618.274 1317.53,635.582 1318.09,639.229 1318.65,625.677 1319.2,592.632 1319.76,613.01 1320.32,614.3 1320.88,616.471 1321.44,636.917 1322,621.569 1322.56,605.54 1323.12,578.04 1323.68,570.155 1324.24,590.988 1324.8,598.681 1325.36,587.835 1325.92,610.463 1326.47,613.523 1327.03,649.482 1327.59,638.729 1328.15,659.992 1328.71,677.638 1329.27,680.516 1329.83,681.35 1330.39,685.36 1330.95,684.201 1331.51,730.051 1332.07,725.522 1332.63,740.471 1333.19,686.432 1333.75,736.596 1334.3,715.825 1334.86,744.681 1335.42,710.054 1335.98,678.364 1336.54,662.62 1337.1,642.948 1337.66,661.119 1338.22,648.016 1338.78,649.08 1339.34,622.675 1339.9,675.779 1340.46,690.523 1341.02,690.687 1341.57,693.562 1342.13,663.381 1342.69,632.121 1343.25,636.715 1343.81,655.732 1344.37,625.684 1344.93,618.366 1345.49,638.931 1346.05,656.809 1346.61,689.037 1347.17,720.184 1347.73,736.838 1348.29,750.216 1348.84,713.598 1349.4,692.687 1349.96,675.656 1350.52,691.66 1351.08,696.802 1351.64,695.283 1352.2,724.374 1352.76,707.612 1353.32,704.077 1353.88,720.431 1354.44,735.825 1355,751.847 1355.56,750.337 1356.12,748.457 1356.67,778.677 1357.23,757.493 1357.79,722.729 1358.35,723.692 1358.91,740.979 1359.47,719.489 1360.03,732.354 1360.59,710.908 1361.15,681.003 1361.71,680.212 1362.27,664.821 1362.83,666.389 1363.39,665.296 1363.94,634.176 1364.5,651.767 1365.06,666.828 1365.62,633.701 1366.18,635.184 1366.74,622.69 1367.3,625.741 1367.86,616.344 1368.42,637.783 1368.98,658.622 1369.54,628.068 1370.1,614.629 1370.66,635.358 1371.21,634.242 1371.77,635.321 1372.33,669.329 1372.89,652.218 1373.45,637.714 1374.01,654.068 1374.57,689.304 1375.13,693.645 1375.69,656.886 1376.25,674.939 1376.81,676.314 1377.37,627.387 1377.93,643.865 1378.49,630.453 1379.04,631.958 1379.6,664.451 1380.16,649.552 1380.72,668.157 1381.28,666.989 1381.84,715.312 1382.4,714.782 1382.96,712.386 1383.52,675.713 1384.08,709.494 1384.64,773.507 1385.2,754.66 1385.76,703.319 1386.31,720.634 1386.87,700.997 1387.43,700.173 1387.99,699.9 1388.55,715.452 1389.11,683.361 1389.67,699.798 1390.23,729.532 1390.79,728.932 1391.35,741.869 1391.91,739.486 1392.47,703.701 1393.03,702.906 1393.58,649.042 1394.14,649.299 1394.7,669.224 1395.26,667.1 1395.82,673.261 1396.38,673.275 1396.94,658.285 1397.5,676.289 1398.06,676.738 1398.62,648.6 1399.18,664.436 1399.74,665.802 1400.3,667.325 1400.86,670.425 1401.41,687.478 1401.97,699.269 1402.53,699.161 1403.09,683.979 1403.65,682.449 1404.21,667.963 1404.77,671.417 1405.33,672.157 1405.89,673.408 1406.45,677.285 1407.01,680.651 1407.57,663.376 1408.13,647.898 1408.68,684.994 1409.24,703.05 1409.8,687.27 1410.36,688.064 1410.92,685.9 1411.48,670.814 1412.04,685.366 1412.6,685.532 1413.16,669.726 1413.72,670.038 1414.28,654.859 1414.84,686.62 1415.4,690.736 1415.95,688.874 1416.51,659.993 1417.07,662.387 1417.63,646.568 1418.19,697.487 1418.75,697.052 1419.31,679.716 1419.87,666.24 1420.43,666.222 1420.99,634.785 1421.55,640.592 1422.11,623.944 1422.67,644.846 1423.23,630.222 1423.78,601.326 1424.34,606.496 1424.9,643.665 1425.46,643.379 1426.02,679.138 1426.58,664.612 1427.14,710.388 1427.7,677.913 1428.26,646.165 1428.82,650.412 1429.38,654.799 1429.94,641.176 1430.5,676.89 1431.05,663.091 1431.61,682.173 1432.17,666.445 1432.73,652.917 1433.29,636.338 1433.85,639.8 1434.41,622.723 1434.97,624.75 1435.53,642.059 1436.09,629.091 1436.65,630.15 1437.21,647.09 1437.77,662.498 1438.33,683.096 1438.88,698.602 1439.44,714.455 1440,712.746 1440.56,677.231 1441.12,660.766 1441.68,645.243 1442.24,662.794 1442.8,663.948 1443.36,680.457 1443.92,667.725 1444.48,671.028 1445.04,704.923 1445.6,705.268 1446.15,702.301 1446.71,718.837 1447.27,783.479 1447.83,778.486 1448.39,788.07 1448.95,780.233 1449.51,772.768 1450.07,769.405 1450.63,783.751 1451.19,765.231 1451.75,760.51 1452.31,758.079 1452.87,770.604 1453.42,733.543 1453.98,696.479 1454.54,678.225 1455.1,713.181 1455.66,711.024 1456.22,757.807 1456.78,758.728 1457.34,773.54 1457.9,781.241 1458.46,810.465 1459.02,774.592 1459.58,787.407 1460.14,767.6 1460.7,795.947 1461.25,773.328 1461.81,736.732 1462.37,765.031 1462.93,744.422 1463.49,754.992 1464.05,734.35 1464.61,733.644 1465.17,762.143 1465.73,757.803 1466.29,773.105 1466.85,735.595 1467.41,700.435 1467.97,701.674 1468.52,703.1 1469.08,721.479 1469.64,733.781 1470.2,714.961 1470.76,715.569 1471.32,711.718 1471.88,661.203 1472.44,640.329 1473,624.01 1473.56,624.227 1474.12,624.86 1474.68,596.025 1475.24,600.159 1475.79,616.761 1476.35,638.711 1476.91,644.883 1477.47,611.051 1478.03,646.668 1478.59,648.645 1479.15,632.158 1479.71,632.988 1480.27,654.451 1480.83,654.182 1481.39,688.376 1481.95,715.043 1482.51,711.886 1483.07,713.636 1483.62,648.732 1484.18,637.852 1484.74,640.623 1485.3,642.373 1485.86,640.452 1486.42,640.053 1486.98,641.008 1487.54,643.472 1488.1,630.587 1488.66,634.221 1489.22,603.385 1489.78,623.352 1490.34,627.11 1490.89,625.794 1491.45,643.263 1492.01,646.639 1492.57,647.04 1493.13,646.044 1493.69,634.489 1494.25,638.993 1494.81,657.46 1495.37,661.182 1495.93,679.423 1496.49,676.383 1497.05,694.795 1497.61,709.274 1498.16,724.438 1498.72,706.595 1499.28,641.913 1499.84,597.37 1500.4,621.969 1500.96,643.488 1501.52,675.746 1502.08,677.169 1502.64,695.561 1503.2,661.586 1503.76,647.15 1504.32,633.367 1504.88,631.532 1505.44,650.485 1505.99,618.197 1506.55,621.831 1507.11,627.37 1507.67,614.121 1508.23,635.41 1508.79,617.358 1509.35,619.839 1509.91,637.516 1510.47,672.404 1511.03,685.856 1511.59,665.769 1512.15,696.437 1512.71,632.703 1513.26,619.869 1513.82,606.402 1514.38,643.37 1514.94,629.155 1515.5,649.245 1516.06,679.293 1516.62,713.52 1517.18,710.234 1517.74,727.99 1518.3,740.912 1518.86,739.268 1519.42,754.692 1519.98,769.677 1520.53,765.784 1521.09,761.659 1521.65,725.483 1522.21,769.06 1522.77,762.062 1523.33,742.64 1523.89,751.325 1524.45,748.499 1525.01,758.293 1525.57,753.364 1526.13,716.738 1526.69,681.003 1527.25,662.12 1527.81,662.747 1528.36,649.035 1528.92,668.018 1529.48,649.082 1530.04,649.482 1530.6,632.269 1531.16,619.936 1531.72,625.121 1532.28,660.393 1532.84,658.257 1533.4,693.577 1533.96,661.541 1534.52,646.477 1535.08,647.691 1535.63,665.072 1536.19,650.026 1536.75,635.844 1537.31,654.683 1537.87,625.432 1538.43,626.653 1538.99,632.488 1539.55,601.865 1540.11,607.084 1540.67,624.842 1541.23,643.684 1541.79,626.251 1542.35,626.268 1542.9,629.091 1543.46,597.519 1544.02,602.467 1544.58,606.218 1545.14,643.712 1545.7,649.307 1546.26,670.128 1546.82,703.002 1547.38,687.257 1547.94,703.334 1548.5,701.411 1549.06,666.559 1549.62,652.193 1550.18,654.83 1550.73,657.173 1551.29,659.392 1551.85,646.261 1552.41,630.301 1552.97,662.93 1553.53,664.532 1554.09,650.073 1554.65,648.39 1555.21,666.552 1555.77,636.817 1556.33,638.223 1556.89,639.37 1557.45,640.491 1558,656.226 1558.56,689.074 1559.12,693.053 1559.68,728.462 1560.24,741.525 1560.8,724.064 1561.36,751.222 1561.92,792.396 1562.48,758.879 1563.04,773.341 1563.6,800.72 1564.16,765.347 1564.72,762.079 1565.28,730.986 1565.83,711.994 1566.39,694.098 1566.95,679.149 1567.51,678.385 1568.07,678.555 1568.63,682.079 1569.19,667.444 1569.75,698.677 1570.31,677.761 1570.87,647.541 1571.43,631.934 1571.99,635.005 1572.55,638.402 1573.1,659.287 1573.66,663.417 1574.22,666.262 1574.78,687.4 1575.34,636.918 1575.9,609.134 1576.46,596.913 1577.02,565.255 1577.58,572.173 1578.14,578.854 1578.7,584.454 1579.26,604.841 1579.82,609.056 1580.37,613.328 1580.93,634.874 1581.49,624.068 1582.05,610.627 1582.61,644.013 1583.17,676.442 1583.73,673.757 1584.29,674.258 1584.85,675.627 1585.41,645.398 1585.97,636.208 1586.53,653.315 1587.09,690.719 1587.65,719.456 1588.2,702.351 1588.76,701.504 1589.32,685.894 1589.88,669.327 1590.44,658.325 1591,674.795 1591.56,628.069 1592.12,629.554 1592.68,631.941 1593.24,680.117 1593.8,680.639 1594.36,728.123 1594.92,725.539 1595.47,725.39 1596.03,738.836 1596.59,716.805 1597.15,735.145 1597.71,732.155 1598.27,699.925 1598.83,700.192 1599.39,700.491 1599.95,714.535 1600.51,695.928 1601.07,696.023 1601.63,711.088 1602.19,680.219 1602.74,677.565 1603.3,697.055 1603.86,718.407 1604.42,716.28 1604.98,684.367 1605.54,684.985 1606.1,681.976 1606.66,699.002 1607.22,680.432 1607.78,664.524 1608.34,683.462 1608.9,684.522 1609.46,668.942 1610.02,672.526 1610.57,654.619 1611.13,655.993 1611.69,703.875 1612.25,703.128 1612.81,700.697 1613.37,684.417 1613.93,685.311 1614.49,684.875 1615.05,669.032 1615.61,653.88 1616.17,691.274 1616.73,673.063 1617.29,707.276 1617.84,689.607 1618.4,686.704 1618.96,686.721 1619.52,669.463 1620.08,668.716 1620.64,685.848 1621.2,702.96 1621.76,729.327 1622.32,728.12 1622.88,743.998 1623.44,743.643 1624,771.455 1624.56,767.688 1625.11,733.93 1625.67,680.112 1626.23,695.09 1626.79,695.955 1627.35,695.967 1627.91,694.631 1628.47,695.697 1629.03,708.994 1629.59,704.711 1630.15,690.076 1630.71,689.705 1631.27,687.761 1631.83,703.999 1632.39,685.413 1632.94,736.057 1633.5,765.337 1634.06,780.488 1634.62,762.268 1635.18,774.681 1635.74,771.467 1636.3,765.454 1636.86,759.933 1637.42,772.441 1637.98,799.097 1638.54,790.181 1639.1,766.532 1639.66,743.018 1640.21,756.249 1640.77,753.808 1641.33,751.827 1641.89,746.431 1642.45,740.193 1643.01,737.56 1643.57,731.633 1644.13,712.37 1644.69,662.831 1645.25,667.284 1645.81,701.52 1646.37,684.545 1646.93,700.263 1647.48,717.835 1648.04,715.316 1648.6,730.332 1649.16,758.117 1649.72,753.727 1650.28,749.683 1650.84,779.129 1651.4,805.84 1651.96,784.746 1652.52,764.388 1653.08,744.039 1653.64,692.929 1654.2,674.234 1654.76,657.355 1655.31,673.519 1655.87,674.448 1656.43,671.868 1656.99,671.326 1657.55,700.492 1658.11,681.88 1658.67,682.5 1659.23,679.718 1659.79,663.891 1660.35,646.451 1660.91,630.664 1661.47,649.639 1662.03,633.477 1662.58,655.196 1663.14,643.542 1663.7,648.636 1664.26,650.6 1664.82,654.555 1665.38,669.678 1665.94,701.894 1666.5,702.906 1667.06,686.789 1667.62,689.581 1668.18,673.21 1668.74,690.567 1669.3,706.981 1669.85,723.272 1670.41,703.735 1670.97,685.4 1671.53,702.884 1672.09,721.441 1672.65,720.188 1673.21,716.339 1673.77,744.276 1674.33,727.116 1674.89,726.707 1675.45,709.621 1676.01,726.157 1676.57,724.164 1677.13,736.036 1677.68,764.413 1678.24,761.003 1678.8,759.086 1679.36,723.857 1679.92,704.624 1680.48,699.698 1681.04,680.964 1681.6,694.288 1682.16,659.082 1682.72,641.39 1683.28,614.03 1683.84,634.701 1684.4,670.011 1684.95,671.513 1685.51,672.427 1686.07,705.526 1686.63,719.562 1687.19,702.543 1687.75,684.991 1688.31,699.809 1688.87,648.334 1689.43,669.07 1689.99,701.295 1690.55,669.569 1691.11,719.599 1691.67,718.615 1692.23,747.598 1692.78,757.399 1693.34,753.837 1693.9,750.869 1694.46,780.368 1695.02,759.148 1695.58,769.233 1696.14,782.599 1696.7,779.871 1697.26,756.598 1697.82,736.328 1698.38,685.627 1698.94,699.656 1699.5,697.816 1700.05,695.074 1700.61,678.18 1701.17,695.449 1701.73,694.156 1702.29,697.544 1702.85,697.074 1703.41,712.586 1703.97,726.203 1704.53,692.713 1705.09,706.225 1705.65,671.818 1706.21,673.792 1706.77,612.744 1707.32,662.328 1707.88,679.995 1708.44,709.974 1709,706.244 1709.56,720.092 1710.12,716.757 1710.68,715.671 1711.24,714.762 1711.8,698.254 1712.36,661.827 1712.92,650.846 1713.48,621.686 1714.04,642.033 1714.6,627.034 1715.15,608.811 1715.71,612.086 1716.27,597.335 1716.83,604.147 1717.39,626.592 1717.95,647.832 1718.51,631.232 1719.07,681.816 1719.63,746.884 1720.19,711.923 1720.75,711.741 1721.31,744.119 1721.87,722.839 1722.42,688.014 1722.98,688.226 1723.54,705.146 1724.1,719.433 1724.66,684.184 1725.22,703.282 1725.78,688.234 1726.34,673.506 1726.9,626.494 1727.46,627.404 1728.02,647.407 1728.58,666.717 1729.14,602.518 1729.69,574.759 1730.25,578.548 1730.81,569.629 1731.37,544.835 1731.93,581.988 1732.49,586.553 1733.05,626.856 1733.61,631.716 1734.17,649.524 1734.73,655.086 1735.29,674.419 1735.85,672.549 1736.41,671.317 1736.97,669.573 1737.52,669.149 1738.08,685.672 1738.64,682.58 1739.2,700.738 1739.76,751.305 1740.32,729.659 1740.88,709.168 1741.44,707.778 1742,692.448 1742.56,705.313 1743.12,686.623 1743.68,672.696 1744.24,657.9 1744.79,642.726 1745.35,662.294 1745.91,633.211 1746.47,650.503 1747.03,669.041 1747.59,639.193 1748.15,641.839 1748.71,630.803 1749.27,633.717 1749.83,649.728 1750.39,650.034 1750.95,648.94 1751.51,668.043 1752.06,635.648 1752.62,605.771 1753.18,610.758 1753.74,619.108 1754.3,603.756 1754.86,625.254 1755.42,640.837 1755.98,607.783 1756.54,625.238 1757.1,642.411 1757.66,645.253 1758.22,646.073 1758.78,667.514 1759.34,701.188 1759.89,700.727 1760.45,680.281 1761.01,649.385 1761.57,680.384 1762.13,682.132 1762.69,698.969 1763.25,729.297 1763.81,744.35 1764.37,726.538 1764.93,723.3 1765.49,719.308 1766.05,684.266 1766.61,663.854 1767.16,682.684 1767.72,712.75 1768.28,692.403 1768.84,675.771 1769.4,708.055 1769.96,689.247 1770.52,703.03 1771.08,669.499 1771.64,669.68 1772.2,675.264 1772.76,665.028 1773.32,685.197 1773.88,689.583 1774.43,673.165 1774.99,659.27 1775.55,610.375 1776.11,582.304 1776.67,587.336 1777.23,591.743 1777.79,599.129 1778.35,588.098 1778.91,609.22 1779.47,629.5 1780.03,650.507 1780.59,651.521 1781.15,651.042 1781.71,688.704 1782.26,690.341 1782.82,691.533 1783.38,691.237 1783.94,708.988 1784.5,690.838 1785.06,689.251 1785.62,688.686 1786.18,670.554 1786.74,652.138 1787.3,651.36 1787.86,668.926 1788.42,652.949 1788.98,670.367 1789.53,659.464 1790.09,660.272 1790.65,674.956 1791.21,658.796 1791.77,707.546 1792.33,709.801 1792.89,783.893 1793.45,760.936 1794.01,752.752 1794.57,767.435 1795.13,761.877 1795.69,741.946 1796.25,723.826 1796.8,704.298 1797.36,702.45 1797.92,700.643 1798.48,682.242 1799.04,696.85 1799.6,709.922 1800.16,658.719 1800.72,674.63 1801.28,688.358 1801.84,654.938 1802.4,672.342 1802.96,652.925 1803.52,655.852 1804.08,674.183 1804.63,722.742 1805.19,670.861 1805.75,690.15 1806.31,673.67 1806.87,671.937 1807.43,686.946 1807.99,686.713 1808.55,687.036 1809.11,715.57 1809.67,700.182 1810.23,728.526 1810.79,727.546 1811.35,723.656 1811.9,755.376 1812.46,735.485 1813.02,732.572 1813.58,732.321 1814.14,727.924 1814.7,738.547 1815.26,718.869 1815.82,715.991 1816.38,699.813 1816.94,710.222 1817.5,724.701 1818.06,720.883 1818.62,705.268 1819.18,704.935 1819.73,705.454 1820.29,722.201 1820.85,674.357 1821.41,660.013 1821.97,677.936 1822.53,677.127 1823.09,664.13 1823.65,728.145 1824.21,728.431 1824.77,695.854 1825.33,694.959 1825.89,707.855 1826.45,723.033 1827,721.332 1827.56,706.779 1828.12,705.532 1828.68,690.211 1829.24,640.943 1829.8,658.671 1830.36,674.594 1830.92,693.178 1831.48,696.001 1832.04,676.483 1832.6,712.126 1833.16,695.516 1833.72,694.627 1834.27,695.567 1834.83,699.845 1835.39,714.711 1835.95,712.002 1836.51,709.149 1837.07,707.537 1837.63,721.469 1838.19,703.212 \"/>\n<path clip-path=\"url(#clip223)\" d=\"M720.247 689.784 L720.806 689.784 L721.365 689.784 L721.924 689.784 L722.484 689.784 L723.043 689.784 L723.602 689.784 L724.161 689.784 L724.721 689.784 L725.28 689.784 L725.839 689.784 L726.398 689.784 L726.958 689.784 L727.517 689.784 L728.076 689.784 L728.635 689.784 L729.195 689.784 L729.754 689.784 L730.313 689.784 L730.872 689.784 L731.432 689.784 L731.991 689.784 L732.55 689.784 L733.109 689.784 L733.669 689.784 L734.228 689.784 L734.787 689.784 L735.346 689.784 L735.906 689.784 L736.465 689.784 L737.024 689.784 L737.583 689.784 L738.143 689.784 L738.702 689.784 L739.261 689.784 L739.82 689.784 L740.38 689.784 L740.939 689.784 L741.498 689.784 L742.057 689.784 L742.617 689.784 L743.176 689.784 L743.735 689.784 L744.294 689.784 L744.854 689.784 L745.413 689.784 L745.972 689.784 L746.531 689.784 L747.091 689.784 L747.65 689.784 L748.209 689.784 L748.768 689.784 L749.328 689.784 L749.887 689.784 L750.446 689.784 L751.005 689.784 L751.565 689.784 L752.124 689.784 L752.683 689.784 L753.242 689.784 L753.802 689.784 L754.361 689.784 L754.92 689.784 L755.479 689.784 L756.039 689.784 L756.598 689.784 L757.157 689.784 L757.716 689.784 L758.276 689.784 L758.835 689.784 L759.394 689.784 L759.953 689.784 L760.513 689.784 L761.072 689.784 L761.631 689.784 L762.19 689.784 L762.75 689.784 L763.309 689.784 L763.868 689.784 L764.427 689.784 L764.987 689.784 L765.546 689.784 L766.105 689.784 L766.664 689.784 L767.224 689.784 L767.783 689.784 L768.342 689.784 L768.901 689.784 L769.461 689.784 L770.02 689.784 L770.579 689.784 L771.138 689.784 L771.698 689.784 L772.257 689.784 L772.816 689.784 L773.375 689.784 L773.935 689.784 L774.494 689.784 L775.053 689.784 L775.612 689.784 L776.172 689.784 L776.731 689.784 L777.29 689.784 L777.849 689.784 L778.409 689.784 L778.968 689.784 L779.527 689.784 L780.086 689.784 L780.646 689.784 L781.205 689.784 L781.764 689.784 L782.323 689.784 L782.883 689.784 L783.442 689.784 L784.001 689.784 L784.56 689.784 L785.12 689.784 L785.679 689.784 L786.238 689.784 L786.797 689.784 L787.357 689.784 L787.916 689.784 L788.475 689.784 L789.034 689.784 L789.594 689.784 L790.153 689.784 L790.712 689.784 L791.271 689.784 L791.831 689.784 L792.39 689.784 L792.949 689.784 L793.508 689.784 L794.068 689.784 L794.627 689.784 L795.186 689.784 L795.745 689.784 L796.305 689.784 L796.864 689.784 L797.423 689.784 L797.982 689.784 L798.542 689.784 L799.101 689.784 L799.66 689.784 L800.219 689.784 L800.779 689.784 L801.338 689.784 L801.897 689.784 L802.456 689.784 L803.016 689.784 L803.575 689.784 L804.134 689.784 L804.693 689.784 L805.253 689.784 L805.812 689.784 L806.371 689.784 L806.931 689.784 L807.49 689.784 L808.049 689.784 L808.608 689.784 L809.168 689.784 L809.727 689.784 L810.286 689.784 L810.845 689.784 L811.405 689.784 L811.964 689.784 L812.523 689.784 L813.082 689.784 L813.642 689.784 L814.201 689.784 L814.76 689.784 L815.319 689.784 L815.879 689.784 L816.438 689.784 L816.997 689.784 L817.556 689.784 L818.116 689.784 L818.675 689.784 L819.234 689.784 L819.793 689.784 L820.353 689.784 L820.912 689.784 L821.471 689.784 L822.03 689.784 L822.59 689.784 L823.149 689.784 L823.708 689.784 L824.267 689.784 L824.827 689.784 L825.386 689.784 L825.945 689.784 L826.504 689.784 L827.064 689.784 L827.623 689.784 L828.182 689.784 L828.741 689.784 L829.301 689.784 L829.86 689.784 L830.419 689.784 L830.978 689.784 L831.538 689.784 L832.097 689.784 L832.656 689.784 L833.215 689.784 L833.775 689.784 L834.334 689.784 L834.893 689.784 L835.452 689.784 L836.012 689.784 L836.571 689.784 L837.13 689.784 L837.689 689.784 L838.249 689.784 L838.808 689.784 L839.367 689.784 L839.926 689.784 L840.486 689.784 L841.045 689.784 L841.604 689.784 L842.163 689.784 L842.723 689.784 L843.282 689.784 L843.841 689.784 L844.4 689.784 L844.96 689.784 L845.519 689.784 L846.078 689.784 L846.637 689.784 L847.197 689.784 L847.756 689.784 L848.315 689.784 L848.874 689.784 L849.434 689.784 L849.993 689.784 L850.552 689.784 L851.111 689.784 L851.671 689.784 L852.23 689.784 L852.789 689.784 L853.348 689.784 L853.908 689.784 L854.467 689.784 L855.026 689.784 L855.585 689.784 L856.145 689.784 L856.704 689.784 L857.263 689.784 L857.822 689.784 L858.382 689.784 L858.941 689.784 L859.5 689.784 L860.059 689.784 L860.619 689.784 L861.178 689.784 L861.737 689.784 L862.296 689.784 L862.856 689.784 L863.415 689.784 L863.974 689.784 L864.533 689.784 L865.093 689.784 L865.652 689.784 L866.211 689.784 L866.77 689.784 L867.33 689.784 L867.889 689.784 L868.448 689.784 L869.007 689.784 L869.567 689.784 L870.126 689.784 L870.685 689.784 L871.244 689.784 L871.804 689.784 L872.363 689.784 L872.922 689.784 L873.481 689.784 L874.041 689.784 L874.6 689.784 L875.159 689.784 L875.718 689.784 L876.278 689.784 L876.837 689.784 L877.396 689.784 L877.955 689.784 L878.515 689.784 L879.074 689.784 L879.633 689.784 L880.192 689.784 L880.752 689.784 L881.311 689.784 L881.87 689.784 L882.429 689.784 L882.989 689.784 L883.548 689.784 L884.107 689.784 L884.666 689.784 L885.226 689.784 L885.785 689.784 L886.344 689.784 L886.903 689.784 L887.463 689.784 L888.022 689.784 L888.581 689.784 L889.14 689.784 L889.7 689.784 L890.259 689.784 L890.818 689.784 L891.377 689.784 L891.937 689.784 L892.496 689.784 L893.055 689.784 L893.614 689.784 L894.174 689.784 L894.733 689.784 L895.292 689.784 L895.851 689.784 L896.411 689.784 L896.97 689.784 L897.529 689.784 L898.088 689.784 L898.648 689.784 L899.207 689.784 L899.766 689.784 L900.325 689.784 L900.885 689.784 L901.444 689.784 L902.003 689.784 L902.562 689.784 L903.122 689.784 L903.681 689.784 L904.24 689.784 L904.799 689.784 L905.359 689.784 L905.918 689.784 L906.477 689.784 L907.036 689.784 L907.596 689.784 L908.155 689.784 L908.714 689.784 L909.273 689.784 L909.833 689.784 L910.392 689.784 L910.951 689.784 L911.51 689.784 L912.07 689.784 L912.629 689.784 L913.188 689.784 L913.747 689.784 L914.307 689.784 L914.866 689.784 L915.425 689.784 L915.984 689.784 L916.544 689.784 L917.103 689.784 L917.662 689.784 L918.221 689.784 L918.781 689.784 L919.34 689.784 L919.899 689.784 L920.458 689.784 L921.018 689.784 L921.577 689.784 L922.136 689.784 L922.695 689.784 L923.255 689.784 L923.814 689.784 L924.373 689.784 L924.932 689.784 L925.492 689.784 L926.051 689.784 L926.61 689.784 L927.169 689.784 L927.729 689.784 L928.288 689.784 L928.847 689.784 L929.406 689.784 L929.966 689.784 L930.525 689.784 L931.084 689.784 L931.644 689.784 L932.203 689.784 L932.762 689.784 L933.321 689.784 L933.881 689.784 L934.44 689.784 L934.999 689.784 L935.558 689.784 L936.118 689.784 L936.677 689.784 L937.236 689.784 L937.795 689.784 L938.355 689.784 L938.914 689.784 L939.473 689.784 L940.032 689.784 L940.592 689.784 L941.151 689.784 L941.71 689.784 L942.269 689.784 L942.829 689.784 L943.388 689.784 L943.947 689.784 L944.506 689.784 L945.066 689.784 L945.625 689.784 L946.184 689.784 L946.743 689.784 L947.303 689.784 L947.862 689.784 L948.421 689.784 L948.98 689.784 L949.54 689.784 L950.099 689.784 L950.658 689.784 L951.217 689.784 L951.777 689.784 L952.336 689.784 L952.895 689.784 L953.454 689.784 L954.014 689.784 L954.573 689.784 L955.132 689.784 L955.691 689.784 L956.251 689.784 L956.81 689.784 L957.369 689.784 L957.928 689.784 L958.488 689.784 L959.047 689.784 L959.606 689.784 L960.165 689.784 L960.725 689.784 L961.284 689.784 L961.843 689.784 L962.402 689.784 L962.962 689.784 L963.521 689.784 L964.08 689.784 L964.639 689.784 L965.199 689.784 L965.758 689.784 L966.317 689.784 L966.876 689.784 L967.436 689.784 L967.995 689.784 L968.554 689.784 L969.113 689.784 L969.673 689.784 L970.232 689.784 L970.791 689.784 L971.35 689.784 L971.91 689.784 L972.469 689.784 L973.028 689.784 L973.587 689.784 L974.147 689.784 L974.706 689.784 L975.265 689.784 L975.824 689.784 L976.384 689.784 L976.943 689.784 L977.502 689.784 L978.061 689.784 L978.621 689.784 L979.18 689.784 L979.739 689.784 L980.298 689.784 L980.858 689.784 L981.417 689.784 L981.976 689.784 L982.535 689.784 L983.095 689.784 L983.654 689.784 L984.213 689.784 L984.772 689.784 L985.332 689.784 L985.891 689.784 L986.45 689.784 L987.009 689.784 L987.569 689.784 L988.128 689.784 L988.687 689.784 L989.246 689.784 L989.806 689.784 L990.365 689.784 L990.924 689.784 L991.483 689.784 L992.043 689.784 L992.602 689.784 L993.161 689.784 L993.72 689.784 L994.28 689.784 L994.839 689.784 L995.398 689.784 L995.957 689.784 L996.517 689.784 L997.076 689.784 L997.635 689.784 L998.194 689.784 L998.754 689.784 L999.313 689.784 L999.872 689.784 L1000.43 689.784 L1000.99 689.784 L1001.55 689.784 L1002.11 689.784 L1002.67 689.784 L1003.23 689.784 L1003.79 689.784 L1004.35 689.784 L1004.91 689.784 L1005.46 689.784 L1006.02 689.784 L1006.58 689.784 L1007.14 689.784 L1007.7 689.784 L1008.26 689.784 L1008.82 689.784 L1009.38 689.784 L1009.94 689.784 L1010.5 689.784 L1011.06 689.784 L1011.62 689.784 L1012.18 689.784 L1012.73 689.784 L1013.29 689.784 L1013.85 689.784 L1014.41 689.784 L1014.97 689.784 L1015.53 689.784 L1016.09 689.784 L1016.65 689.784 L1017.21 689.784 L1017.77 689.784 L1018.33 689.784 L1018.89 689.784 L1019.45 689.784 L1020.01 689.784 L1020.56 689.784 L1021.12 689.784 L1021.68 689.784 L1022.24 689.784 L1022.8 689.784 L1023.36 689.784 L1023.92 689.784 L1024.48 689.784 L1025.04 689.784 L1025.6 689.784 L1026.16 689.784 L1026.72 689.784 L1027.28 689.784 L1027.83 689.784 L1028.39 689.784 L1028.95 689.784 L1029.51 689.784 L1030.07 689.784 L1030.63 689.784 L1031.19 689.784 L1031.75 689.784 L1032.31 689.784 L1032.87 689.784 L1033.43 689.784 L1033.99 689.784 L1034.55 689.784 L1035.1 689.784 L1035.66 689.784 L1036.22 689.784 L1036.78 689.784 L1037.34 689.784 L1037.9 689.784 L1038.46 689.784 L1039.02 689.784 L1039.58 689.784 L1040.14 689.784 L1040.7 689.784 L1041.26 689.784 L1041.82 689.784 L1042.38 689.784 L1042.93 689.784 L1043.49 689.784 L1044.05 689.784 L1044.61 689.784 L1045.17 689.784 L1045.73 689.784 L1046.29 689.784 L1046.85 689.784 L1047.41 689.784 L1047.97 689.784 L1048.53 689.784 L1049.09 689.784 L1049.65 689.784 L1050.2 689.784 L1050.76 689.784 L1051.32 689.784 L1051.88 689.784 L1052.44 689.784 L1053 689.784 L1053.56 689.784 L1054.12 689.784 L1054.68 689.784 L1055.24 689.784 L1055.8 689.784 L1056.36 689.784 L1056.92 689.784 L1057.48 689.784 L1058.03 689.784 L1058.59 689.784 L1059.15 689.784 L1059.71 689.784 L1060.27 689.784 L1060.83 689.784 L1061.39 689.784 L1061.95 689.784 L1062.51 689.784 L1063.07 689.784 L1063.63 689.784 L1064.19 689.784 L1064.75 689.784 L1065.3 689.784 L1065.86 689.784 L1066.42 689.784 L1066.98 689.784 L1067.54 689.784 L1068.1 689.784 L1068.66 689.784 L1069.22 689.784 L1069.78 689.784 L1070.34 689.784 L1070.9 689.784 L1071.46 689.784 L1072.02 689.784 L1072.57 689.784 L1073.13 689.784 L1073.69 689.784 L1074.25 689.784 L1074.81 689.784 L1075.37 689.784 L1075.93 689.784 L1076.49 689.784 L1077.05 689.784 L1077.61 689.784 L1078.17 689.784 L1078.73 689.784 L1079.29 689.784 L1079.85 689.784 L1080.4 689.784 L1080.96 689.784 L1081.52 689.784 L1082.08 689.784 L1082.64 689.784 L1083.2 689.784 L1083.76 689.784 L1084.32 689.784 L1084.88 689.784 L1085.44 689.784 L1086 689.784 L1086.56 689.784 L1087.12 689.784 L1087.67 689.784 L1088.23 689.784 L1088.79 689.784 L1089.35 689.784 L1089.91 689.784 L1090.47 689.784 L1091.03 689.784 L1091.59 689.784 L1092.15 689.784 L1092.71 689.784 L1093.27 689.784 L1093.83 689.784 L1094.39 689.784 L1094.94 689.784 L1095.5 689.784 L1096.06 689.784 L1096.62 689.784 L1097.18 689.784 L1097.74 689.784 L1098.3 689.784 L1098.86 689.784 L1099.42 689.784 L1099.98 689.784 L1100.54 689.784 L1101.1 689.784 L1101.66 689.784 L1102.22 689.784 L1102.77 689.784 L1103.33 689.784 L1103.89 689.784 L1104.45 689.784 L1105.01 689.784 L1105.57 689.784 L1106.13 689.784 L1106.69 689.784 L1107.25 689.784 L1107.81 689.784 L1108.37 689.784 L1108.93 689.784 L1109.49 689.784 L1110.04 689.784 L1110.6 689.784 L1111.16 689.784 L1111.72 689.784 L1112.28 689.784 L1112.84 689.784 L1113.4 689.784 L1113.96 689.784 L1114.52 689.784 L1115.08 689.784 L1115.64 689.784 L1116.2 689.784 L1116.76 689.784 L1117.31 689.784 L1117.87 689.784 L1118.43 689.784 L1118.99 689.784 L1119.55 689.784 L1120.11 689.784 L1120.67 689.784 L1121.23 689.784 L1121.79 689.784 L1122.35 689.784 L1122.91 689.784 L1123.47 689.784 L1124.03 689.784 L1124.59 689.784 L1125.14 689.784 L1125.7 689.784 L1126.26 689.784 L1126.82 689.784 L1127.38 689.784 L1127.94 689.784 L1128.5 689.784 L1129.06 689.784 L1129.62 689.784 L1130.18 689.784 L1130.74 689.784 L1131.3 689.784 L1131.86 689.784 L1132.41 689.784 L1132.97 689.784 L1133.53 689.784 L1134.09 689.784 L1134.65 689.784 L1135.21 689.784 L1135.77 689.784 L1136.33 689.784 L1136.89 689.784 L1137.45 689.784 L1138.01 689.784 L1138.57 689.784 L1139.13 689.784 L1139.68 689.784 L1140.24 689.784 L1140.8 689.784 L1141.36 689.784 L1141.92 689.784 L1142.48 689.784 L1143.04 689.784 L1143.6 689.784 L1144.16 689.784 L1144.72 689.784 L1145.28 689.784 L1145.84 689.784 L1146.4 689.784 L1146.96 689.784 L1147.51 689.784 L1148.07 689.784 L1148.63 689.784 L1149.19 689.784 L1149.75 689.784 L1150.31 689.784 L1150.87 689.784 L1151.43 689.784 L1151.99 689.784 L1152.55 689.784 L1153.11 689.784 L1153.67 689.784 L1154.23 689.784 L1154.78 689.784 L1155.34 689.784 L1155.9 689.784 L1156.46 689.784 L1157.02 689.784 L1157.58 689.784 L1158.14 689.784 L1158.7 689.784 L1159.26 689.784 L1159.82 689.784 L1160.38 689.784 L1160.94 689.784 L1161.5 689.784 L1162.05 689.784 L1162.61 689.784 L1163.17 689.784 L1163.73 689.784 L1164.29 689.784 L1164.85 689.784 L1165.41 689.784 L1165.97 689.784 L1166.53 689.784 L1167.09 689.784 L1167.65 689.784 L1168.21 689.784 L1168.77 689.784 L1169.33 689.784 L1169.88 689.784 L1170.44 689.784 L1171 689.784 L1171.56 689.784 L1172.12 689.784 L1172.68 689.784 L1173.24 689.784 L1173.8 689.784 L1174.36 689.784 L1174.92 689.784 L1175.48 689.784 L1176.04 689.784 L1176.6 689.784 L1177.15 689.784 L1177.71 689.784 L1178.27 689.784 L1178.83 689.784 L1179.39 689.784 L1179.95 689.784 L1180.51 689.784 L1181.07 689.784 L1181.63 689.784 L1182.19 689.784 L1182.75 689.784 L1183.31 689.784 L1183.87 689.784 L1184.43 689.784 L1184.98 689.784 L1185.54 689.784 L1186.1 689.784 L1186.66 689.784 L1187.22 689.784 L1187.78 689.784 L1188.34 689.784 L1188.9 689.784 L1189.46 689.784 L1190.02 689.784 L1190.58 689.784 L1191.14 689.784 L1191.7 689.784 L1192.25 689.784 L1192.81 689.784 L1193.37 689.784 L1193.93 689.784 L1194.49 689.784 L1195.05 689.784 L1195.61 689.784 L1196.17 689.784 L1196.73 689.784 L1197.29 689.784 L1197.85 689.784 L1198.41 689.784 L1198.97 689.784 L1199.52 689.784 L1200.08 689.784 L1200.64 689.784 L1201.2 689.784 L1201.76 689.784 L1202.32 689.784 L1202.88 689.784 L1203.44 689.784 L1204 689.784 L1204.56 689.784 L1205.12 689.784 L1205.68 689.784 L1206.24 689.784 L1206.8 689.784 L1207.35 689.784 L1207.91 689.784 L1208.47 689.784 L1209.03 689.784 L1209.59 689.784 L1210.15 689.784 L1210.71 689.784 L1211.27 689.784 L1211.83 689.784 L1212.39 689.784 L1212.95 689.784 L1213.51 689.784 L1214.07 689.784 L1214.62 689.784 L1215.18 689.784 L1215.74 689.784 L1216.3 689.784 L1216.86 689.784 L1217.42 689.784 L1217.98 689.784 L1218.54 689.784 L1219.1 689.784 L1219.66 689.784 L1220.22 689.784 L1220.78 689.784 L1221.34 689.784 L1221.89 689.784 L1222.45 689.784 L1223.01 689.784 L1223.57 689.784 L1224.13 689.784 L1224.69 689.784 L1225.25 689.784 L1225.81 689.784 L1226.37 689.784 L1226.93 689.784 L1227.49 689.784 L1228.05 689.784 L1228.61 689.784 L1229.17 689.784 L1229.72 689.784 L1230.28 689.784 L1230.84 689.784 L1231.4 689.784 L1231.96 689.784 L1232.52 689.784 L1233.08 689.784 L1233.64 689.784 L1234.2 689.784 L1234.76 689.784 L1235.32 689.784 L1235.88 689.784 L1236.44 689.784 L1236.99 689.784 L1237.55 689.784 L1238.11 689.784 L1238.67 689.784 L1239.23 689.784 L1239.79 689.784 L1240.35 689.784 L1240.91 689.784 L1241.47 689.784 L1242.03 689.784 L1242.59 689.784 L1243.15 689.784 L1243.71 689.784 L1244.26 689.784 L1244.82 689.784 L1245.38 689.784 L1245.94 689.784 L1246.5 689.784 L1247.06 689.784 L1247.62 689.784 L1248.18 689.784 L1248.74 689.784 L1249.3 689.784 L1249.86 689.784 L1250.42 689.784 L1250.98 689.784 L1251.54 689.784 L1252.09 689.784 L1252.65 689.784 L1253.21 689.784 L1253.77 689.784 L1254.33 689.784 L1254.89 689.784 L1255.45 689.784 L1256.01 689.784 L1256.57 689.784 L1257.13 689.784 L1257.69 689.784 L1258.25 689.784 L1258.81 689.784 L1259.36 689.784 L1259.92 689.784 L1260.48 689.784 L1261.04 689.784 L1261.6 689.784 L1262.16 689.784 L1262.72 689.784 L1263.28 689.784 L1263.84 689.784 L1264.4 689.784 L1264.96 689.784 L1265.52 689.784 L1266.08 689.784 L1266.63 689.784 L1267.19 689.784 L1267.75 689.784 L1268.31 689.784 L1268.87 689.784 L1269.43 689.784 L1269.99 689.784 L1270.55 689.784 L1271.11 689.784 L1271.67 689.784 L1272.23 689.784 L1272.79 689.784 L1273.35 689.784 L1273.91 689.784 L1274.46 689.784 L1275.02 689.784 L1275.58 689.784 L1276.14 689.784 L1276.7 689.784 L1277.26 689.784 L1277.82 689.784 L1278.38 689.784 L1278.94 689.784 L1279.5 689.784 L1280.06 689.784 L1280.62 689.784 L1281.18 689.784 L1281.73 689.784 L1282.29 689.784 L1282.85 689.784 L1283.41 689.784 L1283.97 689.784 L1284.53 689.784 L1285.09 689.784 L1285.65 689.784 L1286.21 689.784 L1286.77 689.784 L1287.33 689.784 L1287.89 689.784 L1288.45 689.784 L1289 689.784 L1289.56 689.784 L1290.12 689.784 L1290.68 689.784 L1291.24 689.784 L1291.8 689.784 L1292.36 689.784 L1292.92 689.784 L1293.48 689.784 L1294.04 689.784 L1294.6 689.784 L1295.16 689.784 L1295.72 689.784 L1296.28 689.784 L1296.83 689.784 L1297.39 689.784 L1297.95 689.784 L1298.51 689.784 L1299.07 689.784 L1299.63 689.784 L1300.19 689.784 L1300.75 689.784 L1301.31 689.784 L1301.87 689.784 L1302.43 689.784 L1302.99 689.784 L1303.55 689.784 L1304.1 689.784 L1304.66 689.784 L1305.22 689.784 L1305.78 689.784 L1306.34 689.784 L1306.9 689.784 L1307.46 689.784 L1308.02 689.784 L1308.58 689.784 L1309.14 689.784 L1309.7 689.784 L1310.26 689.784 L1310.82 689.784 L1311.38 689.784 L1311.93 689.784 L1312.49 689.784 L1313.05 689.784 L1313.61 689.784 L1314.17 689.784 L1314.73 689.784 L1315.29 689.784 L1315.85 689.784 L1316.41 689.784 L1316.97 689.784 L1317.53 689.784 L1318.09 689.784 L1318.65 689.784 L1319.2 689.784 L1319.76 689.784 L1320.32 689.784 L1320.88 689.784 L1321.44 689.784 L1322 689.784 L1322.56 689.784 L1323.12 689.784 L1323.68 689.784 L1324.24 689.784 L1324.8 689.784 L1325.36 689.784 L1325.92 689.784 L1326.47 689.784 L1327.03 689.784 L1327.59 689.784 L1328.15 689.784 L1328.71 689.784 L1329.27 689.784 L1329.83 689.784 L1330.39 689.784 L1330.95 689.784 L1331.51 689.784 L1332.07 689.784 L1332.63 689.784 L1333.19 689.784 L1333.75 689.784 L1334.3 689.784 L1334.86 689.784 L1335.42 689.784 L1335.98 689.784 L1336.54 689.784 L1337.1 689.784 L1337.66 689.784 L1338.22 689.784 L1338.78 689.784 L1339.34 689.784 L1339.9 689.784 L1340.46 689.784 L1341.02 689.784 L1341.57 689.784 L1342.13 689.784 L1342.69 689.784 L1343.25 689.784 L1343.81 689.784 L1344.37 689.784 L1344.93 689.784 L1345.49 689.784 L1346.05 689.784 L1346.61 689.784 L1347.17 689.784 L1347.73 689.784 L1348.29 689.784 L1348.84 689.784 L1349.4 689.784 L1349.96 689.784 L1350.52 689.784 L1351.08 689.784 L1351.64 689.784 L1352.2 689.784 L1352.76 689.784 L1353.32 689.784 L1353.88 689.784 L1354.44 689.784 L1355 689.784 L1355.56 689.784 L1356.12 689.784 L1356.67 689.784 L1357.23 689.784 L1357.79 689.784 L1358.35 689.784 L1358.91 689.784 L1359.47 689.784 L1360.03 689.784 L1360.59 689.784 L1361.15 689.784 L1361.71 689.784 L1362.27 689.784 L1362.83 689.784 L1363.39 689.784 L1363.94 689.784 L1364.5 689.784 L1365.06 689.784 L1365.62 689.784 L1366.18 689.784 L1366.74 689.784 L1367.3 689.784 L1367.86 689.784 L1368.42 689.784 L1368.98 689.784 L1369.54 689.784 L1370.1 689.784 L1370.66 689.784 L1371.21 689.784 L1371.77 689.784 L1372.33 689.784 L1372.89 689.784 L1373.45 689.784 L1374.01 689.784 L1374.57 689.784 L1375.13 689.784 L1375.69 689.784 L1376.25 689.784 L1376.81 689.784 L1377.37 689.784 L1377.93 689.784 L1378.49 689.784 L1379.04 689.784 L1379.6 689.784 L1380.16 689.784 L1380.72 689.784 L1381.28 689.784 L1381.84 689.784 L1382.4 689.784 L1382.96 689.784 L1383.52 689.784 L1384.08 689.784 L1384.64 689.784 L1385.2 689.784 L1385.76 689.784 L1386.31 689.784 L1386.87 689.784 L1387.43 689.784 L1387.99 689.784 L1388.55 689.784 L1389.11 689.784 L1389.67 689.784 L1390.23 689.784 L1390.79 689.784 L1391.35 689.784 L1391.91 689.784 L1392.47 689.784 L1393.03 689.784 L1393.58 689.784 L1394.14 689.784 L1394.7 689.784 L1395.26 689.784 L1395.82 689.784 L1396.38 689.784 L1396.94 689.784 L1397.5 689.784 L1398.06 689.784 L1398.62 689.784 L1399.18 689.784 L1399.74 689.784 L1400.3 689.784 L1400.86 689.784 L1401.41 689.784 L1401.97 689.784 L1402.53 689.784 L1403.09 689.784 L1403.65 689.784 L1404.21 689.784 L1404.77 689.784 L1405.33 689.784 L1405.89 689.784 L1406.45 689.784 L1407.01 689.784 L1407.57 689.784 L1408.13 689.784 L1408.68 689.784 L1409.24 689.784 L1409.8 689.784 L1410.36 689.784 L1410.92 689.784 L1411.48 689.784 L1412.04 689.784 L1412.6 689.784 L1413.16 689.784 L1413.72 689.784 L1414.28 689.784 L1414.84 689.784 L1415.4 689.784 L1415.95 689.784 L1416.51 689.784 L1417.07 689.784 L1417.63 689.784 L1418.19 689.784 L1418.75 689.784 L1419.31 689.784 L1419.87 689.784 L1420.43 689.784 L1420.99 689.784 L1421.55 689.784 L1422.11 689.784 L1422.67 689.784 L1423.23 689.784 L1423.78 689.784 L1424.34 689.784 L1424.9 689.784 L1425.46 689.784 L1426.02 689.784 L1426.58 689.784 L1427.14 689.784 L1427.7 689.784 L1428.26 689.784 L1428.82 689.784 L1429.38 689.784 L1429.94 689.784 L1430.5 689.784 L1431.05 689.784 L1431.61 689.784 L1432.17 689.784 L1432.73 689.784 L1433.29 689.784 L1433.85 689.784 L1434.41 689.784 L1434.97 689.784 L1435.53 689.784 L1436.09 689.784 L1436.65 689.784 L1437.21 689.784 L1437.77 689.784 L1438.33 689.784 L1438.88 689.784 L1439.44 689.784 L1440 689.784 L1440.56 689.784 L1441.12 689.784 L1441.68 689.784 L1442.24 689.784 L1442.8 689.784 L1443.36 689.784 L1443.92 689.784 L1444.48 689.784 L1445.04 689.784 L1445.6 689.784 L1446.15 689.784 L1446.71 689.784 L1447.27 689.784 L1447.83 689.784 L1448.39 689.784 L1448.95 689.784 L1449.51 689.784 L1450.07 689.784 L1450.63 689.784 L1451.19 689.784 L1451.75 689.784 L1452.31 689.784 L1452.87 689.784 L1453.42 689.784 L1453.98 689.784 L1454.54 689.784 L1455.1 689.784 L1455.66 689.784 L1456.22 689.784 L1456.78 689.784 L1457.34 689.784 L1457.9 689.784 L1458.46 689.784 L1459.02 689.784 L1459.58 689.784 L1460.14 689.784 L1460.7 689.784 L1461.25 689.784 L1461.81 689.784 L1462.37 689.784 L1462.93 689.784 L1463.49 689.784 L1464.05 689.784 L1464.61 689.784 L1465.17 689.784 L1465.73 689.784 L1466.29 689.784 L1466.85 689.784 L1467.41 689.784 L1467.97 689.784 L1468.52 689.784 L1469.08 689.784 L1469.64 689.784 L1470.2 689.784 L1470.76 689.784 L1471.32 689.784 L1471.88 689.784 L1472.44 689.784 L1473 689.784 L1473.56 689.784 L1474.12 689.784 L1474.68 689.784 L1475.24 689.784 L1475.79 689.784 L1476.35 689.784 L1476.91 689.784 L1477.47 689.784 L1478.03 689.784 L1478.59 689.784 L1479.15 689.784 L1479.71 689.784 L1480.27 689.784 L1480.83 689.784 L1481.39 689.784 L1481.95 689.784 L1482.51 689.784 L1483.07 689.784 L1483.62 689.784 L1484.18 689.784 L1484.74 689.784 L1485.3 689.784 L1485.86 689.784 L1486.42 689.784 L1486.98 689.784 L1487.54 689.784 L1488.1 689.784 L1488.66 689.784 L1489.22 689.784 L1489.78 689.784 L1490.34 689.784 L1490.89 689.784 L1491.45 689.784 L1492.01 689.784 L1492.57 689.784 L1493.13 689.784 L1493.69 689.784 L1494.25 689.784 L1494.81 689.784 L1495.37 689.784 L1495.93 689.784 L1496.49 689.784 L1497.05 689.784 L1497.61 689.784 L1498.16 689.784 L1498.72 689.784 L1499.28 689.784 L1499.84 689.784 L1500.4 689.784 L1500.96 689.784 L1501.52 689.784 L1502.08 689.784 L1502.64 689.784 L1503.2 689.784 L1503.76 689.784 L1504.32 689.784 L1504.88 689.784 L1505.44 689.784 L1505.99 689.784 L1506.55 689.784 L1507.11 689.784 L1507.67 689.784 L1508.23 689.784 L1508.79 689.784 L1509.35 689.784 L1509.91 689.784 L1510.47 689.784 L1511.03 689.784 L1511.59 689.784 L1512.15 689.784 L1512.71 689.784 L1513.26 689.784 L1513.82 689.784 L1514.38 689.784 L1514.94 689.784 L1515.5 689.784 L1516.06 689.784 L1516.62 689.784 L1517.18 689.784 L1517.74 689.784 L1518.3 689.784 L1518.86 689.784 L1519.42 689.784 L1519.98 689.784 L1520.53 689.784 L1521.09 689.784 L1521.65 689.784 L1522.21 689.784 L1522.77 689.784 L1523.33 689.784 L1523.89 689.784 L1524.45 689.784 L1525.01 689.784 L1525.57 689.784 L1526.13 689.784 L1526.69 689.784 L1527.25 689.784 L1527.81 689.784 L1528.36 689.784 L1528.92 689.784 L1529.48 689.784 L1530.04 689.784 L1530.6 689.784 L1531.16 689.784 L1531.72 689.784 L1532.28 689.784 L1532.84 689.784 L1533.4 689.784 L1533.96 689.784 L1534.52 689.784 L1535.08 689.784 L1535.63 689.784 L1536.19 689.784 L1536.75 689.784 L1537.31 689.784 L1537.87 689.784 L1538.43 689.784 L1538.99 689.784 L1539.55 689.784 L1540.11 689.784 L1540.67 689.784 L1541.23 689.784 L1541.79 689.784 L1542.35 689.784 L1542.9 689.784 L1543.46 689.784 L1544.02 689.784 L1544.58 689.784 L1545.14 689.784 L1545.7 689.784 L1546.26 689.784 L1546.82 689.784 L1547.38 689.784 L1547.94 689.784 L1548.5 689.784 L1549.06 689.784 L1549.62 689.784 L1550.18 689.784 L1550.73 689.784 L1551.29 689.784 L1551.85 689.784 L1552.41 689.784 L1552.97 689.784 L1553.53 689.784 L1554.09 689.784 L1554.65 689.784 L1555.21 689.784 L1555.77 689.784 L1556.33 689.784 L1556.89 689.784 L1557.45 689.784 L1558 689.784 L1558.56 689.784 L1559.12 689.784 L1559.68 689.784 L1560.24 689.784 L1560.8 689.784 L1561.36 689.784 L1561.92 689.784 L1562.48 689.784 L1563.04 689.784 L1563.6 689.784 L1564.16 689.784 L1564.72 689.784 L1565.28 689.784 L1565.83 689.784 L1566.39 689.784 L1566.95 689.784 L1567.51 689.784 L1568.07 689.784 L1568.63 689.784 L1569.19 689.784 L1569.75 689.784 L1570.31 689.784 L1570.87 689.784 L1571.43 689.784 L1571.99 689.784 L1572.55 689.784 L1573.1 689.784 L1573.66 689.784 L1574.22 689.784 L1574.78 689.784 L1575.34 689.784 L1575.9 689.784 L1576.46 689.784 L1577.02 689.784 L1577.58 689.784 L1578.14 689.784 L1578.7 689.784 L1579.26 689.784 L1579.82 689.784 L1580.37 689.784 L1580.93 689.784 L1581.49 689.784 L1582.05 689.784 L1582.61 689.784 L1583.17 689.784 L1583.73 689.784 L1584.29 689.784 L1584.85 689.784 L1585.41 689.784 L1585.97 689.784 L1586.53 689.784 L1587.09 689.784 L1587.65 689.784 L1588.2 689.784 L1588.76 689.784 L1589.32 689.784 L1589.88 689.784 L1590.44 689.784 L1591 689.784 L1591.56 689.784 L1592.12 689.784 L1592.68 689.784 L1593.24 689.784 L1593.8 689.784 L1594.36 689.784 L1594.92 689.784 L1595.47 689.784 L1596.03 689.784 L1596.59 689.784 L1597.15 689.784 L1597.71 689.784 L1598.27 689.784 L1598.83 689.784 L1599.39 689.784 L1599.95 689.784 L1600.51 689.784 L1601.07 689.784 L1601.63 689.784 L1602.19 689.784 L1602.74 689.784 L1603.3 689.784 L1603.86 689.784 L1604.42 689.784 L1604.98 689.784 L1605.54 689.784 L1606.1 689.784 L1606.66 689.784 L1607.22 689.784 L1607.78 689.784 L1608.34 689.784 L1608.9 689.784 L1609.46 689.784 L1610.02 689.784 L1610.57 689.784 L1611.13 689.784 L1611.69 689.784 L1612.25 689.784 L1612.81 689.784 L1613.37 689.784 L1613.93 689.784 L1614.49 689.784 L1615.05 689.784 L1615.61 689.784 L1616.17 689.784 L1616.73 689.784 L1617.29 689.784 L1617.84 689.784 L1618.4 689.784 L1618.96 689.784 L1619.52 689.784 L1620.08 689.784 L1620.64 689.784 L1621.2 689.784 L1621.76 689.784 L1622.32 689.784 L1622.88 689.784 L1623.44 689.784 L1624 689.784 L1624.56 689.784 L1625.11 689.784 L1625.67 689.784 L1626.23 689.784 L1626.79 689.784 L1627.35 689.784 L1627.91 689.784 L1628.47 689.784 L1629.03 689.784 L1629.59 689.784 L1630.15 689.784 L1630.71 689.784 L1631.27 689.784 L1631.83 689.784 L1632.39 689.784 L1632.94 689.784 L1633.5 689.784 L1634.06 689.784 L1634.62 689.784 L1635.18 689.784 L1635.74 689.784 L1636.3 689.784 L1636.86 689.784 L1637.42 689.784 L1637.98 689.784 L1638.54 689.784 L1639.1 689.784 L1639.66 689.784 L1640.21 689.784 L1640.77 689.784 L1641.33 689.784 L1641.89 689.784 L1642.45 689.784 L1643.01 689.784 L1643.57 689.784 L1644.13 689.784 L1644.69 689.784 L1645.25 689.784 L1645.81 689.784 L1646.37 689.784 L1646.93 689.784 L1647.48 689.784 L1648.04 689.784 L1648.6 689.784 L1649.16 689.784 L1649.72 689.784 L1650.28 689.784 L1650.84 689.784 L1651.4 689.784 L1651.96 689.784 L1652.52 689.784 L1653.08 689.784 L1653.64 689.784 L1654.2 689.784 L1654.76 689.784 L1655.31 689.784 L1655.87 689.784 L1656.43 689.784 L1656.99 689.784 L1657.55 689.784 L1658.11 689.784 L1658.67 689.784 L1659.23 689.784 L1659.79 689.784 L1660.35 689.784 L1660.91 689.784 L1661.47 689.784 L1662.03 689.784 L1662.58 689.784 L1663.14 689.784 L1663.7 689.784 L1664.26 689.784 L1664.82 689.784 L1665.38 689.784 L1665.94 689.784 L1666.5 689.784 L1667.06 689.784 L1667.62 689.784 L1668.18 689.784 L1668.74 689.784 L1669.3 689.784 L1669.85 689.784 L1670.41 689.784 L1670.97 689.784 L1671.53 689.784 L1672.09 689.784 L1672.65 689.784 L1673.21 689.784 L1673.77 689.784 L1674.33 689.784 L1674.89 689.784 L1675.45 689.784 L1676.01 689.784 L1676.57 689.784 L1677.13 689.784 L1677.68 689.784 L1678.24 689.784 L1678.8 689.784 L1679.36 689.784 L1679.92 689.784 L1680.48 689.784 L1681.04 689.784 L1681.6 689.784 L1682.16 689.784 L1682.72 689.784 L1683.28 689.784 L1683.84 689.784 L1684.4 689.784 L1684.95 689.784 L1685.51 689.784 L1686.07 689.784 L1686.63 689.784 L1687.19 689.784 L1687.75 689.784 L1688.31 689.784 L1688.87 689.784 L1689.43 689.784 L1689.99 689.784 L1690.55 689.784 L1691.11 689.784 L1691.67 689.784 L1692.23 689.784 L1692.78 689.784 L1693.34 689.784 L1693.9 689.784 L1694.46 689.784 L1695.02 689.784 L1695.58 689.784 L1696.14 689.784 L1696.7 689.784 L1697.26 689.784 L1697.82 689.784 L1698.38 689.784 L1698.94 689.784 L1699.5 689.784 L1700.05 689.784 L1700.61 689.784 L1701.17 689.784 L1701.73 689.784 L1702.29 689.784 L1702.85 689.784 L1703.41 689.784 L1703.97 689.784 L1704.53 689.784 L1705.09 689.784 L1705.65 689.784 L1706.21 689.784 L1706.77 689.784 L1707.32 689.784 L1707.88 689.784 L1708.44 689.784 L1709 689.784 L1709.56 689.784 L1710.12 689.784 L1710.68 689.784 L1711.24 689.784 L1711.8 689.784 L1712.36 689.784 L1712.92 689.784 L1713.48 689.784 L1714.04 689.784 L1714.6 689.784 L1715.15 689.784 L1715.71 689.784 L1716.27 689.784 L1716.83 689.784 L1717.39 689.784 L1717.95 689.784 L1718.51 689.784 L1719.07 689.784 L1719.63 689.784 L1720.19 689.784 L1720.75 689.784 L1721.31 689.784 L1721.87 689.784 L1722.42 689.784 L1722.98 689.784 L1723.54 689.784 L1724.1 689.784 L1724.66 689.784 L1725.22 689.784 L1725.78 689.784 L1726.34 689.784 L1726.9 689.784 L1727.46 689.784 L1728.02 689.784 L1728.58 689.784 L1729.14 689.784 L1729.69 689.784 L1730.25 689.784 L1730.81 689.784 L1731.37 689.784 L1731.93 689.784 L1732.49 689.784 L1733.05 689.784 L1733.61 689.784 L1734.17 689.784 L1734.73 689.784 L1735.29 689.784 L1735.85 689.784 L1736.41 689.784 L1736.97 689.784 L1737.52 689.784 L1738.08 689.784 L1738.64 689.784 L1739.2 689.784 L1739.76 689.784 L1740.32 689.784 L1740.88 689.784 L1741.44 689.784 L1742 689.784 L1742.56 689.784 L1743.12 689.784 L1743.68 689.784 L1744.24 689.784 L1744.79 689.784 L1745.35 689.784 L1745.91 689.784 L1746.47 689.784 L1747.03 689.784 L1747.59 689.784 L1748.15 689.784 L1748.71 689.784 L1749.27 689.784 L1749.83 689.784 L1750.39 689.784 L1750.95 689.784 L1751.51 689.784 L1752.06 689.784 L1752.62 689.784 L1753.18 689.784 L1753.74 689.784 L1754.3 689.784 L1754.86 689.784 L1755.42 689.784 L1755.98 689.784 L1756.54 689.784 L1757.1 689.784 L1757.66 689.784 L1758.22 689.784 L1758.78 689.784 L1759.34 689.784 L1759.89 689.784 L1760.45 689.784 L1761.01 689.784 L1761.57 689.784 L1762.13 689.784 L1762.69 689.784 L1763.25 689.784 L1763.81 689.784 L1764.37 689.784 L1764.93 689.784 L1765.49 689.784 L1766.05 689.784 L1766.61 689.784 L1767.16 689.784 L1767.72 689.784 L1768.28 689.784 L1768.84 689.784 L1769.4 689.784 L1769.96 689.784 L1770.52 689.784 L1771.08 689.784 L1771.64 689.784 L1772.2 689.784 L1772.76 689.784 L1773.32 689.784 L1773.88 689.784 L1774.43 689.784 L1774.99 689.784 L1775.55 689.784 L1776.11 689.784 L1776.67 689.784 L1777.23 689.784 L1777.79 689.784 L1778.35 689.784 L1778.91 689.784 L1779.47 689.784 L1780.03 689.784 L1780.59 689.784 L1781.15 689.784 L1781.71 689.784 L1782.26 689.784 L1782.82 689.784 L1783.38 689.784 L1783.94 689.784 L1784.5 689.784 L1785.06 689.784 L1785.62 689.784 L1786.18 689.784 L1786.74 689.784 L1787.3 689.784 L1787.86 689.784 L1788.42 689.784 L1788.98 689.784 L1789.53 689.784 L1790.09 689.784 L1790.65 689.784 L1791.21 689.784 L1791.77 689.784 L1792.33 689.784 L1792.89 689.784 L1793.45 689.784 L1794.01 689.784 L1794.57 689.784 L1795.13 689.784 L1795.69 689.784 L1796.25 689.784 L1796.8 689.784 L1797.36 689.784 L1797.92 689.784 L1798.48 689.784 L1799.04 689.784 L1799.6 689.784 L1800.16 689.784 L1800.72 689.784 L1801.28 689.784 L1801.84 689.784 L1802.4 689.784 L1802.96 689.784 L1803.52 689.784 L1804.08 689.784 L1804.63 689.784 L1805.19 689.784 L1805.75 689.784 L1806.31 689.784 L1806.87 689.784 L1807.43 689.784 L1807.99 689.784 L1808.55 689.784 L1809.11 689.784 L1809.67 689.784 L1810.23 689.784 L1810.79 689.784 L1811.35 689.784 L1811.9 689.784 L1812.46 689.784 L1813.02 689.784 L1813.58 689.784 L1814.14 689.784 L1814.7 689.784 L1815.26 689.784 L1815.82 689.784 L1816.38 689.784 L1816.94 689.784 L1817.5 689.784 L1818.06 689.784 L1818.62 689.784 L1819.18 689.784 L1819.73 689.784 L1820.29 689.784 L1820.85 689.784 L1821.41 689.784 L1821.97 689.784 L1822.53 689.784 L1823.09 689.784 L1823.65 689.784 L1824.21 689.784 L1824.77 689.784 L1825.33 689.784 L1825.89 689.784 L1826.45 689.784 L1827 689.784 L1827.56 689.784 L1828.12 689.784 L1828.68 689.784 L1829.24 689.784 L1829.8 689.784 L1830.36 689.784 L1830.92 689.784 L1831.48 689.784 L1832.04 689.784 L1832.6 689.784 L1833.16 689.784 L1833.72 689.784 L1834.27 689.784 L1834.83 689.784 L1835.39 689.784 L1835.95 689.784 L1836.51 689.784 L1837.07 689.784 L1837.63 689.784 L1838.19 689.784 L1838.19 682.846 L1837.63 682.846 L1837.07 682.846 L1836.51 682.846 L1835.95 682.846 L1835.39 682.846 L1834.83 682.846 L1834.27 682.846 L1833.72 682.846 L1833.16 682.846 L1832.6 682.846 L1832.04 682.846 L1831.48 682.846 L1830.92 682.846 L1830.36 682.846 L1829.8 682.846 L1829.24 682.846 L1828.68 682.846 L1828.12 682.846 L1827.56 682.846 L1827 682.846 L1826.45 682.846 L1825.89 682.846 L1825.33 682.846 L1824.77 682.846 L1824.21 682.846 L1823.65 682.846 L1823.09 682.846 L1822.53 682.846 L1821.97 682.846 L1821.41 682.846 L1820.85 682.846 L1820.29 682.846 L1819.73 682.846 L1819.18 682.846 L1818.62 682.846 L1818.06 682.846 L1817.5 682.846 L1816.94 682.846 L1816.38 682.846 L1815.82 682.846 L1815.26 682.846 L1814.7 682.846 L1814.14 682.846 L1813.58 682.846 L1813.02 682.846 L1812.46 682.846 L1811.9 682.846 L1811.35 682.846 L1810.79 682.846 L1810.23 682.846 L1809.67 682.846 L1809.11 682.846 L1808.55 682.846 L1807.99 682.846 L1807.43 682.846 L1806.87 682.846 L1806.31 682.846 L1805.75 682.846 L1805.19 682.846 L1804.63 682.846 L1804.08 682.846 L1803.52 682.846 L1802.96 682.846 L1802.4 682.846 L1801.84 682.846 L1801.28 682.846 L1800.72 682.846 L1800.16 682.846 L1799.6 682.846 L1799.04 682.846 L1798.48 682.846 L1797.92 682.846 L1797.36 682.846 L1796.8 682.846 L1796.25 682.846 L1795.69 682.846 L1795.13 682.846 L1794.57 682.846 L1794.01 682.846 L1793.45 682.846 L1792.89 682.846 L1792.33 682.846 L1791.77 682.846 L1791.21 682.846 L1790.65 682.846 L1790.09 682.846 L1789.53 682.846 L1788.98 682.846 L1788.42 682.846 L1787.86 682.846 L1787.3 682.846 L1786.74 682.846 L1786.18 682.846 L1785.62 682.846 L1785.06 682.846 L1784.5 682.846 L1783.94 682.846 L1783.38 682.846 L1782.82 682.846 L1782.26 682.846 L1781.71 682.846 L1781.15 682.846 L1780.59 682.846 L1780.03 682.846 L1779.47 682.846 L1778.91 682.846 L1778.35 682.846 L1777.79 682.846 L1777.23 682.846 L1776.67 682.846 L1776.11 682.846 L1775.55 682.846 L1774.99 682.846 L1774.43 682.846 L1773.88 682.846 L1773.32 682.846 L1772.76 682.846 L1772.2 682.846 L1771.64 682.846 L1771.08 682.846 L1770.52 682.846 L1769.96 682.846 L1769.4 682.846 L1768.84 682.846 L1768.28 682.846 L1767.72 682.846 L1767.16 682.846 L1766.61 682.846 L1766.05 682.846 L1765.49 682.846 L1764.93 682.846 L1764.37 682.846 L1763.81 682.846 L1763.25 682.846 L1762.69 682.846 L1762.13 682.846 L1761.57 682.846 L1761.01 682.846 L1760.45 682.846 L1759.89 682.846 L1759.34 682.846 L1758.78 682.846 L1758.22 682.846 L1757.66 682.846 L1757.1 682.846 L1756.54 682.846 L1755.98 682.846 L1755.42 682.846 L1754.86 682.846 L1754.3 682.846 L1753.74 682.846 L1753.18 682.846 L1752.62 682.846 L1752.06 682.846 L1751.51 682.846 L1750.95 682.846 L1750.39 682.846 L1749.83 682.846 L1749.27 682.846 L1748.71 682.846 L1748.15 682.846 L1747.59 682.846 L1747.03 682.846 L1746.47 682.846 L1745.91 682.846 L1745.35 682.846 L1744.79 682.846 L1744.24 682.846 L1743.68 682.846 L1743.12 682.846 L1742.56 682.846 L1742 682.846 L1741.44 682.846 L1740.88 682.846 L1740.32 682.846 L1739.76 682.846 L1739.2 682.846 L1738.64 682.846 L1738.08 682.846 L1737.52 682.846 L1736.97 682.846 L1736.41 682.846 L1735.85 682.846 L1735.29 682.846 L1734.73 682.846 L1734.17 682.846 L1733.61 682.846 L1733.05 682.846 L1732.49 682.846 L1731.93 682.846 L1731.37 682.846 L1730.81 682.846 L1730.25 682.846 L1729.69 682.846 L1729.14 682.846 L1728.58 682.846 L1728.02 682.846 L1727.46 682.846 L1726.9 682.846 L1726.34 682.846 L1725.78 682.846 L1725.22 682.846 L1724.66 682.846 L1724.1 682.846 L1723.54 682.846 L1722.98 682.846 L1722.42 682.846 L1721.87 682.846 L1721.31 682.846 L1720.75 682.846 L1720.19 682.846 L1719.63 682.846 L1719.07 682.846 L1718.51 682.846 L1717.95 682.846 L1717.39 682.846 L1716.83 682.846 L1716.27 682.846 L1715.71 682.846 L1715.15 682.846 L1714.6 682.846 L1714.04 682.846 L1713.48 682.846 L1712.92 682.846 L1712.36 682.846 L1711.8 682.846 L1711.24 682.846 L1710.68 682.846 L1710.12 682.846 L1709.56 682.846 L1709 682.846 L1708.44 682.846 L1707.88 682.846 L1707.32 682.846 L1706.77 682.846 L1706.21 682.846 L1705.65 682.846 L1705.09 682.846 L1704.53 682.846 L1703.97 682.846 L1703.41 682.846 L1702.85 682.846 L1702.29 682.846 L1701.73 682.846 L1701.17 682.846 L1700.61 682.846 L1700.05 682.846 L1699.5 682.846 L1698.94 682.846 L1698.38 682.846 L1697.82 682.846 L1697.26 682.846 L1696.7 682.846 L1696.14 682.846 L1695.58 682.846 L1695.02 682.846 L1694.46 682.846 L1693.9 682.846 L1693.34 682.846 L1692.78 682.846 L1692.23 682.846 L1691.67 682.846 L1691.11 682.846 L1690.55 682.846 L1689.99 682.846 L1689.43 682.846 L1688.87 682.846 L1688.31 682.846 L1687.75 682.846 L1687.19 682.846 L1686.63 682.846 L1686.07 682.846 L1685.51 682.846 L1684.95 682.846 L1684.4 682.846 L1683.84 682.846 L1683.28 682.846 L1682.72 682.846 L1682.16 682.846 L1681.6 682.846 L1681.04 682.846 L1680.48 682.846 L1679.92 682.846 L1679.36 682.846 L1678.8 682.846 L1678.24 682.846 L1677.68 682.846 L1677.13 682.846 L1676.57 682.846 L1676.01 682.846 L1675.45 682.846 L1674.89 682.846 L1674.33 682.846 L1673.77 682.846 L1673.21 682.846 L1672.65 682.846 L1672.09 682.846 L1671.53 682.846 L1670.97 682.846 L1670.41 682.846 L1669.85 682.846 L1669.3 682.846 L1668.74 682.846 L1668.18 682.846 L1667.62 682.846 L1667.06 682.846 L1666.5 682.846 L1665.94 682.846 L1665.38 682.846 L1664.82 682.846 L1664.26 682.846 L1663.7 682.846 L1663.14 682.846 L1662.58 682.846 L1662.03 682.846 L1661.47 682.846 L1660.91 682.846 L1660.35 682.846 L1659.79 682.846 L1659.23 682.846 L1658.67 682.846 L1658.11 682.846 L1657.55 682.846 L1656.99 682.846 L1656.43 682.846 L1655.87 682.846 L1655.31 682.846 L1654.76 682.846 L1654.2 682.846 L1653.64 682.846 L1653.08 682.846 L1652.52 682.846 L1651.96 682.846 L1651.4 682.846 L1650.84 682.846 L1650.28 682.846 L1649.72 682.846 L1649.16 682.846 L1648.6 682.846 L1648.04 682.846 L1647.48 682.846 L1646.93 682.846 L1646.37 682.846 L1645.81 682.846 L1645.25 682.846 L1644.69 682.846 L1644.13 682.846 L1643.57 682.846 L1643.01 682.846 L1642.45 682.846 L1641.89 682.846 L1641.33 682.846 L1640.77 682.846 L1640.21 682.846 L1639.66 682.846 L1639.1 682.846 L1638.54 682.846 L1637.98 682.846 L1637.42 682.846 L1636.86 682.846 L1636.3 682.846 L1635.74 682.846 L1635.18 682.846 L1634.62 682.846 L1634.06 682.846 L1633.5 682.846 L1632.94 682.846 L1632.39 682.846 L1631.83 682.846 L1631.27 682.846 L1630.71 682.846 L1630.15 682.846 L1629.59 682.846 L1629.03 682.846 L1628.47 682.846 L1627.91 682.846 L1627.35 682.846 L1626.79 682.846 L1626.23 682.846 L1625.67 682.846 L1625.11 682.846 L1624.56 682.846 L1624 682.846 L1623.44 682.846 L1622.88 682.846 L1622.32 682.846 L1621.76 682.846 L1621.2 682.846 L1620.64 682.846 L1620.08 682.846 L1619.52 682.846 L1618.96 682.846 L1618.4 682.846 L1617.84 682.846 L1617.29 682.846 L1616.73 682.846 L1616.17 682.846 L1615.61 682.846 L1615.05 682.846 L1614.49 682.846 L1613.93 682.846 L1613.37 682.846 L1612.81 682.846 L1612.25 682.846 L1611.69 682.846 L1611.13 682.846 L1610.57 682.846 L1610.02 682.846 L1609.46 682.846 L1608.9 682.846 L1608.34 682.846 L1607.78 682.846 L1607.22 682.846 L1606.66 682.846 L1606.1 682.846 L1605.54 682.846 L1604.98 682.846 L1604.42 682.846 L1603.86 682.846 L1603.3 682.846 L1602.74 682.846 L1602.19 682.846 L1601.63 682.846 L1601.07 682.846 L1600.51 682.846 L1599.95 682.846 L1599.39 682.846 L1598.83 682.846 L1598.27 682.846 L1597.71 682.846 L1597.15 682.846 L1596.59 682.846 L1596.03 682.846 L1595.47 682.846 L1594.92 682.846 L1594.36 682.846 L1593.8 682.846 L1593.24 682.846 L1592.68 682.846 L1592.12 682.846 L1591.56 682.846 L1591 682.846 L1590.44 682.846 L1589.88 682.846 L1589.32 682.846 L1588.76 682.846 L1588.2 682.846 L1587.65 682.846 L1587.09 682.846 L1586.53 682.846 L1585.97 682.846 L1585.41 682.846 L1584.85 682.846 L1584.29 682.846 L1583.73 682.846 L1583.17 682.846 L1582.61 682.846 L1582.05 682.846 L1581.49 682.846 L1580.93 682.846 L1580.37 682.846 L1579.82 682.846 L1579.26 682.846 L1578.7 682.846 L1578.14 682.846 L1577.58 682.846 L1577.02 682.846 L1576.46 682.846 L1575.9 682.846 L1575.34 682.846 L1574.78 682.846 L1574.22 682.846 L1573.66 682.846 L1573.1 682.846 L1572.55 682.846 L1571.99 682.846 L1571.43 682.846 L1570.87 682.846 L1570.31 682.846 L1569.75 682.846 L1569.19 682.846 L1568.63 682.846 L1568.07 682.846 L1567.51 682.846 L1566.95 682.846 L1566.39 682.846 L1565.83 682.846 L1565.28 682.846 L1564.72 682.846 L1564.16 682.846 L1563.6 682.846 L1563.04 682.846 L1562.48 682.846 L1561.92 682.846 L1561.36 682.846 L1560.8 682.846 L1560.24 682.846 L1559.68 682.846 L1559.12 682.846 L1558.56 682.846 L1558 682.846 L1557.45 682.846 L1556.89 682.846 L1556.33 682.846 L1555.77 682.846 L1555.21 682.846 L1554.65 682.846 L1554.09 682.846 L1553.53 682.846 L1552.97 682.846 L1552.41 682.846 L1551.85 682.846 L1551.29 682.846 L1550.73 682.846 L1550.18 682.846 L1549.62 682.846 L1549.06 682.846 L1548.5 682.846 L1547.94 682.846 L1547.38 682.846 L1546.82 682.846 L1546.26 682.846 L1545.7 682.846 L1545.14 682.846 L1544.58 682.846 L1544.02 682.846 L1543.46 682.846 L1542.9 682.846 L1542.35 682.846 L1541.79 682.846 L1541.23 682.846 L1540.67 682.846 L1540.11 682.846 L1539.55 682.846 L1538.99 682.846 L1538.43 682.846 L1537.87 682.846 L1537.31 682.846 L1536.75 682.846 L1536.19 682.846 L1535.63 682.846 L1535.08 682.846 L1534.52 682.846 L1533.96 682.846 L1533.4 682.846 L1532.84 682.846 L1532.28 682.846 L1531.72 682.846 L1531.16 682.846 L1530.6 682.846 L1530.04 682.846 L1529.48 682.846 L1528.92 682.846 L1528.36 682.846 L1527.81 682.846 L1527.25 682.846 L1526.69 682.846 L1526.13 682.846 L1525.57 682.846 L1525.01 682.846 L1524.45 682.846 L1523.89 682.846 L1523.33 682.846 L1522.77 682.846 L1522.21 682.846 L1521.65 682.846 L1521.09 682.846 L1520.53 682.846 L1519.98 682.846 L1519.42 682.846 L1518.86 682.846 L1518.3 682.846 L1517.74 682.846 L1517.18 682.846 L1516.62 682.846 L1516.06 682.846 L1515.5 682.846 L1514.94 682.846 L1514.38 682.846 L1513.82 682.846 L1513.26 682.846 L1512.71 682.846 L1512.15 682.846 L1511.59 682.846 L1511.03 682.846 L1510.47 682.846 L1509.91 682.846 L1509.35 682.846 L1508.79 682.846 L1508.23 682.846 L1507.67 682.846 L1507.11 682.846 L1506.55 682.846 L1505.99 682.846 L1505.44 682.846 L1504.88 682.846 L1504.32 682.846 L1503.76 682.846 L1503.2 682.846 L1502.64 682.846 L1502.08 682.846 L1501.52 682.846 L1500.96 682.846 L1500.4 682.846 L1499.84 682.846 L1499.28 682.846 L1498.72 682.846 L1498.16 682.846 L1497.61 682.846 L1497.05 682.846 L1496.49 682.846 L1495.93 682.846 L1495.37 682.846 L1494.81 682.846 L1494.25 682.846 L1493.69 682.846 L1493.13 682.846 L1492.57 682.846 L1492.01 682.846 L1491.45 682.846 L1490.89 682.846 L1490.34 682.846 L1489.78 682.846 L1489.22 682.846 L1488.66 682.846 L1488.1 682.846 L1487.54 682.846 L1486.98 682.846 L1486.42 682.846 L1485.86 682.846 L1485.3 682.846 L1484.74 682.846 L1484.18 682.846 L1483.62 682.846 L1483.07 682.846 L1482.51 682.846 L1481.95 682.846 L1481.39 682.846 L1480.83 682.846 L1480.27 682.846 L1479.71 682.846 L1479.15 682.846 L1478.59 682.846 L1478.03 682.846 L1477.47 682.846 L1476.91 682.846 L1476.35 682.846 L1475.79 682.846 L1475.24 682.846 L1474.68 682.846 L1474.12 682.846 L1473.56 682.846 L1473 682.846 L1472.44 682.846 L1471.88 682.846 L1471.32 682.846 L1470.76 682.846 L1470.2 682.846 L1469.64 682.846 L1469.08 682.846 L1468.52 682.846 L1467.97 682.846 L1467.41 682.846 L1466.85 682.846 L1466.29 682.846 L1465.73 682.846 L1465.17 682.846 L1464.61 682.846 L1464.05 682.846 L1463.49 682.846 L1462.93 682.846 L1462.37 682.846 L1461.81 682.846 L1461.25 682.846 L1460.7 682.846 L1460.14 682.846 L1459.58 682.846 L1459.02 682.846 L1458.46 682.846 L1457.9 682.846 L1457.34 682.846 L1456.78 682.846 L1456.22 682.846 L1455.66 682.846 L1455.1 682.846 L1454.54 682.846 L1453.98 682.846 L1453.42 682.846 L1452.87 682.846 L1452.31 682.846 L1451.75 682.846 L1451.19 682.846 L1450.63 682.846 L1450.07 682.846 L1449.51 682.846 L1448.95 682.846 L1448.39 682.846 L1447.83 682.846 L1447.27 682.846 L1446.71 682.846 L1446.15 682.846 L1445.6 682.846 L1445.04 682.846 L1444.48 682.846 L1443.92 682.846 L1443.36 682.846 L1442.8 682.846 L1442.24 682.846 L1441.68 682.846 L1441.12 682.846 L1440.56 682.846 L1440 682.846 L1439.44 682.846 L1438.88 682.846 L1438.33 682.846 L1437.77 682.846 L1437.21 682.846 L1436.65 682.846 L1436.09 682.846 L1435.53 682.846 L1434.97 682.846 L1434.41 682.846 L1433.85 682.846 L1433.29 682.846 L1432.73 682.846 L1432.17 682.846 L1431.61 682.846 L1431.05 682.846 L1430.5 682.846 L1429.94 682.846 L1429.38 682.846 L1428.82 682.846 L1428.26 682.846 L1427.7 682.846 L1427.14 682.846 L1426.58 682.846 L1426.02 682.846 L1425.46 682.846 L1424.9 682.846 L1424.34 682.846 L1423.78 682.846 L1423.23 682.846 L1422.67 682.846 L1422.11 682.846 L1421.55 682.846 L1420.99 682.846 L1420.43 682.846 L1419.87 682.846 L1419.31 682.846 L1418.75 682.846 L1418.19 682.846 L1417.63 682.846 L1417.07 682.846 L1416.51 682.846 L1415.95 682.846 L1415.4 682.846 L1414.84 682.846 L1414.28 682.846 L1413.72 682.846 L1413.16 682.846 L1412.6 682.846 L1412.04 682.846 L1411.48 682.846 L1410.92 682.846 L1410.36 682.846 L1409.8 682.846 L1409.24 682.846 L1408.68 682.846 L1408.13 682.846 L1407.57 682.846 L1407.01 682.846 L1406.45 682.846 L1405.89 682.846 L1405.33 682.846 L1404.77 682.846 L1404.21 682.846 L1403.65 682.846 L1403.09 682.846 L1402.53 682.846 L1401.97 682.846 L1401.41 682.846 L1400.86 682.846 L1400.3 682.846 L1399.74 682.846 L1399.18 682.846 L1398.62 682.846 L1398.06 682.846 L1397.5 682.846 L1396.94 682.846 L1396.38 682.846 L1395.82 682.846 L1395.26 682.846 L1394.7 682.846 L1394.14 682.846 L1393.58 682.846 L1393.03 682.846 L1392.47 682.846 L1391.91 682.846 L1391.35 682.846 L1390.79 682.846 L1390.23 682.846 L1389.67 682.846 L1389.11 682.846 L1388.55 682.846 L1387.99 682.846 L1387.43 682.846 L1386.87 682.846 L1386.31 682.846 L1385.76 682.846 L1385.2 682.846 L1384.64 682.846 L1384.08 682.846 L1383.52 682.846 L1382.96 682.846 L1382.4 682.846 L1381.84 682.846 L1381.28 682.846 L1380.72 682.846 L1380.16 682.846 L1379.6 682.846 L1379.04 682.846 L1378.49 682.846 L1377.93 682.846 L1377.37 682.846 L1376.81 682.846 L1376.25 682.846 L1375.69 682.846 L1375.13 682.846 L1374.57 682.846 L1374.01 682.846 L1373.45 682.846 L1372.89 682.846 L1372.33 682.846 L1371.77 682.846 L1371.21 682.846 L1370.66 682.846 L1370.1 682.846 L1369.54 682.846 L1368.98 682.846 L1368.42 682.846 L1367.86 682.846 L1367.3 682.846 L1366.74 682.846 L1366.18 682.846 L1365.62 682.846 L1365.06 682.846 L1364.5 682.846 L1363.94 682.846 L1363.39 682.846 L1362.83 682.846 L1362.27 682.846 L1361.71 682.846 L1361.15 682.846 L1360.59 682.846 L1360.03 682.846 L1359.47 682.846 L1358.91 682.846 L1358.35 682.846 L1357.79 682.846 L1357.23 682.846 L1356.67 682.846 L1356.12 682.846 L1355.56 682.846 L1355 682.846 L1354.44 682.846 L1353.88 682.846 L1353.32 682.846 L1352.76 682.846 L1352.2 682.846 L1351.64 682.846 L1351.08 682.846 L1350.52 682.846 L1349.96 682.846 L1349.4 682.846 L1348.84 682.846 L1348.29 682.846 L1347.73 682.846 L1347.17 682.846 L1346.61 682.846 L1346.05 682.846 L1345.49 682.846 L1344.93 682.846 L1344.37 682.846 L1343.81 682.846 L1343.25 682.846 L1342.69 682.846 L1342.13 682.846 L1341.57 682.846 L1341.02 682.846 L1340.46 682.846 L1339.9 682.846 L1339.34 682.846 L1338.78 682.846 L1338.22 682.846 L1337.66 682.846 L1337.1 682.846 L1336.54 682.846 L1335.98 682.846 L1335.42 682.846 L1334.86 682.846 L1334.3 682.846 L1333.75 682.846 L1333.19 682.846 L1332.63 682.846 L1332.07 682.846 L1331.51 682.846 L1330.95 682.846 L1330.39 682.846 L1329.83 682.846 L1329.27 682.846 L1328.71 682.846 L1328.15 682.846 L1327.59 682.846 L1327.03 682.846 L1326.47 682.846 L1325.92 682.846 L1325.36 682.846 L1324.8 682.846 L1324.24 682.846 L1323.68 682.846 L1323.12 682.846 L1322.56 682.846 L1322 682.846 L1321.44 682.846 L1320.88 682.846 L1320.32 682.846 L1319.76 682.846 L1319.2 682.846 L1318.65 682.846 L1318.09 682.846 L1317.53 682.846 L1316.97 682.846 L1316.41 682.846 L1315.85 682.846 L1315.29 682.846 L1314.73 682.846 L1314.17 682.846 L1313.61 682.846 L1313.05 682.846 L1312.49 682.846 L1311.93 682.846 L1311.38 682.846 L1310.82 682.846 L1310.26 682.846 L1309.7 682.846 L1309.14 682.846 L1308.58 682.846 L1308.02 682.846 L1307.46 682.846 L1306.9 682.846 L1306.34 682.846 L1305.78 682.846 L1305.22 682.846 L1304.66 682.846 L1304.1 682.846 L1303.55 682.846 L1302.99 682.846 L1302.43 682.846 L1301.87 682.846 L1301.31 682.846 L1300.75 682.846 L1300.19 682.846 L1299.63 682.846 L1299.07 682.846 L1298.51 682.846 L1297.95 682.846 L1297.39 682.846 L1296.83 682.846 L1296.28 682.846 L1295.72 682.846 L1295.16 682.846 L1294.6 682.846 L1294.04 682.846 L1293.48 682.846 L1292.92 682.846 L1292.36 682.846 L1291.8 682.846 L1291.24 682.846 L1290.68 682.846 L1290.12 682.846 L1289.56 682.846 L1289 682.846 L1288.45 682.846 L1287.89 682.846 L1287.33 682.846 L1286.77 682.846 L1286.21 682.846 L1285.65 682.846 L1285.09 682.846 L1284.53 682.846 L1283.97 682.846 L1283.41 682.846 L1282.85 682.846 L1282.29 682.846 L1281.73 682.846 L1281.18 682.846 L1280.62 682.846 L1280.06 682.846 L1279.5 682.846 L1278.94 682.846 L1278.38 682.846 L1277.82 682.846 L1277.26 682.846 L1276.7 682.846 L1276.14 682.846 L1275.58 682.846 L1275.02 682.846 L1274.46 682.846 L1273.91 682.846 L1273.35 682.846 L1272.79 682.846 L1272.23 682.846 L1271.67 682.846 L1271.11 682.846 L1270.55 682.846 L1269.99 682.846 L1269.43 682.846 L1268.87 682.846 L1268.31 682.846 L1267.75 682.846 L1267.19 682.846 L1266.63 682.846 L1266.08 682.846 L1265.52 682.846 L1264.96 682.846 L1264.4 682.846 L1263.84 682.846 L1263.28 682.846 L1262.72 682.846 L1262.16 682.846 L1261.6 682.846 L1261.04 682.846 L1260.48 682.846 L1259.92 682.846 L1259.36 682.846 L1258.81 682.846 L1258.25 682.846 L1257.69 682.846 L1257.13 682.846 L1256.57 682.846 L1256.01 682.846 L1255.45 682.846 L1254.89 682.846 L1254.33 682.846 L1253.77 682.846 L1253.21 682.846 L1252.65 682.846 L1252.09 682.846 L1251.54 682.846 L1250.98 682.846 L1250.42 682.846 L1249.86 682.846 L1249.3 682.846 L1248.74 682.846 L1248.18 682.846 L1247.62 682.846 L1247.06 682.846 L1246.5 682.846 L1245.94 682.846 L1245.38 682.846 L1244.82 682.846 L1244.26 682.846 L1243.71 682.846 L1243.15 682.846 L1242.59 682.846 L1242.03 682.846 L1241.47 682.846 L1240.91 682.846 L1240.35 682.846 L1239.79 682.846 L1239.23 682.846 L1238.67 682.846 L1238.11 682.846 L1237.55 682.846 L1236.99 682.846 L1236.44 682.846 L1235.88 682.846 L1235.32 682.846 L1234.76 682.846 L1234.2 682.846 L1233.64 682.846 L1233.08 682.846 L1232.52 682.846 L1231.96 682.846 L1231.4 682.846 L1230.84 682.846 L1230.28 682.846 L1229.72 682.846 L1229.17 682.846 L1228.61 682.846 L1228.05 682.846 L1227.49 682.846 L1226.93 682.846 L1226.37 682.846 L1225.81 682.846 L1225.25 682.846 L1224.69 682.846 L1224.13 682.846 L1223.57 682.846 L1223.01 682.846 L1222.45 682.846 L1221.89 682.846 L1221.34 682.846 L1220.78 682.846 L1220.22 682.846 L1219.66 682.846 L1219.1 682.846 L1218.54 682.846 L1217.98 682.846 L1217.42 682.846 L1216.86 682.846 L1216.3 682.846 L1215.74 682.846 L1215.18 682.846 L1214.62 682.846 L1214.07 682.846 L1213.51 682.846 L1212.95 682.846 L1212.39 682.846 L1211.83 682.846 L1211.27 682.846 L1210.71 682.846 L1210.15 682.846 L1209.59 682.846 L1209.03 682.846 L1208.47 682.846 L1207.91 682.846 L1207.35 682.846 L1206.8 682.846 L1206.24 682.846 L1205.68 682.846 L1205.12 682.846 L1204.56 682.846 L1204 682.846 L1203.44 682.846 L1202.88 682.846 L1202.32 682.846 L1201.76 682.846 L1201.2 682.846 L1200.64 682.846 L1200.08 682.846 L1199.52 682.846 L1198.97 682.846 L1198.41 682.846 L1197.85 682.846 L1197.29 682.846 L1196.73 682.846 L1196.17 682.846 L1195.61 682.846 L1195.05 682.846 L1194.49 682.846 L1193.93 682.846 L1193.37 682.846 L1192.81 682.846 L1192.25 682.846 L1191.7 682.846 L1191.14 682.846 L1190.58 682.846 L1190.02 682.846 L1189.46 682.846 L1188.9 682.846 L1188.34 682.846 L1187.78 682.846 L1187.22 682.846 L1186.66 682.846 L1186.1 682.846 L1185.54 682.846 L1184.98 682.846 L1184.43 682.846 L1183.87 682.846 L1183.31 682.846 L1182.75 682.846 L1182.19 682.846 L1181.63 682.846 L1181.07 682.846 L1180.51 682.846 L1179.95 682.846 L1179.39 682.846 L1178.83 682.846 L1178.27 682.846 L1177.71 682.846 L1177.15 682.846 L1176.6 682.846 L1176.04 682.846 L1175.48 682.846 L1174.92 682.846 L1174.36 682.846 L1173.8 682.846 L1173.24 682.846 L1172.68 682.846 L1172.12 682.846 L1171.56 682.846 L1171 682.846 L1170.44 682.846 L1169.88 682.846 L1169.33 682.846 L1168.77 682.846 L1168.21 682.846 L1167.65 682.846 L1167.09 682.846 L1166.53 682.846 L1165.97 682.846 L1165.41 682.846 L1164.85 682.846 L1164.29 682.846 L1163.73 682.846 L1163.17 682.846 L1162.61 682.846 L1162.05 682.846 L1161.5 682.846 L1160.94 682.846 L1160.38 682.846 L1159.82 682.846 L1159.26 682.846 L1158.7 682.846 L1158.14 682.846 L1157.58 682.846 L1157.02 682.846 L1156.46 682.846 L1155.9 682.846 L1155.34 682.846 L1154.78 682.846 L1154.23 682.846 L1153.67 682.846 L1153.11 682.846 L1152.55 682.846 L1151.99 682.846 L1151.43 682.846 L1150.87 682.846 L1150.31 682.846 L1149.75 682.846 L1149.19 682.846 L1148.63 682.846 L1148.07 682.846 L1147.51 682.846 L1146.96 682.846 L1146.4 682.846 L1145.84 682.846 L1145.28 682.846 L1144.72 682.846 L1144.16 682.846 L1143.6 682.846 L1143.04 682.846 L1142.48 682.846 L1141.92 682.846 L1141.36 682.846 L1140.8 682.846 L1140.24 682.846 L1139.68 682.846 L1139.13 682.846 L1138.57 682.846 L1138.01 682.846 L1137.45 682.846 L1136.89 682.846 L1136.33 682.846 L1135.77 682.846 L1135.21 682.846 L1134.65 682.846 L1134.09 682.846 L1133.53 682.846 L1132.97 682.846 L1132.41 682.846 L1131.86 682.846 L1131.3 682.846 L1130.74 682.846 L1130.18 682.846 L1129.62 682.846 L1129.06 682.846 L1128.5 682.846 L1127.94 682.846 L1127.38 682.846 L1126.82 682.846 L1126.26 682.846 L1125.7 682.846 L1125.14 682.846 L1124.59 682.846 L1124.03 682.846 L1123.47 682.846 L1122.91 682.846 L1122.35 682.846 L1121.79 682.846 L1121.23 682.846 L1120.67 682.846 L1120.11 682.846 L1119.55 682.846 L1118.99 682.846 L1118.43 682.846 L1117.87 682.846 L1117.31 682.846 L1116.76 682.846 L1116.2 682.846 L1115.64 682.846 L1115.08 682.846 L1114.52 682.846 L1113.96 682.846 L1113.4 682.846 L1112.84 682.846 L1112.28 682.846 L1111.72 682.846 L1111.16 682.846 L1110.6 682.846 L1110.04 682.846 L1109.49 682.846 L1108.93 682.846 L1108.37 682.846 L1107.81 682.846 L1107.25 682.846 L1106.69 682.846 L1106.13 682.846 L1105.57 682.846 L1105.01 682.846 L1104.45 682.846 L1103.89 682.846 L1103.33 682.846 L1102.77 682.846 L1102.22 682.846 L1101.66 682.846 L1101.1 682.846 L1100.54 682.846 L1099.98 682.846 L1099.42 682.846 L1098.86 682.846 L1098.3 682.846 L1097.74 682.846 L1097.18 682.846 L1096.62 682.846 L1096.06 682.846 L1095.5 682.846 L1094.94 682.846 L1094.39 682.846 L1093.83 682.846 L1093.27 682.846 L1092.71 682.846 L1092.15 682.846 L1091.59 682.846 L1091.03 682.846 L1090.47 682.846 L1089.91 682.846 L1089.35 682.846 L1088.79 682.846 L1088.23 682.846 L1087.67 682.846 L1087.12 682.846 L1086.56 682.846 L1086 682.846 L1085.44 682.846 L1084.88 682.846 L1084.32 682.846 L1083.76 682.846 L1083.2 682.846 L1082.64 682.846 L1082.08 682.846 L1081.52 682.846 L1080.96 682.846 L1080.4 682.846 L1079.85 682.846 L1079.29 682.846 L1078.73 682.846 L1078.17 682.846 L1077.61 682.846 L1077.05 682.846 L1076.49 682.846 L1075.93 682.846 L1075.37 682.846 L1074.81 682.846 L1074.25 682.846 L1073.69 682.846 L1073.13 682.846 L1072.57 682.846 L1072.02 682.846 L1071.46 682.846 L1070.9 682.846 L1070.34 682.846 L1069.78 682.846 L1069.22 682.846 L1068.66 682.846 L1068.1 682.846 L1067.54 682.846 L1066.98 682.846 L1066.42 682.846 L1065.86 682.846 L1065.3 682.846 L1064.75 682.846 L1064.19 682.846 L1063.63 682.846 L1063.07 682.846 L1062.51 682.846 L1061.95 682.846 L1061.39 682.846 L1060.83 682.846 L1060.27 682.846 L1059.71 682.846 L1059.15 682.846 L1058.59 682.846 L1058.03 682.846 L1057.48 682.846 L1056.92 682.846 L1056.36 682.846 L1055.8 682.846 L1055.24 682.846 L1054.68 682.846 L1054.12 682.846 L1053.56 682.846 L1053 682.846 L1052.44 682.846 L1051.88 682.846 L1051.32 682.846 L1050.76 682.846 L1050.2 682.846 L1049.65 682.846 L1049.09 682.846 L1048.53 682.846 L1047.97 682.846 L1047.41 682.846 L1046.85 682.846 L1046.29 682.846 L1045.73 682.846 L1045.17 682.846 L1044.61 682.846 L1044.05 682.846 L1043.49 682.846 L1042.93 682.846 L1042.38 682.846 L1041.82 682.846 L1041.26 682.846 L1040.7 682.846 L1040.14 682.846 L1039.58 682.846 L1039.02 682.846 L1038.46 682.846 L1037.9 682.846 L1037.34 682.846 L1036.78 682.846 L1036.22 682.846 L1035.66 682.846 L1035.1 682.846 L1034.55 682.846 L1033.99 682.846 L1033.43 682.846 L1032.87 682.846 L1032.31 682.846 L1031.75 682.846 L1031.19 682.846 L1030.63 682.846 L1030.07 682.846 L1029.51 682.846 L1028.95 682.846 L1028.39 682.846 L1027.83 682.846 L1027.28 682.846 L1026.72 682.846 L1026.16 682.846 L1025.6 682.846 L1025.04 682.846 L1024.48 682.846 L1023.92 682.846 L1023.36 682.846 L1022.8 682.846 L1022.24 682.846 L1021.68 682.846 L1021.12 682.846 L1020.56 682.846 L1020.01 682.846 L1019.45 682.846 L1018.89 682.846 L1018.33 682.846 L1017.77 682.846 L1017.21 682.846 L1016.65 682.846 L1016.09 682.846 L1015.53 682.846 L1014.97 682.846 L1014.41 682.846 L1013.85 682.846 L1013.29 682.846 L1012.73 682.846 L1012.18 682.846 L1011.62 682.846 L1011.06 682.846 L1010.5 682.846 L1009.94 682.846 L1009.38 682.846 L1008.82 682.846 L1008.26 682.846 L1007.7 682.846 L1007.14 682.846 L1006.58 682.846 L1006.02 682.846 L1005.46 682.846 L1004.91 682.846 L1004.35 682.846 L1003.79 682.846 L1003.23 682.846 L1002.67 682.846 L1002.11 682.846 L1001.55 682.846 L1000.99 682.846 L1000.43 682.846 L999.872 682.846 L999.313 682.846 L998.754 682.846 L998.194 682.846 L997.635 682.846 L997.076 682.846 L996.517 682.846 L995.957 682.846 L995.398 682.846 L994.839 682.846 L994.28 682.846 L993.72 682.846 L993.161 682.846 L992.602 682.846 L992.043 682.846 L991.483 682.846 L990.924 682.846 L990.365 682.846 L989.806 682.846 L989.246 682.846 L988.687 682.846 L988.128 682.846 L987.569 682.846 L987.009 682.846 L986.45 682.846 L985.891 682.846 L985.332 682.846 L984.772 682.846 L984.213 682.846 L983.654 682.846 L983.095 682.846 L982.535 682.846 L981.976 682.846 L981.417 682.846 L980.858 682.846 L980.298 682.846 L979.739 682.846 L979.18 682.846 L978.621 682.846 L978.061 682.846 L977.502 682.846 L976.943 682.846 L976.384 682.846 L975.824 682.846 L975.265 682.846 L974.706 682.846 L974.147 682.846 L973.587 682.846 L973.028 682.846 L972.469 682.846 L971.91 682.846 L971.35 682.846 L970.791 682.846 L970.232 682.846 L969.673 682.846 L969.113 682.846 L968.554 682.846 L967.995 682.846 L967.436 682.846 L966.876 682.846 L966.317 682.846 L965.758 682.846 L965.199 682.846 L964.639 682.846 L964.08 682.846 L963.521 682.846 L962.962 682.846 L962.402 682.846 L961.843 682.846 L961.284 682.846 L960.725 682.846 L960.165 682.846 L959.606 682.846 L959.047 682.846 L958.488 682.846 L957.928 682.846 L957.369 682.846 L956.81 682.846 L956.251 682.846 L955.691 682.846 L955.132 682.846 L954.573 682.846 L954.014 682.846 L953.454 682.846 L952.895 682.846 L952.336 682.846 L951.777 682.846 L951.217 682.846 L950.658 682.846 L950.099 682.846 L949.54 682.846 L948.98 682.846 L948.421 682.846 L947.862 682.846 L947.303 682.846 L946.743 682.846 L946.184 682.846 L945.625 682.846 L945.066 682.846 L944.506 682.846 L943.947 682.846 L943.388 682.846 L942.829 682.846 L942.269 682.846 L941.71 682.846 L941.151 682.846 L940.592 682.846 L940.032 682.846 L939.473 682.846 L938.914 682.846 L938.355 682.846 L937.795 682.846 L937.236 682.846 L936.677 682.846 L936.118 682.846 L935.558 682.846 L934.999 682.846 L934.44 682.846 L933.881 682.846 L933.321 682.846 L932.762 682.846 L932.203 682.846 L931.644 682.846 L931.084 682.846 L930.525 682.846 L929.966 682.846 L929.406 682.846 L928.847 682.846 L928.288 682.846 L927.729 682.846 L927.169 682.846 L926.61 682.846 L926.051 682.846 L925.492 682.846 L924.932 682.846 L924.373 682.846 L923.814 682.846 L923.255 682.846 L922.695 682.846 L922.136 682.846 L921.577 682.846 L921.018 682.846 L920.458 682.846 L919.899 682.846 L919.34 682.846 L918.781 682.846 L918.221 682.846 L917.662 682.846 L917.103 682.846 L916.544 682.846 L915.984 682.846 L915.425 682.846 L914.866 682.846 L914.307 682.846 L913.747 682.846 L913.188 682.846 L912.629 682.846 L912.07 682.846 L911.51 682.846 L910.951 682.846 L910.392 682.846 L909.833 682.846 L909.273 682.846 L908.714 682.846 L908.155 682.846 L907.596 682.846 L907.036 682.846 L906.477 682.846 L905.918 682.846 L905.359 682.846 L904.799 682.846 L904.24 682.846 L903.681 682.846 L903.122 682.846 L902.562 682.846 L902.003 682.846 L901.444 682.846 L900.885 682.846 L900.325 682.846 L899.766 682.846 L899.207 682.846 L898.648 682.846 L898.088 682.846 L897.529 682.846 L896.97 682.846 L896.411 682.846 L895.851 682.846 L895.292 682.846 L894.733 682.846 L894.174 682.846 L893.614 682.846 L893.055 682.846 L892.496 682.846 L891.937 682.846 L891.377 682.846 L890.818 682.846 L890.259 682.846 L889.7 682.846 L889.14 682.846 L888.581 682.846 L888.022 682.846 L887.463 682.846 L886.903 682.846 L886.344 682.846 L885.785 682.846 L885.226 682.846 L884.666 682.846 L884.107 682.846 L883.548 682.846 L882.989 682.846 L882.429 682.846 L881.87 682.846 L881.311 682.846 L880.752 682.846 L880.192 682.846 L879.633 682.846 L879.074 682.846 L878.515 682.846 L877.955 682.846 L877.396 682.846 L876.837 682.846 L876.278 682.846 L875.718 682.846 L875.159 682.846 L874.6 682.846 L874.041 682.846 L873.481 682.846 L872.922 682.846 L872.363 682.846 L871.804 682.846 L871.244 682.846 L870.685 682.846 L870.126 682.846 L869.567 682.846 L869.007 682.846 L868.448 682.846 L867.889 682.846 L867.33 682.846 L866.77 682.846 L866.211 682.846 L865.652 682.846 L865.093 682.846 L864.533 682.846 L863.974 682.846 L863.415 682.846 L862.856 682.846 L862.296 682.846 L861.737 682.846 L861.178 682.846 L860.619 682.846 L860.059 682.846 L859.5 682.846 L858.941 682.846 L858.382 682.846 L857.822 682.846 L857.263 682.846 L856.704 682.846 L856.145 682.846 L855.585 682.846 L855.026 682.846 L854.467 682.846 L853.908 682.846 L853.348 682.846 L852.789 682.846 L852.23 682.846 L851.671 682.846 L851.111 682.846 L850.552 682.846 L849.993 682.846 L849.434 682.846 L848.874 682.846 L848.315 682.846 L847.756 682.846 L847.197 682.846 L846.637 682.846 L846.078 682.846 L845.519 682.846 L844.96 682.846 L844.4 682.846 L843.841 682.846 L843.282 682.846 L842.723 682.846 L842.163 682.846 L841.604 682.846 L841.045 682.846 L840.486 682.846 L839.926 682.846 L839.367 682.846 L838.808 682.846 L838.249 682.846 L837.689 682.846 L837.13 682.846 L836.571 682.846 L836.012 682.846 L835.452 682.846 L834.893 682.846 L834.334 682.846 L833.775 682.846 L833.215 682.846 L832.656 682.846 L832.097 682.846 L831.538 682.846 L830.978 682.846 L830.419 682.846 L829.86 682.846 L829.301 682.846 L828.741 682.846 L828.182 682.846 L827.623 682.846 L827.064 682.846 L826.504 682.846 L825.945 682.846 L825.386 682.846 L824.827 682.846 L824.267 682.846 L823.708 682.846 L823.149 682.846 L822.59 682.846 L822.03 682.846 L821.471 682.846 L820.912 682.846 L820.353 682.846 L819.793 682.846 L819.234 682.846 L818.675 682.846 L818.116 682.846 L817.556 682.846 L816.997 682.846 L816.438 682.846 L815.879 682.846 L815.319 682.846 L814.76 682.846 L814.201 682.846 L813.642 682.846 L813.082 682.846 L812.523 682.846 L811.964 682.846 L811.405 682.846 L810.845 682.846 L810.286 682.846 L809.727 682.846 L809.168 682.846 L808.608 682.846 L808.049 682.846 L807.49 682.846 L806.931 682.846 L806.371 682.846 L805.812 682.846 L805.253 682.846 L804.693 682.846 L804.134 682.846 L803.575 682.846 L803.016 682.846 L802.456 682.846 L801.897 682.846 L801.338 682.846 L800.779 682.846 L800.219 682.846 L799.66 682.846 L799.101 682.846 L798.542 682.846 L797.982 682.846 L797.423 682.846 L796.864 682.846 L796.305 682.846 L795.745 682.846 L795.186 682.846 L794.627 682.846 L794.068 682.846 L793.508 682.846 L792.949 682.846 L792.39 682.846 L791.831 682.846 L791.271 682.846 L790.712 682.846 L790.153 682.846 L789.594 682.846 L789.034 682.846 L788.475 682.846 L787.916 682.846 L787.357 682.846 L786.797 682.846 L786.238 682.846 L785.679 682.846 L785.12 682.846 L784.56 682.846 L784.001 682.846 L783.442 682.846 L782.883 682.846 L782.323 682.846 L781.764 682.846 L781.205 682.846 L780.646 682.846 L780.086 682.846 L779.527 682.846 L778.968 682.846 L778.409 682.846 L777.849 682.846 L777.29 682.846 L776.731 682.846 L776.172 682.846 L775.612 682.846 L775.053 682.846 L774.494 682.846 L773.935 682.846 L773.375 682.846 L772.816 682.846 L772.257 682.846 L771.698 682.846 L771.138 682.846 L770.579 682.846 L770.02 682.846 L769.461 682.846 L768.901 682.846 L768.342 682.846 L767.783 682.846 L767.224 682.846 L766.664 682.846 L766.105 682.846 L765.546 682.846 L764.987 682.846 L764.427 682.846 L763.868 682.846 L763.309 682.846 L762.75 682.846 L762.19 682.846 L761.631 682.846 L761.072 682.846 L760.513 682.846 L759.953 682.846 L759.394 682.846 L758.835 682.846 L758.276 682.846 L757.716 682.846 L757.157 682.846 L756.598 682.846 L756.039 682.846 L755.479 682.846 L754.92 682.846 L754.361 682.846 L753.802 682.846 L753.242 682.846 L752.683 682.846 L752.124 682.846 L751.565 682.846 L751.005 682.846 L750.446 682.846 L749.887 682.846 L749.328 682.846 L748.768 682.846 L748.209 682.846 L747.65 682.846 L747.091 682.846 L746.531 682.846 L745.972 682.846 L745.413 682.846 L744.854 682.846 L744.294 682.846 L743.735 682.846 L743.176 682.846 L742.617 682.846 L742.057 682.846 L741.498 682.846 L740.939 682.846 L740.38 682.846 L739.82 682.846 L739.261 682.846 L738.702 682.846 L738.143 682.846 L737.583 682.846 L737.024 682.846 L736.465 682.846 L735.906 682.846 L735.346 682.846 L734.787 682.846 L734.228 682.846 L733.669 682.846 L733.109 682.846 L732.55 682.846 L731.991 682.846 L731.432 682.846 L730.872 682.846 L730.313 682.846 L729.754 682.846 L729.195 682.846 L728.635 682.846 L728.076 682.846 L727.517 682.846 L726.958 682.846 L726.398 682.846 L725.839 682.846 L725.28 682.846 L724.721 682.846 L724.161 682.846 L723.602 682.846 L723.043 682.846 L722.484 682.846 L721.924 682.846 L721.365 682.846 L720.806 682.846 L720.247 682.846  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.315 720.806,686.315 721.365,686.315 721.924,686.315 722.484,686.315 723.043,686.315 723.602,686.315 724.161,686.315 724.721,686.315 725.28,686.315 725.839,686.315 726.398,686.315 726.958,686.315 727.517,686.315 728.076,686.315 728.635,686.315 729.195,686.315 729.754,686.315 730.313,686.315 730.872,686.315 731.432,686.315 731.991,686.315 732.55,686.315 733.109,686.315 733.669,686.315 734.228,686.315 734.787,686.315 735.346,686.315 735.906,686.315 736.465,686.315 737.024,686.315 737.583,686.315 738.143,686.315 738.702,686.315 739.261,686.315 739.82,686.315 740.38,686.315 740.939,686.315 741.498,686.315 742.057,686.315 742.617,686.315 743.176,686.315 743.735,686.315 744.294,686.315 744.854,686.315 745.413,686.315 745.972,686.315 746.531,686.315 747.091,686.315 747.65,686.315 748.209,686.315 748.768,686.315 749.328,686.315 749.887,686.315 750.446,686.315 751.005,686.315 751.565,686.315 752.124,686.315 752.683,686.315 753.242,686.315 753.802,686.315 754.361,686.315 754.92,686.315 755.479,686.315 756.039,686.315 756.598,686.315 757.157,686.315 757.716,686.315 758.276,686.315 758.835,686.315 759.394,686.315 759.953,686.315 760.513,686.315 761.072,686.315 761.631,686.315 762.19,686.315 762.75,686.315 763.309,686.315 763.868,686.315 764.427,686.315 764.987,686.315 765.546,686.315 766.105,686.315 766.664,686.315 767.224,686.315 767.783,686.315 768.342,686.315 768.901,686.315 769.461,686.315 770.02,686.315 770.579,686.315 771.138,686.315 771.698,686.315 772.257,686.315 772.816,686.315 773.375,686.315 773.935,686.315 774.494,686.315 775.053,686.315 775.612,686.315 776.172,686.315 776.731,686.315 777.29,686.315 777.849,686.315 778.409,686.315 778.968,686.315 779.527,686.315 780.086,686.315 780.646,686.315 781.205,686.315 781.764,686.315 782.323,686.315 782.883,686.315 783.442,686.315 784.001,686.315 784.56,686.315 785.12,686.315 785.679,686.315 786.238,686.315 786.797,686.315 787.357,686.315 787.916,686.315 788.475,686.315 789.034,686.315 789.594,686.315 790.153,686.315 790.712,686.315 791.271,686.315 791.831,686.315 792.39,686.315 792.949,686.315 793.508,686.315 794.068,686.315 794.627,686.315 795.186,686.315 795.745,686.315 796.305,686.315 796.864,686.315 797.423,686.315 797.982,686.315 798.542,686.315 799.101,686.315 799.66,686.315 800.219,686.315 800.779,686.315 801.338,686.315 801.897,686.315 802.456,686.315 803.016,686.315 803.575,686.315 804.134,686.315 804.693,686.315 805.253,686.315 805.812,686.315 806.371,686.315 806.931,686.315 807.49,686.315 808.049,686.315 808.608,686.315 809.168,686.315 809.727,686.315 810.286,686.315 810.845,686.315 811.405,686.315 811.964,686.315 812.523,686.315 813.082,686.315 813.642,686.315 814.201,686.315 814.76,686.315 815.319,686.315 815.879,686.315 816.438,686.315 816.997,686.315 817.556,686.315 818.116,686.315 818.675,686.315 819.234,686.315 819.793,686.315 820.353,686.315 820.912,686.315 821.471,686.315 822.03,686.315 822.59,686.315 823.149,686.315 823.708,686.315 824.267,686.315 824.827,686.315 825.386,686.315 825.945,686.315 826.504,686.315 827.064,686.315 827.623,686.315 828.182,686.315 828.741,686.315 829.301,686.315 829.86,686.315 830.419,686.315 830.978,686.315 831.538,686.315 832.097,686.315 832.656,686.315 833.215,686.315 833.775,686.315 834.334,686.315 834.893,686.315 835.452,686.315 836.012,686.315 836.571,686.315 837.13,686.315 837.689,686.315 838.249,686.315 838.808,686.315 839.367,686.315 839.926,686.315 840.486,686.315 841.045,686.315 841.604,686.315 842.163,686.315 842.723,686.315 843.282,686.315 843.841,686.315 844.4,686.315 844.96,686.315 845.519,686.315 846.078,686.315 846.637,686.315 847.197,686.315 847.756,686.315 848.315,686.315 848.874,686.315 849.434,686.315 849.993,686.315 850.552,686.315 851.111,686.315 851.671,686.315 852.23,686.315 852.789,686.315 853.348,686.315 853.908,686.315 854.467,686.315 855.026,686.315 855.585,686.315 856.145,686.315 856.704,686.315 857.263,686.315 857.822,686.315 858.382,686.315 858.941,686.315 859.5,686.315 860.059,686.315 860.619,686.315 861.178,686.315 861.737,686.315 862.296,686.315 862.856,686.315 863.415,686.315 863.974,686.315 864.533,686.315 865.093,686.315 865.652,686.315 866.211,686.315 866.77,686.315 867.33,686.315 867.889,686.315 868.448,686.315 869.007,686.315 869.567,686.315 870.126,686.315 870.685,686.315 871.244,686.315 871.804,686.315 872.363,686.315 872.922,686.315 873.481,686.315 874.041,686.315 874.6,686.315 875.159,686.315 875.718,686.315 876.278,686.315 876.837,686.315 877.396,686.315 877.955,686.315 878.515,686.315 879.074,686.315 879.633,686.315 880.192,686.315 880.752,686.315 881.311,686.315 881.87,686.315 882.429,686.315 882.989,686.315 883.548,686.315 884.107,686.315 884.666,686.315 885.226,686.315 885.785,686.315 886.344,686.315 886.903,686.315 887.463,686.315 888.022,686.315 888.581,686.315 889.14,686.315 889.7,686.315 890.259,686.315 890.818,686.315 891.377,686.315 891.937,686.315 892.496,686.315 893.055,686.315 893.614,686.315 894.174,686.315 894.733,686.315 895.292,686.315 895.851,686.315 896.411,686.315 896.97,686.315 897.529,686.315 898.088,686.315 898.648,686.315 899.207,686.315 899.766,686.315 900.325,686.315 900.885,686.315 901.444,686.315 902.003,686.315 902.562,686.315 903.122,686.315 903.681,686.315 904.24,686.315 904.799,686.315 905.359,686.315 905.918,686.315 906.477,686.315 907.036,686.315 907.596,686.315 908.155,686.315 908.714,686.315 909.273,686.315 909.833,686.315 910.392,686.315 910.951,686.315 911.51,686.315 912.07,686.315 912.629,686.315 913.188,686.315 913.747,686.315 914.307,686.315 914.866,686.315 915.425,686.315 915.984,686.315 916.544,686.315 917.103,686.315 917.662,686.315 918.221,686.315 918.781,686.315 919.34,686.315 919.899,686.315 920.458,686.315 921.018,686.315 921.577,686.315 922.136,686.315 922.695,686.315 923.255,686.315 923.814,686.315 924.373,686.315 924.932,686.315 925.492,686.315 926.051,686.315 926.61,686.315 927.169,686.315 927.729,686.315 928.288,686.315 928.847,686.315 929.406,686.315 929.966,686.315 930.525,686.315 931.084,686.315 931.644,686.315 932.203,686.315 932.762,686.315 933.321,686.315 933.881,686.315 934.44,686.315 934.999,686.315 935.558,686.315 936.118,686.315 936.677,686.315 937.236,686.315 937.795,686.315 938.355,686.315 938.914,686.315 939.473,686.315 940.032,686.315 940.592,686.315 941.151,686.315 941.71,686.315 942.269,686.315 942.829,686.315 943.388,686.315 943.947,686.315 944.506,686.315 945.066,686.315 945.625,686.315 946.184,686.315 946.743,686.315 947.303,686.315 947.862,686.315 948.421,686.315 948.98,686.315 949.54,686.315 950.099,686.315 950.658,686.315 951.217,686.315 951.777,686.315 952.336,686.315 952.895,686.315 953.454,686.315 954.014,686.315 954.573,686.315 955.132,686.315 955.691,686.315 956.251,686.315 956.81,686.315 957.369,686.315 957.928,686.315 958.488,686.315 959.047,686.315 959.606,686.315 960.165,686.315 960.725,686.315 961.284,686.315 961.843,686.315 962.402,686.315 962.962,686.315 963.521,686.315 964.08,686.315 964.639,686.315 965.199,686.315 965.758,686.315 966.317,686.315 966.876,686.315 967.436,686.315 967.995,686.315 968.554,686.315 969.113,686.315 969.673,686.315 970.232,686.315 970.791,686.315 971.35,686.315 971.91,686.315 972.469,686.315 973.028,686.315 973.587,686.315 974.147,686.315 974.706,686.315 975.265,686.315 975.824,686.315 976.384,686.315 976.943,686.315 977.502,686.315 978.061,686.315 978.621,686.315 979.18,686.315 979.739,686.315 980.298,686.315 980.858,686.315 981.417,686.315 981.976,686.315 982.535,686.315 983.095,686.315 983.654,686.315 984.213,686.315 984.772,686.315 985.332,686.315 985.891,686.315 986.45,686.315 987.009,686.315 987.569,686.315 988.128,686.315 988.687,686.315 989.246,686.315 989.806,686.315 990.365,686.315 990.924,686.315 991.483,686.315 992.043,686.315 992.602,686.315 993.161,686.315 993.72,686.315 994.28,686.315 994.839,686.315 995.398,686.315 995.957,686.315 996.517,686.315 997.076,686.315 997.635,686.315 998.194,686.315 998.754,686.315 999.313,686.315 999.872,686.315 1000.43,686.315 1000.99,686.315 1001.55,686.315 1002.11,686.315 1002.67,686.315 1003.23,686.315 1003.79,686.315 1004.35,686.315 1004.91,686.315 1005.46,686.315 1006.02,686.315 1006.58,686.315 1007.14,686.315 1007.7,686.315 1008.26,686.315 1008.82,686.315 1009.38,686.315 1009.94,686.315 1010.5,686.315 1011.06,686.315 1011.62,686.315 1012.18,686.315 1012.73,686.315 1013.29,686.315 1013.85,686.315 1014.41,686.315 1014.97,686.315 1015.53,686.315 1016.09,686.315 1016.65,686.315 1017.21,686.315 1017.77,686.315 1018.33,686.315 1018.89,686.315 1019.45,686.315 1020.01,686.315 1020.56,686.315 1021.12,686.315 1021.68,686.315 1022.24,686.315 1022.8,686.315 1023.36,686.315 1023.92,686.315 1024.48,686.315 1025.04,686.315 1025.6,686.315 1026.16,686.315 1026.72,686.315 1027.28,686.315 1027.83,686.315 1028.39,686.315 1028.95,686.315 1029.51,686.315 1030.07,686.315 1030.63,686.315 1031.19,686.315 1031.75,686.315 1032.31,686.315 1032.87,686.315 1033.43,686.315 1033.99,686.315 1034.55,686.315 1035.1,686.315 1035.66,686.315 1036.22,686.315 1036.78,686.315 1037.34,686.315 1037.9,686.315 1038.46,686.315 1039.02,686.315 1039.58,686.315 1040.14,686.315 1040.7,686.315 1041.26,686.315 1041.82,686.315 1042.38,686.315 1042.93,686.315 1043.49,686.315 1044.05,686.315 1044.61,686.315 1045.17,686.315 1045.73,686.315 1046.29,686.315 1046.85,686.315 1047.41,686.315 1047.97,686.315 1048.53,686.315 1049.09,686.315 1049.65,686.315 1050.2,686.315 1050.76,686.315 1051.32,686.315 1051.88,686.315 1052.44,686.315 1053,686.315 1053.56,686.315 1054.12,686.315 1054.68,686.315 1055.24,686.315 1055.8,686.315 1056.36,686.315 1056.92,686.315 1057.48,686.315 1058.03,686.315 1058.59,686.315 1059.15,686.315 1059.71,686.315 1060.27,686.315 1060.83,686.315 1061.39,686.315 1061.95,686.315 1062.51,686.315 1063.07,686.315 1063.63,686.315 1064.19,686.315 1064.75,686.315 1065.3,686.315 1065.86,686.315 1066.42,686.315 1066.98,686.315 1067.54,686.315 1068.1,686.315 1068.66,686.315 1069.22,686.315 1069.78,686.315 1070.34,686.315 1070.9,686.315 1071.46,686.315 1072.02,686.315 1072.57,686.315 1073.13,686.315 1073.69,686.315 1074.25,686.315 1074.81,686.315 1075.37,686.315 1075.93,686.315 1076.49,686.315 1077.05,686.315 1077.61,686.315 1078.17,686.315 1078.73,686.315 1079.29,686.315 1079.85,686.315 1080.4,686.315 1080.96,686.315 1081.52,686.315 1082.08,686.315 1082.64,686.315 1083.2,686.315 1083.76,686.315 1084.32,686.315 1084.88,686.315 1085.44,686.315 1086,686.315 1086.56,686.315 1087.12,686.315 1087.67,686.315 1088.23,686.315 1088.79,686.315 1089.35,686.315 1089.91,686.315 1090.47,686.315 1091.03,686.315 1091.59,686.315 1092.15,686.315 1092.71,686.315 1093.27,686.315 1093.83,686.315 1094.39,686.315 1094.94,686.315 1095.5,686.315 1096.06,686.315 1096.62,686.315 1097.18,686.315 1097.74,686.315 1098.3,686.315 1098.86,686.315 1099.42,686.315 1099.98,686.315 1100.54,686.315 1101.1,686.315 1101.66,686.315 1102.22,686.315 1102.77,686.315 1103.33,686.315 1103.89,686.315 1104.45,686.315 1105.01,686.315 1105.57,686.315 1106.13,686.315 1106.69,686.315 1107.25,686.315 1107.81,686.315 1108.37,686.315 1108.93,686.315 1109.49,686.315 1110.04,686.315 1110.6,686.315 1111.16,686.315 1111.72,686.315 1112.28,686.315 1112.84,686.315 1113.4,686.315 1113.96,686.315 1114.52,686.315 1115.08,686.315 1115.64,686.315 1116.2,686.315 1116.76,686.315 1117.31,686.315 1117.87,686.315 1118.43,686.315 1118.99,686.315 1119.55,686.315 1120.11,686.315 1120.67,686.315 1121.23,686.315 1121.79,686.315 1122.35,686.315 1122.91,686.315 1123.47,686.315 1124.03,686.315 1124.59,686.315 1125.14,686.315 1125.7,686.315 1126.26,686.315 1126.82,686.315 1127.38,686.315 1127.94,686.315 1128.5,686.315 1129.06,686.315 1129.62,686.315 1130.18,686.315 1130.74,686.315 1131.3,686.315 1131.86,686.315 1132.41,686.315 1132.97,686.315 1133.53,686.315 1134.09,686.315 1134.65,686.315 1135.21,686.315 1135.77,686.315 1136.33,686.315 1136.89,686.315 1137.45,686.315 1138.01,686.315 1138.57,686.315 1139.13,686.315 1139.68,686.315 1140.24,686.315 1140.8,686.315 1141.36,686.315 1141.92,686.315 1142.48,686.315 1143.04,686.315 1143.6,686.315 1144.16,686.315 1144.72,686.315 1145.28,686.315 1145.84,686.315 1146.4,686.315 1146.96,686.315 1147.51,686.315 1148.07,686.315 1148.63,686.315 1149.19,686.315 1149.75,686.315 1150.31,686.315 1150.87,686.315 1151.43,686.315 1151.99,686.315 1152.55,686.315 1153.11,686.315 1153.67,686.315 1154.23,686.315 1154.78,686.315 1155.34,686.315 1155.9,686.315 1156.46,686.315 1157.02,686.315 1157.58,686.315 1158.14,686.315 1158.7,686.315 1159.26,686.315 1159.82,686.315 1160.38,686.315 1160.94,686.315 1161.5,686.315 1162.05,686.315 1162.61,686.315 1163.17,686.315 1163.73,686.315 1164.29,686.315 1164.85,686.315 1165.41,686.315 1165.97,686.315 1166.53,686.315 1167.09,686.315 1167.65,686.315 1168.21,686.315 1168.77,686.315 1169.33,686.315 1169.88,686.315 1170.44,686.315 1171,686.315 1171.56,686.315 1172.12,686.315 1172.68,686.315 1173.24,686.315 1173.8,686.315 1174.36,686.315 1174.92,686.315 1175.48,686.315 1176.04,686.315 1176.6,686.315 1177.15,686.315 1177.71,686.315 1178.27,686.315 1178.83,686.315 1179.39,686.315 1179.95,686.315 1180.51,686.315 1181.07,686.315 1181.63,686.315 1182.19,686.315 1182.75,686.315 1183.31,686.315 1183.87,686.315 1184.43,686.315 1184.98,686.315 1185.54,686.315 1186.1,686.315 1186.66,686.315 1187.22,686.315 1187.78,686.315 1188.34,686.315 1188.9,686.315 1189.46,686.315 1190.02,686.315 1190.58,686.315 1191.14,686.315 1191.7,686.315 1192.25,686.315 1192.81,686.315 1193.37,686.315 1193.93,686.315 1194.49,686.315 1195.05,686.315 1195.61,686.315 1196.17,686.315 1196.73,686.315 1197.29,686.315 1197.85,686.315 1198.41,686.315 1198.97,686.315 1199.52,686.315 1200.08,686.315 1200.64,686.315 1201.2,686.315 1201.76,686.315 1202.32,686.315 1202.88,686.315 1203.44,686.315 1204,686.315 1204.56,686.315 1205.12,686.315 1205.68,686.315 1206.24,686.315 1206.8,686.315 1207.35,686.315 1207.91,686.315 1208.47,686.315 1209.03,686.315 1209.59,686.315 1210.15,686.315 1210.71,686.315 1211.27,686.315 1211.83,686.315 1212.39,686.315 1212.95,686.315 1213.51,686.315 1214.07,686.315 1214.62,686.315 1215.18,686.315 1215.74,686.315 1216.3,686.315 1216.86,686.315 1217.42,686.315 1217.98,686.315 1218.54,686.315 1219.1,686.315 1219.66,686.315 1220.22,686.315 1220.78,686.315 1221.34,686.315 1221.89,686.315 1222.45,686.315 1223.01,686.315 1223.57,686.315 1224.13,686.315 1224.69,686.315 1225.25,686.315 1225.81,686.315 1226.37,686.315 1226.93,686.315 1227.49,686.315 1228.05,686.315 1228.61,686.315 1229.17,686.315 1229.72,686.315 1230.28,686.315 1230.84,686.315 1231.4,686.315 1231.96,686.315 1232.52,686.315 1233.08,686.315 1233.64,686.315 1234.2,686.315 1234.76,686.315 1235.32,686.315 1235.88,686.315 1236.44,686.315 1236.99,686.315 1237.55,686.315 1238.11,686.315 1238.67,686.315 1239.23,686.315 1239.79,686.315 1240.35,686.315 1240.91,686.315 1241.47,686.315 1242.03,686.315 1242.59,686.315 1243.15,686.315 1243.71,686.315 1244.26,686.315 1244.82,686.315 1245.38,686.315 1245.94,686.315 1246.5,686.315 1247.06,686.315 1247.62,686.315 1248.18,686.315 1248.74,686.315 1249.3,686.315 1249.86,686.315 1250.42,686.315 1250.98,686.315 1251.54,686.315 1252.09,686.315 1252.65,686.315 1253.21,686.315 1253.77,686.315 1254.33,686.315 1254.89,686.315 1255.45,686.315 1256.01,686.315 1256.57,686.315 1257.13,686.315 1257.69,686.315 1258.25,686.315 1258.81,686.315 1259.36,686.315 1259.92,686.315 1260.48,686.315 1261.04,686.315 1261.6,686.315 1262.16,686.315 1262.72,686.315 1263.28,686.315 1263.84,686.315 1264.4,686.315 1264.96,686.315 1265.52,686.315 1266.08,686.315 1266.63,686.315 1267.19,686.315 1267.75,686.315 1268.31,686.315 1268.87,686.315 1269.43,686.315 1269.99,686.315 1270.55,686.315 1271.11,686.315 1271.67,686.315 1272.23,686.315 1272.79,686.315 1273.35,686.315 1273.91,686.315 1274.46,686.315 1275.02,686.315 1275.58,686.315 1276.14,686.315 1276.7,686.315 1277.26,686.315 1277.82,686.315 1278.38,686.315 1278.94,686.315 1279.5,686.315 1280.06,686.315 1280.62,686.315 1281.18,686.315 1281.73,686.315 1282.29,686.315 1282.85,686.315 1283.41,686.315 1283.97,686.315 1284.53,686.315 1285.09,686.315 1285.65,686.315 1286.21,686.315 1286.77,686.315 1287.33,686.315 1287.89,686.315 1288.45,686.315 1289,686.315 1289.56,686.315 1290.12,686.315 1290.68,686.315 1291.24,686.315 1291.8,686.315 1292.36,686.315 1292.92,686.315 1293.48,686.315 1294.04,686.315 1294.6,686.315 1295.16,686.315 1295.72,686.315 1296.28,686.315 1296.83,686.315 1297.39,686.315 1297.95,686.315 1298.51,686.315 1299.07,686.315 1299.63,686.315 1300.19,686.315 1300.75,686.315 1301.31,686.315 1301.87,686.315 1302.43,686.315 1302.99,686.315 1303.55,686.315 1304.1,686.315 1304.66,686.315 1305.22,686.315 1305.78,686.315 1306.34,686.315 1306.9,686.315 1307.46,686.315 1308.02,686.315 1308.58,686.315 1309.14,686.315 1309.7,686.315 1310.26,686.315 1310.82,686.315 1311.38,686.315 1311.93,686.315 1312.49,686.315 1313.05,686.315 1313.61,686.315 1314.17,686.315 1314.73,686.315 1315.29,686.315 1315.85,686.315 1316.41,686.315 1316.97,686.315 1317.53,686.315 1318.09,686.315 1318.65,686.315 1319.2,686.315 1319.76,686.315 1320.32,686.315 1320.88,686.315 1321.44,686.315 1322,686.315 1322.56,686.315 1323.12,686.315 1323.68,686.315 1324.24,686.315 1324.8,686.315 1325.36,686.315 1325.92,686.315 1326.47,686.315 1327.03,686.315 1327.59,686.315 1328.15,686.315 1328.71,686.315 1329.27,686.315 1329.83,686.315 1330.39,686.315 1330.95,686.315 1331.51,686.315 1332.07,686.315 1332.63,686.315 1333.19,686.315 1333.75,686.315 1334.3,686.315 1334.86,686.315 1335.42,686.315 1335.98,686.315 1336.54,686.315 1337.1,686.315 1337.66,686.315 1338.22,686.315 1338.78,686.315 1339.34,686.315 1339.9,686.315 1340.46,686.315 1341.02,686.315 1341.57,686.315 1342.13,686.315 1342.69,686.315 1343.25,686.315 1343.81,686.315 1344.37,686.315 1344.93,686.315 1345.49,686.315 1346.05,686.315 1346.61,686.315 1347.17,686.315 1347.73,686.315 1348.29,686.315 1348.84,686.315 1349.4,686.315 1349.96,686.315 1350.52,686.315 1351.08,686.315 1351.64,686.315 1352.2,686.315 1352.76,686.315 1353.32,686.315 1353.88,686.315 1354.44,686.315 1355,686.315 1355.56,686.315 1356.12,686.315 1356.67,686.315 1357.23,686.315 1357.79,686.315 1358.35,686.315 1358.91,686.315 1359.47,686.315 1360.03,686.315 1360.59,686.315 1361.15,686.315 1361.71,686.315 1362.27,686.315 1362.83,686.315 1363.39,686.315 1363.94,686.315 1364.5,686.315 1365.06,686.315 1365.62,686.315 1366.18,686.315 1366.74,686.315 1367.3,686.315 1367.86,686.315 1368.42,686.315 1368.98,686.315 1369.54,686.315 1370.1,686.315 1370.66,686.315 1371.21,686.315 1371.77,686.315 1372.33,686.315 1372.89,686.315 1373.45,686.315 1374.01,686.315 1374.57,686.315 1375.13,686.315 1375.69,686.315 1376.25,686.315 1376.81,686.315 1377.37,686.315 1377.93,686.315 1378.49,686.315 1379.04,686.315 1379.6,686.315 1380.16,686.315 1380.72,686.315 1381.28,686.315 1381.84,686.315 1382.4,686.315 1382.96,686.315 1383.52,686.315 1384.08,686.315 1384.64,686.315 1385.2,686.315 1385.76,686.315 1386.31,686.315 1386.87,686.315 1387.43,686.315 1387.99,686.315 1388.55,686.315 1389.11,686.315 1389.67,686.315 1390.23,686.315 1390.79,686.315 1391.35,686.315 1391.91,686.315 1392.47,686.315 1393.03,686.315 1393.58,686.315 1394.14,686.315 1394.7,686.315 1395.26,686.315 1395.82,686.315 1396.38,686.315 1396.94,686.315 1397.5,686.315 1398.06,686.315 1398.62,686.315 1399.18,686.315 1399.74,686.315 1400.3,686.315 1400.86,686.315 1401.41,686.315 1401.97,686.315 1402.53,686.315 1403.09,686.315 1403.65,686.315 1404.21,686.315 1404.77,686.315 1405.33,686.315 1405.89,686.315 1406.45,686.315 1407.01,686.315 1407.57,686.315 1408.13,686.315 1408.68,686.315 1409.24,686.315 1409.8,686.315 1410.36,686.315 1410.92,686.315 1411.48,686.315 1412.04,686.315 1412.6,686.315 1413.16,686.315 1413.72,686.315 1414.28,686.315 1414.84,686.315 1415.4,686.315 1415.95,686.315 1416.51,686.315 1417.07,686.315 1417.63,686.315 1418.19,686.315 1418.75,686.315 1419.31,686.315 1419.87,686.315 1420.43,686.315 1420.99,686.315 1421.55,686.315 1422.11,686.315 1422.67,686.315 1423.23,686.315 1423.78,686.315 1424.34,686.315 1424.9,686.315 1425.46,686.315 1426.02,686.315 1426.58,686.315 1427.14,686.315 1427.7,686.315 1428.26,686.315 1428.82,686.315 1429.38,686.315 1429.94,686.315 1430.5,686.315 1431.05,686.315 1431.61,686.315 1432.17,686.315 1432.73,686.315 1433.29,686.315 1433.85,686.315 1434.41,686.315 1434.97,686.315 1435.53,686.315 1436.09,686.315 1436.65,686.315 1437.21,686.315 1437.77,686.315 1438.33,686.315 1438.88,686.315 1439.44,686.315 1440,686.315 1440.56,686.315 1441.12,686.315 1441.68,686.315 1442.24,686.315 1442.8,686.315 1443.36,686.315 1443.92,686.315 1444.48,686.315 1445.04,686.315 1445.6,686.315 1446.15,686.315 1446.71,686.315 1447.27,686.315 1447.83,686.315 1448.39,686.315 1448.95,686.315 1449.51,686.315 1450.07,686.315 1450.63,686.315 1451.19,686.315 1451.75,686.315 1452.31,686.315 1452.87,686.315 1453.42,686.315 1453.98,686.315 1454.54,686.315 1455.1,686.315 1455.66,686.315 1456.22,686.315 1456.78,686.315 1457.34,686.315 1457.9,686.315 1458.46,686.315 1459.02,686.315 1459.58,686.315 1460.14,686.315 1460.7,686.315 1461.25,686.315 1461.81,686.315 1462.37,686.315 1462.93,686.315 1463.49,686.315 1464.05,686.315 1464.61,686.315 1465.17,686.315 1465.73,686.315 1466.29,686.315 1466.85,686.315 1467.41,686.315 1467.97,686.315 1468.52,686.315 1469.08,686.315 1469.64,686.315 1470.2,686.315 1470.76,686.315 1471.32,686.315 1471.88,686.315 1472.44,686.315 1473,686.315 1473.56,686.315 1474.12,686.315 1474.68,686.315 1475.24,686.315 1475.79,686.315 1476.35,686.315 1476.91,686.315 1477.47,686.315 1478.03,686.315 1478.59,686.315 1479.15,686.315 1479.71,686.315 1480.27,686.315 1480.83,686.315 1481.39,686.315 1481.95,686.315 1482.51,686.315 1483.07,686.315 1483.62,686.315 1484.18,686.315 1484.74,686.315 1485.3,686.315 1485.86,686.315 1486.42,686.315 1486.98,686.315 1487.54,686.315 1488.1,686.315 1488.66,686.315 1489.22,686.315 1489.78,686.315 1490.34,686.315 1490.89,686.315 1491.45,686.315 1492.01,686.315 1492.57,686.315 1493.13,686.315 1493.69,686.315 1494.25,686.315 1494.81,686.315 1495.37,686.315 1495.93,686.315 1496.49,686.315 1497.05,686.315 1497.61,686.315 1498.16,686.315 1498.72,686.315 1499.28,686.315 1499.84,686.315 1500.4,686.315 1500.96,686.315 1501.52,686.315 1502.08,686.315 1502.64,686.315 1503.2,686.315 1503.76,686.315 1504.32,686.315 1504.88,686.315 1505.44,686.315 1505.99,686.315 1506.55,686.315 1507.11,686.315 1507.67,686.315 1508.23,686.315 1508.79,686.315 1509.35,686.315 1509.91,686.315 1510.47,686.315 1511.03,686.315 1511.59,686.315 1512.15,686.315 1512.71,686.315 1513.26,686.315 1513.82,686.315 1514.38,686.315 1514.94,686.315 1515.5,686.315 1516.06,686.315 1516.62,686.315 1517.18,686.315 1517.74,686.315 1518.3,686.315 1518.86,686.315 1519.42,686.315 1519.98,686.315 1520.53,686.315 1521.09,686.315 1521.65,686.315 1522.21,686.315 1522.77,686.315 1523.33,686.315 1523.89,686.315 1524.45,686.315 1525.01,686.315 1525.57,686.315 1526.13,686.315 1526.69,686.315 1527.25,686.315 1527.81,686.315 1528.36,686.315 1528.92,686.315 1529.48,686.315 1530.04,686.315 1530.6,686.315 1531.16,686.315 1531.72,686.315 1532.28,686.315 1532.84,686.315 1533.4,686.315 1533.96,686.315 1534.52,686.315 1535.08,686.315 1535.63,686.315 1536.19,686.315 1536.75,686.315 1537.31,686.315 1537.87,686.315 1538.43,686.315 1538.99,686.315 1539.55,686.315 1540.11,686.315 1540.67,686.315 1541.23,686.315 1541.79,686.315 1542.35,686.315 1542.9,686.315 1543.46,686.315 1544.02,686.315 1544.58,686.315 1545.14,686.315 1545.7,686.315 1546.26,686.315 1546.82,686.315 1547.38,686.315 1547.94,686.315 1548.5,686.315 1549.06,686.315 1549.62,686.315 1550.18,686.315 1550.73,686.315 1551.29,686.315 1551.85,686.315 1552.41,686.315 1552.97,686.315 1553.53,686.315 1554.09,686.315 1554.65,686.315 1555.21,686.315 1555.77,686.315 1556.33,686.315 1556.89,686.315 1557.45,686.315 1558,686.315 1558.56,686.315 1559.12,686.315 1559.68,686.315 1560.24,686.315 1560.8,686.315 1561.36,686.315 1561.92,686.315 1562.48,686.315 1563.04,686.315 1563.6,686.315 1564.16,686.315 1564.72,686.315 1565.28,686.315 1565.83,686.315 1566.39,686.315 1566.95,686.315 1567.51,686.315 1568.07,686.315 1568.63,686.315 1569.19,686.315 1569.75,686.315 1570.31,686.315 1570.87,686.315 1571.43,686.315 1571.99,686.315 1572.55,686.315 1573.1,686.315 1573.66,686.315 1574.22,686.315 1574.78,686.315 1575.34,686.315 1575.9,686.315 1576.46,686.315 1577.02,686.315 1577.58,686.315 1578.14,686.315 1578.7,686.315 1579.26,686.315 1579.82,686.315 1580.37,686.315 1580.93,686.315 1581.49,686.315 1582.05,686.315 1582.61,686.315 1583.17,686.315 1583.73,686.315 1584.29,686.315 1584.85,686.315 1585.41,686.315 1585.97,686.315 1586.53,686.315 1587.09,686.315 1587.65,686.315 1588.2,686.315 1588.76,686.315 1589.32,686.315 1589.88,686.315 1590.44,686.315 1591,686.315 1591.56,686.315 1592.12,686.315 1592.68,686.315 1593.24,686.315 1593.8,686.315 1594.36,686.315 1594.92,686.315 1595.47,686.315 1596.03,686.315 1596.59,686.315 1597.15,686.315 1597.71,686.315 1598.27,686.315 1598.83,686.315 1599.39,686.315 1599.95,686.315 1600.51,686.315 1601.07,686.315 1601.63,686.315 1602.19,686.315 1602.74,686.315 1603.3,686.315 1603.86,686.315 1604.42,686.315 1604.98,686.315 1605.54,686.315 1606.1,686.315 1606.66,686.315 1607.22,686.315 1607.78,686.315 1608.34,686.315 1608.9,686.315 1609.46,686.315 1610.02,686.315 1610.57,686.315 1611.13,686.315 1611.69,686.315 1612.25,686.315 1612.81,686.315 1613.37,686.315 1613.93,686.315 1614.49,686.315 1615.05,686.315 1615.61,686.315 1616.17,686.315 1616.73,686.315 1617.29,686.315 1617.84,686.315 1618.4,686.315 1618.96,686.315 1619.52,686.315 1620.08,686.315 1620.64,686.315 1621.2,686.315 1621.76,686.315 1622.32,686.315 1622.88,686.315 1623.44,686.315 1624,686.315 1624.56,686.315 1625.11,686.315 1625.67,686.315 1626.23,686.315 1626.79,686.315 1627.35,686.315 1627.91,686.315 1628.47,686.315 1629.03,686.315 1629.59,686.315 1630.15,686.315 1630.71,686.315 1631.27,686.315 1631.83,686.315 1632.39,686.315 1632.94,686.315 1633.5,686.315 1634.06,686.315 1634.62,686.315 1635.18,686.315 1635.74,686.315 1636.3,686.315 1636.86,686.315 1637.42,686.315 1637.98,686.315 1638.54,686.315 1639.1,686.315 1639.66,686.315 1640.21,686.315 1640.77,686.315 1641.33,686.315 1641.89,686.315 1642.45,686.315 1643.01,686.315 1643.57,686.315 1644.13,686.315 1644.69,686.315 1645.25,686.315 1645.81,686.315 1646.37,686.315 1646.93,686.315 1647.48,686.315 1648.04,686.315 1648.6,686.315 1649.16,686.315 1649.72,686.315 1650.28,686.315 1650.84,686.315 1651.4,686.315 1651.96,686.315 1652.52,686.315 1653.08,686.315 1653.64,686.315 1654.2,686.315 1654.76,686.315 1655.31,686.315 1655.87,686.315 1656.43,686.315 1656.99,686.315 1657.55,686.315 1658.11,686.315 1658.67,686.315 1659.23,686.315 1659.79,686.315 1660.35,686.315 1660.91,686.315 1661.47,686.315 1662.03,686.315 1662.58,686.315 1663.14,686.315 1663.7,686.315 1664.26,686.315 1664.82,686.315 1665.38,686.315 1665.94,686.315 1666.5,686.315 1667.06,686.315 1667.62,686.315 1668.18,686.315 1668.74,686.315 1669.3,686.315 1669.85,686.315 1670.41,686.315 1670.97,686.315 1671.53,686.315 1672.09,686.315 1672.65,686.315 1673.21,686.315 1673.77,686.315 1674.33,686.315 1674.89,686.315 1675.45,686.315 1676.01,686.315 1676.57,686.315 1677.13,686.315 1677.68,686.315 1678.24,686.315 1678.8,686.315 1679.36,686.315 1679.92,686.315 1680.48,686.315 1681.04,686.315 1681.6,686.315 1682.16,686.315 1682.72,686.315 1683.28,686.315 1683.84,686.315 1684.4,686.315 1684.95,686.315 1685.51,686.315 1686.07,686.315 1686.63,686.315 1687.19,686.315 1687.75,686.315 1688.31,686.315 1688.87,686.315 1689.43,686.315 1689.99,686.315 1690.55,686.315 1691.11,686.315 1691.67,686.315 1692.23,686.315 1692.78,686.315 1693.34,686.315 1693.9,686.315 1694.46,686.315 1695.02,686.315 1695.58,686.315 1696.14,686.315 1696.7,686.315 1697.26,686.315 1697.82,686.315 1698.38,686.315 1698.94,686.315 1699.5,686.315 1700.05,686.315 1700.61,686.315 1701.17,686.315 1701.73,686.315 1702.29,686.315 1702.85,686.315 1703.41,686.315 1703.97,686.315 1704.53,686.315 1705.09,686.315 1705.65,686.315 1706.21,686.315 1706.77,686.315 1707.32,686.315 1707.88,686.315 1708.44,686.315 1709,686.315 1709.56,686.315 1710.12,686.315 1710.68,686.315 1711.24,686.315 1711.8,686.315 1712.36,686.315 1712.92,686.315 1713.48,686.315 1714.04,686.315 1714.6,686.315 1715.15,686.315 1715.71,686.315 1716.27,686.315 1716.83,686.315 1717.39,686.315 1717.95,686.315 1718.51,686.315 1719.07,686.315 1719.63,686.315 1720.19,686.315 1720.75,686.315 1721.31,686.315 1721.87,686.315 1722.42,686.315 1722.98,686.315 1723.54,686.315 1724.1,686.315 1724.66,686.315 1725.22,686.315 1725.78,686.315 1726.34,686.315 1726.9,686.315 1727.46,686.315 1728.02,686.315 1728.58,686.315 1729.14,686.315 1729.69,686.315 1730.25,686.315 1730.81,686.315 1731.37,686.315 1731.93,686.315 1732.49,686.315 1733.05,686.315 1733.61,686.315 1734.17,686.315 1734.73,686.315 1735.29,686.315 1735.85,686.315 1736.41,686.315 1736.97,686.315 1737.52,686.315 1738.08,686.315 1738.64,686.315 1739.2,686.315 1739.76,686.315 1740.32,686.315 1740.88,686.315 1741.44,686.315 1742,686.315 1742.56,686.315 1743.12,686.315 1743.68,686.315 1744.24,686.315 1744.79,686.315 1745.35,686.315 1745.91,686.315 1746.47,686.315 1747.03,686.315 1747.59,686.315 1748.15,686.315 1748.71,686.315 1749.27,686.315 1749.83,686.315 1750.39,686.315 1750.95,686.315 1751.51,686.315 1752.06,686.315 1752.62,686.315 1753.18,686.315 1753.74,686.315 1754.3,686.315 1754.86,686.315 1755.42,686.315 1755.98,686.315 1756.54,686.315 1757.1,686.315 1757.66,686.315 1758.22,686.315 1758.78,686.315 1759.34,686.315 1759.89,686.315 1760.45,686.315 1761.01,686.315 1761.57,686.315 1762.13,686.315 1762.69,686.315 1763.25,686.315 1763.81,686.315 1764.37,686.315 1764.93,686.315 1765.49,686.315 1766.05,686.315 1766.61,686.315 1767.16,686.315 1767.72,686.315 1768.28,686.315 1768.84,686.315 1769.4,686.315 1769.96,686.315 1770.52,686.315 1771.08,686.315 1771.64,686.315 1772.2,686.315 1772.76,686.315 1773.32,686.315 1773.88,686.315 1774.43,686.315 1774.99,686.315 1775.55,686.315 1776.11,686.315 1776.67,686.315 1777.23,686.315 1777.79,686.315 1778.35,686.315 1778.91,686.315 1779.47,686.315 1780.03,686.315 1780.59,686.315 1781.15,686.315 1781.71,686.315 1782.26,686.315 1782.82,686.315 1783.38,686.315 1783.94,686.315 1784.5,686.315 1785.06,686.315 1785.62,686.315 1786.18,686.315 1786.74,686.315 1787.3,686.315 1787.86,686.315 1788.42,686.315 1788.98,686.315 1789.53,686.315 1790.09,686.315 1790.65,686.315 1791.21,686.315 1791.77,686.315 1792.33,686.315 1792.89,686.315 1793.45,686.315 1794.01,686.315 1794.57,686.315 1795.13,686.315 1795.69,686.315 1796.25,686.315 1796.8,686.315 1797.36,686.315 1797.92,686.315 1798.48,686.315 1799.04,686.315 1799.6,686.315 1800.16,686.315 1800.72,686.315 1801.28,686.315 1801.84,686.315 1802.4,686.315 1802.96,686.315 1803.52,686.315 1804.08,686.315 1804.63,686.315 1805.19,686.315 1805.75,686.315 1806.31,686.315 1806.87,686.315 1807.43,686.315 1807.99,686.315 1808.55,686.315 1809.11,686.315 1809.67,686.315 1810.23,686.315 1810.79,686.315 1811.35,686.315 1811.9,686.315 1812.46,686.315 1813.02,686.315 1813.58,686.315 1814.14,686.315 1814.7,686.315 1815.26,686.315 1815.82,686.315 1816.38,686.315 1816.94,686.315 1817.5,686.315 1818.06,686.315 1818.62,686.315 1819.18,686.315 1819.73,686.315 1820.29,686.315 1820.85,686.315 1821.41,686.315 1821.97,686.315 1822.53,686.315 1823.09,686.315 1823.65,686.315 1824.21,686.315 1824.77,686.315 1825.33,686.315 1825.89,686.315 1826.45,686.315 1827,686.315 1827.56,686.315 1828.12,686.315 1828.68,686.315 1829.24,686.315 1829.8,686.315 1830.36,686.315 1830.92,686.315 1831.48,686.315 1832.04,686.315 1832.6,686.315 1833.16,686.315 1833.72,686.315 1834.27,686.315 1834.83,686.315 1835.39,686.315 1835.95,686.315 1836.51,686.315 1837.07,686.315 1837.63,686.315 1838.19,686.315 \"/>\n<path clip-path=\"url(#clip223)\" d=\"M720.247 684.787 L720.806 684.787 L721.365 684.787 L721.924 684.787 L722.484 684.787 L723.043 684.787 L723.602 684.787 L724.161 684.787 L724.721 684.787 L725.28 684.787 L725.839 684.787 L726.398 684.787 L726.958 684.787 L727.517 684.787 L728.076 684.787 L728.635 684.787 L729.195 684.787 L729.754 684.787 L730.313 684.787 L730.872 684.787 L731.432 684.787 L731.991 684.787 L732.55 684.787 L733.109 684.787 L733.669 684.787 L734.228 684.787 L734.787 684.787 L735.346 684.787 L735.906 684.787 L736.465 684.787 L737.024 684.787 L737.583 684.787 L738.143 684.787 L738.702 684.787 L739.261 684.787 L739.82 684.787 L740.38 684.787 L740.939 684.787 L741.498 684.787 L742.057 684.787 L742.617 684.787 L743.176 684.787 L743.735 684.787 L744.294 684.787 L744.854 684.787 L745.413 684.787 L745.972 684.787 L746.531 684.787 L747.091 684.787 L747.65 684.787 L748.209 684.787 L748.768 684.787 L749.328 684.787 L749.887 684.787 L750.446 684.787 L751.005 684.787 L751.565 684.787 L752.124 684.787 L752.683 684.787 L753.242 684.787 L753.802 684.787 L754.361 684.787 L754.92 684.787 L755.479 684.787 L756.039 684.787 L756.598 684.787 L757.157 684.787 L757.716 684.787 L758.276 684.787 L758.835 684.787 L759.394 684.787 L759.953 684.787 L760.513 684.787 L761.072 684.787 L761.631 684.787 L762.19 684.787 L762.75 684.787 L763.309 684.787 L763.868 684.787 L764.427 684.787 L764.987 684.787 L765.546 684.787 L766.105 684.787 L766.664 684.787 L767.224 684.787 L767.783 684.787 L768.342 684.787 L768.901 684.787 L769.461 684.787 L770.02 684.787 L770.579 684.787 L771.138 684.787 L771.698 684.787 L772.257 684.787 L772.816 684.787 L773.375 684.787 L773.935 684.787 L774.494 684.787 L775.053 684.787 L775.612 684.787 L776.172 684.787 L776.731 684.787 L777.29 684.787 L777.849 684.787 L778.409 684.787 L778.968 684.787 L779.527 684.787 L780.086 684.787 L780.646 684.787 L781.205 684.787 L781.764 684.787 L782.323 684.787 L782.883 684.787 L783.442 684.787 L784.001 684.787 L784.56 684.787 L785.12 684.787 L785.679 684.787 L786.238 684.787 L786.797 684.787 L787.357 684.787 L787.916 684.787 L788.475 684.787 L789.034 684.787 L789.594 684.787 L790.153 684.787 L790.712 684.787 L791.271 684.787 L791.831 684.787 L792.39 684.787 L792.949 684.787 L793.508 684.787 L794.068 684.787 L794.627 684.787 L795.186 684.787 L795.745 684.787 L796.305 684.787 L796.864 684.787 L797.423 684.787 L797.982 684.787 L798.542 684.787 L799.101 684.787 L799.66 684.787 L800.219 684.787 L800.779 684.787 L801.338 684.787 L801.897 684.787 L802.456 684.787 L803.016 684.787 L803.575 684.787 L804.134 684.787 L804.693 684.787 L805.253 684.787 L805.812 684.787 L806.371 684.787 L806.931 684.787 L807.49 684.787 L808.049 684.787 L808.608 684.787 L809.168 684.787 L809.727 684.787 L810.286 684.787 L810.845 684.787 L811.405 684.787 L811.964 684.787 L812.523 684.787 L813.082 684.787 L813.642 684.787 L814.201 684.787 L814.76 684.787 L815.319 684.787 L815.879 684.787 L816.438 684.787 L816.997 684.787 L817.556 684.787 L818.116 684.787 L818.675 684.787 L819.234 684.787 L819.793 684.787 L820.353 684.787 L820.912 684.787 L821.471 684.787 L822.03 684.787 L822.59 684.787 L823.149 684.787 L823.708 684.787 L824.267 684.787 L824.827 684.787 L825.386 684.787 L825.945 684.787 L826.504 684.787 L827.064 684.787 L827.623 684.787 L828.182 684.787 L828.741 684.787 L829.301 684.787 L829.86 684.787 L830.419 684.787 L830.978 684.787 L831.538 684.787 L832.097 684.787 L832.656 684.787 L833.215 684.787 L833.775 684.787 L834.334 684.787 L834.893 684.787 L835.452 684.787 L836.012 684.787 L836.571 684.787 L837.13 684.787 L837.689 684.787 L838.249 684.787 L838.808 684.787 L839.367 684.787 L839.926 684.787 L840.486 684.787 L841.045 684.787 L841.604 684.787 L842.163 684.787 L842.723 684.787 L843.282 684.787 L843.841 684.787 L844.4 684.787 L844.96 684.787 L845.519 684.787 L846.078 684.787 L846.637 684.787 L847.197 684.787 L847.756 684.787 L848.315 684.787 L848.874 684.787 L849.434 684.787 L849.993 684.787 L850.552 684.787 L851.111 684.787 L851.671 684.787 L852.23 684.787 L852.789 684.787 L853.348 684.787 L853.908 684.787 L854.467 684.787 L855.026 684.787 L855.585 684.787 L856.145 684.787 L856.704 684.787 L857.263 684.787 L857.822 684.787 L858.382 684.787 L858.941 684.787 L859.5 684.787 L860.059 684.787 L860.619 684.787 L861.178 684.787 L861.737 684.787 L862.296 684.787 L862.856 684.787 L863.415 684.787 L863.974 684.787 L864.533 684.787 L865.093 684.787 L865.652 684.787 L866.211 684.787 L866.77 684.787 L867.33 684.787 L867.889 684.787 L868.448 684.787 L869.007 684.787 L869.567 684.787 L870.126 684.787 L870.685 684.787 L871.244 684.787 L871.804 684.787 L872.363 684.787 L872.922 684.787 L873.481 684.787 L874.041 684.787 L874.6 684.787 L875.159 684.787 L875.718 684.787 L876.278 684.787 L876.837 684.787 L877.396 684.787 L877.955 684.787 L878.515 684.787 L879.074 684.787 L879.633 684.787 L880.192 684.787 L880.752 684.787 L881.311 684.787 L881.87 684.787 L882.429 684.787 L882.989 684.787 L883.548 684.787 L884.107 684.787 L884.666 684.787 L885.226 684.787 L885.785 684.787 L886.344 684.787 L886.903 684.787 L887.463 684.787 L888.022 684.787 L888.581 684.787 L889.14 684.787 L889.7 684.787 L890.259 684.787 L890.818 684.787 L891.377 684.787 L891.937 684.787 L892.496 684.787 L893.055 684.787 L893.614 684.787 L894.174 684.787 L894.733 684.787 L895.292 684.787 L895.851 684.787 L896.411 684.787 L896.97 684.787 L897.529 684.787 L898.088 684.787 L898.648 684.787 L899.207 684.787 L899.766 684.787 L900.325 684.787 L900.885 684.787 L901.444 684.787 L902.003 684.787 L902.562 684.787 L903.122 684.787 L903.681 684.787 L904.24 684.787 L904.799 684.787 L905.359 684.787 L905.918 684.787 L906.477 684.787 L907.036 684.787 L907.596 684.787 L908.155 684.787 L908.714 684.787 L909.273 684.787 L909.833 684.787 L910.392 684.787 L910.951 684.787 L911.51 684.787 L912.07 684.787 L912.629 684.787 L913.188 684.787 L913.747 684.787 L914.307 684.787 L914.866 684.787 L915.425 684.787 L915.984 684.787 L916.544 684.787 L917.103 684.787 L917.662 684.787 L918.221 684.787 L918.781 684.787 L919.34 684.787 L919.899 684.787 L920.458 684.787 L921.018 684.787 L921.577 684.787 L922.136 684.787 L922.695 684.787 L923.255 684.787 L923.814 684.787 L924.373 684.787 L924.932 684.787 L925.492 684.787 L926.051 684.787 L926.61 684.787 L927.169 684.787 L927.729 684.787 L928.288 684.787 L928.847 684.787 L929.406 684.787 L929.966 684.787 L930.525 684.787 L931.084 684.787 L931.644 684.787 L932.203 684.787 L932.762 684.787 L933.321 684.787 L933.881 684.787 L934.44 684.787 L934.999 684.787 L935.558 684.787 L936.118 684.787 L936.677 684.787 L937.236 684.787 L937.795 684.787 L938.355 684.787 L938.914 684.787 L939.473 684.787 L940.032 684.787 L940.592 684.787 L941.151 684.787 L941.71 684.787 L942.269 684.787 L942.829 684.787 L943.388 684.787 L943.947 684.787 L944.506 684.787 L945.066 684.787 L945.625 684.787 L946.184 684.787 L946.743 684.787 L947.303 684.787 L947.862 684.787 L948.421 684.787 L948.98 684.787 L949.54 684.787 L950.099 684.787 L950.658 684.787 L951.217 684.787 L951.777 684.787 L952.336 684.787 L952.895 684.787 L953.454 684.787 L954.014 684.787 L954.573 684.787 L955.132 684.787 L955.691 684.787 L956.251 684.787 L956.81 684.787 L957.369 684.787 L957.928 684.787 L958.488 684.787 L959.047 684.787 L959.606 684.787 L960.165 684.787 L960.725 684.787 L961.284 684.787 L961.843 684.787 L962.402 684.787 L962.962 684.787 L963.521 684.787 L964.08 684.787 L964.639 684.787 L965.199 684.787 L965.758 684.787 L966.317 684.787 L966.876 684.787 L967.436 684.787 L967.995 684.787 L968.554 684.787 L969.113 684.787 L969.673 684.787 L970.232 684.787 L970.791 684.787 L971.35 684.787 L971.91 684.787 L972.469 684.787 L973.028 684.787 L973.587 684.787 L974.147 684.787 L974.706 684.787 L975.265 684.787 L975.824 684.787 L976.384 684.787 L976.943 684.787 L977.502 684.787 L978.061 684.787 L978.621 684.787 L979.18 684.787 L979.739 684.787 L980.298 684.787 L980.858 684.787 L981.417 684.787 L981.976 684.787 L982.535 684.787 L983.095 684.787 L983.654 684.787 L984.213 684.787 L984.772 684.787 L985.332 684.787 L985.891 684.787 L986.45 684.787 L987.009 684.787 L987.569 684.787 L988.128 684.787 L988.687 684.787 L989.246 684.787 L989.806 684.787 L990.365 684.787 L990.924 684.787 L991.483 684.787 L992.043 684.787 L992.602 684.787 L993.161 684.787 L993.72 684.787 L994.28 684.787 L994.839 684.787 L995.398 684.787 L995.957 684.787 L996.517 684.787 L997.076 684.787 L997.635 684.787 L998.194 684.787 L998.754 684.787 L999.313 684.787 L999.872 684.787 L1000.43 684.787 L1000.99 684.787 L1001.55 684.787 L1002.11 684.787 L1002.67 684.787 L1003.23 684.787 L1003.79 684.787 L1004.35 684.787 L1004.91 684.787 L1005.46 684.787 L1006.02 684.787 L1006.58 684.787 L1007.14 684.787 L1007.7 684.787 L1008.26 684.787 L1008.82 684.787 L1009.38 684.787 L1009.94 684.787 L1010.5 684.787 L1011.06 684.787 L1011.62 684.787 L1012.18 684.787 L1012.73 684.787 L1013.29 684.787 L1013.85 684.787 L1014.41 684.787 L1014.97 684.787 L1015.53 684.787 L1016.09 684.787 L1016.65 684.787 L1017.21 684.787 L1017.77 684.787 L1018.33 684.787 L1018.89 684.787 L1019.45 684.787 L1020.01 684.787 L1020.56 684.787 L1021.12 684.787 L1021.68 684.787 L1022.24 684.787 L1022.8 684.787 L1023.36 684.787 L1023.92 684.787 L1024.48 684.787 L1025.04 684.787 L1025.6 684.787 L1026.16 684.787 L1026.72 684.787 L1027.28 684.787 L1027.83 684.787 L1028.39 684.787 L1028.95 684.787 L1029.51 684.787 L1030.07 684.787 L1030.63 684.787 L1031.19 684.787 L1031.75 684.787 L1032.31 684.787 L1032.87 684.787 L1033.43 684.787 L1033.99 684.787 L1034.55 684.787 L1035.1 684.787 L1035.66 684.787 L1036.22 684.787 L1036.78 684.787 L1037.34 684.787 L1037.9 684.787 L1038.46 684.787 L1039.02 684.787 L1039.58 684.787 L1040.14 684.787 L1040.7 684.787 L1041.26 684.787 L1041.82 684.787 L1042.38 684.787 L1042.93 684.787 L1043.49 684.787 L1044.05 684.787 L1044.61 684.787 L1045.17 684.787 L1045.73 684.787 L1046.29 684.787 L1046.85 684.787 L1047.41 684.787 L1047.97 684.787 L1048.53 684.787 L1049.09 684.787 L1049.65 684.787 L1050.2 684.787 L1050.76 684.787 L1051.32 684.787 L1051.88 684.787 L1052.44 684.787 L1053 684.787 L1053.56 684.787 L1054.12 684.787 L1054.68 684.787 L1055.24 684.787 L1055.8 684.787 L1056.36 684.787 L1056.92 684.787 L1057.48 684.787 L1058.03 684.787 L1058.59 684.787 L1059.15 684.787 L1059.71 684.787 L1060.27 684.787 L1060.83 684.787 L1061.39 684.787 L1061.95 684.787 L1062.51 684.787 L1063.07 684.787 L1063.63 684.787 L1064.19 684.787 L1064.75 684.787 L1065.3 684.787 L1065.86 684.787 L1066.42 684.787 L1066.98 684.787 L1067.54 684.787 L1068.1 684.787 L1068.66 684.787 L1069.22 684.787 L1069.78 684.787 L1070.34 684.787 L1070.9 684.787 L1071.46 684.787 L1072.02 684.787 L1072.57 684.787 L1073.13 684.787 L1073.69 684.787 L1074.25 684.787 L1074.81 684.787 L1075.37 684.787 L1075.93 684.787 L1076.49 684.787 L1077.05 684.787 L1077.61 684.787 L1078.17 684.787 L1078.73 684.787 L1079.29 684.787 L1079.85 684.787 L1080.4 684.787 L1080.96 684.787 L1081.52 684.787 L1082.08 684.787 L1082.64 684.787 L1083.2 684.787 L1083.76 684.787 L1084.32 684.787 L1084.88 684.787 L1085.44 684.787 L1086 684.787 L1086.56 684.787 L1087.12 684.787 L1087.67 684.787 L1088.23 684.787 L1088.79 684.787 L1089.35 684.787 L1089.91 684.787 L1090.47 684.787 L1091.03 684.787 L1091.59 684.787 L1092.15 684.787 L1092.71 684.787 L1093.27 684.787 L1093.83 684.787 L1094.39 684.787 L1094.94 684.787 L1095.5 684.787 L1096.06 684.787 L1096.62 684.787 L1097.18 684.787 L1097.74 684.787 L1098.3 684.787 L1098.86 684.787 L1099.42 684.787 L1099.98 684.787 L1100.54 684.787 L1101.1 684.787 L1101.66 684.787 L1102.22 684.787 L1102.77 684.787 L1103.33 684.787 L1103.89 684.787 L1104.45 684.787 L1105.01 684.787 L1105.57 684.787 L1106.13 684.787 L1106.69 684.787 L1107.25 684.787 L1107.81 684.787 L1108.37 684.787 L1108.93 684.787 L1109.49 684.787 L1110.04 684.787 L1110.6 684.787 L1111.16 684.787 L1111.72 684.787 L1112.28 684.787 L1112.84 684.787 L1113.4 684.787 L1113.96 684.787 L1114.52 684.787 L1115.08 684.787 L1115.64 684.787 L1116.2 684.787 L1116.76 684.787 L1117.31 684.787 L1117.87 684.787 L1118.43 684.787 L1118.99 684.787 L1119.55 684.787 L1120.11 684.787 L1120.67 684.787 L1121.23 684.787 L1121.79 684.787 L1122.35 684.787 L1122.91 684.787 L1123.47 684.787 L1124.03 684.787 L1124.59 684.787 L1125.14 684.787 L1125.7 684.787 L1126.26 684.787 L1126.82 684.787 L1127.38 684.787 L1127.94 684.787 L1128.5 684.787 L1129.06 684.787 L1129.62 684.787 L1130.18 684.787 L1130.74 684.787 L1131.3 684.787 L1131.86 684.787 L1132.41 684.787 L1132.97 684.787 L1133.53 684.787 L1134.09 684.787 L1134.65 684.787 L1135.21 684.787 L1135.77 684.787 L1136.33 684.787 L1136.89 684.787 L1137.45 684.787 L1138.01 684.787 L1138.57 684.787 L1139.13 684.787 L1139.68 684.787 L1140.24 684.787 L1140.8 684.787 L1141.36 684.787 L1141.92 684.787 L1142.48 684.787 L1143.04 684.787 L1143.6 684.787 L1144.16 684.787 L1144.72 684.787 L1145.28 684.787 L1145.84 684.787 L1146.4 684.787 L1146.96 684.787 L1147.51 684.787 L1148.07 684.787 L1148.63 684.787 L1149.19 684.787 L1149.75 684.787 L1150.31 684.787 L1150.87 684.787 L1151.43 684.787 L1151.99 684.787 L1152.55 684.787 L1153.11 684.787 L1153.67 684.787 L1154.23 684.787 L1154.78 684.787 L1155.34 684.787 L1155.9 684.787 L1156.46 684.787 L1157.02 684.787 L1157.58 684.787 L1158.14 684.787 L1158.7 684.787 L1159.26 684.787 L1159.82 684.787 L1160.38 684.787 L1160.94 684.787 L1161.5 684.787 L1162.05 684.787 L1162.61 684.787 L1163.17 684.787 L1163.73 684.787 L1164.29 684.787 L1164.85 684.787 L1165.41 684.787 L1165.97 684.787 L1166.53 684.787 L1167.09 684.787 L1167.65 684.787 L1168.21 684.787 L1168.77 684.787 L1169.33 684.787 L1169.88 684.787 L1170.44 684.787 L1171 684.787 L1171.56 684.787 L1172.12 684.787 L1172.68 684.787 L1173.24 684.787 L1173.8 684.787 L1174.36 684.787 L1174.92 684.787 L1175.48 684.787 L1176.04 684.787 L1176.6 684.787 L1177.15 684.787 L1177.71 684.787 L1178.27 684.787 L1178.83 684.787 L1179.39 684.787 L1179.95 684.787 L1180.51 684.787 L1181.07 684.787 L1181.63 684.787 L1182.19 684.787 L1182.75 684.787 L1183.31 684.787 L1183.87 684.787 L1184.43 684.787 L1184.98 684.787 L1185.54 684.787 L1186.1 684.787 L1186.66 684.787 L1187.22 684.787 L1187.78 684.787 L1188.34 684.787 L1188.9 684.787 L1189.46 684.787 L1190.02 684.787 L1190.58 684.787 L1191.14 684.787 L1191.7 684.787 L1192.25 684.787 L1192.81 684.787 L1193.37 684.787 L1193.93 684.787 L1194.49 684.787 L1195.05 684.787 L1195.61 684.787 L1196.17 684.787 L1196.73 684.787 L1197.29 684.787 L1197.85 684.787 L1198.41 684.787 L1198.97 684.787 L1199.52 684.787 L1200.08 684.787 L1200.64 684.787 L1201.2 684.787 L1201.76 684.787 L1202.32 684.787 L1202.88 684.787 L1203.44 684.787 L1204 684.787 L1204.56 684.787 L1205.12 684.787 L1205.68 684.787 L1206.24 684.787 L1206.8 684.787 L1207.35 684.787 L1207.91 684.787 L1208.47 684.787 L1209.03 684.787 L1209.59 684.787 L1210.15 684.787 L1210.71 684.787 L1211.27 684.787 L1211.83 684.787 L1212.39 684.787 L1212.95 684.787 L1213.51 684.787 L1214.07 684.787 L1214.62 684.787 L1215.18 684.787 L1215.74 684.787 L1216.3 684.787 L1216.86 684.787 L1217.42 684.787 L1217.98 684.787 L1218.54 684.787 L1219.1 684.787 L1219.66 684.787 L1220.22 684.787 L1220.78 684.787 L1221.34 684.787 L1221.89 684.787 L1222.45 684.787 L1223.01 684.787 L1223.57 684.787 L1224.13 684.787 L1224.69 684.787 L1225.25 684.787 L1225.81 684.787 L1226.37 684.787 L1226.93 684.787 L1227.49 684.787 L1228.05 684.787 L1228.61 684.787 L1229.17 684.787 L1229.72 684.787 L1230.28 684.787 L1230.84 684.787 L1231.4 684.787 L1231.96 684.787 L1232.52 684.787 L1233.08 684.787 L1233.64 684.787 L1234.2 684.787 L1234.76 684.787 L1235.32 684.787 L1235.88 684.787 L1236.44 684.787 L1236.99 684.787 L1237.55 684.787 L1238.11 684.787 L1238.67 684.787 L1239.23 684.787 L1239.79 684.787 L1240.35 684.787 L1240.91 684.787 L1241.47 684.787 L1242.03 684.787 L1242.59 684.787 L1243.15 684.787 L1243.71 684.787 L1244.26 684.787 L1244.82 684.787 L1245.38 684.787 L1245.94 684.787 L1246.5 684.787 L1247.06 684.787 L1247.62 684.787 L1248.18 684.787 L1248.74 684.787 L1249.3 684.787 L1249.86 684.787 L1250.42 684.787 L1250.98 684.787 L1251.54 684.787 L1252.09 684.787 L1252.65 684.787 L1253.21 684.787 L1253.77 684.787 L1254.33 684.787 L1254.89 684.787 L1255.45 684.787 L1256.01 684.787 L1256.57 684.787 L1257.13 684.787 L1257.69 684.787 L1258.25 684.787 L1258.81 684.787 L1259.36 684.787 L1259.92 684.787 L1260.48 684.787 L1261.04 684.787 L1261.6 684.787 L1262.16 684.787 L1262.72 684.787 L1263.28 684.787 L1263.84 684.787 L1264.4 684.787 L1264.96 684.787 L1265.52 684.787 L1266.08 684.787 L1266.63 684.787 L1267.19 684.787 L1267.75 684.787 L1268.31 684.787 L1268.87 684.787 L1269.43 684.787 L1269.99 684.787 L1270.55 684.787 L1271.11 684.787 L1271.67 684.787 L1272.23 684.787 L1272.79 684.787 L1273.35 684.787 L1273.91 684.787 L1274.46 684.787 L1275.02 684.787 L1275.58 684.787 L1276.14 684.787 L1276.7 684.787 L1277.26 684.787 L1277.82 684.787 L1278.38 684.787 L1278.94 684.787 L1279.5 684.787 L1280.06 684.787 L1280.62 684.787 L1281.18 684.787 L1281.73 684.787 L1282.29 684.787 L1282.85 684.787 L1283.41 684.787 L1283.97 684.787 L1284.53 684.787 L1285.09 684.787 L1285.65 684.787 L1286.21 684.787 L1286.77 684.787 L1287.33 684.787 L1287.89 684.787 L1288.45 684.787 L1289 684.787 L1289.56 684.787 L1290.12 684.787 L1290.68 684.787 L1291.24 684.787 L1291.8 684.787 L1292.36 684.787 L1292.92 684.787 L1293.48 684.787 L1294.04 684.787 L1294.6 684.787 L1295.16 684.787 L1295.72 684.787 L1296.28 684.787 L1296.83 684.787 L1297.39 684.787 L1297.95 684.787 L1298.51 684.787 L1299.07 684.787 L1299.63 684.787 L1300.19 684.787 L1300.75 684.787 L1301.31 684.787 L1301.87 684.787 L1302.43 684.787 L1302.99 684.787 L1303.55 684.787 L1304.1 684.787 L1304.66 684.787 L1305.22 684.787 L1305.78 684.787 L1306.34 684.787 L1306.9 684.787 L1307.46 684.787 L1308.02 684.787 L1308.58 684.787 L1309.14 684.787 L1309.7 684.787 L1310.26 684.787 L1310.82 684.787 L1311.38 684.787 L1311.93 684.787 L1312.49 684.787 L1313.05 684.787 L1313.61 684.787 L1314.17 684.787 L1314.73 684.787 L1315.29 684.787 L1315.85 684.787 L1316.41 684.787 L1316.97 684.787 L1317.53 684.787 L1318.09 684.787 L1318.65 684.787 L1319.2 684.787 L1319.76 684.787 L1320.32 684.787 L1320.88 684.787 L1321.44 684.787 L1322 684.787 L1322.56 684.787 L1323.12 684.787 L1323.68 684.787 L1324.24 684.787 L1324.8 684.787 L1325.36 684.787 L1325.92 684.787 L1326.47 684.787 L1327.03 684.787 L1327.59 684.787 L1328.15 684.787 L1328.71 684.787 L1329.27 684.787 L1329.83 684.787 L1330.39 684.787 L1330.95 684.787 L1331.51 684.787 L1332.07 684.787 L1332.63 684.787 L1333.19 684.787 L1333.75 684.787 L1334.3 684.787 L1334.86 684.787 L1335.42 684.787 L1335.98 684.787 L1336.54 684.787 L1337.1 684.787 L1337.66 684.787 L1338.22 684.787 L1338.78 684.787 L1339.34 684.787 L1339.9 684.787 L1340.46 684.787 L1341.02 684.787 L1341.57 684.787 L1342.13 684.787 L1342.69 684.787 L1343.25 684.787 L1343.81 684.787 L1344.37 684.787 L1344.93 684.787 L1345.49 684.787 L1346.05 684.787 L1346.61 684.787 L1347.17 684.787 L1347.73 684.787 L1348.29 684.787 L1348.84 684.787 L1349.4 684.787 L1349.96 684.787 L1350.52 684.787 L1351.08 684.787 L1351.64 684.787 L1352.2 684.787 L1352.76 684.787 L1353.32 684.787 L1353.88 684.787 L1354.44 684.787 L1355 684.787 L1355.56 684.787 L1356.12 684.787 L1356.67 684.787 L1357.23 684.787 L1357.79 684.787 L1358.35 684.787 L1358.91 684.787 L1359.47 684.787 L1360.03 684.787 L1360.59 684.787 L1361.15 684.787 L1361.71 684.787 L1362.27 684.787 L1362.83 684.787 L1363.39 684.787 L1363.94 684.787 L1364.5 684.787 L1365.06 684.787 L1365.62 684.787 L1366.18 684.787 L1366.74 684.787 L1367.3 684.787 L1367.86 684.787 L1368.42 684.787 L1368.98 684.787 L1369.54 684.787 L1370.1 684.787 L1370.66 684.787 L1371.21 684.787 L1371.77 684.787 L1372.33 684.787 L1372.89 684.787 L1373.45 684.787 L1374.01 684.787 L1374.57 684.787 L1375.13 684.787 L1375.69 684.787 L1376.25 684.787 L1376.81 684.787 L1377.37 684.787 L1377.93 684.787 L1378.49 684.787 L1379.04 684.787 L1379.6 684.787 L1380.16 684.787 L1380.72 684.787 L1381.28 684.787 L1381.84 684.787 L1382.4 684.787 L1382.96 684.787 L1383.52 684.787 L1384.08 684.787 L1384.64 684.787 L1385.2 684.787 L1385.76 684.787 L1386.31 684.787 L1386.87 684.787 L1387.43 684.787 L1387.99 684.787 L1388.55 684.787 L1389.11 684.787 L1389.67 684.787 L1390.23 684.787 L1390.79 684.787 L1391.35 684.787 L1391.91 684.787 L1392.47 684.787 L1393.03 684.787 L1393.58 684.787 L1394.14 684.787 L1394.7 684.787 L1395.26 684.787 L1395.82 684.787 L1396.38 684.787 L1396.94 684.787 L1397.5 684.787 L1398.06 684.787 L1398.62 684.787 L1399.18 684.787 L1399.74 684.787 L1400.3 684.787 L1400.86 684.787 L1401.41 684.787 L1401.97 684.787 L1402.53 684.787 L1403.09 684.787 L1403.65 684.787 L1404.21 684.787 L1404.77 684.787 L1405.33 684.787 L1405.89 684.787 L1406.45 684.787 L1407.01 684.787 L1407.57 684.787 L1408.13 684.787 L1408.68 684.787 L1409.24 684.787 L1409.8 684.787 L1410.36 684.787 L1410.92 684.787 L1411.48 684.787 L1412.04 684.787 L1412.6 684.787 L1413.16 684.787 L1413.72 684.787 L1414.28 684.787 L1414.84 684.787 L1415.4 684.787 L1415.95 684.787 L1416.51 684.787 L1417.07 684.787 L1417.63 684.787 L1418.19 684.787 L1418.75 684.787 L1419.31 684.787 L1419.87 684.787 L1420.43 684.787 L1420.99 684.787 L1421.55 684.787 L1422.11 684.787 L1422.67 684.787 L1423.23 684.787 L1423.78 684.787 L1424.34 684.787 L1424.9 684.787 L1425.46 684.787 L1426.02 684.787 L1426.58 684.787 L1427.14 684.787 L1427.7 684.787 L1428.26 684.787 L1428.82 684.787 L1429.38 684.787 L1429.94 684.787 L1430.5 684.787 L1431.05 684.787 L1431.61 684.787 L1432.17 684.787 L1432.73 684.787 L1433.29 684.787 L1433.85 684.787 L1434.41 684.787 L1434.97 684.787 L1435.53 684.787 L1436.09 684.787 L1436.65 684.787 L1437.21 684.787 L1437.77 684.787 L1438.33 684.787 L1438.88 684.787 L1439.44 684.787 L1440 684.787 L1440.56 684.787 L1441.12 684.787 L1441.68 684.787 L1442.24 684.787 L1442.8 684.787 L1443.36 684.787 L1443.92 684.787 L1444.48 684.787 L1445.04 684.787 L1445.6 684.787 L1446.15 684.787 L1446.71 684.787 L1447.27 684.787 L1447.83 684.787 L1448.39 684.787 L1448.95 684.787 L1449.51 684.787 L1450.07 684.787 L1450.63 684.787 L1451.19 684.787 L1451.75 684.787 L1452.31 684.787 L1452.87 684.787 L1453.42 684.787 L1453.98 684.787 L1454.54 684.787 L1455.1 684.787 L1455.66 684.787 L1456.22 684.787 L1456.78 684.787 L1457.34 684.787 L1457.9 684.787 L1458.46 684.787 L1459.02 684.787 L1459.58 684.787 L1460.14 684.787 L1460.7 684.787 L1461.25 684.787 L1461.81 684.787 L1462.37 684.787 L1462.93 684.787 L1463.49 684.787 L1464.05 684.787 L1464.61 684.787 L1465.17 684.787 L1465.73 684.787 L1466.29 684.787 L1466.85 684.787 L1467.41 684.787 L1467.97 684.787 L1468.52 684.787 L1469.08 684.787 L1469.64 684.787 L1470.2 684.787 L1470.76 684.787 L1471.32 684.787 L1471.88 684.787 L1472.44 684.787 L1473 684.787 L1473.56 684.787 L1474.12 684.787 L1474.68 684.787 L1475.24 684.787 L1475.79 684.787 L1476.35 684.787 L1476.91 684.787 L1477.47 684.787 L1478.03 684.787 L1478.59 684.787 L1479.15 684.787 L1479.71 684.787 L1480.27 684.787 L1480.83 684.787 L1481.39 684.787 L1481.95 684.787 L1482.51 684.787 L1483.07 684.787 L1483.62 684.787 L1484.18 684.787 L1484.74 684.787 L1485.3 684.787 L1485.86 684.787 L1486.42 684.787 L1486.98 684.787 L1487.54 684.787 L1488.1 684.787 L1488.66 684.787 L1489.22 684.787 L1489.78 684.787 L1490.34 684.787 L1490.89 684.787 L1491.45 684.787 L1492.01 684.787 L1492.57 684.787 L1493.13 684.787 L1493.69 684.787 L1494.25 684.787 L1494.81 684.787 L1495.37 684.787 L1495.93 684.787 L1496.49 684.787 L1497.05 684.787 L1497.61 684.787 L1498.16 684.787 L1498.72 684.787 L1499.28 684.787 L1499.84 684.787 L1500.4 684.787 L1500.96 684.787 L1501.52 684.787 L1502.08 684.787 L1502.64 684.787 L1503.2 684.787 L1503.76 684.787 L1504.32 684.787 L1504.88 684.787 L1505.44 684.787 L1505.99 684.787 L1506.55 684.787 L1507.11 684.787 L1507.67 684.787 L1508.23 684.787 L1508.79 684.787 L1509.35 684.787 L1509.91 684.787 L1510.47 684.787 L1511.03 684.787 L1511.59 684.787 L1512.15 684.787 L1512.71 684.787 L1513.26 684.787 L1513.82 684.787 L1514.38 684.787 L1514.94 684.787 L1515.5 684.787 L1516.06 684.787 L1516.62 684.787 L1517.18 684.787 L1517.74 684.787 L1518.3 684.787 L1518.86 684.787 L1519.42 684.787 L1519.98 684.787 L1520.53 684.787 L1521.09 684.787 L1521.65 684.787 L1522.21 684.787 L1522.77 684.787 L1523.33 684.787 L1523.89 684.787 L1524.45 684.787 L1525.01 684.787 L1525.57 684.787 L1526.13 684.787 L1526.69 684.787 L1527.25 684.787 L1527.81 684.787 L1528.36 684.787 L1528.92 684.787 L1529.48 684.787 L1530.04 684.787 L1530.6 684.787 L1531.16 684.787 L1531.72 684.787 L1532.28 684.787 L1532.84 684.787 L1533.4 684.787 L1533.96 684.787 L1534.52 684.787 L1535.08 684.787 L1535.63 684.787 L1536.19 684.787 L1536.75 684.787 L1537.31 684.787 L1537.87 684.787 L1538.43 684.787 L1538.99 684.787 L1539.55 684.787 L1540.11 684.787 L1540.67 684.787 L1541.23 684.787 L1541.79 684.787 L1542.35 684.787 L1542.9 684.787 L1543.46 684.787 L1544.02 684.787 L1544.58 684.787 L1545.14 684.787 L1545.7 684.787 L1546.26 684.787 L1546.82 684.787 L1547.38 684.787 L1547.94 684.787 L1548.5 684.787 L1549.06 684.787 L1549.62 684.787 L1550.18 684.787 L1550.73 684.787 L1551.29 684.787 L1551.85 684.787 L1552.41 684.787 L1552.97 684.787 L1553.53 684.787 L1554.09 684.787 L1554.65 684.787 L1555.21 684.787 L1555.77 684.787 L1556.33 684.787 L1556.89 684.787 L1557.45 684.787 L1558 684.787 L1558.56 684.787 L1559.12 684.787 L1559.68 684.787 L1560.24 684.787 L1560.8 684.787 L1561.36 684.787 L1561.92 684.787 L1562.48 684.787 L1563.04 684.787 L1563.6 684.787 L1564.16 684.787 L1564.72 684.787 L1565.28 684.787 L1565.83 684.787 L1566.39 684.787 L1566.95 684.787 L1567.51 684.787 L1568.07 684.787 L1568.63 684.787 L1569.19 684.787 L1569.75 684.787 L1570.31 684.787 L1570.87 684.787 L1571.43 684.787 L1571.99 684.787 L1572.55 684.787 L1573.1 684.787 L1573.66 684.787 L1574.22 684.787 L1574.78 684.787 L1575.34 684.787 L1575.9 684.787 L1576.46 684.787 L1577.02 684.787 L1577.58 684.787 L1578.14 684.787 L1578.7 684.787 L1579.26 684.787 L1579.82 684.787 L1580.37 684.787 L1580.93 684.787 L1581.49 684.787 L1582.05 684.787 L1582.61 684.787 L1583.17 684.787 L1583.73 684.787 L1584.29 684.787 L1584.85 684.787 L1585.41 684.787 L1585.97 684.787 L1586.53 684.787 L1587.09 684.787 L1587.65 684.787 L1588.2 684.787 L1588.76 684.787 L1589.32 684.787 L1589.88 684.787 L1590.44 684.787 L1591 684.787 L1591.56 684.787 L1592.12 684.787 L1592.68 684.787 L1593.24 684.787 L1593.8 684.787 L1594.36 684.787 L1594.92 684.787 L1595.47 684.787 L1596.03 684.787 L1596.59 684.787 L1597.15 684.787 L1597.71 684.787 L1598.27 684.787 L1598.83 684.787 L1599.39 684.787 L1599.95 684.787 L1600.51 684.787 L1601.07 684.787 L1601.63 684.787 L1602.19 684.787 L1602.74 684.787 L1603.3 684.787 L1603.86 684.787 L1604.42 684.787 L1604.98 684.787 L1605.54 684.787 L1606.1 684.787 L1606.66 684.787 L1607.22 684.787 L1607.78 684.787 L1608.34 684.787 L1608.9 684.787 L1609.46 684.787 L1610.02 684.787 L1610.57 684.787 L1611.13 684.787 L1611.69 684.787 L1612.25 684.787 L1612.81 684.787 L1613.37 684.787 L1613.93 684.787 L1614.49 684.787 L1615.05 684.787 L1615.61 684.787 L1616.17 684.787 L1616.73 684.787 L1617.29 684.787 L1617.84 684.787 L1618.4 684.787 L1618.96 684.787 L1619.52 684.787 L1620.08 684.787 L1620.64 684.787 L1621.2 684.787 L1621.76 684.787 L1622.32 684.787 L1622.88 684.787 L1623.44 684.787 L1624 684.787 L1624.56 684.787 L1625.11 684.787 L1625.67 684.787 L1626.23 684.787 L1626.79 684.787 L1627.35 684.787 L1627.91 684.787 L1628.47 684.787 L1629.03 684.787 L1629.59 684.787 L1630.15 684.787 L1630.71 684.787 L1631.27 684.787 L1631.83 684.787 L1632.39 684.787 L1632.94 684.787 L1633.5 684.787 L1634.06 684.787 L1634.62 684.787 L1635.18 684.787 L1635.74 684.787 L1636.3 684.787 L1636.86 684.787 L1637.42 684.787 L1637.98 684.787 L1638.54 684.787 L1639.1 684.787 L1639.66 684.787 L1640.21 684.787 L1640.77 684.787 L1641.33 684.787 L1641.89 684.787 L1642.45 684.787 L1643.01 684.787 L1643.57 684.787 L1644.13 684.787 L1644.69 684.787 L1645.25 684.787 L1645.81 684.787 L1646.37 684.787 L1646.93 684.787 L1647.48 684.787 L1648.04 684.787 L1648.6 684.787 L1649.16 684.787 L1649.72 684.787 L1650.28 684.787 L1650.84 684.787 L1651.4 684.787 L1651.96 684.787 L1652.52 684.787 L1653.08 684.787 L1653.64 684.787 L1654.2 684.787 L1654.76 684.787 L1655.31 684.787 L1655.87 684.787 L1656.43 684.787 L1656.99 684.787 L1657.55 684.787 L1658.11 684.787 L1658.67 684.787 L1659.23 684.787 L1659.79 684.787 L1660.35 684.787 L1660.91 684.787 L1661.47 684.787 L1662.03 684.787 L1662.58 684.787 L1663.14 684.787 L1663.7 684.787 L1664.26 684.787 L1664.82 684.787 L1665.38 684.787 L1665.94 684.787 L1666.5 684.787 L1667.06 684.787 L1667.62 684.787 L1668.18 684.787 L1668.74 684.787 L1669.3 684.787 L1669.85 684.787 L1670.41 684.787 L1670.97 684.787 L1671.53 684.787 L1672.09 684.787 L1672.65 684.787 L1673.21 684.787 L1673.77 684.787 L1674.33 684.787 L1674.89 684.787 L1675.45 684.787 L1676.01 684.787 L1676.57 684.787 L1677.13 684.787 L1677.68 684.787 L1678.24 684.787 L1678.8 684.787 L1679.36 684.787 L1679.92 684.787 L1680.48 684.787 L1681.04 684.787 L1681.6 684.787 L1682.16 684.787 L1682.72 684.787 L1683.28 684.787 L1683.84 684.787 L1684.4 684.787 L1684.95 684.787 L1685.51 684.787 L1686.07 684.787 L1686.63 684.787 L1687.19 684.787 L1687.75 684.787 L1688.31 684.787 L1688.87 684.787 L1689.43 684.787 L1689.99 684.787 L1690.55 684.787 L1691.11 684.787 L1691.67 684.787 L1692.23 684.787 L1692.78 684.787 L1693.34 684.787 L1693.9 684.787 L1694.46 684.787 L1695.02 684.787 L1695.58 684.787 L1696.14 684.787 L1696.7 684.787 L1697.26 684.787 L1697.82 684.787 L1698.38 684.787 L1698.94 684.787 L1699.5 684.787 L1700.05 684.787 L1700.61 684.787 L1701.17 684.787 L1701.73 684.787 L1702.29 684.787 L1702.85 684.787 L1703.41 684.787 L1703.97 684.787 L1704.53 684.787 L1705.09 684.787 L1705.65 684.787 L1706.21 684.787 L1706.77 684.787 L1707.32 684.787 L1707.88 684.787 L1708.44 684.787 L1709 684.787 L1709.56 684.787 L1710.12 684.787 L1710.68 684.787 L1711.24 684.787 L1711.8 684.787 L1712.36 684.787 L1712.92 684.787 L1713.48 684.787 L1714.04 684.787 L1714.6 684.787 L1715.15 684.787 L1715.71 684.787 L1716.27 684.787 L1716.83 684.787 L1717.39 684.787 L1717.95 684.787 L1718.51 684.787 L1719.07 684.787 L1719.63 684.787 L1720.19 684.787 L1720.75 684.787 L1721.31 684.787 L1721.87 684.787 L1722.42 684.787 L1722.98 684.787 L1723.54 684.787 L1724.1 684.787 L1724.66 684.787 L1725.22 684.787 L1725.78 684.787 L1726.34 684.787 L1726.9 684.787 L1727.46 684.787 L1728.02 684.787 L1728.58 684.787 L1729.14 684.787 L1729.69 684.787 L1730.25 684.787 L1730.81 684.787 L1731.37 684.787 L1731.93 684.787 L1732.49 684.787 L1733.05 684.787 L1733.61 684.787 L1734.17 684.787 L1734.73 684.787 L1735.29 684.787 L1735.85 684.787 L1736.41 684.787 L1736.97 684.787 L1737.52 684.787 L1738.08 684.787 L1738.64 684.787 L1739.2 684.787 L1739.76 684.787 L1740.32 684.787 L1740.88 684.787 L1741.44 684.787 L1742 684.787 L1742.56 684.787 L1743.12 684.787 L1743.68 684.787 L1744.24 684.787 L1744.79 684.787 L1745.35 684.787 L1745.91 684.787 L1746.47 684.787 L1747.03 684.787 L1747.59 684.787 L1748.15 684.787 L1748.71 684.787 L1749.27 684.787 L1749.83 684.787 L1750.39 684.787 L1750.95 684.787 L1751.51 684.787 L1752.06 684.787 L1752.62 684.787 L1753.18 684.787 L1753.74 684.787 L1754.3 684.787 L1754.86 684.787 L1755.42 684.787 L1755.98 684.787 L1756.54 684.787 L1757.1 684.787 L1757.66 684.787 L1758.22 684.787 L1758.78 684.787 L1759.34 684.787 L1759.89 684.787 L1760.45 684.787 L1761.01 684.787 L1761.57 684.787 L1762.13 684.787 L1762.69 684.787 L1763.25 684.787 L1763.81 684.787 L1764.37 684.787 L1764.93 684.787 L1765.49 684.787 L1766.05 684.787 L1766.61 684.787 L1767.16 684.787 L1767.72 684.787 L1768.28 684.787 L1768.84 684.787 L1769.4 684.787 L1769.96 684.787 L1770.52 684.787 L1771.08 684.787 L1771.64 684.787 L1772.2 684.787 L1772.76 684.787 L1773.32 684.787 L1773.88 684.787 L1774.43 684.787 L1774.99 684.787 L1775.55 684.787 L1776.11 684.787 L1776.67 684.787 L1777.23 684.787 L1777.79 684.787 L1778.35 684.787 L1778.91 684.787 L1779.47 684.787 L1780.03 684.787 L1780.59 684.787 L1781.15 684.787 L1781.71 684.787 L1782.26 684.787 L1782.82 684.787 L1783.38 684.787 L1783.94 684.787 L1784.5 684.787 L1785.06 684.787 L1785.62 684.787 L1786.18 684.787 L1786.74 684.787 L1787.3 684.787 L1787.86 684.787 L1788.42 684.787 L1788.98 684.787 L1789.53 684.787 L1790.09 684.787 L1790.65 684.787 L1791.21 684.787 L1791.77 684.787 L1792.33 684.787 L1792.89 684.787 L1793.45 684.787 L1794.01 684.787 L1794.57 684.787 L1795.13 684.787 L1795.69 684.787 L1796.25 684.787 L1796.8 684.787 L1797.36 684.787 L1797.92 684.787 L1798.48 684.787 L1799.04 684.787 L1799.6 684.787 L1800.16 684.787 L1800.72 684.787 L1801.28 684.787 L1801.84 684.787 L1802.4 684.787 L1802.96 684.787 L1803.52 684.787 L1804.08 684.787 L1804.63 684.787 L1805.19 684.787 L1805.75 684.787 L1806.31 684.787 L1806.87 684.787 L1807.43 684.787 L1807.99 684.787 L1808.55 684.787 L1809.11 684.787 L1809.67 684.787 L1810.23 684.787 L1810.79 684.787 L1811.35 684.787 L1811.9 684.787 L1812.46 684.787 L1813.02 684.787 L1813.58 684.787 L1814.14 684.787 L1814.7 684.787 L1815.26 684.787 L1815.82 684.787 L1816.38 684.787 L1816.94 684.787 L1817.5 684.787 L1818.06 684.787 L1818.62 684.787 L1819.18 684.787 L1819.73 684.787 L1820.29 684.787 L1820.85 684.787 L1821.41 684.787 L1821.97 684.787 L1822.53 684.787 L1823.09 684.787 L1823.65 684.787 L1824.21 684.787 L1824.77 684.787 L1825.33 684.787 L1825.89 684.787 L1826.45 684.787 L1827 684.787 L1827.56 684.787 L1828.12 684.787 L1828.68 684.787 L1829.24 684.787 L1829.8 684.787 L1830.36 684.787 L1830.92 684.787 L1831.48 684.787 L1832.04 684.787 L1832.6 684.787 L1833.16 684.787 L1833.72 684.787 L1834.27 684.787 L1834.83 684.787 L1835.39 684.787 L1835.95 684.787 L1836.51 684.787 L1837.07 684.787 L1837.63 684.787 L1838.19 684.787 L1838.19 681.8 L1837.63 681.8 L1837.07 681.8 L1836.51 681.8 L1835.95 681.8 L1835.39 681.8 L1834.83 681.8 L1834.27 681.8 L1833.72 681.8 L1833.16 681.8 L1832.6 681.8 L1832.04 681.8 L1831.48 681.8 L1830.92 681.8 L1830.36 681.8 L1829.8 681.8 L1829.24 681.8 L1828.68 681.8 L1828.12 681.8 L1827.56 681.8 L1827 681.8 L1826.45 681.8 L1825.89 681.8 L1825.33 681.8 L1824.77 681.8 L1824.21 681.8 L1823.65 681.8 L1823.09 681.8 L1822.53 681.8 L1821.97 681.8 L1821.41 681.8 L1820.85 681.8 L1820.29 681.8 L1819.73 681.8 L1819.18 681.8 L1818.62 681.8 L1818.06 681.8 L1817.5 681.8 L1816.94 681.8 L1816.38 681.8 L1815.82 681.8 L1815.26 681.8 L1814.7 681.8 L1814.14 681.8 L1813.58 681.8 L1813.02 681.8 L1812.46 681.8 L1811.9 681.8 L1811.35 681.8 L1810.79 681.8 L1810.23 681.8 L1809.67 681.8 L1809.11 681.8 L1808.55 681.8 L1807.99 681.8 L1807.43 681.8 L1806.87 681.8 L1806.31 681.8 L1805.75 681.8 L1805.19 681.8 L1804.63 681.8 L1804.08 681.8 L1803.52 681.8 L1802.96 681.8 L1802.4 681.8 L1801.84 681.8 L1801.28 681.8 L1800.72 681.8 L1800.16 681.8 L1799.6 681.8 L1799.04 681.8 L1798.48 681.8 L1797.92 681.8 L1797.36 681.8 L1796.8 681.8 L1796.25 681.8 L1795.69 681.8 L1795.13 681.8 L1794.57 681.8 L1794.01 681.8 L1793.45 681.8 L1792.89 681.8 L1792.33 681.8 L1791.77 681.8 L1791.21 681.8 L1790.65 681.8 L1790.09 681.8 L1789.53 681.8 L1788.98 681.8 L1788.42 681.8 L1787.86 681.8 L1787.3 681.8 L1786.74 681.8 L1786.18 681.8 L1785.62 681.8 L1785.06 681.8 L1784.5 681.8 L1783.94 681.8 L1783.38 681.8 L1782.82 681.8 L1782.26 681.8 L1781.71 681.8 L1781.15 681.8 L1780.59 681.8 L1780.03 681.8 L1779.47 681.8 L1778.91 681.8 L1778.35 681.8 L1777.79 681.8 L1777.23 681.8 L1776.67 681.8 L1776.11 681.8 L1775.55 681.8 L1774.99 681.8 L1774.43 681.8 L1773.88 681.8 L1773.32 681.8 L1772.76 681.8 L1772.2 681.8 L1771.64 681.8 L1771.08 681.8 L1770.52 681.8 L1769.96 681.8 L1769.4 681.8 L1768.84 681.8 L1768.28 681.8 L1767.72 681.8 L1767.16 681.8 L1766.61 681.8 L1766.05 681.8 L1765.49 681.8 L1764.93 681.8 L1764.37 681.8 L1763.81 681.8 L1763.25 681.8 L1762.69 681.8 L1762.13 681.8 L1761.57 681.8 L1761.01 681.8 L1760.45 681.8 L1759.89 681.8 L1759.34 681.8 L1758.78 681.8 L1758.22 681.8 L1757.66 681.8 L1757.1 681.8 L1756.54 681.8 L1755.98 681.8 L1755.42 681.8 L1754.86 681.8 L1754.3 681.8 L1753.74 681.8 L1753.18 681.8 L1752.62 681.8 L1752.06 681.8 L1751.51 681.8 L1750.95 681.8 L1750.39 681.8 L1749.83 681.8 L1749.27 681.8 L1748.71 681.8 L1748.15 681.8 L1747.59 681.8 L1747.03 681.8 L1746.47 681.8 L1745.91 681.8 L1745.35 681.8 L1744.79 681.8 L1744.24 681.8 L1743.68 681.8 L1743.12 681.8 L1742.56 681.8 L1742 681.8 L1741.44 681.8 L1740.88 681.8 L1740.32 681.8 L1739.76 681.8 L1739.2 681.8 L1738.64 681.8 L1738.08 681.8 L1737.52 681.8 L1736.97 681.8 L1736.41 681.8 L1735.85 681.8 L1735.29 681.8 L1734.73 681.8 L1734.17 681.8 L1733.61 681.8 L1733.05 681.8 L1732.49 681.8 L1731.93 681.8 L1731.37 681.8 L1730.81 681.8 L1730.25 681.8 L1729.69 681.8 L1729.14 681.8 L1728.58 681.8 L1728.02 681.8 L1727.46 681.8 L1726.9 681.8 L1726.34 681.8 L1725.78 681.8 L1725.22 681.8 L1724.66 681.8 L1724.1 681.8 L1723.54 681.8 L1722.98 681.8 L1722.42 681.8 L1721.87 681.8 L1721.31 681.8 L1720.75 681.8 L1720.19 681.8 L1719.63 681.8 L1719.07 681.8 L1718.51 681.8 L1717.95 681.8 L1717.39 681.8 L1716.83 681.8 L1716.27 681.8 L1715.71 681.8 L1715.15 681.8 L1714.6 681.8 L1714.04 681.8 L1713.48 681.8 L1712.92 681.8 L1712.36 681.8 L1711.8 681.8 L1711.24 681.8 L1710.68 681.8 L1710.12 681.8 L1709.56 681.8 L1709 681.8 L1708.44 681.8 L1707.88 681.8 L1707.32 681.8 L1706.77 681.8 L1706.21 681.8 L1705.65 681.8 L1705.09 681.8 L1704.53 681.8 L1703.97 681.8 L1703.41 681.8 L1702.85 681.8 L1702.29 681.8 L1701.73 681.8 L1701.17 681.8 L1700.61 681.8 L1700.05 681.8 L1699.5 681.8 L1698.94 681.8 L1698.38 681.8 L1697.82 681.8 L1697.26 681.8 L1696.7 681.8 L1696.14 681.8 L1695.58 681.8 L1695.02 681.8 L1694.46 681.8 L1693.9 681.8 L1693.34 681.8 L1692.78 681.8 L1692.23 681.8 L1691.67 681.8 L1691.11 681.8 L1690.55 681.8 L1689.99 681.8 L1689.43 681.8 L1688.87 681.8 L1688.31 681.8 L1687.75 681.8 L1687.19 681.8 L1686.63 681.8 L1686.07 681.8 L1685.51 681.8 L1684.95 681.8 L1684.4 681.8 L1683.84 681.8 L1683.28 681.8 L1682.72 681.8 L1682.16 681.8 L1681.6 681.8 L1681.04 681.8 L1680.48 681.8 L1679.92 681.8 L1679.36 681.8 L1678.8 681.8 L1678.24 681.8 L1677.68 681.8 L1677.13 681.8 L1676.57 681.8 L1676.01 681.8 L1675.45 681.8 L1674.89 681.8 L1674.33 681.8 L1673.77 681.8 L1673.21 681.8 L1672.65 681.8 L1672.09 681.8 L1671.53 681.8 L1670.97 681.8 L1670.41 681.8 L1669.85 681.8 L1669.3 681.8 L1668.74 681.8 L1668.18 681.8 L1667.62 681.8 L1667.06 681.8 L1666.5 681.8 L1665.94 681.8 L1665.38 681.8 L1664.82 681.8 L1664.26 681.8 L1663.7 681.8 L1663.14 681.8 L1662.58 681.8 L1662.03 681.8 L1661.47 681.8 L1660.91 681.8 L1660.35 681.8 L1659.79 681.8 L1659.23 681.8 L1658.67 681.8 L1658.11 681.8 L1657.55 681.8 L1656.99 681.8 L1656.43 681.8 L1655.87 681.8 L1655.31 681.8 L1654.76 681.8 L1654.2 681.8 L1653.64 681.8 L1653.08 681.8 L1652.52 681.8 L1651.96 681.8 L1651.4 681.8 L1650.84 681.8 L1650.28 681.8 L1649.72 681.8 L1649.16 681.8 L1648.6 681.8 L1648.04 681.8 L1647.48 681.8 L1646.93 681.8 L1646.37 681.8 L1645.81 681.8 L1645.25 681.8 L1644.69 681.8 L1644.13 681.8 L1643.57 681.8 L1643.01 681.8 L1642.45 681.8 L1641.89 681.8 L1641.33 681.8 L1640.77 681.8 L1640.21 681.8 L1639.66 681.8 L1639.1 681.8 L1638.54 681.8 L1637.98 681.8 L1637.42 681.8 L1636.86 681.8 L1636.3 681.8 L1635.74 681.8 L1635.18 681.8 L1634.62 681.8 L1634.06 681.8 L1633.5 681.8 L1632.94 681.8 L1632.39 681.8 L1631.83 681.8 L1631.27 681.8 L1630.71 681.8 L1630.15 681.8 L1629.59 681.8 L1629.03 681.8 L1628.47 681.8 L1627.91 681.8 L1627.35 681.8 L1626.79 681.8 L1626.23 681.8 L1625.67 681.8 L1625.11 681.8 L1624.56 681.8 L1624 681.8 L1623.44 681.8 L1622.88 681.8 L1622.32 681.8 L1621.76 681.8 L1621.2 681.8 L1620.64 681.8 L1620.08 681.8 L1619.52 681.8 L1618.96 681.8 L1618.4 681.8 L1617.84 681.8 L1617.29 681.8 L1616.73 681.8 L1616.17 681.8 L1615.61 681.8 L1615.05 681.8 L1614.49 681.8 L1613.93 681.8 L1613.37 681.8 L1612.81 681.8 L1612.25 681.8 L1611.69 681.8 L1611.13 681.8 L1610.57 681.8 L1610.02 681.8 L1609.46 681.8 L1608.9 681.8 L1608.34 681.8 L1607.78 681.8 L1607.22 681.8 L1606.66 681.8 L1606.1 681.8 L1605.54 681.8 L1604.98 681.8 L1604.42 681.8 L1603.86 681.8 L1603.3 681.8 L1602.74 681.8 L1602.19 681.8 L1601.63 681.8 L1601.07 681.8 L1600.51 681.8 L1599.95 681.8 L1599.39 681.8 L1598.83 681.8 L1598.27 681.8 L1597.71 681.8 L1597.15 681.8 L1596.59 681.8 L1596.03 681.8 L1595.47 681.8 L1594.92 681.8 L1594.36 681.8 L1593.8 681.8 L1593.24 681.8 L1592.68 681.8 L1592.12 681.8 L1591.56 681.8 L1591 681.8 L1590.44 681.8 L1589.88 681.8 L1589.32 681.8 L1588.76 681.8 L1588.2 681.8 L1587.65 681.8 L1587.09 681.8 L1586.53 681.8 L1585.97 681.8 L1585.41 681.8 L1584.85 681.8 L1584.29 681.8 L1583.73 681.8 L1583.17 681.8 L1582.61 681.8 L1582.05 681.8 L1581.49 681.8 L1580.93 681.8 L1580.37 681.8 L1579.82 681.8 L1579.26 681.8 L1578.7 681.8 L1578.14 681.8 L1577.58 681.8 L1577.02 681.8 L1576.46 681.8 L1575.9 681.8 L1575.34 681.8 L1574.78 681.8 L1574.22 681.8 L1573.66 681.8 L1573.1 681.8 L1572.55 681.8 L1571.99 681.8 L1571.43 681.8 L1570.87 681.8 L1570.31 681.8 L1569.75 681.8 L1569.19 681.8 L1568.63 681.8 L1568.07 681.8 L1567.51 681.8 L1566.95 681.8 L1566.39 681.8 L1565.83 681.8 L1565.28 681.8 L1564.72 681.8 L1564.16 681.8 L1563.6 681.8 L1563.04 681.8 L1562.48 681.8 L1561.92 681.8 L1561.36 681.8 L1560.8 681.8 L1560.24 681.8 L1559.68 681.8 L1559.12 681.8 L1558.56 681.8 L1558 681.8 L1557.45 681.8 L1556.89 681.8 L1556.33 681.8 L1555.77 681.8 L1555.21 681.8 L1554.65 681.8 L1554.09 681.8 L1553.53 681.8 L1552.97 681.8 L1552.41 681.8 L1551.85 681.8 L1551.29 681.8 L1550.73 681.8 L1550.18 681.8 L1549.62 681.8 L1549.06 681.8 L1548.5 681.8 L1547.94 681.8 L1547.38 681.8 L1546.82 681.8 L1546.26 681.8 L1545.7 681.8 L1545.14 681.8 L1544.58 681.8 L1544.02 681.8 L1543.46 681.8 L1542.9 681.8 L1542.35 681.8 L1541.79 681.8 L1541.23 681.8 L1540.67 681.8 L1540.11 681.8 L1539.55 681.8 L1538.99 681.8 L1538.43 681.8 L1537.87 681.8 L1537.31 681.8 L1536.75 681.8 L1536.19 681.8 L1535.63 681.8 L1535.08 681.8 L1534.52 681.8 L1533.96 681.8 L1533.4 681.8 L1532.84 681.8 L1532.28 681.8 L1531.72 681.8 L1531.16 681.8 L1530.6 681.8 L1530.04 681.8 L1529.48 681.8 L1528.92 681.8 L1528.36 681.8 L1527.81 681.8 L1527.25 681.8 L1526.69 681.8 L1526.13 681.8 L1525.57 681.8 L1525.01 681.8 L1524.45 681.8 L1523.89 681.8 L1523.33 681.8 L1522.77 681.8 L1522.21 681.8 L1521.65 681.8 L1521.09 681.8 L1520.53 681.8 L1519.98 681.8 L1519.42 681.8 L1518.86 681.8 L1518.3 681.8 L1517.74 681.8 L1517.18 681.8 L1516.62 681.8 L1516.06 681.8 L1515.5 681.8 L1514.94 681.8 L1514.38 681.8 L1513.82 681.8 L1513.26 681.8 L1512.71 681.8 L1512.15 681.8 L1511.59 681.8 L1511.03 681.8 L1510.47 681.8 L1509.91 681.8 L1509.35 681.8 L1508.79 681.8 L1508.23 681.8 L1507.67 681.8 L1507.11 681.8 L1506.55 681.8 L1505.99 681.8 L1505.44 681.8 L1504.88 681.8 L1504.32 681.8 L1503.76 681.8 L1503.2 681.8 L1502.64 681.8 L1502.08 681.8 L1501.52 681.8 L1500.96 681.8 L1500.4 681.8 L1499.84 681.8 L1499.28 681.8 L1498.72 681.8 L1498.16 681.8 L1497.61 681.8 L1497.05 681.8 L1496.49 681.8 L1495.93 681.8 L1495.37 681.8 L1494.81 681.8 L1494.25 681.8 L1493.69 681.8 L1493.13 681.8 L1492.57 681.8 L1492.01 681.8 L1491.45 681.8 L1490.89 681.8 L1490.34 681.8 L1489.78 681.8 L1489.22 681.8 L1488.66 681.8 L1488.1 681.8 L1487.54 681.8 L1486.98 681.8 L1486.42 681.8 L1485.86 681.8 L1485.3 681.8 L1484.74 681.8 L1484.18 681.8 L1483.62 681.8 L1483.07 681.8 L1482.51 681.8 L1481.95 681.8 L1481.39 681.8 L1480.83 681.8 L1480.27 681.8 L1479.71 681.8 L1479.15 681.8 L1478.59 681.8 L1478.03 681.8 L1477.47 681.8 L1476.91 681.8 L1476.35 681.8 L1475.79 681.8 L1475.24 681.8 L1474.68 681.8 L1474.12 681.8 L1473.56 681.8 L1473 681.8 L1472.44 681.8 L1471.88 681.8 L1471.32 681.8 L1470.76 681.8 L1470.2 681.8 L1469.64 681.8 L1469.08 681.8 L1468.52 681.8 L1467.97 681.8 L1467.41 681.8 L1466.85 681.8 L1466.29 681.8 L1465.73 681.8 L1465.17 681.8 L1464.61 681.8 L1464.05 681.8 L1463.49 681.8 L1462.93 681.8 L1462.37 681.8 L1461.81 681.8 L1461.25 681.8 L1460.7 681.8 L1460.14 681.8 L1459.58 681.8 L1459.02 681.8 L1458.46 681.8 L1457.9 681.8 L1457.34 681.8 L1456.78 681.8 L1456.22 681.8 L1455.66 681.8 L1455.1 681.8 L1454.54 681.8 L1453.98 681.8 L1453.42 681.8 L1452.87 681.8 L1452.31 681.8 L1451.75 681.8 L1451.19 681.8 L1450.63 681.8 L1450.07 681.8 L1449.51 681.8 L1448.95 681.8 L1448.39 681.8 L1447.83 681.8 L1447.27 681.8 L1446.71 681.8 L1446.15 681.8 L1445.6 681.8 L1445.04 681.8 L1444.48 681.8 L1443.92 681.8 L1443.36 681.8 L1442.8 681.8 L1442.24 681.8 L1441.68 681.8 L1441.12 681.8 L1440.56 681.8 L1440 681.8 L1439.44 681.8 L1438.88 681.8 L1438.33 681.8 L1437.77 681.8 L1437.21 681.8 L1436.65 681.8 L1436.09 681.8 L1435.53 681.8 L1434.97 681.8 L1434.41 681.8 L1433.85 681.8 L1433.29 681.8 L1432.73 681.8 L1432.17 681.8 L1431.61 681.8 L1431.05 681.8 L1430.5 681.8 L1429.94 681.8 L1429.38 681.8 L1428.82 681.8 L1428.26 681.8 L1427.7 681.8 L1427.14 681.8 L1426.58 681.8 L1426.02 681.8 L1425.46 681.8 L1424.9 681.8 L1424.34 681.8 L1423.78 681.8 L1423.23 681.8 L1422.67 681.8 L1422.11 681.8 L1421.55 681.8 L1420.99 681.8 L1420.43 681.8 L1419.87 681.8 L1419.31 681.8 L1418.75 681.8 L1418.19 681.8 L1417.63 681.8 L1417.07 681.8 L1416.51 681.8 L1415.95 681.8 L1415.4 681.8 L1414.84 681.8 L1414.28 681.8 L1413.72 681.8 L1413.16 681.8 L1412.6 681.8 L1412.04 681.8 L1411.48 681.8 L1410.92 681.8 L1410.36 681.8 L1409.8 681.8 L1409.24 681.8 L1408.68 681.8 L1408.13 681.8 L1407.57 681.8 L1407.01 681.8 L1406.45 681.8 L1405.89 681.8 L1405.33 681.8 L1404.77 681.8 L1404.21 681.8 L1403.65 681.8 L1403.09 681.8 L1402.53 681.8 L1401.97 681.8 L1401.41 681.8 L1400.86 681.8 L1400.3 681.8 L1399.74 681.8 L1399.18 681.8 L1398.62 681.8 L1398.06 681.8 L1397.5 681.8 L1396.94 681.8 L1396.38 681.8 L1395.82 681.8 L1395.26 681.8 L1394.7 681.8 L1394.14 681.8 L1393.58 681.8 L1393.03 681.8 L1392.47 681.8 L1391.91 681.8 L1391.35 681.8 L1390.79 681.8 L1390.23 681.8 L1389.67 681.8 L1389.11 681.8 L1388.55 681.8 L1387.99 681.8 L1387.43 681.8 L1386.87 681.8 L1386.31 681.8 L1385.76 681.8 L1385.2 681.8 L1384.64 681.8 L1384.08 681.8 L1383.52 681.8 L1382.96 681.8 L1382.4 681.8 L1381.84 681.8 L1381.28 681.8 L1380.72 681.8 L1380.16 681.8 L1379.6 681.8 L1379.04 681.8 L1378.49 681.8 L1377.93 681.8 L1377.37 681.8 L1376.81 681.8 L1376.25 681.8 L1375.69 681.8 L1375.13 681.8 L1374.57 681.8 L1374.01 681.8 L1373.45 681.8 L1372.89 681.8 L1372.33 681.8 L1371.77 681.8 L1371.21 681.8 L1370.66 681.8 L1370.1 681.8 L1369.54 681.8 L1368.98 681.8 L1368.42 681.8 L1367.86 681.8 L1367.3 681.8 L1366.74 681.8 L1366.18 681.8 L1365.62 681.8 L1365.06 681.8 L1364.5 681.8 L1363.94 681.8 L1363.39 681.8 L1362.83 681.8 L1362.27 681.8 L1361.71 681.8 L1361.15 681.8 L1360.59 681.8 L1360.03 681.8 L1359.47 681.8 L1358.91 681.8 L1358.35 681.8 L1357.79 681.8 L1357.23 681.8 L1356.67 681.8 L1356.12 681.8 L1355.56 681.8 L1355 681.8 L1354.44 681.8 L1353.88 681.8 L1353.32 681.8 L1352.76 681.8 L1352.2 681.8 L1351.64 681.8 L1351.08 681.8 L1350.52 681.8 L1349.96 681.8 L1349.4 681.8 L1348.84 681.8 L1348.29 681.8 L1347.73 681.8 L1347.17 681.8 L1346.61 681.8 L1346.05 681.8 L1345.49 681.8 L1344.93 681.8 L1344.37 681.8 L1343.81 681.8 L1343.25 681.8 L1342.69 681.8 L1342.13 681.8 L1341.57 681.8 L1341.02 681.8 L1340.46 681.8 L1339.9 681.8 L1339.34 681.8 L1338.78 681.8 L1338.22 681.8 L1337.66 681.8 L1337.1 681.8 L1336.54 681.8 L1335.98 681.8 L1335.42 681.8 L1334.86 681.8 L1334.3 681.8 L1333.75 681.8 L1333.19 681.8 L1332.63 681.8 L1332.07 681.8 L1331.51 681.8 L1330.95 681.8 L1330.39 681.8 L1329.83 681.8 L1329.27 681.8 L1328.71 681.8 L1328.15 681.8 L1327.59 681.8 L1327.03 681.8 L1326.47 681.8 L1325.92 681.8 L1325.36 681.8 L1324.8 681.8 L1324.24 681.8 L1323.68 681.8 L1323.12 681.8 L1322.56 681.8 L1322 681.8 L1321.44 681.8 L1320.88 681.8 L1320.32 681.8 L1319.76 681.8 L1319.2 681.8 L1318.65 681.8 L1318.09 681.8 L1317.53 681.8 L1316.97 681.8 L1316.41 681.8 L1315.85 681.8 L1315.29 681.8 L1314.73 681.8 L1314.17 681.8 L1313.61 681.8 L1313.05 681.8 L1312.49 681.8 L1311.93 681.8 L1311.38 681.8 L1310.82 681.8 L1310.26 681.8 L1309.7 681.8 L1309.14 681.8 L1308.58 681.8 L1308.02 681.8 L1307.46 681.8 L1306.9 681.8 L1306.34 681.8 L1305.78 681.8 L1305.22 681.8 L1304.66 681.8 L1304.1 681.8 L1303.55 681.8 L1302.99 681.8 L1302.43 681.8 L1301.87 681.8 L1301.31 681.8 L1300.75 681.8 L1300.19 681.8 L1299.63 681.8 L1299.07 681.8 L1298.51 681.8 L1297.95 681.8 L1297.39 681.8 L1296.83 681.8 L1296.28 681.8 L1295.72 681.8 L1295.16 681.8 L1294.6 681.8 L1294.04 681.8 L1293.48 681.8 L1292.92 681.8 L1292.36 681.8 L1291.8 681.8 L1291.24 681.8 L1290.68 681.8 L1290.12 681.8 L1289.56 681.8 L1289 681.8 L1288.45 681.8 L1287.89 681.8 L1287.33 681.8 L1286.77 681.8 L1286.21 681.8 L1285.65 681.8 L1285.09 681.8 L1284.53 681.8 L1283.97 681.8 L1283.41 681.8 L1282.85 681.8 L1282.29 681.8 L1281.73 681.8 L1281.18 681.8 L1280.62 681.8 L1280.06 681.8 L1279.5 681.8 L1278.94 681.8 L1278.38 681.8 L1277.82 681.8 L1277.26 681.8 L1276.7 681.8 L1276.14 681.8 L1275.58 681.8 L1275.02 681.8 L1274.46 681.8 L1273.91 681.8 L1273.35 681.8 L1272.79 681.8 L1272.23 681.8 L1271.67 681.8 L1271.11 681.8 L1270.55 681.8 L1269.99 681.8 L1269.43 681.8 L1268.87 681.8 L1268.31 681.8 L1267.75 681.8 L1267.19 681.8 L1266.63 681.8 L1266.08 681.8 L1265.52 681.8 L1264.96 681.8 L1264.4 681.8 L1263.84 681.8 L1263.28 681.8 L1262.72 681.8 L1262.16 681.8 L1261.6 681.8 L1261.04 681.8 L1260.48 681.8 L1259.92 681.8 L1259.36 681.8 L1258.81 681.8 L1258.25 681.8 L1257.69 681.8 L1257.13 681.8 L1256.57 681.8 L1256.01 681.8 L1255.45 681.8 L1254.89 681.8 L1254.33 681.8 L1253.77 681.8 L1253.21 681.8 L1252.65 681.8 L1252.09 681.8 L1251.54 681.8 L1250.98 681.8 L1250.42 681.8 L1249.86 681.8 L1249.3 681.8 L1248.74 681.8 L1248.18 681.8 L1247.62 681.8 L1247.06 681.8 L1246.5 681.8 L1245.94 681.8 L1245.38 681.8 L1244.82 681.8 L1244.26 681.8 L1243.71 681.8 L1243.15 681.8 L1242.59 681.8 L1242.03 681.8 L1241.47 681.8 L1240.91 681.8 L1240.35 681.8 L1239.79 681.8 L1239.23 681.8 L1238.67 681.8 L1238.11 681.8 L1237.55 681.8 L1236.99 681.8 L1236.44 681.8 L1235.88 681.8 L1235.32 681.8 L1234.76 681.8 L1234.2 681.8 L1233.64 681.8 L1233.08 681.8 L1232.52 681.8 L1231.96 681.8 L1231.4 681.8 L1230.84 681.8 L1230.28 681.8 L1229.72 681.8 L1229.17 681.8 L1228.61 681.8 L1228.05 681.8 L1227.49 681.8 L1226.93 681.8 L1226.37 681.8 L1225.81 681.8 L1225.25 681.8 L1224.69 681.8 L1224.13 681.8 L1223.57 681.8 L1223.01 681.8 L1222.45 681.8 L1221.89 681.8 L1221.34 681.8 L1220.78 681.8 L1220.22 681.8 L1219.66 681.8 L1219.1 681.8 L1218.54 681.8 L1217.98 681.8 L1217.42 681.8 L1216.86 681.8 L1216.3 681.8 L1215.74 681.8 L1215.18 681.8 L1214.62 681.8 L1214.07 681.8 L1213.51 681.8 L1212.95 681.8 L1212.39 681.8 L1211.83 681.8 L1211.27 681.8 L1210.71 681.8 L1210.15 681.8 L1209.59 681.8 L1209.03 681.8 L1208.47 681.8 L1207.91 681.8 L1207.35 681.8 L1206.8 681.8 L1206.24 681.8 L1205.68 681.8 L1205.12 681.8 L1204.56 681.8 L1204 681.8 L1203.44 681.8 L1202.88 681.8 L1202.32 681.8 L1201.76 681.8 L1201.2 681.8 L1200.64 681.8 L1200.08 681.8 L1199.52 681.8 L1198.97 681.8 L1198.41 681.8 L1197.85 681.8 L1197.29 681.8 L1196.73 681.8 L1196.17 681.8 L1195.61 681.8 L1195.05 681.8 L1194.49 681.8 L1193.93 681.8 L1193.37 681.8 L1192.81 681.8 L1192.25 681.8 L1191.7 681.8 L1191.14 681.8 L1190.58 681.8 L1190.02 681.8 L1189.46 681.8 L1188.9 681.8 L1188.34 681.8 L1187.78 681.8 L1187.22 681.8 L1186.66 681.8 L1186.1 681.8 L1185.54 681.8 L1184.98 681.8 L1184.43 681.8 L1183.87 681.8 L1183.31 681.8 L1182.75 681.8 L1182.19 681.8 L1181.63 681.8 L1181.07 681.8 L1180.51 681.8 L1179.95 681.8 L1179.39 681.8 L1178.83 681.8 L1178.27 681.8 L1177.71 681.8 L1177.15 681.8 L1176.6 681.8 L1176.04 681.8 L1175.48 681.8 L1174.92 681.8 L1174.36 681.8 L1173.8 681.8 L1173.24 681.8 L1172.68 681.8 L1172.12 681.8 L1171.56 681.8 L1171 681.8 L1170.44 681.8 L1169.88 681.8 L1169.33 681.8 L1168.77 681.8 L1168.21 681.8 L1167.65 681.8 L1167.09 681.8 L1166.53 681.8 L1165.97 681.8 L1165.41 681.8 L1164.85 681.8 L1164.29 681.8 L1163.73 681.8 L1163.17 681.8 L1162.61 681.8 L1162.05 681.8 L1161.5 681.8 L1160.94 681.8 L1160.38 681.8 L1159.82 681.8 L1159.26 681.8 L1158.7 681.8 L1158.14 681.8 L1157.58 681.8 L1157.02 681.8 L1156.46 681.8 L1155.9 681.8 L1155.34 681.8 L1154.78 681.8 L1154.23 681.8 L1153.67 681.8 L1153.11 681.8 L1152.55 681.8 L1151.99 681.8 L1151.43 681.8 L1150.87 681.8 L1150.31 681.8 L1149.75 681.8 L1149.19 681.8 L1148.63 681.8 L1148.07 681.8 L1147.51 681.8 L1146.96 681.8 L1146.4 681.8 L1145.84 681.8 L1145.28 681.8 L1144.72 681.8 L1144.16 681.8 L1143.6 681.8 L1143.04 681.8 L1142.48 681.8 L1141.92 681.8 L1141.36 681.8 L1140.8 681.8 L1140.24 681.8 L1139.68 681.8 L1139.13 681.8 L1138.57 681.8 L1138.01 681.8 L1137.45 681.8 L1136.89 681.8 L1136.33 681.8 L1135.77 681.8 L1135.21 681.8 L1134.65 681.8 L1134.09 681.8 L1133.53 681.8 L1132.97 681.8 L1132.41 681.8 L1131.86 681.8 L1131.3 681.8 L1130.74 681.8 L1130.18 681.8 L1129.62 681.8 L1129.06 681.8 L1128.5 681.8 L1127.94 681.8 L1127.38 681.8 L1126.82 681.8 L1126.26 681.8 L1125.7 681.8 L1125.14 681.8 L1124.59 681.8 L1124.03 681.8 L1123.47 681.8 L1122.91 681.8 L1122.35 681.8 L1121.79 681.8 L1121.23 681.8 L1120.67 681.8 L1120.11 681.8 L1119.55 681.8 L1118.99 681.8 L1118.43 681.8 L1117.87 681.8 L1117.31 681.8 L1116.76 681.8 L1116.2 681.8 L1115.64 681.8 L1115.08 681.8 L1114.52 681.8 L1113.96 681.8 L1113.4 681.8 L1112.84 681.8 L1112.28 681.8 L1111.72 681.8 L1111.16 681.8 L1110.6 681.8 L1110.04 681.8 L1109.49 681.8 L1108.93 681.8 L1108.37 681.8 L1107.81 681.8 L1107.25 681.8 L1106.69 681.8 L1106.13 681.8 L1105.57 681.8 L1105.01 681.8 L1104.45 681.8 L1103.89 681.8 L1103.33 681.8 L1102.77 681.8 L1102.22 681.8 L1101.66 681.8 L1101.1 681.8 L1100.54 681.8 L1099.98 681.8 L1099.42 681.8 L1098.86 681.8 L1098.3 681.8 L1097.74 681.8 L1097.18 681.8 L1096.62 681.8 L1096.06 681.8 L1095.5 681.8 L1094.94 681.8 L1094.39 681.8 L1093.83 681.8 L1093.27 681.8 L1092.71 681.8 L1092.15 681.8 L1091.59 681.8 L1091.03 681.8 L1090.47 681.8 L1089.91 681.8 L1089.35 681.8 L1088.79 681.8 L1088.23 681.8 L1087.67 681.8 L1087.12 681.8 L1086.56 681.8 L1086 681.8 L1085.44 681.8 L1084.88 681.8 L1084.32 681.8 L1083.76 681.8 L1083.2 681.8 L1082.64 681.8 L1082.08 681.8 L1081.52 681.8 L1080.96 681.8 L1080.4 681.8 L1079.85 681.8 L1079.29 681.8 L1078.73 681.8 L1078.17 681.8 L1077.61 681.8 L1077.05 681.8 L1076.49 681.8 L1075.93 681.8 L1075.37 681.8 L1074.81 681.8 L1074.25 681.8 L1073.69 681.8 L1073.13 681.8 L1072.57 681.8 L1072.02 681.8 L1071.46 681.8 L1070.9 681.8 L1070.34 681.8 L1069.78 681.8 L1069.22 681.8 L1068.66 681.8 L1068.1 681.8 L1067.54 681.8 L1066.98 681.8 L1066.42 681.8 L1065.86 681.8 L1065.3 681.8 L1064.75 681.8 L1064.19 681.8 L1063.63 681.8 L1063.07 681.8 L1062.51 681.8 L1061.95 681.8 L1061.39 681.8 L1060.83 681.8 L1060.27 681.8 L1059.71 681.8 L1059.15 681.8 L1058.59 681.8 L1058.03 681.8 L1057.48 681.8 L1056.92 681.8 L1056.36 681.8 L1055.8 681.8 L1055.24 681.8 L1054.68 681.8 L1054.12 681.8 L1053.56 681.8 L1053 681.8 L1052.44 681.8 L1051.88 681.8 L1051.32 681.8 L1050.76 681.8 L1050.2 681.8 L1049.65 681.8 L1049.09 681.8 L1048.53 681.8 L1047.97 681.8 L1047.41 681.8 L1046.85 681.8 L1046.29 681.8 L1045.73 681.8 L1045.17 681.8 L1044.61 681.8 L1044.05 681.8 L1043.49 681.8 L1042.93 681.8 L1042.38 681.8 L1041.82 681.8 L1041.26 681.8 L1040.7 681.8 L1040.14 681.8 L1039.58 681.8 L1039.02 681.8 L1038.46 681.8 L1037.9 681.8 L1037.34 681.8 L1036.78 681.8 L1036.22 681.8 L1035.66 681.8 L1035.1 681.8 L1034.55 681.8 L1033.99 681.8 L1033.43 681.8 L1032.87 681.8 L1032.31 681.8 L1031.75 681.8 L1031.19 681.8 L1030.63 681.8 L1030.07 681.8 L1029.51 681.8 L1028.95 681.8 L1028.39 681.8 L1027.83 681.8 L1027.28 681.8 L1026.72 681.8 L1026.16 681.8 L1025.6 681.8 L1025.04 681.8 L1024.48 681.8 L1023.92 681.8 L1023.36 681.8 L1022.8 681.8 L1022.24 681.8 L1021.68 681.8 L1021.12 681.8 L1020.56 681.8 L1020.01 681.8 L1019.45 681.8 L1018.89 681.8 L1018.33 681.8 L1017.77 681.8 L1017.21 681.8 L1016.65 681.8 L1016.09 681.8 L1015.53 681.8 L1014.97 681.8 L1014.41 681.8 L1013.85 681.8 L1013.29 681.8 L1012.73 681.8 L1012.18 681.8 L1011.62 681.8 L1011.06 681.8 L1010.5 681.8 L1009.94 681.8 L1009.38 681.8 L1008.82 681.8 L1008.26 681.8 L1007.7 681.8 L1007.14 681.8 L1006.58 681.8 L1006.02 681.8 L1005.46 681.8 L1004.91 681.8 L1004.35 681.8 L1003.79 681.8 L1003.23 681.8 L1002.67 681.8 L1002.11 681.8 L1001.55 681.8 L1000.99 681.8 L1000.43 681.8 L999.872 681.8 L999.313 681.8 L998.754 681.8 L998.194 681.8 L997.635 681.8 L997.076 681.8 L996.517 681.8 L995.957 681.8 L995.398 681.8 L994.839 681.8 L994.28 681.8 L993.72 681.8 L993.161 681.8 L992.602 681.8 L992.043 681.8 L991.483 681.8 L990.924 681.8 L990.365 681.8 L989.806 681.8 L989.246 681.8 L988.687 681.8 L988.128 681.8 L987.569 681.8 L987.009 681.8 L986.45 681.8 L985.891 681.8 L985.332 681.8 L984.772 681.8 L984.213 681.8 L983.654 681.8 L983.095 681.8 L982.535 681.8 L981.976 681.8 L981.417 681.8 L980.858 681.8 L980.298 681.8 L979.739 681.8 L979.18 681.8 L978.621 681.8 L978.061 681.8 L977.502 681.8 L976.943 681.8 L976.384 681.8 L975.824 681.8 L975.265 681.8 L974.706 681.8 L974.147 681.8 L973.587 681.8 L973.028 681.8 L972.469 681.8 L971.91 681.8 L971.35 681.8 L970.791 681.8 L970.232 681.8 L969.673 681.8 L969.113 681.8 L968.554 681.8 L967.995 681.8 L967.436 681.8 L966.876 681.8 L966.317 681.8 L965.758 681.8 L965.199 681.8 L964.639 681.8 L964.08 681.8 L963.521 681.8 L962.962 681.8 L962.402 681.8 L961.843 681.8 L961.284 681.8 L960.725 681.8 L960.165 681.8 L959.606 681.8 L959.047 681.8 L958.488 681.8 L957.928 681.8 L957.369 681.8 L956.81 681.8 L956.251 681.8 L955.691 681.8 L955.132 681.8 L954.573 681.8 L954.014 681.8 L953.454 681.8 L952.895 681.8 L952.336 681.8 L951.777 681.8 L951.217 681.8 L950.658 681.8 L950.099 681.8 L949.54 681.8 L948.98 681.8 L948.421 681.8 L947.862 681.8 L947.303 681.8 L946.743 681.8 L946.184 681.8 L945.625 681.8 L945.066 681.8 L944.506 681.8 L943.947 681.8 L943.388 681.8 L942.829 681.8 L942.269 681.8 L941.71 681.8 L941.151 681.8 L940.592 681.8 L940.032 681.8 L939.473 681.8 L938.914 681.8 L938.355 681.8 L937.795 681.8 L937.236 681.8 L936.677 681.8 L936.118 681.8 L935.558 681.8 L934.999 681.8 L934.44 681.8 L933.881 681.8 L933.321 681.8 L932.762 681.8 L932.203 681.8 L931.644 681.8 L931.084 681.8 L930.525 681.8 L929.966 681.8 L929.406 681.8 L928.847 681.8 L928.288 681.8 L927.729 681.8 L927.169 681.8 L926.61 681.8 L926.051 681.8 L925.492 681.8 L924.932 681.8 L924.373 681.8 L923.814 681.8 L923.255 681.8 L922.695 681.8 L922.136 681.8 L921.577 681.8 L921.018 681.8 L920.458 681.8 L919.899 681.8 L919.34 681.8 L918.781 681.8 L918.221 681.8 L917.662 681.8 L917.103 681.8 L916.544 681.8 L915.984 681.8 L915.425 681.8 L914.866 681.8 L914.307 681.8 L913.747 681.8 L913.188 681.8 L912.629 681.8 L912.07 681.8 L911.51 681.8 L910.951 681.8 L910.392 681.8 L909.833 681.8 L909.273 681.8 L908.714 681.8 L908.155 681.8 L907.596 681.8 L907.036 681.8 L906.477 681.8 L905.918 681.8 L905.359 681.8 L904.799 681.8 L904.24 681.8 L903.681 681.8 L903.122 681.8 L902.562 681.8 L902.003 681.8 L901.444 681.8 L900.885 681.8 L900.325 681.8 L899.766 681.8 L899.207 681.8 L898.648 681.8 L898.088 681.8 L897.529 681.8 L896.97 681.8 L896.411 681.8 L895.851 681.8 L895.292 681.8 L894.733 681.8 L894.174 681.8 L893.614 681.8 L893.055 681.8 L892.496 681.8 L891.937 681.8 L891.377 681.8 L890.818 681.8 L890.259 681.8 L889.7 681.8 L889.14 681.8 L888.581 681.8 L888.022 681.8 L887.463 681.8 L886.903 681.8 L886.344 681.8 L885.785 681.8 L885.226 681.8 L884.666 681.8 L884.107 681.8 L883.548 681.8 L882.989 681.8 L882.429 681.8 L881.87 681.8 L881.311 681.8 L880.752 681.8 L880.192 681.8 L879.633 681.8 L879.074 681.8 L878.515 681.8 L877.955 681.8 L877.396 681.8 L876.837 681.8 L876.278 681.8 L875.718 681.8 L875.159 681.8 L874.6 681.8 L874.041 681.8 L873.481 681.8 L872.922 681.8 L872.363 681.8 L871.804 681.8 L871.244 681.8 L870.685 681.8 L870.126 681.8 L869.567 681.8 L869.007 681.8 L868.448 681.8 L867.889 681.8 L867.33 681.8 L866.77 681.8 L866.211 681.8 L865.652 681.8 L865.093 681.8 L864.533 681.8 L863.974 681.8 L863.415 681.8 L862.856 681.8 L862.296 681.8 L861.737 681.8 L861.178 681.8 L860.619 681.8 L860.059 681.8 L859.5 681.8 L858.941 681.8 L858.382 681.8 L857.822 681.8 L857.263 681.8 L856.704 681.8 L856.145 681.8 L855.585 681.8 L855.026 681.8 L854.467 681.8 L853.908 681.8 L853.348 681.8 L852.789 681.8 L852.23 681.8 L851.671 681.8 L851.111 681.8 L850.552 681.8 L849.993 681.8 L849.434 681.8 L848.874 681.8 L848.315 681.8 L847.756 681.8 L847.197 681.8 L846.637 681.8 L846.078 681.8 L845.519 681.8 L844.96 681.8 L844.4 681.8 L843.841 681.8 L843.282 681.8 L842.723 681.8 L842.163 681.8 L841.604 681.8 L841.045 681.8 L840.486 681.8 L839.926 681.8 L839.367 681.8 L838.808 681.8 L838.249 681.8 L837.689 681.8 L837.13 681.8 L836.571 681.8 L836.012 681.8 L835.452 681.8 L834.893 681.8 L834.334 681.8 L833.775 681.8 L833.215 681.8 L832.656 681.8 L832.097 681.8 L831.538 681.8 L830.978 681.8 L830.419 681.8 L829.86 681.8 L829.301 681.8 L828.741 681.8 L828.182 681.8 L827.623 681.8 L827.064 681.8 L826.504 681.8 L825.945 681.8 L825.386 681.8 L824.827 681.8 L824.267 681.8 L823.708 681.8 L823.149 681.8 L822.59 681.8 L822.03 681.8 L821.471 681.8 L820.912 681.8 L820.353 681.8 L819.793 681.8 L819.234 681.8 L818.675 681.8 L818.116 681.8 L817.556 681.8 L816.997 681.8 L816.438 681.8 L815.879 681.8 L815.319 681.8 L814.76 681.8 L814.201 681.8 L813.642 681.8 L813.082 681.8 L812.523 681.8 L811.964 681.8 L811.405 681.8 L810.845 681.8 L810.286 681.8 L809.727 681.8 L809.168 681.8 L808.608 681.8 L808.049 681.8 L807.49 681.8 L806.931 681.8 L806.371 681.8 L805.812 681.8 L805.253 681.8 L804.693 681.8 L804.134 681.8 L803.575 681.8 L803.016 681.8 L802.456 681.8 L801.897 681.8 L801.338 681.8 L800.779 681.8 L800.219 681.8 L799.66 681.8 L799.101 681.8 L798.542 681.8 L797.982 681.8 L797.423 681.8 L796.864 681.8 L796.305 681.8 L795.745 681.8 L795.186 681.8 L794.627 681.8 L794.068 681.8 L793.508 681.8 L792.949 681.8 L792.39 681.8 L791.831 681.8 L791.271 681.8 L790.712 681.8 L790.153 681.8 L789.594 681.8 L789.034 681.8 L788.475 681.8 L787.916 681.8 L787.357 681.8 L786.797 681.8 L786.238 681.8 L785.679 681.8 L785.12 681.8 L784.56 681.8 L784.001 681.8 L783.442 681.8 L782.883 681.8 L782.323 681.8 L781.764 681.8 L781.205 681.8 L780.646 681.8 L780.086 681.8 L779.527 681.8 L778.968 681.8 L778.409 681.8 L777.849 681.8 L777.29 681.8 L776.731 681.8 L776.172 681.8 L775.612 681.8 L775.053 681.8 L774.494 681.8 L773.935 681.8 L773.375 681.8 L772.816 681.8 L772.257 681.8 L771.698 681.8 L771.138 681.8 L770.579 681.8 L770.02 681.8 L769.461 681.8 L768.901 681.8 L768.342 681.8 L767.783 681.8 L767.224 681.8 L766.664 681.8 L766.105 681.8 L765.546 681.8 L764.987 681.8 L764.427 681.8 L763.868 681.8 L763.309 681.8 L762.75 681.8 L762.19 681.8 L761.631 681.8 L761.072 681.8 L760.513 681.8 L759.953 681.8 L759.394 681.8 L758.835 681.8 L758.276 681.8 L757.716 681.8 L757.157 681.8 L756.598 681.8 L756.039 681.8 L755.479 681.8 L754.92 681.8 L754.361 681.8 L753.802 681.8 L753.242 681.8 L752.683 681.8 L752.124 681.8 L751.565 681.8 L751.005 681.8 L750.446 681.8 L749.887 681.8 L749.328 681.8 L748.768 681.8 L748.209 681.8 L747.65 681.8 L747.091 681.8 L746.531 681.8 L745.972 681.8 L745.413 681.8 L744.854 681.8 L744.294 681.8 L743.735 681.8 L743.176 681.8 L742.617 681.8 L742.057 681.8 L741.498 681.8 L740.939 681.8 L740.38 681.8 L739.82 681.8 L739.261 681.8 L738.702 681.8 L738.143 681.8 L737.583 681.8 L737.024 681.8 L736.465 681.8 L735.906 681.8 L735.346 681.8 L734.787 681.8 L734.228 681.8 L733.669 681.8 L733.109 681.8 L732.55 681.8 L731.991 681.8 L731.432 681.8 L730.872 681.8 L730.313 681.8 L729.754 681.8 L729.195 681.8 L728.635 681.8 L728.076 681.8 L727.517 681.8 L726.958 681.8 L726.398 681.8 L725.839 681.8 L725.28 681.8 L724.721 681.8 L724.161 681.8 L723.602 681.8 L723.043 681.8 L722.484 681.8 L721.924 681.8 L721.365 681.8 L720.806 681.8 L720.247 681.8  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.275 720.806,683.275 721.365,683.275 721.924,683.275 722.484,683.275 723.043,683.275 723.602,683.275 724.161,683.275 724.721,683.275 725.28,683.275 725.839,683.275 726.398,683.275 726.958,683.275 727.517,683.275 728.076,683.275 728.635,683.275 729.195,683.275 729.754,683.275 730.313,683.275 730.872,683.275 731.432,683.275 731.991,683.275 732.55,683.275 733.109,683.275 733.669,683.275 734.228,683.275 734.787,683.275 735.346,683.275 735.906,683.275 736.465,683.275 737.024,683.275 737.583,683.275 738.143,683.275 738.702,683.275 739.261,683.275 739.82,683.275 740.38,683.275 740.939,683.275 741.498,683.275 742.057,683.275 742.617,683.275 743.176,683.275 743.735,683.275 744.294,683.275 744.854,683.275 745.413,683.275 745.972,683.275 746.531,683.275 747.091,683.275 747.65,683.275 748.209,683.275 748.768,683.275 749.328,683.275 749.887,683.275 750.446,683.275 751.005,683.275 751.565,683.275 752.124,683.275 752.683,683.275 753.242,683.275 753.802,683.275 754.361,683.275 754.92,683.275 755.479,683.275 756.039,683.275 756.598,683.275 757.157,683.275 757.716,683.275 758.276,683.275 758.835,683.275 759.394,683.275 759.953,683.275 760.513,683.275 761.072,683.275 761.631,683.275 762.19,683.275 762.75,683.275 763.309,683.275 763.868,683.275 764.427,683.275 764.987,683.275 765.546,683.275 766.105,683.275 766.664,683.275 767.224,683.275 767.783,683.275 768.342,683.275 768.901,683.275 769.461,683.275 770.02,683.275 770.579,683.275 771.138,683.275 771.698,683.275 772.257,683.275 772.816,683.275 773.375,683.275 773.935,683.275 774.494,683.275 775.053,683.275 775.612,683.275 776.172,683.275 776.731,683.275 777.29,683.275 777.849,683.275 778.409,683.275 778.968,683.275 779.527,683.275 780.086,683.275 780.646,683.275 781.205,683.275 781.764,683.275 782.323,683.275 782.883,683.275 783.442,683.275 784.001,683.275 784.56,683.275 785.12,683.275 785.679,683.275 786.238,683.275 786.797,683.275 787.357,683.275 787.916,683.275 788.475,683.275 789.034,683.275 789.594,683.275 790.153,683.275 790.712,683.275 791.271,683.275 791.831,683.275 792.39,683.275 792.949,683.275 793.508,683.275 794.068,683.275 794.627,683.275 795.186,683.275 795.745,683.275 796.305,683.275 796.864,683.275 797.423,683.275 797.982,683.275 798.542,683.275 799.101,683.275 799.66,683.275 800.219,683.275 800.779,683.275 801.338,683.275 801.897,683.275 802.456,683.275 803.016,683.275 803.575,683.275 804.134,683.275 804.693,683.275 805.253,683.275 805.812,683.275 806.371,683.275 806.931,683.275 807.49,683.275 808.049,683.275 808.608,683.275 809.168,683.275 809.727,683.275 810.286,683.275 810.845,683.275 811.405,683.275 811.964,683.275 812.523,683.275 813.082,683.275 813.642,683.275 814.201,683.275 814.76,683.275 815.319,683.275 815.879,683.275 816.438,683.275 816.997,683.275 817.556,683.275 818.116,683.275 818.675,683.275 819.234,683.275 819.793,683.275 820.353,683.275 820.912,683.275 821.471,683.275 822.03,683.275 822.59,683.275 823.149,683.275 823.708,683.275 824.267,683.275 824.827,683.275 825.386,683.275 825.945,683.275 826.504,683.275 827.064,683.275 827.623,683.275 828.182,683.275 828.741,683.275 829.301,683.275 829.86,683.275 830.419,683.275 830.978,683.275 831.538,683.275 832.097,683.275 832.656,683.275 833.215,683.275 833.775,683.275 834.334,683.275 834.893,683.275 835.452,683.275 836.012,683.275 836.571,683.275 837.13,683.275 837.689,683.275 838.249,683.275 838.808,683.275 839.367,683.275 839.926,683.275 840.486,683.275 841.045,683.275 841.604,683.275 842.163,683.275 842.723,683.275 843.282,683.275 843.841,683.275 844.4,683.275 844.96,683.275 845.519,683.275 846.078,683.275 846.637,683.275 847.197,683.275 847.756,683.275 848.315,683.275 848.874,683.275 849.434,683.275 849.993,683.275 850.552,683.275 851.111,683.275 851.671,683.275 852.23,683.275 852.789,683.275 853.348,683.275 853.908,683.275 854.467,683.275 855.026,683.275 855.585,683.275 856.145,683.275 856.704,683.275 857.263,683.275 857.822,683.275 858.382,683.275 858.941,683.275 859.5,683.275 860.059,683.275 860.619,683.275 861.178,683.275 861.737,683.275 862.296,683.275 862.856,683.275 863.415,683.275 863.974,683.275 864.533,683.275 865.093,683.275 865.652,683.275 866.211,683.275 866.77,683.275 867.33,683.275 867.889,683.275 868.448,683.275 869.007,683.275 869.567,683.275 870.126,683.275 870.685,683.275 871.244,683.275 871.804,683.275 872.363,683.275 872.922,683.275 873.481,683.275 874.041,683.275 874.6,683.275 875.159,683.275 875.718,683.275 876.278,683.275 876.837,683.275 877.396,683.275 877.955,683.275 878.515,683.275 879.074,683.275 879.633,683.275 880.192,683.275 880.752,683.275 881.311,683.275 881.87,683.275 882.429,683.275 882.989,683.275 883.548,683.275 884.107,683.275 884.666,683.275 885.226,683.275 885.785,683.275 886.344,683.275 886.903,683.275 887.463,683.275 888.022,683.275 888.581,683.275 889.14,683.275 889.7,683.275 890.259,683.275 890.818,683.275 891.377,683.275 891.937,683.275 892.496,683.275 893.055,683.275 893.614,683.275 894.174,683.275 894.733,683.275 895.292,683.275 895.851,683.275 896.411,683.275 896.97,683.275 897.529,683.275 898.088,683.275 898.648,683.275 899.207,683.275 899.766,683.275 900.325,683.275 900.885,683.275 901.444,683.275 902.003,683.275 902.562,683.275 903.122,683.275 903.681,683.275 904.24,683.275 904.799,683.275 905.359,683.275 905.918,683.275 906.477,683.275 907.036,683.275 907.596,683.275 908.155,683.275 908.714,683.275 909.273,683.275 909.833,683.275 910.392,683.275 910.951,683.275 911.51,683.275 912.07,683.275 912.629,683.275 913.188,683.275 913.747,683.275 914.307,683.275 914.866,683.275 915.425,683.275 915.984,683.275 916.544,683.275 917.103,683.275 917.662,683.275 918.221,683.275 918.781,683.275 919.34,683.275 919.899,683.275 920.458,683.275 921.018,683.275 921.577,683.275 922.136,683.275 922.695,683.275 923.255,683.275 923.814,683.275 924.373,683.275 924.932,683.275 925.492,683.275 926.051,683.275 926.61,683.275 927.169,683.275 927.729,683.275 928.288,683.275 928.847,683.275 929.406,683.275 929.966,683.275 930.525,683.275 931.084,683.275 931.644,683.275 932.203,683.275 932.762,683.275 933.321,683.275 933.881,683.275 934.44,683.275 934.999,683.275 935.558,683.275 936.118,683.275 936.677,683.275 937.236,683.275 937.795,683.275 938.355,683.275 938.914,683.275 939.473,683.275 940.032,683.275 940.592,683.275 941.151,683.275 941.71,683.275 942.269,683.275 942.829,683.275 943.388,683.275 943.947,683.275 944.506,683.275 945.066,683.275 945.625,683.275 946.184,683.275 946.743,683.275 947.303,683.275 947.862,683.275 948.421,683.275 948.98,683.275 949.54,683.275 950.099,683.275 950.658,683.275 951.217,683.275 951.777,683.275 952.336,683.275 952.895,683.275 953.454,683.275 954.014,683.275 954.573,683.275 955.132,683.275 955.691,683.275 956.251,683.275 956.81,683.275 957.369,683.275 957.928,683.275 958.488,683.275 959.047,683.275 959.606,683.275 960.165,683.275 960.725,683.275 961.284,683.275 961.843,683.275 962.402,683.275 962.962,683.275 963.521,683.275 964.08,683.275 964.639,683.275 965.199,683.275 965.758,683.275 966.317,683.275 966.876,683.275 967.436,683.275 967.995,683.275 968.554,683.275 969.113,683.275 969.673,683.275 970.232,683.275 970.791,683.275 971.35,683.275 971.91,683.275 972.469,683.275 973.028,683.275 973.587,683.275 974.147,683.275 974.706,683.275 975.265,683.275 975.824,683.275 976.384,683.275 976.943,683.275 977.502,683.275 978.061,683.275 978.621,683.275 979.18,683.275 979.739,683.275 980.298,683.275 980.858,683.275 981.417,683.275 981.976,683.275 982.535,683.275 983.095,683.275 983.654,683.275 984.213,683.275 984.772,683.275 985.332,683.275 985.891,683.275 986.45,683.275 987.009,683.275 987.569,683.275 988.128,683.275 988.687,683.275 989.246,683.275 989.806,683.275 990.365,683.275 990.924,683.275 991.483,683.275 992.043,683.275 992.602,683.275 993.161,683.275 993.72,683.275 994.28,683.275 994.839,683.275 995.398,683.275 995.957,683.275 996.517,683.275 997.076,683.275 997.635,683.275 998.194,683.275 998.754,683.275 999.313,683.275 999.872,683.275 1000.43,683.275 1000.99,683.275 1001.55,683.275 1002.11,683.275 1002.67,683.275 1003.23,683.275 1003.79,683.275 1004.35,683.275 1004.91,683.275 1005.46,683.275 1006.02,683.275 1006.58,683.275 1007.14,683.275 1007.7,683.275 1008.26,683.275 1008.82,683.275 1009.38,683.275 1009.94,683.275 1010.5,683.275 1011.06,683.275 1011.62,683.275 1012.18,683.275 1012.73,683.275 1013.29,683.275 1013.85,683.275 1014.41,683.275 1014.97,683.275 1015.53,683.275 1016.09,683.275 1016.65,683.275 1017.21,683.275 1017.77,683.275 1018.33,683.275 1018.89,683.275 1019.45,683.275 1020.01,683.275 1020.56,683.275 1021.12,683.275 1021.68,683.275 1022.24,683.275 1022.8,683.275 1023.36,683.275 1023.92,683.275 1024.48,683.275 1025.04,683.275 1025.6,683.275 1026.16,683.275 1026.72,683.275 1027.28,683.275 1027.83,683.275 1028.39,683.275 1028.95,683.275 1029.51,683.275 1030.07,683.275 1030.63,683.275 1031.19,683.275 1031.75,683.275 1032.31,683.275 1032.87,683.275 1033.43,683.275 1033.99,683.275 1034.55,683.275 1035.1,683.275 1035.66,683.275 1036.22,683.275 1036.78,683.275 1037.34,683.275 1037.9,683.275 1038.46,683.275 1039.02,683.275 1039.58,683.275 1040.14,683.275 1040.7,683.275 1041.26,683.275 1041.82,683.275 1042.38,683.275 1042.93,683.275 1043.49,683.275 1044.05,683.275 1044.61,683.275 1045.17,683.275 1045.73,683.275 1046.29,683.275 1046.85,683.275 1047.41,683.275 1047.97,683.275 1048.53,683.275 1049.09,683.275 1049.65,683.275 1050.2,683.275 1050.76,683.275 1051.32,683.275 1051.88,683.275 1052.44,683.275 1053,683.275 1053.56,683.275 1054.12,683.275 1054.68,683.275 1055.24,683.275 1055.8,683.275 1056.36,683.275 1056.92,683.275 1057.48,683.275 1058.03,683.275 1058.59,683.275 1059.15,683.275 1059.71,683.275 1060.27,683.275 1060.83,683.275 1061.39,683.275 1061.95,683.275 1062.51,683.275 1063.07,683.275 1063.63,683.275 1064.19,683.275 1064.75,683.275 1065.3,683.275 1065.86,683.275 1066.42,683.275 1066.98,683.275 1067.54,683.275 1068.1,683.275 1068.66,683.275 1069.22,683.275 1069.78,683.275 1070.34,683.275 1070.9,683.275 1071.46,683.275 1072.02,683.275 1072.57,683.275 1073.13,683.275 1073.69,683.275 1074.25,683.275 1074.81,683.275 1075.37,683.275 1075.93,683.275 1076.49,683.275 1077.05,683.275 1077.61,683.275 1078.17,683.275 1078.73,683.275 1079.29,683.275 1079.85,683.275 1080.4,683.275 1080.96,683.275 1081.52,683.275 1082.08,683.275 1082.64,683.275 1083.2,683.275 1083.76,683.275 1084.32,683.275 1084.88,683.275 1085.44,683.275 1086,683.275 1086.56,683.275 1087.12,683.275 1087.67,683.275 1088.23,683.275 1088.79,683.275 1089.35,683.275 1089.91,683.275 1090.47,683.275 1091.03,683.275 1091.59,683.275 1092.15,683.275 1092.71,683.275 1093.27,683.275 1093.83,683.275 1094.39,683.275 1094.94,683.275 1095.5,683.275 1096.06,683.275 1096.62,683.275 1097.18,683.275 1097.74,683.275 1098.3,683.275 1098.86,683.275 1099.42,683.275 1099.98,683.275 1100.54,683.275 1101.1,683.275 1101.66,683.275 1102.22,683.275 1102.77,683.275 1103.33,683.275 1103.89,683.275 1104.45,683.275 1105.01,683.275 1105.57,683.275 1106.13,683.275 1106.69,683.275 1107.25,683.275 1107.81,683.275 1108.37,683.275 1108.93,683.275 1109.49,683.275 1110.04,683.275 1110.6,683.275 1111.16,683.275 1111.72,683.275 1112.28,683.275 1112.84,683.275 1113.4,683.275 1113.96,683.275 1114.52,683.275 1115.08,683.275 1115.64,683.275 1116.2,683.275 1116.76,683.275 1117.31,683.275 1117.87,683.275 1118.43,683.275 1118.99,683.275 1119.55,683.275 1120.11,683.275 1120.67,683.275 1121.23,683.275 1121.79,683.275 1122.35,683.275 1122.91,683.275 1123.47,683.275 1124.03,683.275 1124.59,683.275 1125.14,683.275 1125.7,683.275 1126.26,683.275 1126.82,683.275 1127.38,683.275 1127.94,683.275 1128.5,683.275 1129.06,683.275 1129.62,683.275 1130.18,683.275 1130.74,683.275 1131.3,683.275 1131.86,683.275 1132.41,683.275 1132.97,683.275 1133.53,683.275 1134.09,683.275 1134.65,683.275 1135.21,683.275 1135.77,683.275 1136.33,683.275 1136.89,683.275 1137.45,683.275 1138.01,683.275 1138.57,683.275 1139.13,683.275 1139.68,683.275 1140.24,683.275 1140.8,683.275 1141.36,683.275 1141.92,683.275 1142.48,683.275 1143.04,683.275 1143.6,683.275 1144.16,683.275 1144.72,683.275 1145.28,683.275 1145.84,683.275 1146.4,683.275 1146.96,683.275 1147.51,683.275 1148.07,683.275 1148.63,683.275 1149.19,683.275 1149.75,683.275 1150.31,683.275 1150.87,683.275 1151.43,683.275 1151.99,683.275 1152.55,683.275 1153.11,683.275 1153.67,683.275 1154.23,683.275 1154.78,683.275 1155.34,683.275 1155.9,683.275 1156.46,683.275 1157.02,683.275 1157.58,683.275 1158.14,683.275 1158.7,683.275 1159.26,683.275 1159.82,683.275 1160.38,683.275 1160.94,683.275 1161.5,683.275 1162.05,683.275 1162.61,683.275 1163.17,683.275 1163.73,683.275 1164.29,683.275 1164.85,683.275 1165.41,683.275 1165.97,683.275 1166.53,683.275 1167.09,683.275 1167.65,683.275 1168.21,683.275 1168.77,683.275 1169.33,683.275 1169.88,683.275 1170.44,683.275 1171,683.275 1171.56,683.275 1172.12,683.275 1172.68,683.275 1173.24,683.275 1173.8,683.275 1174.36,683.275 1174.92,683.275 1175.48,683.275 1176.04,683.275 1176.6,683.275 1177.15,683.275 1177.71,683.275 1178.27,683.275 1178.83,683.275 1179.39,683.275 1179.95,683.275 1180.51,683.275 1181.07,683.275 1181.63,683.275 1182.19,683.275 1182.75,683.275 1183.31,683.275 1183.87,683.275 1184.43,683.275 1184.98,683.275 1185.54,683.275 1186.1,683.275 1186.66,683.275 1187.22,683.275 1187.78,683.275 1188.34,683.275 1188.9,683.275 1189.46,683.275 1190.02,683.275 1190.58,683.275 1191.14,683.275 1191.7,683.275 1192.25,683.275 1192.81,683.275 1193.37,683.275 1193.93,683.275 1194.49,683.275 1195.05,683.275 1195.61,683.275 1196.17,683.275 1196.73,683.275 1197.29,683.275 1197.85,683.275 1198.41,683.275 1198.97,683.275 1199.52,683.275 1200.08,683.275 1200.64,683.275 1201.2,683.275 1201.76,683.275 1202.32,683.275 1202.88,683.275 1203.44,683.275 1204,683.275 1204.56,683.275 1205.12,683.275 1205.68,683.275 1206.24,683.275 1206.8,683.275 1207.35,683.275 1207.91,683.275 1208.47,683.275 1209.03,683.275 1209.59,683.275 1210.15,683.275 1210.71,683.275 1211.27,683.275 1211.83,683.275 1212.39,683.275 1212.95,683.275 1213.51,683.275 1214.07,683.275 1214.62,683.275 1215.18,683.275 1215.74,683.275 1216.3,683.275 1216.86,683.275 1217.42,683.275 1217.98,683.275 1218.54,683.275 1219.1,683.275 1219.66,683.275 1220.22,683.275 1220.78,683.275 1221.34,683.275 1221.89,683.275 1222.45,683.275 1223.01,683.275 1223.57,683.275 1224.13,683.275 1224.69,683.275 1225.25,683.275 1225.81,683.275 1226.37,683.275 1226.93,683.275 1227.49,683.275 1228.05,683.275 1228.61,683.275 1229.17,683.275 1229.72,683.275 1230.28,683.275 1230.84,683.275 1231.4,683.275 1231.96,683.275 1232.52,683.275 1233.08,683.275 1233.64,683.275 1234.2,683.275 1234.76,683.275 1235.32,683.275 1235.88,683.275 1236.44,683.275 1236.99,683.275 1237.55,683.275 1238.11,683.275 1238.67,683.275 1239.23,683.275 1239.79,683.275 1240.35,683.275 1240.91,683.275 1241.47,683.275 1242.03,683.275 1242.59,683.275 1243.15,683.275 1243.71,683.275 1244.26,683.275 1244.82,683.275 1245.38,683.275 1245.94,683.275 1246.5,683.275 1247.06,683.275 1247.62,683.275 1248.18,683.275 1248.74,683.275 1249.3,683.275 1249.86,683.275 1250.42,683.275 1250.98,683.275 1251.54,683.275 1252.09,683.275 1252.65,683.275 1253.21,683.275 1253.77,683.275 1254.33,683.275 1254.89,683.275 1255.45,683.275 1256.01,683.275 1256.57,683.275 1257.13,683.275 1257.69,683.275 1258.25,683.275 1258.81,683.275 1259.36,683.275 1259.92,683.275 1260.48,683.275 1261.04,683.275 1261.6,683.275 1262.16,683.275 1262.72,683.275 1263.28,683.275 1263.84,683.275 1264.4,683.275 1264.96,683.275 1265.52,683.275 1266.08,683.275 1266.63,683.275 1267.19,683.275 1267.75,683.275 1268.31,683.275 1268.87,683.275 1269.43,683.275 1269.99,683.275 1270.55,683.275 1271.11,683.275 1271.67,683.275 1272.23,683.275 1272.79,683.275 1273.35,683.275 1273.91,683.275 1274.46,683.275 1275.02,683.275 1275.58,683.275 1276.14,683.275 1276.7,683.275 1277.26,683.275 1277.82,683.275 1278.38,683.275 1278.94,683.275 1279.5,683.275 1280.06,683.275 1280.62,683.275 1281.18,683.275 1281.73,683.275 1282.29,683.275 1282.85,683.275 1283.41,683.275 1283.97,683.275 1284.53,683.275 1285.09,683.275 1285.65,683.275 1286.21,683.275 1286.77,683.275 1287.33,683.275 1287.89,683.275 1288.45,683.275 1289,683.275 1289.56,683.275 1290.12,683.275 1290.68,683.275 1291.24,683.275 1291.8,683.275 1292.36,683.275 1292.92,683.275 1293.48,683.275 1294.04,683.275 1294.6,683.275 1295.16,683.275 1295.72,683.275 1296.28,683.275 1296.83,683.275 1297.39,683.275 1297.95,683.275 1298.51,683.275 1299.07,683.275 1299.63,683.275 1300.19,683.275 1300.75,683.275 1301.31,683.275 1301.87,683.275 1302.43,683.275 1302.99,683.275 1303.55,683.275 1304.1,683.275 1304.66,683.275 1305.22,683.275 1305.78,683.275 1306.34,683.275 1306.9,683.275 1307.46,683.275 1308.02,683.275 1308.58,683.275 1309.14,683.275 1309.7,683.275 1310.26,683.275 1310.82,683.275 1311.38,683.275 1311.93,683.275 1312.49,683.275 1313.05,683.275 1313.61,683.275 1314.17,683.275 1314.73,683.275 1315.29,683.275 1315.85,683.275 1316.41,683.275 1316.97,683.275 1317.53,683.275 1318.09,683.275 1318.65,683.275 1319.2,683.275 1319.76,683.275 1320.32,683.275 1320.88,683.275 1321.44,683.275 1322,683.275 1322.56,683.275 1323.12,683.275 1323.68,683.275 1324.24,683.275 1324.8,683.275 1325.36,683.275 1325.92,683.275 1326.47,683.275 1327.03,683.275 1327.59,683.275 1328.15,683.275 1328.71,683.275 1329.27,683.275 1329.83,683.275 1330.39,683.275 1330.95,683.275 1331.51,683.275 1332.07,683.275 1332.63,683.275 1333.19,683.275 1333.75,683.275 1334.3,683.275 1334.86,683.275 1335.42,683.275 1335.98,683.275 1336.54,683.275 1337.1,683.275 1337.66,683.275 1338.22,683.275 1338.78,683.275 1339.34,683.275 1339.9,683.275 1340.46,683.275 1341.02,683.275 1341.57,683.275 1342.13,683.275 1342.69,683.275 1343.25,683.275 1343.81,683.275 1344.37,683.275 1344.93,683.275 1345.49,683.275 1346.05,683.275 1346.61,683.275 1347.17,683.275 1347.73,683.275 1348.29,683.275 1348.84,683.275 1349.4,683.275 1349.96,683.275 1350.52,683.275 1351.08,683.275 1351.64,683.275 1352.2,683.275 1352.76,683.275 1353.32,683.275 1353.88,683.275 1354.44,683.275 1355,683.275 1355.56,683.275 1356.12,683.275 1356.67,683.275 1357.23,683.275 1357.79,683.275 1358.35,683.275 1358.91,683.275 1359.47,683.275 1360.03,683.275 1360.59,683.275 1361.15,683.275 1361.71,683.275 1362.27,683.275 1362.83,683.275 1363.39,683.275 1363.94,683.275 1364.5,683.275 1365.06,683.275 1365.62,683.275 1366.18,683.275 1366.74,683.275 1367.3,683.275 1367.86,683.275 1368.42,683.275 1368.98,683.275 1369.54,683.275 1370.1,683.275 1370.66,683.275 1371.21,683.275 1371.77,683.275 1372.33,683.275 1372.89,683.275 1373.45,683.275 1374.01,683.275 1374.57,683.275 1375.13,683.275 1375.69,683.275 1376.25,683.275 1376.81,683.275 1377.37,683.275 1377.93,683.275 1378.49,683.275 1379.04,683.275 1379.6,683.275 1380.16,683.275 1380.72,683.275 1381.28,683.275 1381.84,683.275 1382.4,683.275 1382.96,683.275 1383.52,683.275 1384.08,683.275 1384.64,683.275 1385.2,683.275 1385.76,683.275 1386.31,683.275 1386.87,683.275 1387.43,683.275 1387.99,683.275 1388.55,683.275 1389.11,683.275 1389.67,683.275 1390.23,683.275 1390.79,683.275 1391.35,683.275 1391.91,683.275 1392.47,683.275 1393.03,683.275 1393.58,683.275 1394.14,683.275 1394.7,683.275 1395.26,683.275 1395.82,683.275 1396.38,683.275 1396.94,683.275 1397.5,683.275 1398.06,683.275 1398.62,683.275 1399.18,683.275 1399.74,683.275 1400.3,683.275 1400.86,683.275 1401.41,683.275 1401.97,683.275 1402.53,683.275 1403.09,683.275 1403.65,683.275 1404.21,683.275 1404.77,683.275 1405.33,683.275 1405.89,683.275 1406.45,683.275 1407.01,683.275 1407.57,683.275 1408.13,683.275 1408.68,683.275 1409.24,683.275 1409.8,683.275 1410.36,683.275 1410.92,683.275 1411.48,683.275 1412.04,683.275 1412.6,683.275 1413.16,683.275 1413.72,683.275 1414.28,683.275 1414.84,683.275 1415.4,683.275 1415.95,683.275 1416.51,683.275 1417.07,683.275 1417.63,683.275 1418.19,683.275 1418.75,683.275 1419.31,683.275 1419.87,683.275 1420.43,683.275 1420.99,683.275 1421.55,683.275 1422.11,683.275 1422.67,683.275 1423.23,683.275 1423.78,683.275 1424.34,683.275 1424.9,683.275 1425.46,683.275 1426.02,683.275 1426.58,683.275 1427.14,683.275 1427.7,683.275 1428.26,683.275 1428.82,683.275 1429.38,683.275 1429.94,683.275 1430.5,683.275 1431.05,683.275 1431.61,683.275 1432.17,683.275 1432.73,683.275 1433.29,683.275 1433.85,683.275 1434.41,683.275 1434.97,683.275 1435.53,683.275 1436.09,683.275 1436.65,683.275 1437.21,683.275 1437.77,683.275 1438.33,683.275 1438.88,683.275 1439.44,683.275 1440,683.275 1440.56,683.275 1441.12,683.275 1441.68,683.275 1442.24,683.275 1442.8,683.275 1443.36,683.275 1443.92,683.275 1444.48,683.275 1445.04,683.275 1445.6,683.275 1446.15,683.275 1446.71,683.275 1447.27,683.275 1447.83,683.275 1448.39,683.275 1448.95,683.275 1449.51,683.275 1450.07,683.275 1450.63,683.275 1451.19,683.275 1451.75,683.275 1452.31,683.275 1452.87,683.275 1453.42,683.275 1453.98,683.275 1454.54,683.275 1455.1,683.275 1455.66,683.275 1456.22,683.275 1456.78,683.275 1457.34,683.275 1457.9,683.275 1458.46,683.275 1459.02,683.275 1459.58,683.275 1460.14,683.275 1460.7,683.275 1461.25,683.275 1461.81,683.275 1462.37,683.275 1462.93,683.275 1463.49,683.275 1464.05,683.275 1464.61,683.275 1465.17,683.275 1465.73,683.275 1466.29,683.275 1466.85,683.275 1467.41,683.275 1467.97,683.275 1468.52,683.275 1469.08,683.275 1469.64,683.275 1470.2,683.275 1470.76,683.275 1471.32,683.275 1471.88,683.275 1472.44,683.275 1473,683.275 1473.56,683.275 1474.12,683.275 1474.68,683.275 1475.24,683.275 1475.79,683.275 1476.35,683.275 1476.91,683.275 1477.47,683.275 1478.03,683.275 1478.59,683.275 1479.15,683.275 1479.71,683.275 1480.27,683.275 1480.83,683.275 1481.39,683.275 1481.95,683.275 1482.51,683.275 1483.07,683.275 1483.62,683.275 1484.18,683.275 1484.74,683.275 1485.3,683.275 1485.86,683.275 1486.42,683.275 1486.98,683.275 1487.54,683.275 1488.1,683.275 1488.66,683.275 1489.22,683.275 1489.78,683.275 1490.34,683.275 1490.89,683.275 1491.45,683.275 1492.01,683.275 1492.57,683.275 1493.13,683.275 1493.69,683.275 1494.25,683.275 1494.81,683.275 1495.37,683.275 1495.93,683.275 1496.49,683.275 1497.05,683.275 1497.61,683.275 1498.16,683.275 1498.72,683.275 1499.28,683.275 1499.84,683.275 1500.4,683.275 1500.96,683.275 1501.52,683.275 1502.08,683.275 1502.64,683.275 1503.2,683.275 1503.76,683.275 1504.32,683.275 1504.88,683.275 1505.44,683.275 1505.99,683.275 1506.55,683.275 1507.11,683.275 1507.67,683.275 1508.23,683.275 1508.79,683.275 1509.35,683.275 1509.91,683.275 1510.47,683.275 1511.03,683.275 1511.59,683.275 1512.15,683.275 1512.71,683.275 1513.26,683.275 1513.82,683.275 1514.38,683.275 1514.94,683.275 1515.5,683.275 1516.06,683.275 1516.62,683.275 1517.18,683.275 1517.74,683.275 1518.3,683.275 1518.86,683.275 1519.42,683.275 1519.98,683.275 1520.53,683.275 1521.09,683.275 1521.65,683.275 1522.21,683.275 1522.77,683.275 1523.33,683.275 1523.89,683.275 1524.45,683.275 1525.01,683.275 1525.57,683.275 1526.13,683.275 1526.69,683.275 1527.25,683.275 1527.81,683.275 1528.36,683.275 1528.92,683.275 1529.48,683.275 1530.04,683.275 1530.6,683.275 1531.16,683.275 1531.72,683.275 1532.28,683.275 1532.84,683.275 1533.4,683.275 1533.96,683.275 1534.52,683.275 1535.08,683.275 1535.63,683.275 1536.19,683.275 1536.75,683.275 1537.31,683.275 1537.87,683.275 1538.43,683.275 1538.99,683.275 1539.55,683.275 1540.11,683.275 1540.67,683.275 1541.23,683.275 1541.79,683.275 1542.35,683.275 1542.9,683.275 1543.46,683.275 1544.02,683.275 1544.58,683.275 1545.14,683.275 1545.7,683.275 1546.26,683.275 1546.82,683.275 1547.38,683.275 1547.94,683.275 1548.5,683.275 1549.06,683.275 1549.62,683.275 1550.18,683.275 1550.73,683.275 1551.29,683.275 1551.85,683.275 1552.41,683.275 1552.97,683.275 1553.53,683.275 1554.09,683.275 1554.65,683.275 1555.21,683.275 1555.77,683.275 1556.33,683.275 1556.89,683.275 1557.45,683.275 1558,683.275 1558.56,683.275 1559.12,683.275 1559.68,683.275 1560.24,683.275 1560.8,683.275 1561.36,683.275 1561.92,683.275 1562.48,683.275 1563.04,683.275 1563.6,683.275 1564.16,683.275 1564.72,683.275 1565.28,683.275 1565.83,683.275 1566.39,683.275 1566.95,683.275 1567.51,683.275 1568.07,683.275 1568.63,683.275 1569.19,683.275 1569.75,683.275 1570.31,683.275 1570.87,683.275 1571.43,683.275 1571.99,683.275 1572.55,683.275 1573.1,683.275 1573.66,683.275 1574.22,683.275 1574.78,683.275 1575.34,683.275 1575.9,683.275 1576.46,683.275 1577.02,683.275 1577.58,683.275 1578.14,683.275 1578.7,683.275 1579.26,683.275 1579.82,683.275 1580.37,683.275 1580.93,683.275 1581.49,683.275 1582.05,683.275 1582.61,683.275 1583.17,683.275 1583.73,683.275 1584.29,683.275 1584.85,683.275 1585.41,683.275 1585.97,683.275 1586.53,683.275 1587.09,683.275 1587.65,683.275 1588.2,683.275 1588.76,683.275 1589.32,683.275 1589.88,683.275 1590.44,683.275 1591,683.275 1591.56,683.275 1592.12,683.275 1592.68,683.275 1593.24,683.275 1593.8,683.275 1594.36,683.275 1594.92,683.275 1595.47,683.275 1596.03,683.275 1596.59,683.275 1597.15,683.275 1597.71,683.275 1598.27,683.275 1598.83,683.275 1599.39,683.275 1599.95,683.275 1600.51,683.275 1601.07,683.275 1601.63,683.275 1602.19,683.275 1602.74,683.275 1603.3,683.275 1603.86,683.275 1604.42,683.275 1604.98,683.275 1605.54,683.275 1606.1,683.275 1606.66,683.275 1607.22,683.275 1607.78,683.275 1608.34,683.275 1608.9,683.275 1609.46,683.275 1610.02,683.275 1610.57,683.275 1611.13,683.275 1611.69,683.275 1612.25,683.275 1612.81,683.275 1613.37,683.275 1613.93,683.275 1614.49,683.275 1615.05,683.275 1615.61,683.275 1616.17,683.275 1616.73,683.275 1617.29,683.275 1617.84,683.275 1618.4,683.275 1618.96,683.275 1619.52,683.275 1620.08,683.275 1620.64,683.275 1621.2,683.275 1621.76,683.275 1622.32,683.275 1622.88,683.275 1623.44,683.275 1624,683.275 1624.56,683.275 1625.11,683.275 1625.67,683.275 1626.23,683.275 1626.79,683.275 1627.35,683.275 1627.91,683.275 1628.47,683.275 1629.03,683.275 1629.59,683.275 1630.15,683.275 1630.71,683.275 1631.27,683.275 1631.83,683.275 1632.39,683.275 1632.94,683.275 1633.5,683.275 1634.06,683.275 1634.62,683.275 1635.18,683.275 1635.74,683.275 1636.3,683.275 1636.86,683.275 1637.42,683.275 1637.98,683.275 1638.54,683.275 1639.1,683.275 1639.66,683.275 1640.21,683.275 1640.77,683.275 1641.33,683.275 1641.89,683.275 1642.45,683.275 1643.01,683.275 1643.57,683.275 1644.13,683.275 1644.69,683.275 1645.25,683.275 1645.81,683.275 1646.37,683.275 1646.93,683.275 1647.48,683.275 1648.04,683.275 1648.6,683.275 1649.16,683.275 1649.72,683.275 1650.28,683.275 1650.84,683.275 1651.4,683.275 1651.96,683.275 1652.52,683.275 1653.08,683.275 1653.64,683.275 1654.2,683.275 1654.76,683.275 1655.31,683.275 1655.87,683.275 1656.43,683.275 1656.99,683.275 1657.55,683.275 1658.11,683.275 1658.67,683.275 1659.23,683.275 1659.79,683.275 1660.35,683.275 1660.91,683.275 1661.47,683.275 1662.03,683.275 1662.58,683.275 1663.14,683.275 1663.7,683.275 1664.26,683.275 1664.82,683.275 1665.38,683.275 1665.94,683.275 1666.5,683.275 1667.06,683.275 1667.62,683.275 1668.18,683.275 1668.74,683.275 1669.3,683.275 1669.85,683.275 1670.41,683.275 1670.97,683.275 1671.53,683.275 1672.09,683.275 1672.65,683.275 1673.21,683.275 1673.77,683.275 1674.33,683.275 1674.89,683.275 1675.45,683.275 1676.01,683.275 1676.57,683.275 1677.13,683.275 1677.68,683.275 1678.24,683.275 1678.8,683.275 1679.36,683.275 1679.92,683.275 1680.48,683.275 1681.04,683.275 1681.6,683.275 1682.16,683.275 1682.72,683.275 1683.28,683.275 1683.84,683.275 1684.4,683.275 1684.95,683.275 1685.51,683.275 1686.07,683.275 1686.63,683.275 1687.19,683.275 1687.75,683.275 1688.31,683.275 1688.87,683.275 1689.43,683.275 1689.99,683.275 1690.55,683.275 1691.11,683.275 1691.67,683.275 1692.23,683.275 1692.78,683.275 1693.34,683.275 1693.9,683.275 1694.46,683.275 1695.02,683.275 1695.58,683.275 1696.14,683.275 1696.7,683.275 1697.26,683.275 1697.82,683.275 1698.38,683.275 1698.94,683.275 1699.5,683.275 1700.05,683.275 1700.61,683.275 1701.17,683.275 1701.73,683.275 1702.29,683.275 1702.85,683.275 1703.41,683.275 1703.97,683.275 1704.53,683.275 1705.09,683.275 1705.65,683.275 1706.21,683.275 1706.77,683.275 1707.32,683.275 1707.88,683.275 1708.44,683.275 1709,683.275 1709.56,683.275 1710.12,683.275 1710.68,683.275 1711.24,683.275 1711.8,683.275 1712.36,683.275 1712.92,683.275 1713.48,683.275 1714.04,683.275 1714.6,683.275 1715.15,683.275 1715.71,683.275 1716.27,683.275 1716.83,683.275 1717.39,683.275 1717.95,683.275 1718.51,683.275 1719.07,683.275 1719.63,683.275 1720.19,683.275 1720.75,683.275 1721.31,683.275 1721.87,683.275 1722.42,683.275 1722.98,683.275 1723.54,683.275 1724.1,683.275 1724.66,683.275 1725.22,683.275 1725.78,683.275 1726.34,683.275 1726.9,683.275 1727.46,683.275 1728.02,683.275 1728.58,683.275 1729.14,683.275 1729.69,683.275 1730.25,683.275 1730.81,683.275 1731.37,683.275 1731.93,683.275 1732.49,683.275 1733.05,683.275 1733.61,683.275 1734.17,683.275 1734.73,683.275 1735.29,683.275 1735.85,683.275 1736.41,683.275 1736.97,683.275 1737.52,683.275 1738.08,683.275 1738.64,683.275 1739.2,683.275 1739.76,683.275 1740.32,683.275 1740.88,683.275 1741.44,683.275 1742,683.275 1742.56,683.275 1743.12,683.275 1743.68,683.275 1744.24,683.275 1744.79,683.275 1745.35,683.275 1745.91,683.275 1746.47,683.275 1747.03,683.275 1747.59,683.275 1748.15,683.275 1748.71,683.275 1749.27,683.275 1749.83,683.275 1750.39,683.275 1750.95,683.275 1751.51,683.275 1752.06,683.275 1752.62,683.275 1753.18,683.275 1753.74,683.275 1754.3,683.275 1754.86,683.275 1755.42,683.275 1755.98,683.275 1756.54,683.275 1757.1,683.275 1757.66,683.275 1758.22,683.275 1758.78,683.275 1759.34,683.275 1759.89,683.275 1760.45,683.275 1761.01,683.275 1761.57,683.275 1762.13,683.275 1762.69,683.275 1763.25,683.275 1763.81,683.275 1764.37,683.275 1764.93,683.275 1765.49,683.275 1766.05,683.275 1766.61,683.275 1767.16,683.275 1767.72,683.275 1768.28,683.275 1768.84,683.275 1769.4,683.275 1769.96,683.275 1770.52,683.275 1771.08,683.275 1771.64,683.275 1772.2,683.275 1772.76,683.275 1773.32,683.275 1773.88,683.275 1774.43,683.275 1774.99,683.275 1775.55,683.275 1776.11,683.275 1776.67,683.275 1777.23,683.275 1777.79,683.275 1778.35,683.275 1778.91,683.275 1779.47,683.275 1780.03,683.275 1780.59,683.275 1781.15,683.275 1781.71,683.275 1782.26,683.275 1782.82,683.275 1783.38,683.275 1783.94,683.275 1784.5,683.275 1785.06,683.275 1785.62,683.275 1786.18,683.275 1786.74,683.275 1787.3,683.275 1787.86,683.275 1788.42,683.275 1788.98,683.275 1789.53,683.275 1790.09,683.275 1790.65,683.275 1791.21,683.275 1791.77,683.275 1792.33,683.275 1792.89,683.275 1793.45,683.275 1794.01,683.275 1794.57,683.275 1795.13,683.275 1795.69,683.275 1796.25,683.275 1796.8,683.275 1797.36,683.275 1797.92,683.275 1798.48,683.275 1799.04,683.275 1799.6,683.275 1800.16,683.275 1800.72,683.275 1801.28,683.275 1801.84,683.275 1802.4,683.275 1802.96,683.275 1803.52,683.275 1804.08,683.275 1804.63,683.275 1805.19,683.275 1805.75,683.275 1806.31,683.275 1806.87,683.275 1807.43,683.275 1807.99,683.275 1808.55,683.275 1809.11,683.275 1809.67,683.275 1810.23,683.275 1810.79,683.275 1811.35,683.275 1811.9,683.275 1812.46,683.275 1813.02,683.275 1813.58,683.275 1814.14,683.275 1814.7,683.275 1815.26,683.275 1815.82,683.275 1816.38,683.275 1816.94,683.275 1817.5,683.275 1818.06,683.275 1818.62,683.275 1819.18,683.275 1819.73,683.275 1820.29,683.275 1820.85,683.275 1821.41,683.275 1821.97,683.275 1822.53,683.275 1823.09,683.275 1823.65,683.275 1824.21,683.275 1824.77,683.275 1825.33,683.275 1825.89,683.275 1826.45,683.275 1827,683.275 1827.56,683.275 1828.12,683.275 1828.68,683.275 1829.24,683.275 1829.8,683.275 1830.36,683.275 1830.92,683.275 1831.48,683.275 1832.04,683.275 1832.6,683.275 1833.16,683.275 1833.72,683.275 1834.27,683.275 1834.83,683.275 1835.39,683.275 1835.95,683.275 1836.51,683.275 1837.07,683.275 1837.63,683.275 1838.19,683.275 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.028832173935473 ± 0.017464221946565373\nProjected Energy: -4.013525762727243 ± (0.007613709453798911, 0.007425722479872832)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.470322</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.2664e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.177e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.696e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.232e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.595e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">7.875e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770906\n  0.13584182219621965\n  0.15789998694609153\n  0.876711441178136\n  1.5305929970973358\n  1.5835732611867348\n  3.0728703303258698\n  3.1256726539518445\n  4.862107221562173\n  6.260694850380589\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\n```jldoctest julia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian) BasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:   0.0  -1.0  -1.0  -1.0   0.0  -1.0  -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating BasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:   0.0  -1.0  -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues 3-element Vector{Float64}:  -1.9999999999999996   0.9999999999999997   1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector 3-element Vector{Float64}:  -0.5773502691896257  -0.5773502691896255  -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec DVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()   fs\"|0 0 1⟩\" => -0.57735   fs\"|0 1 0⟩\" => -0.57735   fs\"|1 0 0⟩\" => -0.57735   ``Has methods for [dimension](@ref), [sparse](@ref), [Matrix](@ref), [starting_address`](@ref).\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
