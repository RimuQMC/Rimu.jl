var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2136892092738464 ± 0.0014397815506634437\n   G2(1) = 0.9173687993693824 ± 0.0007088646238431718\n   G2(2) = 0.9814008783907983 ± 0.0006560513767456362\n   G2(3) = 0.9887714352057925 ± 0.0010195775953753278\n   G2(4) = 0.9814008783907983 ± 0.0006560513767456362\n   G2(5) = 0.9173687993693824 ± 0.0007088646238431718\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.0362074737634055 ± 0.12223100222302696\n   Replica 2: -4.064729791199461 ± 0.12502914074631744\n   Replica 3: -3.987139200014818 ± 0.11350701210099073\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip280\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip280)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip281\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip280)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip282\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.8 2211.02,1260.8 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.93 2211.02,1003.93 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,747.064 2211.02,747.064 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,490.194 2211.02,490.194 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,233.324 2211.02,233.324 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.8 423.181,1260.8 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.93 423.181,1003.93 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,747.064 423.181,747.064 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,490.194 423.181,490.194 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,233.324 423.181,233.324 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M356.339 1246.6 Q352.728 1246.6 350.899 1250.17 Q349.094 1253.71 349.094 1260.84 Q349.094 1267.94 350.899 1271.51 Q352.728 1275.05 356.339 1275.05 Q359.973 1275.05 361.779 1271.51 Q363.608 1267.94 363.608 1260.84 Q363.608 1253.71 361.779 1250.17 Q359.973 1246.6 356.339 1246.6 M356.339 1242.9 Q362.149 1242.9 365.205 1247.5 Q368.284 1252.09 368.284 1260.84 Q368.284 1269.56 365.205 1274.17 Q362.149 1278.75 356.339 1278.75 Q350.529 1278.75 347.45 1274.17 Q344.395 1269.56 344.395 1260.84 Q344.395 1252.09 347.45 1247.5 Q350.529 1242.9 356.339 1242.9 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M290.043 1017.28 L306.363 1017.28 L306.363 1021.21 L284.418 1021.21 L284.418 1017.28 Q287.08 1014.52 291.664 1009.89 Q296.27 1005.24 297.451 1003.9 Q299.696 1001.38 300.576 999.64 Q301.478 997.88 301.478 996.191 Q301.478 993.436 299.534 991.7 Q297.613 989.964 294.511 989.964 Q292.312 989.964 289.858 990.728 Q287.427 991.492 284.65 993.042 L284.65 988.32 Q287.474 987.186 289.927 986.607 Q292.381 986.029 294.418 986.029 Q299.789 986.029 302.983 988.714 Q306.177 991.399 306.177 995.89 Q306.177 998.019 305.367 999.941 Q304.58 1001.84 302.474 1004.43 Q301.895 1005.1 298.793 1008.32 Q295.691 1011.51 290.043 1017.28 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M316.224 986.654 L334.58 986.654 L334.58 990.589 L320.506 990.589 L320.506 999.061 Q321.524 998.714 322.543 998.552 Q323.562 998.366 324.58 998.366 Q330.367 998.366 333.747 1001.54 Q337.126 1004.71 337.126 1010.13 Q337.126 1015.7 333.654 1018.81 Q330.182 1021.88 323.862 1021.88 Q321.687 1021.88 319.418 1021.51 Q317.173 1021.14 314.765 1020.4 L314.765 1015.7 Q316.849 1016.84 319.071 1017.39 Q321.293 1017.95 323.77 1017.95 Q327.774 1017.95 330.112 1015.84 Q332.45 1013.74 332.45 1010.13 Q332.45 1006.51 330.112 1004.41 Q327.774 1002.3 323.77 1002.3 Q321.895 1002.3 320.02 1002.72 Q318.168 1003.13 316.224 1004.01 L316.224 986.654 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M356.339 989.732 Q352.728 989.732 350.899 993.297 Q349.094 996.839 349.094 1003.97 Q349.094 1011.07 350.899 1014.64 Q352.728 1018.18 356.339 1018.18 Q359.973 1018.18 361.779 1014.64 Q363.608 1011.07 363.608 1003.97 Q363.608 996.839 361.779 993.297 Q359.973 989.732 356.339 989.732 M356.339 986.029 Q362.149 986.029 365.205 990.635 Q368.284 995.218 368.284 1003.97 Q368.284 1012.7 365.205 1017.3 Q362.149 1021.88 356.339 1021.88 Q350.529 1021.88 347.45 1017.3 Q344.395 1012.7 344.395 1003.97 Q344.395 995.218 347.45 990.635 Q350.529 986.029 356.339 986.029 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M286.062 729.784 L304.418 729.784 L304.418 733.719 L290.344 733.719 L290.344 742.191 Q291.363 741.844 292.381 741.682 Q293.4 741.497 294.418 741.497 Q300.205 741.497 303.585 744.668 Q306.964 747.839 306.964 753.256 Q306.964 758.835 303.492 761.936 Q300.02 765.015 293.701 765.015 Q291.525 765.015 289.256 764.645 Q287.011 764.274 284.603 763.534 L284.603 758.835 Q286.687 759.969 288.909 760.524 Q291.131 761.08 293.608 761.08 Q297.613 761.08 299.951 758.973 Q302.288 756.867 302.288 753.256 Q302.288 749.645 299.951 747.538 Q297.613 745.432 293.608 745.432 Q291.733 745.432 289.858 745.849 Q288.006 746.265 286.062 747.145 L286.062 729.784 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M326.177 732.863 Q322.566 732.863 320.737 736.427 Q318.932 739.969 318.932 747.099 Q318.932 754.205 320.737 757.77 Q322.566 761.311 326.177 761.311 Q329.811 761.311 331.617 757.77 Q333.446 754.205 333.446 747.099 Q333.446 739.969 331.617 736.427 Q329.811 732.863 326.177 732.863 M326.177 729.159 Q331.987 729.159 335.043 733.765 Q338.122 738.349 338.122 747.099 Q338.122 755.825 335.043 760.432 Q331.987 765.015 326.177 765.015 Q320.367 765.015 317.288 760.432 Q314.233 755.825 314.233 747.099 Q314.233 738.349 317.288 733.765 Q320.367 729.159 326.177 729.159 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M356.339 732.863 Q352.728 732.863 350.899 736.427 Q349.094 739.969 349.094 747.099 Q349.094 754.205 350.899 757.77 Q352.728 761.311 356.339 761.311 Q359.973 761.311 361.779 757.77 Q363.608 754.205 363.608 747.099 Q363.608 739.969 361.779 736.427 Q359.973 732.863 356.339 732.863 M356.339 729.159 Q362.149 729.159 365.205 733.765 Q368.284 738.349 368.284 747.099 Q368.284 755.825 365.205 760.432 Q362.149 765.015 356.339 765.015 Q350.529 765.015 347.45 760.432 Q344.395 755.825 344.395 747.099 Q344.395 738.349 347.45 733.765 Q350.529 729.159 356.339 729.159 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M284.835 472.914 L307.057 472.914 L307.057 474.905 L294.511 507.474 L289.627 507.474 L301.432 476.849 L284.835 476.849 L284.835 472.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M316.224 472.914 L334.58 472.914 L334.58 476.849 L320.506 476.849 L320.506 485.321 Q321.524 484.974 322.543 484.812 Q323.562 484.627 324.58 484.627 Q330.367 484.627 333.747 487.798 Q337.126 490.97 337.126 496.386 Q337.126 501.965 333.654 505.067 Q330.182 508.145 323.862 508.145 Q321.687 508.145 319.418 507.775 Q317.173 507.405 314.765 506.664 L314.765 501.965 Q316.849 503.099 319.071 503.655 Q321.293 504.21 323.77 504.21 Q327.774 504.21 330.112 502.104 Q332.45 499.997 332.45 496.386 Q332.45 492.775 330.112 490.669 Q327.774 488.562 323.77 488.562 Q321.895 488.562 320.02 488.979 Q318.168 489.395 316.224 490.275 L316.224 472.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M356.339 475.993 Q352.728 475.993 350.899 479.558 Q349.094 483.099 349.094 490.229 Q349.094 497.335 350.899 500.9 Q352.728 504.442 356.339 504.442 Q359.973 504.442 361.779 500.9 Q363.608 497.335 363.608 490.229 Q363.608 483.099 361.779 479.558 Q359.973 475.993 356.339 475.993 M356.339 472.289 Q362.149 472.289 365.205 476.896 Q368.284 481.479 368.284 490.229 Q368.284 498.956 365.205 503.562 Q362.149 508.145 356.339 508.145 Q350.529 508.145 347.45 503.562 Q344.395 498.956 344.395 490.229 Q344.395 481.479 347.45 476.896 Q350.529 472.289 356.339 472.289 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M256.664 246.669 L264.303 246.669 L264.303 220.304 L255.992 221.97 L255.992 217.711 L264.256 216.044 L268.932 216.044 L268.932 246.669 L276.571 246.669 L276.571 250.604 L256.664 250.604 L256.664 246.669 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M296.015 219.123 Q292.404 219.123 290.576 222.688 Q288.77 226.229 288.77 233.359 Q288.77 240.465 290.576 244.03 Q292.404 247.572 296.015 247.572 Q299.65 247.572 301.455 244.03 Q303.284 240.465 303.284 233.359 Q303.284 226.229 301.455 222.688 Q299.65 219.123 296.015 219.123 M296.015 215.419 Q301.826 215.419 304.881 220.026 Q307.96 224.609 307.96 233.359 Q307.96 242.086 304.881 246.692 Q301.826 251.276 296.015 251.276 Q290.205 251.276 287.127 246.692 Q284.071 242.086 284.071 233.359 Q284.071 224.609 287.127 220.026 Q290.205 215.419 296.015 215.419 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M326.177 219.123 Q322.566 219.123 320.737 222.688 Q318.932 226.229 318.932 233.359 Q318.932 240.465 320.737 244.03 Q322.566 247.572 326.177 247.572 Q329.811 247.572 331.617 244.03 Q333.446 240.465 333.446 233.359 Q333.446 226.229 331.617 222.688 Q329.811 219.123 326.177 219.123 M326.177 215.419 Q331.987 215.419 335.043 220.026 Q338.122 224.609 338.122 233.359 Q338.122 242.086 335.043 246.692 Q331.987 251.276 326.177 251.276 Q320.367 251.276 317.288 246.692 Q314.233 242.086 314.233 233.359 Q314.233 224.609 317.288 220.026 Q320.367 215.419 326.177 215.419 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M356.339 219.123 Q352.728 219.123 350.899 222.688 Q349.094 226.229 349.094 233.359 Q349.094 240.465 350.899 244.03 Q352.728 247.572 356.339 247.572 Q359.973 247.572 361.779 244.03 Q363.608 240.465 363.608 233.359 Q363.608 226.229 361.779 222.688 Q359.973 219.123 356.339 219.123 M356.339 215.419 Q362.149 215.419 365.205 220.026 Q368.284 224.609 368.284 233.359 Q368.284 242.086 365.205 246.692 Q362.149 251.276 356.339 251.276 Q350.529 251.276 347.45 246.692 Q344.395 242.086 344.395 233.359 Q344.395 224.609 347.45 220.026 Q350.529 215.419 356.339 215.419 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip282)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,233.324 4017.76,233.324 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.28 457.123,1249.1 457.691,1248.87 458.259,1248.57 458.828,1248.18 459.396,1247.76 459.964,1247.27 460.533,1246.67 461.101,1246.01 461.669,1244.26 462.238,1242.44 462.806,1241.58 463.375,1240.61 463.943,1239.56 464.511,1238.4 465.08,1237.16 465.648,1235.8 466.216,1233.3 466.785,1231.71 467.353,1229.97 467.921,1227.09 468.49,1225.09 469.058,1222.94 469.626,1220.65 470.195,1218.21 470.763,1214.56 471.331,1211.79 471.9,1208.84 472.468,1205.69 473.036,1202.38 473.605,1198.88 474.173,1195.16 474.741,1191.26 475.31,1185.08 475.878,1180.77 476.446,1173.2 477.015,1168.48 477.583,1163.49 478.152,1158.29 478.72,1152.9 479.288,1147.28 479.857,1140.37 480.425,1134.3 480.993,1126.93 481.562,1120.32 482.13,1113.51 482.698,1106.41 483.267,1098.06 483.835,1087.49 484.403,1079.6 484.972,1071.51 485.54,1062.23 486.108,1053.78 486.677,1045.19 487.245,1034.31 487.813,1023.22 488.382,1014.09 488.95,1004.84 489.518,995.475 490.087,982.756 490.655,973.006 491.224,963.1 491.792,953.07 492.36,942.939 492.929,931.712 493.497,920.437 494.065,910.236 494.634,896.906 495.202,884.7 495.77,871.441 496.339,859.446 496.907,849.611 497.475,838.632 498.044,826.656 498.612,815.771 499.18,805.047 499.749,794.309 500.317,783.5 500.885,769.764 501.454,759.391 502.022,748.001 502.59,737.802 503.159,723.559 503.727,712.625 504.295,702.858 504.864,691.255 505.432,683.811 506.001,673.138 506.569,660.8 507.137,651.69 507.706,641.543 508.274,633.73 508.842,624.986 509.411,615.203 509.979,602.658 510.547,594.424 511.116,587.422 511.684,579.4 512.252,570.463 512.821,563.615 513.389,557.994 513.957,550.25 514.526,543.707 515.094,537.267 515.662,528.903 516.231,522.815 516.799,515.557 517.367,507.487 517.936,501.596 518.504,495.883 519.072,490.203 519.641,482.492 520.209,476.983 520.778,469.926 521.346,464.947 521.914,459.891 522.483,452.903 523.051,446.151 523.619,439.757 524.188,433.404 524.756,427.214 525.324,422.317 525.893,417.144 526.461,413.458 527.029,408.765 527.598,403.308 528.166,393.658 528.734,391.007 529.303,386.188 529.871,380.539 530.439,377.079 531.008,374.769 531.576,371.301 532.144,369.002 532.713,365.737 533.281,360.481 533.85,356.375 534.418,352.434 534.986,350.626 535.555,346.929 536.123,343.504 536.691,340.026 537.26,337.465 537.828,336.254 538.396,333.922 538.965,332.507 539.533,330.221 540.101,326.977 540.67,325.624 541.238,326.355 541.806,324.073 542.375,322.973 542.943,318.766 543.511,317.846 544.08,315.824 544.648,314.928 545.216,311.829 545.785,311.116 546.353,310.049 546.921,309.102 547.49,308.072 548.058,304.998 548.627,304.255 549.195,304.299 549.763,304.259 550.332,302.237 550.9,299.164 551.468,298.412 552.037,296.61 552.605,293.813 553.173,293.193 553.742,290.388 554.31,291.104 554.878,290.338 555.447,290.62 556.015,289.916 556.583,287.028 557.152,286.463 557.72,288.175 558.288,284.127 558.857,283.412 559.425,279.634 559.993,278.309 560.562,276.955 561.13,276.452 561.698,277.174 562.267,274.845 562.835,277.743 563.404,276.293 563.972,274.773 564.54,274.239 565.109,273.69 565.677,274.401 566.245,268.706 566.814,268.662 567.382,268.151 567.95,268.053 568.519,263.866 569.087,263.013 569.655,260.864 570.224,261.712 570.792,261.862 571.36,260.776 571.929,258.945 572.497,256.183 573.065,256.549 573.634,257.031 574.202,257.226 574.77,255.462 575.339,256.732 575.907,256.041 576.476,259.399 577.044,259.448 577.612,261.567 578.181,260.383 578.749,258.663 579.317,256.74 579.886,256.916 580.454,255.2 581.022,254.21 581.591,254.457 582.159,253.479 582.727,253.501 583.296,254.592 583.864,256.79 584.432,255.785 585.001,255.768 585.569,257.914 586.137,256.404 586.706,255.355 587.274,254.457 587.842,254.431 588.411,254.397 588.979,253.348 589.547,252.165 590.116,252.241 590.684,250.35 591.253,250.569 591.821,250.72 592.389,251.959 592.958,251.843 593.526,252.823 594.094,251.777 594.663,250.855 595.231,250.837 595.799,251.959 596.368,251.77 596.936,251.779 597.504,250.565 598.073,251.657 598.641,250.679 599.209,251.682 599.778,251.516 600.346,252.572 600.914,253.301 601.483,251.93 602.051,251.579 602.619,249.451 603.188,249.399 603.756,246.322 604.325,245.337 604.893,243.433 605.461,243.772 606.03,242.811 606.598,245.308 607.166,245.173 607.735,245.213 608.303,243.372 608.871,241.597 609.44,242.032 610.008,239.026 610.576,238.561 611.145,239.064 611.713,239.522 612.281,238.994 612.85,241.673 613.418,241.774 613.986,241.228 614.555,242.697 615.123,241.169 615.691,241.751 616.26,244.117 616.828,241.187 617.396,240.713 617.965,242.314 618.533,240.495 619.102,242.065 619.67,242.514 620.238,241.916 620.807,241.335 621.375,241.556 621.943,241.833 622.512,242.359 623.08,242.617 623.648,241.79 624.217,242.068 624.785,243.454 625.353,240.614 625.922,243.94 626.49,244.213 627.058,243.336 627.627,245.715 628.195,243.64 628.763,242.557 629.332,241.769 629.9,245.016 630.468,246.169 631.037,246.997 631.605,247.725 632.173,249.48 632.742,248.182 633.31,247.994 633.879,246.713 634.447,246.481 635.015,245.242 635.584,244.819 636.152,243.606 636.72,244.593 637.289,243.562 637.857,242.337 638.425,242.282 638.994,243.308 639.562,241.151 640.13,241.281 640.699,240.127 641.267,239.309 641.835,236.567 642.404,235.723 642.972,237.041 643.54,237.502 644.109,236.869 644.677,239.237 645.245,239.244 645.814,237.269 646.382,236.494 646.951,234.776 647.519,237.412 648.087,236.967 648.656,239.456 649.224,238.606 649.792,237.941 650.361,238.12 650.929,239.591 651.497,238.648 652.066,237.802 652.634,240.072 653.202,237.044 653.771,237.313 654.339,234.641 654.907,236.183 655.476,236.394 656.044,235.6 656.612,232.913 657.181,235.648 657.749,234.926 658.317,235.389 658.886,235.848 659.454,237.161 660.022,237.673 660.591,235.794 661.159,237.349 661.728,238.419 662.296,238.683 662.864,239.99 663.433,240.092 664.001,236.134 664.569,240.59 665.138,239.712 665.706,237.586 666.274,237.047 666.843,235.168 667.411,239.74 667.979,240.914 668.548,239.714 669.116,239.634 669.684,241.587 670.253,241.328 670.821,241.21 671.389,242.167 671.958,240.9 672.526,241.78 673.094,238.772 673.663,237.755 674.231,237.556 674.799,237.618 675.368,235.8 675.936,235.415 676.505,234.712 677.073,232.819 677.641,236.152 678.21,237.626 678.778,238.699 679.346,236.821 679.915,238.218 680.483,238.253 681.051,237.498 681.62,236.662 682.188,235.827 682.756,238.095 683.325,241.366 683.893,240.12 684.461,240.163 685.03,236.876 685.598,239.169 686.166,241.356 686.735,240.115 687.303,239.171 687.871,237.148 688.44,235.134 689.008,237.429 689.577,237.284 690.145,238.678 690.713,238.412 691.282,237.516 691.85,237.602 692.418,238.485 692.987,238.543 693.555,237.633 694.123,238.684 694.692,239.689 695.26,240.589 695.828,240.5 696.397,242.264 696.965,242.046 697.533,241.8 698.102,239.375 698.67,243.141 699.238,243.763 699.807,242.483 700.375,242.299 700.943,241.609 701.512,240.211 702.08,240.194 702.648,239.896 703.217,238.703 703.785,238.708 704.354,238.415 704.922,240.272 705.49,242.228 706.059,241.933 706.627,241.637 707.195,239.145 707.764,238.609 708.332,237.405 708.9,237.458 709.469,235.247 710.037,235.172 710.605,232.241 711.174,234.621 711.742,234.721 712.31,234.003 712.879,232.192 713.447,230.546 714.015,232.209 714.584,232.342 715.152,232.79 715.72,234.148 716.289,233.301 716.857,236.57 717.425,235.565 717.994,237.985 718.562,237.032 719.131,238.267 719.699,239.19 720.267,239.284 720.836,238.964 721.404,239.673 721.972,239.542 722.541,238.329 723.109,238.038 723.677,236.967 724.246,234.936 724.814,233.921 725.382,234.101 725.951,234.261 726.519,233.4 727.087,232.492 727.656,232.887 728.224,231.117 728.792,231.371 729.361,233.588 729.929,232.734 730.497,233.105 731.066,234.133 731.634,234.542 732.203,233.471 732.771,232.674 733.339,232.928 733.908,232.223 734.476,230.325 735.044,227.706 735.613,229.118 736.181,229.776 736.749,229.229 737.318,226.558 737.886,227.327 738.454,227.071 739.023,227.744 739.591,230.511 740.159,232.105 740.728,230.499 741.296,232.11 741.864,232.804 742.433,233.154 743.001,234.534 743.569,236.776 744.138,234.042 744.706,234.356 745.274,234.388 745.843,233.711 746.411,233.994 746.98,235.32 747.548,236.636 748.116,234.724 748.685,235.943 749.253,235.242 749.821,235.339 750.39,233.444 750.958,234.884 751.526,234.072 752.095,233.481 752.663,236.774 753.231,236.844 753.8,238.976 754.368,238.761 754.936,235.603 755.505,234.763 756.073,233.917 756.641,235.066 757.21,237.146 757.778,236.047 758.346,237.905 758.915,237.687 759.483,236.535 760.052,236.446 760.62,237.373 761.188,238.383 761.757,239.428 762.325,239.231 762.893,239.045 763.462,237.916 764.03,239.979 764.598,239.813 765.167,239.603 765.735,239.259 766.303,240.046 766.872,240.648 767.44,238.258 768.008,240.172 768.577,242.161 769.145,242.687 769.713,242.501 770.282,241.881 770.85,240.419 771.418,239.035 771.987,237.764 772.555,237.469 773.123,238.329 773.692,238.091 774.26,235.771 774.829,235.55 775.397,235.345 775.965,237.193 776.534,239.141 777.102,239.765 777.67,240.469 778.239,238.856 778.807,236.4 779.375,236.39 779.944,235.334 780.512,234.224 781.08,235.412 781.649,236.316 782.217,236.13 782.785,234.8 783.354,233.566 783.922,235.661 784.49,235.656 785.059,234.637 785.627,234.563 786.195,234.657 786.764,233.455 787.332,232.38 787.9,231.414 788.469,232.591 789.037,230.804 789.606,230.839 790.174,232.098 790.742,232.292 791.311,232.615 791.879,234.91 792.447,233.745 793.016,236.795 793.584,236.501 794.152,236.54 794.721,236.466 795.289,232.989 795.857,233.086 796.426,235.255 796.994,235.036 797.562,232.708 798.131,232.843 798.699,234.164 799.267,235.267 799.836,234.108 800.404,235.252 800.972,234.023 801.541,235.068 802.109,232.001 802.678,232.954 803.246,232.807 803.814,231.867 804.383,231.875 804.951,231.22 805.519,230.333 806.088,230.743 806.656,232.05 807.224,231.275 807.793,229.45 808.361,228.699 808.929,227.087 809.498,227.567 810.066,227.071 810.634,228.606 811.203,227.093 811.771,227.613 812.339,228.287 812.908,228.922 813.476,228.519 814.044,228.16 814.613,227.586 815.181,230.388 815.749,234.049 816.318,234.307 816.886,234.653 817.455,235.965 818.023,234.086 818.591,235.252 819.16,234.396 819.728,232.576 820.296,231.589 820.865,234.051 821.433,235.357 822.001,235.286 822.57,235.233 823.138,235.376 823.706,235.157 824.275,233.094 824.843,234.212 825.411,234.338 825.98,234.502 826.548,234.555 827.116,234.562 827.685,236.562 828.253,237.434 828.821,235.3 829.39,234.364 829.958,233.487 830.526,230.719 831.095,229.048 831.663,228.067 832.232,229.747 832.8,230.235 833.368,230.612 833.937,228.888 834.505,229.368 835.073,232.795 835.642,234.211 836.21,234.332 836.778,233.145 837.347,236.123 837.915,232.961 838.483,230.903 839.052,231.141 839.62,231.578 840.188,232.899 840.757,231.932 841.325,233.349 841.893,231.425 842.462,234.025 843.03,236.214 843.598,236.266 844.167,237.381 844.735,238.228 845.304,237.95 845.872,236.828 846.44,234.752 847.009,235.785 847.577,238.091 848.145,235.967 848.714,235.954 849.282,235.978 849.85,236.004 850.419,237 850.987,236.854 851.555,238.787 852.124,242.564 852.692,245.058 853.26,244.216 853.829,244.499 854.397,242.72 854.965,241.991 855.534,239.515 856.102,239.803 856.67,240.382 857.239,240.996 857.807,244.513 858.375,244.852 858.944,241.809 859.512,240.174 860.081,238.781 860.649,237.493 861.217,236.083 861.786,232.824 862.354,232.11 862.922,235.585 863.491,235.223 864.059,234.963 864.627,234.693 865.196,235.489 865.764,235.153 866.332,234.042 866.901,232.859 867.469,232.993 868.037,232.109 868.606,232.569 869.174,230.654 869.742,230.929 870.311,229.116 870.879,233.3 871.447,233.997 872.016,234.829 872.584,235.536 873.152,234.503 873.721,233.438 874.289,234.593 874.858,235.348 875.426,235.287 875.994,236.168 876.563,236.928 877.131,236.688 877.699,236.501 878.268,234.283 878.836,236.228 879.404,236.072 879.973,234.92 880.541,233.631 881.109,233.733 881.678,233.832 882.246,231.573 882.814,231.721 883.383,231.895 883.951,233.207 884.519,232.431 885.088,230.574 885.656,228.697 886.224,230.225 886.793,230.565 887.361,229.818 887.93,229.097 888.498,229.559 889.066,227.705 889.635,226.939 890.203,227.496 890.771,226.909 891.34,228.565 891.908,231.064 892.476,231.45 893.045,234.577 893.613,236.63 894.181,237.381 894.75,239.396 895.318,237.906 895.886,237.521 896.455,238.241 897.023,238.031 897.591,238.003 898.16,237.417 898.728,236.24 899.296,235.75 899.865,236.554 900.433,238.451 901.001,238.94 901.57,239.505 902.138,239.136 902.707,239.445 903.275,238.001 903.843,238.571 904.412,240.105 904.98,238.476 905.548,238.091 906.117,236.679 906.685,236.316 907.253,234.862 907.822,235.536 908.39,235.326 908.958,235.138 909.527,233.949 910.095,232.969 910.663,231.783 911.232,231.957 911.8,231.863 912.368,232.749 912.937,233.734 913.505,234.588 914.073,234.296 914.642,235.205 915.21,234.038 915.779,233.879 916.347,233.746 916.915,233.519 917.484,233.505 918.052,232.165 918.62,232.042 919.189,232.117 919.757,231.291 920.325,232.434 920.894,230.524 921.462,230.596 922.03,229.903 922.599,230.04 923.167,230.096 923.735,229.915 924.304,230.127 924.872,230.358 925.44,230.612 926.009,229.656 926.577,229.933 927.145,231.382 927.714,230.293 928.282,230.481 928.85,231.81 929.419,232.842 929.987,232.994 930.556,232.861 931.124,232.903 931.692,233.027 932.261,236.169 932.829,232.97 933.397,234.18 933.966,234.106 934.534,233.241 935.102,234.216 935.671,233.218 936.239,235.316 936.807,233.91 937.376,231.837 937.944,229.879 938.512,230.046 939.081,228.094 939.649,227.342 940.217,223.469 940.786,219.895 941.354,219.972 941.922,220.723 942.491,224.472 943.059,226.193 943.627,224.723 944.196,222.217 944.764,222.108 945.333,222.081 945.901,222.933 946.469,223.766 947.038,223.469 947.606,223.054 948.174,223.869 948.743,225.782 949.311,226.36 949.879,228.115 950.448,228.676 951.016,227.096 951.584,230.961 952.153,231.348 952.721,230.659 953.289,234.29 953.858,234.603 954.426,234.59 954.994,235.869 955.563,236.993 956.131,238.009 956.699,237.785 957.268,236.826 957.836,235.793 958.405,236.983 958.973,236.729 959.541,234.497 960.11,234.831 960.678,233.936 961.246,234.962 961.815,236.07 962.383,235.897 962.951,234.886 963.52,234.91 964.088,236.115 964.656,236.173 965.225,239.115 965.793,237.956 966.361,237.881 966.93,236.772 967.498,236.698 968.066,235.856 968.635,236.904 969.203,236.838 969.771,237.83 970.34,239.583 970.908,239.4 971.476,242.296 972.045,242.851 972.613,242.246 973.182,241.833 973.75,241.273 974.318,241.747 974.887,245.453 975.455,242.502 976.023,243.067 976.592,243.503 977.16,241.831 977.728,240.092 978.297,237.411 978.865,237.039 979.433,236.778 980.002,236.493 980.57,233.256 981.138,233.175 981.707,233.091 982.275,233.056 982.843,234.185 983.412,235.11 983.98,238.116 984.548,236.807 985.117,236.517 985.685,236.319 986.253,236.014 986.822,238.808 987.39,239.387 987.959,237.852 988.527,236.471 989.095,237.259 989.664,236.838 990.232,235.592 990.8,235.371 991.369,234.178 991.937,233.08 992.505,232.151 993.074,230.26 993.642,230.533 994.21,229.671 994.779,229.908 995.347,230.103 995.915,232.079 996.484,233.13 997.052,234.148 997.62,234.026 998.189,234.918 998.757,235.821 999.325,233.68 999.894,235.728 1000.46,235.557 1001.03,234.356 1001.6,235.283 1002.17,236.188 1002.74,238.127 1003.3,237.578 1003.87,238.127 1004.44,234.63 1005.01,230.405 1005.58,230.736 1006.15,229.734 1006.71,229.917 1007.28,231.047 1007.85,231.068 1008.42,230.105 1008.99,230.208 1009.56,233.634 1010.12,234.658 1010.69,235.446 1011.26,235.106 1011.83,235.81 1012.4,237.635 1012.97,237.248 1013.53,234.919 1014.1,234.993 1014.67,235.046 1015.24,234.959 1015.81,236.901 1016.38,235.704 1016.94,234.547 1017.51,233.494 1018.08,233.44 1018.65,233.548 1019.22,235.375 1019.79,234.106 1020.35,235.855 1020.92,232.438 1021.49,231.413 1022.06,229.516 1022.63,228.605 1023.2,225.648 1023.76,227.171 1024.33,227.657 1024.9,227.752 1025.47,227.388 1026.04,228.754 1026.61,229.116 1027.17,230.313 1027.74,229.578 1028.31,229.8 1028.88,229.986 1029.45,230.268 1030.02,231.787 1030.58,232.221 1031.15,233.305 1031.72,235.581 1032.29,237.542 1032.86,240.152 1033.43,239.533 1033.99,239.115 1034.56,238.358 1035.13,237.89 1035.7,236.482 1036.27,235.248 1036.84,238.298 1037.4,238.894 1037.97,236.384 1038.54,234.038 1039.11,232.799 1039.68,231.841 1040.25,233.063 1040.81,232.923 1041.38,232.751 1041.95,230.948 1042.52,233.215 1043.09,231.24 1043.66,231.457 1044.22,232.526 1044.79,229.373 1045.36,230.842 1045.93,230.963 1046.5,231.043 1047.07,231.313 1047.63,227.248 1048.2,228.564 1048.77,229.06 1049.34,231.119 1049.91,232.36 1050.48,232.49 1051.05,232.463 1051.61,233.505 1052.18,234.435 1052.75,232.574 1053.32,233.663 1053.89,233.934 1054.46,233.87 1055.02,232.819 1055.59,235.903 1056.16,233.789 1056.73,232.679 1057.3,231.631 1057.87,231.587 1058.43,229.684 1059,229.875 1059.57,230.308 1060.14,228.514 1060.71,230.798 1061.28,231.287 1061.84,232.513 1062.41,232.561 1062.98,233.715 1063.55,234.1 1064.12,237.028 1064.69,236.628 1065.25,236.294 1065.82,237.186 1066.39,237.103 1066.96,236.794 1067.53,235.67 1068.1,233.369 1068.66,231.068 1069.23,229.413 1069.8,227.881 1070.37,226.325 1070.94,228.075 1071.51,228.502 1072.07,225.867 1072.64,226.549 1073.21,228.075 1073.78,228.609 1074.35,228.906 1074.92,230.441 1075.48,231.779 1076.05,231.945 1076.62,231.244 1077.19,232.404 1077.76,232.511 1078.33,229.684 1078.89,233.921 1079.46,234.198 1080.03,233.206 1080.6,233.619 1081.17,231.66 1081.74,230.789 1082.3,232.051 1082.87,232.168 1083.44,231.315 1084.01,232.557 1084.58,231.832 1085.15,230.835 1085.71,230.254 1086.28,230.256 1086.85,230.39 1087.42,231.595 1087.99,232.84 1088.56,231.872 1089.12,232.025 1089.69,232.295 1090.26,232.418 1090.83,231.607 1091.4,230.837 1091.97,233.439 1092.53,232.625 1093.1,233.949 1093.67,235.318 1094.24,236.334 1094.81,235.255 1095.38,236.24 1095.94,236.137 1096.51,236.912 1097.08,236.931 1097.65,236.489 1098.22,237.339 1098.79,237.026 1099.35,238.892 1099.92,241.565 1100.49,240.963 1101.06,237.51 1101.63,236.28 1102.2,238.299 1102.76,236.93 1103.33,239.998 1103.9,240.68 1104.47,240.326 1105.04,237.892 1105.61,237.627 1106.17,235.095 1106.74,236.168 1107.31,236.067 1107.88,237.94 1108.45,237.665 1109.02,235.346 1109.58,235.278 1110.15,235.024 1110.72,234.974 1111.29,233.545 1111.86,234.488 1112.43,234.372 1112.99,233.339 1113.56,231.228 1114.13,231.462 1114.7,232.648 1115.27,230.706 1115.84,232.907 1116.4,233.797 1116.97,233.688 1117.54,233.71 1118.11,231.516 1118.68,230.83 1119.25,229.743 1119.81,230.93 1120.38,230.814 1120.95,230.99 1121.52,231.024 1122.09,229.308 1122.66,230.692 1123.23,229.847 1123.79,230.068 1124.36,231.378 1124.93,230.513 1125.5,230.766 1126.07,232.026 1126.64,233.244 1127.2,233.218 1127.77,234.35 1128.34,235.228 1128.91,235.202 1129.48,235.294 1130.05,233.176 1130.61,229.243 1131.18,230.81 1131.75,229.938 1132.32,231.364 1132.89,231.525 1133.46,231.64 1134.02,233.698 1134.59,233.671 1135.16,232.532 1135.73,232.646 1136.3,233.772 1136.87,232.729 1137.43,232.937 1138,234.182 1138.57,232.12 1139.14,232.419 1139.71,233.592 1140.28,233.552 1140.84,234.607 1141.41,235.685 1141.98,236.664 1142.55,236.673 1143.12,238.62 1143.69,238.3 1144.25,238.644 1144.82,239.024 1145.39,238.477 1145.96,237.809 1146.53,237.447 1147.1,237.242 1147.66,234.786 1148.23,235.731 1148.8,233.48 1149.37,233.407 1149.94,232.351 1150.51,231.362 1151.07,232.69 1151.64,231.813 1152.21,230.839 1152.78,231.871 1153.35,231.097 1153.92,232.038 1154.48,229.834 1155.05,229.102 1155.62,229.363 1156.19,231.808 1156.76,231.629 1157.33,233.045 1157.89,232.18 1158.46,231.256 1159.03,230.379 1159.6,229.463 1160.17,230.813 1160.74,230.967 1161.3,230.165 1161.87,231.582 1162.44,233.859 1163.01,232.844 1163.58,233.948 1164.15,236.06 1164.71,235.127 1165.28,235.117 1165.85,234.859 1166.42,232.595 1166.99,232.757 1167.56,230.795 1168.12,231.014 1168.69,231.042 1169.26,232.466 1169.83,231.47 1170.4,232.743 1170.97,232.786 1171.53,234.029 1172.1,235.239 1172.67,236.114 1173.24,234.849 1173.81,232.744 1174.38,229.818 1174.94,230.2 1175.51,230.588 1176.08,230.837 1176.65,230.175 1177.22,228.412 1177.79,227.993 1178.35,229.583 1178.92,231.784 1179.49,234.854 1180.06,236.859 1180.63,234.857 1181.2,234.935 1181.76,235.774 1182.33,232.745 1182.9,233.82 1183.47,233.728 1184.04,237.005 1184.61,237.724 1185.17,236.316 1185.74,236.215 1186.31,237.132 1186.88,237.863 1187.45,235.658 1188.02,232.462 1188.58,232.239 1189.15,233.223 1189.72,233.146 1190.29,235.645 1190.86,236.621 1191.43,237.492 1192,236.352 1192.56,235.083 1193.13,233.973 1193.7,234.851 1194.27,234.729 1194.84,234.701 1195.41,235.63 1195.97,235.497 1196.54,237.526 1197.11,238.286 1197.68,239.074 1198.25,242.838 1198.82,240.083 1199.38,240.554 1199.95,240.016 1200.52,240.442 1201.09,238.765 1201.66,238.276 1202.23,236.599 1202.79,236.196 1203.36,236.821 1203.93,236.469 1204.5,236.286 1205.07,236.044 1205.64,233.961 1206.2,233.55 1206.77,232.419 1207.34,232.438 1207.91,232.194 1208.48,232.151 1209.05,233.36 1209.61,234.209 1210.18,237.24 1210.75,236.745 1211.32,236.38 1211.89,235.079 1212.46,233.781 1213.02,232.522 1213.59,229.622 1214.16,231.641 1214.73,233.576 1215.3,232.419 1215.87,233.517 1216.43,233.453 1217,232.337 1217.57,234.355 1218.14,234.283 1218.71,235.355 1219.28,235.052 1219.84,235.731 1220.41,234.289 1220.98,233.053 1221.55,231.998 1222.12,232.025 1222.69,231.964 1223.25,233.04 1223.82,232.1 1224.39,232.229 1224.96,233.457 1225.53,231.295 1226.1,231.315 1226.66,231.461 1227.23,230.481 1227.8,230.784 1228.37,230.831 1228.94,230.21 1229.51,230.358 1230.07,231.535 1230.64,233.815 1231.21,232.698 1231.78,233.662 1232.35,232.439 1232.92,234.394 1233.48,235.494 1234.05,235.053 1234.62,233.897 1235.19,234.886 1235.76,234.875 1236.33,232.449 1236.89,231.548 1237.46,231.346 1238.03,233.391 1238.6,232.365 1239.17,231.429 1239.74,227.508 1240.3,228.081 1240.87,227.632 1241.44,228.008 1242.01,230.349 1242.58,230.501 1243.15,229.703 1243.71,228.967 1244.28,227.283 1244.85,228.647 1245.42,228.895 1245.99,228.175 1246.56,230.398 1247.12,230.631 1247.69,228.798 1248.26,230.088 1248.83,231.474 1249.4,231.595 1249.97,230.91 1250.53,231.084 1251.1,229.249 1251.67,228.644 1252.24,230.202 1252.81,229.305 1253.38,232.682 1253.94,231.719 1254.51,235.861 1255.08,237.566 1255.65,237.211 1256.22,233.972 1256.79,234.914 1257.35,236.064 1257.92,235.958 1258.49,237.863 1259.06,236.864 1259.63,235.666 1260.2,235.436 1260.76,236.211 1261.33,232.754 1261.9,232.695 1262.47,230.993 1263.04,229.049 1263.61,228.386 1264.18,228.933 1264.74,229.227 1265.31,227.682 1265.88,229.017 1266.45,230.424 1267.02,231.834 1267.59,232.179 1268.15,233.479 1268.72,232.323 1269.29,233.641 1269.86,233.766 1270.43,234.615 1271,234.638 1271.56,234.655 1272.13,234.674 1272.7,234.348 1273.27,234.173 1273.84,233.39 1274.41,232.549 1274.97,231.799 1275.54,231.859 1276.11,231.844 1276.68,231.89 1277.25,232.723 1277.82,235.079 1278.38,235.151 1278.95,233.922 1279.52,235.075 1280.09,234.994 1280.66,237.963 1281.23,237.67 1281.79,236.446 1282.36,237.496 1282.93,238.426 1283.5,240.046 1284.07,241.438 1284.64,240.815 1285.2,241.15 1285.77,241.753 1286.34,241.201 1286.91,241.7 1287.48,241.276 1288.05,240.576 1288.61,237.965 1289.18,238.338 1289.75,239.042 1290.32,239.633 1290.89,238.202 1291.46,235.835 1292.02,234.545 1292.59,234.516 1293.16,234.388 1293.73,234.32 1294.3,234.07 1294.87,231.828 1295.43,232.937 1296,231.855 1296.57,229.682 1297.14,227.985 1297.71,228.282 1298.28,228.418 1298.84,229.597 1299.41,228.817 1299.98,229.057 1300.55,230.361 1301.12,231.645 1301.69,232.612 1302.25,230.462 1302.82,231.633 1303.39,232.647 1303.96,235.85 1304.53,235.735 1305.1,234.529 1305.66,235.611 1306.23,235.404 1306.8,235.083 1307.37,233.83 1307.94,234.342 1308.51,233.319 1309.07,235.471 1309.64,233.123 1310.21,233.988 1310.78,232.919 1311.35,230.851 1311.92,230.151 1312.48,228.155 1313.05,228.242 1313.62,228.713 1314.19,231.031 1314.76,231.37 1315.33,231.471 1315.89,232.813 1316.46,233.921 1317.03,233.026 1317.6,231.918 1318.17,231.862 1318.74,233.881 1319.3,231.798 1319.87,232.934 1320.44,232.816 1321.01,234.914 1321.58,234.648 1322.15,234.583 1322.71,234.561 1323.28,236.594 1323.85,235.222 1324.42,235.197 1324.99,234.172 1325.56,234.977 1326.12,234.912 1326.69,231.518 1327.26,232.709 1327.83,233.942 1328.4,235.925 1328.97,231.556 1329.53,232.783 1330.1,233.805 1330.67,232.613 1331.24,232.597 1331.81,232.793 1332.38,230.746 1332.94,231.937 1333.51,231.834 1334.08,229.717 1334.65,227.829 1335.22,231.2 1335.79,228.362 1336.36,227.58 1336.92,226.066 1337.49,224.585 1338.06,224.337 1338.63,223.973 1339.2,225.801 1339.77,226.317 1340.33,227.876 1340.9,229.342 1341.47,232.748 1342.04,231.607 1342.61,231.806 1343.18,230.054 1343.74,231.443 1344.31,231.691 1344.88,231.672 1345.45,233.708 1346.02,233.781 1346.59,234.933 1347.15,232.021 1347.72,235.313 1348.29,233.321 1348.86,231.44 1349.43,232.796 1350,233.903 1350.56,232.708 1351.13,233.898 1351.7,233.038 1352.27,234.245 1352.84,233.373 1353.41,233.656 1353.97,233.808 1354.54,232.973 1355.11,232.309 1355.68,233.375 1356.25,235.448 1356.82,236.267 1357.38,236.179 1357.95,236.069 1358.52,237.077 1359.09,238.881 1359.66,240.537 1360.23,241.103 1360.79,242.602 1361.36,238.006 1361.93,237.714 1362.5,235.332 1363.07,235.224 1363.64,231.765 1364.2,234.16 1364.77,234.117 1365.34,235.203 1365.91,236.092 1366.48,235.051 1367.05,235.825 1367.61,236.829 1368.18,236.813 1368.75,235.641 1369.32,235.625 1369.89,234.652 1370.46,234.489 1371.02,233.031 1371.59,232.212 1372.16,232.48 1372.73,232.527 1373.3,232.8 1373.87,230.747 1374.43,231.031 1375,232.122 1375.57,233.097 1376.14,232.074 1376.71,231.073 1377.28,228.022 1377.84,228.366 1378.41,229.765 1378.98,231.945 1379.55,233.14 1380.12,233.297 1380.69,234.634 1381.25,233.569 1381.82,232.281 1382.39,230.274 1382.96,229.458 1383.53,228.725 1384.1,228.064 1384.66,227.607 1385.23,228.122 1385.8,230.397 1386.37,231.695 1386.94,231.873 1387.51,233.088 1388.07,233.037 1388.64,233.122 1389.21,233.177 1389.78,235.207 1390.35,236.347 1390.92,235.139 1391.48,235.11 1392.05,235.072 1392.62,234.953 1393.19,233.514 1393.76,234.643 1394.33,236.854 1394.89,235.432 1395.46,233.227 1396.03,233.333 1396.6,231.401 1397.17,229.474 1397.74,229.812 1398.3,232.131 1398.87,234.233 1399.44,236.98 1400.01,237.048 1400.58,236.827 1401.15,235.764 1401.71,234.552 1402.28,234.3 1402.85,235.286 1403.42,234.311 1403.99,234.092 1404.56,235.215 1405.13,234.158 1405.69,235.266 1406.26,237.357 1406.83,240.14 1407.4,239.72 1407.97,241.545 1408.54,239.995 1409.1,238.456 1409.67,238.91 1410.24,237.359 1410.81,236.923 1411.38,240.743 1411.95,242.197 1412.51,237.359 1413.08,236.938 1413.65,234.564 1414.22,234.322 1414.79,231.977 1415.36,234.062 1415.92,234.006 1416.49,233.819 1417.06,232.679 1417.63,232.836 1418.2,231.698 1418.77,229.835 1419.33,230.089 1419.9,230.29 1420.47,232.427 1421.04,233.582 1421.61,233.257 1422.18,232.114 1422.74,233.164 1423.31,231.124 1423.88,232.195 1424.45,230.171 1425.02,230.14 1425.59,232.403 1426.15,232.51 1426.72,230.624 1427.29,230.749 1427.86,233.01 1428.43,231.81 1429,231.989 1429.56,231.07 1430.13,232.172 1430.7,233.291 1431.27,234.403 1431.84,234.232 1432.41,234.284 1432.97,232.086 1433.54,234.407 1434.11,233.263 1434.68,234.038 1435.25,233.832 1435.82,236.127 1436.38,235.946 1436.95,236.739 1437.52,235.43 1438.09,236.244 1438.66,235.959 1439.23,232.922 1439.79,233.213 1440.36,233.035 1440.93,232.814 1441.5,233.762 1442.07,233.753 1442.64,234.818 1443.2,235.722 1443.77,234.169 1444.34,234.11 1444.91,235.095 1445.48,233.738 1446.05,233.807 1446.61,235.379 1447.18,236.081 1447.75,232.825 1448.32,234.844 1448.89,234.622 1449.46,233.728 1450.02,232.693 1450.59,233.841 1451.16,232.594 1451.73,232.598 1452.3,231.557 1452.87,232.769 1453.43,233.877 1454,233.866 1454.57,233.025 1455.14,232.874 1455.71,233.751 1456.28,233.712 1456.84,232.601 1457.41,231.463 1457.98,231.441 1458.55,231.671 1459.12,230.583 1459.69,230.735 1460.25,231.043 1460.82,230.195 1461.39,230.276 1461.96,230.391 1462.53,230.661 1463.1,230.604 1463.66,230.674 1464.23,230.957 1464.8,231.195 1465.37,232.477 1465.94,236.759 1466.51,235.598 1467.07,235.457 1467.64,235.149 1468.21,236.159 1468.78,236.977 1469.35,238.813 1469.92,236.477 1470.48,236.172 1471.05,239.018 1471.62,236.677 1472.19,236.559 1472.76,237.256 1473.33,238.238 1473.89,235.658 1474.46,236.638 1475.03,236.015 1475.6,236.785 1476.17,237.452 1476.74,236.967 1477.31,236.331 1477.87,235.085 1478.44,231.71 1479.01,232.679 1479.58,231.64 1480.15,229.955 1480.72,230.158 1481.28,231.295 1481.85,231.439 1482.42,233.381 1482.99,233.347 1483.56,234.291 1484.13,235.086 1484.69,234.607 1485.26,233.109 1485.83,232.366 1486.4,231.3 1486.97,229.167 1487.54,229.446 1488.1,230.734 1488.67,233.875 1489.24,233.877 1489.81,231.883 1490.38,231.791 1490.95,233.837 1491.51,236.729 1492.08,236.377 1492.65,238.141 1493.22,238.447 1493.79,237.955 1494.36,238.741 1494.92,236.419 1495.49,237.177 1496.06,234.776 1496.63,233.833 1497.2,234.575 1497.77,233.285 1498.33,233.085 1498.9,232.814 1499.47,232.665 1500.04,232.673 1500.61,232.62 1501.18,231.424 1501.74,233.334 1502.31,234.367 1502.88,234.156 1503.45,233.928 1504.02,232.773 1504.59,232.645 1505.15,231.244 1505.72,228.228 1506.29,228.405 1506.86,228.549 1507.43,228.8 1508,228.918 1508.56,230.139 1509.13,230.296 1509.7,230.3 1510.27,229.297 1510.84,230.553 1511.41,228.817 1511.97,227.001 1512.54,227.538 1513.11,229.073 1513.68,229.017 1514.25,229.218 1514.82,228.411 1515.38,228.788 1515.95,228.317 1516.52,226.656 1517.09,228.249 1517.66,228.65 1518.23,226.998 1518.79,226.545 1519.36,228.162 1519.93,231.502 1520.5,231.915 1521.07,233.084 1521.64,233.908 1522.2,233.143 1522.77,234.257 1523.34,233.318 1523.91,233.285 1524.48,233.407 1525.05,232.37 1525.61,232.578 1526.18,232.741 1526.75,232.681 1527.32,230.794 1527.89,232.747 1528.46,232.632 1529.02,231.661 1529.59,229.853 1530.16,230.266 1530.73,229.638 1531.3,227.975 1531.87,229.416 1532.43,229.878 1533,226.945 1533.57,228.535 1534.14,228.009 1534.71,226.373 1535.28,229.128 1535.84,229.585 1536.41,228.783 1536.98,229.223 1537.55,229.601 1538.12,227.927 1538.69,231.462 1539.25,228.601 1539.82,231.094 1540.39,229.396 1540.96,225.45 1541.53,226.176 1542.1,226.963 1542.66,231.419 1543.23,233.667 1543.8,233.032 1544.37,232.332 1544.94,233.432 1545.51,231.428 1546.08,231.765 1546.64,232.104 1547.21,232.625 1547.78,234.703 1548.35,233.563 1548.92,235.657 1549.49,235.824 1550.05,238.88 1550.62,237.648 1551.19,235.547 1551.76,236.861 1552.33,236.807 1552.9,237.699 1553.46,237.721 1554.03,236.583 1554.6,236.364 1555.17,237.168 1555.74,239.028 1556.31,238.615 1556.87,239.56 1557.44,239.136 1558.01,239.737 1558.58,240.558 1559.15,241.285 1559.72,240.838 1560.28,239.323 1560.85,239.048 1561.42,239.731 1561.99,240.479 1562.56,239.909 1563.13,240.371 1563.69,240.75 1564.26,239.147 1564.83,239.653 1565.4,240.018 1565.97,237.446 1566.54,239.247 1567.1,239.637 1567.67,238.023 1568.24,236.435 1568.81,237.156 1569.38,233.804 1569.95,233.824 1570.51,235.661 1571.08,234.189 1571.65,236.193 1572.22,234.914 1572.79,233.609 1573.36,233.603 1573.92,233.524 1574.49,233.096 1575.06,231.967 1575.63,232.042 1576.2,231.073 1576.77,230.232 1577.33,230.359 1577.9,231.524 1578.47,233.731 1579.04,232.618 1579.61,232.404 1580.18,231.426 1580.74,230.537 1581.31,230.946 1581.88,229.945 1582.45,230.208 1583.02,231.385 1583.59,230.38 1584.15,231.748 1584.72,229.982 1585.29,230.141 1585.86,231.314 1586.43,232.37 1587,231.457 1587.56,232.718 1588.13,232.705 1588.7,231.704 1589.27,232.01 1589.84,234.227 1590.41,236.141 1590.97,235.03 1591.54,235.94 1592.11,235.712 1592.68,234.514 1593.25,232.543 1593.82,230.747 1594.38,231.763 1594.95,233.018 1595.52,233.367 1596.09,233.297 1596.66,231.077 1597.23,229.339 1597.79,230.69 1598.36,229.967 1598.93,231.418 1599.5,230.523 1600.07,229.929 1600.64,231.277 1601.2,231.21 1601.77,231.292 1602.34,232.48 1602.91,234.556 1603.48,236.523 1604.05,235.333 1604.61,236.074 1605.18,235.823 1605.75,235.705 1606.32,235.487 1606.89,235.486 1607.46,235.331 1608.02,235.264 1608.59,237.163 1609.16,235.04 1609.73,234.1 1610.3,237.031 1610.87,237.002 1611.43,236.704 1612,236.46 1612.57,235.194 1613.14,236.032 1613.71,235.877 1614.28,233.687 1614.84,233.652 1615.41,231.532 1615.98,230.584 1616.55,230.659 1617.12,232.785 1617.69,230.761 1618.26,231.852 1618.82,232.725 1619.39,232.99 1619.96,232.746 1620.53,233.047 1621.1,231.001 1621.67,232.486 1622.23,231.405 1622.8,232.535 1623.37,233.527 1623.94,232.409 1624.51,233.584 1625.08,234.631 1625.64,233.486 1626.21,232.551 1626.78,231.643 1627.35,230.8 1627.92,230.762 1628.49,228.966 1629.05,227.119 1629.62,228.87 1630.19,230.319 1630.76,230.503 1631.33,232.663 1631.9,232.635 1632.46,232.813 1633.03,230.951 1633.6,230.24 1634.17,229.376 1634.74,228.735 1635.31,229.975 1635.87,230.241 1636.44,230.649 1637.01,232.109 1637.58,232.232 1638.15,233.398 1638.72,233.248 1639.28,233.161 1639.85,233.235 1640.42,232.338 1640.99,232.361 1641.56,230.14 1642.13,230.698 1642.69,232.016 1643.26,231.88 1643.83,235.234 1644.4,235.216 1644.97,235.128 1645.54,235.043 1646.1,234.955 1646.67,235.783 1647.24,235.59 1647.81,236.453 1648.38,237.556 1648.95,236.207 1649.51,237.048 1650.08,238.825 1650.65,239.51 1651.22,239.364 1651.79,236.67 1652.36,235.396 1652.92,237.195 1653.49,236.809 1654.06,237.699 1654.63,235.188 1655.2,236.034 1655.77,233.588 1656.33,233.479 1656.9,233.615 1657.47,233.61 1658.04,234.517 1658.61,232.372 1659.18,232.656 1659.74,232.535 1660.31,231.581 1660.88,231.909 1661.45,230.841 1662.02,231.164 1662.59,232.348 1663.15,231.585 1663.72,230.522 1664.29,227.616 1664.86,230.098 1665.43,231.614 1666,231.965 1666.56,230.96 1667.13,231.077 1667.7,232.253 1668.27,232.362 1668.84,231.456 1669.41,231.677 1669.97,229.473 1670.54,233.209 1671.11,233.327 1671.68,235.419 1672.25,234.491 1672.82,233.414 1673.38,233.353 1673.95,233.388 1674.52,235.193 1675.09,236.242 1675.66,236.046 1676.23,236.821 1676.79,235.547 1677.36,235.329 1677.93,236.386 1678.5,236.27 1679.07,234.979 1679.64,236.075 1680.2,236.775 1680.77,237.441 1681.34,237.245 1681.91,236.677 1682.48,234.513 1683.05,235.51 1683.61,234.392 1684.18,236.243 1684.75,235.991 1685.32,236.973 1685.89,235.53 1686.46,235.357 1687.02,233.996 1687.59,230.858 1688.16,232.888 1688.73,232.916 1689.3,232.793 1689.87,232.555 1690.44,232.415 1691,233.541 1691.57,234.511 1692.14,233.418 1692.71,232.289 1693.28,229.43 1693.85,227.7 1694.41,228.267 1694.98,229.601 1695.55,230.931 1696.12,228.091 1696.69,227.23 1697.26,228.488 1697.82,230.01 1698.39,229.12 1698.96,229.632 1699.53,231.16 1700.1,232.568 1700.67,234.624 1701.23,234.51 1701.8,233.464 1702.37,234.307 1702.94,235.224 1703.51,236.133 1704.08,238.172 1704.64,237.995 1705.21,237.823 1705.78,240.629 1706.35,239.986 1706.92,238.317 1707.49,238.094 1708.05,238.535 1708.62,237.198 1709.19,236.928 1709.76,237.618 1710.33,237.457 1710.9,236.294 1711.46,236.974 1712.03,238.536 1712.6,237.005 1713.17,235.565 1713.74,236.555 1714.31,236.407 1714.87,237.137 1715.44,236.793 1716.01,233.456 1716.58,235.325 1717.15,235.142 1717.72,235.829 1718.28,234.513 1718.85,232.298 1719.42,231.175 1719.99,234.314 1720.56,237.062 1721.13,235.763 1721.69,233.579 1722.26,232.517 1722.83,231.442 1723.4,228.536 1723.97,228.817 1724.54,229.08 1725.1,228.211 1725.67,227.545 1726.24,225.833 1726.81,226.34 1727.38,223.904 1727.95,224.852 1728.51,224.509 1729.08,223.199 1729.65,222.937 1730.22,222.743 1730.79,223.479 1731.36,226.289 1731.92,227.907 1732.49,230.421 1733.06,233.682 1733.63,234.724 1734.2,231.469 1734.77,231.659 1735.33,232.884 1735.9,232.802 1736.47,231.866 1737.04,236.034 1737.61,234.016 1738.18,235.103 1738.74,234.96 1739.31,236.8 1739.88,238.515 1740.45,239.225 1741.02,238.853 1741.59,237.71 1742.15,236.29 1742.72,235.309 1743.29,236.352 1743.86,237.016 1744.43,238.052 1745,239.466 1745.56,236.953 1746.13,237.591 1746.7,234.262 1747.27,235.156 1747.84,235.822 1748.41,235.67 1748.97,234.401 1749.54,233.098 1750.11,232.931 1750.68,235.01 1751.25,234.678 1751.82,232.59 1752.38,234.654 1752.95,237.48 1753.52,236.121 1754.09,235.812 1754.66,237.888 1755.23,232.517 1755.79,231.606 1756.36,232.576 1756.93,231.43 1757.5,229.305 1758.07,230.299 1758.64,231.547 1759.21,230.718 1759.77,231.819 1760.34,232.64 1760.91,232.586 1761.48,233.46 1762.05,233.515 1762.62,233.512 1763.18,234.567 1763.75,234.403 1764.32,233.241 1764.89,232.218 1765.46,232.39 1766.03,231.46 1766.59,231.49 1767.16,230.519 1767.73,232.662 1768.3,232.586 1768.87,230.614 1769.44,230.88 1770,230.797 1770.57,230.947 1771.14,230.141 1771.71,232.54 1772.28,234.81 1772.85,233.493 1773.41,233.587 1773.98,232.409 1774.55,231.405 1775.12,233.613 1775.69,231.621 1776.26,230.771 1776.82,231.993 1777.39,227.231 1777.96,226.763 1778.53,226.127 1779.1,226.772 1779.67,227.276 1780.23,226.728 1780.8,228.057 1781.37,229.502 1781.94,228.727 1782.51,229.973 1783.08,231.299 1783.64,232.679 1784.21,233.737 1784.78,234.816 1785.35,238.97 1785.92,239.695 1786.49,239.31 1787.05,237.772 1787.62,236.377 1788.19,236.233 1788.76,234.203 1789.33,233.084 1789.9,234.172 1790.46,235.252 1791.03,233.114 1791.6,231.911 1792.17,231.244 1792.74,230.558 1793.31,228.737 1793.87,227.986 1794.44,227.515 1795.01,227.9 1795.58,228.255 1796.15,228.75 1796.72,229.015 1797.28,229.59 1797.85,231.054 1798.42,234.427 1798.99,234.457 1799.56,233.447 1800.13,232.295 1800.69,231.393 1801.26,232.905 1801.83,233.095 1802.4,235.368 1802.97,235.201 1803.54,233.145 1804.1,235.981 1804.67,237.752 1805.24,237.717 1805.81,237.598 1806.38,237.277 1806.95,236.961 1807.51,236.67 1808.08,234.253 1808.65,235.155 1809.22,232.753 1809.79,232.938 1810.36,232.916 1810.92,231.75 1811.49,230.866 1812.06,231.178 1812.63,231.213 1813.2,229.211 1813.77,230.638 1814.33,233.911 1814.9,230.816 1815.47,233.222 1816.04,232.444 1816.61,234.611 1817.18,235.551 1817.74,237.526 1818.31,240.498 1818.88,241.118 1819.45,240.336 1820.02,239.858 1820.59,239.404 1821.15,239.144 1821.72,239.767 1822.29,239.184 1822.86,239.697 1823.43,239.203 1824,237.799 1824.56,236.388 1825.13,237.267 1825.7,235.887 1826.27,238.665 1826.84,238.234 1827.41,238.876 1827.97,239.36 1828.54,237.86 1829.11,235.543 1829.68,236.434 1830.25,238.29 1830.82,238.826 1831.39,238.335 1831.95,237.044 1832.52,235.568 1833.09,234.253 1833.66,235.063 1834.23,234.839 1834.8,234.336 1835.36,234.922 1835.93,236.614 1836.5,238.305 1837.07,238.754 1837.64,239.101 1838.21,237.614 1838.77,234.139 1839.34,232.975 1839.91,230.775 1840.48,229.884 1841.05,230.708 1841.62,231.948 1842.18,231.983 1842.75,232.916 1843.32,232.925 1843.89,232.908 1844.46,233.021 1845.03,232.973 1845.59,232.868 1846.16,232.978 1846.73,233.112 1847.3,233.025 1847.87,235.107 1848.44,232.661 1849,232.569 1849.57,230.551 1850.14,230.643 1850.71,231.626 1851.28,230.69 1851.85,228.788 1852.41,227.77 1852.98,229.107 1853.55,229.086 1854.12,228.309 1854.69,226.434 1855.26,224.773 1855.82,224.218 1856.39,224.929 1856.96,227.637 1857.53,227.984 1858.1,229.264 1858.67,229.489 1859.23,229.595 1859.8,229.708 1860.37,230.99 1860.94,230.055 1861.51,234.419 1862.08,233.339 1862.64,232.383 1863.21,233.534 1863.78,232.209 1864.35,230.304 1864.92,229.388 1865.49,229.34 1866.05,227.609 1866.62,228.976 1867.19,231.316 1867.76,231.138 1868.33,230.293 1868.9,228.585 1869.46,228.064 1870.03,228.517 1870.6,228.811 1871.17,229.34 1871.74,230.697 1872.31,231.912 1872.87,231.886 1873.44,232.108 1874.01,231.271 1874.58,230.42 1875.15,230.518 1875.72,232.949 1876.28,232.975 1876.85,232.27 1877.42,234.471 1877.99,235.56 1878.56,234.377 1879.13,235.101 1879.69,235.079 1880.26,234.171 1880.83,232.335 1881.4,233.604 1881.97,233.598 1882.54,233.615 1883.1,233.59 1883.67,235.527 1884.24,235.604 1884.81,234.615 1885.38,234.583 1885.95,234.483 1886.51,236.37 1887.08,239.319 1887.65,237.939 1888.22,239.76 1888.79,238.187 1889.36,236.895 1889.92,232.508 1890.49,231.313 1891.06,233.579 1891.63,232.656 1892.2,232.76 1892.77,232.756 1893.33,233.854 1893.9,231.957 1894.47,232.127 1895.04,230.128 1895.61,229.32 1896.18,230.562 1896.74,230.818 1897.31,230.055 1897.88,231.243 1898.45,231.551 1899.02,233.784 1899.59,233.862 1900.16,232.746 1900.72,230.921 1901.29,230.996 1901.86,231.315 1902.43,231.671 1903,231.842 1903.57,231.103 1904.13,230.233 1904.7,231.637 1905.27,231.953 1905.84,232.094 1906.41,232.071 1906.98,232.38 1907.54,234.585 1908.11,234.702 1908.68,236.706 1909.25,236.425 1909.82,236.233 1910.39,237.058 1910.95,236.878 1911.52,235.6 1912.09,233.288 1912.66,233.298 1913.23,232.339 1913.8,232.533 1914.36,232.436 1914.93,232.623 1915.5,233.923 1916.07,231.808 1916.64,233.044 1917.21,233.269 1917.77,233.452 1918.34,233.343 1918.91,234.374 1919.48,235.259 1920.05,235.329 1920.62,235.334 1921.18,233.281 1921.75,232.088 1922.32,231.027 1922.89,233.219 1923.46,233.083 1924.03,233.153 1924.59,230.165 1925.16,228.164 1925.73,228.698 1926.3,226.793 1926.87,226.598 1927.44,225.402 1928,227.994 1928.57,231.601 1929.14,231.772 1929.71,234.889 1930.28,233.736 1930.85,233.814 1931.41,235.936 1931.98,233.768 1932.55,233.557 1933.12,233.465 1933.69,233.328 1934.26,232.272 1934.82,233.429 1935.39,236.655 1935.96,235.422 1936.53,234.302 1937.1,233.381 1937.67,235.584 1938.23,235.53 1938.8,234.522 1939.37,235.485 1939.94,234.347 1940.51,234.22 1941.08,236.337 1941.64,236.207 1942.21,236.146 1942.78,234.137 1943.35,235.176 1943.92,234.237 1944.49,233.297 1945.05,234.693 1945.62,231.591 1946.19,229.928 1946.76,231.297 1947.33,231.298 1947.9,232.518 1948.46,233.807 1949.03,234.849 1949.6,235.72 1950.17,234.47 1950.74,233.533 1951.31,231.651 1951.87,231.954 1952.44,230.924 1953.01,232.117 1953.58,233.53 1954.15,234.564 1954.72,232.391 1955.28,230.52 1955.85,233.837 1956.42,233.032 1956.99,233.453 1957.56,234.664 1958.13,232.569 1958.69,234.681 1959.26,236.796 1959.83,236.52 1960.4,236.558 1960.97,238.499 1961.54,238.311 1962.1,237.119 1962.67,235.972 1963.24,235.758 1963.81,232.826 1964.38,231.916 1964.95,235.122 1965.51,235.807 1966.08,236.583 1966.65,236.396 1967.22,234.223 1967.79,234.394 1968.36,236.633 1968.92,236.146 1969.49,233.934 1970.06,233.863 1970.63,231.697 1971.2,230.562 1971.77,230.845 1972.34,231.319 1972.9,232.391 1973.47,232.214 1974.04,233.146 1974.61,233.116 1975.18,236.244 1975.75,237.076 1976.31,234.7 1976.88,233.751 1977.45,234.671 1978.02,237.711 1978.59,239.551 1979.16,239.017 1979.72,237.846 1980.29,236.318 1980.86,238.257 1981.43,237.117 1982,236.642 1982.57,237.593 1983.13,237.172 1983.7,235.905 1984.27,235.777 1984.84,236.866 1985.41,235.602 1985.98,235.315 1986.54,235.287 1987.11,234.96 1987.68,235.902 1988.25,237.813 1988.82,237.59 1989.39,239.014 1989.95,239.598 1990.52,238.981 1991.09,239.383 1991.66,239.097 1992.23,236.582 1992.8,235.056 1993.36,237.715 1993.93,239.298 1994.5,238.57 1995.07,238.107 1995.64,238.786 1996.21,239.334 1996.77,239.946 1997.34,239.479 1997.91,238.958 1998.48,239.386 1999.05,240.836 1999.62,240.176 2000.18,238.423 2000.75,239.732 2001.32,238.02 2001.89,237.283 2002.46,235.831 2003.03,234.308 2003.59,233.027 2004.16,231.805 2004.73,231.838 2005.3,231.557 2005.87,230.355 2006.44,229.417 2007,229.275 2007.57,228.274 2008.14,230.369 2008.71,230.442 2009.28,229.614 2009.85,226.525 2010.41,227.894 2010.98,228.227 2011.55,226.573 2012.12,225.912 2012.69,227.548 2013.26,226.003 2013.82,225.27 2014.39,228.902 2014.96,230.157 2015.53,230.322 2016.1,232.56 2016.67,231.464 2017.23,230.478 2017.8,230.547 2018.37,228.501 2018.94,232.29 2019.51,233.326 2020.08,232.352 2020.64,230.506 2021.21,230.535 2021.78,230.513 2022.35,231.811 2022.92,232.966 2023.49,233.973 2024.05,233.775 2024.62,233.79 2025.19,234.725 2025.76,233.526 2026.33,234.531 2026.9,234.36 2027.46,234.333 2028.03,234.113 2028.6,235.917 2029.17,232.817 2029.74,232.774 2030.31,231.503 2030.87,233.541 2031.44,234.583 2032.01,232.657 2032.58,231.321 2033.15,231.246 2033.72,231.178 2034.28,229.302 2034.85,226.344 2035.42,225.79 2035.99,227.397 2036.56,225.687 2037.13,226.314 2037.69,230.079 2038.26,229.179 2038.83,229.417 2039.4,230.586 2039.97,231.734 2040.54,230.744 2041.11,228.885 2041.67,230.586 2042.24,229.632 2042.81,228.888 2043.38,228.034 2043.95,230.459 2044.52,231.502 2045.08,232.53 2045.65,232.766 2046.22,232.816 2046.79,233.986 2047.36,233.763 2047.93,233.692 2048.49,233.814 2049.06,233.79 2049.63,233.84 2050.2,235.926 2050.77,236.917 2051.34,235.883 2051.9,236.752 2052.47,236.602 2053.04,238.361 2053.61,237.964 2054.18,238.358 2054.75,238.853 2055.31,238.403 2055.88,237.039 2056.45,235.728 2057.02,234.349 2057.59,233.288 2058.16,232.394 2058.72,231.227 2059.29,228.327 2059.86,226.777 2060.43,228.29 2061,227.62 2061.57,226.041 2062.13,225.479 2062.7,227.392 2063.27,226.748 2063.84,227.064 2064.41,228.515 2064.98,229.03 2065.54,229.515 2066.11,229.751 2066.68,231.355 2067.25,232.761 2067.82,233.962 2068.39,234.883 2068.95,233.598 2069.52,234.826 2070.09,232.535 2070.66,232.556 2071.23,233.693 2071.8,234.665 2072.36,233.706 2072.93,234.816 2073.5,235.957 2074.07,235.791 2074.64,234.554 2075.21,235.775 2075.77,234.647 2076.34,235.564 2076.91,235.399 2077.48,234.429 2078.05,233.326 2078.62,234.419 2079.18,233.435 2079.75,233.329 2080.32,232.49 2080.89,231.476 2081.46,231.522 2082.03,232.625 2082.59,234.597 2083.16,235.604 2083.73,235.365 2084.3,237.364 2084.87,238.262 2085.44,234.833 2086,233.504 2086.57,236.512 2087.14,237.332 2087.71,237.082 2088.28,239.088 2088.85,240.787 2089.41,239.153 2089.98,239.853 2090.55,238.448 2091.12,238.072 2091.69,237.736 2092.26,237.354 2092.82,235.875 2093.39,235.62 2093.96,235.305 2094.53,237.099 2095.1,234.622 2095.67,235.561 2096.23,233.148 2096.8,233.963 2097.37,233.676 2097.94,233.679 2098.51,235.835 2099.08,235.4 2099.64,235.078 2100.21,234.705 2100.78,233.436 2101.35,233.317 2101.92,233.212 2102.49,234.204 2103.05,232.18 2103.62,230.097 2104.19,229.195 2104.76,229.558 2105.33,231.716 2105.9,230.684 2106.46,232.9 2107.03,231.803 2107.6,231.82 2108.17,231.89 2108.74,233.913 2109.31,234.079 2109.87,233.737 2110.44,234.49 2111.01,235.426 2111.58,235.306 2112.15,235.062 2112.72,236.085 2113.29,236.853 2113.85,236.538 2114.42,237.322 2114.99,237.782 2115.56,238.396 2116.13,237.074 2116.7,237.65 2117.26,239.396 2117.83,237.873 2118.4,236.44 2118.97,236.24 2119.54,235.899 2120.11,237.49 2120.67,236.129 2121.24,236.713 2121.81,236.544 2122.38,236.268 2122.95,233.766 2123.52,233.557 2124.08,234.526 2124.65,235.299 2125.22,238.064 2125.79,236.655 2126.36,238.485 2126.93,236.976 2127.49,237.55 2128.06,237.128 2128.63,236.465 2129.2,235.073 2129.77,236.064 2130.34,235.603 2130.9,235.258 2131.47,233.919 2132.04,232.486 2132.61,231.186 2133.18,230.136 2133.75,229.301 2134.31,228.44 2134.88,228.729 2135.45,229.024 2136.02,229.38 2136.59,228.424 2137.16,228.86 2137.72,227.834 2138.29,226.746 2138.86,226.012 2139.43,226.26 2140,225.634 2140.57,225.089 2141.13,225.492 2141.7,223.173 2142.27,226.057 2142.84,224.322 2143.41,223.744 2143.98,222.338 2144.54,224.143 2145.11,224.892 2145.68,226.335 2146.25,226.807 2146.82,230.255 2147.39,230.37 2147.95,230.234 2148.52,229.446 2149.09,229.474 2149.66,227.722 2150.23,228.171 2150.8,228.624 2151.36,228.918 2151.93,229.573 2152.5,229.812 2153.07,230.141 2153.64,231.403 2154.21,229.685 2154.77,231.311 2155.34,233.584 2155.91,233.735 2156.48,233.907 2157.05,235.152 2157.62,233.131 2158.18,233.177 2158.75,232.138 2159.32,232.464 2159.89,231.451 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip280)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.034 ± 0.02\n  with uncertainty of ± 0.0012801580990963856\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0188 ± (0.00222103, 0.00231843) (MC)\n  95% confidence interval: [-4.02346, -4.01429] (MC)\n  linear error propagation: -4.01887 ± 0.00228992\n  |δ_y| = |0.00155199| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.018797538772063, val_l = 0.004661382182887586, val_u = 0.004507590662013783)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip310\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip310)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip311\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip310)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip312\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1142.23 2211.02,1142.23 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,982.211 2211.02,982.211 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,822.191 2211.02,822.191 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,662.17 2211.02,662.17 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,502.149 2211.02,502.149 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,342.128 2211.02,342.128 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1142.23 365.751,1142.23 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,982.211 365.751,982.211 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,822.191 365.751,822.191 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,662.17 365.751,662.17 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,502.149 365.751,502.149 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,342.128 365.751,342.128 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M298.909 1128.03 Q295.298 1128.03 293.469 1131.6 Q291.664 1135.14 291.664 1142.27 Q291.664 1149.37 293.469 1152.94 Q295.298 1156.48 298.909 1156.48 Q302.543 1156.48 304.349 1152.94 Q306.177 1149.37 306.177 1142.27 Q306.177 1135.14 304.349 1131.6 Q302.543 1128.03 298.909 1128.03 M298.909 1124.33 Q304.719 1124.33 307.775 1128.93 Q310.853 1133.52 310.853 1142.27 Q310.853 1150.99 307.775 1155.6 Q304.719 1160.18 298.909 1160.18 Q293.099 1160.18 290.02 1155.6 Q286.964 1150.99 286.964 1142.27 Q286.964 1133.52 290.02 1128.93 Q293.099 1124.33 298.909 1124.33 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M259.557 995.556 L267.196 995.556 L267.196 969.191 L258.886 970.857 L258.886 966.598 L267.15 964.931 L271.826 964.931 L271.826 995.556 L279.465 995.556 L279.465 999.491 L259.557 999.491 L259.557 995.556 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M298.909 968.01 Q295.298 968.01 293.469 971.575 Q291.664 975.117 291.664 982.246 Q291.664 989.353 293.469 992.917 Q295.298 996.459 298.909 996.459 Q302.543 996.459 304.349 992.917 Q306.177 989.353 306.177 982.246 Q306.177 975.117 304.349 971.575 Q302.543 968.01 298.909 968.01 M298.909 964.306 Q304.719 964.306 307.775 968.913 Q310.853 973.496 310.853 982.246 Q310.853 990.973 307.775 995.579 Q304.719 1000.16 298.909 1000.16 Q293.099 1000.16 290.02 995.579 Q286.964 990.973 286.964 982.246 Q286.964 973.496 290.02 968.913 Q293.099 964.306 298.909 964.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M262.775 835.535 L279.094 835.535 L279.094 839.471 L257.15 839.471 L257.15 835.535 Q259.812 832.781 264.395 828.151 Q269.002 823.498 270.182 822.156 Q272.428 819.633 273.307 817.897 Q274.21 816.137 274.21 814.448 Q274.21 811.693 272.266 809.957 Q270.344 808.221 267.242 808.221 Q265.043 808.221 262.59 808.985 Q260.159 809.749 257.381 811.299 L257.381 806.577 Q260.205 805.443 262.659 804.864 Q265.113 804.286 267.15 804.286 Q272.52 804.286 275.715 806.971 Q278.909 809.656 278.909 814.147 Q278.909 816.276 278.099 818.198 Q277.312 820.096 275.205 822.688 Q274.627 823.36 271.525 826.577 Q268.423 829.772 262.775 835.535 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M298.909 807.989 Q295.298 807.989 293.469 811.554 Q291.664 815.096 291.664 822.225 Q291.664 829.332 293.469 832.897 Q295.298 836.438 298.909 836.438 Q302.543 836.438 304.349 832.897 Q306.177 829.332 306.177 822.225 Q306.177 815.096 304.349 811.554 Q302.543 807.989 298.909 807.989 M298.909 804.286 Q304.719 804.286 307.775 808.892 Q310.853 813.475 310.853 822.225 Q310.853 830.952 307.775 835.559 Q304.719 840.142 298.909 840.142 Q293.099 840.142 290.02 835.559 Q286.964 830.952 286.964 822.225 Q286.964 813.475 290.02 808.892 Q293.099 804.286 298.909 804.286 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M272.914 660.816 Q276.27 661.533 278.145 663.802 Q280.043 666.07 280.043 669.404 Q280.043 674.519 276.525 677.32 Q273.006 680.121 266.525 680.121 Q264.349 680.121 262.034 679.681 Q259.742 679.265 257.289 678.408 L257.289 673.894 Q259.233 675.029 261.548 675.607 Q263.863 676.186 266.386 676.186 Q270.784 676.186 273.076 674.45 Q275.39 672.714 275.39 669.404 Q275.39 666.348 273.238 664.635 Q271.108 662.899 267.289 662.899 L263.261 662.899 L263.261 659.056 L267.474 659.056 Q270.923 659.056 272.752 657.691 Q274.58 656.302 274.58 653.709 Q274.58 651.047 272.682 649.635 Q270.807 648.2 267.289 648.2 Q265.367 648.2 263.168 648.617 Q260.969 649.033 258.33 649.913 L258.33 645.746 Q260.992 645.006 263.307 644.635 Q265.645 644.265 267.705 644.265 Q273.029 644.265 276.131 646.695 Q279.233 649.103 279.233 653.223 Q279.233 656.093 277.59 658.084 Q275.946 660.052 272.914 660.816 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M298.909 647.969 Q295.298 647.969 293.469 651.533 Q291.664 655.075 291.664 662.205 Q291.664 669.311 293.469 672.876 Q295.298 676.417 298.909 676.417 Q302.543 676.417 304.349 672.876 Q306.177 669.311 306.177 662.205 Q306.177 655.075 304.349 651.533 Q302.543 647.969 298.909 647.969 M298.909 644.265 Q304.719 644.265 307.775 648.871 Q310.853 653.455 310.853 662.205 Q310.853 670.931 307.775 675.538 Q304.719 680.121 298.909 680.121 Q293.099 680.121 290.02 675.538 Q286.964 670.931 286.964 662.205 Q286.964 653.455 290.02 648.871 Q293.099 644.265 298.909 644.265 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M271.594 488.943 L259.789 507.392 L271.594 507.392 L271.594 488.943 M270.367 484.869 L276.247 484.869 L276.247 507.392 L281.177 507.392 L281.177 511.281 L276.247 511.281 L276.247 519.429 L271.594 519.429 L271.594 511.281 L255.992 511.281 L255.992 506.767 L270.367 484.869 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M298.909 487.948 Q295.298 487.948 293.469 491.513 Q291.664 495.054 291.664 502.184 Q291.664 509.29 293.469 512.855 Q295.298 516.397 298.909 516.397 Q302.543 516.397 304.349 512.855 Q306.177 509.29 306.177 502.184 Q306.177 495.054 304.349 491.513 Q302.543 487.948 298.909 487.948 M298.909 484.244 Q304.719 484.244 307.775 488.851 Q310.853 493.434 310.853 502.184 Q310.853 510.911 307.775 515.517 Q304.719 520.1 298.909 520.1 Q293.099 520.1 290.02 515.517 Q286.964 510.911 286.964 502.184 Q286.964 493.434 290.02 488.851 Q293.099 484.244 298.909 484.244 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M258.793 324.848 L277.15 324.848 L277.15 328.783 L263.076 328.783 L263.076 337.256 Q264.094 336.908 265.113 336.746 Q266.131 336.561 267.15 336.561 Q272.937 336.561 276.316 339.733 Q279.696 342.904 279.696 348.32 Q279.696 353.899 276.224 357.001 Q272.752 360.08 266.432 360.08 Q264.256 360.08 261.988 359.709 Q259.742 359.339 257.335 358.598 L257.335 353.899 Q259.418 355.033 261.641 355.589 Q263.863 356.144 266.34 356.144 Q270.344 356.144 272.682 354.038 Q275.02 351.932 275.02 348.32 Q275.02 344.709 272.682 342.603 Q270.344 340.496 266.34 340.496 Q264.465 340.496 262.59 340.913 Q260.738 341.33 258.793 342.209 L258.793 324.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M298.909 327.927 Q295.298 327.927 293.469 331.492 Q291.664 335.033 291.664 342.163 Q291.664 349.269 293.469 352.834 Q295.298 356.376 298.909 356.376 Q302.543 356.376 304.349 352.834 Q306.177 349.269 306.177 342.163 Q306.177 335.033 304.349 331.492 Q302.543 327.927 298.909 327.927 M298.909 324.223 Q304.719 324.223 307.775 328.83 Q310.853 333.413 310.853 342.163 Q310.853 350.89 307.775 355.496 Q304.719 360.08 298.909 360.08 Q293.099 360.08 290.02 355.496 Q286.964 350.89 286.964 342.163 Q286.964 333.413 290.02 328.83 Q293.099 324.223 298.909 324.223 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip312)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1024.32 400.199,916.003 400.786,938.554 401.372,843.392 401.958,754.244 402.545,672.701 403.131,600.21 403.718,530.342 404.304,466.822 404.891,412.736 405.477,362.077 406.063,400.223 406.65,430.711 407.236,387.194 407.823,349.746 408.409,314.918 408.995,285.128 409.582,257.919 410.168,234.178 410.755,263.396 411.341,244.01 411.927,228.944 412.514,255.508 413.1,243.335 413.687,233.538 414.273,225.956 414.86,219.895 415.446,245.817 416.032,242.32 416.619,240.738 417.205,241.163 417.792,242.33 418.378,244.875 418.964,249.202 419.551,254.066 420.137,296.366 420.724,301.931 421.31,354.564 421.896,360.076 422.483,367.119 423.069,374.763 423.656,382.634 424.242,391.219 424.829,411.909 425.415,421.289 426.001,441.621 426.588,452.346 427.174,463.236 427.761,474.957 428.347,495.178 428.933,530.175 429.52,542.74 430.106,555.388 430.693,574.529 431.279,586.899 431.865,598.913 432.452,623.247 433.038,646.971 433.625,658.675 434.211,670.22 434.798,681.57 435.384,708.047 435.97,719.584 436.557,731.187 437.143,742.74 437.73,754.166 438.316,769.454 438.902,784.292 439.489,794.562 440.075,815.762 440.662,832.265 441.248,851.773 441.835,866.549 442.421,874.094 443.007,885.053 443.594,898.807 444.18,909.084 444.767,918.754 445.353,928.348 445.939,938.041 446.526,955.459 447.112,963.852 447.699,974.814 448.285,982.735 448.871,1000.53 449.458,1010.24 450.044,1017.21 450.631,1028.45 451.217,1030.3 451.804,1039.46 452.39,1052.29 452.976,1058.19 453.563,1066.38 454.149,1069.79 454.736,1075.22 455.322,1082.88 455.908,1096.11 456.495,1100.94 457.081,1103.5 457.668,1108.14 458.254,1114.64 458.84,1117.35 459.427,1117.91 460.013,1122.49 460.6,1125.02 461.186,1127.48 461.773,1133.51 462.359,1135.64 462.945,1139.95 463.532,1145.79 464.118,1148.02 464.705,1150.06 465.291,1152.16 465.877,1157.8 466.464,1159.9 467.05,1164.67 467.637,1166.16 468.223,1167.89 468.809,1172.86 469.396,1177.57 469.982,1181.84 470.569,1186.16 471.155,1190.35 471.742,1192.64 472.328,1195.47 472.914,1196.11 473.501,1198.39 474.087,1201.93 474.674,1211.92 475.26,1211.56 475.846,1214.51 476.433,1218.79 477.019,1219.95 477.606,1219.5 478.192,1220.81 478.778,1220.49 479.365,1221.64 479.951,1225.75 480.538,1228.31 481.124,1230.72 481.711,1230.16 482.297,1232.35 482.883,1234.23 483.47,1236.27 484.056,1237.09 484.643,1236.07 485.229,1236.65 485.815,1236.01 486.402,1236.62 486.988,1238.63 487.575,1238.07 488.161,1234.64 488.748,1235.4 489.334,1234.56 489.92,1238.07 490.507,1237.12 491.093,1237.72 491.68,1236.81 492.266,1238.96 492.852,1237.91 493.439,1237.36 494.025,1236.67 494.612,1236.12 495.198,1238.4 495.784,1237.56 496.371,1235.67 496.957,1233.89 497.544,1234.82 498.13,1237.22 498.717,1236.54 499.303,1237.31 499.889,1239.47 500.476,1238.75 501.062,1240.99 501.649,1238.57 502.235,1238.12 502.821,1236.27 503.408,1235.75 503.994,1238.18 504.581,1237.56 505.167,1233.91 505.753,1237.93 506.34,1237.58 506.926,1241.34 507.513,1241.92 508.099,1242.57 508.686,1242.13 509.272,1240.07 509.858,1242.05 510.445,1237.15 511.031,1237.94 511.618,1238.86 512.204,1238.51 512.79,1238.2 513.377,1236.23 513.963,1242.7 514.55,1241.86 515.136,1241.64 515.722,1240.89 516.309,1245.5 516.895,1245.85 517.482,1247.9 518.068,1246.1 518.655,1245.19 519.241,1245.89 519.827,1247.58 520.414,1250.53 521,1249.48 521.587,1248.26 522.173,1247.41 522.759,1249.1 523.346,1246.9 523.932,1247.2 524.519,1242.26 525.105,1241.54 525.691,1238.11 526.278,1238.95 526.864,1240.51 527.451,1242.37 528.037,1241.55 528.624,1243.19 529.21,1243.92 529.796,1243.07 530.383,1243.81 530.969,1243.27 531.556,1241.35 532.142,1237.96 532.728,1238.68 533.315,1238.13 533.901,1234.77 534.488,1236.12 535.074,1236.9 535.661,1237.51 536.247,1237.01 536.833,1236.52 537.42,1237.36 538.006,1238.38 538.593,1237.81 539.179,1239.78 539.765,1239.07 540.352,1238.44 540.938,1236.4 541.525,1236.08 542.111,1234.35 542.697,1235.21 543.284,1235.94 543.87,1235.52 544.457,1233.63 545.043,1233.41 545.63,1232.93 546.216,1234.04 546.802,1232.19 547.389,1233 547.975,1231.26 548.562,1231.02 549.148,1229.19 549.734,1227.76 550.321,1229.04 550.907,1229.02 551.494,1231.31 552.08,1230.98 552.666,1234.54 553.253,1235.48 553.839,1237.63 554.426,1236.94 555.012,1237.91 555.599,1234.47 556.185,1234.34 556.771,1233.99 557.358,1236.06 557.944,1238.08 558.531,1237.32 559.117,1240.95 559.703,1241.4 560.29,1240.62 560.876,1239.9 561.463,1240.41 562.049,1236.85 562.635,1236.51 563.222,1237 563.808,1234.91 564.395,1236.64 564.981,1235.7 565.568,1232.45 566.154,1235.94 566.74,1236.35 567.327,1234.11 567.913,1236.22 568.5,1234.03 569.086,1233.23 569.672,1233.77 570.259,1234.3 570.845,1233.82 571.432,1233.25 572.018,1232.37 572.605,1231.81 573.191,1232.64 573.777,1232.07 574.364,1230.07 574.95,1233.46 575.537,1229.01 576.123,1228.4 576.709,1229.25 577.296,1225.94 577.882,1228.3 578.469,1229.43 579.055,1230.21 579.641,1225.83 580.228,1224.05 580.814,1222.67 581.401,1221.39 581.987,1218.76 582.574,1220.03 583.16,1219.9 583.746,1221.18 584.333,1221.14 584.919,1222.41 585.506,1222.65 586.092,1223.92 586.678,1222.4 587.265,1223.44 587.851,1224.75 588.438,1224.6 589.024,1223.06 589.61,1225.57 590.197,1225.21 590.783,1226.49 591.37,1227.37 591.956,1230.72 592.543,1231.71 593.129,1229.97 593.715,1229.29 594.302,1229.99 594.888,1226.88 595.475,1226.73 596.061,1229.1 596.647,1229.99 597.234,1232.1 597.82,1228.7 598.407,1229.17 598.993,1225.9 599.579,1226.83 600.166,1227.55 600.752,1227.21 601.339,1225.21 601.925,1226.26 602.512,1227.2 603.098,1224.19 603.684,1227.89 604.271,1227.45 604.857,1230.76 605.444,1228.76 606.03,1228.42 606.616,1229.36 607.203,1232.72 607.789,1229.25 608.376,1230.11 608.962,1229.48 609.548,1228.85 610.135,1227.11 610.721,1226.36 611.308,1228.65 611.894,1226.6 612.481,1225.14 613.067,1224.67 613.653,1222.87 614.24,1222.57 614.826,1227.45 615.413,1221.69 615.999,1222.64 616.585,1225.19 617.172,1225.77 617.758,1228.07 618.345,1222.19 618.931,1220.53 619.518,1221.88 620.104,1221.82 620.69,1219.16 621.277,1219.29 621.863,1219.24 622.45,1217.81 623.036,1219.22 623.622,1217.9 624.209,1221.54 624.795,1222.7 625.382,1222.84 625.968,1222.66 626.554,1224.87 627.141,1225.3 627.727,1226.14 628.314,1228.51 628.9,1224.28 629.487,1222.33 630.073,1220.86 630.659,1223.12 631.246,1221.25 631.832,1221.08 632.419,1221.92 633.005,1222.89 633.591,1223.87 634.178,1220.91 634.764,1216.61 635.351,1218 635.937,1217.78 636.523,1221.81 637.11,1218.79 637.696,1215.85 638.283,1217.23 638.869,1218.27 639.456,1220.71 640.042,1223.18 640.628,1220.21 641.215,1220.29 641.801,1218.41 642.388,1218.62 642.974,1219.63 643.56,1219.42 644.147,1218.19 644.733,1217.98 645.32,1219.02 645.906,1217.57 646.492,1216.15 647.079,1214.84 647.665,1214.77 648.252,1212.33 648.838,1212.38 649.425,1212.48 650.011,1215.37 650.597,1210.4 651.184,1209.36 651.77,1210.74 652.357,1210.74 652.943,1211.4 653.529,1212.99 654.116,1212.83 654.702,1213.04 655.289,1214.4 655.875,1214.26 656.462,1214.5 657.048,1212 657.634,1209.32 658.221,1209.48 658.807,1209.64 659.394,1212.62 659.98,1213.16 660.566,1214.57 661.153,1214.4 661.739,1217.11 662.326,1217.16 662.912,1220.84 663.498,1217.84 664.085,1217.68 664.671,1218.56 665.258,1220.85 665.844,1222.96 666.431,1220.92 667.017,1220.78 667.603,1220.24 668.19,1218.52 668.776,1219.58 669.363,1215.42 669.949,1216.62 670.535,1213.48 671.122,1214.58 671.708,1212.91 672.295,1211.61 672.881,1211.34 673.467,1211.6 674.054,1210.55 674.64,1210.56 675.227,1211.96 675.813,1212.2 676.4,1213.45 676.986,1215.95 677.572,1217.2 678.159,1216.96 678.745,1216.73 679.332,1217.8 679.918,1218.96 680.504,1218.48 681.091,1220.73 681.677,1220.46 682.264,1217.7 682.85,1218.78 683.436,1218.32 684.023,1217.02 684.609,1216.48 685.196,1217.81 685.782,1218.82 686.369,1218.51 686.955,1219.42 687.541,1221.85 688.128,1225.24 688.714,1223.59 689.301,1222.87 689.887,1223.65 690.473,1227.13 691.06,1226.32 691.646,1226.8 692.233,1226.1 692.819,1222.74 693.405,1220.78 693.992,1222.85 694.578,1220.88 695.165,1220.03 695.751,1219.6 696.338,1217.85 696.924,1214.96 697.51,1218.36 698.097,1217.94 698.683,1217.87 699.27,1218.71 699.856,1218.34 700.442,1216.63 701.029,1214.91 701.615,1217.26 702.202,1215.67 702.788,1216.5 703.375,1216.33 703.961,1218.69 704.547,1216.85 705.134,1217.85 705.72,1218.58 706.307,1214.39 706.893,1214.21 707.479,1211.4 708.066,1211.53 708.652,1215.43 709.239,1216.44 709.825,1217.48 710.411,1216 710.998,1213.31 711.584,1214.62 712.171,1212.18 712.757,1212.34 713.344,1213.7 713.93,1213.73 714.516,1212.47 715.103,1211.08 715.689,1209.62 716.276,1209.72 716.862,1209.81 717.448,1211.11 718.035,1208.36 718.621,1208.41 719.208,1208.51 719.794,1208.8 720.38,1207.64 720.967,1206.7 721.553,1209.57 722.14,1207.01 722.726,1204.29 723.313,1203.39 723.899,1203.4 724.485,1203.96 725.072,1205.62 725.658,1207.21 726.245,1208.69 726.831,1208.96 727.417,1207.76 728.004,1207.94 728.59,1210.77 729.177,1210.99 729.763,1211.2 730.349,1208.8 730.936,1206.21 731.522,1205.27 732.109,1204.21 732.695,1206.09 733.282,1209.09 733.868,1209.02 734.454,1210.29 735.041,1211.65 735.627,1210.12 736.214,1208.91 736.8,1209.08 737.386,1210.7 737.973,1212.23 738.559,1209.56 739.146,1209.51 739.732,1210.75 740.318,1210.81 740.905,1210.66 741.491,1212.16 742.078,1213.52 742.664,1214.77 743.251,1213.32 743.837,1215.61 744.423,1215.63 745.01,1214.09 745.596,1213.87 746.183,1213.49 746.769,1210.59 747.355,1212.03 747.942,1208.14 748.528,1208.43 749.115,1208.3 749.701,1208.31 750.288,1212.66 750.874,1212.54 751.46,1209.79 752.047,1210.02 752.633,1212.94 753.22,1212.78 753.806,1211.11 754.392,1209.69 754.979,1211.12 755.565,1209.64 756.152,1211.16 756.738,1209.81 757.324,1213.67 757.911,1212.49 758.497,1212.68 759.084,1213.89 759.67,1213.92 760.257,1214.78 760.843,1215.96 761.429,1215.52 762.016,1213.92 762.602,1214.94 763.189,1217.3 763.775,1218.35 764.361,1220.5 764.948,1220.05 765.534,1220.82 766.121,1219.03 766.707,1221.06 767.293,1220.56 767.88,1219.85 768.466,1219.17 769.053,1219.79 769.639,1220.37 770.226,1221.22 770.812,1217.82 771.398,1213.24 771.985,1212.9 772.571,1212.43 773.158,1210.73 773.744,1213.05 774.33,1211.55 774.917,1212.59 775.503,1214.88 776.09,1216.15 776.676,1213.07 777.262,1211.39 777.849,1211.43 778.435,1211.44 779.022,1211.21 779.608,1211.44 780.195,1214.02 780.781,1212.6 781.367,1212.42 781.954,1212.19 782.54,1212.09 783.127,1212.05 783.713,1209.47 784.299,1208.28 784.886,1210.9 785.472,1212.04 786.059,1213.13 786.645,1216.64 787.232,1218.82 787.818,1220.17 788.404,1218.17 788.991,1217.64 789.577,1217.24 790.164,1219.49 790.75,1219 791.336,1214.75 791.923,1212.96 792.509,1212.79 793.096,1214.27 793.682,1210.48 794.268,1214.44 794.855,1217.06 795.441,1216.82 796.028,1216.32 796.614,1214.68 797.201,1215.92 797.787,1214.16 798.373,1216.6 798.96,1213.34 799.546,1210.54 800.133,1210.4 800.719,1208.91 801.305,1207.72 801.892,1207.96 802.478,1209.27 803.065,1211.83 803.651,1210.48 804.237,1207.48 804.824,1210.07 805.41,1210.02 805.997,1209.92 806.583,1209.82 807.17,1208.49 807.756,1208.58 808.342,1206.02 808.929,1201.05 809.515,1197.62 810.102,1198.41 810.688,1197.77 811.274,1199.78 811.861,1200.47 812.447,1203.43 813.034,1202.9 813.62,1202 814.206,1201.04 814.793,1196.34 815.379,1195.62 815.966,1199.24 816.552,1201.12 817.139,1202.73 817.725,1204.24 818.311,1205.93 818.898,1210.01 819.484,1210.93 820.071,1206.54 820.657,1206.94 821.243,1207.23 821.83,1207.53 822.416,1206.48 823.003,1206.86 823.589,1208.22 824.175,1209.71 824.762,1209.55 825.348,1210.68 825.935,1210.13 826.521,1212.58 827.108,1212.29 827.694,1214.65 828.28,1209.45 828.867,1208.56 829.453,1207.49 830.04,1206.55 830.626,1207.81 831.212,1209.14 831.799,1207.66 832.385,1206.67 832.972,1206.7 833.558,1205.53 834.145,1204.49 834.731,1204.7 835.317,1204.86 835.904,1207.6 836.49,1205.1 837.077,1205.23 837.663,1206.63 838.249,1208.23 838.836,1208.09 839.422,1207.95 840.009,1210.81 840.595,1210.67 841.181,1210.48 841.768,1208.85 842.354,1209.84 842.941,1212.22 843.527,1214.67 844.114,1212.85 844.7,1212.49 845.286,1213.51 845.873,1214.51 846.459,1214.03 847.046,1216.47 847.632,1217.58 848.218,1217.03 848.805,1217.92 849.391,1215.98 849.978,1212.94 850.564,1212.5 851.15,1208.58 851.737,1205.93 852.323,1204.89 852.91,1202.22 853.496,1203.97 854.083,1204.34 854.669,1203.32 855.255,1203.47 855.842,1203.38 856.428,1204.02 857.015,1205.41 857.601,1205.97 858.187,1204.88 858.774,1202.38 859.36,1201.63 859.947,1200.76 860.533,1201.08 861.119,1200.54 861.706,1202.23 862.292,1201.39 862.879,1199.3 863.465,1201.21 864.052,1201.57 864.638,1203.25 865.224,1203.63 865.811,1205.41 866.397,1204.51 866.984,1204.73 867.57,1204.92 868.156,1206.38 868.743,1207.61 869.329,1209.13 869.916,1208.95 870.502,1209.1 871.089,1208.01 871.675,1206.77 872.261,1205.68 872.848,1206.02 873.434,1204.83 874.021,1206.27 874.607,1206.46 875.193,1206.61 875.78,1206.89 876.366,1206.9 876.953,1208.6 877.539,1208.79 878.125,1208.72 878.712,1209.8 879.298,1208.4 879.885,1210.85 880.471,1210.83 881.058,1211.77 881.644,1211.68 882.23,1211.69 882.817,1212 883.403,1211.82 883.99,1211.61 884.576,1211.36 885.162,1212.64 885.749,1212.38 886.335,1210.62 886.922,1212.05 887.508,1211.89 888.094,1210.28 888.681,1209 889.267,1208.82 889.854,1209 890.44,1208.96 891.027,1208.81 891.613,1204.82 892.199,1208.82 892.786,1207.29 893.372,1207.36 893.959,1208.44 894.545,1207.21 895.131,1208.45 895.718,1205.79 896.304,1207.53 896.891,1210.14 897.477,1212.66 898.063,1212.54 898.65,1215.09 899.236,1216.17 899.823,1221.2 900.409,1225.94 900.996,1226.17 901.582,1225.56 902.168,1221.16 902.755,1219.21 903.341,1221.24 903.928,1224.61 904.514,1225.02 905.1,1225.33 905.687,1224.54 906.273,1223.75 906.86,1224.36 907.446,1225.13 908.032,1224.36 908.619,1222.18 909.205,1221.64 909.792,1219.59 910.378,1219.01 910.965,1221.13 911.551,1216.39 912.137,1215.96 912.724,1216.88 913.31,1212.34 913.897,1211.91 914.483,1211.9 915.069,1210.24 915.656,1208.74 916.242,1207.35 916.829,1207.52 917.415,1208.63 918.002,1209.86 918.588,1208.28 919.174,1208.52 919.761,1211.28 920.347,1210.82 920.934,1211.92 921.52,1210.6 922.106,1209.15 922.693,1209.3 923.279,1210.53 923.866,1210.45 924.452,1208.88 925.038,1208.74 925.625,1204.91 926.211,1206.25 926.798,1206.23 927.384,1207.53 927.971,1207.54 928.557,1208.53 929.143,1207.13 929.73,1207.12 930.316,1205.77 930.903,1203.42 931.489,1203.49 932.075,1199.63 932.662,1198.7 933.248,1199.24 933.835,1199.54 934.421,1200.05 935.007,1199.24 935.594,1194.27 936.18,1197.76 936.767,1196.8 937.353,1196 937.94,1197.89 938.526,1199.9 939.112,1203.16 939.699,1203.53 940.285,1203.77 940.872,1204.05 941.458,1208.09 942.044,1208.19 942.631,1208.3 943.217,1208.35 943.804,1206.93 944.39,1205.73 944.976,1201.85 945.563,1203.4 946.149,1203.68 946.736,1203.86 947.322,1204.17 947.909,1200.54 948.495,1199.66 949.081,1201.47 949.668,1203.12 950.254,1202.04 950.841,1202.48 951.427,1203.97 952.013,1204.2 952.6,1205.67 953.186,1207.04 953.773,1208.23 954.359,1210.66 954.945,1210.39 955.532,1211.55 956.118,1211.34 956.705,1211.18 957.291,1208.75 957.878,1207.45 958.464,1206.16 959.05,1206.29 959.637,1205.14 960.223,1203.95 960.81,1206.61 961.396,1204 961.982,1204.16 962.569,1205.63 963.155,1204.42 963.742,1203.22 964.328,1200.68 964.915,1201.26 965.501,1200.45 966.087,1204.79 966.674,1210.12 967.26,1209.77 967.847,1211.11 968.433,1210.96 969.019,1209.62 969.606,1209.65 970.192,1210.92 970.779,1210.87 971.365,1206.6 971.951,1205.29 972.538,1204.26 973.124,1204.64 973.711,1203.7 974.297,1201.31 974.884,1201.69 975.47,1204.56 976.056,1204.43 976.643,1204.32 977.229,1204.39 977.816,1201.87 978.402,1203.31 978.988,1204.72 979.575,1206.03 980.161,1206.1 980.748,1205.96 981.334,1203.63 981.92,1205.19 982.507,1202.94 983.093,1207.23 983.68,1208.55 984.266,1211 984.853,1212.25 985.439,1216.1 986.025,1214.37 986.612,1213.91 987.198,1213.93 987.785,1214.53 988.371,1212.95 988.957,1212.6 989.544,1211.19 990.13,1212.2 990.717,1212.01 991.303,1211.86 991.889,1211.59 992.476,1209.74 993.062,1209.22 993.649,1207.88 994.235,1204.98 994.822,1202.42 995.408,1198.98 995.994,1199.6 996.581,1199.98 997.167,1200.81 997.754,1201.28 998.34,1202.96 998.926,1204.45 999.513,1200.52 1000.1,1199.63 1000.69,1202.69 1001.27,1205.61 1001.86,1207.16 1002.44,1208.39 1003.03,1206.88 1003.62,1207.06 1004.2,1207.29 1004.79,1209.59 1005.38,1206.77 1005.96,1209.28 1006.55,1209.06 1007.14,1207.75 1007.72,1211.77 1008.31,1210 1008.9,1209.91 1009.48,1209.87 1010.07,1209.59 1010.65,1214.78 1011.24,1213.27 1011.83,1212.76 1012.41,1210.26 1013,1208.74 1013.59,1208.6 1014.17,1208.65 1014.76,1207.35 1015.35,1206.16 1015.93,1208.5 1016.52,1207.13 1017.11,1206.78 1017.69,1206.85 1018.28,1208.17 1018.86,1204.26 1019.45,1206.89 1020.04,1208.28 1020.62,1209.63 1021.21,1209.73 1021.8,1212.18 1022.38,1212.03 1022.97,1211.57 1023.56,1213.92 1024.14,1211.14 1024.73,1210.59 1025.32,1209.08 1025.9,1209.04 1026.49,1207.59 1027.07,1207.09 1027.66,1203.34 1028.25,1203.76 1028.83,1204.11 1029.42,1202.89 1030.01,1202.9 1030.59,1203.2 1031.18,1204.55 1031.77,1207.42 1032.35,1210.34 1032.94,1212.49 1033.52,1214.53 1034.11,1216.63 1034.7,1214.59 1035.28,1214.18 1035.87,1217.63 1036.46,1216.95 1037.04,1215.19 1037.63,1214.65 1038.22,1214.39 1038.8,1212.56 1039.39,1210.93 1039.98,1210.76 1040.56,1211.68 1041.15,1210.26 1041.73,1210.15 1042.32,1213.76 1042.91,1208.47 1043.49,1208.1 1044.08,1209.34 1044.67,1208.82 1045.25,1211.3 1045.84,1212.45 1046.43,1210.91 1047.01,1210.79 1047.6,1211.9 1048.19,1210.38 1048.77,1211.32 1049.36,1212.62 1049.94,1213.42 1050.53,1213.49 1051.12,1213.4 1051.7,1211.94 1052.29,1210.41 1052.88,1211.65 1053.46,1211.49 1054.05,1211.18 1054.64,1211.05 1055.22,1212.1 1055.81,1213.12 1056.39,1209.88 1056.98,1210.91 1057.57,1209.24 1058.15,1207.49 1058.74,1206.14 1059.33,1207.44 1059.91,1206.14 1060.5,1206.2 1061.09,1205.14 1061.67,1205.02 1062.26,1205.5 1062.85,1204.33 1063.43,1204.63 1064.02,1202.16 1064.6,1198.6 1065.19,1199.17 1065.78,1203.39 1066.36,1204.85 1066.95,1202.2 1067.54,1203.83 1068.12,1199.82 1068.71,1198.78 1069.3,1199.05 1069.88,1201.98 1070.47,1202.21 1071.06,1205.33 1071.64,1203.92 1072.23,1203.97 1072.81,1201.52 1073.4,1201.75 1073.99,1204.6 1074.57,1204.63 1075.16,1204.91 1075.75,1204.93 1076.33,1206.71 1076.92,1205.5 1077.51,1205.62 1078.09,1206.91 1078.68,1209.59 1079.26,1209.34 1079.85,1207.88 1080.44,1210.37 1081.02,1207.64 1081.61,1206.52 1082.2,1206.64 1082.78,1206.61 1083.37,1209.38 1083.96,1210.3 1084.54,1211.74 1085.13,1210.32 1085.72,1210.53 1086.3,1210.37 1086.89,1210.38 1087.47,1212.62 1088.06,1210.96 1088.65,1212.1 1089.23,1211.91 1089.82,1210.33 1090.41,1211.47 1090.99,1211.22 1091.58,1209.69 1092.17,1208.17 1092.75,1208.21 1093.34,1206.77 1093.93,1205.63 1094.51,1205.61 1095.1,1205.45 1095.68,1208.09 1096.27,1213.09 1096.86,1211.2 1097.44,1212.37 1098.03,1210.65 1098.62,1210.49 1099.2,1210.39 1099.79,1207.82 1100.38,1207.84 1100.96,1209.28 1101.55,1209.16 1102.14,1207.74 1102.72,1209.06 1103.31,1208.81 1103.89,1207.23 1104.48,1209.83 1105.07,1209.48 1105.65,1208.02 1106.24,1208.06 1106.83,1206.71 1107.41,1205.31 1108,1204 1108.59,1203.91 1109.17,1201.34 1109.76,1201.61 1110.34,1201.05 1110.93,1200.43 1111.52,1200.99 1112.1,1201.71 1112.69,1202.06 1113.28,1202.22 1113.86,1205.25 1114.45,1204.01 1115.04,1206.82 1115.62,1206.91 1116.21,1208.25 1116.8,1209.53 1117.38,1207.89 1117.97,1209.02 1118.55,1210.29 1119.14,1209.04 1119.73,1210.06 1120.31,1208.92 1120.9,1211.75 1121.49,1212.76 1122.07,1212.54 1122.66,1209.54 1123.25,1209.8 1123.83,1208.05 1124.42,1209.15 1125.01,1210.35 1125.59,1211.52 1126.18,1212.75 1126.76,1211.14 1127.35,1211 1127.94,1212.08 1128.52,1210.36 1129.11,1207.51 1129.7,1208.79 1130.28,1207.4 1130.87,1204.69 1131.46,1205.81 1132.04,1205.78 1132.63,1206.06 1133.21,1208.9 1133.8,1208.72 1134.39,1211.22 1134.97,1211.01 1135.56,1211.03 1136.15,1209.28 1136.73,1210.56 1137.32,1208.99 1137.91,1208.95 1138.49,1207.39 1139.08,1205.83 1139.67,1204.67 1140.25,1206.21 1140.84,1208.85 1141.42,1212.57 1142.01,1212.18 1142.6,1211.76 1143.18,1211.51 1143.77,1212.42 1144.36,1214.73 1144.94,1215.38 1145.53,1213.5 1146.12,1210.8 1146.7,1206.94 1147.29,1204.35 1147.88,1206.81 1148.46,1206.67 1149.05,1205.56 1149.63,1209.35 1150.22,1208 1150.81,1208.11 1151.39,1203.92 1151.98,1202.91 1152.57,1204.6 1153.15,1204.66 1153.74,1203.41 1154.33,1202.39 1154.91,1205.08 1155.5,1209.09 1156.09,1209.4 1156.67,1208.17 1157.26,1208.27 1157.84,1205.1 1158.43,1203.8 1159.02,1202.6 1159.6,1203.95 1160.19,1205.49 1160.78,1206.86 1161.36,1205.73 1161.95,1205.85 1162.54,1205.85 1163.12,1204.63 1163.71,1204.74 1164.29,1202.1 1164.88,1201.03 1165.47,1199.9 1166.05,1194.93 1166.64,1198.22 1167.23,1197.45 1167.81,1197.96 1168.4,1197.25 1168.99,1199.21 1169.57,1199.7 1170.16,1201.72 1170.75,1202.15 1171.33,1201.28 1171.92,1201.64 1172.5,1201.8 1173.09,1202.03 1173.68,1204.62 1174.26,1205.12 1174.85,1206.55 1175.44,1206.55 1176.02,1206.88 1176.61,1206.97 1177.2,1205.46 1177.78,1204.38 1178.37,1200.5 1178.96,1201.03 1179.54,1201.41 1180.13,1202.99 1180.71,1204.6 1181.3,1206.19 1181.89,1209.88 1182.47,1207.42 1183.06,1205 1183.65,1206.47 1184.23,1205.09 1184.82,1205.17 1185.41,1206.58 1185.99,1204.04 1186.58,1204.11 1187.16,1202.72 1187.75,1203.06 1188.34,1202.15 1188.92,1203.92 1189.51,1205.47 1190.1,1206.82 1190.68,1206.82 1191.27,1206.93 1191.86,1205.6 1192.44,1206.8 1193.03,1206.66 1193.62,1205.13 1194.2,1207.87 1194.79,1207.9 1195.37,1207.76 1195.96,1209.05 1196.55,1208.74 1197.13,1208.74 1197.72,1209.59 1198.31,1209.48 1198.89,1208.06 1199.48,1205.21 1200.07,1206.62 1200.65,1205.41 1201.24,1206.95 1201.83,1204.49 1202.41,1203.06 1203,1203.57 1203.58,1205 1204.17,1203.73 1204.76,1203.7 1205.34,1206.75 1205.93,1207.91 1206.52,1208.21 1207.1,1205.67 1207.69,1206.97 1208.28,1208.18 1208.86,1213.19 1209.45,1212.61 1210.03,1213.31 1210.62,1212.97 1211.21,1210.14 1211.79,1210.03 1212.38,1211.11 1212.97,1212.13 1213.55,1214.37 1214.14,1212.79 1214.73,1212.59 1215.31,1213.62 1215.9,1210.93 1216.49,1210.71 1217.07,1213.09 1217.66,1211.57 1218.24,1209.9 1218.83,1209.79 1219.42,1210.7 1220,1210.54 1220.59,1212.92 1221.18,1213.79 1221.76,1211.93 1222.35,1213.15 1222.94,1208.96 1223.52,1210.2 1224.11,1204.98 1224.7,1202.74 1225.28,1203.09 1225.87,1207.11 1226.45,1205.9 1227.04,1204.4 1227.63,1204.46 1228.21,1201.97 1228.8,1203.13 1229.39,1204.57 1229.97,1204.8 1230.56,1203.76 1231.15,1208.09 1231.73,1208.18 1232.32,1210.35 1232.91,1212.87 1233.49,1213.82 1234.08,1213.25 1234.66,1212.99 1235.25,1215.04 1235.84,1213.49 1236.42,1211.82 1237.01,1210.1 1237.6,1209.7 1238.18,1208.08 1238.77,1209.55 1239.36,1207.9 1239.94,1207.73 1240.53,1206.64 1241.11,1206.58 1241.7,1206.52 1242.29,1206.46 1242.87,1206.85 1243.46,1207.04 1244.05,1208.02 1244.63,1209.08 1245.22,1210.05 1245.81,1210.02 1246.39,1210.07 1246.98,1210.05 1247.57,1209.03 1248.15,1206.05 1248.74,1205.91 1249.32,1207.43 1249.91,1205.95 1250.5,1206.01 1251.08,1202.18 1251.67,1202.44 1252.26,1203.89 1252.84,1202.48 1253.43,1201.18 1254.02,1198.99 1254.6,1197.04 1255.19,1197.63 1255.78,1197.02 1256.36,1196.05 1256.95,1196.54 1257.53,1195.71 1258.12,1196.04 1258.71,1196.74 1259.29,1199.89 1259.88,1199.3 1260.47,1198.28 1261.05,1197.38 1261.64,1199.05 1262.23,1201.95 1262.81,1203.53 1263.4,1203.53 1263.98,1203.67 1264.57,1203.73 1265.16,1204.02 1265.74,1206.85 1266.33,1205.48 1266.92,1206.86 1267.5,1209.65 1268.09,1211.89 1268.68,1211.65 1269.26,1211.6 1269.85,1210.23 1270.44,1211.31 1271.02,1211.12 1271.61,1209.57 1272.19,1208.02 1272.78,1206.83 1273.37,1209.58 1273.95,1208.17 1274.54,1206.92 1275.13,1202.86 1275.71,1202.95 1276.3,1204.42 1276.89,1203.01 1277.47,1203.22 1278.06,1203.58 1278.65,1205.13 1279.23,1204.46 1279.82,1205.74 1280.4,1203 1280.99,1205.94 1281.58,1204.84 1282.16,1206.18 1282.75,1208.82 1283.34,1209.77 1283.92,1212.37 1284.51,1212.39 1285.1,1211.92 1285.68,1209.1 1286.27,1208.73 1286.86,1208.65 1287.44,1206.99 1288.03,1205.59 1288.61,1206.72 1289.2,1208.13 1289.79,1208.24 1290.37,1205.71 1290.96,1208.34 1291.55,1206.94 1292.13,1207.1 1292.72,1204.44 1293.31,1204.74 1293.89,1204.79 1294.48,1204.79 1295.06,1202.17 1295.65,1203.83 1296.24,1203.82 1296.82,1205.08 1297.41,1204.03 1298,1204.07 1298.58,1208.34 1299.17,1206.88 1299.76,1205.33 1300.34,1202.79 1300.93,1208.28 1301.52,1206.76 1302.1,1205.48 1302.69,1206.98 1303.27,1207.02 1303.86,1206.79 1304.45,1209.4 1305.03,1207.95 1305.62,1208.12 1306.21,1210.84 1306.79,1213.32 1307.38,1209.18 1307.97,1212.83 1308.55,1213.94 1309.14,1216 1309.73,1218.05 1310.31,1218.57 1310.9,1219.26 1311.48,1217.18 1312.07,1216.72 1312.66,1214.93 1313.24,1213.21 1313.83,1208.99 1314.42,1210.45 1315,1210.24 1315.59,1212.5 1316.18,1210.82 1316.76,1210.55 1317.35,1210.62 1317.93,1208.07 1318.52,1207.97 1319.11,1206.49 1319.69,1210.15 1320.28,1206 1320.87,1208.48 1321.45,1210.87 1322.04,1209.2 1322.63,1207.8 1323.21,1209.31 1323.8,1207.81 1324.39,1208.89 1324.97,1207.36 1325.56,1208.45 1326.14,1208.09 1326.73,1207.89 1327.32,1208.94 1327.9,1209.79 1328.49,1208.46 1329.08,1205.82 1329.66,1204.72 1330.25,1204.76 1330.84,1204.83 1331.42,1203.48 1332.01,1201.08 1332.6,1198.83 1333.18,1197.92 1333.77,1195.81 1334.35,1201.45 1334.94,1201.71 1335.53,1204.64 1336.11,1204.72 1336.7,1209.07 1337.29,1206.07 1337.87,1206.1 1338.46,1204.7 1339.05,1203.52 1339.63,1204.78 1340.22,1203.75 1340.8,1202.41 1341.39,1202.34 1341.98,1203.75 1342.56,1203.71 1343.15,1204.89 1343.74,1205.07 1344.32,1206.89 1344.91,1207.94 1345.5,1207.63 1346.08,1207.59 1346.67,1207.26 1347.26,1209.88 1347.84,1209.58 1348.43,1208.26 1349.01,1207.05 1349.6,1208.35 1350.19,1209.65 1350.77,1213.57 1351.36,1213.27 1351.95,1211.62 1352.53,1208.95 1353.12,1207.46 1353.71,1207.27 1354.29,1205.57 1354.88,1206.89 1355.47,1208.52 1356.05,1211.09 1356.64,1212.2 1357.22,1213.23 1357.81,1214.18 1358.4,1214.88 1358.98,1214.38 1359.57,1211.62 1360.16,1210.05 1360.74,1209.87 1361.33,1208.36 1361.92,1208.43 1362.5,1208.33 1363.09,1208.26 1363.68,1205.69 1364.26,1204.19 1364.85,1205.65 1365.43,1205.64 1366.02,1205.65 1366.61,1205.75 1367.19,1207.54 1367.78,1206.1 1368.37,1203.25 1368.95,1204.98 1369.54,1207.73 1370.13,1207.6 1370.71,1210.05 1371.3,1212.54 1371.88,1212.21 1372.47,1209.36 1373.06,1206.71 1373.64,1203.19 1374.23,1203.01 1374.82,1203.2 1375.4,1204.47 1375.99,1205.95 1376.58,1206.24 1377.16,1204.96 1377.75,1206.16 1378.34,1206.41 1378.92,1204.96 1379.51,1206.26 1380.09,1204.83 1380.68,1202.12 1381.27,1198.46 1381.85,1198.83 1382.44,1196.33 1383.03,1198.11 1383.61,1199.91 1384.2,1199.2 1384.79,1201.04 1385.37,1201.5 1385.96,1196.53 1386.55,1194.48 1387.13,1200.44 1387.72,1200.88 1388.3,1203.81 1388.89,1204.09 1389.48,1207.05 1390.06,1204.43 1390.65,1204.48 1391.24,1204.7 1391.82,1206.14 1392.41,1205.96 1393,1207.41 1393.58,1209.82 1394.17,1209.58 1394.75,1209.41 1395.34,1206.77 1395.93,1205.33 1396.51,1205.73 1397.1,1207.19 1397.69,1205.88 1398.27,1208.48 1398.86,1207.17 1399.45,1209.77 1400.03,1209.89 1400.62,1207.09 1401.21,1206.98 1401.79,1209.39 1402.38,1209.3 1402.96,1206.5 1403.55,1208.03 1404.14,1207.84 1404.72,1209.04 1405.31,1207.7 1405.9,1206.3 1406.48,1204.89 1407.07,1205.08 1407.66,1204.99 1408.24,1207.76 1408.83,1204.84 1409.42,1206.27 1410,1205.29 1410.59,1205.53 1411.17,1202.6 1411.76,1202.76 1412.35,1201.68 1412.93,1203.26 1413.52,1202.18 1414.11,1202.47 1414.69,1206.26 1415.28,1205.9 1415.87,1206.13 1416.45,1206.42 1417.04,1205.23 1417.63,1205.23 1418.21,1203.86 1418.8,1202.68 1419.38,1204.59 1419.97,1204.65 1420.56,1203.37 1421.14,1205.06 1421.73,1204.96 1422.32,1202.95 1422.9,1202 1423.49,1206.07 1424.08,1203.52 1424.66,1203.76 1425.25,1204.87 1425.83,1206.17 1426.42,1204.73 1427.01,1206.3 1427.59,1206.32 1428.18,1207.65 1428.77,1206.16 1429.35,1204.77 1429.94,1204.77 1430.53,1205.82 1431.11,1206.02 1431.7,1204.92 1432.29,1204.96 1432.87,1206.36 1433.46,1207.82 1434.04,1207.9 1434.63,1207.65 1435.22,1209.07 1435.8,1208.95 1436.39,1208.62 1436.98,1209.75 1437.56,1209.73 1438.15,1209.66 1438.74,1209.39 1439.32,1209.53 1439.91,1209.51 1440.5,1209.21 1441.08,1208.97 1441.67,1207.4 1442.25,1201.97 1442.84,1203.36 1443.43,1203.49 1444.01,1203.82 1444.6,1202.49 1445.19,1201.38 1445.77,1198.94 1446.36,1201.79 1446.95,1202.1 1447.53,1198.39 1448.12,1201.24 1448.7,1201.31 1449.29,1200.34 1449.88,1198.99 1450.46,1202.15 1451.05,1200.85 1451.64,1201.56 1452.22,1200.51 1452.81,1199.57 1453.4,1200.09 1453.98,1200.81 1454.57,1202.32 1455.16,1206.57 1455.74,1205.38 1456.33,1206.71 1456.91,1208.89 1457.5,1208.72 1458.09,1207.35 1458.67,1207.22 1459.26,1204.8 1459.85,1204.84 1460.43,1203.64 1461.02,1202.61 1461.61,1203.17 1462.19,1205.05 1462.78,1206 1463.37,1207.37 1463.95,1210.12 1464.54,1209.87 1465.12,1208.34 1465.71,1204.42 1466.3,1204.4 1466.88,1206.92 1467.47,1207.07 1468.06,1204.51 1468.64,1200.82 1469.23,1201.18 1469.82,1198.85 1470.4,1198.34 1470.99,1198.84 1471.57,1197.72 1472.16,1200.55 1472.75,1199.51 1473.33,1202.47 1473.92,1203.63 1474.51,1202.68 1475.09,1204.29 1475.68,1204.54 1476.27,1204.89 1476.85,1205.09 1477.44,1205.1 1478.03,1205.18 1478.61,1206.72 1479.2,1204.34 1479.78,1203.03 1480.37,1203.27 1480.96,1203.54 1481.54,1204.99 1482.13,1205.17 1482.72,1206.96 1483.3,1210.83 1483.89,1210.74 1484.48,1210.68 1485.06,1210.48 1485.65,1210.44 1486.24,1209 1486.82,1208.89 1487.41,1208.96 1487.99,1210.3 1488.58,1208.81 1489.17,1211.08 1489.75,1213.49 1490.34,1212.96 1490.93,1211.17 1491.51,1211.34 1492.1,1211.2 1492.69,1212.32 1493.27,1211.96 1493.86,1212.67 1494.45,1214.9 1495.03,1213.05 1495.62,1212.67 1496.2,1214.87 1496.79,1215.6 1497.38,1213.73 1497.96,1209.62 1498.55,1209.15 1499.14,1207.7 1499.72,1206.66 1500.31,1207.61 1500.9,1206.2 1501.48,1207.37 1502.07,1207.41 1502.65,1207.26 1503.24,1208.58 1503.83,1208.34 1504.41,1208.15 1505,1208.24 1505.59,1210.65 1506.17,1208.23 1506.76,1208.39 1507.35,1209.64 1507.93,1211.98 1508.52,1211.54 1509.11,1212.41 1509.69,1214.61 1510.28,1212.92 1510.86,1212.43 1511.45,1216.23 1512.04,1214.37 1512.62,1215.16 1513.21,1217.36 1513.8,1214.05 1514.38,1213.57 1514.97,1214.68 1515.56,1214.24 1516.14,1213.86 1516.73,1216.07 1517.32,1211.73 1517.9,1215.4 1518.49,1212.36 1519.07,1214.57 1519.66,1219.65 1520.25,1218.93 1520.83,1218.11 1521.42,1212.63 1522.01,1209.82 1522.59,1210.62 1523.18,1211.52 1523.77,1210.15 1524.35,1212.69 1524.94,1212.31 1525.52,1211.92 1526.11,1211.28 1526.7,1208.66 1527.28,1210.08 1527.87,1207.41 1528.46,1207.13 1529.04,1203.17 1529.63,1204.61 1530.22,1207.18 1530.8,1205.45 1531.39,1205.43 1531.98,1204.2 1532.56,1204.07 1533.15,1205.41 1533.73,1205.61 1534.32,1204.51 1534.91,1202.03 1535.49,1202.42 1536.08,1201.08 1536.67,1201.47 1537.25,1200.55 1537.84,1199.34 1538.43,1198.23 1539.01,1198.6 1539.6,1200.35 1540.19,1200.56 1540.77,1199.54 1541.36,1198.42 1541.94,1198.97 1542.53,1198.22 1543.12,1197.56 1543.7,1199.42 1544.29,1198.63 1544.88,1198 1545.46,1201.12 1546.05,1198.72 1546.64,1198.07 1547.22,1199.98 1547.81,1201.89 1548.4,1200.89 1548.98,1205.06 1549.57,1205.02 1550.15,1202.67 1550.74,1204.49 1551.33,1201.92 1551.91,1203.47 1552.5,1205.09 1553.09,1205.09 1553.67,1205.19 1554.26,1205.73 1554.85,1207.17 1555.43,1207.1 1556.02,1208.37 1556.6,1209.49 1557.19,1209.4 1557.78,1208 1558.36,1205.24 1558.95,1206.65 1559.54,1206.94 1560.12,1208.2 1560.71,1209.37 1561.3,1208.93 1561.88,1210.25 1562.47,1210 1563.06,1208.59 1563.64,1209.91 1564.23,1208.25 1564.81,1210.53 1565.4,1210.41 1565.99,1209 1566.57,1207.71 1567.16,1208.89 1567.75,1207.34 1568.33,1207.37 1568.92,1208.66 1569.51,1208.31 1570.09,1205.53 1570.68,1203.07 1571.27,1204.41 1571.85,1203.21 1572.44,1203.44 1573.02,1204.9 1573.61,1207.38 1574.2,1209.67 1574.78,1208.45 1575.37,1206.9 1575.96,1206.46 1576.54,1206.55 1577.13,1209.37 1577.72,1211.62 1578.3,1210.01 1578.89,1210.99 1579.47,1209.24 1580.06,1210.42 1580.65,1211.24 1581.23,1209.62 1581.82,1209.76 1582.41,1209.7 1582.99,1208.25 1583.58,1205.63 1584.17,1203.09 1584.75,1204.53 1585.34,1203.54 1585.93,1203.79 1586.51,1203.87 1587.1,1204.09 1587.68,1204.04 1588.27,1204.18 1588.86,1204.22 1589.44,1201.75 1590.03,1204.36 1590.62,1205.51 1591.2,1201.76 1591.79,1201.71 1592.38,1201.99 1592.96,1202.22 1593.55,1203.75 1594.14,1202.64 1594.72,1202.77 1595.31,1205.49 1595.89,1205.53 1596.48,1208.21 1597.07,1209.46 1597.65,1209.43 1598.24,1206.8 1598.83,1209.38 1599.41,1208.06 1600,1206.99 1600.59,1206.67 1601.17,1206.99 1601.76,1206.62 1602.34,1209.22 1602.93,1207.4 1603.52,1208.79 1604.1,1207.4 1604.69,1206.16 1605.28,1207.58 1605.86,1206.11 1606.45,1204.77 1607.04,1206.19 1607.62,1207.38 1608.21,1208.55 1608.8,1209.66 1609.38,1209.77 1609.97,1212.11 1610.55,1214.55 1611.14,1212.5 1611.73,1210.77 1612.31,1210.61 1612.9,1207.94 1613.49,1207.99 1614.07,1207.79 1614.66,1210.16 1615.25,1211.12 1615.83,1212.29 1616.42,1213.2 1617.01,1211.75 1617.59,1211.49 1618.18,1211.05 1618.76,1209.27 1619.35,1209.14 1619.94,1207.69 1620.52,1207.88 1621.11,1207.99 1621.7,1207.9 1622.28,1209.04 1622.87,1209.04 1623.46,1211.88 1624.04,1211.25 1624.63,1209.64 1625.22,1209.85 1625.8,1205.62 1626.39,1205.59 1626.97,1205.66 1627.56,1205.72 1628.15,1205.79 1628.73,1204.7 1629.32,1204.88 1629.91,1203.73 1630.49,1202.24 1631.08,1203.85 1631.67,1202.71 1632.25,1200.35 1632.84,1199.34 1633.42,1199.37 1634.01,1202.66 1634.6,1204.2 1635.18,1201.85 1635.77,1202.25 1636.36,1201.02 1636.94,1204.12 1637.53,1202.99 1638.12,1206.04 1638.7,1206.17 1639.29,1205.99 1639.88,1205.99 1640.46,1204.83 1641.05,1207.53 1641.63,1207.19 1642.22,1207.36 1642.81,1208.59 1643.39,1208.22 1643.98,1209.61 1644.57,1209.26 1645.15,1207.81 1645.74,1208.81 1646.33,1210.2 1646.91,1213.94 1647.5,1210.95 1648.09,1209.1 1648.67,1208.7 1649.26,1210.01 1649.84,1209.92 1650.43,1208.48 1651.02,1208.37 1651.6,1209.55 1652.19,1209.31 1652.78,1212.15 1653.36,1207.5 1653.95,1207.36 1654.54,1204.7 1655.12,1205.82 1655.71,1207.17 1656.29,1207.24 1656.88,1207.2 1657.47,1204.9 1658.05,1203.51 1658.64,1203.69 1659.23,1202.64 1659.81,1204.17 1660.4,1204.39 1660.99,1203 1661.57,1203.07 1662.16,1204.64 1662.75,1203.2 1663.33,1202.24 1663.92,1201.31 1664.5,1201.45 1665.09,1202.08 1665.68,1204.75 1666.26,1203.45 1666.85,1204.82 1667.44,1202.44 1668.02,1202.69 1668.61,1201.37 1669.2,1203.12 1669.78,1203.28 1670.37,1204.96 1670.96,1208.93 1671.54,1206.42 1672.13,1206.39 1672.71,1206.56 1673.3,1206.87 1673.89,1207.07 1674.47,1205.66 1675.06,1204.42 1675.65,1205.78 1676.23,1207.22 1676.82,1210.87 1677.41,1213.15 1677.99,1212.57 1678.58,1211.01 1679.17,1209.42 1679.75,1213.07 1680.34,1214.29 1680.92,1212.85 1681.51,1211.05 1682.1,1212.26 1682.68,1211.71 1683.27,1209.87 1683.86,1208.14 1684.44,1205.54 1685.03,1205.65 1685.62,1206.95 1686.2,1205.88 1686.79,1204.69 1687.37,1203.48 1687.96,1200.81 1688.55,1200.92 1689.13,1201.02 1689.72,1197.32 1690.31,1197.96 1690.89,1199.93 1691.48,1200.09 1692.07,1199.4 1692.65,1200.98 1693.24,1201.23 1693.83,1200.26 1694.41,1200.36 1695,1201.74 1695.58,1200.8 1696.17,1198.71 1696.76,1200.53 1697.34,1202.28 1697.93,1200.96 1698.52,1201.07 1699.1,1200.06 1699.69,1200.4 1700.28,1204.57 1700.86,1202.19 1701.45,1202.37 1702.04,1201.45 1702.62,1203.06 1703.21,1205.85 1703.79,1207.3 1704.38,1203.36 1704.97,1199.84 1705.55,1201.4 1706.14,1204.12 1706.73,1205.46 1707.31,1206.85 1707.9,1210.58 1708.49,1210.34 1709.07,1210.12 1709.66,1211.32 1710.24,1212.29 1710.83,1214.6 1711.42,1214.14 1712,1217.39 1712.59,1216.43 1713.18,1217.07 1713.76,1218.94 1714.35,1219.52 1714.94,1220.02 1715.52,1219.36 1716.11,1216.06 1716.7,1214.19 1717.28,1211.14 1717.87,1207.08 1718.45,1205.74 1719.04,1209.84 1719.63,1209.65 1720.21,1208.13 1720.8,1208.25 1721.39,1209.45 1721.97,1204.19 1722.56,1206.69 1723.15,1205.29 1723.73,1205.42 1724.32,1203.04 1724.91,1200.76 1725.49,1199.73 1726.08,1200.06 1726.66,1201.38 1727.25,1203.08 1727.84,1204.25 1728.42,1202.88 1729.01,1201.95 1729.6,1200.54 1730.18,1198.62 1730.77,1201.67 1731.36,1200.77 1731.94,1204.9 1732.53,1203.74 1733.11,1202.85 1733.7,1202.98 1734.29,1204.53 1734.87,1206.16 1735.46,1206.38 1736.05,1203.75 1736.63,1204.13 1737.22,1206.75 1737.81,1204.14 1738.39,1200.51 1738.98,1202.14 1739.57,1202.46 1740.15,1199.75 1740.74,1206.48 1741.32,1207.65 1741.91,1206.46 1742.5,1207.94 1743.08,1210.68 1743.67,1209.52 1744.26,1208.01 1744.84,1209.11 1745.43,1207.78 1746.02,1206.77 1746.6,1206.86 1747.19,1205.76 1747.78,1205.69 1748.36,1205.69 1748.95,1204.34 1749.53,1204.52 1750.12,1205.97 1750.71,1207.27 1751.29,1207.08 1751.88,1208.29 1752.47,1208.3 1753.05,1209.57 1753.64,1206.92 1754.23,1207.04 1754.81,1209.56 1755.4,1209.29 1755.99,1209.45 1756.57,1209.33 1757.16,1210.41 1757.74,1207.44 1758.33,1204.58 1758.92,1206.21 1759.5,1206.09 1760.09,1207.58 1760.68,1208.88 1761.26,1206.12 1761.85,1208.64 1762.44,1209.76 1763.02,1208.28 1763.61,1214.34 1764.19,1215.08 1764.78,1216.05 1765.37,1215.41 1765.95,1214.94 1766.54,1215.78 1767.13,1214.27 1767.71,1212.57 1768.3,1213.65 1768.89,1212.18 1769.47,1210.58 1770.06,1208.88 1770.65,1207.56 1771.23,1206.17 1771.82,1200.84 1772.4,1199.77 1772.99,1200.1 1773.58,1201.92 1774.16,1203.59 1774.75,1203.69 1775.34,1206.21 1775.92,1207.61 1776.51,1206.23 1777.1,1204.83 1777.68,1207.51 1778.27,1209.04 1778.86,1209.92 1779.44,1210.84 1780.03,1213.22 1780.61,1214.28 1781.2,1215.01 1781.79,1214.66 1782.37,1214.35 1782.96,1213.85 1783.55,1213.63 1784.13,1213.01 1784.72,1211.25 1785.31,1207.02 1785.89,1206.95 1786.48,1208.21 1787.06,1209.67 1787.65,1210.84 1788.24,1208.97 1788.82,1208.74 1789.41,1205.85 1790,1206.01 1790.58,1208.58 1791.17,1204.98 1791.76,1202.65 1792.34,1202.59 1792.93,1202.63 1793.52,1202.93 1794.1,1203.24 1794.69,1203.52 1795.27,1206.51 1795.86,1205.34 1796.45,1208.35 1797.03,1208.13 1797.62,1208.17 1798.21,1209.66 1798.79,1210.82 1799.38,1210.48 1799.97,1210.49 1800.55,1213.08 1801.14,1211.38 1801.73,1207.29 1802.31,1211.2 1802.9,1208.21 1803.48,1209.2 1804.07,1206.47 1804.66,1205.24 1805.24,1202.67 1805.83,1198.76 1806.42,1197.79 1807,1198.6 1807.59,1199.03 1808.18,1199.45 1808.76,1199.63 1809.35,1198.69 1809.94,1199.27 1810.52,1198.47 1811.11,1198.94 1811.69,1200.59 1812.28,1202.28 1812.87,1201.08 1813.45,1202.74 1814.04,1199.13 1814.63,1199.55 1815.21,1198.61 1815.8,1197.85 1816.39,1199.62 1816.97,1202.46 1817.56,1201.27 1818.14,1198.82 1818.73,1198.01 1819.32,1198.5 1819.9,1200.02 1820.49,1201.81 1821.08,1203.43 1821.66,1202.38 1822.25,1202.62 1822.84,1203.22 1823.42,1202.45 1824.01,1200.25 1824.6,1198.02 1825.18,1197.32 1825.77,1196.74 1826.35,1198.49 1826.94,1202.81 1827.53,1204.27 1828.11,1207.07 1828.7,1208.26 1829.29,1207.31 1829.87,1205.8 1830.46,1205.79 1831.05,1204.64 1831.63,1204.64 1832.22,1204.67 1832.81,1204.53 1833.39,1204.6 1833.98,1204.75 1834.56,1204.62 1835.15,1204.46 1835.74,1204.57 1836.32,1201.93 1836.91,1205 1837.5,1205.13 1838.08,1207.71 1838.67,1207.66 1839.26,1206.48 1839.84,1207.71 1840.43,1210.18 1841.01,1211.59 1841.6,1210.03 1842.19,1210.16 1842.77,1211.25 1843.36,1213.75 1843.95,1216.01 1844.53,1216.92 1845.12,1216.25 1845.71,1213.04 1846.29,1212.75 1846.88,1211.26 1847.47,1211.08 1848.05,1211.04 1848.64,1210.99 1849.22,1209.45 1849.81,1210.69 1850.4,1205.24 1850.98,1206.58 1851.57,1207.8 1852.16,1206.36 1852.74,1208.04 1853.33,1210.48 1853.92,1211.72 1854.5,1211.87 1855.09,1214.16 1855.68,1212.58 1856.26,1209.72 1856.85,1210 1857.43,1211.12 1858.02,1213.36 1858.61,1214.14 1859.19,1213.69 1859.78,1213.44 1860.37,1212.88 1860.95,1211.26 1861.54,1209.79 1862.13,1209.86 1862.71,1209.61 1863.3,1210.7 1863.88,1211.83 1864.47,1211.78 1865.06,1208.77 1865.64,1208.74 1866.23,1209.65 1866.82,1206.87 1867.4,1205.46 1867.99,1206.91 1868.58,1205.96 1869.16,1205.95 1869.75,1207.06 1870.34,1209.37 1870.92,1207.78 1871.51,1207.78 1872.09,1207.75 1872.68,1207.78 1873.27,1205.31 1873.85,1205.15 1874.44,1206.36 1875.03,1206.37 1875.61,1206.46 1876.2,1204.03 1876.79,1200.19 1877.37,1201.8 1877.96,1199.36 1878.55,1201.21 1879.13,1202.74 1879.72,1208.23 1880.3,1209.77 1880.89,1206.94 1881.48,1208.11 1882.06,1207.99 1882.65,1208.01 1883.24,1206.63 1883.82,1209.03 1884.41,1208.84 1885,1211.41 1885.58,1212.51 1886.17,1211.04 1886.76,1210.78 1887.34,1211.81 1887.93,1210.39 1888.51,1210.05 1889.1,1207.26 1889.69,1207.15 1890.27,1208.55 1890.86,1210.88 1891.45,1210.85 1892.03,1210.5 1892.62,1210.1 1893.21,1209.92 1893.79,1210.9 1894.38,1212.05 1894.96,1210.35 1895.55,1209.99 1896.14,1209.85 1896.72,1209.91 1897.31,1209.55 1897.9,1206.77 1898.48,1206.59 1899.07,1204 1899.66,1204.27 1900.24,1204.44 1900.83,1203.32 1901.42,1203.45 1902,1204.99 1902.59,1207.88 1903.17,1207.86 1903.76,1209.08 1904.35,1208.86 1904.93,1209.01 1905.52,1208.79 1906.11,1207.15 1906.69,1209.83 1907.28,1208.29 1907.87,1208.02 1908.45,1207.79 1909.04,1207.92 1909.63,1206.61 1910.21,1205.46 1910.8,1205.32 1911.38,1205.26 1911.97,1207.82 1912.56,1209.34 1913.14,1210.72 1913.73,1207.99 1914.32,1208.17 1914.9,1208.08 1915.49,1211.88 1916.08,1214.49 1916.66,1213.94 1917.25,1216.47 1917.83,1216.87 1918.42,1218.55 1919.01,1215.48 1919.59,1211.04 1920.18,1210.87 1920.77,1206.94 1921.35,1208.37 1921.94,1208.26 1922.53,1205.55 1923.11,1208.24 1923.7,1208.5 1924.29,1208.61 1924.87,1208.78 1925.46,1210.12 1926.04,1208.68 1926.63,1204.57 1927.22,1206.06 1927.8,1207.43 1928.39,1208.58 1928.98,1205.77 1929.56,1205.79 1930.15,1207.01 1930.74,1205.76 1931.32,1207.15 1931.91,1207.29 1932.5,1204.57 1933.08,1204.66 1933.67,1204.67 1934.25,1207.15 1934.84,1205.81 1935.43,1206.96 1936.01,1208.13 1936.6,1206.36 1937.19,1210.27 1937.77,1212.42 1938.36,1210.77 1938.95,1210.82 1939.53,1209.32 1940.12,1207.7 1940.71,1206.36 1941.29,1205.22 1941.88,1206.75 1942.46,1207.91 1943.05,1210.29 1943.64,1209.95 1944.22,1211.29 1944.81,1209.84 1945.4,1208.07 1945.98,1206.75 1946.57,1209.48 1947.16,1211.88 1947.74,1207.74 1948.33,1208.75 1948.91,1208.22 1949.5,1206.68 1950.09,1209.31 1950.67,1206.64 1951.26,1203.92 1951.85,1204.18 1952.43,1204.05 1953.02,1201.5 1953.61,1201.61 1954.19,1203 1954.78,1204.37 1955.37,1204.58 1955.95,1208.25 1956.54,1209.41 1957.12,1205.37 1957.71,1204.46 1958.3,1203.41 1958.88,1203.56 1959.47,1206.25 1960.06,1206.01 1960.64,1203.13 1961.23,1203.67 1961.82,1206.42 1962.4,1206.49 1962.99,1209.23 1963.58,1210.71 1964.16,1210.42 1964.75,1209.88 1965.33,1208.57 1965.92,1208.82 1966.51,1207.66 1967.09,1207.71 1967.68,1203.73 1968.27,1202.6 1968.85,1205.53 1969.44,1206.7 1970.03,1205.52 1970.61,1201.62 1971.2,1199.15 1971.78,1199.68 1972.37,1201.04 1972.96,1202.87 1973.54,1200.32 1974.13,1201.65 1974.72,1202.16 1975.3,1200.87 1975.89,1201.3 1976.48,1202.82 1977.06,1202.92 1977.65,1201.47 1978.24,1202.99 1978.82,1203.3 1979.41,1203.29 1979.99,1203.65 1980.58,1202.41 1981.17,1199.91 1981.75,1200.08 1982.34,1198.16 1982.93,1197.27 1983.51,1197.9 1984.1,1197.25 1984.69,1197.46 1985.27,1200.53 1985.86,1202.39 1986.45,1198.96 1987.03,1196.83 1987.62,1197.61 1988.2,1198.07 1988.79,1197.08 1989.38,1196.24 1989.96,1195.31 1990.55,1195.74 1991.14,1196.25 1991.72,1195.57 1992.31,1193.56 1992.9,1194.22 1993.48,1196.29 1994.07,1194.49 1994.65,1196.51 1995.24,1197.34 1995.83,1199.09 1996.41,1200.97 1997,1202.57 1997.59,1204.13 1998.17,1204.12 1998.76,1204.52 1999.35,1206.09 1999.93,1207.35 2000.52,1207.63 2001.11,1208.99 2001.69,1206.47 2002.28,1206.45 2002.86,1207.57 2003.45,1211.57 2004.04,1210.01 2004.62,1209.72 2005.21,1211.94 2005.8,1212.94 2006.38,1211.05 2006.97,1213.15 2007.56,1214.26 2008.14,1209.87 2008.73,1208.39 2009.32,1208.26 2009.9,1205.49 2010.49,1206.91 2011.07,1208.2 2011.66,1208.19 2012.25,1210.84 2012.83,1206.16 2013.42,1204.87 2014.01,1206.11 2014.59,1208.48 2015.18,1208.51 2015.77,1208.61 2016.35,1207.03 2016.94,1205.6 2017.53,1204.33 2018.11,1204.57 2018.7,1204.54 2019.28,1203.34 2019.87,1204.83 2020.46,1203.54 2021.04,1203.73 2021.63,1203.74 2022.22,1203.99 2022.8,1201.68 2023.39,1205.56 2023.98,1205.62 2024.56,1207.25 2025.15,1204.71 2025.73,1203.38 2026.32,1205.79 2026.91,1207.51 2027.49,1207.65 2028.08,1207.79 2028.67,1210.22 2029.25,1214.06 2029.84,1214.93 2030.43,1213.09 2031.01,1215.4 2031.6,1214.79 2032.19,1210.21 2032.77,1211.43 2033.36,1211.23 2033.94,1209.85 2034.53,1208.46 2035.12,1209.75 2035.7,1212.17 2036.29,1210.13 2036.88,1211.4 2037.46,1212.44 2038.05,1213.63 2038.64,1210.69 2039.22,1209.44 2039.81,1208.18 2040.4,1207.9 2040.98,1207.85 2041.57,1206.38 2042.15,1206.64 2042.74,1206.72 2043.33,1206.56 2043.91,1206.58 2044.5,1206.5 2045.09,1203.83 2045.67,1202.5 2046.26,1203.73 2046.85,1202.56 2047.43,1202.67 2048.02,1200.34 2048.6,1200.72 2049.19,1200.1 2049.78,1199.34 2050.36,1199.78 2050.95,1201.4 2051.54,1202.97 2052.12,1204.67 2052.71,1205.99 2053.3,1207.13 2053.88,1208.63 2054.47,1212.36 2055.06,1214.44 2055.64,1212.69 2056.23,1213.67 2056.81,1215.8 2057.4,1216.69 2057.99,1214.47 2058.57,1215.43 2059.16,1215.2 2059.75,1213.52 2060.33,1212.98 2060.92,1212.48 2061.51,1212.27 2062.09,1210.33 2062.68,1208.59 2063.27,1207.08 2063.85,1205.89 2064.44,1207.49 2065.02,1205.92 2065.61,1208.8 2066.2,1208.79 2066.78,1207.36 2067.37,1206.12 2067.96,1207.3 2068.54,1205.88 2069.13,1204.39 2069.72,1204.54 2070.3,1206.05 2070.89,1204.47 2071.48,1205.84 2072.06,1204.64 2072.65,1204.8 2073.23,1205.98 2073.82,1207.35 2074.41,1205.96 2074.99,1207.19 2075.58,1207.32 2076.17,1208.38 2076.75,1209.69 2077.34,1209.68 2077.93,1208.32 2078.51,1205.84 2079.1,1204.52 2079.68,1204.77 2080.27,1202.17 2080.86,1200.92 2081.44,1205.17 2082.03,1206.82 2082.62,1202.99 2083.2,1201.87 2083.79,1202.08 2084.38,1199.43 2084.96,1197.11 2085.55,1199.02 2086.14,1197.97 2086.72,1199.61 2087.31,1199.96 2087.89,1200.27 2088.48,1200.65 2089.07,1202.43 2089.65,1202.69 2090.24,1203.04 2090.83,1200.7 2091.41,1203.76 2092,1202.54 2092.59,1205.55 2093.17,1204.52 2093.76,1204.87 2094.35,1204.85 2094.93,1202.1 2095.52,1202.59 2096.1,1202.95 2096.69,1203.38 2097.28,1204.96 2097.86,1205.11 2098.45,1205.24 2099.04,1203.98 2099.62,1206.53 2100.21,1209.21 2100.8,1210.43 2101.38,1210.07 2101.97,1207.43 2102.55,1208.78 2103.14,1206.03 2103.73,1207.43 2104.31,1207.45 2104.9,1207.4 2105.49,1204.87 2106.07,1204.64 2106.66,1205.06 2107.25,1204.09 2107.83,1202.87 2108.42,1202.97 2109.01,1203.23 2109.59,1201.88 2110.18,1200.84 2110.76,1201.15 2111.35,1200.07 2111.94,1199.38 2112.52,1198.49 2113.11,1200.05 2113.7,1199.22 2114.28,1196.88 2114.87,1198.67 2115.46,1200.39 2116.04,1200.57 2116.63,1200.93 2117.22,1198.84 2117.8,1200.47 2118.39,1199.65 2118.97,1199.78 2119.56,1200.05 2120.15,1203.17 2120.73,1203.42 2121.32,1202.18 2121.91,1201.17 2122.49,1197.59 2123.08,1199.27 2123.67,1196.85 2124.25,1198.65 2124.84,1197.83 2125.42,1198.26 2126.01,1199.01 2126.6,1200.71 2127.18,1199.4 2127.77,1199.92 2128.36,1200.3 2128.94,1201.96 2129.53,1203.76 2130.12,1205.43 2130.7,1206.82 2131.29,1207.96 2131.88,1209.14 2132.46,1208.9 2133.05,1208.64 2133.63,1208.3 2134.22,1209.61 2134.81,1209.18 2135.39,1210.58 2135.98,1212.1 2136.57,1213.19 2137.15,1213.05 2137.74,1214.02 2138.33,1214.9 2138.91,1214.59 2139.5,1217.71 2140.09,1214.33 2140.67,1216.7 2141.26,1217.65 2141.84,1219.65 2142.43,1217.65 2143.02,1216.94 2143.6,1215.33 2144.19,1214.91 2144.78,1210.71 2145.36,1210.64 2145.95,1210.88 2146.54,1211.96 2147.12,1212.02 2147.71,1214.33 2148.3,1213.9 2148.88,1213.46 2149.47,1213.2 2150.05,1212.48 2150.64,1212.27 2151.23,1211.94 2151.81,1210.42 2152.4,1212.65 2152.99,1210.68 2153.57,1207.84 2154.16,1207.64 2154.75,1207.41 2155.33,1205.81 2155.92,1208.34 2156.5,1208.29 2157.09,1209.61 2157.68,1209.23 2158.26,1210.53 \"/>\n<path clip-path=\"url(#clip312)\" d=\"M986.025 1207.11 L986.612 1207.11 L987.198 1207.11 L987.785 1207.11 L988.371 1207.11 L988.957 1207.11 L989.544 1207.11 L990.13 1207.11 L990.717 1207.11 L991.303 1207.11 L991.889 1207.11 L992.476 1207.11 L993.062 1207.11 L993.649 1207.11 L994.235 1207.11 L994.822 1207.11 L995.408 1207.11 L995.994 1207.11 L996.581 1207.11 L997.167 1207.11 L997.754 1207.11 L998.34 1207.11 L998.926 1207.11 L999.513 1207.11 L1000.1 1207.11 L1000.69 1207.11 L1001.27 1207.11 L1001.86 1207.11 L1002.44 1207.11 L1003.03 1207.11 L1003.62 1207.11 L1004.2 1207.11 L1004.79 1207.11 L1005.38 1207.11 L1005.96 1207.11 L1006.55 1207.11 L1007.14 1207.11 L1007.72 1207.11 L1008.31 1207.11 L1008.9 1207.11 L1009.48 1207.11 L1010.07 1207.11 L1010.65 1207.11 L1011.24 1207.11 L1011.83 1207.11 L1012.41 1207.11 L1013 1207.11 L1013.59 1207.11 L1014.17 1207.11 L1014.76 1207.11 L1015.35 1207.11 L1015.93 1207.11 L1016.52 1207.11 L1017.11 1207.11 L1017.69 1207.11 L1018.28 1207.11 L1018.86 1207.11 L1019.45 1207.11 L1020.04 1207.11 L1020.62 1207.11 L1021.21 1207.11 L1021.8 1207.11 L1022.38 1207.11 L1022.97 1207.11 L1023.56 1207.11 L1024.14 1207.11 L1024.73 1207.11 L1025.32 1207.11 L1025.9 1207.11 L1026.49 1207.11 L1027.07 1207.11 L1027.66 1207.11 L1028.25 1207.11 L1028.83 1207.11 L1029.42 1207.11 L1030.01 1207.11 L1030.59 1207.11 L1031.18 1207.11 L1031.77 1207.11 L1032.35 1207.11 L1032.94 1207.11 L1033.52 1207.11 L1034.11 1207.11 L1034.7 1207.11 L1035.28 1207.11 L1035.87 1207.11 L1036.46 1207.11 L1037.04 1207.11 L1037.63 1207.11 L1038.22 1207.11 L1038.8 1207.11 L1039.39 1207.11 L1039.98 1207.11 L1040.56 1207.11 L1041.15 1207.11 L1041.73 1207.11 L1042.32 1207.11 L1042.91 1207.11 L1043.49 1207.11 L1044.08 1207.11 L1044.67 1207.11 L1045.25 1207.11 L1045.84 1207.11 L1046.43 1207.11 L1047.01 1207.11 L1047.6 1207.11 L1048.19 1207.11 L1048.77 1207.11 L1049.36 1207.11 L1049.94 1207.11 L1050.53 1207.11 L1051.12 1207.11 L1051.7 1207.11 L1052.29 1207.11 L1052.88 1207.11 L1053.46 1207.11 L1054.05 1207.11 L1054.64 1207.11 L1055.22 1207.11 L1055.81 1207.11 L1056.39 1207.11 L1056.98 1207.11 L1057.57 1207.11 L1058.15 1207.11 L1058.74 1207.11 L1059.33 1207.11 L1059.91 1207.11 L1060.5 1207.11 L1061.09 1207.11 L1061.67 1207.11 L1062.26 1207.11 L1062.85 1207.11 L1063.43 1207.11 L1064.02 1207.11 L1064.6 1207.11 L1065.19 1207.11 L1065.78 1207.11 L1066.36 1207.11 L1066.95 1207.11 L1067.54 1207.11 L1068.12 1207.11 L1068.71 1207.11 L1069.3 1207.11 L1069.88 1207.11 L1070.47 1207.11 L1071.06 1207.11 L1071.64 1207.11 L1072.23 1207.11 L1072.81 1207.11 L1073.4 1207.11 L1073.99 1207.11 L1074.57 1207.11 L1075.16 1207.11 L1075.75 1207.11 L1076.33 1207.11 L1076.92 1207.11 L1077.51 1207.11 L1078.09 1207.11 L1078.68 1207.11 L1079.26 1207.11 L1079.85 1207.11 L1080.44 1207.11 L1081.02 1207.11 L1081.61 1207.11 L1082.2 1207.11 L1082.78 1207.11 L1083.37 1207.11 L1083.96 1207.11 L1084.54 1207.11 L1085.13 1207.11 L1085.72 1207.11 L1086.3 1207.11 L1086.89 1207.11 L1087.47 1207.11 L1088.06 1207.11 L1088.65 1207.11 L1089.23 1207.11 L1089.82 1207.11 L1090.41 1207.11 L1090.99 1207.11 L1091.58 1207.11 L1092.17 1207.11 L1092.75 1207.11 L1093.34 1207.11 L1093.93 1207.11 L1094.51 1207.11 L1095.1 1207.11 L1095.68 1207.11 L1096.27 1207.11 L1096.86 1207.11 L1097.44 1207.11 L1098.03 1207.11 L1098.62 1207.11 L1099.2 1207.11 L1099.79 1207.11 L1100.38 1207.11 L1100.96 1207.11 L1101.55 1207.11 L1102.14 1207.11 L1102.72 1207.11 L1103.31 1207.11 L1103.89 1207.11 L1104.48 1207.11 L1105.07 1207.11 L1105.65 1207.11 L1106.24 1207.11 L1106.83 1207.11 L1107.41 1207.11 L1108 1207.11 L1108.59 1207.11 L1109.17 1207.11 L1109.76 1207.11 L1110.34 1207.11 L1110.93 1207.11 L1111.52 1207.11 L1112.1 1207.11 L1112.69 1207.11 L1113.28 1207.11 L1113.86 1207.11 L1114.45 1207.11 L1115.04 1207.11 L1115.62 1207.11 L1116.21 1207.11 L1116.8 1207.11 L1117.38 1207.11 L1117.97 1207.11 L1118.55 1207.11 L1119.14 1207.11 L1119.73 1207.11 L1120.31 1207.11 L1120.9 1207.11 L1121.49 1207.11 L1122.07 1207.11 L1122.66 1207.11 L1123.25 1207.11 L1123.83 1207.11 L1124.42 1207.11 L1125.01 1207.11 L1125.59 1207.11 L1126.18 1207.11 L1126.76 1207.11 L1127.35 1207.11 L1127.94 1207.11 L1128.52 1207.11 L1129.11 1207.11 L1129.7 1207.11 L1130.28 1207.11 L1130.87 1207.11 L1131.46 1207.11 L1132.04 1207.11 L1132.63 1207.11 L1133.21 1207.11 L1133.8 1207.11 L1134.39 1207.11 L1134.97 1207.11 L1135.56 1207.11 L1136.15 1207.11 L1136.73 1207.11 L1137.32 1207.11 L1137.91 1207.11 L1138.49 1207.11 L1139.08 1207.11 L1139.67 1207.11 L1140.25 1207.11 L1140.84 1207.11 L1141.42 1207.11 L1142.01 1207.11 L1142.6 1207.11 L1143.18 1207.11 L1143.77 1207.11 L1144.36 1207.11 L1144.94 1207.11 L1145.53 1207.11 L1146.12 1207.11 L1146.7 1207.11 L1147.29 1207.11 L1147.88 1207.11 L1148.46 1207.11 L1149.05 1207.11 L1149.63 1207.11 L1150.22 1207.11 L1150.81 1207.11 L1151.39 1207.11 L1151.98 1207.11 L1152.57 1207.11 L1153.15 1207.11 L1153.74 1207.11 L1154.33 1207.11 L1154.91 1207.11 L1155.5 1207.11 L1156.09 1207.11 L1156.67 1207.11 L1157.26 1207.11 L1157.84 1207.11 L1158.43 1207.11 L1159.02 1207.11 L1159.6 1207.11 L1160.19 1207.11 L1160.78 1207.11 L1161.36 1207.11 L1161.95 1207.11 L1162.54 1207.11 L1163.12 1207.11 L1163.71 1207.11 L1164.29 1207.11 L1164.88 1207.11 L1165.47 1207.11 L1166.05 1207.11 L1166.64 1207.11 L1167.23 1207.11 L1167.81 1207.11 L1168.4 1207.11 L1168.99 1207.11 L1169.57 1207.11 L1170.16 1207.11 L1170.75 1207.11 L1171.33 1207.11 L1171.92 1207.11 L1172.5 1207.11 L1173.09 1207.11 L1173.68 1207.11 L1174.26 1207.11 L1174.85 1207.11 L1175.44 1207.11 L1176.02 1207.11 L1176.61 1207.11 L1177.2 1207.11 L1177.78 1207.11 L1178.37 1207.11 L1178.96 1207.11 L1179.54 1207.11 L1180.13 1207.11 L1180.71 1207.11 L1181.3 1207.11 L1181.89 1207.11 L1182.47 1207.11 L1183.06 1207.11 L1183.65 1207.11 L1184.23 1207.11 L1184.82 1207.11 L1185.41 1207.11 L1185.99 1207.11 L1186.58 1207.11 L1187.16 1207.11 L1187.75 1207.11 L1188.34 1207.11 L1188.92 1207.11 L1189.51 1207.11 L1190.1 1207.11 L1190.68 1207.11 L1191.27 1207.11 L1191.86 1207.11 L1192.44 1207.11 L1193.03 1207.11 L1193.62 1207.11 L1194.2 1207.11 L1194.79 1207.11 L1195.37 1207.11 L1195.96 1207.11 L1196.55 1207.11 L1197.13 1207.11 L1197.72 1207.11 L1198.31 1207.11 L1198.89 1207.11 L1199.48 1207.11 L1200.07 1207.11 L1200.65 1207.11 L1201.24 1207.11 L1201.83 1207.11 L1202.41 1207.11 L1203 1207.11 L1203.58 1207.11 L1204.17 1207.11 L1204.76 1207.11 L1205.34 1207.11 L1205.93 1207.11 L1206.52 1207.11 L1207.1 1207.11 L1207.69 1207.11 L1208.28 1207.11 L1208.86 1207.11 L1209.45 1207.11 L1210.03 1207.11 L1210.62 1207.11 L1211.21 1207.11 L1211.79 1207.11 L1212.38 1207.11 L1212.97 1207.11 L1213.55 1207.11 L1214.14 1207.11 L1214.73 1207.11 L1215.31 1207.11 L1215.9 1207.11 L1216.49 1207.11 L1217.07 1207.11 L1217.66 1207.11 L1218.24 1207.11 L1218.83 1207.11 L1219.42 1207.11 L1220 1207.11 L1220.59 1207.11 L1221.18 1207.11 L1221.76 1207.11 L1222.35 1207.11 L1222.94 1207.11 L1223.52 1207.11 L1224.11 1207.11 L1224.7 1207.11 L1225.28 1207.11 L1225.87 1207.11 L1226.45 1207.11 L1227.04 1207.11 L1227.63 1207.11 L1228.21 1207.11 L1228.8 1207.11 L1229.39 1207.11 L1229.97 1207.11 L1230.56 1207.11 L1231.15 1207.11 L1231.73 1207.11 L1232.32 1207.11 L1232.91 1207.11 L1233.49 1207.11 L1234.08 1207.11 L1234.66 1207.11 L1235.25 1207.11 L1235.84 1207.11 L1236.42 1207.11 L1237.01 1207.11 L1237.6 1207.11 L1238.18 1207.11 L1238.77 1207.11 L1239.36 1207.11 L1239.94 1207.11 L1240.53 1207.11 L1241.11 1207.11 L1241.7 1207.11 L1242.29 1207.11 L1242.87 1207.11 L1243.46 1207.11 L1244.05 1207.11 L1244.63 1207.11 L1245.22 1207.11 L1245.81 1207.11 L1246.39 1207.11 L1246.98 1207.11 L1247.57 1207.11 L1248.15 1207.11 L1248.74 1207.11 L1249.32 1207.11 L1249.91 1207.11 L1250.5 1207.11 L1251.08 1207.11 L1251.67 1207.11 L1252.26 1207.11 L1252.84 1207.11 L1253.43 1207.11 L1254.02 1207.11 L1254.6 1207.11 L1255.19 1207.11 L1255.78 1207.11 L1256.36 1207.11 L1256.95 1207.11 L1257.53 1207.11 L1258.12 1207.11 L1258.71 1207.11 L1259.29 1207.11 L1259.88 1207.11 L1260.47 1207.11 L1261.05 1207.11 L1261.64 1207.11 L1262.23 1207.11 L1262.81 1207.11 L1263.4 1207.11 L1263.98 1207.11 L1264.57 1207.11 L1265.16 1207.11 L1265.74 1207.11 L1266.33 1207.11 L1266.92 1207.11 L1267.5 1207.11 L1268.09 1207.11 L1268.68 1207.11 L1269.26 1207.11 L1269.85 1207.11 L1270.44 1207.11 L1271.02 1207.11 L1271.61 1207.11 L1272.19 1207.11 L1272.78 1207.11 L1273.37 1207.11 L1273.95 1207.11 L1274.54 1207.11 L1275.13 1207.11 L1275.71 1207.11 L1276.3 1207.11 L1276.89 1207.11 L1277.47 1207.11 L1278.06 1207.11 L1278.65 1207.11 L1279.23 1207.11 L1279.82 1207.11 L1280.4 1207.11 L1280.99 1207.11 L1281.58 1207.11 L1282.16 1207.11 L1282.75 1207.11 L1283.34 1207.11 L1283.92 1207.11 L1284.51 1207.11 L1285.1 1207.11 L1285.68 1207.11 L1286.27 1207.11 L1286.86 1207.11 L1287.44 1207.11 L1288.03 1207.11 L1288.61 1207.11 L1289.2 1207.11 L1289.79 1207.11 L1290.37 1207.11 L1290.96 1207.11 L1291.55 1207.11 L1292.13 1207.11 L1292.72 1207.11 L1293.31 1207.11 L1293.89 1207.11 L1294.48 1207.11 L1295.06 1207.11 L1295.65 1207.11 L1296.24 1207.11 L1296.82 1207.11 L1297.41 1207.11 L1298 1207.11 L1298.58 1207.11 L1299.17 1207.11 L1299.76 1207.11 L1300.34 1207.11 L1300.93 1207.11 L1301.52 1207.11 L1302.1 1207.11 L1302.69 1207.11 L1303.27 1207.11 L1303.86 1207.11 L1304.45 1207.11 L1305.03 1207.11 L1305.62 1207.11 L1306.21 1207.11 L1306.79 1207.11 L1307.38 1207.11 L1307.97 1207.11 L1308.55 1207.11 L1309.14 1207.11 L1309.73 1207.11 L1310.31 1207.11 L1310.9 1207.11 L1311.48 1207.11 L1312.07 1207.11 L1312.66 1207.11 L1313.24 1207.11 L1313.83 1207.11 L1314.42 1207.11 L1315 1207.11 L1315.59 1207.11 L1316.18 1207.11 L1316.76 1207.11 L1317.35 1207.11 L1317.93 1207.11 L1318.52 1207.11 L1319.11 1207.11 L1319.69 1207.11 L1320.28 1207.11 L1320.87 1207.11 L1321.45 1207.11 L1322.04 1207.11 L1322.63 1207.11 L1323.21 1207.11 L1323.8 1207.11 L1324.39 1207.11 L1324.97 1207.11 L1325.56 1207.11 L1326.14 1207.11 L1326.73 1207.11 L1327.32 1207.11 L1327.9 1207.11 L1328.49 1207.11 L1329.08 1207.11 L1329.66 1207.11 L1330.25 1207.11 L1330.84 1207.11 L1331.42 1207.11 L1332.01 1207.11 L1332.6 1207.11 L1333.18 1207.11 L1333.77 1207.11 L1334.35 1207.11 L1334.94 1207.11 L1335.53 1207.11 L1336.11 1207.11 L1336.7 1207.11 L1337.29 1207.11 L1337.87 1207.11 L1338.46 1207.11 L1339.05 1207.11 L1339.63 1207.11 L1340.22 1207.11 L1340.8 1207.11 L1341.39 1207.11 L1341.98 1207.11 L1342.56 1207.11 L1343.15 1207.11 L1343.74 1207.11 L1344.32 1207.11 L1344.91 1207.11 L1345.5 1207.11 L1346.08 1207.11 L1346.67 1207.11 L1347.26 1207.11 L1347.84 1207.11 L1348.43 1207.11 L1349.01 1207.11 L1349.6 1207.11 L1350.19 1207.11 L1350.77 1207.11 L1351.36 1207.11 L1351.95 1207.11 L1352.53 1207.11 L1353.12 1207.11 L1353.71 1207.11 L1354.29 1207.11 L1354.88 1207.11 L1355.47 1207.11 L1356.05 1207.11 L1356.64 1207.11 L1357.22 1207.11 L1357.81 1207.11 L1358.4 1207.11 L1358.98 1207.11 L1359.57 1207.11 L1360.16 1207.11 L1360.74 1207.11 L1361.33 1207.11 L1361.92 1207.11 L1362.5 1207.11 L1363.09 1207.11 L1363.68 1207.11 L1364.26 1207.11 L1364.85 1207.11 L1365.43 1207.11 L1366.02 1207.11 L1366.61 1207.11 L1367.19 1207.11 L1367.78 1207.11 L1368.37 1207.11 L1368.95 1207.11 L1369.54 1207.11 L1370.13 1207.11 L1370.71 1207.11 L1371.3 1207.11 L1371.88 1207.11 L1372.47 1207.11 L1373.06 1207.11 L1373.64 1207.11 L1374.23 1207.11 L1374.82 1207.11 L1375.4 1207.11 L1375.99 1207.11 L1376.58 1207.11 L1377.16 1207.11 L1377.75 1207.11 L1378.34 1207.11 L1378.92 1207.11 L1379.51 1207.11 L1380.09 1207.11 L1380.68 1207.11 L1381.27 1207.11 L1381.85 1207.11 L1382.44 1207.11 L1383.03 1207.11 L1383.61 1207.11 L1384.2 1207.11 L1384.79 1207.11 L1385.37 1207.11 L1385.96 1207.11 L1386.55 1207.11 L1387.13 1207.11 L1387.72 1207.11 L1388.3 1207.11 L1388.89 1207.11 L1389.48 1207.11 L1390.06 1207.11 L1390.65 1207.11 L1391.24 1207.11 L1391.82 1207.11 L1392.41 1207.11 L1393 1207.11 L1393.58 1207.11 L1394.17 1207.11 L1394.75 1207.11 L1395.34 1207.11 L1395.93 1207.11 L1396.51 1207.11 L1397.1 1207.11 L1397.69 1207.11 L1398.27 1207.11 L1398.86 1207.11 L1399.45 1207.11 L1400.03 1207.11 L1400.62 1207.11 L1401.21 1207.11 L1401.79 1207.11 L1402.38 1207.11 L1402.96 1207.11 L1403.55 1207.11 L1404.14 1207.11 L1404.72 1207.11 L1405.31 1207.11 L1405.9 1207.11 L1406.48 1207.11 L1407.07 1207.11 L1407.66 1207.11 L1408.24 1207.11 L1408.83 1207.11 L1409.42 1207.11 L1410 1207.11 L1410.59 1207.11 L1411.17 1207.11 L1411.76 1207.11 L1412.35 1207.11 L1412.93 1207.11 L1413.52 1207.11 L1414.11 1207.11 L1414.69 1207.11 L1415.28 1207.11 L1415.87 1207.11 L1416.45 1207.11 L1417.04 1207.11 L1417.63 1207.11 L1418.21 1207.11 L1418.8 1207.11 L1419.38 1207.11 L1419.97 1207.11 L1420.56 1207.11 L1421.14 1207.11 L1421.73 1207.11 L1422.32 1207.11 L1422.9 1207.11 L1423.49 1207.11 L1424.08 1207.11 L1424.66 1207.11 L1425.25 1207.11 L1425.83 1207.11 L1426.42 1207.11 L1427.01 1207.11 L1427.59 1207.11 L1428.18 1207.11 L1428.77 1207.11 L1429.35 1207.11 L1429.94 1207.11 L1430.53 1207.11 L1431.11 1207.11 L1431.7 1207.11 L1432.29 1207.11 L1432.87 1207.11 L1433.46 1207.11 L1434.04 1207.11 L1434.63 1207.11 L1435.22 1207.11 L1435.8 1207.11 L1436.39 1207.11 L1436.98 1207.11 L1437.56 1207.11 L1438.15 1207.11 L1438.74 1207.11 L1439.32 1207.11 L1439.91 1207.11 L1440.5 1207.11 L1441.08 1207.11 L1441.67 1207.11 L1442.25 1207.11 L1442.84 1207.11 L1443.43 1207.11 L1444.01 1207.11 L1444.6 1207.11 L1445.19 1207.11 L1445.77 1207.11 L1446.36 1207.11 L1446.95 1207.11 L1447.53 1207.11 L1448.12 1207.11 L1448.7 1207.11 L1449.29 1207.11 L1449.88 1207.11 L1450.46 1207.11 L1451.05 1207.11 L1451.64 1207.11 L1452.22 1207.11 L1452.81 1207.11 L1453.4 1207.11 L1453.98 1207.11 L1454.57 1207.11 L1455.16 1207.11 L1455.74 1207.11 L1456.33 1207.11 L1456.91 1207.11 L1457.5 1207.11 L1458.09 1207.11 L1458.67 1207.11 L1459.26 1207.11 L1459.85 1207.11 L1460.43 1207.11 L1461.02 1207.11 L1461.61 1207.11 L1462.19 1207.11 L1462.78 1207.11 L1463.37 1207.11 L1463.95 1207.11 L1464.54 1207.11 L1465.12 1207.11 L1465.71 1207.11 L1466.3 1207.11 L1466.88 1207.11 L1467.47 1207.11 L1468.06 1207.11 L1468.64 1207.11 L1469.23 1207.11 L1469.82 1207.11 L1470.4 1207.11 L1470.99 1207.11 L1471.57 1207.11 L1472.16 1207.11 L1472.75 1207.11 L1473.33 1207.11 L1473.92 1207.11 L1474.51 1207.11 L1475.09 1207.11 L1475.68 1207.11 L1476.27 1207.11 L1476.85 1207.11 L1477.44 1207.11 L1478.03 1207.11 L1478.61 1207.11 L1479.2 1207.11 L1479.78 1207.11 L1480.37 1207.11 L1480.96 1207.11 L1481.54 1207.11 L1482.13 1207.11 L1482.72 1207.11 L1483.3 1207.11 L1483.89 1207.11 L1484.48 1207.11 L1485.06 1207.11 L1485.65 1207.11 L1486.24 1207.11 L1486.82 1207.11 L1487.41 1207.11 L1487.99 1207.11 L1488.58 1207.11 L1489.17 1207.11 L1489.75 1207.11 L1490.34 1207.11 L1490.93 1207.11 L1491.51 1207.11 L1492.1 1207.11 L1492.69 1207.11 L1493.27 1207.11 L1493.86 1207.11 L1494.45 1207.11 L1495.03 1207.11 L1495.62 1207.11 L1496.2 1207.11 L1496.79 1207.11 L1497.38 1207.11 L1497.96 1207.11 L1498.55 1207.11 L1499.14 1207.11 L1499.72 1207.11 L1500.31 1207.11 L1500.9 1207.11 L1501.48 1207.11 L1502.07 1207.11 L1502.65 1207.11 L1503.24 1207.11 L1503.83 1207.11 L1504.41 1207.11 L1505 1207.11 L1505.59 1207.11 L1506.17 1207.11 L1506.76 1207.11 L1507.35 1207.11 L1507.93 1207.11 L1508.52 1207.11 L1509.11 1207.11 L1509.69 1207.11 L1510.28 1207.11 L1510.86 1207.11 L1511.45 1207.11 L1512.04 1207.11 L1512.62 1207.11 L1513.21 1207.11 L1513.8 1207.11 L1514.38 1207.11 L1514.97 1207.11 L1515.56 1207.11 L1516.14 1207.11 L1516.73 1207.11 L1517.32 1207.11 L1517.9 1207.11 L1518.49 1207.11 L1519.07 1207.11 L1519.66 1207.11 L1520.25 1207.11 L1520.83 1207.11 L1521.42 1207.11 L1522.01 1207.11 L1522.59 1207.11 L1523.18 1207.11 L1523.77 1207.11 L1524.35 1207.11 L1524.94 1207.11 L1525.52 1207.11 L1526.11 1207.11 L1526.7 1207.11 L1527.28 1207.11 L1527.87 1207.11 L1528.46 1207.11 L1529.04 1207.11 L1529.63 1207.11 L1530.22 1207.11 L1530.8 1207.11 L1531.39 1207.11 L1531.98 1207.11 L1532.56 1207.11 L1533.15 1207.11 L1533.73 1207.11 L1534.32 1207.11 L1534.91 1207.11 L1535.49 1207.11 L1536.08 1207.11 L1536.67 1207.11 L1537.25 1207.11 L1537.84 1207.11 L1538.43 1207.11 L1539.01 1207.11 L1539.6 1207.11 L1540.19 1207.11 L1540.77 1207.11 L1541.36 1207.11 L1541.94 1207.11 L1542.53 1207.11 L1543.12 1207.11 L1543.7 1207.11 L1544.29 1207.11 L1544.88 1207.11 L1545.46 1207.11 L1546.05 1207.11 L1546.64 1207.11 L1547.22 1207.11 L1547.81 1207.11 L1548.4 1207.11 L1548.98 1207.11 L1549.57 1207.11 L1550.15 1207.11 L1550.74 1207.11 L1551.33 1207.11 L1551.91 1207.11 L1552.5 1207.11 L1553.09 1207.11 L1553.67 1207.11 L1554.26 1207.11 L1554.85 1207.11 L1555.43 1207.11 L1556.02 1207.11 L1556.6 1207.11 L1557.19 1207.11 L1557.78 1207.11 L1558.36 1207.11 L1558.95 1207.11 L1559.54 1207.11 L1560.12 1207.11 L1560.71 1207.11 L1561.3 1207.11 L1561.88 1207.11 L1562.47 1207.11 L1563.06 1207.11 L1563.64 1207.11 L1564.23 1207.11 L1564.81 1207.11 L1565.4 1207.11 L1565.99 1207.11 L1566.57 1207.11 L1567.16 1207.11 L1567.75 1207.11 L1568.33 1207.11 L1568.92 1207.11 L1569.51 1207.11 L1570.09 1207.11 L1570.68 1207.11 L1571.27 1207.11 L1571.85 1207.11 L1572.44 1207.11 L1573.02 1207.11 L1573.61 1207.11 L1574.2 1207.11 L1574.78 1207.11 L1575.37 1207.11 L1575.96 1207.11 L1576.54 1207.11 L1577.13 1207.11 L1577.72 1207.11 L1578.3 1207.11 L1578.89 1207.11 L1579.47 1207.11 L1580.06 1207.11 L1580.65 1207.11 L1581.23 1207.11 L1581.82 1207.11 L1582.41 1207.11 L1582.99 1207.11 L1583.58 1207.11 L1584.17 1207.11 L1584.75 1207.11 L1585.34 1207.11 L1585.93 1207.11 L1586.51 1207.11 L1587.1 1207.11 L1587.68 1207.11 L1588.27 1207.11 L1588.86 1207.11 L1589.44 1207.11 L1590.03 1207.11 L1590.62 1207.11 L1591.2 1207.11 L1591.79 1207.11 L1592.38 1207.11 L1592.96 1207.11 L1593.55 1207.11 L1594.14 1207.11 L1594.72 1207.11 L1595.31 1207.11 L1595.89 1207.11 L1596.48 1207.11 L1597.07 1207.11 L1597.65 1207.11 L1598.24 1207.11 L1598.83 1207.11 L1599.41 1207.11 L1600 1207.11 L1600.59 1207.11 L1601.17 1207.11 L1601.76 1207.11 L1602.34 1207.11 L1602.93 1207.11 L1603.52 1207.11 L1604.1 1207.11 L1604.69 1207.11 L1605.28 1207.11 L1605.86 1207.11 L1606.45 1207.11 L1607.04 1207.11 L1607.62 1207.11 L1608.21 1207.11 L1608.8 1207.11 L1609.38 1207.11 L1609.97 1207.11 L1610.55 1207.11 L1611.14 1207.11 L1611.73 1207.11 L1612.31 1207.11 L1612.9 1207.11 L1613.49 1207.11 L1614.07 1207.11 L1614.66 1207.11 L1615.25 1207.11 L1615.83 1207.11 L1616.42 1207.11 L1617.01 1207.11 L1617.59 1207.11 L1618.18 1207.11 L1618.76 1207.11 L1619.35 1207.11 L1619.94 1207.11 L1620.52 1207.11 L1621.11 1207.11 L1621.7 1207.11 L1622.28 1207.11 L1622.87 1207.11 L1623.46 1207.11 L1624.04 1207.11 L1624.63 1207.11 L1625.22 1207.11 L1625.8 1207.11 L1626.39 1207.11 L1626.97 1207.11 L1627.56 1207.11 L1628.15 1207.11 L1628.73 1207.11 L1629.32 1207.11 L1629.91 1207.11 L1630.49 1207.11 L1631.08 1207.11 L1631.67 1207.11 L1632.25 1207.11 L1632.84 1207.11 L1633.42 1207.11 L1634.01 1207.11 L1634.6 1207.11 L1635.18 1207.11 L1635.77 1207.11 L1636.36 1207.11 L1636.94 1207.11 L1637.53 1207.11 L1638.12 1207.11 L1638.7 1207.11 L1639.29 1207.11 L1639.88 1207.11 L1640.46 1207.11 L1641.05 1207.11 L1641.63 1207.11 L1642.22 1207.11 L1642.81 1207.11 L1643.39 1207.11 L1643.98 1207.11 L1644.57 1207.11 L1645.15 1207.11 L1645.74 1207.11 L1646.33 1207.11 L1646.91 1207.11 L1647.5 1207.11 L1648.09 1207.11 L1648.67 1207.11 L1649.26 1207.11 L1649.84 1207.11 L1650.43 1207.11 L1651.02 1207.11 L1651.6 1207.11 L1652.19 1207.11 L1652.78 1207.11 L1653.36 1207.11 L1653.95 1207.11 L1654.54 1207.11 L1655.12 1207.11 L1655.71 1207.11 L1656.29 1207.11 L1656.88 1207.11 L1657.47 1207.11 L1658.05 1207.11 L1658.64 1207.11 L1659.23 1207.11 L1659.81 1207.11 L1660.4 1207.11 L1660.99 1207.11 L1661.57 1207.11 L1662.16 1207.11 L1662.75 1207.11 L1663.33 1207.11 L1663.92 1207.11 L1664.5 1207.11 L1665.09 1207.11 L1665.68 1207.11 L1666.26 1207.11 L1666.85 1207.11 L1667.44 1207.11 L1668.02 1207.11 L1668.61 1207.11 L1669.2 1207.11 L1669.78 1207.11 L1670.37 1207.11 L1670.96 1207.11 L1671.54 1207.11 L1672.13 1207.11 L1672.71 1207.11 L1673.3 1207.11 L1673.89 1207.11 L1674.47 1207.11 L1675.06 1207.11 L1675.65 1207.11 L1676.23 1207.11 L1676.82 1207.11 L1677.41 1207.11 L1677.99 1207.11 L1678.58 1207.11 L1679.17 1207.11 L1679.75 1207.11 L1680.34 1207.11 L1680.92 1207.11 L1681.51 1207.11 L1682.1 1207.11 L1682.68 1207.11 L1683.27 1207.11 L1683.86 1207.11 L1684.44 1207.11 L1685.03 1207.11 L1685.62 1207.11 L1686.2 1207.11 L1686.79 1207.11 L1687.37 1207.11 L1687.96 1207.11 L1688.55 1207.11 L1689.13 1207.11 L1689.72 1207.11 L1690.31 1207.11 L1690.89 1207.11 L1691.48 1207.11 L1692.07 1207.11 L1692.65 1207.11 L1693.24 1207.11 L1693.83 1207.11 L1694.41 1207.11 L1695 1207.11 L1695.58 1207.11 L1696.17 1207.11 L1696.76 1207.11 L1697.34 1207.11 L1697.93 1207.11 L1698.52 1207.11 L1699.1 1207.11 L1699.69 1207.11 L1700.28 1207.11 L1700.86 1207.11 L1701.45 1207.11 L1702.04 1207.11 L1702.62 1207.11 L1703.21 1207.11 L1703.79 1207.11 L1704.38 1207.11 L1704.97 1207.11 L1705.55 1207.11 L1706.14 1207.11 L1706.73 1207.11 L1707.31 1207.11 L1707.9 1207.11 L1708.49 1207.11 L1709.07 1207.11 L1709.66 1207.11 L1710.24 1207.11 L1710.83 1207.11 L1711.42 1207.11 L1712 1207.11 L1712.59 1207.11 L1713.18 1207.11 L1713.76 1207.11 L1714.35 1207.11 L1714.94 1207.11 L1715.52 1207.11 L1716.11 1207.11 L1716.7 1207.11 L1717.28 1207.11 L1717.87 1207.11 L1718.45 1207.11 L1719.04 1207.11 L1719.63 1207.11 L1720.21 1207.11 L1720.8 1207.11 L1721.39 1207.11 L1721.97 1207.11 L1722.56 1207.11 L1723.15 1207.11 L1723.73 1207.11 L1724.32 1207.11 L1724.91 1207.11 L1725.49 1207.11 L1726.08 1207.11 L1726.66 1207.11 L1727.25 1207.11 L1727.84 1207.11 L1728.42 1207.11 L1729.01 1207.11 L1729.6 1207.11 L1730.18 1207.11 L1730.77 1207.11 L1731.36 1207.11 L1731.94 1207.11 L1732.53 1207.11 L1733.11 1207.11 L1733.7 1207.11 L1734.29 1207.11 L1734.87 1207.11 L1735.46 1207.11 L1736.05 1207.11 L1736.63 1207.11 L1737.22 1207.11 L1737.81 1207.11 L1738.39 1207.11 L1738.98 1207.11 L1739.57 1207.11 L1740.15 1207.11 L1740.74 1207.11 L1741.32 1207.11 L1741.91 1207.11 L1742.5 1207.11 L1743.08 1207.11 L1743.67 1207.11 L1744.26 1207.11 L1744.84 1207.11 L1745.43 1207.11 L1746.02 1207.11 L1746.6 1207.11 L1747.19 1207.11 L1747.78 1207.11 L1748.36 1207.11 L1748.95 1207.11 L1749.53 1207.11 L1750.12 1207.11 L1750.71 1207.11 L1751.29 1207.11 L1751.88 1207.11 L1752.47 1207.11 L1753.05 1207.11 L1753.64 1207.11 L1754.23 1207.11 L1754.81 1207.11 L1755.4 1207.11 L1755.99 1207.11 L1756.57 1207.11 L1757.16 1207.11 L1757.74 1207.11 L1758.33 1207.11 L1758.92 1207.11 L1759.5 1207.11 L1760.09 1207.11 L1760.68 1207.11 L1761.26 1207.11 L1761.85 1207.11 L1762.44 1207.11 L1763.02 1207.11 L1763.61 1207.11 L1764.19 1207.11 L1764.78 1207.11 L1765.37 1207.11 L1765.95 1207.11 L1766.54 1207.11 L1767.13 1207.11 L1767.71 1207.11 L1768.3 1207.11 L1768.89 1207.11 L1769.47 1207.11 L1770.06 1207.11 L1770.65 1207.11 L1771.23 1207.11 L1771.82 1207.11 L1772.4 1207.11 L1772.99 1207.11 L1773.58 1207.11 L1774.16 1207.11 L1774.75 1207.11 L1775.34 1207.11 L1775.92 1207.11 L1776.51 1207.11 L1777.1 1207.11 L1777.68 1207.11 L1778.27 1207.11 L1778.86 1207.11 L1779.44 1207.11 L1780.03 1207.11 L1780.61 1207.11 L1781.2 1207.11 L1781.79 1207.11 L1782.37 1207.11 L1782.96 1207.11 L1783.55 1207.11 L1784.13 1207.11 L1784.72 1207.11 L1785.31 1207.11 L1785.89 1207.11 L1786.48 1207.11 L1787.06 1207.11 L1787.65 1207.11 L1788.24 1207.11 L1788.82 1207.11 L1789.41 1207.11 L1790 1207.11 L1790.58 1207.11 L1791.17 1207.11 L1791.76 1207.11 L1792.34 1207.11 L1792.93 1207.11 L1793.52 1207.11 L1794.1 1207.11 L1794.69 1207.11 L1795.27 1207.11 L1795.86 1207.11 L1796.45 1207.11 L1797.03 1207.11 L1797.62 1207.11 L1798.21 1207.11 L1798.79 1207.11 L1799.38 1207.11 L1799.97 1207.11 L1800.55 1207.11 L1801.14 1207.11 L1801.73 1207.11 L1802.31 1207.11 L1802.9 1207.11 L1803.48 1207.11 L1804.07 1207.11 L1804.66 1207.11 L1805.24 1207.11 L1805.83 1207.11 L1806.42 1207.11 L1807 1207.11 L1807.59 1207.11 L1808.18 1207.11 L1808.76 1207.11 L1809.35 1207.11 L1809.94 1207.11 L1810.52 1207.11 L1811.11 1207.11 L1811.69 1207.11 L1812.28 1207.11 L1812.87 1207.11 L1813.45 1207.11 L1814.04 1207.11 L1814.63 1207.11 L1815.21 1207.11 L1815.8 1207.11 L1816.39 1207.11 L1816.97 1207.11 L1817.56 1207.11 L1818.14 1207.11 L1818.73 1207.11 L1819.32 1207.11 L1819.9 1207.11 L1820.49 1207.11 L1821.08 1207.11 L1821.66 1207.11 L1822.25 1207.11 L1822.84 1207.11 L1823.42 1207.11 L1824.01 1207.11 L1824.6 1207.11 L1825.18 1207.11 L1825.77 1207.11 L1826.35 1207.11 L1826.94 1207.11 L1827.53 1207.11 L1828.11 1207.11 L1828.7 1207.11 L1829.29 1207.11 L1829.87 1207.11 L1830.46 1207.11 L1831.05 1207.11 L1831.63 1207.11 L1832.22 1207.11 L1832.81 1207.11 L1833.39 1207.11 L1833.98 1207.11 L1834.56 1207.11 L1835.15 1207.11 L1835.74 1207.11 L1836.32 1207.11 L1836.91 1207.11 L1837.5 1207.11 L1838.08 1207.11 L1838.67 1207.11 L1839.26 1207.11 L1839.84 1207.11 L1840.43 1207.11 L1841.01 1207.11 L1841.6 1207.11 L1842.19 1207.11 L1842.77 1207.11 L1843.36 1207.11 L1843.95 1207.11 L1844.53 1207.11 L1845.12 1207.11 L1845.71 1207.11 L1846.29 1207.11 L1846.88 1207.11 L1847.47 1207.11 L1848.05 1207.11 L1848.64 1207.11 L1849.22 1207.11 L1849.81 1207.11 L1850.4 1207.11 L1850.98 1207.11 L1851.57 1207.11 L1852.16 1207.11 L1852.74 1207.11 L1853.33 1207.11 L1853.92 1207.11 L1854.5 1207.11 L1855.09 1207.11 L1855.68 1207.11 L1856.26 1207.11 L1856.85 1207.11 L1857.43 1207.11 L1858.02 1207.11 L1858.61 1207.11 L1859.19 1207.11 L1859.78 1207.11 L1860.37 1207.11 L1860.95 1207.11 L1861.54 1207.11 L1862.13 1207.11 L1862.71 1207.11 L1863.3 1207.11 L1863.88 1207.11 L1864.47 1207.11 L1865.06 1207.11 L1865.64 1207.11 L1866.23 1207.11 L1866.82 1207.11 L1867.4 1207.11 L1867.99 1207.11 L1868.58 1207.11 L1869.16 1207.11 L1869.75 1207.11 L1870.34 1207.11 L1870.92 1207.11 L1871.51 1207.11 L1872.09 1207.11 L1872.68 1207.11 L1873.27 1207.11 L1873.85 1207.11 L1874.44 1207.11 L1875.03 1207.11 L1875.61 1207.11 L1876.2 1207.11 L1876.79 1207.11 L1877.37 1207.11 L1877.96 1207.11 L1878.55 1207.11 L1879.13 1207.11 L1879.72 1207.11 L1880.3 1207.11 L1880.89 1207.11 L1881.48 1207.11 L1882.06 1207.11 L1882.65 1207.11 L1883.24 1207.11 L1883.82 1207.11 L1884.41 1207.11 L1885 1207.11 L1885.58 1207.11 L1886.17 1207.11 L1886.76 1207.11 L1887.34 1207.11 L1887.93 1207.11 L1888.51 1207.11 L1889.1 1207.11 L1889.69 1207.11 L1890.27 1207.11 L1890.86 1207.11 L1891.45 1207.11 L1892.03 1207.11 L1892.62 1207.11 L1893.21 1207.11 L1893.79 1207.11 L1894.38 1207.11 L1894.96 1207.11 L1895.55 1207.11 L1896.14 1207.11 L1896.72 1207.11 L1897.31 1207.11 L1897.9 1207.11 L1898.48 1207.11 L1899.07 1207.11 L1899.66 1207.11 L1900.24 1207.11 L1900.83 1207.11 L1901.42 1207.11 L1902 1207.11 L1902.59 1207.11 L1903.17 1207.11 L1903.76 1207.11 L1904.35 1207.11 L1904.93 1207.11 L1905.52 1207.11 L1906.11 1207.11 L1906.69 1207.11 L1907.28 1207.11 L1907.87 1207.11 L1908.45 1207.11 L1909.04 1207.11 L1909.63 1207.11 L1910.21 1207.11 L1910.8 1207.11 L1911.38 1207.11 L1911.97 1207.11 L1912.56 1207.11 L1913.14 1207.11 L1913.73 1207.11 L1914.32 1207.11 L1914.9 1207.11 L1915.49 1207.11 L1916.08 1207.11 L1916.66 1207.11 L1917.25 1207.11 L1917.83 1207.11 L1918.42 1207.11 L1919.01 1207.11 L1919.59 1207.11 L1920.18 1207.11 L1920.77 1207.11 L1921.35 1207.11 L1921.94 1207.11 L1922.53 1207.11 L1923.11 1207.11 L1923.7 1207.11 L1924.29 1207.11 L1924.87 1207.11 L1925.46 1207.11 L1926.04 1207.11 L1926.63 1207.11 L1927.22 1207.11 L1927.8 1207.11 L1928.39 1207.11 L1928.98 1207.11 L1929.56 1207.11 L1930.15 1207.11 L1930.74 1207.11 L1931.32 1207.11 L1931.91 1207.11 L1932.5 1207.11 L1933.08 1207.11 L1933.67 1207.11 L1934.25 1207.11 L1934.84 1207.11 L1935.43 1207.11 L1936.01 1207.11 L1936.6 1207.11 L1937.19 1207.11 L1937.77 1207.11 L1938.36 1207.11 L1938.95 1207.11 L1939.53 1207.11 L1940.12 1207.11 L1940.71 1207.11 L1941.29 1207.11 L1941.88 1207.11 L1942.46 1207.11 L1943.05 1207.11 L1943.64 1207.11 L1944.22 1207.11 L1944.81 1207.11 L1945.4 1207.11 L1945.98 1207.11 L1946.57 1207.11 L1947.16 1207.11 L1947.74 1207.11 L1948.33 1207.11 L1948.91 1207.11 L1949.5 1207.11 L1950.09 1207.11 L1950.67 1207.11 L1951.26 1207.11 L1951.85 1207.11 L1952.43 1207.11 L1953.02 1207.11 L1953.61 1207.11 L1954.19 1207.11 L1954.78 1207.11 L1955.37 1207.11 L1955.95 1207.11 L1956.54 1207.11 L1957.12 1207.11 L1957.71 1207.11 L1958.3 1207.11 L1958.88 1207.11 L1959.47 1207.11 L1960.06 1207.11 L1960.64 1207.11 L1961.23 1207.11 L1961.82 1207.11 L1962.4 1207.11 L1962.99 1207.11 L1963.58 1207.11 L1964.16 1207.11 L1964.75 1207.11 L1965.33 1207.11 L1965.92 1207.11 L1966.51 1207.11 L1967.09 1207.11 L1967.68 1207.11 L1968.27 1207.11 L1968.85 1207.11 L1969.44 1207.11 L1970.03 1207.11 L1970.61 1207.11 L1971.2 1207.11 L1971.78 1207.11 L1972.37 1207.11 L1972.96 1207.11 L1973.54 1207.11 L1974.13 1207.11 L1974.72 1207.11 L1975.3 1207.11 L1975.89 1207.11 L1976.48 1207.11 L1977.06 1207.11 L1977.65 1207.11 L1978.24 1207.11 L1978.82 1207.11 L1979.41 1207.11 L1979.99 1207.11 L1980.58 1207.11 L1981.17 1207.11 L1981.75 1207.11 L1982.34 1207.11 L1982.93 1207.11 L1983.51 1207.11 L1984.1 1207.11 L1984.69 1207.11 L1985.27 1207.11 L1985.86 1207.11 L1986.45 1207.11 L1987.03 1207.11 L1987.62 1207.11 L1988.2 1207.11 L1988.79 1207.11 L1989.38 1207.11 L1989.96 1207.11 L1990.55 1207.11 L1991.14 1207.11 L1991.72 1207.11 L1992.31 1207.11 L1992.9 1207.11 L1993.48 1207.11 L1994.07 1207.11 L1994.65 1207.11 L1995.24 1207.11 L1995.83 1207.11 L1996.41 1207.11 L1997 1207.11 L1997.59 1207.11 L1998.17 1207.11 L1998.76 1207.11 L1999.35 1207.11 L1999.93 1207.11 L2000.52 1207.11 L2001.11 1207.11 L2001.69 1207.11 L2002.28 1207.11 L2002.86 1207.11 L2003.45 1207.11 L2004.04 1207.11 L2004.62 1207.11 L2005.21 1207.11 L2005.8 1207.11 L2006.38 1207.11 L2006.97 1207.11 L2007.56 1207.11 L2008.14 1207.11 L2008.73 1207.11 L2009.32 1207.11 L2009.9 1207.11 L2010.49 1207.11 L2011.07 1207.11 L2011.66 1207.11 L2012.25 1207.11 L2012.83 1207.11 L2013.42 1207.11 L2014.01 1207.11 L2014.59 1207.11 L2015.18 1207.11 L2015.77 1207.11 L2016.35 1207.11 L2016.94 1207.11 L2017.53 1207.11 L2018.11 1207.11 L2018.7 1207.11 L2019.28 1207.11 L2019.87 1207.11 L2020.46 1207.11 L2021.04 1207.11 L2021.63 1207.11 L2022.22 1207.11 L2022.8 1207.11 L2023.39 1207.11 L2023.98 1207.11 L2024.56 1207.11 L2025.15 1207.11 L2025.73 1207.11 L2026.32 1207.11 L2026.91 1207.11 L2027.49 1207.11 L2028.08 1207.11 L2028.67 1207.11 L2029.25 1207.11 L2029.84 1207.11 L2030.43 1207.11 L2031.01 1207.11 L2031.6 1207.11 L2032.19 1207.11 L2032.77 1207.11 L2033.36 1207.11 L2033.94 1207.11 L2034.53 1207.11 L2035.12 1207.11 L2035.7 1207.11 L2036.29 1207.11 L2036.88 1207.11 L2037.46 1207.11 L2038.05 1207.11 L2038.64 1207.11 L2039.22 1207.11 L2039.81 1207.11 L2040.4 1207.11 L2040.98 1207.11 L2041.57 1207.11 L2042.15 1207.11 L2042.74 1207.11 L2043.33 1207.11 L2043.91 1207.11 L2044.5 1207.11 L2045.09 1207.11 L2045.67 1207.11 L2046.26 1207.11 L2046.85 1207.11 L2047.43 1207.11 L2048.02 1207.11 L2048.6 1207.11 L2049.19 1207.11 L2049.78 1207.11 L2050.36 1207.11 L2050.95 1207.11 L2051.54 1207.11 L2052.12 1207.11 L2052.71 1207.11 L2053.3 1207.11 L2053.88 1207.11 L2054.47 1207.11 L2055.06 1207.11 L2055.64 1207.11 L2056.23 1207.11 L2056.81 1207.11 L2057.4 1207.11 L2057.99 1207.11 L2058.57 1207.11 L2059.16 1207.11 L2059.75 1207.11 L2060.33 1207.11 L2060.92 1207.11 L2061.51 1207.11 L2062.09 1207.11 L2062.68 1207.11 L2063.27 1207.11 L2063.85 1207.11 L2064.44 1207.11 L2065.02 1207.11 L2065.61 1207.11 L2066.2 1207.11 L2066.78 1207.11 L2067.37 1207.11 L2067.96 1207.11 L2068.54 1207.11 L2069.13 1207.11 L2069.72 1207.11 L2070.3 1207.11 L2070.89 1207.11 L2071.48 1207.11 L2072.06 1207.11 L2072.65 1207.11 L2073.23 1207.11 L2073.82 1207.11 L2074.41 1207.11 L2074.99 1207.11 L2075.58 1207.11 L2076.17 1207.11 L2076.75 1207.11 L2077.34 1207.11 L2077.93 1207.11 L2078.51 1207.11 L2079.1 1207.11 L2079.68 1207.11 L2080.27 1207.11 L2080.86 1207.11 L2081.44 1207.11 L2082.03 1207.11 L2082.62 1207.11 L2083.2 1207.11 L2083.79 1207.11 L2084.38 1207.11 L2084.96 1207.11 L2085.55 1207.11 L2086.14 1207.11 L2086.72 1207.11 L2087.31 1207.11 L2087.89 1207.11 L2088.48 1207.11 L2089.07 1207.11 L2089.65 1207.11 L2090.24 1207.11 L2090.83 1207.11 L2091.41 1207.11 L2092 1207.11 L2092.59 1207.11 L2093.17 1207.11 L2093.76 1207.11 L2094.35 1207.11 L2094.93 1207.11 L2095.52 1207.11 L2096.1 1207.11 L2096.69 1207.11 L2097.28 1207.11 L2097.86 1207.11 L2098.45 1207.11 L2099.04 1207.11 L2099.62 1207.11 L2100.21 1207.11 L2100.8 1207.11 L2101.38 1207.11 L2101.97 1207.11 L2102.55 1207.11 L2103.14 1207.11 L2103.73 1207.11 L2104.31 1207.11 L2104.9 1207.11 L2105.49 1207.11 L2106.07 1207.11 L2106.66 1207.11 L2107.25 1207.11 L2107.83 1207.11 L2108.42 1207.11 L2109.01 1207.11 L2109.59 1207.11 L2110.18 1207.11 L2110.76 1207.11 L2111.35 1207.11 L2111.94 1207.11 L2112.52 1207.11 L2113.11 1207.11 L2113.7 1207.11 L2114.28 1207.11 L2114.87 1207.11 L2115.46 1207.11 L2116.04 1207.11 L2116.63 1207.11 L2117.22 1207.11 L2117.8 1207.11 L2118.39 1207.11 L2118.97 1207.11 L2119.56 1207.11 L2120.15 1207.11 L2120.73 1207.11 L2121.32 1207.11 L2121.91 1207.11 L2122.49 1207.11 L2123.08 1207.11 L2123.67 1207.11 L2124.25 1207.11 L2124.84 1207.11 L2125.42 1207.11 L2126.01 1207.11 L2126.6 1207.11 L2127.18 1207.11 L2127.77 1207.11 L2128.36 1207.11 L2128.94 1207.11 L2129.53 1207.11 L2130.12 1207.11 L2130.7 1207.11 L2131.29 1207.11 L2131.88 1207.11 L2132.46 1207.11 L2133.05 1207.11 L2133.63 1207.11 L2134.22 1207.11 L2134.81 1207.11 L2135.39 1207.11 L2135.98 1207.11 L2136.57 1207.11 L2137.15 1207.11 L2137.74 1207.11 L2138.33 1207.11 L2138.91 1207.11 L2139.5 1207.11 L2140.09 1207.11 L2140.67 1207.11 L2141.26 1207.11 L2141.84 1207.11 L2142.43 1207.11 L2143.02 1207.11 L2143.6 1207.11 L2144.19 1207.11 L2144.78 1207.11 L2145.36 1207.11 L2145.95 1207.11 L2146.54 1207.11 L2147.12 1207.11 L2147.71 1207.11 L2148.3 1207.11 L2148.88 1207.11 L2149.47 1207.11 L2150.05 1207.11 L2150.64 1207.11 L2151.23 1207.11 L2151.81 1207.11 L2152.4 1207.11 L2152.99 1207.11 L2153.57 1207.11 L2154.16 1207.11 L2154.75 1207.11 L2155.33 1207.11 L2155.92 1207.11 L2156.5 1207.11 L2157.09 1207.11 L2157.68 1207.11 L2158.26 1207.11 L2158.26 1206.46 L2157.68 1206.46 L2157.09 1206.46 L2156.5 1206.46 L2155.92 1206.46 L2155.33 1206.46 L2154.75 1206.46 L2154.16 1206.46 L2153.57 1206.46 L2152.99 1206.46 L2152.4 1206.46 L2151.81 1206.46 L2151.23 1206.46 L2150.64 1206.46 L2150.05 1206.46 L2149.47 1206.46 L2148.88 1206.46 L2148.3 1206.46 L2147.71 1206.46 L2147.12 1206.46 L2146.54 1206.46 L2145.95 1206.46 L2145.36 1206.46 L2144.78 1206.46 L2144.19 1206.46 L2143.6 1206.46 L2143.02 1206.46 L2142.43 1206.46 L2141.84 1206.46 L2141.26 1206.46 L2140.67 1206.46 L2140.09 1206.46 L2139.5 1206.46 L2138.91 1206.46 L2138.33 1206.46 L2137.74 1206.46 L2137.15 1206.46 L2136.57 1206.46 L2135.98 1206.46 L2135.39 1206.46 L2134.81 1206.46 L2134.22 1206.46 L2133.63 1206.46 L2133.05 1206.46 L2132.46 1206.46 L2131.88 1206.46 L2131.29 1206.46 L2130.7 1206.46 L2130.12 1206.46 L2129.53 1206.46 L2128.94 1206.46 L2128.36 1206.46 L2127.77 1206.46 L2127.18 1206.46 L2126.6 1206.46 L2126.01 1206.46 L2125.42 1206.46 L2124.84 1206.46 L2124.25 1206.46 L2123.67 1206.46 L2123.08 1206.46 L2122.49 1206.46 L2121.91 1206.46 L2121.32 1206.46 L2120.73 1206.46 L2120.15 1206.46 L2119.56 1206.46 L2118.97 1206.46 L2118.39 1206.46 L2117.8 1206.46 L2117.22 1206.46 L2116.63 1206.46 L2116.04 1206.46 L2115.46 1206.46 L2114.87 1206.46 L2114.28 1206.46 L2113.7 1206.46 L2113.11 1206.46 L2112.52 1206.46 L2111.94 1206.46 L2111.35 1206.46 L2110.76 1206.46 L2110.18 1206.46 L2109.59 1206.46 L2109.01 1206.46 L2108.42 1206.46 L2107.83 1206.46 L2107.25 1206.46 L2106.66 1206.46 L2106.07 1206.46 L2105.49 1206.46 L2104.9 1206.46 L2104.31 1206.46 L2103.73 1206.46 L2103.14 1206.46 L2102.55 1206.46 L2101.97 1206.46 L2101.38 1206.46 L2100.8 1206.46 L2100.21 1206.46 L2099.62 1206.46 L2099.04 1206.46 L2098.45 1206.46 L2097.86 1206.46 L2097.28 1206.46 L2096.69 1206.46 L2096.1 1206.46 L2095.52 1206.46 L2094.93 1206.46 L2094.35 1206.46 L2093.76 1206.46 L2093.17 1206.46 L2092.59 1206.46 L2092 1206.46 L2091.41 1206.46 L2090.83 1206.46 L2090.24 1206.46 L2089.65 1206.46 L2089.07 1206.46 L2088.48 1206.46 L2087.89 1206.46 L2087.31 1206.46 L2086.72 1206.46 L2086.14 1206.46 L2085.55 1206.46 L2084.96 1206.46 L2084.38 1206.46 L2083.79 1206.46 L2083.2 1206.46 L2082.62 1206.46 L2082.03 1206.46 L2081.44 1206.46 L2080.86 1206.46 L2080.27 1206.46 L2079.68 1206.46 L2079.1 1206.46 L2078.51 1206.46 L2077.93 1206.46 L2077.34 1206.46 L2076.75 1206.46 L2076.17 1206.46 L2075.58 1206.46 L2074.99 1206.46 L2074.41 1206.46 L2073.82 1206.46 L2073.23 1206.46 L2072.65 1206.46 L2072.06 1206.46 L2071.48 1206.46 L2070.89 1206.46 L2070.3 1206.46 L2069.72 1206.46 L2069.13 1206.46 L2068.54 1206.46 L2067.96 1206.46 L2067.37 1206.46 L2066.78 1206.46 L2066.2 1206.46 L2065.61 1206.46 L2065.02 1206.46 L2064.44 1206.46 L2063.85 1206.46 L2063.27 1206.46 L2062.68 1206.46 L2062.09 1206.46 L2061.51 1206.46 L2060.92 1206.46 L2060.33 1206.46 L2059.75 1206.46 L2059.16 1206.46 L2058.57 1206.46 L2057.99 1206.46 L2057.4 1206.46 L2056.81 1206.46 L2056.23 1206.46 L2055.64 1206.46 L2055.06 1206.46 L2054.47 1206.46 L2053.88 1206.46 L2053.3 1206.46 L2052.71 1206.46 L2052.12 1206.46 L2051.54 1206.46 L2050.95 1206.46 L2050.36 1206.46 L2049.78 1206.46 L2049.19 1206.46 L2048.6 1206.46 L2048.02 1206.46 L2047.43 1206.46 L2046.85 1206.46 L2046.26 1206.46 L2045.67 1206.46 L2045.09 1206.46 L2044.5 1206.46 L2043.91 1206.46 L2043.33 1206.46 L2042.74 1206.46 L2042.15 1206.46 L2041.57 1206.46 L2040.98 1206.46 L2040.4 1206.46 L2039.81 1206.46 L2039.22 1206.46 L2038.64 1206.46 L2038.05 1206.46 L2037.46 1206.46 L2036.88 1206.46 L2036.29 1206.46 L2035.7 1206.46 L2035.12 1206.46 L2034.53 1206.46 L2033.94 1206.46 L2033.36 1206.46 L2032.77 1206.46 L2032.19 1206.46 L2031.6 1206.46 L2031.01 1206.46 L2030.43 1206.46 L2029.84 1206.46 L2029.25 1206.46 L2028.67 1206.46 L2028.08 1206.46 L2027.49 1206.46 L2026.91 1206.46 L2026.32 1206.46 L2025.73 1206.46 L2025.15 1206.46 L2024.56 1206.46 L2023.98 1206.46 L2023.39 1206.46 L2022.8 1206.46 L2022.22 1206.46 L2021.63 1206.46 L2021.04 1206.46 L2020.46 1206.46 L2019.87 1206.46 L2019.28 1206.46 L2018.7 1206.46 L2018.11 1206.46 L2017.53 1206.46 L2016.94 1206.46 L2016.35 1206.46 L2015.77 1206.46 L2015.18 1206.46 L2014.59 1206.46 L2014.01 1206.46 L2013.42 1206.46 L2012.83 1206.46 L2012.25 1206.46 L2011.66 1206.46 L2011.07 1206.46 L2010.49 1206.46 L2009.9 1206.46 L2009.32 1206.46 L2008.73 1206.46 L2008.14 1206.46 L2007.56 1206.46 L2006.97 1206.46 L2006.38 1206.46 L2005.8 1206.46 L2005.21 1206.46 L2004.62 1206.46 L2004.04 1206.46 L2003.45 1206.46 L2002.86 1206.46 L2002.28 1206.46 L2001.69 1206.46 L2001.11 1206.46 L2000.52 1206.46 L1999.93 1206.46 L1999.35 1206.46 L1998.76 1206.46 L1998.17 1206.46 L1997.59 1206.46 L1997 1206.46 L1996.41 1206.46 L1995.83 1206.46 L1995.24 1206.46 L1994.65 1206.46 L1994.07 1206.46 L1993.48 1206.46 L1992.9 1206.46 L1992.31 1206.46 L1991.72 1206.46 L1991.14 1206.46 L1990.55 1206.46 L1989.96 1206.46 L1989.38 1206.46 L1988.79 1206.46 L1988.2 1206.46 L1987.62 1206.46 L1987.03 1206.46 L1986.45 1206.46 L1985.86 1206.46 L1985.27 1206.46 L1984.69 1206.46 L1984.1 1206.46 L1983.51 1206.46 L1982.93 1206.46 L1982.34 1206.46 L1981.75 1206.46 L1981.17 1206.46 L1980.58 1206.46 L1979.99 1206.46 L1979.41 1206.46 L1978.82 1206.46 L1978.24 1206.46 L1977.65 1206.46 L1977.06 1206.46 L1976.48 1206.46 L1975.89 1206.46 L1975.3 1206.46 L1974.72 1206.46 L1974.13 1206.46 L1973.54 1206.46 L1972.96 1206.46 L1972.37 1206.46 L1971.78 1206.46 L1971.2 1206.46 L1970.61 1206.46 L1970.03 1206.46 L1969.44 1206.46 L1968.85 1206.46 L1968.27 1206.46 L1967.68 1206.46 L1967.09 1206.46 L1966.51 1206.46 L1965.92 1206.46 L1965.33 1206.46 L1964.75 1206.46 L1964.16 1206.46 L1963.58 1206.46 L1962.99 1206.46 L1962.4 1206.46 L1961.82 1206.46 L1961.23 1206.46 L1960.64 1206.46 L1960.06 1206.46 L1959.47 1206.46 L1958.88 1206.46 L1958.3 1206.46 L1957.71 1206.46 L1957.12 1206.46 L1956.54 1206.46 L1955.95 1206.46 L1955.37 1206.46 L1954.78 1206.46 L1954.19 1206.46 L1953.61 1206.46 L1953.02 1206.46 L1952.43 1206.46 L1951.85 1206.46 L1951.26 1206.46 L1950.67 1206.46 L1950.09 1206.46 L1949.5 1206.46 L1948.91 1206.46 L1948.33 1206.46 L1947.74 1206.46 L1947.16 1206.46 L1946.57 1206.46 L1945.98 1206.46 L1945.4 1206.46 L1944.81 1206.46 L1944.22 1206.46 L1943.64 1206.46 L1943.05 1206.46 L1942.46 1206.46 L1941.88 1206.46 L1941.29 1206.46 L1940.71 1206.46 L1940.12 1206.46 L1939.53 1206.46 L1938.95 1206.46 L1938.36 1206.46 L1937.77 1206.46 L1937.19 1206.46 L1936.6 1206.46 L1936.01 1206.46 L1935.43 1206.46 L1934.84 1206.46 L1934.25 1206.46 L1933.67 1206.46 L1933.08 1206.46 L1932.5 1206.46 L1931.91 1206.46 L1931.32 1206.46 L1930.74 1206.46 L1930.15 1206.46 L1929.56 1206.46 L1928.98 1206.46 L1928.39 1206.46 L1927.8 1206.46 L1927.22 1206.46 L1926.63 1206.46 L1926.04 1206.46 L1925.46 1206.46 L1924.87 1206.46 L1924.29 1206.46 L1923.7 1206.46 L1923.11 1206.46 L1922.53 1206.46 L1921.94 1206.46 L1921.35 1206.46 L1920.77 1206.46 L1920.18 1206.46 L1919.59 1206.46 L1919.01 1206.46 L1918.42 1206.46 L1917.83 1206.46 L1917.25 1206.46 L1916.66 1206.46 L1916.08 1206.46 L1915.49 1206.46 L1914.9 1206.46 L1914.32 1206.46 L1913.73 1206.46 L1913.14 1206.46 L1912.56 1206.46 L1911.97 1206.46 L1911.38 1206.46 L1910.8 1206.46 L1910.21 1206.46 L1909.63 1206.46 L1909.04 1206.46 L1908.45 1206.46 L1907.87 1206.46 L1907.28 1206.46 L1906.69 1206.46 L1906.11 1206.46 L1905.52 1206.46 L1904.93 1206.46 L1904.35 1206.46 L1903.76 1206.46 L1903.17 1206.46 L1902.59 1206.46 L1902 1206.46 L1901.42 1206.46 L1900.83 1206.46 L1900.24 1206.46 L1899.66 1206.46 L1899.07 1206.46 L1898.48 1206.46 L1897.9 1206.46 L1897.31 1206.46 L1896.72 1206.46 L1896.14 1206.46 L1895.55 1206.46 L1894.96 1206.46 L1894.38 1206.46 L1893.79 1206.46 L1893.21 1206.46 L1892.62 1206.46 L1892.03 1206.46 L1891.45 1206.46 L1890.86 1206.46 L1890.27 1206.46 L1889.69 1206.46 L1889.1 1206.46 L1888.51 1206.46 L1887.93 1206.46 L1887.34 1206.46 L1886.76 1206.46 L1886.17 1206.46 L1885.58 1206.46 L1885 1206.46 L1884.41 1206.46 L1883.82 1206.46 L1883.24 1206.46 L1882.65 1206.46 L1882.06 1206.46 L1881.48 1206.46 L1880.89 1206.46 L1880.3 1206.46 L1879.72 1206.46 L1879.13 1206.46 L1878.55 1206.46 L1877.96 1206.46 L1877.37 1206.46 L1876.79 1206.46 L1876.2 1206.46 L1875.61 1206.46 L1875.03 1206.46 L1874.44 1206.46 L1873.85 1206.46 L1873.27 1206.46 L1872.68 1206.46 L1872.09 1206.46 L1871.51 1206.46 L1870.92 1206.46 L1870.34 1206.46 L1869.75 1206.46 L1869.16 1206.46 L1868.58 1206.46 L1867.99 1206.46 L1867.4 1206.46 L1866.82 1206.46 L1866.23 1206.46 L1865.64 1206.46 L1865.06 1206.46 L1864.47 1206.46 L1863.88 1206.46 L1863.3 1206.46 L1862.71 1206.46 L1862.13 1206.46 L1861.54 1206.46 L1860.95 1206.46 L1860.37 1206.46 L1859.78 1206.46 L1859.19 1206.46 L1858.61 1206.46 L1858.02 1206.46 L1857.43 1206.46 L1856.85 1206.46 L1856.26 1206.46 L1855.68 1206.46 L1855.09 1206.46 L1854.5 1206.46 L1853.92 1206.46 L1853.33 1206.46 L1852.74 1206.46 L1852.16 1206.46 L1851.57 1206.46 L1850.98 1206.46 L1850.4 1206.46 L1849.81 1206.46 L1849.22 1206.46 L1848.64 1206.46 L1848.05 1206.46 L1847.47 1206.46 L1846.88 1206.46 L1846.29 1206.46 L1845.71 1206.46 L1845.12 1206.46 L1844.53 1206.46 L1843.95 1206.46 L1843.36 1206.46 L1842.77 1206.46 L1842.19 1206.46 L1841.6 1206.46 L1841.01 1206.46 L1840.43 1206.46 L1839.84 1206.46 L1839.26 1206.46 L1838.67 1206.46 L1838.08 1206.46 L1837.5 1206.46 L1836.91 1206.46 L1836.32 1206.46 L1835.74 1206.46 L1835.15 1206.46 L1834.56 1206.46 L1833.98 1206.46 L1833.39 1206.46 L1832.81 1206.46 L1832.22 1206.46 L1831.63 1206.46 L1831.05 1206.46 L1830.46 1206.46 L1829.87 1206.46 L1829.29 1206.46 L1828.7 1206.46 L1828.11 1206.46 L1827.53 1206.46 L1826.94 1206.46 L1826.35 1206.46 L1825.77 1206.46 L1825.18 1206.46 L1824.6 1206.46 L1824.01 1206.46 L1823.42 1206.46 L1822.84 1206.46 L1822.25 1206.46 L1821.66 1206.46 L1821.08 1206.46 L1820.49 1206.46 L1819.9 1206.46 L1819.32 1206.46 L1818.73 1206.46 L1818.14 1206.46 L1817.56 1206.46 L1816.97 1206.46 L1816.39 1206.46 L1815.8 1206.46 L1815.21 1206.46 L1814.63 1206.46 L1814.04 1206.46 L1813.45 1206.46 L1812.87 1206.46 L1812.28 1206.46 L1811.69 1206.46 L1811.11 1206.46 L1810.52 1206.46 L1809.94 1206.46 L1809.35 1206.46 L1808.76 1206.46 L1808.18 1206.46 L1807.59 1206.46 L1807 1206.46 L1806.42 1206.46 L1805.83 1206.46 L1805.24 1206.46 L1804.66 1206.46 L1804.07 1206.46 L1803.48 1206.46 L1802.9 1206.46 L1802.31 1206.46 L1801.73 1206.46 L1801.14 1206.46 L1800.55 1206.46 L1799.97 1206.46 L1799.38 1206.46 L1798.79 1206.46 L1798.21 1206.46 L1797.62 1206.46 L1797.03 1206.46 L1796.45 1206.46 L1795.86 1206.46 L1795.27 1206.46 L1794.69 1206.46 L1794.1 1206.46 L1793.52 1206.46 L1792.93 1206.46 L1792.34 1206.46 L1791.76 1206.46 L1791.17 1206.46 L1790.58 1206.46 L1790 1206.46 L1789.41 1206.46 L1788.82 1206.46 L1788.24 1206.46 L1787.65 1206.46 L1787.06 1206.46 L1786.48 1206.46 L1785.89 1206.46 L1785.31 1206.46 L1784.72 1206.46 L1784.13 1206.46 L1783.55 1206.46 L1782.96 1206.46 L1782.37 1206.46 L1781.79 1206.46 L1781.2 1206.46 L1780.61 1206.46 L1780.03 1206.46 L1779.44 1206.46 L1778.86 1206.46 L1778.27 1206.46 L1777.68 1206.46 L1777.1 1206.46 L1776.51 1206.46 L1775.92 1206.46 L1775.34 1206.46 L1774.75 1206.46 L1774.16 1206.46 L1773.58 1206.46 L1772.99 1206.46 L1772.4 1206.46 L1771.82 1206.46 L1771.23 1206.46 L1770.65 1206.46 L1770.06 1206.46 L1769.47 1206.46 L1768.89 1206.46 L1768.3 1206.46 L1767.71 1206.46 L1767.13 1206.46 L1766.54 1206.46 L1765.95 1206.46 L1765.37 1206.46 L1764.78 1206.46 L1764.19 1206.46 L1763.61 1206.46 L1763.02 1206.46 L1762.44 1206.46 L1761.85 1206.46 L1761.26 1206.46 L1760.68 1206.46 L1760.09 1206.46 L1759.5 1206.46 L1758.92 1206.46 L1758.33 1206.46 L1757.74 1206.46 L1757.16 1206.46 L1756.57 1206.46 L1755.99 1206.46 L1755.4 1206.46 L1754.81 1206.46 L1754.23 1206.46 L1753.64 1206.46 L1753.05 1206.46 L1752.47 1206.46 L1751.88 1206.46 L1751.29 1206.46 L1750.71 1206.46 L1750.12 1206.46 L1749.53 1206.46 L1748.95 1206.46 L1748.36 1206.46 L1747.78 1206.46 L1747.19 1206.46 L1746.6 1206.46 L1746.02 1206.46 L1745.43 1206.46 L1744.84 1206.46 L1744.26 1206.46 L1743.67 1206.46 L1743.08 1206.46 L1742.5 1206.46 L1741.91 1206.46 L1741.32 1206.46 L1740.74 1206.46 L1740.15 1206.46 L1739.57 1206.46 L1738.98 1206.46 L1738.39 1206.46 L1737.81 1206.46 L1737.22 1206.46 L1736.63 1206.46 L1736.05 1206.46 L1735.46 1206.46 L1734.87 1206.46 L1734.29 1206.46 L1733.7 1206.46 L1733.11 1206.46 L1732.53 1206.46 L1731.94 1206.46 L1731.36 1206.46 L1730.77 1206.46 L1730.18 1206.46 L1729.6 1206.46 L1729.01 1206.46 L1728.42 1206.46 L1727.84 1206.46 L1727.25 1206.46 L1726.66 1206.46 L1726.08 1206.46 L1725.49 1206.46 L1724.91 1206.46 L1724.32 1206.46 L1723.73 1206.46 L1723.15 1206.46 L1722.56 1206.46 L1721.97 1206.46 L1721.39 1206.46 L1720.8 1206.46 L1720.21 1206.46 L1719.63 1206.46 L1719.04 1206.46 L1718.45 1206.46 L1717.87 1206.46 L1717.28 1206.46 L1716.7 1206.46 L1716.11 1206.46 L1715.52 1206.46 L1714.94 1206.46 L1714.35 1206.46 L1713.76 1206.46 L1713.18 1206.46 L1712.59 1206.46 L1712 1206.46 L1711.42 1206.46 L1710.83 1206.46 L1710.24 1206.46 L1709.66 1206.46 L1709.07 1206.46 L1708.49 1206.46 L1707.9 1206.46 L1707.31 1206.46 L1706.73 1206.46 L1706.14 1206.46 L1705.55 1206.46 L1704.97 1206.46 L1704.38 1206.46 L1703.79 1206.46 L1703.21 1206.46 L1702.62 1206.46 L1702.04 1206.46 L1701.45 1206.46 L1700.86 1206.46 L1700.28 1206.46 L1699.69 1206.46 L1699.1 1206.46 L1698.52 1206.46 L1697.93 1206.46 L1697.34 1206.46 L1696.76 1206.46 L1696.17 1206.46 L1695.58 1206.46 L1695 1206.46 L1694.41 1206.46 L1693.83 1206.46 L1693.24 1206.46 L1692.65 1206.46 L1692.07 1206.46 L1691.48 1206.46 L1690.89 1206.46 L1690.31 1206.46 L1689.72 1206.46 L1689.13 1206.46 L1688.55 1206.46 L1687.96 1206.46 L1687.37 1206.46 L1686.79 1206.46 L1686.2 1206.46 L1685.62 1206.46 L1685.03 1206.46 L1684.44 1206.46 L1683.86 1206.46 L1683.27 1206.46 L1682.68 1206.46 L1682.1 1206.46 L1681.51 1206.46 L1680.92 1206.46 L1680.34 1206.46 L1679.75 1206.46 L1679.17 1206.46 L1678.58 1206.46 L1677.99 1206.46 L1677.41 1206.46 L1676.82 1206.46 L1676.23 1206.46 L1675.65 1206.46 L1675.06 1206.46 L1674.47 1206.46 L1673.89 1206.46 L1673.3 1206.46 L1672.71 1206.46 L1672.13 1206.46 L1671.54 1206.46 L1670.96 1206.46 L1670.37 1206.46 L1669.78 1206.46 L1669.2 1206.46 L1668.61 1206.46 L1668.02 1206.46 L1667.44 1206.46 L1666.85 1206.46 L1666.26 1206.46 L1665.68 1206.46 L1665.09 1206.46 L1664.5 1206.46 L1663.92 1206.46 L1663.33 1206.46 L1662.75 1206.46 L1662.16 1206.46 L1661.57 1206.46 L1660.99 1206.46 L1660.4 1206.46 L1659.81 1206.46 L1659.23 1206.46 L1658.64 1206.46 L1658.05 1206.46 L1657.47 1206.46 L1656.88 1206.46 L1656.29 1206.46 L1655.71 1206.46 L1655.12 1206.46 L1654.54 1206.46 L1653.95 1206.46 L1653.36 1206.46 L1652.78 1206.46 L1652.19 1206.46 L1651.6 1206.46 L1651.02 1206.46 L1650.43 1206.46 L1649.84 1206.46 L1649.26 1206.46 L1648.67 1206.46 L1648.09 1206.46 L1647.5 1206.46 L1646.91 1206.46 L1646.33 1206.46 L1645.74 1206.46 L1645.15 1206.46 L1644.57 1206.46 L1643.98 1206.46 L1643.39 1206.46 L1642.81 1206.46 L1642.22 1206.46 L1641.63 1206.46 L1641.05 1206.46 L1640.46 1206.46 L1639.88 1206.46 L1639.29 1206.46 L1638.7 1206.46 L1638.12 1206.46 L1637.53 1206.46 L1636.94 1206.46 L1636.36 1206.46 L1635.77 1206.46 L1635.18 1206.46 L1634.6 1206.46 L1634.01 1206.46 L1633.42 1206.46 L1632.84 1206.46 L1632.25 1206.46 L1631.67 1206.46 L1631.08 1206.46 L1630.49 1206.46 L1629.91 1206.46 L1629.32 1206.46 L1628.73 1206.46 L1628.15 1206.46 L1627.56 1206.46 L1626.97 1206.46 L1626.39 1206.46 L1625.8 1206.46 L1625.22 1206.46 L1624.63 1206.46 L1624.04 1206.46 L1623.46 1206.46 L1622.87 1206.46 L1622.28 1206.46 L1621.7 1206.46 L1621.11 1206.46 L1620.52 1206.46 L1619.94 1206.46 L1619.35 1206.46 L1618.76 1206.46 L1618.18 1206.46 L1617.59 1206.46 L1617.01 1206.46 L1616.42 1206.46 L1615.83 1206.46 L1615.25 1206.46 L1614.66 1206.46 L1614.07 1206.46 L1613.49 1206.46 L1612.9 1206.46 L1612.31 1206.46 L1611.73 1206.46 L1611.14 1206.46 L1610.55 1206.46 L1609.97 1206.46 L1609.38 1206.46 L1608.8 1206.46 L1608.21 1206.46 L1607.62 1206.46 L1607.04 1206.46 L1606.45 1206.46 L1605.86 1206.46 L1605.28 1206.46 L1604.69 1206.46 L1604.1 1206.46 L1603.52 1206.46 L1602.93 1206.46 L1602.34 1206.46 L1601.76 1206.46 L1601.17 1206.46 L1600.59 1206.46 L1600 1206.46 L1599.41 1206.46 L1598.83 1206.46 L1598.24 1206.46 L1597.65 1206.46 L1597.07 1206.46 L1596.48 1206.46 L1595.89 1206.46 L1595.31 1206.46 L1594.72 1206.46 L1594.14 1206.46 L1593.55 1206.46 L1592.96 1206.46 L1592.38 1206.46 L1591.79 1206.46 L1591.2 1206.46 L1590.62 1206.46 L1590.03 1206.46 L1589.44 1206.46 L1588.86 1206.46 L1588.27 1206.46 L1587.68 1206.46 L1587.1 1206.46 L1586.51 1206.46 L1585.93 1206.46 L1585.34 1206.46 L1584.75 1206.46 L1584.17 1206.46 L1583.58 1206.46 L1582.99 1206.46 L1582.41 1206.46 L1581.82 1206.46 L1581.23 1206.46 L1580.65 1206.46 L1580.06 1206.46 L1579.47 1206.46 L1578.89 1206.46 L1578.3 1206.46 L1577.72 1206.46 L1577.13 1206.46 L1576.54 1206.46 L1575.96 1206.46 L1575.37 1206.46 L1574.78 1206.46 L1574.2 1206.46 L1573.61 1206.46 L1573.02 1206.46 L1572.44 1206.46 L1571.85 1206.46 L1571.27 1206.46 L1570.68 1206.46 L1570.09 1206.46 L1569.51 1206.46 L1568.92 1206.46 L1568.33 1206.46 L1567.75 1206.46 L1567.16 1206.46 L1566.57 1206.46 L1565.99 1206.46 L1565.4 1206.46 L1564.81 1206.46 L1564.23 1206.46 L1563.64 1206.46 L1563.06 1206.46 L1562.47 1206.46 L1561.88 1206.46 L1561.3 1206.46 L1560.71 1206.46 L1560.12 1206.46 L1559.54 1206.46 L1558.95 1206.46 L1558.36 1206.46 L1557.78 1206.46 L1557.19 1206.46 L1556.6 1206.46 L1556.02 1206.46 L1555.43 1206.46 L1554.85 1206.46 L1554.26 1206.46 L1553.67 1206.46 L1553.09 1206.46 L1552.5 1206.46 L1551.91 1206.46 L1551.33 1206.46 L1550.74 1206.46 L1550.15 1206.46 L1549.57 1206.46 L1548.98 1206.46 L1548.4 1206.46 L1547.81 1206.46 L1547.22 1206.46 L1546.64 1206.46 L1546.05 1206.46 L1545.46 1206.46 L1544.88 1206.46 L1544.29 1206.46 L1543.7 1206.46 L1543.12 1206.46 L1542.53 1206.46 L1541.94 1206.46 L1541.36 1206.46 L1540.77 1206.46 L1540.19 1206.46 L1539.6 1206.46 L1539.01 1206.46 L1538.43 1206.46 L1537.84 1206.46 L1537.25 1206.46 L1536.67 1206.46 L1536.08 1206.46 L1535.49 1206.46 L1534.91 1206.46 L1534.32 1206.46 L1533.73 1206.46 L1533.15 1206.46 L1532.56 1206.46 L1531.98 1206.46 L1531.39 1206.46 L1530.8 1206.46 L1530.22 1206.46 L1529.63 1206.46 L1529.04 1206.46 L1528.46 1206.46 L1527.87 1206.46 L1527.28 1206.46 L1526.7 1206.46 L1526.11 1206.46 L1525.52 1206.46 L1524.94 1206.46 L1524.35 1206.46 L1523.77 1206.46 L1523.18 1206.46 L1522.59 1206.46 L1522.01 1206.46 L1521.42 1206.46 L1520.83 1206.46 L1520.25 1206.46 L1519.66 1206.46 L1519.07 1206.46 L1518.49 1206.46 L1517.9 1206.46 L1517.32 1206.46 L1516.73 1206.46 L1516.14 1206.46 L1515.56 1206.46 L1514.97 1206.46 L1514.38 1206.46 L1513.8 1206.46 L1513.21 1206.46 L1512.62 1206.46 L1512.04 1206.46 L1511.45 1206.46 L1510.86 1206.46 L1510.28 1206.46 L1509.69 1206.46 L1509.11 1206.46 L1508.52 1206.46 L1507.93 1206.46 L1507.35 1206.46 L1506.76 1206.46 L1506.17 1206.46 L1505.59 1206.46 L1505 1206.46 L1504.41 1206.46 L1503.83 1206.46 L1503.24 1206.46 L1502.65 1206.46 L1502.07 1206.46 L1501.48 1206.46 L1500.9 1206.46 L1500.31 1206.46 L1499.72 1206.46 L1499.14 1206.46 L1498.55 1206.46 L1497.96 1206.46 L1497.38 1206.46 L1496.79 1206.46 L1496.2 1206.46 L1495.62 1206.46 L1495.03 1206.46 L1494.45 1206.46 L1493.86 1206.46 L1493.27 1206.46 L1492.69 1206.46 L1492.1 1206.46 L1491.51 1206.46 L1490.93 1206.46 L1490.34 1206.46 L1489.75 1206.46 L1489.17 1206.46 L1488.58 1206.46 L1487.99 1206.46 L1487.41 1206.46 L1486.82 1206.46 L1486.24 1206.46 L1485.65 1206.46 L1485.06 1206.46 L1484.48 1206.46 L1483.89 1206.46 L1483.3 1206.46 L1482.72 1206.46 L1482.13 1206.46 L1481.54 1206.46 L1480.96 1206.46 L1480.37 1206.46 L1479.78 1206.46 L1479.2 1206.46 L1478.61 1206.46 L1478.03 1206.46 L1477.44 1206.46 L1476.85 1206.46 L1476.27 1206.46 L1475.68 1206.46 L1475.09 1206.46 L1474.51 1206.46 L1473.92 1206.46 L1473.33 1206.46 L1472.75 1206.46 L1472.16 1206.46 L1471.57 1206.46 L1470.99 1206.46 L1470.4 1206.46 L1469.82 1206.46 L1469.23 1206.46 L1468.64 1206.46 L1468.06 1206.46 L1467.47 1206.46 L1466.88 1206.46 L1466.3 1206.46 L1465.71 1206.46 L1465.12 1206.46 L1464.54 1206.46 L1463.95 1206.46 L1463.37 1206.46 L1462.78 1206.46 L1462.19 1206.46 L1461.61 1206.46 L1461.02 1206.46 L1460.43 1206.46 L1459.85 1206.46 L1459.26 1206.46 L1458.67 1206.46 L1458.09 1206.46 L1457.5 1206.46 L1456.91 1206.46 L1456.33 1206.46 L1455.74 1206.46 L1455.16 1206.46 L1454.57 1206.46 L1453.98 1206.46 L1453.4 1206.46 L1452.81 1206.46 L1452.22 1206.46 L1451.64 1206.46 L1451.05 1206.46 L1450.46 1206.46 L1449.88 1206.46 L1449.29 1206.46 L1448.7 1206.46 L1448.12 1206.46 L1447.53 1206.46 L1446.95 1206.46 L1446.36 1206.46 L1445.77 1206.46 L1445.19 1206.46 L1444.6 1206.46 L1444.01 1206.46 L1443.43 1206.46 L1442.84 1206.46 L1442.25 1206.46 L1441.67 1206.46 L1441.08 1206.46 L1440.5 1206.46 L1439.91 1206.46 L1439.32 1206.46 L1438.74 1206.46 L1438.15 1206.46 L1437.56 1206.46 L1436.98 1206.46 L1436.39 1206.46 L1435.8 1206.46 L1435.22 1206.46 L1434.63 1206.46 L1434.04 1206.46 L1433.46 1206.46 L1432.87 1206.46 L1432.29 1206.46 L1431.7 1206.46 L1431.11 1206.46 L1430.53 1206.46 L1429.94 1206.46 L1429.35 1206.46 L1428.77 1206.46 L1428.18 1206.46 L1427.59 1206.46 L1427.01 1206.46 L1426.42 1206.46 L1425.83 1206.46 L1425.25 1206.46 L1424.66 1206.46 L1424.08 1206.46 L1423.49 1206.46 L1422.9 1206.46 L1422.32 1206.46 L1421.73 1206.46 L1421.14 1206.46 L1420.56 1206.46 L1419.97 1206.46 L1419.38 1206.46 L1418.8 1206.46 L1418.21 1206.46 L1417.63 1206.46 L1417.04 1206.46 L1416.45 1206.46 L1415.87 1206.46 L1415.28 1206.46 L1414.69 1206.46 L1414.11 1206.46 L1413.52 1206.46 L1412.93 1206.46 L1412.35 1206.46 L1411.76 1206.46 L1411.17 1206.46 L1410.59 1206.46 L1410 1206.46 L1409.42 1206.46 L1408.83 1206.46 L1408.24 1206.46 L1407.66 1206.46 L1407.07 1206.46 L1406.48 1206.46 L1405.9 1206.46 L1405.31 1206.46 L1404.72 1206.46 L1404.14 1206.46 L1403.55 1206.46 L1402.96 1206.46 L1402.38 1206.46 L1401.79 1206.46 L1401.21 1206.46 L1400.62 1206.46 L1400.03 1206.46 L1399.45 1206.46 L1398.86 1206.46 L1398.27 1206.46 L1397.69 1206.46 L1397.1 1206.46 L1396.51 1206.46 L1395.93 1206.46 L1395.34 1206.46 L1394.75 1206.46 L1394.17 1206.46 L1393.58 1206.46 L1393 1206.46 L1392.41 1206.46 L1391.82 1206.46 L1391.24 1206.46 L1390.65 1206.46 L1390.06 1206.46 L1389.48 1206.46 L1388.89 1206.46 L1388.3 1206.46 L1387.72 1206.46 L1387.13 1206.46 L1386.55 1206.46 L1385.96 1206.46 L1385.37 1206.46 L1384.79 1206.46 L1384.2 1206.46 L1383.61 1206.46 L1383.03 1206.46 L1382.44 1206.46 L1381.85 1206.46 L1381.27 1206.46 L1380.68 1206.46 L1380.09 1206.46 L1379.51 1206.46 L1378.92 1206.46 L1378.34 1206.46 L1377.75 1206.46 L1377.16 1206.46 L1376.58 1206.46 L1375.99 1206.46 L1375.4 1206.46 L1374.82 1206.46 L1374.23 1206.46 L1373.64 1206.46 L1373.06 1206.46 L1372.47 1206.46 L1371.88 1206.46 L1371.3 1206.46 L1370.71 1206.46 L1370.13 1206.46 L1369.54 1206.46 L1368.95 1206.46 L1368.37 1206.46 L1367.78 1206.46 L1367.19 1206.46 L1366.61 1206.46 L1366.02 1206.46 L1365.43 1206.46 L1364.85 1206.46 L1364.26 1206.46 L1363.68 1206.46 L1363.09 1206.46 L1362.5 1206.46 L1361.92 1206.46 L1361.33 1206.46 L1360.74 1206.46 L1360.16 1206.46 L1359.57 1206.46 L1358.98 1206.46 L1358.4 1206.46 L1357.81 1206.46 L1357.22 1206.46 L1356.64 1206.46 L1356.05 1206.46 L1355.47 1206.46 L1354.88 1206.46 L1354.29 1206.46 L1353.71 1206.46 L1353.12 1206.46 L1352.53 1206.46 L1351.95 1206.46 L1351.36 1206.46 L1350.77 1206.46 L1350.19 1206.46 L1349.6 1206.46 L1349.01 1206.46 L1348.43 1206.46 L1347.84 1206.46 L1347.26 1206.46 L1346.67 1206.46 L1346.08 1206.46 L1345.5 1206.46 L1344.91 1206.46 L1344.32 1206.46 L1343.74 1206.46 L1343.15 1206.46 L1342.56 1206.46 L1341.98 1206.46 L1341.39 1206.46 L1340.8 1206.46 L1340.22 1206.46 L1339.63 1206.46 L1339.05 1206.46 L1338.46 1206.46 L1337.87 1206.46 L1337.29 1206.46 L1336.7 1206.46 L1336.11 1206.46 L1335.53 1206.46 L1334.94 1206.46 L1334.35 1206.46 L1333.77 1206.46 L1333.18 1206.46 L1332.6 1206.46 L1332.01 1206.46 L1331.42 1206.46 L1330.84 1206.46 L1330.25 1206.46 L1329.66 1206.46 L1329.08 1206.46 L1328.49 1206.46 L1327.9 1206.46 L1327.32 1206.46 L1326.73 1206.46 L1326.14 1206.46 L1325.56 1206.46 L1324.97 1206.46 L1324.39 1206.46 L1323.8 1206.46 L1323.21 1206.46 L1322.63 1206.46 L1322.04 1206.46 L1321.45 1206.46 L1320.87 1206.46 L1320.28 1206.46 L1319.69 1206.46 L1319.11 1206.46 L1318.52 1206.46 L1317.93 1206.46 L1317.35 1206.46 L1316.76 1206.46 L1316.18 1206.46 L1315.59 1206.46 L1315 1206.46 L1314.42 1206.46 L1313.83 1206.46 L1313.24 1206.46 L1312.66 1206.46 L1312.07 1206.46 L1311.48 1206.46 L1310.9 1206.46 L1310.31 1206.46 L1309.73 1206.46 L1309.14 1206.46 L1308.55 1206.46 L1307.97 1206.46 L1307.38 1206.46 L1306.79 1206.46 L1306.21 1206.46 L1305.62 1206.46 L1305.03 1206.46 L1304.45 1206.46 L1303.86 1206.46 L1303.27 1206.46 L1302.69 1206.46 L1302.1 1206.46 L1301.52 1206.46 L1300.93 1206.46 L1300.34 1206.46 L1299.76 1206.46 L1299.17 1206.46 L1298.58 1206.46 L1298 1206.46 L1297.41 1206.46 L1296.82 1206.46 L1296.24 1206.46 L1295.65 1206.46 L1295.06 1206.46 L1294.48 1206.46 L1293.89 1206.46 L1293.31 1206.46 L1292.72 1206.46 L1292.13 1206.46 L1291.55 1206.46 L1290.96 1206.46 L1290.37 1206.46 L1289.79 1206.46 L1289.2 1206.46 L1288.61 1206.46 L1288.03 1206.46 L1287.44 1206.46 L1286.86 1206.46 L1286.27 1206.46 L1285.68 1206.46 L1285.1 1206.46 L1284.51 1206.46 L1283.92 1206.46 L1283.34 1206.46 L1282.75 1206.46 L1282.16 1206.46 L1281.58 1206.46 L1280.99 1206.46 L1280.4 1206.46 L1279.82 1206.46 L1279.23 1206.46 L1278.65 1206.46 L1278.06 1206.46 L1277.47 1206.46 L1276.89 1206.46 L1276.3 1206.46 L1275.71 1206.46 L1275.13 1206.46 L1274.54 1206.46 L1273.95 1206.46 L1273.37 1206.46 L1272.78 1206.46 L1272.19 1206.46 L1271.61 1206.46 L1271.02 1206.46 L1270.44 1206.46 L1269.85 1206.46 L1269.26 1206.46 L1268.68 1206.46 L1268.09 1206.46 L1267.5 1206.46 L1266.92 1206.46 L1266.33 1206.46 L1265.74 1206.46 L1265.16 1206.46 L1264.57 1206.46 L1263.98 1206.46 L1263.4 1206.46 L1262.81 1206.46 L1262.23 1206.46 L1261.64 1206.46 L1261.05 1206.46 L1260.47 1206.46 L1259.88 1206.46 L1259.29 1206.46 L1258.71 1206.46 L1258.12 1206.46 L1257.53 1206.46 L1256.95 1206.46 L1256.36 1206.46 L1255.78 1206.46 L1255.19 1206.46 L1254.6 1206.46 L1254.02 1206.46 L1253.43 1206.46 L1252.84 1206.46 L1252.26 1206.46 L1251.67 1206.46 L1251.08 1206.46 L1250.5 1206.46 L1249.91 1206.46 L1249.32 1206.46 L1248.74 1206.46 L1248.15 1206.46 L1247.57 1206.46 L1246.98 1206.46 L1246.39 1206.46 L1245.81 1206.46 L1245.22 1206.46 L1244.63 1206.46 L1244.05 1206.46 L1243.46 1206.46 L1242.87 1206.46 L1242.29 1206.46 L1241.7 1206.46 L1241.11 1206.46 L1240.53 1206.46 L1239.94 1206.46 L1239.36 1206.46 L1238.77 1206.46 L1238.18 1206.46 L1237.6 1206.46 L1237.01 1206.46 L1236.42 1206.46 L1235.84 1206.46 L1235.25 1206.46 L1234.66 1206.46 L1234.08 1206.46 L1233.49 1206.46 L1232.91 1206.46 L1232.32 1206.46 L1231.73 1206.46 L1231.15 1206.46 L1230.56 1206.46 L1229.97 1206.46 L1229.39 1206.46 L1228.8 1206.46 L1228.21 1206.46 L1227.63 1206.46 L1227.04 1206.46 L1226.45 1206.46 L1225.87 1206.46 L1225.28 1206.46 L1224.7 1206.46 L1224.11 1206.46 L1223.52 1206.46 L1222.94 1206.46 L1222.35 1206.46 L1221.76 1206.46 L1221.18 1206.46 L1220.59 1206.46 L1220 1206.46 L1219.42 1206.46 L1218.83 1206.46 L1218.24 1206.46 L1217.66 1206.46 L1217.07 1206.46 L1216.49 1206.46 L1215.9 1206.46 L1215.31 1206.46 L1214.73 1206.46 L1214.14 1206.46 L1213.55 1206.46 L1212.97 1206.46 L1212.38 1206.46 L1211.79 1206.46 L1211.21 1206.46 L1210.62 1206.46 L1210.03 1206.46 L1209.45 1206.46 L1208.86 1206.46 L1208.28 1206.46 L1207.69 1206.46 L1207.1 1206.46 L1206.52 1206.46 L1205.93 1206.46 L1205.34 1206.46 L1204.76 1206.46 L1204.17 1206.46 L1203.58 1206.46 L1203 1206.46 L1202.41 1206.46 L1201.83 1206.46 L1201.24 1206.46 L1200.65 1206.46 L1200.07 1206.46 L1199.48 1206.46 L1198.89 1206.46 L1198.31 1206.46 L1197.72 1206.46 L1197.13 1206.46 L1196.55 1206.46 L1195.96 1206.46 L1195.37 1206.46 L1194.79 1206.46 L1194.2 1206.46 L1193.62 1206.46 L1193.03 1206.46 L1192.44 1206.46 L1191.86 1206.46 L1191.27 1206.46 L1190.68 1206.46 L1190.1 1206.46 L1189.51 1206.46 L1188.92 1206.46 L1188.34 1206.46 L1187.75 1206.46 L1187.16 1206.46 L1186.58 1206.46 L1185.99 1206.46 L1185.41 1206.46 L1184.82 1206.46 L1184.23 1206.46 L1183.65 1206.46 L1183.06 1206.46 L1182.47 1206.46 L1181.89 1206.46 L1181.3 1206.46 L1180.71 1206.46 L1180.13 1206.46 L1179.54 1206.46 L1178.96 1206.46 L1178.37 1206.46 L1177.78 1206.46 L1177.2 1206.46 L1176.61 1206.46 L1176.02 1206.46 L1175.44 1206.46 L1174.85 1206.46 L1174.26 1206.46 L1173.68 1206.46 L1173.09 1206.46 L1172.5 1206.46 L1171.92 1206.46 L1171.33 1206.46 L1170.75 1206.46 L1170.16 1206.46 L1169.57 1206.46 L1168.99 1206.46 L1168.4 1206.46 L1167.81 1206.46 L1167.23 1206.46 L1166.64 1206.46 L1166.05 1206.46 L1165.47 1206.46 L1164.88 1206.46 L1164.29 1206.46 L1163.71 1206.46 L1163.12 1206.46 L1162.54 1206.46 L1161.95 1206.46 L1161.36 1206.46 L1160.78 1206.46 L1160.19 1206.46 L1159.6 1206.46 L1159.02 1206.46 L1158.43 1206.46 L1157.84 1206.46 L1157.26 1206.46 L1156.67 1206.46 L1156.09 1206.46 L1155.5 1206.46 L1154.91 1206.46 L1154.33 1206.46 L1153.74 1206.46 L1153.15 1206.46 L1152.57 1206.46 L1151.98 1206.46 L1151.39 1206.46 L1150.81 1206.46 L1150.22 1206.46 L1149.63 1206.46 L1149.05 1206.46 L1148.46 1206.46 L1147.88 1206.46 L1147.29 1206.46 L1146.7 1206.46 L1146.12 1206.46 L1145.53 1206.46 L1144.94 1206.46 L1144.36 1206.46 L1143.77 1206.46 L1143.18 1206.46 L1142.6 1206.46 L1142.01 1206.46 L1141.42 1206.46 L1140.84 1206.46 L1140.25 1206.46 L1139.67 1206.46 L1139.08 1206.46 L1138.49 1206.46 L1137.91 1206.46 L1137.32 1206.46 L1136.73 1206.46 L1136.15 1206.46 L1135.56 1206.46 L1134.97 1206.46 L1134.39 1206.46 L1133.8 1206.46 L1133.21 1206.46 L1132.63 1206.46 L1132.04 1206.46 L1131.46 1206.46 L1130.87 1206.46 L1130.28 1206.46 L1129.7 1206.46 L1129.11 1206.46 L1128.52 1206.46 L1127.94 1206.46 L1127.35 1206.46 L1126.76 1206.46 L1126.18 1206.46 L1125.59 1206.46 L1125.01 1206.46 L1124.42 1206.46 L1123.83 1206.46 L1123.25 1206.46 L1122.66 1206.46 L1122.07 1206.46 L1121.49 1206.46 L1120.9 1206.46 L1120.31 1206.46 L1119.73 1206.46 L1119.14 1206.46 L1118.55 1206.46 L1117.97 1206.46 L1117.38 1206.46 L1116.8 1206.46 L1116.21 1206.46 L1115.62 1206.46 L1115.04 1206.46 L1114.45 1206.46 L1113.86 1206.46 L1113.28 1206.46 L1112.69 1206.46 L1112.1 1206.46 L1111.52 1206.46 L1110.93 1206.46 L1110.34 1206.46 L1109.76 1206.46 L1109.17 1206.46 L1108.59 1206.46 L1108 1206.46 L1107.41 1206.46 L1106.83 1206.46 L1106.24 1206.46 L1105.65 1206.46 L1105.07 1206.46 L1104.48 1206.46 L1103.89 1206.46 L1103.31 1206.46 L1102.72 1206.46 L1102.14 1206.46 L1101.55 1206.46 L1100.96 1206.46 L1100.38 1206.46 L1099.79 1206.46 L1099.2 1206.46 L1098.62 1206.46 L1098.03 1206.46 L1097.44 1206.46 L1096.86 1206.46 L1096.27 1206.46 L1095.68 1206.46 L1095.1 1206.46 L1094.51 1206.46 L1093.93 1206.46 L1093.34 1206.46 L1092.75 1206.46 L1092.17 1206.46 L1091.58 1206.46 L1090.99 1206.46 L1090.41 1206.46 L1089.82 1206.46 L1089.23 1206.46 L1088.65 1206.46 L1088.06 1206.46 L1087.47 1206.46 L1086.89 1206.46 L1086.3 1206.46 L1085.72 1206.46 L1085.13 1206.46 L1084.54 1206.46 L1083.96 1206.46 L1083.37 1206.46 L1082.78 1206.46 L1082.2 1206.46 L1081.61 1206.46 L1081.02 1206.46 L1080.44 1206.46 L1079.85 1206.46 L1079.26 1206.46 L1078.68 1206.46 L1078.09 1206.46 L1077.51 1206.46 L1076.92 1206.46 L1076.33 1206.46 L1075.75 1206.46 L1075.16 1206.46 L1074.57 1206.46 L1073.99 1206.46 L1073.4 1206.46 L1072.81 1206.46 L1072.23 1206.46 L1071.64 1206.46 L1071.06 1206.46 L1070.47 1206.46 L1069.88 1206.46 L1069.3 1206.46 L1068.71 1206.46 L1068.12 1206.46 L1067.54 1206.46 L1066.95 1206.46 L1066.36 1206.46 L1065.78 1206.46 L1065.19 1206.46 L1064.6 1206.46 L1064.02 1206.46 L1063.43 1206.46 L1062.85 1206.46 L1062.26 1206.46 L1061.67 1206.46 L1061.09 1206.46 L1060.5 1206.46 L1059.91 1206.46 L1059.33 1206.46 L1058.74 1206.46 L1058.15 1206.46 L1057.57 1206.46 L1056.98 1206.46 L1056.39 1206.46 L1055.81 1206.46 L1055.22 1206.46 L1054.64 1206.46 L1054.05 1206.46 L1053.46 1206.46 L1052.88 1206.46 L1052.29 1206.46 L1051.7 1206.46 L1051.12 1206.46 L1050.53 1206.46 L1049.94 1206.46 L1049.36 1206.46 L1048.77 1206.46 L1048.19 1206.46 L1047.6 1206.46 L1047.01 1206.46 L1046.43 1206.46 L1045.84 1206.46 L1045.25 1206.46 L1044.67 1206.46 L1044.08 1206.46 L1043.49 1206.46 L1042.91 1206.46 L1042.32 1206.46 L1041.73 1206.46 L1041.15 1206.46 L1040.56 1206.46 L1039.98 1206.46 L1039.39 1206.46 L1038.8 1206.46 L1038.22 1206.46 L1037.63 1206.46 L1037.04 1206.46 L1036.46 1206.46 L1035.87 1206.46 L1035.28 1206.46 L1034.7 1206.46 L1034.11 1206.46 L1033.52 1206.46 L1032.94 1206.46 L1032.35 1206.46 L1031.77 1206.46 L1031.18 1206.46 L1030.59 1206.46 L1030.01 1206.46 L1029.42 1206.46 L1028.83 1206.46 L1028.25 1206.46 L1027.66 1206.46 L1027.07 1206.46 L1026.49 1206.46 L1025.9 1206.46 L1025.32 1206.46 L1024.73 1206.46 L1024.14 1206.46 L1023.56 1206.46 L1022.97 1206.46 L1022.38 1206.46 L1021.8 1206.46 L1021.21 1206.46 L1020.62 1206.46 L1020.04 1206.46 L1019.45 1206.46 L1018.86 1206.46 L1018.28 1206.46 L1017.69 1206.46 L1017.11 1206.46 L1016.52 1206.46 L1015.93 1206.46 L1015.35 1206.46 L1014.76 1206.46 L1014.17 1206.46 L1013.59 1206.46 L1013 1206.46 L1012.41 1206.46 L1011.83 1206.46 L1011.24 1206.46 L1010.65 1206.46 L1010.07 1206.46 L1009.48 1206.46 L1008.9 1206.46 L1008.31 1206.46 L1007.72 1206.46 L1007.14 1206.46 L1006.55 1206.46 L1005.96 1206.46 L1005.38 1206.46 L1004.79 1206.46 L1004.2 1206.46 L1003.62 1206.46 L1003.03 1206.46 L1002.44 1206.46 L1001.86 1206.46 L1001.27 1206.46 L1000.69 1206.46 L1000.1 1206.46 L999.513 1206.46 L998.926 1206.46 L998.34 1206.46 L997.754 1206.46 L997.167 1206.46 L996.581 1206.46 L995.994 1206.46 L995.408 1206.46 L994.822 1206.46 L994.235 1206.46 L993.649 1206.46 L993.062 1206.46 L992.476 1206.46 L991.889 1206.46 L991.303 1206.46 L990.717 1206.46 L990.13 1206.46 L989.544 1206.46 L988.957 1206.46 L988.371 1206.46 L987.785 1206.46 L987.198 1206.46 L986.612 1206.46 L986.025 1206.46  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1206.79 986.612,1206.79 987.198,1206.79 987.785,1206.79 988.371,1206.79 988.957,1206.79 989.544,1206.79 990.13,1206.79 990.717,1206.79 991.303,1206.79 991.889,1206.79 992.476,1206.79 993.062,1206.79 993.649,1206.79 994.235,1206.79 994.822,1206.79 995.408,1206.79 995.994,1206.79 996.581,1206.79 997.167,1206.79 997.754,1206.79 998.34,1206.79 998.926,1206.79 999.513,1206.79 1000.1,1206.79 1000.69,1206.79 1001.27,1206.79 1001.86,1206.79 1002.44,1206.79 1003.03,1206.79 1003.62,1206.79 1004.2,1206.79 1004.79,1206.79 1005.38,1206.79 1005.96,1206.79 1006.55,1206.79 1007.14,1206.79 1007.72,1206.79 1008.31,1206.79 1008.9,1206.79 1009.48,1206.79 1010.07,1206.79 1010.65,1206.79 1011.24,1206.79 1011.83,1206.79 1012.41,1206.79 1013,1206.79 1013.59,1206.79 1014.17,1206.79 1014.76,1206.79 1015.35,1206.79 1015.93,1206.79 1016.52,1206.79 1017.11,1206.79 1017.69,1206.79 1018.28,1206.79 1018.86,1206.79 1019.45,1206.79 1020.04,1206.79 1020.62,1206.79 1021.21,1206.79 1021.8,1206.79 1022.38,1206.79 1022.97,1206.79 1023.56,1206.79 1024.14,1206.79 1024.73,1206.79 1025.32,1206.79 1025.9,1206.79 1026.49,1206.79 1027.07,1206.79 1027.66,1206.79 1028.25,1206.79 1028.83,1206.79 1029.42,1206.79 1030.01,1206.79 1030.59,1206.79 1031.18,1206.79 1031.77,1206.79 1032.35,1206.79 1032.94,1206.79 1033.52,1206.79 1034.11,1206.79 1034.7,1206.79 1035.28,1206.79 1035.87,1206.79 1036.46,1206.79 1037.04,1206.79 1037.63,1206.79 1038.22,1206.79 1038.8,1206.79 1039.39,1206.79 1039.98,1206.79 1040.56,1206.79 1041.15,1206.79 1041.73,1206.79 1042.32,1206.79 1042.91,1206.79 1043.49,1206.79 1044.08,1206.79 1044.67,1206.79 1045.25,1206.79 1045.84,1206.79 1046.43,1206.79 1047.01,1206.79 1047.6,1206.79 1048.19,1206.79 1048.77,1206.79 1049.36,1206.79 1049.94,1206.79 1050.53,1206.79 1051.12,1206.79 1051.7,1206.79 1052.29,1206.79 1052.88,1206.79 1053.46,1206.79 1054.05,1206.79 1054.64,1206.79 1055.22,1206.79 1055.81,1206.79 1056.39,1206.79 1056.98,1206.79 1057.57,1206.79 1058.15,1206.79 1058.74,1206.79 1059.33,1206.79 1059.91,1206.79 1060.5,1206.79 1061.09,1206.79 1061.67,1206.79 1062.26,1206.79 1062.85,1206.79 1063.43,1206.79 1064.02,1206.79 1064.6,1206.79 1065.19,1206.79 1065.78,1206.79 1066.36,1206.79 1066.95,1206.79 1067.54,1206.79 1068.12,1206.79 1068.71,1206.79 1069.3,1206.79 1069.88,1206.79 1070.47,1206.79 1071.06,1206.79 1071.64,1206.79 1072.23,1206.79 1072.81,1206.79 1073.4,1206.79 1073.99,1206.79 1074.57,1206.79 1075.16,1206.79 1075.75,1206.79 1076.33,1206.79 1076.92,1206.79 1077.51,1206.79 1078.09,1206.79 1078.68,1206.79 1079.26,1206.79 1079.85,1206.79 1080.44,1206.79 1081.02,1206.79 1081.61,1206.79 1082.2,1206.79 1082.78,1206.79 1083.37,1206.79 1083.96,1206.79 1084.54,1206.79 1085.13,1206.79 1085.72,1206.79 1086.3,1206.79 1086.89,1206.79 1087.47,1206.79 1088.06,1206.79 1088.65,1206.79 1089.23,1206.79 1089.82,1206.79 1090.41,1206.79 1090.99,1206.79 1091.58,1206.79 1092.17,1206.79 1092.75,1206.79 1093.34,1206.79 1093.93,1206.79 1094.51,1206.79 1095.1,1206.79 1095.68,1206.79 1096.27,1206.79 1096.86,1206.79 1097.44,1206.79 1098.03,1206.79 1098.62,1206.79 1099.2,1206.79 1099.79,1206.79 1100.38,1206.79 1100.96,1206.79 1101.55,1206.79 1102.14,1206.79 1102.72,1206.79 1103.31,1206.79 1103.89,1206.79 1104.48,1206.79 1105.07,1206.79 1105.65,1206.79 1106.24,1206.79 1106.83,1206.79 1107.41,1206.79 1108,1206.79 1108.59,1206.79 1109.17,1206.79 1109.76,1206.79 1110.34,1206.79 1110.93,1206.79 1111.52,1206.79 1112.1,1206.79 1112.69,1206.79 1113.28,1206.79 1113.86,1206.79 1114.45,1206.79 1115.04,1206.79 1115.62,1206.79 1116.21,1206.79 1116.8,1206.79 1117.38,1206.79 1117.97,1206.79 1118.55,1206.79 1119.14,1206.79 1119.73,1206.79 1120.31,1206.79 1120.9,1206.79 1121.49,1206.79 1122.07,1206.79 1122.66,1206.79 1123.25,1206.79 1123.83,1206.79 1124.42,1206.79 1125.01,1206.79 1125.59,1206.79 1126.18,1206.79 1126.76,1206.79 1127.35,1206.79 1127.94,1206.79 1128.52,1206.79 1129.11,1206.79 1129.7,1206.79 1130.28,1206.79 1130.87,1206.79 1131.46,1206.79 1132.04,1206.79 1132.63,1206.79 1133.21,1206.79 1133.8,1206.79 1134.39,1206.79 1134.97,1206.79 1135.56,1206.79 1136.15,1206.79 1136.73,1206.79 1137.32,1206.79 1137.91,1206.79 1138.49,1206.79 1139.08,1206.79 1139.67,1206.79 1140.25,1206.79 1140.84,1206.79 1141.42,1206.79 1142.01,1206.79 1142.6,1206.79 1143.18,1206.79 1143.77,1206.79 1144.36,1206.79 1144.94,1206.79 1145.53,1206.79 1146.12,1206.79 1146.7,1206.79 1147.29,1206.79 1147.88,1206.79 1148.46,1206.79 1149.05,1206.79 1149.63,1206.79 1150.22,1206.79 1150.81,1206.79 1151.39,1206.79 1151.98,1206.79 1152.57,1206.79 1153.15,1206.79 1153.74,1206.79 1154.33,1206.79 1154.91,1206.79 1155.5,1206.79 1156.09,1206.79 1156.67,1206.79 1157.26,1206.79 1157.84,1206.79 1158.43,1206.79 1159.02,1206.79 1159.6,1206.79 1160.19,1206.79 1160.78,1206.79 1161.36,1206.79 1161.95,1206.79 1162.54,1206.79 1163.12,1206.79 1163.71,1206.79 1164.29,1206.79 1164.88,1206.79 1165.47,1206.79 1166.05,1206.79 1166.64,1206.79 1167.23,1206.79 1167.81,1206.79 1168.4,1206.79 1168.99,1206.79 1169.57,1206.79 1170.16,1206.79 1170.75,1206.79 1171.33,1206.79 1171.92,1206.79 1172.5,1206.79 1173.09,1206.79 1173.68,1206.79 1174.26,1206.79 1174.85,1206.79 1175.44,1206.79 1176.02,1206.79 1176.61,1206.79 1177.2,1206.79 1177.78,1206.79 1178.37,1206.79 1178.96,1206.79 1179.54,1206.79 1180.13,1206.79 1180.71,1206.79 1181.3,1206.79 1181.89,1206.79 1182.47,1206.79 1183.06,1206.79 1183.65,1206.79 1184.23,1206.79 1184.82,1206.79 1185.41,1206.79 1185.99,1206.79 1186.58,1206.79 1187.16,1206.79 1187.75,1206.79 1188.34,1206.79 1188.92,1206.79 1189.51,1206.79 1190.1,1206.79 1190.68,1206.79 1191.27,1206.79 1191.86,1206.79 1192.44,1206.79 1193.03,1206.79 1193.62,1206.79 1194.2,1206.79 1194.79,1206.79 1195.37,1206.79 1195.96,1206.79 1196.55,1206.79 1197.13,1206.79 1197.72,1206.79 1198.31,1206.79 1198.89,1206.79 1199.48,1206.79 1200.07,1206.79 1200.65,1206.79 1201.24,1206.79 1201.83,1206.79 1202.41,1206.79 1203,1206.79 1203.58,1206.79 1204.17,1206.79 1204.76,1206.79 1205.34,1206.79 1205.93,1206.79 1206.52,1206.79 1207.1,1206.79 1207.69,1206.79 1208.28,1206.79 1208.86,1206.79 1209.45,1206.79 1210.03,1206.79 1210.62,1206.79 1211.21,1206.79 1211.79,1206.79 1212.38,1206.79 1212.97,1206.79 1213.55,1206.79 1214.14,1206.79 1214.73,1206.79 1215.31,1206.79 1215.9,1206.79 1216.49,1206.79 1217.07,1206.79 1217.66,1206.79 1218.24,1206.79 1218.83,1206.79 1219.42,1206.79 1220,1206.79 1220.59,1206.79 1221.18,1206.79 1221.76,1206.79 1222.35,1206.79 1222.94,1206.79 1223.52,1206.79 1224.11,1206.79 1224.7,1206.79 1225.28,1206.79 1225.87,1206.79 1226.45,1206.79 1227.04,1206.79 1227.63,1206.79 1228.21,1206.79 1228.8,1206.79 1229.39,1206.79 1229.97,1206.79 1230.56,1206.79 1231.15,1206.79 1231.73,1206.79 1232.32,1206.79 1232.91,1206.79 1233.49,1206.79 1234.08,1206.79 1234.66,1206.79 1235.25,1206.79 1235.84,1206.79 1236.42,1206.79 1237.01,1206.79 1237.6,1206.79 1238.18,1206.79 1238.77,1206.79 1239.36,1206.79 1239.94,1206.79 1240.53,1206.79 1241.11,1206.79 1241.7,1206.79 1242.29,1206.79 1242.87,1206.79 1243.46,1206.79 1244.05,1206.79 1244.63,1206.79 1245.22,1206.79 1245.81,1206.79 1246.39,1206.79 1246.98,1206.79 1247.57,1206.79 1248.15,1206.79 1248.74,1206.79 1249.32,1206.79 1249.91,1206.79 1250.5,1206.79 1251.08,1206.79 1251.67,1206.79 1252.26,1206.79 1252.84,1206.79 1253.43,1206.79 1254.02,1206.79 1254.6,1206.79 1255.19,1206.79 1255.78,1206.79 1256.36,1206.79 1256.95,1206.79 1257.53,1206.79 1258.12,1206.79 1258.71,1206.79 1259.29,1206.79 1259.88,1206.79 1260.47,1206.79 1261.05,1206.79 1261.64,1206.79 1262.23,1206.79 1262.81,1206.79 1263.4,1206.79 1263.98,1206.79 1264.57,1206.79 1265.16,1206.79 1265.74,1206.79 1266.33,1206.79 1266.92,1206.79 1267.5,1206.79 1268.09,1206.79 1268.68,1206.79 1269.26,1206.79 1269.85,1206.79 1270.44,1206.79 1271.02,1206.79 1271.61,1206.79 1272.19,1206.79 1272.78,1206.79 1273.37,1206.79 1273.95,1206.79 1274.54,1206.79 1275.13,1206.79 1275.71,1206.79 1276.3,1206.79 1276.89,1206.79 1277.47,1206.79 1278.06,1206.79 1278.65,1206.79 1279.23,1206.79 1279.82,1206.79 1280.4,1206.79 1280.99,1206.79 1281.58,1206.79 1282.16,1206.79 1282.75,1206.79 1283.34,1206.79 1283.92,1206.79 1284.51,1206.79 1285.1,1206.79 1285.68,1206.79 1286.27,1206.79 1286.86,1206.79 1287.44,1206.79 1288.03,1206.79 1288.61,1206.79 1289.2,1206.79 1289.79,1206.79 1290.37,1206.79 1290.96,1206.79 1291.55,1206.79 1292.13,1206.79 1292.72,1206.79 1293.31,1206.79 1293.89,1206.79 1294.48,1206.79 1295.06,1206.79 1295.65,1206.79 1296.24,1206.79 1296.82,1206.79 1297.41,1206.79 1298,1206.79 1298.58,1206.79 1299.17,1206.79 1299.76,1206.79 1300.34,1206.79 1300.93,1206.79 1301.52,1206.79 1302.1,1206.79 1302.69,1206.79 1303.27,1206.79 1303.86,1206.79 1304.45,1206.79 1305.03,1206.79 1305.62,1206.79 1306.21,1206.79 1306.79,1206.79 1307.38,1206.79 1307.97,1206.79 1308.55,1206.79 1309.14,1206.79 1309.73,1206.79 1310.31,1206.79 1310.9,1206.79 1311.48,1206.79 1312.07,1206.79 1312.66,1206.79 1313.24,1206.79 1313.83,1206.79 1314.42,1206.79 1315,1206.79 1315.59,1206.79 1316.18,1206.79 1316.76,1206.79 1317.35,1206.79 1317.93,1206.79 1318.52,1206.79 1319.11,1206.79 1319.69,1206.79 1320.28,1206.79 1320.87,1206.79 1321.45,1206.79 1322.04,1206.79 1322.63,1206.79 1323.21,1206.79 1323.8,1206.79 1324.39,1206.79 1324.97,1206.79 1325.56,1206.79 1326.14,1206.79 1326.73,1206.79 1327.32,1206.79 1327.9,1206.79 1328.49,1206.79 1329.08,1206.79 1329.66,1206.79 1330.25,1206.79 1330.84,1206.79 1331.42,1206.79 1332.01,1206.79 1332.6,1206.79 1333.18,1206.79 1333.77,1206.79 1334.35,1206.79 1334.94,1206.79 1335.53,1206.79 1336.11,1206.79 1336.7,1206.79 1337.29,1206.79 1337.87,1206.79 1338.46,1206.79 1339.05,1206.79 1339.63,1206.79 1340.22,1206.79 1340.8,1206.79 1341.39,1206.79 1341.98,1206.79 1342.56,1206.79 1343.15,1206.79 1343.74,1206.79 1344.32,1206.79 1344.91,1206.79 1345.5,1206.79 1346.08,1206.79 1346.67,1206.79 1347.26,1206.79 1347.84,1206.79 1348.43,1206.79 1349.01,1206.79 1349.6,1206.79 1350.19,1206.79 1350.77,1206.79 1351.36,1206.79 1351.95,1206.79 1352.53,1206.79 1353.12,1206.79 1353.71,1206.79 1354.29,1206.79 1354.88,1206.79 1355.47,1206.79 1356.05,1206.79 1356.64,1206.79 1357.22,1206.79 1357.81,1206.79 1358.4,1206.79 1358.98,1206.79 1359.57,1206.79 1360.16,1206.79 1360.74,1206.79 1361.33,1206.79 1361.92,1206.79 1362.5,1206.79 1363.09,1206.79 1363.68,1206.79 1364.26,1206.79 1364.85,1206.79 1365.43,1206.79 1366.02,1206.79 1366.61,1206.79 1367.19,1206.79 1367.78,1206.79 1368.37,1206.79 1368.95,1206.79 1369.54,1206.79 1370.13,1206.79 1370.71,1206.79 1371.3,1206.79 1371.88,1206.79 1372.47,1206.79 1373.06,1206.79 1373.64,1206.79 1374.23,1206.79 1374.82,1206.79 1375.4,1206.79 1375.99,1206.79 1376.58,1206.79 1377.16,1206.79 1377.75,1206.79 1378.34,1206.79 1378.92,1206.79 1379.51,1206.79 1380.09,1206.79 1380.68,1206.79 1381.27,1206.79 1381.85,1206.79 1382.44,1206.79 1383.03,1206.79 1383.61,1206.79 1384.2,1206.79 1384.79,1206.79 1385.37,1206.79 1385.96,1206.79 1386.55,1206.79 1387.13,1206.79 1387.72,1206.79 1388.3,1206.79 1388.89,1206.79 1389.48,1206.79 1390.06,1206.79 1390.65,1206.79 1391.24,1206.79 1391.82,1206.79 1392.41,1206.79 1393,1206.79 1393.58,1206.79 1394.17,1206.79 1394.75,1206.79 1395.34,1206.79 1395.93,1206.79 1396.51,1206.79 1397.1,1206.79 1397.69,1206.79 1398.27,1206.79 1398.86,1206.79 1399.45,1206.79 1400.03,1206.79 1400.62,1206.79 1401.21,1206.79 1401.79,1206.79 1402.38,1206.79 1402.96,1206.79 1403.55,1206.79 1404.14,1206.79 1404.72,1206.79 1405.31,1206.79 1405.9,1206.79 1406.48,1206.79 1407.07,1206.79 1407.66,1206.79 1408.24,1206.79 1408.83,1206.79 1409.42,1206.79 1410,1206.79 1410.59,1206.79 1411.17,1206.79 1411.76,1206.79 1412.35,1206.79 1412.93,1206.79 1413.52,1206.79 1414.11,1206.79 1414.69,1206.79 1415.28,1206.79 1415.87,1206.79 1416.45,1206.79 1417.04,1206.79 1417.63,1206.79 1418.21,1206.79 1418.8,1206.79 1419.38,1206.79 1419.97,1206.79 1420.56,1206.79 1421.14,1206.79 1421.73,1206.79 1422.32,1206.79 1422.9,1206.79 1423.49,1206.79 1424.08,1206.79 1424.66,1206.79 1425.25,1206.79 1425.83,1206.79 1426.42,1206.79 1427.01,1206.79 1427.59,1206.79 1428.18,1206.79 1428.77,1206.79 1429.35,1206.79 1429.94,1206.79 1430.53,1206.79 1431.11,1206.79 1431.7,1206.79 1432.29,1206.79 1432.87,1206.79 1433.46,1206.79 1434.04,1206.79 1434.63,1206.79 1435.22,1206.79 1435.8,1206.79 1436.39,1206.79 1436.98,1206.79 1437.56,1206.79 1438.15,1206.79 1438.74,1206.79 1439.32,1206.79 1439.91,1206.79 1440.5,1206.79 1441.08,1206.79 1441.67,1206.79 1442.25,1206.79 1442.84,1206.79 1443.43,1206.79 1444.01,1206.79 1444.6,1206.79 1445.19,1206.79 1445.77,1206.79 1446.36,1206.79 1446.95,1206.79 1447.53,1206.79 1448.12,1206.79 1448.7,1206.79 1449.29,1206.79 1449.88,1206.79 1450.46,1206.79 1451.05,1206.79 1451.64,1206.79 1452.22,1206.79 1452.81,1206.79 1453.4,1206.79 1453.98,1206.79 1454.57,1206.79 1455.16,1206.79 1455.74,1206.79 1456.33,1206.79 1456.91,1206.79 1457.5,1206.79 1458.09,1206.79 1458.67,1206.79 1459.26,1206.79 1459.85,1206.79 1460.43,1206.79 1461.02,1206.79 1461.61,1206.79 1462.19,1206.79 1462.78,1206.79 1463.37,1206.79 1463.95,1206.79 1464.54,1206.79 1465.12,1206.79 1465.71,1206.79 1466.3,1206.79 1466.88,1206.79 1467.47,1206.79 1468.06,1206.79 1468.64,1206.79 1469.23,1206.79 1469.82,1206.79 1470.4,1206.79 1470.99,1206.79 1471.57,1206.79 1472.16,1206.79 1472.75,1206.79 1473.33,1206.79 1473.92,1206.79 1474.51,1206.79 1475.09,1206.79 1475.68,1206.79 1476.27,1206.79 1476.85,1206.79 1477.44,1206.79 1478.03,1206.79 1478.61,1206.79 1479.2,1206.79 1479.78,1206.79 1480.37,1206.79 1480.96,1206.79 1481.54,1206.79 1482.13,1206.79 1482.72,1206.79 1483.3,1206.79 1483.89,1206.79 1484.48,1206.79 1485.06,1206.79 1485.65,1206.79 1486.24,1206.79 1486.82,1206.79 1487.41,1206.79 1487.99,1206.79 1488.58,1206.79 1489.17,1206.79 1489.75,1206.79 1490.34,1206.79 1490.93,1206.79 1491.51,1206.79 1492.1,1206.79 1492.69,1206.79 1493.27,1206.79 1493.86,1206.79 1494.45,1206.79 1495.03,1206.79 1495.62,1206.79 1496.2,1206.79 1496.79,1206.79 1497.38,1206.79 1497.96,1206.79 1498.55,1206.79 1499.14,1206.79 1499.72,1206.79 1500.31,1206.79 1500.9,1206.79 1501.48,1206.79 1502.07,1206.79 1502.65,1206.79 1503.24,1206.79 1503.83,1206.79 1504.41,1206.79 1505,1206.79 1505.59,1206.79 1506.17,1206.79 1506.76,1206.79 1507.35,1206.79 1507.93,1206.79 1508.52,1206.79 1509.11,1206.79 1509.69,1206.79 1510.28,1206.79 1510.86,1206.79 1511.45,1206.79 1512.04,1206.79 1512.62,1206.79 1513.21,1206.79 1513.8,1206.79 1514.38,1206.79 1514.97,1206.79 1515.56,1206.79 1516.14,1206.79 1516.73,1206.79 1517.32,1206.79 1517.9,1206.79 1518.49,1206.79 1519.07,1206.79 1519.66,1206.79 1520.25,1206.79 1520.83,1206.79 1521.42,1206.79 1522.01,1206.79 1522.59,1206.79 1523.18,1206.79 1523.77,1206.79 1524.35,1206.79 1524.94,1206.79 1525.52,1206.79 1526.11,1206.79 1526.7,1206.79 1527.28,1206.79 1527.87,1206.79 1528.46,1206.79 1529.04,1206.79 1529.63,1206.79 1530.22,1206.79 1530.8,1206.79 1531.39,1206.79 1531.98,1206.79 1532.56,1206.79 1533.15,1206.79 1533.73,1206.79 1534.32,1206.79 1534.91,1206.79 1535.49,1206.79 1536.08,1206.79 1536.67,1206.79 1537.25,1206.79 1537.84,1206.79 1538.43,1206.79 1539.01,1206.79 1539.6,1206.79 1540.19,1206.79 1540.77,1206.79 1541.36,1206.79 1541.94,1206.79 1542.53,1206.79 1543.12,1206.79 1543.7,1206.79 1544.29,1206.79 1544.88,1206.79 1545.46,1206.79 1546.05,1206.79 1546.64,1206.79 1547.22,1206.79 1547.81,1206.79 1548.4,1206.79 1548.98,1206.79 1549.57,1206.79 1550.15,1206.79 1550.74,1206.79 1551.33,1206.79 1551.91,1206.79 1552.5,1206.79 1553.09,1206.79 1553.67,1206.79 1554.26,1206.79 1554.85,1206.79 1555.43,1206.79 1556.02,1206.79 1556.6,1206.79 1557.19,1206.79 1557.78,1206.79 1558.36,1206.79 1558.95,1206.79 1559.54,1206.79 1560.12,1206.79 1560.71,1206.79 1561.3,1206.79 1561.88,1206.79 1562.47,1206.79 1563.06,1206.79 1563.64,1206.79 1564.23,1206.79 1564.81,1206.79 1565.4,1206.79 1565.99,1206.79 1566.57,1206.79 1567.16,1206.79 1567.75,1206.79 1568.33,1206.79 1568.92,1206.79 1569.51,1206.79 1570.09,1206.79 1570.68,1206.79 1571.27,1206.79 1571.85,1206.79 1572.44,1206.79 1573.02,1206.79 1573.61,1206.79 1574.2,1206.79 1574.78,1206.79 1575.37,1206.79 1575.96,1206.79 1576.54,1206.79 1577.13,1206.79 1577.72,1206.79 1578.3,1206.79 1578.89,1206.79 1579.47,1206.79 1580.06,1206.79 1580.65,1206.79 1581.23,1206.79 1581.82,1206.79 1582.41,1206.79 1582.99,1206.79 1583.58,1206.79 1584.17,1206.79 1584.75,1206.79 1585.34,1206.79 1585.93,1206.79 1586.51,1206.79 1587.1,1206.79 1587.68,1206.79 1588.27,1206.79 1588.86,1206.79 1589.44,1206.79 1590.03,1206.79 1590.62,1206.79 1591.2,1206.79 1591.79,1206.79 1592.38,1206.79 1592.96,1206.79 1593.55,1206.79 1594.14,1206.79 1594.72,1206.79 1595.31,1206.79 1595.89,1206.79 1596.48,1206.79 1597.07,1206.79 1597.65,1206.79 1598.24,1206.79 1598.83,1206.79 1599.41,1206.79 1600,1206.79 1600.59,1206.79 1601.17,1206.79 1601.76,1206.79 1602.34,1206.79 1602.93,1206.79 1603.52,1206.79 1604.1,1206.79 1604.69,1206.79 1605.28,1206.79 1605.86,1206.79 1606.45,1206.79 1607.04,1206.79 1607.62,1206.79 1608.21,1206.79 1608.8,1206.79 1609.38,1206.79 1609.97,1206.79 1610.55,1206.79 1611.14,1206.79 1611.73,1206.79 1612.31,1206.79 1612.9,1206.79 1613.49,1206.79 1614.07,1206.79 1614.66,1206.79 1615.25,1206.79 1615.83,1206.79 1616.42,1206.79 1617.01,1206.79 1617.59,1206.79 1618.18,1206.79 1618.76,1206.79 1619.35,1206.79 1619.94,1206.79 1620.52,1206.79 1621.11,1206.79 1621.7,1206.79 1622.28,1206.79 1622.87,1206.79 1623.46,1206.79 1624.04,1206.79 1624.63,1206.79 1625.22,1206.79 1625.8,1206.79 1626.39,1206.79 1626.97,1206.79 1627.56,1206.79 1628.15,1206.79 1628.73,1206.79 1629.32,1206.79 1629.91,1206.79 1630.49,1206.79 1631.08,1206.79 1631.67,1206.79 1632.25,1206.79 1632.84,1206.79 1633.42,1206.79 1634.01,1206.79 1634.6,1206.79 1635.18,1206.79 1635.77,1206.79 1636.36,1206.79 1636.94,1206.79 1637.53,1206.79 1638.12,1206.79 1638.7,1206.79 1639.29,1206.79 1639.88,1206.79 1640.46,1206.79 1641.05,1206.79 1641.63,1206.79 1642.22,1206.79 1642.81,1206.79 1643.39,1206.79 1643.98,1206.79 1644.57,1206.79 1645.15,1206.79 1645.74,1206.79 1646.33,1206.79 1646.91,1206.79 1647.5,1206.79 1648.09,1206.79 1648.67,1206.79 1649.26,1206.79 1649.84,1206.79 1650.43,1206.79 1651.02,1206.79 1651.6,1206.79 1652.19,1206.79 1652.78,1206.79 1653.36,1206.79 1653.95,1206.79 1654.54,1206.79 1655.12,1206.79 1655.71,1206.79 1656.29,1206.79 1656.88,1206.79 1657.47,1206.79 1658.05,1206.79 1658.64,1206.79 1659.23,1206.79 1659.81,1206.79 1660.4,1206.79 1660.99,1206.79 1661.57,1206.79 1662.16,1206.79 1662.75,1206.79 1663.33,1206.79 1663.92,1206.79 1664.5,1206.79 1665.09,1206.79 1665.68,1206.79 1666.26,1206.79 1666.85,1206.79 1667.44,1206.79 1668.02,1206.79 1668.61,1206.79 1669.2,1206.79 1669.78,1206.79 1670.37,1206.79 1670.96,1206.79 1671.54,1206.79 1672.13,1206.79 1672.71,1206.79 1673.3,1206.79 1673.89,1206.79 1674.47,1206.79 1675.06,1206.79 1675.65,1206.79 1676.23,1206.79 1676.82,1206.79 1677.41,1206.79 1677.99,1206.79 1678.58,1206.79 1679.17,1206.79 1679.75,1206.79 1680.34,1206.79 1680.92,1206.79 1681.51,1206.79 1682.1,1206.79 1682.68,1206.79 1683.27,1206.79 1683.86,1206.79 1684.44,1206.79 1685.03,1206.79 1685.62,1206.79 1686.2,1206.79 1686.79,1206.79 1687.37,1206.79 1687.96,1206.79 1688.55,1206.79 1689.13,1206.79 1689.72,1206.79 1690.31,1206.79 1690.89,1206.79 1691.48,1206.79 1692.07,1206.79 1692.65,1206.79 1693.24,1206.79 1693.83,1206.79 1694.41,1206.79 1695,1206.79 1695.58,1206.79 1696.17,1206.79 1696.76,1206.79 1697.34,1206.79 1697.93,1206.79 1698.52,1206.79 1699.1,1206.79 1699.69,1206.79 1700.28,1206.79 1700.86,1206.79 1701.45,1206.79 1702.04,1206.79 1702.62,1206.79 1703.21,1206.79 1703.79,1206.79 1704.38,1206.79 1704.97,1206.79 1705.55,1206.79 1706.14,1206.79 1706.73,1206.79 1707.31,1206.79 1707.9,1206.79 1708.49,1206.79 1709.07,1206.79 1709.66,1206.79 1710.24,1206.79 1710.83,1206.79 1711.42,1206.79 1712,1206.79 1712.59,1206.79 1713.18,1206.79 1713.76,1206.79 1714.35,1206.79 1714.94,1206.79 1715.52,1206.79 1716.11,1206.79 1716.7,1206.79 1717.28,1206.79 1717.87,1206.79 1718.45,1206.79 1719.04,1206.79 1719.63,1206.79 1720.21,1206.79 1720.8,1206.79 1721.39,1206.79 1721.97,1206.79 1722.56,1206.79 1723.15,1206.79 1723.73,1206.79 1724.32,1206.79 1724.91,1206.79 1725.49,1206.79 1726.08,1206.79 1726.66,1206.79 1727.25,1206.79 1727.84,1206.79 1728.42,1206.79 1729.01,1206.79 1729.6,1206.79 1730.18,1206.79 1730.77,1206.79 1731.36,1206.79 1731.94,1206.79 1732.53,1206.79 1733.11,1206.79 1733.7,1206.79 1734.29,1206.79 1734.87,1206.79 1735.46,1206.79 1736.05,1206.79 1736.63,1206.79 1737.22,1206.79 1737.81,1206.79 1738.39,1206.79 1738.98,1206.79 1739.57,1206.79 1740.15,1206.79 1740.74,1206.79 1741.32,1206.79 1741.91,1206.79 1742.5,1206.79 1743.08,1206.79 1743.67,1206.79 1744.26,1206.79 1744.84,1206.79 1745.43,1206.79 1746.02,1206.79 1746.6,1206.79 1747.19,1206.79 1747.78,1206.79 1748.36,1206.79 1748.95,1206.79 1749.53,1206.79 1750.12,1206.79 1750.71,1206.79 1751.29,1206.79 1751.88,1206.79 1752.47,1206.79 1753.05,1206.79 1753.64,1206.79 1754.23,1206.79 1754.81,1206.79 1755.4,1206.79 1755.99,1206.79 1756.57,1206.79 1757.16,1206.79 1757.74,1206.79 1758.33,1206.79 1758.92,1206.79 1759.5,1206.79 1760.09,1206.79 1760.68,1206.79 1761.26,1206.79 1761.85,1206.79 1762.44,1206.79 1763.02,1206.79 1763.61,1206.79 1764.19,1206.79 1764.78,1206.79 1765.37,1206.79 1765.95,1206.79 1766.54,1206.79 1767.13,1206.79 1767.71,1206.79 1768.3,1206.79 1768.89,1206.79 1769.47,1206.79 1770.06,1206.79 1770.65,1206.79 1771.23,1206.79 1771.82,1206.79 1772.4,1206.79 1772.99,1206.79 1773.58,1206.79 1774.16,1206.79 1774.75,1206.79 1775.34,1206.79 1775.92,1206.79 1776.51,1206.79 1777.1,1206.79 1777.68,1206.79 1778.27,1206.79 1778.86,1206.79 1779.44,1206.79 1780.03,1206.79 1780.61,1206.79 1781.2,1206.79 1781.79,1206.79 1782.37,1206.79 1782.96,1206.79 1783.55,1206.79 1784.13,1206.79 1784.72,1206.79 1785.31,1206.79 1785.89,1206.79 1786.48,1206.79 1787.06,1206.79 1787.65,1206.79 1788.24,1206.79 1788.82,1206.79 1789.41,1206.79 1790,1206.79 1790.58,1206.79 1791.17,1206.79 1791.76,1206.79 1792.34,1206.79 1792.93,1206.79 1793.52,1206.79 1794.1,1206.79 1794.69,1206.79 1795.27,1206.79 1795.86,1206.79 1796.45,1206.79 1797.03,1206.79 1797.62,1206.79 1798.21,1206.79 1798.79,1206.79 1799.38,1206.79 1799.97,1206.79 1800.55,1206.79 1801.14,1206.79 1801.73,1206.79 1802.31,1206.79 1802.9,1206.79 1803.48,1206.79 1804.07,1206.79 1804.66,1206.79 1805.24,1206.79 1805.83,1206.79 1806.42,1206.79 1807,1206.79 1807.59,1206.79 1808.18,1206.79 1808.76,1206.79 1809.35,1206.79 1809.94,1206.79 1810.52,1206.79 1811.11,1206.79 1811.69,1206.79 1812.28,1206.79 1812.87,1206.79 1813.45,1206.79 1814.04,1206.79 1814.63,1206.79 1815.21,1206.79 1815.8,1206.79 1816.39,1206.79 1816.97,1206.79 1817.56,1206.79 1818.14,1206.79 1818.73,1206.79 1819.32,1206.79 1819.9,1206.79 1820.49,1206.79 1821.08,1206.79 1821.66,1206.79 1822.25,1206.79 1822.84,1206.79 1823.42,1206.79 1824.01,1206.79 1824.6,1206.79 1825.18,1206.79 1825.77,1206.79 1826.35,1206.79 1826.94,1206.79 1827.53,1206.79 1828.11,1206.79 1828.7,1206.79 1829.29,1206.79 1829.87,1206.79 1830.46,1206.79 1831.05,1206.79 1831.63,1206.79 1832.22,1206.79 1832.81,1206.79 1833.39,1206.79 1833.98,1206.79 1834.56,1206.79 1835.15,1206.79 1835.74,1206.79 1836.32,1206.79 1836.91,1206.79 1837.5,1206.79 1838.08,1206.79 1838.67,1206.79 1839.26,1206.79 1839.84,1206.79 1840.43,1206.79 1841.01,1206.79 1841.6,1206.79 1842.19,1206.79 1842.77,1206.79 1843.36,1206.79 1843.95,1206.79 1844.53,1206.79 1845.12,1206.79 1845.71,1206.79 1846.29,1206.79 1846.88,1206.79 1847.47,1206.79 1848.05,1206.79 1848.64,1206.79 1849.22,1206.79 1849.81,1206.79 1850.4,1206.79 1850.98,1206.79 1851.57,1206.79 1852.16,1206.79 1852.74,1206.79 1853.33,1206.79 1853.92,1206.79 1854.5,1206.79 1855.09,1206.79 1855.68,1206.79 1856.26,1206.79 1856.85,1206.79 1857.43,1206.79 1858.02,1206.79 1858.61,1206.79 1859.19,1206.79 1859.78,1206.79 1860.37,1206.79 1860.95,1206.79 1861.54,1206.79 1862.13,1206.79 1862.71,1206.79 1863.3,1206.79 1863.88,1206.79 1864.47,1206.79 1865.06,1206.79 1865.64,1206.79 1866.23,1206.79 1866.82,1206.79 1867.4,1206.79 1867.99,1206.79 1868.58,1206.79 1869.16,1206.79 1869.75,1206.79 1870.34,1206.79 1870.92,1206.79 1871.51,1206.79 1872.09,1206.79 1872.68,1206.79 1873.27,1206.79 1873.85,1206.79 1874.44,1206.79 1875.03,1206.79 1875.61,1206.79 1876.2,1206.79 1876.79,1206.79 1877.37,1206.79 1877.96,1206.79 1878.55,1206.79 1879.13,1206.79 1879.72,1206.79 1880.3,1206.79 1880.89,1206.79 1881.48,1206.79 1882.06,1206.79 1882.65,1206.79 1883.24,1206.79 1883.82,1206.79 1884.41,1206.79 1885,1206.79 1885.58,1206.79 1886.17,1206.79 1886.76,1206.79 1887.34,1206.79 1887.93,1206.79 1888.51,1206.79 1889.1,1206.79 1889.69,1206.79 1890.27,1206.79 1890.86,1206.79 1891.45,1206.79 1892.03,1206.79 1892.62,1206.79 1893.21,1206.79 1893.79,1206.79 1894.38,1206.79 1894.96,1206.79 1895.55,1206.79 1896.14,1206.79 1896.72,1206.79 1897.31,1206.79 1897.9,1206.79 1898.48,1206.79 1899.07,1206.79 1899.66,1206.79 1900.24,1206.79 1900.83,1206.79 1901.42,1206.79 1902,1206.79 1902.59,1206.79 1903.17,1206.79 1903.76,1206.79 1904.35,1206.79 1904.93,1206.79 1905.52,1206.79 1906.11,1206.79 1906.69,1206.79 1907.28,1206.79 1907.87,1206.79 1908.45,1206.79 1909.04,1206.79 1909.63,1206.79 1910.21,1206.79 1910.8,1206.79 1911.38,1206.79 1911.97,1206.79 1912.56,1206.79 1913.14,1206.79 1913.73,1206.79 1914.32,1206.79 1914.9,1206.79 1915.49,1206.79 1916.08,1206.79 1916.66,1206.79 1917.25,1206.79 1917.83,1206.79 1918.42,1206.79 1919.01,1206.79 1919.59,1206.79 1920.18,1206.79 1920.77,1206.79 1921.35,1206.79 1921.94,1206.79 1922.53,1206.79 1923.11,1206.79 1923.7,1206.79 1924.29,1206.79 1924.87,1206.79 1925.46,1206.79 1926.04,1206.79 1926.63,1206.79 1927.22,1206.79 1927.8,1206.79 1928.39,1206.79 1928.98,1206.79 1929.56,1206.79 1930.15,1206.79 1930.74,1206.79 1931.32,1206.79 1931.91,1206.79 1932.5,1206.79 1933.08,1206.79 1933.67,1206.79 1934.25,1206.79 1934.84,1206.79 1935.43,1206.79 1936.01,1206.79 1936.6,1206.79 1937.19,1206.79 1937.77,1206.79 1938.36,1206.79 1938.95,1206.79 1939.53,1206.79 1940.12,1206.79 1940.71,1206.79 1941.29,1206.79 1941.88,1206.79 1942.46,1206.79 1943.05,1206.79 1943.64,1206.79 1944.22,1206.79 1944.81,1206.79 1945.4,1206.79 1945.98,1206.79 1946.57,1206.79 1947.16,1206.79 1947.74,1206.79 1948.33,1206.79 1948.91,1206.79 1949.5,1206.79 1950.09,1206.79 1950.67,1206.79 1951.26,1206.79 1951.85,1206.79 1952.43,1206.79 1953.02,1206.79 1953.61,1206.79 1954.19,1206.79 1954.78,1206.79 1955.37,1206.79 1955.95,1206.79 1956.54,1206.79 1957.12,1206.79 1957.71,1206.79 1958.3,1206.79 1958.88,1206.79 1959.47,1206.79 1960.06,1206.79 1960.64,1206.79 1961.23,1206.79 1961.82,1206.79 1962.4,1206.79 1962.99,1206.79 1963.58,1206.79 1964.16,1206.79 1964.75,1206.79 1965.33,1206.79 1965.92,1206.79 1966.51,1206.79 1967.09,1206.79 1967.68,1206.79 1968.27,1206.79 1968.85,1206.79 1969.44,1206.79 1970.03,1206.79 1970.61,1206.79 1971.2,1206.79 1971.78,1206.79 1972.37,1206.79 1972.96,1206.79 1973.54,1206.79 1974.13,1206.79 1974.72,1206.79 1975.3,1206.79 1975.89,1206.79 1976.48,1206.79 1977.06,1206.79 1977.65,1206.79 1978.24,1206.79 1978.82,1206.79 1979.41,1206.79 1979.99,1206.79 1980.58,1206.79 1981.17,1206.79 1981.75,1206.79 1982.34,1206.79 1982.93,1206.79 1983.51,1206.79 1984.1,1206.79 1984.69,1206.79 1985.27,1206.79 1985.86,1206.79 1986.45,1206.79 1987.03,1206.79 1987.62,1206.79 1988.2,1206.79 1988.79,1206.79 1989.38,1206.79 1989.96,1206.79 1990.55,1206.79 1991.14,1206.79 1991.72,1206.79 1992.31,1206.79 1992.9,1206.79 1993.48,1206.79 1994.07,1206.79 1994.65,1206.79 1995.24,1206.79 1995.83,1206.79 1996.41,1206.79 1997,1206.79 1997.59,1206.79 1998.17,1206.79 1998.76,1206.79 1999.35,1206.79 1999.93,1206.79 2000.52,1206.79 2001.11,1206.79 2001.69,1206.79 2002.28,1206.79 2002.86,1206.79 2003.45,1206.79 2004.04,1206.79 2004.62,1206.79 2005.21,1206.79 2005.8,1206.79 2006.38,1206.79 2006.97,1206.79 2007.56,1206.79 2008.14,1206.79 2008.73,1206.79 2009.32,1206.79 2009.9,1206.79 2010.49,1206.79 2011.07,1206.79 2011.66,1206.79 2012.25,1206.79 2012.83,1206.79 2013.42,1206.79 2014.01,1206.79 2014.59,1206.79 2015.18,1206.79 2015.77,1206.79 2016.35,1206.79 2016.94,1206.79 2017.53,1206.79 2018.11,1206.79 2018.7,1206.79 2019.28,1206.79 2019.87,1206.79 2020.46,1206.79 2021.04,1206.79 2021.63,1206.79 2022.22,1206.79 2022.8,1206.79 2023.39,1206.79 2023.98,1206.79 2024.56,1206.79 2025.15,1206.79 2025.73,1206.79 2026.32,1206.79 2026.91,1206.79 2027.49,1206.79 2028.08,1206.79 2028.67,1206.79 2029.25,1206.79 2029.84,1206.79 2030.43,1206.79 2031.01,1206.79 2031.6,1206.79 2032.19,1206.79 2032.77,1206.79 2033.36,1206.79 2033.94,1206.79 2034.53,1206.79 2035.12,1206.79 2035.7,1206.79 2036.29,1206.79 2036.88,1206.79 2037.46,1206.79 2038.05,1206.79 2038.64,1206.79 2039.22,1206.79 2039.81,1206.79 2040.4,1206.79 2040.98,1206.79 2041.57,1206.79 2042.15,1206.79 2042.74,1206.79 2043.33,1206.79 2043.91,1206.79 2044.5,1206.79 2045.09,1206.79 2045.67,1206.79 2046.26,1206.79 2046.85,1206.79 2047.43,1206.79 2048.02,1206.79 2048.6,1206.79 2049.19,1206.79 2049.78,1206.79 2050.36,1206.79 2050.95,1206.79 2051.54,1206.79 2052.12,1206.79 2052.71,1206.79 2053.3,1206.79 2053.88,1206.79 2054.47,1206.79 2055.06,1206.79 2055.64,1206.79 2056.23,1206.79 2056.81,1206.79 2057.4,1206.79 2057.99,1206.79 2058.57,1206.79 2059.16,1206.79 2059.75,1206.79 2060.33,1206.79 2060.92,1206.79 2061.51,1206.79 2062.09,1206.79 2062.68,1206.79 2063.27,1206.79 2063.85,1206.79 2064.44,1206.79 2065.02,1206.79 2065.61,1206.79 2066.2,1206.79 2066.78,1206.79 2067.37,1206.79 2067.96,1206.79 2068.54,1206.79 2069.13,1206.79 2069.72,1206.79 2070.3,1206.79 2070.89,1206.79 2071.48,1206.79 2072.06,1206.79 2072.65,1206.79 2073.23,1206.79 2073.82,1206.79 2074.41,1206.79 2074.99,1206.79 2075.58,1206.79 2076.17,1206.79 2076.75,1206.79 2077.34,1206.79 2077.93,1206.79 2078.51,1206.79 2079.1,1206.79 2079.68,1206.79 2080.27,1206.79 2080.86,1206.79 2081.44,1206.79 2082.03,1206.79 2082.62,1206.79 2083.2,1206.79 2083.79,1206.79 2084.38,1206.79 2084.96,1206.79 2085.55,1206.79 2086.14,1206.79 2086.72,1206.79 2087.31,1206.79 2087.89,1206.79 2088.48,1206.79 2089.07,1206.79 2089.65,1206.79 2090.24,1206.79 2090.83,1206.79 2091.41,1206.79 2092,1206.79 2092.59,1206.79 2093.17,1206.79 2093.76,1206.79 2094.35,1206.79 2094.93,1206.79 2095.52,1206.79 2096.1,1206.79 2096.69,1206.79 2097.28,1206.79 2097.86,1206.79 2098.45,1206.79 2099.04,1206.79 2099.62,1206.79 2100.21,1206.79 2100.8,1206.79 2101.38,1206.79 2101.97,1206.79 2102.55,1206.79 2103.14,1206.79 2103.73,1206.79 2104.31,1206.79 2104.9,1206.79 2105.49,1206.79 2106.07,1206.79 2106.66,1206.79 2107.25,1206.79 2107.83,1206.79 2108.42,1206.79 2109.01,1206.79 2109.59,1206.79 2110.18,1206.79 2110.76,1206.79 2111.35,1206.79 2111.94,1206.79 2112.52,1206.79 2113.11,1206.79 2113.7,1206.79 2114.28,1206.79 2114.87,1206.79 2115.46,1206.79 2116.04,1206.79 2116.63,1206.79 2117.22,1206.79 2117.8,1206.79 2118.39,1206.79 2118.97,1206.79 2119.56,1206.79 2120.15,1206.79 2120.73,1206.79 2121.32,1206.79 2121.91,1206.79 2122.49,1206.79 2123.08,1206.79 2123.67,1206.79 2124.25,1206.79 2124.84,1206.79 2125.42,1206.79 2126.01,1206.79 2126.6,1206.79 2127.18,1206.79 2127.77,1206.79 2128.36,1206.79 2128.94,1206.79 2129.53,1206.79 2130.12,1206.79 2130.7,1206.79 2131.29,1206.79 2131.88,1206.79 2132.46,1206.79 2133.05,1206.79 2133.63,1206.79 2134.22,1206.79 2134.81,1206.79 2135.39,1206.79 2135.98,1206.79 2136.57,1206.79 2137.15,1206.79 2137.74,1206.79 2138.33,1206.79 2138.91,1206.79 2139.5,1206.79 2140.09,1206.79 2140.67,1206.79 2141.26,1206.79 2141.84,1206.79 2142.43,1206.79 2143.02,1206.79 2143.6,1206.79 2144.19,1206.79 2144.78,1206.79 2145.36,1206.79 2145.95,1206.79 2146.54,1206.79 2147.12,1206.79 2147.71,1206.79 2148.3,1206.79 2148.88,1206.79 2149.47,1206.79 2150.05,1206.79 2150.64,1206.79 2151.23,1206.79 2151.81,1206.79 2152.4,1206.79 2152.99,1206.79 2153.57,1206.79 2154.16,1206.79 2154.75,1206.79 2155.33,1206.79 2155.92,1206.79 2156.5,1206.79 2157.09,1206.79 2157.68,1206.79 2158.26,1206.79 \"/>\n<path clip-path=\"url(#clip312)\" d=\"M986.025 1206.62 L986.612 1206.62 L987.198 1206.62 L987.785 1206.62 L988.371 1206.62 L988.957 1206.62 L989.544 1206.62 L990.13 1206.62 L990.717 1206.62 L991.303 1206.62 L991.889 1206.62 L992.476 1206.62 L993.062 1206.62 L993.649 1206.62 L994.235 1206.62 L994.822 1206.62 L995.408 1206.62 L995.994 1206.62 L996.581 1206.62 L997.167 1206.62 L997.754 1206.62 L998.34 1206.62 L998.926 1206.62 L999.513 1206.62 L1000.1 1206.62 L1000.69 1206.62 L1001.27 1206.62 L1001.86 1206.62 L1002.44 1206.62 L1003.03 1206.62 L1003.62 1206.62 L1004.2 1206.62 L1004.79 1206.62 L1005.38 1206.62 L1005.96 1206.62 L1006.55 1206.62 L1007.14 1206.62 L1007.72 1206.62 L1008.31 1206.62 L1008.9 1206.62 L1009.48 1206.62 L1010.07 1206.62 L1010.65 1206.62 L1011.24 1206.62 L1011.83 1206.62 L1012.41 1206.62 L1013 1206.62 L1013.59 1206.62 L1014.17 1206.62 L1014.76 1206.62 L1015.35 1206.62 L1015.93 1206.62 L1016.52 1206.62 L1017.11 1206.62 L1017.69 1206.62 L1018.28 1206.62 L1018.86 1206.62 L1019.45 1206.62 L1020.04 1206.62 L1020.62 1206.62 L1021.21 1206.62 L1021.8 1206.62 L1022.38 1206.62 L1022.97 1206.62 L1023.56 1206.62 L1024.14 1206.62 L1024.73 1206.62 L1025.32 1206.62 L1025.9 1206.62 L1026.49 1206.62 L1027.07 1206.62 L1027.66 1206.62 L1028.25 1206.62 L1028.83 1206.62 L1029.42 1206.62 L1030.01 1206.62 L1030.59 1206.62 L1031.18 1206.62 L1031.77 1206.62 L1032.35 1206.62 L1032.94 1206.62 L1033.52 1206.62 L1034.11 1206.62 L1034.7 1206.62 L1035.28 1206.62 L1035.87 1206.62 L1036.46 1206.62 L1037.04 1206.62 L1037.63 1206.62 L1038.22 1206.62 L1038.8 1206.62 L1039.39 1206.62 L1039.98 1206.62 L1040.56 1206.62 L1041.15 1206.62 L1041.73 1206.62 L1042.32 1206.62 L1042.91 1206.62 L1043.49 1206.62 L1044.08 1206.62 L1044.67 1206.62 L1045.25 1206.62 L1045.84 1206.62 L1046.43 1206.62 L1047.01 1206.62 L1047.6 1206.62 L1048.19 1206.62 L1048.77 1206.62 L1049.36 1206.62 L1049.94 1206.62 L1050.53 1206.62 L1051.12 1206.62 L1051.7 1206.62 L1052.29 1206.62 L1052.88 1206.62 L1053.46 1206.62 L1054.05 1206.62 L1054.64 1206.62 L1055.22 1206.62 L1055.81 1206.62 L1056.39 1206.62 L1056.98 1206.62 L1057.57 1206.62 L1058.15 1206.62 L1058.74 1206.62 L1059.33 1206.62 L1059.91 1206.62 L1060.5 1206.62 L1061.09 1206.62 L1061.67 1206.62 L1062.26 1206.62 L1062.85 1206.62 L1063.43 1206.62 L1064.02 1206.62 L1064.6 1206.62 L1065.19 1206.62 L1065.78 1206.62 L1066.36 1206.62 L1066.95 1206.62 L1067.54 1206.62 L1068.12 1206.62 L1068.71 1206.62 L1069.3 1206.62 L1069.88 1206.62 L1070.47 1206.62 L1071.06 1206.62 L1071.64 1206.62 L1072.23 1206.62 L1072.81 1206.62 L1073.4 1206.62 L1073.99 1206.62 L1074.57 1206.62 L1075.16 1206.62 L1075.75 1206.62 L1076.33 1206.62 L1076.92 1206.62 L1077.51 1206.62 L1078.09 1206.62 L1078.68 1206.62 L1079.26 1206.62 L1079.85 1206.62 L1080.44 1206.62 L1081.02 1206.62 L1081.61 1206.62 L1082.2 1206.62 L1082.78 1206.62 L1083.37 1206.62 L1083.96 1206.62 L1084.54 1206.62 L1085.13 1206.62 L1085.72 1206.62 L1086.3 1206.62 L1086.89 1206.62 L1087.47 1206.62 L1088.06 1206.62 L1088.65 1206.62 L1089.23 1206.62 L1089.82 1206.62 L1090.41 1206.62 L1090.99 1206.62 L1091.58 1206.62 L1092.17 1206.62 L1092.75 1206.62 L1093.34 1206.62 L1093.93 1206.62 L1094.51 1206.62 L1095.1 1206.62 L1095.68 1206.62 L1096.27 1206.62 L1096.86 1206.62 L1097.44 1206.62 L1098.03 1206.62 L1098.62 1206.62 L1099.2 1206.62 L1099.79 1206.62 L1100.38 1206.62 L1100.96 1206.62 L1101.55 1206.62 L1102.14 1206.62 L1102.72 1206.62 L1103.31 1206.62 L1103.89 1206.62 L1104.48 1206.62 L1105.07 1206.62 L1105.65 1206.62 L1106.24 1206.62 L1106.83 1206.62 L1107.41 1206.62 L1108 1206.62 L1108.59 1206.62 L1109.17 1206.62 L1109.76 1206.62 L1110.34 1206.62 L1110.93 1206.62 L1111.52 1206.62 L1112.1 1206.62 L1112.69 1206.62 L1113.28 1206.62 L1113.86 1206.62 L1114.45 1206.62 L1115.04 1206.62 L1115.62 1206.62 L1116.21 1206.62 L1116.8 1206.62 L1117.38 1206.62 L1117.97 1206.62 L1118.55 1206.62 L1119.14 1206.62 L1119.73 1206.62 L1120.31 1206.62 L1120.9 1206.62 L1121.49 1206.62 L1122.07 1206.62 L1122.66 1206.62 L1123.25 1206.62 L1123.83 1206.62 L1124.42 1206.62 L1125.01 1206.62 L1125.59 1206.62 L1126.18 1206.62 L1126.76 1206.62 L1127.35 1206.62 L1127.94 1206.62 L1128.52 1206.62 L1129.11 1206.62 L1129.7 1206.62 L1130.28 1206.62 L1130.87 1206.62 L1131.46 1206.62 L1132.04 1206.62 L1132.63 1206.62 L1133.21 1206.62 L1133.8 1206.62 L1134.39 1206.62 L1134.97 1206.62 L1135.56 1206.62 L1136.15 1206.62 L1136.73 1206.62 L1137.32 1206.62 L1137.91 1206.62 L1138.49 1206.62 L1139.08 1206.62 L1139.67 1206.62 L1140.25 1206.62 L1140.84 1206.62 L1141.42 1206.62 L1142.01 1206.62 L1142.6 1206.62 L1143.18 1206.62 L1143.77 1206.62 L1144.36 1206.62 L1144.94 1206.62 L1145.53 1206.62 L1146.12 1206.62 L1146.7 1206.62 L1147.29 1206.62 L1147.88 1206.62 L1148.46 1206.62 L1149.05 1206.62 L1149.63 1206.62 L1150.22 1206.62 L1150.81 1206.62 L1151.39 1206.62 L1151.98 1206.62 L1152.57 1206.62 L1153.15 1206.62 L1153.74 1206.62 L1154.33 1206.62 L1154.91 1206.62 L1155.5 1206.62 L1156.09 1206.62 L1156.67 1206.62 L1157.26 1206.62 L1157.84 1206.62 L1158.43 1206.62 L1159.02 1206.62 L1159.6 1206.62 L1160.19 1206.62 L1160.78 1206.62 L1161.36 1206.62 L1161.95 1206.62 L1162.54 1206.62 L1163.12 1206.62 L1163.71 1206.62 L1164.29 1206.62 L1164.88 1206.62 L1165.47 1206.62 L1166.05 1206.62 L1166.64 1206.62 L1167.23 1206.62 L1167.81 1206.62 L1168.4 1206.62 L1168.99 1206.62 L1169.57 1206.62 L1170.16 1206.62 L1170.75 1206.62 L1171.33 1206.62 L1171.92 1206.62 L1172.5 1206.62 L1173.09 1206.62 L1173.68 1206.62 L1174.26 1206.62 L1174.85 1206.62 L1175.44 1206.62 L1176.02 1206.62 L1176.61 1206.62 L1177.2 1206.62 L1177.78 1206.62 L1178.37 1206.62 L1178.96 1206.62 L1179.54 1206.62 L1180.13 1206.62 L1180.71 1206.62 L1181.3 1206.62 L1181.89 1206.62 L1182.47 1206.62 L1183.06 1206.62 L1183.65 1206.62 L1184.23 1206.62 L1184.82 1206.62 L1185.41 1206.62 L1185.99 1206.62 L1186.58 1206.62 L1187.16 1206.62 L1187.75 1206.62 L1188.34 1206.62 L1188.92 1206.62 L1189.51 1206.62 L1190.1 1206.62 L1190.68 1206.62 L1191.27 1206.62 L1191.86 1206.62 L1192.44 1206.62 L1193.03 1206.62 L1193.62 1206.62 L1194.2 1206.62 L1194.79 1206.62 L1195.37 1206.62 L1195.96 1206.62 L1196.55 1206.62 L1197.13 1206.62 L1197.72 1206.62 L1198.31 1206.62 L1198.89 1206.62 L1199.48 1206.62 L1200.07 1206.62 L1200.65 1206.62 L1201.24 1206.62 L1201.83 1206.62 L1202.41 1206.62 L1203 1206.62 L1203.58 1206.62 L1204.17 1206.62 L1204.76 1206.62 L1205.34 1206.62 L1205.93 1206.62 L1206.52 1206.62 L1207.1 1206.62 L1207.69 1206.62 L1208.28 1206.62 L1208.86 1206.62 L1209.45 1206.62 L1210.03 1206.62 L1210.62 1206.62 L1211.21 1206.62 L1211.79 1206.62 L1212.38 1206.62 L1212.97 1206.62 L1213.55 1206.62 L1214.14 1206.62 L1214.73 1206.62 L1215.31 1206.62 L1215.9 1206.62 L1216.49 1206.62 L1217.07 1206.62 L1217.66 1206.62 L1218.24 1206.62 L1218.83 1206.62 L1219.42 1206.62 L1220 1206.62 L1220.59 1206.62 L1221.18 1206.62 L1221.76 1206.62 L1222.35 1206.62 L1222.94 1206.62 L1223.52 1206.62 L1224.11 1206.62 L1224.7 1206.62 L1225.28 1206.62 L1225.87 1206.62 L1226.45 1206.62 L1227.04 1206.62 L1227.63 1206.62 L1228.21 1206.62 L1228.8 1206.62 L1229.39 1206.62 L1229.97 1206.62 L1230.56 1206.62 L1231.15 1206.62 L1231.73 1206.62 L1232.32 1206.62 L1232.91 1206.62 L1233.49 1206.62 L1234.08 1206.62 L1234.66 1206.62 L1235.25 1206.62 L1235.84 1206.62 L1236.42 1206.62 L1237.01 1206.62 L1237.6 1206.62 L1238.18 1206.62 L1238.77 1206.62 L1239.36 1206.62 L1239.94 1206.62 L1240.53 1206.62 L1241.11 1206.62 L1241.7 1206.62 L1242.29 1206.62 L1242.87 1206.62 L1243.46 1206.62 L1244.05 1206.62 L1244.63 1206.62 L1245.22 1206.62 L1245.81 1206.62 L1246.39 1206.62 L1246.98 1206.62 L1247.57 1206.62 L1248.15 1206.62 L1248.74 1206.62 L1249.32 1206.62 L1249.91 1206.62 L1250.5 1206.62 L1251.08 1206.62 L1251.67 1206.62 L1252.26 1206.62 L1252.84 1206.62 L1253.43 1206.62 L1254.02 1206.62 L1254.6 1206.62 L1255.19 1206.62 L1255.78 1206.62 L1256.36 1206.62 L1256.95 1206.62 L1257.53 1206.62 L1258.12 1206.62 L1258.71 1206.62 L1259.29 1206.62 L1259.88 1206.62 L1260.47 1206.62 L1261.05 1206.62 L1261.64 1206.62 L1262.23 1206.62 L1262.81 1206.62 L1263.4 1206.62 L1263.98 1206.62 L1264.57 1206.62 L1265.16 1206.62 L1265.74 1206.62 L1266.33 1206.62 L1266.92 1206.62 L1267.5 1206.62 L1268.09 1206.62 L1268.68 1206.62 L1269.26 1206.62 L1269.85 1206.62 L1270.44 1206.62 L1271.02 1206.62 L1271.61 1206.62 L1272.19 1206.62 L1272.78 1206.62 L1273.37 1206.62 L1273.95 1206.62 L1274.54 1206.62 L1275.13 1206.62 L1275.71 1206.62 L1276.3 1206.62 L1276.89 1206.62 L1277.47 1206.62 L1278.06 1206.62 L1278.65 1206.62 L1279.23 1206.62 L1279.82 1206.62 L1280.4 1206.62 L1280.99 1206.62 L1281.58 1206.62 L1282.16 1206.62 L1282.75 1206.62 L1283.34 1206.62 L1283.92 1206.62 L1284.51 1206.62 L1285.1 1206.62 L1285.68 1206.62 L1286.27 1206.62 L1286.86 1206.62 L1287.44 1206.62 L1288.03 1206.62 L1288.61 1206.62 L1289.2 1206.62 L1289.79 1206.62 L1290.37 1206.62 L1290.96 1206.62 L1291.55 1206.62 L1292.13 1206.62 L1292.72 1206.62 L1293.31 1206.62 L1293.89 1206.62 L1294.48 1206.62 L1295.06 1206.62 L1295.65 1206.62 L1296.24 1206.62 L1296.82 1206.62 L1297.41 1206.62 L1298 1206.62 L1298.58 1206.62 L1299.17 1206.62 L1299.76 1206.62 L1300.34 1206.62 L1300.93 1206.62 L1301.52 1206.62 L1302.1 1206.62 L1302.69 1206.62 L1303.27 1206.62 L1303.86 1206.62 L1304.45 1206.62 L1305.03 1206.62 L1305.62 1206.62 L1306.21 1206.62 L1306.79 1206.62 L1307.38 1206.62 L1307.97 1206.62 L1308.55 1206.62 L1309.14 1206.62 L1309.73 1206.62 L1310.31 1206.62 L1310.9 1206.62 L1311.48 1206.62 L1312.07 1206.62 L1312.66 1206.62 L1313.24 1206.62 L1313.83 1206.62 L1314.42 1206.62 L1315 1206.62 L1315.59 1206.62 L1316.18 1206.62 L1316.76 1206.62 L1317.35 1206.62 L1317.93 1206.62 L1318.52 1206.62 L1319.11 1206.62 L1319.69 1206.62 L1320.28 1206.62 L1320.87 1206.62 L1321.45 1206.62 L1322.04 1206.62 L1322.63 1206.62 L1323.21 1206.62 L1323.8 1206.62 L1324.39 1206.62 L1324.97 1206.62 L1325.56 1206.62 L1326.14 1206.62 L1326.73 1206.62 L1327.32 1206.62 L1327.9 1206.62 L1328.49 1206.62 L1329.08 1206.62 L1329.66 1206.62 L1330.25 1206.62 L1330.84 1206.62 L1331.42 1206.62 L1332.01 1206.62 L1332.6 1206.62 L1333.18 1206.62 L1333.77 1206.62 L1334.35 1206.62 L1334.94 1206.62 L1335.53 1206.62 L1336.11 1206.62 L1336.7 1206.62 L1337.29 1206.62 L1337.87 1206.62 L1338.46 1206.62 L1339.05 1206.62 L1339.63 1206.62 L1340.22 1206.62 L1340.8 1206.62 L1341.39 1206.62 L1341.98 1206.62 L1342.56 1206.62 L1343.15 1206.62 L1343.74 1206.62 L1344.32 1206.62 L1344.91 1206.62 L1345.5 1206.62 L1346.08 1206.62 L1346.67 1206.62 L1347.26 1206.62 L1347.84 1206.62 L1348.43 1206.62 L1349.01 1206.62 L1349.6 1206.62 L1350.19 1206.62 L1350.77 1206.62 L1351.36 1206.62 L1351.95 1206.62 L1352.53 1206.62 L1353.12 1206.62 L1353.71 1206.62 L1354.29 1206.62 L1354.88 1206.62 L1355.47 1206.62 L1356.05 1206.62 L1356.64 1206.62 L1357.22 1206.62 L1357.81 1206.62 L1358.4 1206.62 L1358.98 1206.62 L1359.57 1206.62 L1360.16 1206.62 L1360.74 1206.62 L1361.33 1206.62 L1361.92 1206.62 L1362.5 1206.62 L1363.09 1206.62 L1363.68 1206.62 L1364.26 1206.62 L1364.85 1206.62 L1365.43 1206.62 L1366.02 1206.62 L1366.61 1206.62 L1367.19 1206.62 L1367.78 1206.62 L1368.37 1206.62 L1368.95 1206.62 L1369.54 1206.62 L1370.13 1206.62 L1370.71 1206.62 L1371.3 1206.62 L1371.88 1206.62 L1372.47 1206.62 L1373.06 1206.62 L1373.64 1206.62 L1374.23 1206.62 L1374.82 1206.62 L1375.4 1206.62 L1375.99 1206.62 L1376.58 1206.62 L1377.16 1206.62 L1377.75 1206.62 L1378.34 1206.62 L1378.92 1206.62 L1379.51 1206.62 L1380.09 1206.62 L1380.68 1206.62 L1381.27 1206.62 L1381.85 1206.62 L1382.44 1206.62 L1383.03 1206.62 L1383.61 1206.62 L1384.2 1206.62 L1384.79 1206.62 L1385.37 1206.62 L1385.96 1206.62 L1386.55 1206.62 L1387.13 1206.62 L1387.72 1206.62 L1388.3 1206.62 L1388.89 1206.62 L1389.48 1206.62 L1390.06 1206.62 L1390.65 1206.62 L1391.24 1206.62 L1391.82 1206.62 L1392.41 1206.62 L1393 1206.62 L1393.58 1206.62 L1394.17 1206.62 L1394.75 1206.62 L1395.34 1206.62 L1395.93 1206.62 L1396.51 1206.62 L1397.1 1206.62 L1397.69 1206.62 L1398.27 1206.62 L1398.86 1206.62 L1399.45 1206.62 L1400.03 1206.62 L1400.62 1206.62 L1401.21 1206.62 L1401.79 1206.62 L1402.38 1206.62 L1402.96 1206.62 L1403.55 1206.62 L1404.14 1206.62 L1404.72 1206.62 L1405.31 1206.62 L1405.9 1206.62 L1406.48 1206.62 L1407.07 1206.62 L1407.66 1206.62 L1408.24 1206.62 L1408.83 1206.62 L1409.42 1206.62 L1410 1206.62 L1410.59 1206.62 L1411.17 1206.62 L1411.76 1206.62 L1412.35 1206.62 L1412.93 1206.62 L1413.52 1206.62 L1414.11 1206.62 L1414.69 1206.62 L1415.28 1206.62 L1415.87 1206.62 L1416.45 1206.62 L1417.04 1206.62 L1417.63 1206.62 L1418.21 1206.62 L1418.8 1206.62 L1419.38 1206.62 L1419.97 1206.62 L1420.56 1206.62 L1421.14 1206.62 L1421.73 1206.62 L1422.32 1206.62 L1422.9 1206.62 L1423.49 1206.62 L1424.08 1206.62 L1424.66 1206.62 L1425.25 1206.62 L1425.83 1206.62 L1426.42 1206.62 L1427.01 1206.62 L1427.59 1206.62 L1428.18 1206.62 L1428.77 1206.62 L1429.35 1206.62 L1429.94 1206.62 L1430.53 1206.62 L1431.11 1206.62 L1431.7 1206.62 L1432.29 1206.62 L1432.87 1206.62 L1433.46 1206.62 L1434.04 1206.62 L1434.63 1206.62 L1435.22 1206.62 L1435.8 1206.62 L1436.39 1206.62 L1436.98 1206.62 L1437.56 1206.62 L1438.15 1206.62 L1438.74 1206.62 L1439.32 1206.62 L1439.91 1206.62 L1440.5 1206.62 L1441.08 1206.62 L1441.67 1206.62 L1442.25 1206.62 L1442.84 1206.62 L1443.43 1206.62 L1444.01 1206.62 L1444.6 1206.62 L1445.19 1206.62 L1445.77 1206.62 L1446.36 1206.62 L1446.95 1206.62 L1447.53 1206.62 L1448.12 1206.62 L1448.7 1206.62 L1449.29 1206.62 L1449.88 1206.62 L1450.46 1206.62 L1451.05 1206.62 L1451.64 1206.62 L1452.22 1206.62 L1452.81 1206.62 L1453.4 1206.62 L1453.98 1206.62 L1454.57 1206.62 L1455.16 1206.62 L1455.74 1206.62 L1456.33 1206.62 L1456.91 1206.62 L1457.5 1206.62 L1458.09 1206.62 L1458.67 1206.62 L1459.26 1206.62 L1459.85 1206.62 L1460.43 1206.62 L1461.02 1206.62 L1461.61 1206.62 L1462.19 1206.62 L1462.78 1206.62 L1463.37 1206.62 L1463.95 1206.62 L1464.54 1206.62 L1465.12 1206.62 L1465.71 1206.62 L1466.3 1206.62 L1466.88 1206.62 L1467.47 1206.62 L1468.06 1206.62 L1468.64 1206.62 L1469.23 1206.62 L1469.82 1206.62 L1470.4 1206.62 L1470.99 1206.62 L1471.57 1206.62 L1472.16 1206.62 L1472.75 1206.62 L1473.33 1206.62 L1473.92 1206.62 L1474.51 1206.62 L1475.09 1206.62 L1475.68 1206.62 L1476.27 1206.62 L1476.85 1206.62 L1477.44 1206.62 L1478.03 1206.62 L1478.61 1206.62 L1479.2 1206.62 L1479.78 1206.62 L1480.37 1206.62 L1480.96 1206.62 L1481.54 1206.62 L1482.13 1206.62 L1482.72 1206.62 L1483.3 1206.62 L1483.89 1206.62 L1484.48 1206.62 L1485.06 1206.62 L1485.65 1206.62 L1486.24 1206.62 L1486.82 1206.62 L1487.41 1206.62 L1487.99 1206.62 L1488.58 1206.62 L1489.17 1206.62 L1489.75 1206.62 L1490.34 1206.62 L1490.93 1206.62 L1491.51 1206.62 L1492.1 1206.62 L1492.69 1206.62 L1493.27 1206.62 L1493.86 1206.62 L1494.45 1206.62 L1495.03 1206.62 L1495.62 1206.62 L1496.2 1206.62 L1496.79 1206.62 L1497.38 1206.62 L1497.96 1206.62 L1498.55 1206.62 L1499.14 1206.62 L1499.72 1206.62 L1500.31 1206.62 L1500.9 1206.62 L1501.48 1206.62 L1502.07 1206.62 L1502.65 1206.62 L1503.24 1206.62 L1503.83 1206.62 L1504.41 1206.62 L1505 1206.62 L1505.59 1206.62 L1506.17 1206.62 L1506.76 1206.62 L1507.35 1206.62 L1507.93 1206.62 L1508.52 1206.62 L1509.11 1206.62 L1509.69 1206.62 L1510.28 1206.62 L1510.86 1206.62 L1511.45 1206.62 L1512.04 1206.62 L1512.62 1206.62 L1513.21 1206.62 L1513.8 1206.62 L1514.38 1206.62 L1514.97 1206.62 L1515.56 1206.62 L1516.14 1206.62 L1516.73 1206.62 L1517.32 1206.62 L1517.9 1206.62 L1518.49 1206.62 L1519.07 1206.62 L1519.66 1206.62 L1520.25 1206.62 L1520.83 1206.62 L1521.42 1206.62 L1522.01 1206.62 L1522.59 1206.62 L1523.18 1206.62 L1523.77 1206.62 L1524.35 1206.62 L1524.94 1206.62 L1525.52 1206.62 L1526.11 1206.62 L1526.7 1206.62 L1527.28 1206.62 L1527.87 1206.62 L1528.46 1206.62 L1529.04 1206.62 L1529.63 1206.62 L1530.22 1206.62 L1530.8 1206.62 L1531.39 1206.62 L1531.98 1206.62 L1532.56 1206.62 L1533.15 1206.62 L1533.73 1206.62 L1534.32 1206.62 L1534.91 1206.62 L1535.49 1206.62 L1536.08 1206.62 L1536.67 1206.62 L1537.25 1206.62 L1537.84 1206.62 L1538.43 1206.62 L1539.01 1206.62 L1539.6 1206.62 L1540.19 1206.62 L1540.77 1206.62 L1541.36 1206.62 L1541.94 1206.62 L1542.53 1206.62 L1543.12 1206.62 L1543.7 1206.62 L1544.29 1206.62 L1544.88 1206.62 L1545.46 1206.62 L1546.05 1206.62 L1546.64 1206.62 L1547.22 1206.62 L1547.81 1206.62 L1548.4 1206.62 L1548.98 1206.62 L1549.57 1206.62 L1550.15 1206.62 L1550.74 1206.62 L1551.33 1206.62 L1551.91 1206.62 L1552.5 1206.62 L1553.09 1206.62 L1553.67 1206.62 L1554.26 1206.62 L1554.85 1206.62 L1555.43 1206.62 L1556.02 1206.62 L1556.6 1206.62 L1557.19 1206.62 L1557.78 1206.62 L1558.36 1206.62 L1558.95 1206.62 L1559.54 1206.62 L1560.12 1206.62 L1560.71 1206.62 L1561.3 1206.62 L1561.88 1206.62 L1562.47 1206.62 L1563.06 1206.62 L1563.64 1206.62 L1564.23 1206.62 L1564.81 1206.62 L1565.4 1206.62 L1565.99 1206.62 L1566.57 1206.62 L1567.16 1206.62 L1567.75 1206.62 L1568.33 1206.62 L1568.92 1206.62 L1569.51 1206.62 L1570.09 1206.62 L1570.68 1206.62 L1571.27 1206.62 L1571.85 1206.62 L1572.44 1206.62 L1573.02 1206.62 L1573.61 1206.62 L1574.2 1206.62 L1574.78 1206.62 L1575.37 1206.62 L1575.96 1206.62 L1576.54 1206.62 L1577.13 1206.62 L1577.72 1206.62 L1578.3 1206.62 L1578.89 1206.62 L1579.47 1206.62 L1580.06 1206.62 L1580.65 1206.62 L1581.23 1206.62 L1581.82 1206.62 L1582.41 1206.62 L1582.99 1206.62 L1583.58 1206.62 L1584.17 1206.62 L1584.75 1206.62 L1585.34 1206.62 L1585.93 1206.62 L1586.51 1206.62 L1587.1 1206.62 L1587.68 1206.62 L1588.27 1206.62 L1588.86 1206.62 L1589.44 1206.62 L1590.03 1206.62 L1590.62 1206.62 L1591.2 1206.62 L1591.79 1206.62 L1592.38 1206.62 L1592.96 1206.62 L1593.55 1206.62 L1594.14 1206.62 L1594.72 1206.62 L1595.31 1206.62 L1595.89 1206.62 L1596.48 1206.62 L1597.07 1206.62 L1597.65 1206.62 L1598.24 1206.62 L1598.83 1206.62 L1599.41 1206.62 L1600 1206.62 L1600.59 1206.62 L1601.17 1206.62 L1601.76 1206.62 L1602.34 1206.62 L1602.93 1206.62 L1603.52 1206.62 L1604.1 1206.62 L1604.69 1206.62 L1605.28 1206.62 L1605.86 1206.62 L1606.45 1206.62 L1607.04 1206.62 L1607.62 1206.62 L1608.21 1206.62 L1608.8 1206.62 L1609.38 1206.62 L1609.97 1206.62 L1610.55 1206.62 L1611.14 1206.62 L1611.73 1206.62 L1612.31 1206.62 L1612.9 1206.62 L1613.49 1206.62 L1614.07 1206.62 L1614.66 1206.62 L1615.25 1206.62 L1615.83 1206.62 L1616.42 1206.62 L1617.01 1206.62 L1617.59 1206.62 L1618.18 1206.62 L1618.76 1206.62 L1619.35 1206.62 L1619.94 1206.62 L1620.52 1206.62 L1621.11 1206.62 L1621.7 1206.62 L1622.28 1206.62 L1622.87 1206.62 L1623.46 1206.62 L1624.04 1206.62 L1624.63 1206.62 L1625.22 1206.62 L1625.8 1206.62 L1626.39 1206.62 L1626.97 1206.62 L1627.56 1206.62 L1628.15 1206.62 L1628.73 1206.62 L1629.32 1206.62 L1629.91 1206.62 L1630.49 1206.62 L1631.08 1206.62 L1631.67 1206.62 L1632.25 1206.62 L1632.84 1206.62 L1633.42 1206.62 L1634.01 1206.62 L1634.6 1206.62 L1635.18 1206.62 L1635.77 1206.62 L1636.36 1206.62 L1636.94 1206.62 L1637.53 1206.62 L1638.12 1206.62 L1638.7 1206.62 L1639.29 1206.62 L1639.88 1206.62 L1640.46 1206.62 L1641.05 1206.62 L1641.63 1206.62 L1642.22 1206.62 L1642.81 1206.62 L1643.39 1206.62 L1643.98 1206.62 L1644.57 1206.62 L1645.15 1206.62 L1645.74 1206.62 L1646.33 1206.62 L1646.91 1206.62 L1647.5 1206.62 L1648.09 1206.62 L1648.67 1206.62 L1649.26 1206.62 L1649.84 1206.62 L1650.43 1206.62 L1651.02 1206.62 L1651.6 1206.62 L1652.19 1206.62 L1652.78 1206.62 L1653.36 1206.62 L1653.95 1206.62 L1654.54 1206.62 L1655.12 1206.62 L1655.71 1206.62 L1656.29 1206.62 L1656.88 1206.62 L1657.47 1206.62 L1658.05 1206.62 L1658.64 1206.62 L1659.23 1206.62 L1659.81 1206.62 L1660.4 1206.62 L1660.99 1206.62 L1661.57 1206.62 L1662.16 1206.62 L1662.75 1206.62 L1663.33 1206.62 L1663.92 1206.62 L1664.5 1206.62 L1665.09 1206.62 L1665.68 1206.62 L1666.26 1206.62 L1666.85 1206.62 L1667.44 1206.62 L1668.02 1206.62 L1668.61 1206.62 L1669.2 1206.62 L1669.78 1206.62 L1670.37 1206.62 L1670.96 1206.62 L1671.54 1206.62 L1672.13 1206.62 L1672.71 1206.62 L1673.3 1206.62 L1673.89 1206.62 L1674.47 1206.62 L1675.06 1206.62 L1675.65 1206.62 L1676.23 1206.62 L1676.82 1206.62 L1677.41 1206.62 L1677.99 1206.62 L1678.58 1206.62 L1679.17 1206.62 L1679.75 1206.62 L1680.34 1206.62 L1680.92 1206.62 L1681.51 1206.62 L1682.1 1206.62 L1682.68 1206.62 L1683.27 1206.62 L1683.86 1206.62 L1684.44 1206.62 L1685.03 1206.62 L1685.62 1206.62 L1686.2 1206.62 L1686.79 1206.62 L1687.37 1206.62 L1687.96 1206.62 L1688.55 1206.62 L1689.13 1206.62 L1689.72 1206.62 L1690.31 1206.62 L1690.89 1206.62 L1691.48 1206.62 L1692.07 1206.62 L1692.65 1206.62 L1693.24 1206.62 L1693.83 1206.62 L1694.41 1206.62 L1695 1206.62 L1695.58 1206.62 L1696.17 1206.62 L1696.76 1206.62 L1697.34 1206.62 L1697.93 1206.62 L1698.52 1206.62 L1699.1 1206.62 L1699.69 1206.62 L1700.28 1206.62 L1700.86 1206.62 L1701.45 1206.62 L1702.04 1206.62 L1702.62 1206.62 L1703.21 1206.62 L1703.79 1206.62 L1704.38 1206.62 L1704.97 1206.62 L1705.55 1206.62 L1706.14 1206.62 L1706.73 1206.62 L1707.31 1206.62 L1707.9 1206.62 L1708.49 1206.62 L1709.07 1206.62 L1709.66 1206.62 L1710.24 1206.62 L1710.83 1206.62 L1711.42 1206.62 L1712 1206.62 L1712.59 1206.62 L1713.18 1206.62 L1713.76 1206.62 L1714.35 1206.62 L1714.94 1206.62 L1715.52 1206.62 L1716.11 1206.62 L1716.7 1206.62 L1717.28 1206.62 L1717.87 1206.62 L1718.45 1206.62 L1719.04 1206.62 L1719.63 1206.62 L1720.21 1206.62 L1720.8 1206.62 L1721.39 1206.62 L1721.97 1206.62 L1722.56 1206.62 L1723.15 1206.62 L1723.73 1206.62 L1724.32 1206.62 L1724.91 1206.62 L1725.49 1206.62 L1726.08 1206.62 L1726.66 1206.62 L1727.25 1206.62 L1727.84 1206.62 L1728.42 1206.62 L1729.01 1206.62 L1729.6 1206.62 L1730.18 1206.62 L1730.77 1206.62 L1731.36 1206.62 L1731.94 1206.62 L1732.53 1206.62 L1733.11 1206.62 L1733.7 1206.62 L1734.29 1206.62 L1734.87 1206.62 L1735.46 1206.62 L1736.05 1206.62 L1736.63 1206.62 L1737.22 1206.62 L1737.81 1206.62 L1738.39 1206.62 L1738.98 1206.62 L1739.57 1206.62 L1740.15 1206.62 L1740.74 1206.62 L1741.32 1206.62 L1741.91 1206.62 L1742.5 1206.62 L1743.08 1206.62 L1743.67 1206.62 L1744.26 1206.62 L1744.84 1206.62 L1745.43 1206.62 L1746.02 1206.62 L1746.6 1206.62 L1747.19 1206.62 L1747.78 1206.62 L1748.36 1206.62 L1748.95 1206.62 L1749.53 1206.62 L1750.12 1206.62 L1750.71 1206.62 L1751.29 1206.62 L1751.88 1206.62 L1752.47 1206.62 L1753.05 1206.62 L1753.64 1206.62 L1754.23 1206.62 L1754.81 1206.62 L1755.4 1206.62 L1755.99 1206.62 L1756.57 1206.62 L1757.16 1206.62 L1757.74 1206.62 L1758.33 1206.62 L1758.92 1206.62 L1759.5 1206.62 L1760.09 1206.62 L1760.68 1206.62 L1761.26 1206.62 L1761.85 1206.62 L1762.44 1206.62 L1763.02 1206.62 L1763.61 1206.62 L1764.19 1206.62 L1764.78 1206.62 L1765.37 1206.62 L1765.95 1206.62 L1766.54 1206.62 L1767.13 1206.62 L1767.71 1206.62 L1768.3 1206.62 L1768.89 1206.62 L1769.47 1206.62 L1770.06 1206.62 L1770.65 1206.62 L1771.23 1206.62 L1771.82 1206.62 L1772.4 1206.62 L1772.99 1206.62 L1773.58 1206.62 L1774.16 1206.62 L1774.75 1206.62 L1775.34 1206.62 L1775.92 1206.62 L1776.51 1206.62 L1777.1 1206.62 L1777.68 1206.62 L1778.27 1206.62 L1778.86 1206.62 L1779.44 1206.62 L1780.03 1206.62 L1780.61 1206.62 L1781.2 1206.62 L1781.79 1206.62 L1782.37 1206.62 L1782.96 1206.62 L1783.55 1206.62 L1784.13 1206.62 L1784.72 1206.62 L1785.31 1206.62 L1785.89 1206.62 L1786.48 1206.62 L1787.06 1206.62 L1787.65 1206.62 L1788.24 1206.62 L1788.82 1206.62 L1789.41 1206.62 L1790 1206.62 L1790.58 1206.62 L1791.17 1206.62 L1791.76 1206.62 L1792.34 1206.62 L1792.93 1206.62 L1793.52 1206.62 L1794.1 1206.62 L1794.69 1206.62 L1795.27 1206.62 L1795.86 1206.62 L1796.45 1206.62 L1797.03 1206.62 L1797.62 1206.62 L1798.21 1206.62 L1798.79 1206.62 L1799.38 1206.62 L1799.97 1206.62 L1800.55 1206.62 L1801.14 1206.62 L1801.73 1206.62 L1802.31 1206.62 L1802.9 1206.62 L1803.48 1206.62 L1804.07 1206.62 L1804.66 1206.62 L1805.24 1206.62 L1805.83 1206.62 L1806.42 1206.62 L1807 1206.62 L1807.59 1206.62 L1808.18 1206.62 L1808.76 1206.62 L1809.35 1206.62 L1809.94 1206.62 L1810.52 1206.62 L1811.11 1206.62 L1811.69 1206.62 L1812.28 1206.62 L1812.87 1206.62 L1813.45 1206.62 L1814.04 1206.62 L1814.63 1206.62 L1815.21 1206.62 L1815.8 1206.62 L1816.39 1206.62 L1816.97 1206.62 L1817.56 1206.62 L1818.14 1206.62 L1818.73 1206.62 L1819.32 1206.62 L1819.9 1206.62 L1820.49 1206.62 L1821.08 1206.62 L1821.66 1206.62 L1822.25 1206.62 L1822.84 1206.62 L1823.42 1206.62 L1824.01 1206.62 L1824.6 1206.62 L1825.18 1206.62 L1825.77 1206.62 L1826.35 1206.62 L1826.94 1206.62 L1827.53 1206.62 L1828.11 1206.62 L1828.7 1206.62 L1829.29 1206.62 L1829.87 1206.62 L1830.46 1206.62 L1831.05 1206.62 L1831.63 1206.62 L1832.22 1206.62 L1832.81 1206.62 L1833.39 1206.62 L1833.98 1206.62 L1834.56 1206.62 L1835.15 1206.62 L1835.74 1206.62 L1836.32 1206.62 L1836.91 1206.62 L1837.5 1206.62 L1838.08 1206.62 L1838.67 1206.62 L1839.26 1206.62 L1839.84 1206.62 L1840.43 1206.62 L1841.01 1206.62 L1841.6 1206.62 L1842.19 1206.62 L1842.77 1206.62 L1843.36 1206.62 L1843.95 1206.62 L1844.53 1206.62 L1845.12 1206.62 L1845.71 1206.62 L1846.29 1206.62 L1846.88 1206.62 L1847.47 1206.62 L1848.05 1206.62 L1848.64 1206.62 L1849.22 1206.62 L1849.81 1206.62 L1850.4 1206.62 L1850.98 1206.62 L1851.57 1206.62 L1852.16 1206.62 L1852.74 1206.62 L1853.33 1206.62 L1853.92 1206.62 L1854.5 1206.62 L1855.09 1206.62 L1855.68 1206.62 L1856.26 1206.62 L1856.85 1206.62 L1857.43 1206.62 L1858.02 1206.62 L1858.61 1206.62 L1859.19 1206.62 L1859.78 1206.62 L1860.37 1206.62 L1860.95 1206.62 L1861.54 1206.62 L1862.13 1206.62 L1862.71 1206.62 L1863.3 1206.62 L1863.88 1206.62 L1864.47 1206.62 L1865.06 1206.62 L1865.64 1206.62 L1866.23 1206.62 L1866.82 1206.62 L1867.4 1206.62 L1867.99 1206.62 L1868.58 1206.62 L1869.16 1206.62 L1869.75 1206.62 L1870.34 1206.62 L1870.92 1206.62 L1871.51 1206.62 L1872.09 1206.62 L1872.68 1206.62 L1873.27 1206.62 L1873.85 1206.62 L1874.44 1206.62 L1875.03 1206.62 L1875.61 1206.62 L1876.2 1206.62 L1876.79 1206.62 L1877.37 1206.62 L1877.96 1206.62 L1878.55 1206.62 L1879.13 1206.62 L1879.72 1206.62 L1880.3 1206.62 L1880.89 1206.62 L1881.48 1206.62 L1882.06 1206.62 L1882.65 1206.62 L1883.24 1206.62 L1883.82 1206.62 L1884.41 1206.62 L1885 1206.62 L1885.58 1206.62 L1886.17 1206.62 L1886.76 1206.62 L1887.34 1206.62 L1887.93 1206.62 L1888.51 1206.62 L1889.1 1206.62 L1889.69 1206.62 L1890.27 1206.62 L1890.86 1206.62 L1891.45 1206.62 L1892.03 1206.62 L1892.62 1206.62 L1893.21 1206.62 L1893.79 1206.62 L1894.38 1206.62 L1894.96 1206.62 L1895.55 1206.62 L1896.14 1206.62 L1896.72 1206.62 L1897.31 1206.62 L1897.9 1206.62 L1898.48 1206.62 L1899.07 1206.62 L1899.66 1206.62 L1900.24 1206.62 L1900.83 1206.62 L1901.42 1206.62 L1902 1206.62 L1902.59 1206.62 L1903.17 1206.62 L1903.76 1206.62 L1904.35 1206.62 L1904.93 1206.62 L1905.52 1206.62 L1906.11 1206.62 L1906.69 1206.62 L1907.28 1206.62 L1907.87 1206.62 L1908.45 1206.62 L1909.04 1206.62 L1909.63 1206.62 L1910.21 1206.62 L1910.8 1206.62 L1911.38 1206.62 L1911.97 1206.62 L1912.56 1206.62 L1913.14 1206.62 L1913.73 1206.62 L1914.32 1206.62 L1914.9 1206.62 L1915.49 1206.62 L1916.08 1206.62 L1916.66 1206.62 L1917.25 1206.62 L1917.83 1206.62 L1918.42 1206.62 L1919.01 1206.62 L1919.59 1206.62 L1920.18 1206.62 L1920.77 1206.62 L1921.35 1206.62 L1921.94 1206.62 L1922.53 1206.62 L1923.11 1206.62 L1923.7 1206.62 L1924.29 1206.62 L1924.87 1206.62 L1925.46 1206.62 L1926.04 1206.62 L1926.63 1206.62 L1927.22 1206.62 L1927.8 1206.62 L1928.39 1206.62 L1928.98 1206.62 L1929.56 1206.62 L1930.15 1206.62 L1930.74 1206.62 L1931.32 1206.62 L1931.91 1206.62 L1932.5 1206.62 L1933.08 1206.62 L1933.67 1206.62 L1934.25 1206.62 L1934.84 1206.62 L1935.43 1206.62 L1936.01 1206.62 L1936.6 1206.62 L1937.19 1206.62 L1937.77 1206.62 L1938.36 1206.62 L1938.95 1206.62 L1939.53 1206.62 L1940.12 1206.62 L1940.71 1206.62 L1941.29 1206.62 L1941.88 1206.62 L1942.46 1206.62 L1943.05 1206.62 L1943.64 1206.62 L1944.22 1206.62 L1944.81 1206.62 L1945.4 1206.62 L1945.98 1206.62 L1946.57 1206.62 L1947.16 1206.62 L1947.74 1206.62 L1948.33 1206.62 L1948.91 1206.62 L1949.5 1206.62 L1950.09 1206.62 L1950.67 1206.62 L1951.26 1206.62 L1951.85 1206.62 L1952.43 1206.62 L1953.02 1206.62 L1953.61 1206.62 L1954.19 1206.62 L1954.78 1206.62 L1955.37 1206.62 L1955.95 1206.62 L1956.54 1206.62 L1957.12 1206.62 L1957.71 1206.62 L1958.3 1206.62 L1958.88 1206.62 L1959.47 1206.62 L1960.06 1206.62 L1960.64 1206.62 L1961.23 1206.62 L1961.82 1206.62 L1962.4 1206.62 L1962.99 1206.62 L1963.58 1206.62 L1964.16 1206.62 L1964.75 1206.62 L1965.33 1206.62 L1965.92 1206.62 L1966.51 1206.62 L1967.09 1206.62 L1967.68 1206.62 L1968.27 1206.62 L1968.85 1206.62 L1969.44 1206.62 L1970.03 1206.62 L1970.61 1206.62 L1971.2 1206.62 L1971.78 1206.62 L1972.37 1206.62 L1972.96 1206.62 L1973.54 1206.62 L1974.13 1206.62 L1974.72 1206.62 L1975.3 1206.62 L1975.89 1206.62 L1976.48 1206.62 L1977.06 1206.62 L1977.65 1206.62 L1978.24 1206.62 L1978.82 1206.62 L1979.41 1206.62 L1979.99 1206.62 L1980.58 1206.62 L1981.17 1206.62 L1981.75 1206.62 L1982.34 1206.62 L1982.93 1206.62 L1983.51 1206.62 L1984.1 1206.62 L1984.69 1206.62 L1985.27 1206.62 L1985.86 1206.62 L1986.45 1206.62 L1987.03 1206.62 L1987.62 1206.62 L1988.2 1206.62 L1988.79 1206.62 L1989.38 1206.62 L1989.96 1206.62 L1990.55 1206.62 L1991.14 1206.62 L1991.72 1206.62 L1992.31 1206.62 L1992.9 1206.62 L1993.48 1206.62 L1994.07 1206.62 L1994.65 1206.62 L1995.24 1206.62 L1995.83 1206.62 L1996.41 1206.62 L1997 1206.62 L1997.59 1206.62 L1998.17 1206.62 L1998.76 1206.62 L1999.35 1206.62 L1999.93 1206.62 L2000.52 1206.62 L2001.11 1206.62 L2001.69 1206.62 L2002.28 1206.62 L2002.86 1206.62 L2003.45 1206.62 L2004.04 1206.62 L2004.62 1206.62 L2005.21 1206.62 L2005.8 1206.62 L2006.38 1206.62 L2006.97 1206.62 L2007.56 1206.62 L2008.14 1206.62 L2008.73 1206.62 L2009.32 1206.62 L2009.9 1206.62 L2010.49 1206.62 L2011.07 1206.62 L2011.66 1206.62 L2012.25 1206.62 L2012.83 1206.62 L2013.42 1206.62 L2014.01 1206.62 L2014.59 1206.62 L2015.18 1206.62 L2015.77 1206.62 L2016.35 1206.62 L2016.94 1206.62 L2017.53 1206.62 L2018.11 1206.62 L2018.7 1206.62 L2019.28 1206.62 L2019.87 1206.62 L2020.46 1206.62 L2021.04 1206.62 L2021.63 1206.62 L2022.22 1206.62 L2022.8 1206.62 L2023.39 1206.62 L2023.98 1206.62 L2024.56 1206.62 L2025.15 1206.62 L2025.73 1206.62 L2026.32 1206.62 L2026.91 1206.62 L2027.49 1206.62 L2028.08 1206.62 L2028.67 1206.62 L2029.25 1206.62 L2029.84 1206.62 L2030.43 1206.62 L2031.01 1206.62 L2031.6 1206.62 L2032.19 1206.62 L2032.77 1206.62 L2033.36 1206.62 L2033.94 1206.62 L2034.53 1206.62 L2035.12 1206.62 L2035.7 1206.62 L2036.29 1206.62 L2036.88 1206.62 L2037.46 1206.62 L2038.05 1206.62 L2038.64 1206.62 L2039.22 1206.62 L2039.81 1206.62 L2040.4 1206.62 L2040.98 1206.62 L2041.57 1206.62 L2042.15 1206.62 L2042.74 1206.62 L2043.33 1206.62 L2043.91 1206.62 L2044.5 1206.62 L2045.09 1206.62 L2045.67 1206.62 L2046.26 1206.62 L2046.85 1206.62 L2047.43 1206.62 L2048.02 1206.62 L2048.6 1206.62 L2049.19 1206.62 L2049.78 1206.62 L2050.36 1206.62 L2050.95 1206.62 L2051.54 1206.62 L2052.12 1206.62 L2052.71 1206.62 L2053.3 1206.62 L2053.88 1206.62 L2054.47 1206.62 L2055.06 1206.62 L2055.64 1206.62 L2056.23 1206.62 L2056.81 1206.62 L2057.4 1206.62 L2057.99 1206.62 L2058.57 1206.62 L2059.16 1206.62 L2059.75 1206.62 L2060.33 1206.62 L2060.92 1206.62 L2061.51 1206.62 L2062.09 1206.62 L2062.68 1206.62 L2063.27 1206.62 L2063.85 1206.62 L2064.44 1206.62 L2065.02 1206.62 L2065.61 1206.62 L2066.2 1206.62 L2066.78 1206.62 L2067.37 1206.62 L2067.96 1206.62 L2068.54 1206.62 L2069.13 1206.62 L2069.72 1206.62 L2070.3 1206.62 L2070.89 1206.62 L2071.48 1206.62 L2072.06 1206.62 L2072.65 1206.62 L2073.23 1206.62 L2073.82 1206.62 L2074.41 1206.62 L2074.99 1206.62 L2075.58 1206.62 L2076.17 1206.62 L2076.75 1206.62 L2077.34 1206.62 L2077.93 1206.62 L2078.51 1206.62 L2079.1 1206.62 L2079.68 1206.62 L2080.27 1206.62 L2080.86 1206.62 L2081.44 1206.62 L2082.03 1206.62 L2082.62 1206.62 L2083.2 1206.62 L2083.79 1206.62 L2084.38 1206.62 L2084.96 1206.62 L2085.55 1206.62 L2086.14 1206.62 L2086.72 1206.62 L2087.31 1206.62 L2087.89 1206.62 L2088.48 1206.62 L2089.07 1206.62 L2089.65 1206.62 L2090.24 1206.62 L2090.83 1206.62 L2091.41 1206.62 L2092 1206.62 L2092.59 1206.62 L2093.17 1206.62 L2093.76 1206.62 L2094.35 1206.62 L2094.93 1206.62 L2095.52 1206.62 L2096.1 1206.62 L2096.69 1206.62 L2097.28 1206.62 L2097.86 1206.62 L2098.45 1206.62 L2099.04 1206.62 L2099.62 1206.62 L2100.21 1206.62 L2100.8 1206.62 L2101.38 1206.62 L2101.97 1206.62 L2102.55 1206.62 L2103.14 1206.62 L2103.73 1206.62 L2104.31 1206.62 L2104.9 1206.62 L2105.49 1206.62 L2106.07 1206.62 L2106.66 1206.62 L2107.25 1206.62 L2107.83 1206.62 L2108.42 1206.62 L2109.01 1206.62 L2109.59 1206.62 L2110.18 1206.62 L2110.76 1206.62 L2111.35 1206.62 L2111.94 1206.62 L2112.52 1206.62 L2113.11 1206.62 L2113.7 1206.62 L2114.28 1206.62 L2114.87 1206.62 L2115.46 1206.62 L2116.04 1206.62 L2116.63 1206.62 L2117.22 1206.62 L2117.8 1206.62 L2118.39 1206.62 L2118.97 1206.62 L2119.56 1206.62 L2120.15 1206.62 L2120.73 1206.62 L2121.32 1206.62 L2121.91 1206.62 L2122.49 1206.62 L2123.08 1206.62 L2123.67 1206.62 L2124.25 1206.62 L2124.84 1206.62 L2125.42 1206.62 L2126.01 1206.62 L2126.6 1206.62 L2127.18 1206.62 L2127.77 1206.62 L2128.36 1206.62 L2128.94 1206.62 L2129.53 1206.62 L2130.12 1206.62 L2130.7 1206.62 L2131.29 1206.62 L2131.88 1206.62 L2132.46 1206.62 L2133.05 1206.62 L2133.63 1206.62 L2134.22 1206.62 L2134.81 1206.62 L2135.39 1206.62 L2135.98 1206.62 L2136.57 1206.62 L2137.15 1206.62 L2137.74 1206.62 L2138.33 1206.62 L2138.91 1206.62 L2139.5 1206.62 L2140.09 1206.62 L2140.67 1206.62 L2141.26 1206.62 L2141.84 1206.62 L2142.43 1206.62 L2143.02 1206.62 L2143.6 1206.62 L2144.19 1206.62 L2144.78 1206.62 L2145.36 1206.62 L2145.95 1206.62 L2146.54 1206.62 L2147.12 1206.62 L2147.71 1206.62 L2148.3 1206.62 L2148.88 1206.62 L2149.47 1206.62 L2150.05 1206.62 L2150.64 1206.62 L2151.23 1206.62 L2151.81 1206.62 L2152.4 1206.62 L2152.99 1206.62 L2153.57 1206.62 L2154.16 1206.62 L2154.75 1206.62 L2155.33 1206.62 L2155.92 1206.62 L2156.5 1206.62 L2157.09 1206.62 L2157.68 1206.62 L2158.26 1206.62 L2158.26 1206.47 L2157.68 1206.47 L2157.09 1206.47 L2156.5 1206.47 L2155.92 1206.47 L2155.33 1206.47 L2154.75 1206.47 L2154.16 1206.47 L2153.57 1206.47 L2152.99 1206.47 L2152.4 1206.47 L2151.81 1206.47 L2151.23 1206.47 L2150.64 1206.47 L2150.05 1206.47 L2149.47 1206.47 L2148.88 1206.47 L2148.3 1206.47 L2147.71 1206.47 L2147.12 1206.47 L2146.54 1206.47 L2145.95 1206.47 L2145.36 1206.47 L2144.78 1206.47 L2144.19 1206.47 L2143.6 1206.47 L2143.02 1206.47 L2142.43 1206.47 L2141.84 1206.47 L2141.26 1206.47 L2140.67 1206.47 L2140.09 1206.47 L2139.5 1206.47 L2138.91 1206.47 L2138.33 1206.47 L2137.74 1206.47 L2137.15 1206.47 L2136.57 1206.47 L2135.98 1206.47 L2135.39 1206.47 L2134.81 1206.47 L2134.22 1206.47 L2133.63 1206.47 L2133.05 1206.47 L2132.46 1206.47 L2131.88 1206.47 L2131.29 1206.47 L2130.7 1206.47 L2130.12 1206.47 L2129.53 1206.47 L2128.94 1206.47 L2128.36 1206.47 L2127.77 1206.47 L2127.18 1206.47 L2126.6 1206.47 L2126.01 1206.47 L2125.42 1206.47 L2124.84 1206.47 L2124.25 1206.47 L2123.67 1206.47 L2123.08 1206.47 L2122.49 1206.47 L2121.91 1206.47 L2121.32 1206.47 L2120.73 1206.47 L2120.15 1206.47 L2119.56 1206.47 L2118.97 1206.47 L2118.39 1206.47 L2117.8 1206.47 L2117.22 1206.47 L2116.63 1206.47 L2116.04 1206.47 L2115.46 1206.47 L2114.87 1206.47 L2114.28 1206.47 L2113.7 1206.47 L2113.11 1206.47 L2112.52 1206.47 L2111.94 1206.47 L2111.35 1206.47 L2110.76 1206.47 L2110.18 1206.47 L2109.59 1206.47 L2109.01 1206.47 L2108.42 1206.47 L2107.83 1206.47 L2107.25 1206.47 L2106.66 1206.47 L2106.07 1206.47 L2105.49 1206.47 L2104.9 1206.47 L2104.31 1206.47 L2103.73 1206.47 L2103.14 1206.47 L2102.55 1206.47 L2101.97 1206.47 L2101.38 1206.47 L2100.8 1206.47 L2100.21 1206.47 L2099.62 1206.47 L2099.04 1206.47 L2098.45 1206.47 L2097.86 1206.47 L2097.28 1206.47 L2096.69 1206.47 L2096.1 1206.47 L2095.52 1206.47 L2094.93 1206.47 L2094.35 1206.47 L2093.76 1206.47 L2093.17 1206.47 L2092.59 1206.47 L2092 1206.47 L2091.41 1206.47 L2090.83 1206.47 L2090.24 1206.47 L2089.65 1206.47 L2089.07 1206.47 L2088.48 1206.47 L2087.89 1206.47 L2087.31 1206.47 L2086.72 1206.47 L2086.14 1206.47 L2085.55 1206.47 L2084.96 1206.47 L2084.38 1206.47 L2083.79 1206.47 L2083.2 1206.47 L2082.62 1206.47 L2082.03 1206.47 L2081.44 1206.47 L2080.86 1206.47 L2080.27 1206.47 L2079.68 1206.47 L2079.1 1206.47 L2078.51 1206.47 L2077.93 1206.47 L2077.34 1206.47 L2076.75 1206.47 L2076.17 1206.47 L2075.58 1206.47 L2074.99 1206.47 L2074.41 1206.47 L2073.82 1206.47 L2073.23 1206.47 L2072.65 1206.47 L2072.06 1206.47 L2071.48 1206.47 L2070.89 1206.47 L2070.3 1206.47 L2069.72 1206.47 L2069.13 1206.47 L2068.54 1206.47 L2067.96 1206.47 L2067.37 1206.47 L2066.78 1206.47 L2066.2 1206.47 L2065.61 1206.47 L2065.02 1206.47 L2064.44 1206.47 L2063.85 1206.47 L2063.27 1206.47 L2062.68 1206.47 L2062.09 1206.47 L2061.51 1206.47 L2060.92 1206.47 L2060.33 1206.47 L2059.75 1206.47 L2059.16 1206.47 L2058.57 1206.47 L2057.99 1206.47 L2057.4 1206.47 L2056.81 1206.47 L2056.23 1206.47 L2055.64 1206.47 L2055.06 1206.47 L2054.47 1206.47 L2053.88 1206.47 L2053.3 1206.47 L2052.71 1206.47 L2052.12 1206.47 L2051.54 1206.47 L2050.95 1206.47 L2050.36 1206.47 L2049.78 1206.47 L2049.19 1206.47 L2048.6 1206.47 L2048.02 1206.47 L2047.43 1206.47 L2046.85 1206.47 L2046.26 1206.47 L2045.67 1206.47 L2045.09 1206.47 L2044.5 1206.47 L2043.91 1206.47 L2043.33 1206.47 L2042.74 1206.47 L2042.15 1206.47 L2041.57 1206.47 L2040.98 1206.47 L2040.4 1206.47 L2039.81 1206.47 L2039.22 1206.47 L2038.64 1206.47 L2038.05 1206.47 L2037.46 1206.47 L2036.88 1206.47 L2036.29 1206.47 L2035.7 1206.47 L2035.12 1206.47 L2034.53 1206.47 L2033.94 1206.47 L2033.36 1206.47 L2032.77 1206.47 L2032.19 1206.47 L2031.6 1206.47 L2031.01 1206.47 L2030.43 1206.47 L2029.84 1206.47 L2029.25 1206.47 L2028.67 1206.47 L2028.08 1206.47 L2027.49 1206.47 L2026.91 1206.47 L2026.32 1206.47 L2025.73 1206.47 L2025.15 1206.47 L2024.56 1206.47 L2023.98 1206.47 L2023.39 1206.47 L2022.8 1206.47 L2022.22 1206.47 L2021.63 1206.47 L2021.04 1206.47 L2020.46 1206.47 L2019.87 1206.47 L2019.28 1206.47 L2018.7 1206.47 L2018.11 1206.47 L2017.53 1206.47 L2016.94 1206.47 L2016.35 1206.47 L2015.77 1206.47 L2015.18 1206.47 L2014.59 1206.47 L2014.01 1206.47 L2013.42 1206.47 L2012.83 1206.47 L2012.25 1206.47 L2011.66 1206.47 L2011.07 1206.47 L2010.49 1206.47 L2009.9 1206.47 L2009.32 1206.47 L2008.73 1206.47 L2008.14 1206.47 L2007.56 1206.47 L2006.97 1206.47 L2006.38 1206.47 L2005.8 1206.47 L2005.21 1206.47 L2004.62 1206.47 L2004.04 1206.47 L2003.45 1206.47 L2002.86 1206.47 L2002.28 1206.47 L2001.69 1206.47 L2001.11 1206.47 L2000.52 1206.47 L1999.93 1206.47 L1999.35 1206.47 L1998.76 1206.47 L1998.17 1206.47 L1997.59 1206.47 L1997 1206.47 L1996.41 1206.47 L1995.83 1206.47 L1995.24 1206.47 L1994.65 1206.47 L1994.07 1206.47 L1993.48 1206.47 L1992.9 1206.47 L1992.31 1206.47 L1991.72 1206.47 L1991.14 1206.47 L1990.55 1206.47 L1989.96 1206.47 L1989.38 1206.47 L1988.79 1206.47 L1988.2 1206.47 L1987.62 1206.47 L1987.03 1206.47 L1986.45 1206.47 L1985.86 1206.47 L1985.27 1206.47 L1984.69 1206.47 L1984.1 1206.47 L1983.51 1206.47 L1982.93 1206.47 L1982.34 1206.47 L1981.75 1206.47 L1981.17 1206.47 L1980.58 1206.47 L1979.99 1206.47 L1979.41 1206.47 L1978.82 1206.47 L1978.24 1206.47 L1977.65 1206.47 L1977.06 1206.47 L1976.48 1206.47 L1975.89 1206.47 L1975.3 1206.47 L1974.72 1206.47 L1974.13 1206.47 L1973.54 1206.47 L1972.96 1206.47 L1972.37 1206.47 L1971.78 1206.47 L1971.2 1206.47 L1970.61 1206.47 L1970.03 1206.47 L1969.44 1206.47 L1968.85 1206.47 L1968.27 1206.47 L1967.68 1206.47 L1967.09 1206.47 L1966.51 1206.47 L1965.92 1206.47 L1965.33 1206.47 L1964.75 1206.47 L1964.16 1206.47 L1963.58 1206.47 L1962.99 1206.47 L1962.4 1206.47 L1961.82 1206.47 L1961.23 1206.47 L1960.64 1206.47 L1960.06 1206.47 L1959.47 1206.47 L1958.88 1206.47 L1958.3 1206.47 L1957.71 1206.47 L1957.12 1206.47 L1956.54 1206.47 L1955.95 1206.47 L1955.37 1206.47 L1954.78 1206.47 L1954.19 1206.47 L1953.61 1206.47 L1953.02 1206.47 L1952.43 1206.47 L1951.85 1206.47 L1951.26 1206.47 L1950.67 1206.47 L1950.09 1206.47 L1949.5 1206.47 L1948.91 1206.47 L1948.33 1206.47 L1947.74 1206.47 L1947.16 1206.47 L1946.57 1206.47 L1945.98 1206.47 L1945.4 1206.47 L1944.81 1206.47 L1944.22 1206.47 L1943.64 1206.47 L1943.05 1206.47 L1942.46 1206.47 L1941.88 1206.47 L1941.29 1206.47 L1940.71 1206.47 L1940.12 1206.47 L1939.53 1206.47 L1938.95 1206.47 L1938.36 1206.47 L1937.77 1206.47 L1937.19 1206.47 L1936.6 1206.47 L1936.01 1206.47 L1935.43 1206.47 L1934.84 1206.47 L1934.25 1206.47 L1933.67 1206.47 L1933.08 1206.47 L1932.5 1206.47 L1931.91 1206.47 L1931.32 1206.47 L1930.74 1206.47 L1930.15 1206.47 L1929.56 1206.47 L1928.98 1206.47 L1928.39 1206.47 L1927.8 1206.47 L1927.22 1206.47 L1926.63 1206.47 L1926.04 1206.47 L1925.46 1206.47 L1924.87 1206.47 L1924.29 1206.47 L1923.7 1206.47 L1923.11 1206.47 L1922.53 1206.47 L1921.94 1206.47 L1921.35 1206.47 L1920.77 1206.47 L1920.18 1206.47 L1919.59 1206.47 L1919.01 1206.47 L1918.42 1206.47 L1917.83 1206.47 L1917.25 1206.47 L1916.66 1206.47 L1916.08 1206.47 L1915.49 1206.47 L1914.9 1206.47 L1914.32 1206.47 L1913.73 1206.47 L1913.14 1206.47 L1912.56 1206.47 L1911.97 1206.47 L1911.38 1206.47 L1910.8 1206.47 L1910.21 1206.47 L1909.63 1206.47 L1909.04 1206.47 L1908.45 1206.47 L1907.87 1206.47 L1907.28 1206.47 L1906.69 1206.47 L1906.11 1206.47 L1905.52 1206.47 L1904.93 1206.47 L1904.35 1206.47 L1903.76 1206.47 L1903.17 1206.47 L1902.59 1206.47 L1902 1206.47 L1901.42 1206.47 L1900.83 1206.47 L1900.24 1206.47 L1899.66 1206.47 L1899.07 1206.47 L1898.48 1206.47 L1897.9 1206.47 L1897.31 1206.47 L1896.72 1206.47 L1896.14 1206.47 L1895.55 1206.47 L1894.96 1206.47 L1894.38 1206.47 L1893.79 1206.47 L1893.21 1206.47 L1892.62 1206.47 L1892.03 1206.47 L1891.45 1206.47 L1890.86 1206.47 L1890.27 1206.47 L1889.69 1206.47 L1889.1 1206.47 L1888.51 1206.47 L1887.93 1206.47 L1887.34 1206.47 L1886.76 1206.47 L1886.17 1206.47 L1885.58 1206.47 L1885 1206.47 L1884.41 1206.47 L1883.82 1206.47 L1883.24 1206.47 L1882.65 1206.47 L1882.06 1206.47 L1881.48 1206.47 L1880.89 1206.47 L1880.3 1206.47 L1879.72 1206.47 L1879.13 1206.47 L1878.55 1206.47 L1877.96 1206.47 L1877.37 1206.47 L1876.79 1206.47 L1876.2 1206.47 L1875.61 1206.47 L1875.03 1206.47 L1874.44 1206.47 L1873.85 1206.47 L1873.27 1206.47 L1872.68 1206.47 L1872.09 1206.47 L1871.51 1206.47 L1870.92 1206.47 L1870.34 1206.47 L1869.75 1206.47 L1869.16 1206.47 L1868.58 1206.47 L1867.99 1206.47 L1867.4 1206.47 L1866.82 1206.47 L1866.23 1206.47 L1865.64 1206.47 L1865.06 1206.47 L1864.47 1206.47 L1863.88 1206.47 L1863.3 1206.47 L1862.71 1206.47 L1862.13 1206.47 L1861.54 1206.47 L1860.95 1206.47 L1860.37 1206.47 L1859.78 1206.47 L1859.19 1206.47 L1858.61 1206.47 L1858.02 1206.47 L1857.43 1206.47 L1856.85 1206.47 L1856.26 1206.47 L1855.68 1206.47 L1855.09 1206.47 L1854.5 1206.47 L1853.92 1206.47 L1853.33 1206.47 L1852.74 1206.47 L1852.16 1206.47 L1851.57 1206.47 L1850.98 1206.47 L1850.4 1206.47 L1849.81 1206.47 L1849.22 1206.47 L1848.64 1206.47 L1848.05 1206.47 L1847.47 1206.47 L1846.88 1206.47 L1846.29 1206.47 L1845.71 1206.47 L1845.12 1206.47 L1844.53 1206.47 L1843.95 1206.47 L1843.36 1206.47 L1842.77 1206.47 L1842.19 1206.47 L1841.6 1206.47 L1841.01 1206.47 L1840.43 1206.47 L1839.84 1206.47 L1839.26 1206.47 L1838.67 1206.47 L1838.08 1206.47 L1837.5 1206.47 L1836.91 1206.47 L1836.32 1206.47 L1835.74 1206.47 L1835.15 1206.47 L1834.56 1206.47 L1833.98 1206.47 L1833.39 1206.47 L1832.81 1206.47 L1832.22 1206.47 L1831.63 1206.47 L1831.05 1206.47 L1830.46 1206.47 L1829.87 1206.47 L1829.29 1206.47 L1828.7 1206.47 L1828.11 1206.47 L1827.53 1206.47 L1826.94 1206.47 L1826.35 1206.47 L1825.77 1206.47 L1825.18 1206.47 L1824.6 1206.47 L1824.01 1206.47 L1823.42 1206.47 L1822.84 1206.47 L1822.25 1206.47 L1821.66 1206.47 L1821.08 1206.47 L1820.49 1206.47 L1819.9 1206.47 L1819.32 1206.47 L1818.73 1206.47 L1818.14 1206.47 L1817.56 1206.47 L1816.97 1206.47 L1816.39 1206.47 L1815.8 1206.47 L1815.21 1206.47 L1814.63 1206.47 L1814.04 1206.47 L1813.45 1206.47 L1812.87 1206.47 L1812.28 1206.47 L1811.69 1206.47 L1811.11 1206.47 L1810.52 1206.47 L1809.94 1206.47 L1809.35 1206.47 L1808.76 1206.47 L1808.18 1206.47 L1807.59 1206.47 L1807 1206.47 L1806.42 1206.47 L1805.83 1206.47 L1805.24 1206.47 L1804.66 1206.47 L1804.07 1206.47 L1803.48 1206.47 L1802.9 1206.47 L1802.31 1206.47 L1801.73 1206.47 L1801.14 1206.47 L1800.55 1206.47 L1799.97 1206.47 L1799.38 1206.47 L1798.79 1206.47 L1798.21 1206.47 L1797.62 1206.47 L1797.03 1206.47 L1796.45 1206.47 L1795.86 1206.47 L1795.27 1206.47 L1794.69 1206.47 L1794.1 1206.47 L1793.52 1206.47 L1792.93 1206.47 L1792.34 1206.47 L1791.76 1206.47 L1791.17 1206.47 L1790.58 1206.47 L1790 1206.47 L1789.41 1206.47 L1788.82 1206.47 L1788.24 1206.47 L1787.65 1206.47 L1787.06 1206.47 L1786.48 1206.47 L1785.89 1206.47 L1785.31 1206.47 L1784.72 1206.47 L1784.13 1206.47 L1783.55 1206.47 L1782.96 1206.47 L1782.37 1206.47 L1781.79 1206.47 L1781.2 1206.47 L1780.61 1206.47 L1780.03 1206.47 L1779.44 1206.47 L1778.86 1206.47 L1778.27 1206.47 L1777.68 1206.47 L1777.1 1206.47 L1776.51 1206.47 L1775.92 1206.47 L1775.34 1206.47 L1774.75 1206.47 L1774.16 1206.47 L1773.58 1206.47 L1772.99 1206.47 L1772.4 1206.47 L1771.82 1206.47 L1771.23 1206.47 L1770.65 1206.47 L1770.06 1206.47 L1769.47 1206.47 L1768.89 1206.47 L1768.3 1206.47 L1767.71 1206.47 L1767.13 1206.47 L1766.54 1206.47 L1765.95 1206.47 L1765.37 1206.47 L1764.78 1206.47 L1764.19 1206.47 L1763.61 1206.47 L1763.02 1206.47 L1762.44 1206.47 L1761.85 1206.47 L1761.26 1206.47 L1760.68 1206.47 L1760.09 1206.47 L1759.5 1206.47 L1758.92 1206.47 L1758.33 1206.47 L1757.74 1206.47 L1757.16 1206.47 L1756.57 1206.47 L1755.99 1206.47 L1755.4 1206.47 L1754.81 1206.47 L1754.23 1206.47 L1753.64 1206.47 L1753.05 1206.47 L1752.47 1206.47 L1751.88 1206.47 L1751.29 1206.47 L1750.71 1206.47 L1750.12 1206.47 L1749.53 1206.47 L1748.95 1206.47 L1748.36 1206.47 L1747.78 1206.47 L1747.19 1206.47 L1746.6 1206.47 L1746.02 1206.47 L1745.43 1206.47 L1744.84 1206.47 L1744.26 1206.47 L1743.67 1206.47 L1743.08 1206.47 L1742.5 1206.47 L1741.91 1206.47 L1741.32 1206.47 L1740.74 1206.47 L1740.15 1206.47 L1739.57 1206.47 L1738.98 1206.47 L1738.39 1206.47 L1737.81 1206.47 L1737.22 1206.47 L1736.63 1206.47 L1736.05 1206.47 L1735.46 1206.47 L1734.87 1206.47 L1734.29 1206.47 L1733.7 1206.47 L1733.11 1206.47 L1732.53 1206.47 L1731.94 1206.47 L1731.36 1206.47 L1730.77 1206.47 L1730.18 1206.47 L1729.6 1206.47 L1729.01 1206.47 L1728.42 1206.47 L1727.84 1206.47 L1727.25 1206.47 L1726.66 1206.47 L1726.08 1206.47 L1725.49 1206.47 L1724.91 1206.47 L1724.32 1206.47 L1723.73 1206.47 L1723.15 1206.47 L1722.56 1206.47 L1721.97 1206.47 L1721.39 1206.47 L1720.8 1206.47 L1720.21 1206.47 L1719.63 1206.47 L1719.04 1206.47 L1718.45 1206.47 L1717.87 1206.47 L1717.28 1206.47 L1716.7 1206.47 L1716.11 1206.47 L1715.52 1206.47 L1714.94 1206.47 L1714.35 1206.47 L1713.76 1206.47 L1713.18 1206.47 L1712.59 1206.47 L1712 1206.47 L1711.42 1206.47 L1710.83 1206.47 L1710.24 1206.47 L1709.66 1206.47 L1709.07 1206.47 L1708.49 1206.47 L1707.9 1206.47 L1707.31 1206.47 L1706.73 1206.47 L1706.14 1206.47 L1705.55 1206.47 L1704.97 1206.47 L1704.38 1206.47 L1703.79 1206.47 L1703.21 1206.47 L1702.62 1206.47 L1702.04 1206.47 L1701.45 1206.47 L1700.86 1206.47 L1700.28 1206.47 L1699.69 1206.47 L1699.1 1206.47 L1698.52 1206.47 L1697.93 1206.47 L1697.34 1206.47 L1696.76 1206.47 L1696.17 1206.47 L1695.58 1206.47 L1695 1206.47 L1694.41 1206.47 L1693.83 1206.47 L1693.24 1206.47 L1692.65 1206.47 L1692.07 1206.47 L1691.48 1206.47 L1690.89 1206.47 L1690.31 1206.47 L1689.72 1206.47 L1689.13 1206.47 L1688.55 1206.47 L1687.96 1206.47 L1687.37 1206.47 L1686.79 1206.47 L1686.2 1206.47 L1685.62 1206.47 L1685.03 1206.47 L1684.44 1206.47 L1683.86 1206.47 L1683.27 1206.47 L1682.68 1206.47 L1682.1 1206.47 L1681.51 1206.47 L1680.92 1206.47 L1680.34 1206.47 L1679.75 1206.47 L1679.17 1206.47 L1678.58 1206.47 L1677.99 1206.47 L1677.41 1206.47 L1676.82 1206.47 L1676.23 1206.47 L1675.65 1206.47 L1675.06 1206.47 L1674.47 1206.47 L1673.89 1206.47 L1673.3 1206.47 L1672.71 1206.47 L1672.13 1206.47 L1671.54 1206.47 L1670.96 1206.47 L1670.37 1206.47 L1669.78 1206.47 L1669.2 1206.47 L1668.61 1206.47 L1668.02 1206.47 L1667.44 1206.47 L1666.85 1206.47 L1666.26 1206.47 L1665.68 1206.47 L1665.09 1206.47 L1664.5 1206.47 L1663.92 1206.47 L1663.33 1206.47 L1662.75 1206.47 L1662.16 1206.47 L1661.57 1206.47 L1660.99 1206.47 L1660.4 1206.47 L1659.81 1206.47 L1659.23 1206.47 L1658.64 1206.47 L1658.05 1206.47 L1657.47 1206.47 L1656.88 1206.47 L1656.29 1206.47 L1655.71 1206.47 L1655.12 1206.47 L1654.54 1206.47 L1653.95 1206.47 L1653.36 1206.47 L1652.78 1206.47 L1652.19 1206.47 L1651.6 1206.47 L1651.02 1206.47 L1650.43 1206.47 L1649.84 1206.47 L1649.26 1206.47 L1648.67 1206.47 L1648.09 1206.47 L1647.5 1206.47 L1646.91 1206.47 L1646.33 1206.47 L1645.74 1206.47 L1645.15 1206.47 L1644.57 1206.47 L1643.98 1206.47 L1643.39 1206.47 L1642.81 1206.47 L1642.22 1206.47 L1641.63 1206.47 L1641.05 1206.47 L1640.46 1206.47 L1639.88 1206.47 L1639.29 1206.47 L1638.7 1206.47 L1638.12 1206.47 L1637.53 1206.47 L1636.94 1206.47 L1636.36 1206.47 L1635.77 1206.47 L1635.18 1206.47 L1634.6 1206.47 L1634.01 1206.47 L1633.42 1206.47 L1632.84 1206.47 L1632.25 1206.47 L1631.67 1206.47 L1631.08 1206.47 L1630.49 1206.47 L1629.91 1206.47 L1629.32 1206.47 L1628.73 1206.47 L1628.15 1206.47 L1627.56 1206.47 L1626.97 1206.47 L1626.39 1206.47 L1625.8 1206.47 L1625.22 1206.47 L1624.63 1206.47 L1624.04 1206.47 L1623.46 1206.47 L1622.87 1206.47 L1622.28 1206.47 L1621.7 1206.47 L1621.11 1206.47 L1620.52 1206.47 L1619.94 1206.47 L1619.35 1206.47 L1618.76 1206.47 L1618.18 1206.47 L1617.59 1206.47 L1617.01 1206.47 L1616.42 1206.47 L1615.83 1206.47 L1615.25 1206.47 L1614.66 1206.47 L1614.07 1206.47 L1613.49 1206.47 L1612.9 1206.47 L1612.31 1206.47 L1611.73 1206.47 L1611.14 1206.47 L1610.55 1206.47 L1609.97 1206.47 L1609.38 1206.47 L1608.8 1206.47 L1608.21 1206.47 L1607.62 1206.47 L1607.04 1206.47 L1606.45 1206.47 L1605.86 1206.47 L1605.28 1206.47 L1604.69 1206.47 L1604.1 1206.47 L1603.52 1206.47 L1602.93 1206.47 L1602.34 1206.47 L1601.76 1206.47 L1601.17 1206.47 L1600.59 1206.47 L1600 1206.47 L1599.41 1206.47 L1598.83 1206.47 L1598.24 1206.47 L1597.65 1206.47 L1597.07 1206.47 L1596.48 1206.47 L1595.89 1206.47 L1595.31 1206.47 L1594.72 1206.47 L1594.14 1206.47 L1593.55 1206.47 L1592.96 1206.47 L1592.38 1206.47 L1591.79 1206.47 L1591.2 1206.47 L1590.62 1206.47 L1590.03 1206.47 L1589.44 1206.47 L1588.86 1206.47 L1588.27 1206.47 L1587.68 1206.47 L1587.1 1206.47 L1586.51 1206.47 L1585.93 1206.47 L1585.34 1206.47 L1584.75 1206.47 L1584.17 1206.47 L1583.58 1206.47 L1582.99 1206.47 L1582.41 1206.47 L1581.82 1206.47 L1581.23 1206.47 L1580.65 1206.47 L1580.06 1206.47 L1579.47 1206.47 L1578.89 1206.47 L1578.3 1206.47 L1577.72 1206.47 L1577.13 1206.47 L1576.54 1206.47 L1575.96 1206.47 L1575.37 1206.47 L1574.78 1206.47 L1574.2 1206.47 L1573.61 1206.47 L1573.02 1206.47 L1572.44 1206.47 L1571.85 1206.47 L1571.27 1206.47 L1570.68 1206.47 L1570.09 1206.47 L1569.51 1206.47 L1568.92 1206.47 L1568.33 1206.47 L1567.75 1206.47 L1567.16 1206.47 L1566.57 1206.47 L1565.99 1206.47 L1565.4 1206.47 L1564.81 1206.47 L1564.23 1206.47 L1563.64 1206.47 L1563.06 1206.47 L1562.47 1206.47 L1561.88 1206.47 L1561.3 1206.47 L1560.71 1206.47 L1560.12 1206.47 L1559.54 1206.47 L1558.95 1206.47 L1558.36 1206.47 L1557.78 1206.47 L1557.19 1206.47 L1556.6 1206.47 L1556.02 1206.47 L1555.43 1206.47 L1554.85 1206.47 L1554.26 1206.47 L1553.67 1206.47 L1553.09 1206.47 L1552.5 1206.47 L1551.91 1206.47 L1551.33 1206.47 L1550.74 1206.47 L1550.15 1206.47 L1549.57 1206.47 L1548.98 1206.47 L1548.4 1206.47 L1547.81 1206.47 L1547.22 1206.47 L1546.64 1206.47 L1546.05 1206.47 L1545.46 1206.47 L1544.88 1206.47 L1544.29 1206.47 L1543.7 1206.47 L1543.12 1206.47 L1542.53 1206.47 L1541.94 1206.47 L1541.36 1206.47 L1540.77 1206.47 L1540.19 1206.47 L1539.6 1206.47 L1539.01 1206.47 L1538.43 1206.47 L1537.84 1206.47 L1537.25 1206.47 L1536.67 1206.47 L1536.08 1206.47 L1535.49 1206.47 L1534.91 1206.47 L1534.32 1206.47 L1533.73 1206.47 L1533.15 1206.47 L1532.56 1206.47 L1531.98 1206.47 L1531.39 1206.47 L1530.8 1206.47 L1530.22 1206.47 L1529.63 1206.47 L1529.04 1206.47 L1528.46 1206.47 L1527.87 1206.47 L1527.28 1206.47 L1526.7 1206.47 L1526.11 1206.47 L1525.52 1206.47 L1524.94 1206.47 L1524.35 1206.47 L1523.77 1206.47 L1523.18 1206.47 L1522.59 1206.47 L1522.01 1206.47 L1521.42 1206.47 L1520.83 1206.47 L1520.25 1206.47 L1519.66 1206.47 L1519.07 1206.47 L1518.49 1206.47 L1517.9 1206.47 L1517.32 1206.47 L1516.73 1206.47 L1516.14 1206.47 L1515.56 1206.47 L1514.97 1206.47 L1514.38 1206.47 L1513.8 1206.47 L1513.21 1206.47 L1512.62 1206.47 L1512.04 1206.47 L1511.45 1206.47 L1510.86 1206.47 L1510.28 1206.47 L1509.69 1206.47 L1509.11 1206.47 L1508.52 1206.47 L1507.93 1206.47 L1507.35 1206.47 L1506.76 1206.47 L1506.17 1206.47 L1505.59 1206.47 L1505 1206.47 L1504.41 1206.47 L1503.83 1206.47 L1503.24 1206.47 L1502.65 1206.47 L1502.07 1206.47 L1501.48 1206.47 L1500.9 1206.47 L1500.31 1206.47 L1499.72 1206.47 L1499.14 1206.47 L1498.55 1206.47 L1497.96 1206.47 L1497.38 1206.47 L1496.79 1206.47 L1496.2 1206.47 L1495.62 1206.47 L1495.03 1206.47 L1494.45 1206.47 L1493.86 1206.47 L1493.27 1206.47 L1492.69 1206.47 L1492.1 1206.47 L1491.51 1206.47 L1490.93 1206.47 L1490.34 1206.47 L1489.75 1206.47 L1489.17 1206.47 L1488.58 1206.47 L1487.99 1206.47 L1487.41 1206.47 L1486.82 1206.47 L1486.24 1206.47 L1485.65 1206.47 L1485.06 1206.47 L1484.48 1206.47 L1483.89 1206.47 L1483.3 1206.47 L1482.72 1206.47 L1482.13 1206.47 L1481.54 1206.47 L1480.96 1206.47 L1480.37 1206.47 L1479.78 1206.47 L1479.2 1206.47 L1478.61 1206.47 L1478.03 1206.47 L1477.44 1206.47 L1476.85 1206.47 L1476.27 1206.47 L1475.68 1206.47 L1475.09 1206.47 L1474.51 1206.47 L1473.92 1206.47 L1473.33 1206.47 L1472.75 1206.47 L1472.16 1206.47 L1471.57 1206.47 L1470.99 1206.47 L1470.4 1206.47 L1469.82 1206.47 L1469.23 1206.47 L1468.64 1206.47 L1468.06 1206.47 L1467.47 1206.47 L1466.88 1206.47 L1466.3 1206.47 L1465.71 1206.47 L1465.12 1206.47 L1464.54 1206.47 L1463.95 1206.47 L1463.37 1206.47 L1462.78 1206.47 L1462.19 1206.47 L1461.61 1206.47 L1461.02 1206.47 L1460.43 1206.47 L1459.85 1206.47 L1459.26 1206.47 L1458.67 1206.47 L1458.09 1206.47 L1457.5 1206.47 L1456.91 1206.47 L1456.33 1206.47 L1455.74 1206.47 L1455.16 1206.47 L1454.57 1206.47 L1453.98 1206.47 L1453.4 1206.47 L1452.81 1206.47 L1452.22 1206.47 L1451.64 1206.47 L1451.05 1206.47 L1450.46 1206.47 L1449.88 1206.47 L1449.29 1206.47 L1448.7 1206.47 L1448.12 1206.47 L1447.53 1206.47 L1446.95 1206.47 L1446.36 1206.47 L1445.77 1206.47 L1445.19 1206.47 L1444.6 1206.47 L1444.01 1206.47 L1443.43 1206.47 L1442.84 1206.47 L1442.25 1206.47 L1441.67 1206.47 L1441.08 1206.47 L1440.5 1206.47 L1439.91 1206.47 L1439.32 1206.47 L1438.74 1206.47 L1438.15 1206.47 L1437.56 1206.47 L1436.98 1206.47 L1436.39 1206.47 L1435.8 1206.47 L1435.22 1206.47 L1434.63 1206.47 L1434.04 1206.47 L1433.46 1206.47 L1432.87 1206.47 L1432.29 1206.47 L1431.7 1206.47 L1431.11 1206.47 L1430.53 1206.47 L1429.94 1206.47 L1429.35 1206.47 L1428.77 1206.47 L1428.18 1206.47 L1427.59 1206.47 L1427.01 1206.47 L1426.42 1206.47 L1425.83 1206.47 L1425.25 1206.47 L1424.66 1206.47 L1424.08 1206.47 L1423.49 1206.47 L1422.9 1206.47 L1422.32 1206.47 L1421.73 1206.47 L1421.14 1206.47 L1420.56 1206.47 L1419.97 1206.47 L1419.38 1206.47 L1418.8 1206.47 L1418.21 1206.47 L1417.63 1206.47 L1417.04 1206.47 L1416.45 1206.47 L1415.87 1206.47 L1415.28 1206.47 L1414.69 1206.47 L1414.11 1206.47 L1413.52 1206.47 L1412.93 1206.47 L1412.35 1206.47 L1411.76 1206.47 L1411.17 1206.47 L1410.59 1206.47 L1410 1206.47 L1409.42 1206.47 L1408.83 1206.47 L1408.24 1206.47 L1407.66 1206.47 L1407.07 1206.47 L1406.48 1206.47 L1405.9 1206.47 L1405.31 1206.47 L1404.72 1206.47 L1404.14 1206.47 L1403.55 1206.47 L1402.96 1206.47 L1402.38 1206.47 L1401.79 1206.47 L1401.21 1206.47 L1400.62 1206.47 L1400.03 1206.47 L1399.45 1206.47 L1398.86 1206.47 L1398.27 1206.47 L1397.69 1206.47 L1397.1 1206.47 L1396.51 1206.47 L1395.93 1206.47 L1395.34 1206.47 L1394.75 1206.47 L1394.17 1206.47 L1393.58 1206.47 L1393 1206.47 L1392.41 1206.47 L1391.82 1206.47 L1391.24 1206.47 L1390.65 1206.47 L1390.06 1206.47 L1389.48 1206.47 L1388.89 1206.47 L1388.3 1206.47 L1387.72 1206.47 L1387.13 1206.47 L1386.55 1206.47 L1385.96 1206.47 L1385.37 1206.47 L1384.79 1206.47 L1384.2 1206.47 L1383.61 1206.47 L1383.03 1206.47 L1382.44 1206.47 L1381.85 1206.47 L1381.27 1206.47 L1380.68 1206.47 L1380.09 1206.47 L1379.51 1206.47 L1378.92 1206.47 L1378.34 1206.47 L1377.75 1206.47 L1377.16 1206.47 L1376.58 1206.47 L1375.99 1206.47 L1375.4 1206.47 L1374.82 1206.47 L1374.23 1206.47 L1373.64 1206.47 L1373.06 1206.47 L1372.47 1206.47 L1371.88 1206.47 L1371.3 1206.47 L1370.71 1206.47 L1370.13 1206.47 L1369.54 1206.47 L1368.95 1206.47 L1368.37 1206.47 L1367.78 1206.47 L1367.19 1206.47 L1366.61 1206.47 L1366.02 1206.47 L1365.43 1206.47 L1364.85 1206.47 L1364.26 1206.47 L1363.68 1206.47 L1363.09 1206.47 L1362.5 1206.47 L1361.92 1206.47 L1361.33 1206.47 L1360.74 1206.47 L1360.16 1206.47 L1359.57 1206.47 L1358.98 1206.47 L1358.4 1206.47 L1357.81 1206.47 L1357.22 1206.47 L1356.64 1206.47 L1356.05 1206.47 L1355.47 1206.47 L1354.88 1206.47 L1354.29 1206.47 L1353.71 1206.47 L1353.12 1206.47 L1352.53 1206.47 L1351.95 1206.47 L1351.36 1206.47 L1350.77 1206.47 L1350.19 1206.47 L1349.6 1206.47 L1349.01 1206.47 L1348.43 1206.47 L1347.84 1206.47 L1347.26 1206.47 L1346.67 1206.47 L1346.08 1206.47 L1345.5 1206.47 L1344.91 1206.47 L1344.32 1206.47 L1343.74 1206.47 L1343.15 1206.47 L1342.56 1206.47 L1341.98 1206.47 L1341.39 1206.47 L1340.8 1206.47 L1340.22 1206.47 L1339.63 1206.47 L1339.05 1206.47 L1338.46 1206.47 L1337.87 1206.47 L1337.29 1206.47 L1336.7 1206.47 L1336.11 1206.47 L1335.53 1206.47 L1334.94 1206.47 L1334.35 1206.47 L1333.77 1206.47 L1333.18 1206.47 L1332.6 1206.47 L1332.01 1206.47 L1331.42 1206.47 L1330.84 1206.47 L1330.25 1206.47 L1329.66 1206.47 L1329.08 1206.47 L1328.49 1206.47 L1327.9 1206.47 L1327.32 1206.47 L1326.73 1206.47 L1326.14 1206.47 L1325.56 1206.47 L1324.97 1206.47 L1324.39 1206.47 L1323.8 1206.47 L1323.21 1206.47 L1322.63 1206.47 L1322.04 1206.47 L1321.45 1206.47 L1320.87 1206.47 L1320.28 1206.47 L1319.69 1206.47 L1319.11 1206.47 L1318.52 1206.47 L1317.93 1206.47 L1317.35 1206.47 L1316.76 1206.47 L1316.18 1206.47 L1315.59 1206.47 L1315 1206.47 L1314.42 1206.47 L1313.83 1206.47 L1313.24 1206.47 L1312.66 1206.47 L1312.07 1206.47 L1311.48 1206.47 L1310.9 1206.47 L1310.31 1206.47 L1309.73 1206.47 L1309.14 1206.47 L1308.55 1206.47 L1307.97 1206.47 L1307.38 1206.47 L1306.79 1206.47 L1306.21 1206.47 L1305.62 1206.47 L1305.03 1206.47 L1304.45 1206.47 L1303.86 1206.47 L1303.27 1206.47 L1302.69 1206.47 L1302.1 1206.47 L1301.52 1206.47 L1300.93 1206.47 L1300.34 1206.47 L1299.76 1206.47 L1299.17 1206.47 L1298.58 1206.47 L1298 1206.47 L1297.41 1206.47 L1296.82 1206.47 L1296.24 1206.47 L1295.65 1206.47 L1295.06 1206.47 L1294.48 1206.47 L1293.89 1206.47 L1293.31 1206.47 L1292.72 1206.47 L1292.13 1206.47 L1291.55 1206.47 L1290.96 1206.47 L1290.37 1206.47 L1289.79 1206.47 L1289.2 1206.47 L1288.61 1206.47 L1288.03 1206.47 L1287.44 1206.47 L1286.86 1206.47 L1286.27 1206.47 L1285.68 1206.47 L1285.1 1206.47 L1284.51 1206.47 L1283.92 1206.47 L1283.34 1206.47 L1282.75 1206.47 L1282.16 1206.47 L1281.58 1206.47 L1280.99 1206.47 L1280.4 1206.47 L1279.82 1206.47 L1279.23 1206.47 L1278.65 1206.47 L1278.06 1206.47 L1277.47 1206.47 L1276.89 1206.47 L1276.3 1206.47 L1275.71 1206.47 L1275.13 1206.47 L1274.54 1206.47 L1273.95 1206.47 L1273.37 1206.47 L1272.78 1206.47 L1272.19 1206.47 L1271.61 1206.47 L1271.02 1206.47 L1270.44 1206.47 L1269.85 1206.47 L1269.26 1206.47 L1268.68 1206.47 L1268.09 1206.47 L1267.5 1206.47 L1266.92 1206.47 L1266.33 1206.47 L1265.74 1206.47 L1265.16 1206.47 L1264.57 1206.47 L1263.98 1206.47 L1263.4 1206.47 L1262.81 1206.47 L1262.23 1206.47 L1261.64 1206.47 L1261.05 1206.47 L1260.47 1206.47 L1259.88 1206.47 L1259.29 1206.47 L1258.71 1206.47 L1258.12 1206.47 L1257.53 1206.47 L1256.95 1206.47 L1256.36 1206.47 L1255.78 1206.47 L1255.19 1206.47 L1254.6 1206.47 L1254.02 1206.47 L1253.43 1206.47 L1252.84 1206.47 L1252.26 1206.47 L1251.67 1206.47 L1251.08 1206.47 L1250.5 1206.47 L1249.91 1206.47 L1249.32 1206.47 L1248.74 1206.47 L1248.15 1206.47 L1247.57 1206.47 L1246.98 1206.47 L1246.39 1206.47 L1245.81 1206.47 L1245.22 1206.47 L1244.63 1206.47 L1244.05 1206.47 L1243.46 1206.47 L1242.87 1206.47 L1242.29 1206.47 L1241.7 1206.47 L1241.11 1206.47 L1240.53 1206.47 L1239.94 1206.47 L1239.36 1206.47 L1238.77 1206.47 L1238.18 1206.47 L1237.6 1206.47 L1237.01 1206.47 L1236.42 1206.47 L1235.84 1206.47 L1235.25 1206.47 L1234.66 1206.47 L1234.08 1206.47 L1233.49 1206.47 L1232.91 1206.47 L1232.32 1206.47 L1231.73 1206.47 L1231.15 1206.47 L1230.56 1206.47 L1229.97 1206.47 L1229.39 1206.47 L1228.8 1206.47 L1228.21 1206.47 L1227.63 1206.47 L1227.04 1206.47 L1226.45 1206.47 L1225.87 1206.47 L1225.28 1206.47 L1224.7 1206.47 L1224.11 1206.47 L1223.52 1206.47 L1222.94 1206.47 L1222.35 1206.47 L1221.76 1206.47 L1221.18 1206.47 L1220.59 1206.47 L1220 1206.47 L1219.42 1206.47 L1218.83 1206.47 L1218.24 1206.47 L1217.66 1206.47 L1217.07 1206.47 L1216.49 1206.47 L1215.9 1206.47 L1215.31 1206.47 L1214.73 1206.47 L1214.14 1206.47 L1213.55 1206.47 L1212.97 1206.47 L1212.38 1206.47 L1211.79 1206.47 L1211.21 1206.47 L1210.62 1206.47 L1210.03 1206.47 L1209.45 1206.47 L1208.86 1206.47 L1208.28 1206.47 L1207.69 1206.47 L1207.1 1206.47 L1206.52 1206.47 L1205.93 1206.47 L1205.34 1206.47 L1204.76 1206.47 L1204.17 1206.47 L1203.58 1206.47 L1203 1206.47 L1202.41 1206.47 L1201.83 1206.47 L1201.24 1206.47 L1200.65 1206.47 L1200.07 1206.47 L1199.48 1206.47 L1198.89 1206.47 L1198.31 1206.47 L1197.72 1206.47 L1197.13 1206.47 L1196.55 1206.47 L1195.96 1206.47 L1195.37 1206.47 L1194.79 1206.47 L1194.2 1206.47 L1193.62 1206.47 L1193.03 1206.47 L1192.44 1206.47 L1191.86 1206.47 L1191.27 1206.47 L1190.68 1206.47 L1190.1 1206.47 L1189.51 1206.47 L1188.92 1206.47 L1188.34 1206.47 L1187.75 1206.47 L1187.16 1206.47 L1186.58 1206.47 L1185.99 1206.47 L1185.41 1206.47 L1184.82 1206.47 L1184.23 1206.47 L1183.65 1206.47 L1183.06 1206.47 L1182.47 1206.47 L1181.89 1206.47 L1181.3 1206.47 L1180.71 1206.47 L1180.13 1206.47 L1179.54 1206.47 L1178.96 1206.47 L1178.37 1206.47 L1177.78 1206.47 L1177.2 1206.47 L1176.61 1206.47 L1176.02 1206.47 L1175.44 1206.47 L1174.85 1206.47 L1174.26 1206.47 L1173.68 1206.47 L1173.09 1206.47 L1172.5 1206.47 L1171.92 1206.47 L1171.33 1206.47 L1170.75 1206.47 L1170.16 1206.47 L1169.57 1206.47 L1168.99 1206.47 L1168.4 1206.47 L1167.81 1206.47 L1167.23 1206.47 L1166.64 1206.47 L1166.05 1206.47 L1165.47 1206.47 L1164.88 1206.47 L1164.29 1206.47 L1163.71 1206.47 L1163.12 1206.47 L1162.54 1206.47 L1161.95 1206.47 L1161.36 1206.47 L1160.78 1206.47 L1160.19 1206.47 L1159.6 1206.47 L1159.02 1206.47 L1158.43 1206.47 L1157.84 1206.47 L1157.26 1206.47 L1156.67 1206.47 L1156.09 1206.47 L1155.5 1206.47 L1154.91 1206.47 L1154.33 1206.47 L1153.74 1206.47 L1153.15 1206.47 L1152.57 1206.47 L1151.98 1206.47 L1151.39 1206.47 L1150.81 1206.47 L1150.22 1206.47 L1149.63 1206.47 L1149.05 1206.47 L1148.46 1206.47 L1147.88 1206.47 L1147.29 1206.47 L1146.7 1206.47 L1146.12 1206.47 L1145.53 1206.47 L1144.94 1206.47 L1144.36 1206.47 L1143.77 1206.47 L1143.18 1206.47 L1142.6 1206.47 L1142.01 1206.47 L1141.42 1206.47 L1140.84 1206.47 L1140.25 1206.47 L1139.67 1206.47 L1139.08 1206.47 L1138.49 1206.47 L1137.91 1206.47 L1137.32 1206.47 L1136.73 1206.47 L1136.15 1206.47 L1135.56 1206.47 L1134.97 1206.47 L1134.39 1206.47 L1133.8 1206.47 L1133.21 1206.47 L1132.63 1206.47 L1132.04 1206.47 L1131.46 1206.47 L1130.87 1206.47 L1130.28 1206.47 L1129.7 1206.47 L1129.11 1206.47 L1128.52 1206.47 L1127.94 1206.47 L1127.35 1206.47 L1126.76 1206.47 L1126.18 1206.47 L1125.59 1206.47 L1125.01 1206.47 L1124.42 1206.47 L1123.83 1206.47 L1123.25 1206.47 L1122.66 1206.47 L1122.07 1206.47 L1121.49 1206.47 L1120.9 1206.47 L1120.31 1206.47 L1119.73 1206.47 L1119.14 1206.47 L1118.55 1206.47 L1117.97 1206.47 L1117.38 1206.47 L1116.8 1206.47 L1116.21 1206.47 L1115.62 1206.47 L1115.04 1206.47 L1114.45 1206.47 L1113.86 1206.47 L1113.28 1206.47 L1112.69 1206.47 L1112.1 1206.47 L1111.52 1206.47 L1110.93 1206.47 L1110.34 1206.47 L1109.76 1206.47 L1109.17 1206.47 L1108.59 1206.47 L1108 1206.47 L1107.41 1206.47 L1106.83 1206.47 L1106.24 1206.47 L1105.65 1206.47 L1105.07 1206.47 L1104.48 1206.47 L1103.89 1206.47 L1103.31 1206.47 L1102.72 1206.47 L1102.14 1206.47 L1101.55 1206.47 L1100.96 1206.47 L1100.38 1206.47 L1099.79 1206.47 L1099.2 1206.47 L1098.62 1206.47 L1098.03 1206.47 L1097.44 1206.47 L1096.86 1206.47 L1096.27 1206.47 L1095.68 1206.47 L1095.1 1206.47 L1094.51 1206.47 L1093.93 1206.47 L1093.34 1206.47 L1092.75 1206.47 L1092.17 1206.47 L1091.58 1206.47 L1090.99 1206.47 L1090.41 1206.47 L1089.82 1206.47 L1089.23 1206.47 L1088.65 1206.47 L1088.06 1206.47 L1087.47 1206.47 L1086.89 1206.47 L1086.3 1206.47 L1085.72 1206.47 L1085.13 1206.47 L1084.54 1206.47 L1083.96 1206.47 L1083.37 1206.47 L1082.78 1206.47 L1082.2 1206.47 L1081.61 1206.47 L1081.02 1206.47 L1080.44 1206.47 L1079.85 1206.47 L1079.26 1206.47 L1078.68 1206.47 L1078.09 1206.47 L1077.51 1206.47 L1076.92 1206.47 L1076.33 1206.47 L1075.75 1206.47 L1075.16 1206.47 L1074.57 1206.47 L1073.99 1206.47 L1073.4 1206.47 L1072.81 1206.47 L1072.23 1206.47 L1071.64 1206.47 L1071.06 1206.47 L1070.47 1206.47 L1069.88 1206.47 L1069.3 1206.47 L1068.71 1206.47 L1068.12 1206.47 L1067.54 1206.47 L1066.95 1206.47 L1066.36 1206.47 L1065.78 1206.47 L1065.19 1206.47 L1064.6 1206.47 L1064.02 1206.47 L1063.43 1206.47 L1062.85 1206.47 L1062.26 1206.47 L1061.67 1206.47 L1061.09 1206.47 L1060.5 1206.47 L1059.91 1206.47 L1059.33 1206.47 L1058.74 1206.47 L1058.15 1206.47 L1057.57 1206.47 L1056.98 1206.47 L1056.39 1206.47 L1055.81 1206.47 L1055.22 1206.47 L1054.64 1206.47 L1054.05 1206.47 L1053.46 1206.47 L1052.88 1206.47 L1052.29 1206.47 L1051.7 1206.47 L1051.12 1206.47 L1050.53 1206.47 L1049.94 1206.47 L1049.36 1206.47 L1048.77 1206.47 L1048.19 1206.47 L1047.6 1206.47 L1047.01 1206.47 L1046.43 1206.47 L1045.84 1206.47 L1045.25 1206.47 L1044.67 1206.47 L1044.08 1206.47 L1043.49 1206.47 L1042.91 1206.47 L1042.32 1206.47 L1041.73 1206.47 L1041.15 1206.47 L1040.56 1206.47 L1039.98 1206.47 L1039.39 1206.47 L1038.8 1206.47 L1038.22 1206.47 L1037.63 1206.47 L1037.04 1206.47 L1036.46 1206.47 L1035.87 1206.47 L1035.28 1206.47 L1034.7 1206.47 L1034.11 1206.47 L1033.52 1206.47 L1032.94 1206.47 L1032.35 1206.47 L1031.77 1206.47 L1031.18 1206.47 L1030.59 1206.47 L1030.01 1206.47 L1029.42 1206.47 L1028.83 1206.47 L1028.25 1206.47 L1027.66 1206.47 L1027.07 1206.47 L1026.49 1206.47 L1025.9 1206.47 L1025.32 1206.47 L1024.73 1206.47 L1024.14 1206.47 L1023.56 1206.47 L1022.97 1206.47 L1022.38 1206.47 L1021.8 1206.47 L1021.21 1206.47 L1020.62 1206.47 L1020.04 1206.47 L1019.45 1206.47 L1018.86 1206.47 L1018.28 1206.47 L1017.69 1206.47 L1017.11 1206.47 L1016.52 1206.47 L1015.93 1206.47 L1015.35 1206.47 L1014.76 1206.47 L1014.17 1206.47 L1013.59 1206.47 L1013 1206.47 L1012.41 1206.47 L1011.83 1206.47 L1011.24 1206.47 L1010.65 1206.47 L1010.07 1206.47 L1009.48 1206.47 L1008.9 1206.47 L1008.31 1206.47 L1007.72 1206.47 L1007.14 1206.47 L1006.55 1206.47 L1005.96 1206.47 L1005.38 1206.47 L1004.79 1206.47 L1004.2 1206.47 L1003.62 1206.47 L1003.03 1206.47 L1002.44 1206.47 L1001.86 1206.47 L1001.27 1206.47 L1000.69 1206.47 L1000.1 1206.47 L999.513 1206.47 L998.926 1206.47 L998.34 1206.47 L997.754 1206.47 L997.167 1206.47 L996.581 1206.47 L995.994 1206.47 L995.408 1206.47 L994.822 1206.47 L994.235 1206.47 L993.649 1206.47 L993.062 1206.47 L992.476 1206.47 L991.889 1206.47 L991.303 1206.47 L990.717 1206.47 L990.13 1206.47 L989.544 1206.47 L988.957 1206.47 L988.371 1206.47 L987.785 1206.47 L987.198 1206.47 L986.612 1206.47 L986.025 1206.47  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1206.54 986.612,1206.54 987.198,1206.54 987.785,1206.54 988.371,1206.54 988.957,1206.54 989.544,1206.54 990.13,1206.54 990.717,1206.54 991.303,1206.54 991.889,1206.54 992.476,1206.54 993.062,1206.54 993.649,1206.54 994.235,1206.54 994.822,1206.54 995.408,1206.54 995.994,1206.54 996.581,1206.54 997.167,1206.54 997.754,1206.54 998.34,1206.54 998.926,1206.54 999.513,1206.54 1000.1,1206.54 1000.69,1206.54 1001.27,1206.54 1001.86,1206.54 1002.44,1206.54 1003.03,1206.54 1003.62,1206.54 1004.2,1206.54 1004.79,1206.54 1005.38,1206.54 1005.96,1206.54 1006.55,1206.54 1007.14,1206.54 1007.72,1206.54 1008.31,1206.54 1008.9,1206.54 1009.48,1206.54 1010.07,1206.54 1010.65,1206.54 1011.24,1206.54 1011.83,1206.54 1012.41,1206.54 1013,1206.54 1013.59,1206.54 1014.17,1206.54 1014.76,1206.54 1015.35,1206.54 1015.93,1206.54 1016.52,1206.54 1017.11,1206.54 1017.69,1206.54 1018.28,1206.54 1018.86,1206.54 1019.45,1206.54 1020.04,1206.54 1020.62,1206.54 1021.21,1206.54 1021.8,1206.54 1022.38,1206.54 1022.97,1206.54 1023.56,1206.54 1024.14,1206.54 1024.73,1206.54 1025.32,1206.54 1025.9,1206.54 1026.49,1206.54 1027.07,1206.54 1027.66,1206.54 1028.25,1206.54 1028.83,1206.54 1029.42,1206.54 1030.01,1206.54 1030.59,1206.54 1031.18,1206.54 1031.77,1206.54 1032.35,1206.54 1032.94,1206.54 1033.52,1206.54 1034.11,1206.54 1034.7,1206.54 1035.28,1206.54 1035.87,1206.54 1036.46,1206.54 1037.04,1206.54 1037.63,1206.54 1038.22,1206.54 1038.8,1206.54 1039.39,1206.54 1039.98,1206.54 1040.56,1206.54 1041.15,1206.54 1041.73,1206.54 1042.32,1206.54 1042.91,1206.54 1043.49,1206.54 1044.08,1206.54 1044.67,1206.54 1045.25,1206.54 1045.84,1206.54 1046.43,1206.54 1047.01,1206.54 1047.6,1206.54 1048.19,1206.54 1048.77,1206.54 1049.36,1206.54 1049.94,1206.54 1050.53,1206.54 1051.12,1206.54 1051.7,1206.54 1052.29,1206.54 1052.88,1206.54 1053.46,1206.54 1054.05,1206.54 1054.64,1206.54 1055.22,1206.54 1055.81,1206.54 1056.39,1206.54 1056.98,1206.54 1057.57,1206.54 1058.15,1206.54 1058.74,1206.54 1059.33,1206.54 1059.91,1206.54 1060.5,1206.54 1061.09,1206.54 1061.67,1206.54 1062.26,1206.54 1062.85,1206.54 1063.43,1206.54 1064.02,1206.54 1064.6,1206.54 1065.19,1206.54 1065.78,1206.54 1066.36,1206.54 1066.95,1206.54 1067.54,1206.54 1068.12,1206.54 1068.71,1206.54 1069.3,1206.54 1069.88,1206.54 1070.47,1206.54 1071.06,1206.54 1071.64,1206.54 1072.23,1206.54 1072.81,1206.54 1073.4,1206.54 1073.99,1206.54 1074.57,1206.54 1075.16,1206.54 1075.75,1206.54 1076.33,1206.54 1076.92,1206.54 1077.51,1206.54 1078.09,1206.54 1078.68,1206.54 1079.26,1206.54 1079.85,1206.54 1080.44,1206.54 1081.02,1206.54 1081.61,1206.54 1082.2,1206.54 1082.78,1206.54 1083.37,1206.54 1083.96,1206.54 1084.54,1206.54 1085.13,1206.54 1085.72,1206.54 1086.3,1206.54 1086.89,1206.54 1087.47,1206.54 1088.06,1206.54 1088.65,1206.54 1089.23,1206.54 1089.82,1206.54 1090.41,1206.54 1090.99,1206.54 1091.58,1206.54 1092.17,1206.54 1092.75,1206.54 1093.34,1206.54 1093.93,1206.54 1094.51,1206.54 1095.1,1206.54 1095.68,1206.54 1096.27,1206.54 1096.86,1206.54 1097.44,1206.54 1098.03,1206.54 1098.62,1206.54 1099.2,1206.54 1099.79,1206.54 1100.38,1206.54 1100.96,1206.54 1101.55,1206.54 1102.14,1206.54 1102.72,1206.54 1103.31,1206.54 1103.89,1206.54 1104.48,1206.54 1105.07,1206.54 1105.65,1206.54 1106.24,1206.54 1106.83,1206.54 1107.41,1206.54 1108,1206.54 1108.59,1206.54 1109.17,1206.54 1109.76,1206.54 1110.34,1206.54 1110.93,1206.54 1111.52,1206.54 1112.1,1206.54 1112.69,1206.54 1113.28,1206.54 1113.86,1206.54 1114.45,1206.54 1115.04,1206.54 1115.62,1206.54 1116.21,1206.54 1116.8,1206.54 1117.38,1206.54 1117.97,1206.54 1118.55,1206.54 1119.14,1206.54 1119.73,1206.54 1120.31,1206.54 1120.9,1206.54 1121.49,1206.54 1122.07,1206.54 1122.66,1206.54 1123.25,1206.54 1123.83,1206.54 1124.42,1206.54 1125.01,1206.54 1125.59,1206.54 1126.18,1206.54 1126.76,1206.54 1127.35,1206.54 1127.94,1206.54 1128.52,1206.54 1129.11,1206.54 1129.7,1206.54 1130.28,1206.54 1130.87,1206.54 1131.46,1206.54 1132.04,1206.54 1132.63,1206.54 1133.21,1206.54 1133.8,1206.54 1134.39,1206.54 1134.97,1206.54 1135.56,1206.54 1136.15,1206.54 1136.73,1206.54 1137.32,1206.54 1137.91,1206.54 1138.49,1206.54 1139.08,1206.54 1139.67,1206.54 1140.25,1206.54 1140.84,1206.54 1141.42,1206.54 1142.01,1206.54 1142.6,1206.54 1143.18,1206.54 1143.77,1206.54 1144.36,1206.54 1144.94,1206.54 1145.53,1206.54 1146.12,1206.54 1146.7,1206.54 1147.29,1206.54 1147.88,1206.54 1148.46,1206.54 1149.05,1206.54 1149.63,1206.54 1150.22,1206.54 1150.81,1206.54 1151.39,1206.54 1151.98,1206.54 1152.57,1206.54 1153.15,1206.54 1153.74,1206.54 1154.33,1206.54 1154.91,1206.54 1155.5,1206.54 1156.09,1206.54 1156.67,1206.54 1157.26,1206.54 1157.84,1206.54 1158.43,1206.54 1159.02,1206.54 1159.6,1206.54 1160.19,1206.54 1160.78,1206.54 1161.36,1206.54 1161.95,1206.54 1162.54,1206.54 1163.12,1206.54 1163.71,1206.54 1164.29,1206.54 1164.88,1206.54 1165.47,1206.54 1166.05,1206.54 1166.64,1206.54 1167.23,1206.54 1167.81,1206.54 1168.4,1206.54 1168.99,1206.54 1169.57,1206.54 1170.16,1206.54 1170.75,1206.54 1171.33,1206.54 1171.92,1206.54 1172.5,1206.54 1173.09,1206.54 1173.68,1206.54 1174.26,1206.54 1174.85,1206.54 1175.44,1206.54 1176.02,1206.54 1176.61,1206.54 1177.2,1206.54 1177.78,1206.54 1178.37,1206.54 1178.96,1206.54 1179.54,1206.54 1180.13,1206.54 1180.71,1206.54 1181.3,1206.54 1181.89,1206.54 1182.47,1206.54 1183.06,1206.54 1183.65,1206.54 1184.23,1206.54 1184.82,1206.54 1185.41,1206.54 1185.99,1206.54 1186.58,1206.54 1187.16,1206.54 1187.75,1206.54 1188.34,1206.54 1188.92,1206.54 1189.51,1206.54 1190.1,1206.54 1190.68,1206.54 1191.27,1206.54 1191.86,1206.54 1192.44,1206.54 1193.03,1206.54 1193.62,1206.54 1194.2,1206.54 1194.79,1206.54 1195.37,1206.54 1195.96,1206.54 1196.55,1206.54 1197.13,1206.54 1197.72,1206.54 1198.31,1206.54 1198.89,1206.54 1199.48,1206.54 1200.07,1206.54 1200.65,1206.54 1201.24,1206.54 1201.83,1206.54 1202.41,1206.54 1203,1206.54 1203.58,1206.54 1204.17,1206.54 1204.76,1206.54 1205.34,1206.54 1205.93,1206.54 1206.52,1206.54 1207.1,1206.54 1207.69,1206.54 1208.28,1206.54 1208.86,1206.54 1209.45,1206.54 1210.03,1206.54 1210.62,1206.54 1211.21,1206.54 1211.79,1206.54 1212.38,1206.54 1212.97,1206.54 1213.55,1206.54 1214.14,1206.54 1214.73,1206.54 1215.31,1206.54 1215.9,1206.54 1216.49,1206.54 1217.07,1206.54 1217.66,1206.54 1218.24,1206.54 1218.83,1206.54 1219.42,1206.54 1220,1206.54 1220.59,1206.54 1221.18,1206.54 1221.76,1206.54 1222.35,1206.54 1222.94,1206.54 1223.52,1206.54 1224.11,1206.54 1224.7,1206.54 1225.28,1206.54 1225.87,1206.54 1226.45,1206.54 1227.04,1206.54 1227.63,1206.54 1228.21,1206.54 1228.8,1206.54 1229.39,1206.54 1229.97,1206.54 1230.56,1206.54 1231.15,1206.54 1231.73,1206.54 1232.32,1206.54 1232.91,1206.54 1233.49,1206.54 1234.08,1206.54 1234.66,1206.54 1235.25,1206.54 1235.84,1206.54 1236.42,1206.54 1237.01,1206.54 1237.6,1206.54 1238.18,1206.54 1238.77,1206.54 1239.36,1206.54 1239.94,1206.54 1240.53,1206.54 1241.11,1206.54 1241.7,1206.54 1242.29,1206.54 1242.87,1206.54 1243.46,1206.54 1244.05,1206.54 1244.63,1206.54 1245.22,1206.54 1245.81,1206.54 1246.39,1206.54 1246.98,1206.54 1247.57,1206.54 1248.15,1206.54 1248.74,1206.54 1249.32,1206.54 1249.91,1206.54 1250.5,1206.54 1251.08,1206.54 1251.67,1206.54 1252.26,1206.54 1252.84,1206.54 1253.43,1206.54 1254.02,1206.54 1254.6,1206.54 1255.19,1206.54 1255.78,1206.54 1256.36,1206.54 1256.95,1206.54 1257.53,1206.54 1258.12,1206.54 1258.71,1206.54 1259.29,1206.54 1259.88,1206.54 1260.47,1206.54 1261.05,1206.54 1261.64,1206.54 1262.23,1206.54 1262.81,1206.54 1263.4,1206.54 1263.98,1206.54 1264.57,1206.54 1265.16,1206.54 1265.74,1206.54 1266.33,1206.54 1266.92,1206.54 1267.5,1206.54 1268.09,1206.54 1268.68,1206.54 1269.26,1206.54 1269.85,1206.54 1270.44,1206.54 1271.02,1206.54 1271.61,1206.54 1272.19,1206.54 1272.78,1206.54 1273.37,1206.54 1273.95,1206.54 1274.54,1206.54 1275.13,1206.54 1275.71,1206.54 1276.3,1206.54 1276.89,1206.54 1277.47,1206.54 1278.06,1206.54 1278.65,1206.54 1279.23,1206.54 1279.82,1206.54 1280.4,1206.54 1280.99,1206.54 1281.58,1206.54 1282.16,1206.54 1282.75,1206.54 1283.34,1206.54 1283.92,1206.54 1284.51,1206.54 1285.1,1206.54 1285.68,1206.54 1286.27,1206.54 1286.86,1206.54 1287.44,1206.54 1288.03,1206.54 1288.61,1206.54 1289.2,1206.54 1289.79,1206.54 1290.37,1206.54 1290.96,1206.54 1291.55,1206.54 1292.13,1206.54 1292.72,1206.54 1293.31,1206.54 1293.89,1206.54 1294.48,1206.54 1295.06,1206.54 1295.65,1206.54 1296.24,1206.54 1296.82,1206.54 1297.41,1206.54 1298,1206.54 1298.58,1206.54 1299.17,1206.54 1299.76,1206.54 1300.34,1206.54 1300.93,1206.54 1301.52,1206.54 1302.1,1206.54 1302.69,1206.54 1303.27,1206.54 1303.86,1206.54 1304.45,1206.54 1305.03,1206.54 1305.62,1206.54 1306.21,1206.54 1306.79,1206.54 1307.38,1206.54 1307.97,1206.54 1308.55,1206.54 1309.14,1206.54 1309.73,1206.54 1310.31,1206.54 1310.9,1206.54 1311.48,1206.54 1312.07,1206.54 1312.66,1206.54 1313.24,1206.54 1313.83,1206.54 1314.42,1206.54 1315,1206.54 1315.59,1206.54 1316.18,1206.54 1316.76,1206.54 1317.35,1206.54 1317.93,1206.54 1318.52,1206.54 1319.11,1206.54 1319.69,1206.54 1320.28,1206.54 1320.87,1206.54 1321.45,1206.54 1322.04,1206.54 1322.63,1206.54 1323.21,1206.54 1323.8,1206.54 1324.39,1206.54 1324.97,1206.54 1325.56,1206.54 1326.14,1206.54 1326.73,1206.54 1327.32,1206.54 1327.9,1206.54 1328.49,1206.54 1329.08,1206.54 1329.66,1206.54 1330.25,1206.54 1330.84,1206.54 1331.42,1206.54 1332.01,1206.54 1332.6,1206.54 1333.18,1206.54 1333.77,1206.54 1334.35,1206.54 1334.94,1206.54 1335.53,1206.54 1336.11,1206.54 1336.7,1206.54 1337.29,1206.54 1337.87,1206.54 1338.46,1206.54 1339.05,1206.54 1339.63,1206.54 1340.22,1206.54 1340.8,1206.54 1341.39,1206.54 1341.98,1206.54 1342.56,1206.54 1343.15,1206.54 1343.74,1206.54 1344.32,1206.54 1344.91,1206.54 1345.5,1206.54 1346.08,1206.54 1346.67,1206.54 1347.26,1206.54 1347.84,1206.54 1348.43,1206.54 1349.01,1206.54 1349.6,1206.54 1350.19,1206.54 1350.77,1206.54 1351.36,1206.54 1351.95,1206.54 1352.53,1206.54 1353.12,1206.54 1353.71,1206.54 1354.29,1206.54 1354.88,1206.54 1355.47,1206.54 1356.05,1206.54 1356.64,1206.54 1357.22,1206.54 1357.81,1206.54 1358.4,1206.54 1358.98,1206.54 1359.57,1206.54 1360.16,1206.54 1360.74,1206.54 1361.33,1206.54 1361.92,1206.54 1362.5,1206.54 1363.09,1206.54 1363.68,1206.54 1364.26,1206.54 1364.85,1206.54 1365.43,1206.54 1366.02,1206.54 1366.61,1206.54 1367.19,1206.54 1367.78,1206.54 1368.37,1206.54 1368.95,1206.54 1369.54,1206.54 1370.13,1206.54 1370.71,1206.54 1371.3,1206.54 1371.88,1206.54 1372.47,1206.54 1373.06,1206.54 1373.64,1206.54 1374.23,1206.54 1374.82,1206.54 1375.4,1206.54 1375.99,1206.54 1376.58,1206.54 1377.16,1206.54 1377.75,1206.54 1378.34,1206.54 1378.92,1206.54 1379.51,1206.54 1380.09,1206.54 1380.68,1206.54 1381.27,1206.54 1381.85,1206.54 1382.44,1206.54 1383.03,1206.54 1383.61,1206.54 1384.2,1206.54 1384.79,1206.54 1385.37,1206.54 1385.96,1206.54 1386.55,1206.54 1387.13,1206.54 1387.72,1206.54 1388.3,1206.54 1388.89,1206.54 1389.48,1206.54 1390.06,1206.54 1390.65,1206.54 1391.24,1206.54 1391.82,1206.54 1392.41,1206.54 1393,1206.54 1393.58,1206.54 1394.17,1206.54 1394.75,1206.54 1395.34,1206.54 1395.93,1206.54 1396.51,1206.54 1397.1,1206.54 1397.69,1206.54 1398.27,1206.54 1398.86,1206.54 1399.45,1206.54 1400.03,1206.54 1400.62,1206.54 1401.21,1206.54 1401.79,1206.54 1402.38,1206.54 1402.96,1206.54 1403.55,1206.54 1404.14,1206.54 1404.72,1206.54 1405.31,1206.54 1405.9,1206.54 1406.48,1206.54 1407.07,1206.54 1407.66,1206.54 1408.24,1206.54 1408.83,1206.54 1409.42,1206.54 1410,1206.54 1410.59,1206.54 1411.17,1206.54 1411.76,1206.54 1412.35,1206.54 1412.93,1206.54 1413.52,1206.54 1414.11,1206.54 1414.69,1206.54 1415.28,1206.54 1415.87,1206.54 1416.45,1206.54 1417.04,1206.54 1417.63,1206.54 1418.21,1206.54 1418.8,1206.54 1419.38,1206.54 1419.97,1206.54 1420.56,1206.54 1421.14,1206.54 1421.73,1206.54 1422.32,1206.54 1422.9,1206.54 1423.49,1206.54 1424.08,1206.54 1424.66,1206.54 1425.25,1206.54 1425.83,1206.54 1426.42,1206.54 1427.01,1206.54 1427.59,1206.54 1428.18,1206.54 1428.77,1206.54 1429.35,1206.54 1429.94,1206.54 1430.53,1206.54 1431.11,1206.54 1431.7,1206.54 1432.29,1206.54 1432.87,1206.54 1433.46,1206.54 1434.04,1206.54 1434.63,1206.54 1435.22,1206.54 1435.8,1206.54 1436.39,1206.54 1436.98,1206.54 1437.56,1206.54 1438.15,1206.54 1438.74,1206.54 1439.32,1206.54 1439.91,1206.54 1440.5,1206.54 1441.08,1206.54 1441.67,1206.54 1442.25,1206.54 1442.84,1206.54 1443.43,1206.54 1444.01,1206.54 1444.6,1206.54 1445.19,1206.54 1445.77,1206.54 1446.36,1206.54 1446.95,1206.54 1447.53,1206.54 1448.12,1206.54 1448.7,1206.54 1449.29,1206.54 1449.88,1206.54 1450.46,1206.54 1451.05,1206.54 1451.64,1206.54 1452.22,1206.54 1452.81,1206.54 1453.4,1206.54 1453.98,1206.54 1454.57,1206.54 1455.16,1206.54 1455.74,1206.54 1456.33,1206.54 1456.91,1206.54 1457.5,1206.54 1458.09,1206.54 1458.67,1206.54 1459.26,1206.54 1459.85,1206.54 1460.43,1206.54 1461.02,1206.54 1461.61,1206.54 1462.19,1206.54 1462.78,1206.54 1463.37,1206.54 1463.95,1206.54 1464.54,1206.54 1465.12,1206.54 1465.71,1206.54 1466.3,1206.54 1466.88,1206.54 1467.47,1206.54 1468.06,1206.54 1468.64,1206.54 1469.23,1206.54 1469.82,1206.54 1470.4,1206.54 1470.99,1206.54 1471.57,1206.54 1472.16,1206.54 1472.75,1206.54 1473.33,1206.54 1473.92,1206.54 1474.51,1206.54 1475.09,1206.54 1475.68,1206.54 1476.27,1206.54 1476.85,1206.54 1477.44,1206.54 1478.03,1206.54 1478.61,1206.54 1479.2,1206.54 1479.78,1206.54 1480.37,1206.54 1480.96,1206.54 1481.54,1206.54 1482.13,1206.54 1482.72,1206.54 1483.3,1206.54 1483.89,1206.54 1484.48,1206.54 1485.06,1206.54 1485.65,1206.54 1486.24,1206.54 1486.82,1206.54 1487.41,1206.54 1487.99,1206.54 1488.58,1206.54 1489.17,1206.54 1489.75,1206.54 1490.34,1206.54 1490.93,1206.54 1491.51,1206.54 1492.1,1206.54 1492.69,1206.54 1493.27,1206.54 1493.86,1206.54 1494.45,1206.54 1495.03,1206.54 1495.62,1206.54 1496.2,1206.54 1496.79,1206.54 1497.38,1206.54 1497.96,1206.54 1498.55,1206.54 1499.14,1206.54 1499.72,1206.54 1500.31,1206.54 1500.9,1206.54 1501.48,1206.54 1502.07,1206.54 1502.65,1206.54 1503.24,1206.54 1503.83,1206.54 1504.41,1206.54 1505,1206.54 1505.59,1206.54 1506.17,1206.54 1506.76,1206.54 1507.35,1206.54 1507.93,1206.54 1508.52,1206.54 1509.11,1206.54 1509.69,1206.54 1510.28,1206.54 1510.86,1206.54 1511.45,1206.54 1512.04,1206.54 1512.62,1206.54 1513.21,1206.54 1513.8,1206.54 1514.38,1206.54 1514.97,1206.54 1515.56,1206.54 1516.14,1206.54 1516.73,1206.54 1517.32,1206.54 1517.9,1206.54 1518.49,1206.54 1519.07,1206.54 1519.66,1206.54 1520.25,1206.54 1520.83,1206.54 1521.42,1206.54 1522.01,1206.54 1522.59,1206.54 1523.18,1206.54 1523.77,1206.54 1524.35,1206.54 1524.94,1206.54 1525.52,1206.54 1526.11,1206.54 1526.7,1206.54 1527.28,1206.54 1527.87,1206.54 1528.46,1206.54 1529.04,1206.54 1529.63,1206.54 1530.22,1206.54 1530.8,1206.54 1531.39,1206.54 1531.98,1206.54 1532.56,1206.54 1533.15,1206.54 1533.73,1206.54 1534.32,1206.54 1534.91,1206.54 1535.49,1206.54 1536.08,1206.54 1536.67,1206.54 1537.25,1206.54 1537.84,1206.54 1538.43,1206.54 1539.01,1206.54 1539.6,1206.54 1540.19,1206.54 1540.77,1206.54 1541.36,1206.54 1541.94,1206.54 1542.53,1206.54 1543.12,1206.54 1543.7,1206.54 1544.29,1206.54 1544.88,1206.54 1545.46,1206.54 1546.05,1206.54 1546.64,1206.54 1547.22,1206.54 1547.81,1206.54 1548.4,1206.54 1548.98,1206.54 1549.57,1206.54 1550.15,1206.54 1550.74,1206.54 1551.33,1206.54 1551.91,1206.54 1552.5,1206.54 1553.09,1206.54 1553.67,1206.54 1554.26,1206.54 1554.85,1206.54 1555.43,1206.54 1556.02,1206.54 1556.6,1206.54 1557.19,1206.54 1557.78,1206.54 1558.36,1206.54 1558.95,1206.54 1559.54,1206.54 1560.12,1206.54 1560.71,1206.54 1561.3,1206.54 1561.88,1206.54 1562.47,1206.54 1563.06,1206.54 1563.64,1206.54 1564.23,1206.54 1564.81,1206.54 1565.4,1206.54 1565.99,1206.54 1566.57,1206.54 1567.16,1206.54 1567.75,1206.54 1568.33,1206.54 1568.92,1206.54 1569.51,1206.54 1570.09,1206.54 1570.68,1206.54 1571.27,1206.54 1571.85,1206.54 1572.44,1206.54 1573.02,1206.54 1573.61,1206.54 1574.2,1206.54 1574.78,1206.54 1575.37,1206.54 1575.96,1206.54 1576.54,1206.54 1577.13,1206.54 1577.72,1206.54 1578.3,1206.54 1578.89,1206.54 1579.47,1206.54 1580.06,1206.54 1580.65,1206.54 1581.23,1206.54 1581.82,1206.54 1582.41,1206.54 1582.99,1206.54 1583.58,1206.54 1584.17,1206.54 1584.75,1206.54 1585.34,1206.54 1585.93,1206.54 1586.51,1206.54 1587.1,1206.54 1587.68,1206.54 1588.27,1206.54 1588.86,1206.54 1589.44,1206.54 1590.03,1206.54 1590.62,1206.54 1591.2,1206.54 1591.79,1206.54 1592.38,1206.54 1592.96,1206.54 1593.55,1206.54 1594.14,1206.54 1594.72,1206.54 1595.31,1206.54 1595.89,1206.54 1596.48,1206.54 1597.07,1206.54 1597.65,1206.54 1598.24,1206.54 1598.83,1206.54 1599.41,1206.54 1600,1206.54 1600.59,1206.54 1601.17,1206.54 1601.76,1206.54 1602.34,1206.54 1602.93,1206.54 1603.52,1206.54 1604.1,1206.54 1604.69,1206.54 1605.28,1206.54 1605.86,1206.54 1606.45,1206.54 1607.04,1206.54 1607.62,1206.54 1608.21,1206.54 1608.8,1206.54 1609.38,1206.54 1609.97,1206.54 1610.55,1206.54 1611.14,1206.54 1611.73,1206.54 1612.31,1206.54 1612.9,1206.54 1613.49,1206.54 1614.07,1206.54 1614.66,1206.54 1615.25,1206.54 1615.83,1206.54 1616.42,1206.54 1617.01,1206.54 1617.59,1206.54 1618.18,1206.54 1618.76,1206.54 1619.35,1206.54 1619.94,1206.54 1620.52,1206.54 1621.11,1206.54 1621.7,1206.54 1622.28,1206.54 1622.87,1206.54 1623.46,1206.54 1624.04,1206.54 1624.63,1206.54 1625.22,1206.54 1625.8,1206.54 1626.39,1206.54 1626.97,1206.54 1627.56,1206.54 1628.15,1206.54 1628.73,1206.54 1629.32,1206.54 1629.91,1206.54 1630.49,1206.54 1631.08,1206.54 1631.67,1206.54 1632.25,1206.54 1632.84,1206.54 1633.42,1206.54 1634.01,1206.54 1634.6,1206.54 1635.18,1206.54 1635.77,1206.54 1636.36,1206.54 1636.94,1206.54 1637.53,1206.54 1638.12,1206.54 1638.7,1206.54 1639.29,1206.54 1639.88,1206.54 1640.46,1206.54 1641.05,1206.54 1641.63,1206.54 1642.22,1206.54 1642.81,1206.54 1643.39,1206.54 1643.98,1206.54 1644.57,1206.54 1645.15,1206.54 1645.74,1206.54 1646.33,1206.54 1646.91,1206.54 1647.5,1206.54 1648.09,1206.54 1648.67,1206.54 1649.26,1206.54 1649.84,1206.54 1650.43,1206.54 1651.02,1206.54 1651.6,1206.54 1652.19,1206.54 1652.78,1206.54 1653.36,1206.54 1653.95,1206.54 1654.54,1206.54 1655.12,1206.54 1655.71,1206.54 1656.29,1206.54 1656.88,1206.54 1657.47,1206.54 1658.05,1206.54 1658.64,1206.54 1659.23,1206.54 1659.81,1206.54 1660.4,1206.54 1660.99,1206.54 1661.57,1206.54 1662.16,1206.54 1662.75,1206.54 1663.33,1206.54 1663.92,1206.54 1664.5,1206.54 1665.09,1206.54 1665.68,1206.54 1666.26,1206.54 1666.85,1206.54 1667.44,1206.54 1668.02,1206.54 1668.61,1206.54 1669.2,1206.54 1669.78,1206.54 1670.37,1206.54 1670.96,1206.54 1671.54,1206.54 1672.13,1206.54 1672.71,1206.54 1673.3,1206.54 1673.89,1206.54 1674.47,1206.54 1675.06,1206.54 1675.65,1206.54 1676.23,1206.54 1676.82,1206.54 1677.41,1206.54 1677.99,1206.54 1678.58,1206.54 1679.17,1206.54 1679.75,1206.54 1680.34,1206.54 1680.92,1206.54 1681.51,1206.54 1682.1,1206.54 1682.68,1206.54 1683.27,1206.54 1683.86,1206.54 1684.44,1206.54 1685.03,1206.54 1685.62,1206.54 1686.2,1206.54 1686.79,1206.54 1687.37,1206.54 1687.96,1206.54 1688.55,1206.54 1689.13,1206.54 1689.72,1206.54 1690.31,1206.54 1690.89,1206.54 1691.48,1206.54 1692.07,1206.54 1692.65,1206.54 1693.24,1206.54 1693.83,1206.54 1694.41,1206.54 1695,1206.54 1695.58,1206.54 1696.17,1206.54 1696.76,1206.54 1697.34,1206.54 1697.93,1206.54 1698.52,1206.54 1699.1,1206.54 1699.69,1206.54 1700.28,1206.54 1700.86,1206.54 1701.45,1206.54 1702.04,1206.54 1702.62,1206.54 1703.21,1206.54 1703.79,1206.54 1704.38,1206.54 1704.97,1206.54 1705.55,1206.54 1706.14,1206.54 1706.73,1206.54 1707.31,1206.54 1707.9,1206.54 1708.49,1206.54 1709.07,1206.54 1709.66,1206.54 1710.24,1206.54 1710.83,1206.54 1711.42,1206.54 1712,1206.54 1712.59,1206.54 1713.18,1206.54 1713.76,1206.54 1714.35,1206.54 1714.94,1206.54 1715.52,1206.54 1716.11,1206.54 1716.7,1206.54 1717.28,1206.54 1717.87,1206.54 1718.45,1206.54 1719.04,1206.54 1719.63,1206.54 1720.21,1206.54 1720.8,1206.54 1721.39,1206.54 1721.97,1206.54 1722.56,1206.54 1723.15,1206.54 1723.73,1206.54 1724.32,1206.54 1724.91,1206.54 1725.49,1206.54 1726.08,1206.54 1726.66,1206.54 1727.25,1206.54 1727.84,1206.54 1728.42,1206.54 1729.01,1206.54 1729.6,1206.54 1730.18,1206.54 1730.77,1206.54 1731.36,1206.54 1731.94,1206.54 1732.53,1206.54 1733.11,1206.54 1733.7,1206.54 1734.29,1206.54 1734.87,1206.54 1735.46,1206.54 1736.05,1206.54 1736.63,1206.54 1737.22,1206.54 1737.81,1206.54 1738.39,1206.54 1738.98,1206.54 1739.57,1206.54 1740.15,1206.54 1740.74,1206.54 1741.32,1206.54 1741.91,1206.54 1742.5,1206.54 1743.08,1206.54 1743.67,1206.54 1744.26,1206.54 1744.84,1206.54 1745.43,1206.54 1746.02,1206.54 1746.6,1206.54 1747.19,1206.54 1747.78,1206.54 1748.36,1206.54 1748.95,1206.54 1749.53,1206.54 1750.12,1206.54 1750.71,1206.54 1751.29,1206.54 1751.88,1206.54 1752.47,1206.54 1753.05,1206.54 1753.64,1206.54 1754.23,1206.54 1754.81,1206.54 1755.4,1206.54 1755.99,1206.54 1756.57,1206.54 1757.16,1206.54 1757.74,1206.54 1758.33,1206.54 1758.92,1206.54 1759.5,1206.54 1760.09,1206.54 1760.68,1206.54 1761.26,1206.54 1761.85,1206.54 1762.44,1206.54 1763.02,1206.54 1763.61,1206.54 1764.19,1206.54 1764.78,1206.54 1765.37,1206.54 1765.95,1206.54 1766.54,1206.54 1767.13,1206.54 1767.71,1206.54 1768.3,1206.54 1768.89,1206.54 1769.47,1206.54 1770.06,1206.54 1770.65,1206.54 1771.23,1206.54 1771.82,1206.54 1772.4,1206.54 1772.99,1206.54 1773.58,1206.54 1774.16,1206.54 1774.75,1206.54 1775.34,1206.54 1775.92,1206.54 1776.51,1206.54 1777.1,1206.54 1777.68,1206.54 1778.27,1206.54 1778.86,1206.54 1779.44,1206.54 1780.03,1206.54 1780.61,1206.54 1781.2,1206.54 1781.79,1206.54 1782.37,1206.54 1782.96,1206.54 1783.55,1206.54 1784.13,1206.54 1784.72,1206.54 1785.31,1206.54 1785.89,1206.54 1786.48,1206.54 1787.06,1206.54 1787.65,1206.54 1788.24,1206.54 1788.82,1206.54 1789.41,1206.54 1790,1206.54 1790.58,1206.54 1791.17,1206.54 1791.76,1206.54 1792.34,1206.54 1792.93,1206.54 1793.52,1206.54 1794.1,1206.54 1794.69,1206.54 1795.27,1206.54 1795.86,1206.54 1796.45,1206.54 1797.03,1206.54 1797.62,1206.54 1798.21,1206.54 1798.79,1206.54 1799.38,1206.54 1799.97,1206.54 1800.55,1206.54 1801.14,1206.54 1801.73,1206.54 1802.31,1206.54 1802.9,1206.54 1803.48,1206.54 1804.07,1206.54 1804.66,1206.54 1805.24,1206.54 1805.83,1206.54 1806.42,1206.54 1807,1206.54 1807.59,1206.54 1808.18,1206.54 1808.76,1206.54 1809.35,1206.54 1809.94,1206.54 1810.52,1206.54 1811.11,1206.54 1811.69,1206.54 1812.28,1206.54 1812.87,1206.54 1813.45,1206.54 1814.04,1206.54 1814.63,1206.54 1815.21,1206.54 1815.8,1206.54 1816.39,1206.54 1816.97,1206.54 1817.56,1206.54 1818.14,1206.54 1818.73,1206.54 1819.32,1206.54 1819.9,1206.54 1820.49,1206.54 1821.08,1206.54 1821.66,1206.54 1822.25,1206.54 1822.84,1206.54 1823.42,1206.54 1824.01,1206.54 1824.6,1206.54 1825.18,1206.54 1825.77,1206.54 1826.35,1206.54 1826.94,1206.54 1827.53,1206.54 1828.11,1206.54 1828.7,1206.54 1829.29,1206.54 1829.87,1206.54 1830.46,1206.54 1831.05,1206.54 1831.63,1206.54 1832.22,1206.54 1832.81,1206.54 1833.39,1206.54 1833.98,1206.54 1834.56,1206.54 1835.15,1206.54 1835.74,1206.54 1836.32,1206.54 1836.91,1206.54 1837.5,1206.54 1838.08,1206.54 1838.67,1206.54 1839.26,1206.54 1839.84,1206.54 1840.43,1206.54 1841.01,1206.54 1841.6,1206.54 1842.19,1206.54 1842.77,1206.54 1843.36,1206.54 1843.95,1206.54 1844.53,1206.54 1845.12,1206.54 1845.71,1206.54 1846.29,1206.54 1846.88,1206.54 1847.47,1206.54 1848.05,1206.54 1848.64,1206.54 1849.22,1206.54 1849.81,1206.54 1850.4,1206.54 1850.98,1206.54 1851.57,1206.54 1852.16,1206.54 1852.74,1206.54 1853.33,1206.54 1853.92,1206.54 1854.5,1206.54 1855.09,1206.54 1855.68,1206.54 1856.26,1206.54 1856.85,1206.54 1857.43,1206.54 1858.02,1206.54 1858.61,1206.54 1859.19,1206.54 1859.78,1206.54 1860.37,1206.54 1860.95,1206.54 1861.54,1206.54 1862.13,1206.54 1862.71,1206.54 1863.3,1206.54 1863.88,1206.54 1864.47,1206.54 1865.06,1206.54 1865.64,1206.54 1866.23,1206.54 1866.82,1206.54 1867.4,1206.54 1867.99,1206.54 1868.58,1206.54 1869.16,1206.54 1869.75,1206.54 1870.34,1206.54 1870.92,1206.54 1871.51,1206.54 1872.09,1206.54 1872.68,1206.54 1873.27,1206.54 1873.85,1206.54 1874.44,1206.54 1875.03,1206.54 1875.61,1206.54 1876.2,1206.54 1876.79,1206.54 1877.37,1206.54 1877.96,1206.54 1878.55,1206.54 1879.13,1206.54 1879.72,1206.54 1880.3,1206.54 1880.89,1206.54 1881.48,1206.54 1882.06,1206.54 1882.65,1206.54 1883.24,1206.54 1883.82,1206.54 1884.41,1206.54 1885,1206.54 1885.58,1206.54 1886.17,1206.54 1886.76,1206.54 1887.34,1206.54 1887.93,1206.54 1888.51,1206.54 1889.1,1206.54 1889.69,1206.54 1890.27,1206.54 1890.86,1206.54 1891.45,1206.54 1892.03,1206.54 1892.62,1206.54 1893.21,1206.54 1893.79,1206.54 1894.38,1206.54 1894.96,1206.54 1895.55,1206.54 1896.14,1206.54 1896.72,1206.54 1897.31,1206.54 1897.9,1206.54 1898.48,1206.54 1899.07,1206.54 1899.66,1206.54 1900.24,1206.54 1900.83,1206.54 1901.42,1206.54 1902,1206.54 1902.59,1206.54 1903.17,1206.54 1903.76,1206.54 1904.35,1206.54 1904.93,1206.54 1905.52,1206.54 1906.11,1206.54 1906.69,1206.54 1907.28,1206.54 1907.87,1206.54 1908.45,1206.54 1909.04,1206.54 1909.63,1206.54 1910.21,1206.54 1910.8,1206.54 1911.38,1206.54 1911.97,1206.54 1912.56,1206.54 1913.14,1206.54 1913.73,1206.54 1914.32,1206.54 1914.9,1206.54 1915.49,1206.54 1916.08,1206.54 1916.66,1206.54 1917.25,1206.54 1917.83,1206.54 1918.42,1206.54 1919.01,1206.54 1919.59,1206.54 1920.18,1206.54 1920.77,1206.54 1921.35,1206.54 1921.94,1206.54 1922.53,1206.54 1923.11,1206.54 1923.7,1206.54 1924.29,1206.54 1924.87,1206.54 1925.46,1206.54 1926.04,1206.54 1926.63,1206.54 1927.22,1206.54 1927.8,1206.54 1928.39,1206.54 1928.98,1206.54 1929.56,1206.54 1930.15,1206.54 1930.74,1206.54 1931.32,1206.54 1931.91,1206.54 1932.5,1206.54 1933.08,1206.54 1933.67,1206.54 1934.25,1206.54 1934.84,1206.54 1935.43,1206.54 1936.01,1206.54 1936.6,1206.54 1937.19,1206.54 1937.77,1206.54 1938.36,1206.54 1938.95,1206.54 1939.53,1206.54 1940.12,1206.54 1940.71,1206.54 1941.29,1206.54 1941.88,1206.54 1942.46,1206.54 1943.05,1206.54 1943.64,1206.54 1944.22,1206.54 1944.81,1206.54 1945.4,1206.54 1945.98,1206.54 1946.57,1206.54 1947.16,1206.54 1947.74,1206.54 1948.33,1206.54 1948.91,1206.54 1949.5,1206.54 1950.09,1206.54 1950.67,1206.54 1951.26,1206.54 1951.85,1206.54 1952.43,1206.54 1953.02,1206.54 1953.61,1206.54 1954.19,1206.54 1954.78,1206.54 1955.37,1206.54 1955.95,1206.54 1956.54,1206.54 1957.12,1206.54 1957.71,1206.54 1958.3,1206.54 1958.88,1206.54 1959.47,1206.54 1960.06,1206.54 1960.64,1206.54 1961.23,1206.54 1961.82,1206.54 1962.4,1206.54 1962.99,1206.54 1963.58,1206.54 1964.16,1206.54 1964.75,1206.54 1965.33,1206.54 1965.92,1206.54 1966.51,1206.54 1967.09,1206.54 1967.68,1206.54 1968.27,1206.54 1968.85,1206.54 1969.44,1206.54 1970.03,1206.54 1970.61,1206.54 1971.2,1206.54 1971.78,1206.54 1972.37,1206.54 1972.96,1206.54 1973.54,1206.54 1974.13,1206.54 1974.72,1206.54 1975.3,1206.54 1975.89,1206.54 1976.48,1206.54 1977.06,1206.54 1977.65,1206.54 1978.24,1206.54 1978.82,1206.54 1979.41,1206.54 1979.99,1206.54 1980.58,1206.54 1981.17,1206.54 1981.75,1206.54 1982.34,1206.54 1982.93,1206.54 1983.51,1206.54 1984.1,1206.54 1984.69,1206.54 1985.27,1206.54 1985.86,1206.54 1986.45,1206.54 1987.03,1206.54 1987.62,1206.54 1988.2,1206.54 1988.79,1206.54 1989.38,1206.54 1989.96,1206.54 1990.55,1206.54 1991.14,1206.54 1991.72,1206.54 1992.31,1206.54 1992.9,1206.54 1993.48,1206.54 1994.07,1206.54 1994.65,1206.54 1995.24,1206.54 1995.83,1206.54 1996.41,1206.54 1997,1206.54 1997.59,1206.54 1998.17,1206.54 1998.76,1206.54 1999.35,1206.54 1999.93,1206.54 2000.52,1206.54 2001.11,1206.54 2001.69,1206.54 2002.28,1206.54 2002.86,1206.54 2003.45,1206.54 2004.04,1206.54 2004.62,1206.54 2005.21,1206.54 2005.8,1206.54 2006.38,1206.54 2006.97,1206.54 2007.56,1206.54 2008.14,1206.54 2008.73,1206.54 2009.32,1206.54 2009.9,1206.54 2010.49,1206.54 2011.07,1206.54 2011.66,1206.54 2012.25,1206.54 2012.83,1206.54 2013.42,1206.54 2014.01,1206.54 2014.59,1206.54 2015.18,1206.54 2015.77,1206.54 2016.35,1206.54 2016.94,1206.54 2017.53,1206.54 2018.11,1206.54 2018.7,1206.54 2019.28,1206.54 2019.87,1206.54 2020.46,1206.54 2021.04,1206.54 2021.63,1206.54 2022.22,1206.54 2022.8,1206.54 2023.39,1206.54 2023.98,1206.54 2024.56,1206.54 2025.15,1206.54 2025.73,1206.54 2026.32,1206.54 2026.91,1206.54 2027.49,1206.54 2028.08,1206.54 2028.67,1206.54 2029.25,1206.54 2029.84,1206.54 2030.43,1206.54 2031.01,1206.54 2031.6,1206.54 2032.19,1206.54 2032.77,1206.54 2033.36,1206.54 2033.94,1206.54 2034.53,1206.54 2035.12,1206.54 2035.7,1206.54 2036.29,1206.54 2036.88,1206.54 2037.46,1206.54 2038.05,1206.54 2038.64,1206.54 2039.22,1206.54 2039.81,1206.54 2040.4,1206.54 2040.98,1206.54 2041.57,1206.54 2042.15,1206.54 2042.74,1206.54 2043.33,1206.54 2043.91,1206.54 2044.5,1206.54 2045.09,1206.54 2045.67,1206.54 2046.26,1206.54 2046.85,1206.54 2047.43,1206.54 2048.02,1206.54 2048.6,1206.54 2049.19,1206.54 2049.78,1206.54 2050.36,1206.54 2050.95,1206.54 2051.54,1206.54 2052.12,1206.54 2052.71,1206.54 2053.3,1206.54 2053.88,1206.54 2054.47,1206.54 2055.06,1206.54 2055.64,1206.54 2056.23,1206.54 2056.81,1206.54 2057.4,1206.54 2057.99,1206.54 2058.57,1206.54 2059.16,1206.54 2059.75,1206.54 2060.33,1206.54 2060.92,1206.54 2061.51,1206.54 2062.09,1206.54 2062.68,1206.54 2063.27,1206.54 2063.85,1206.54 2064.44,1206.54 2065.02,1206.54 2065.61,1206.54 2066.2,1206.54 2066.78,1206.54 2067.37,1206.54 2067.96,1206.54 2068.54,1206.54 2069.13,1206.54 2069.72,1206.54 2070.3,1206.54 2070.89,1206.54 2071.48,1206.54 2072.06,1206.54 2072.65,1206.54 2073.23,1206.54 2073.82,1206.54 2074.41,1206.54 2074.99,1206.54 2075.58,1206.54 2076.17,1206.54 2076.75,1206.54 2077.34,1206.54 2077.93,1206.54 2078.51,1206.54 2079.1,1206.54 2079.68,1206.54 2080.27,1206.54 2080.86,1206.54 2081.44,1206.54 2082.03,1206.54 2082.62,1206.54 2083.2,1206.54 2083.79,1206.54 2084.38,1206.54 2084.96,1206.54 2085.55,1206.54 2086.14,1206.54 2086.72,1206.54 2087.31,1206.54 2087.89,1206.54 2088.48,1206.54 2089.07,1206.54 2089.65,1206.54 2090.24,1206.54 2090.83,1206.54 2091.41,1206.54 2092,1206.54 2092.59,1206.54 2093.17,1206.54 2093.76,1206.54 2094.35,1206.54 2094.93,1206.54 2095.52,1206.54 2096.1,1206.54 2096.69,1206.54 2097.28,1206.54 2097.86,1206.54 2098.45,1206.54 2099.04,1206.54 2099.62,1206.54 2100.21,1206.54 2100.8,1206.54 2101.38,1206.54 2101.97,1206.54 2102.55,1206.54 2103.14,1206.54 2103.73,1206.54 2104.31,1206.54 2104.9,1206.54 2105.49,1206.54 2106.07,1206.54 2106.66,1206.54 2107.25,1206.54 2107.83,1206.54 2108.42,1206.54 2109.01,1206.54 2109.59,1206.54 2110.18,1206.54 2110.76,1206.54 2111.35,1206.54 2111.94,1206.54 2112.52,1206.54 2113.11,1206.54 2113.7,1206.54 2114.28,1206.54 2114.87,1206.54 2115.46,1206.54 2116.04,1206.54 2116.63,1206.54 2117.22,1206.54 2117.8,1206.54 2118.39,1206.54 2118.97,1206.54 2119.56,1206.54 2120.15,1206.54 2120.73,1206.54 2121.32,1206.54 2121.91,1206.54 2122.49,1206.54 2123.08,1206.54 2123.67,1206.54 2124.25,1206.54 2124.84,1206.54 2125.42,1206.54 2126.01,1206.54 2126.6,1206.54 2127.18,1206.54 2127.77,1206.54 2128.36,1206.54 2128.94,1206.54 2129.53,1206.54 2130.12,1206.54 2130.7,1206.54 2131.29,1206.54 2131.88,1206.54 2132.46,1206.54 2133.05,1206.54 2133.63,1206.54 2134.22,1206.54 2134.81,1206.54 2135.39,1206.54 2135.98,1206.54 2136.57,1206.54 2137.15,1206.54 2137.74,1206.54 2138.33,1206.54 2138.91,1206.54 2139.5,1206.54 2140.09,1206.54 2140.67,1206.54 2141.26,1206.54 2141.84,1206.54 2142.43,1206.54 2143.02,1206.54 2143.6,1206.54 2144.19,1206.54 2144.78,1206.54 2145.36,1206.54 2145.95,1206.54 2146.54,1206.54 2147.12,1206.54 2147.71,1206.54 2148.3,1206.54 2148.88,1206.54 2149.47,1206.54 2150.05,1206.54 2150.64,1206.54 2151.23,1206.54 2151.81,1206.54 2152.4,1206.54 2152.99,1206.54 2153.57,1206.54 2154.16,1206.54 2154.75,1206.54 2155.33,1206.54 2155.92,1206.54 2156.5,1206.54 2157.09,1206.54 2157.68,1206.54 2158.26,1206.54 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.04,1188.64 1400.69,899.083 \"/>\n<polyline clip-path=\"url(#clip312)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1223.84 985.439,1188.64 2158.26,1188.64 2158.26,1223.84 985.439,1223.84 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip310)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip310)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip313\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip310)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip310)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip310)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip313)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-3823.39 163.232,-4929.97 163.792,-5942.15 164.351,-6841.97 164.91,-7709.23 165.469,-8497.69 166.029,-9169.05 166.588,-9797.87 167.147,-9324.37 167.706,-8945.94 168.266,-9486.1 168.825,-9950.93 169.384,-10383.2 169.943,-10753 170.503,-11090.8 171.062,-11385.5 171.621,-11022.8 172.18,-11263.4 172.74,-11450.4 173.299,-11120.7 173.858,-11271.8 174.417,-11393.4 174.977,-11487.5 175.536,-11562.7 176.095,-11241 176.655,-11284.4 177.214,-11304 177.773,-11298.8 178.332,-11284.3 178.892,-11252.7 179.451,-11199 180.01,-11138.6 180.569,-10613.5 181.129,-10544.5 181.688,-9891.13 182.247,-9822.71 182.806,-9735.29 183.366,-9640.4 183.925,-9542.7 184.484,-9436.14 185.043,-9179.31 185.603,-9062.89 186.162,-8810.5 186.721,-8677.38 187.28,-8542.2 187.84,-8396.71 188.399,-8145.71 188.958,-7711.3 189.517,-7555.33 190.077,-7398.34 190.636,-7160.74 191.195,-7007.2 191.754,-6858.06 192.314,-6556.02 192.873,-6261.53 193.432,-6116.25 193.991,-5972.94 194.551,-5832.06 195.11,-5503.4 195.669,-5360.2 196.228,-5216.17 196.788,-5072.77 197.347,-4930.94 197.906,-4741.17 198.465,-4556.98 199.025,-4429.5 199.584,-4166.35 200.143,-3961.51 200.702,-3719.36 201.262,-3535.94 201.821,-3442.29 202.38,-3306.25 202.939,-3135.53 203.499,-3007.96 204.058,-2887.94 204.617,-2768.84 205.176,-2648.52 205.736,-2432.32 206.295,-2328.14 206.854,-2192.07 207.413,-2093.75 207.973,-1872.86 208.532,-1752.36 209.091,-1665.8 209.65,-1526.25 210.21,-1503.29 210.769,-1389.59 211.328,-1230.39 211.887,-1157.12 212.447,-1055.49 213.006,-1013.21 213.565,-945.69 214.124,-850.723 214.684,-686.482 215.243,-626.53 215.802,-594.719 216.361,-537.067 216.921,-456.387 217.48,-422.777 218.039,-415.886 218.598,-358.951 219.158,-327.613 219.717,-296.994 220.276,-222.157 220.835,-195.702 221.395,-142.26 221.954,-69.7484 222.513,-42.1301 223.072,-16.7782 223.632,9.34763 224.191,79.2906 224.75,105.354 225.309,164.6 225.869,183.132 226.428,204.596 226.987,266.235 227.546,324.723 228.106,377.684 228.665,431.325 229.224,483.313 229.783,511.785 230.343,546.871 230.902,554.889 231.461,583.144 232.02,627.116 232.58,751.029 233.139,746.595 233.698,783.197 234.257,836.352 234.817,850.796 235.376,845.196 235.935,861.451 236.494,857.458 237.054,871.688 237.613,922.732 238.172,954.5 238.731,984.433 239.291,977.513 239.85,1004.68 240.409,1028.07 240.968,1053.36 241.528,1063.54 242.087,1050.82 242.646,1058.09 243.205,1050.08 243.765,1057.68 244.324,1082.61 244.883,1075.7 245.442,1033.12 246.002,1042.48 246.561,1032.12 247.12,1075.65 247.679,1063.89 248.239,1071.32 248.798,1060.07 249.357,1086.79 249.916,1073.71 250.476,1066.89 251.035,1058.36 251.594,1051.54 252.153,1079.74 252.713,1069.35 253.272,1045.89 253.831,1023.81 254.39,1035.31 254.95,1065.12 255.509,1056.74 256.068,1066.26 256.627,1093.01 257.187,1084.11 257.746,1111.96 258.305,1081.83 258.864,1076.24 259.424,1053.38 259.983,1046.9 260.542,1077.04 261.101,1069.37 261.661,1023.99 262.22,1073.88 262.779,1069.64 263.338,1116.28 263.898,1123.5 264.457,1131.59 265.016,1126.07 265.575,1100.56 266.135,1125.02 266.694,1064.21 267.253,1074.06 267.812,1085.49 268.372,1081.18 268.931,1077.27 269.49,1052.85 270.049,1133.19 270.609,1122.79 271.168,1120.01 271.727,1110.65 272.286,1167.94 272.846,1172.22 273.405,1197.76 273.964,1175.37 274.523,1164.04 275.083,1172.69 275.642,1193.74 276.201,1230.33 276.76,1217.28 277.32,1202.23 277.879,1191.66 278.438,1212.64 278.997,1185.24 279.557,1189.07 280.116,1127.7 280.675,1118.73 281.234,1076.22 281.794,1086.55 282.353,1105.92 282.912,1129.06 283.471,1118.88 284.031,1139.19 284.59,1148.29 285.149,1137.78 285.708,1146.93 286.268,1140.27 286.827,1116.41 287.386,1074.32 287.945,1083.2 288.505,1076.44 289.064,1034.78 289.623,1051.46 290.182,1061.16 290.742,1068.74 291.301,1062.55 291.86,1056.5 292.419,1066.81 292.979,1079.57 293.538,1072.47 294.097,1096.93 294.656,1088.1 295.216,1080.3 295.775,1054.98 296.334,1051.03 296.893,1029.49 297.453,1040.22 298.012,1049.27 298.571,1044.08 299.13,1020.61 299.69,1017.82 300.249,1011.92 300.808,1025.64 301.368,1002.73 301.927,1012.72 302.486,991.202 303.045,988.144 303.605,965.501 304.164,947.756 304.723,963.57 305.282,963.396 305.842,991.834 306.401,987.638 306.96,1031.87 307.519,1043.55 308.079,1070.18 308.638,1061.63 309.197,1073.69 309.756,1030.94 310.316,1029.37 310.875,1025.04 311.434,1050.69 311.993,1075.83 312.553,1066.33 313.112,1111.38 313.671,1116.98 314.23,1107.39 314.79,1098.34 315.349,1104.79 315.908,1060.48 316.467,1056.29 317.027,1062.35 317.586,1036.52 318.145,1057.91 318.704,1046.23 319.264,1005.93 319.823,1049.23 320.382,1054.31 320.941,1026.56 321.501,1052.69 322.06,1025.5 322.619,1015.65 323.178,1022.31 323.738,1028.87 324.297,1022.87 324.856,1015.91 325.415,1004.9 325.975,997.984 326.534,1008.26 327.093,1001.2 327.652,976.423 328.212,1018.47 328.771,963.268 329.33,955.618 329.889,966.21 330.449,925.15 331.008,954.398 331.567,968.441 332.126,978.106 332.686,923.763 333.245,901.707 333.804,884.473 334.363,868.587 334.923,835.995 335.482,851.751 336.041,850.127 336.6,866.034 337.16,865.585 337.719,881.267 338.278,884.309 338.837,900.078 339.397,881.151 339.956,894.077 340.515,910.399 341.074,908.481 341.634,889.356 342.193,920.584 342.752,916.085 343.311,931.946 343.871,942.814 344.43,984.416 344.989,996.761 345.548,975.172 346.108,966.717 346.667,975.439 347.226,936.82 347.785,934.871 348.345,964.34 348.904,975.391 349.463,1001.56 350.022,959.428 350.582,965.194 351.141,924.621 351.7,936.207 352.259,945.111 352.819,940.837 353.378,916.022 353.937,929.035 354.496,940.787 355.056,903.401 355.615,949.312 356.174,943.905 356.733,984.928 357.293,960.145 357.852,955.924 358.411,967.53 358.97,1009.24 359.53,966.188 360.089,976.891 360.648,969.07 361.207,961.179 361.767,939.616 362.326,930.318 362.885,958.717 363.444,933.337 364.004,915.142 364.563,909.369 365.122,886.975 365.681,883.276 366.241,943.915 366.8,872.406 367.359,884.093 367.918,915.822 368.478,923.031 369.037,951.597 369.596,878.615 370.155,857.976 370.715,874.682 371.274,873.966 371.833,840.978 372.392,842.538 372.952,841.922 373.511,824.258 374.07,841.656 374.629,825.323 375.189,870.472 375.748,884.9 376.307,886.672 376.866,884.378 377.426,911.823 377.985,917.15 378.544,927.599 379.103,957.056 379.663,904.562 380.222,880.367 380.781,862.019 381.34,890.112 381.9,866.895 382.459,864.82 383.018,875.258 383.577,887.195 384.137,899.376 384.696,862.697 385.255,809.289 385.814,826.598 386.374,823.799 386.933,873.794 387.492,836.358 388.051,799.816 388.611,817.04 389.17,829.919 389.729,860.167 390.288,890.832 390.848,853.968 391.407,854.987 391.966,831.667 392.525,834.233 393.085,846.849 393.644,844.192 394.203,828.87 394.762,826.345 395.322,839.159 395.881,821.166 396.44,803.558 396.999,787.29 397.559,786.445 398.118,756.18 398.677,756.86 399.236,758.069 399.796,793.959 400.355,732.222 400.914,719.253 401.473,736.389 402.033,736.476 402.592,744.666 403.151,764.308 403.71,762.445 404.27,765.047 404.829,781.93 405.388,780.18 405.947,783.155 406.507,752.118 407.066,718.867 407.625,720.794 408.184,722.827 408.744,759.824 409.303,766.528 409.862,783.965 410.421,781.859 410.981,815.568 411.54,816.145 412.099,861.833 412.658,824.616 413.218,822.635 413.777,833.55 414.336,861.902 414.895,888.17 415.455,862.832 416.014,861.092 416.573,854.328 417.132,833.072 417.692,846.172 418.251,794.537 418.81,809.432 419.369,770.434 419.929,784.08 420.488,763.364 421.047,747.198 421.606,743.882 422.166,747.106 422.725,734.109 423.284,734.218 423.843,751.533 424.403,754.592 424.962,770.096 425.521,801.092 426.08,816.612 426.64,813.601 427.199,810.828 427.758,824.131 428.318,838.419 428.877,832.454 429.436,860.465 429.995,857.155 430.555,822.82 431.114,836.204 431.673,830.537 432.232,814.388 432.792,807.676 433.351,824.197 433.91,836.722 434.469,832.925 435.029,844.165 435.588,874.377 436.147,916.445 436.706,896.007 437.266,886.967 437.825,896.658 438.384,939.844 438.943,929.864 439.503,935.736 440.062,927.104 440.621,885.36 441.18,861.126 441.74,886.797 442.299,862.299 442.858,851.739 443.417,846.379 443.977,824.646 444.536,788.834 445.095,830.975 445.654,825.792 446.214,824.969 446.773,835.334 447.332,830.745 447.891,809.592 448.451,788.156 449.01,817.368 449.569,797.665 450.128,807.94 450.688,805.807 451.247,835.108 451.806,812.338 452.365,824.678 452.925,833.771 453.484,781.695 454.043,779.509 454.602,744.633 455.162,746.299 455.721,794.61 456.28,807.183 456.839,820.1 457.399,801.774 457.958,768.327 458.517,784.541 459.076,754.273 459.636,756.319 460.195,773.202 460.754,773.608 461.313,757.968 461.873,740.721 462.432,722.563 462.991,723.797 463.55,724.921 464.11,741.046 464.669,706.896 465.228,707.476 465.787,708.791 466.347,712.299 466.906,697.966 467.465,686.326 468.024,721.97 468.584,690.081 469.143,656.343 469.702,645.219 470.261,645.272 470.821,652.282 471.38,672.868 471.939,692.641 472.498,711.014 473.058,714.312 473.617,699.393 474.176,701.623 474.735,736.863 475.295,739.597 475.854,742.161 476.413,712.3 476.972,680.227 477.532,668.512 478.091,655.34 478.65,678.722 479.209,715.911 479.769,715.121 480.328,730.863 480.887,747.773 481.446,728.726 482.006,713.786 482.565,715.806 483.124,735.965 483.683,754.992 484.243,721.82 484.802,721.175 485.361,736.563 485.92,737.325 486.48,735.452 487.039,754.018 487.598,770.933 488.157,786.437 488.717,768.489 489.276,796.848 489.835,797.077 490.394,778.024 490.954,775.353 491.513,770.584 492.072,734.573 492.631,752.485 493.191,704.147 493.75,707.731 494.309,706.121 494.868,706.305 495.428,760.243 495.987,758.818 496.546,724.659 497.105,727.512 497.665,763.735 498.224,761.787 498.783,741.095 499.342,723.417 499.902,741.117 500.461,722.814 501.02,741.628 501.579,724.907 502.139,772.761 502.698,758.139 503.257,760.576 503.816,775.544 504.376,775.867 504.935,786.629 505.494,801.249 506.053,795.716 506.613,775.937 507.172,788.532 507.731,817.876 508.29,830.867 508.85,857.592 509.409,851.985 509.968,861.535 510.527,839.385 511.087,864.58 511.646,858.342 512.205,849.532 512.764,841.117 513.324,848.809 513.883,855.922 514.442,866.525 515.001,824.28 515.561,767.497 516.12,763.202 516.679,757.428 517.238,736.284 517.798,765.16 518.357,746.495 518.916,759.433 519.475,787.808 520.035,803.598 520.594,765.302 521.153,744.447 521.712,744.945 522.272,745.18 522.831,742.323 523.39,745.145 523.949,777.152 524.509,759.586 525.068,757.314 525.627,754.418 526.186,753.214 526.746,752.726 527.305,720.728 527.864,705.915 528.423,738.41 528.983,752.579 529.542,766.106 530.101,809.656 530.66,836.74 531.22,853.46 531.779,828.696 532.338,822.121 532.897,817.144 533.457,845.09 534.016,838.924 534.575,786.193 535.134,764.021 535.694,761.831 536.253,780.26 536.812,733.27 537.371,782.342 537.931,814.883 538.49,811.883 539.049,805.674 539.608,785.397 540.168,800.77 540.727,778.866 541.286,809.184 541.845,768.77 542.405,733.96 542.964,732.25 543.523,713.685 544.082,699.013 544.642,701.903 545.201,718.233 545.76,749.98 546.319,733.199 546.879,695.934 547.438,728.088 547.997,727.472 548.556,726.287 549.116,725.049 549.675,708.464 550.234,709.629 550.793,677.904 551.353,616.206 551.912,573.578 552.471,583.368 553.031,575.467 553.59,600.342 554.149,609.022 554.708,645.671 555.268,639.175 555.827,627.967 556.386,616.03 556.945,557.646 557.505,548.765 558.064,593.648 558.623,617.001 559.182,636.991 559.742,655.707 560.301,676.737 560.86,727.35 561.419,738.753 561.979,684.29 562.538,689.3 563.097,692.831 563.656,696.591 564.216,683.584 564.775,688.219 565.334,705.199 565.893,723.649 566.453,721.681 567.012,735.713 567.571,728.839 568.13,759.233 568.69,755.735 569.249,784.981 569.808,720.412 570.367,709.417 570.927,696.075 571.486,684.428 572.045,700.064 572.604,716.519 573.164,698.243 573.723,685.928 574.282,686.271 574.841,671.732 575.401,658.821 575.96,661.5 576.519,663.419 577.078,697.495 577.638,666.45 578.197,668.018 578.756,685.39 579.315,705.24 579.875,703.545 580.434,701.848 580.993,737.312 581.552,735.511 582.112,733.272 582.671,713.029 583.23,725.308 583.789,754.817 584.349,785.176 584.908,762.591 585.467,758.196 586.026,770.805 586.586,783.212 587.145,777.257 587.704,807.532 588.263,821.287 588.823,814.523 589.382,825.516 589.941,801.513 590.5,763.702 591.06,758.318 591.619,709.59 592.178,676.74 592.737,663.832 593.297,630.629 593.856,652.369 594.415,657.042 594.974,644.344 595.534,646.14 596.093,645.134 596.652,652.966 597.211,670.317 597.771,677.172 598.33,663.692 598.889,632.659 599.448,623.313 600.008,612.604 600.567,616.536 601.126,609.833 601.685,630.84 602.245,620.342 602.804,594.382 603.363,618.12 603.922,622.626 604.482,643.508 605.041,648.22 605.6,670.272 606.159,659.143 606.719,661.783 607.278,664.14 607.837,682.35 608.396,697.628 608.956,716.424 609.515,714.16 610.074,716.058 610.633,702.546 611.193,687.186 611.752,673.575 612.311,677.8 612.87,663.139 613.43,680.991 613.989,683.283 614.548,685.216 615.107,688.668 615.667,688.827 616.226,709.888 616.785,712.185 617.344,711.405 617.904,724.791 618.463,707.416 619.022,737.758 619.581,737.496 620.141,749.235 620.7,748.132 621.259,748.28 621.818,752.115 622.378,749.841 622.937,747.196 623.496,744.103 624.055,759.983 624.615,756.762 625.174,735.004 625.733,752.74 626.292,750.726 626.852,730.677 627.411,714.886 627.97,712.644 628.529,714.844 629.089,714.326 629.648,712.502 630.207,662.967 630.766,712.605 631.326,693.615 631.885,694.53 632.444,707.93 633.003,692.58 633.563,708.046 634.122,674.947 634.681,696.539 635.24,729.048 635.8,760.328 636.359,758.756 636.918,790.445 637.477,803.845 638.037,866.32 638.596,925.099 639.155,928.026 639.714,920.435 640.274,865.776 640.833,841.571 641.392,866.774 641.951,908.578 642.511,913.705 643.07,917.568 643.629,907.737 644.188,897.916 644.748,905.498 645.307,915.02 645.866,905.447 646.425,878.43 646.985,871.693 647.544,846.329 648.103,839.124 648.662,865.352 649.222,806.555 649.781,801.194 650.34,812.646 650.899,756.246 651.459,751.001 652.018,750.802 652.577,730.207 653.136,711.629 653.696,694.403 654.255,696.498 654.814,710.299 655.373,725.556 655.933,705.963 656.492,708.853 657.051,743.09 657.61,737.456 658.17,751.118 658.729,734.727 659.288,716.708 659.847,718.591 660.407,733.773 660.966,732.902 661.525,713.366 662.084,711.589 662.644,664.096 663.203,680.678 663.762,680.43 664.321,696.578 664.881,696.683 665.44,708.952 665.999,691.587 666.558,691.533 667.118,674.733 667.677,645.529 668.236,646.491 668.795,598.591 669.355,586.971 669.914,593.634 670.473,597.434 671.032,603.704 671.592,593.689 672.151,532.024 672.71,575.284 673.269,563.442 673.829,553.477 674.388,576.925 674.947,601.924 675.506,642.342 676.066,646.96 676.625,649.946 677.184,653.379 677.743,703.547 678.303,704.839 678.862,706.209 679.421,706.829 679.981,689.097 680.54,674.232 681.099,626.094 681.658,645.344 682.218,648.856 682.777,651.006 683.336,654.899 683.895,609.815 684.455,598.925 685.014,621.384 685.573,641.85 686.132,628.411 686.692,633.855 687.251,652.468 687.81,655.268 688.369,673.469 688.929,690.53 689.488,705.265 690.047,735.387 690.606,732.047 691.166,746.459 691.725,743.857 692.284,741.856 692.843,711.743 693.403,695.558 693.962,679.559 694.521,681.229 695.08,666.928 695.64,652.16 696.199,685.209 696.758,652.74 697.317,654.706 697.877,672.984 698.436,658.021 698.995,643.101 699.554,611.513 700.114,618.721 700.673,608.705 701.232,662.556 701.791,728.748 702.351,724.44 702.91,740.997 703.469,739.231 704.028,722.501 704.588,722.881 705.147,738.719 705.706,738.098 706.265,685.091 706.825,668.824 707.384,655.969 707.943,660.684 708.502,648.996 709.062,619.346 709.621,624.14 710.18,659.76 710.739,658.091 711.299,656.739 711.858,657.588 712.417,626.361 712.976,644.199 713.536,661.738 714.095,677.992 714.654,678.786 715.213,677.046 715.773,648.132 716.332,667.542 716.891,639.657 717.45,692.822 718.01,709.242 718.569,739.675 719.128,755.165 719.687,802.979 720.247,781.483 720.806,775.76 721.365,776.013 721.924,783.445 722.484,763.841 723.043,759.568 723.602,742.041 724.161,754.527 724.721,752.207 725.28,750.367 725.839,746.959 726.398,724.002 726.958,717.628 727.517,700.888 728.076,664.947 728.635,633.22 729.195,590.51 729.754,598.215 730.313,602.933 730.872,613.131 731.432,618.995 731.991,639.877 732.55,658.414 733.109,609.531 733.669,598.54 734.228,636.573 734.787,672.706 735.346,692.029 735.906,707.295 736.465,688.489 737.024,690.781 737.583,693.617 738.143,722.195 738.702,687.213 739.261,718.366 739.82,715.6 740.38,699.324 740.939,749.207 741.498,727.314 742.057,726.185 742.617,725.652 743.176,722.108 743.735,786.604 744.294,767.83 744.854,761.505 745.413,730.437 745.972,711.573 746.531,709.828 747.091,710.513 747.65,694.351 748.209,679.613 748.768,708.632 749.328,691.68 749.887,687.296 750.446,688.123 751.005,704.538 751.565,655.998 752.124,688.591 752.683,705.952 753.242,722.671 753.802,723.885 754.361,754.362 754.92,752.476 755.479,746.733 756.039,775.859 756.598,741.441 757.157,734.536 757.716,715.851 758.276,715.342 758.835,697.382 759.394,691.182 759.953,644.643 760.513,649.833 761.072,654.091 761.631,639.05 762.19,639.178 762.75,642.894 763.309,659.607 763.868,695.221 764.427,731.464 764.987,758.188 765.546,783.454 766.105,809.532 766.664,784.246 767.224,779.164 767.783,821.961 768.342,813.577 768.901,791.731 769.461,784.98 770.02,781.763 770.579,758.997 771.138,738.827 771.698,736.69 772.257,748.151 772.816,730.532 773.375,729.126 773.935,773.88 774.494,708.261 775.053,703.7 775.612,719.082 776.172,712.615 776.731,743.397 777.29,757.628 777.849,738.534 778.409,737.09 778.968,750.888 779.527,731.942 780.086,743.596 780.646,759.764 781.205,769.658 781.764,770.58 782.323,769.425 782.883,751.36 783.442,732.284 784.001,747.685 784.56,745.73 785.12,741.868 785.679,740.243 786.238,753.311 786.797,765.956 787.357,725.726 787.916,738.536 788.475,717.866 789.034,696.045 789.594,679.367 790.153,695.492 790.712,679.326 791.271,680.047 791.831,666.909 792.39,665.494 792.949,671.376 793.508,656.933 794.068,660.65 794.627,629.936 795.186,585.758 795.745,592.774 796.305,645.178 796.864,663.35 797.423,630.469 797.982,650.616 798.542,600.854 799.101,587.946 799.66,591.289 800.219,627.723 800.779,630.509 801.338,669.243 801.897,651.735 802.456,652.449 803.016,621.948 803.575,624.863 804.134,660.213 804.693,660.66 805.253,664.069 805.812,664.344 806.371,686.397 806.931,671.439 807.49,672.915 808.049,688.884 808.608,722.155 809.168,719.11 809.727,701.001 810.286,731.798 810.845,697.94 811.405,684.021 811.964,685.603 812.523,685.14 813.082,719.602 813.642,730.959 814.201,748.828 814.76,731.276 815.319,733.836 815.879,731.84 816.438,732.032 816.997,759.731 817.556,739.208 818.116,753.31 818.675,750.907 819.234,731.294 819.793,745.516 820.353,742.396 820.912,723.356 821.471,704.548 822.03,704.993 822.59,687.154 823.149,672.969 823.708,672.794 824.267,670.746 824.827,703.59 825.386,765.551 825.945,742.164 826.504,756.653 827.064,735.268 827.623,733.338 828.182,732.076 828.741,700.153 829.301,700.468 829.86,718.323 830.419,716.776 830.978,699.219 831.538,715.539 832.097,712.443 832.656,692.916 833.215,725.169 833.775,720.826 834.334,702.617 834.893,703.156 835.452,686.441 836.012,669 836.571,652.787 837.13,651.614 837.689,619.729 838.249,623.163 838.808,616.17 839.367,608.495 839.926,615.4 840.486,624.388 841.045,628.734 841.604,630.699 842.163,668.332 842.723,652.944 843.282,687.746 843.841,688.847 844.4,705.484 844.96,721.363 845.519,701.042 846.078,715.064 846.637,730.866 847.197,715.373 847.756,728.012 848.315,713.881 848.874,748.965 849.434,761.545 849.993,758.762 850.552,721.514 851.111,724.795 851.671,703.011 852.23,716.723 852.789,731.642 853.348,746.083 853.908,761.388 854.467,741.347 855.026,739.701 855.585,753.042 856.145,731.727 856.704,696.357 857.263,712.216 857.822,694.943 858.382,661.379 858.941,675.285 859.5,674.883 860.059,678.404 860.619,713.66 861.178,711.329 861.737,742.404 862.296,739.744 862.856,740.019 863.415,718.292 863.974,734.25 864.533,714.76 865.093,714.261 865.652,694.818 866.211,675.498 866.77,661.056 867.33,680.194 867.889,712.941 868.448,759.195 869.007,754.269 869.567,749.126 870.126,746.056 870.685,757.242 871.244,785.916 871.804,794.008 872.363,770.676 872.922,737.201 873.481,689.251 874.041,657.076 874.6,687.628 875.159,685.924 875.718,672.174 876.278,719.229 876.837,702.459 877.396,703.756 877.955,651.84 878.515,639.304 879.074,660.236 879.633,660.909 880.192,645.497 880.752,632.736 881.311,666.233 881.87,715.957 882.429,719.749 882.989,704.559 883.548,705.805 884.107,666.396 884.666,650.247 885.226,635.429 885.785,652.182 886.344,671.321 886.903,688.304 887.463,674.234 888.022,675.692 888.581,675.697 889.14,660.588 889.7,661.988 890.259,629.208 890.818,615.861 891.377,601.825 891.937,540.222 892.496,581.075 893.055,571.487 893.614,577.789 894.174,568.951 894.733,593.356 895.292,599.429 895.851,624.455 896.411,629.813 896.97,619.029 897.529,623.521 898.088,625.445 898.648,628.352 899.207,660.42 899.766,666.709 900.325,684.48 900.885,684.452 901.444,688.575 902.003,689.607 902.562,670.902 903.122,657.495 903.681,609.287 904.24,615.914 904.799,620.634 905.359,640.252 905.918,660.209 906.477,679.924 907.036,725.815 907.596,695.195 908.155,665.222 908.714,683.385 909.273,666.35 909.833,667.3 910.392,684.859 910.951,653.329 911.51,654.152 912.07,636.913 912.629,641.07 913.188,629.814 913.747,651.84 914.307,671.055 914.866,687.764 915.425,687.758 915.984,689.119 916.544,672.579 917.103,687.474 917.662,685.823 918.221,666.794 918.781,700.839 919.34,701.149 919.899,699.46 920.458,715.467 921.018,711.574 921.577,711.622 922.136,722.158 922.695,720.794 923.255,703.186 923.814,667.791 924.373,685.273 924.932,670.247 925.492,689.44 926.051,658.873 926.61,641.152 927.169,647.454 927.729,665.179 928.288,649.386 928.847,649.069 929.406,686.869 929.966,701.345 930.525,705.071 931.084,673.455 931.644,689.61 932.203,704.644 932.762,766.86 933.321,759.665 933.881,768.319 934.44,764.173 934.999,729.041 935.558,727.571 936.118,740.984 936.677,753.672 937.236,781.443 937.795,761.906 938.355,759.453 938.914,772.128 939.473,738.782 940.032,736.022 940.592,765.666 941.151,746.789 941.71,725.988 942.269,724.643 942.829,735.971 943.388,733.97 943.947,763.519 944.506,774.293 945.066,751.254 945.625,766.311 946.184,714.407 946.743,729.782 947.303,664.907 947.862,637.126 948.421,641.445 948.98,691.439 949.54,676.359 950.099,657.692 950.658,658.528 951.217,627.557 951.777,641.965 952.336,659.828 952.895,662.736 953.454,649.819 954.014,703.52 954.573,704.634 955.132,731.634 955.691,762.921 956.251,774.662 956.81,767.586 957.369,764.32 957.928,789.841 958.488,770.635 959.047,749.84 959.606,728.55 960.165,723.572 960.725,703.417 961.284,721.608 961.843,701.126 962.402,699.055 962.962,685.519 963.521,684.755 964.08,684.078 964.639,683.37 965.199,688.106 965.758,690.541 966.317,702.648 966.876,715.887 967.436,727.937 967.995,727.461 968.554,728.156 969.113,727.889 969.673,715.206 970.232,678.206 970.791,676.523 971.35,695.37 971.91,676.976 972.469,677.709 973.028,630.209 973.587,633.417 974.147,651.454 974.706,633.868 975.265,617.828 975.824,590.544 976.384,566.345 976.943,573.721 977.502,566.081 978.061,554.056 978.621,560.212 979.18,549.833 979.739,553.976 980.298,562.634 980.858,601.807 981.417,594.454 981.976,581.737 982.535,570.592 983.095,591.335 983.654,627.299 984.213,646.902 984.772,646.988 985.332,648.626 985.891,649.374 986.45,653.009 987.009,688.134 987.569,671.117 988.128,688.289 988.687,722.952 989.246,750.72 989.806,747.709 990.365,747.129 990.924,730.125 991.483,743.533 992.043,741.154 992.602,721.968 993.161,702.681 993.72,687.964 994.28,722.039 994.839,704.489 995.398,689.033 995.957,638.677 996.517,639.709 997.076,658.022 997.635,640.543 998.194,643.106 998.754,647.549 999.313,666.786 999.872,658.542 1000.43,674.376 1000.99,640.4 1001.55,676.803 1002.11,663.22 1002.67,679.871 1003.23,712.579 1003.79,724.351 1004.35,756.69 1004.91,756.93 1005.46,751.091 1006.02,716.073 1006.58,711.445 1007.14,710.458 1007.7,689.886 1008.26,672.567 1008.82,686.511 1009.38,704.062 1009.94,705.373 1010.5,673.992 1011.06,706.661 1011.62,689.241 1012.18,691.219 1012.73,658.256 1013.29,661.971 1013.85,662.582 1014.41,662.54 1014.97,630.025 1015.53,650.702 1016.09,650.511 1016.65,666.128 1017.21,653.151 1017.77,653.664 1018.33,706.708 1018.89,688.494 1019.45,669.237 1020.01,637.709 1020.56,705.863 1021.12,687.066 1021.68,671.116 1022.24,689.77 1022.8,690.247 1023.36,687.371 1023.92,719.776 1024.48,701.823 1025.04,703.873 1025.6,737.658 1026.16,768.421 1026.72,717.128 1027.28,762.398 1027.83,776.202 1028.39,801.711 1028.95,827.134 1029.51,833.694 1030.07,842.167 1030.63,816.435 1031.19,810.682 1031.75,788.389 1032.31,767.047 1032.87,714.674 1033.43,732.832 1033.99,730.216 1034.55,758.267 1035.1,737.422 1035.66,734.091 1036.22,734.893 1036.78,703.318 1037.34,702.045 1037.9,683.701 1038.46,729.15 1039.02,677.61 1039.58,708.449 1040.14,738.099 1040.7,717.303 1041.26,700.004 1041.82,718.674 1042.38,700.107 1042.93,713.495 1043.49,694.535 1044.05,708.013 1044.61,703.524 1045.17,701.028 1045.73,714.056 1046.29,724.63 1046.85,708.135 1047.41,675.386 1047.97,661.767 1048.53,662.247 1049.09,663.104 1049.65,646.316 1050.2,616.551 1050.76,588.555 1051.32,577.316 1051.88,551.061 1052.44,621.163 1053,624.346 1053.56,660.673 1054.12,661.757 1054.68,715.741 1055.24,678.468 1055.8,678.887 1056.36,661.488 1056.92,646.85 1057.48,662.451 1058.03,649.672 1058.59,633.025 1059.15,632.19 1059.71,649.654 1060.27,649.182 1060.83,663.842 1061.39,666.014 1061.95,688.664 1062.51,701.666 1063.07,697.786 1063.63,697.301 1064.19,693.24 1064.75,725.739 1065.3,722.07 1065.86,705.597 1066.42,690.606 1066.98,706.792 1067.54,722.94 1068.1,771.596 1068.66,767.832 1069.22,747.383 1069.78,714.174 1070.34,695.769 1070.9,693.343 1071.46,672.247 1072.02,688.655 1072.57,708.89 1073.13,740.805 1073.69,754.574 1074.25,767.287 1074.81,779.09 1075.37,787.876 1075.93,781.563 1076.49,747.419 1077.05,727.894 1077.61,725.588 1078.17,706.893 1078.73,707.771 1079.29,706.522 1079.85,705.707 1080.4,673.704 1080.96,655.103 1081.52,673.265 1082.08,673.158 1082.64,673.203 1083.2,674.554 1083.76,696.756 1084.32,678.876 1084.88,643.513 1085.44,664.91 1086,699.081 1086.56,697.429 1087.12,727.875 1087.67,758.785 1088.23,754.666 1088.79,719.255 1089.35,686.473 1089.91,642.75 1090.47,640.545 1091.03,642.887 1091.59,658.616 1092.15,677.027 1092.71,680.616 1093.27,664.739 1093.83,679.542 1094.39,682.689 1094.94,664.721 1095.5,680.826 1096.06,663.059 1096.62,629.384 1097.18,584.003 1097.74,588.556 1098.3,557.574 1098.86,579.649 1099.42,601.989 1099.98,593.206 1100.54,616.049 1101.1,621.705 1101.66,560.013 1102.22,534.581 1102.77,608.622 1103.33,614.046 1103.89,650.469 1104.45,653.899 1105.01,690.58 1105.57,658.121 1106.13,658.775 1106.69,661.516 1107.25,679.338 1107.81,677.068 1108.37,695.147 1108.93,724.959 1109.49,722.051 1110.04,719.885 1110.6,687.176 1111.16,669.236 1111.72,674.295 1112.28,692.334 1112.84,676.158 1113.4,708.343 1113.96,692.153 1114.52,724.36 1115.08,725.833 1115.64,691.189 1116.2,689.777 1116.76,719.743 1117.31,718.602 1117.87,683.782 1118.43,702.787 1118.99,700.434 1119.55,715.332 1120.11,698.666 1120.67,681.38 1121.23,663.846 1121.79,666.208 1122.35,665.105 1122.91,699.478 1123.47,663.244 1124.03,680.975 1124.59,668.766 1125.14,671.787 1125.7,635.377 1126.26,637.365 1126.82,624.002 1127.38,643.652 1127.94,630.134 1128.5,633.728 1129.06,680.87 1129.62,676.417 1130.18,679.252 1130.74,682.829 1131.3,668.034 1131.86,668.034 1132.41,651.086 1132.97,636.341 1133.53,660.141 1134.09,660.807 1134.65,644.998 1135.21,665.886 1135.77,664.676 1136.33,639.694 1136.89,627.953 1137.45,678.518 1138.01,646.815 1138.57,649.849 1139.13,663.554 1139.68,679.762 1140.24,661.838 1140.8,681.36 1141.36,681.515 1141.92,698.139 1142.48,679.593 1143.04,662.284 1143.6,662.293 1144.16,675.382 1144.72,677.866 1145.28,664.174 1145.84,664.644 1146.4,682.058 1146.96,700.211 1147.51,701.126 1148.07,698.089 1148.63,715.719 1149.19,714.182 1149.75,710.13 1150.31,724.178 1150.87,723.876 1151.43,722.999 1151.99,719.665 1152.55,721.375 1153.11,721.116 1153.67,717.49 1154.23,714.476 1154.78,694.941 1155.34,627.567 1155.9,644.862 1156.46,646.398 1157.02,650.594 1157.58,634.059 1158.14,620.238 1158.7,590.025 1159.26,625.329 1159.82,629.164 1160.38,583.2 1160.94,618.538 1161.5,619.36 1162.05,607.318 1162.61,590.552 1163.17,629.873 1163.73,613.652 1164.29,622.471 1164.85,609.455 1165.41,597.833 1165.97,604.218 1166.53,613.157 1167.09,631.927 1167.65,684.637 1168.21,669.854 1168.77,686.428 1169.33,713.473 1169.88,711.319 1170.44,694.405 1171,692.756 1171.56,662.745 1172.12,663.259 1172.68,648.353 1173.24,635.501 1173.8,642.511 1174.36,665.769 1174.92,677.546 1175.48,694.629 1176.04,728.804 1176.6,725.7 1177.15,706.64 1177.71,657.952 1178.27,657.741 1178.83,689.02 1179.39,690.908 1179.95,659.122 1180.51,613.256 1181.07,617.78 1181.63,588.893 1182.19,582.541 1182.75,588.756 1183.31,574.87 1183.87,609.958 1184.43,597.012 1184.98,633.781 1185.54,648.235 1186.1,636.352 1186.66,656.326 1187.22,659.499 1187.78,663.837 1188.34,666.358 1188.9,666.427 1189.46,667.473 1190.02,686.523 1190.58,657.009 1191.14,640.698 1191.7,643.709 1192.25,647.053 1192.81,665.091 1193.37,667.285 1193.93,689.566 1194.49,737.61 1195.05,736.4 1195.61,735.669 1196.17,733.19 1196.73,732.734 1197.29,714.9 1197.85,713.421 1198.41,714.302 1198.97,731.005 1199.52,712.494 1200.08,740.633 1200.64,770.531 1201.2,764.046 1201.76,741.747 1202.32,743.935 1202.88,742.107 1203.44,756.048 1204,751.643 1204.56,760.447 1205.12,788.033 1205.68,765.104 1206.24,760.381 1206.8,787.736 1207.35,796.798 1207.91,773.523 1208.47,722.598 1209.03,716.659 1209.59,698.681 1210.15,685.74 1210.71,697.634 1211.27,680.109 1211.83,694.649 1212.39,695.163 1212.95,693.249 1213.51,709.586 1214.07,706.592 1214.62,704.258 1215.18,705.382 1215.74,735.297 1216.3,705.33 1216.86,707.313 1217.42,722.836 1217.98,751.793 1218.54,746.366 1219.1,757.191 1219.66,784.448 1220.22,763.474 1220.78,757.406 1221.34,804.528 1221.89,781.541 1222.45,791.281 1223.01,818.578 1223.57,777.493 1224.13,771.609 1224.69,785.355 1225.25,779.845 1225.81,775.174 1226.37,802.612 1226.93,748.716 1227.49,794.281 1228.05,756.541 1228.61,783.939 1229.17,847.032 1229.72,838.092 1230.28,827.972 1230.84,759.921 1231.4,725.069 1231.96,734.984 1232.52,746.113 1233.08,729.074 1233.64,760.624 1234.2,755.903 1234.76,751.046 1235.32,743.202 1235.88,710.631 1236.44,728.203 1236.99,695.055 1237.55,691.685 1238.11,642.519 1238.67,660.334 1239.23,692.237 1239.79,670.765 1240.35,670.517 1240.91,655.322 1241.47,653.618 1242.03,670.271 1242.59,672.717 1243.15,659.055 1243.71,628.385 1244.26,633.173 1244.82,616.534 1245.38,621.332 1245.94,609.983 1246.5,594.958 1247.06,581.159 1247.62,585.8 1248.18,607.521 1248.74,610.02 1249.3,597.411 1249.86,583.537 1250.42,590.37 1250.98,580.989 1251.54,572.791 1252.09,595.929 1252.65,586.089 1253.21,578.333 1253.77,617.052 1254.33,587.212 1254.89,579.187 1255.45,602.837 1256.01,626.525 1256.57,614.146 1257.13,665.948 1257.69,665.487 1258.25,636.315 1258.81,658.837 1259.36,626.901 1259.92,646.231 1260.48,666.35 1261.04,666.36 1261.6,667.524 1262.16,674.213 1262.72,692.08 1263.28,691.318 1263.84,706.975 1264.4,720.895 1264.96,719.855 1265.52,702.44 1266.08,668.196 1266.63,685.628 1267.19,689.222 1267.75,704.917 1268.31,719.482 1268.87,713.922 1269.43,730.402 1269.99,727.299 1270.55,709.741 1271.11,726.153 1271.67,705.537 1272.23,733.813 1272.79,732.341 1273.35,714.873 1273.91,698.852 1274.46,713.533 1275.02,694.244 1275.58,694.636 1276.14,710.603 1276.7,706.28 1277.26,671.728 1277.82,641.2 1278.38,657.889 1278.94,642.972 1279.5,645.774 1280.06,663.962 1280.62,694.699 1281.18,723.214 1281.73,708.02 1282.29,688.721 1282.85,683.307 1283.41,684.409 1283.97,719.396 1284.53,747.419 1285.09,727.407 1285.65,739.591 1286.21,717.802 1286.77,732.474 1287.33,742.691 1287.89,722.53 1288.45,724.218 1289,723.576 1289.56,705.493 1290.12,672.996 1290.68,641.51 1291.24,659.341 1291.8,647.009 1292.36,650.128 1292.92,651.21 1293.48,653.926 1294.04,653.28 1294.6,655.048 1295.16,655.492 1295.72,624.843 1296.28,657.244 1296.83,671.562 1297.39,624.98 1297.95,624.293 1298.51,627.875 1299.07,630.68 1299.63,649.731 1300.19,635.897 1300.75,637.515 1301.31,671.323 1301.87,671.761 1302.43,705.079 1302.99,720.56 1303.55,720.227 1304.1,687.556 1304.66,719.611 1305.22,703.227 1305.78,689.924 1306.34,685.929 1306.9,689.879 1307.46,685.312 1308.02,717.634 1308.58,694.953 1309.14,712.243 1309.7,695.031 1310.26,679.634 1310.82,697.205 1311.38,678.953 1311.93,662.345 1312.49,680.015 1313.05,694.71 1313.61,709.255 1314.17,723.047 1314.73,724.424 1315.29,753.455 1315.85,783.782 1316.41,758.23 1316.97,736.819 1317.53,734.854 1318.09,701.707 1318.65,702.361 1319.2,699.766 1319.76,729.254 1320.32,741.174 1320.88,755.704 1321.44,766.996 1322,748.92 1322.56,745.774 1323.12,740.321 1323.68,718.155 1324.24,716.596 1324.8,698.55 1325.36,700.893 1325.92,702.277 1326.47,701.16 1327.03,715.329 1327.59,715.286 1328.15,750.545 1328.71,742.744 1329.27,722.809 1329.83,725.359 1330.39,672.875 1330.95,672.566 1331.51,673.385 1332.07,674.158 1332.63,675.014 1333.19,661.427 1333.75,663.718 1334.3,649.372 1334.86,630.935 1335.42,650.976 1335.98,636.782 1336.54,607.46 1337.1,594.887 1337.66,595.281 1338.22,636.111 1338.78,655.224 1339.34,626.116 1339.9,631.029 1340.46,615.849 1341.02,654.232 1341.57,640.284 1342.13,678.075 1342.69,679.723 1343.25,677.521 1343.81,677.515 1344.37,663.106 1344.93,696.585 1345.49,692.398 1346.05,694.517 1346.61,709.791 1347.17,705.157 1347.73,722.407 1348.29,718.101 1348.84,700.111 1349.4,712.432 1349.96,729.705 1350.52,776.218 1351.08,738.997 1351.64,716.135 1352.2,711.134 1352.76,727.392 1353.32,726.278 1353.88,708.448 1354.44,707.055 1355,721.629 1355.56,718.721 1356.12,753.915 1356.67,696.285 1357.23,694.448 1357.79,661.418 1358.35,675.43 1358.91,692.073 1359.47,693.007 1360.03,692.448 1360.59,663.93 1361.15,646.756 1361.71,648.96 1362.27,635.851 1362.83,654.92 1363.39,657.673 1363.94,640.344 1364.5,641.23 1365.06,660.726 1365.62,642.895 1366.18,630.966 1366.74,619.343 1367.3,621.182 1367.86,628.95 1368.42,662.12 1368.98,646.007 1369.54,662.999 1370.1,633.408 1370.66,636.492 1371.21,620.128 1371.77,641.814 1372.33,643.874 1372.89,664.734 1373.45,713.994 1374.01,682.777 1374.57,682.464 1375.13,684.528 1375.69,688.448 1376.25,690.898 1376.81,673.419 1377.37,658.045 1377.93,674.923 1378.49,692.695 1379.04,738.017 1379.6,766.378 1380.16,759.215 1380.72,739.817 1381.28,720.059 1381.84,765.421 1382.4,780.554 1382.96,762.687 1383.52,740.27 1384.08,755.286 1384.64,748.535 1385.2,725.63 1385.76,704.132 1386.31,671.911 1386.87,673.309 1387.43,689.455 1387.99,676.114 1388.55,661.325 1389.11,646.355 1389.67,613.212 1390.23,614.499 1390.79,615.78 1391.35,569.868 1391.91,577.814 1392.47,602.234 1393.03,604.219 1393.58,595.738 1394.14,615.307 1394.7,618.381 1395.26,606.347 1395.82,607.558 1396.38,624.696 1396.94,613.007 1397.5,587.134 1398.06,609.764 1398.62,631.418 1399.18,615.065 1399.74,616.401 1400.3,603.894 1400.86,608.149 1401.41,659.82 1401.97,630.254 1402.53,632.532 1403.09,621.103 1403.65,641.131 1404.21,675.7 1404.77,693.716 1405.33,644.891 1405.89,601.138 1406.45,620.534 1407.01,654.269 1407.57,670.946 1408.13,688.126 1408.68,734.396 1409.24,731.46 1409.8,728.723 1410.36,743.674 1410.92,755.705 1411.48,784.328 1412.04,778.687 1412.6,818.967 1413.16,807.036 1413.72,815.015 1414.28,838.204 1414.84,845.421 1415.4,851.641 1415.95,843.407 1416.51,802.471 1417.07,779.26 1417.63,741.433 1418.19,690.954 1418.75,674.399 1419.31,725.293 1419.87,722.878 1420.43,704.093 1420.99,705.525 1421.55,720.435 1422.11,655.09 1422.67,686.145 1423.23,668.761 1423.78,670.465 1424.34,640.857 1424.9,612.617 1425.46,599.752 1426.02,603.823 1426.58,620.224 1427.14,641.348 1427.7,655.935 1428.26,638.824 1428.82,627.383 1429.38,609.828 1429.94,585.941 1430.5,623.871 1431.05,612.637 1431.61,663.956 1432.17,649.544 1432.73,638.448 1433.29,640.082 1433.85,659.405 1434.41,679.632 1434.97,682.338 1435.53,649.64 1436.09,654.37 1436.65,686.9 1437.21,654.565 1437.77,609.455 1438.33,629.664 1438.88,633.69 1439.44,600.066 1440,683.523 1440.56,698.132 1441.12,683.371 1441.68,701.665 1442.24,735.678 1442.8,721.29 1443.36,702.577 1443.92,716.18 1444.48,699.657 1445.04,687.177 1445.6,688.247 1446.15,674.686 1446.71,673.782 1447.27,673.769 1447.83,657.053 1448.39,659.257 1448.95,677.262 1449.51,693.414 1450.07,691.058 1450.63,705.996 1451.19,706.098 1451.75,721.948 1452.31,689.055 1452.87,690.466 1453.42,721.752 1453.98,718.404 1454.54,720.47 1455.1,718.879 1455.66,732.299 1456.22,695.514 1456.78,659.938 1457.34,680.267 1457.9,678.726 1458.46,697.229 1459.02,713.322 1459.58,679.112 1460.14,710.421 1460.7,724.328 1461.25,705.876 1461.81,781.148 1462.37,790.356 1462.93,802.352 1463.49,794.464 1464.05,788.574 1464.61,799.038 1465.17,780.22 1465.73,759.157 1466.29,772.512 1466.85,754.347 1467.41,734.513 1467.97,713.399 1468.52,696.918 1469.08,679.76 1469.64,613.531 1470.2,600.278 1470.76,604.409 1471.32,626.934 1471.88,647.642 1472.44,648.988 1473,680.159 1473.56,697.546 1474.12,680.447 1474.68,663.135 1475.24,696.295 1475.79,715.311 1476.35,726.265 1476.91,737.696 1477.47,767.168 1478.03,780.375 1478.59,789.416 1479.15,785.161 1479.71,781.273 1480.27,775.059 1480.83,772.304 1481.39,764.605 1481.95,742.735 1482.51,690.259 1483.07,689.441 1483.62,705.032 1484.18,723.158 1484.74,737.689 1485.3,714.455 1485.86,711.592 1486.42,675.767 1486.98,677.783 1487.54,709.659 1488.1,664.925 1488.66,636.061 1489.22,635.25 1489.78,635.771 1490.34,639.527 1490.89,643.312 1491.45,646.795 1492.01,683.966 1492.57,669.427 1493.13,706.766 1493.69,704.038 1494.25,704.495 1494.81,722.996 1495.37,737.411 1495.93,733.248 1496.49,733.361 1497.05,765.51 1497.61,744.342 1498.16,693.595 1498.72,742.178 1499.28,705.05 1499.84,717.352 1500.4,683.434 1500.96,668.182 1501.52,636.234 1502.08,587.792 1502.64,575.721 1503.2,585.714 1503.76,591.139 1504.32,596.309 1504.88,598.55 1505.44,586.861 1505.99,594.112 1506.55,584.146 1507.11,590.016 1507.67,610.446 1508.23,631.406 1508.79,616.548 1509.35,637.161 1509.91,592.368 1510.47,597.543 1511.03,585.857 1511.59,576.443 1512.15,598.365 1512.71,633.62 1513.26,618.842 1513.82,588.488 1514.38,578.458 1514.94,584.534 1515.5,603.433 1516.06,625.628 1516.62,645.704 1517.18,632.635 1517.74,635.63 1518.3,643.11 1518.86,633.535 1519.42,606.28 1519.98,578.491 1520.53,569.821 1521.09,562.64 1521.65,584.418 1522.21,638.033 1522.77,656.158 1523.33,690.914 1523.89,705.711 1524.45,693.813 1525.01,675.111 1525.57,674.974 1526.13,660.685 1526.69,660.676 1527.25,661.071 1527.81,659.414 1528.36,660.265 1528.92,662.028 1529.48,660.431 1530.04,658.43 1530.6,659.858 1531.16,627.093 1531.72,665.147 1532.28,666.806 1532.84,698.814 1533.4,698.226 1533.96,683.578 1534.52,698.836 1535.08,729.551 1535.63,746.935 1536.19,727.655 1536.75,729.281 1537.31,742.791 1537.87,773.747 1538.43,801.885 1538.99,813.2 1539.55,804.877 1540.11,765.031 1540.67,761.35 1541.23,742.891 1541.79,740.616 1542.35,740.124 1542.9,739.511 1543.46,720.45 1544.02,735.879 1544.58,668.127 1545.14,684.827 1545.7,699.901 1546.26,682.047 1546.82,702.877 1547.38,733.209 1547.94,748.546 1548.5,750.517 1549.06,778.925 1549.62,759.227 1550.18,723.768 1550.73,727.196 1551.29,741.162 1551.85,768.941 1552.41,778.585 1552.97,773.093 1553.53,769.962 1554.09,763.037 1554.65,742.938 1555.21,724.623 1555.77,725.47 1556.33,722.406 1556.89,735.968 1557.45,749.996 1558,749.357 1558.56,711.933 1559.12,711.629 1559.68,722.856 1560.24,688.453 1560.8,670.893 1561.36,688.898 1561.92,677.136 1562.48,676.931 1563.04,690.73 1563.6,719.431 1564.16,699.724 1564.72,699.725 1565.28,699.377 1565.83,699.684 1566.39,669.014 1566.95,667.111 1567.51,682.026 1568.07,682.139 1568.63,683.329 1569.19,653.148 1569.75,605.467 1570.31,625.488 1570.87,595.183 1571.43,618.132 1571.99,637.091 1572.55,705.289 1573.1,724.364 1573.66,689.276 1574.22,703.749 1574.78,702.313 1575.34,702.551 1575.9,685.409 1576.46,715.153 1577.02,712.896 1577.58,744.737 1578.14,758.431 1578.7,740.134 1579.26,736.963 1579.82,749.733 1580.37,732.054 1580.93,727.851 1581.49,693.191 1582.05,691.823 1582.61,709.252 1583.17,738.178 1583.73,737.748 1584.29,733.444 1584.85,728.455 1585.41,726.273 1585.97,738.371 1586.53,752.746 1587.09,731.608 1587.65,727.148 1588.2,725.356 1588.76,726.1 1589.32,721.616 1589.88,687.115 1590.44,684.871 1591,652.762 1591.56,656.169 1592.12,658.247 1592.68,644.286 1593.24,645.979 1593.8,665.092 1594.36,700.891 1594.92,700.745 1595.47,715.887 1596.03,713.122 1596.59,714.905 1597.15,712.222 1597.71,691.935 1598.27,725.107 1598.83,706.091 1599.39,702.628 1599.95,699.766 1600.51,701.441 1601.07,685.163 1601.63,670.846 1602.19,669.149 1602.74,668.45 1603.3,700.247 1603.86,719.07 1604.42,736.148 1604.98,702.334 1605.54,704.505 1606.1,703.482 1606.66,750.587 1607.22,783.004 1607.78,776.208 1608.34,807.521 1608.9,812.593 1609.46,833.398 1610.02,795.219 1610.57,740.151 1611.13,737.993 1611.69,689.303 1612.25,707.032 1612.81,705.673 1613.37,671.989 1613.93,705.429 1614.49,708.631 1615.05,710.014 1615.61,712.119 1616.17,728.775 1616.73,710.86 1617.29,659.852 1617.84,678.324 1618.4,695.365 1618.96,709.599 1619.52,674.795 1620.08,674.936 1620.64,690.188 1621.2,674.596 1621.76,691.908 1622.32,693.598 1622.88,659.863 1623.44,660.983 1624,661.059 1624.56,691.926 1625.11,675.268 1625.67,689.529 1626.23,704.077 1626.79,682.052 1627.35,730.548 1627.91,757.261 1628.47,736.774 1629.03,737.384 1629.59,718.784 1630.15,698.704 1630.71,682.1 1631.27,667.861 1631.83,686.867 1632.39,701.308 1632.94,730.906 1633.5,726.65 1634.06,743.295 1634.62,725.259 1635.18,703.343 1635.74,686.961 1636.3,720.856 1636.86,750.607 1637.42,699.21 1637.98,711.752 1638.54,705.2 1639.1,686.048 1639.66,718.689 1640.21,685.589 1640.77,651.734 1641.33,655.018 1641.89,653.441 1642.45,621.693 1643.01,623.064 1643.57,640.401 1644.13,657.371 1644.69,659.943 1645.25,705.488 1645.81,719.984 1646.37,669.825 1646.93,658.452 1647.48,645.408 1648.04,647.353 1648.6,680.744 1649.16,677.772 1649.72,642.035 1650.28,648.722 1650.84,682.8 1651.4,683.724 1651.96,717.715 1652.52,736.085 1653.08,732.483 1653.64,725.783 1654.2,709.516 1654.76,712.601 1655.31,698.244 1655.87,698.774 1656.43,649.434 1656.99,635.36 1657.55,671.77 1658.11,686.328 1658.67,671.68 1659.23,623.175 1659.79,592.624 1660.35,599.177 1660.91,615.977 1661.47,638.769 1662.03,607.133 1662.58,623.666 1663.14,630 1663.7,613.917 1664.26,619.27 1664.82,638.112 1665.38,639.351 1665.94,621.353 1666.5,640.257 1667.06,644.078 1667.62,643.916 1668.18,648.465 1668.74,633.072 1669.3,602.019 1669.85,604.165 1670.41,580.272 1670.97,569.237 1671.53,577.086 1672.09,568.952 1672.65,571.619 1673.21,609.673 1673.77,632.783 1674.33,590.181 1674.89,563.732 1675.45,573.424 1676.01,579.138 1676.57,566.892 1677.13,556.498 1677.68,544.927 1678.24,550.28 1678.8,556.633 1679.36,548.093 1679.92,523.189 1680.48,531.347 1681.04,557.036 1681.6,534.687 1682.16,559.857 1682.72,570.072 1683.28,591.814 1683.84,615.113 1684.4,635.016 1684.95,654.378 1685.51,654.322 1686.07,659.199 1686.63,678.668 1687.19,694.34 1687.75,697.778 1688.31,714.749 1688.87,683.39 1689.43,683.143 1689.99,697.061 1690.55,746.689 1691.11,727.319 1691.67,723.763 1692.23,751.275 1692.78,763.709 1693.34,740.348 1693.9,766.357 1694.46,780.083 1695.02,725.615 1695.58,707.268 1696.14,705.638 1696.7,671.329 1697.26,688.84 1697.82,704.929 1698.38,704.729 1698.94,737.742 1699.5,679.617 1700.05,663.605 1700.61,678.965 1701.17,708.338 1701.73,708.743 1702.29,709.957 1702.85,690.395 1703.41,672.656 1703.97,656.879 1704.53,659.809 1705.09,659.419 1705.65,644.527 1706.21,663.021 1706.77,647.084 1707.32,649.421 1707.88,649.525 1708.44,652.683 1709,623.935 1709.56,672.08 1710.12,672.918 1710.68,693.112 1711.24,661.546 1711.8,645.04 1712.36,675.034 1712.92,696.287 1713.48,698.095 1714.04,699.812 1714.6,729.98 1715.15,777.622 1715.71,788.457 1716.27,765.587 1716.83,794.224 1717.39,786.754 1717.95,729.814 1718.51,744.964 1719.07,742.511 1719.63,725.335 1720.19,708.101 1720.75,724.187 1721.31,754.203 1721.87,728.841 1722.42,744.682 1722.98,757.515 1723.54,772.294 1724.1,735.82 1724.66,720.292 1725.22,704.657 1725.78,701.175 1726.34,700.568 1726.9,682.273 1727.46,685.579 1728.02,686.562 1728.58,684.532 1729.14,684.757 1729.69,683.819 1730.25,650.711 1730.81,634.22 1731.37,649.47 1731.93,634.929 1732.49,636.236 1733.05,607.355 1733.61,612.089 1734.17,604.409 1734.73,594.992 1735.29,600.42 1735.85,620.453 1736.41,640.047 1736.97,661.085 1737.52,677.518 1738.08,691.633 1738.64,710.293 1739.2,756.526 1739.76,782.39 1740.32,760.682 1740.88,772.75 1741.44,799.256 1742,810.294 1742.56,782.737 1743.12,794.665 1743.68,791.744 1744.24,770.907 1744.79,764.296 1745.35,758.012 1745.91,755.475 1746.47,731.342 1747.03,709.799 1747.59,691.02 1748.15,676.288 1748.71,696.094 1749.27,676.62 1749.83,712.301 1750.39,712.221 1750.95,694.517 1751.51,679.058 1752.06,693.786 1752.62,676.138 1753.18,657.641 1753.74,659.45 1754.3,678.236 1754.86,658.569 1755.42,675.641 1755.98,660.737 1756.54,662.653 1757.1,677.337 1757.66,694.402 1758.22,677.147 1758.78,692.336 1759.34,693.977 1759.89,707.199 1760.45,723.445 1761.01,723.28 1761.57,706.46 1762.13,675.567 1762.69,659.254 1763.25,662.328 1763.81,630.067 1764.37,614.594 1764.93,667.314 1765.49,687.834 1766.05,640.249 1766.61,626.28 1767.16,628.997 1767.72,596.041 1768.28,567.275 1768.84,590.91 1769.4,577.988 1769.96,598.256 1770.52,602.628 1771.08,606.477 1771.64,611.158 1772.2,633.315 1772.76,636.562 1773.32,640.834 1773.88,611.842 1774.43,649.84 1774.99,634.601 1775.55,672.009 1776.11,659.208 1776.67,663.535 1777.23,663.373 1777.79,629.206 1778.35,635.307 1778.91,639.762 1779.47,645.105 1780.03,664.717 1780.59,666.553 1781.15,668.208 1781.71,652.588 1782.26,684.241 1782.82,717.39 1783.38,732.569 1783.94,728.135 1784.5,695.351 1785.06,712.094 1785.62,677.996 1786.18,695.411 1786.74,695.617 1787.3,694.975 1787.86,663.525 1788.42,660.726 1788.98,665.884 1789.53,653.866 1790.09,638.721 1790.65,639.968 1791.21,643.207 1791.77,626.507 1792.33,613.492 1792.89,617.387 1793.45,603.984 1794.01,595.46 1794.57,584.348 1795.13,603.716 1795.69,593.425 1796.25,564.404 1796.8,586.679 1797.36,607.953 1797.92,610.143 1798.48,614.639 1799.04,588.671 1799.6,608.92 1800.16,598.799 1800.72,600.43 1801.28,603.799 1801.84,642.426 1802.4,645.589 1802.96,630.213 1803.52,617.624 1804.08,573.264 1804.63,594.103 1805.19,564.079 1805.75,586.384 1806.31,576.163 1806.87,581.542 1807.43,590.851 1807.99,611.901 1808.55,595.689 1809.11,602.126 1809.67,606.881 1810.23,627.42 1810.79,649.851 1811.35,670.585 1811.9,687.767 1812.46,701.873 1813.02,716.642 1813.58,713.61 1814.14,710.395 1814.7,706.123 1815.26,722.366 1815.82,717.019 1816.38,734.504 1816.94,753.271 1817.5,766.799 1818.06,765.162 1818.62,777.153 1819.18,788.046 1819.73,784.271 1820.29,822.951 1820.85,780.967 1821.41,810.362 1821.97,822.172 1822.53,847.087 1823.09,822.271 1823.65,813.369 1824.21,793.382 1824.77,788.144 1825.33,736.007 1825.89,735.148 1826.45,738.194 1827,751.548 1827.56,752.291 1828.12,781.001 1828.68,775.685 1829.24,770.157 1829.8,766.993 1830.36,758.067 1830.92,755.458 1831.48,751.378 1832.04,732.504 1832.6,760.121 1833.16,735.657 1833.72,700.465 1834.27,697.998 1834.83,695.155 1835.39,675.306 1835.95,706.653 1836.51,705.986 1837.07,722.414 1837.63,717.635 1838.19,733.871 \"/>\n<path clip-path=\"url(#clip313)\" d=\"M720.247 691.358 L720.806 691.358 L721.365 691.358 L721.924 691.358 L722.484 691.358 L723.043 691.358 L723.602 691.358 L724.161 691.358 L724.721 691.358 L725.28 691.358 L725.839 691.358 L726.398 691.358 L726.958 691.358 L727.517 691.358 L728.076 691.358 L728.635 691.358 L729.195 691.358 L729.754 691.358 L730.313 691.358 L730.872 691.358 L731.432 691.358 L731.991 691.358 L732.55 691.358 L733.109 691.358 L733.669 691.358 L734.228 691.358 L734.787 691.358 L735.346 691.358 L735.906 691.358 L736.465 691.358 L737.024 691.358 L737.583 691.358 L738.143 691.358 L738.702 691.358 L739.261 691.358 L739.82 691.358 L740.38 691.358 L740.939 691.358 L741.498 691.358 L742.057 691.358 L742.617 691.358 L743.176 691.358 L743.735 691.358 L744.294 691.358 L744.854 691.358 L745.413 691.358 L745.972 691.358 L746.531 691.358 L747.091 691.358 L747.65 691.358 L748.209 691.358 L748.768 691.358 L749.328 691.358 L749.887 691.358 L750.446 691.358 L751.005 691.358 L751.565 691.358 L752.124 691.358 L752.683 691.358 L753.242 691.358 L753.802 691.358 L754.361 691.358 L754.92 691.358 L755.479 691.358 L756.039 691.358 L756.598 691.358 L757.157 691.358 L757.716 691.358 L758.276 691.358 L758.835 691.358 L759.394 691.358 L759.953 691.358 L760.513 691.358 L761.072 691.358 L761.631 691.358 L762.19 691.358 L762.75 691.358 L763.309 691.358 L763.868 691.358 L764.427 691.358 L764.987 691.358 L765.546 691.358 L766.105 691.358 L766.664 691.358 L767.224 691.358 L767.783 691.358 L768.342 691.358 L768.901 691.358 L769.461 691.358 L770.02 691.358 L770.579 691.358 L771.138 691.358 L771.698 691.358 L772.257 691.358 L772.816 691.358 L773.375 691.358 L773.935 691.358 L774.494 691.358 L775.053 691.358 L775.612 691.358 L776.172 691.358 L776.731 691.358 L777.29 691.358 L777.849 691.358 L778.409 691.358 L778.968 691.358 L779.527 691.358 L780.086 691.358 L780.646 691.358 L781.205 691.358 L781.764 691.358 L782.323 691.358 L782.883 691.358 L783.442 691.358 L784.001 691.358 L784.56 691.358 L785.12 691.358 L785.679 691.358 L786.238 691.358 L786.797 691.358 L787.357 691.358 L787.916 691.358 L788.475 691.358 L789.034 691.358 L789.594 691.358 L790.153 691.358 L790.712 691.358 L791.271 691.358 L791.831 691.358 L792.39 691.358 L792.949 691.358 L793.508 691.358 L794.068 691.358 L794.627 691.358 L795.186 691.358 L795.745 691.358 L796.305 691.358 L796.864 691.358 L797.423 691.358 L797.982 691.358 L798.542 691.358 L799.101 691.358 L799.66 691.358 L800.219 691.358 L800.779 691.358 L801.338 691.358 L801.897 691.358 L802.456 691.358 L803.016 691.358 L803.575 691.358 L804.134 691.358 L804.693 691.358 L805.253 691.358 L805.812 691.358 L806.371 691.358 L806.931 691.358 L807.49 691.358 L808.049 691.358 L808.608 691.358 L809.168 691.358 L809.727 691.358 L810.286 691.358 L810.845 691.358 L811.405 691.358 L811.964 691.358 L812.523 691.358 L813.082 691.358 L813.642 691.358 L814.201 691.358 L814.76 691.358 L815.319 691.358 L815.879 691.358 L816.438 691.358 L816.997 691.358 L817.556 691.358 L818.116 691.358 L818.675 691.358 L819.234 691.358 L819.793 691.358 L820.353 691.358 L820.912 691.358 L821.471 691.358 L822.03 691.358 L822.59 691.358 L823.149 691.358 L823.708 691.358 L824.267 691.358 L824.827 691.358 L825.386 691.358 L825.945 691.358 L826.504 691.358 L827.064 691.358 L827.623 691.358 L828.182 691.358 L828.741 691.358 L829.301 691.358 L829.86 691.358 L830.419 691.358 L830.978 691.358 L831.538 691.358 L832.097 691.358 L832.656 691.358 L833.215 691.358 L833.775 691.358 L834.334 691.358 L834.893 691.358 L835.452 691.358 L836.012 691.358 L836.571 691.358 L837.13 691.358 L837.689 691.358 L838.249 691.358 L838.808 691.358 L839.367 691.358 L839.926 691.358 L840.486 691.358 L841.045 691.358 L841.604 691.358 L842.163 691.358 L842.723 691.358 L843.282 691.358 L843.841 691.358 L844.4 691.358 L844.96 691.358 L845.519 691.358 L846.078 691.358 L846.637 691.358 L847.197 691.358 L847.756 691.358 L848.315 691.358 L848.874 691.358 L849.434 691.358 L849.993 691.358 L850.552 691.358 L851.111 691.358 L851.671 691.358 L852.23 691.358 L852.789 691.358 L853.348 691.358 L853.908 691.358 L854.467 691.358 L855.026 691.358 L855.585 691.358 L856.145 691.358 L856.704 691.358 L857.263 691.358 L857.822 691.358 L858.382 691.358 L858.941 691.358 L859.5 691.358 L860.059 691.358 L860.619 691.358 L861.178 691.358 L861.737 691.358 L862.296 691.358 L862.856 691.358 L863.415 691.358 L863.974 691.358 L864.533 691.358 L865.093 691.358 L865.652 691.358 L866.211 691.358 L866.77 691.358 L867.33 691.358 L867.889 691.358 L868.448 691.358 L869.007 691.358 L869.567 691.358 L870.126 691.358 L870.685 691.358 L871.244 691.358 L871.804 691.358 L872.363 691.358 L872.922 691.358 L873.481 691.358 L874.041 691.358 L874.6 691.358 L875.159 691.358 L875.718 691.358 L876.278 691.358 L876.837 691.358 L877.396 691.358 L877.955 691.358 L878.515 691.358 L879.074 691.358 L879.633 691.358 L880.192 691.358 L880.752 691.358 L881.311 691.358 L881.87 691.358 L882.429 691.358 L882.989 691.358 L883.548 691.358 L884.107 691.358 L884.666 691.358 L885.226 691.358 L885.785 691.358 L886.344 691.358 L886.903 691.358 L887.463 691.358 L888.022 691.358 L888.581 691.358 L889.14 691.358 L889.7 691.358 L890.259 691.358 L890.818 691.358 L891.377 691.358 L891.937 691.358 L892.496 691.358 L893.055 691.358 L893.614 691.358 L894.174 691.358 L894.733 691.358 L895.292 691.358 L895.851 691.358 L896.411 691.358 L896.97 691.358 L897.529 691.358 L898.088 691.358 L898.648 691.358 L899.207 691.358 L899.766 691.358 L900.325 691.358 L900.885 691.358 L901.444 691.358 L902.003 691.358 L902.562 691.358 L903.122 691.358 L903.681 691.358 L904.24 691.358 L904.799 691.358 L905.359 691.358 L905.918 691.358 L906.477 691.358 L907.036 691.358 L907.596 691.358 L908.155 691.358 L908.714 691.358 L909.273 691.358 L909.833 691.358 L910.392 691.358 L910.951 691.358 L911.51 691.358 L912.07 691.358 L912.629 691.358 L913.188 691.358 L913.747 691.358 L914.307 691.358 L914.866 691.358 L915.425 691.358 L915.984 691.358 L916.544 691.358 L917.103 691.358 L917.662 691.358 L918.221 691.358 L918.781 691.358 L919.34 691.358 L919.899 691.358 L920.458 691.358 L921.018 691.358 L921.577 691.358 L922.136 691.358 L922.695 691.358 L923.255 691.358 L923.814 691.358 L924.373 691.358 L924.932 691.358 L925.492 691.358 L926.051 691.358 L926.61 691.358 L927.169 691.358 L927.729 691.358 L928.288 691.358 L928.847 691.358 L929.406 691.358 L929.966 691.358 L930.525 691.358 L931.084 691.358 L931.644 691.358 L932.203 691.358 L932.762 691.358 L933.321 691.358 L933.881 691.358 L934.44 691.358 L934.999 691.358 L935.558 691.358 L936.118 691.358 L936.677 691.358 L937.236 691.358 L937.795 691.358 L938.355 691.358 L938.914 691.358 L939.473 691.358 L940.032 691.358 L940.592 691.358 L941.151 691.358 L941.71 691.358 L942.269 691.358 L942.829 691.358 L943.388 691.358 L943.947 691.358 L944.506 691.358 L945.066 691.358 L945.625 691.358 L946.184 691.358 L946.743 691.358 L947.303 691.358 L947.862 691.358 L948.421 691.358 L948.98 691.358 L949.54 691.358 L950.099 691.358 L950.658 691.358 L951.217 691.358 L951.777 691.358 L952.336 691.358 L952.895 691.358 L953.454 691.358 L954.014 691.358 L954.573 691.358 L955.132 691.358 L955.691 691.358 L956.251 691.358 L956.81 691.358 L957.369 691.358 L957.928 691.358 L958.488 691.358 L959.047 691.358 L959.606 691.358 L960.165 691.358 L960.725 691.358 L961.284 691.358 L961.843 691.358 L962.402 691.358 L962.962 691.358 L963.521 691.358 L964.08 691.358 L964.639 691.358 L965.199 691.358 L965.758 691.358 L966.317 691.358 L966.876 691.358 L967.436 691.358 L967.995 691.358 L968.554 691.358 L969.113 691.358 L969.673 691.358 L970.232 691.358 L970.791 691.358 L971.35 691.358 L971.91 691.358 L972.469 691.358 L973.028 691.358 L973.587 691.358 L974.147 691.358 L974.706 691.358 L975.265 691.358 L975.824 691.358 L976.384 691.358 L976.943 691.358 L977.502 691.358 L978.061 691.358 L978.621 691.358 L979.18 691.358 L979.739 691.358 L980.298 691.358 L980.858 691.358 L981.417 691.358 L981.976 691.358 L982.535 691.358 L983.095 691.358 L983.654 691.358 L984.213 691.358 L984.772 691.358 L985.332 691.358 L985.891 691.358 L986.45 691.358 L987.009 691.358 L987.569 691.358 L988.128 691.358 L988.687 691.358 L989.246 691.358 L989.806 691.358 L990.365 691.358 L990.924 691.358 L991.483 691.358 L992.043 691.358 L992.602 691.358 L993.161 691.358 L993.72 691.358 L994.28 691.358 L994.839 691.358 L995.398 691.358 L995.957 691.358 L996.517 691.358 L997.076 691.358 L997.635 691.358 L998.194 691.358 L998.754 691.358 L999.313 691.358 L999.872 691.358 L1000.43 691.358 L1000.99 691.358 L1001.55 691.358 L1002.11 691.358 L1002.67 691.358 L1003.23 691.358 L1003.79 691.358 L1004.35 691.358 L1004.91 691.358 L1005.46 691.358 L1006.02 691.358 L1006.58 691.358 L1007.14 691.358 L1007.7 691.358 L1008.26 691.358 L1008.82 691.358 L1009.38 691.358 L1009.94 691.358 L1010.5 691.358 L1011.06 691.358 L1011.62 691.358 L1012.18 691.358 L1012.73 691.358 L1013.29 691.358 L1013.85 691.358 L1014.41 691.358 L1014.97 691.358 L1015.53 691.358 L1016.09 691.358 L1016.65 691.358 L1017.21 691.358 L1017.77 691.358 L1018.33 691.358 L1018.89 691.358 L1019.45 691.358 L1020.01 691.358 L1020.56 691.358 L1021.12 691.358 L1021.68 691.358 L1022.24 691.358 L1022.8 691.358 L1023.36 691.358 L1023.92 691.358 L1024.48 691.358 L1025.04 691.358 L1025.6 691.358 L1026.16 691.358 L1026.72 691.358 L1027.28 691.358 L1027.83 691.358 L1028.39 691.358 L1028.95 691.358 L1029.51 691.358 L1030.07 691.358 L1030.63 691.358 L1031.19 691.358 L1031.75 691.358 L1032.31 691.358 L1032.87 691.358 L1033.43 691.358 L1033.99 691.358 L1034.55 691.358 L1035.1 691.358 L1035.66 691.358 L1036.22 691.358 L1036.78 691.358 L1037.34 691.358 L1037.9 691.358 L1038.46 691.358 L1039.02 691.358 L1039.58 691.358 L1040.14 691.358 L1040.7 691.358 L1041.26 691.358 L1041.82 691.358 L1042.38 691.358 L1042.93 691.358 L1043.49 691.358 L1044.05 691.358 L1044.61 691.358 L1045.17 691.358 L1045.73 691.358 L1046.29 691.358 L1046.85 691.358 L1047.41 691.358 L1047.97 691.358 L1048.53 691.358 L1049.09 691.358 L1049.65 691.358 L1050.2 691.358 L1050.76 691.358 L1051.32 691.358 L1051.88 691.358 L1052.44 691.358 L1053 691.358 L1053.56 691.358 L1054.12 691.358 L1054.68 691.358 L1055.24 691.358 L1055.8 691.358 L1056.36 691.358 L1056.92 691.358 L1057.48 691.358 L1058.03 691.358 L1058.59 691.358 L1059.15 691.358 L1059.71 691.358 L1060.27 691.358 L1060.83 691.358 L1061.39 691.358 L1061.95 691.358 L1062.51 691.358 L1063.07 691.358 L1063.63 691.358 L1064.19 691.358 L1064.75 691.358 L1065.3 691.358 L1065.86 691.358 L1066.42 691.358 L1066.98 691.358 L1067.54 691.358 L1068.1 691.358 L1068.66 691.358 L1069.22 691.358 L1069.78 691.358 L1070.34 691.358 L1070.9 691.358 L1071.46 691.358 L1072.02 691.358 L1072.57 691.358 L1073.13 691.358 L1073.69 691.358 L1074.25 691.358 L1074.81 691.358 L1075.37 691.358 L1075.93 691.358 L1076.49 691.358 L1077.05 691.358 L1077.61 691.358 L1078.17 691.358 L1078.73 691.358 L1079.29 691.358 L1079.85 691.358 L1080.4 691.358 L1080.96 691.358 L1081.52 691.358 L1082.08 691.358 L1082.64 691.358 L1083.2 691.358 L1083.76 691.358 L1084.32 691.358 L1084.88 691.358 L1085.44 691.358 L1086 691.358 L1086.56 691.358 L1087.12 691.358 L1087.67 691.358 L1088.23 691.358 L1088.79 691.358 L1089.35 691.358 L1089.91 691.358 L1090.47 691.358 L1091.03 691.358 L1091.59 691.358 L1092.15 691.358 L1092.71 691.358 L1093.27 691.358 L1093.83 691.358 L1094.39 691.358 L1094.94 691.358 L1095.5 691.358 L1096.06 691.358 L1096.62 691.358 L1097.18 691.358 L1097.74 691.358 L1098.3 691.358 L1098.86 691.358 L1099.42 691.358 L1099.98 691.358 L1100.54 691.358 L1101.1 691.358 L1101.66 691.358 L1102.22 691.358 L1102.77 691.358 L1103.33 691.358 L1103.89 691.358 L1104.45 691.358 L1105.01 691.358 L1105.57 691.358 L1106.13 691.358 L1106.69 691.358 L1107.25 691.358 L1107.81 691.358 L1108.37 691.358 L1108.93 691.358 L1109.49 691.358 L1110.04 691.358 L1110.6 691.358 L1111.16 691.358 L1111.72 691.358 L1112.28 691.358 L1112.84 691.358 L1113.4 691.358 L1113.96 691.358 L1114.52 691.358 L1115.08 691.358 L1115.64 691.358 L1116.2 691.358 L1116.76 691.358 L1117.31 691.358 L1117.87 691.358 L1118.43 691.358 L1118.99 691.358 L1119.55 691.358 L1120.11 691.358 L1120.67 691.358 L1121.23 691.358 L1121.79 691.358 L1122.35 691.358 L1122.91 691.358 L1123.47 691.358 L1124.03 691.358 L1124.59 691.358 L1125.14 691.358 L1125.7 691.358 L1126.26 691.358 L1126.82 691.358 L1127.38 691.358 L1127.94 691.358 L1128.5 691.358 L1129.06 691.358 L1129.62 691.358 L1130.18 691.358 L1130.74 691.358 L1131.3 691.358 L1131.86 691.358 L1132.41 691.358 L1132.97 691.358 L1133.53 691.358 L1134.09 691.358 L1134.65 691.358 L1135.21 691.358 L1135.77 691.358 L1136.33 691.358 L1136.89 691.358 L1137.45 691.358 L1138.01 691.358 L1138.57 691.358 L1139.13 691.358 L1139.68 691.358 L1140.24 691.358 L1140.8 691.358 L1141.36 691.358 L1141.92 691.358 L1142.48 691.358 L1143.04 691.358 L1143.6 691.358 L1144.16 691.358 L1144.72 691.358 L1145.28 691.358 L1145.84 691.358 L1146.4 691.358 L1146.96 691.358 L1147.51 691.358 L1148.07 691.358 L1148.63 691.358 L1149.19 691.358 L1149.75 691.358 L1150.31 691.358 L1150.87 691.358 L1151.43 691.358 L1151.99 691.358 L1152.55 691.358 L1153.11 691.358 L1153.67 691.358 L1154.23 691.358 L1154.78 691.358 L1155.34 691.358 L1155.9 691.358 L1156.46 691.358 L1157.02 691.358 L1157.58 691.358 L1158.14 691.358 L1158.7 691.358 L1159.26 691.358 L1159.82 691.358 L1160.38 691.358 L1160.94 691.358 L1161.5 691.358 L1162.05 691.358 L1162.61 691.358 L1163.17 691.358 L1163.73 691.358 L1164.29 691.358 L1164.85 691.358 L1165.41 691.358 L1165.97 691.358 L1166.53 691.358 L1167.09 691.358 L1167.65 691.358 L1168.21 691.358 L1168.77 691.358 L1169.33 691.358 L1169.88 691.358 L1170.44 691.358 L1171 691.358 L1171.56 691.358 L1172.12 691.358 L1172.68 691.358 L1173.24 691.358 L1173.8 691.358 L1174.36 691.358 L1174.92 691.358 L1175.48 691.358 L1176.04 691.358 L1176.6 691.358 L1177.15 691.358 L1177.71 691.358 L1178.27 691.358 L1178.83 691.358 L1179.39 691.358 L1179.95 691.358 L1180.51 691.358 L1181.07 691.358 L1181.63 691.358 L1182.19 691.358 L1182.75 691.358 L1183.31 691.358 L1183.87 691.358 L1184.43 691.358 L1184.98 691.358 L1185.54 691.358 L1186.1 691.358 L1186.66 691.358 L1187.22 691.358 L1187.78 691.358 L1188.34 691.358 L1188.9 691.358 L1189.46 691.358 L1190.02 691.358 L1190.58 691.358 L1191.14 691.358 L1191.7 691.358 L1192.25 691.358 L1192.81 691.358 L1193.37 691.358 L1193.93 691.358 L1194.49 691.358 L1195.05 691.358 L1195.61 691.358 L1196.17 691.358 L1196.73 691.358 L1197.29 691.358 L1197.85 691.358 L1198.41 691.358 L1198.97 691.358 L1199.52 691.358 L1200.08 691.358 L1200.64 691.358 L1201.2 691.358 L1201.76 691.358 L1202.32 691.358 L1202.88 691.358 L1203.44 691.358 L1204 691.358 L1204.56 691.358 L1205.12 691.358 L1205.68 691.358 L1206.24 691.358 L1206.8 691.358 L1207.35 691.358 L1207.91 691.358 L1208.47 691.358 L1209.03 691.358 L1209.59 691.358 L1210.15 691.358 L1210.71 691.358 L1211.27 691.358 L1211.83 691.358 L1212.39 691.358 L1212.95 691.358 L1213.51 691.358 L1214.07 691.358 L1214.62 691.358 L1215.18 691.358 L1215.74 691.358 L1216.3 691.358 L1216.86 691.358 L1217.42 691.358 L1217.98 691.358 L1218.54 691.358 L1219.1 691.358 L1219.66 691.358 L1220.22 691.358 L1220.78 691.358 L1221.34 691.358 L1221.89 691.358 L1222.45 691.358 L1223.01 691.358 L1223.57 691.358 L1224.13 691.358 L1224.69 691.358 L1225.25 691.358 L1225.81 691.358 L1226.37 691.358 L1226.93 691.358 L1227.49 691.358 L1228.05 691.358 L1228.61 691.358 L1229.17 691.358 L1229.72 691.358 L1230.28 691.358 L1230.84 691.358 L1231.4 691.358 L1231.96 691.358 L1232.52 691.358 L1233.08 691.358 L1233.64 691.358 L1234.2 691.358 L1234.76 691.358 L1235.32 691.358 L1235.88 691.358 L1236.44 691.358 L1236.99 691.358 L1237.55 691.358 L1238.11 691.358 L1238.67 691.358 L1239.23 691.358 L1239.79 691.358 L1240.35 691.358 L1240.91 691.358 L1241.47 691.358 L1242.03 691.358 L1242.59 691.358 L1243.15 691.358 L1243.71 691.358 L1244.26 691.358 L1244.82 691.358 L1245.38 691.358 L1245.94 691.358 L1246.5 691.358 L1247.06 691.358 L1247.62 691.358 L1248.18 691.358 L1248.74 691.358 L1249.3 691.358 L1249.86 691.358 L1250.42 691.358 L1250.98 691.358 L1251.54 691.358 L1252.09 691.358 L1252.65 691.358 L1253.21 691.358 L1253.77 691.358 L1254.33 691.358 L1254.89 691.358 L1255.45 691.358 L1256.01 691.358 L1256.57 691.358 L1257.13 691.358 L1257.69 691.358 L1258.25 691.358 L1258.81 691.358 L1259.36 691.358 L1259.92 691.358 L1260.48 691.358 L1261.04 691.358 L1261.6 691.358 L1262.16 691.358 L1262.72 691.358 L1263.28 691.358 L1263.84 691.358 L1264.4 691.358 L1264.96 691.358 L1265.52 691.358 L1266.08 691.358 L1266.63 691.358 L1267.19 691.358 L1267.75 691.358 L1268.31 691.358 L1268.87 691.358 L1269.43 691.358 L1269.99 691.358 L1270.55 691.358 L1271.11 691.358 L1271.67 691.358 L1272.23 691.358 L1272.79 691.358 L1273.35 691.358 L1273.91 691.358 L1274.46 691.358 L1275.02 691.358 L1275.58 691.358 L1276.14 691.358 L1276.7 691.358 L1277.26 691.358 L1277.82 691.358 L1278.38 691.358 L1278.94 691.358 L1279.5 691.358 L1280.06 691.358 L1280.62 691.358 L1281.18 691.358 L1281.73 691.358 L1282.29 691.358 L1282.85 691.358 L1283.41 691.358 L1283.97 691.358 L1284.53 691.358 L1285.09 691.358 L1285.65 691.358 L1286.21 691.358 L1286.77 691.358 L1287.33 691.358 L1287.89 691.358 L1288.45 691.358 L1289 691.358 L1289.56 691.358 L1290.12 691.358 L1290.68 691.358 L1291.24 691.358 L1291.8 691.358 L1292.36 691.358 L1292.92 691.358 L1293.48 691.358 L1294.04 691.358 L1294.6 691.358 L1295.16 691.358 L1295.72 691.358 L1296.28 691.358 L1296.83 691.358 L1297.39 691.358 L1297.95 691.358 L1298.51 691.358 L1299.07 691.358 L1299.63 691.358 L1300.19 691.358 L1300.75 691.358 L1301.31 691.358 L1301.87 691.358 L1302.43 691.358 L1302.99 691.358 L1303.55 691.358 L1304.1 691.358 L1304.66 691.358 L1305.22 691.358 L1305.78 691.358 L1306.34 691.358 L1306.9 691.358 L1307.46 691.358 L1308.02 691.358 L1308.58 691.358 L1309.14 691.358 L1309.7 691.358 L1310.26 691.358 L1310.82 691.358 L1311.38 691.358 L1311.93 691.358 L1312.49 691.358 L1313.05 691.358 L1313.61 691.358 L1314.17 691.358 L1314.73 691.358 L1315.29 691.358 L1315.85 691.358 L1316.41 691.358 L1316.97 691.358 L1317.53 691.358 L1318.09 691.358 L1318.65 691.358 L1319.2 691.358 L1319.76 691.358 L1320.32 691.358 L1320.88 691.358 L1321.44 691.358 L1322 691.358 L1322.56 691.358 L1323.12 691.358 L1323.68 691.358 L1324.24 691.358 L1324.8 691.358 L1325.36 691.358 L1325.92 691.358 L1326.47 691.358 L1327.03 691.358 L1327.59 691.358 L1328.15 691.358 L1328.71 691.358 L1329.27 691.358 L1329.83 691.358 L1330.39 691.358 L1330.95 691.358 L1331.51 691.358 L1332.07 691.358 L1332.63 691.358 L1333.19 691.358 L1333.75 691.358 L1334.3 691.358 L1334.86 691.358 L1335.42 691.358 L1335.98 691.358 L1336.54 691.358 L1337.1 691.358 L1337.66 691.358 L1338.22 691.358 L1338.78 691.358 L1339.34 691.358 L1339.9 691.358 L1340.46 691.358 L1341.02 691.358 L1341.57 691.358 L1342.13 691.358 L1342.69 691.358 L1343.25 691.358 L1343.81 691.358 L1344.37 691.358 L1344.93 691.358 L1345.49 691.358 L1346.05 691.358 L1346.61 691.358 L1347.17 691.358 L1347.73 691.358 L1348.29 691.358 L1348.84 691.358 L1349.4 691.358 L1349.96 691.358 L1350.52 691.358 L1351.08 691.358 L1351.64 691.358 L1352.2 691.358 L1352.76 691.358 L1353.32 691.358 L1353.88 691.358 L1354.44 691.358 L1355 691.358 L1355.56 691.358 L1356.12 691.358 L1356.67 691.358 L1357.23 691.358 L1357.79 691.358 L1358.35 691.358 L1358.91 691.358 L1359.47 691.358 L1360.03 691.358 L1360.59 691.358 L1361.15 691.358 L1361.71 691.358 L1362.27 691.358 L1362.83 691.358 L1363.39 691.358 L1363.94 691.358 L1364.5 691.358 L1365.06 691.358 L1365.62 691.358 L1366.18 691.358 L1366.74 691.358 L1367.3 691.358 L1367.86 691.358 L1368.42 691.358 L1368.98 691.358 L1369.54 691.358 L1370.1 691.358 L1370.66 691.358 L1371.21 691.358 L1371.77 691.358 L1372.33 691.358 L1372.89 691.358 L1373.45 691.358 L1374.01 691.358 L1374.57 691.358 L1375.13 691.358 L1375.69 691.358 L1376.25 691.358 L1376.81 691.358 L1377.37 691.358 L1377.93 691.358 L1378.49 691.358 L1379.04 691.358 L1379.6 691.358 L1380.16 691.358 L1380.72 691.358 L1381.28 691.358 L1381.84 691.358 L1382.4 691.358 L1382.96 691.358 L1383.52 691.358 L1384.08 691.358 L1384.64 691.358 L1385.2 691.358 L1385.76 691.358 L1386.31 691.358 L1386.87 691.358 L1387.43 691.358 L1387.99 691.358 L1388.55 691.358 L1389.11 691.358 L1389.67 691.358 L1390.23 691.358 L1390.79 691.358 L1391.35 691.358 L1391.91 691.358 L1392.47 691.358 L1393.03 691.358 L1393.58 691.358 L1394.14 691.358 L1394.7 691.358 L1395.26 691.358 L1395.82 691.358 L1396.38 691.358 L1396.94 691.358 L1397.5 691.358 L1398.06 691.358 L1398.62 691.358 L1399.18 691.358 L1399.74 691.358 L1400.3 691.358 L1400.86 691.358 L1401.41 691.358 L1401.97 691.358 L1402.53 691.358 L1403.09 691.358 L1403.65 691.358 L1404.21 691.358 L1404.77 691.358 L1405.33 691.358 L1405.89 691.358 L1406.45 691.358 L1407.01 691.358 L1407.57 691.358 L1408.13 691.358 L1408.68 691.358 L1409.24 691.358 L1409.8 691.358 L1410.36 691.358 L1410.92 691.358 L1411.48 691.358 L1412.04 691.358 L1412.6 691.358 L1413.16 691.358 L1413.72 691.358 L1414.28 691.358 L1414.84 691.358 L1415.4 691.358 L1415.95 691.358 L1416.51 691.358 L1417.07 691.358 L1417.63 691.358 L1418.19 691.358 L1418.75 691.358 L1419.31 691.358 L1419.87 691.358 L1420.43 691.358 L1420.99 691.358 L1421.55 691.358 L1422.11 691.358 L1422.67 691.358 L1423.23 691.358 L1423.78 691.358 L1424.34 691.358 L1424.9 691.358 L1425.46 691.358 L1426.02 691.358 L1426.58 691.358 L1427.14 691.358 L1427.7 691.358 L1428.26 691.358 L1428.82 691.358 L1429.38 691.358 L1429.94 691.358 L1430.5 691.358 L1431.05 691.358 L1431.61 691.358 L1432.17 691.358 L1432.73 691.358 L1433.29 691.358 L1433.85 691.358 L1434.41 691.358 L1434.97 691.358 L1435.53 691.358 L1436.09 691.358 L1436.65 691.358 L1437.21 691.358 L1437.77 691.358 L1438.33 691.358 L1438.88 691.358 L1439.44 691.358 L1440 691.358 L1440.56 691.358 L1441.12 691.358 L1441.68 691.358 L1442.24 691.358 L1442.8 691.358 L1443.36 691.358 L1443.92 691.358 L1444.48 691.358 L1445.04 691.358 L1445.6 691.358 L1446.15 691.358 L1446.71 691.358 L1447.27 691.358 L1447.83 691.358 L1448.39 691.358 L1448.95 691.358 L1449.51 691.358 L1450.07 691.358 L1450.63 691.358 L1451.19 691.358 L1451.75 691.358 L1452.31 691.358 L1452.87 691.358 L1453.42 691.358 L1453.98 691.358 L1454.54 691.358 L1455.1 691.358 L1455.66 691.358 L1456.22 691.358 L1456.78 691.358 L1457.34 691.358 L1457.9 691.358 L1458.46 691.358 L1459.02 691.358 L1459.58 691.358 L1460.14 691.358 L1460.7 691.358 L1461.25 691.358 L1461.81 691.358 L1462.37 691.358 L1462.93 691.358 L1463.49 691.358 L1464.05 691.358 L1464.61 691.358 L1465.17 691.358 L1465.73 691.358 L1466.29 691.358 L1466.85 691.358 L1467.41 691.358 L1467.97 691.358 L1468.52 691.358 L1469.08 691.358 L1469.64 691.358 L1470.2 691.358 L1470.76 691.358 L1471.32 691.358 L1471.88 691.358 L1472.44 691.358 L1473 691.358 L1473.56 691.358 L1474.12 691.358 L1474.68 691.358 L1475.24 691.358 L1475.79 691.358 L1476.35 691.358 L1476.91 691.358 L1477.47 691.358 L1478.03 691.358 L1478.59 691.358 L1479.15 691.358 L1479.71 691.358 L1480.27 691.358 L1480.83 691.358 L1481.39 691.358 L1481.95 691.358 L1482.51 691.358 L1483.07 691.358 L1483.62 691.358 L1484.18 691.358 L1484.74 691.358 L1485.3 691.358 L1485.86 691.358 L1486.42 691.358 L1486.98 691.358 L1487.54 691.358 L1488.1 691.358 L1488.66 691.358 L1489.22 691.358 L1489.78 691.358 L1490.34 691.358 L1490.89 691.358 L1491.45 691.358 L1492.01 691.358 L1492.57 691.358 L1493.13 691.358 L1493.69 691.358 L1494.25 691.358 L1494.81 691.358 L1495.37 691.358 L1495.93 691.358 L1496.49 691.358 L1497.05 691.358 L1497.61 691.358 L1498.16 691.358 L1498.72 691.358 L1499.28 691.358 L1499.84 691.358 L1500.4 691.358 L1500.96 691.358 L1501.52 691.358 L1502.08 691.358 L1502.64 691.358 L1503.2 691.358 L1503.76 691.358 L1504.32 691.358 L1504.88 691.358 L1505.44 691.358 L1505.99 691.358 L1506.55 691.358 L1507.11 691.358 L1507.67 691.358 L1508.23 691.358 L1508.79 691.358 L1509.35 691.358 L1509.91 691.358 L1510.47 691.358 L1511.03 691.358 L1511.59 691.358 L1512.15 691.358 L1512.71 691.358 L1513.26 691.358 L1513.82 691.358 L1514.38 691.358 L1514.94 691.358 L1515.5 691.358 L1516.06 691.358 L1516.62 691.358 L1517.18 691.358 L1517.74 691.358 L1518.3 691.358 L1518.86 691.358 L1519.42 691.358 L1519.98 691.358 L1520.53 691.358 L1521.09 691.358 L1521.65 691.358 L1522.21 691.358 L1522.77 691.358 L1523.33 691.358 L1523.89 691.358 L1524.45 691.358 L1525.01 691.358 L1525.57 691.358 L1526.13 691.358 L1526.69 691.358 L1527.25 691.358 L1527.81 691.358 L1528.36 691.358 L1528.92 691.358 L1529.48 691.358 L1530.04 691.358 L1530.6 691.358 L1531.16 691.358 L1531.72 691.358 L1532.28 691.358 L1532.84 691.358 L1533.4 691.358 L1533.96 691.358 L1534.52 691.358 L1535.08 691.358 L1535.63 691.358 L1536.19 691.358 L1536.75 691.358 L1537.31 691.358 L1537.87 691.358 L1538.43 691.358 L1538.99 691.358 L1539.55 691.358 L1540.11 691.358 L1540.67 691.358 L1541.23 691.358 L1541.79 691.358 L1542.35 691.358 L1542.9 691.358 L1543.46 691.358 L1544.02 691.358 L1544.58 691.358 L1545.14 691.358 L1545.7 691.358 L1546.26 691.358 L1546.82 691.358 L1547.38 691.358 L1547.94 691.358 L1548.5 691.358 L1549.06 691.358 L1549.62 691.358 L1550.18 691.358 L1550.73 691.358 L1551.29 691.358 L1551.85 691.358 L1552.41 691.358 L1552.97 691.358 L1553.53 691.358 L1554.09 691.358 L1554.65 691.358 L1555.21 691.358 L1555.77 691.358 L1556.33 691.358 L1556.89 691.358 L1557.45 691.358 L1558 691.358 L1558.56 691.358 L1559.12 691.358 L1559.68 691.358 L1560.24 691.358 L1560.8 691.358 L1561.36 691.358 L1561.92 691.358 L1562.48 691.358 L1563.04 691.358 L1563.6 691.358 L1564.16 691.358 L1564.72 691.358 L1565.28 691.358 L1565.83 691.358 L1566.39 691.358 L1566.95 691.358 L1567.51 691.358 L1568.07 691.358 L1568.63 691.358 L1569.19 691.358 L1569.75 691.358 L1570.31 691.358 L1570.87 691.358 L1571.43 691.358 L1571.99 691.358 L1572.55 691.358 L1573.1 691.358 L1573.66 691.358 L1574.22 691.358 L1574.78 691.358 L1575.34 691.358 L1575.9 691.358 L1576.46 691.358 L1577.02 691.358 L1577.58 691.358 L1578.14 691.358 L1578.7 691.358 L1579.26 691.358 L1579.82 691.358 L1580.37 691.358 L1580.93 691.358 L1581.49 691.358 L1582.05 691.358 L1582.61 691.358 L1583.17 691.358 L1583.73 691.358 L1584.29 691.358 L1584.85 691.358 L1585.41 691.358 L1585.97 691.358 L1586.53 691.358 L1587.09 691.358 L1587.65 691.358 L1588.2 691.358 L1588.76 691.358 L1589.32 691.358 L1589.88 691.358 L1590.44 691.358 L1591 691.358 L1591.56 691.358 L1592.12 691.358 L1592.68 691.358 L1593.24 691.358 L1593.8 691.358 L1594.36 691.358 L1594.92 691.358 L1595.47 691.358 L1596.03 691.358 L1596.59 691.358 L1597.15 691.358 L1597.71 691.358 L1598.27 691.358 L1598.83 691.358 L1599.39 691.358 L1599.95 691.358 L1600.51 691.358 L1601.07 691.358 L1601.63 691.358 L1602.19 691.358 L1602.74 691.358 L1603.3 691.358 L1603.86 691.358 L1604.42 691.358 L1604.98 691.358 L1605.54 691.358 L1606.1 691.358 L1606.66 691.358 L1607.22 691.358 L1607.78 691.358 L1608.34 691.358 L1608.9 691.358 L1609.46 691.358 L1610.02 691.358 L1610.57 691.358 L1611.13 691.358 L1611.69 691.358 L1612.25 691.358 L1612.81 691.358 L1613.37 691.358 L1613.93 691.358 L1614.49 691.358 L1615.05 691.358 L1615.61 691.358 L1616.17 691.358 L1616.73 691.358 L1617.29 691.358 L1617.84 691.358 L1618.4 691.358 L1618.96 691.358 L1619.52 691.358 L1620.08 691.358 L1620.64 691.358 L1621.2 691.358 L1621.76 691.358 L1622.32 691.358 L1622.88 691.358 L1623.44 691.358 L1624 691.358 L1624.56 691.358 L1625.11 691.358 L1625.67 691.358 L1626.23 691.358 L1626.79 691.358 L1627.35 691.358 L1627.91 691.358 L1628.47 691.358 L1629.03 691.358 L1629.59 691.358 L1630.15 691.358 L1630.71 691.358 L1631.27 691.358 L1631.83 691.358 L1632.39 691.358 L1632.94 691.358 L1633.5 691.358 L1634.06 691.358 L1634.62 691.358 L1635.18 691.358 L1635.74 691.358 L1636.3 691.358 L1636.86 691.358 L1637.42 691.358 L1637.98 691.358 L1638.54 691.358 L1639.1 691.358 L1639.66 691.358 L1640.21 691.358 L1640.77 691.358 L1641.33 691.358 L1641.89 691.358 L1642.45 691.358 L1643.01 691.358 L1643.57 691.358 L1644.13 691.358 L1644.69 691.358 L1645.25 691.358 L1645.81 691.358 L1646.37 691.358 L1646.93 691.358 L1647.48 691.358 L1648.04 691.358 L1648.6 691.358 L1649.16 691.358 L1649.72 691.358 L1650.28 691.358 L1650.84 691.358 L1651.4 691.358 L1651.96 691.358 L1652.52 691.358 L1653.08 691.358 L1653.64 691.358 L1654.2 691.358 L1654.76 691.358 L1655.31 691.358 L1655.87 691.358 L1656.43 691.358 L1656.99 691.358 L1657.55 691.358 L1658.11 691.358 L1658.67 691.358 L1659.23 691.358 L1659.79 691.358 L1660.35 691.358 L1660.91 691.358 L1661.47 691.358 L1662.03 691.358 L1662.58 691.358 L1663.14 691.358 L1663.7 691.358 L1664.26 691.358 L1664.82 691.358 L1665.38 691.358 L1665.94 691.358 L1666.5 691.358 L1667.06 691.358 L1667.62 691.358 L1668.18 691.358 L1668.74 691.358 L1669.3 691.358 L1669.85 691.358 L1670.41 691.358 L1670.97 691.358 L1671.53 691.358 L1672.09 691.358 L1672.65 691.358 L1673.21 691.358 L1673.77 691.358 L1674.33 691.358 L1674.89 691.358 L1675.45 691.358 L1676.01 691.358 L1676.57 691.358 L1677.13 691.358 L1677.68 691.358 L1678.24 691.358 L1678.8 691.358 L1679.36 691.358 L1679.92 691.358 L1680.48 691.358 L1681.04 691.358 L1681.6 691.358 L1682.16 691.358 L1682.72 691.358 L1683.28 691.358 L1683.84 691.358 L1684.4 691.358 L1684.95 691.358 L1685.51 691.358 L1686.07 691.358 L1686.63 691.358 L1687.19 691.358 L1687.75 691.358 L1688.31 691.358 L1688.87 691.358 L1689.43 691.358 L1689.99 691.358 L1690.55 691.358 L1691.11 691.358 L1691.67 691.358 L1692.23 691.358 L1692.78 691.358 L1693.34 691.358 L1693.9 691.358 L1694.46 691.358 L1695.02 691.358 L1695.58 691.358 L1696.14 691.358 L1696.7 691.358 L1697.26 691.358 L1697.82 691.358 L1698.38 691.358 L1698.94 691.358 L1699.5 691.358 L1700.05 691.358 L1700.61 691.358 L1701.17 691.358 L1701.73 691.358 L1702.29 691.358 L1702.85 691.358 L1703.41 691.358 L1703.97 691.358 L1704.53 691.358 L1705.09 691.358 L1705.65 691.358 L1706.21 691.358 L1706.77 691.358 L1707.32 691.358 L1707.88 691.358 L1708.44 691.358 L1709 691.358 L1709.56 691.358 L1710.12 691.358 L1710.68 691.358 L1711.24 691.358 L1711.8 691.358 L1712.36 691.358 L1712.92 691.358 L1713.48 691.358 L1714.04 691.358 L1714.6 691.358 L1715.15 691.358 L1715.71 691.358 L1716.27 691.358 L1716.83 691.358 L1717.39 691.358 L1717.95 691.358 L1718.51 691.358 L1719.07 691.358 L1719.63 691.358 L1720.19 691.358 L1720.75 691.358 L1721.31 691.358 L1721.87 691.358 L1722.42 691.358 L1722.98 691.358 L1723.54 691.358 L1724.1 691.358 L1724.66 691.358 L1725.22 691.358 L1725.78 691.358 L1726.34 691.358 L1726.9 691.358 L1727.46 691.358 L1728.02 691.358 L1728.58 691.358 L1729.14 691.358 L1729.69 691.358 L1730.25 691.358 L1730.81 691.358 L1731.37 691.358 L1731.93 691.358 L1732.49 691.358 L1733.05 691.358 L1733.61 691.358 L1734.17 691.358 L1734.73 691.358 L1735.29 691.358 L1735.85 691.358 L1736.41 691.358 L1736.97 691.358 L1737.52 691.358 L1738.08 691.358 L1738.64 691.358 L1739.2 691.358 L1739.76 691.358 L1740.32 691.358 L1740.88 691.358 L1741.44 691.358 L1742 691.358 L1742.56 691.358 L1743.12 691.358 L1743.68 691.358 L1744.24 691.358 L1744.79 691.358 L1745.35 691.358 L1745.91 691.358 L1746.47 691.358 L1747.03 691.358 L1747.59 691.358 L1748.15 691.358 L1748.71 691.358 L1749.27 691.358 L1749.83 691.358 L1750.39 691.358 L1750.95 691.358 L1751.51 691.358 L1752.06 691.358 L1752.62 691.358 L1753.18 691.358 L1753.74 691.358 L1754.3 691.358 L1754.86 691.358 L1755.42 691.358 L1755.98 691.358 L1756.54 691.358 L1757.1 691.358 L1757.66 691.358 L1758.22 691.358 L1758.78 691.358 L1759.34 691.358 L1759.89 691.358 L1760.45 691.358 L1761.01 691.358 L1761.57 691.358 L1762.13 691.358 L1762.69 691.358 L1763.25 691.358 L1763.81 691.358 L1764.37 691.358 L1764.93 691.358 L1765.49 691.358 L1766.05 691.358 L1766.61 691.358 L1767.16 691.358 L1767.72 691.358 L1768.28 691.358 L1768.84 691.358 L1769.4 691.358 L1769.96 691.358 L1770.52 691.358 L1771.08 691.358 L1771.64 691.358 L1772.2 691.358 L1772.76 691.358 L1773.32 691.358 L1773.88 691.358 L1774.43 691.358 L1774.99 691.358 L1775.55 691.358 L1776.11 691.358 L1776.67 691.358 L1777.23 691.358 L1777.79 691.358 L1778.35 691.358 L1778.91 691.358 L1779.47 691.358 L1780.03 691.358 L1780.59 691.358 L1781.15 691.358 L1781.71 691.358 L1782.26 691.358 L1782.82 691.358 L1783.38 691.358 L1783.94 691.358 L1784.5 691.358 L1785.06 691.358 L1785.62 691.358 L1786.18 691.358 L1786.74 691.358 L1787.3 691.358 L1787.86 691.358 L1788.42 691.358 L1788.98 691.358 L1789.53 691.358 L1790.09 691.358 L1790.65 691.358 L1791.21 691.358 L1791.77 691.358 L1792.33 691.358 L1792.89 691.358 L1793.45 691.358 L1794.01 691.358 L1794.57 691.358 L1795.13 691.358 L1795.69 691.358 L1796.25 691.358 L1796.8 691.358 L1797.36 691.358 L1797.92 691.358 L1798.48 691.358 L1799.04 691.358 L1799.6 691.358 L1800.16 691.358 L1800.72 691.358 L1801.28 691.358 L1801.84 691.358 L1802.4 691.358 L1802.96 691.358 L1803.52 691.358 L1804.08 691.358 L1804.63 691.358 L1805.19 691.358 L1805.75 691.358 L1806.31 691.358 L1806.87 691.358 L1807.43 691.358 L1807.99 691.358 L1808.55 691.358 L1809.11 691.358 L1809.67 691.358 L1810.23 691.358 L1810.79 691.358 L1811.35 691.358 L1811.9 691.358 L1812.46 691.358 L1813.02 691.358 L1813.58 691.358 L1814.14 691.358 L1814.7 691.358 L1815.26 691.358 L1815.82 691.358 L1816.38 691.358 L1816.94 691.358 L1817.5 691.358 L1818.06 691.358 L1818.62 691.358 L1819.18 691.358 L1819.73 691.358 L1820.29 691.358 L1820.85 691.358 L1821.41 691.358 L1821.97 691.358 L1822.53 691.358 L1823.09 691.358 L1823.65 691.358 L1824.21 691.358 L1824.77 691.358 L1825.33 691.358 L1825.89 691.358 L1826.45 691.358 L1827 691.358 L1827.56 691.358 L1828.12 691.358 L1828.68 691.358 L1829.24 691.358 L1829.8 691.358 L1830.36 691.358 L1830.92 691.358 L1831.48 691.358 L1832.04 691.358 L1832.6 691.358 L1833.16 691.358 L1833.72 691.358 L1834.27 691.358 L1834.83 691.358 L1835.39 691.358 L1835.95 691.358 L1836.51 691.358 L1837.07 691.358 L1837.63 691.358 L1838.19 691.358 L1838.19 683.349 L1837.63 683.349 L1837.07 683.349 L1836.51 683.349 L1835.95 683.349 L1835.39 683.349 L1834.83 683.349 L1834.27 683.349 L1833.72 683.349 L1833.16 683.349 L1832.6 683.349 L1832.04 683.349 L1831.48 683.349 L1830.92 683.349 L1830.36 683.349 L1829.8 683.349 L1829.24 683.349 L1828.68 683.349 L1828.12 683.349 L1827.56 683.349 L1827 683.349 L1826.45 683.349 L1825.89 683.349 L1825.33 683.349 L1824.77 683.349 L1824.21 683.349 L1823.65 683.349 L1823.09 683.349 L1822.53 683.349 L1821.97 683.349 L1821.41 683.349 L1820.85 683.349 L1820.29 683.349 L1819.73 683.349 L1819.18 683.349 L1818.62 683.349 L1818.06 683.349 L1817.5 683.349 L1816.94 683.349 L1816.38 683.349 L1815.82 683.349 L1815.26 683.349 L1814.7 683.349 L1814.14 683.349 L1813.58 683.349 L1813.02 683.349 L1812.46 683.349 L1811.9 683.349 L1811.35 683.349 L1810.79 683.349 L1810.23 683.349 L1809.67 683.349 L1809.11 683.349 L1808.55 683.349 L1807.99 683.349 L1807.43 683.349 L1806.87 683.349 L1806.31 683.349 L1805.75 683.349 L1805.19 683.349 L1804.63 683.349 L1804.08 683.349 L1803.52 683.349 L1802.96 683.349 L1802.4 683.349 L1801.84 683.349 L1801.28 683.349 L1800.72 683.349 L1800.16 683.349 L1799.6 683.349 L1799.04 683.349 L1798.48 683.349 L1797.92 683.349 L1797.36 683.349 L1796.8 683.349 L1796.25 683.349 L1795.69 683.349 L1795.13 683.349 L1794.57 683.349 L1794.01 683.349 L1793.45 683.349 L1792.89 683.349 L1792.33 683.349 L1791.77 683.349 L1791.21 683.349 L1790.65 683.349 L1790.09 683.349 L1789.53 683.349 L1788.98 683.349 L1788.42 683.349 L1787.86 683.349 L1787.3 683.349 L1786.74 683.349 L1786.18 683.349 L1785.62 683.349 L1785.06 683.349 L1784.5 683.349 L1783.94 683.349 L1783.38 683.349 L1782.82 683.349 L1782.26 683.349 L1781.71 683.349 L1781.15 683.349 L1780.59 683.349 L1780.03 683.349 L1779.47 683.349 L1778.91 683.349 L1778.35 683.349 L1777.79 683.349 L1777.23 683.349 L1776.67 683.349 L1776.11 683.349 L1775.55 683.349 L1774.99 683.349 L1774.43 683.349 L1773.88 683.349 L1773.32 683.349 L1772.76 683.349 L1772.2 683.349 L1771.64 683.349 L1771.08 683.349 L1770.52 683.349 L1769.96 683.349 L1769.4 683.349 L1768.84 683.349 L1768.28 683.349 L1767.72 683.349 L1767.16 683.349 L1766.61 683.349 L1766.05 683.349 L1765.49 683.349 L1764.93 683.349 L1764.37 683.349 L1763.81 683.349 L1763.25 683.349 L1762.69 683.349 L1762.13 683.349 L1761.57 683.349 L1761.01 683.349 L1760.45 683.349 L1759.89 683.349 L1759.34 683.349 L1758.78 683.349 L1758.22 683.349 L1757.66 683.349 L1757.1 683.349 L1756.54 683.349 L1755.98 683.349 L1755.42 683.349 L1754.86 683.349 L1754.3 683.349 L1753.74 683.349 L1753.18 683.349 L1752.62 683.349 L1752.06 683.349 L1751.51 683.349 L1750.95 683.349 L1750.39 683.349 L1749.83 683.349 L1749.27 683.349 L1748.71 683.349 L1748.15 683.349 L1747.59 683.349 L1747.03 683.349 L1746.47 683.349 L1745.91 683.349 L1745.35 683.349 L1744.79 683.349 L1744.24 683.349 L1743.68 683.349 L1743.12 683.349 L1742.56 683.349 L1742 683.349 L1741.44 683.349 L1740.88 683.349 L1740.32 683.349 L1739.76 683.349 L1739.2 683.349 L1738.64 683.349 L1738.08 683.349 L1737.52 683.349 L1736.97 683.349 L1736.41 683.349 L1735.85 683.349 L1735.29 683.349 L1734.73 683.349 L1734.17 683.349 L1733.61 683.349 L1733.05 683.349 L1732.49 683.349 L1731.93 683.349 L1731.37 683.349 L1730.81 683.349 L1730.25 683.349 L1729.69 683.349 L1729.14 683.349 L1728.58 683.349 L1728.02 683.349 L1727.46 683.349 L1726.9 683.349 L1726.34 683.349 L1725.78 683.349 L1725.22 683.349 L1724.66 683.349 L1724.1 683.349 L1723.54 683.349 L1722.98 683.349 L1722.42 683.349 L1721.87 683.349 L1721.31 683.349 L1720.75 683.349 L1720.19 683.349 L1719.63 683.349 L1719.07 683.349 L1718.51 683.349 L1717.95 683.349 L1717.39 683.349 L1716.83 683.349 L1716.27 683.349 L1715.71 683.349 L1715.15 683.349 L1714.6 683.349 L1714.04 683.349 L1713.48 683.349 L1712.92 683.349 L1712.36 683.349 L1711.8 683.349 L1711.24 683.349 L1710.68 683.349 L1710.12 683.349 L1709.56 683.349 L1709 683.349 L1708.44 683.349 L1707.88 683.349 L1707.32 683.349 L1706.77 683.349 L1706.21 683.349 L1705.65 683.349 L1705.09 683.349 L1704.53 683.349 L1703.97 683.349 L1703.41 683.349 L1702.85 683.349 L1702.29 683.349 L1701.73 683.349 L1701.17 683.349 L1700.61 683.349 L1700.05 683.349 L1699.5 683.349 L1698.94 683.349 L1698.38 683.349 L1697.82 683.349 L1697.26 683.349 L1696.7 683.349 L1696.14 683.349 L1695.58 683.349 L1695.02 683.349 L1694.46 683.349 L1693.9 683.349 L1693.34 683.349 L1692.78 683.349 L1692.23 683.349 L1691.67 683.349 L1691.11 683.349 L1690.55 683.349 L1689.99 683.349 L1689.43 683.349 L1688.87 683.349 L1688.31 683.349 L1687.75 683.349 L1687.19 683.349 L1686.63 683.349 L1686.07 683.349 L1685.51 683.349 L1684.95 683.349 L1684.4 683.349 L1683.84 683.349 L1683.28 683.349 L1682.72 683.349 L1682.16 683.349 L1681.6 683.349 L1681.04 683.349 L1680.48 683.349 L1679.92 683.349 L1679.36 683.349 L1678.8 683.349 L1678.24 683.349 L1677.68 683.349 L1677.13 683.349 L1676.57 683.349 L1676.01 683.349 L1675.45 683.349 L1674.89 683.349 L1674.33 683.349 L1673.77 683.349 L1673.21 683.349 L1672.65 683.349 L1672.09 683.349 L1671.53 683.349 L1670.97 683.349 L1670.41 683.349 L1669.85 683.349 L1669.3 683.349 L1668.74 683.349 L1668.18 683.349 L1667.62 683.349 L1667.06 683.349 L1666.5 683.349 L1665.94 683.349 L1665.38 683.349 L1664.82 683.349 L1664.26 683.349 L1663.7 683.349 L1663.14 683.349 L1662.58 683.349 L1662.03 683.349 L1661.47 683.349 L1660.91 683.349 L1660.35 683.349 L1659.79 683.349 L1659.23 683.349 L1658.67 683.349 L1658.11 683.349 L1657.55 683.349 L1656.99 683.349 L1656.43 683.349 L1655.87 683.349 L1655.31 683.349 L1654.76 683.349 L1654.2 683.349 L1653.64 683.349 L1653.08 683.349 L1652.52 683.349 L1651.96 683.349 L1651.4 683.349 L1650.84 683.349 L1650.28 683.349 L1649.72 683.349 L1649.16 683.349 L1648.6 683.349 L1648.04 683.349 L1647.48 683.349 L1646.93 683.349 L1646.37 683.349 L1645.81 683.349 L1645.25 683.349 L1644.69 683.349 L1644.13 683.349 L1643.57 683.349 L1643.01 683.349 L1642.45 683.349 L1641.89 683.349 L1641.33 683.349 L1640.77 683.349 L1640.21 683.349 L1639.66 683.349 L1639.1 683.349 L1638.54 683.349 L1637.98 683.349 L1637.42 683.349 L1636.86 683.349 L1636.3 683.349 L1635.74 683.349 L1635.18 683.349 L1634.62 683.349 L1634.06 683.349 L1633.5 683.349 L1632.94 683.349 L1632.39 683.349 L1631.83 683.349 L1631.27 683.349 L1630.71 683.349 L1630.15 683.349 L1629.59 683.349 L1629.03 683.349 L1628.47 683.349 L1627.91 683.349 L1627.35 683.349 L1626.79 683.349 L1626.23 683.349 L1625.67 683.349 L1625.11 683.349 L1624.56 683.349 L1624 683.349 L1623.44 683.349 L1622.88 683.349 L1622.32 683.349 L1621.76 683.349 L1621.2 683.349 L1620.64 683.349 L1620.08 683.349 L1619.52 683.349 L1618.96 683.349 L1618.4 683.349 L1617.84 683.349 L1617.29 683.349 L1616.73 683.349 L1616.17 683.349 L1615.61 683.349 L1615.05 683.349 L1614.49 683.349 L1613.93 683.349 L1613.37 683.349 L1612.81 683.349 L1612.25 683.349 L1611.69 683.349 L1611.13 683.349 L1610.57 683.349 L1610.02 683.349 L1609.46 683.349 L1608.9 683.349 L1608.34 683.349 L1607.78 683.349 L1607.22 683.349 L1606.66 683.349 L1606.1 683.349 L1605.54 683.349 L1604.98 683.349 L1604.42 683.349 L1603.86 683.349 L1603.3 683.349 L1602.74 683.349 L1602.19 683.349 L1601.63 683.349 L1601.07 683.349 L1600.51 683.349 L1599.95 683.349 L1599.39 683.349 L1598.83 683.349 L1598.27 683.349 L1597.71 683.349 L1597.15 683.349 L1596.59 683.349 L1596.03 683.349 L1595.47 683.349 L1594.92 683.349 L1594.36 683.349 L1593.8 683.349 L1593.24 683.349 L1592.68 683.349 L1592.12 683.349 L1591.56 683.349 L1591 683.349 L1590.44 683.349 L1589.88 683.349 L1589.32 683.349 L1588.76 683.349 L1588.2 683.349 L1587.65 683.349 L1587.09 683.349 L1586.53 683.349 L1585.97 683.349 L1585.41 683.349 L1584.85 683.349 L1584.29 683.349 L1583.73 683.349 L1583.17 683.349 L1582.61 683.349 L1582.05 683.349 L1581.49 683.349 L1580.93 683.349 L1580.37 683.349 L1579.82 683.349 L1579.26 683.349 L1578.7 683.349 L1578.14 683.349 L1577.58 683.349 L1577.02 683.349 L1576.46 683.349 L1575.9 683.349 L1575.34 683.349 L1574.78 683.349 L1574.22 683.349 L1573.66 683.349 L1573.1 683.349 L1572.55 683.349 L1571.99 683.349 L1571.43 683.349 L1570.87 683.349 L1570.31 683.349 L1569.75 683.349 L1569.19 683.349 L1568.63 683.349 L1568.07 683.349 L1567.51 683.349 L1566.95 683.349 L1566.39 683.349 L1565.83 683.349 L1565.28 683.349 L1564.72 683.349 L1564.16 683.349 L1563.6 683.349 L1563.04 683.349 L1562.48 683.349 L1561.92 683.349 L1561.36 683.349 L1560.8 683.349 L1560.24 683.349 L1559.68 683.349 L1559.12 683.349 L1558.56 683.349 L1558 683.349 L1557.45 683.349 L1556.89 683.349 L1556.33 683.349 L1555.77 683.349 L1555.21 683.349 L1554.65 683.349 L1554.09 683.349 L1553.53 683.349 L1552.97 683.349 L1552.41 683.349 L1551.85 683.349 L1551.29 683.349 L1550.73 683.349 L1550.18 683.349 L1549.62 683.349 L1549.06 683.349 L1548.5 683.349 L1547.94 683.349 L1547.38 683.349 L1546.82 683.349 L1546.26 683.349 L1545.7 683.349 L1545.14 683.349 L1544.58 683.349 L1544.02 683.349 L1543.46 683.349 L1542.9 683.349 L1542.35 683.349 L1541.79 683.349 L1541.23 683.349 L1540.67 683.349 L1540.11 683.349 L1539.55 683.349 L1538.99 683.349 L1538.43 683.349 L1537.87 683.349 L1537.31 683.349 L1536.75 683.349 L1536.19 683.349 L1535.63 683.349 L1535.08 683.349 L1534.52 683.349 L1533.96 683.349 L1533.4 683.349 L1532.84 683.349 L1532.28 683.349 L1531.72 683.349 L1531.16 683.349 L1530.6 683.349 L1530.04 683.349 L1529.48 683.349 L1528.92 683.349 L1528.36 683.349 L1527.81 683.349 L1527.25 683.349 L1526.69 683.349 L1526.13 683.349 L1525.57 683.349 L1525.01 683.349 L1524.45 683.349 L1523.89 683.349 L1523.33 683.349 L1522.77 683.349 L1522.21 683.349 L1521.65 683.349 L1521.09 683.349 L1520.53 683.349 L1519.98 683.349 L1519.42 683.349 L1518.86 683.349 L1518.3 683.349 L1517.74 683.349 L1517.18 683.349 L1516.62 683.349 L1516.06 683.349 L1515.5 683.349 L1514.94 683.349 L1514.38 683.349 L1513.82 683.349 L1513.26 683.349 L1512.71 683.349 L1512.15 683.349 L1511.59 683.349 L1511.03 683.349 L1510.47 683.349 L1509.91 683.349 L1509.35 683.349 L1508.79 683.349 L1508.23 683.349 L1507.67 683.349 L1507.11 683.349 L1506.55 683.349 L1505.99 683.349 L1505.44 683.349 L1504.88 683.349 L1504.32 683.349 L1503.76 683.349 L1503.2 683.349 L1502.64 683.349 L1502.08 683.349 L1501.52 683.349 L1500.96 683.349 L1500.4 683.349 L1499.84 683.349 L1499.28 683.349 L1498.72 683.349 L1498.16 683.349 L1497.61 683.349 L1497.05 683.349 L1496.49 683.349 L1495.93 683.349 L1495.37 683.349 L1494.81 683.349 L1494.25 683.349 L1493.69 683.349 L1493.13 683.349 L1492.57 683.349 L1492.01 683.349 L1491.45 683.349 L1490.89 683.349 L1490.34 683.349 L1489.78 683.349 L1489.22 683.349 L1488.66 683.349 L1488.1 683.349 L1487.54 683.349 L1486.98 683.349 L1486.42 683.349 L1485.86 683.349 L1485.3 683.349 L1484.74 683.349 L1484.18 683.349 L1483.62 683.349 L1483.07 683.349 L1482.51 683.349 L1481.95 683.349 L1481.39 683.349 L1480.83 683.349 L1480.27 683.349 L1479.71 683.349 L1479.15 683.349 L1478.59 683.349 L1478.03 683.349 L1477.47 683.349 L1476.91 683.349 L1476.35 683.349 L1475.79 683.349 L1475.24 683.349 L1474.68 683.349 L1474.12 683.349 L1473.56 683.349 L1473 683.349 L1472.44 683.349 L1471.88 683.349 L1471.32 683.349 L1470.76 683.349 L1470.2 683.349 L1469.64 683.349 L1469.08 683.349 L1468.52 683.349 L1467.97 683.349 L1467.41 683.349 L1466.85 683.349 L1466.29 683.349 L1465.73 683.349 L1465.17 683.349 L1464.61 683.349 L1464.05 683.349 L1463.49 683.349 L1462.93 683.349 L1462.37 683.349 L1461.81 683.349 L1461.25 683.349 L1460.7 683.349 L1460.14 683.349 L1459.58 683.349 L1459.02 683.349 L1458.46 683.349 L1457.9 683.349 L1457.34 683.349 L1456.78 683.349 L1456.22 683.349 L1455.66 683.349 L1455.1 683.349 L1454.54 683.349 L1453.98 683.349 L1453.42 683.349 L1452.87 683.349 L1452.31 683.349 L1451.75 683.349 L1451.19 683.349 L1450.63 683.349 L1450.07 683.349 L1449.51 683.349 L1448.95 683.349 L1448.39 683.349 L1447.83 683.349 L1447.27 683.349 L1446.71 683.349 L1446.15 683.349 L1445.6 683.349 L1445.04 683.349 L1444.48 683.349 L1443.92 683.349 L1443.36 683.349 L1442.8 683.349 L1442.24 683.349 L1441.68 683.349 L1441.12 683.349 L1440.56 683.349 L1440 683.349 L1439.44 683.349 L1438.88 683.349 L1438.33 683.349 L1437.77 683.349 L1437.21 683.349 L1436.65 683.349 L1436.09 683.349 L1435.53 683.349 L1434.97 683.349 L1434.41 683.349 L1433.85 683.349 L1433.29 683.349 L1432.73 683.349 L1432.17 683.349 L1431.61 683.349 L1431.05 683.349 L1430.5 683.349 L1429.94 683.349 L1429.38 683.349 L1428.82 683.349 L1428.26 683.349 L1427.7 683.349 L1427.14 683.349 L1426.58 683.349 L1426.02 683.349 L1425.46 683.349 L1424.9 683.349 L1424.34 683.349 L1423.78 683.349 L1423.23 683.349 L1422.67 683.349 L1422.11 683.349 L1421.55 683.349 L1420.99 683.349 L1420.43 683.349 L1419.87 683.349 L1419.31 683.349 L1418.75 683.349 L1418.19 683.349 L1417.63 683.349 L1417.07 683.349 L1416.51 683.349 L1415.95 683.349 L1415.4 683.349 L1414.84 683.349 L1414.28 683.349 L1413.72 683.349 L1413.16 683.349 L1412.6 683.349 L1412.04 683.349 L1411.48 683.349 L1410.92 683.349 L1410.36 683.349 L1409.8 683.349 L1409.24 683.349 L1408.68 683.349 L1408.13 683.349 L1407.57 683.349 L1407.01 683.349 L1406.45 683.349 L1405.89 683.349 L1405.33 683.349 L1404.77 683.349 L1404.21 683.349 L1403.65 683.349 L1403.09 683.349 L1402.53 683.349 L1401.97 683.349 L1401.41 683.349 L1400.86 683.349 L1400.3 683.349 L1399.74 683.349 L1399.18 683.349 L1398.62 683.349 L1398.06 683.349 L1397.5 683.349 L1396.94 683.349 L1396.38 683.349 L1395.82 683.349 L1395.26 683.349 L1394.7 683.349 L1394.14 683.349 L1393.58 683.349 L1393.03 683.349 L1392.47 683.349 L1391.91 683.349 L1391.35 683.349 L1390.79 683.349 L1390.23 683.349 L1389.67 683.349 L1389.11 683.349 L1388.55 683.349 L1387.99 683.349 L1387.43 683.349 L1386.87 683.349 L1386.31 683.349 L1385.76 683.349 L1385.2 683.349 L1384.64 683.349 L1384.08 683.349 L1383.52 683.349 L1382.96 683.349 L1382.4 683.349 L1381.84 683.349 L1381.28 683.349 L1380.72 683.349 L1380.16 683.349 L1379.6 683.349 L1379.04 683.349 L1378.49 683.349 L1377.93 683.349 L1377.37 683.349 L1376.81 683.349 L1376.25 683.349 L1375.69 683.349 L1375.13 683.349 L1374.57 683.349 L1374.01 683.349 L1373.45 683.349 L1372.89 683.349 L1372.33 683.349 L1371.77 683.349 L1371.21 683.349 L1370.66 683.349 L1370.1 683.349 L1369.54 683.349 L1368.98 683.349 L1368.42 683.349 L1367.86 683.349 L1367.3 683.349 L1366.74 683.349 L1366.18 683.349 L1365.62 683.349 L1365.06 683.349 L1364.5 683.349 L1363.94 683.349 L1363.39 683.349 L1362.83 683.349 L1362.27 683.349 L1361.71 683.349 L1361.15 683.349 L1360.59 683.349 L1360.03 683.349 L1359.47 683.349 L1358.91 683.349 L1358.35 683.349 L1357.79 683.349 L1357.23 683.349 L1356.67 683.349 L1356.12 683.349 L1355.56 683.349 L1355 683.349 L1354.44 683.349 L1353.88 683.349 L1353.32 683.349 L1352.76 683.349 L1352.2 683.349 L1351.64 683.349 L1351.08 683.349 L1350.52 683.349 L1349.96 683.349 L1349.4 683.349 L1348.84 683.349 L1348.29 683.349 L1347.73 683.349 L1347.17 683.349 L1346.61 683.349 L1346.05 683.349 L1345.49 683.349 L1344.93 683.349 L1344.37 683.349 L1343.81 683.349 L1343.25 683.349 L1342.69 683.349 L1342.13 683.349 L1341.57 683.349 L1341.02 683.349 L1340.46 683.349 L1339.9 683.349 L1339.34 683.349 L1338.78 683.349 L1338.22 683.349 L1337.66 683.349 L1337.1 683.349 L1336.54 683.349 L1335.98 683.349 L1335.42 683.349 L1334.86 683.349 L1334.3 683.349 L1333.75 683.349 L1333.19 683.349 L1332.63 683.349 L1332.07 683.349 L1331.51 683.349 L1330.95 683.349 L1330.39 683.349 L1329.83 683.349 L1329.27 683.349 L1328.71 683.349 L1328.15 683.349 L1327.59 683.349 L1327.03 683.349 L1326.47 683.349 L1325.92 683.349 L1325.36 683.349 L1324.8 683.349 L1324.24 683.349 L1323.68 683.349 L1323.12 683.349 L1322.56 683.349 L1322 683.349 L1321.44 683.349 L1320.88 683.349 L1320.32 683.349 L1319.76 683.349 L1319.2 683.349 L1318.65 683.349 L1318.09 683.349 L1317.53 683.349 L1316.97 683.349 L1316.41 683.349 L1315.85 683.349 L1315.29 683.349 L1314.73 683.349 L1314.17 683.349 L1313.61 683.349 L1313.05 683.349 L1312.49 683.349 L1311.93 683.349 L1311.38 683.349 L1310.82 683.349 L1310.26 683.349 L1309.7 683.349 L1309.14 683.349 L1308.58 683.349 L1308.02 683.349 L1307.46 683.349 L1306.9 683.349 L1306.34 683.349 L1305.78 683.349 L1305.22 683.349 L1304.66 683.349 L1304.1 683.349 L1303.55 683.349 L1302.99 683.349 L1302.43 683.349 L1301.87 683.349 L1301.31 683.349 L1300.75 683.349 L1300.19 683.349 L1299.63 683.349 L1299.07 683.349 L1298.51 683.349 L1297.95 683.349 L1297.39 683.349 L1296.83 683.349 L1296.28 683.349 L1295.72 683.349 L1295.16 683.349 L1294.6 683.349 L1294.04 683.349 L1293.48 683.349 L1292.92 683.349 L1292.36 683.349 L1291.8 683.349 L1291.24 683.349 L1290.68 683.349 L1290.12 683.349 L1289.56 683.349 L1289 683.349 L1288.45 683.349 L1287.89 683.349 L1287.33 683.349 L1286.77 683.349 L1286.21 683.349 L1285.65 683.349 L1285.09 683.349 L1284.53 683.349 L1283.97 683.349 L1283.41 683.349 L1282.85 683.349 L1282.29 683.349 L1281.73 683.349 L1281.18 683.349 L1280.62 683.349 L1280.06 683.349 L1279.5 683.349 L1278.94 683.349 L1278.38 683.349 L1277.82 683.349 L1277.26 683.349 L1276.7 683.349 L1276.14 683.349 L1275.58 683.349 L1275.02 683.349 L1274.46 683.349 L1273.91 683.349 L1273.35 683.349 L1272.79 683.349 L1272.23 683.349 L1271.67 683.349 L1271.11 683.349 L1270.55 683.349 L1269.99 683.349 L1269.43 683.349 L1268.87 683.349 L1268.31 683.349 L1267.75 683.349 L1267.19 683.349 L1266.63 683.349 L1266.08 683.349 L1265.52 683.349 L1264.96 683.349 L1264.4 683.349 L1263.84 683.349 L1263.28 683.349 L1262.72 683.349 L1262.16 683.349 L1261.6 683.349 L1261.04 683.349 L1260.48 683.349 L1259.92 683.349 L1259.36 683.349 L1258.81 683.349 L1258.25 683.349 L1257.69 683.349 L1257.13 683.349 L1256.57 683.349 L1256.01 683.349 L1255.45 683.349 L1254.89 683.349 L1254.33 683.349 L1253.77 683.349 L1253.21 683.349 L1252.65 683.349 L1252.09 683.349 L1251.54 683.349 L1250.98 683.349 L1250.42 683.349 L1249.86 683.349 L1249.3 683.349 L1248.74 683.349 L1248.18 683.349 L1247.62 683.349 L1247.06 683.349 L1246.5 683.349 L1245.94 683.349 L1245.38 683.349 L1244.82 683.349 L1244.26 683.349 L1243.71 683.349 L1243.15 683.349 L1242.59 683.349 L1242.03 683.349 L1241.47 683.349 L1240.91 683.349 L1240.35 683.349 L1239.79 683.349 L1239.23 683.349 L1238.67 683.349 L1238.11 683.349 L1237.55 683.349 L1236.99 683.349 L1236.44 683.349 L1235.88 683.349 L1235.32 683.349 L1234.76 683.349 L1234.2 683.349 L1233.64 683.349 L1233.08 683.349 L1232.52 683.349 L1231.96 683.349 L1231.4 683.349 L1230.84 683.349 L1230.28 683.349 L1229.72 683.349 L1229.17 683.349 L1228.61 683.349 L1228.05 683.349 L1227.49 683.349 L1226.93 683.349 L1226.37 683.349 L1225.81 683.349 L1225.25 683.349 L1224.69 683.349 L1224.13 683.349 L1223.57 683.349 L1223.01 683.349 L1222.45 683.349 L1221.89 683.349 L1221.34 683.349 L1220.78 683.349 L1220.22 683.349 L1219.66 683.349 L1219.1 683.349 L1218.54 683.349 L1217.98 683.349 L1217.42 683.349 L1216.86 683.349 L1216.3 683.349 L1215.74 683.349 L1215.18 683.349 L1214.62 683.349 L1214.07 683.349 L1213.51 683.349 L1212.95 683.349 L1212.39 683.349 L1211.83 683.349 L1211.27 683.349 L1210.71 683.349 L1210.15 683.349 L1209.59 683.349 L1209.03 683.349 L1208.47 683.349 L1207.91 683.349 L1207.35 683.349 L1206.8 683.349 L1206.24 683.349 L1205.68 683.349 L1205.12 683.349 L1204.56 683.349 L1204 683.349 L1203.44 683.349 L1202.88 683.349 L1202.32 683.349 L1201.76 683.349 L1201.2 683.349 L1200.64 683.349 L1200.08 683.349 L1199.52 683.349 L1198.97 683.349 L1198.41 683.349 L1197.85 683.349 L1197.29 683.349 L1196.73 683.349 L1196.17 683.349 L1195.61 683.349 L1195.05 683.349 L1194.49 683.349 L1193.93 683.349 L1193.37 683.349 L1192.81 683.349 L1192.25 683.349 L1191.7 683.349 L1191.14 683.349 L1190.58 683.349 L1190.02 683.349 L1189.46 683.349 L1188.9 683.349 L1188.34 683.349 L1187.78 683.349 L1187.22 683.349 L1186.66 683.349 L1186.1 683.349 L1185.54 683.349 L1184.98 683.349 L1184.43 683.349 L1183.87 683.349 L1183.31 683.349 L1182.75 683.349 L1182.19 683.349 L1181.63 683.349 L1181.07 683.349 L1180.51 683.349 L1179.95 683.349 L1179.39 683.349 L1178.83 683.349 L1178.27 683.349 L1177.71 683.349 L1177.15 683.349 L1176.6 683.349 L1176.04 683.349 L1175.48 683.349 L1174.92 683.349 L1174.36 683.349 L1173.8 683.349 L1173.24 683.349 L1172.68 683.349 L1172.12 683.349 L1171.56 683.349 L1171 683.349 L1170.44 683.349 L1169.88 683.349 L1169.33 683.349 L1168.77 683.349 L1168.21 683.349 L1167.65 683.349 L1167.09 683.349 L1166.53 683.349 L1165.97 683.349 L1165.41 683.349 L1164.85 683.349 L1164.29 683.349 L1163.73 683.349 L1163.17 683.349 L1162.61 683.349 L1162.05 683.349 L1161.5 683.349 L1160.94 683.349 L1160.38 683.349 L1159.82 683.349 L1159.26 683.349 L1158.7 683.349 L1158.14 683.349 L1157.58 683.349 L1157.02 683.349 L1156.46 683.349 L1155.9 683.349 L1155.34 683.349 L1154.78 683.349 L1154.23 683.349 L1153.67 683.349 L1153.11 683.349 L1152.55 683.349 L1151.99 683.349 L1151.43 683.349 L1150.87 683.349 L1150.31 683.349 L1149.75 683.349 L1149.19 683.349 L1148.63 683.349 L1148.07 683.349 L1147.51 683.349 L1146.96 683.349 L1146.4 683.349 L1145.84 683.349 L1145.28 683.349 L1144.72 683.349 L1144.16 683.349 L1143.6 683.349 L1143.04 683.349 L1142.48 683.349 L1141.92 683.349 L1141.36 683.349 L1140.8 683.349 L1140.24 683.349 L1139.68 683.349 L1139.13 683.349 L1138.57 683.349 L1138.01 683.349 L1137.45 683.349 L1136.89 683.349 L1136.33 683.349 L1135.77 683.349 L1135.21 683.349 L1134.65 683.349 L1134.09 683.349 L1133.53 683.349 L1132.97 683.349 L1132.41 683.349 L1131.86 683.349 L1131.3 683.349 L1130.74 683.349 L1130.18 683.349 L1129.62 683.349 L1129.06 683.349 L1128.5 683.349 L1127.94 683.349 L1127.38 683.349 L1126.82 683.349 L1126.26 683.349 L1125.7 683.349 L1125.14 683.349 L1124.59 683.349 L1124.03 683.349 L1123.47 683.349 L1122.91 683.349 L1122.35 683.349 L1121.79 683.349 L1121.23 683.349 L1120.67 683.349 L1120.11 683.349 L1119.55 683.349 L1118.99 683.349 L1118.43 683.349 L1117.87 683.349 L1117.31 683.349 L1116.76 683.349 L1116.2 683.349 L1115.64 683.349 L1115.08 683.349 L1114.52 683.349 L1113.96 683.349 L1113.4 683.349 L1112.84 683.349 L1112.28 683.349 L1111.72 683.349 L1111.16 683.349 L1110.6 683.349 L1110.04 683.349 L1109.49 683.349 L1108.93 683.349 L1108.37 683.349 L1107.81 683.349 L1107.25 683.349 L1106.69 683.349 L1106.13 683.349 L1105.57 683.349 L1105.01 683.349 L1104.45 683.349 L1103.89 683.349 L1103.33 683.349 L1102.77 683.349 L1102.22 683.349 L1101.66 683.349 L1101.1 683.349 L1100.54 683.349 L1099.98 683.349 L1099.42 683.349 L1098.86 683.349 L1098.3 683.349 L1097.74 683.349 L1097.18 683.349 L1096.62 683.349 L1096.06 683.349 L1095.5 683.349 L1094.94 683.349 L1094.39 683.349 L1093.83 683.349 L1093.27 683.349 L1092.71 683.349 L1092.15 683.349 L1091.59 683.349 L1091.03 683.349 L1090.47 683.349 L1089.91 683.349 L1089.35 683.349 L1088.79 683.349 L1088.23 683.349 L1087.67 683.349 L1087.12 683.349 L1086.56 683.349 L1086 683.349 L1085.44 683.349 L1084.88 683.349 L1084.32 683.349 L1083.76 683.349 L1083.2 683.349 L1082.64 683.349 L1082.08 683.349 L1081.52 683.349 L1080.96 683.349 L1080.4 683.349 L1079.85 683.349 L1079.29 683.349 L1078.73 683.349 L1078.17 683.349 L1077.61 683.349 L1077.05 683.349 L1076.49 683.349 L1075.93 683.349 L1075.37 683.349 L1074.81 683.349 L1074.25 683.349 L1073.69 683.349 L1073.13 683.349 L1072.57 683.349 L1072.02 683.349 L1071.46 683.349 L1070.9 683.349 L1070.34 683.349 L1069.78 683.349 L1069.22 683.349 L1068.66 683.349 L1068.1 683.349 L1067.54 683.349 L1066.98 683.349 L1066.42 683.349 L1065.86 683.349 L1065.3 683.349 L1064.75 683.349 L1064.19 683.349 L1063.63 683.349 L1063.07 683.349 L1062.51 683.349 L1061.95 683.349 L1061.39 683.349 L1060.83 683.349 L1060.27 683.349 L1059.71 683.349 L1059.15 683.349 L1058.59 683.349 L1058.03 683.349 L1057.48 683.349 L1056.92 683.349 L1056.36 683.349 L1055.8 683.349 L1055.24 683.349 L1054.68 683.349 L1054.12 683.349 L1053.56 683.349 L1053 683.349 L1052.44 683.349 L1051.88 683.349 L1051.32 683.349 L1050.76 683.349 L1050.2 683.349 L1049.65 683.349 L1049.09 683.349 L1048.53 683.349 L1047.97 683.349 L1047.41 683.349 L1046.85 683.349 L1046.29 683.349 L1045.73 683.349 L1045.17 683.349 L1044.61 683.349 L1044.05 683.349 L1043.49 683.349 L1042.93 683.349 L1042.38 683.349 L1041.82 683.349 L1041.26 683.349 L1040.7 683.349 L1040.14 683.349 L1039.58 683.349 L1039.02 683.349 L1038.46 683.349 L1037.9 683.349 L1037.34 683.349 L1036.78 683.349 L1036.22 683.349 L1035.66 683.349 L1035.1 683.349 L1034.55 683.349 L1033.99 683.349 L1033.43 683.349 L1032.87 683.349 L1032.31 683.349 L1031.75 683.349 L1031.19 683.349 L1030.63 683.349 L1030.07 683.349 L1029.51 683.349 L1028.95 683.349 L1028.39 683.349 L1027.83 683.349 L1027.28 683.349 L1026.72 683.349 L1026.16 683.349 L1025.6 683.349 L1025.04 683.349 L1024.48 683.349 L1023.92 683.349 L1023.36 683.349 L1022.8 683.349 L1022.24 683.349 L1021.68 683.349 L1021.12 683.349 L1020.56 683.349 L1020.01 683.349 L1019.45 683.349 L1018.89 683.349 L1018.33 683.349 L1017.77 683.349 L1017.21 683.349 L1016.65 683.349 L1016.09 683.349 L1015.53 683.349 L1014.97 683.349 L1014.41 683.349 L1013.85 683.349 L1013.29 683.349 L1012.73 683.349 L1012.18 683.349 L1011.62 683.349 L1011.06 683.349 L1010.5 683.349 L1009.94 683.349 L1009.38 683.349 L1008.82 683.349 L1008.26 683.349 L1007.7 683.349 L1007.14 683.349 L1006.58 683.349 L1006.02 683.349 L1005.46 683.349 L1004.91 683.349 L1004.35 683.349 L1003.79 683.349 L1003.23 683.349 L1002.67 683.349 L1002.11 683.349 L1001.55 683.349 L1000.99 683.349 L1000.43 683.349 L999.872 683.349 L999.313 683.349 L998.754 683.349 L998.194 683.349 L997.635 683.349 L997.076 683.349 L996.517 683.349 L995.957 683.349 L995.398 683.349 L994.839 683.349 L994.28 683.349 L993.72 683.349 L993.161 683.349 L992.602 683.349 L992.043 683.349 L991.483 683.349 L990.924 683.349 L990.365 683.349 L989.806 683.349 L989.246 683.349 L988.687 683.349 L988.128 683.349 L987.569 683.349 L987.009 683.349 L986.45 683.349 L985.891 683.349 L985.332 683.349 L984.772 683.349 L984.213 683.349 L983.654 683.349 L983.095 683.349 L982.535 683.349 L981.976 683.349 L981.417 683.349 L980.858 683.349 L980.298 683.349 L979.739 683.349 L979.18 683.349 L978.621 683.349 L978.061 683.349 L977.502 683.349 L976.943 683.349 L976.384 683.349 L975.824 683.349 L975.265 683.349 L974.706 683.349 L974.147 683.349 L973.587 683.349 L973.028 683.349 L972.469 683.349 L971.91 683.349 L971.35 683.349 L970.791 683.349 L970.232 683.349 L969.673 683.349 L969.113 683.349 L968.554 683.349 L967.995 683.349 L967.436 683.349 L966.876 683.349 L966.317 683.349 L965.758 683.349 L965.199 683.349 L964.639 683.349 L964.08 683.349 L963.521 683.349 L962.962 683.349 L962.402 683.349 L961.843 683.349 L961.284 683.349 L960.725 683.349 L960.165 683.349 L959.606 683.349 L959.047 683.349 L958.488 683.349 L957.928 683.349 L957.369 683.349 L956.81 683.349 L956.251 683.349 L955.691 683.349 L955.132 683.349 L954.573 683.349 L954.014 683.349 L953.454 683.349 L952.895 683.349 L952.336 683.349 L951.777 683.349 L951.217 683.349 L950.658 683.349 L950.099 683.349 L949.54 683.349 L948.98 683.349 L948.421 683.349 L947.862 683.349 L947.303 683.349 L946.743 683.349 L946.184 683.349 L945.625 683.349 L945.066 683.349 L944.506 683.349 L943.947 683.349 L943.388 683.349 L942.829 683.349 L942.269 683.349 L941.71 683.349 L941.151 683.349 L940.592 683.349 L940.032 683.349 L939.473 683.349 L938.914 683.349 L938.355 683.349 L937.795 683.349 L937.236 683.349 L936.677 683.349 L936.118 683.349 L935.558 683.349 L934.999 683.349 L934.44 683.349 L933.881 683.349 L933.321 683.349 L932.762 683.349 L932.203 683.349 L931.644 683.349 L931.084 683.349 L930.525 683.349 L929.966 683.349 L929.406 683.349 L928.847 683.349 L928.288 683.349 L927.729 683.349 L927.169 683.349 L926.61 683.349 L926.051 683.349 L925.492 683.349 L924.932 683.349 L924.373 683.349 L923.814 683.349 L923.255 683.349 L922.695 683.349 L922.136 683.349 L921.577 683.349 L921.018 683.349 L920.458 683.349 L919.899 683.349 L919.34 683.349 L918.781 683.349 L918.221 683.349 L917.662 683.349 L917.103 683.349 L916.544 683.349 L915.984 683.349 L915.425 683.349 L914.866 683.349 L914.307 683.349 L913.747 683.349 L913.188 683.349 L912.629 683.349 L912.07 683.349 L911.51 683.349 L910.951 683.349 L910.392 683.349 L909.833 683.349 L909.273 683.349 L908.714 683.349 L908.155 683.349 L907.596 683.349 L907.036 683.349 L906.477 683.349 L905.918 683.349 L905.359 683.349 L904.799 683.349 L904.24 683.349 L903.681 683.349 L903.122 683.349 L902.562 683.349 L902.003 683.349 L901.444 683.349 L900.885 683.349 L900.325 683.349 L899.766 683.349 L899.207 683.349 L898.648 683.349 L898.088 683.349 L897.529 683.349 L896.97 683.349 L896.411 683.349 L895.851 683.349 L895.292 683.349 L894.733 683.349 L894.174 683.349 L893.614 683.349 L893.055 683.349 L892.496 683.349 L891.937 683.349 L891.377 683.349 L890.818 683.349 L890.259 683.349 L889.7 683.349 L889.14 683.349 L888.581 683.349 L888.022 683.349 L887.463 683.349 L886.903 683.349 L886.344 683.349 L885.785 683.349 L885.226 683.349 L884.666 683.349 L884.107 683.349 L883.548 683.349 L882.989 683.349 L882.429 683.349 L881.87 683.349 L881.311 683.349 L880.752 683.349 L880.192 683.349 L879.633 683.349 L879.074 683.349 L878.515 683.349 L877.955 683.349 L877.396 683.349 L876.837 683.349 L876.278 683.349 L875.718 683.349 L875.159 683.349 L874.6 683.349 L874.041 683.349 L873.481 683.349 L872.922 683.349 L872.363 683.349 L871.804 683.349 L871.244 683.349 L870.685 683.349 L870.126 683.349 L869.567 683.349 L869.007 683.349 L868.448 683.349 L867.889 683.349 L867.33 683.349 L866.77 683.349 L866.211 683.349 L865.652 683.349 L865.093 683.349 L864.533 683.349 L863.974 683.349 L863.415 683.349 L862.856 683.349 L862.296 683.349 L861.737 683.349 L861.178 683.349 L860.619 683.349 L860.059 683.349 L859.5 683.349 L858.941 683.349 L858.382 683.349 L857.822 683.349 L857.263 683.349 L856.704 683.349 L856.145 683.349 L855.585 683.349 L855.026 683.349 L854.467 683.349 L853.908 683.349 L853.348 683.349 L852.789 683.349 L852.23 683.349 L851.671 683.349 L851.111 683.349 L850.552 683.349 L849.993 683.349 L849.434 683.349 L848.874 683.349 L848.315 683.349 L847.756 683.349 L847.197 683.349 L846.637 683.349 L846.078 683.349 L845.519 683.349 L844.96 683.349 L844.4 683.349 L843.841 683.349 L843.282 683.349 L842.723 683.349 L842.163 683.349 L841.604 683.349 L841.045 683.349 L840.486 683.349 L839.926 683.349 L839.367 683.349 L838.808 683.349 L838.249 683.349 L837.689 683.349 L837.13 683.349 L836.571 683.349 L836.012 683.349 L835.452 683.349 L834.893 683.349 L834.334 683.349 L833.775 683.349 L833.215 683.349 L832.656 683.349 L832.097 683.349 L831.538 683.349 L830.978 683.349 L830.419 683.349 L829.86 683.349 L829.301 683.349 L828.741 683.349 L828.182 683.349 L827.623 683.349 L827.064 683.349 L826.504 683.349 L825.945 683.349 L825.386 683.349 L824.827 683.349 L824.267 683.349 L823.708 683.349 L823.149 683.349 L822.59 683.349 L822.03 683.349 L821.471 683.349 L820.912 683.349 L820.353 683.349 L819.793 683.349 L819.234 683.349 L818.675 683.349 L818.116 683.349 L817.556 683.349 L816.997 683.349 L816.438 683.349 L815.879 683.349 L815.319 683.349 L814.76 683.349 L814.201 683.349 L813.642 683.349 L813.082 683.349 L812.523 683.349 L811.964 683.349 L811.405 683.349 L810.845 683.349 L810.286 683.349 L809.727 683.349 L809.168 683.349 L808.608 683.349 L808.049 683.349 L807.49 683.349 L806.931 683.349 L806.371 683.349 L805.812 683.349 L805.253 683.349 L804.693 683.349 L804.134 683.349 L803.575 683.349 L803.016 683.349 L802.456 683.349 L801.897 683.349 L801.338 683.349 L800.779 683.349 L800.219 683.349 L799.66 683.349 L799.101 683.349 L798.542 683.349 L797.982 683.349 L797.423 683.349 L796.864 683.349 L796.305 683.349 L795.745 683.349 L795.186 683.349 L794.627 683.349 L794.068 683.349 L793.508 683.349 L792.949 683.349 L792.39 683.349 L791.831 683.349 L791.271 683.349 L790.712 683.349 L790.153 683.349 L789.594 683.349 L789.034 683.349 L788.475 683.349 L787.916 683.349 L787.357 683.349 L786.797 683.349 L786.238 683.349 L785.679 683.349 L785.12 683.349 L784.56 683.349 L784.001 683.349 L783.442 683.349 L782.883 683.349 L782.323 683.349 L781.764 683.349 L781.205 683.349 L780.646 683.349 L780.086 683.349 L779.527 683.349 L778.968 683.349 L778.409 683.349 L777.849 683.349 L777.29 683.349 L776.731 683.349 L776.172 683.349 L775.612 683.349 L775.053 683.349 L774.494 683.349 L773.935 683.349 L773.375 683.349 L772.816 683.349 L772.257 683.349 L771.698 683.349 L771.138 683.349 L770.579 683.349 L770.02 683.349 L769.461 683.349 L768.901 683.349 L768.342 683.349 L767.783 683.349 L767.224 683.349 L766.664 683.349 L766.105 683.349 L765.546 683.349 L764.987 683.349 L764.427 683.349 L763.868 683.349 L763.309 683.349 L762.75 683.349 L762.19 683.349 L761.631 683.349 L761.072 683.349 L760.513 683.349 L759.953 683.349 L759.394 683.349 L758.835 683.349 L758.276 683.349 L757.716 683.349 L757.157 683.349 L756.598 683.349 L756.039 683.349 L755.479 683.349 L754.92 683.349 L754.361 683.349 L753.802 683.349 L753.242 683.349 L752.683 683.349 L752.124 683.349 L751.565 683.349 L751.005 683.349 L750.446 683.349 L749.887 683.349 L749.328 683.349 L748.768 683.349 L748.209 683.349 L747.65 683.349 L747.091 683.349 L746.531 683.349 L745.972 683.349 L745.413 683.349 L744.854 683.349 L744.294 683.349 L743.735 683.349 L743.176 683.349 L742.617 683.349 L742.057 683.349 L741.498 683.349 L740.939 683.349 L740.38 683.349 L739.82 683.349 L739.261 683.349 L738.702 683.349 L738.143 683.349 L737.583 683.349 L737.024 683.349 L736.465 683.349 L735.906 683.349 L735.346 683.349 L734.787 683.349 L734.228 683.349 L733.669 683.349 L733.109 683.349 L732.55 683.349 L731.991 683.349 L731.432 683.349 L730.872 683.349 L730.313 683.349 L729.754 683.349 L729.195 683.349 L728.635 683.349 L728.076 683.349 L727.517 683.349 L726.958 683.349 L726.398 683.349 L725.839 683.349 L725.28 683.349 L724.721 683.349 L724.161 683.349 L723.602 683.349 L723.043 683.349 L722.484 683.349 L721.924 683.349 L721.365 683.349 L720.806 683.349 L720.247 683.349  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.353 720.806,687.353 721.365,687.353 721.924,687.353 722.484,687.353 723.043,687.353 723.602,687.353 724.161,687.353 724.721,687.353 725.28,687.353 725.839,687.353 726.398,687.353 726.958,687.353 727.517,687.353 728.076,687.353 728.635,687.353 729.195,687.353 729.754,687.353 730.313,687.353 730.872,687.353 731.432,687.353 731.991,687.353 732.55,687.353 733.109,687.353 733.669,687.353 734.228,687.353 734.787,687.353 735.346,687.353 735.906,687.353 736.465,687.353 737.024,687.353 737.583,687.353 738.143,687.353 738.702,687.353 739.261,687.353 739.82,687.353 740.38,687.353 740.939,687.353 741.498,687.353 742.057,687.353 742.617,687.353 743.176,687.353 743.735,687.353 744.294,687.353 744.854,687.353 745.413,687.353 745.972,687.353 746.531,687.353 747.091,687.353 747.65,687.353 748.209,687.353 748.768,687.353 749.328,687.353 749.887,687.353 750.446,687.353 751.005,687.353 751.565,687.353 752.124,687.353 752.683,687.353 753.242,687.353 753.802,687.353 754.361,687.353 754.92,687.353 755.479,687.353 756.039,687.353 756.598,687.353 757.157,687.353 757.716,687.353 758.276,687.353 758.835,687.353 759.394,687.353 759.953,687.353 760.513,687.353 761.072,687.353 761.631,687.353 762.19,687.353 762.75,687.353 763.309,687.353 763.868,687.353 764.427,687.353 764.987,687.353 765.546,687.353 766.105,687.353 766.664,687.353 767.224,687.353 767.783,687.353 768.342,687.353 768.901,687.353 769.461,687.353 770.02,687.353 770.579,687.353 771.138,687.353 771.698,687.353 772.257,687.353 772.816,687.353 773.375,687.353 773.935,687.353 774.494,687.353 775.053,687.353 775.612,687.353 776.172,687.353 776.731,687.353 777.29,687.353 777.849,687.353 778.409,687.353 778.968,687.353 779.527,687.353 780.086,687.353 780.646,687.353 781.205,687.353 781.764,687.353 782.323,687.353 782.883,687.353 783.442,687.353 784.001,687.353 784.56,687.353 785.12,687.353 785.679,687.353 786.238,687.353 786.797,687.353 787.357,687.353 787.916,687.353 788.475,687.353 789.034,687.353 789.594,687.353 790.153,687.353 790.712,687.353 791.271,687.353 791.831,687.353 792.39,687.353 792.949,687.353 793.508,687.353 794.068,687.353 794.627,687.353 795.186,687.353 795.745,687.353 796.305,687.353 796.864,687.353 797.423,687.353 797.982,687.353 798.542,687.353 799.101,687.353 799.66,687.353 800.219,687.353 800.779,687.353 801.338,687.353 801.897,687.353 802.456,687.353 803.016,687.353 803.575,687.353 804.134,687.353 804.693,687.353 805.253,687.353 805.812,687.353 806.371,687.353 806.931,687.353 807.49,687.353 808.049,687.353 808.608,687.353 809.168,687.353 809.727,687.353 810.286,687.353 810.845,687.353 811.405,687.353 811.964,687.353 812.523,687.353 813.082,687.353 813.642,687.353 814.201,687.353 814.76,687.353 815.319,687.353 815.879,687.353 816.438,687.353 816.997,687.353 817.556,687.353 818.116,687.353 818.675,687.353 819.234,687.353 819.793,687.353 820.353,687.353 820.912,687.353 821.471,687.353 822.03,687.353 822.59,687.353 823.149,687.353 823.708,687.353 824.267,687.353 824.827,687.353 825.386,687.353 825.945,687.353 826.504,687.353 827.064,687.353 827.623,687.353 828.182,687.353 828.741,687.353 829.301,687.353 829.86,687.353 830.419,687.353 830.978,687.353 831.538,687.353 832.097,687.353 832.656,687.353 833.215,687.353 833.775,687.353 834.334,687.353 834.893,687.353 835.452,687.353 836.012,687.353 836.571,687.353 837.13,687.353 837.689,687.353 838.249,687.353 838.808,687.353 839.367,687.353 839.926,687.353 840.486,687.353 841.045,687.353 841.604,687.353 842.163,687.353 842.723,687.353 843.282,687.353 843.841,687.353 844.4,687.353 844.96,687.353 845.519,687.353 846.078,687.353 846.637,687.353 847.197,687.353 847.756,687.353 848.315,687.353 848.874,687.353 849.434,687.353 849.993,687.353 850.552,687.353 851.111,687.353 851.671,687.353 852.23,687.353 852.789,687.353 853.348,687.353 853.908,687.353 854.467,687.353 855.026,687.353 855.585,687.353 856.145,687.353 856.704,687.353 857.263,687.353 857.822,687.353 858.382,687.353 858.941,687.353 859.5,687.353 860.059,687.353 860.619,687.353 861.178,687.353 861.737,687.353 862.296,687.353 862.856,687.353 863.415,687.353 863.974,687.353 864.533,687.353 865.093,687.353 865.652,687.353 866.211,687.353 866.77,687.353 867.33,687.353 867.889,687.353 868.448,687.353 869.007,687.353 869.567,687.353 870.126,687.353 870.685,687.353 871.244,687.353 871.804,687.353 872.363,687.353 872.922,687.353 873.481,687.353 874.041,687.353 874.6,687.353 875.159,687.353 875.718,687.353 876.278,687.353 876.837,687.353 877.396,687.353 877.955,687.353 878.515,687.353 879.074,687.353 879.633,687.353 880.192,687.353 880.752,687.353 881.311,687.353 881.87,687.353 882.429,687.353 882.989,687.353 883.548,687.353 884.107,687.353 884.666,687.353 885.226,687.353 885.785,687.353 886.344,687.353 886.903,687.353 887.463,687.353 888.022,687.353 888.581,687.353 889.14,687.353 889.7,687.353 890.259,687.353 890.818,687.353 891.377,687.353 891.937,687.353 892.496,687.353 893.055,687.353 893.614,687.353 894.174,687.353 894.733,687.353 895.292,687.353 895.851,687.353 896.411,687.353 896.97,687.353 897.529,687.353 898.088,687.353 898.648,687.353 899.207,687.353 899.766,687.353 900.325,687.353 900.885,687.353 901.444,687.353 902.003,687.353 902.562,687.353 903.122,687.353 903.681,687.353 904.24,687.353 904.799,687.353 905.359,687.353 905.918,687.353 906.477,687.353 907.036,687.353 907.596,687.353 908.155,687.353 908.714,687.353 909.273,687.353 909.833,687.353 910.392,687.353 910.951,687.353 911.51,687.353 912.07,687.353 912.629,687.353 913.188,687.353 913.747,687.353 914.307,687.353 914.866,687.353 915.425,687.353 915.984,687.353 916.544,687.353 917.103,687.353 917.662,687.353 918.221,687.353 918.781,687.353 919.34,687.353 919.899,687.353 920.458,687.353 921.018,687.353 921.577,687.353 922.136,687.353 922.695,687.353 923.255,687.353 923.814,687.353 924.373,687.353 924.932,687.353 925.492,687.353 926.051,687.353 926.61,687.353 927.169,687.353 927.729,687.353 928.288,687.353 928.847,687.353 929.406,687.353 929.966,687.353 930.525,687.353 931.084,687.353 931.644,687.353 932.203,687.353 932.762,687.353 933.321,687.353 933.881,687.353 934.44,687.353 934.999,687.353 935.558,687.353 936.118,687.353 936.677,687.353 937.236,687.353 937.795,687.353 938.355,687.353 938.914,687.353 939.473,687.353 940.032,687.353 940.592,687.353 941.151,687.353 941.71,687.353 942.269,687.353 942.829,687.353 943.388,687.353 943.947,687.353 944.506,687.353 945.066,687.353 945.625,687.353 946.184,687.353 946.743,687.353 947.303,687.353 947.862,687.353 948.421,687.353 948.98,687.353 949.54,687.353 950.099,687.353 950.658,687.353 951.217,687.353 951.777,687.353 952.336,687.353 952.895,687.353 953.454,687.353 954.014,687.353 954.573,687.353 955.132,687.353 955.691,687.353 956.251,687.353 956.81,687.353 957.369,687.353 957.928,687.353 958.488,687.353 959.047,687.353 959.606,687.353 960.165,687.353 960.725,687.353 961.284,687.353 961.843,687.353 962.402,687.353 962.962,687.353 963.521,687.353 964.08,687.353 964.639,687.353 965.199,687.353 965.758,687.353 966.317,687.353 966.876,687.353 967.436,687.353 967.995,687.353 968.554,687.353 969.113,687.353 969.673,687.353 970.232,687.353 970.791,687.353 971.35,687.353 971.91,687.353 972.469,687.353 973.028,687.353 973.587,687.353 974.147,687.353 974.706,687.353 975.265,687.353 975.824,687.353 976.384,687.353 976.943,687.353 977.502,687.353 978.061,687.353 978.621,687.353 979.18,687.353 979.739,687.353 980.298,687.353 980.858,687.353 981.417,687.353 981.976,687.353 982.535,687.353 983.095,687.353 983.654,687.353 984.213,687.353 984.772,687.353 985.332,687.353 985.891,687.353 986.45,687.353 987.009,687.353 987.569,687.353 988.128,687.353 988.687,687.353 989.246,687.353 989.806,687.353 990.365,687.353 990.924,687.353 991.483,687.353 992.043,687.353 992.602,687.353 993.161,687.353 993.72,687.353 994.28,687.353 994.839,687.353 995.398,687.353 995.957,687.353 996.517,687.353 997.076,687.353 997.635,687.353 998.194,687.353 998.754,687.353 999.313,687.353 999.872,687.353 1000.43,687.353 1000.99,687.353 1001.55,687.353 1002.11,687.353 1002.67,687.353 1003.23,687.353 1003.79,687.353 1004.35,687.353 1004.91,687.353 1005.46,687.353 1006.02,687.353 1006.58,687.353 1007.14,687.353 1007.7,687.353 1008.26,687.353 1008.82,687.353 1009.38,687.353 1009.94,687.353 1010.5,687.353 1011.06,687.353 1011.62,687.353 1012.18,687.353 1012.73,687.353 1013.29,687.353 1013.85,687.353 1014.41,687.353 1014.97,687.353 1015.53,687.353 1016.09,687.353 1016.65,687.353 1017.21,687.353 1017.77,687.353 1018.33,687.353 1018.89,687.353 1019.45,687.353 1020.01,687.353 1020.56,687.353 1021.12,687.353 1021.68,687.353 1022.24,687.353 1022.8,687.353 1023.36,687.353 1023.92,687.353 1024.48,687.353 1025.04,687.353 1025.6,687.353 1026.16,687.353 1026.72,687.353 1027.28,687.353 1027.83,687.353 1028.39,687.353 1028.95,687.353 1029.51,687.353 1030.07,687.353 1030.63,687.353 1031.19,687.353 1031.75,687.353 1032.31,687.353 1032.87,687.353 1033.43,687.353 1033.99,687.353 1034.55,687.353 1035.1,687.353 1035.66,687.353 1036.22,687.353 1036.78,687.353 1037.34,687.353 1037.9,687.353 1038.46,687.353 1039.02,687.353 1039.58,687.353 1040.14,687.353 1040.7,687.353 1041.26,687.353 1041.82,687.353 1042.38,687.353 1042.93,687.353 1043.49,687.353 1044.05,687.353 1044.61,687.353 1045.17,687.353 1045.73,687.353 1046.29,687.353 1046.85,687.353 1047.41,687.353 1047.97,687.353 1048.53,687.353 1049.09,687.353 1049.65,687.353 1050.2,687.353 1050.76,687.353 1051.32,687.353 1051.88,687.353 1052.44,687.353 1053,687.353 1053.56,687.353 1054.12,687.353 1054.68,687.353 1055.24,687.353 1055.8,687.353 1056.36,687.353 1056.92,687.353 1057.48,687.353 1058.03,687.353 1058.59,687.353 1059.15,687.353 1059.71,687.353 1060.27,687.353 1060.83,687.353 1061.39,687.353 1061.95,687.353 1062.51,687.353 1063.07,687.353 1063.63,687.353 1064.19,687.353 1064.75,687.353 1065.3,687.353 1065.86,687.353 1066.42,687.353 1066.98,687.353 1067.54,687.353 1068.1,687.353 1068.66,687.353 1069.22,687.353 1069.78,687.353 1070.34,687.353 1070.9,687.353 1071.46,687.353 1072.02,687.353 1072.57,687.353 1073.13,687.353 1073.69,687.353 1074.25,687.353 1074.81,687.353 1075.37,687.353 1075.93,687.353 1076.49,687.353 1077.05,687.353 1077.61,687.353 1078.17,687.353 1078.73,687.353 1079.29,687.353 1079.85,687.353 1080.4,687.353 1080.96,687.353 1081.52,687.353 1082.08,687.353 1082.64,687.353 1083.2,687.353 1083.76,687.353 1084.32,687.353 1084.88,687.353 1085.44,687.353 1086,687.353 1086.56,687.353 1087.12,687.353 1087.67,687.353 1088.23,687.353 1088.79,687.353 1089.35,687.353 1089.91,687.353 1090.47,687.353 1091.03,687.353 1091.59,687.353 1092.15,687.353 1092.71,687.353 1093.27,687.353 1093.83,687.353 1094.39,687.353 1094.94,687.353 1095.5,687.353 1096.06,687.353 1096.62,687.353 1097.18,687.353 1097.74,687.353 1098.3,687.353 1098.86,687.353 1099.42,687.353 1099.98,687.353 1100.54,687.353 1101.1,687.353 1101.66,687.353 1102.22,687.353 1102.77,687.353 1103.33,687.353 1103.89,687.353 1104.45,687.353 1105.01,687.353 1105.57,687.353 1106.13,687.353 1106.69,687.353 1107.25,687.353 1107.81,687.353 1108.37,687.353 1108.93,687.353 1109.49,687.353 1110.04,687.353 1110.6,687.353 1111.16,687.353 1111.72,687.353 1112.28,687.353 1112.84,687.353 1113.4,687.353 1113.96,687.353 1114.52,687.353 1115.08,687.353 1115.64,687.353 1116.2,687.353 1116.76,687.353 1117.31,687.353 1117.87,687.353 1118.43,687.353 1118.99,687.353 1119.55,687.353 1120.11,687.353 1120.67,687.353 1121.23,687.353 1121.79,687.353 1122.35,687.353 1122.91,687.353 1123.47,687.353 1124.03,687.353 1124.59,687.353 1125.14,687.353 1125.7,687.353 1126.26,687.353 1126.82,687.353 1127.38,687.353 1127.94,687.353 1128.5,687.353 1129.06,687.353 1129.62,687.353 1130.18,687.353 1130.74,687.353 1131.3,687.353 1131.86,687.353 1132.41,687.353 1132.97,687.353 1133.53,687.353 1134.09,687.353 1134.65,687.353 1135.21,687.353 1135.77,687.353 1136.33,687.353 1136.89,687.353 1137.45,687.353 1138.01,687.353 1138.57,687.353 1139.13,687.353 1139.68,687.353 1140.24,687.353 1140.8,687.353 1141.36,687.353 1141.92,687.353 1142.48,687.353 1143.04,687.353 1143.6,687.353 1144.16,687.353 1144.72,687.353 1145.28,687.353 1145.84,687.353 1146.4,687.353 1146.96,687.353 1147.51,687.353 1148.07,687.353 1148.63,687.353 1149.19,687.353 1149.75,687.353 1150.31,687.353 1150.87,687.353 1151.43,687.353 1151.99,687.353 1152.55,687.353 1153.11,687.353 1153.67,687.353 1154.23,687.353 1154.78,687.353 1155.34,687.353 1155.9,687.353 1156.46,687.353 1157.02,687.353 1157.58,687.353 1158.14,687.353 1158.7,687.353 1159.26,687.353 1159.82,687.353 1160.38,687.353 1160.94,687.353 1161.5,687.353 1162.05,687.353 1162.61,687.353 1163.17,687.353 1163.73,687.353 1164.29,687.353 1164.85,687.353 1165.41,687.353 1165.97,687.353 1166.53,687.353 1167.09,687.353 1167.65,687.353 1168.21,687.353 1168.77,687.353 1169.33,687.353 1169.88,687.353 1170.44,687.353 1171,687.353 1171.56,687.353 1172.12,687.353 1172.68,687.353 1173.24,687.353 1173.8,687.353 1174.36,687.353 1174.92,687.353 1175.48,687.353 1176.04,687.353 1176.6,687.353 1177.15,687.353 1177.71,687.353 1178.27,687.353 1178.83,687.353 1179.39,687.353 1179.95,687.353 1180.51,687.353 1181.07,687.353 1181.63,687.353 1182.19,687.353 1182.75,687.353 1183.31,687.353 1183.87,687.353 1184.43,687.353 1184.98,687.353 1185.54,687.353 1186.1,687.353 1186.66,687.353 1187.22,687.353 1187.78,687.353 1188.34,687.353 1188.9,687.353 1189.46,687.353 1190.02,687.353 1190.58,687.353 1191.14,687.353 1191.7,687.353 1192.25,687.353 1192.81,687.353 1193.37,687.353 1193.93,687.353 1194.49,687.353 1195.05,687.353 1195.61,687.353 1196.17,687.353 1196.73,687.353 1197.29,687.353 1197.85,687.353 1198.41,687.353 1198.97,687.353 1199.52,687.353 1200.08,687.353 1200.64,687.353 1201.2,687.353 1201.76,687.353 1202.32,687.353 1202.88,687.353 1203.44,687.353 1204,687.353 1204.56,687.353 1205.12,687.353 1205.68,687.353 1206.24,687.353 1206.8,687.353 1207.35,687.353 1207.91,687.353 1208.47,687.353 1209.03,687.353 1209.59,687.353 1210.15,687.353 1210.71,687.353 1211.27,687.353 1211.83,687.353 1212.39,687.353 1212.95,687.353 1213.51,687.353 1214.07,687.353 1214.62,687.353 1215.18,687.353 1215.74,687.353 1216.3,687.353 1216.86,687.353 1217.42,687.353 1217.98,687.353 1218.54,687.353 1219.1,687.353 1219.66,687.353 1220.22,687.353 1220.78,687.353 1221.34,687.353 1221.89,687.353 1222.45,687.353 1223.01,687.353 1223.57,687.353 1224.13,687.353 1224.69,687.353 1225.25,687.353 1225.81,687.353 1226.37,687.353 1226.93,687.353 1227.49,687.353 1228.05,687.353 1228.61,687.353 1229.17,687.353 1229.72,687.353 1230.28,687.353 1230.84,687.353 1231.4,687.353 1231.96,687.353 1232.52,687.353 1233.08,687.353 1233.64,687.353 1234.2,687.353 1234.76,687.353 1235.32,687.353 1235.88,687.353 1236.44,687.353 1236.99,687.353 1237.55,687.353 1238.11,687.353 1238.67,687.353 1239.23,687.353 1239.79,687.353 1240.35,687.353 1240.91,687.353 1241.47,687.353 1242.03,687.353 1242.59,687.353 1243.15,687.353 1243.71,687.353 1244.26,687.353 1244.82,687.353 1245.38,687.353 1245.94,687.353 1246.5,687.353 1247.06,687.353 1247.62,687.353 1248.18,687.353 1248.74,687.353 1249.3,687.353 1249.86,687.353 1250.42,687.353 1250.98,687.353 1251.54,687.353 1252.09,687.353 1252.65,687.353 1253.21,687.353 1253.77,687.353 1254.33,687.353 1254.89,687.353 1255.45,687.353 1256.01,687.353 1256.57,687.353 1257.13,687.353 1257.69,687.353 1258.25,687.353 1258.81,687.353 1259.36,687.353 1259.92,687.353 1260.48,687.353 1261.04,687.353 1261.6,687.353 1262.16,687.353 1262.72,687.353 1263.28,687.353 1263.84,687.353 1264.4,687.353 1264.96,687.353 1265.52,687.353 1266.08,687.353 1266.63,687.353 1267.19,687.353 1267.75,687.353 1268.31,687.353 1268.87,687.353 1269.43,687.353 1269.99,687.353 1270.55,687.353 1271.11,687.353 1271.67,687.353 1272.23,687.353 1272.79,687.353 1273.35,687.353 1273.91,687.353 1274.46,687.353 1275.02,687.353 1275.58,687.353 1276.14,687.353 1276.7,687.353 1277.26,687.353 1277.82,687.353 1278.38,687.353 1278.94,687.353 1279.5,687.353 1280.06,687.353 1280.62,687.353 1281.18,687.353 1281.73,687.353 1282.29,687.353 1282.85,687.353 1283.41,687.353 1283.97,687.353 1284.53,687.353 1285.09,687.353 1285.65,687.353 1286.21,687.353 1286.77,687.353 1287.33,687.353 1287.89,687.353 1288.45,687.353 1289,687.353 1289.56,687.353 1290.12,687.353 1290.68,687.353 1291.24,687.353 1291.8,687.353 1292.36,687.353 1292.92,687.353 1293.48,687.353 1294.04,687.353 1294.6,687.353 1295.16,687.353 1295.72,687.353 1296.28,687.353 1296.83,687.353 1297.39,687.353 1297.95,687.353 1298.51,687.353 1299.07,687.353 1299.63,687.353 1300.19,687.353 1300.75,687.353 1301.31,687.353 1301.87,687.353 1302.43,687.353 1302.99,687.353 1303.55,687.353 1304.1,687.353 1304.66,687.353 1305.22,687.353 1305.78,687.353 1306.34,687.353 1306.9,687.353 1307.46,687.353 1308.02,687.353 1308.58,687.353 1309.14,687.353 1309.7,687.353 1310.26,687.353 1310.82,687.353 1311.38,687.353 1311.93,687.353 1312.49,687.353 1313.05,687.353 1313.61,687.353 1314.17,687.353 1314.73,687.353 1315.29,687.353 1315.85,687.353 1316.41,687.353 1316.97,687.353 1317.53,687.353 1318.09,687.353 1318.65,687.353 1319.2,687.353 1319.76,687.353 1320.32,687.353 1320.88,687.353 1321.44,687.353 1322,687.353 1322.56,687.353 1323.12,687.353 1323.68,687.353 1324.24,687.353 1324.8,687.353 1325.36,687.353 1325.92,687.353 1326.47,687.353 1327.03,687.353 1327.59,687.353 1328.15,687.353 1328.71,687.353 1329.27,687.353 1329.83,687.353 1330.39,687.353 1330.95,687.353 1331.51,687.353 1332.07,687.353 1332.63,687.353 1333.19,687.353 1333.75,687.353 1334.3,687.353 1334.86,687.353 1335.42,687.353 1335.98,687.353 1336.54,687.353 1337.1,687.353 1337.66,687.353 1338.22,687.353 1338.78,687.353 1339.34,687.353 1339.9,687.353 1340.46,687.353 1341.02,687.353 1341.57,687.353 1342.13,687.353 1342.69,687.353 1343.25,687.353 1343.81,687.353 1344.37,687.353 1344.93,687.353 1345.49,687.353 1346.05,687.353 1346.61,687.353 1347.17,687.353 1347.73,687.353 1348.29,687.353 1348.84,687.353 1349.4,687.353 1349.96,687.353 1350.52,687.353 1351.08,687.353 1351.64,687.353 1352.2,687.353 1352.76,687.353 1353.32,687.353 1353.88,687.353 1354.44,687.353 1355,687.353 1355.56,687.353 1356.12,687.353 1356.67,687.353 1357.23,687.353 1357.79,687.353 1358.35,687.353 1358.91,687.353 1359.47,687.353 1360.03,687.353 1360.59,687.353 1361.15,687.353 1361.71,687.353 1362.27,687.353 1362.83,687.353 1363.39,687.353 1363.94,687.353 1364.5,687.353 1365.06,687.353 1365.62,687.353 1366.18,687.353 1366.74,687.353 1367.3,687.353 1367.86,687.353 1368.42,687.353 1368.98,687.353 1369.54,687.353 1370.1,687.353 1370.66,687.353 1371.21,687.353 1371.77,687.353 1372.33,687.353 1372.89,687.353 1373.45,687.353 1374.01,687.353 1374.57,687.353 1375.13,687.353 1375.69,687.353 1376.25,687.353 1376.81,687.353 1377.37,687.353 1377.93,687.353 1378.49,687.353 1379.04,687.353 1379.6,687.353 1380.16,687.353 1380.72,687.353 1381.28,687.353 1381.84,687.353 1382.4,687.353 1382.96,687.353 1383.52,687.353 1384.08,687.353 1384.64,687.353 1385.2,687.353 1385.76,687.353 1386.31,687.353 1386.87,687.353 1387.43,687.353 1387.99,687.353 1388.55,687.353 1389.11,687.353 1389.67,687.353 1390.23,687.353 1390.79,687.353 1391.35,687.353 1391.91,687.353 1392.47,687.353 1393.03,687.353 1393.58,687.353 1394.14,687.353 1394.7,687.353 1395.26,687.353 1395.82,687.353 1396.38,687.353 1396.94,687.353 1397.5,687.353 1398.06,687.353 1398.62,687.353 1399.18,687.353 1399.74,687.353 1400.3,687.353 1400.86,687.353 1401.41,687.353 1401.97,687.353 1402.53,687.353 1403.09,687.353 1403.65,687.353 1404.21,687.353 1404.77,687.353 1405.33,687.353 1405.89,687.353 1406.45,687.353 1407.01,687.353 1407.57,687.353 1408.13,687.353 1408.68,687.353 1409.24,687.353 1409.8,687.353 1410.36,687.353 1410.92,687.353 1411.48,687.353 1412.04,687.353 1412.6,687.353 1413.16,687.353 1413.72,687.353 1414.28,687.353 1414.84,687.353 1415.4,687.353 1415.95,687.353 1416.51,687.353 1417.07,687.353 1417.63,687.353 1418.19,687.353 1418.75,687.353 1419.31,687.353 1419.87,687.353 1420.43,687.353 1420.99,687.353 1421.55,687.353 1422.11,687.353 1422.67,687.353 1423.23,687.353 1423.78,687.353 1424.34,687.353 1424.9,687.353 1425.46,687.353 1426.02,687.353 1426.58,687.353 1427.14,687.353 1427.7,687.353 1428.26,687.353 1428.82,687.353 1429.38,687.353 1429.94,687.353 1430.5,687.353 1431.05,687.353 1431.61,687.353 1432.17,687.353 1432.73,687.353 1433.29,687.353 1433.85,687.353 1434.41,687.353 1434.97,687.353 1435.53,687.353 1436.09,687.353 1436.65,687.353 1437.21,687.353 1437.77,687.353 1438.33,687.353 1438.88,687.353 1439.44,687.353 1440,687.353 1440.56,687.353 1441.12,687.353 1441.68,687.353 1442.24,687.353 1442.8,687.353 1443.36,687.353 1443.92,687.353 1444.48,687.353 1445.04,687.353 1445.6,687.353 1446.15,687.353 1446.71,687.353 1447.27,687.353 1447.83,687.353 1448.39,687.353 1448.95,687.353 1449.51,687.353 1450.07,687.353 1450.63,687.353 1451.19,687.353 1451.75,687.353 1452.31,687.353 1452.87,687.353 1453.42,687.353 1453.98,687.353 1454.54,687.353 1455.1,687.353 1455.66,687.353 1456.22,687.353 1456.78,687.353 1457.34,687.353 1457.9,687.353 1458.46,687.353 1459.02,687.353 1459.58,687.353 1460.14,687.353 1460.7,687.353 1461.25,687.353 1461.81,687.353 1462.37,687.353 1462.93,687.353 1463.49,687.353 1464.05,687.353 1464.61,687.353 1465.17,687.353 1465.73,687.353 1466.29,687.353 1466.85,687.353 1467.41,687.353 1467.97,687.353 1468.52,687.353 1469.08,687.353 1469.64,687.353 1470.2,687.353 1470.76,687.353 1471.32,687.353 1471.88,687.353 1472.44,687.353 1473,687.353 1473.56,687.353 1474.12,687.353 1474.68,687.353 1475.24,687.353 1475.79,687.353 1476.35,687.353 1476.91,687.353 1477.47,687.353 1478.03,687.353 1478.59,687.353 1479.15,687.353 1479.71,687.353 1480.27,687.353 1480.83,687.353 1481.39,687.353 1481.95,687.353 1482.51,687.353 1483.07,687.353 1483.62,687.353 1484.18,687.353 1484.74,687.353 1485.3,687.353 1485.86,687.353 1486.42,687.353 1486.98,687.353 1487.54,687.353 1488.1,687.353 1488.66,687.353 1489.22,687.353 1489.78,687.353 1490.34,687.353 1490.89,687.353 1491.45,687.353 1492.01,687.353 1492.57,687.353 1493.13,687.353 1493.69,687.353 1494.25,687.353 1494.81,687.353 1495.37,687.353 1495.93,687.353 1496.49,687.353 1497.05,687.353 1497.61,687.353 1498.16,687.353 1498.72,687.353 1499.28,687.353 1499.84,687.353 1500.4,687.353 1500.96,687.353 1501.52,687.353 1502.08,687.353 1502.64,687.353 1503.2,687.353 1503.76,687.353 1504.32,687.353 1504.88,687.353 1505.44,687.353 1505.99,687.353 1506.55,687.353 1507.11,687.353 1507.67,687.353 1508.23,687.353 1508.79,687.353 1509.35,687.353 1509.91,687.353 1510.47,687.353 1511.03,687.353 1511.59,687.353 1512.15,687.353 1512.71,687.353 1513.26,687.353 1513.82,687.353 1514.38,687.353 1514.94,687.353 1515.5,687.353 1516.06,687.353 1516.62,687.353 1517.18,687.353 1517.74,687.353 1518.3,687.353 1518.86,687.353 1519.42,687.353 1519.98,687.353 1520.53,687.353 1521.09,687.353 1521.65,687.353 1522.21,687.353 1522.77,687.353 1523.33,687.353 1523.89,687.353 1524.45,687.353 1525.01,687.353 1525.57,687.353 1526.13,687.353 1526.69,687.353 1527.25,687.353 1527.81,687.353 1528.36,687.353 1528.92,687.353 1529.48,687.353 1530.04,687.353 1530.6,687.353 1531.16,687.353 1531.72,687.353 1532.28,687.353 1532.84,687.353 1533.4,687.353 1533.96,687.353 1534.52,687.353 1535.08,687.353 1535.63,687.353 1536.19,687.353 1536.75,687.353 1537.31,687.353 1537.87,687.353 1538.43,687.353 1538.99,687.353 1539.55,687.353 1540.11,687.353 1540.67,687.353 1541.23,687.353 1541.79,687.353 1542.35,687.353 1542.9,687.353 1543.46,687.353 1544.02,687.353 1544.58,687.353 1545.14,687.353 1545.7,687.353 1546.26,687.353 1546.82,687.353 1547.38,687.353 1547.94,687.353 1548.5,687.353 1549.06,687.353 1549.62,687.353 1550.18,687.353 1550.73,687.353 1551.29,687.353 1551.85,687.353 1552.41,687.353 1552.97,687.353 1553.53,687.353 1554.09,687.353 1554.65,687.353 1555.21,687.353 1555.77,687.353 1556.33,687.353 1556.89,687.353 1557.45,687.353 1558,687.353 1558.56,687.353 1559.12,687.353 1559.68,687.353 1560.24,687.353 1560.8,687.353 1561.36,687.353 1561.92,687.353 1562.48,687.353 1563.04,687.353 1563.6,687.353 1564.16,687.353 1564.72,687.353 1565.28,687.353 1565.83,687.353 1566.39,687.353 1566.95,687.353 1567.51,687.353 1568.07,687.353 1568.63,687.353 1569.19,687.353 1569.75,687.353 1570.31,687.353 1570.87,687.353 1571.43,687.353 1571.99,687.353 1572.55,687.353 1573.1,687.353 1573.66,687.353 1574.22,687.353 1574.78,687.353 1575.34,687.353 1575.9,687.353 1576.46,687.353 1577.02,687.353 1577.58,687.353 1578.14,687.353 1578.7,687.353 1579.26,687.353 1579.82,687.353 1580.37,687.353 1580.93,687.353 1581.49,687.353 1582.05,687.353 1582.61,687.353 1583.17,687.353 1583.73,687.353 1584.29,687.353 1584.85,687.353 1585.41,687.353 1585.97,687.353 1586.53,687.353 1587.09,687.353 1587.65,687.353 1588.2,687.353 1588.76,687.353 1589.32,687.353 1589.88,687.353 1590.44,687.353 1591,687.353 1591.56,687.353 1592.12,687.353 1592.68,687.353 1593.24,687.353 1593.8,687.353 1594.36,687.353 1594.92,687.353 1595.47,687.353 1596.03,687.353 1596.59,687.353 1597.15,687.353 1597.71,687.353 1598.27,687.353 1598.83,687.353 1599.39,687.353 1599.95,687.353 1600.51,687.353 1601.07,687.353 1601.63,687.353 1602.19,687.353 1602.74,687.353 1603.3,687.353 1603.86,687.353 1604.42,687.353 1604.98,687.353 1605.54,687.353 1606.1,687.353 1606.66,687.353 1607.22,687.353 1607.78,687.353 1608.34,687.353 1608.9,687.353 1609.46,687.353 1610.02,687.353 1610.57,687.353 1611.13,687.353 1611.69,687.353 1612.25,687.353 1612.81,687.353 1613.37,687.353 1613.93,687.353 1614.49,687.353 1615.05,687.353 1615.61,687.353 1616.17,687.353 1616.73,687.353 1617.29,687.353 1617.84,687.353 1618.4,687.353 1618.96,687.353 1619.52,687.353 1620.08,687.353 1620.64,687.353 1621.2,687.353 1621.76,687.353 1622.32,687.353 1622.88,687.353 1623.44,687.353 1624,687.353 1624.56,687.353 1625.11,687.353 1625.67,687.353 1626.23,687.353 1626.79,687.353 1627.35,687.353 1627.91,687.353 1628.47,687.353 1629.03,687.353 1629.59,687.353 1630.15,687.353 1630.71,687.353 1631.27,687.353 1631.83,687.353 1632.39,687.353 1632.94,687.353 1633.5,687.353 1634.06,687.353 1634.62,687.353 1635.18,687.353 1635.74,687.353 1636.3,687.353 1636.86,687.353 1637.42,687.353 1637.98,687.353 1638.54,687.353 1639.1,687.353 1639.66,687.353 1640.21,687.353 1640.77,687.353 1641.33,687.353 1641.89,687.353 1642.45,687.353 1643.01,687.353 1643.57,687.353 1644.13,687.353 1644.69,687.353 1645.25,687.353 1645.81,687.353 1646.37,687.353 1646.93,687.353 1647.48,687.353 1648.04,687.353 1648.6,687.353 1649.16,687.353 1649.72,687.353 1650.28,687.353 1650.84,687.353 1651.4,687.353 1651.96,687.353 1652.52,687.353 1653.08,687.353 1653.64,687.353 1654.2,687.353 1654.76,687.353 1655.31,687.353 1655.87,687.353 1656.43,687.353 1656.99,687.353 1657.55,687.353 1658.11,687.353 1658.67,687.353 1659.23,687.353 1659.79,687.353 1660.35,687.353 1660.91,687.353 1661.47,687.353 1662.03,687.353 1662.58,687.353 1663.14,687.353 1663.7,687.353 1664.26,687.353 1664.82,687.353 1665.38,687.353 1665.94,687.353 1666.5,687.353 1667.06,687.353 1667.62,687.353 1668.18,687.353 1668.74,687.353 1669.3,687.353 1669.85,687.353 1670.41,687.353 1670.97,687.353 1671.53,687.353 1672.09,687.353 1672.65,687.353 1673.21,687.353 1673.77,687.353 1674.33,687.353 1674.89,687.353 1675.45,687.353 1676.01,687.353 1676.57,687.353 1677.13,687.353 1677.68,687.353 1678.24,687.353 1678.8,687.353 1679.36,687.353 1679.92,687.353 1680.48,687.353 1681.04,687.353 1681.6,687.353 1682.16,687.353 1682.72,687.353 1683.28,687.353 1683.84,687.353 1684.4,687.353 1684.95,687.353 1685.51,687.353 1686.07,687.353 1686.63,687.353 1687.19,687.353 1687.75,687.353 1688.31,687.353 1688.87,687.353 1689.43,687.353 1689.99,687.353 1690.55,687.353 1691.11,687.353 1691.67,687.353 1692.23,687.353 1692.78,687.353 1693.34,687.353 1693.9,687.353 1694.46,687.353 1695.02,687.353 1695.58,687.353 1696.14,687.353 1696.7,687.353 1697.26,687.353 1697.82,687.353 1698.38,687.353 1698.94,687.353 1699.5,687.353 1700.05,687.353 1700.61,687.353 1701.17,687.353 1701.73,687.353 1702.29,687.353 1702.85,687.353 1703.41,687.353 1703.97,687.353 1704.53,687.353 1705.09,687.353 1705.65,687.353 1706.21,687.353 1706.77,687.353 1707.32,687.353 1707.88,687.353 1708.44,687.353 1709,687.353 1709.56,687.353 1710.12,687.353 1710.68,687.353 1711.24,687.353 1711.8,687.353 1712.36,687.353 1712.92,687.353 1713.48,687.353 1714.04,687.353 1714.6,687.353 1715.15,687.353 1715.71,687.353 1716.27,687.353 1716.83,687.353 1717.39,687.353 1717.95,687.353 1718.51,687.353 1719.07,687.353 1719.63,687.353 1720.19,687.353 1720.75,687.353 1721.31,687.353 1721.87,687.353 1722.42,687.353 1722.98,687.353 1723.54,687.353 1724.1,687.353 1724.66,687.353 1725.22,687.353 1725.78,687.353 1726.34,687.353 1726.9,687.353 1727.46,687.353 1728.02,687.353 1728.58,687.353 1729.14,687.353 1729.69,687.353 1730.25,687.353 1730.81,687.353 1731.37,687.353 1731.93,687.353 1732.49,687.353 1733.05,687.353 1733.61,687.353 1734.17,687.353 1734.73,687.353 1735.29,687.353 1735.85,687.353 1736.41,687.353 1736.97,687.353 1737.52,687.353 1738.08,687.353 1738.64,687.353 1739.2,687.353 1739.76,687.353 1740.32,687.353 1740.88,687.353 1741.44,687.353 1742,687.353 1742.56,687.353 1743.12,687.353 1743.68,687.353 1744.24,687.353 1744.79,687.353 1745.35,687.353 1745.91,687.353 1746.47,687.353 1747.03,687.353 1747.59,687.353 1748.15,687.353 1748.71,687.353 1749.27,687.353 1749.83,687.353 1750.39,687.353 1750.95,687.353 1751.51,687.353 1752.06,687.353 1752.62,687.353 1753.18,687.353 1753.74,687.353 1754.3,687.353 1754.86,687.353 1755.42,687.353 1755.98,687.353 1756.54,687.353 1757.1,687.353 1757.66,687.353 1758.22,687.353 1758.78,687.353 1759.34,687.353 1759.89,687.353 1760.45,687.353 1761.01,687.353 1761.57,687.353 1762.13,687.353 1762.69,687.353 1763.25,687.353 1763.81,687.353 1764.37,687.353 1764.93,687.353 1765.49,687.353 1766.05,687.353 1766.61,687.353 1767.16,687.353 1767.72,687.353 1768.28,687.353 1768.84,687.353 1769.4,687.353 1769.96,687.353 1770.52,687.353 1771.08,687.353 1771.64,687.353 1772.2,687.353 1772.76,687.353 1773.32,687.353 1773.88,687.353 1774.43,687.353 1774.99,687.353 1775.55,687.353 1776.11,687.353 1776.67,687.353 1777.23,687.353 1777.79,687.353 1778.35,687.353 1778.91,687.353 1779.47,687.353 1780.03,687.353 1780.59,687.353 1781.15,687.353 1781.71,687.353 1782.26,687.353 1782.82,687.353 1783.38,687.353 1783.94,687.353 1784.5,687.353 1785.06,687.353 1785.62,687.353 1786.18,687.353 1786.74,687.353 1787.3,687.353 1787.86,687.353 1788.42,687.353 1788.98,687.353 1789.53,687.353 1790.09,687.353 1790.65,687.353 1791.21,687.353 1791.77,687.353 1792.33,687.353 1792.89,687.353 1793.45,687.353 1794.01,687.353 1794.57,687.353 1795.13,687.353 1795.69,687.353 1796.25,687.353 1796.8,687.353 1797.36,687.353 1797.92,687.353 1798.48,687.353 1799.04,687.353 1799.6,687.353 1800.16,687.353 1800.72,687.353 1801.28,687.353 1801.84,687.353 1802.4,687.353 1802.96,687.353 1803.52,687.353 1804.08,687.353 1804.63,687.353 1805.19,687.353 1805.75,687.353 1806.31,687.353 1806.87,687.353 1807.43,687.353 1807.99,687.353 1808.55,687.353 1809.11,687.353 1809.67,687.353 1810.23,687.353 1810.79,687.353 1811.35,687.353 1811.9,687.353 1812.46,687.353 1813.02,687.353 1813.58,687.353 1814.14,687.353 1814.7,687.353 1815.26,687.353 1815.82,687.353 1816.38,687.353 1816.94,687.353 1817.5,687.353 1818.06,687.353 1818.62,687.353 1819.18,687.353 1819.73,687.353 1820.29,687.353 1820.85,687.353 1821.41,687.353 1821.97,687.353 1822.53,687.353 1823.09,687.353 1823.65,687.353 1824.21,687.353 1824.77,687.353 1825.33,687.353 1825.89,687.353 1826.45,687.353 1827,687.353 1827.56,687.353 1828.12,687.353 1828.68,687.353 1829.24,687.353 1829.8,687.353 1830.36,687.353 1830.92,687.353 1831.48,687.353 1832.04,687.353 1832.6,687.353 1833.16,687.353 1833.72,687.353 1834.27,687.353 1834.83,687.353 1835.39,687.353 1835.95,687.353 1836.51,687.353 1837.07,687.353 1837.63,687.353 1838.19,687.353 \"/>\n<path clip-path=\"url(#clip313)\" d=\"M720.247 685.248 L720.806 685.248 L721.365 685.248 L721.924 685.248 L722.484 685.248 L723.043 685.248 L723.602 685.248 L724.161 685.248 L724.721 685.248 L725.28 685.248 L725.839 685.248 L726.398 685.248 L726.958 685.248 L727.517 685.248 L728.076 685.248 L728.635 685.248 L729.195 685.248 L729.754 685.248 L730.313 685.248 L730.872 685.248 L731.432 685.248 L731.991 685.248 L732.55 685.248 L733.109 685.248 L733.669 685.248 L734.228 685.248 L734.787 685.248 L735.346 685.248 L735.906 685.248 L736.465 685.248 L737.024 685.248 L737.583 685.248 L738.143 685.248 L738.702 685.248 L739.261 685.248 L739.82 685.248 L740.38 685.248 L740.939 685.248 L741.498 685.248 L742.057 685.248 L742.617 685.248 L743.176 685.248 L743.735 685.248 L744.294 685.248 L744.854 685.248 L745.413 685.248 L745.972 685.248 L746.531 685.248 L747.091 685.248 L747.65 685.248 L748.209 685.248 L748.768 685.248 L749.328 685.248 L749.887 685.248 L750.446 685.248 L751.005 685.248 L751.565 685.248 L752.124 685.248 L752.683 685.248 L753.242 685.248 L753.802 685.248 L754.361 685.248 L754.92 685.248 L755.479 685.248 L756.039 685.248 L756.598 685.248 L757.157 685.248 L757.716 685.248 L758.276 685.248 L758.835 685.248 L759.394 685.248 L759.953 685.248 L760.513 685.248 L761.072 685.248 L761.631 685.248 L762.19 685.248 L762.75 685.248 L763.309 685.248 L763.868 685.248 L764.427 685.248 L764.987 685.248 L765.546 685.248 L766.105 685.248 L766.664 685.248 L767.224 685.248 L767.783 685.248 L768.342 685.248 L768.901 685.248 L769.461 685.248 L770.02 685.248 L770.579 685.248 L771.138 685.248 L771.698 685.248 L772.257 685.248 L772.816 685.248 L773.375 685.248 L773.935 685.248 L774.494 685.248 L775.053 685.248 L775.612 685.248 L776.172 685.248 L776.731 685.248 L777.29 685.248 L777.849 685.248 L778.409 685.248 L778.968 685.248 L779.527 685.248 L780.086 685.248 L780.646 685.248 L781.205 685.248 L781.764 685.248 L782.323 685.248 L782.883 685.248 L783.442 685.248 L784.001 685.248 L784.56 685.248 L785.12 685.248 L785.679 685.248 L786.238 685.248 L786.797 685.248 L787.357 685.248 L787.916 685.248 L788.475 685.248 L789.034 685.248 L789.594 685.248 L790.153 685.248 L790.712 685.248 L791.271 685.248 L791.831 685.248 L792.39 685.248 L792.949 685.248 L793.508 685.248 L794.068 685.248 L794.627 685.248 L795.186 685.248 L795.745 685.248 L796.305 685.248 L796.864 685.248 L797.423 685.248 L797.982 685.248 L798.542 685.248 L799.101 685.248 L799.66 685.248 L800.219 685.248 L800.779 685.248 L801.338 685.248 L801.897 685.248 L802.456 685.248 L803.016 685.248 L803.575 685.248 L804.134 685.248 L804.693 685.248 L805.253 685.248 L805.812 685.248 L806.371 685.248 L806.931 685.248 L807.49 685.248 L808.049 685.248 L808.608 685.248 L809.168 685.248 L809.727 685.248 L810.286 685.248 L810.845 685.248 L811.405 685.248 L811.964 685.248 L812.523 685.248 L813.082 685.248 L813.642 685.248 L814.201 685.248 L814.76 685.248 L815.319 685.248 L815.879 685.248 L816.438 685.248 L816.997 685.248 L817.556 685.248 L818.116 685.248 L818.675 685.248 L819.234 685.248 L819.793 685.248 L820.353 685.248 L820.912 685.248 L821.471 685.248 L822.03 685.248 L822.59 685.248 L823.149 685.248 L823.708 685.248 L824.267 685.248 L824.827 685.248 L825.386 685.248 L825.945 685.248 L826.504 685.248 L827.064 685.248 L827.623 685.248 L828.182 685.248 L828.741 685.248 L829.301 685.248 L829.86 685.248 L830.419 685.248 L830.978 685.248 L831.538 685.248 L832.097 685.248 L832.656 685.248 L833.215 685.248 L833.775 685.248 L834.334 685.248 L834.893 685.248 L835.452 685.248 L836.012 685.248 L836.571 685.248 L837.13 685.248 L837.689 685.248 L838.249 685.248 L838.808 685.248 L839.367 685.248 L839.926 685.248 L840.486 685.248 L841.045 685.248 L841.604 685.248 L842.163 685.248 L842.723 685.248 L843.282 685.248 L843.841 685.248 L844.4 685.248 L844.96 685.248 L845.519 685.248 L846.078 685.248 L846.637 685.248 L847.197 685.248 L847.756 685.248 L848.315 685.248 L848.874 685.248 L849.434 685.248 L849.993 685.248 L850.552 685.248 L851.111 685.248 L851.671 685.248 L852.23 685.248 L852.789 685.248 L853.348 685.248 L853.908 685.248 L854.467 685.248 L855.026 685.248 L855.585 685.248 L856.145 685.248 L856.704 685.248 L857.263 685.248 L857.822 685.248 L858.382 685.248 L858.941 685.248 L859.5 685.248 L860.059 685.248 L860.619 685.248 L861.178 685.248 L861.737 685.248 L862.296 685.248 L862.856 685.248 L863.415 685.248 L863.974 685.248 L864.533 685.248 L865.093 685.248 L865.652 685.248 L866.211 685.248 L866.77 685.248 L867.33 685.248 L867.889 685.248 L868.448 685.248 L869.007 685.248 L869.567 685.248 L870.126 685.248 L870.685 685.248 L871.244 685.248 L871.804 685.248 L872.363 685.248 L872.922 685.248 L873.481 685.248 L874.041 685.248 L874.6 685.248 L875.159 685.248 L875.718 685.248 L876.278 685.248 L876.837 685.248 L877.396 685.248 L877.955 685.248 L878.515 685.248 L879.074 685.248 L879.633 685.248 L880.192 685.248 L880.752 685.248 L881.311 685.248 L881.87 685.248 L882.429 685.248 L882.989 685.248 L883.548 685.248 L884.107 685.248 L884.666 685.248 L885.226 685.248 L885.785 685.248 L886.344 685.248 L886.903 685.248 L887.463 685.248 L888.022 685.248 L888.581 685.248 L889.14 685.248 L889.7 685.248 L890.259 685.248 L890.818 685.248 L891.377 685.248 L891.937 685.248 L892.496 685.248 L893.055 685.248 L893.614 685.248 L894.174 685.248 L894.733 685.248 L895.292 685.248 L895.851 685.248 L896.411 685.248 L896.97 685.248 L897.529 685.248 L898.088 685.248 L898.648 685.248 L899.207 685.248 L899.766 685.248 L900.325 685.248 L900.885 685.248 L901.444 685.248 L902.003 685.248 L902.562 685.248 L903.122 685.248 L903.681 685.248 L904.24 685.248 L904.799 685.248 L905.359 685.248 L905.918 685.248 L906.477 685.248 L907.036 685.248 L907.596 685.248 L908.155 685.248 L908.714 685.248 L909.273 685.248 L909.833 685.248 L910.392 685.248 L910.951 685.248 L911.51 685.248 L912.07 685.248 L912.629 685.248 L913.188 685.248 L913.747 685.248 L914.307 685.248 L914.866 685.248 L915.425 685.248 L915.984 685.248 L916.544 685.248 L917.103 685.248 L917.662 685.248 L918.221 685.248 L918.781 685.248 L919.34 685.248 L919.899 685.248 L920.458 685.248 L921.018 685.248 L921.577 685.248 L922.136 685.248 L922.695 685.248 L923.255 685.248 L923.814 685.248 L924.373 685.248 L924.932 685.248 L925.492 685.248 L926.051 685.248 L926.61 685.248 L927.169 685.248 L927.729 685.248 L928.288 685.248 L928.847 685.248 L929.406 685.248 L929.966 685.248 L930.525 685.248 L931.084 685.248 L931.644 685.248 L932.203 685.248 L932.762 685.248 L933.321 685.248 L933.881 685.248 L934.44 685.248 L934.999 685.248 L935.558 685.248 L936.118 685.248 L936.677 685.248 L937.236 685.248 L937.795 685.248 L938.355 685.248 L938.914 685.248 L939.473 685.248 L940.032 685.248 L940.592 685.248 L941.151 685.248 L941.71 685.248 L942.269 685.248 L942.829 685.248 L943.388 685.248 L943.947 685.248 L944.506 685.248 L945.066 685.248 L945.625 685.248 L946.184 685.248 L946.743 685.248 L947.303 685.248 L947.862 685.248 L948.421 685.248 L948.98 685.248 L949.54 685.248 L950.099 685.248 L950.658 685.248 L951.217 685.248 L951.777 685.248 L952.336 685.248 L952.895 685.248 L953.454 685.248 L954.014 685.248 L954.573 685.248 L955.132 685.248 L955.691 685.248 L956.251 685.248 L956.81 685.248 L957.369 685.248 L957.928 685.248 L958.488 685.248 L959.047 685.248 L959.606 685.248 L960.165 685.248 L960.725 685.248 L961.284 685.248 L961.843 685.248 L962.402 685.248 L962.962 685.248 L963.521 685.248 L964.08 685.248 L964.639 685.248 L965.199 685.248 L965.758 685.248 L966.317 685.248 L966.876 685.248 L967.436 685.248 L967.995 685.248 L968.554 685.248 L969.113 685.248 L969.673 685.248 L970.232 685.248 L970.791 685.248 L971.35 685.248 L971.91 685.248 L972.469 685.248 L973.028 685.248 L973.587 685.248 L974.147 685.248 L974.706 685.248 L975.265 685.248 L975.824 685.248 L976.384 685.248 L976.943 685.248 L977.502 685.248 L978.061 685.248 L978.621 685.248 L979.18 685.248 L979.739 685.248 L980.298 685.248 L980.858 685.248 L981.417 685.248 L981.976 685.248 L982.535 685.248 L983.095 685.248 L983.654 685.248 L984.213 685.248 L984.772 685.248 L985.332 685.248 L985.891 685.248 L986.45 685.248 L987.009 685.248 L987.569 685.248 L988.128 685.248 L988.687 685.248 L989.246 685.248 L989.806 685.248 L990.365 685.248 L990.924 685.248 L991.483 685.248 L992.043 685.248 L992.602 685.248 L993.161 685.248 L993.72 685.248 L994.28 685.248 L994.839 685.248 L995.398 685.248 L995.957 685.248 L996.517 685.248 L997.076 685.248 L997.635 685.248 L998.194 685.248 L998.754 685.248 L999.313 685.248 L999.872 685.248 L1000.43 685.248 L1000.99 685.248 L1001.55 685.248 L1002.11 685.248 L1002.67 685.248 L1003.23 685.248 L1003.79 685.248 L1004.35 685.248 L1004.91 685.248 L1005.46 685.248 L1006.02 685.248 L1006.58 685.248 L1007.14 685.248 L1007.7 685.248 L1008.26 685.248 L1008.82 685.248 L1009.38 685.248 L1009.94 685.248 L1010.5 685.248 L1011.06 685.248 L1011.62 685.248 L1012.18 685.248 L1012.73 685.248 L1013.29 685.248 L1013.85 685.248 L1014.41 685.248 L1014.97 685.248 L1015.53 685.248 L1016.09 685.248 L1016.65 685.248 L1017.21 685.248 L1017.77 685.248 L1018.33 685.248 L1018.89 685.248 L1019.45 685.248 L1020.01 685.248 L1020.56 685.248 L1021.12 685.248 L1021.68 685.248 L1022.24 685.248 L1022.8 685.248 L1023.36 685.248 L1023.92 685.248 L1024.48 685.248 L1025.04 685.248 L1025.6 685.248 L1026.16 685.248 L1026.72 685.248 L1027.28 685.248 L1027.83 685.248 L1028.39 685.248 L1028.95 685.248 L1029.51 685.248 L1030.07 685.248 L1030.63 685.248 L1031.19 685.248 L1031.75 685.248 L1032.31 685.248 L1032.87 685.248 L1033.43 685.248 L1033.99 685.248 L1034.55 685.248 L1035.1 685.248 L1035.66 685.248 L1036.22 685.248 L1036.78 685.248 L1037.34 685.248 L1037.9 685.248 L1038.46 685.248 L1039.02 685.248 L1039.58 685.248 L1040.14 685.248 L1040.7 685.248 L1041.26 685.248 L1041.82 685.248 L1042.38 685.248 L1042.93 685.248 L1043.49 685.248 L1044.05 685.248 L1044.61 685.248 L1045.17 685.248 L1045.73 685.248 L1046.29 685.248 L1046.85 685.248 L1047.41 685.248 L1047.97 685.248 L1048.53 685.248 L1049.09 685.248 L1049.65 685.248 L1050.2 685.248 L1050.76 685.248 L1051.32 685.248 L1051.88 685.248 L1052.44 685.248 L1053 685.248 L1053.56 685.248 L1054.12 685.248 L1054.68 685.248 L1055.24 685.248 L1055.8 685.248 L1056.36 685.248 L1056.92 685.248 L1057.48 685.248 L1058.03 685.248 L1058.59 685.248 L1059.15 685.248 L1059.71 685.248 L1060.27 685.248 L1060.83 685.248 L1061.39 685.248 L1061.95 685.248 L1062.51 685.248 L1063.07 685.248 L1063.63 685.248 L1064.19 685.248 L1064.75 685.248 L1065.3 685.248 L1065.86 685.248 L1066.42 685.248 L1066.98 685.248 L1067.54 685.248 L1068.1 685.248 L1068.66 685.248 L1069.22 685.248 L1069.78 685.248 L1070.34 685.248 L1070.9 685.248 L1071.46 685.248 L1072.02 685.248 L1072.57 685.248 L1073.13 685.248 L1073.69 685.248 L1074.25 685.248 L1074.81 685.248 L1075.37 685.248 L1075.93 685.248 L1076.49 685.248 L1077.05 685.248 L1077.61 685.248 L1078.17 685.248 L1078.73 685.248 L1079.29 685.248 L1079.85 685.248 L1080.4 685.248 L1080.96 685.248 L1081.52 685.248 L1082.08 685.248 L1082.64 685.248 L1083.2 685.248 L1083.76 685.248 L1084.32 685.248 L1084.88 685.248 L1085.44 685.248 L1086 685.248 L1086.56 685.248 L1087.12 685.248 L1087.67 685.248 L1088.23 685.248 L1088.79 685.248 L1089.35 685.248 L1089.91 685.248 L1090.47 685.248 L1091.03 685.248 L1091.59 685.248 L1092.15 685.248 L1092.71 685.248 L1093.27 685.248 L1093.83 685.248 L1094.39 685.248 L1094.94 685.248 L1095.5 685.248 L1096.06 685.248 L1096.62 685.248 L1097.18 685.248 L1097.74 685.248 L1098.3 685.248 L1098.86 685.248 L1099.42 685.248 L1099.98 685.248 L1100.54 685.248 L1101.1 685.248 L1101.66 685.248 L1102.22 685.248 L1102.77 685.248 L1103.33 685.248 L1103.89 685.248 L1104.45 685.248 L1105.01 685.248 L1105.57 685.248 L1106.13 685.248 L1106.69 685.248 L1107.25 685.248 L1107.81 685.248 L1108.37 685.248 L1108.93 685.248 L1109.49 685.248 L1110.04 685.248 L1110.6 685.248 L1111.16 685.248 L1111.72 685.248 L1112.28 685.248 L1112.84 685.248 L1113.4 685.248 L1113.96 685.248 L1114.52 685.248 L1115.08 685.248 L1115.64 685.248 L1116.2 685.248 L1116.76 685.248 L1117.31 685.248 L1117.87 685.248 L1118.43 685.248 L1118.99 685.248 L1119.55 685.248 L1120.11 685.248 L1120.67 685.248 L1121.23 685.248 L1121.79 685.248 L1122.35 685.248 L1122.91 685.248 L1123.47 685.248 L1124.03 685.248 L1124.59 685.248 L1125.14 685.248 L1125.7 685.248 L1126.26 685.248 L1126.82 685.248 L1127.38 685.248 L1127.94 685.248 L1128.5 685.248 L1129.06 685.248 L1129.62 685.248 L1130.18 685.248 L1130.74 685.248 L1131.3 685.248 L1131.86 685.248 L1132.41 685.248 L1132.97 685.248 L1133.53 685.248 L1134.09 685.248 L1134.65 685.248 L1135.21 685.248 L1135.77 685.248 L1136.33 685.248 L1136.89 685.248 L1137.45 685.248 L1138.01 685.248 L1138.57 685.248 L1139.13 685.248 L1139.68 685.248 L1140.24 685.248 L1140.8 685.248 L1141.36 685.248 L1141.92 685.248 L1142.48 685.248 L1143.04 685.248 L1143.6 685.248 L1144.16 685.248 L1144.72 685.248 L1145.28 685.248 L1145.84 685.248 L1146.4 685.248 L1146.96 685.248 L1147.51 685.248 L1148.07 685.248 L1148.63 685.248 L1149.19 685.248 L1149.75 685.248 L1150.31 685.248 L1150.87 685.248 L1151.43 685.248 L1151.99 685.248 L1152.55 685.248 L1153.11 685.248 L1153.67 685.248 L1154.23 685.248 L1154.78 685.248 L1155.34 685.248 L1155.9 685.248 L1156.46 685.248 L1157.02 685.248 L1157.58 685.248 L1158.14 685.248 L1158.7 685.248 L1159.26 685.248 L1159.82 685.248 L1160.38 685.248 L1160.94 685.248 L1161.5 685.248 L1162.05 685.248 L1162.61 685.248 L1163.17 685.248 L1163.73 685.248 L1164.29 685.248 L1164.85 685.248 L1165.41 685.248 L1165.97 685.248 L1166.53 685.248 L1167.09 685.248 L1167.65 685.248 L1168.21 685.248 L1168.77 685.248 L1169.33 685.248 L1169.88 685.248 L1170.44 685.248 L1171 685.248 L1171.56 685.248 L1172.12 685.248 L1172.68 685.248 L1173.24 685.248 L1173.8 685.248 L1174.36 685.248 L1174.92 685.248 L1175.48 685.248 L1176.04 685.248 L1176.6 685.248 L1177.15 685.248 L1177.71 685.248 L1178.27 685.248 L1178.83 685.248 L1179.39 685.248 L1179.95 685.248 L1180.51 685.248 L1181.07 685.248 L1181.63 685.248 L1182.19 685.248 L1182.75 685.248 L1183.31 685.248 L1183.87 685.248 L1184.43 685.248 L1184.98 685.248 L1185.54 685.248 L1186.1 685.248 L1186.66 685.248 L1187.22 685.248 L1187.78 685.248 L1188.34 685.248 L1188.9 685.248 L1189.46 685.248 L1190.02 685.248 L1190.58 685.248 L1191.14 685.248 L1191.7 685.248 L1192.25 685.248 L1192.81 685.248 L1193.37 685.248 L1193.93 685.248 L1194.49 685.248 L1195.05 685.248 L1195.61 685.248 L1196.17 685.248 L1196.73 685.248 L1197.29 685.248 L1197.85 685.248 L1198.41 685.248 L1198.97 685.248 L1199.52 685.248 L1200.08 685.248 L1200.64 685.248 L1201.2 685.248 L1201.76 685.248 L1202.32 685.248 L1202.88 685.248 L1203.44 685.248 L1204 685.248 L1204.56 685.248 L1205.12 685.248 L1205.68 685.248 L1206.24 685.248 L1206.8 685.248 L1207.35 685.248 L1207.91 685.248 L1208.47 685.248 L1209.03 685.248 L1209.59 685.248 L1210.15 685.248 L1210.71 685.248 L1211.27 685.248 L1211.83 685.248 L1212.39 685.248 L1212.95 685.248 L1213.51 685.248 L1214.07 685.248 L1214.62 685.248 L1215.18 685.248 L1215.74 685.248 L1216.3 685.248 L1216.86 685.248 L1217.42 685.248 L1217.98 685.248 L1218.54 685.248 L1219.1 685.248 L1219.66 685.248 L1220.22 685.248 L1220.78 685.248 L1221.34 685.248 L1221.89 685.248 L1222.45 685.248 L1223.01 685.248 L1223.57 685.248 L1224.13 685.248 L1224.69 685.248 L1225.25 685.248 L1225.81 685.248 L1226.37 685.248 L1226.93 685.248 L1227.49 685.248 L1228.05 685.248 L1228.61 685.248 L1229.17 685.248 L1229.72 685.248 L1230.28 685.248 L1230.84 685.248 L1231.4 685.248 L1231.96 685.248 L1232.52 685.248 L1233.08 685.248 L1233.64 685.248 L1234.2 685.248 L1234.76 685.248 L1235.32 685.248 L1235.88 685.248 L1236.44 685.248 L1236.99 685.248 L1237.55 685.248 L1238.11 685.248 L1238.67 685.248 L1239.23 685.248 L1239.79 685.248 L1240.35 685.248 L1240.91 685.248 L1241.47 685.248 L1242.03 685.248 L1242.59 685.248 L1243.15 685.248 L1243.71 685.248 L1244.26 685.248 L1244.82 685.248 L1245.38 685.248 L1245.94 685.248 L1246.5 685.248 L1247.06 685.248 L1247.62 685.248 L1248.18 685.248 L1248.74 685.248 L1249.3 685.248 L1249.86 685.248 L1250.42 685.248 L1250.98 685.248 L1251.54 685.248 L1252.09 685.248 L1252.65 685.248 L1253.21 685.248 L1253.77 685.248 L1254.33 685.248 L1254.89 685.248 L1255.45 685.248 L1256.01 685.248 L1256.57 685.248 L1257.13 685.248 L1257.69 685.248 L1258.25 685.248 L1258.81 685.248 L1259.36 685.248 L1259.92 685.248 L1260.48 685.248 L1261.04 685.248 L1261.6 685.248 L1262.16 685.248 L1262.72 685.248 L1263.28 685.248 L1263.84 685.248 L1264.4 685.248 L1264.96 685.248 L1265.52 685.248 L1266.08 685.248 L1266.63 685.248 L1267.19 685.248 L1267.75 685.248 L1268.31 685.248 L1268.87 685.248 L1269.43 685.248 L1269.99 685.248 L1270.55 685.248 L1271.11 685.248 L1271.67 685.248 L1272.23 685.248 L1272.79 685.248 L1273.35 685.248 L1273.91 685.248 L1274.46 685.248 L1275.02 685.248 L1275.58 685.248 L1276.14 685.248 L1276.7 685.248 L1277.26 685.248 L1277.82 685.248 L1278.38 685.248 L1278.94 685.248 L1279.5 685.248 L1280.06 685.248 L1280.62 685.248 L1281.18 685.248 L1281.73 685.248 L1282.29 685.248 L1282.85 685.248 L1283.41 685.248 L1283.97 685.248 L1284.53 685.248 L1285.09 685.248 L1285.65 685.248 L1286.21 685.248 L1286.77 685.248 L1287.33 685.248 L1287.89 685.248 L1288.45 685.248 L1289 685.248 L1289.56 685.248 L1290.12 685.248 L1290.68 685.248 L1291.24 685.248 L1291.8 685.248 L1292.36 685.248 L1292.92 685.248 L1293.48 685.248 L1294.04 685.248 L1294.6 685.248 L1295.16 685.248 L1295.72 685.248 L1296.28 685.248 L1296.83 685.248 L1297.39 685.248 L1297.95 685.248 L1298.51 685.248 L1299.07 685.248 L1299.63 685.248 L1300.19 685.248 L1300.75 685.248 L1301.31 685.248 L1301.87 685.248 L1302.43 685.248 L1302.99 685.248 L1303.55 685.248 L1304.1 685.248 L1304.66 685.248 L1305.22 685.248 L1305.78 685.248 L1306.34 685.248 L1306.9 685.248 L1307.46 685.248 L1308.02 685.248 L1308.58 685.248 L1309.14 685.248 L1309.7 685.248 L1310.26 685.248 L1310.82 685.248 L1311.38 685.248 L1311.93 685.248 L1312.49 685.248 L1313.05 685.248 L1313.61 685.248 L1314.17 685.248 L1314.73 685.248 L1315.29 685.248 L1315.85 685.248 L1316.41 685.248 L1316.97 685.248 L1317.53 685.248 L1318.09 685.248 L1318.65 685.248 L1319.2 685.248 L1319.76 685.248 L1320.32 685.248 L1320.88 685.248 L1321.44 685.248 L1322 685.248 L1322.56 685.248 L1323.12 685.248 L1323.68 685.248 L1324.24 685.248 L1324.8 685.248 L1325.36 685.248 L1325.92 685.248 L1326.47 685.248 L1327.03 685.248 L1327.59 685.248 L1328.15 685.248 L1328.71 685.248 L1329.27 685.248 L1329.83 685.248 L1330.39 685.248 L1330.95 685.248 L1331.51 685.248 L1332.07 685.248 L1332.63 685.248 L1333.19 685.248 L1333.75 685.248 L1334.3 685.248 L1334.86 685.248 L1335.42 685.248 L1335.98 685.248 L1336.54 685.248 L1337.1 685.248 L1337.66 685.248 L1338.22 685.248 L1338.78 685.248 L1339.34 685.248 L1339.9 685.248 L1340.46 685.248 L1341.02 685.248 L1341.57 685.248 L1342.13 685.248 L1342.69 685.248 L1343.25 685.248 L1343.81 685.248 L1344.37 685.248 L1344.93 685.248 L1345.49 685.248 L1346.05 685.248 L1346.61 685.248 L1347.17 685.248 L1347.73 685.248 L1348.29 685.248 L1348.84 685.248 L1349.4 685.248 L1349.96 685.248 L1350.52 685.248 L1351.08 685.248 L1351.64 685.248 L1352.2 685.248 L1352.76 685.248 L1353.32 685.248 L1353.88 685.248 L1354.44 685.248 L1355 685.248 L1355.56 685.248 L1356.12 685.248 L1356.67 685.248 L1357.23 685.248 L1357.79 685.248 L1358.35 685.248 L1358.91 685.248 L1359.47 685.248 L1360.03 685.248 L1360.59 685.248 L1361.15 685.248 L1361.71 685.248 L1362.27 685.248 L1362.83 685.248 L1363.39 685.248 L1363.94 685.248 L1364.5 685.248 L1365.06 685.248 L1365.62 685.248 L1366.18 685.248 L1366.74 685.248 L1367.3 685.248 L1367.86 685.248 L1368.42 685.248 L1368.98 685.248 L1369.54 685.248 L1370.1 685.248 L1370.66 685.248 L1371.21 685.248 L1371.77 685.248 L1372.33 685.248 L1372.89 685.248 L1373.45 685.248 L1374.01 685.248 L1374.57 685.248 L1375.13 685.248 L1375.69 685.248 L1376.25 685.248 L1376.81 685.248 L1377.37 685.248 L1377.93 685.248 L1378.49 685.248 L1379.04 685.248 L1379.6 685.248 L1380.16 685.248 L1380.72 685.248 L1381.28 685.248 L1381.84 685.248 L1382.4 685.248 L1382.96 685.248 L1383.52 685.248 L1384.08 685.248 L1384.64 685.248 L1385.2 685.248 L1385.76 685.248 L1386.31 685.248 L1386.87 685.248 L1387.43 685.248 L1387.99 685.248 L1388.55 685.248 L1389.11 685.248 L1389.67 685.248 L1390.23 685.248 L1390.79 685.248 L1391.35 685.248 L1391.91 685.248 L1392.47 685.248 L1393.03 685.248 L1393.58 685.248 L1394.14 685.248 L1394.7 685.248 L1395.26 685.248 L1395.82 685.248 L1396.38 685.248 L1396.94 685.248 L1397.5 685.248 L1398.06 685.248 L1398.62 685.248 L1399.18 685.248 L1399.74 685.248 L1400.3 685.248 L1400.86 685.248 L1401.41 685.248 L1401.97 685.248 L1402.53 685.248 L1403.09 685.248 L1403.65 685.248 L1404.21 685.248 L1404.77 685.248 L1405.33 685.248 L1405.89 685.248 L1406.45 685.248 L1407.01 685.248 L1407.57 685.248 L1408.13 685.248 L1408.68 685.248 L1409.24 685.248 L1409.8 685.248 L1410.36 685.248 L1410.92 685.248 L1411.48 685.248 L1412.04 685.248 L1412.6 685.248 L1413.16 685.248 L1413.72 685.248 L1414.28 685.248 L1414.84 685.248 L1415.4 685.248 L1415.95 685.248 L1416.51 685.248 L1417.07 685.248 L1417.63 685.248 L1418.19 685.248 L1418.75 685.248 L1419.31 685.248 L1419.87 685.248 L1420.43 685.248 L1420.99 685.248 L1421.55 685.248 L1422.11 685.248 L1422.67 685.248 L1423.23 685.248 L1423.78 685.248 L1424.34 685.248 L1424.9 685.248 L1425.46 685.248 L1426.02 685.248 L1426.58 685.248 L1427.14 685.248 L1427.7 685.248 L1428.26 685.248 L1428.82 685.248 L1429.38 685.248 L1429.94 685.248 L1430.5 685.248 L1431.05 685.248 L1431.61 685.248 L1432.17 685.248 L1432.73 685.248 L1433.29 685.248 L1433.85 685.248 L1434.41 685.248 L1434.97 685.248 L1435.53 685.248 L1436.09 685.248 L1436.65 685.248 L1437.21 685.248 L1437.77 685.248 L1438.33 685.248 L1438.88 685.248 L1439.44 685.248 L1440 685.248 L1440.56 685.248 L1441.12 685.248 L1441.68 685.248 L1442.24 685.248 L1442.8 685.248 L1443.36 685.248 L1443.92 685.248 L1444.48 685.248 L1445.04 685.248 L1445.6 685.248 L1446.15 685.248 L1446.71 685.248 L1447.27 685.248 L1447.83 685.248 L1448.39 685.248 L1448.95 685.248 L1449.51 685.248 L1450.07 685.248 L1450.63 685.248 L1451.19 685.248 L1451.75 685.248 L1452.31 685.248 L1452.87 685.248 L1453.42 685.248 L1453.98 685.248 L1454.54 685.248 L1455.1 685.248 L1455.66 685.248 L1456.22 685.248 L1456.78 685.248 L1457.34 685.248 L1457.9 685.248 L1458.46 685.248 L1459.02 685.248 L1459.58 685.248 L1460.14 685.248 L1460.7 685.248 L1461.25 685.248 L1461.81 685.248 L1462.37 685.248 L1462.93 685.248 L1463.49 685.248 L1464.05 685.248 L1464.61 685.248 L1465.17 685.248 L1465.73 685.248 L1466.29 685.248 L1466.85 685.248 L1467.41 685.248 L1467.97 685.248 L1468.52 685.248 L1469.08 685.248 L1469.64 685.248 L1470.2 685.248 L1470.76 685.248 L1471.32 685.248 L1471.88 685.248 L1472.44 685.248 L1473 685.248 L1473.56 685.248 L1474.12 685.248 L1474.68 685.248 L1475.24 685.248 L1475.79 685.248 L1476.35 685.248 L1476.91 685.248 L1477.47 685.248 L1478.03 685.248 L1478.59 685.248 L1479.15 685.248 L1479.71 685.248 L1480.27 685.248 L1480.83 685.248 L1481.39 685.248 L1481.95 685.248 L1482.51 685.248 L1483.07 685.248 L1483.62 685.248 L1484.18 685.248 L1484.74 685.248 L1485.3 685.248 L1485.86 685.248 L1486.42 685.248 L1486.98 685.248 L1487.54 685.248 L1488.1 685.248 L1488.66 685.248 L1489.22 685.248 L1489.78 685.248 L1490.34 685.248 L1490.89 685.248 L1491.45 685.248 L1492.01 685.248 L1492.57 685.248 L1493.13 685.248 L1493.69 685.248 L1494.25 685.248 L1494.81 685.248 L1495.37 685.248 L1495.93 685.248 L1496.49 685.248 L1497.05 685.248 L1497.61 685.248 L1498.16 685.248 L1498.72 685.248 L1499.28 685.248 L1499.84 685.248 L1500.4 685.248 L1500.96 685.248 L1501.52 685.248 L1502.08 685.248 L1502.64 685.248 L1503.2 685.248 L1503.76 685.248 L1504.32 685.248 L1504.88 685.248 L1505.44 685.248 L1505.99 685.248 L1506.55 685.248 L1507.11 685.248 L1507.67 685.248 L1508.23 685.248 L1508.79 685.248 L1509.35 685.248 L1509.91 685.248 L1510.47 685.248 L1511.03 685.248 L1511.59 685.248 L1512.15 685.248 L1512.71 685.248 L1513.26 685.248 L1513.82 685.248 L1514.38 685.248 L1514.94 685.248 L1515.5 685.248 L1516.06 685.248 L1516.62 685.248 L1517.18 685.248 L1517.74 685.248 L1518.3 685.248 L1518.86 685.248 L1519.42 685.248 L1519.98 685.248 L1520.53 685.248 L1521.09 685.248 L1521.65 685.248 L1522.21 685.248 L1522.77 685.248 L1523.33 685.248 L1523.89 685.248 L1524.45 685.248 L1525.01 685.248 L1525.57 685.248 L1526.13 685.248 L1526.69 685.248 L1527.25 685.248 L1527.81 685.248 L1528.36 685.248 L1528.92 685.248 L1529.48 685.248 L1530.04 685.248 L1530.6 685.248 L1531.16 685.248 L1531.72 685.248 L1532.28 685.248 L1532.84 685.248 L1533.4 685.248 L1533.96 685.248 L1534.52 685.248 L1535.08 685.248 L1535.63 685.248 L1536.19 685.248 L1536.75 685.248 L1537.31 685.248 L1537.87 685.248 L1538.43 685.248 L1538.99 685.248 L1539.55 685.248 L1540.11 685.248 L1540.67 685.248 L1541.23 685.248 L1541.79 685.248 L1542.35 685.248 L1542.9 685.248 L1543.46 685.248 L1544.02 685.248 L1544.58 685.248 L1545.14 685.248 L1545.7 685.248 L1546.26 685.248 L1546.82 685.248 L1547.38 685.248 L1547.94 685.248 L1548.5 685.248 L1549.06 685.248 L1549.62 685.248 L1550.18 685.248 L1550.73 685.248 L1551.29 685.248 L1551.85 685.248 L1552.41 685.248 L1552.97 685.248 L1553.53 685.248 L1554.09 685.248 L1554.65 685.248 L1555.21 685.248 L1555.77 685.248 L1556.33 685.248 L1556.89 685.248 L1557.45 685.248 L1558 685.248 L1558.56 685.248 L1559.12 685.248 L1559.68 685.248 L1560.24 685.248 L1560.8 685.248 L1561.36 685.248 L1561.92 685.248 L1562.48 685.248 L1563.04 685.248 L1563.6 685.248 L1564.16 685.248 L1564.72 685.248 L1565.28 685.248 L1565.83 685.248 L1566.39 685.248 L1566.95 685.248 L1567.51 685.248 L1568.07 685.248 L1568.63 685.248 L1569.19 685.248 L1569.75 685.248 L1570.31 685.248 L1570.87 685.248 L1571.43 685.248 L1571.99 685.248 L1572.55 685.248 L1573.1 685.248 L1573.66 685.248 L1574.22 685.248 L1574.78 685.248 L1575.34 685.248 L1575.9 685.248 L1576.46 685.248 L1577.02 685.248 L1577.58 685.248 L1578.14 685.248 L1578.7 685.248 L1579.26 685.248 L1579.82 685.248 L1580.37 685.248 L1580.93 685.248 L1581.49 685.248 L1582.05 685.248 L1582.61 685.248 L1583.17 685.248 L1583.73 685.248 L1584.29 685.248 L1584.85 685.248 L1585.41 685.248 L1585.97 685.248 L1586.53 685.248 L1587.09 685.248 L1587.65 685.248 L1588.2 685.248 L1588.76 685.248 L1589.32 685.248 L1589.88 685.248 L1590.44 685.248 L1591 685.248 L1591.56 685.248 L1592.12 685.248 L1592.68 685.248 L1593.24 685.248 L1593.8 685.248 L1594.36 685.248 L1594.92 685.248 L1595.47 685.248 L1596.03 685.248 L1596.59 685.248 L1597.15 685.248 L1597.71 685.248 L1598.27 685.248 L1598.83 685.248 L1599.39 685.248 L1599.95 685.248 L1600.51 685.248 L1601.07 685.248 L1601.63 685.248 L1602.19 685.248 L1602.74 685.248 L1603.3 685.248 L1603.86 685.248 L1604.42 685.248 L1604.98 685.248 L1605.54 685.248 L1606.1 685.248 L1606.66 685.248 L1607.22 685.248 L1607.78 685.248 L1608.34 685.248 L1608.9 685.248 L1609.46 685.248 L1610.02 685.248 L1610.57 685.248 L1611.13 685.248 L1611.69 685.248 L1612.25 685.248 L1612.81 685.248 L1613.37 685.248 L1613.93 685.248 L1614.49 685.248 L1615.05 685.248 L1615.61 685.248 L1616.17 685.248 L1616.73 685.248 L1617.29 685.248 L1617.84 685.248 L1618.4 685.248 L1618.96 685.248 L1619.52 685.248 L1620.08 685.248 L1620.64 685.248 L1621.2 685.248 L1621.76 685.248 L1622.32 685.248 L1622.88 685.248 L1623.44 685.248 L1624 685.248 L1624.56 685.248 L1625.11 685.248 L1625.67 685.248 L1626.23 685.248 L1626.79 685.248 L1627.35 685.248 L1627.91 685.248 L1628.47 685.248 L1629.03 685.248 L1629.59 685.248 L1630.15 685.248 L1630.71 685.248 L1631.27 685.248 L1631.83 685.248 L1632.39 685.248 L1632.94 685.248 L1633.5 685.248 L1634.06 685.248 L1634.62 685.248 L1635.18 685.248 L1635.74 685.248 L1636.3 685.248 L1636.86 685.248 L1637.42 685.248 L1637.98 685.248 L1638.54 685.248 L1639.1 685.248 L1639.66 685.248 L1640.21 685.248 L1640.77 685.248 L1641.33 685.248 L1641.89 685.248 L1642.45 685.248 L1643.01 685.248 L1643.57 685.248 L1644.13 685.248 L1644.69 685.248 L1645.25 685.248 L1645.81 685.248 L1646.37 685.248 L1646.93 685.248 L1647.48 685.248 L1648.04 685.248 L1648.6 685.248 L1649.16 685.248 L1649.72 685.248 L1650.28 685.248 L1650.84 685.248 L1651.4 685.248 L1651.96 685.248 L1652.52 685.248 L1653.08 685.248 L1653.64 685.248 L1654.2 685.248 L1654.76 685.248 L1655.31 685.248 L1655.87 685.248 L1656.43 685.248 L1656.99 685.248 L1657.55 685.248 L1658.11 685.248 L1658.67 685.248 L1659.23 685.248 L1659.79 685.248 L1660.35 685.248 L1660.91 685.248 L1661.47 685.248 L1662.03 685.248 L1662.58 685.248 L1663.14 685.248 L1663.7 685.248 L1664.26 685.248 L1664.82 685.248 L1665.38 685.248 L1665.94 685.248 L1666.5 685.248 L1667.06 685.248 L1667.62 685.248 L1668.18 685.248 L1668.74 685.248 L1669.3 685.248 L1669.85 685.248 L1670.41 685.248 L1670.97 685.248 L1671.53 685.248 L1672.09 685.248 L1672.65 685.248 L1673.21 685.248 L1673.77 685.248 L1674.33 685.248 L1674.89 685.248 L1675.45 685.248 L1676.01 685.248 L1676.57 685.248 L1677.13 685.248 L1677.68 685.248 L1678.24 685.248 L1678.8 685.248 L1679.36 685.248 L1679.92 685.248 L1680.48 685.248 L1681.04 685.248 L1681.6 685.248 L1682.16 685.248 L1682.72 685.248 L1683.28 685.248 L1683.84 685.248 L1684.4 685.248 L1684.95 685.248 L1685.51 685.248 L1686.07 685.248 L1686.63 685.248 L1687.19 685.248 L1687.75 685.248 L1688.31 685.248 L1688.87 685.248 L1689.43 685.248 L1689.99 685.248 L1690.55 685.248 L1691.11 685.248 L1691.67 685.248 L1692.23 685.248 L1692.78 685.248 L1693.34 685.248 L1693.9 685.248 L1694.46 685.248 L1695.02 685.248 L1695.58 685.248 L1696.14 685.248 L1696.7 685.248 L1697.26 685.248 L1697.82 685.248 L1698.38 685.248 L1698.94 685.248 L1699.5 685.248 L1700.05 685.248 L1700.61 685.248 L1701.17 685.248 L1701.73 685.248 L1702.29 685.248 L1702.85 685.248 L1703.41 685.248 L1703.97 685.248 L1704.53 685.248 L1705.09 685.248 L1705.65 685.248 L1706.21 685.248 L1706.77 685.248 L1707.32 685.248 L1707.88 685.248 L1708.44 685.248 L1709 685.248 L1709.56 685.248 L1710.12 685.248 L1710.68 685.248 L1711.24 685.248 L1711.8 685.248 L1712.36 685.248 L1712.92 685.248 L1713.48 685.248 L1714.04 685.248 L1714.6 685.248 L1715.15 685.248 L1715.71 685.248 L1716.27 685.248 L1716.83 685.248 L1717.39 685.248 L1717.95 685.248 L1718.51 685.248 L1719.07 685.248 L1719.63 685.248 L1720.19 685.248 L1720.75 685.248 L1721.31 685.248 L1721.87 685.248 L1722.42 685.248 L1722.98 685.248 L1723.54 685.248 L1724.1 685.248 L1724.66 685.248 L1725.22 685.248 L1725.78 685.248 L1726.34 685.248 L1726.9 685.248 L1727.46 685.248 L1728.02 685.248 L1728.58 685.248 L1729.14 685.248 L1729.69 685.248 L1730.25 685.248 L1730.81 685.248 L1731.37 685.248 L1731.93 685.248 L1732.49 685.248 L1733.05 685.248 L1733.61 685.248 L1734.17 685.248 L1734.73 685.248 L1735.29 685.248 L1735.85 685.248 L1736.41 685.248 L1736.97 685.248 L1737.52 685.248 L1738.08 685.248 L1738.64 685.248 L1739.2 685.248 L1739.76 685.248 L1740.32 685.248 L1740.88 685.248 L1741.44 685.248 L1742 685.248 L1742.56 685.248 L1743.12 685.248 L1743.68 685.248 L1744.24 685.248 L1744.79 685.248 L1745.35 685.248 L1745.91 685.248 L1746.47 685.248 L1747.03 685.248 L1747.59 685.248 L1748.15 685.248 L1748.71 685.248 L1749.27 685.248 L1749.83 685.248 L1750.39 685.248 L1750.95 685.248 L1751.51 685.248 L1752.06 685.248 L1752.62 685.248 L1753.18 685.248 L1753.74 685.248 L1754.3 685.248 L1754.86 685.248 L1755.42 685.248 L1755.98 685.248 L1756.54 685.248 L1757.1 685.248 L1757.66 685.248 L1758.22 685.248 L1758.78 685.248 L1759.34 685.248 L1759.89 685.248 L1760.45 685.248 L1761.01 685.248 L1761.57 685.248 L1762.13 685.248 L1762.69 685.248 L1763.25 685.248 L1763.81 685.248 L1764.37 685.248 L1764.93 685.248 L1765.49 685.248 L1766.05 685.248 L1766.61 685.248 L1767.16 685.248 L1767.72 685.248 L1768.28 685.248 L1768.84 685.248 L1769.4 685.248 L1769.96 685.248 L1770.52 685.248 L1771.08 685.248 L1771.64 685.248 L1772.2 685.248 L1772.76 685.248 L1773.32 685.248 L1773.88 685.248 L1774.43 685.248 L1774.99 685.248 L1775.55 685.248 L1776.11 685.248 L1776.67 685.248 L1777.23 685.248 L1777.79 685.248 L1778.35 685.248 L1778.91 685.248 L1779.47 685.248 L1780.03 685.248 L1780.59 685.248 L1781.15 685.248 L1781.71 685.248 L1782.26 685.248 L1782.82 685.248 L1783.38 685.248 L1783.94 685.248 L1784.5 685.248 L1785.06 685.248 L1785.62 685.248 L1786.18 685.248 L1786.74 685.248 L1787.3 685.248 L1787.86 685.248 L1788.42 685.248 L1788.98 685.248 L1789.53 685.248 L1790.09 685.248 L1790.65 685.248 L1791.21 685.248 L1791.77 685.248 L1792.33 685.248 L1792.89 685.248 L1793.45 685.248 L1794.01 685.248 L1794.57 685.248 L1795.13 685.248 L1795.69 685.248 L1796.25 685.248 L1796.8 685.248 L1797.36 685.248 L1797.92 685.248 L1798.48 685.248 L1799.04 685.248 L1799.6 685.248 L1800.16 685.248 L1800.72 685.248 L1801.28 685.248 L1801.84 685.248 L1802.4 685.248 L1802.96 685.248 L1803.52 685.248 L1804.08 685.248 L1804.63 685.248 L1805.19 685.248 L1805.75 685.248 L1806.31 685.248 L1806.87 685.248 L1807.43 685.248 L1807.99 685.248 L1808.55 685.248 L1809.11 685.248 L1809.67 685.248 L1810.23 685.248 L1810.79 685.248 L1811.35 685.248 L1811.9 685.248 L1812.46 685.248 L1813.02 685.248 L1813.58 685.248 L1814.14 685.248 L1814.7 685.248 L1815.26 685.248 L1815.82 685.248 L1816.38 685.248 L1816.94 685.248 L1817.5 685.248 L1818.06 685.248 L1818.62 685.248 L1819.18 685.248 L1819.73 685.248 L1820.29 685.248 L1820.85 685.248 L1821.41 685.248 L1821.97 685.248 L1822.53 685.248 L1823.09 685.248 L1823.65 685.248 L1824.21 685.248 L1824.77 685.248 L1825.33 685.248 L1825.89 685.248 L1826.45 685.248 L1827 685.248 L1827.56 685.248 L1828.12 685.248 L1828.68 685.248 L1829.24 685.248 L1829.8 685.248 L1830.36 685.248 L1830.92 685.248 L1831.48 685.248 L1832.04 685.248 L1832.6 685.248 L1833.16 685.248 L1833.72 685.248 L1834.27 685.248 L1834.83 685.248 L1835.39 685.248 L1835.95 685.248 L1836.51 685.248 L1837.07 685.248 L1837.63 685.248 L1838.19 685.248 L1838.19 683.427 L1837.63 683.427 L1837.07 683.427 L1836.51 683.427 L1835.95 683.427 L1835.39 683.427 L1834.83 683.427 L1834.27 683.427 L1833.72 683.427 L1833.16 683.427 L1832.6 683.427 L1832.04 683.427 L1831.48 683.427 L1830.92 683.427 L1830.36 683.427 L1829.8 683.427 L1829.24 683.427 L1828.68 683.427 L1828.12 683.427 L1827.56 683.427 L1827 683.427 L1826.45 683.427 L1825.89 683.427 L1825.33 683.427 L1824.77 683.427 L1824.21 683.427 L1823.65 683.427 L1823.09 683.427 L1822.53 683.427 L1821.97 683.427 L1821.41 683.427 L1820.85 683.427 L1820.29 683.427 L1819.73 683.427 L1819.18 683.427 L1818.62 683.427 L1818.06 683.427 L1817.5 683.427 L1816.94 683.427 L1816.38 683.427 L1815.82 683.427 L1815.26 683.427 L1814.7 683.427 L1814.14 683.427 L1813.58 683.427 L1813.02 683.427 L1812.46 683.427 L1811.9 683.427 L1811.35 683.427 L1810.79 683.427 L1810.23 683.427 L1809.67 683.427 L1809.11 683.427 L1808.55 683.427 L1807.99 683.427 L1807.43 683.427 L1806.87 683.427 L1806.31 683.427 L1805.75 683.427 L1805.19 683.427 L1804.63 683.427 L1804.08 683.427 L1803.52 683.427 L1802.96 683.427 L1802.4 683.427 L1801.84 683.427 L1801.28 683.427 L1800.72 683.427 L1800.16 683.427 L1799.6 683.427 L1799.04 683.427 L1798.48 683.427 L1797.92 683.427 L1797.36 683.427 L1796.8 683.427 L1796.25 683.427 L1795.69 683.427 L1795.13 683.427 L1794.57 683.427 L1794.01 683.427 L1793.45 683.427 L1792.89 683.427 L1792.33 683.427 L1791.77 683.427 L1791.21 683.427 L1790.65 683.427 L1790.09 683.427 L1789.53 683.427 L1788.98 683.427 L1788.42 683.427 L1787.86 683.427 L1787.3 683.427 L1786.74 683.427 L1786.18 683.427 L1785.62 683.427 L1785.06 683.427 L1784.5 683.427 L1783.94 683.427 L1783.38 683.427 L1782.82 683.427 L1782.26 683.427 L1781.71 683.427 L1781.15 683.427 L1780.59 683.427 L1780.03 683.427 L1779.47 683.427 L1778.91 683.427 L1778.35 683.427 L1777.79 683.427 L1777.23 683.427 L1776.67 683.427 L1776.11 683.427 L1775.55 683.427 L1774.99 683.427 L1774.43 683.427 L1773.88 683.427 L1773.32 683.427 L1772.76 683.427 L1772.2 683.427 L1771.64 683.427 L1771.08 683.427 L1770.52 683.427 L1769.96 683.427 L1769.4 683.427 L1768.84 683.427 L1768.28 683.427 L1767.72 683.427 L1767.16 683.427 L1766.61 683.427 L1766.05 683.427 L1765.49 683.427 L1764.93 683.427 L1764.37 683.427 L1763.81 683.427 L1763.25 683.427 L1762.69 683.427 L1762.13 683.427 L1761.57 683.427 L1761.01 683.427 L1760.45 683.427 L1759.89 683.427 L1759.34 683.427 L1758.78 683.427 L1758.22 683.427 L1757.66 683.427 L1757.1 683.427 L1756.54 683.427 L1755.98 683.427 L1755.42 683.427 L1754.86 683.427 L1754.3 683.427 L1753.74 683.427 L1753.18 683.427 L1752.62 683.427 L1752.06 683.427 L1751.51 683.427 L1750.95 683.427 L1750.39 683.427 L1749.83 683.427 L1749.27 683.427 L1748.71 683.427 L1748.15 683.427 L1747.59 683.427 L1747.03 683.427 L1746.47 683.427 L1745.91 683.427 L1745.35 683.427 L1744.79 683.427 L1744.24 683.427 L1743.68 683.427 L1743.12 683.427 L1742.56 683.427 L1742 683.427 L1741.44 683.427 L1740.88 683.427 L1740.32 683.427 L1739.76 683.427 L1739.2 683.427 L1738.64 683.427 L1738.08 683.427 L1737.52 683.427 L1736.97 683.427 L1736.41 683.427 L1735.85 683.427 L1735.29 683.427 L1734.73 683.427 L1734.17 683.427 L1733.61 683.427 L1733.05 683.427 L1732.49 683.427 L1731.93 683.427 L1731.37 683.427 L1730.81 683.427 L1730.25 683.427 L1729.69 683.427 L1729.14 683.427 L1728.58 683.427 L1728.02 683.427 L1727.46 683.427 L1726.9 683.427 L1726.34 683.427 L1725.78 683.427 L1725.22 683.427 L1724.66 683.427 L1724.1 683.427 L1723.54 683.427 L1722.98 683.427 L1722.42 683.427 L1721.87 683.427 L1721.31 683.427 L1720.75 683.427 L1720.19 683.427 L1719.63 683.427 L1719.07 683.427 L1718.51 683.427 L1717.95 683.427 L1717.39 683.427 L1716.83 683.427 L1716.27 683.427 L1715.71 683.427 L1715.15 683.427 L1714.6 683.427 L1714.04 683.427 L1713.48 683.427 L1712.92 683.427 L1712.36 683.427 L1711.8 683.427 L1711.24 683.427 L1710.68 683.427 L1710.12 683.427 L1709.56 683.427 L1709 683.427 L1708.44 683.427 L1707.88 683.427 L1707.32 683.427 L1706.77 683.427 L1706.21 683.427 L1705.65 683.427 L1705.09 683.427 L1704.53 683.427 L1703.97 683.427 L1703.41 683.427 L1702.85 683.427 L1702.29 683.427 L1701.73 683.427 L1701.17 683.427 L1700.61 683.427 L1700.05 683.427 L1699.5 683.427 L1698.94 683.427 L1698.38 683.427 L1697.82 683.427 L1697.26 683.427 L1696.7 683.427 L1696.14 683.427 L1695.58 683.427 L1695.02 683.427 L1694.46 683.427 L1693.9 683.427 L1693.34 683.427 L1692.78 683.427 L1692.23 683.427 L1691.67 683.427 L1691.11 683.427 L1690.55 683.427 L1689.99 683.427 L1689.43 683.427 L1688.87 683.427 L1688.31 683.427 L1687.75 683.427 L1687.19 683.427 L1686.63 683.427 L1686.07 683.427 L1685.51 683.427 L1684.95 683.427 L1684.4 683.427 L1683.84 683.427 L1683.28 683.427 L1682.72 683.427 L1682.16 683.427 L1681.6 683.427 L1681.04 683.427 L1680.48 683.427 L1679.92 683.427 L1679.36 683.427 L1678.8 683.427 L1678.24 683.427 L1677.68 683.427 L1677.13 683.427 L1676.57 683.427 L1676.01 683.427 L1675.45 683.427 L1674.89 683.427 L1674.33 683.427 L1673.77 683.427 L1673.21 683.427 L1672.65 683.427 L1672.09 683.427 L1671.53 683.427 L1670.97 683.427 L1670.41 683.427 L1669.85 683.427 L1669.3 683.427 L1668.74 683.427 L1668.18 683.427 L1667.62 683.427 L1667.06 683.427 L1666.5 683.427 L1665.94 683.427 L1665.38 683.427 L1664.82 683.427 L1664.26 683.427 L1663.7 683.427 L1663.14 683.427 L1662.58 683.427 L1662.03 683.427 L1661.47 683.427 L1660.91 683.427 L1660.35 683.427 L1659.79 683.427 L1659.23 683.427 L1658.67 683.427 L1658.11 683.427 L1657.55 683.427 L1656.99 683.427 L1656.43 683.427 L1655.87 683.427 L1655.31 683.427 L1654.76 683.427 L1654.2 683.427 L1653.64 683.427 L1653.08 683.427 L1652.52 683.427 L1651.96 683.427 L1651.4 683.427 L1650.84 683.427 L1650.28 683.427 L1649.72 683.427 L1649.16 683.427 L1648.6 683.427 L1648.04 683.427 L1647.48 683.427 L1646.93 683.427 L1646.37 683.427 L1645.81 683.427 L1645.25 683.427 L1644.69 683.427 L1644.13 683.427 L1643.57 683.427 L1643.01 683.427 L1642.45 683.427 L1641.89 683.427 L1641.33 683.427 L1640.77 683.427 L1640.21 683.427 L1639.66 683.427 L1639.1 683.427 L1638.54 683.427 L1637.98 683.427 L1637.42 683.427 L1636.86 683.427 L1636.3 683.427 L1635.74 683.427 L1635.18 683.427 L1634.62 683.427 L1634.06 683.427 L1633.5 683.427 L1632.94 683.427 L1632.39 683.427 L1631.83 683.427 L1631.27 683.427 L1630.71 683.427 L1630.15 683.427 L1629.59 683.427 L1629.03 683.427 L1628.47 683.427 L1627.91 683.427 L1627.35 683.427 L1626.79 683.427 L1626.23 683.427 L1625.67 683.427 L1625.11 683.427 L1624.56 683.427 L1624 683.427 L1623.44 683.427 L1622.88 683.427 L1622.32 683.427 L1621.76 683.427 L1621.2 683.427 L1620.64 683.427 L1620.08 683.427 L1619.52 683.427 L1618.96 683.427 L1618.4 683.427 L1617.84 683.427 L1617.29 683.427 L1616.73 683.427 L1616.17 683.427 L1615.61 683.427 L1615.05 683.427 L1614.49 683.427 L1613.93 683.427 L1613.37 683.427 L1612.81 683.427 L1612.25 683.427 L1611.69 683.427 L1611.13 683.427 L1610.57 683.427 L1610.02 683.427 L1609.46 683.427 L1608.9 683.427 L1608.34 683.427 L1607.78 683.427 L1607.22 683.427 L1606.66 683.427 L1606.1 683.427 L1605.54 683.427 L1604.98 683.427 L1604.42 683.427 L1603.86 683.427 L1603.3 683.427 L1602.74 683.427 L1602.19 683.427 L1601.63 683.427 L1601.07 683.427 L1600.51 683.427 L1599.95 683.427 L1599.39 683.427 L1598.83 683.427 L1598.27 683.427 L1597.71 683.427 L1597.15 683.427 L1596.59 683.427 L1596.03 683.427 L1595.47 683.427 L1594.92 683.427 L1594.36 683.427 L1593.8 683.427 L1593.24 683.427 L1592.68 683.427 L1592.12 683.427 L1591.56 683.427 L1591 683.427 L1590.44 683.427 L1589.88 683.427 L1589.32 683.427 L1588.76 683.427 L1588.2 683.427 L1587.65 683.427 L1587.09 683.427 L1586.53 683.427 L1585.97 683.427 L1585.41 683.427 L1584.85 683.427 L1584.29 683.427 L1583.73 683.427 L1583.17 683.427 L1582.61 683.427 L1582.05 683.427 L1581.49 683.427 L1580.93 683.427 L1580.37 683.427 L1579.82 683.427 L1579.26 683.427 L1578.7 683.427 L1578.14 683.427 L1577.58 683.427 L1577.02 683.427 L1576.46 683.427 L1575.9 683.427 L1575.34 683.427 L1574.78 683.427 L1574.22 683.427 L1573.66 683.427 L1573.1 683.427 L1572.55 683.427 L1571.99 683.427 L1571.43 683.427 L1570.87 683.427 L1570.31 683.427 L1569.75 683.427 L1569.19 683.427 L1568.63 683.427 L1568.07 683.427 L1567.51 683.427 L1566.95 683.427 L1566.39 683.427 L1565.83 683.427 L1565.28 683.427 L1564.72 683.427 L1564.16 683.427 L1563.6 683.427 L1563.04 683.427 L1562.48 683.427 L1561.92 683.427 L1561.36 683.427 L1560.8 683.427 L1560.24 683.427 L1559.68 683.427 L1559.12 683.427 L1558.56 683.427 L1558 683.427 L1557.45 683.427 L1556.89 683.427 L1556.33 683.427 L1555.77 683.427 L1555.21 683.427 L1554.65 683.427 L1554.09 683.427 L1553.53 683.427 L1552.97 683.427 L1552.41 683.427 L1551.85 683.427 L1551.29 683.427 L1550.73 683.427 L1550.18 683.427 L1549.62 683.427 L1549.06 683.427 L1548.5 683.427 L1547.94 683.427 L1547.38 683.427 L1546.82 683.427 L1546.26 683.427 L1545.7 683.427 L1545.14 683.427 L1544.58 683.427 L1544.02 683.427 L1543.46 683.427 L1542.9 683.427 L1542.35 683.427 L1541.79 683.427 L1541.23 683.427 L1540.67 683.427 L1540.11 683.427 L1539.55 683.427 L1538.99 683.427 L1538.43 683.427 L1537.87 683.427 L1537.31 683.427 L1536.75 683.427 L1536.19 683.427 L1535.63 683.427 L1535.08 683.427 L1534.52 683.427 L1533.96 683.427 L1533.4 683.427 L1532.84 683.427 L1532.28 683.427 L1531.72 683.427 L1531.16 683.427 L1530.6 683.427 L1530.04 683.427 L1529.48 683.427 L1528.92 683.427 L1528.36 683.427 L1527.81 683.427 L1527.25 683.427 L1526.69 683.427 L1526.13 683.427 L1525.57 683.427 L1525.01 683.427 L1524.45 683.427 L1523.89 683.427 L1523.33 683.427 L1522.77 683.427 L1522.21 683.427 L1521.65 683.427 L1521.09 683.427 L1520.53 683.427 L1519.98 683.427 L1519.42 683.427 L1518.86 683.427 L1518.3 683.427 L1517.74 683.427 L1517.18 683.427 L1516.62 683.427 L1516.06 683.427 L1515.5 683.427 L1514.94 683.427 L1514.38 683.427 L1513.82 683.427 L1513.26 683.427 L1512.71 683.427 L1512.15 683.427 L1511.59 683.427 L1511.03 683.427 L1510.47 683.427 L1509.91 683.427 L1509.35 683.427 L1508.79 683.427 L1508.23 683.427 L1507.67 683.427 L1507.11 683.427 L1506.55 683.427 L1505.99 683.427 L1505.44 683.427 L1504.88 683.427 L1504.32 683.427 L1503.76 683.427 L1503.2 683.427 L1502.64 683.427 L1502.08 683.427 L1501.52 683.427 L1500.96 683.427 L1500.4 683.427 L1499.84 683.427 L1499.28 683.427 L1498.72 683.427 L1498.16 683.427 L1497.61 683.427 L1497.05 683.427 L1496.49 683.427 L1495.93 683.427 L1495.37 683.427 L1494.81 683.427 L1494.25 683.427 L1493.69 683.427 L1493.13 683.427 L1492.57 683.427 L1492.01 683.427 L1491.45 683.427 L1490.89 683.427 L1490.34 683.427 L1489.78 683.427 L1489.22 683.427 L1488.66 683.427 L1488.1 683.427 L1487.54 683.427 L1486.98 683.427 L1486.42 683.427 L1485.86 683.427 L1485.3 683.427 L1484.74 683.427 L1484.18 683.427 L1483.62 683.427 L1483.07 683.427 L1482.51 683.427 L1481.95 683.427 L1481.39 683.427 L1480.83 683.427 L1480.27 683.427 L1479.71 683.427 L1479.15 683.427 L1478.59 683.427 L1478.03 683.427 L1477.47 683.427 L1476.91 683.427 L1476.35 683.427 L1475.79 683.427 L1475.24 683.427 L1474.68 683.427 L1474.12 683.427 L1473.56 683.427 L1473 683.427 L1472.44 683.427 L1471.88 683.427 L1471.32 683.427 L1470.76 683.427 L1470.2 683.427 L1469.64 683.427 L1469.08 683.427 L1468.52 683.427 L1467.97 683.427 L1467.41 683.427 L1466.85 683.427 L1466.29 683.427 L1465.73 683.427 L1465.17 683.427 L1464.61 683.427 L1464.05 683.427 L1463.49 683.427 L1462.93 683.427 L1462.37 683.427 L1461.81 683.427 L1461.25 683.427 L1460.7 683.427 L1460.14 683.427 L1459.58 683.427 L1459.02 683.427 L1458.46 683.427 L1457.9 683.427 L1457.34 683.427 L1456.78 683.427 L1456.22 683.427 L1455.66 683.427 L1455.1 683.427 L1454.54 683.427 L1453.98 683.427 L1453.42 683.427 L1452.87 683.427 L1452.31 683.427 L1451.75 683.427 L1451.19 683.427 L1450.63 683.427 L1450.07 683.427 L1449.51 683.427 L1448.95 683.427 L1448.39 683.427 L1447.83 683.427 L1447.27 683.427 L1446.71 683.427 L1446.15 683.427 L1445.6 683.427 L1445.04 683.427 L1444.48 683.427 L1443.92 683.427 L1443.36 683.427 L1442.8 683.427 L1442.24 683.427 L1441.68 683.427 L1441.12 683.427 L1440.56 683.427 L1440 683.427 L1439.44 683.427 L1438.88 683.427 L1438.33 683.427 L1437.77 683.427 L1437.21 683.427 L1436.65 683.427 L1436.09 683.427 L1435.53 683.427 L1434.97 683.427 L1434.41 683.427 L1433.85 683.427 L1433.29 683.427 L1432.73 683.427 L1432.17 683.427 L1431.61 683.427 L1431.05 683.427 L1430.5 683.427 L1429.94 683.427 L1429.38 683.427 L1428.82 683.427 L1428.26 683.427 L1427.7 683.427 L1427.14 683.427 L1426.58 683.427 L1426.02 683.427 L1425.46 683.427 L1424.9 683.427 L1424.34 683.427 L1423.78 683.427 L1423.23 683.427 L1422.67 683.427 L1422.11 683.427 L1421.55 683.427 L1420.99 683.427 L1420.43 683.427 L1419.87 683.427 L1419.31 683.427 L1418.75 683.427 L1418.19 683.427 L1417.63 683.427 L1417.07 683.427 L1416.51 683.427 L1415.95 683.427 L1415.4 683.427 L1414.84 683.427 L1414.28 683.427 L1413.72 683.427 L1413.16 683.427 L1412.6 683.427 L1412.04 683.427 L1411.48 683.427 L1410.92 683.427 L1410.36 683.427 L1409.8 683.427 L1409.24 683.427 L1408.68 683.427 L1408.13 683.427 L1407.57 683.427 L1407.01 683.427 L1406.45 683.427 L1405.89 683.427 L1405.33 683.427 L1404.77 683.427 L1404.21 683.427 L1403.65 683.427 L1403.09 683.427 L1402.53 683.427 L1401.97 683.427 L1401.41 683.427 L1400.86 683.427 L1400.3 683.427 L1399.74 683.427 L1399.18 683.427 L1398.62 683.427 L1398.06 683.427 L1397.5 683.427 L1396.94 683.427 L1396.38 683.427 L1395.82 683.427 L1395.26 683.427 L1394.7 683.427 L1394.14 683.427 L1393.58 683.427 L1393.03 683.427 L1392.47 683.427 L1391.91 683.427 L1391.35 683.427 L1390.79 683.427 L1390.23 683.427 L1389.67 683.427 L1389.11 683.427 L1388.55 683.427 L1387.99 683.427 L1387.43 683.427 L1386.87 683.427 L1386.31 683.427 L1385.76 683.427 L1385.2 683.427 L1384.64 683.427 L1384.08 683.427 L1383.52 683.427 L1382.96 683.427 L1382.4 683.427 L1381.84 683.427 L1381.28 683.427 L1380.72 683.427 L1380.16 683.427 L1379.6 683.427 L1379.04 683.427 L1378.49 683.427 L1377.93 683.427 L1377.37 683.427 L1376.81 683.427 L1376.25 683.427 L1375.69 683.427 L1375.13 683.427 L1374.57 683.427 L1374.01 683.427 L1373.45 683.427 L1372.89 683.427 L1372.33 683.427 L1371.77 683.427 L1371.21 683.427 L1370.66 683.427 L1370.1 683.427 L1369.54 683.427 L1368.98 683.427 L1368.42 683.427 L1367.86 683.427 L1367.3 683.427 L1366.74 683.427 L1366.18 683.427 L1365.62 683.427 L1365.06 683.427 L1364.5 683.427 L1363.94 683.427 L1363.39 683.427 L1362.83 683.427 L1362.27 683.427 L1361.71 683.427 L1361.15 683.427 L1360.59 683.427 L1360.03 683.427 L1359.47 683.427 L1358.91 683.427 L1358.35 683.427 L1357.79 683.427 L1357.23 683.427 L1356.67 683.427 L1356.12 683.427 L1355.56 683.427 L1355 683.427 L1354.44 683.427 L1353.88 683.427 L1353.32 683.427 L1352.76 683.427 L1352.2 683.427 L1351.64 683.427 L1351.08 683.427 L1350.52 683.427 L1349.96 683.427 L1349.4 683.427 L1348.84 683.427 L1348.29 683.427 L1347.73 683.427 L1347.17 683.427 L1346.61 683.427 L1346.05 683.427 L1345.49 683.427 L1344.93 683.427 L1344.37 683.427 L1343.81 683.427 L1343.25 683.427 L1342.69 683.427 L1342.13 683.427 L1341.57 683.427 L1341.02 683.427 L1340.46 683.427 L1339.9 683.427 L1339.34 683.427 L1338.78 683.427 L1338.22 683.427 L1337.66 683.427 L1337.1 683.427 L1336.54 683.427 L1335.98 683.427 L1335.42 683.427 L1334.86 683.427 L1334.3 683.427 L1333.75 683.427 L1333.19 683.427 L1332.63 683.427 L1332.07 683.427 L1331.51 683.427 L1330.95 683.427 L1330.39 683.427 L1329.83 683.427 L1329.27 683.427 L1328.71 683.427 L1328.15 683.427 L1327.59 683.427 L1327.03 683.427 L1326.47 683.427 L1325.92 683.427 L1325.36 683.427 L1324.8 683.427 L1324.24 683.427 L1323.68 683.427 L1323.12 683.427 L1322.56 683.427 L1322 683.427 L1321.44 683.427 L1320.88 683.427 L1320.32 683.427 L1319.76 683.427 L1319.2 683.427 L1318.65 683.427 L1318.09 683.427 L1317.53 683.427 L1316.97 683.427 L1316.41 683.427 L1315.85 683.427 L1315.29 683.427 L1314.73 683.427 L1314.17 683.427 L1313.61 683.427 L1313.05 683.427 L1312.49 683.427 L1311.93 683.427 L1311.38 683.427 L1310.82 683.427 L1310.26 683.427 L1309.7 683.427 L1309.14 683.427 L1308.58 683.427 L1308.02 683.427 L1307.46 683.427 L1306.9 683.427 L1306.34 683.427 L1305.78 683.427 L1305.22 683.427 L1304.66 683.427 L1304.1 683.427 L1303.55 683.427 L1302.99 683.427 L1302.43 683.427 L1301.87 683.427 L1301.31 683.427 L1300.75 683.427 L1300.19 683.427 L1299.63 683.427 L1299.07 683.427 L1298.51 683.427 L1297.95 683.427 L1297.39 683.427 L1296.83 683.427 L1296.28 683.427 L1295.72 683.427 L1295.16 683.427 L1294.6 683.427 L1294.04 683.427 L1293.48 683.427 L1292.92 683.427 L1292.36 683.427 L1291.8 683.427 L1291.24 683.427 L1290.68 683.427 L1290.12 683.427 L1289.56 683.427 L1289 683.427 L1288.45 683.427 L1287.89 683.427 L1287.33 683.427 L1286.77 683.427 L1286.21 683.427 L1285.65 683.427 L1285.09 683.427 L1284.53 683.427 L1283.97 683.427 L1283.41 683.427 L1282.85 683.427 L1282.29 683.427 L1281.73 683.427 L1281.18 683.427 L1280.62 683.427 L1280.06 683.427 L1279.5 683.427 L1278.94 683.427 L1278.38 683.427 L1277.82 683.427 L1277.26 683.427 L1276.7 683.427 L1276.14 683.427 L1275.58 683.427 L1275.02 683.427 L1274.46 683.427 L1273.91 683.427 L1273.35 683.427 L1272.79 683.427 L1272.23 683.427 L1271.67 683.427 L1271.11 683.427 L1270.55 683.427 L1269.99 683.427 L1269.43 683.427 L1268.87 683.427 L1268.31 683.427 L1267.75 683.427 L1267.19 683.427 L1266.63 683.427 L1266.08 683.427 L1265.52 683.427 L1264.96 683.427 L1264.4 683.427 L1263.84 683.427 L1263.28 683.427 L1262.72 683.427 L1262.16 683.427 L1261.6 683.427 L1261.04 683.427 L1260.48 683.427 L1259.92 683.427 L1259.36 683.427 L1258.81 683.427 L1258.25 683.427 L1257.69 683.427 L1257.13 683.427 L1256.57 683.427 L1256.01 683.427 L1255.45 683.427 L1254.89 683.427 L1254.33 683.427 L1253.77 683.427 L1253.21 683.427 L1252.65 683.427 L1252.09 683.427 L1251.54 683.427 L1250.98 683.427 L1250.42 683.427 L1249.86 683.427 L1249.3 683.427 L1248.74 683.427 L1248.18 683.427 L1247.62 683.427 L1247.06 683.427 L1246.5 683.427 L1245.94 683.427 L1245.38 683.427 L1244.82 683.427 L1244.26 683.427 L1243.71 683.427 L1243.15 683.427 L1242.59 683.427 L1242.03 683.427 L1241.47 683.427 L1240.91 683.427 L1240.35 683.427 L1239.79 683.427 L1239.23 683.427 L1238.67 683.427 L1238.11 683.427 L1237.55 683.427 L1236.99 683.427 L1236.44 683.427 L1235.88 683.427 L1235.32 683.427 L1234.76 683.427 L1234.2 683.427 L1233.64 683.427 L1233.08 683.427 L1232.52 683.427 L1231.96 683.427 L1231.4 683.427 L1230.84 683.427 L1230.28 683.427 L1229.72 683.427 L1229.17 683.427 L1228.61 683.427 L1228.05 683.427 L1227.49 683.427 L1226.93 683.427 L1226.37 683.427 L1225.81 683.427 L1225.25 683.427 L1224.69 683.427 L1224.13 683.427 L1223.57 683.427 L1223.01 683.427 L1222.45 683.427 L1221.89 683.427 L1221.34 683.427 L1220.78 683.427 L1220.22 683.427 L1219.66 683.427 L1219.1 683.427 L1218.54 683.427 L1217.98 683.427 L1217.42 683.427 L1216.86 683.427 L1216.3 683.427 L1215.74 683.427 L1215.18 683.427 L1214.62 683.427 L1214.07 683.427 L1213.51 683.427 L1212.95 683.427 L1212.39 683.427 L1211.83 683.427 L1211.27 683.427 L1210.71 683.427 L1210.15 683.427 L1209.59 683.427 L1209.03 683.427 L1208.47 683.427 L1207.91 683.427 L1207.35 683.427 L1206.8 683.427 L1206.24 683.427 L1205.68 683.427 L1205.12 683.427 L1204.56 683.427 L1204 683.427 L1203.44 683.427 L1202.88 683.427 L1202.32 683.427 L1201.76 683.427 L1201.2 683.427 L1200.64 683.427 L1200.08 683.427 L1199.52 683.427 L1198.97 683.427 L1198.41 683.427 L1197.85 683.427 L1197.29 683.427 L1196.73 683.427 L1196.17 683.427 L1195.61 683.427 L1195.05 683.427 L1194.49 683.427 L1193.93 683.427 L1193.37 683.427 L1192.81 683.427 L1192.25 683.427 L1191.7 683.427 L1191.14 683.427 L1190.58 683.427 L1190.02 683.427 L1189.46 683.427 L1188.9 683.427 L1188.34 683.427 L1187.78 683.427 L1187.22 683.427 L1186.66 683.427 L1186.1 683.427 L1185.54 683.427 L1184.98 683.427 L1184.43 683.427 L1183.87 683.427 L1183.31 683.427 L1182.75 683.427 L1182.19 683.427 L1181.63 683.427 L1181.07 683.427 L1180.51 683.427 L1179.95 683.427 L1179.39 683.427 L1178.83 683.427 L1178.27 683.427 L1177.71 683.427 L1177.15 683.427 L1176.6 683.427 L1176.04 683.427 L1175.48 683.427 L1174.92 683.427 L1174.36 683.427 L1173.8 683.427 L1173.24 683.427 L1172.68 683.427 L1172.12 683.427 L1171.56 683.427 L1171 683.427 L1170.44 683.427 L1169.88 683.427 L1169.33 683.427 L1168.77 683.427 L1168.21 683.427 L1167.65 683.427 L1167.09 683.427 L1166.53 683.427 L1165.97 683.427 L1165.41 683.427 L1164.85 683.427 L1164.29 683.427 L1163.73 683.427 L1163.17 683.427 L1162.61 683.427 L1162.05 683.427 L1161.5 683.427 L1160.94 683.427 L1160.38 683.427 L1159.82 683.427 L1159.26 683.427 L1158.7 683.427 L1158.14 683.427 L1157.58 683.427 L1157.02 683.427 L1156.46 683.427 L1155.9 683.427 L1155.34 683.427 L1154.78 683.427 L1154.23 683.427 L1153.67 683.427 L1153.11 683.427 L1152.55 683.427 L1151.99 683.427 L1151.43 683.427 L1150.87 683.427 L1150.31 683.427 L1149.75 683.427 L1149.19 683.427 L1148.63 683.427 L1148.07 683.427 L1147.51 683.427 L1146.96 683.427 L1146.4 683.427 L1145.84 683.427 L1145.28 683.427 L1144.72 683.427 L1144.16 683.427 L1143.6 683.427 L1143.04 683.427 L1142.48 683.427 L1141.92 683.427 L1141.36 683.427 L1140.8 683.427 L1140.24 683.427 L1139.68 683.427 L1139.13 683.427 L1138.57 683.427 L1138.01 683.427 L1137.45 683.427 L1136.89 683.427 L1136.33 683.427 L1135.77 683.427 L1135.21 683.427 L1134.65 683.427 L1134.09 683.427 L1133.53 683.427 L1132.97 683.427 L1132.41 683.427 L1131.86 683.427 L1131.3 683.427 L1130.74 683.427 L1130.18 683.427 L1129.62 683.427 L1129.06 683.427 L1128.5 683.427 L1127.94 683.427 L1127.38 683.427 L1126.82 683.427 L1126.26 683.427 L1125.7 683.427 L1125.14 683.427 L1124.59 683.427 L1124.03 683.427 L1123.47 683.427 L1122.91 683.427 L1122.35 683.427 L1121.79 683.427 L1121.23 683.427 L1120.67 683.427 L1120.11 683.427 L1119.55 683.427 L1118.99 683.427 L1118.43 683.427 L1117.87 683.427 L1117.31 683.427 L1116.76 683.427 L1116.2 683.427 L1115.64 683.427 L1115.08 683.427 L1114.52 683.427 L1113.96 683.427 L1113.4 683.427 L1112.84 683.427 L1112.28 683.427 L1111.72 683.427 L1111.16 683.427 L1110.6 683.427 L1110.04 683.427 L1109.49 683.427 L1108.93 683.427 L1108.37 683.427 L1107.81 683.427 L1107.25 683.427 L1106.69 683.427 L1106.13 683.427 L1105.57 683.427 L1105.01 683.427 L1104.45 683.427 L1103.89 683.427 L1103.33 683.427 L1102.77 683.427 L1102.22 683.427 L1101.66 683.427 L1101.1 683.427 L1100.54 683.427 L1099.98 683.427 L1099.42 683.427 L1098.86 683.427 L1098.3 683.427 L1097.74 683.427 L1097.18 683.427 L1096.62 683.427 L1096.06 683.427 L1095.5 683.427 L1094.94 683.427 L1094.39 683.427 L1093.83 683.427 L1093.27 683.427 L1092.71 683.427 L1092.15 683.427 L1091.59 683.427 L1091.03 683.427 L1090.47 683.427 L1089.91 683.427 L1089.35 683.427 L1088.79 683.427 L1088.23 683.427 L1087.67 683.427 L1087.12 683.427 L1086.56 683.427 L1086 683.427 L1085.44 683.427 L1084.88 683.427 L1084.32 683.427 L1083.76 683.427 L1083.2 683.427 L1082.64 683.427 L1082.08 683.427 L1081.52 683.427 L1080.96 683.427 L1080.4 683.427 L1079.85 683.427 L1079.29 683.427 L1078.73 683.427 L1078.17 683.427 L1077.61 683.427 L1077.05 683.427 L1076.49 683.427 L1075.93 683.427 L1075.37 683.427 L1074.81 683.427 L1074.25 683.427 L1073.69 683.427 L1073.13 683.427 L1072.57 683.427 L1072.02 683.427 L1071.46 683.427 L1070.9 683.427 L1070.34 683.427 L1069.78 683.427 L1069.22 683.427 L1068.66 683.427 L1068.1 683.427 L1067.54 683.427 L1066.98 683.427 L1066.42 683.427 L1065.86 683.427 L1065.3 683.427 L1064.75 683.427 L1064.19 683.427 L1063.63 683.427 L1063.07 683.427 L1062.51 683.427 L1061.95 683.427 L1061.39 683.427 L1060.83 683.427 L1060.27 683.427 L1059.71 683.427 L1059.15 683.427 L1058.59 683.427 L1058.03 683.427 L1057.48 683.427 L1056.92 683.427 L1056.36 683.427 L1055.8 683.427 L1055.24 683.427 L1054.68 683.427 L1054.12 683.427 L1053.56 683.427 L1053 683.427 L1052.44 683.427 L1051.88 683.427 L1051.32 683.427 L1050.76 683.427 L1050.2 683.427 L1049.65 683.427 L1049.09 683.427 L1048.53 683.427 L1047.97 683.427 L1047.41 683.427 L1046.85 683.427 L1046.29 683.427 L1045.73 683.427 L1045.17 683.427 L1044.61 683.427 L1044.05 683.427 L1043.49 683.427 L1042.93 683.427 L1042.38 683.427 L1041.82 683.427 L1041.26 683.427 L1040.7 683.427 L1040.14 683.427 L1039.58 683.427 L1039.02 683.427 L1038.46 683.427 L1037.9 683.427 L1037.34 683.427 L1036.78 683.427 L1036.22 683.427 L1035.66 683.427 L1035.1 683.427 L1034.55 683.427 L1033.99 683.427 L1033.43 683.427 L1032.87 683.427 L1032.31 683.427 L1031.75 683.427 L1031.19 683.427 L1030.63 683.427 L1030.07 683.427 L1029.51 683.427 L1028.95 683.427 L1028.39 683.427 L1027.83 683.427 L1027.28 683.427 L1026.72 683.427 L1026.16 683.427 L1025.6 683.427 L1025.04 683.427 L1024.48 683.427 L1023.92 683.427 L1023.36 683.427 L1022.8 683.427 L1022.24 683.427 L1021.68 683.427 L1021.12 683.427 L1020.56 683.427 L1020.01 683.427 L1019.45 683.427 L1018.89 683.427 L1018.33 683.427 L1017.77 683.427 L1017.21 683.427 L1016.65 683.427 L1016.09 683.427 L1015.53 683.427 L1014.97 683.427 L1014.41 683.427 L1013.85 683.427 L1013.29 683.427 L1012.73 683.427 L1012.18 683.427 L1011.62 683.427 L1011.06 683.427 L1010.5 683.427 L1009.94 683.427 L1009.38 683.427 L1008.82 683.427 L1008.26 683.427 L1007.7 683.427 L1007.14 683.427 L1006.58 683.427 L1006.02 683.427 L1005.46 683.427 L1004.91 683.427 L1004.35 683.427 L1003.79 683.427 L1003.23 683.427 L1002.67 683.427 L1002.11 683.427 L1001.55 683.427 L1000.99 683.427 L1000.43 683.427 L999.872 683.427 L999.313 683.427 L998.754 683.427 L998.194 683.427 L997.635 683.427 L997.076 683.427 L996.517 683.427 L995.957 683.427 L995.398 683.427 L994.839 683.427 L994.28 683.427 L993.72 683.427 L993.161 683.427 L992.602 683.427 L992.043 683.427 L991.483 683.427 L990.924 683.427 L990.365 683.427 L989.806 683.427 L989.246 683.427 L988.687 683.427 L988.128 683.427 L987.569 683.427 L987.009 683.427 L986.45 683.427 L985.891 683.427 L985.332 683.427 L984.772 683.427 L984.213 683.427 L983.654 683.427 L983.095 683.427 L982.535 683.427 L981.976 683.427 L981.417 683.427 L980.858 683.427 L980.298 683.427 L979.739 683.427 L979.18 683.427 L978.621 683.427 L978.061 683.427 L977.502 683.427 L976.943 683.427 L976.384 683.427 L975.824 683.427 L975.265 683.427 L974.706 683.427 L974.147 683.427 L973.587 683.427 L973.028 683.427 L972.469 683.427 L971.91 683.427 L971.35 683.427 L970.791 683.427 L970.232 683.427 L969.673 683.427 L969.113 683.427 L968.554 683.427 L967.995 683.427 L967.436 683.427 L966.876 683.427 L966.317 683.427 L965.758 683.427 L965.199 683.427 L964.639 683.427 L964.08 683.427 L963.521 683.427 L962.962 683.427 L962.402 683.427 L961.843 683.427 L961.284 683.427 L960.725 683.427 L960.165 683.427 L959.606 683.427 L959.047 683.427 L958.488 683.427 L957.928 683.427 L957.369 683.427 L956.81 683.427 L956.251 683.427 L955.691 683.427 L955.132 683.427 L954.573 683.427 L954.014 683.427 L953.454 683.427 L952.895 683.427 L952.336 683.427 L951.777 683.427 L951.217 683.427 L950.658 683.427 L950.099 683.427 L949.54 683.427 L948.98 683.427 L948.421 683.427 L947.862 683.427 L947.303 683.427 L946.743 683.427 L946.184 683.427 L945.625 683.427 L945.066 683.427 L944.506 683.427 L943.947 683.427 L943.388 683.427 L942.829 683.427 L942.269 683.427 L941.71 683.427 L941.151 683.427 L940.592 683.427 L940.032 683.427 L939.473 683.427 L938.914 683.427 L938.355 683.427 L937.795 683.427 L937.236 683.427 L936.677 683.427 L936.118 683.427 L935.558 683.427 L934.999 683.427 L934.44 683.427 L933.881 683.427 L933.321 683.427 L932.762 683.427 L932.203 683.427 L931.644 683.427 L931.084 683.427 L930.525 683.427 L929.966 683.427 L929.406 683.427 L928.847 683.427 L928.288 683.427 L927.729 683.427 L927.169 683.427 L926.61 683.427 L926.051 683.427 L925.492 683.427 L924.932 683.427 L924.373 683.427 L923.814 683.427 L923.255 683.427 L922.695 683.427 L922.136 683.427 L921.577 683.427 L921.018 683.427 L920.458 683.427 L919.899 683.427 L919.34 683.427 L918.781 683.427 L918.221 683.427 L917.662 683.427 L917.103 683.427 L916.544 683.427 L915.984 683.427 L915.425 683.427 L914.866 683.427 L914.307 683.427 L913.747 683.427 L913.188 683.427 L912.629 683.427 L912.07 683.427 L911.51 683.427 L910.951 683.427 L910.392 683.427 L909.833 683.427 L909.273 683.427 L908.714 683.427 L908.155 683.427 L907.596 683.427 L907.036 683.427 L906.477 683.427 L905.918 683.427 L905.359 683.427 L904.799 683.427 L904.24 683.427 L903.681 683.427 L903.122 683.427 L902.562 683.427 L902.003 683.427 L901.444 683.427 L900.885 683.427 L900.325 683.427 L899.766 683.427 L899.207 683.427 L898.648 683.427 L898.088 683.427 L897.529 683.427 L896.97 683.427 L896.411 683.427 L895.851 683.427 L895.292 683.427 L894.733 683.427 L894.174 683.427 L893.614 683.427 L893.055 683.427 L892.496 683.427 L891.937 683.427 L891.377 683.427 L890.818 683.427 L890.259 683.427 L889.7 683.427 L889.14 683.427 L888.581 683.427 L888.022 683.427 L887.463 683.427 L886.903 683.427 L886.344 683.427 L885.785 683.427 L885.226 683.427 L884.666 683.427 L884.107 683.427 L883.548 683.427 L882.989 683.427 L882.429 683.427 L881.87 683.427 L881.311 683.427 L880.752 683.427 L880.192 683.427 L879.633 683.427 L879.074 683.427 L878.515 683.427 L877.955 683.427 L877.396 683.427 L876.837 683.427 L876.278 683.427 L875.718 683.427 L875.159 683.427 L874.6 683.427 L874.041 683.427 L873.481 683.427 L872.922 683.427 L872.363 683.427 L871.804 683.427 L871.244 683.427 L870.685 683.427 L870.126 683.427 L869.567 683.427 L869.007 683.427 L868.448 683.427 L867.889 683.427 L867.33 683.427 L866.77 683.427 L866.211 683.427 L865.652 683.427 L865.093 683.427 L864.533 683.427 L863.974 683.427 L863.415 683.427 L862.856 683.427 L862.296 683.427 L861.737 683.427 L861.178 683.427 L860.619 683.427 L860.059 683.427 L859.5 683.427 L858.941 683.427 L858.382 683.427 L857.822 683.427 L857.263 683.427 L856.704 683.427 L856.145 683.427 L855.585 683.427 L855.026 683.427 L854.467 683.427 L853.908 683.427 L853.348 683.427 L852.789 683.427 L852.23 683.427 L851.671 683.427 L851.111 683.427 L850.552 683.427 L849.993 683.427 L849.434 683.427 L848.874 683.427 L848.315 683.427 L847.756 683.427 L847.197 683.427 L846.637 683.427 L846.078 683.427 L845.519 683.427 L844.96 683.427 L844.4 683.427 L843.841 683.427 L843.282 683.427 L842.723 683.427 L842.163 683.427 L841.604 683.427 L841.045 683.427 L840.486 683.427 L839.926 683.427 L839.367 683.427 L838.808 683.427 L838.249 683.427 L837.689 683.427 L837.13 683.427 L836.571 683.427 L836.012 683.427 L835.452 683.427 L834.893 683.427 L834.334 683.427 L833.775 683.427 L833.215 683.427 L832.656 683.427 L832.097 683.427 L831.538 683.427 L830.978 683.427 L830.419 683.427 L829.86 683.427 L829.301 683.427 L828.741 683.427 L828.182 683.427 L827.623 683.427 L827.064 683.427 L826.504 683.427 L825.945 683.427 L825.386 683.427 L824.827 683.427 L824.267 683.427 L823.708 683.427 L823.149 683.427 L822.59 683.427 L822.03 683.427 L821.471 683.427 L820.912 683.427 L820.353 683.427 L819.793 683.427 L819.234 683.427 L818.675 683.427 L818.116 683.427 L817.556 683.427 L816.997 683.427 L816.438 683.427 L815.879 683.427 L815.319 683.427 L814.76 683.427 L814.201 683.427 L813.642 683.427 L813.082 683.427 L812.523 683.427 L811.964 683.427 L811.405 683.427 L810.845 683.427 L810.286 683.427 L809.727 683.427 L809.168 683.427 L808.608 683.427 L808.049 683.427 L807.49 683.427 L806.931 683.427 L806.371 683.427 L805.812 683.427 L805.253 683.427 L804.693 683.427 L804.134 683.427 L803.575 683.427 L803.016 683.427 L802.456 683.427 L801.897 683.427 L801.338 683.427 L800.779 683.427 L800.219 683.427 L799.66 683.427 L799.101 683.427 L798.542 683.427 L797.982 683.427 L797.423 683.427 L796.864 683.427 L796.305 683.427 L795.745 683.427 L795.186 683.427 L794.627 683.427 L794.068 683.427 L793.508 683.427 L792.949 683.427 L792.39 683.427 L791.831 683.427 L791.271 683.427 L790.712 683.427 L790.153 683.427 L789.594 683.427 L789.034 683.427 L788.475 683.427 L787.916 683.427 L787.357 683.427 L786.797 683.427 L786.238 683.427 L785.679 683.427 L785.12 683.427 L784.56 683.427 L784.001 683.427 L783.442 683.427 L782.883 683.427 L782.323 683.427 L781.764 683.427 L781.205 683.427 L780.646 683.427 L780.086 683.427 L779.527 683.427 L778.968 683.427 L778.409 683.427 L777.849 683.427 L777.29 683.427 L776.731 683.427 L776.172 683.427 L775.612 683.427 L775.053 683.427 L774.494 683.427 L773.935 683.427 L773.375 683.427 L772.816 683.427 L772.257 683.427 L771.698 683.427 L771.138 683.427 L770.579 683.427 L770.02 683.427 L769.461 683.427 L768.901 683.427 L768.342 683.427 L767.783 683.427 L767.224 683.427 L766.664 683.427 L766.105 683.427 L765.546 683.427 L764.987 683.427 L764.427 683.427 L763.868 683.427 L763.309 683.427 L762.75 683.427 L762.19 683.427 L761.631 683.427 L761.072 683.427 L760.513 683.427 L759.953 683.427 L759.394 683.427 L758.835 683.427 L758.276 683.427 L757.716 683.427 L757.157 683.427 L756.598 683.427 L756.039 683.427 L755.479 683.427 L754.92 683.427 L754.361 683.427 L753.802 683.427 L753.242 683.427 L752.683 683.427 L752.124 683.427 L751.565 683.427 L751.005 683.427 L750.446 683.427 L749.887 683.427 L749.328 683.427 L748.768 683.427 L748.209 683.427 L747.65 683.427 L747.091 683.427 L746.531 683.427 L745.972 683.427 L745.413 683.427 L744.854 683.427 L744.294 683.427 L743.735 683.427 L743.176 683.427 L742.617 683.427 L742.057 683.427 L741.498 683.427 L740.939 683.427 L740.38 683.427 L739.82 683.427 L739.261 683.427 L738.702 683.427 L738.143 683.427 L737.583 683.427 L737.024 683.427 L736.465 683.427 L735.906 683.427 L735.346 683.427 L734.787 683.427 L734.228 683.427 L733.669 683.427 L733.109 683.427 L732.55 683.427 L731.991 683.427 L731.432 683.427 L730.872 683.427 L730.313 683.427 L729.754 683.427 L729.195 683.427 L728.635 683.427 L728.076 683.427 L727.517 683.427 L726.958 683.427 L726.398 683.427 L725.839 683.427 L725.28 683.427 L724.721 683.427 L724.161 683.427 L723.602 683.427 L723.043 683.427 L722.484 683.427 L721.924 683.427 L721.365 683.427 L720.806 683.427 L720.247 683.427  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip313)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.322 720.806,684.322 721.365,684.322 721.924,684.322 722.484,684.322 723.043,684.322 723.602,684.322 724.161,684.322 724.721,684.322 725.28,684.322 725.839,684.322 726.398,684.322 726.958,684.322 727.517,684.322 728.076,684.322 728.635,684.322 729.195,684.322 729.754,684.322 730.313,684.322 730.872,684.322 731.432,684.322 731.991,684.322 732.55,684.322 733.109,684.322 733.669,684.322 734.228,684.322 734.787,684.322 735.346,684.322 735.906,684.322 736.465,684.322 737.024,684.322 737.583,684.322 738.143,684.322 738.702,684.322 739.261,684.322 739.82,684.322 740.38,684.322 740.939,684.322 741.498,684.322 742.057,684.322 742.617,684.322 743.176,684.322 743.735,684.322 744.294,684.322 744.854,684.322 745.413,684.322 745.972,684.322 746.531,684.322 747.091,684.322 747.65,684.322 748.209,684.322 748.768,684.322 749.328,684.322 749.887,684.322 750.446,684.322 751.005,684.322 751.565,684.322 752.124,684.322 752.683,684.322 753.242,684.322 753.802,684.322 754.361,684.322 754.92,684.322 755.479,684.322 756.039,684.322 756.598,684.322 757.157,684.322 757.716,684.322 758.276,684.322 758.835,684.322 759.394,684.322 759.953,684.322 760.513,684.322 761.072,684.322 761.631,684.322 762.19,684.322 762.75,684.322 763.309,684.322 763.868,684.322 764.427,684.322 764.987,684.322 765.546,684.322 766.105,684.322 766.664,684.322 767.224,684.322 767.783,684.322 768.342,684.322 768.901,684.322 769.461,684.322 770.02,684.322 770.579,684.322 771.138,684.322 771.698,684.322 772.257,684.322 772.816,684.322 773.375,684.322 773.935,684.322 774.494,684.322 775.053,684.322 775.612,684.322 776.172,684.322 776.731,684.322 777.29,684.322 777.849,684.322 778.409,684.322 778.968,684.322 779.527,684.322 780.086,684.322 780.646,684.322 781.205,684.322 781.764,684.322 782.323,684.322 782.883,684.322 783.442,684.322 784.001,684.322 784.56,684.322 785.12,684.322 785.679,684.322 786.238,684.322 786.797,684.322 787.357,684.322 787.916,684.322 788.475,684.322 789.034,684.322 789.594,684.322 790.153,684.322 790.712,684.322 791.271,684.322 791.831,684.322 792.39,684.322 792.949,684.322 793.508,684.322 794.068,684.322 794.627,684.322 795.186,684.322 795.745,684.322 796.305,684.322 796.864,684.322 797.423,684.322 797.982,684.322 798.542,684.322 799.101,684.322 799.66,684.322 800.219,684.322 800.779,684.322 801.338,684.322 801.897,684.322 802.456,684.322 803.016,684.322 803.575,684.322 804.134,684.322 804.693,684.322 805.253,684.322 805.812,684.322 806.371,684.322 806.931,684.322 807.49,684.322 808.049,684.322 808.608,684.322 809.168,684.322 809.727,684.322 810.286,684.322 810.845,684.322 811.405,684.322 811.964,684.322 812.523,684.322 813.082,684.322 813.642,684.322 814.201,684.322 814.76,684.322 815.319,684.322 815.879,684.322 816.438,684.322 816.997,684.322 817.556,684.322 818.116,684.322 818.675,684.322 819.234,684.322 819.793,684.322 820.353,684.322 820.912,684.322 821.471,684.322 822.03,684.322 822.59,684.322 823.149,684.322 823.708,684.322 824.267,684.322 824.827,684.322 825.386,684.322 825.945,684.322 826.504,684.322 827.064,684.322 827.623,684.322 828.182,684.322 828.741,684.322 829.301,684.322 829.86,684.322 830.419,684.322 830.978,684.322 831.538,684.322 832.097,684.322 832.656,684.322 833.215,684.322 833.775,684.322 834.334,684.322 834.893,684.322 835.452,684.322 836.012,684.322 836.571,684.322 837.13,684.322 837.689,684.322 838.249,684.322 838.808,684.322 839.367,684.322 839.926,684.322 840.486,684.322 841.045,684.322 841.604,684.322 842.163,684.322 842.723,684.322 843.282,684.322 843.841,684.322 844.4,684.322 844.96,684.322 845.519,684.322 846.078,684.322 846.637,684.322 847.197,684.322 847.756,684.322 848.315,684.322 848.874,684.322 849.434,684.322 849.993,684.322 850.552,684.322 851.111,684.322 851.671,684.322 852.23,684.322 852.789,684.322 853.348,684.322 853.908,684.322 854.467,684.322 855.026,684.322 855.585,684.322 856.145,684.322 856.704,684.322 857.263,684.322 857.822,684.322 858.382,684.322 858.941,684.322 859.5,684.322 860.059,684.322 860.619,684.322 861.178,684.322 861.737,684.322 862.296,684.322 862.856,684.322 863.415,684.322 863.974,684.322 864.533,684.322 865.093,684.322 865.652,684.322 866.211,684.322 866.77,684.322 867.33,684.322 867.889,684.322 868.448,684.322 869.007,684.322 869.567,684.322 870.126,684.322 870.685,684.322 871.244,684.322 871.804,684.322 872.363,684.322 872.922,684.322 873.481,684.322 874.041,684.322 874.6,684.322 875.159,684.322 875.718,684.322 876.278,684.322 876.837,684.322 877.396,684.322 877.955,684.322 878.515,684.322 879.074,684.322 879.633,684.322 880.192,684.322 880.752,684.322 881.311,684.322 881.87,684.322 882.429,684.322 882.989,684.322 883.548,684.322 884.107,684.322 884.666,684.322 885.226,684.322 885.785,684.322 886.344,684.322 886.903,684.322 887.463,684.322 888.022,684.322 888.581,684.322 889.14,684.322 889.7,684.322 890.259,684.322 890.818,684.322 891.377,684.322 891.937,684.322 892.496,684.322 893.055,684.322 893.614,684.322 894.174,684.322 894.733,684.322 895.292,684.322 895.851,684.322 896.411,684.322 896.97,684.322 897.529,684.322 898.088,684.322 898.648,684.322 899.207,684.322 899.766,684.322 900.325,684.322 900.885,684.322 901.444,684.322 902.003,684.322 902.562,684.322 903.122,684.322 903.681,684.322 904.24,684.322 904.799,684.322 905.359,684.322 905.918,684.322 906.477,684.322 907.036,684.322 907.596,684.322 908.155,684.322 908.714,684.322 909.273,684.322 909.833,684.322 910.392,684.322 910.951,684.322 911.51,684.322 912.07,684.322 912.629,684.322 913.188,684.322 913.747,684.322 914.307,684.322 914.866,684.322 915.425,684.322 915.984,684.322 916.544,684.322 917.103,684.322 917.662,684.322 918.221,684.322 918.781,684.322 919.34,684.322 919.899,684.322 920.458,684.322 921.018,684.322 921.577,684.322 922.136,684.322 922.695,684.322 923.255,684.322 923.814,684.322 924.373,684.322 924.932,684.322 925.492,684.322 926.051,684.322 926.61,684.322 927.169,684.322 927.729,684.322 928.288,684.322 928.847,684.322 929.406,684.322 929.966,684.322 930.525,684.322 931.084,684.322 931.644,684.322 932.203,684.322 932.762,684.322 933.321,684.322 933.881,684.322 934.44,684.322 934.999,684.322 935.558,684.322 936.118,684.322 936.677,684.322 937.236,684.322 937.795,684.322 938.355,684.322 938.914,684.322 939.473,684.322 940.032,684.322 940.592,684.322 941.151,684.322 941.71,684.322 942.269,684.322 942.829,684.322 943.388,684.322 943.947,684.322 944.506,684.322 945.066,684.322 945.625,684.322 946.184,684.322 946.743,684.322 947.303,684.322 947.862,684.322 948.421,684.322 948.98,684.322 949.54,684.322 950.099,684.322 950.658,684.322 951.217,684.322 951.777,684.322 952.336,684.322 952.895,684.322 953.454,684.322 954.014,684.322 954.573,684.322 955.132,684.322 955.691,684.322 956.251,684.322 956.81,684.322 957.369,684.322 957.928,684.322 958.488,684.322 959.047,684.322 959.606,684.322 960.165,684.322 960.725,684.322 961.284,684.322 961.843,684.322 962.402,684.322 962.962,684.322 963.521,684.322 964.08,684.322 964.639,684.322 965.199,684.322 965.758,684.322 966.317,684.322 966.876,684.322 967.436,684.322 967.995,684.322 968.554,684.322 969.113,684.322 969.673,684.322 970.232,684.322 970.791,684.322 971.35,684.322 971.91,684.322 972.469,684.322 973.028,684.322 973.587,684.322 974.147,684.322 974.706,684.322 975.265,684.322 975.824,684.322 976.384,684.322 976.943,684.322 977.502,684.322 978.061,684.322 978.621,684.322 979.18,684.322 979.739,684.322 980.298,684.322 980.858,684.322 981.417,684.322 981.976,684.322 982.535,684.322 983.095,684.322 983.654,684.322 984.213,684.322 984.772,684.322 985.332,684.322 985.891,684.322 986.45,684.322 987.009,684.322 987.569,684.322 988.128,684.322 988.687,684.322 989.246,684.322 989.806,684.322 990.365,684.322 990.924,684.322 991.483,684.322 992.043,684.322 992.602,684.322 993.161,684.322 993.72,684.322 994.28,684.322 994.839,684.322 995.398,684.322 995.957,684.322 996.517,684.322 997.076,684.322 997.635,684.322 998.194,684.322 998.754,684.322 999.313,684.322 999.872,684.322 1000.43,684.322 1000.99,684.322 1001.55,684.322 1002.11,684.322 1002.67,684.322 1003.23,684.322 1003.79,684.322 1004.35,684.322 1004.91,684.322 1005.46,684.322 1006.02,684.322 1006.58,684.322 1007.14,684.322 1007.7,684.322 1008.26,684.322 1008.82,684.322 1009.38,684.322 1009.94,684.322 1010.5,684.322 1011.06,684.322 1011.62,684.322 1012.18,684.322 1012.73,684.322 1013.29,684.322 1013.85,684.322 1014.41,684.322 1014.97,684.322 1015.53,684.322 1016.09,684.322 1016.65,684.322 1017.21,684.322 1017.77,684.322 1018.33,684.322 1018.89,684.322 1019.45,684.322 1020.01,684.322 1020.56,684.322 1021.12,684.322 1021.68,684.322 1022.24,684.322 1022.8,684.322 1023.36,684.322 1023.92,684.322 1024.48,684.322 1025.04,684.322 1025.6,684.322 1026.16,684.322 1026.72,684.322 1027.28,684.322 1027.83,684.322 1028.39,684.322 1028.95,684.322 1029.51,684.322 1030.07,684.322 1030.63,684.322 1031.19,684.322 1031.75,684.322 1032.31,684.322 1032.87,684.322 1033.43,684.322 1033.99,684.322 1034.55,684.322 1035.1,684.322 1035.66,684.322 1036.22,684.322 1036.78,684.322 1037.34,684.322 1037.9,684.322 1038.46,684.322 1039.02,684.322 1039.58,684.322 1040.14,684.322 1040.7,684.322 1041.26,684.322 1041.82,684.322 1042.38,684.322 1042.93,684.322 1043.49,684.322 1044.05,684.322 1044.61,684.322 1045.17,684.322 1045.73,684.322 1046.29,684.322 1046.85,684.322 1047.41,684.322 1047.97,684.322 1048.53,684.322 1049.09,684.322 1049.65,684.322 1050.2,684.322 1050.76,684.322 1051.32,684.322 1051.88,684.322 1052.44,684.322 1053,684.322 1053.56,684.322 1054.12,684.322 1054.68,684.322 1055.24,684.322 1055.8,684.322 1056.36,684.322 1056.92,684.322 1057.48,684.322 1058.03,684.322 1058.59,684.322 1059.15,684.322 1059.71,684.322 1060.27,684.322 1060.83,684.322 1061.39,684.322 1061.95,684.322 1062.51,684.322 1063.07,684.322 1063.63,684.322 1064.19,684.322 1064.75,684.322 1065.3,684.322 1065.86,684.322 1066.42,684.322 1066.98,684.322 1067.54,684.322 1068.1,684.322 1068.66,684.322 1069.22,684.322 1069.78,684.322 1070.34,684.322 1070.9,684.322 1071.46,684.322 1072.02,684.322 1072.57,684.322 1073.13,684.322 1073.69,684.322 1074.25,684.322 1074.81,684.322 1075.37,684.322 1075.93,684.322 1076.49,684.322 1077.05,684.322 1077.61,684.322 1078.17,684.322 1078.73,684.322 1079.29,684.322 1079.85,684.322 1080.4,684.322 1080.96,684.322 1081.52,684.322 1082.08,684.322 1082.64,684.322 1083.2,684.322 1083.76,684.322 1084.32,684.322 1084.88,684.322 1085.44,684.322 1086,684.322 1086.56,684.322 1087.12,684.322 1087.67,684.322 1088.23,684.322 1088.79,684.322 1089.35,684.322 1089.91,684.322 1090.47,684.322 1091.03,684.322 1091.59,684.322 1092.15,684.322 1092.71,684.322 1093.27,684.322 1093.83,684.322 1094.39,684.322 1094.94,684.322 1095.5,684.322 1096.06,684.322 1096.62,684.322 1097.18,684.322 1097.74,684.322 1098.3,684.322 1098.86,684.322 1099.42,684.322 1099.98,684.322 1100.54,684.322 1101.1,684.322 1101.66,684.322 1102.22,684.322 1102.77,684.322 1103.33,684.322 1103.89,684.322 1104.45,684.322 1105.01,684.322 1105.57,684.322 1106.13,684.322 1106.69,684.322 1107.25,684.322 1107.81,684.322 1108.37,684.322 1108.93,684.322 1109.49,684.322 1110.04,684.322 1110.6,684.322 1111.16,684.322 1111.72,684.322 1112.28,684.322 1112.84,684.322 1113.4,684.322 1113.96,684.322 1114.52,684.322 1115.08,684.322 1115.64,684.322 1116.2,684.322 1116.76,684.322 1117.31,684.322 1117.87,684.322 1118.43,684.322 1118.99,684.322 1119.55,684.322 1120.11,684.322 1120.67,684.322 1121.23,684.322 1121.79,684.322 1122.35,684.322 1122.91,684.322 1123.47,684.322 1124.03,684.322 1124.59,684.322 1125.14,684.322 1125.7,684.322 1126.26,684.322 1126.82,684.322 1127.38,684.322 1127.94,684.322 1128.5,684.322 1129.06,684.322 1129.62,684.322 1130.18,684.322 1130.74,684.322 1131.3,684.322 1131.86,684.322 1132.41,684.322 1132.97,684.322 1133.53,684.322 1134.09,684.322 1134.65,684.322 1135.21,684.322 1135.77,684.322 1136.33,684.322 1136.89,684.322 1137.45,684.322 1138.01,684.322 1138.57,684.322 1139.13,684.322 1139.68,684.322 1140.24,684.322 1140.8,684.322 1141.36,684.322 1141.92,684.322 1142.48,684.322 1143.04,684.322 1143.6,684.322 1144.16,684.322 1144.72,684.322 1145.28,684.322 1145.84,684.322 1146.4,684.322 1146.96,684.322 1147.51,684.322 1148.07,684.322 1148.63,684.322 1149.19,684.322 1149.75,684.322 1150.31,684.322 1150.87,684.322 1151.43,684.322 1151.99,684.322 1152.55,684.322 1153.11,684.322 1153.67,684.322 1154.23,684.322 1154.78,684.322 1155.34,684.322 1155.9,684.322 1156.46,684.322 1157.02,684.322 1157.58,684.322 1158.14,684.322 1158.7,684.322 1159.26,684.322 1159.82,684.322 1160.38,684.322 1160.94,684.322 1161.5,684.322 1162.05,684.322 1162.61,684.322 1163.17,684.322 1163.73,684.322 1164.29,684.322 1164.85,684.322 1165.41,684.322 1165.97,684.322 1166.53,684.322 1167.09,684.322 1167.65,684.322 1168.21,684.322 1168.77,684.322 1169.33,684.322 1169.88,684.322 1170.44,684.322 1171,684.322 1171.56,684.322 1172.12,684.322 1172.68,684.322 1173.24,684.322 1173.8,684.322 1174.36,684.322 1174.92,684.322 1175.48,684.322 1176.04,684.322 1176.6,684.322 1177.15,684.322 1177.71,684.322 1178.27,684.322 1178.83,684.322 1179.39,684.322 1179.95,684.322 1180.51,684.322 1181.07,684.322 1181.63,684.322 1182.19,684.322 1182.75,684.322 1183.31,684.322 1183.87,684.322 1184.43,684.322 1184.98,684.322 1185.54,684.322 1186.1,684.322 1186.66,684.322 1187.22,684.322 1187.78,684.322 1188.34,684.322 1188.9,684.322 1189.46,684.322 1190.02,684.322 1190.58,684.322 1191.14,684.322 1191.7,684.322 1192.25,684.322 1192.81,684.322 1193.37,684.322 1193.93,684.322 1194.49,684.322 1195.05,684.322 1195.61,684.322 1196.17,684.322 1196.73,684.322 1197.29,684.322 1197.85,684.322 1198.41,684.322 1198.97,684.322 1199.52,684.322 1200.08,684.322 1200.64,684.322 1201.2,684.322 1201.76,684.322 1202.32,684.322 1202.88,684.322 1203.44,684.322 1204,684.322 1204.56,684.322 1205.12,684.322 1205.68,684.322 1206.24,684.322 1206.8,684.322 1207.35,684.322 1207.91,684.322 1208.47,684.322 1209.03,684.322 1209.59,684.322 1210.15,684.322 1210.71,684.322 1211.27,684.322 1211.83,684.322 1212.39,684.322 1212.95,684.322 1213.51,684.322 1214.07,684.322 1214.62,684.322 1215.18,684.322 1215.74,684.322 1216.3,684.322 1216.86,684.322 1217.42,684.322 1217.98,684.322 1218.54,684.322 1219.1,684.322 1219.66,684.322 1220.22,684.322 1220.78,684.322 1221.34,684.322 1221.89,684.322 1222.45,684.322 1223.01,684.322 1223.57,684.322 1224.13,684.322 1224.69,684.322 1225.25,684.322 1225.81,684.322 1226.37,684.322 1226.93,684.322 1227.49,684.322 1228.05,684.322 1228.61,684.322 1229.17,684.322 1229.72,684.322 1230.28,684.322 1230.84,684.322 1231.4,684.322 1231.96,684.322 1232.52,684.322 1233.08,684.322 1233.64,684.322 1234.2,684.322 1234.76,684.322 1235.32,684.322 1235.88,684.322 1236.44,684.322 1236.99,684.322 1237.55,684.322 1238.11,684.322 1238.67,684.322 1239.23,684.322 1239.79,684.322 1240.35,684.322 1240.91,684.322 1241.47,684.322 1242.03,684.322 1242.59,684.322 1243.15,684.322 1243.71,684.322 1244.26,684.322 1244.82,684.322 1245.38,684.322 1245.94,684.322 1246.5,684.322 1247.06,684.322 1247.62,684.322 1248.18,684.322 1248.74,684.322 1249.3,684.322 1249.86,684.322 1250.42,684.322 1250.98,684.322 1251.54,684.322 1252.09,684.322 1252.65,684.322 1253.21,684.322 1253.77,684.322 1254.33,684.322 1254.89,684.322 1255.45,684.322 1256.01,684.322 1256.57,684.322 1257.13,684.322 1257.69,684.322 1258.25,684.322 1258.81,684.322 1259.36,684.322 1259.92,684.322 1260.48,684.322 1261.04,684.322 1261.6,684.322 1262.16,684.322 1262.72,684.322 1263.28,684.322 1263.84,684.322 1264.4,684.322 1264.96,684.322 1265.52,684.322 1266.08,684.322 1266.63,684.322 1267.19,684.322 1267.75,684.322 1268.31,684.322 1268.87,684.322 1269.43,684.322 1269.99,684.322 1270.55,684.322 1271.11,684.322 1271.67,684.322 1272.23,684.322 1272.79,684.322 1273.35,684.322 1273.91,684.322 1274.46,684.322 1275.02,684.322 1275.58,684.322 1276.14,684.322 1276.7,684.322 1277.26,684.322 1277.82,684.322 1278.38,684.322 1278.94,684.322 1279.5,684.322 1280.06,684.322 1280.62,684.322 1281.18,684.322 1281.73,684.322 1282.29,684.322 1282.85,684.322 1283.41,684.322 1283.97,684.322 1284.53,684.322 1285.09,684.322 1285.65,684.322 1286.21,684.322 1286.77,684.322 1287.33,684.322 1287.89,684.322 1288.45,684.322 1289,684.322 1289.56,684.322 1290.12,684.322 1290.68,684.322 1291.24,684.322 1291.8,684.322 1292.36,684.322 1292.92,684.322 1293.48,684.322 1294.04,684.322 1294.6,684.322 1295.16,684.322 1295.72,684.322 1296.28,684.322 1296.83,684.322 1297.39,684.322 1297.95,684.322 1298.51,684.322 1299.07,684.322 1299.63,684.322 1300.19,684.322 1300.75,684.322 1301.31,684.322 1301.87,684.322 1302.43,684.322 1302.99,684.322 1303.55,684.322 1304.1,684.322 1304.66,684.322 1305.22,684.322 1305.78,684.322 1306.34,684.322 1306.9,684.322 1307.46,684.322 1308.02,684.322 1308.58,684.322 1309.14,684.322 1309.7,684.322 1310.26,684.322 1310.82,684.322 1311.38,684.322 1311.93,684.322 1312.49,684.322 1313.05,684.322 1313.61,684.322 1314.17,684.322 1314.73,684.322 1315.29,684.322 1315.85,684.322 1316.41,684.322 1316.97,684.322 1317.53,684.322 1318.09,684.322 1318.65,684.322 1319.2,684.322 1319.76,684.322 1320.32,684.322 1320.88,684.322 1321.44,684.322 1322,684.322 1322.56,684.322 1323.12,684.322 1323.68,684.322 1324.24,684.322 1324.8,684.322 1325.36,684.322 1325.92,684.322 1326.47,684.322 1327.03,684.322 1327.59,684.322 1328.15,684.322 1328.71,684.322 1329.27,684.322 1329.83,684.322 1330.39,684.322 1330.95,684.322 1331.51,684.322 1332.07,684.322 1332.63,684.322 1333.19,684.322 1333.75,684.322 1334.3,684.322 1334.86,684.322 1335.42,684.322 1335.98,684.322 1336.54,684.322 1337.1,684.322 1337.66,684.322 1338.22,684.322 1338.78,684.322 1339.34,684.322 1339.9,684.322 1340.46,684.322 1341.02,684.322 1341.57,684.322 1342.13,684.322 1342.69,684.322 1343.25,684.322 1343.81,684.322 1344.37,684.322 1344.93,684.322 1345.49,684.322 1346.05,684.322 1346.61,684.322 1347.17,684.322 1347.73,684.322 1348.29,684.322 1348.84,684.322 1349.4,684.322 1349.96,684.322 1350.52,684.322 1351.08,684.322 1351.64,684.322 1352.2,684.322 1352.76,684.322 1353.32,684.322 1353.88,684.322 1354.44,684.322 1355,684.322 1355.56,684.322 1356.12,684.322 1356.67,684.322 1357.23,684.322 1357.79,684.322 1358.35,684.322 1358.91,684.322 1359.47,684.322 1360.03,684.322 1360.59,684.322 1361.15,684.322 1361.71,684.322 1362.27,684.322 1362.83,684.322 1363.39,684.322 1363.94,684.322 1364.5,684.322 1365.06,684.322 1365.62,684.322 1366.18,684.322 1366.74,684.322 1367.3,684.322 1367.86,684.322 1368.42,684.322 1368.98,684.322 1369.54,684.322 1370.1,684.322 1370.66,684.322 1371.21,684.322 1371.77,684.322 1372.33,684.322 1372.89,684.322 1373.45,684.322 1374.01,684.322 1374.57,684.322 1375.13,684.322 1375.69,684.322 1376.25,684.322 1376.81,684.322 1377.37,684.322 1377.93,684.322 1378.49,684.322 1379.04,684.322 1379.6,684.322 1380.16,684.322 1380.72,684.322 1381.28,684.322 1381.84,684.322 1382.4,684.322 1382.96,684.322 1383.52,684.322 1384.08,684.322 1384.64,684.322 1385.2,684.322 1385.76,684.322 1386.31,684.322 1386.87,684.322 1387.43,684.322 1387.99,684.322 1388.55,684.322 1389.11,684.322 1389.67,684.322 1390.23,684.322 1390.79,684.322 1391.35,684.322 1391.91,684.322 1392.47,684.322 1393.03,684.322 1393.58,684.322 1394.14,684.322 1394.7,684.322 1395.26,684.322 1395.82,684.322 1396.38,684.322 1396.94,684.322 1397.5,684.322 1398.06,684.322 1398.62,684.322 1399.18,684.322 1399.74,684.322 1400.3,684.322 1400.86,684.322 1401.41,684.322 1401.97,684.322 1402.53,684.322 1403.09,684.322 1403.65,684.322 1404.21,684.322 1404.77,684.322 1405.33,684.322 1405.89,684.322 1406.45,684.322 1407.01,684.322 1407.57,684.322 1408.13,684.322 1408.68,684.322 1409.24,684.322 1409.8,684.322 1410.36,684.322 1410.92,684.322 1411.48,684.322 1412.04,684.322 1412.6,684.322 1413.16,684.322 1413.72,684.322 1414.28,684.322 1414.84,684.322 1415.4,684.322 1415.95,684.322 1416.51,684.322 1417.07,684.322 1417.63,684.322 1418.19,684.322 1418.75,684.322 1419.31,684.322 1419.87,684.322 1420.43,684.322 1420.99,684.322 1421.55,684.322 1422.11,684.322 1422.67,684.322 1423.23,684.322 1423.78,684.322 1424.34,684.322 1424.9,684.322 1425.46,684.322 1426.02,684.322 1426.58,684.322 1427.14,684.322 1427.7,684.322 1428.26,684.322 1428.82,684.322 1429.38,684.322 1429.94,684.322 1430.5,684.322 1431.05,684.322 1431.61,684.322 1432.17,684.322 1432.73,684.322 1433.29,684.322 1433.85,684.322 1434.41,684.322 1434.97,684.322 1435.53,684.322 1436.09,684.322 1436.65,684.322 1437.21,684.322 1437.77,684.322 1438.33,684.322 1438.88,684.322 1439.44,684.322 1440,684.322 1440.56,684.322 1441.12,684.322 1441.68,684.322 1442.24,684.322 1442.8,684.322 1443.36,684.322 1443.92,684.322 1444.48,684.322 1445.04,684.322 1445.6,684.322 1446.15,684.322 1446.71,684.322 1447.27,684.322 1447.83,684.322 1448.39,684.322 1448.95,684.322 1449.51,684.322 1450.07,684.322 1450.63,684.322 1451.19,684.322 1451.75,684.322 1452.31,684.322 1452.87,684.322 1453.42,684.322 1453.98,684.322 1454.54,684.322 1455.1,684.322 1455.66,684.322 1456.22,684.322 1456.78,684.322 1457.34,684.322 1457.9,684.322 1458.46,684.322 1459.02,684.322 1459.58,684.322 1460.14,684.322 1460.7,684.322 1461.25,684.322 1461.81,684.322 1462.37,684.322 1462.93,684.322 1463.49,684.322 1464.05,684.322 1464.61,684.322 1465.17,684.322 1465.73,684.322 1466.29,684.322 1466.85,684.322 1467.41,684.322 1467.97,684.322 1468.52,684.322 1469.08,684.322 1469.64,684.322 1470.2,684.322 1470.76,684.322 1471.32,684.322 1471.88,684.322 1472.44,684.322 1473,684.322 1473.56,684.322 1474.12,684.322 1474.68,684.322 1475.24,684.322 1475.79,684.322 1476.35,684.322 1476.91,684.322 1477.47,684.322 1478.03,684.322 1478.59,684.322 1479.15,684.322 1479.71,684.322 1480.27,684.322 1480.83,684.322 1481.39,684.322 1481.95,684.322 1482.51,684.322 1483.07,684.322 1483.62,684.322 1484.18,684.322 1484.74,684.322 1485.3,684.322 1485.86,684.322 1486.42,684.322 1486.98,684.322 1487.54,684.322 1488.1,684.322 1488.66,684.322 1489.22,684.322 1489.78,684.322 1490.34,684.322 1490.89,684.322 1491.45,684.322 1492.01,684.322 1492.57,684.322 1493.13,684.322 1493.69,684.322 1494.25,684.322 1494.81,684.322 1495.37,684.322 1495.93,684.322 1496.49,684.322 1497.05,684.322 1497.61,684.322 1498.16,684.322 1498.72,684.322 1499.28,684.322 1499.84,684.322 1500.4,684.322 1500.96,684.322 1501.52,684.322 1502.08,684.322 1502.64,684.322 1503.2,684.322 1503.76,684.322 1504.32,684.322 1504.88,684.322 1505.44,684.322 1505.99,684.322 1506.55,684.322 1507.11,684.322 1507.67,684.322 1508.23,684.322 1508.79,684.322 1509.35,684.322 1509.91,684.322 1510.47,684.322 1511.03,684.322 1511.59,684.322 1512.15,684.322 1512.71,684.322 1513.26,684.322 1513.82,684.322 1514.38,684.322 1514.94,684.322 1515.5,684.322 1516.06,684.322 1516.62,684.322 1517.18,684.322 1517.74,684.322 1518.3,684.322 1518.86,684.322 1519.42,684.322 1519.98,684.322 1520.53,684.322 1521.09,684.322 1521.65,684.322 1522.21,684.322 1522.77,684.322 1523.33,684.322 1523.89,684.322 1524.45,684.322 1525.01,684.322 1525.57,684.322 1526.13,684.322 1526.69,684.322 1527.25,684.322 1527.81,684.322 1528.36,684.322 1528.92,684.322 1529.48,684.322 1530.04,684.322 1530.6,684.322 1531.16,684.322 1531.72,684.322 1532.28,684.322 1532.84,684.322 1533.4,684.322 1533.96,684.322 1534.52,684.322 1535.08,684.322 1535.63,684.322 1536.19,684.322 1536.75,684.322 1537.31,684.322 1537.87,684.322 1538.43,684.322 1538.99,684.322 1539.55,684.322 1540.11,684.322 1540.67,684.322 1541.23,684.322 1541.79,684.322 1542.35,684.322 1542.9,684.322 1543.46,684.322 1544.02,684.322 1544.58,684.322 1545.14,684.322 1545.7,684.322 1546.26,684.322 1546.82,684.322 1547.38,684.322 1547.94,684.322 1548.5,684.322 1549.06,684.322 1549.62,684.322 1550.18,684.322 1550.73,684.322 1551.29,684.322 1551.85,684.322 1552.41,684.322 1552.97,684.322 1553.53,684.322 1554.09,684.322 1554.65,684.322 1555.21,684.322 1555.77,684.322 1556.33,684.322 1556.89,684.322 1557.45,684.322 1558,684.322 1558.56,684.322 1559.12,684.322 1559.68,684.322 1560.24,684.322 1560.8,684.322 1561.36,684.322 1561.92,684.322 1562.48,684.322 1563.04,684.322 1563.6,684.322 1564.16,684.322 1564.72,684.322 1565.28,684.322 1565.83,684.322 1566.39,684.322 1566.95,684.322 1567.51,684.322 1568.07,684.322 1568.63,684.322 1569.19,684.322 1569.75,684.322 1570.31,684.322 1570.87,684.322 1571.43,684.322 1571.99,684.322 1572.55,684.322 1573.1,684.322 1573.66,684.322 1574.22,684.322 1574.78,684.322 1575.34,684.322 1575.9,684.322 1576.46,684.322 1577.02,684.322 1577.58,684.322 1578.14,684.322 1578.7,684.322 1579.26,684.322 1579.82,684.322 1580.37,684.322 1580.93,684.322 1581.49,684.322 1582.05,684.322 1582.61,684.322 1583.17,684.322 1583.73,684.322 1584.29,684.322 1584.85,684.322 1585.41,684.322 1585.97,684.322 1586.53,684.322 1587.09,684.322 1587.65,684.322 1588.2,684.322 1588.76,684.322 1589.32,684.322 1589.88,684.322 1590.44,684.322 1591,684.322 1591.56,684.322 1592.12,684.322 1592.68,684.322 1593.24,684.322 1593.8,684.322 1594.36,684.322 1594.92,684.322 1595.47,684.322 1596.03,684.322 1596.59,684.322 1597.15,684.322 1597.71,684.322 1598.27,684.322 1598.83,684.322 1599.39,684.322 1599.95,684.322 1600.51,684.322 1601.07,684.322 1601.63,684.322 1602.19,684.322 1602.74,684.322 1603.3,684.322 1603.86,684.322 1604.42,684.322 1604.98,684.322 1605.54,684.322 1606.1,684.322 1606.66,684.322 1607.22,684.322 1607.78,684.322 1608.34,684.322 1608.9,684.322 1609.46,684.322 1610.02,684.322 1610.57,684.322 1611.13,684.322 1611.69,684.322 1612.25,684.322 1612.81,684.322 1613.37,684.322 1613.93,684.322 1614.49,684.322 1615.05,684.322 1615.61,684.322 1616.17,684.322 1616.73,684.322 1617.29,684.322 1617.84,684.322 1618.4,684.322 1618.96,684.322 1619.52,684.322 1620.08,684.322 1620.64,684.322 1621.2,684.322 1621.76,684.322 1622.32,684.322 1622.88,684.322 1623.44,684.322 1624,684.322 1624.56,684.322 1625.11,684.322 1625.67,684.322 1626.23,684.322 1626.79,684.322 1627.35,684.322 1627.91,684.322 1628.47,684.322 1629.03,684.322 1629.59,684.322 1630.15,684.322 1630.71,684.322 1631.27,684.322 1631.83,684.322 1632.39,684.322 1632.94,684.322 1633.5,684.322 1634.06,684.322 1634.62,684.322 1635.18,684.322 1635.74,684.322 1636.3,684.322 1636.86,684.322 1637.42,684.322 1637.98,684.322 1638.54,684.322 1639.1,684.322 1639.66,684.322 1640.21,684.322 1640.77,684.322 1641.33,684.322 1641.89,684.322 1642.45,684.322 1643.01,684.322 1643.57,684.322 1644.13,684.322 1644.69,684.322 1645.25,684.322 1645.81,684.322 1646.37,684.322 1646.93,684.322 1647.48,684.322 1648.04,684.322 1648.6,684.322 1649.16,684.322 1649.72,684.322 1650.28,684.322 1650.84,684.322 1651.4,684.322 1651.96,684.322 1652.52,684.322 1653.08,684.322 1653.64,684.322 1654.2,684.322 1654.76,684.322 1655.31,684.322 1655.87,684.322 1656.43,684.322 1656.99,684.322 1657.55,684.322 1658.11,684.322 1658.67,684.322 1659.23,684.322 1659.79,684.322 1660.35,684.322 1660.91,684.322 1661.47,684.322 1662.03,684.322 1662.58,684.322 1663.14,684.322 1663.7,684.322 1664.26,684.322 1664.82,684.322 1665.38,684.322 1665.94,684.322 1666.5,684.322 1667.06,684.322 1667.62,684.322 1668.18,684.322 1668.74,684.322 1669.3,684.322 1669.85,684.322 1670.41,684.322 1670.97,684.322 1671.53,684.322 1672.09,684.322 1672.65,684.322 1673.21,684.322 1673.77,684.322 1674.33,684.322 1674.89,684.322 1675.45,684.322 1676.01,684.322 1676.57,684.322 1677.13,684.322 1677.68,684.322 1678.24,684.322 1678.8,684.322 1679.36,684.322 1679.92,684.322 1680.48,684.322 1681.04,684.322 1681.6,684.322 1682.16,684.322 1682.72,684.322 1683.28,684.322 1683.84,684.322 1684.4,684.322 1684.95,684.322 1685.51,684.322 1686.07,684.322 1686.63,684.322 1687.19,684.322 1687.75,684.322 1688.31,684.322 1688.87,684.322 1689.43,684.322 1689.99,684.322 1690.55,684.322 1691.11,684.322 1691.67,684.322 1692.23,684.322 1692.78,684.322 1693.34,684.322 1693.9,684.322 1694.46,684.322 1695.02,684.322 1695.58,684.322 1696.14,684.322 1696.7,684.322 1697.26,684.322 1697.82,684.322 1698.38,684.322 1698.94,684.322 1699.5,684.322 1700.05,684.322 1700.61,684.322 1701.17,684.322 1701.73,684.322 1702.29,684.322 1702.85,684.322 1703.41,684.322 1703.97,684.322 1704.53,684.322 1705.09,684.322 1705.65,684.322 1706.21,684.322 1706.77,684.322 1707.32,684.322 1707.88,684.322 1708.44,684.322 1709,684.322 1709.56,684.322 1710.12,684.322 1710.68,684.322 1711.24,684.322 1711.8,684.322 1712.36,684.322 1712.92,684.322 1713.48,684.322 1714.04,684.322 1714.6,684.322 1715.15,684.322 1715.71,684.322 1716.27,684.322 1716.83,684.322 1717.39,684.322 1717.95,684.322 1718.51,684.322 1719.07,684.322 1719.63,684.322 1720.19,684.322 1720.75,684.322 1721.31,684.322 1721.87,684.322 1722.42,684.322 1722.98,684.322 1723.54,684.322 1724.1,684.322 1724.66,684.322 1725.22,684.322 1725.78,684.322 1726.34,684.322 1726.9,684.322 1727.46,684.322 1728.02,684.322 1728.58,684.322 1729.14,684.322 1729.69,684.322 1730.25,684.322 1730.81,684.322 1731.37,684.322 1731.93,684.322 1732.49,684.322 1733.05,684.322 1733.61,684.322 1734.17,684.322 1734.73,684.322 1735.29,684.322 1735.85,684.322 1736.41,684.322 1736.97,684.322 1737.52,684.322 1738.08,684.322 1738.64,684.322 1739.2,684.322 1739.76,684.322 1740.32,684.322 1740.88,684.322 1741.44,684.322 1742,684.322 1742.56,684.322 1743.12,684.322 1743.68,684.322 1744.24,684.322 1744.79,684.322 1745.35,684.322 1745.91,684.322 1746.47,684.322 1747.03,684.322 1747.59,684.322 1748.15,684.322 1748.71,684.322 1749.27,684.322 1749.83,684.322 1750.39,684.322 1750.95,684.322 1751.51,684.322 1752.06,684.322 1752.62,684.322 1753.18,684.322 1753.74,684.322 1754.3,684.322 1754.86,684.322 1755.42,684.322 1755.98,684.322 1756.54,684.322 1757.1,684.322 1757.66,684.322 1758.22,684.322 1758.78,684.322 1759.34,684.322 1759.89,684.322 1760.45,684.322 1761.01,684.322 1761.57,684.322 1762.13,684.322 1762.69,684.322 1763.25,684.322 1763.81,684.322 1764.37,684.322 1764.93,684.322 1765.49,684.322 1766.05,684.322 1766.61,684.322 1767.16,684.322 1767.72,684.322 1768.28,684.322 1768.84,684.322 1769.4,684.322 1769.96,684.322 1770.52,684.322 1771.08,684.322 1771.64,684.322 1772.2,684.322 1772.76,684.322 1773.32,684.322 1773.88,684.322 1774.43,684.322 1774.99,684.322 1775.55,684.322 1776.11,684.322 1776.67,684.322 1777.23,684.322 1777.79,684.322 1778.35,684.322 1778.91,684.322 1779.47,684.322 1780.03,684.322 1780.59,684.322 1781.15,684.322 1781.71,684.322 1782.26,684.322 1782.82,684.322 1783.38,684.322 1783.94,684.322 1784.5,684.322 1785.06,684.322 1785.62,684.322 1786.18,684.322 1786.74,684.322 1787.3,684.322 1787.86,684.322 1788.42,684.322 1788.98,684.322 1789.53,684.322 1790.09,684.322 1790.65,684.322 1791.21,684.322 1791.77,684.322 1792.33,684.322 1792.89,684.322 1793.45,684.322 1794.01,684.322 1794.57,684.322 1795.13,684.322 1795.69,684.322 1796.25,684.322 1796.8,684.322 1797.36,684.322 1797.92,684.322 1798.48,684.322 1799.04,684.322 1799.6,684.322 1800.16,684.322 1800.72,684.322 1801.28,684.322 1801.84,684.322 1802.4,684.322 1802.96,684.322 1803.52,684.322 1804.08,684.322 1804.63,684.322 1805.19,684.322 1805.75,684.322 1806.31,684.322 1806.87,684.322 1807.43,684.322 1807.99,684.322 1808.55,684.322 1809.11,684.322 1809.67,684.322 1810.23,684.322 1810.79,684.322 1811.35,684.322 1811.9,684.322 1812.46,684.322 1813.02,684.322 1813.58,684.322 1814.14,684.322 1814.7,684.322 1815.26,684.322 1815.82,684.322 1816.38,684.322 1816.94,684.322 1817.5,684.322 1818.06,684.322 1818.62,684.322 1819.18,684.322 1819.73,684.322 1820.29,684.322 1820.85,684.322 1821.41,684.322 1821.97,684.322 1822.53,684.322 1823.09,684.322 1823.65,684.322 1824.21,684.322 1824.77,684.322 1825.33,684.322 1825.89,684.322 1826.45,684.322 1827,684.322 1827.56,684.322 1828.12,684.322 1828.68,684.322 1829.24,684.322 1829.8,684.322 1830.36,684.322 1830.92,684.322 1831.48,684.322 1832.04,684.322 1832.6,684.322 1833.16,684.322 1833.72,684.322 1834.27,684.322 1834.83,684.322 1835.39,684.322 1835.95,684.322 1836.51,684.322 1837.07,684.322 1837.63,684.322 1838.19,684.322 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0340572639669645 ± 0.020159949904529864\nProjected Energy: -4.018797538772063 ± (0.004661382182887586, 0.004507590662013783)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.557006</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3977e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.601e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.079e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.403e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.866e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.628e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321605\n -3.363124291613378\n -0.7590191922770799\n  0.13584182219622143\n  0.15789998694608798\n  0.8767114411781396\n  1.5305929970973349\n  1.5835732611867375\n  3.0728703303258547\n  3.1256726539518453\n  4.862107221562172\n  6.2606948503805935\n  6.402671211183113\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix(p; ELTYPE = Float64) <: AbstractObservable{Matrix{ELTYPE}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1)=>0.5, BoseFS(2,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix(1)\n\njulia> dot(dvec_b,Op1,dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix(2)\nReducedDensityMatrix(2)\n\njulia> dot(dvec_b,Op2,dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0)=>0.5, FermiFS(0,1,1,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f,Op2,dvec_f)\n6×6 Hermitian{Float64, Matrix{Float64}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractObservable, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractObservable)\n\nRepresent the adjoint of an AbstractObservable. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractObservable, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
