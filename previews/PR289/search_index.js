var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.20901325838873275 ± 0.001515715357567473\n   G2(1) = 0.9174258054901069 ± 0.0008343729082516781\n   G2(2) = 0.982140877633112 ± 0.0006332772438204584\n   G2(3) = 0.9918533753648288 ± 0.001056571981762521\n   G2(4) = 0.982140877633112 ± 0.0006332772438204584\n   G2(5) = 0.9174258054901069 ± 0.0008343729082516781\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.074630889879314 ± 0.14074364810702455\n   Replica 2: -4.017678563484596 ± 0.12507149762566963\n   Replica 3: -3.9839654463486367 ± 0.14343488552293873\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip480\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip480)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip481\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip480)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip482\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.82 2211.02,1260.82 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.49 2211.02,1003.49 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.16 2211.02,746.16 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.828 2211.02,488.828 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.497 2211.02,231.497 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.82 423.181,1260.82 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.49 423.181,1003.49 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.16 423.181,746.16 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.828 423.181,488.828 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.497 423.181,231.497 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.96 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.96 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.62 356.339 1246.62 M356.339 1242.92 Q362.149 1242.92 365.205 1247.52 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.58 365.205 1274.19 Q362.149 1278.77 356.339 1278.77 Q350.529 1278.77 347.45 1274.19 Q344.395 1269.58 344.395 1260.86 Q344.395 1252.11 347.45 1247.52 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M290.043 1016.84 L306.363 1016.84 L306.363 1020.77 L284.418 1020.77 L284.418 1016.84 Q287.08 1014.08 291.664 1009.45 Q296.27 1004.8 297.451 1003.46 Q299.696 1000.93 300.576 999.197 Q301.478 997.437 301.478 995.748 Q301.478 992.993 299.534 991.257 Q297.613 989.521 294.511 989.521 Q292.312 989.521 289.858 990.285 Q287.427 991.049 284.65 992.6 L284.65 987.877 Q287.474 986.743 289.927 986.164 Q292.381 985.586 294.418 985.586 Q299.789 985.586 302.983 988.271 Q306.177 990.956 306.177 995.447 Q306.177 997.576 305.367 999.498 Q304.58 1001.4 302.474 1003.99 Q301.895 1004.66 298.793 1007.88 Q295.691 1011.07 290.043 1016.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M316.224 986.211 L334.58 986.211 L334.58 990.146 L320.506 990.146 L320.506 998.618 Q321.524 998.271 322.543 998.109 Q323.562 997.924 324.58 997.924 Q330.367 997.924 333.747 1001.09 Q337.126 1004.27 337.126 1009.68 Q337.126 1015.26 333.654 1018.36 Q330.182 1021.44 323.862 1021.44 Q321.687 1021.44 319.418 1021.07 Q317.173 1020.7 314.765 1019.96 L314.765 1015.26 Q316.849 1016.4 319.071 1016.95 Q321.293 1017.51 323.77 1017.51 Q327.774 1017.51 330.112 1015.4 Q332.45 1013.29 332.45 1009.68 Q332.45 1006.07 330.112 1003.97 Q327.774 1001.86 323.77 1001.86 Q321.895 1001.86 320.02 1002.28 Q318.168 1002.69 316.224 1003.57 L316.224 986.211 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M356.339 989.289 Q352.728 989.289 350.899 992.854 Q349.094 996.396 349.094 1003.53 Q349.094 1010.63 350.899 1014.2 Q352.728 1017.74 356.339 1017.74 Q359.973 1017.74 361.779 1014.2 Q363.608 1010.63 363.608 1003.53 Q363.608 996.396 361.779 992.854 Q359.973 989.289 356.339 989.289 M356.339 985.586 Q362.149 985.586 365.205 990.192 Q368.284 994.775 368.284 1003.53 Q368.284 1012.25 365.205 1016.86 Q362.149 1021.44 356.339 1021.44 Q350.529 1021.44 347.45 1016.86 Q344.395 1012.25 344.395 1003.53 Q344.395 994.775 347.45 990.192 Q350.529 985.586 356.339 985.586 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M286.062 728.88 L304.418 728.88 L304.418 732.815 L290.344 732.815 L290.344 741.287 Q291.363 740.94 292.381 740.778 Q293.4 740.592 294.418 740.592 Q300.205 740.592 303.585 743.764 Q306.964 746.935 306.964 752.352 Q306.964 757.93 303.492 761.032 Q300.02 764.111 293.701 764.111 Q291.525 764.111 289.256 763.74 Q287.011 763.37 284.603 762.629 L284.603 757.93 Q286.687 759.065 288.909 759.62 Q291.131 760.176 293.608 760.176 Q297.613 760.176 299.951 758.069 Q302.288 755.963 302.288 752.352 Q302.288 748.741 299.951 746.634 Q297.613 744.528 293.608 744.528 Q291.733 744.528 289.858 744.944 Q288.006 745.361 286.062 746.241 L286.062 728.88 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M326.177 731.958 Q322.566 731.958 320.737 735.523 Q318.932 739.065 318.932 746.194 Q318.932 753.301 320.737 756.866 Q322.566 760.407 326.177 760.407 Q329.811 760.407 331.617 756.866 Q333.446 753.301 333.446 746.194 Q333.446 739.065 331.617 735.523 Q329.811 731.958 326.177 731.958 M326.177 728.255 Q331.987 728.255 335.043 732.861 Q338.122 737.444 338.122 746.194 Q338.122 754.921 335.043 759.528 Q331.987 764.111 326.177 764.111 Q320.367 764.111 317.288 759.528 Q314.233 754.921 314.233 746.194 Q314.233 737.444 317.288 732.861 Q320.367 728.255 326.177 728.255 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M356.339 731.958 Q352.728 731.958 350.899 735.523 Q349.094 739.065 349.094 746.194 Q349.094 753.301 350.899 756.866 Q352.728 760.407 356.339 760.407 Q359.973 760.407 361.779 756.866 Q363.608 753.301 363.608 746.194 Q363.608 739.065 361.779 735.523 Q359.973 731.958 356.339 731.958 M356.339 728.255 Q362.149 728.255 365.205 732.861 Q368.284 737.444 368.284 746.194 Q368.284 754.921 365.205 759.528 Q362.149 764.111 356.339 764.111 Q350.529 764.111 347.45 759.528 Q344.395 754.921 344.395 746.194 Q344.395 737.444 347.45 732.861 Q350.529 728.255 356.339 728.255 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M284.835 471.548 L307.057 471.548 L307.057 473.539 L294.511 506.108 L289.627 506.108 L301.432 475.484 L284.835 475.484 L284.835 471.548 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M316.224 471.548 L334.58 471.548 L334.58 475.484 L320.506 475.484 L320.506 483.956 Q321.524 483.609 322.543 483.447 Q323.562 483.261 324.58 483.261 Q330.367 483.261 333.747 486.433 Q337.126 489.604 337.126 495.021 Q337.126 500.599 333.654 503.701 Q330.182 506.78 323.862 506.78 Q321.687 506.78 319.418 506.409 Q317.173 506.039 314.765 505.298 L314.765 500.599 Q316.849 501.733 319.071 502.289 Q321.293 502.845 323.77 502.845 Q327.774 502.845 330.112 500.738 Q332.45 498.632 332.45 495.021 Q332.45 491.409 330.112 489.303 Q327.774 487.197 323.77 487.197 Q321.895 487.197 320.02 487.613 Q318.168 488.03 316.224 488.909 L316.224 471.548 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M356.339 474.627 Q352.728 474.627 350.899 478.192 Q349.094 481.734 349.094 488.863 Q349.094 495.97 350.899 499.534 Q352.728 503.076 356.339 503.076 Q359.973 503.076 361.779 499.534 Q363.608 495.97 363.608 488.863 Q363.608 481.734 361.779 478.192 Q359.973 474.627 356.339 474.627 M356.339 470.923 Q362.149 470.923 365.205 475.53 Q368.284 480.113 368.284 488.863 Q368.284 497.59 365.205 502.196 Q362.149 506.78 356.339 506.78 Q350.529 506.78 347.45 502.196 Q344.395 497.59 344.395 488.863 Q344.395 480.113 347.45 475.53 Q350.529 470.923 356.339 470.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M256.664 244.842 L264.303 244.842 L264.303 218.477 L255.992 220.143 L255.992 215.884 L264.256 214.217 L268.932 214.217 L268.932 244.842 L276.571 244.842 L276.571 248.777 L256.664 248.777 L256.664 244.842 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M296.015 217.296 Q292.404 217.296 290.576 220.861 Q288.77 224.402 288.77 231.532 Q288.77 238.639 290.576 242.203 Q292.404 245.745 296.015 245.745 Q299.65 245.745 301.455 242.203 Q303.284 238.639 303.284 231.532 Q303.284 224.402 301.455 220.861 Q299.65 217.296 296.015 217.296 M296.015 213.592 Q301.826 213.592 304.881 218.199 Q307.96 222.782 307.96 231.532 Q307.96 240.259 304.881 244.865 Q301.826 249.449 296.015 249.449 Q290.205 249.449 287.127 244.865 Q284.071 240.259 284.071 231.532 Q284.071 222.782 287.127 218.199 Q290.205 213.592 296.015 213.592 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M326.177 217.296 Q322.566 217.296 320.737 220.861 Q318.932 224.402 318.932 231.532 Q318.932 238.639 320.737 242.203 Q322.566 245.745 326.177 245.745 Q329.811 245.745 331.617 242.203 Q333.446 238.639 333.446 231.532 Q333.446 224.402 331.617 220.861 Q329.811 217.296 326.177 217.296 M326.177 213.592 Q331.987 213.592 335.043 218.199 Q338.122 222.782 338.122 231.532 Q338.122 240.259 335.043 244.865 Q331.987 249.449 326.177 249.449 Q320.367 249.449 317.288 244.865 Q314.233 240.259 314.233 231.532 Q314.233 222.782 317.288 218.199 Q320.367 213.592 326.177 213.592 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M356.339 217.296 Q352.728 217.296 350.899 220.861 Q349.094 224.402 349.094 231.532 Q349.094 238.639 350.899 242.203 Q352.728 245.745 356.339 245.745 Q359.973 245.745 361.779 242.203 Q363.608 238.639 363.608 231.532 Q363.608 224.402 361.779 220.861 Q359.973 217.296 356.339 217.296 M356.339 213.592 Q362.149 213.592 365.205 218.199 Q368.284 222.782 368.284 231.532 Q368.284 240.259 365.205 244.865 Q362.149 249.449 356.339 249.449 Q350.529 249.449 347.45 244.865 Q344.395 240.259 344.395 231.532 Q344.395 222.782 347.45 218.199 Q350.529 213.592 356.339 213.592 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip482)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.497 4017.76,231.497 \"/>\n<polyline clip-path=\"url(#clip482)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1248.44 458.828,1248.07 459.396,1247.63 459.964,1247.12 460.533,1246.54 461.101,1245.88 461.669,1245.14 462.238,1244.33 462.806,1243.43 463.375,1242.44 463.943,1241.36 464.511,1240.18 465.08,1238.9 465.648,1237.5 466.216,1234.95 466.785,1233.32 467.353,1229.5 467.921,1227.59 468.49,1225.53 469.058,1223.33 469.626,1220.98 470.195,1218.43 470.763,1215.74 471.331,1211.84 471.9,1208.73 472.468,1203.43 473.036,1199.9 473.605,1195.17 474.173,1191.19 474.741,1186.01 475.31,1180.56 475.878,1176.01 476.446,1171.18 477.015,1166.18 477.583,1160.95 478.152,1154.47 478.72,1147.79 479.288,1141.94 479.857,1135.89 480.425,1129.62 480.993,1123.1 481.562,1114.23 482.13,1107.24 482.698,1099.06 483.267,1091.63 483.835,1082.97 484.403,1072.99 484.972,1063.95 485.54,1054.74 486.108,1045.4 486.677,1034.95 487.245,1024.14 487.813,1014.32 488.382,1003.34 488.95,993.374 489.518,983.237 490.087,974.135 490.655,963.79 491.224,953.445 491.792,943.119 492.36,930.506 492.929,921.075 493.497,909.549 494.065,900.015 494.634,888.466 495.202,877.958 495.77,868.456 496.339,857.89 496.907,846.255 497.475,834.653 498.044,825.183 498.612,812.529 499.18,802.965 499.749,791.37 500.317,778.883 500.885,768.596 501.454,758.267 502.022,745.995 502.59,736.085 503.159,725.148 503.727,714.281 504.295,704.715 504.864,693.174 505.432,682.836 506.001,672.716 506.569,662.536 507.137,651.549 507.706,641.723 508.274,632.076 508.842,625.509 509.411,618.136 509.979,609.761 510.547,600.396 511.116,591.244 511.684,582.193 512.252,573.452 512.821,566.803 513.389,557.04 513.957,550.882 514.526,543.642 515.094,535.362 515.662,528.478 516.231,521.612 516.799,512.897 517.367,506.401 517.936,500.199 518.504,491.998 519.072,483.886 519.641,478.206 520.209,473.543 520.778,467.901 521.346,462.392 521.914,455.816 522.483,449.616 523.051,446.519 523.619,439.441 524.188,435.512 524.756,429.412 525.324,423.467 525.893,420.859 526.461,416.085 527.029,412.597 527.598,406.998 528.166,402.892 528.734,399.775 529.303,395.533 529.871,391.607 530.439,387.782 531.008,384.993 531.576,381.203 532.144,375.531 532.713,373.144 533.281,369.462 533.85,363.018 534.418,359.847 534.986,358.827 535.555,355.861 536.123,352.852 536.691,349.865 537.26,348.091 537.828,346.262 538.396,343.386 538.965,342.615 539.533,338.546 540.101,334.741 540.67,334.27 541.238,331.576 541.806,328.16 542.375,325.731 542.943,323.242 543.511,321.892 544.08,318.574 544.648,315.254 545.216,315.115 545.785,314.01 546.353,313.888 546.921,308.628 547.49,307.545 548.058,305.682 548.627,304.757 549.195,302.726 549.763,300.807 550.332,299.119 550.9,298.138 551.468,299.427 552.037,295.545 552.605,293.689 553.173,293.968 553.742,291.118 554.31,289.486 554.878,287.897 555.447,287.11 556.015,286.507 556.583,285.803 557.152,286.424 557.72,285.612 558.288,283.854 558.857,280.147 559.425,279.591 559.993,281.151 560.562,280.48 561.13,280.993 561.698,280.132 562.267,279.494 562.835,277.825 563.404,275.095 563.972,275.732 564.54,274.038 565.109,272.424 565.677,271.904 566.245,271.568 566.814,271.081 567.382,272.615 567.95,273.094 568.519,272.297 569.087,271.46 569.655,269.918 570.224,267.146 570.792,265.756 571.36,266.489 571.929,267.992 572.497,266.288 573.065,266.723 573.634,264.024 574.202,263.577 574.77,262.708 575.339,261.047 575.907,261.747 576.476,261.316 577.044,260.892 577.612,259.523 578.181,259.075 578.749,256.605 579.317,254.365 579.886,254.299 580.454,254.27 581.022,254.229 581.591,251.736 582.159,253.877 582.727,253.754 583.296,254.709 583.864,253.268 584.432,254.298 585.001,252.079 585.569,249.945 586.137,251.114 586.706,251.097 587.274,251.061 587.842,248.046 588.411,247.418 588.979,246.555 589.547,245.694 590.116,248.869 590.684,248.885 591.253,246.619 591.821,246.997 592.389,245.293 592.958,245.28 593.526,244.622 594.094,244.883 594.663,245.147 595.231,246.44 595.799,246.572 596.368,244.699 596.936,242.921 597.504,244.356 598.073,242.745 598.641,242.882 599.209,242.286 599.778,244.613 600.346,244.823 600.914,243.258 601.483,244.482 602.051,243.462 602.619,242.962 603.188,244.319 603.756,245.474 604.325,245.596 604.893,243.501 605.461,243.807 606.03,244.226 606.598,242.416 607.166,239.301 607.735,239.657 608.303,240.253 608.871,241.781 609.44,242.161 610.008,242.41 610.576,241.702 611.145,242.076 611.713,242.29 612.281,244.677 612.85,244.802 613.418,243.821 613.986,242.797 614.555,243.107 615.123,246.312 615.691,247.173 616.26,246.786 616.828,246.816 617.396,246.708 617.965,245.486 618.533,245.69 619.102,245.558 619.67,244.383 620.238,242.445 620.807,242.459 621.375,241.346 621.943,240.377 622.512,239.709 623.08,239.946 623.648,240.206 624.217,242.755 624.785,241.542 625.353,240.479 625.922,239.324 626.49,239.519 627.058,239.51 627.627,238.314 628.195,238.613 628.763,237.868 629.332,237.323 629.9,234.71 630.468,236.104 631.037,236.506 631.605,234.806 632.173,236.422 632.742,237.845 633.31,238.064 633.879,239.244 634.447,238.381 635.015,236.629 635.584,235.02 636.152,235.362 636.72,236.839 637.289,237.179 637.857,240.346 638.425,240.578 638.994,237.33 639.562,238.453 640.13,236.497 640.699,236.798 641.267,236.136 641.835,235.501 642.404,234.105 642.972,232.373 643.54,233.015 644.109,234.86 644.677,234.384 645.245,235.761 645.814,235.908 646.382,233.218 646.951,232.693 647.519,233.159 648.087,233.71 648.656,233.017 649.224,233.544 649.792,231.998 650.361,231.733 650.929,231.321 651.497,228.955 652.066,228.96 652.634,230.889 653.202,231.66 653.771,233.23 654.339,233.718 654.907,234.164 655.476,236.837 656.044,236.134 656.612,238.407 657.181,237.496 657.749,239.89 658.317,236.024 658.886,237.467 659.454,237.802 660.022,237.949 660.591,238.114 661.159,238.162 661.728,236.307 662.296,234.444 662.864,233.841 663.433,234.339 664.001,235.857 664.569,233.219 665.138,234.563 665.706,235.062 666.274,235.283 666.843,235.911 667.411,236.934 667.979,234.049 668.548,235.554 669.116,235.119 669.684,233.33 670.253,235.905 670.821,234.168 671.389,234.792 671.958,236.291 672.526,236.8 673.094,236.119 673.663,237.504 674.231,235.657 674.799,234.766 675.368,237.327 675.936,238.35 676.505,237.318 677.073,235.404 677.641,233.661 678.21,232.128 678.778,233.763 679.346,234.244 679.915,236.57 680.483,235.696 681.051,234.619 681.62,233.843 682.188,234.371 682.756,234.683 683.325,234.935 683.893,233.264 684.461,233.56 685.03,234.977 685.598,236.342 686.166,238.658 686.735,238.61 687.303,239.783 687.871,242.864 688.44,240.308 689.008,239.188 689.577,239.191 690.145,239.181 690.713,237.137 691.282,237.463 691.85,239.648 692.418,238.445 692.987,238.318 693.555,238.255 694.123,237.204 694.692,237.152 695.26,237.989 695.828,241.016 696.397,240.607 696.965,241.3 697.533,241.204 698.102,240.019 698.67,239.961 699.238,239.937 699.807,238.614 700.375,238.43 700.943,238.209 701.512,240.027 702.08,239.622 702.648,239.352 703.217,240.05 703.785,236.692 704.354,237.572 704.922,233.269 705.49,233.44 706.059,230.536 706.627,229.977 707.195,233.39 707.764,235.765 708.332,233.8 708.9,235.204 709.469,234.161 710.037,237.509 710.605,237.555 711.174,238.499 711.742,238.41 712.31,238.254 712.879,239.073 713.447,238.798 714.015,238.422 714.584,236.185 715.152,237.225 715.72,238.172 716.289,237.936 716.857,237.774 717.425,238.428 717.994,239.027 718.562,239.95 719.131,242.713 719.699,242.156 720.267,240.514 720.836,237.996 721.404,240.871 721.972,239.346 722.541,239.058 723.109,237.661 723.677,237.295 724.246,236.035 724.814,233.65 725.382,232.703 725.951,233.155 726.519,233.33 727.087,231.403 727.656,228.593 728.224,229.138 728.792,231.404 729.361,230.644 729.929,230.573 730.497,231.891 731.066,232.868 731.634,227.874 732.203,228.356 732.771,228.949 733.339,230.448 733.908,232.942 734.476,230.216 735.044,229.546 735.613,228.886 736.181,232.468 736.749,233.88 737.318,235.867 737.886,236.723 738.454,236.606 739.023,235.416 739.591,234.102 740.159,231.933 740.728,234.217 741.296,234.263 741.864,236.238 742.433,236.156 743.001,236.179 743.569,235.985 744.138,234.824 744.706,234.447 745.274,236.532 745.843,238.428 746.411,242.186 746.98,240.354 747.548,238.891 748.116,239.468 748.685,239.083 749.253,237.403 749.821,238.22 750.39,238.546 750.958,238.207 751.526,239.056 752.095,239.552 752.663,236.948 753.231,237.735 753.8,237.425 754.368,237.066 754.936,235.777 755.505,234.526 756.073,234.275 756.641,234.152 757.21,234.013 757.778,233.821 758.346,234.809 758.915,234.644 759.483,232.399 760.052,231.274 760.62,231.467 761.188,232.565 761.757,233.559 762.325,230.273 762.893,230.399 763.462,230.611 764.03,231.574 764.598,228.552 765.167,227.811 765.735,229.126 766.303,230.47 766.872,228.485 767.44,225.734 768.008,225.138 768.577,225.615 769.145,225.968 769.713,224.487 770.282,221.868 770.85,222.635 771.418,223.481 771.987,224.144 772.555,224.613 773.123,226.11 773.692,227.661 774.26,227.046 774.829,227.506 775.397,227.869 775.965,228.409 776.534,232.932 777.102,233.038 777.67,233.906 778.239,233.166 778.807,234.243 779.375,234.223 779.944,234.143 780.512,233.234 781.08,231.165 781.649,230.109 782.217,231.336 782.785,230.461 783.354,230.773 783.922,232.925 784.49,232.868 785.059,231.974 785.627,232.183 786.195,232.256 786.764,232.645 787.332,233.717 787.9,233.722 788.469,234.836 789.037,235.705 789.606,236.468 790.174,236.189 790.742,235.123 791.311,234.954 791.879,234.911 792.447,233.792 793.016,233.687 793.584,232.756 794.152,232.849 794.721,230.669 795.289,231.097 795.857,233.347 796.426,234.462 796.994,232.257 797.562,234.538 798.131,233.284 798.699,233.293 799.267,233.399 799.836,234.483 800.404,234.265 800.972,233.233 801.541,233.303 802.109,233.585 802.678,230.467 803.246,231.725 803.814,231.813 804.383,232.798 804.951,235.093 805.519,234.929 806.088,235.813 806.656,235.635 807.224,235.684 807.793,234.52 808.361,235.374 808.929,235.31 809.498,235.255 810.066,234.049 810.634,233.056 811.203,231.975 811.771,231.975 812.339,233.189 812.908,231.154 813.476,229.407 814.044,229.438 814.613,229.584 815.181,230.736 815.749,230.782 816.318,230.984 816.886,233.354 817.455,234.454 818.023,238.356 818.591,235.844 819.16,233.621 819.728,233.425 820.296,233.291 820.865,233.18 821.433,233.076 822.001,231.091 822.57,230.308 823.138,231.548 823.706,231.732 824.275,231.966 824.843,231.927 825.411,232.152 825.98,232.182 826.548,232.244 827.116,234.21 827.685,234.388 828.253,236.088 828.821,235.915 829.39,234.613 829.958,233.583 830.526,234.558 831.095,234.442 831.663,236.205 832.232,235.044 832.8,232.703 833.368,233.618 833.937,233.623 834.505,232.869 835.073,232.837 835.642,232.803 836.21,232.837 836.778,232.842 837.347,232.889 837.915,232.896 838.483,234.879 839.052,235.7 839.62,236.446 840.188,237.046 840.757,237.802 841.325,237.277 841.893,235.738 842.462,234.397 843.03,233.226 843.598,233.01 844.167,233.011 844.735,230.729 845.304,228.755 845.872,229.158 846.44,229.326 847.009,228.372 847.577,228.414 848.145,228.542 848.714,228.812 849.282,227.141 849.85,228.409 850.419,231.614 850.987,232.386 851.555,232.407 852.124,233.512 852.692,233.551 853.26,233.772 853.829,231.559 854.397,230.592 854.965,229.65 855.534,229.808 856.102,229.895 856.67,230.903 857.239,232.962 857.807,234.987 858.375,233.694 858.944,230.591 859.512,229.539 860.081,231.713 860.649,232.957 861.217,232.789 861.786,232.887 862.354,233.571 862.922,234.552 863.491,233.439 864.059,234.281 864.627,234.045 865.196,233.891 865.764,232.839 866.332,232.885 866.901,233.011 867.469,230.922 868.037,230.917 868.606,231.074 869.174,231.149 869.742,233.244 870.311,232.865 870.879,232.853 871.447,235.777 872.016,236.467 872.584,234.131 873.152,233.881 873.721,232.614 874.289,231.537 874.858,230.462 875.426,229.461 875.994,229.454 876.563,228.384 877.131,229.576 877.699,230.719 878.268,230.91 878.836,229.882 879.404,231.085 879.973,230.165 880.541,230.213 881.109,231.138 881.678,231.162 882.246,230.151 882.814,232.283 883.383,231.047 883.951,231.309 884.519,230.233 885.088,230.462 885.656,231.648 886.224,230.722 886.793,230.784 887.361,231.853 887.93,230.672 888.498,230.734 889.066,231.702 889.635,230.614 890.203,230.585 890.771,229.826 891.34,230.064 891.908,230.05 892.476,230.916 893.045,228.983 893.613,229.068 894.181,228.178 894.75,229.555 895.318,230.917 895.886,234.087 896.455,233.936 897.023,232.804 897.591,237.001 898.16,237.71 898.728,239.63 899.296,239.112 899.865,238.53 900.433,234.925 901.001,234.659 901.57,234.435 902.138,234.391 902.707,236.25 903.275,235.742 903.843,235.632 904.412,234.046 904.98,233.991 905.548,233.777 906.117,234.757 906.685,232.464 907.253,233.438 907.822,232.28 908.39,234.354 908.958,233.905 909.527,232.504 910.095,233.526 910.663,234.429 911.232,232.048 911.8,232.688 912.368,231.677 912.937,229.786 913.505,226.808 914.073,227.044 914.642,230.605 915.21,230.642 915.779,232.591 916.347,231.283 916.915,231.09 917.484,229.083 918.052,228.402 918.62,229.637 919.189,230.916 919.757,230.822 920.325,229.096 920.894,228.254 921.462,229.589 922.03,228.604 922.599,227.836 923.167,226.246 923.735,225.751 924.304,227.14 924.872,228.593 925.44,229.113 926.009,231.395 926.577,231.512 927.145,230.447 927.714,229.436 928.282,229.742 928.85,231.104 929.419,231.212 929.987,231.262 930.556,232.383 931.124,231.406 931.692,232.519 932.261,233.473 932.829,231.283 933.397,229.35 933.966,230.739 934.534,228.954 935.102,231.166 935.671,234.302 936.239,233.354 936.807,232.308 937.376,231.176 937.944,232.582 938.512,228.365 939.081,228.73 939.649,228.045 940.217,227.345 940.786,227.886 941.354,227.256 941.922,227.779 942.491,230.24 943.059,232.573 943.627,231.541 944.196,232.5 944.764,232.643 945.333,233.578 945.901,233.366 946.469,232.161 947.038,234.25 947.606,232.226 948.174,235.408 948.743,235.255 949.311,235.005 949.879,231.879 950.448,231.848 951.016,231.716 951.584,231.742 952.153,232.668 952.721,232.635 953.289,231.743 953.858,231.847 954.426,229.866 954.994,232.358 955.563,233.252 956.131,234.236 956.699,233.298 957.268,234.455 957.836,234.403 958.405,232.029 958.973,232.017 959.541,233.084 960.11,234.134 960.678,228.639 961.246,227.891 961.815,228.296 962.383,228.059 962.951,230.515 963.52,231.561 964.088,231.77 964.656,232.841 965.225,231.759 965.793,232.657 966.361,232.828 966.93,231.719 967.498,232.044 968.066,230.955 968.635,230.305 969.203,230.278 969.771,231.436 970.34,231.54 970.908,231.823 971.476,233.941 972.045,234.847 972.613,234.777 973.182,235.523 973.75,235.15 974.318,232.947 974.887,233.114 975.455,233.283 976.023,232.149 976.592,231.032 977.16,232.127 977.728,234.181 978.297,237.23 978.865,233.804 979.433,233.741 980.002,233.57 980.57,233.359 981.138,235.385 981.707,236.207 982.275,234.817 982.843,236.787 983.412,234.456 983.98,234.255 984.548,234.031 985.117,234.823 985.685,233.612 986.253,235.539 986.822,236.254 987.39,237.141 987.959,234.539 988.527,234.356 989.095,235.086 989.664,235.013 990.232,235.709 990.8,234.242 991.369,233.933 991.937,233.503 992.505,233.186 993.074,233.099 993.642,233.5 994.21,235.085 994.779,233.692 995.347,234.515 995.915,234.355 996.484,234.056 997.052,234.84 997.62,234.643 998.189,234.388 998.757,234.062 999.325,236.135 999.894,235.719 1000.46,235.459 1001.03,234.925 1001.6,233.583 1002.17,234.451 1002.74,235.114 1003.3,233.677 1003.87,236.502 1004.44,237.119 1005.01,235.61 1005.58,237.162 1006.15,236.629 1006.71,235.985 1007.28,235.338 1007.85,234.966 1008.42,234.364 1008.99,233.757 1009.56,233.351 1010.12,232.94 1010.69,229.716 1011.26,230.47 1011.83,231.358 1012.4,232.118 1012.97,228.791 1013.53,227.945 1014.1,225.996 1014.67,225.168 1015.24,224.307 1015.81,226.756 1016.38,226.948 1016.94,228.134 1017.51,230.259 1018.08,230.055 1018.65,226.906 1019.22,225.984 1019.79,227.296 1020.35,227.647 1020.92,225.879 1021.49,225.163 1022.06,227.481 1022.63,226.735 1023.2,228.224 1023.76,227.394 1024.33,227.581 1024.9,227.8 1025.47,228.059 1026.04,226.866 1026.61,224.888 1027.17,225.428 1027.74,225.944 1028.31,229.429 1028.88,230.537 1029.45,228.548 1030.02,229.684 1030.58,229.803 1031.15,229.989 1031.72,228.013 1032.29,228.339 1032.86,225.503 1033.43,228.846 1033.99,230.084 1034.56,230.029 1035.13,229.107 1035.7,230.454 1036.27,232.499 1036.84,231.491 1037.4,232.561 1037.97,232.482 1038.54,231.495 1039.11,232.634 1039.68,230.355 1040.25,228.417 1040.81,227.638 1041.38,227.82 1041.95,227.038 1042.52,227.282 1043.09,227.431 1043.66,227.854 1044.22,228.144 1044.79,229.397 1045.36,226.463 1045.93,225.84 1046.5,226.227 1047.07,227.612 1047.63,229.088 1048.2,229.39 1048.77,230.757 1049.34,231.836 1049.91,231.688 1050.48,230.868 1051.05,230.897 1051.61,231.091 1052.18,229.37 1052.75,230.708 1053.32,230.777 1053.89,229.849 1054.46,229.167 1055.02,230.522 1055.59,231.779 1056.16,229.885 1056.73,230.97 1057.3,232.021 1057.87,232.167 1058.43,234.421 1059,234.288 1059.57,234.95 1060.14,235.841 1060.71,236.55 1061.28,235.179 1061.84,236.036 1062.41,236.858 1062.98,237.673 1063.55,237.146 1064.12,235.832 1064.69,236.995 1065.25,237.584 1065.82,235.068 1066.39,233.728 1066.96,232.657 1067.53,231.649 1068.1,230.888 1068.66,229.897 1069.23,229.973 1069.8,231.084 1070.37,231.137 1070.94,231.099 1071.51,231.063 1072.07,232.159 1072.64,231.121 1073.21,232.156 1073.78,230.098 1074.35,230.016 1074.92,230.263 1075.48,231.485 1076.05,231.615 1076.62,232.561 1077.19,232.84 1077.76,232.828 1078.33,232.848 1078.89,232.678 1079.46,232.612 1080.03,233.719 1080.6,234.749 1081.17,236.66 1081.74,236.269 1082.3,237.197 1082.87,234.753 1083.44,234.42 1084.01,233.159 1084.58,233.906 1085.15,232.979 1085.71,233.739 1086.28,234.611 1086.85,235.353 1087.42,234.017 1087.99,235.776 1088.56,237.413 1089.12,235.944 1089.69,236.568 1090.26,235.118 1090.83,234.103 1091.4,233.843 1091.97,231.367 1092.53,233.445 1093.1,234.338 1093.67,234.983 1094.24,234.821 1094.81,234.441 1095.38,235.199 1095.94,233.737 1096.51,233.226 1097.08,233.213 1097.65,234.048 1098.22,233.885 1098.79,231.714 1099.35,232.676 1099.92,232.319 1100.49,232.24 1101.06,234.011 1101.63,234.513 1102.2,233.3 1102.76,232.214 1103.33,231.942 1103.9,233.082 1104.47,234.026 1105.04,232.627 1105.61,232.461 1106.17,232.335 1106.74,231.246 1107.31,231.29 1107.88,232.172 1108.45,232.16 1109.02,232.024 1109.58,230.855 1110.15,231.085 1110.72,231.25 1111.29,231.013 1111.86,231.015 1112.43,230.966 1112.99,228.806 1113.56,227.849 1114.13,230.173 1114.7,230.112 1115.27,230.142 1115.84,229.054 1116.4,228.146 1116.97,228.288 1117.54,228.295 1118.11,227.463 1118.68,227.64 1119.25,225.867 1119.81,224.216 1120.38,224.655 1120.95,227.063 1121.52,227.409 1122.09,227.75 1122.66,226.939 1123.23,224.3 1123.79,224.839 1124.36,225.517 1124.93,228.009 1125.5,226.145 1126.07,227.74 1126.64,225.039 1127.2,224.519 1127.77,223.15 1128.34,223.724 1128.91,223.358 1129.48,222.817 1130.05,223.334 1130.61,223.075 1131.18,224.765 1131.75,225.228 1132.32,224.82 1132.89,222.087 1133.46,224.097 1134.02,222.923 1134.59,224.668 1135.16,226.572 1135.73,228.255 1136.3,226.565 1136.87,229.292 1137.43,227.597 1138,227.953 1138.57,227.302 1139.14,230.965 1139.71,232.215 1140.28,231.238 1140.84,230.471 1141.41,232.677 1141.98,232.521 1142.55,232.545 1143.12,235.695 1143.69,234.587 1144.25,236.566 1144.82,237.445 1145.39,237.154 1145.96,238.063 1146.53,237.737 1147.1,237.599 1147.66,236.992 1148.23,237.716 1148.8,238.432 1149.37,239.092 1149.94,238.489 1150.51,237.99 1151.07,237.706 1151.64,236.391 1152.21,235.052 1152.78,233.716 1153.35,233.591 1153.92,233.617 1154.48,234.542 1155.05,234.184 1155.62,231.871 1156.19,231.9 1156.76,230.941 1157.33,233.066 1157.89,234.991 1158.46,235.944 1159.03,235.88 1159.6,235.659 1160.17,236.456 1160.74,236.124 1161.3,234.037 1161.87,235.041 1162.44,234.762 1163.01,236.325 1163.58,234.946 1164.15,233.506 1164.71,233.359 1165.28,232.156 1165.85,233.073 1166.42,232.807 1166.99,231.449 1167.56,232.352 1168.12,232.245 1168.69,235.064 1169.26,234.825 1169.83,232.373 1170.4,231.463 1170.97,232.601 1171.53,232.599 1172.1,232.358 1172.67,232.268 1173.24,232.277 1173.81,235.302 1174.38,235.074 1174.94,234.781 1175.51,234.381 1176.08,234.109 1176.65,233.754 1177.22,231.452 1177.79,235.482 1178.35,235.976 1178.92,235.521 1179.49,235.125 1180.06,233.762 1180.63,233.556 1181.2,231.624 1181.76,230.413 1182.33,231.397 1182.9,231.46 1183.47,230.209 1184.04,227.172 1184.61,227.368 1185.17,227.686 1185.74,227.055 1186.31,227.438 1186.88,227.834 1187.45,227.992 1188.02,228.274 1188.58,228.645 1189.15,230.763 1189.72,229.594 1190.29,230.623 1190.86,229.686 1191.43,228.611 1192,227.684 1192.56,229.07 1193.13,229.341 1193.7,229.61 1194.27,228.586 1194.84,228.002 1195.41,230.263 1195.97,231.373 1196.54,230.599 1197.11,232.598 1197.68,232.561 1198.25,231.438 1198.82,232.492 1199.38,234.399 1199.95,235.272 1200.52,236.013 1201.09,235.621 1201.66,236.582 1202.23,233.175 1202.79,233.125 1203.36,233.989 1203.93,234.79 1204.5,232.413 1205.07,232.545 1205.64,232.555 1206.2,231.393 1206.77,230.225 1207.34,232.374 1207.91,231.016 1208.48,230.976 1209.05,230.968 1209.61,231.032 1210.18,231.108 1210.75,231.334 1211.32,230.452 1211.89,230.485 1212.46,229.668 1213.02,231.039 1213.59,230.923 1214.16,231.12 1214.73,232.143 1215.3,231.077 1215.87,230.961 1216.43,233.061 1217,231.704 1217.57,230.685 1218.14,231.582 1218.71,232.487 1219.28,233.428 1219.84,230.319 1220.41,230.269 1220.98,226.264 1221.55,227.535 1222.12,227.808 1222.69,229.064 1223.25,227.15 1223.82,228.533 1224.39,229.675 1224.96,229.752 1225.53,229.015 1226.1,230.448 1226.66,230.638 1227.23,229.509 1227.8,228.469 1228.37,230.762 1228.94,229.783 1229.51,230.115 1230.07,230.037 1230.64,230.158 1231.21,227.238 1231.78,228.531 1232.35,229.924 1232.92,231.181 1233.48,232.226 1234.05,233.115 1234.62,233.157 1235.19,234.053 1235.76,234.095 1236.33,233.869 1236.89,231.903 1237.46,232.798 1238.03,232.825 1238.6,233.702 1239.17,230.373 1239.74,229.629 1240.3,229.82 1240.87,230.005 1241.44,230.07 1242.01,230.169 1242.58,230.494 1243.15,229.65 1243.71,228.727 1244.28,227.03 1244.85,226.451 1245.42,226.927 1245.99,226.26 1246.56,227.798 1247.12,226.291 1247.69,224.647 1248.26,225.462 1248.83,225.881 1249.4,227.552 1249.97,228.924 1250.53,231.352 1251.1,234.637 1251.67,235.711 1252.24,236.548 1252.81,234.165 1253.38,234.245 1253.94,233.15 1254.51,234.081 1255.08,237.064 1255.65,236.729 1256.22,234.49 1256.79,236.391 1257.35,237.184 1257.92,235.758 1258.49,236.314 1259.06,235.997 1259.63,236.551 1260.2,235.085 1260.76,235.742 1261.33,237.363 1261.9,236.095 1262.47,234.71 1263.04,233.482 1263.61,233.119 1264.18,234.099 1264.74,232.824 1265.31,233.773 1265.88,233.754 1266.45,232.411 1267.02,227.195 1267.59,227.549 1268.15,226.875 1268.72,226.244 1269.29,225.362 1269.86,229.01 1270.43,230.281 1271,230.57 1271.56,230.745 1272.13,230.698 1272.7,230.778 1273.27,230.992 1273.84,231.068 1274.41,231.114 1274.97,230.974 1275.54,231.156 1276.11,232.24 1276.68,231.208 1277.25,232.31 1277.82,231.019 1278.38,231.086 1278.95,231.12 1279.52,232.088 1280.09,232.068 1280.66,231.056 1281.23,230.943 1281.79,233.161 1282.36,232.291 1282.93,231.172 1283.5,231.245 1284.07,231.472 1284.64,226.58 1285.2,228.04 1285.77,228.241 1286.34,229.489 1286.91,226.646 1287.48,227.227 1288.05,228.588 1288.61,229.961 1289.18,228.996 1289.75,229.388 1290.32,230.308 1290.89,228.476 1291.46,226.858 1292.02,225.935 1292.59,228.345 1293.16,229.625 1293.73,226.582 1294.3,227.92 1294.87,229.511 1295.43,227.714 1296,228.104 1296.57,226.231 1297.14,227.508 1297.71,225.879 1298.28,227.528 1298.84,228.757 1299.41,230.286 1299.98,230.269 1300.55,229.212 1301.12,229.553 1301.69,230.657 1302.25,231.792 1302.82,232.801 1303.39,233.701 1303.96,235.632 1304.53,235.384 1305.1,238.181 1305.66,236.961 1306.23,234.658 1306.8,233.554 1307.37,234.402 1307.94,234.257 1308.51,233.119 1309.07,230.061 1309.64,230.105 1310.21,231.215 1310.78,231.284 1311.35,232.42 1311.92,232.499 1312.48,235.996 1313.05,235.835 1313.62,234.662 1314.19,234.538 1314.76,234.34 1315.33,234.3 1315.89,234.247 1316.46,234.083 1317.03,232.018 1317.6,232.062 1318.17,230.914 1318.74,229.874 1319.3,228.883 1319.87,230.268 1320.44,230.396 1321.01,228.552 1321.58,229.808 1322.15,230.841 1322.71,233.145 1323.28,234.222 1323.85,233.017 1324.42,228.963 1324.99,228.269 1325.56,229.595 1326.12,231.799 1326.69,233.023 1327.26,234.077 1327.83,233.949 1328.4,233.792 1328.97,232.686 1329.53,231.656 1330.1,230.792 1330.67,229.904 1331.24,228.999 1331.81,230.297 1332.38,229.206 1332.94,231.581 1333.51,232.663 1334.08,234.656 1334.65,234.357 1335.22,234.279 1335.79,231.248 1336.36,232.328 1336.92,233.31 1337.49,232.283 1338.06,234.504 1338.63,235.53 1339.2,233.398 1339.77,235.555 1340.33,235.45 1340.9,235.115 1341.47,234.771 1342.04,233.702 1342.61,236.989 1343.18,235.67 1343.74,234.498 1344.31,235.13 1344.88,232.849 1345.45,232.785 1346.02,234.53 1346.59,233.248 1347.15,231.923 1347.72,233.055 1348.29,231.922 1348.86,231.89 1349.43,233.832 1350,233.648 1350.56,233.323 1351.13,233.174 1351.7,231.955 1352.27,232.168 1352.84,233.359 1353.41,232.392 1353.97,239.344 1354.54,238.616 1355.11,239.118 1355.68,238.587 1356.25,239.038 1356.82,241.679 1357.38,241.942 1357.95,242.209 1358.52,241.48 1359.09,242.818 1359.66,242.639 1360.23,243.731 1360.79,243.713 1361.36,244.68 1361.93,242.554 1362.5,241.508 1363.07,243.707 1363.64,242.625 1364.2,240.578 1364.77,242.716 1365.34,239.525 1365.91,235.675 1366.48,233.812 1367.05,234.551 1367.61,233.168 1368.18,232.744 1368.75,230.279 1369.32,228.285 1369.89,226.205 1370.46,227.214 1371.02,227.013 1371.59,229.114 1372.16,226.924 1372.73,224.887 1373.3,226.101 1373.87,226.009 1374.43,225.294 1375,224.474 1375.57,227.848 1376.14,226.951 1376.71,229.136 1377.28,226.108 1377.84,228.19 1378.41,230.996 1378.98,231.828 1379.55,231.751 1380.12,229.476 1380.69,229.683 1381.25,229.742 1381.82,228.672 1382.39,230.947 1382.96,229.906 1383.53,228.812 1384.1,228.95 1384.66,231.88 1385.23,231.971 1385.8,229.174 1386.37,228.023 1386.94,227.92 1387.51,225.927 1388.07,226.08 1388.64,226.211 1389.21,226.525 1389.78,226.748 1390.35,227.06 1390.92,227.047 1391.48,225.108 1392.05,225.435 1392.62,227.783 1393.19,226.998 1393.76,226.066 1394.33,227.343 1394.89,227.494 1395.46,226.715 1396.03,225.893 1396.6,226.341 1397.17,229.523 1397.74,229.343 1398.3,230.549 1398.87,232.557 1399.44,231.317 1400.01,230.242 1400.58,232.565 1401.15,232.39 1401.71,233.572 1402.28,233.243 1402.85,233.103 1403.42,231.899 1403.99,230.845 1404.56,230.785 1405.13,227.734 1405.69,228.178 1406.26,229.263 1406.83,226.115 1407.4,226.487 1407.97,227.053 1408.54,227.26 1409.1,226.581 1409.67,225.719 1410.24,225.103 1410.81,224.356 1411.38,219.895 1411.95,221.986 1412.51,221.651 1413.08,223.409 1413.65,223.98 1414.22,223.627 1414.79,224.364 1415.36,227.1 1415.92,227.451 1416.49,227.754 1417.06,228.268 1417.63,228.626 1418.2,227.898 1418.77,227.349 1419.33,225.934 1419.9,225.633 1420.47,226.11 1421.04,226.685 1421.61,231.233 1422.18,227.275 1422.74,227.76 1423.31,226.235 1423.88,226.978 1424.45,228.445 1425.02,225.79 1425.59,227.199 1426.15,226.566 1426.72,225.881 1427.29,226.581 1427.86,225.307 1428.43,226.024 1429,228.823 1429.56,226.116 1430.13,226.78 1430.7,229.479 1431.27,227.759 1431.84,229.333 1432.41,230.783 1432.97,232.245 1433.54,233.653 1434.11,233.6 1434.68,237.813 1435.25,235.728 1435.82,235.673 1436.38,236.325 1436.95,235.369 1437.52,236.285 1438.09,238.057 1438.66,237.857 1439.23,238.606 1439.79,238.361 1440.36,236.905 1440.93,239.846 1441.5,239.476 1442.07,241.051 1442.64,239.542 1443.2,238.129 1443.77,235.919 1444.34,235.692 1444.91,233.541 1445.48,233.414 1446.05,231.355 1446.61,231.682 1447.18,229.737 1447.75,231.888 1448.32,233.035 1448.89,233.907 1449.46,235.632 1450.02,237.307 1450.59,236.021 1451.16,235.886 1451.73,236.739 1452.3,235.414 1452.87,233.218 1453.43,232.154 1454,233.306 1454.57,232.212 1455.14,232.162 1455.71,231.155 1456.28,232.913 1456.84,234.825 1457.41,232.494 1457.98,234.605 1458.55,235.408 1459.12,235.268 1459.69,233.904 1460.25,230.714 1460.82,230.872 1461.39,234.051 1461.96,235.066 1462.53,232.692 1463.1,234.884 1463.66,234.776 1464.23,234.422 1464.8,233.184 1465.37,235.149 1465.94,236.99 1466.51,235.449 1467.07,236.135 1467.64,235.7 1468.21,234.984 1468.78,234.514 1469.35,234.437 1469.92,233.019 1470.48,234.907 1471.05,235.563 1471.62,234.163 1472.19,234.063 1472.76,232.777 1473.33,230.377 1473.89,229.395 1474.46,229.368 1475.03,229.493 1475.6,228.622 1476.17,229.734 1476.74,230.885 1477.31,231.62 1477.87,231.646 1478.44,231.606 1479.01,231.447 1479.58,231.577 1480.15,232.504 1480.72,231.17 1481.28,230.372 1481.85,227.327 1482.42,224.573 1482.99,226.841 1483.56,226.976 1484.13,226.306 1484.69,228.683 1485.26,228.882 1485.83,229.263 1486.4,229.443 1486.97,227.618 1487.54,227.807 1488.1,228.912 1488.67,228.969 1489.24,227.185 1489.81,225.517 1490.38,226.023 1490.95,229.321 1491.51,228.403 1492.08,230.677 1492.65,232.613 1493.22,234.746 1493.79,234.786 1494.36,233.534 1494.92,233.54 1495.49,234.582 1496.06,234.32 1496.63,236.115 1497.2,235.66 1497.77,235.402 1498.33,235.055 1498.9,234.9 1499.47,235.631 1500.04,233.362 1500.61,232.368 1501.18,232.325 1501.74,231.106 1502.31,231.977 1502.88,231.801 1503.45,230.778 1504.02,230.883 1504.59,230.013 1505.15,229.15 1505.72,229.268 1506.29,229.265 1506.86,229.4 1507.43,228.603 1508,227.825 1508.56,227.839 1509.13,229.055 1509.7,229.083 1510.27,229.213 1510.84,229.636 1511.41,230.801 1511.97,228.858 1512.54,229.187 1513.11,230.262 1513.68,229.444 1514.25,227.626 1514.82,230.799 1515.38,230.975 1515.95,228.917 1516.52,229.198 1517.09,227.099 1517.66,228.418 1518.23,227.694 1518.79,229.017 1519.36,230.467 1519.93,229.607 1520.5,228.839 1521.07,230.045 1521.64,230.472 1522.2,232.789 1522.77,234.825 1523.34,235.787 1523.91,238.3 1524.48,237.722 1525.05,235.133 1525.61,232.669 1526.18,232.652 1526.75,232.609 1527.32,234.828 1527.89,235.672 1528.46,235.225 1529.02,237.114 1529.59,236.814 1530.16,234.324 1530.73,232.079 1531.3,234.025 1531.87,235.021 1532.43,236.77 1533,237.594 1533.57,237.045 1534.14,236.613 1534.71,236.289 1535.28,234.938 1535.84,233.769 1536.41,233.467 1536.98,232.218 1537.55,234.163 1538.12,231.846 1538.69,231.585 1539.25,228.657 1539.82,229.949 1540.39,232.131 1540.96,233.08 1541.53,232.895 1542.1,233.617 1542.66,233.468 1543.23,233.255 1543.8,232.942 1544.37,232.763 1544.94,233.637 1545.51,232.325 1546.08,231.259 1546.64,230.243 1547.21,230.382 1547.78,229.361 1548.35,227.477 1548.92,229.66 1549.49,226.747 1550.05,225.948 1550.62,226.015 1551.19,224.237 1551.76,224.549 1552.33,227.876 1552.9,228.125 1553.46,229.474 1554.03,229.571 1554.6,229.834 1555.17,229.829 1555.74,230.253 1556.31,230.463 1556.87,229.496 1557.44,229.711 1558.01,230.001 1558.58,230.185 1559.15,230.097 1559.72,229.26 1560.28,231.487 1560.85,233.491 1561.42,234.352 1561.99,233.991 1562.56,232.769 1563.13,232.707 1563.69,233.591 1564.26,234.355 1564.83,234.134 1565.4,232.983 1565.97,232.781 1566.54,233.501 1567.1,229.005 1567.67,229.183 1568.24,229.487 1568.81,228.692 1569.38,227.897 1569.95,227 1570.51,226.329 1571.08,227.69 1571.65,228.187 1572.22,227.433 1572.79,226.689 1573.36,226.053 1573.92,230.671 1574.49,231.841 1575.06,234.042 1575.63,236.052 1576.2,236.795 1576.77,236.599 1577.33,239.275 1577.9,239.653 1578.47,236.02 1579.04,237.593 1579.61,235.083 1580.18,235.983 1580.74,238.624 1581.31,237.988 1581.88,235.541 1582.45,236.248 1583.02,234.747 1583.59,235.351 1584.15,235.039 1584.72,235.734 1585.29,234.386 1585.86,233.959 1586.43,233.78 1587,232.656 1587.56,231.408 1588.13,231.601 1588.7,233.504 1589.27,233.379 1589.84,235.197 1590.41,237.896 1590.97,237.245 1591.54,235.713 1592.11,235.227 1592.68,235.701 1593.25,234.341 1593.82,234.003 1594.38,233.779 1594.95,233.569 1595.52,233.131 1596.09,233.889 1596.66,235.536 1597.23,234.228 1597.79,230.953 1598.36,230.71 1598.93,234.709 1599.5,232.233 1600.07,228.969 1600.64,228.078 1601.2,229.385 1601.77,227.275 1602.34,231.557 1602.91,232.252 1603.48,233.133 1604.05,233.844 1604.61,231.449 1605.18,230.382 1605.75,230.125 1606.32,232.243 1606.89,230.008 1607.46,228.928 1608.02,223.978 1608.59,223.592 1609.16,226.205 1609.73,225.575 1610.3,223.817 1610.87,224.437 1611.43,223.619 1612,225.206 1612.57,227.739 1613.14,229.003 1613.71,230.228 1614.28,228.214 1614.84,230.122 1615.41,228.267 1615.98,228.652 1616.55,231.856 1617.12,232.762 1617.69,231.33 1618.26,232.226 1618.82,231.174 1619.39,232.115 1619.96,232.267 1620.53,232.245 1621.1,230.234 1621.67,228.182 1622.23,229.309 1622.8,227.342 1623.37,225.569 1623.94,226.013 1624.51,227.515 1625.08,225.669 1625.64,226.888 1626.21,224.199 1626.78,225.629 1627.35,226.994 1627.92,226.436 1628.49,226.691 1629.05,228.369 1629.62,227.399 1630.19,231.774 1630.76,230.845 1631.33,231.963 1631.9,229.729 1632.46,229.019 1633.03,233.242 1633.6,234.097 1634.17,233.7 1634.74,233.522 1635.31,234.301 1635.87,236.059 1636.44,235.59 1637.01,236.4 1637.58,234.05 1638.15,231.974 1638.72,232.099 1639.28,232.104 1639.85,233.047 1640.42,231.907 1640.99,232.024 1641.56,234.012 1642.13,232.925 1642.69,231.687 1643.26,231.472 1643.83,232.604 1644.4,231.767 1644.97,232.811 1645.54,236.878 1646.1,237.405 1646.67,237.1 1647.24,236.607 1647.81,236.408 1648.38,236.168 1648.95,234.785 1649.51,232.716 1650.08,231.482 1650.65,231.31 1651.22,231.441 1651.79,230.418 1652.36,231.49 1652.92,229.264 1653.49,230.241 1654.06,229.343 1654.63,229.586 1655.2,229.822 1655.77,227.936 1656.33,227.176 1656.9,227.591 1657.47,226.891 1658.04,229.13 1658.61,230.007 1659.18,228.015 1659.74,228.091 1660.31,228.35 1660.88,228.581 1661.45,231.309 1662.02,233.288 1662.59,230.974 1663.15,229.978 1663.72,229.116 1664.29,232.413 1664.86,232.374 1665.43,230.323 1666,229.211 1666.56,228.428 1667.13,227.827 1667.7,225.931 1668.27,229.526 1668.84,231.965 1669.41,233.004 1669.97,228.68 1670.54,228.996 1671.11,229.278 1671.68,228.492 1672.25,228.899 1672.82,231.354 1673.38,231.306 1673.95,229.165 1674.52,229.52 1675.09,229.729 1675.66,226.715 1676.23,227.301 1676.79,228.724 1677.36,228.902 1677.93,228.956 1678.5,228.212 1679.07,230.506 1679.64,229.787 1680.2,230.987 1680.77,230.291 1681.34,228.369 1681.91,229.764 1682.48,229.871 1683.05,228.013 1683.61,228.279 1684.18,227.532 1684.75,225.138 1685.32,226.624 1685.89,228.224 1686.46,228.647 1687.02,230.007 1687.59,229.288 1688.16,230.675 1688.73,231.611 1689.3,234.826 1689.87,233.491 1690.44,236.832 1691,235.533 1691.57,236.238 1692.14,236.031 1692.71,234.605 1693.28,234.393 1693.85,235.004 1694.41,233.974 1694.98,233.819 1695.55,232.684 1696.12,233.833 1696.69,231.647 1697.26,232.807 1697.82,231.836 1698.39,230.824 1698.96,229.746 1699.53,228.84 1700.1,228.227 1700.67,228.698 1701.23,227.897 1701.8,228.2 1702.37,226.293 1702.94,226.992 1703.51,226.361 1704.08,224.883 1704.64,226.182 1705.21,227.649 1705.78,226.964 1706.35,229.266 1706.92,230.768 1707.49,231.038 1708.05,232.379 1708.62,233.111 1709.19,237.239 1709.76,237.997 1710.33,239.388 1710.9,238.955 1711.46,237.546 1712.03,239.364 1712.6,238.952 1713.17,238.643 1713.74,237.208 1714.31,237.718 1714.87,238.36 1715.44,238.89 1716.01,239.437 1716.58,239.799 1717.15,239.396 1717.72,237.952 1718.28,237.397 1718.85,236.227 1719.42,234.996 1719.99,235.751 1720.56,233.455 1721.13,233.484 1721.69,231.436 1722.26,230.748 1722.83,228.503 1723.4,227.758 1723.97,230.06 1724.54,230.257 1725.1,231.395 1725.67,230.271 1726.24,230.331 1726.81,230.547 1727.38,232.741 1727.95,233.711 1728.51,234.691 1729.08,233.378 1729.65,232.078 1730.22,231.082 1730.79,230.918 1731.36,231.954 1731.92,232.033 1732.49,234.019 1733.06,233.897 1733.63,233.674 1734.2,231.196 1734.77,230.329 1735.33,231.533 1735.9,233.681 1736.47,234.476 1737.04,234.152 1737.61,232.012 1738.18,229.871 1738.74,229.98 1739.31,227.04 1739.88,227.37 1740.45,227.857 1741.02,228.25 1741.59,228.645 1742.15,228.003 1742.72,229.42 1743.29,231.462 1743.86,233.614 1744.43,232.572 1745,232.383 1745.56,231.299 1746.13,231.252 1746.7,233.405 1747.27,234.296 1747.84,234.154 1748.41,234.872 1748.97,233.474 1749.54,232.146 1750.11,232.195 1750.68,233.09 1751.25,234.152 1751.82,233.976 1752.38,235.97 1752.95,235.65 1753.52,235.41 1754.09,235.045 1754.66,235.832 1755.23,234.387 1755.79,234.003 1756.36,231.736 1756.93,232.645 1757.5,230.508 1758.07,233.604 1758.64,232.139 1759.21,233.079 1759.77,233.143 1760.34,235.074 1760.91,236.666 1761.48,235.973 1762.05,235.649 1762.62,236.349 1763.18,235.909 1763.75,234.379 1764.32,231.942 1764.89,228.846 1765.46,229.924 1766.03,230.082 1766.59,230.074 1767.16,228.932 1767.73,227.855 1768.3,225.863 1768.87,227.272 1769.44,226.284 1770,227.841 1770.57,228.796 1771.14,228.866 1771.71,229.132 1772.28,229.281 1772.85,231.298 1773.41,230.543 1773.98,229.779 1774.55,231.058 1775.12,233.019 1775.69,231.988 1776.26,231.081 1776.82,232.144 1777.39,230.992 1777.96,228.981 1778.53,228.79 1779.1,227.605 1779.67,229.896 1780.23,229.146 1780.8,228.285 1781.37,225.428 1781.94,225.833 1782.51,228.305 1783.08,228.417 1783.64,225.582 1784.21,226.01 1784.78,225.351 1785.35,225.697 1785.92,226.137 1786.49,226.423 1787.05,228.852 1787.62,228.233 1788.19,228.594 1788.76,229.79 1789.33,229.056 1789.9,230.431 1790.46,231.517 1791.03,233.554 1791.6,234.614 1792.17,235.278 1792.74,235.191 1793.31,234.123 1793.87,234.953 1794.44,234.836 1795.01,235.846 1795.58,236.618 1796.15,235.158 1796.72,237.779 1797.28,235.445 1797.85,236.202 1798.42,236.932 1798.99,236.527 1799.56,235.184 1800.13,234.04 1800.69,233.689 1801.26,233.579 1801.83,235.6 1802.4,236.196 1802.97,234.957 1803.54,236.614 1804.1,235.137 1804.67,234.687 1805.24,233.467 1805.81,231.431 1806.38,230.281 1806.95,228.055 1807.51,227.981 1808.08,228.239 1808.65,227.323 1809.22,228.053 1809.79,228.388 1810.36,227.667 1810.92,225.738 1811.49,226.234 1812.06,226.516 1812.63,224.67 1813.2,222.963 1813.77,223.567 1814.33,223.216 1814.9,221.021 1815.47,223.006 1816.04,222.673 1816.61,222.523 1817.18,223.476 1817.74,223.129 1818.31,226.148 1818.88,228.827 1819.45,228.256 1820.02,226.581 1820.59,226.07 1821.15,230.755 1821.72,231.768 1822.29,231.933 1822.86,231.979 1823.43,231.887 1824,232.023 1824.56,232.385 1825.13,234.231 1825.7,232.198 1826.27,231.347 1826.84,233.738 1827.41,234.661 1827.97,234.53 1828.54,235.555 1829.11,236.339 1829.68,236.385 1830.25,236.108 1830.82,236.913 1831.39,237.696 1831.95,239.327 1832.52,241.871 1833.09,242.247 1833.66,241.618 1834.23,239.818 1834.8,240.046 1835.36,237.252 1835.93,237.776 1836.5,236.131 1837.07,235.889 1837.64,235.329 1838.21,237.057 1838.77,236.572 1839.34,235.068 1839.91,234.791 1840.48,233.49 1841.05,233.451 1841.62,234.228 1842.18,231.852 1842.75,230.848 1843.32,230.846 1843.89,231.736 1844.46,230.607 1845.03,230.534 1845.59,232.61 1846.16,232.565 1846.73,232.21 1847.3,234.242 1847.87,235.063 1848.44,232.729 1849,233.398 1849.57,233.2 1850.14,234.101 1850.71,234.88 1851.28,233.437 1851.85,235.347 1852.41,231.92 1852.98,235.019 1853.55,234.697 1854.12,238.297 1854.69,233.541 1855.26,232.195 1855.82,231.959 1856.39,232.965 1856.96,232.686 1857.53,232.44 1858.1,233.271 1858.67,232.028 1859.23,231.131 1859.8,233.052 1860.37,232.69 1860.94,231.414 1861.51,231.175 1862.08,232.073 1862.64,229.959 1863.21,228.943 1863.78,229.131 1864.35,227.214 1864.92,225.462 1865.49,225.764 1866.05,227.078 1866.62,225.29 1867.19,226.894 1867.76,225.001 1868.33,227.619 1868.9,227.97 1869.46,227.291 1870.03,227.492 1870.6,226.461 1871.17,226.791 1871.74,227.066 1872.31,227.185 1872.87,227.379 1873.44,228.701 1874.01,228.791 1874.58,228.964 1875.15,229.968 1875.72,232.036 1876.28,229.884 1876.85,232.34 1877.42,231.36 1877.99,232.238 1878.56,231.057 1879.13,231.184 1879.69,230.972 1880.26,229.882 1880.83,230.037 1881.4,230.379 1881.97,228.381 1882.54,227.617 1883.1,228.091 1883.67,228.308 1884.24,227.474 1884.81,227.854 1885.38,227.991 1885.95,227.324 1886.51,226.542 1887.08,225.843 1887.65,228.492 1888.22,227.742 1888.79,228.064 1889.36,227.17 1889.92,226.599 1890.49,226.301 1891.06,226.829 1891.63,228.174 1892.2,227.469 1892.77,228.912 1893.33,230.121 1893.9,230.404 1894.47,228.469 1895.04,228.952 1895.61,228.05 1896.18,228.334 1896.74,226.407 1897.31,228.988 1897.88,230.332 1898.45,231.565 1899.02,231.596 1899.59,232.591 1900.16,233.663 1900.72,233.7 1901.29,235.556 1901.86,235.42 1902.43,234.214 1903,233.128 1903.57,234.094 1904.13,234 1904.7,232.653 1905.27,233.874 1905.84,232.667 1906.41,232.596 1906.98,233.449 1907.54,233.504 1908.11,233.481 1908.68,231.472 1909.25,232.74 1909.82,230.607 1910.39,232.803 1910.95,235.148 1911.52,236.184 1912.09,235.105 1912.66,236.828 1913.23,237.603 1913.8,237.349 1914.36,238.095 1914.93,238.369 1915.5,238.999 1916.07,238.635 1916.64,239.129 1917.21,238.558 1917.77,235.078 1918.34,236 1918.91,234.809 1919.48,232.568 1920.05,232.445 1920.62,234.417 1921.18,234.132 1921.75,233.973 1922.32,233.585 1922.89,236.737 1923.46,236.313 1924.03,235.627 1924.59,237.351 1925.16,237.103 1925.73,237.624 1926.3,237.097 1926.87,236.877 1927.44,236.38 1928,233.824 1928.57,232.481 1929.14,232.171 1929.71,234.989 1930.28,234.544 1930.85,232.973 1931.41,231.484 1931.98,229.199 1932.55,230.182 1933.12,231.31 1933.69,230.044 1934.26,230.199 1934.82,231.507 1935.39,231.356 1935.96,230.183 1936.53,233.08 1937.1,231.685 1937.67,232.476 1938.23,233.368 1938.8,233.182 1939.37,233.829 1939.94,232.33 1940.51,233.272 1941.08,232.919 1941.64,232.573 1942.21,232.186 1942.78,232.052 1943.35,230.819 1943.92,233.9 1944.49,232.656 1945.05,232.458 1945.62,231.081 1946.19,232.957 1946.76,233.761 1947.33,237.569 1947.9,236.992 1948.46,238.533 1949.03,237.943 1949.6,236.246 1950.17,235.878 1950.74,234.394 1951.31,233.798 1951.87,233.421 1952.44,229.895 1953.01,230.911 1953.58,230.459 1954.15,231.536 1954.72,230.263 1955.28,229.109 1955.85,230.082 1956.42,230.953 1956.99,231.586 1957.56,231.404 1958.13,230.989 1958.69,230.803 1959.26,230.625 1959.83,230.481 1960.4,230.44 1960.97,230.423 1961.54,230.364 1962.1,232.245 1962.67,233.056 1963.24,232.888 1963.81,231.811 1964.38,231.76 1964.95,229.336 1965.51,228.258 1966.08,227.315 1966.65,225.43 1967.22,225.881 1967.79,228.354 1968.36,227.282 1968.92,227.393 1969.49,226.31 1970.06,227.388 1970.63,227.422 1971.2,226.803 1971.77,225.033 1972.34,225.597 1972.9,225.022 1973.47,226.287 1974.04,226.508 1974.61,226.854 1975.18,227.056 1975.75,228.403 1976.31,229.538 1976.88,231.584 1977.45,231.664 1978.02,228.442 1978.59,227.378 1979.16,229.858 1979.72,229.975 1980.29,229.884 1980.86,230.905 1981.43,230.936 1982,228.741 1982.57,227.892 1983.13,227.372 1983.7,226.707 1984.27,227.033 1984.84,228.459 1985.41,227.905 1985.98,229.289 1986.54,232.708 1987.11,231.787 1987.68,233.853 1988.25,233.563 1988.82,234.243 1989.39,230.985 1989.95,233.042 1990.52,230.788 1991.09,229.915 1991.66,231.962 1992.23,228.759 1992.8,229.111 1993.36,229.302 1993.93,229.553 1994.5,229.497 1995.07,230.667 1995.64,230.695 1996.21,226.832 1996.77,227.375 1997.34,225.541 1997.91,224.864 1998.48,227.552 1999.05,226.154 1999.62,226.713 2000.18,227.194 2000.75,225.437 2001.32,224.816 2001.89,224.496 2002.46,224.072 2003.03,222.693 2003.59,225.336 2004.16,225.006 2004.73,226.588 2005.3,226.979 2005.87,224.28 2006.44,225.027 2007,225.63 2007.57,225.281 2008.14,223.664 2008.71,223.357 2009.28,224.259 2009.85,224.89 2010.41,226.627 2010.98,226.078 2011.55,227.677 2012.12,229.147 2012.69,234.705 2013.26,234.657 2013.82,233.683 2014.39,235.916 2014.96,234.998 2015.53,236.117 2016.1,236.199 2016.67,238.05 2017.23,235.777 2017.8,234.703 2018.37,236.726 2018.94,236.259 2019.51,236.298 2020.08,236.093 2020.64,237.856 2021.21,235.274 2021.78,237.098 2022.35,239.184 2022.92,238.706 2023.49,237.049 2024.05,236.448 2024.62,237.308 2025.19,238.024 2025.76,239.569 2026.33,236.939 2026.9,236.482 2027.46,237.184 2028.03,236.78 2028.6,236.363 2029.17,236.897 2029.74,237.526 2030.31,235.854 2030.87,234.251 2031.44,233.928 2032.01,233.597 2032.58,232.712 2033.15,231.55 2033.72,231.206 2034.28,230.346 2034.85,230.405 2035.42,230.461 2035.99,230.658 2036.56,231.627 2037.13,231.452 2037.69,231.539 2038.26,231.266 2038.83,232.163 2039.4,228.859 2039.97,228.892 2040.54,228.835 2041.11,228.123 2041.67,228.338 2042.24,228.569 2042.81,231.925 2043.38,230.944 2043.95,229.894 2044.52,229.919 2045.08,228.937 2045.65,229.209 2046.22,230.319 2046.79,229.348 2047.36,229.329 2047.93,229.46 2048.49,226.794 2049.06,227.385 2049.63,227.734 2050.2,228.118 2050.77,228.274 2051.34,228.537 2051.9,228.54 2052.47,229.049 2053.04,231.504 2053.61,231.73 2054.18,230.697 2054.75,231.752 2055.31,232.804 2055.88,234.04 2056.45,235.795 2057.02,235.579 2057.59,237.286 2058.16,238.046 2058.72,236.525 2059.29,236.416 2059.86,234.107 2060.43,233.825 2061,232.632 2061.57,232.429 2062.13,231.381 2062.7,233.427 2063.27,232.157 2063.84,229.305 2064.41,230.719 2064.98,232.868 2065.54,231.841 2066.11,230.689 2066.68,229.833 2067.25,230.876 2067.82,228.754 2068.39,227.092 2068.95,228.623 2069.52,229.884 2070.09,230.981 2070.66,232.003 2071.23,234.009 2071.8,231.568 2072.36,231.598 2072.93,229.738 2073.5,232.272 2074.07,233.334 2074.64,235.429 2075.21,234.358 2075.77,233.203 2076.34,233.218 2076.91,234.389 2077.48,234.037 2078.05,232.809 2078.62,232.685 2079.18,233.446 2079.75,234.301 2080.32,233.239 2080.89,233.076 2081.46,233.026 2082.03,234.063 2082.59,233.892 2083.16,233.762 2083.73,237.681 2084.3,237.287 2084.87,234.994 2085.44,235.769 2086,235.306 2086.57,234.223 2087.14,235.06 2087.71,233.873 2088.28,234.712 2088.85,232.517 2089.41,233.361 2089.98,231.255 2090.55,231.325 2091.12,230.313 2091.69,231.383 2092.26,231.21 2092.82,228.001 2093.39,229.361 2093.96,229.782 2094.53,231.986 2095.1,231.995 2095.67,233.041 2096.23,230.952 2096.8,230.893 2097.37,228.938 2097.94,227.367 2098.51,228.744 2099.08,230.801 2099.64,230.96 2100.21,233.024 2100.78,232.947 2101.35,232.833 2101.92,233.764 2102.49,235.676 2103.05,235.299 2103.62,235.85 2104.19,235.483 2104.76,236.041 2105.33,236.513 2105.9,239.301 2106.46,236.42 2107.03,235.963 2107.6,233.514 2108.17,232.17 2108.74,231.047 2109.31,231.185 2109.87,231.14 2110.44,232.098 2111.01,232.897 2111.58,232.671 2112.15,232.409 2112.72,232.297 2113.29,230.09 2113.85,228.094 2114.42,226.543 2114.99,226.016 2115.56,228.371 2116.13,228.3 2116.7,228.265 2117.26,228.354 2117.83,228.6 2118.4,226.938 2118.97,226.229 2119.54,224.595 2120.11,224.79 2120.67,226.11 2121.24,226.43 2121.81,225.748 2122.38,228.222 2122.95,225.433 2123.52,226.96 2124.08,227.331 2124.65,227.739 2125.22,228.806 2125.79,232.112 2126.36,231.832 2126.93,231.79 2127.49,231.672 2128.06,231.692 2128.63,231.783 2129.2,229.784 2129.77,230.944 2130.34,232.115 2130.9,230.006 2131.47,228.861 2132.04,228.051 2132.61,227.316 2133.18,227.932 2133.75,233.169 2134.31,232.062 2134.88,231.84 2135.45,229.602 2136.02,229.868 2136.59,228.292 2137.16,229.598 2137.72,230.75 2138.29,228.846 2138.86,229.071 2139.43,229.531 2140,227.778 2140.57,229.099 2141.13,228.205 2141.7,230.462 2142.27,231.54 2142.84,231.678 2143.41,231.661 2143.98,231.592 2144.54,232.657 2145.11,232.722 2145.68,232.72 2146.25,233.705 2146.82,233.637 2147.39,233.588 2147.95,233.648 2148.52,236.537 2149.09,235.061 2149.66,234.638 2150.23,233.48 2150.8,233.359 2151.36,234.301 2151.93,234.114 2152.5,236.025 2153.07,236.563 2153.64,237.327 2154.21,237.158 2154.77,237.882 2155.34,238.485 2155.91,237.617 2156.48,237.092 2157.05,236.511 2157.62,236.29 2158.18,235.912 2158.75,235.722 2159.32,236.541 2159.89,236.115 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip480)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip480)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip480)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip480)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.035 ± 0.027\n  with uncertainty of ± 0.002434187637491988\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01568 ± (0.00279208, 0.00304198) (MC)\n  95% confidence interval: [-4.02133, -4.01016] (MC)\n  linear error propagation: -4.0158 ± 0.00288555\n  |δ_y| = |0.00252524| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.015675360343531, val_l = 0.00565671097966991, val_u = 0.005516390762839052)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip510\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip510)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip511\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip510)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip512\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1159.45 2211.02,1159.45 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1012.41 2211.02,1012.41 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,865.365 2211.02,865.365 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,718.322 2211.02,718.322 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,571.28 2211.02,571.28 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,424.237 2211.02,424.237 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,277.195 2211.02,277.195 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip510)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1159.45 365.751,1159.45 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1012.41 365.751,1012.41 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,865.365 365.751,865.365 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,718.322 365.751,718.322 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,571.28 365.751,571.28 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,424.237 365.751,424.237 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,277.195 365.751,277.195 \"/>\n<path clip-path=\"url(#clip510)\" d=\"M298.909 1145.25 Q295.298 1145.25 293.469 1148.81 Q291.664 1152.35 291.664 1159.48 Q291.664 1166.59 293.469 1170.16 Q295.298 1173.7 298.909 1173.7 Q302.543 1173.7 304.349 1170.16 Q306.177 1166.59 306.177 1159.48 Q306.177 1152.35 304.349 1148.81 Q302.543 1145.25 298.909 1145.25 M298.909 1141.54 Q304.719 1141.54 307.775 1146.15 Q310.853 1150.73 310.853 1159.48 Q310.853 1168.21 307.775 1172.82 Q304.719 1177.4 298.909 1177.4 Q293.099 1177.4 290.02 1172.82 Q286.964 1168.21 286.964 1159.48 Q286.964 1150.73 290.02 1146.15 Q293.099 1141.54 298.909 1141.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M259.557 1025.75 L267.196 1025.75 L267.196 999.386 L258.886 1001.05 L258.886 996.794 L267.15 995.127 L271.826 995.127 L271.826 1025.75 L279.465 1025.75 L279.465 1029.69 L259.557 1029.69 L259.557 1025.75 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M298.909 998.206 Q295.298 998.206 293.469 1001.77 Q291.664 1005.31 291.664 1012.44 Q291.664 1019.55 293.469 1023.11 Q295.298 1026.65 298.909 1026.65 Q302.543 1026.65 304.349 1023.11 Q306.177 1019.55 306.177 1012.44 Q306.177 1005.31 304.349 1001.77 Q302.543 998.206 298.909 998.206 M298.909 994.502 Q304.719 994.502 307.775 999.109 Q310.853 1003.69 310.853 1012.44 Q310.853 1021.17 307.775 1025.78 Q304.719 1030.36 298.909 1030.36 Q293.099 1030.36 290.02 1025.78 Q286.964 1021.17 286.964 1012.44 Q286.964 1003.69 290.02 999.109 Q293.099 994.502 298.909 994.502 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M262.775 878.71 L279.094 878.71 L279.094 882.645 L257.15 882.645 L257.15 878.71 Q259.812 875.955 264.395 871.325 Q269.002 866.673 270.182 865.33 Q272.428 862.807 273.307 861.071 Q274.21 859.312 274.21 857.622 Q274.21 854.867 272.266 853.131 Q270.344 851.395 267.242 851.395 Q265.043 851.395 262.59 852.159 Q260.159 852.923 257.381 854.474 L257.381 849.751 Q260.205 848.617 262.659 848.038 Q265.113 847.46 267.15 847.46 Q272.52 847.46 275.715 850.145 Q278.909 852.83 278.909 857.321 Q278.909 859.45 278.099 861.372 Q277.312 863.27 275.205 865.862 Q274.627 866.534 271.525 869.751 Q268.423 872.946 262.775 878.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M298.909 851.163 Q295.298 851.163 293.469 854.728 Q291.664 858.27 291.664 865.399 Q291.664 872.506 293.469 876.071 Q295.298 879.612 298.909 879.612 Q302.543 879.612 304.349 876.071 Q306.177 872.506 306.177 865.399 Q306.177 858.27 304.349 854.728 Q302.543 851.163 298.909 851.163 M298.909 847.46 Q304.719 847.46 307.775 852.066 Q310.853 856.65 310.853 865.399 Q310.853 874.126 307.775 878.733 Q304.719 883.316 298.909 883.316 Q293.099 883.316 290.02 878.733 Q286.964 874.126 286.964 865.399 Q286.964 856.65 290.02 852.066 Q293.099 847.46 298.909 847.46 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M272.914 716.968 Q276.27 717.686 278.145 719.954 Q280.043 722.223 280.043 725.556 Q280.043 730.672 276.525 733.473 Q273.006 736.274 266.525 736.274 Q264.349 736.274 262.034 735.834 Q259.742 735.417 257.289 734.561 L257.289 730.047 Q259.233 731.181 261.548 731.76 Q263.863 732.338 266.386 732.338 Q270.784 732.338 273.076 730.602 Q275.39 728.866 275.39 725.556 Q275.39 722.501 273.238 720.788 Q271.108 719.051 267.289 719.051 L263.261 719.051 L263.261 715.209 L267.474 715.209 Q270.923 715.209 272.752 713.843 Q274.58 712.454 274.58 709.862 Q274.58 707.2 272.682 705.788 Q270.807 704.352 267.289 704.352 Q265.367 704.352 263.168 704.769 Q260.969 705.186 258.33 706.065 L258.33 701.899 Q260.992 701.158 263.307 700.788 Q265.645 700.417 267.705 700.417 Q273.029 700.417 276.131 702.848 Q279.233 705.255 279.233 709.376 Q279.233 712.246 277.59 714.237 Q275.946 716.204 272.914 716.968 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M298.909 704.121 Q295.298 704.121 293.469 707.686 Q291.664 711.227 291.664 718.357 Q291.664 725.463 293.469 729.028 Q295.298 732.57 298.909 732.57 Q302.543 732.57 304.349 729.028 Q306.177 725.463 306.177 718.357 Q306.177 711.227 304.349 707.686 Q302.543 704.121 298.909 704.121 M298.909 700.417 Q304.719 700.417 307.775 705.024 Q310.853 709.607 310.853 718.357 Q310.853 727.084 307.775 731.69 Q304.719 736.274 298.909 736.274 Q293.099 736.274 290.02 731.69 Q286.964 727.084 286.964 718.357 Q286.964 709.607 290.02 705.024 Q293.099 700.417 298.909 700.417 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M271.594 558.074 L259.789 576.523 L271.594 576.523 L271.594 558.074 M270.367 554 L276.247 554 L276.247 576.523 L281.177 576.523 L281.177 580.412 L276.247 580.412 L276.247 588.56 L271.594 588.56 L271.594 580.412 L255.992 580.412 L255.992 575.898 L270.367 554 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M298.909 557.079 Q295.298 557.079 293.469 560.643 Q291.664 564.185 291.664 571.315 Q291.664 578.421 293.469 581.986 Q295.298 585.527 298.909 585.527 Q302.543 585.527 304.349 581.986 Q306.177 578.421 306.177 571.315 Q306.177 564.185 304.349 560.643 Q302.543 557.079 298.909 557.079 M298.909 553.375 Q304.719 553.375 307.775 557.981 Q310.853 562.565 310.853 571.315 Q310.853 580.041 307.775 584.648 Q304.719 589.231 298.909 589.231 Q293.099 589.231 290.02 584.648 Q286.964 580.041 286.964 571.315 Q286.964 562.565 290.02 557.981 Q293.099 553.375 298.909 553.375 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M258.793 406.957 L277.15 406.957 L277.15 410.893 L263.076 410.893 L263.076 419.365 Q264.094 419.018 265.113 418.855 Q266.131 418.67 267.15 418.67 Q272.937 418.67 276.316 421.842 Q279.696 425.013 279.696 430.43 Q279.696 436.008 276.224 439.11 Q272.752 442.189 266.432 442.189 Q264.256 442.189 261.988 441.818 Q259.742 441.448 257.335 440.707 L257.335 436.008 Q259.418 437.142 261.641 437.698 Q263.863 438.254 266.34 438.254 Q270.344 438.254 272.682 436.147 Q275.02 434.041 275.02 430.43 Q275.02 426.818 272.682 424.712 Q270.344 422.605 266.34 422.605 Q264.465 422.605 262.59 423.022 Q260.738 423.439 258.793 424.318 L258.793 406.957 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M298.909 410.036 Q295.298 410.036 293.469 413.601 Q291.664 417.143 291.664 424.272 Q291.664 431.379 293.469 434.943 Q295.298 438.485 298.909 438.485 Q302.543 438.485 304.349 434.943 Q306.177 431.379 306.177 424.272 Q306.177 417.143 304.349 413.601 Q302.543 410.036 298.909 410.036 M298.909 406.332 Q304.719 406.332 307.775 410.939 Q310.853 415.522 310.853 424.272 Q310.853 432.999 307.775 437.605 Q304.719 442.189 298.909 442.189 Q293.099 442.189 290.02 437.605 Q286.964 432.999 286.964 424.272 Q286.964 415.522 290.02 410.939 Q293.099 406.332 298.909 406.332 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M269.326 275.332 Q266.178 275.332 264.326 277.484 Q262.497 279.637 262.497 283.387 Q262.497 287.114 264.326 289.29 Q266.178 291.443 269.326 291.443 Q272.474 291.443 274.303 289.29 Q276.154 287.114 276.154 283.387 Q276.154 279.637 274.303 277.484 Q272.474 275.332 269.326 275.332 M278.608 260.679 L278.608 264.938 Q276.849 264.105 275.043 263.665 Q273.261 263.225 271.502 263.225 Q266.872 263.225 264.418 266.35 Q261.988 269.475 261.641 275.794 Q263.006 273.781 265.066 272.716 Q267.127 271.628 269.603 271.628 Q274.812 271.628 277.821 274.799 Q280.853 277.947 280.853 283.387 Q280.853 288.711 277.705 291.929 Q274.557 295.146 269.326 295.146 Q263.33 295.146 260.159 290.563 Q256.988 285.956 256.988 277.23 Q256.988 269.035 260.877 264.174 Q264.766 259.29 271.316 259.29 Q273.076 259.29 274.858 259.637 Q276.664 259.984 278.608 260.679 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M298.909 262.994 Q295.298 262.994 293.469 266.558 Q291.664 270.1 291.664 277.23 Q291.664 284.336 293.469 287.901 Q295.298 291.443 298.909 291.443 Q302.543 291.443 304.349 287.901 Q306.177 284.336 306.177 277.23 Q306.177 270.1 304.349 266.558 Q302.543 262.994 298.909 262.994 M298.909 259.29 Q304.719 259.29 307.775 263.896 Q310.853 268.48 310.853 277.23 Q310.853 285.956 307.775 290.563 Q304.719 295.146 298.909 295.146 Q293.099 295.146 290.02 290.563 Q286.964 285.956 286.964 277.23 Q286.964 268.48 290.02 263.896 Q293.099 259.29 298.909 259.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip512)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1051.1 400.199,951.568 400.786,860.241 401.372,776.569 401.958,700.044 402.545,734.329 403.131,665.597 403.718,602.983 404.304,546.088 404.891,494.407 405.477,447.737 406.063,405.756 406.65,368.158 407.236,334.661 407.823,304.997 408.409,278.917 408.995,256.186 409.582,236.581 410.168,219.895 410.755,255.382 411.341,242.223 411.927,313.066 412.514,301.972 413.1,293.09 413.687,286.266 414.273,281.354 414.86,279.245 415.446,278.154 416.032,304.187 416.619,306.361 417.205,352.332 417.792,356.125 418.378,379.241 418.964,385.121 419.551,407.869 420.137,430.541 420.724,436.752 421.31,444.473 421.896,452.127 422.483,460.536 423.069,481.081 423.656,500.709 424.242,509.341 424.829,518.11 425.415,527.228 426.001,536.977 426.588,564.545 427.174,574.561 427.761,592.114 428.347,602.446 428.933,619.844 429.52,644.046 430.106,660.444 430.693,676.362 431.279,691.702 431.865,711.726 432.452,732.143 433.038,746.378 433.625,765.031 434.211,777.985 434.798,790.912 435.384,798.795 435.97,811.251 436.557,823.09 437.143,834.303 437.73,853.36 438.316,860.396 438.902,874.349 439.489,881.187 440.075,894.329 440.662,903.798 441.248,909.946 441.835,919.138 442.421,931.231 443.007,942.951 443.594,948.576 444.18,962.701 444.767,968.475 445.353,979.423 445.939,992.451 446.526,999.94 447.112,1007.5 447.699,1019.58 448.285,1026.16 448.871,1035.06 449.458,1043.79 450.044,1049.72 450.631,1059.88 451.217,1067.53 451.804,1074.78 452.39,1082.2 452.976,1091.27 453.563,1098.13 454.149,1104.72 454.736,1105.59 455.322,1108.08 455.908,1112.54 456.495,1118.9 457.081,1124.97 457.668,1130.96 458.254,1136.52 458.84,1138.57 459.427,1146.06 460.013,1147.57 460.6,1151 461.186,1156.27 461.773,1159.37 462.359,1162.56 462.945,1168.84 463.532,1171.7 464.118,1174.21 464.705,1179.96 465.291,1185.69 465.877,1187.81 466.464,1188.5 467.05,1190.76 467.637,1192.93 468.223,1196.79 468.809,1200.21 469.396,1199.18 469.982,1204.06 470.569,1204.47 471.155,1208.11 471.742,1211.63 472.328,1210.51 472.914,1212.53 473.501,1212.82 474.087,1216.16 474.674,1217.52 475.26,1217.59 475.846,1219.29 476.433,1220.63 477.019,1221.92 477.606,1221.88 478.192,1223.26 478.778,1227.27 479.365,1226.96 479.951,1228.44 480.538,1233.7 481.124,1234.71 481.711,1232.94 482.297,1233.77 482.883,1234.72 483.47,1235.71 484.056,1235.17 484.643,1234.74 485.229,1235.73 485.815,1234.03 486.402,1236.65 486.988,1239.01 487.575,1237.13 488.161,1238.14 488.748,1240.13 489.334,1240.94 489.92,1241.87 490.507,1241.4 491.093,1243.47 491.68,1245.61 492.266,1243.79 492.852,1243.19 493.439,1241.38 494.025,1246.07 494.612,1245.6 495.198,1246.13 495.784,1245.54 496.371,1246.35 496.957,1247.06 497.544,1247.53 498.13,1247.15 498.717,1243.97 499.303,1247.2 499.889,1247.99 500.476,1246.18 501.062,1248.24 501.649,1248.85 502.235,1249.45 502.821,1249.09 503.408,1248.53 503.994,1248.1 504.581,1246.07 505.167,1245.77 505.753,1246.66 506.34,1249.98 506.926,1249.52 507.513,1246.49 508.099,1246.15 508.686,1244.37 509.272,1244.26 509.858,1243.91 510.445,1244.82 511.031,1247.07 511.618,1245.27 512.204,1246.3 512.79,1247.27 513.377,1246.94 513.963,1246.41 514.55,1246.07 515.136,1243.28 515.722,1241.74 516.309,1241.74 516.895,1241.8 517.482,1242.74 518.068,1245.2 518.655,1246.04 519.241,1244.36 519.827,1241.74 520.414,1242.94 521,1241.61 521.587,1244.04 522.173,1243.83 522.759,1244.13 523.346,1245.4 523.932,1243.87 524.519,1243.69 525.105,1243.5 525.691,1244.46 526.278,1244.35 526.864,1246.67 527.451,1248.76 528.037,1248.31 528.624,1247.82 529.21,1247.34 529.796,1249.78 530.383,1246.77 530.969,1246.4 531.556,1244.74 532.142,1245.92 532.728,1244.19 533.315,1246.31 533.901,1248.37 534.488,1246.56 535.074,1246.12 535.661,1245.71 536.247,1248.84 536.833,1249.2 537.42,1249.86 538.006,1250.53 538.593,1246.44 539.179,1246.02 539.765,1248.31 540.352,1247.51 540.938,1249.17 541.525,1248.87 542.111,1249.33 542.697,1248.72 543.284,1248.1 543.87,1246.25 544.457,1245.76 545.043,1247.62 545.63,1249.41 546.216,1247.46 546.802,1249.06 547.389,1248.64 547.975,1249.09 548.562,1246.09 549.148,1245.54 549.734,1247.08 550.321,1245.37 550.907,1246.27 551.494,1246.59 552.08,1244.72 552.666,1243.07 553.253,1242.6 553.839,1244.75 554.426,1244.11 555.012,1243.33 555.599,1245.18 556.185,1248.59 556.771,1247.99 557.358,1247.1 557.944,1245.11 558.531,1244.42 559.117,1243.88 559.703,1244.47 560.29,1243.79 560.876,1243.3 561.463,1240.23 562.049,1239.78 562.635,1240.63 563.222,1241.56 563.808,1240.93 564.395,1236.88 564.981,1235.52 565.568,1235.62 566.154,1235.23 566.74,1235.01 567.327,1236.1 567.913,1235.54 568.5,1235.37 569.086,1236.43 569.672,1238.42 570.259,1238.15 570.845,1239.21 571.432,1240.12 572.018,1240.71 572.605,1240.24 573.191,1239.74 573.777,1236.54 574.364,1237.71 574.95,1238.73 575.537,1239.88 576.123,1239.47 576.709,1239.3 577.296,1240.52 577.882,1240.01 578.469,1240.72 579.055,1241.22 579.641,1244.14 580.228,1242.44 580.814,1241.86 581.401,1243.74 581.987,1241.77 582.574,1239.99 583.16,1239.59 583.746,1238.05 584.333,1238.89 584.919,1240.78 585.506,1242.55 586.092,1242.07 586.678,1240.25 587.265,1239.73 587.851,1235.88 588.438,1235.4 589.024,1239.01 589.61,1237.56 590.197,1239.69 590.783,1239.22 591.37,1239.88 591.956,1240.52 592.543,1242.06 593.129,1244.02 593.715,1243.25 594.302,1241.06 594.888,1241.54 595.475,1239.86 596.061,1239.59 596.647,1242.64 597.234,1243.21 597.82,1242.64 598.407,1241.96 598.993,1242.72 599.579,1242.07 600.166,1243.82 600.752,1244.12 601.339,1244.6 601.925,1247.35 602.512,1247.41 603.098,1245.22 603.684,1244.33 604.271,1242.5 604.857,1241.89 605.444,1241.32 606.03,1238.13 606.616,1238.83 607.203,1236.06 607.789,1236.97 608.376,1234.02 608.962,1238.36 609.548,1236.57 610.135,1236.04 610.721,1235.72 611.308,1235.38 611.894,1235.17 612.481,1237.19 613.067,1239.26 613.653,1239.9 614.24,1239.27 614.826,1237.42 615.413,1240.41 615.999,1238.8 616.585,1238.15 617.172,1237.81 617.758,1236.98 618.345,1235.68 618.931,1238.94 619.518,1237.12 620.104,1237.53 620.69,1239.54 621.277,1236.49 621.863,1238.42 622.45,1237.63 623.036,1235.8 623.622,1235.09 624.209,1235.77 624.795,1234.04 625.382,1236.07 625.968,1237.01 626.554,1233.94 627.141,1232.61 627.727,1233.66 628.314,1235.77 628.9,1237.72 629.487,1239.46 630.073,1237.53 630.659,1236.92 631.246,1234.14 631.832,1235.04 632.419,1236.21 633.005,1237.04 633.591,1236.37 634.178,1235.94 634.764,1235.57 635.351,1237.45 635.937,1237.06 636.523,1235.36 637.11,1233.68 637.696,1230.85 638.283,1230.75 638.869,1229.21 639.456,1225.39 640.042,1228.14 640.628,1229.25 641.215,1229.07 641.801,1228.91 642.388,1231.13 642.974,1230.62 643.56,1227.91 644.147,1229.14 644.733,1229.13 645.32,1229.05 645.906,1230.13 646.492,1230.06 647.079,1228.94 647.665,1225.24 648.252,1225.5 648.838,1224.48 649.425,1224.37 650.011,1225.54 650.597,1225.41 651.184,1225.24 651.77,1226.6 652.357,1226.66 652.943,1226.76 653.529,1224.47 654.116,1224.75 654.702,1224.88 655.289,1223.88 655.875,1227.62 656.462,1226.47 657.048,1231.37 657.634,1231.13 658.221,1234.47 658.807,1235.14 659.394,1231.2 659.98,1228.38 660.566,1230.58 661.153,1228.88 661.739,1230.02 662.326,1226.04 662.912,1225.85 663.498,1224.6 664.085,1224.54 664.671,1224.57 665.258,1223.45 665.844,1223.6 666.431,1223.88 667.017,1226.34 667.603,1225.01 668.19,1223.77 668.776,1223.9 669.363,1223.94 669.949,1223.03 670.535,1222.16 671.122,1220.91 671.708,1217.46 672.295,1217.86 672.881,1219.55 673.467,1222.3 674.054,1218.77 674.64,1220.35 675.227,1220.51 675.813,1221.97 676.4,1222.26 676.986,1223.6 677.572,1226.29 678.159,1227.35 678.745,1226.79 679.332,1226.55 679.918,1228.75 680.504,1232.03 681.091,1231.46 681.677,1228.88 682.264,1229.76 682.85,1229.87 683.436,1228.35 684.023,1227.2 684.609,1232.99 685.196,1232.51 685.782,1231.89 686.369,1230.21 686.955,1227.32 687.541,1230.47 688.128,1231.28 688.714,1232.09 689.301,1227.97 689.887,1226.3 690.473,1223.93 691.06,1222.82 691.646,1222.84 692.233,1224.12 692.819,1225.56 693.405,1228.04 693.992,1225.36 694.578,1225.24 695.165,1222.87 695.751,1222.86 696.338,1222.72 696.924,1222.84 697.51,1224.1 698.097,1224.46 698.683,1221.96 699.27,1219.62 699.856,1215.04 700.442,1216.95 701.029,1218.47 701.615,1217.62 702.202,1217.89 702.788,1219.68 703.375,1218.59 703.961,1218.05 704.547,1218.29 705.134,1217.14 705.72,1216.39 706.307,1219.25 706.893,1218.21 707.479,1218.43 708.066,1218.71 708.652,1220.09 709.239,1221.46 709.825,1221.68 710.411,1221.77 710.998,1221.87 711.584,1222.03 712.171,1220.83 712.757,1220.94 713.344,1223.49 713.93,1224.78 714.516,1224.56 715.103,1223.28 715.689,1222.1 716.276,1225.88 716.862,1225.77 717.448,1225.54 718.035,1224.44 718.621,1227.96 719.208,1228.89 719.794,1227.44 720.38,1225.93 720.967,1228.27 721.553,1231.53 722.14,1232.35 722.726,1231.94 723.313,1231.67 723.899,1233.51 724.485,1236.7 725.072,1236.03 725.658,1235.25 726.245,1234.67 726.831,1234.29 727.417,1232.71 728.004,1231.04 728.59,1231.84 729.177,1231.41 729.763,1231.08 730.349,1230.53 730.936,1225.33 731.522,1225.18 732.109,1224.13 732.695,1224.94 733.282,1223.64 733.868,1223.6 734.454,1223.63 735.041,1224.63 735.627,1227.01 736.214,1228.24 736.8,1226.85 737.386,1227.87 737.973,1227.53 738.559,1225.04 739.146,1225.07 739.732,1226.08 740.318,1225.83 740.905,1225.73 741.491,1225.26 742.078,1223.98 742.664,1223.92 743.251,1222.57 743.837,1221.48 744.423,1220.49 745.01,1220.7 745.596,1221.84 746.183,1221.95 746.769,1221.93 747.355,1223.16 747.942,1223.23 748.528,1224.26 749.115,1224.12 749.701,1226.64 750.288,1226.16 750.874,1223.54 751.46,1222.2 752.047,1224.7 752.633,1222.02 753.22,1223.42 753.806,1223.37 754.392,1223.2 754.979,1221.89 755.565,1222.08 756.152,1223.22 756.738,1223.1 757.324,1222.73 757.911,1226.32 758.497,1224.87 759.084,1224.77 759.67,1223.61 760.257,1220.9 760.843,1221.01 761.429,1219.89 762.016,1220 762.602,1219.85 763.189,1221.12 763.775,1220.05 764.361,1220.04 764.948,1220.01 765.534,1221.34 766.121,1222.44 766.707,1223.66 767.293,1223.65 767.88,1222.23 768.466,1224.56 769.053,1226.6 769.639,1226.61 770.226,1226.49 770.812,1225.19 771.398,1225.16 771.985,1224.94 772.571,1222.19 773.158,1220.86 773.744,1216.22 774.33,1219.01 774.917,1221.51 775.503,1221.69 776.09,1221.8 776.676,1221.89 777.262,1221.97 777.849,1224.25 778.435,1225.17 779.022,1223.76 779.608,1223.54 780.195,1223.26 780.781,1223.3 781.367,1223.02 781.954,1222.97 782.54,1222.89 783.127,1220.57 783.713,1220.3 784.299,1218.25 784.886,1218.34 785.472,1219.77 786.059,1220.9 786.645,1219.71 787.232,1219.78 787.818,1217.65 788.404,1218.9 788.991,1221.55 789.577,1220.46 790.164,1220.4 790.75,1221.23 791.336,1221.24 791.923,1221.25 792.509,1221.18 793.096,1221.14 793.682,1221.06 794.268,1221.02 794.855,1218.67 795.441,1217.63 796.028,1216.66 796.614,1215.84 797.201,1214.83 797.787,1215.3 798.373,1216.97 798.96,1218.44 799.546,1219.75 800.133,1219.96 800.719,1219.92 801.305,1222.55 801.892,1224.86 802.478,1224.46 803.065,1224.32 803.651,1225.47 804.237,1225.5 804.824,1225.42 805.41,1225.17 805.997,1227.17 806.583,1225.8 807.17,1222.14 807.756,1221.24 808.342,1221.19 808.929,1219.88 809.515,1219.79 810.102,1219.49 810.688,1222.02 811.274,1223.14 811.861,1224.26 812.447,1224.12 813.034,1224.05 813.62,1222.92 814.206,1220.53 814.793,1218.13 815.379,1219.56 815.966,1223.13 816.552,1224.38 817.139,1221.89 817.725,1220.43 818.311,1220.59 818.898,1220.45 819.484,1219.62 820.071,1218.43 820.657,1219.66 821.243,1218.63 821.83,1218.84 822.416,1218.96 823.003,1220.14 823.589,1220.05 824.175,1219.87 824.762,1222.27 825.348,1222.29 825.935,1222.12 826.521,1222.05 827.108,1219.61 827.694,1220.01 828.28,1220 828.867,1216.55 829.453,1215.64 830.04,1218.26 830.626,1218.49 831.212,1219.92 831.799,1221.15 832.385,1222.4 832.972,1223.59 833.558,1223.64 834.145,1224.93 834.731,1223.62 835.317,1222.33 835.904,1222.13 836.49,1223.34 837.077,1221.97 837.663,1223.05 838.249,1223.03 838.836,1221.98 839.422,1221.96 840.009,1223.15 840.595,1220.69 841.181,1222.12 841.768,1221.82 842.354,1223.08 842.941,1222.84 843.527,1221.48 844.114,1222.56 844.7,1222.5 845.286,1221.27 845.873,1222.64 846.459,1222.59 847.046,1221.48 847.632,1222.74 848.218,1222.8 848.805,1223.7 849.391,1223.46 849.978,1223.51 850.564,1222.54 851.15,1224.8 851.737,1224.76 852.323,1225.85 852.91,1224.32 853.496,1222.78 854.083,1219.09 854.669,1219.21 855.255,1220.48 855.842,1215.54 856.428,1214.58 857.015,1212.19 857.601,1212.61 858.187,1213.12 858.774,1217.18 859.36,1217.41 859.947,1217.6 860.533,1217.58 861.119,1215.34 861.706,1215.83 862.292,1215.86 862.879,1217.62 863.465,1217.63 864.052,1217.82 864.638,1216.62 865.224,1219.23 865.811,1218.07 866.397,1219.37 866.984,1216.93 867.57,1217.39 868.156,1218.97 868.743,1217.76 869.329,1216.66 869.916,1219.37 870.502,1218.61 871.089,1219.76 871.675,1221.96 872.261,1225.46 872.848,1225.29 873.434,1221.26 874.021,1221.23 874.607,1218.98 875.193,1220.48 875.78,1220.71 876.366,1223.06 876.953,1223.9 877.539,1222.54 878.125,1221.09 878.712,1221.21 879.298,1223.24 879.885,1224.27 880.471,1222.79 881.058,1223.98 881.644,1224.94 882.23,1226.87 882.817,1227.56 883.403,1226.08 883.99,1224.49 884.576,1223.96 885.162,1221.35 885.749,1221.22 886.335,1222.46 886.922,1223.66 887.508,1223.35 888.094,1221.81 888.681,1221.69 889.267,1221.64 889.854,1220.34 890.44,1221.46 891.027,1220.16 891.613,1219.02 892.199,1221.53 892.786,1223.79 893.372,1222.22 893.959,1224.31 894.545,1221.8 895.131,1218.15 895.718,1219.19 896.304,1220.37 896.891,1221.67 897.477,1220.04 898.063,1224.92 898.65,1224.57 899.236,1225.43 899.823,1226.32 900.409,1225.79 900.996,1226.6 901.582,1226.09 902.168,1223.31 902.755,1220.62 903.341,1221.8 903.928,1220.68 904.514,1220.49 905.1,1219.37 905.687,1219.57 906.273,1220.94 906.86,1218.48 907.446,1220.78 908.032,1217.05 908.619,1217.14 909.205,1217.35 909.792,1220.92 910.378,1220.94 910.965,1221.09 911.551,1221.05 912.137,1219.97 912.724,1219.98 913.31,1220.99 913.897,1220.87 914.483,1223.17 915.069,1220.3 915.656,1219.24 916.242,1218.05 916.829,1219.08 917.415,1217.69 918.002,1217.68 918.588,1220.39 919.174,1220.39 919.761,1219.13 920.347,1217.87 920.934,1224.21 921.52,1225.15 922.106,1224.76 922.693,1225.11 923.279,1222.33 923.866,1221.13 924.452,1220.89 925.038,1219.63 925.625,1220.86 926.211,1219.81 926.798,1219.58 927.384,1220.85 927.971,1220.46 928.557,1221.72 929.143,1222.49 929.73,1222.55 930.316,1221.23 930.903,1221.11 931.489,1220.78 932.075,1218.3 932.662,1217.18 933.248,1217.19 933.835,1216.24 934.421,1216.58 935.007,1219.07 935.594,1218.85 936.18,1218.61 936.767,1219.89 937.353,1221.18 937.94,1219.92 938.526,1217.5 939.112,1213.87 939.699,1217.75 940.285,1217.77 940.872,1217.92 941.458,1218.12 942.044,1215.71 942.631,1214.66 943.217,1216.18 943.804,1213.79 944.39,1216.4 944.976,1216.57 945.563,1216.77 946.149,1215.78 946.736,1217.12 947.322,1214.82 947.909,1213.89 948.495,1212.74 949.081,1215.66 949.668,1215.8 950.254,1214.88 950.841,1214.89 951.427,1213.99 952.013,1215.61 952.6,1215.91 953.186,1216.36 953.773,1216.68 954.359,1216.74 954.945,1216.24 955.532,1214.34 956.118,1215.89 956.705,1214.88 957.291,1214.99 957.878,1215.28 958.464,1214.3 959.05,1214.46 959.637,1214.68 960.223,1215 960.81,1212.51 961.396,1212.89 961.982,1213.1 962.569,1213.64 963.155,1215.13 963.742,1214.06 964.328,1213.22 964.915,1214.82 965.501,1211.46 966.087,1210.63 966.674,1212.26 967.26,1210.35 967.847,1210.85 968.433,1211.48 969.019,1212.14 969.606,1212.49 970.192,1213.11 970.779,1213.75 971.365,1214.18 971.951,1214.61 972.538,1218.34 973.124,1217.5 973.711,1216.49 974.297,1215.61 974.884,1219.47 975.47,1220.51 976.056,1222.86 976.643,1223.94 977.229,1225.08 977.816,1222.41 978.402,1222.29 978.988,1221.02 979.575,1218.62 980.161,1218.89 980.748,1222.58 981.334,1223.76 981.92,1222.36 982.507,1222.05 983.093,1224.19 983.68,1225.15 984.266,1222.6 984.853,1223.56 985.439,1221.94 986.025,1222.98 986.612,1222.85 987.198,1222.69 987.785,1222.47 988.371,1223.94 988.957,1226.34 989.544,1225.86 990.13,1225.4 990.717,1221.48 991.303,1220.24 991.889,1222.57 992.476,1221.32 993.062,1221.22 993.649,1221.04 994.235,1223.38 994.822,1223.08 995.408,1226.44 995.994,1222.7 996.581,1221.32 997.167,1221.41 997.754,1222.52 998.34,1221.01 998.926,1218.65 999.513,1219.8 1000.1,1218.55 1000.69,1218.62 1001.27,1219.75 1001.86,1218.42 1002.44,1221.05 1003.03,1223.33 1003.62,1224.31 1004.2,1224.18 1004.79,1225.18 1005.38,1224.99 1005.96,1224.92 1006.55,1224.52 1007.14,1224.26 1007.72,1222.88 1008.31,1226.34 1008.9,1227.18 1009.48,1226.86 1010.07,1225.37 1010.65,1223.74 1011.24,1223.45 1011.83,1221.9 1012.41,1220.66 1013,1220.83 1013.59,1221.78 1014.17,1221.76 1014.76,1221.55 1015.35,1223.56 1015.93,1222.05 1016.52,1221.99 1017.11,1223.09 1017.69,1223.92 1018.28,1222.39 1018.86,1220.95 1019.45,1223.15 1020.04,1221.93 1020.62,1220.71 1021.21,1220.53 1021.8,1217.88 1022.38,1217.97 1022.97,1217.13 1023.56,1216.01 1024.14,1215.08 1024.73,1216.57 1025.32,1215.48 1025.9,1214.42 1026.49,1213.34 1027.07,1213.82 1027.66,1215.22 1028.25,1213.76 1028.83,1212.95 1029.42,1215.75 1030.01,1217.24 1030.59,1218.44 1031.18,1219.59 1031.77,1220.47 1032.35,1221.64 1032.94,1221.59 1033.52,1220.33 1034.11,1220.28 1034.7,1220.33 1035.28,1220.38 1035.87,1219.11 1036.46,1220.31 1037.04,1219.11 1037.63,1221.49 1038.22,1221.62 1038.8,1221.36 1039.39,1219.97 1039.98,1219.82 1040.56,1218.71 1041.15,1218.36 1041.73,1218.35 1042.32,1218.29 1042.91,1218.46 1043.49,1218.51 1044.08,1217.19 1044.67,1215.94 1045.25,1213.63 1045.84,1213.96 1046.43,1212.77 1047.01,1215.5 1047.6,1215.81 1048.19,1217.22 1048.77,1216.31 1049.36,1217.34 1049.94,1216.42 1050.53,1215.35 1051.12,1214.41 1051.7,1215.88 1052.29,1213.76 1052.88,1211.75 1053.46,1213.34 1054.05,1212.5 1054.64,1214.08 1055.22,1215.19 1055.81,1215.43 1056.39,1218.27 1056.98,1215.85 1057.57,1214.76 1058.15,1213.94 1058.74,1214.05 1059.33,1214.42 1059.91,1213.46 1060.5,1215.09 1061.09,1215.63 1061.67,1215.61 1062.26,1214.59 1062.85,1214.73 1063.43,1217.21 1064.02,1216.08 1064.6,1216.47 1065.19,1216.54 1065.78,1214.46 1066.36,1213.81 1066.95,1215.16 1067.54,1216.39 1068.12,1216.69 1068.71,1215.35 1069.3,1214.21 1069.88,1215.78 1070.47,1215.95 1071.06,1216.08 1071.64,1217.33 1072.23,1217.28 1072.81,1216.26 1073.4,1216.26 1073.99,1216.4 1074.57,1217.75 1075.16,1217.5 1075.75,1217.31 1076.33,1217.6 1076.92,1217.61 1077.51,1217.67 1078.09,1220.2 1078.68,1221.37 1079.26,1218.75 1079.85,1218.86 1080.44,1218.85 1081.02,1220.15 1081.61,1221.26 1082.2,1221.17 1082.78,1221.24 1083.37,1222.28 1083.96,1222.16 1084.54,1224.31 1085.13,1226.35 1085.72,1226.01 1086.3,1223.37 1086.89,1223.07 1087.47,1222.77 1088.06,1223.79 1088.65,1226.96 1089.23,1226.5 1089.82,1225.86 1090.41,1223.11 1090.99,1225.35 1091.58,1223.62 1092.17,1226.84 1092.75,1227.59 1093.34,1229.33 1093.93,1228.86 1094.51,1229.46 1095.1,1230.27 1095.68,1229.87 1096.27,1230.36 1096.86,1228.59 1097.44,1228.21 1098.03,1228.82 1098.62,1232.14 1099.2,1230.03 1099.79,1231.55 1100.38,1229.73 1100.96,1227.68 1101.55,1225.84 1102.14,1227.87 1102.72,1224.82 1103.31,1226.84 1103.89,1226.51 1104.48,1227.35 1105.07,1223.19 1105.65,1221.74 1106.24,1222.86 1106.83,1223.76 1107.41,1221.22 1108,1221.37 1108.59,1221.32 1109.17,1217.61 1109.76,1218.81 1110.34,1216.43 1110.93,1215.28 1111.52,1215.49 1112.1,1214.29 1112.69,1214.52 1113.28,1214.54 1113.86,1215.11 1114.45,1214.14 1115.04,1213.15 1115.62,1212.22 1116.21,1212.75 1116.8,1213.18 1117.38,1213.36 1117.97,1214.76 1118.55,1216.22 1119.14,1217.7 1119.73,1217.79 1120.31,1217.72 1120.9,1216.59 1121.49,1216.94 1122.07,1219.57 1122.66,1219.53 1123.25,1220.64 1123.83,1218.17 1124.42,1215.89 1125.01,1214.69 1125.59,1214.67 1126.18,1214.83 1126.76,1213.8 1127.35,1214.07 1127.94,1216.41 1128.52,1215.17 1129.11,1215.42 1129.7,1213.52 1130.28,1215.02 1130.87,1216.62 1131.46,1216.75 1132.04,1218.11 1132.63,1217.03 1133.21,1217.3 1133.8,1218.85 1134.39,1217.8 1134.97,1217.91 1135.56,1214.6 1136.15,1214.8 1136.73,1217.58 1137.32,1218.62 1137.91,1217.3 1138.49,1217.28 1139.08,1217.53 1139.67,1217.62 1140.25,1217.59 1140.84,1214.04 1141.42,1214.22 1142.01,1214.48 1142.6,1214.87 1143.18,1215.12 1143.77,1215.48 1144.36,1218.11 1144.94,1213.4 1145.53,1212.74 1146.12,1213.17 1146.7,1213.54 1147.29,1215.05 1147.88,1215.24 1148.46,1217.44 1149.05,1218.85 1149.63,1217.73 1150.22,1217.66 1150.81,1219.12 1151.39,1222.68 1151.98,1222.55 1152.57,1222.27 1153.15,1223.09 1153.74,1222.75 1154.33,1222.38 1154.91,1222.28 1155.5,1222.03 1156.09,1221.68 1156.67,1219.28 1157.26,1220.66 1157.84,1219.5 1158.43,1220.61 1159.02,1221.9 1159.6,1223.05 1160.19,1221.52 1160.78,1221.26 1161.36,1221 1161.95,1222.23 1162.54,1222.98 1163.12,1220.43 1163.71,1219.16 1164.29,1220.07 1164.88,1217.76 1165.47,1217.78 1166.05,1219.06 1166.64,1217.83 1167.23,1215.58 1167.81,1214.5 1168.4,1213.54 1168.99,1213.9 1169.57,1212.68 1170.16,1216.55 1170.75,1216.57 1171.33,1215.52 1171.92,1214.53 1172.5,1217.23 1173.09,1217.05 1173.68,1217.02 1174.26,1218.35 1174.85,1219.71 1175.44,1217.24 1176.02,1218.8 1176.61,1218.86 1177.2,1218.88 1177.78,1218.81 1178.37,1218.74 1178.96,1218.48 1179.54,1219.51 1180.13,1219.5 1180.71,1220.47 1181.3,1218.92 1181.89,1219.06 1182.47,1218.85 1183.06,1217.66 1183.65,1218.89 1184.23,1219.04 1184.82,1216.6 1185.41,1218.15 1185.99,1219.33 1186.58,1218.3 1187.16,1217.25 1187.75,1216.12 1188.34,1219.71 1188.92,1219.79 1189.51,1224.47 1190.1,1223.12 1190.68,1222.89 1191.27,1221.52 1191.86,1223.79 1192.44,1222.29 1193.03,1221.03 1193.62,1220.98 1194.2,1221.88 1194.79,1220.26 1195.37,1220.07 1195.96,1221.4 1196.55,1222.66 1197.13,1220.06 1197.72,1221.21 1198.31,1220.87 1198.89,1220.99 1199.48,1220.88 1200.07,1224.31 1200.65,1222.9 1201.24,1221.35 1201.83,1219.92 1202.41,1218.71 1203,1217.66 1203.58,1217.57 1204.17,1216.49 1204.76,1216.38 1205.34,1216.58 1205.93,1218.82 1206.52,1217.77 1207.1,1217.71 1207.69,1216.65 1208.28,1220.49 1208.86,1221.38 1209.45,1221.2 1210.03,1221.02 1210.62,1220.98 1211.21,1220.9 1211.79,1220.55 1212.38,1221.55 1212.97,1222.67 1213.55,1224.71 1214.14,1225.48 1214.73,1225.04 1215.31,1225.92 1215.9,1224.25 1216.49,1226.09 1217.07,1228.11 1217.66,1227.32 1218.24,1226.98 1218.83,1225.16 1219.42,1223.66 1220,1220.89 1220.59,1217.06 1221.18,1215.73 1221.76,1214.66 1222.35,1217.33 1222.94,1217.17 1223.52,1218.39 1224.11,1217.26 1224.7,1213.71 1225.28,1213.98 1225.87,1216.48 1226.45,1214.19 1227.04,1213.15 1227.63,1214.69 1228.21,1213.94 1228.8,1214.2 1229.39,1213.45 1229.97,1215.05 1230.56,1214.2 1231.15,1212.2 1231.73,1213.55 1232.32,1215.07 1232.91,1216.43 1233.49,1216.81 1234.08,1215.62 1234.66,1217.05 1235.25,1215.92 1235.84,1215.89 1236.42,1217.4 1237.01,1223.45 1237.6,1223.14 1238.18,1224.01 1238.77,1224.85 1239.36,1225.99 1239.94,1221.9 1240.53,1220.47 1241.11,1220.16 1241.7,1219.98 1242.29,1220.05 1242.87,1219.98 1243.46,1219.75 1244.05,1219.67 1244.63,1219.62 1245.22,1219.8 1245.81,1219.6 1246.39,1218.34 1246.98,1219.53 1247.57,1218.25 1248.15,1219.74 1248.74,1219.67 1249.32,1219.64 1249.91,1218.52 1250.5,1218.53 1251.08,1219.69 1251.67,1219.84 1252.26,1217.26 1252.84,1218.24 1253.43,1219.53 1254.02,1219.45 1254.6,1219.19 1255.19,1224.88 1255.78,1223.3 1256.36,1223.14 1256.95,1221.76 1257.53,1225.11 1258.12,1224.55 1258.71,1223.07 1259.29,1221.54 1259.88,1222.69 1260.47,1222.3 1261.05,1221.27 1261.64,1223.43 1262.23,1225.38 1262.81,1226.56 1263.4,1223.88 1263.98,1222.47 1264.57,1226.05 1265.16,1224.6 1265.74,1222.84 1266.33,1224.97 1266.92,1224.61 1267.5,1226.86 1268.09,1225.49 1268.68,1227.48 1269.26,1225.69 1269.85,1224.35 1270.44,1222.64 1271.02,1222.68 1271.61,1223.94 1272.19,1223.6 1272.78,1222.36 1273.37,1221.05 1273.95,1219.87 1274.54,1218.79 1275.13,1216.48 1275.71,1216.68 1276.3,1213.31 1276.89,1214.59 1277.47,1217.16 1278.06,1218.38 1278.65,1217.34 1279.23,1217.44 1279.82,1218.71 1280.4,1222.23 1280.99,1222.22 1281.58,1220.96 1282.16,1220.88 1282.75,1219.56 1283.34,1219.45 1283.92,1215.34 1284.51,1215.42 1285.1,1216.7 1285.68,1216.77 1286.27,1216.93 1286.86,1216.91 1287.44,1216.91 1288.03,1217.04 1288.61,1219.39 1289.2,1219.33 1289.79,1220.65 1290.37,1221.88 1290.96,1223.07 1291.55,1221.51 1292.13,1221.39 1292.72,1223.56 1293.31,1222.17 1293.89,1221.01 1294.48,1218.33 1295.06,1217.04 1295.65,1218.38 1296.24,1223.07 1296.82,1223.94 1297.41,1222.47 1298,1219.95 1298.58,1218.51 1299.17,1217.24 1299.76,1217.34 1300.34,1217.46 1300.93,1218.7 1301.52,1219.88 1302.1,1220.88 1302.69,1221.93 1303.27,1223.02 1303.86,1221.56 1304.45,1222.86 1305.03,1220.15 1305.62,1218.89 1306.21,1216.53 1306.79,1216.81 1307.38,1216.83 1307.97,1220.31 1308.55,1219.05 1309.14,1217.89 1309.73,1219.05 1310.31,1216.43 1310.9,1215.16 1311.48,1217.57 1312.07,1215 1312.66,1215.03 1313.24,1215.33 1313.83,1215.65 1314.42,1216.82 1315,1212.93 1315.59,1214.35 1316.18,1215.62 1316.76,1214.81 1317.35,1217.4 1317.93,1217.44 1318.52,1215.37 1319.11,1216.8 1319.69,1218.31 1320.28,1216.98 1320.87,1218.26 1321.45,1218.29 1322.04,1216.01 1322.63,1216.18 1323.21,1216.51 1323.8,1216.64 1324.39,1218.02 1324.97,1217.76 1325.56,1216.36 1326.14,1217.45 1326.73,1209.29 1327.32,1209.96 1327.9,1209.21 1328.49,1209.66 1329.08,1208.97 1329.66,1205.69 1330.25,1205.14 1330.84,1204.59 1331.42,1205.2 1332.01,1203.4 1332.6,1203.35 1333.18,1201.8 1333.77,1201.54 1334.35,1200.12 1334.94,1202.33 1335.53,1203.3 1336.11,1200.48 1336.7,1201.48 1337.29,1203.63 1337.87,1200.91 1338.46,1204.4 1339.05,1208.73 1339.63,1210.82 1340.22,1209.9 1340.8,1211.44 1341.39,1211.9 1341.98,1214.75 1342.56,1217.09 1343.15,1219.58 1343.74,1218.53 1344.32,1218.86 1344.91,1216.52 1345.5,1219.12 1346.08,1221.59 1346.67,1220.33 1347.26,1220.56 1347.84,1221.52 1348.43,1222.61 1349.01,1218.85 1349.6,1219.98 1350.19,1217.54 1350.77,1221.11 1351.36,1218.82 1351.95,1215.63 1352.53,1214.67 1353.12,1214.76 1353.71,1217.4 1354.29,1217.2 1354.88,1217.18 1355.47,1218.46 1356.05,1215.88 1356.64,1217.1 1357.22,1218.41 1357.81,1218.31 1358.4,1214.96 1358.98,1214.85 1359.57,1218.09 1360.16,1219.48 1360.74,1219.68 1361.33,1222.08 1361.92,1222.03 1362.5,1222 1363.09,1221.75 1363.68,1221.61 1364.26,1221.35 1364.85,1221.47 1365.43,1223.82 1366.02,1223.59 1366.61,1221 1367.19,1222 1367.78,1223.18 1368.37,1221.82 1368.95,1221.74 1369.54,1222.74 1370.13,1223.8 1370.71,1223.41 1371.3,1219.83 1371.88,1220.08 1372.47,1218.73 1373.06,1216.41 1373.64,1217.83 1374.23,1219.09 1374.82,1216.41 1375.4,1216.59 1375.99,1215.19 1376.58,1215.53 1377.16,1215.65 1377.75,1217.02 1378.34,1218.24 1378.92,1218.32 1379.51,1221.89 1380.09,1221.46 1380.68,1220.27 1381.27,1223.98 1381.85,1223.67 1382.44,1223.13 1383.03,1222.99 1383.61,1223.87 1384.2,1224.98 1384.79,1225.83 1385.37,1226.84 1385.96,1232.16 1386.55,1230.01 1387.13,1230.61 1387.72,1228.8 1388.3,1228.33 1388.89,1228.91 1389.48,1228.23 1390.06,1225.22 1390.65,1224.92 1391.24,1224.66 1391.82,1224.15 1392.41,1223.8 1393,1224.71 1393.58,1225.43 1394.17,1227.17 1394.75,1227.65 1395.34,1227.23 1395.93,1226.68 1396.51,1221.5 1397.1,1226.11 1397.69,1225.65 1398.27,1227.5 1398.86,1226.76 1399.45,1225.16 1400.03,1228.31 1400.62,1226.81 1401.21,1227.64 1401.79,1228.55 1402.38,1227.86 1402.96,1229.45 1403.55,1228.76 1404.14,1225.64 1404.72,1228.84 1405.31,1228.19 1405.9,1225.17 1406.48,1227.21 1407.07,1225.47 1407.66,1223.83 1408.24,1222.14 1408.83,1220.48 1409.42,1220.49 1410,1215.51 1410.59,1217.81 1411.17,1217.78 1411.76,1216.92 1412.35,1217.93 1412.93,1216.77 1413.52,1214.58 1414.11,1214.66 1414.69,1213.64 1415.28,1213.76 1415.87,1215.31 1416.45,1211.74 1417.04,1211.98 1417.63,1209.95 1418.21,1211.5 1418.8,1212.98 1419.38,1215.41 1419.97,1215.58 1420.56,1218 1421.14,1218.1 1421.73,1220.46 1422.32,1220.08 1422.9,1222.34 1423.49,1219.87 1424.08,1218.53 1424.66,1217.47 1425.25,1215.4 1425.83,1213.35 1426.42,1214.72 1427.01,1214.77 1427.59,1213.67 1428.18,1215.11 1428.77,1217.58 1429.35,1218.79 1429.94,1217.42 1430.53,1218.66 1431.11,1218.7 1431.7,1219.86 1432.29,1217.82 1432.87,1215.55 1433.46,1218.2 1434.04,1215.71 1434.63,1214.7 1435.22,1214.77 1435.8,1216.28 1436.39,1219.95 1436.98,1219.78 1437.56,1216.09 1438.15,1214.84 1438.74,1217.54 1439.32,1214.95 1439.91,1215 1440.5,1215.33 1441.08,1216.71 1441.67,1214.38 1442.25,1212.14 1442.84,1213.82 1443.43,1212.93 1444.01,1213.33 1444.6,1214.07 1445.19,1214.54 1445.77,1214.56 1446.36,1216.15 1446.95,1213.91 1447.53,1213.06 1448.12,1214.61 1448.7,1214.66 1449.29,1216.11 1449.88,1218.88 1450.46,1220.04 1451.05,1220.12 1451.64,1220.03 1452.22,1221.08 1452.81,1219.86 1453.4,1218.56 1453.98,1217.71 1454.57,1217.68 1455.16,1217.72 1455.74,1217.91 1456.33,1217.76 1456.91,1216.67 1457.5,1218.21 1458.09,1219.14 1458.67,1222.71 1459.26,1226 1459.85,1223.53 1460.43,1223.48 1461.02,1224.36 1461.61,1221.72 1462.19,1221.55 1462.78,1221.16 1463.37,1221.01 1463.95,1223.17 1464.54,1223.04 1465.12,1221.84 1465.71,1221.84 1466.3,1223.97 1466.88,1226 1467.47,1225.55 1468.06,1221.84 1468.64,1222.96 1469.23,1220.39 1469.82,1218.15 1470.4,1215.63 1470.99,1215.51 1471.57,1216.9 1472.16,1216.84 1472.75,1215.58 1473.33,1215.82 1473.92,1213.65 1474.51,1214.08 1475.09,1214.28 1475.68,1214.6 1476.27,1214.7 1476.85,1213.77 1477.44,1216.33 1478.03,1217.44 1478.61,1217.47 1479.2,1218.88 1479.78,1217.87 1480.37,1218.06 1480.96,1219.25 1481.54,1219.14 1482.13,1220.17 1482.72,1221.21 1483.3,1221.12 1483.89,1221.18 1484.48,1221.07 1485.06,1222.05 1485.65,1223.02 1486.24,1223.08 1486.82,1221.76 1487.41,1221.78 1487.99,1221.68 1488.58,1221.24 1489.17,1219.93 1489.75,1222.21 1490.34,1221.88 1490.93,1220.69 1491.51,1221.66 1492.1,1223.83 1492.69,1220.22 1493.27,1220.03 1493.86,1222.44 1494.45,1222.17 1495.03,1224.67 1495.62,1223.23 1496.2,1224.14 1496.79,1222.69 1497.38,1221.06 1497.96,1222.09 1498.55,1223.02 1499.14,1221.68 1499.72,1221.22 1500.31,1218.54 1500.9,1216.13 1501.48,1214.93 1502.07,1211.89 1502.65,1212.41 1503.24,1215.3 1503.83,1218.09 1504.41,1218.09 1505,1218.11 1505.59,1215.49 1506.17,1214.43 1506.76,1214.86 1507.35,1212.56 1507.93,1212.78 1508.52,1215.57 1509.11,1218.13 1509.69,1215.85 1510.28,1214.62 1510.86,1212.49 1511.45,1211.41 1512.04,1211.91 1512.62,1212.29 1513.21,1212.55 1513.8,1214.02 1514.38,1215.31 1514.97,1215.61 1515.56,1217.03 1516.14,1214.74 1516.73,1217.38 1517.32,1217.68 1517.9,1221.09 1518.49,1219.65 1519.07,1217.14 1519.66,1216.02 1520.25,1216.2 1520.83,1215.32 1521.42,1215.45 1522.01,1215.65 1522.59,1215.98 1523.18,1216.15 1523.77,1215.1 1524.35,1216.59 1524.94,1217.81 1525.52,1219 1526.11,1218.87 1526.7,1220.08 1527.28,1222.32 1527.87,1219.87 1528.46,1223.3 1529.04,1224.34 1529.63,1224.38 1530.22,1226.57 1530.8,1226.37 1531.39,1222.67 1531.98,1222.47 1532.56,1220.97 1533.15,1220.91 1533.73,1220.65 1534.32,1220.69 1534.91,1220.23 1535.49,1220.02 1536.08,1221.17 1536.67,1220.96 1537.25,1220.67 1537.84,1220.49 1538.43,1220.62 1539.01,1221.62 1539.6,1219.08 1540.19,1216.74 1540.77,1215.69 1541.36,1216.05 1541.94,1217.42 1542.53,1217.46 1543.12,1216.4 1543.7,1215.46 1544.29,1215.66 1544.88,1216.94 1545.46,1217.14 1546.05,1216.27 1546.64,1221.47 1547.22,1221.32 1547.81,1221.01 1548.4,1221.98 1548.98,1222.97 1549.57,1224.1 1550.15,1224.98 1550.74,1223.52 1551.33,1223.02 1551.91,1223.98 1552.5,1224.93 1553.09,1225.78 1553.67,1220.54 1554.26,1219.19 1554.85,1216.62 1555.43,1214.21 1556.02,1213.23 1556.6,1213.34 1557.19,1210.08 1557.78,1209.46 1558.36,1213.54 1558.95,1211.59 1559.54,1214.39 1560.12,1213.25 1560.71,1210.05 1561.3,1210.64 1561.88,1213.36 1562.47,1212.44 1563.06,1214.08 1563.64,1213.3 1564.23,1213.58 1564.81,1212.68 1565.4,1214.16 1565.99,1214.6 1566.57,1214.75 1567.16,1216.01 1567.75,1217.44 1568.33,1217.22 1568.92,1214.99 1569.51,1215.09 1570.09,1212.93 1570.68,1209.68 1571.27,1210.3 1571.85,1211.96 1572.44,1212.43 1573.02,1211.79 1573.61,1213.29 1574.2,1213.62 1574.78,1213.82 1575.37,1214.01 1575.96,1214.48 1576.54,1213.55 1577.13,1211.57 1577.72,1213.01 1578.3,1216.77 1578.89,1217.06 1579.47,1212.42 1580.06,1215.23 1580.65,1219.02 1581.23,1220.11 1581.82,1218.67 1582.41,1221.17 1582.99,1216.29 1583.58,1215.47 1584.17,1214.43 1584.75,1213.56 1585.34,1216.3 1585.93,1217.55 1586.51,1217.87 1587.1,1215.43 1587.68,1218.02 1588.27,1219.31 1588.86,1225.11 1589.44,1225.73 1590.03,1222.88 1590.62,1223.74 1591.2,1225.91 1591.79,1225.36 1592.38,1226.47 1592.96,1224.81 1593.55,1222.02 1594.14,1220.64 1594.72,1219.27 1595.31,1221.64 1595.89,1219.49 1596.48,1221.68 1597.07,1221.31 1597.65,1217.64 1598.24,1216.58 1598.83,1218.22 1599.41,1217.18 1600,1218.39 1600.59,1217.3 1601.17,1217.11 1601.76,1217.12 1602.34,1219.44 1602.93,1221.86 1603.52,1220.62 1604.1,1222.96 1604.69,1225.11 1605.28,1224.73 1605.86,1223.11 1606.45,1225.34 1607.04,1224.06 1607.62,1227.29 1608.21,1225.8 1608.8,1224.35 1609.38,1225.1 1609.97,1224.92 1610.55,1223.08 1611.14,1224.28 1611.73,1219.28 1612.31,1220.35 1612.9,1219.07 1613.49,1221.66 1614.07,1222.52 1614.66,1217.66 1615.25,1216.62 1615.83,1217.03 1616.42,1217.18 1617.01,1216.23 1617.59,1214.11 1618.18,1214.55 1618.76,1213.51 1619.35,1216.15 1619.94,1218.51 1620.52,1218.35 1621.11,1218.33 1621.7,1217.22 1622.28,1218.51 1622.87,1218.37 1623.46,1216.04 1624.04,1217.25 1624.63,1218.66 1625.22,1218.91 1625.8,1217.59 1626.39,1218.54 1626.97,1217.31 1627.56,1212.53 1628.15,1211.79 1628.73,1212.01 1629.32,1212.46 1629.91,1212.57 1630.49,1212.74 1631.08,1214.25 1631.67,1216.6 1632.25,1218.01 1632.84,1218.21 1633.42,1218.06 1634.01,1219.25 1634.6,1218.03 1635.18,1220.62 1635.77,1219.53 1636.36,1220.61 1636.94,1220.37 1637.53,1220.14 1638.12,1222.37 1638.7,1223.34 1639.29,1222.95 1639.88,1223.86 1640.46,1221.36 1641.05,1220.39 1641.63,1222.75 1642.22,1222.74 1642.81,1222.51 1643.39,1222.32 1643.98,1219.21 1644.57,1216.9 1645.15,1219.56 1645.74,1220.73 1646.33,1221.77 1646.91,1217.98 1647.5,1218.01 1648.09,1220.38 1648.67,1221.7 1649.26,1222.66 1649.84,1223.43 1650.43,1225.72 1651.02,1221.67 1651.6,1218.87 1652.19,1217.65 1652.78,1222.65 1653.36,1222.35 1653.95,1222.08 1654.54,1223.04 1655.12,1222.64 1655.71,1219.84 1656.29,1219.9 1656.88,1222.39 1657.47,1222.03 1658.05,1221.84 1658.64,1225.38 1659.23,1224.81 1659.81,1223.25 1660.4,1223.11 1660.99,1223.1 1661.57,1224.03 1662.16,1221.43 1662.75,1222.29 1663.33,1220.93 1663.92,1221.76 1664.5,1224.02 1665.09,1222.47 1665.68,1222.38 1666.26,1224.58 1666.85,1224.35 1667.44,1225.29 1668.02,1228.16 1668.61,1226.58 1669.2,1224.84 1669.78,1224.42 1670.37,1222.9 1670.96,1223.77 1671.54,1222.21 1672.13,1221.14 1672.71,1217.38 1673.3,1218.86 1673.89,1214.91 1674.47,1216.31 1675.06,1215.39 1675.65,1215.53 1676.23,1217.09 1676.82,1217.27 1677.41,1216.49 1677.99,1217.61 1678.58,1217.73 1679.17,1219.01 1679.75,1217.64 1680.34,1220.13 1680.92,1218.78 1681.51,1219.88 1682.1,1221.05 1682.68,1222.32 1683.27,1223.42 1683.86,1224.19 1684.44,1223.72 1685.03,1224.71 1685.62,1224.44 1686.2,1226.73 1686.79,1226.04 1687.37,1226.87 1687.96,1228.7 1688.55,1227.35 1689.13,1225.77 1689.72,1226.65 1690.31,1224.08 1690.89,1222.38 1691.48,1222.08 1692.07,1220.53 1692.65,1219.66 1693.24,1214.79 1693.83,1213.77 1694.41,1211.99 1695,1212.32 1695.58,1213.8 1696.17,1211.53 1696.76,1211.83 1697.34,1212.02 1697.93,1213.54 1698.52,1212.81 1699.1,1211.92 1699.69,1211.14 1700.28,1210.32 1700.86,1209.72 1701.45,1210 1702.04,1211.51 1702.62,1212.02 1703.21,1213.25 1703.79,1214.58 1704.38,1213.62 1704.97,1216.21 1705.55,1216.13 1706.14,1218.47 1706.73,1219.28 1707.31,1221.91 1707.9,1222.84 1708.49,1220.25 1709.07,1220.05 1709.66,1218.76 1710.24,1220.07 1710.83,1220.02 1711.42,1219.8 1712,1217.26 1712.59,1216.1 1713.18,1214.91 1713.76,1216.37 1714.35,1217.84 1714.94,1218.99 1715.52,1219.19 1716.11,1218 1716.7,1217.89 1717.28,1215.56 1717.87,1215.65 1718.45,1215.85 1719.04,1218.69 1719.63,1219.71 1720.21,1218.34 1720.8,1215.83 1721.39,1214.85 1721.97,1215.16 1722.56,1217.6 1723.15,1220.08 1723.73,1219.99 1724.32,1223.44 1724.91,1223.16 1725.49,1222.69 1726.08,1222.32 1726.66,1221.93 1727.25,1222.74 1727.84,1221.17 1728.42,1218.84 1729.01,1216.33 1729.6,1217.5 1730.18,1217.7 1730.77,1218.94 1731.36,1219 1731.94,1216.5 1732.53,1215.41 1733.11,1215.51 1733.7,1214.61 1734.29,1216.17 1734.87,1217.67 1735.46,1217.6 1736.05,1216.54 1736.63,1215.26 1737.22,1215.41 1737.81,1213.02 1738.39,1213.29 1738.98,1213.48 1739.57,1213.81 1740.15,1212.81 1740.74,1214.4 1741.32,1214.79 1741.91,1217.38 1742.5,1216.31 1743.08,1218.77 1743.67,1215.19 1744.26,1216.85 1744.84,1215.74 1745.43,1215.63 1746.02,1213.33 1746.6,1211.39 1747.19,1212.08 1747.78,1212.36 1748.36,1211.44 1748.95,1211.85 1749.53,1213.53 1750.12,1216.31 1750.71,1219.91 1751.29,1218.72 1751.88,1218.57 1752.47,1218.61 1753.05,1219.97 1753.64,1221.28 1754.23,1223.67 1754.81,1222.17 1755.4,1223.41 1755.99,1221.72 1756.57,1220.7 1757.16,1220.68 1757.74,1220.43 1758.33,1220.31 1758.92,1218.01 1759.5,1218.89 1760.09,1219.81 1760.68,1218.36 1761.26,1216.08 1761.85,1217.25 1762.44,1218.29 1763.02,1217.06 1763.61,1218.39 1764.19,1220.74 1764.78,1221.02 1765.37,1222.46 1765.95,1219.89 1766.54,1220.8 1767.13,1221.85 1767.71,1225.24 1768.3,1224.91 1768.89,1222.17 1769.47,1222.11 1770.06,1225.47 1770.65,1225.11 1771.23,1226 1771.82,1225.74 1772.4,1225.36 1772.99,1225.15 1773.58,1222.45 1774.16,1223.23 1774.75,1222.88 1775.34,1221.56 1775.92,1222.45 1776.51,1220.9 1777.1,1219.66 1777.68,1217.29 1778.27,1216 1778.86,1215.15 1779.44,1215.17 1780.03,1216.33 1780.61,1215.3 1781.2,1215.36 1781.79,1214.1 1782.37,1213.1 1782.96,1214.69 1783.55,1211.53 1784.13,1214.13 1784.72,1213.15 1785.31,1212.19 1785.89,1212.54 1786.48,1213.99 1787.06,1215.25 1787.65,1215.6 1788.24,1215.68 1788.82,1213.27 1789.41,1212.47 1790,1213.82 1790.58,1211.8 1791.17,1213.41 1791.76,1213.85 1792.34,1215.2 1792.93,1217.54 1793.52,1218.88 1794.1,1221.49 1794.69,1221.66 1795.27,1221.44 1795.86,1222.58 1796.45,1221.82 1797.03,1221.51 1797.62,1222.42 1798.21,1224.75 1798.79,1224.3 1799.38,1224.1 1799.97,1226.35 1800.55,1228.48 1801.14,1227.98 1801.73,1228.56 1802.31,1231.29 1802.9,1229.23 1803.48,1229.81 1804.07,1230.18 1804.66,1229.29 1805.24,1229.87 1805.83,1226.57 1806.42,1223.58 1807,1224.3 1807.59,1226.32 1808.18,1227.02 1808.76,1221.7 1809.35,1220.54 1809.94,1220.34 1810.52,1220.28 1811.11,1220.37 1811.69,1220.21 1812.28,1219.77 1812.87,1217.6 1813.45,1219.91 1814.04,1220.88 1814.63,1218.1 1815.21,1216.97 1815.8,1217.05 1816.39,1215.78 1816.97,1214.77 1817.56,1214.6 1818.14,1214.82 1818.73,1213.77 1819.32,1212.73 1819.9,1210.67 1820.49,1207.5 1821.08,1206.82 1821.66,1207.31 1822.25,1209.2 1822.84,1208.74 1823.42,1211.82 1824.01,1211.07 1824.6,1212.86 1825.18,1213.04 1825.77,1213.59 1826.35,1211.48 1826.94,1211.92 1827.53,1213.56 1828.11,1213.81 1828.7,1215.25 1829.29,1215.25 1829.87,1214.3 1830.46,1217.01 1831.05,1218.17 1831.63,1218.19 1832.22,1217.17 1832.81,1218.48 1833.39,1218.58 1833.98,1216.18 1834.56,1216.21 1835.15,1216.6 1835.74,1214.21 1836.32,1213.19 1836.91,1215.83 1837.5,1215.02 1838.08,1215.21 1838.67,1214.12 1839.26,1213.15 1839.84,1214.76 1840.43,1212.48 1841.01,1216.4 1841.6,1212.77 1842.19,1213.06 1842.77,1208.77 1843.36,1214.19 1843.95,1215.71 1844.53,1215.97 1845.12,1214.79 1845.71,1215.08 1846.29,1215.34 1846.88,1214.35 1847.47,1215.76 1848.05,1216.79 1848.64,1214.56 1849.22,1214.94 1849.81,1216.41 1850.4,1216.69 1850.98,1215.65 1851.57,1218.1 1852.16,1219.31 1852.74,1219.15 1853.33,1221.43 1853.92,1223.56 1854.5,1223.35 1855.09,1221.96 1855.68,1224.13 1856.26,1222.41 1856.85,1224.71 1857.43,1221.83 1858.02,1221.51 1858.61,1222.38 1859.19,1222.24 1859.78,1223.53 1860.37,1223.26 1860.95,1223.05 1861.54,1223.01 1862.13,1222.88 1862.71,1221.44 1863.3,1221.4 1863.88,1221.26 1864.47,1220.15 1865.06,1217.77 1865.64,1220.27 1866.23,1217.45 1866.82,1218.57 1867.4,1217.55 1867.99,1218.91 1868.58,1218.77 1869.16,1219.02 1869.75,1220.31 1870.34,1220.16 1870.92,1219.8 1871.51,1222.15 1872.09,1223.11 1872.68,1222.64 1873.27,1222.47 1873.85,1223.51 1874.44,1223.16 1875.03,1223.09 1875.61,1223.94 1876.2,1224.94 1876.79,1225.87 1877.37,1222.92 1877.96,1223.86 1878.55,1223.57 1879.13,1224.69 1879.72,1225.45 1880.3,1225.91 1880.89,1225.41 1881.48,1223.96 1882.06,1224.85 1882.65,1223.27 1883.24,1221.92 1883.82,1221.62 1884.41,1223.9 1885,1223.41 1885.58,1224.51 1886.17,1224.26 1886.76,1226.57 1887.34,1223.69 1887.93,1222.18 1888.51,1220.77 1889.1,1220.73 1889.69,1219.57 1890.27,1218.3 1890.86,1218.2 1891.45,1215.98 1892.03,1216.05 1892.62,1217.37 1893.21,1218.57 1893.79,1217.41 1894.38,1217.46 1894.96,1218.98 1895.55,1217.52 1896.14,1218.88 1896.72,1218.93 1897.31,1217.91 1897.9,1217.8 1898.48,1217.79 1899.07,1220.08 1899.66,1218.61 1900.24,1221.06 1900.83,1218.52 1901.42,1215.75 1902,1214.46 1902.59,1215.61 1903.17,1213.51 1903.76,1212.48 1904.35,1212.64 1904.93,1211.63 1905.52,1211.16 1906.11,1210.26 1906.69,1210.52 1907.28,1209.77 1907.87,1210.27 1908.45,1214.18 1909.04,1213.02 1909.63,1214.31 1910.21,1216.86 1910.8,1216.98 1911.38,1214.65 1911.97,1214.92 1912.56,1215.04 1913.14,1215.44 1913.73,1211.7 1914.32,1212.08 1914.9,1212.77 1915.49,1210.66 1916.08,1210.82 1916.66,1210.08 1917.25,1210.55 1917.83,1210.68 1918.42,1211.14 1919.01,1214.02 1919.59,1215.54 1920.18,1215.87 1920.77,1212.57 1921.35,1213.01 1921.94,1214.77 1922.53,1216.48 1923.11,1219.14 1923.7,1218.05 1924.29,1216.76 1924.87,1218.24 1925.46,1218.09 1926.04,1216.6 1926.63,1216.78 1927.22,1218.14 1927.8,1214.8 1928.39,1216.39 1928.98,1215.46 1929.56,1214.4 1930.15,1214.57 1930.74,1213.78 1931.32,1215.48 1931.91,1214.36 1932.5,1214.73 1933.08,1215.1 1933.67,1215.53 1934.25,1215.67 1934.84,1217.09 1935.43,1213.51 1936.01,1214.91 1936.6,1215.11 1937.19,1216.7 1937.77,1214.52 1938.36,1213.55 1938.95,1209.04 1939.53,1209.58 1940.12,1207.64 1940.71,1208.17 1941.29,1210.02 1941.88,1210.34 1942.46,1211.97 1943.05,1212.6 1943.64,1212.99 1944.22,1217.06 1944.81,1215.91 1945.4,1216.45 1945.98,1215.22 1946.57,1216.7 1947.16,1218.07 1947.74,1217 1948.33,1216.01 1948.91,1215.29 1949.5,1215.5 1950.09,1215.98 1950.67,1216.21 1951.26,1216.44 1951.85,1216.62 1952.43,1216.69 1953.02,1216.74 1953.61,1216.83 1954.19,1214.67 1954.78,1213.7 1955.37,1213.86 1955.95,1215.09 1956.54,1215.14 1957.12,1217.96 1957.71,1219.26 1958.3,1220.43 1958.88,1222.71 1959.47,1222.33 1960.06,1219.58 1960.64,1220.9 1961.23,1220.87 1961.82,1222.22 1962.4,1221.08 1962.99,1221.14 1963.58,1221.95 1964.16,1224.11 1964.75,1223.6 1965.33,1224.4 1965.92,1223.09 1966.51,1222.95 1967.09,1222.66 1967.68,1222.53 1968.27,1221.07 1968.85,1219.82 1969.44,1217.48 1970.03,1217.39 1970.61,1221.13 1971.2,1222.44 1971.78,1219.65 1972.37,1219.55 1972.96,1219.69 1973.54,1218.54 1974.13,1218.52 1974.72,1221.08 1975.3,1222.13 1975.89,1222.82 1976.48,1223.69 1977.06,1223.42 1977.65,1221.86 1978.24,1222.58 1978.82,1221.05 1979.41,1217.12 1979.99,1218.16 1980.58,1215.74 1981.17,1216.03 1981.75,1215.19 1982.34,1218.93 1982.93,1216.54 1983.51,1219.13 1984.1,1220.16 1984.69,1217.82 1985.27,1221.54 1985.86,1221.19 1986.45,1221.02 1987.03,1220.78 1987.62,1220.89 1988.2,1219.57 1988.79,1219.56 1989.38,1224.07 1989.96,1223.54 1990.55,1225.77 1991.14,1226.69 1991.72,1223.72 1992.31,1225.43 1992.9,1224.91 1993.48,1224.46 1994.07,1226.59 1994.65,1227.45 1995.24,1227.97 1995.83,1228.62 1996.41,1230.39 1997,1227.53 1997.59,1228.05 1998.17,1226.37 1998.76,1226.02 1999.35,1229.25 1999.93,1228.55 2000.52,1228 2001.11,1228.54 2001.69,1230.55 2002.28,1231.09 2002.86,1230.23 2003.45,1229.66 2004.04,1227.8 2004.62,1228.55 2005.21,1226.82 2005.8,1225.2 2006.38,1218.77 2006.97,1218.75 2007.56,1219.82 2008.14,1217.15 2008.73,1218.13 2009.32,1216.74 2009.9,1216.54 2010.49,1214.26 2011.07,1216.77 2011.66,1217.93 2012.25,1215.49 2012.83,1215.92 2013.42,1215.76 2014.01,1215.89 2014.59,1213.72 2015.18,1216.6 2015.77,1214.38 2016.35,1211.8 2016.94,1212.19 2017.53,1213.96 2018.11,1214.54 2018.7,1213.42 2019.28,1212.45 2019.87,1210.48 2020.46,1213.38 2021.04,1213.8 2021.63,1212.86 2022.22,1213.2 2022.8,1213.57 2023.39,1212.83 2023.98,1211.97 2024.56,1213.79 2025.15,1215.57 2025.73,1215.88 2026.32,1216.21 2026.91,1217.2 2027.49,1218.52 2028.08,1218.93 2028.67,1219.93 2029.25,1219.89 2029.84,1219.85 2030.43,1219.64 2031.01,1218.53 2031.6,1218.74 2032.19,1218.64 2032.77,1218.95 2033.36,1217.91 2033.94,1221.74 2034.53,1221.77 2035.12,1221.89 2035.7,1222.78 2036.29,1222.61 2036.88,1222.41 2037.46,1218.57 2038.05,1219.71 2038.64,1220.94 2039.22,1220.95 2039.81,1222.13 2040.4,1221.87 2040.98,1220.63 2041.57,1221.79 2042.15,1221.86 2042.74,1221.75 2043.33,1224.9 2043.91,1224.32 2044.5,1224.01 2045.09,1223.65 2045.67,1223.54 2046.26,1223.31 2046.85,1223.38 2047.43,1222.85 2048.02,1220.05 2048.6,1219.79 2049.19,1220.98 2049.78,1219.77 2050.36,1218.54 2050.95,1217.07 2051.54,1214.96 2052.12,1215.11 2052.71,1213.02 2053.3,1211.99 2053.88,1213.63 2054.47,1213.64 2055.06,1216.23 2055.64,1216.5 2056.23,1217.84 2056.81,1218.05 2057.4,1219.25 2057.99,1216.86 2058.57,1218.3 2059.16,1221.61 2059.75,1220.01 2060.33,1217.53 2060.92,1218.69 2061.51,1220.03 2062.09,1221.04 2062.68,1219.87 2063.27,1222.35 2063.85,1224.34 2064.44,1222.66 2065.02,1221.26 2065.61,1220.02 2066.2,1218.84 2066.78,1216.49 2067.37,1219.28 2067.96,1219.25 2068.54,1221.41 2069.13,1218.5 2069.72,1217.24 2070.3,1214.75 2070.89,1215.91 2071.48,1217.19 2072.06,1217.14 2072.65,1215.73 2073.23,1216.08 2073.82,1217.45 2074.41,1217.57 2074.99,1216.65 2075.58,1215.61 2076.17,1216.78 2076.75,1216.94 2077.34,1216.96 2077.93,1215.71 2078.51,1215.85 2079.1,1215.95 2079.68,1211.31 2080.27,1211.63 2080.86,1214.18 2081.44,1213.2 2082.03,1213.64 2082.62,1214.82 2083.2,1213.78 2083.79,1215.08 2084.38,1214.05 2084.96,1216.54 2085.55,1215.53 2086.14,1217.95 2086.72,1217.87 2087.31,1219.05 2087.89,1217.83 2088.48,1218.04 2089.07,1221.78 2089.65,1220.28 2090.24,1219.84 2090.83,1217.31 2091.41,1217.28 2092,1216.05 2092.59,1218.45 2093.17,1218.54 2093.76,1220.82 2094.35,1222.71 2094.93,1221.2 2095.52,1218.87 2096.1,1218.7 2096.69,1216.31 2097.28,1216.36 2097.86,1216.46 2098.45,1215.34 2099.04,1213.06 2099.62,1213.4 2100.21,1212.67 2100.8,1213 2101.38,1212.26 2101.97,1211.6 2102.55,1208.21 2103.14,1211.41 2103.73,1211.84 2104.31,1214.6 2104.9,1216.12 2105.49,1217.41 2106.07,1217.26 2106.66,1217.32 2107.25,1216.21 2107.83,1215.27 2108.42,1215.5 2109.01,1215.78 2109.59,1215.89 2110.18,1218.44 2110.76,1220.8 2111.35,1222.67 2111.94,1223.4 2112.52,1220.79 2113.11,1220.94 2113.7,1221.06 2114.28,1221.03 2114.87,1220.81 2115.46,1222.81 2116.04,1223.74 2116.63,1225.75 2117.22,1225.68 2117.8,1224.3 2118.39,1224.06 2118.97,1224.96 2119.56,1222.22 2120.15,1225.53 2120.73,1223.9 2121.32,1223.57 2121.91,1223.19 2122.49,1222.04 2123.08,1218.25 2123.67,1218.57 2124.25,1218.61 2124.84,1218.74 2125.42,1218.71 2126.01,1218.6 2126.6,1220.92 2127.18,1219.61 2127.77,1218.26 2128.36,1220.7 2128.94,1222.07 2129.53,1223.07 2130.12,1224 2130.7,1223.38 2131.29,1217.36 2131.88,1218.62 2132.46,1218.86 2133.05,1221.46 2133.63,1221.2 2134.22,1223.07 2134.81,1221.62 2135.39,1220.32 2135.98,1222.55 2136.57,1222.35 2137.15,1221.87 2137.74,1223.96 2138.33,1222.51 2138.91,1223.6 2139.5,1221.05 2140.09,1219.82 2140.67,1219.66 2141.26,1219.67 2141.84,1219.75 2142.43,1218.5 2143.02,1218.4 2143.6,1218.38 2144.19,1217.2 2144.78,1217.23 2145.36,1217.23 2145.95,1217.12 2146.54,1213.69 2147.12,1215.3 2147.71,1215.71 2148.3,1216.99 2148.88,1217.09 2149.47,1215.95 2150.05,1216.1 2150.64,1213.81 2151.23,1213.07 2151.81,1212.06 2152.4,1212.13 2152.99,1211.15 2153.57,1210.29 2154.16,1211.15 2154.75,1211.63 2155.33,1212.18 2155.92,1212.32 2156.5,1212.66 2157.09,1212.78 2157.68,1211.72 2158.26,1212.11 \"/>\n<path clip-path=\"url(#clip512)\" d=\"M986.025 1219.18 L986.612 1219.18 L987.198 1219.18 L987.785 1219.18 L988.371 1219.18 L988.957 1219.18 L989.544 1219.18 L990.13 1219.18 L990.717 1219.18 L991.303 1219.18 L991.889 1219.18 L992.476 1219.18 L993.062 1219.18 L993.649 1219.18 L994.235 1219.18 L994.822 1219.18 L995.408 1219.18 L995.994 1219.18 L996.581 1219.18 L997.167 1219.18 L997.754 1219.18 L998.34 1219.18 L998.926 1219.18 L999.513 1219.18 L1000.1 1219.18 L1000.69 1219.18 L1001.27 1219.18 L1001.86 1219.18 L1002.44 1219.18 L1003.03 1219.18 L1003.62 1219.18 L1004.2 1219.18 L1004.79 1219.18 L1005.38 1219.18 L1005.96 1219.18 L1006.55 1219.18 L1007.14 1219.18 L1007.72 1219.18 L1008.31 1219.18 L1008.9 1219.18 L1009.48 1219.18 L1010.07 1219.18 L1010.65 1219.18 L1011.24 1219.18 L1011.83 1219.18 L1012.41 1219.18 L1013 1219.18 L1013.59 1219.18 L1014.17 1219.18 L1014.76 1219.18 L1015.35 1219.18 L1015.93 1219.18 L1016.52 1219.18 L1017.11 1219.18 L1017.69 1219.18 L1018.28 1219.18 L1018.86 1219.18 L1019.45 1219.18 L1020.04 1219.18 L1020.62 1219.18 L1021.21 1219.18 L1021.8 1219.18 L1022.38 1219.18 L1022.97 1219.18 L1023.56 1219.18 L1024.14 1219.18 L1024.73 1219.18 L1025.32 1219.18 L1025.9 1219.18 L1026.49 1219.18 L1027.07 1219.18 L1027.66 1219.18 L1028.25 1219.18 L1028.83 1219.18 L1029.42 1219.18 L1030.01 1219.18 L1030.59 1219.18 L1031.18 1219.18 L1031.77 1219.18 L1032.35 1219.18 L1032.94 1219.18 L1033.52 1219.18 L1034.11 1219.18 L1034.7 1219.18 L1035.28 1219.18 L1035.87 1219.18 L1036.46 1219.18 L1037.04 1219.18 L1037.63 1219.18 L1038.22 1219.18 L1038.8 1219.18 L1039.39 1219.18 L1039.98 1219.18 L1040.56 1219.18 L1041.15 1219.18 L1041.73 1219.18 L1042.32 1219.18 L1042.91 1219.18 L1043.49 1219.18 L1044.08 1219.18 L1044.67 1219.18 L1045.25 1219.18 L1045.84 1219.18 L1046.43 1219.18 L1047.01 1219.18 L1047.6 1219.18 L1048.19 1219.18 L1048.77 1219.18 L1049.36 1219.18 L1049.94 1219.18 L1050.53 1219.18 L1051.12 1219.18 L1051.7 1219.18 L1052.29 1219.18 L1052.88 1219.18 L1053.46 1219.18 L1054.05 1219.18 L1054.64 1219.18 L1055.22 1219.18 L1055.81 1219.18 L1056.39 1219.18 L1056.98 1219.18 L1057.57 1219.18 L1058.15 1219.18 L1058.74 1219.18 L1059.33 1219.18 L1059.91 1219.18 L1060.5 1219.18 L1061.09 1219.18 L1061.67 1219.18 L1062.26 1219.18 L1062.85 1219.18 L1063.43 1219.18 L1064.02 1219.18 L1064.6 1219.18 L1065.19 1219.18 L1065.78 1219.18 L1066.36 1219.18 L1066.95 1219.18 L1067.54 1219.18 L1068.12 1219.18 L1068.71 1219.18 L1069.3 1219.18 L1069.88 1219.18 L1070.47 1219.18 L1071.06 1219.18 L1071.64 1219.18 L1072.23 1219.18 L1072.81 1219.18 L1073.4 1219.18 L1073.99 1219.18 L1074.57 1219.18 L1075.16 1219.18 L1075.75 1219.18 L1076.33 1219.18 L1076.92 1219.18 L1077.51 1219.18 L1078.09 1219.18 L1078.68 1219.18 L1079.26 1219.18 L1079.85 1219.18 L1080.44 1219.18 L1081.02 1219.18 L1081.61 1219.18 L1082.2 1219.18 L1082.78 1219.18 L1083.37 1219.18 L1083.96 1219.18 L1084.54 1219.18 L1085.13 1219.18 L1085.72 1219.18 L1086.3 1219.18 L1086.89 1219.18 L1087.47 1219.18 L1088.06 1219.18 L1088.65 1219.18 L1089.23 1219.18 L1089.82 1219.18 L1090.41 1219.18 L1090.99 1219.18 L1091.58 1219.18 L1092.17 1219.18 L1092.75 1219.18 L1093.34 1219.18 L1093.93 1219.18 L1094.51 1219.18 L1095.1 1219.18 L1095.68 1219.18 L1096.27 1219.18 L1096.86 1219.18 L1097.44 1219.18 L1098.03 1219.18 L1098.62 1219.18 L1099.2 1219.18 L1099.79 1219.18 L1100.38 1219.18 L1100.96 1219.18 L1101.55 1219.18 L1102.14 1219.18 L1102.72 1219.18 L1103.31 1219.18 L1103.89 1219.18 L1104.48 1219.18 L1105.07 1219.18 L1105.65 1219.18 L1106.24 1219.18 L1106.83 1219.18 L1107.41 1219.18 L1108 1219.18 L1108.59 1219.18 L1109.17 1219.18 L1109.76 1219.18 L1110.34 1219.18 L1110.93 1219.18 L1111.52 1219.18 L1112.1 1219.18 L1112.69 1219.18 L1113.28 1219.18 L1113.86 1219.18 L1114.45 1219.18 L1115.04 1219.18 L1115.62 1219.18 L1116.21 1219.18 L1116.8 1219.18 L1117.38 1219.18 L1117.97 1219.18 L1118.55 1219.18 L1119.14 1219.18 L1119.73 1219.18 L1120.31 1219.18 L1120.9 1219.18 L1121.49 1219.18 L1122.07 1219.18 L1122.66 1219.18 L1123.25 1219.18 L1123.83 1219.18 L1124.42 1219.18 L1125.01 1219.18 L1125.59 1219.18 L1126.18 1219.18 L1126.76 1219.18 L1127.35 1219.18 L1127.94 1219.18 L1128.52 1219.18 L1129.11 1219.18 L1129.7 1219.18 L1130.28 1219.18 L1130.87 1219.18 L1131.46 1219.18 L1132.04 1219.18 L1132.63 1219.18 L1133.21 1219.18 L1133.8 1219.18 L1134.39 1219.18 L1134.97 1219.18 L1135.56 1219.18 L1136.15 1219.18 L1136.73 1219.18 L1137.32 1219.18 L1137.91 1219.18 L1138.49 1219.18 L1139.08 1219.18 L1139.67 1219.18 L1140.25 1219.18 L1140.84 1219.18 L1141.42 1219.18 L1142.01 1219.18 L1142.6 1219.18 L1143.18 1219.18 L1143.77 1219.18 L1144.36 1219.18 L1144.94 1219.18 L1145.53 1219.18 L1146.12 1219.18 L1146.7 1219.18 L1147.29 1219.18 L1147.88 1219.18 L1148.46 1219.18 L1149.05 1219.18 L1149.63 1219.18 L1150.22 1219.18 L1150.81 1219.18 L1151.39 1219.18 L1151.98 1219.18 L1152.57 1219.18 L1153.15 1219.18 L1153.74 1219.18 L1154.33 1219.18 L1154.91 1219.18 L1155.5 1219.18 L1156.09 1219.18 L1156.67 1219.18 L1157.26 1219.18 L1157.84 1219.18 L1158.43 1219.18 L1159.02 1219.18 L1159.6 1219.18 L1160.19 1219.18 L1160.78 1219.18 L1161.36 1219.18 L1161.95 1219.18 L1162.54 1219.18 L1163.12 1219.18 L1163.71 1219.18 L1164.29 1219.18 L1164.88 1219.18 L1165.47 1219.18 L1166.05 1219.18 L1166.64 1219.18 L1167.23 1219.18 L1167.81 1219.18 L1168.4 1219.18 L1168.99 1219.18 L1169.57 1219.18 L1170.16 1219.18 L1170.75 1219.18 L1171.33 1219.18 L1171.92 1219.18 L1172.5 1219.18 L1173.09 1219.18 L1173.68 1219.18 L1174.26 1219.18 L1174.85 1219.18 L1175.44 1219.18 L1176.02 1219.18 L1176.61 1219.18 L1177.2 1219.18 L1177.78 1219.18 L1178.37 1219.18 L1178.96 1219.18 L1179.54 1219.18 L1180.13 1219.18 L1180.71 1219.18 L1181.3 1219.18 L1181.89 1219.18 L1182.47 1219.18 L1183.06 1219.18 L1183.65 1219.18 L1184.23 1219.18 L1184.82 1219.18 L1185.41 1219.18 L1185.99 1219.18 L1186.58 1219.18 L1187.16 1219.18 L1187.75 1219.18 L1188.34 1219.18 L1188.92 1219.18 L1189.51 1219.18 L1190.1 1219.18 L1190.68 1219.18 L1191.27 1219.18 L1191.86 1219.18 L1192.44 1219.18 L1193.03 1219.18 L1193.62 1219.18 L1194.2 1219.18 L1194.79 1219.18 L1195.37 1219.18 L1195.96 1219.18 L1196.55 1219.18 L1197.13 1219.18 L1197.72 1219.18 L1198.31 1219.18 L1198.89 1219.18 L1199.48 1219.18 L1200.07 1219.18 L1200.65 1219.18 L1201.24 1219.18 L1201.83 1219.18 L1202.41 1219.18 L1203 1219.18 L1203.58 1219.18 L1204.17 1219.18 L1204.76 1219.18 L1205.34 1219.18 L1205.93 1219.18 L1206.52 1219.18 L1207.1 1219.18 L1207.69 1219.18 L1208.28 1219.18 L1208.86 1219.18 L1209.45 1219.18 L1210.03 1219.18 L1210.62 1219.18 L1211.21 1219.18 L1211.79 1219.18 L1212.38 1219.18 L1212.97 1219.18 L1213.55 1219.18 L1214.14 1219.18 L1214.73 1219.18 L1215.31 1219.18 L1215.9 1219.18 L1216.49 1219.18 L1217.07 1219.18 L1217.66 1219.18 L1218.24 1219.18 L1218.83 1219.18 L1219.42 1219.18 L1220 1219.18 L1220.59 1219.18 L1221.18 1219.18 L1221.76 1219.18 L1222.35 1219.18 L1222.94 1219.18 L1223.52 1219.18 L1224.11 1219.18 L1224.7 1219.18 L1225.28 1219.18 L1225.87 1219.18 L1226.45 1219.18 L1227.04 1219.18 L1227.63 1219.18 L1228.21 1219.18 L1228.8 1219.18 L1229.39 1219.18 L1229.97 1219.18 L1230.56 1219.18 L1231.15 1219.18 L1231.73 1219.18 L1232.32 1219.18 L1232.91 1219.18 L1233.49 1219.18 L1234.08 1219.18 L1234.66 1219.18 L1235.25 1219.18 L1235.84 1219.18 L1236.42 1219.18 L1237.01 1219.18 L1237.6 1219.18 L1238.18 1219.18 L1238.77 1219.18 L1239.36 1219.18 L1239.94 1219.18 L1240.53 1219.18 L1241.11 1219.18 L1241.7 1219.18 L1242.29 1219.18 L1242.87 1219.18 L1243.46 1219.18 L1244.05 1219.18 L1244.63 1219.18 L1245.22 1219.18 L1245.81 1219.18 L1246.39 1219.18 L1246.98 1219.18 L1247.57 1219.18 L1248.15 1219.18 L1248.74 1219.18 L1249.32 1219.18 L1249.91 1219.18 L1250.5 1219.18 L1251.08 1219.18 L1251.67 1219.18 L1252.26 1219.18 L1252.84 1219.18 L1253.43 1219.18 L1254.02 1219.18 L1254.6 1219.18 L1255.19 1219.18 L1255.78 1219.18 L1256.36 1219.18 L1256.95 1219.18 L1257.53 1219.18 L1258.12 1219.18 L1258.71 1219.18 L1259.29 1219.18 L1259.88 1219.18 L1260.47 1219.18 L1261.05 1219.18 L1261.64 1219.18 L1262.23 1219.18 L1262.81 1219.18 L1263.4 1219.18 L1263.98 1219.18 L1264.57 1219.18 L1265.16 1219.18 L1265.74 1219.18 L1266.33 1219.18 L1266.92 1219.18 L1267.5 1219.18 L1268.09 1219.18 L1268.68 1219.18 L1269.26 1219.18 L1269.85 1219.18 L1270.44 1219.18 L1271.02 1219.18 L1271.61 1219.18 L1272.19 1219.18 L1272.78 1219.18 L1273.37 1219.18 L1273.95 1219.18 L1274.54 1219.18 L1275.13 1219.18 L1275.71 1219.18 L1276.3 1219.18 L1276.89 1219.18 L1277.47 1219.18 L1278.06 1219.18 L1278.65 1219.18 L1279.23 1219.18 L1279.82 1219.18 L1280.4 1219.18 L1280.99 1219.18 L1281.58 1219.18 L1282.16 1219.18 L1282.75 1219.18 L1283.34 1219.18 L1283.92 1219.18 L1284.51 1219.18 L1285.1 1219.18 L1285.68 1219.18 L1286.27 1219.18 L1286.86 1219.18 L1287.44 1219.18 L1288.03 1219.18 L1288.61 1219.18 L1289.2 1219.18 L1289.79 1219.18 L1290.37 1219.18 L1290.96 1219.18 L1291.55 1219.18 L1292.13 1219.18 L1292.72 1219.18 L1293.31 1219.18 L1293.89 1219.18 L1294.48 1219.18 L1295.06 1219.18 L1295.65 1219.18 L1296.24 1219.18 L1296.82 1219.18 L1297.41 1219.18 L1298 1219.18 L1298.58 1219.18 L1299.17 1219.18 L1299.76 1219.18 L1300.34 1219.18 L1300.93 1219.18 L1301.52 1219.18 L1302.1 1219.18 L1302.69 1219.18 L1303.27 1219.18 L1303.86 1219.18 L1304.45 1219.18 L1305.03 1219.18 L1305.62 1219.18 L1306.21 1219.18 L1306.79 1219.18 L1307.38 1219.18 L1307.97 1219.18 L1308.55 1219.18 L1309.14 1219.18 L1309.73 1219.18 L1310.31 1219.18 L1310.9 1219.18 L1311.48 1219.18 L1312.07 1219.18 L1312.66 1219.18 L1313.24 1219.18 L1313.83 1219.18 L1314.42 1219.18 L1315 1219.18 L1315.59 1219.18 L1316.18 1219.18 L1316.76 1219.18 L1317.35 1219.18 L1317.93 1219.18 L1318.52 1219.18 L1319.11 1219.18 L1319.69 1219.18 L1320.28 1219.18 L1320.87 1219.18 L1321.45 1219.18 L1322.04 1219.18 L1322.63 1219.18 L1323.21 1219.18 L1323.8 1219.18 L1324.39 1219.18 L1324.97 1219.18 L1325.56 1219.18 L1326.14 1219.18 L1326.73 1219.18 L1327.32 1219.18 L1327.9 1219.18 L1328.49 1219.18 L1329.08 1219.18 L1329.66 1219.18 L1330.25 1219.18 L1330.84 1219.18 L1331.42 1219.18 L1332.01 1219.18 L1332.6 1219.18 L1333.18 1219.18 L1333.77 1219.18 L1334.35 1219.18 L1334.94 1219.18 L1335.53 1219.18 L1336.11 1219.18 L1336.7 1219.18 L1337.29 1219.18 L1337.87 1219.18 L1338.46 1219.18 L1339.05 1219.18 L1339.63 1219.18 L1340.22 1219.18 L1340.8 1219.18 L1341.39 1219.18 L1341.98 1219.18 L1342.56 1219.18 L1343.15 1219.18 L1343.74 1219.18 L1344.32 1219.18 L1344.91 1219.18 L1345.5 1219.18 L1346.08 1219.18 L1346.67 1219.18 L1347.26 1219.18 L1347.84 1219.18 L1348.43 1219.18 L1349.01 1219.18 L1349.6 1219.18 L1350.19 1219.18 L1350.77 1219.18 L1351.36 1219.18 L1351.95 1219.18 L1352.53 1219.18 L1353.12 1219.18 L1353.71 1219.18 L1354.29 1219.18 L1354.88 1219.18 L1355.47 1219.18 L1356.05 1219.18 L1356.64 1219.18 L1357.22 1219.18 L1357.81 1219.18 L1358.4 1219.18 L1358.98 1219.18 L1359.57 1219.18 L1360.16 1219.18 L1360.74 1219.18 L1361.33 1219.18 L1361.92 1219.18 L1362.5 1219.18 L1363.09 1219.18 L1363.68 1219.18 L1364.26 1219.18 L1364.85 1219.18 L1365.43 1219.18 L1366.02 1219.18 L1366.61 1219.18 L1367.19 1219.18 L1367.78 1219.18 L1368.37 1219.18 L1368.95 1219.18 L1369.54 1219.18 L1370.13 1219.18 L1370.71 1219.18 L1371.3 1219.18 L1371.88 1219.18 L1372.47 1219.18 L1373.06 1219.18 L1373.64 1219.18 L1374.23 1219.18 L1374.82 1219.18 L1375.4 1219.18 L1375.99 1219.18 L1376.58 1219.18 L1377.16 1219.18 L1377.75 1219.18 L1378.34 1219.18 L1378.92 1219.18 L1379.51 1219.18 L1380.09 1219.18 L1380.68 1219.18 L1381.27 1219.18 L1381.85 1219.18 L1382.44 1219.18 L1383.03 1219.18 L1383.61 1219.18 L1384.2 1219.18 L1384.79 1219.18 L1385.37 1219.18 L1385.96 1219.18 L1386.55 1219.18 L1387.13 1219.18 L1387.72 1219.18 L1388.3 1219.18 L1388.89 1219.18 L1389.48 1219.18 L1390.06 1219.18 L1390.65 1219.18 L1391.24 1219.18 L1391.82 1219.18 L1392.41 1219.18 L1393 1219.18 L1393.58 1219.18 L1394.17 1219.18 L1394.75 1219.18 L1395.34 1219.18 L1395.93 1219.18 L1396.51 1219.18 L1397.1 1219.18 L1397.69 1219.18 L1398.27 1219.18 L1398.86 1219.18 L1399.45 1219.18 L1400.03 1219.18 L1400.62 1219.18 L1401.21 1219.18 L1401.79 1219.18 L1402.38 1219.18 L1402.96 1219.18 L1403.55 1219.18 L1404.14 1219.18 L1404.72 1219.18 L1405.31 1219.18 L1405.9 1219.18 L1406.48 1219.18 L1407.07 1219.18 L1407.66 1219.18 L1408.24 1219.18 L1408.83 1219.18 L1409.42 1219.18 L1410 1219.18 L1410.59 1219.18 L1411.17 1219.18 L1411.76 1219.18 L1412.35 1219.18 L1412.93 1219.18 L1413.52 1219.18 L1414.11 1219.18 L1414.69 1219.18 L1415.28 1219.18 L1415.87 1219.18 L1416.45 1219.18 L1417.04 1219.18 L1417.63 1219.18 L1418.21 1219.18 L1418.8 1219.18 L1419.38 1219.18 L1419.97 1219.18 L1420.56 1219.18 L1421.14 1219.18 L1421.73 1219.18 L1422.32 1219.18 L1422.9 1219.18 L1423.49 1219.18 L1424.08 1219.18 L1424.66 1219.18 L1425.25 1219.18 L1425.83 1219.18 L1426.42 1219.18 L1427.01 1219.18 L1427.59 1219.18 L1428.18 1219.18 L1428.77 1219.18 L1429.35 1219.18 L1429.94 1219.18 L1430.53 1219.18 L1431.11 1219.18 L1431.7 1219.18 L1432.29 1219.18 L1432.87 1219.18 L1433.46 1219.18 L1434.04 1219.18 L1434.63 1219.18 L1435.22 1219.18 L1435.8 1219.18 L1436.39 1219.18 L1436.98 1219.18 L1437.56 1219.18 L1438.15 1219.18 L1438.74 1219.18 L1439.32 1219.18 L1439.91 1219.18 L1440.5 1219.18 L1441.08 1219.18 L1441.67 1219.18 L1442.25 1219.18 L1442.84 1219.18 L1443.43 1219.18 L1444.01 1219.18 L1444.6 1219.18 L1445.19 1219.18 L1445.77 1219.18 L1446.36 1219.18 L1446.95 1219.18 L1447.53 1219.18 L1448.12 1219.18 L1448.7 1219.18 L1449.29 1219.18 L1449.88 1219.18 L1450.46 1219.18 L1451.05 1219.18 L1451.64 1219.18 L1452.22 1219.18 L1452.81 1219.18 L1453.4 1219.18 L1453.98 1219.18 L1454.57 1219.18 L1455.16 1219.18 L1455.74 1219.18 L1456.33 1219.18 L1456.91 1219.18 L1457.5 1219.18 L1458.09 1219.18 L1458.67 1219.18 L1459.26 1219.18 L1459.85 1219.18 L1460.43 1219.18 L1461.02 1219.18 L1461.61 1219.18 L1462.19 1219.18 L1462.78 1219.18 L1463.37 1219.18 L1463.95 1219.18 L1464.54 1219.18 L1465.12 1219.18 L1465.71 1219.18 L1466.3 1219.18 L1466.88 1219.18 L1467.47 1219.18 L1468.06 1219.18 L1468.64 1219.18 L1469.23 1219.18 L1469.82 1219.18 L1470.4 1219.18 L1470.99 1219.18 L1471.57 1219.18 L1472.16 1219.18 L1472.75 1219.18 L1473.33 1219.18 L1473.92 1219.18 L1474.51 1219.18 L1475.09 1219.18 L1475.68 1219.18 L1476.27 1219.18 L1476.85 1219.18 L1477.44 1219.18 L1478.03 1219.18 L1478.61 1219.18 L1479.2 1219.18 L1479.78 1219.18 L1480.37 1219.18 L1480.96 1219.18 L1481.54 1219.18 L1482.13 1219.18 L1482.72 1219.18 L1483.3 1219.18 L1483.89 1219.18 L1484.48 1219.18 L1485.06 1219.18 L1485.65 1219.18 L1486.24 1219.18 L1486.82 1219.18 L1487.41 1219.18 L1487.99 1219.18 L1488.58 1219.18 L1489.17 1219.18 L1489.75 1219.18 L1490.34 1219.18 L1490.93 1219.18 L1491.51 1219.18 L1492.1 1219.18 L1492.69 1219.18 L1493.27 1219.18 L1493.86 1219.18 L1494.45 1219.18 L1495.03 1219.18 L1495.62 1219.18 L1496.2 1219.18 L1496.79 1219.18 L1497.38 1219.18 L1497.96 1219.18 L1498.55 1219.18 L1499.14 1219.18 L1499.72 1219.18 L1500.31 1219.18 L1500.9 1219.18 L1501.48 1219.18 L1502.07 1219.18 L1502.65 1219.18 L1503.24 1219.18 L1503.83 1219.18 L1504.41 1219.18 L1505 1219.18 L1505.59 1219.18 L1506.17 1219.18 L1506.76 1219.18 L1507.35 1219.18 L1507.93 1219.18 L1508.52 1219.18 L1509.11 1219.18 L1509.69 1219.18 L1510.28 1219.18 L1510.86 1219.18 L1511.45 1219.18 L1512.04 1219.18 L1512.62 1219.18 L1513.21 1219.18 L1513.8 1219.18 L1514.38 1219.18 L1514.97 1219.18 L1515.56 1219.18 L1516.14 1219.18 L1516.73 1219.18 L1517.32 1219.18 L1517.9 1219.18 L1518.49 1219.18 L1519.07 1219.18 L1519.66 1219.18 L1520.25 1219.18 L1520.83 1219.18 L1521.42 1219.18 L1522.01 1219.18 L1522.59 1219.18 L1523.18 1219.18 L1523.77 1219.18 L1524.35 1219.18 L1524.94 1219.18 L1525.52 1219.18 L1526.11 1219.18 L1526.7 1219.18 L1527.28 1219.18 L1527.87 1219.18 L1528.46 1219.18 L1529.04 1219.18 L1529.63 1219.18 L1530.22 1219.18 L1530.8 1219.18 L1531.39 1219.18 L1531.98 1219.18 L1532.56 1219.18 L1533.15 1219.18 L1533.73 1219.18 L1534.32 1219.18 L1534.91 1219.18 L1535.49 1219.18 L1536.08 1219.18 L1536.67 1219.18 L1537.25 1219.18 L1537.84 1219.18 L1538.43 1219.18 L1539.01 1219.18 L1539.6 1219.18 L1540.19 1219.18 L1540.77 1219.18 L1541.36 1219.18 L1541.94 1219.18 L1542.53 1219.18 L1543.12 1219.18 L1543.7 1219.18 L1544.29 1219.18 L1544.88 1219.18 L1545.46 1219.18 L1546.05 1219.18 L1546.64 1219.18 L1547.22 1219.18 L1547.81 1219.18 L1548.4 1219.18 L1548.98 1219.18 L1549.57 1219.18 L1550.15 1219.18 L1550.74 1219.18 L1551.33 1219.18 L1551.91 1219.18 L1552.5 1219.18 L1553.09 1219.18 L1553.67 1219.18 L1554.26 1219.18 L1554.85 1219.18 L1555.43 1219.18 L1556.02 1219.18 L1556.6 1219.18 L1557.19 1219.18 L1557.78 1219.18 L1558.36 1219.18 L1558.95 1219.18 L1559.54 1219.18 L1560.12 1219.18 L1560.71 1219.18 L1561.3 1219.18 L1561.88 1219.18 L1562.47 1219.18 L1563.06 1219.18 L1563.64 1219.18 L1564.23 1219.18 L1564.81 1219.18 L1565.4 1219.18 L1565.99 1219.18 L1566.57 1219.18 L1567.16 1219.18 L1567.75 1219.18 L1568.33 1219.18 L1568.92 1219.18 L1569.51 1219.18 L1570.09 1219.18 L1570.68 1219.18 L1571.27 1219.18 L1571.85 1219.18 L1572.44 1219.18 L1573.02 1219.18 L1573.61 1219.18 L1574.2 1219.18 L1574.78 1219.18 L1575.37 1219.18 L1575.96 1219.18 L1576.54 1219.18 L1577.13 1219.18 L1577.72 1219.18 L1578.3 1219.18 L1578.89 1219.18 L1579.47 1219.18 L1580.06 1219.18 L1580.65 1219.18 L1581.23 1219.18 L1581.82 1219.18 L1582.41 1219.18 L1582.99 1219.18 L1583.58 1219.18 L1584.17 1219.18 L1584.75 1219.18 L1585.34 1219.18 L1585.93 1219.18 L1586.51 1219.18 L1587.1 1219.18 L1587.68 1219.18 L1588.27 1219.18 L1588.86 1219.18 L1589.44 1219.18 L1590.03 1219.18 L1590.62 1219.18 L1591.2 1219.18 L1591.79 1219.18 L1592.38 1219.18 L1592.96 1219.18 L1593.55 1219.18 L1594.14 1219.18 L1594.72 1219.18 L1595.31 1219.18 L1595.89 1219.18 L1596.48 1219.18 L1597.07 1219.18 L1597.65 1219.18 L1598.24 1219.18 L1598.83 1219.18 L1599.41 1219.18 L1600 1219.18 L1600.59 1219.18 L1601.17 1219.18 L1601.76 1219.18 L1602.34 1219.18 L1602.93 1219.18 L1603.52 1219.18 L1604.1 1219.18 L1604.69 1219.18 L1605.28 1219.18 L1605.86 1219.18 L1606.45 1219.18 L1607.04 1219.18 L1607.62 1219.18 L1608.21 1219.18 L1608.8 1219.18 L1609.38 1219.18 L1609.97 1219.18 L1610.55 1219.18 L1611.14 1219.18 L1611.73 1219.18 L1612.31 1219.18 L1612.9 1219.18 L1613.49 1219.18 L1614.07 1219.18 L1614.66 1219.18 L1615.25 1219.18 L1615.83 1219.18 L1616.42 1219.18 L1617.01 1219.18 L1617.59 1219.18 L1618.18 1219.18 L1618.76 1219.18 L1619.35 1219.18 L1619.94 1219.18 L1620.52 1219.18 L1621.11 1219.18 L1621.7 1219.18 L1622.28 1219.18 L1622.87 1219.18 L1623.46 1219.18 L1624.04 1219.18 L1624.63 1219.18 L1625.22 1219.18 L1625.8 1219.18 L1626.39 1219.18 L1626.97 1219.18 L1627.56 1219.18 L1628.15 1219.18 L1628.73 1219.18 L1629.32 1219.18 L1629.91 1219.18 L1630.49 1219.18 L1631.08 1219.18 L1631.67 1219.18 L1632.25 1219.18 L1632.84 1219.18 L1633.42 1219.18 L1634.01 1219.18 L1634.6 1219.18 L1635.18 1219.18 L1635.77 1219.18 L1636.36 1219.18 L1636.94 1219.18 L1637.53 1219.18 L1638.12 1219.18 L1638.7 1219.18 L1639.29 1219.18 L1639.88 1219.18 L1640.46 1219.18 L1641.05 1219.18 L1641.63 1219.18 L1642.22 1219.18 L1642.81 1219.18 L1643.39 1219.18 L1643.98 1219.18 L1644.57 1219.18 L1645.15 1219.18 L1645.74 1219.18 L1646.33 1219.18 L1646.91 1219.18 L1647.5 1219.18 L1648.09 1219.18 L1648.67 1219.18 L1649.26 1219.18 L1649.84 1219.18 L1650.43 1219.18 L1651.02 1219.18 L1651.6 1219.18 L1652.19 1219.18 L1652.78 1219.18 L1653.36 1219.18 L1653.95 1219.18 L1654.54 1219.18 L1655.12 1219.18 L1655.71 1219.18 L1656.29 1219.18 L1656.88 1219.18 L1657.47 1219.18 L1658.05 1219.18 L1658.64 1219.18 L1659.23 1219.18 L1659.81 1219.18 L1660.4 1219.18 L1660.99 1219.18 L1661.57 1219.18 L1662.16 1219.18 L1662.75 1219.18 L1663.33 1219.18 L1663.92 1219.18 L1664.5 1219.18 L1665.09 1219.18 L1665.68 1219.18 L1666.26 1219.18 L1666.85 1219.18 L1667.44 1219.18 L1668.02 1219.18 L1668.61 1219.18 L1669.2 1219.18 L1669.78 1219.18 L1670.37 1219.18 L1670.96 1219.18 L1671.54 1219.18 L1672.13 1219.18 L1672.71 1219.18 L1673.3 1219.18 L1673.89 1219.18 L1674.47 1219.18 L1675.06 1219.18 L1675.65 1219.18 L1676.23 1219.18 L1676.82 1219.18 L1677.41 1219.18 L1677.99 1219.18 L1678.58 1219.18 L1679.17 1219.18 L1679.75 1219.18 L1680.34 1219.18 L1680.92 1219.18 L1681.51 1219.18 L1682.1 1219.18 L1682.68 1219.18 L1683.27 1219.18 L1683.86 1219.18 L1684.44 1219.18 L1685.03 1219.18 L1685.62 1219.18 L1686.2 1219.18 L1686.79 1219.18 L1687.37 1219.18 L1687.96 1219.18 L1688.55 1219.18 L1689.13 1219.18 L1689.72 1219.18 L1690.31 1219.18 L1690.89 1219.18 L1691.48 1219.18 L1692.07 1219.18 L1692.65 1219.18 L1693.24 1219.18 L1693.83 1219.18 L1694.41 1219.18 L1695 1219.18 L1695.58 1219.18 L1696.17 1219.18 L1696.76 1219.18 L1697.34 1219.18 L1697.93 1219.18 L1698.52 1219.18 L1699.1 1219.18 L1699.69 1219.18 L1700.28 1219.18 L1700.86 1219.18 L1701.45 1219.18 L1702.04 1219.18 L1702.62 1219.18 L1703.21 1219.18 L1703.79 1219.18 L1704.38 1219.18 L1704.97 1219.18 L1705.55 1219.18 L1706.14 1219.18 L1706.73 1219.18 L1707.31 1219.18 L1707.9 1219.18 L1708.49 1219.18 L1709.07 1219.18 L1709.66 1219.18 L1710.24 1219.18 L1710.83 1219.18 L1711.42 1219.18 L1712 1219.18 L1712.59 1219.18 L1713.18 1219.18 L1713.76 1219.18 L1714.35 1219.18 L1714.94 1219.18 L1715.52 1219.18 L1716.11 1219.18 L1716.7 1219.18 L1717.28 1219.18 L1717.87 1219.18 L1718.45 1219.18 L1719.04 1219.18 L1719.63 1219.18 L1720.21 1219.18 L1720.8 1219.18 L1721.39 1219.18 L1721.97 1219.18 L1722.56 1219.18 L1723.15 1219.18 L1723.73 1219.18 L1724.32 1219.18 L1724.91 1219.18 L1725.49 1219.18 L1726.08 1219.18 L1726.66 1219.18 L1727.25 1219.18 L1727.84 1219.18 L1728.42 1219.18 L1729.01 1219.18 L1729.6 1219.18 L1730.18 1219.18 L1730.77 1219.18 L1731.36 1219.18 L1731.94 1219.18 L1732.53 1219.18 L1733.11 1219.18 L1733.7 1219.18 L1734.29 1219.18 L1734.87 1219.18 L1735.46 1219.18 L1736.05 1219.18 L1736.63 1219.18 L1737.22 1219.18 L1737.81 1219.18 L1738.39 1219.18 L1738.98 1219.18 L1739.57 1219.18 L1740.15 1219.18 L1740.74 1219.18 L1741.32 1219.18 L1741.91 1219.18 L1742.5 1219.18 L1743.08 1219.18 L1743.67 1219.18 L1744.26 1219.18 L1744.84 1219.18 L1745.43 1219.18 L1746.02 1219.18 L1746.6 1219.18 L1747.19 1219.18 L1747.78 1219.18 L1748.36 1219.18 L1748.95 1219.18 L1749.53 1219.18 L1750.12 1219.18 L1750.71 1219.18 L1751.29 1219.18 L1751.88 1219.18 L1752.47 1219.18 L1753.05 1219.18 L1753.64 1219.18 L1754.23 1219.18 L1754.81 1219.18 L1755.4 1219.18 L1755.99 1219.18 L1756.57 1219.18 L1757.16 1219.18 L1757.74 1219.18 L1758.33 1219.18 L1758.92 1219.18 L1759.5 1219.18 L1760.09 1219.18 L1760.68 1219.18 L1761.26 1219.18 L1761.85 1219.18 L1762.44 1219.18 L1763.02 1219.18 L1763.61 1219.18 L1764.19 1219.18 L1764.78 1219.18 L1765.37 1219.18 L1765.95 1219.18 L1766.54 1219.18 L1767.13 1219.18 L1767.71 1219.18 L1768.3 1219.18 L1768.89 1219.18 L1769.47 1219.18 L1770.06 1219.18 L1770.65 1219.18 L1771.23 1219.18 L1771.82 1219.18 L1772.4 1219.18 L1772.99 1219.18 L1773.58 1219.18 L1774.16 1219.18 L1774.75 1219.18 L1775.34 1219.18 L1775.92 1219.18 L1776.51 1219.18 L1777.1 1219.18 L1777.68 1219.18 L1778.27 1219.18 L1778.86 1219.18 L1779.44 1219.18 L1780.03 1219.18 L1780.61 1219.18 L1781.2 1219.18 L1781.79 1219.18 L1782.37 1219.18 L1782.96 1219.18 L1783.55 1219.18 L1784.13 1219.18 L1784.72 1219.18 L1785.31 1219.18 L1785.89 1219.18 L1786.48 1219.18 L1787.06 1219.18 L1787.65 1219.18 L1788.24 1219.18 L1788.82 1219.18 L1789.41 1219.18 L1790 1219.18 L1790.58 1219.18 L1791.17 1219.18 L1791.76 1219.18 L1792.34 1219.18 L1792.93 1219.18 L1793.52 1219.18 L1794.1 1219.18 L1794.69 1219.18 L1795.27 1219.18 L1795.86 1219.18 L1796.45 1219.18 L1797.03 1219.18 L1797.62 1219.18 L1798.21 1219.18 L1798.79 1219.18 L1799.38 1219.18 L1799.97 1219.18 L1800.55 1219.18 L1801.14 1219.18 L1801.73 1219.18 L1802.31 1219.18 L1802.9 1219.18 L1803.48 1219.18 L1804.07 1219.18 L1804.66 1219.18 L1805.24 1219.18 L1805.83 1219.18 L1806.42 1219.18 L1807 1219.18 L1807.59 1219.18 L1808.18 1219.18 L1808.76 1219.18 L1809.35 1219.18 L1809.94 1219.18 L1810.52 1219.18 L1811.11 1219.18 L1811.69 1219.18 L1812.28 1219.18 L1812.87 1219.18 L1813.45 1219.18 L1814.04 1219.18 L1814.63 1219.18 L1815.21 1219.18 L1815.8 1219.18 L1816.39 1219.18 L1816.97 1219.18 L1817.56 1219.18 L1818.14 1219.18 L1818.73 1219.18 L1819.32 1219.18 L1819.9 1219.18 L1820.49 1219.18 L1821.08 1219.18 L1821.66 1219.18 L1822.25 1219.18 L1822.84 1219.18 L1823.42 1219.18 L1824.01 1219.18 L1824.6 1219.18 L1825.18 1219.18 L1825.77 1219.18 L1826.35 1219.18 L1826.94 1219.18 L1827.53 1219.18 L1828.11 1219.18 L1828.7 1219.18 L1829.29 1219.18 L1829.87 1219.18 L1830.46 1219.18 L1831.05 1219.18 L1831.63 1219.18 L1832.22 1219.18 L1832.81 1219.18 L1833.39 1219.18 L1833.98 1219.18 L1834.56 1219.18 L1835.15 1219.18 L1835.74 1219.18 L1836.32 1219.18 L1836.91 1219.18 L1837.5 1219.18 L1838.08 1219.18 L1838.67 1219.18 L1839.26 1219.18 L1839.84 1219.18 L1840.43 1219.18 L1841.01 1219.18 L1841.6 1219.18 L1842.19 1219.18 L1842.77 1219.18 L1843.36 1219.18 L1843.95 1219.18 L1844.53 1219.18 L1845.12 1219.18 L1845.71 1219.18 L1846.29 1219.18 L1846.88 1219.18 L1847.47 1219.18 L1848.05 1219.18 L1848.64 1219.18 L1849.22 1219.18 L1849.81 1219.18 L1850.4 1219.18 L1850.98 1219.18 L1851.57 1219.18 L1852.16 1219.18 L1852.74 1219.18 L1853.33 1219.18 L1853.92 1219.18 L1854.5 1219.18 L1855.09 1219.18 L1855.68 1219.18 L1856.26 1219.18 L1856.85 1219.18 L1857.43 1219.18 L1858.02 1219.18 L1858.61 1219.18 L1859.19 1219.18 L1859.78 1219.18 L1860.37 1219.18 L1860.95 1219.18 L1861.54 1219.18 L1862.13 1219.18 L1862.71 1219.18 L1863.3 1219.18 L1863.88 1219.18 L1864.47 1219.18 L1865.06 1219.18 L1865.64 1219.18 L1866.23 1219.18 L1866.82 1219.18 L1867.4 1219.18 L1867.99 1219.18 L1868.58 1219.18 L1869.16 1219.18 L1869.75 1219.18 L1870.34 1219.18 L1870.92 1219.18 L1871.51 1219.18 L1872.09 1219.18 L1872.68 1219.18 L1873.27 1219.18 L1873.85 1219.18 L1874.44 1219.18 L1875.03 1219.18 L1875.61 1219.18 L1876.2 1219.18 L1876.79 1219.18 L1877.37 1219.18 L1877.96 1219.18 L1878.55 1219.18 L1879.13 1219.18 L1879.72 1219.18 L1880.3 1219.18 L1880.89 1219.18 L1881.48 1219.18 L1882.06 1219.18 L1882.65 1219.18 L1883.24 1219.18 L1883.82 1219.18 L1884.41 1219.18 L1885 1219.18 L1885.58 1219.18 L1886.17 1219.18 L1886.76 1219.18 L1887.34 1219.18 L1887.93 1219.18 L1888.51 1219.18 L1889.1 1219.18 L1889.69 1219.18 L1890.27 1219.18 L1890.86 1219.18 L1891.45 1219.18 L1892.03 1219.18 L1892.62 1219.18 L1893.21 1219.18 L1893.79 1219.18 L1894.38 1219.18 L1894.96 1219.18 L1895.55 1219.18 L1896.14 1219.18 L1896.72 1219.18 L1897.31 1219.18 L1897.9 1219.18 L1898.48 1219.18 L1899.07 1219.18 L1899.66 1219.18 L1900.24 1219.18 L1900.83 1219.18 L1901.42 1219.18 L1902 1219.18 L1902.59 1219.18 L1903.17 1219.18 L1903.76 1219.18 L1904.35 1219.18 L1904.93 1219.18 L1905.52 1219.18 L1906.11 1219.18 L1906.69 1219.18 L1907.28 1219.18 L1907.87 1219.18 L1908.45 1219.18 L1909.04 1219.18 L1909.63 1219.18 L1910.21 1219.18 L1910.8 1219.18 L1911.38 1219.18 L1911.97 1219.18 L1912.56 1219.18 L1913.14 1219.18 L1913.73 1219.18 L1914.32 1219.18 L1914.9 1219.18 L1915.49 1219.18 L1916.08 1219.18 L1916.66 1219.18 L1917.25 1219.18 L1917.83 1219.18 L1918.42 1219.18 L1919.01 1219.18 L1919.59 1219.18 L1920.18 1219.18 L1920.77 1219.18 L1921.35 1219.18 L1921.94 1219.18 L1922.53 1219.18 L1923.11 1219.18 L1923.7 1219.18 L1924.29 1219.18 L1924.87 1219.18 L1925.46 1219.18 L1926.04 1219.18 L1926.63 1219.18 L1927.22 1219.18 L1927.8 1219.18 L1928.39 1219.18 L1928.98 1219.18 L1929.56 1219.18 L1930.15 1219.18 L1930.74 1219.18 L1931.32 1219.18 L1931.91 1219.18 L1932.5 1219.18 L1933.08 1219.18 L1933.67 1219.18 L1934.25 1219.18 L1934.84 1219.18 L1935.43 1219.18 L1936.01 1219.18 L1936.6 1219.18 L1937.19 1219.18 L1937.77 1219.18 L1938.36 1219.18 L1938.95 1219.18 L1939.53 1219.18 L1940.12 1219.18 L1940.71 1219.18 L1941.29 1219.18 L1941.88 1219.18 L1942.46 1219.18 L1943.05 1219.18 L1943.64 1219.18 L1944.22 1219.18 L1944.81 1219.18 L1945.4 1219.18 L1945.98 1219.18 L1946.57 1219.18 L1947.16 1219.18 L1947.74 1219.18 L1948.33 1219.18 L1948.91 1219.18 L1949.5 1219.18 L1950.09 1219.18 L1950.67 1219.18 L1951.26 1219.18 L1951.85 1219.18 L1952.43 1219.18 L1953.02 1219.18 L1953.61 1219.18 L1954.19 1219.18 L1954.78 1219.18 L1955.37 1219.18 L1955.95 1219.18 L1956.54 1219.18 L1957.12 1219.18 L1957.71 1219.18 L1958.3 1219.18 L1958.88 1219.18 L1959.47 1219.18 L1960.06 1219.18 L1960.64 1219.18 L1961.23 1219.18 L1961.82 1219.18 L1962.4 1219.18 L1962.99 1219.18 L1963.58 1219.18 L1964.16 1219.18 L1964.75 1219.18 L1965.33 1219.18 L1965.92 1219.18 L1966.51 1219.18 L1967.09 1219.18 L1967.68 1219.18 L1968.27 1219.18 L1968.85 1219.18 L1969.44 1219.18 L1970.03 1219.18 L1970.61 1219.18 L1971.2 1219.18 L1971.78 1219.18 L1972.37 1219.18 L1972.96 1219.18 L1973.54 1219.18 L1974.13 1219.18 L1974.72 1219.18 L1975.3 1219.18 L1975.89 1219.18 L1976.48 1219.18 L1977.06 1219.18 L1977.65 1219.18 L1978.24 1219.18 L1978.82 1219.18 L1979.41 1219.18 L1979.99 1219.18 L1980.58 1219.18 L1981.17 1219.18 L1981.75 1219.18 L1982.34 1219.18 L1982.93 1219.18 L1983.51 1219.18 L1984.1 1219.18 L1984.69 1219.18 L1985.27 1219.18 L1985.86 1219.18 L1986.45 1219.18 L1987.03 1219.18 L1987.62 1219.18 L1988.2 1219.18 L1988.79 1219.18 L1989.38 1219.18 L1989.96 1219.18 L1990.55 1219.18 L1991.14 1219.18 L1991.72 1219.18 L1992.31 1219.18 L1992.9 1219.18 L1993.48 1219.18 L1994.07 1219.18 L1994.65 1219.18 L1995.24 1219.18 L1995.83 1219.18 L1996.41 1219.18 L1997 1219.18 L1997.59 1219.18 L1998.17 1219.18 L1998.76 1219.18 L1999.35 1219.18 L1999.93 1219.18 L2000.52 1219.18 L2001.11 1219.18 L2001.69 1219.18 L2002.28 1219.18 L2002.86 1219.18 L2003.45 1219.18 L2004.04 1219.18 L2004.62 1219.18 L2005.21 1219.18 L2005.8 1219.18 L2006.38 1219.18 L2006.97 1219.18 L2007.56 1219.18 L2008.14 1219.18 L2008.73 1219.18 L2009.32 1219.18 L2009.9 1219.18 L2010.49 1219.18 L2011.07 1219.18 L2011.66 1219.18 L2012.25 1219.18 L2012.83 1219.18 L2013.42 1219.18 L2014.01 1219.18 L2014.59 1219.18 L2015.18 1219.18 L2015.77 1219.18 L2016.35 1219.18 L2016.94 1219.18 L2017.53 1219.18 L2018.11 1219.18 L2018.7 1219.18 L2019.28 1219.18 L2019.87 1219.18 L2020.46 1219.18 L2021.04 1219.18 L2021.63 1219.18 L2022.22 1219.18 L2022.8 1219.18 L2023.39 1219.18 L2023.98 1219.18 L2024.56 1219.18 L2025.15 1219.18 L2025.73 1219.18 L2026.32 1219.18 L2026.91 1219.18 L2027.49 1219.18 L2028.08 1219.18 L2028.67 1219.18 L2029.25 1219.18 L2029.84 1219.18 L2030.43 1219.18 L2031.01 1219.18 L2031.6 1219.18 L2032.19 1219.18 L2032.77 1219.18 L2033.36 1219.18 L2033.94 1219.18 L2034.53 1219.18 L2035.12 1219.18 L2035.7 1219.18 L2036.29 1219.18 L2036.88 1219.18 L2037.46 1219.18 L2038.05 1219.18 L2038.64 1219.18 L2039.22 1219.18 L2039.81 1219.18 L2040.4 1219.18 L2040.98 1219.18 L2041.57 1219.18 L2042.15 1219.18 L2042.74 1219.18 L2043.33 1219.18 L2043.91 1219.18 L2044.5 1219.18 L2045.09 1219.18 L2045.67 1219.18 L2046.26 1219.18 L2046.85 1219.18 L2047.43 1219.18 L2048.02 1219.18 L2048.6 1219.18 L2049.19 1219.18 L2049.78 1219.18 L2050.36 1219.18 L2050.95 1219.18 L2051.54 1219.18 L2052.12 1219.18 L2052.71 1219.18 L2053.3 1219.18 L2053.88 1219.18 L2054.47 1219.18 L2055.06 1219.18 L2055.64 1219.18 L2056.23 1219.18 L2056.81 1219.18 L2057.4 1219.18 L2057.99 1219.18 L2058.57 1219.18 L2059.16 1219.18 L2059.75 1219.18 L2060.33 1219.18 L2060.92 1219.18 L2061.51 1219.18 L2062.09 1219.18 L2062.68 1219.18 L2063.27 1219.18 L2063.85 1219.18 L2064.44 1219.18 L2065.02 1219.18 L2065.61 1219.18 L2066.2 1219.18 L2066.78 1219.18 L2067.37 1219.18 L2067.96 1219.18 L2068.54 1219.18 L2069.13 1219.18 L2069.72 1219.18 L2070.3 1219.18 L2070.89 1219.18 L2071.48 1219.18 L2072.06 1219.18 L2072.65 1219.18 L2073.23 1219.18 L2073.82 1219.18 L2074.41 1219.18 L2074.99 1219.18 L2075.58 1219.18 L2076.17 1219.18 L2076.75 1219.18 L2077.34 1219.18 L2077.93 1219.18 L2078.51 1219.18 L2079.1 1219.18 L2079.68 1219.18 L2080.27 1219.18 L2080.86 1219.18 L2081.44 1219.18 L2082.03 1219.18 L2082.62 1219.18 L2083.2 1219.18 L2083.79 1219.18 L2084.38 1219.18 L2084.96 1219.18 L2085.55 1219.18 L2086.14 1219.18 L2086.72 1219.18 L2087.31 1219.18 L2087.89 1219.18 L2088.48 1219.18 L2089.07 1219.18 L2089.65 1219.18 L2090.24 1219.18 L2090.83 1219.18 L2091.41 1219.18 L2092 1219.18 L2092.59 1219.18 L2093.17 1219.18 L2093.76 1219.18 L2094.35 1219.18 L2094.93 1219.18 L2095.52 1219.18 L2096.1 1219.18 L2096.69 1219.18 L2097.28 1219.18 L2097.86 1219.18 L2098.45 1219.18 L2099.04 1219.18 L2099.62 1219.18 L2100.21 1219.18 L2100.8 1219.18 L2101.38 1219.18 L2101.97 1219.18 L2102.55 1219.18 L2103.14 1219.18 L2103.73 1219.18 L2104.31 1219.18 L2104.9 1219.18 L2105.49 1219.18 L2106.07 1219.18 L2106.66 1219.18 L2107.25 1219.18 L2107.83 1219.18 L2108.42 1219.18 L2109.01 1219.18 L2109.59 1219.18 L2110.18 1219.18 L2110.76 1219.18 L2111.35 1219.18 L2111.94 1219.18 L2112.52 1219.18 L2113.11 1219.18 L2113.7 1219.18 L2114.28 1219.18 L2114.87 1219.18 L2115.46 1219.18 L2116.04 1219.18 L2116.63 1219.18 L2117.22 1219.18 L2117.8 1219.18 L2118.39 1219.18 L2118.97 1219.18 L2119.56 1219.18 L2120.15 1219.18 L2120.73 1219.18 L2121.32 1219.18 L2121.91 1219.18 L2122.49 1219.18 L2123.08 1219.18 L2123.67 1219.18 L2124.25 1219.18 L2124.84 1219.18 L2125.42 1219.18 L2126.01 1219.18 L2126.6 1219.18 L2127.18 1219.18 L2127.77 1219.18 L2128.36 1219.18 L2128.94 1219.18 L2129.53 1219.18 L2130.12 1219.18 L2130.7 1219.18 L2131.29 1219.18 L2131.88 1219.18 L2132.46 1219.18 L2133.05 1219.18 L2133.63 1219.18 L2134.22 1219.18 L2134.81 1219.18 L2135.39 1219.18 L2135.98 1219.18 L2136.57 1219.18 L2137.15 1219.18 L2137.74 1219.18 L2138.33 1219.18 L2138.91 1219.18 L2139.5 1219.18 L2140.09 1219.18 L2140.67 1219.18 L2141.26 1219.18 L2141.84 1219.18 L2142.43 1219.18 L2143.02 1219.18 L2143.6 1219.18 L2144.19 1219.18 L2144.78 1219.18 L2145.36 1219.18 L2145.95 1219.18 L2146.54 1219.18 L2147.12 1219.18 L2147.71 1219.18 L2148.3 1219.18 L2148.88 1219.18 L2149.47 1219.18 L2150.05 1219.18 L2150.64 1219.18 L2151.23 1219.18 L2151.81 1219.18 L2152.4 1219.18 L2152.99 1219.18 L2153.57 1219.18 L2154.16 1219.18 L2154.75 1219.18 L2155.33 1219.18 L2155.92 1219.18 L2156.5 1219.18 L2157.09 1219.18 L2157.68 1219.18 L2158.26 1219.18 L2158.26 1218.39 L2157.68 1218.39 L2157.09 1218.39 L2156.5 1218.39 L2155.92 1218.39 L2155.33 1218.39 L2154.75 1218.39 L2154.16 1218.39 L2153.57 1218.39 L2152.99 1218.39 L2152.4 1218.39 L2151.81 1218.39 L2151.23 1218.39 L2150.64 1218.39 L2150.05 1218.39 L2149.47 1218.39 L2148.88 1218.39 L2148.3 1218.39 L2147.71 1218.39 L2147.12 1218.39 L2146.54 1218.39 L2145.95 1218.39 L2145.36 1218.39 L2144.78 1218.39 L2144.19 1218.39 L2143.6 1218.39 L2143.02 1218.39 L2142.43 1218.39 L2141.84 1218.39 L2141.26 1218.39 L2140.67 1218.39 L2140.09 1218.39 L2139.5 1218.39 L2138.91 1218.39 L2138.33 1218.39 L2137.74 1218.39 L2137.15 1218.39 L2136.57 1218.39 L2135.98 1218.39 L2135.39 1218.39 L2134.81 1218.39 L2134.22 1218.39 L2133.63 1218.39 L2133.05 1218.39 L2132.46 1218.39 L2131.88 1218.39 L2131.29 1218.39 L2130.7 1218.39 L2130.12 1218.39 L2129.53 1218.39 L2128.94 1218.39 L2128.36 1218.39 L2127.77 1218.39 L2127.18 1218.39 L2126.6 1218.39 L2126.01 1218.39 L2125.42 1218.39 L2124.84 1218.39 L2124.25 1218.39 L2123.67 1218.39 L2123.08 1218.39 L2122.49 1218.39 L2121.91 1218.39 L2121.32 1218.39 L2120.73 1218.39 L2120.15 1218.39 L2119.56 1218.39 L2118.97 1218.39 L2118.39 1218.39 L2117.8 1218.39 L2117.22 1218.39 L2116.63 1218.39 L2116.04 1218.39 L2115.46 1218.39 L2114.87 1218.39 L2114.28 1218.39 L2113.7 1218.39 L2113.11 1218.39 L2112.52 1218.39 L2111.94 1218.39 L2111.35 1218.39 L2110.76 1218.39 L2110.18 1218.39 L2109.59 1218.39 L2109.01 1218.39 L2108.42 1218.39 L2107.83 1218.39 L2107.25 1218.39 L2106.66 1218.39 L2106.07 1218.39 L2105.49 1218.39 L2104.9 1218.39 L2104.31 1218.39 L2103.73 1218.39 L2103.14 1218.39 L2102.55 1218.39 L2101.97 1218.39 L2101.38 1218.39 L2100.8 1218.39 L2100.21 1218.39 L2099.62 1218.39 L2099.04 1218.39 L2098.45 1218.39 L2097.86 1218.39 L2097.28 1218.39 L2096.69 1218.39 L2096.1 1218.39 L2095.52 1218.39 L2094.93 1218.39 L2094.35 1218.39 L2093.76 1218.39 L2093.17 1218.39 L2092.59 1218.39 L2092 1218.39 L2091.41 1218.39 L2090.83 1218.39 L2090.24 1218.39 L2089.65 1218.39 L2089.07 1218.39 L2088.48 1218.39 L2087.89 1218.39 L2087.31 1218.39 L2086.72 1218.39 L2086.14 1218.39 L2085.55 1218.39 L2084.96 1218.39 L2084.38 1218.39 L2083.79 1218.39 L2083.2 1218.39 L2082.62 1218.39 L2082.03 1218.39 L2081.44 1218.39 L2080.86 1218.39 L2080.27 1218.39 L2079.68 1218.39 L2079.1 1218.39 L2078.51 1218.39 L2077.93 1218.39 L2077.34 1218.39 L2076.75 1218.39 L2076.17 1218.39 L2075.58 1218.39 L2074.99 1218.39 L2074.41 1218.39 L2073.82 1218.39 L2073.23 1218.39 L2072.65 1218.39 L2072.06 1218.39 L2071.48 1218.39 L2070.89 1218.39 L2070.3 1218.39 L2069.72 1218.39 L2069.13 1218.39 L2068.54 1218.39 L2067.96 1218.39 L2067.37 1218.39 L2066.78 1218.39 L2066.2 1218.39 L2065.61 1218.39 L2065.02 1218.39 L2064.44 1218.39 L2063.85 1218.39 L2063.27 1218.39 L2062.68 1218.39 L2062.09 1218.39 L2061.51 1218.39 L2060.92 1218.39 L2060.33 1218.39 L2059.75 1218.39 L2059.16 1218.39 L2058.57 1218.39 L2057.99 1218.39 L2057.4 1218.39 L2056.81 1218.39 L2056.23 1218.39 L2055.64 1218.39 L2055.06 1218.39 L2054.47 1218.39 L2053.88 1218.39 L2053.3 1218.39 L2052.71 1218.39 L2052.12 1218.39 L2051.54 1218.39 L2050.95 1218.39 L2050.36 1218.39 L2049.78 1218.39 L2049.19 1218.39 L2048.6 1218.39 L2048.02 1218.39 L2047.43 1218.39 L2046.85 1218.39 L2046.26 1218.39 L2045.67 1218.39 L2045.09 1218.39 L2044.5 1218.39 L2043.91 1218.39 L2043.33 1218.39 L2042.74 1218.39 L2042.15 1218.39 L2041.57 1218.39 L2040.98 1218.39 L2040.4 1218.39 L2039.81 1218.39 L2039.22 1218.39 L2038.64 1218.39 L2038.05 1218.39 L2037.46 1218.39 L2036.88 1218.39 L2036.29 1218.39 L2035.7 1218.39 L2035.12 1218.39 L2034.53 1218.39 L2033.94 1218.39 L2033.36 1218.39 L2032.77 1218.39 L2032.19 1218.39 L2031.6 1218.39 L2031.01 1218.39 L2030.43 1218.39 L2029.84 1218.39 L2029.25 1218.39 L2028.67 1218.39 L2028.08 1218.39 L2027.49 1218.39 L2026.91 1218.39 L2026.32 1218.39 L2025.73 1218.39 L2025.15 1218.39 L2024.56 1218.39 L2023.98 1218.39 L2023.39 1218.39 L2022.8 1218.39 L2022.22 1218.39 L2021.63 1218.39 L2021.04 1218.39 L2020.46 1218.39 L2019.87 1218.39 L2019.28 1218.39 L2018.7 1218.39 L2018.11 1218.39 L2017.53 1218.39 L2016.94 1218.39 L2016.35 1218.39 L2015.77 1218.39 L2015.18 1218.39 L2014.59 1218.39 L2014.01 1218.39 L2013.42 1218.39 L2012.83 1218.39 L2012.25 1218.39 L2011.66 1218.39 L2011.07 1218.39 L2010.49 1218.39 L2009.9 1218.39 L2009.32 1218.39 L2008.73 1218.39 L2008.14 1218.39 L2007.56 1218.39 L2006.97 1218.39 L2006.38 1218.39 L2005.8 1218.39 L2005.21 1218.39 L2004.62 1218.39 L2004.04 1218.39 L2003.45 1218.39 L2002.86 1218.39 L2002.28 1218.39 L2001.69 1218.39 L2001.11 1218.39 L2000.52 1218.39 L1999.93 1218.39 L1999.35 1218.39 L1998.76 1218.39 L1998.17 1218.39 L1997.59 1218.39 L1997 1218.39 L1996.41 1218.39 L1995.83 1218.39 L1995.24 1218.39 L1994.65 1218.39 L1994.07 1218.39 L1993.48 1218.39 L1992.9 1218.39 L1992.31 1218.39 L1991.72 1218.39 L1991.14 1218.39 L1990.55 1218.39 L1989.96 1218.39 L1989.38 1218.39 L1988.79 1218.39 L1988.2 1218.39 L1987.62 1218.39 L1987.03 1218.39 L1986.45 1218.39 L1985.86 1218.39 L1985.27 1218.39 L1984.69 1218.39 L1984.1 1218.39 L1983.51 1218.39 L1982.93 1218.39 L1982.34 1218.39 L1981.75 1218.39 L1981.17 1218.39 L1980.58 1218.39 L1979.99 1218.39 L1979.41 1218.39 L1978.82 1218.39 L1978.24 1218.39 L1977.65 1218.39 L1977.06 1218.39 L1976.48 1218.39 L1975.89 1218.39 L1975.3 1218.39 L1974.72 1218.39 L1974.13 1218.39 L1973.54 1218.39 L1972.96 1218.39 L1972.37 1218.39 L1971.78 1218.39 L1971.2 1218.39 L1970.61 1218.39 L1970.03 1218.39 L1969.44 1218.39 L1968.85 1218.39 L1968.27 1218.39 L1967.68 1218.39 L1967.09 1218.39 L1966.51 1218.39 L1965.92 1218.39 L1965.33 1218.39 L1964.75 1218.39 L1964.16 1218.39 L1963.58 1218.39 L1962.99 1218.39 L1962.4 1218.39 L1961.82 1218.39 L1961.23 1218.39 L1960.64 1218.39 L1960.06 1218.39 L1959.47 1218.39 L1958.88 1218.39 L1958.3 1218.39 L1957.71 1218.39 L1957.12 1218.39 L1956.54 1218.39 L1955.95 1218.39 L1955.37 1218.39 L1954.78 1218.39 L1954.19 1218.39 L1953.61 1218.39 L1953.02 1218.39 L1952.43 1218.39 L1951.85 1218.39 L1951.26 1218.39 L1950.67 1218.39 L1950.09 1218.39 L1949.5 1218.39 L1948.91 1218.39 L1948.33 1218.39 L1947.74 1218.39 L1947.16 1218.39 L1946.57 1218.39 L1945.98 1218.39 L1945.4 1218.39 L1944.81 1218.39 L1944.22 1218.39 L1943.64 1218.39 L1943.05 1218.39 L1942.46 1218.39 L1941.88 1218.39 L1941.29 1218.39 L1940.71 1218.39 L1940.12 1218.39 L1939.53 1218.39 L1938.95 1218.39 L1938.36 1218.39 L1937.77 1218.39 L1937.19 1218.39 L1936.6 1218.39 L1936.01 1218.39 L1935.43 1218.39 L1934.84 1218.39 L1934.25 1218.39 L1933.67 1218.39 L1933.08 1218.39 L1932.5 1218.39 L1931.91 1218.39 L1931.32 1218.39 L1930.74 1218.39 L1930.15 1218.39 L1929.56 1218.39 L1928.98 1218.39 L1928.39 1218.39 L1927.8 1218.39 L1927.22 1218.39 L1926.63 1218.39 L1926.04 1218.39 L1925.46 1218.39 L1924.87 1218.39 L1924.29 1218.39 L1923.7 1218.39 L1923.11 1218.39 L1922.53 1218.39 L1921.94 1218.39 L1921.35 1218.39 L1920.77 1218.39 L1920.18 1218.39 L1919.59 1218.39 L1919.01 1218.39 L1918.42 1218.39 L1917.83 1218.39 L1917.25 1218.39 L1916.66 1218.39 L1916.08 1218.39 L1915.49 1218.39 L1914.9 1218.39 L1914.32 1218.39 L1913.73 1218.39 L1913.14 1218.39 L1912.56 1218.39 L1911.97 1218.39 L1911.38 1218.39 L1910.8 1218.39 L1910.21 1218.39 L1909.63 1218.39 L1909.04 1218.39 L1908.45 1218.39 L1907.87 1218.39 L1907.28 1218.39 L1906.69 1218.39 L1906.11 1218.39 L1905.52 1218.39 L1904.93 1218.39 L1904.35 1218.39 L1903.76 1218.39 L1903.17 1218.39 L1902.59 1218.39 L1902 1218.39 L1901.42 1218.39 L1900.83 1218.39 L1900.24 1218.39 L1899.66 1218.39 L1899.07 1218.39 L1898.48 1218.39 L1897.9 1218.39 L1897.31 1218.39 L1896.72 1218.39 L1896.14 1218.39 L1895.55 1218.39 L1894.96 1218.39 L1894.38 1218.39 L1893.79 1218.39 L1893.21 1218.39 L1892.62 1218.39 L1892.03 1218.39 L1891.45 1218.39 L1890.86 1218.39 L1890.27 1218.39 L1889.69 1218.39 L1889.1 1218.39 L1888.51 1218.39 L1887.93 1218.39 L1887.34 1218.39 L1886.76 1218.39 L1886.17 1218.39 L1885.58 1218.39 L1885 1218.39 L1884.41 1218.39 L1883.82 1218.39 L1883.24 1218.39 L1882.65 1218.39 L1882.06 1218.39 L1881.48 1218.39 L1880.89 1218.39 L1880.3 1218.39 L1879.72 1218.39 L1879.13 1218.39 L1878.55 1218.39 L1877.96 1218.39 L1877.37 1218.39 L1876.79 1218.39 L1876.2 1218.39 L1875.61 1218.39 L1875.03 1218.39 L1874.44 1218.39 L1873.85 1218.39 L1873.27 1218.39 L1872.68 1218.39 L1872.09 1218.39 L1871.51 1218.39 L1870.92 1218.39 L1870.34 1218.39 L1869.75 1218.39 L1869.16 1218.39 L1868.58 1218.39 L1867.99 1218.39 L1867.4 1218.39 L1866.82 1218.39 L1866.23 1218.39 L1865.64 1218.39 L1865.06 1218.39 L1864.47 1218.39 L1863.88 1218.39 L1863.3 1218.39 L1862.71 1218.39 L1862.13 1218.39 L1861.54 1218.39 L1860.95 1218.39 L1860.37 1218.39 L1859.78 1218.39 L1859.19 1218.39 L1858.61 1218.39 L1858.02 1218.39 L1857.43 1218.39 L1856.85 1218.39 L1856.26 1218.39 L1855.68 1218.39 L1855.09 1218.39 L1854.5 1218.39 L1853.92 1218.39 L1853.33 1218.39 L1852.74 1218.39 L1852.16 1218.39 L1851.57 1218.39 L1850.98 1218.39 L1850.4 1218.39 L1849.81 1218.39 L1849.22 1218.39 L1848.64 1218.39 L1848.05 1218.39 L1847.47 1218.39 L1846.88 1218.39 L1846.29 1218.39 L1845.71 1218.39 L1845.12 1218.39 L1844.53 1218.39 L1843.95 1218.39 L1843.36 1218.39 L1842.77 1218.39 L1842.19 1218.39 L1841.6 1218.39 L1841.01 1218.39 L1840.43 1218.39 L1839.84 1218.39 L1839.26 1218.39 L1838.67 1218.39 L1838.08 1218.39 L1837.5 1218.39 L1836.91 1218.39 L1836.32 1218.39 L1835.74 1218.39 L1835.15 1218.39 L1834.56 1218.39 L1833.98 1218.39 L1833.39 1218.39 L1832.81 1218.39 L1832.22 1218.39 L1831.63 1218.39 L1831.05 1218.39 L1830.46 1218.39 L1829.87 1218.39 L1829.29 1218.39 L1828.7 1218.39 L1828.11 1218.39 L1827.53 1218.39 L1826.94 1218.39 L1826.35 1218.39 L1825.77 1218.39 L1825.18 1218.39 L1824.6 1218.39 L1824.01 1218.39 L1823.42 1218.39 L1822.84 1218.39 L1822.25 1218.39 L1821.66 1218.39 L1821.08 1218.39 L1820.49 1218.39 L1819.9 1218.39 L1819.32 1218.39 L1818.73 1218.39 L1818.14 1218.39 L1817.56 1218.39 L1816.97 1218.39 L1816.39 1218.39 L1815.8 1218.39 L1815.21 1218.39 L1814.63 1218.39 L1814.04 1218.39 L1813.45 1218.39 L1812.87 1218.39 L1812.28 1218.39 L1811.69 1218.39 L1811.11 1218.39 L1810.52 1218.39 L1809.94 1218.39 L1809.35 1218.39 L1808.76 1218.39 L1808.18 1218.39 L1807.59 1218.39 L1807 1218.39 L1806.42 1218.39 L1805.83 1218.39 L1805.24 1218.39 L1804.66 1218.39 L1804.07 1218.39 L1803.48 1218.39 L1802.9 1218.39 L1802.31 1218.39 L1801.73 1218.39 L1801.14 1218.39 L1800.55 1218.39 L1799.97 1218.39 L1799.38 1218.39 L1798.79 1218.39 L1798.21 1218.39 L1797.62 1218.39 L1797.03 1218.39 L1796.45 1218.39 L1795.86 1218.39 L1795.27 1218.39 L1794.69 1218.39 L1794.1 1218.39 L1793.52 1218.39 L1792.93 1218.39 L1792.34 1218.39 L1791.76 1218.39 L1791.17 1218.39 L1790.58 1218.39 L1790 1218.39 L1789.41 1218.39 L1788.82 1218.39 L1788.24 1218.39 L1787.65 1218.39 L1787.06 1218.39 L1786.48 1218.39 L1785.89 1218.39 L1785.31 1218.39 L1784.72 1218.39 L1784.13 1218.39 L1783.55 1218.39 L1782.96 1218.39 L1782.37 1218.39 L1781.79 1218.39 L1781.2 1218.39 L1780.61 1218.39 L1780.03 1218.39 L1779.44 1218.39 L1778.86 1218.39 L1778.27 1218.39 L1777.68 1218.39 L1777.1 1218.39 L1776.51 1218.39 L1775.92 1218.39 L1775.34 1218.39 L1774.75 1218.39 L1774.16 1218.39 L1773.58 1218.39 L1772.99 1218.39 L1772.4 1218.39 L1771.82 1218.39 L1771.23 1218.39 L1770.65 1218.39 L1770.06 1218.39 L1769.47 1218.39 L1768.89 1218.39 L1768.3 1218.39 L1767.71 1218.39 L1767.13 1218.39 L1766.54 1218.39 L1765.95 1218.39 L1765.37 1218.39 L1764.78 1218.39 L1764.19 1218.39 L1763.61 1218.39 L1763.02 1218.39 L1762.44 1218.39 L1761.85 1218.39 L1761.26 1218.39 L1760.68 1218.39 L1760.09 1218.39 L1759.5 1218.39 L1758.92 1218.39 L1758.33 1218.39 L1757.74 1218.39 L1757.16 1218.39 L1756.57 1218.39 L1755.99 1218.39 L1755.4 1218.39 L1754.81 1218.39 L1754.23 1218.39 L1753.64 1218.39 L1753.05 1218.39 L1752.47 1218.39 L1751.88 1218.39 L1751.29 1218.39 L1750.71 1218.39 L1750.12 1218.39 L1749.53 1218.39 L1748.95 1218.39 L1748.36 1218.39 L1747.78 1218.39 L1747.19 1218.39 L1746.6 1218.39 L1746.02 1218.39 L1745.43 1218.39 L1744.84 1218.39 L1744.26 1218.39 L1743.67 1218.39 L1743.08 1218.39 L1742.5 1218.39 L1741.91 1218.39 L1741.32 1218.39 L1740.74 1218.39 L1740.15 1218.39 L1739.57 1218.39 L1738.98 1218.39 L1738.39 1218.39 L1737.81 1218.39 L1737.22 1218.39 L1736.63 1218.39 L1736.05 1218.39 L1735.46 1218.39 L1734.87 1218.39 L1734.29 1218.39 L1733.7 1218.39 L1733.11 1218.39 L1732.53 1218.39 L1731.94 1218.39 L1731.36 1218.39 L1730.77 1218.39 L1730.18 1218.39 L1729.6 1218.39 L1729.01 1218.39 L1728.42 1218.39 L1727.84 1218.39 L1727.25 1218.39 L1726.66 1218.39 L1726.08 1218.39 L1725.49 1218.39 L1724.91 1218.39 L1724.32 1218.39 L1723.73 1218.39 L1723.15 1218.39 L1722.56 1218.39 L1721.97 1218.39 L1721.39 1218.39 L1720.8 1218.39 L1720.21 1218.39 L1719.63 1218.39 L1719.04 1218.39 L1718.45 1218.39 L1717.87 1218.39 L1717.28 1218.39 L1716.7 1218.39 L1716.11 1218.39 L1715.52 1218.39 L1714.94 1218.39 L1714.35 1218.39 L1713.76 1218.39 L1713.18 1218.39 L1712.59 1218.39 L1712 1218.39 L1711.42 1218.39 L1710.83 1218.39 L1710.24 1218.39 L1709.66 1218.39 L1709.07 1218.39 L1708.49 1218.39 L1707.9 1218.39 L1707.31 1218.39 L1706.73 1218.39 L1706.14 1218.39 L1705.55 1218.39 L1704.97 1218.39 L1704.38 1218.39 L1703.79 1218.39 L1703.21 1218.39 L1702.62 1218.39 L1702.04 1218.39 L1701.45 1218.39 L1700.86 1218.39 L1700.28 1218.39 L1699.69 1218.39 L1699.1 1218.39 L1698.52 1218.39 L1697.93 1218.39 L1697.34 1218.39 L1696.76 1218.39 L1696.17 1218.39 L1695.58 1218.39 L1695 1218.39 L1694.41 1218.39 L1693.83 1218.39 L1693.24 1218.39 L1692.65 1218.39 L1692.07 1218.39 L1691.48 1218.39 L1690.89 1218.39 L1690.31 1218.39 L1689.72 1218.39 L1689.13 1218.39 L1688.55 1218.39 L1687.96 1218.39 L1687.37 1218.39 L1686.79 1218.39 L1686.2 1218.39 L1685.62 1218.39 L1685.03 1218.39 L1684.44 1218.39 L1683.86 1218.39 L1683.27 1218.39 L1682.68 1218.39 L1682.1 1218.39 L1681.51 1218.39 L1680.92 1218.39 L1680.34 1218.39 L1679.75 1218.39 L1679.17 1218.39 L1678.58 1218.39 L1677.99 1218.39 L1677.41 1218.39 L1676.82 1218.39 L1676.23 1218.39 L1675.65 1218.39 L1675.06 1218.39 L1674.47 1218.39 L1673.89 1218.39 L1673.3 1218.39 L1672.71 1218.39 L1672.13 1218.39 L1671.54 1218.39 L1670.96 1218.39 L1670.37 1218.39 L1669.78 1218.39 L1669.2 1218.39 L1668.61 1218.39 L1668.02 1218.39 L1667.44 1218.39 L1666.85 1218.39 L1666.26 1218.39 L1665.68 1218.39 L1665.09 1218.39 L1664.5 1218.39 L1663.92 1218.39 L1663.33 1218.39 L1662.75 1218.39 L1662.16 1218.39 L1661.57 1218.39 L1660.99 1218.39 L1660.4 1218.39 L1659.81 1218.39 L1659.23 1218.39 L1658.64 1218.39 L1658.05 1218.39 L1657.47 1218.39 L1656.88 1218.39 L1656.29 1218.39 L1655.71 1218.39 L1655.12 1218.39 L1654.54 1218.39 L1653.95 1218.39 L1653.36 1218.39 L1652.78 1218.39 L1652.19 1218.39 L1651.6 1218.39 L1651.02 1218.39 L1650.43 1218.39 L1649.84 1218.39 L1649.26 1218.39 L1648.67 1218.39 L1648.09 1218.39 L1647.5 1218.39 L1646.91 1218.39 L1646.33 1218.39 L1645.74 1218.39 L1645.15 1218.39 L1644.57 1218.39 L1643.98 1218.39 L1643.39 1218.39 L1642.81 1218.39 L1642.22 1218.39 L1641.63 1218.39 L1641.05 1218.39 L1640.46 1218.39 L1639.88 1218.39 L1639.29 1218.39 L1638.7 1218.39 L1638.12 1218.39 L1637.53 1218.39 L1636.94 1218.39 L1636.36 1218.39 L1635.77 1218.39 L1635.18 1218.39 L1634.6 1218.39 L1634.01 1218.39 L1633.42 1218.39 L1632.84 1218.39 L1632.25 1218.39 L1631.67 1218.39 L1631.08 1218.39 L1630.49 1218.39 L1629.91 1218.39 L1629.32 1218.39 L1628.73 1218.39 L1628.15 1218.39 L1627.56 1218.39 L1626.97 1218.39 L1626.39 1218.39 L1625.8 1218.39 L1625.22 1218.39 L1624.63 1218.39 L1624.04 1218.39 L1623.46 1218.39 L1622.87 1218.39 L1622.28 1218.39 L1621.7 1218.39 L1621.11 1218.39 L1620.52 1218.39 L1619.94 1218.39 L1619.35 1218.39 L1618.76 1218.39 L1618.18 1218.39 L1617.59 1218.39 L1617.01 1218.39 L1616.42 1218.39 L1615.83 1218.39 L1615.25 1218.39 L1614.66 1218.39 L1614.07 1218.39 L1613.49 1218.39 L1612.9 1218.39 L1612.31 1218.39 L1611.73 1218.39 L1611.14 1218.39 L1610.55 1218.39 L1609.97 1218.39 L1609.38 1218.39 L1608.8 1218.39 L1608.21 1218.39 L1607.62 1218.39 L1607.04 1218.39 L1606.45 1218.39 L1605.86 1218.39 L1605.28 1218.39 L1604.69 1218.39 L1604.1 1218.39 L1603.52 1218.39 L1602.93 1218.39 L1602.34 1218.39 L1601.76 1218.39 L1601.17 1218.39 L1600.59 1218.39 L1600 1218.39 L1599.41 1218.39 L1598.83 1218.39 L1598.24 1218.39 L1597.65 1218.39 L1597.07 1218.39 L1596.48 1218.39 L1595.89 1218.39 L1595.31 1218.39 L1594.72 1218.39 L1594.14 1218.39 L1593.55 1218.39 L1592.96 1218.39 L1592.38 1218.39 L1591.79 1218.39 L1591.2 1218.39 L1590.62 1218.39 L1590.03 1218.39 L1589.44 1218.39 L1588.86 1218.39 L1588.27 1218.39 L1587.68 1218.39 L1587.1 1218.39 L1586.51 1218.39 L1585.93 1218.39 L1585.34 1218.39 L1584.75 1218.39 L1584.17 1218.39 L1583.58 1218.39 L1582.99 1218.39 L1582.41 1218.39 L1581.82 1218.39 L1581.23 1218.39 L1580.65 1218.39 L1580.06 1218.39 L1579.47 1218.39 L1578.89 1218.39 L1578.3 1218.39 L1577.72 1218.39 L1577.13 1218.39 L1576.54 1218.39 L1575.96 1218.39 L1575.37 1218.39 L1574.78 1218.39 L1574.2 1218.39 L1573.61 1218.39 L1573.02 1218.39 L1572.44 1218.39 L1571.85 1218.39 L1571.27 1218.39 L1570.68 1218.39 L1570.09 1218.39 L1569.51 1218.39 L1568.92 1218.39 L1568.33 1218.39 L1567.75 1218.39 L1567.16 1218.39 L1566.57 1218.39 L1565.99 1218.39 L1565.4 1218.39 L1564.81 1218.39 L1564.23 1218.39 L1563.64 1218.39 L1563.06 1218.39 L1562.47 1218.39 L1561.88 1218.39 L1561.3 1218.39 L1560.71 1218.39 L1560.12 1218.39 L1559.54 1218.39 L1558.95 1218.39 L1558.36 1218.39 L1557.78 1218.39 L1557.19 1218.39 L1556.6 1218.39 L1556.02 1218.39 L1555.43 1218.39 L1554.85 1218.39 L1554.26 1218.39 L1553.67 1218.39 L1553.09 1218.39 L1552.5 1218.39 L1551.91 1218.39 L1551.33 1218.39 L1550.74 1218.39 L1550.15 1218.39 L1549.57 1218.39 L1548.98 1218.39 L1548.4 1218.39 L1547.81 1218.39 L1547.22 1218.39 L1546.64 1218.39 L1546.05 1218.39 L1545.46 1218.39 L1544.88 1218.39 L1544.29 1218.39 L1543.7 1218.39 L1543.12 1218.39 L1542.53 1218.39 L1541.94 1218.39 L1541.36 1218.39 L1540.77 1218.39 L1540.19 1218.39 L1539.6 1218.39 L1539.01 1218.39 L1538.43 1218.39 L1537.84 1218.39 L1537.25 1218.39 L1536.67 1218.39 L1536.08 1218.39 L1535.49 1218.39 L1534.91 1218.39 L1534.32 1218.39 L1533.73 1218.39 L1533.15 1218.39 L1532.56 1218.39 L1531.98 1218.39 L1531.39 1218.39 L1530.8 1218.39 L1530.22 1218.39 L1529.63 1218.39 L1529.04 1218.39 L1528.46 1218.39 L1527.87 1218.39 L1527.28 1218.39 L1526.7 1218.39 L1526.11 1218.39 L1525.52 1218.39 L1524.94 1218.39 L1524.35 1218.39 L1523.77 1218.39 L1523.18 1218.39 L1522.59 1218.39 L1522.01 1218.39 L1521.42 1218.39 L1520.83 1218.39 L1520.25 1218.39 L1519.66 1218.39 L1519.07 1218.39 L1518.49 1218.39 L1517.9 1218.39 L1517.32 1218.39 L1516.73 1218.39 L1516.14 1218.39 L1515.56 1218.39 L1514.97 1218.39 L1514.38 1218.39 L1513.8 1218.39 L1513.21 1218.39 L1512.62 1218.39 L1512.04 1218.39 L1511.45 1218.39 L1510.86 1218.39 L1510.28 1218.39 L1509.69 1218.39 L1509.11 1218.39 L1508.52 1218.39 L1507.93 1218.39 L1507.35 1218.39 L1506.76 1218.39 L1506.17 1218.39 L1505.59 1218.39 L1505 1218.39 L1504.41 1218.39 L1503.83 1218.39 L1503.24 1218.39 L1502.65 1218.39 L1502.07 1218.39 L1501.48 1218.39 L1500.9 1218.39 L1500.31 1218.39 L1499.72 1218.39 L1499.14 1218.39 L1498.55 1218.39 L1497.96 1218.39 L1497.38 1218.39 L1496.79 1218.39 L1496.2 1218.39 L1495.62 1218.39 L1495.03 1218.39 L1494.45 1218.39 L1493.86 1218.39 L1493.27 1218.39 L1492.69 1218.39 L1492.1 1218.39 L1491.51 1218.39 L1490.93 1218.39 L1490.34 1218.39 L1489.75 1218.39 L1489.17 1218.39 L1488.58 1218.39 L1487.99 1218.39 L1487.41 1218.39 L1486.82 1218.39 L1486.24 1218.39 L1485.65 1218.39 L1485.06 1218.39 L1484.48 1218.39 L1483.89 1218.39 L1483.3 1218.39 L1482.72 1218.39 L1482.13 1218.39 L1481.54 1218.39 L1480.96 1218.39 L1480.37 1218.39 L1479.78 1218.39 L1479.2 1218.39 L1478.61 1218.39 L1478.03 1218.39 L1477.44 1218.39 L1476.85 1218.39 L1476.27 1218.39 L1475.68 1218.39 L1475.09 1218.39 L1474.51 1218.39 L1473.92 1218.39 L1473.33 1218.39 L1472.75 1218.39 L1472.16 1218.39 L1471.57 1218.39 L1470.99 1218.39 L1470.4 1218.39 L1469.82 1218.39 L1469.23 1218.39 L1468.64 1218.39 L1468.06 1218.39 L1467.47 1218.39 L1466.88 1218.39 L1466.3 1218.39 L1465.71 1218.39 L1465.12 1218.39 L1464.54 1218.39 L1463.95 1218.39 L1463.37 1218.39 L1462.78 1218.39 L1462.19 1218.39 L1461.61 1218.39 L1461.02 1218.39 L1460.43 1218.39 L1459.85 1218.39 L1459.26 1218.39 L1458.67 1218.39 L1458.09 1218.39 L1457.5 1218.39 L1456.91 1218.39 L1456.33 1218.39 L1455.74 1218.39 L1455.16 1218.39 L1454.57 1218.39 L1453.98 1218.39 L1453.4 1218.39 L1452.81 1218.39 L1452.22 1218.39 L1451.64 1218.39 L1451.05 1218.39 L1450.46 1218.39 L1449.88 1218.39 L1449.29 1218.39 L1448.7 1218.39 L1448.12 1218.39 L1447.53 1218.39 L1446.95 1218.39 L1446.36 1218.39 L1445.77 1218.39 L1445.19 1218.39 L1444.6 1218.39 L1444.01 1218.39 L1443.43 1218.39 L1442.84 1218.39 L1442.25 1218.39 L1441.67 1218.39 L1441.08 1218.39 L1440.5 1218.39 L1439.91 1218.39 L1439.32 1218.39 L1438.74 1218.39 L1438.15 1218.39 L1437.56 1218.39 L1436.98 1218.39 L1436.39 1218.39 L1435.8 1218.39 L1435.22 1218.39 L1434.63 1218.39 L1434.04 1218.39 L1433.46 1218.39 L1432.87 1218.39 L1432.29 1218.39 L1431.7 1218.39 L1431.11 1218.39 L1430.53 1218.39 L1429.94 1218.39 L1429.35 1218.39 L1428.77 1218.39 L1428.18 1218.39 L1427.59 1218.39 L1427.01 1218.39 L1426.42 1218.39 L1425.83 1218.39 L1425.25 1218.39 L1424.66 1218.39 L1424.08 1218.39 L1423.49 1218.39 L1422.9 1218.39 L1422.32 1218.39 L1421.73 1218.39 L1421.14 1218.39 L1420.56 1218.39 L1419.97 1218.39 L1419.38 1218.39 L1418.8 1218.39 L1418.21 1218.39 L1417.63 1218.39 L1417.04 1218.39 L1416.45 1218.39 L1415.87 1218.39 L1415.28 1218.39 L1414.69 1218.39 L1414.11 1218.39 L1413.52 1218.39 L1412.93 1218.39 L1412.35 1218.39 L1411.76 1218.39 L1411.17 1218.39 L1410.59 1218.39 L1410 1218.39 L1409.42 1218.39 L1408.83 1218.39 L1408.24 1218.39 L1407.66 1218.39 L1407.07 1218.39 L1406.48 1218.39 L1405.9 1218.39 L1405.31 1218.39 L1404.72 1218.39 L1404.14 1218.39 L1403.55 1218.39 L1402.96 1218.39 L1402.38 1218.39 L1401.79 1218.39 L1401.21 1218.39 L1400.62 1218.39 L1400.03 1218.39 L1399.45 1218.39 L1398.86 1218.39 L1398.27 1218.39 L1397.69 1218.39 L1397.1 1218.39 L1396.51 1218.39 L1395.93 1218.39 L1395.34 1218.39 L1394.75 1218.39 L1394.17 1218.39 L1393.58 1218.39 L1393 1218.39 L1392.41 1218.39 L1391.82 1218.39 L1391.24 1218.39 L1390.65 1218.39 L1390.06 1218.39 L1389.48 1218.39 L1388.89 1218.39 L1388.3 1218.39 L1387.72 1218.39 L1387.13 1218.39 L1386.55 1218.39 L1385.96 1218.39 L1385.37 1218.39 L1384.79 1218.39 L1384.2 1218.39 L1383.61 1218.39 L1383.03 1218.39 L1382.44 1218.39 L1381.85 1218.39 L1381.27 1218.39 L1380.68 1218.39 L1380.09 1218.39 L1379.51 1218.39 L1378.92 1218.39 L1378.34 1218.39 L1377.75 1218.39 L1377.16 1218.39 L1376.58 1218.39 L1375.99 1218.39 L1375.4 1218.39 L1374.82 1218.39 L1374.23 1218.39 L1373.64 1218.39 L1373.06 1218.39 L1372.47 1218.39 L1371.88 1218.39 L1371.3 1218.39 L1370.71 1218.39 L1370.13 1218.39 L1369.54 1218.39 L1368.95 1218.39 L1368.37 1218.39 L1367.78 1218.39 L1367.19 1218.39 L1366.61 1218.39 L1366.02 1218.39 L1365.43 1218.39 L1364.85 1218.39 L1364.26 1218.39 L1363.68 1218.39 L1363.09 1218.39 L1362.5 1218.39 L1361.92 1218.39 L1361.33 1218.39 L1360.74 1218.39 L1360.16 1218.39 L1359.57 1218.39 L1358.98 1218.39 L1358.4 1218.39 L1357.81 1218.39 L1357.22 1218.39 L1356.64 1218.39 L1356.05 1218.39 L1355.47 1218.39 L1354.88 1218.39 L1354.29 1218.39 L1353.71 1218.39 L1353.12 1218.39 L1352.53 1218.39 L1351.95 1218.39 L1351.36 1218.39 L1350.77 1218.39 L1350.19 1218.39 L1349.6 1218.39 L1349.01 1218.39 L1348.43 1218.39 L1347.84 1218.39 L1347.26 1218.39 L1346.67 1218.39 L1346.08 1218.39 L1345.5 1218.39 L1344.91 1218.39 L1344.32 1218.39 L1343.74 1218.39 L1343.15 1218.39 L1342.56 1218.39 L1341.98 1218.39 L1341.39 1218.39 L1340.8 1218.39 L1340.22 1218.39 L1339.63 1218.39 L1339.05 1218.39 L1338.46 1218.39 L1337.87 1218.39 L1337.29 1218.39 L1336.7 1218.39 L1336.11 1218.39 L1335.53 1218.39 L1334.94 1218.39 L1334.35 1218.39 L1333.77 1218.39 L1333.18 1218.39 L1332.6 1218.39 L1332.01 1218.39 L1331.42 1218.39 L1330.84 1218.39 L1330.25 1218.39 L1329.66 1218.39 L1329.08 1218.39 L1328.49 1218.39 L1327.9 1218.39 L1327.32 1218.39 L1326.73 1218.39 L1326.14 1218.39 L1325.56 1218.39 L1324.97 1218.39 L1324.39 1218.39 L1323.8 1218.39 L1323.21 1218.39 L1322.63 1218.39 L1322.04 1218.39 L1321.45 1218.39 L1320.87 1218.39 L1320.28 1218.39 L1319.69 1218.39 L1319.11 1218.39 L1318.52 1218.39 L1317.93 1218.39 L1317.35 1218.39 L1316.76 1218.39 L1316.18 1218.39 L1315.59 1218.39 L1315 1218.39 L1314.42 1218.39 L1313.83 1218.39 L1313.24 1218.39 L1312.66 1218.39 L1312.07 1218.39 L1311.48 1218.39 L1310.9 1218.39 L1310.31 1218.39 L1309.73 1218.39 L1309.14 1218.39 L1308.55 1218.39 L1307.97 1218.39 L1307.38 1218.39 L1306.79 1218.39 L1306.21 1218.39 L1305.62 1218.39 L1305.03 1218.39 L1304.45 1218.39 L1303.86 1218.39 L1303.27 1218.39 L1302.69 1218.39 L1302.1 1218.39 L1301.52 1218.39 L1300.93 1218.39 L1300.34 1218.39 L1299.76 1218.39 L1299.17 1218.39 L1298.58 1218.39 L1298 1218.39 L1297.41 1218.39 L1296.82 1218.39 L1296.24 1218.39 L1295.65 1218.39 L1295.06 1218.39 L1294.48 1218.39 L1293.89 1218.39 L1293.31 1218.39 L1292.72 1218.39 L1292.13 1218.39 L1291.55 1218.39 L1290.96 1218.39 L1290.37 1218.39 L1289.79 1218.39 L1289.2 1218.39 L1288.61 1218.39 L1288.03 1218.39 L1287.44 1218.39 L1286.86 1218.39 L1286.27 1218.39 L1285.68 1218.39 L1285.1 1218.39 L1284.51 1218.39 L1283.92 1218.39 L1283.34 1218.39 L1282.75 1218.39 L1282.16 1218.39 L1281.58 1218.39 L1280.99 1218.39 L1280.4 1218.39 L1279.82 1218.39 L1279.23 1218.39 L1278.65 1218.39 L1278.06 1218.39 L1277.47 1218.39 L1276.89 1218.39 L1276.3 1218.39 L1275.71 1218.39 L1275.13 1218.39 L1274.54 1218.39 L1273.95 1218.39 L1273.37 1218.39 L1272.78 1218.39 L1272.19 1218.39 L1271.61 1218.39 L1271.02 1218.39 L1270.44 1218.39 L1269.85 1218.39 L1269.26 1218.39 L1268.68 1218.39 L1268.09 1218.39 L1267.5 1218.39 L1266.92 1218.39 L1266.33 1218.39 L1265.74 1218.39 L1265.16 1218.39 L1264.57 1218.39 L1263.98 1218.39 L1263.4 1218.39 L1262.81 1218.39 L1262.23 1218.39 L1261.64 1218.39 L1261.05 1218.39 L1260.47 1218.39 L1259.88 1218.39 L1259.29 1218.39 L1258.71 1218.39 L1258.12 1218.39 L1257.53 1218.39 L1256.95 1218.39 L1256.36 1218.39 L1255.78 1218.39 L1255.19 1218.39 L1254.6 1218.39 L1254.02 1218.39 L1253.43 1218.39 L1252.84 1218.39 L1252.26 1218.39 L1251.67 1218.39 L1251.08 1218.39 L1250.5 1218.39 L1249.91 1218.39 L1249.32 1218.39 L1248.74 1218.39 L1248.15 1218.39 L1247.57 1218.39 L1246.98 1218.39 L1246.39 1218.39 L1245.81 1218.39 L1245.22 1218.39 L1244.63 1218.39 L1244.05 1218.39 L1243.46 1218.39 L1242.87 1218.39 L1242.29 1218.39 L1241.7 1218.39 L1241.11 1218.39 L1240.53 1218.39 L1239.94 1218.39 L1239.36 1218.39 L1238.77 1218.39 L1238.18 1218.39 L1237.6 1218.39 L1237.01 1218.39 L1236.42 1218.39 L1235.84 1218.39 L1235.25 1218.39 L1234.66 1218.39 L1234.08 1218.39 L1233.49 1218.39 L1232.91 1218.39 L1232.32 1218.39 L1231.73 1218.39 L1231.15 1218.39 L1230.56 1218.39 L1229.97 1218.39 L1229.39 1218.39 L1228.8 1218.39 L1228.21 1218.39 L1227.63 1218.39 L1227.04 1218.39 L1226.45 1218.39 L1225.87 1218.39 L1225.28 1218.39 L1224.7 1218.39 L1224.11 1218.39 L1223.52 1218.39 L1222.94 1218.39 L1222.35 1218.39 L1221.76 1218.39 L1221.18 1218.39 L1220.59 1218.39 L1220 1218.39 L1219.42 1218.39 L1218.83 1218.39 L1218.24 1218.39 L1217.66 1218.39 L1217.07 1218.39 L1216.49 1218.39 L1215.9 1218.39 L1215.31 1218.39 L1214.73 1218.39 L1214.14 1218.39 L1213.55 1218.39 L1212.97 1218.39 L1212.38 1218.39 L1211.79 1218.39 L1211.21 1218.39 L1210.62 1218.39 L1210.03 1218.39 L1209.45 1218.39 L1208.86 1218.39 L1208.28 1218.39 L1207.69 1218.39 L1207.1 1218.39 L1206.52 1218.39 L1205.93 1218.39 L1205.34 1218.39 L1204.76 1218.39 L1204.17 1218.39 L1203.58 1218.39 L1203 1218.39 L1202.41 1218.39 L1201.83 1218.39 L1201.24 1218.39 L1200.65 1218.39 L1200.07 1218.39 L1199.48 1218.39 L1198.89 1218.39 L1198.31 1218.39 L1197.72 1218.39 L1197.13 1218.39 L1196.55 1218.39 L1195.96 1218.39 L1195.37 1218.39 L1194.79 1218.39 L1194.2 1218.39 L1193.62 1218.39 L1193.03 1218.39 L1192.44 1218.39 L1191.86 1218.39 L1191.27 1218.39 L1190.68 1218.39 L1190.1 1218.39 L1189.51 1218.39 L1188.92 1218.39 L1188.34 1218.39 L1187.75 1218.39 L1187.16 1218.39 L1186.58 1218.39 L1185.99 1218.39 L1185.41 1218.39 L1184.82 1218.39 L1184.23 1218.39 L1183.65 1218.39 L1183.06 1218.39 L1182.47 1218.39 L1181.89 1218.39 L1181.3 1218.39 L1180.71 1218.39 L1180.13 1218.39 L1179.54 1218.39 L1178.96 1218.39 L1178.37 1218.39 L1177.78 1218.39 L1177.2 1218.39 L1176.61 1218.39 L1176.02 1218.39 L1175.44 1218.39 L1174.85 1218.39 L1174.26 1218.39 L1173.68 1218.39 L1173.09 1218.39 L1172.5 1218.39 L1171.92 1218.39 L1171.33 1218.39 L1170.75 1218.39 L1170.16 1218.39 L1169.57 1218.39 L1168.99 1218.39 L1168.4 1218.39 L1167.81 1218.39 L1167.23 1218.39 L1166.64 1218.39 L1166.05 1218.39 L1165.47 1218.39 L1164.88 1218.39 L1164.29 1218.39 L1163.71 1218.39 L1163.12 1218.39 L1162.54 1218.39 L1161.95 1218.39 L1161.36 1218.39 L1160.78 1218.39 L1160.19 1218.39 L1159.6 1218.39 L1159.02 1218.39 L1158.43 1218.39 L1157.84 1218.39 L1157.26 1218.39 L1156.67 1218.39 L1156.09 1218.39 L1155.5 1218.39 L1154.91 1218.39 L1154.33 1218.39 L1153.74 1218.39 L1153.15 1218.39 L1152.57 1218.39 L1151.98 1218.39 L1151.39 1218.39 L1150.81 1218.39 L1150.22 1218.39 L1149.63 1218.39 L1149.05 1218.39 L1148.46 1218.39 L1147.88 1218.39 L1147.29 1218.39 L1146.7 1218.39 L1146.12 1218.39 L1145.53 1218.39 L1144.94 1218.39 L1144.36 1218.39 L1143.77 1218.39 L1143.18 1218.39 L1142.6 1218.39 L1142.01 1218.39 L1141.42 1218.39 L1140.84 1218.39 L1140.25 1218.39 L1139.67 1218.39 L1139.08 1218.39 L1138.49 1218.39 L1137.91 1218.39 L1137.32 1218.39 L1136.73 1218.39 L1136.15 1218.39 L1135.56 1218.39 L1134.97 1218.39 L1134.39 1218.39 L1133.8 1218.39 L1133.21 1218.39 L1132.63 1218.39 L1132.04 1218.39 L1131.46 1218.39 L1130.87 1218.39 L1130.28 1218.39 L1129.7 1218.39 L1129.11 1218.39 L1128.52 1218.39 L1127.94 1218.39 L1127.35 1218.39 L1126.76 1218.39 L1126.18 1218.39 L1125.59 1218.39 L1125.01 1218.39 L1124.42 1218.39 L1123.83 1218.39 L1123.25 1218.39 L1122.66 1218.39 L1122.07 1218.39 L1121.49 1218.39 L1120.9 1218.39 L1120.31 1218.39 L1119.73 1218.39 L1119.14 1218.39 L1118.55 1218.39 L1117.97 1218.39 L1117.38 1218.39 L1116.8 1218.39 L1116.21 1218.39 L1115.62 1218.39 L1115.04 1218.39 L1114.45 1218.39 L1113.86 1218.39 L1113.28 1218.39 L1112.69 1218.39 L1112.1 1218.39 L1111.52 1218.39 L1110.93 1218.39 L1110.34 1218.39 L1109.76 1218.39 L1109.17 1218.39 L1108.59 1218.39 L1108 1218.39 L1107.41 1218.39 L1106.83 1218.39 L1106.24 1218.39 L1105.65 1218.39 L1105.07 1218.39 L1104.48 1218.39 L1103.89 1218.39 L1103.31 1218.39 L1102.72 1218.39 L1102.14 1218.39 L1101.55 1218.39 L1100.96 1218.39 L1100.38 1218.39 L1099.79 1218.39 L1099.2 1218.39 L1098.62 1218.39 L1098.03 1218.39 L1097.44 1218.39 L1096.86 1218.39 L1096.27 1218.39 L1095.68 1218.39 L1095.1 1218.39 L1094.51 1218.39 L1093.93 1218.39 L1093.34 1218.39 L1092.75 1218.39 L1092.17 1218.39 L1091.58 1218.39 L1090.99 1218.39 L1090.41 1218.39 L1089.82 1218.39 L1089.23 1218.39 L1088.65 1218.39 L1088.06 1218.39 L1087.47 1218.39 L1086.89 1218.39 L1086.3 1218.39 L1085.72 1218.39 L1085.13 1218.39 L1084.54 1218.39 L1083.96 1218.39 L1083.37 1218.39 L1082.78 1218.39 L1082.2 1218.39 L1081.61 1218.39 L1081.02 1218.39 L1080.44 1218.39 L1079.85 1218.39 L1079.26 1218.39 L1078.68 1218.39 L1078.09 1218.39 L1077.51 1218.39 L1076.92 1218.39 L1076.33 1218.39 L1075.75 1218.39 L1075.16 1218.39 L1074.57 1218.39 L1073.99 1218.39 L1073.4 1218.39 L1072.81 1218.39 L1072.23 1218.39 L1071.64 1218.39 L1071.06 1218.39 L1070.47 1218.39 L1069.88 1218.39 L1069.3 1218.39 L1068.71 1218.39 L1068.12 1218.39 L1067.54 1218.39 L1066.95 1218.39 L1066.36 1218.39 L1065.78 1218.39 L1065.19 1218.39 L1064.6 1218.39 L1064.02 1218.39 L1063.43 1218.39 L1062.85 1218.39 L1062.26 1218.39 L1061.67 1218.39 L1061.09 1218.39 L1060.5 1218.39 L1059.91 1218.39 L1059.33 1218.39 L1058.74 1218.39 L1058.15 1218.39 L1057.57 1218.39 L1056.98 1218.39 L1056.39 1218.39 L1055.81 1218.39 L1055.22 1218.39 L1054.64 1218.39 L1054.05 1218.39 L1053.46 1218.39 L1052.88 1218.39 L1052.29 1218.39 L1051.7 1218.39 L1051.12 1218.39 L1050.53 1218.39 L1049.94 1218.39 L1049.36 1218.39 L1048.77 1218.39 L1048.19 1218.39 L1047.6 1218.39 L1047.01 1218.39 L1046.43 1218.39 L1045.84 1218.39 L1045.25 1218.39 L1044.67 1218.39 L1044.08 1218.39 L1043.49 1218.39 L1042.91 1218.39 L1042.32 1218.39 L1041.73 1218.39 L1041.15 1218.39 L1040.56 1218.39 L1039.98 1218.39 L1039.39 1218.39 L1038.8 1218.39 L1038.22 1218.39 L1037.63 1218.39 L1037.04 1218.39 L1036.46 1218.39 L1035.87 1218.39 L1035.28 1218.39 L1034.7 1218.39 L1034.11 1218.39 L1033.52 1218.39 L1032.94 1218.39 L1032.35 1218.39 L1031.77 1218.39 L1031.18 1218.39 L1030.59 1218.39 L1030.01 1218.39 L1029.42 1218.39 L1028.83 1218.39 L1028.25 1218.39 L1027.66 1218.39 L1027.07 1218.39 L1026.49 1218.39 L1025.9 1218.39 L1025.32 1218.39 L1024.73 1218.39 L1024.14 1218.39 L1023.56 1218.39 L1022.97 1218.39 L1022.38 1218.39 L1021.8 1218.39 L1021.21 1218.39 L1020.62 1218.39 L1020.04 1218.39 L1019.45 1218.39 L1018.86 1218.39 L1018.28 1218.39 L1017.69 1218.39 L1017.11 1218.39 L1016.52 1218.39 L1015.93 1218.39 L1015.35 1218.39 L1014.76 1218.39 L1014.17 1218.39 L1013.59 1218.39 L1013 1218.39 L1012.41 1218.39 L1011.83 1218.39 L1011.24 1218.39 L1010.65 1218.39 L1010.07 1218.39 L1009.48 1218.39 L1008.9 1218.39 L1008.31 1218.39 L1007.72 1218.39 L1007.14 1218.39 L1006.55 1218.39 L1005.96 1218.39 L1005.38 1218.39 L1004.79 1218.39 L1004.2 1218.39 L1003.62 1218.39 L1003.03 1218.39 L1002.44 1218.39 L1001.86 1218.39 L1001.27 1218.39 L1000.69 1218.39 L1000.1 1218.39 L999.513 1218.39 L998.926 1218.39 L998.34 1218.39 L997.754 1218.39 L997.167 1218.39 L996.581 1218.39 L995.994 1218.39 L995.408 1218.39 L994.822 1218.39 L994.235 1218.39 L993.649 1218.39 L993.062 1218.39 L992.476 1218.39 L991.889 1218.39 L991.303 1218.39 L990.717 1218.39 L990.13 1218.39 L989.544 1218.39 L988.957 1218.39 L988.371 1218.39 L987.785 1218.39 L987.198 1218.39 L986.612 1218.39 L986.025 1218.39  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1218.78 986.612,1218.78 987.198,1218.78 987.785,1218.78 988.371,1218.78 988.957,1218.78 989.544,1218.78 990.13,1218.78 990.717,1218.78 991.303,1218.78 991.889,1218.78 992.476,1218.78 993.062,1218.78 993.649,1218.78 994.235,1218.78 994.822,1218.78 995.408,1218.78 995.994,1218.78 996.581,1218.78 997.167,1218.78 997.754,1218.78 998.34,1218.78 998.926,1218.78 999.513,1218.78 1000.1,1218.78 1000.69,1218.78 1001.27,1218.78 1001.86,1218.78 1002.44,1218.78 1003.03,1218.78 1003.62,1218.78 1004.2,1218.78 1004.79,1218.78 1005.38,1218.78 1005.96,1218.78 1006.55,1218.78 1007.14,1218.78 1007.72,1218.78 1008.31,1218.78 1008.9,1218.78 1009.48,1218.78 1010.07,1218.78 1010.65,1218.78 1011.24,1218.78 1011.83,1218.78 1012.41,1218.78 1013,1218.78 1013.59,1218.78 1014.17,1218.78 1014.76,1218.78 1015.35,1218.78 1015.93,1218.78 1016.52,1218.78 1017.11,1218.78 1017.69,1218.78 1018.28,1218.78 1018.86,1218.78 1019.45,1218.78 1020.04,1218.78 1020.62,1218.78 1021.21,1218.78 1021.8,1218.78 1022.38,1218.78 1022.97,1218.78 1023.56,1218.78 1024.14,1218.78 1024.73,1218.78 1025.32,1218.78 1025.9,1218.78 1026.49,1218.78 1027.07,1218.78 1027.66,1218.78 1028.25,1218.78 1028.83,1218.78 1029.42,1218.78 1030.01,1218.78 1030.59,1218.78 1031.18,1218.78 1031.77,1218.78 1032.35,1218.78 1032.94,1218.78 1033.52,1218.78 1034.11,1218.78 1034.7,1218.78 1035.28,1218.78 1035.87,1218.78 1036.46,1218.78 1037.04,1218.78 1037.63,1218.78 1038.22,1218.78 1038.8,1218.78 1039.39,1218.78 1039.98,1218.78 1040.56,1218.78 1041.15,1218.78 1041.73,1218.78 1042.32,1218.78 1042.91,1218.78 1043.49,1218.78 1044.08,1218.78 1044.67,1218.78 1045.25,1218.78 1045.84,1218.78 1046.43,1218.78 1047.01,1218.78 1047.6,1218.78 1048.19,1218.78 1048.77,1218.78 1049.36,1218.78 1049.94,1218.78 1050.53,1218.78 1051.12,1218.78 1051.7,1218.78 1052.29,1218.78 1052.88,1218.78 1053.46,1218.78 1054.05,1218.78 1054.64,1218.78 1055.22,1218.78 1055.81,1218.78 1056.39,1218.78 1056.98,1218.78 1057.57,1218.78 1058.15,1218.78 1058.74,1218.78 1059.33,1218.78 1059.91,1218.78 1060.5,1218.78 1061.09,1218.78 1061.67,1218.78 1062.26,1218.78 1062.85,1218.78 1063.43,1218.78 1064.02,1218.78 1064.6,1218.78 1065.19,1218.78 1065.78,1218.78 1066.36,1218.78 1066.95,1218.78 1067.54,1218.78 1068.12,1218.78 1068.71,1218.78 1069.3,1218.78 1069.88,1218.78 1070.47,1218.78 1071.06,1218.78 1071.64,1218.78 1072.23,1218.78 1072.81,1218.78 1073.4,1218.78 1073.99,1218.78 1074.57,1218.78 1075.16,1218.78 1075.75,1218.78 1076.33,1218.78 1076.92,1218.78 1077.51,1218.78 1078.09,1218.78 1078.68,1218.78 1079.26,1218.78 1079.85,1218.78 1080.44,1218.78 1081.02,1218.78 1081.61,1218.78 1082.2,1218.78 1082.78,1218.78 1083.37,1218.78 1083.96,1218.78 1084.54,1218.78 1085.13,1218.78 1085.72,1218.78 1086.3,1218.78 1086.89,1218.78 1087.47,1218.78 1088.06,1218.78 1088.65,1218.78 1089.23,1218.78 1089.82,1218.78 1090.41,1218.78 1090.99,1218.78 1091.58,1218.78 1092.17,1218.78 1092.75,1218.78 1093.34,1218.78 1093.93,1218.78 1094.51,1218.78 1095.1,1218.78 1095.68,1218.78 1096.27,1218.78 1096.86,1218.78 1097.44,1218.78 1098.03,1218.78 1098.62,1218.78 1099.2,1218.78 1099.79,1218.78 1100.38,1218.78 1100.96,1218.78 1101.55,1218.78 1102.14,1218.78 1102.72,1218.78 1103.31,1218.78 1103.89,1218.78 1104.48,1218.78 1105.07,1218.78 1105.65,1218.78 1106.24,1218.78 1106.83,1218.78 1107.41,1218.78 1108,1218.78 1108.59,1218.78 1109.17,1218.78 1109.76,1218.78 1110.34,1218.78 1110.93,1218.78 1111.52,1218.78 1112.1,1218.78 1112.69,1218.78 1113.28,1218.78 1113.86,1218.78 1114.45,1218.78 1115.04,1218.78 1115.62,1218.78 1116.21,1218.78 1116.8,1218.78 1117.38,1218.78 1117.97,1218.78 1118.55,1218.78 1119.14,1218.78 1119.73,1218.78 1120.31,1218.78 1120.9,1218.78 1121.49,1218.78 1122.07,1218.78 1122.66,1218.78 1123.25,1218.78 1123.83,1218.78 1124.42,1218.78 1125.01,1218.78 1125.59,1218.78 1126.18,1218.78 1126.76,1218.78 1127.35,1218.78 1127.94,1218.78 1128.52,1218.78 1129.11,1218.78 1129.7,1218.78 1130.28,1218.78 1130.87,1218.78 1131.46,1218.78 1132.04,1218.78 1132.63,1218.78 1133.21,1218.78 1133.8,1218.78 1134.39,1218.78 1134.97,1218.78 1135.56,1218.78 1136.15,1218.78 1136.73,1218.78 1137.32,1218.78 1137.91,1218.78 1138.49,1218.78 1139.08,1218.78 1139.67,1218.78 1140.25,1218.78 1140.84,1218.78 1141.42,1218.78 1142.01,1218.78 1142.6,1218.78 1143.18,1218.78 1143.77,1218.78 1144.36,1218.78 1144.94,1218.78 1145.53,1218.78 1146.12,1218.78 1146.7,1218.78 1147.29,1218.78 1147.88,1218.78 1148.46,1218.78 1149.05,1218.78 1149.63,1218.78 1150.22,1218.78 1150.81,1218.78 1151.39,1218.78 1151.98,1218.78 1152.57,1218.78 1153.15,1218.78 1153.74,1218.78 1154.33,1218.78 1154.91,1218.78 1155.5,1218.78 1156.09,1218.78 1156.67,1218.78 1157.26,1218.78 1157.84,1218.78 1158.43,1218.78 1159.02,1218.78 1159.6,1218.78 1160.19,1218.78 1160.78,1218.78 1161.36,1218.78 1161.95,1218.78 1162.54,1218.78 1163.12,1218.78 1163.71,1218.78 1164.29,1218.78 1164.88,1218.78 1165.47,1218.78 1166.05,1218.78 1166.64,1218.78 1167.23,1218.78 1167.81,1218.78 1168.4,1218.78 1168.99,1218.78 1169.57,1218.78 1170.16,1218.78 1170.75,1218.78 1171.33,1218.78 1171.92,1218.78 1172.5,1218.78 1173.09,1218.78 1173.68,1218.78 1174.26,1218.78 1174.85,1218.78 1175.44,1218.78 1176.02,1218.78 1176.61,1218.78 1177.2,1218.78 1177.78,1218.78 1178.37,1218.78 1178.96,1218.78 1179.54,1218.78 1180.13,1218.78 1180.71,1218.78 1181.3,1218.78 1181.89,1218.78 1182.47,1218.78 1183.06,1218.78 1183.65,1218.78 1184.23,1218.78 1184.82,1218.78 1185.41,1218.78 1185.99,1218.78 1186.58,1218.78 1187.16,1218.78 1187.75,1218.78 1188.34,1218.78 1188.92,1218.78 1189.51,1218.78 1190.1,1218.78 1190.68,1218.78 1191.27,1218.78 1191.86,1218.78 1192.44,1218.78 1193.03,1218.78 1193.62,1218.78 1194.2,1218.78 1194.79,1218.78 1195.37,1218.78 1195.96,1218.78 1196.55,1218.78 1197.13,1218.78 1197.72,1218.78 1198.31,1218.78 1198.89,1218.78 1199.48,1218.78 1200.07,1218.78 1200.65,1218.78 1201.24,1218.78 1201.83,1218.78 1202.41,1218.78 1203,1218.78 1203.58,1218.78 1204.17,1218.78 1204.76,1218.78 1205.34,1218.78 1205.93,1218.78 1206.52,1218.78 1207.1,1218.78 1207.69,1218.78 1208.28,1218.78 1208.86,1218.78 1209.45,1218.78 1210.03,1218.78 1210.62,1218.78 1211.21,1218.78 1211.79,1218.78 1212.38,1218.78 1212.97,1218.78 1213.55,1218.78 1214.14,1218.78 1214.73,1218.78 1215.31,1218.78 1215.9,1218.78 1216.49,1218.78 1217.07,1218.78 1217.66,1218.78 1218.24,1218.78 1218.83,1218.78 1219.42,1218.78 1220,1218.78 1220.59,1218.78 1221.18,1218.78 1221.76,1218.78 1222.35,1218.78 1222.94,1218.78 1223.52,1218.78 1224.11,1218.78 1224.7,1218.78 1225.28,1218.78 1225.87,1218.78 1226.45,1218.78 1227.04,1218.78 1227.63,1218.78 1228.21,1218.78 1228.8,1218.78 1229.39,1218.78 1229.97,1218.78 1230.56,1218.78 1231.15,1218.78 1231.73,1218.78 1232.32,1218.78 1232.91,1218.78 1233.49,1218.78 1234.08,1218.78 1234.66,1218.78 1235.25,1218.78 1235.84,1218.78 1236.42,1218.78 1237.01,1218.78 1237.6,1218.78 1238.18,1218.78 1238.77,1218.78 1239.36,1218.78 1239.94,1218.78 1240.53,1218.78 1241.11,1218.78 1241.7,1218.78 1242.29,1218.78 1242.87,1218.78 1243.46,1218.78 1244.05,1218.78 1244.63,1218.78 1245.22,1218.78 1245.81,1218.78 1246.39,1218.78 1246.98,1218.78 1247.57,1218.78 1248.15,1218.78 1248.74,1218.78 1249.32,1218.78 1249.91,1218.78 1250.5,1218.78 1251.08,1218.78 1251.67,1218.78 1252.26,1218.78 1252.84,1218.78 1253.43,1218.78 1254.02,1218.78 1254.6,1218.78 1255.19,1218.78 1255.78,1218.78 1256.36,1218.78 1256.95,1218.78 1257.53,1218.78 1258.12,1218.78 1258.71,1218.78 1259.29,1218.78 1259.88,1218.78 1260.47,1218.78 1261.05,1218.78 1261.64,1218.78 1262.23,1218.78 1262.81,1218.78 1263.4,1218.78 1263.98,1218.78 1264.57,1218.78 1265.16,1218.78 1265.74,1218.78 1266.33,1218.78 1266.92,1218.78 1267.5,1218.78 1268.09,1218.78 1268.68,1218.78 1269.26,1218.78 1269.85,1218.78 1270.44,1218.78 1271.02,1218.78 1271.61,1218.78 1272.19,1218.78 1272.78,1218.78 1273.37,1218.78 1273.95,1218.78 1274.54,1218.78 1275.13,1218.78 1275.71,1218.78 1276.3,1218.78 1276.89,1218.78 1277.47,1218.78 1278.06,1218.78 1278.65,1218.78 1279.23,1218.78 1279.82,1218.78 1280.4,1218.78 1280.99,1218.78 1281.58,1218.78 1282.16,1218.78 1282.75,1218.78 1283.34,1218.78 1283.92,1218.78 1284.51,1218.78 1285.1,1218.78 1285.68,1218.78 1286.27,1218.78 1286.86,1218.78 1287.44,1218.78 1288.03,1218.78 1288.61,1218.78 1289.2,1218.78 1289.79,1218.78 1290.37,1218.78 1290.96,1218.78 1291.55,1218.78 1292.13,1218.78 1292.72,1218.78 1293.31,1218.78 1293.89,1218.78 1294.48,1218.78 1295.06,1218.78 1295.65,1218.78 1296.24,1218.78 1296.82,1218.78 1297.41,1218.78 1298,1218.78 1298.58,1218.78 1299.17,1218.78 1299.76,1218.78 1300.34,1218.78 1300.93,1218.78 1301.52,1218.78 1302.1,1218.78 1302.69,1218.78 1303.27,1218.78 1303.86,1218.78 1304.45,1218.78 1305.03,1218.78 1305.62,1218.78 1306.21,1218.78 1306.79,1218.78 1307.38,1218.78 1307.97,1218.78 1308.55,1218.78 1309.14,1218.78 1309.73,1218.78 1310.31,1218.78 1310.9,1218.78 1311.48,1218.78 1312.07,1218.78 1312.66,1218.78 1313.24,1218.78 1313.83,1218.78 1314.42,1218.78 1315,1218.78 1315.59,1218.78 1316.18,1218.78 1316.76,1218.78 1317.35,1218.78 1317.93,1218.78 1318.52,1218.78 1319.11,1218.78 1319.69,1218.78 1320.28,1218.78 1320.87,1218.78 1321.45,1218.78 1322.04,1218.78 1322.63,1218.78 1323.21,1218.78 1323.8,1218.78 1324.39,1218.78 1324.97,1218.78 1325.56,1218.78 1326.14,1218.78 1326.73,1218.78 1327.32,1218.78 1327.9,1218.78 1328.49,1218.78 1329.08,1218.78 1329.66,1218.78 1330.25,1218.78 1330.84,1218.78 1331.42,1218.78 1332.01,1218.78 1332.6,1218.78 1333.18,1218.78 1333.77,1218.78 1334.35,1218.78 1334.94,1218.78 1335.53,1218.78 1336.11,1218.78 1336.7,1218.78 1337.29,1218.78 1337.87,1218.78 1338.46,1218.78 1339.05,1218.78 1339.63,1218.78 1340.22,1218.78 1340.8,1218.78 1341.39,1218.78 1341.98,1218.78 1342.56,1218.78 1343.15,1218.78 1343.74,1218.78 1344.32,1218.78 1344.91,1218.78 1345.5,1218.78 1346.08,1218.78 1346.67,1218.78 1347.26,1218.78 1347.84,1218.78 1348.43,1218.78 1349.01,1218.78 1349.6,1218.78 1350.19,1218.78 1350.77,1218.78 1351.36,1218.78 1351.95,1218.78 1352.53,1218.78 1353.12,1218.78 1353.71,1218.78 1354.29,1218.78 1354.88,1218.78 1355.47,1218.78 1356.05,1218.78 1356.64,1218.78 1357.22,1218.78 1357.81,1218.78 1358.4,1218.78 1358.98,1218.78 1359.57,1218.78 1360.16,1218.78 1360.74,1218.78 1361.33,1218.78 1361.92,1218.78 1362.5,1218.78 1363.09,1218.78 1363.68,1218.78 1364.26,1218.78 1364.85,1218.78 1365.43,1218.78 1366.02,1218.78 1366.61,1218.78 1367.19,1218.78 1367.78,1218.78 1368.37,1218.78 1368.95,1218.78 1369.54,1218.78 1370.13,1218.78 1370.71,1218.78 1371.3,1218.78 1371.88,1218.78 1372.47,1218.78 1373.06,1218.78 1373.64,1218.78 1374.23,1218.78 1374.82,1218.78 1375.4,1218.78 1375.99,1218.78 1376.58,1218.78 1377.16,1218.78 1377.75,1218.78 1378.34,1218.78 1378.92,1218.78 1379.51,1218.78 1380.09,1218.78 1380.68,1218.78 1381.27,1218.78 1381.85,1218.78 1382.44,1218.78 1383.03,1218.78 1383.61,1218.78 1384.2,1218.78 1384.79,1218.78 1385.37,1218.78 1385.96,1218.78 1386.55,1218.78 1387.13,1218.78 1387.72,1218.78 1388.3,1218.78 1388.89,1218.78 1389.48,1218.78 1390.06,1218.78 1390.65,1218.78 1391.24,1218.78 1391.82,1218.78 1392.41,1218.78 1393,1218.78 1393.58,1218.78 1394.17,1218.78 1394.75,1218.78 1395.34,1218.78 1395.93,1218.78 1396.51,1218.78 1397.1,1218.78 1397.69,1218.78 1398.27,1218.78 1398.86,1218.78 1399.45,1218.78 1400.03,1218.78 1400.62,1218.78 1401.21,1218.78 1401.79,1218.78 1402.38,1218.78 1402.96,1218.78 1403.55,1218.78 1404.14,1218.78 1404.72,1218.78 1405.31,1218.78 1405.9,1218.78 1406.48,1218.78 1407.07,1218.78 1407.66,1218.78 1408.24,1218.78 1408.83,1218.78 1409.42,1218.78 1410,1218.78 1410.59,1218.78 1411.17,1218.78 1411.76,1218.78 1412.35,1218.78 1412.93,1218.78 1413.52,1218.78 1414.11,1218.78 1414.69,1218.78 1415.28,1218.78 1415.87,1218.78 1416.45,1218.78 1417.04,1218.78 1417.63,1218.78 1418.21,1218.78 1418.8,1218.78 1419.38,1218.78 1419.97,1218.78 1420.56,1218.78 1421.14,1218.78 1421.73,1218.78 1422.32,1218.78 1422.9,1218.78 1423.49,1218.78 1424.08,1218.78 1424.66,1218.78 1425.25,1218.78 1425.83,1218.78 1426.42,1218.78 1427.01,1218.78 1427.59,1218.78 1428.18,1218.78 1428.77,1218.78 1429.35,1218.78 1429.94,1218.78 1430.53,1218.78 1431.11,1218.78 1431.7,1218.78 1432.29,1218.78 1432.87,1218.78 1433.46,1218.78 1434.04,1218.78 1434.63,1218.78 1435.22,1218.78 1435.8,1218.78 1436.39,1218.78 1436.98,1218.78 1437.56,1218.78 1438.15,1218.78 1438.74,1218.78 1439.32,1218.78 1439.91,1218.78 1440.5,1218.78 1441.08,1218.78 1441.67,1218.78 1442.25,1218.78 1442.84,1218.78 1443.43,1218.78 1444.01,1218.78 1444.6,1218.78 1445.19,1218.78 1445.77,1218.78 1446.36,1218.78 1446.95,1218.78 1447.53,1218.78 1448.12,1218.78 1448.7,1218.78 1449.29,1218.78 1449.88,1218.78 1450.46,1218.78 1451.05,1218.78 1451.64,1218.78 1452.22,1218.78 1452.81,1218.78 1453.4,1218.78 1453.98,1218.78 1454.57,1218.78 1455.16,1218.78 1455.74,1218.78 1456.33,1218.78 1456.91,1218.78 1457.5,1218.78 1458.09,1218.78 1458.67,1218.78 1459.26,1218.78 1459.85,1218.78 1460.43,1218.78 1461.02,1218.78 1461.61,1218.78 1462.19,1218.78 1462.78,1218.78 1463.37,1218.78 1463.95,1218.78 1464.54,1218.78 1465.12,1218.78 1465.71,1218.78 1466.3,1218.78 1466.88,1218.78 1467.47,1218.78 1468.06,1218.78 1468.64,1218.78 1469.23,1218.78 1469.82,1218.78 1470.4,1218.78 1470.99,1218.78 1471.57,1218.78 1472.16,1218.78 1472.75,1218.78 1473.33,1218.78 1473.92,1218.78 1474.51,1218.78 1475.09,1218.78 1475.68,1218.78 1476.27,1218.78 1476.85,1218.78 1477.44,1218.78 1478.03,1218.78 1478.61,1218.78 1479.2,1218.78 1479.78,1218.78 1480.37,1218.78 1480.96,1218.78 1481.54,1218.78 1482.13,1218.78 1482.72,1218.78 1483.3,1218.78 1483.89,1218.78 1484.48,1218.78 1485.06,1218.78 1485.65,1218.78 1486.24,1218.78 1486.82,1218.78 1487.41,1218.78 1487.99,1218.78 1488.58,1218.78 1489.17,1218.78 1489.75,1218.78 1490.34,1218.78 1490.93,1218.78 1491.51,1218.78 1492.1,1218.78 1492.69,1218.78 1493.27,1218.78 1493.86,1218.78 1494.45,1218.78 1495.03,1218.78 1495.62,1218.78 1496.2,1218.78 1496.79,1218.78 1497.38,1218.78 1497.96,1218.78 1498.55,1218.78 1499.14,1218.78 1499.72,1218.78 1500.31,1218.78 1500.9,1218.78 1501.48,1218.78 1502.07,1218.78 1502.65,1218.78 1503.24,1218.78 1503.83,1218.78 1504.41,1218.78 1505,1218.78 1505.59,1218.78 1506.17,1218.78 1506.76,1218.78 1507.35,1218.78 1507.93,1218.78 1508.52,1218.78 1509.11,1218.78 1509.69,1218.78 1510.28,1218.78 1510.86,1218.78 1511.45,1218.78 1512.04,1218.78 1512.62,1218.78 1513.21,1218.78 1513.8,1218.78 1514.38,1218.78 1514.97,1218.78 1515.56,1218.78 1516.14,1218.78 1516.73,1218.78 1517.32,1218.78 1517.9,1218.78 1518.49,1218.78 1519.07,1218.78 1519.66,1218.78 1520.25,1218.78 1520.83,1218.78 1521.42,1218.78 1522.01,1218.78 1522.59,1218.78 1523.18,1218.78 1523.77,1218.78 1524.35,1218.78 1524.94,1218.78 1525.52,1218.78 1526.11,1218.78 1526.7,1218.78 1527.28,1218.78 1527.87,1218.78 1528.46,1218.78 1529.04,1218.78 1529.63,1218.78 1530.22,1218.78 1530.8,1218.78 1531.39,1218.78 1531.98,1218.78 1532.56,1218.78 1533.15,1218.78 1533.73,1218.78 1534.32,1218.78 1534.91,1218.78 1535.49,1218.78 1536.08,1218.78 1536.67,1218.78 1537.25,1218.78 1537.84,1218.78 1538.43,1218.78 1539.01,1218.78 1539.6,1218.78 1540.19,1218.78 1540.77,1218.78 1541.36,1218.78 1541.94,1218.78 1542.53,1218.78 1543.12,1218.78 1543.7,1218.78 1544.29,1218.78 1544.88,1218.78 1545.46,1218.78 1546.05,1218.78 1546.64,1218.78 1547.22,1218.78 1547.81,1218.78 1548.4,1218.78 1548.98,1218.78 1549.57,1218.78 1550.15,1218.78 1550.74,1218.78 1551.33,1218.78 1551.91,1218.78 1552.5,1218.78 1553.09,1218.78 1553.67,1218.78 1554.26,1218.78 1554.85,1218.78 1555.43,1218.78 1556.02,1218.78 1556.6,1218.78 1557.19,1218.78 1557.78,1218.78 1558.36,1218.78 1558.95,1218.78 1559.54,1218.78 1560.12,1218.78 1560.71,1218.78 1561.3,1218.78 1561.88,1218.78 1562.47,1218.78 1563.06,1218.78 1563.64,1218.78 1564.23,1218.78 1564.81,1218.78 1565.4,1218.78 1565.99,1218.78 1566.57,1218.78 1567.16,1218.78 1567.75,1218.78 1568.33,1218.78 1568.92,1218.78 1569.51,1218.78 1570.09,1218.78 1570.68,1218.78 1571.27,1218.78 1571.85,1218.78 1572.44,1218.78 1573.02,1218.78 1573.61,1218.78 1574.2,1218.78 1574.78,1218.78 1575.37,1218.78 1575.96,1218.78 1576.54,1218.78 1577.13,1218.78 1577.72,1218.78 1578.3,1218.78 1578.89,1218.78 1579.47,1218.78 1580.06,1218.78 1580.65,1218.78 1581.23,1218.78 1581.82,1218.78 1582.41,1218.78 1582.99,1218.78 1583.58,1218.78 1584.17,1218.78 1584.75,1218.78 1585.34,1218.78 1585.93,1218.78 1586.51,1218.78 1587.1,1218.78 1587.68,1218.78 1588.27,1218.78 1588.86,1218.78 1589.44,1218.78 1590.03,1218.78 1590.62,1218.78 1591.2,1218.78 1591.79,1218.78 1592.38,1218.78 1592.96,1218.78 1593.55,1218.78 1594.14,1218.78 1594.72,1218.78 1595.31,1218.78 1595.89,1218.78 1596.48,1218.78 1597.07,1218.78 1597.65,1218.78 1598.24,1218.78 1598.83,1218.78 1599.41,1218.78 1600,1218.78 1600.59,1218.78 1601.17,1218.78 1601.76,1218.78 1602.34,1218.78 1602.93,1218.78 1603.52,1218.78 1604.1,1218.78 1604.69,1218.78 1605.28,1218.78 1605.86,1218.78 1606.45,1218.78 1607.04,1218.78 1607.62,1218.78 1608.21,1218.78 1608.8,1218.78 1609.38,1218.78 1609.97,1218.78 1610.55,1218.78 1611.14,1218.78 1611.73,1218.78 1612.31,1218.78 1612.9,1218.78 1613.49,1218.78 1614.07,1218.78 1614.66,1218.78 1615.25,1218.78 1615.83,1218.78 1616.42,1218.78 1617.01,1218.78 1617.59,1218.78 1618.18,1218.78 1618.76,1218.78 1619.35,1218.78 1619.94,1218.78 1620.52,1218.78 1621.11,1218.78 1621.7,1218.78 1622.28,1218.78 1622.87,1218.78 1623.46,1218.78 1624.04,1218.78 1624.63,1218.78 1625.22,1218.78 1625.8,1218.78 1626.39,1218.78 1626.97,1218.78 1627.56,1218.78 1628.15,1218.78 1628.73,1218.78 1629.32,1218.78 1629.91,1218.78 1630.49,1218.78 1631.08,1218.78 1631.67,1218.78 1632.25,1218.78 1632.84,1218.78 1633.42,1218.78 1634.01,1218.78 1634.6,1218.78 1635.18,1218.78 1635.77,1218.78 1636.36,1218.78 1636.94,1218.78 1637.53,1218.78 1638.12,1218.78 1638.7,1218.78 1639.29,1218.78 1639.88,1218.78 1640.46,1218.78 1641.05,1218.78 1641.63,1218.78 1642.22,1218.78 1642.81,1218.78 1643.39,1218.78 1643.98,1218.78 1644.57,1218.78 1645.15,1218.78 1645.74,1218.78 1646.33,1218.78 1646.91,1218.78 1647.5,1218.78 1648.09,1218.78 1648.67,1218.78 1649.26,1218.78 1649.84,1218.78 1650.43,1218.78 1651.02,1218.78 1651.6,1218.78 1652.19,1218.78 1652.78,1218.78 1653.36,1218.78 1653.95,1218.78 1654.54,1218.78 1655.12,1218.78 1655.71,1218.78 1656.29,1218.78 1656.88,1218.78 1657.47,1218.78 1658.05,1218.78 1658.64,1218.78 1659.23,1218.78 1659.81,1218.78 1660.4,1218.78 1660.99,1218.78 1661.57,1218.78 1662.16,1218.78 1662.75,1218.78 1663.33,1218.78 1663.92,1218.78 1664.5,1218.78 1665.09,1218.78 1665.68,1218.78 1666.26,1218.78 1666.85,1218.78 1667.44,1218.78 1668.02,1218.78 1668.61,1218.78 1669.2,1218.78 1669.78,1218.78 1670.37,1218.78 1670.96,1218.78 1671.54,1218.78 1672.13,1218.78 1672.71,1218.78 1673.3,1218.78 1673.89,1218.78 1674.47,1218.78 1675.06,1218.78 1675.65,1218.78 1676.23,1218.78 1676.82,1218.78 1677.41,1218.78 1677.99,1218.78 1678.58,1218.78 1679.17,1218.78 1679.75,1218.78 1680.34,1218.78 1680.92,1218.78 1681.51,1218.78 1682.1,1218.78 1682.68,1218.78 1683.27,1218.78 1683.86,1218.78 1684.44,1218.78 1685.03,1218.78 1685.62,1218.78 1686.2,1218.78 1686.79,1218.78 1687.37,1218.78 1687.96,1218.78 1688.55,1218.78 1689.13,1218.78 1689.72,1218.78 1690.31,1218.78 1690.89,1218.78 1691.48,1218.78 1692.07,1218.78 1692.65,1218.78 1693.24,1218.78 1693.83,1218.78 1694.41,1218.78 1695,1218.78 1695.58,1218.78 1696.17,1218.78 1696.76,1218.78 1697.34,1218.78 1697.93,1218.78 1698.52,1218.78 1699.1,1218.78 1699.69,1218.78 1700.28,1218.78 1700.86,1218.78 1701.45,1218.78 1702.04,1218.78 1702.62,1218.78 1703.21,1218.78 1703.79,1218.78 1704.38,1218.78 1704.97,1218.78 1705.55,1218.78 1706.14,1218.78 1706.73,1218.78 1707.31,1218.78 1707.9,1218.78 1708.49,1218.78 1709.07,1218.78 1709.66,1218.78 1710.24,1218.78 1710.83,1218.78 1711.42,1218.78 1712,1218.78 1712.59,1218.78 1713.18,1218.78 1713.76,1218.78 1714.35,1218.78 1714.94,1218.78 1715.52,1218.78 1716.11,1218.78 1716.7,1218.78 1717.28,1218.78 1717.87,1218.78 1718.45,1218.78 1719.04,1218.78 1719.63,1218.78 1720.21,1218.78 1720.8,1218.78 1721.39,1218.78 1721.97,1218.78 1722.56,1218.78 1723.15,1218.78 1723.73,1218.78 1724.32,1218.78 1724.91,1218.78 1725.49,1218.78 1726.08,1218.78 1726.66,1218.78 1727.25,1218.78 1727.84,1218.78 1728.42,1218.78 1729.01,1218.78 1729.6,1218.78 1730.18,1218.78 1730.77,1218.78 1731.36,1218.78 1731.94,1218.78 1732.53,1218.78 1733.11,1218.78 1733.7,1218.78 1734.29,1218.78 1734.87,1218.78 1735.46,1218.78 1736.05,1218.78 1736.63,1218.78 1737.22,1218.78 1737.81,1218.78 1738.39,1218.78 1738.98,1218.78 1739.57,1218.78 1740.15,1218.78 1740.74,1218.78 1741.32,1218.78 1741.91,1218.78 1742.5,1218.78 1743.08,1218.78 1743.67,1218.78 1744.26,1218.78 1744.84,1218.78 1745.43,1218.78 1746.02,1218.78 1746.6,1218.78 1747.19,1218.78 1747.78,1218.78 1748.36,1218.78 1748.95,1218.78 1749.53,1218.78 1750.12,1218.78 1750.71,1218.78 1751.29,1218.78 1751.88,1218.78 1752.47,1218.78 1753.05,1218.78 1753.64,1218.78 1754.23,1218.78 1754.81,1218.78 1755.4,1218.78 1755.99,1218.78 1756.57,1218.78 1757.16,1218.78 1757.74,1218.78 1758.33,1218.78 1758.92,1218.78 1759.5,1218.78 1760.09,1218.78 1760.68,1218.78 1761.26,1218.78 1761.85,1218.78 1762.44,1218.78 1763.02,1218.78 1763.61,1218.78 1764.19,1218.78 1764.78,1218.78 1765.37,1218.78 1765.95,1218.78 1766.54,1218.78 1767.13,1218.78 1767.71,1218.78 1768.3,1218.78 1768.89,1218.78 1769.47,1218.78 1770.06,1218.78 1770.65,1218.78 1771.23,1218.78 1771.82,1218.78 1772.4,1218.78 1772.99,1218.78 1773.58,1218.78 1774.16,1218.78 1774.75,1218.78 1775.34,1218.78 1775.92,1218.78 1776.51,1218.78 1777.1,1218.78 1777.68,1218.78 1778.27,1218.78 1778.86,1218.78 1779.44,1218.78 1780.03,1218.78 1780.61,1218.78 1781.2,1218.78 1781.79,1218.78 1782.37,1218.78 1782.96,1218.78 1783.55,1218.78 1784.13,1218.78 1784.72,1218.78 1785.31,1218.78 1785.89,1218.78 1786.48,1218.78 1787.06,1218.78 1787.65,1218.78 1788.24,1218.78 1788.82,1218.78 1789.41,1218.78 1790,1218.78 1790.58,1218.78 1791.17,1218.78 1791.76,1218.78 1792.34,1218.78 1792.93,1218.78 1793.52,1218.78 1794.1,1218.78 1794.69,1218.78 1795.27,1218.78 1795.86,1218.78 1796.45,1218.78 1797.03,1218.78 1797.62,1218.78 1798.21,1218.78 1798.79,1218.78 1799.38,1218.78 1799.97,1218.78 1800.55,1218.78 1801.14,1218.78 1801.73,1218.78 1802.31,1218.78 1802.9,1218.78 1803.48,1218.78 1804.07,1218.78 1804.66,1218.78 1805.24,1218.78 1805.83,1218.78 1806.42,1218.78 1807,1218.78 1807.59,1218.78 1808.18,1218.78 1808.76,1218.78 1809.35,1218.78 1809.94,1218.78 1810.52,1218.78 1811.11,1218.78 1811.69,1218.78 1812.28,1218.78 1812.87,1218.78 1813.45,1218.78 1814.04,1218.78 1814.63,1218.78 1815.21,1218.78 1815.8,1218.78 1816.39,1218.78 1816.97,1218.78 1817.56,1218.78 1818.14,1218.78 1818.73,1218.78 1819.32,1218.78 1819.9,1218.78 1820.49,1218.78 1821.08,1218.78 1821.66,1218.78 1822.25,1218.78 1822.84,1218.78 1823.42,1218.78 1824.01,1218.78 1824.6,1218.78 1825.18,1218.78 1825.77,1218.78 1826.35,1218.78 1826.94,1218.78 1827.53,1218.78 1828.11,1218.78 1828.7,1218.78 1829.29,1218.78 1829.87,1218.78 1830.46,1218.78 1831.05,1218.78 1831.63,1218.78 1832.22,1218.78 1832.81,1218.78 1833.39,1218.78 1833.98,1218.78 1834.56,1218.78 1835.15,1218.78 1835.74,1218.78 1836.32,1218.78 1836.91,1218.78 1837.5,1218.78 1838.08,1218.78 1838.67,1218.78 1839.26,1218.78 1839.84,1218.78 1840.43,1218.78 1841.01,1218.78 1841.6,1218.78 1842.19,1218.78 1842.77,1218.78 1843.36,1218.78 1843.95,1218.78 1844.53,1218.78 1845.12,1218.78 1845.71,1218.78 1846.29,1218.78 1846.88,1218.78 1847.47,1218.78 1848.05,1218.78 1848.64,1218.78 1849.22,1218.78 1849.81,1218.78 1850.4,1218.78 1850.98,1218.78 1851.57,1218.78 1852.16,1218.78 1852.74,1218.78 1853.33,1218.78 1853.92,1218.78 1854.5,1218.78 1855.09,1218.78 1855.68,1218.78 1856.26,1218.78 1856.85,1218.78 1857.43,1218.78 1858.02,1218.78 1858.61,1218.78 1859.19,1218.78 1859.78,1218.78 1860.37,1218.78 1860.95,1218.78 1861.54,1218.78 1862.13,1218.78 1862.71,1218.78 1863.3,1218.78 1863.88,1218.78 1864.47,1218.78 1865.06,1218.78 1865.64,1218.78 1866.23,1218.78 1866.82,1218.78 1867.4,1218.78 1867.99,1218.78 1868.58,1218.78 1869.16,1218.78 1869.75,1218.78 1870.34,1218.78 1870.92,1218.78 1871.51,1218.78 1872.09,1218.78 1872.68,1218.78 1873.27,1218.78 1873.85,1218.78 1874.44,1218.78 1875.03,1218.78 1875.61,1218.78 1876.2,1218.78 1876.79,1218.78 1877.37,1218.78 1877.96,1218.78 1878.55,1218.78 1879.13,1218.78 1879.72,1218.78 1880.3,1218.78 1880.89,1218.78 1881.48,1218.78 1882.06,1218.78 1882.65,1218.78 1883.24,1218.78 1883.82,1218.78 1884.41,1218.78 1885,1218.78 1885.58,1218.78 1886.17,1218.78 1886.76,1218.78 1887.34,1218.78 1887.93,1218.78 1888.51,1218.78 1889.1,1218.78 1889.69,1218.78 1890.27,1218.78 1890.86,1218.78 1891.45,1218.78 1892.03,1218.78 1892.62,1218.78 1893.21,1218.78 1893.79,1218.78 1894.38,1218.78 1894.96,1218.78 1895.55,1218.78 1896.14,1218.78 1896.72,1218.78 1897.31,1218.78 1897.9,1218.78 1898.48,1218.78 1899.07,1218.78 1899.66,1218.78 1900.24,1218.78 1900.83,1218.78 1901.42,1218.78 1902,1218.78 1902.59,1218.78 1903.17,1218.78 1903.76,1218.78 1904.35,1218.78 1904.93,1218.78 1905.52,1218.78 1906.11,1218.78 1906.69,1218.78 1907.28,1218.78 1907.87,1218.78 1908.45,1218.78 1909.04,1218.78 1909.63,1218.78 1910.21,1218.78 1910.8,1218.78 1911.38,1218.78 1911.97,1218.78 1912.56,1218.78 1913.14,1218.78 1913.73,1218.78 1914.32,1218.78 1914.9,1218.78 1915.49,1218.78 1916.08,1218.78 1916.66,1218.78 1917.25,1218.78 1917.83,1218.78 1918.42,1218.78 1919.01,1218.78 1919.59,1218.78 1920.18,1218.78 1920.77,1218.78 1921.35,1218.78 1921.94,1218.78 1922.53,1218.78 1923.11,1218.78 1923.7,1218.78 1924.29,1218.78 1924.87,1218.78 1925.46,1218.78 1926.04,1218.78 1926.63,1218.78 1927.22,1218.78 1927.8,1218.78 1928.39,1218.78 1928.98,1218.78 1929.56,1218.78 1930.15,1218.78 1930.74,1218.78 1931.32,1218.78 1931.91,1218.78 1932.5,1218.78 1933.08,1218.78 1933.67,1218.78 1934.25,1218.78 1934.84,1218.78 1935.43,1218.78 1936.01,1218.78 1936.6,1218.78 1937.19,1218.78 1937.77,1218.78 1938.36,1218.78 1938.95,1218.78 1939.53,1218.78 1940.12,1218.78 1940.71,1218.78 1941.29,1218.78 1941.88,1218.78 1942.46,1218.78 1943.05,1218.78 1943.64,1218.78 1944.22,1218.78 1944.81,1218.78 1945.4,1218.78 1945.98,1218.78 1946.57,1218.78 1947.16,1218.78 1947.74,1218.78 1948.33,1218.78 1948.91,1218.78 1949.5,1218.78 1950.09,1218.78 1950.67,1218.78 1951.26,1218.78 1951.85,1218.78 1952.43,1218.78 1953.02,1218.78 1953.61,1218.78 1954.19,1218.78 1954.78,1218.78 1955.37,1218.78 1955.95,1218.78 1956.54,1218.78 1957.12,1218.78 1957.71,1218.78 1958.3,1218.78 1958.88,1218.78 1959.47,1218.78 1960.06,1218.78 1960.64,1218.78 1961.23,1218.78 1961.82,1218.78 1962.4,1218.78 1962.99,1218.78 1963.58,1218.78 1964.16,1218.78 1964.75,1218.78 1965.33,1218.78 1965.92,1218.78 1966.51,1218.78 1967.09,1218.78 1967.68,1218.78 1968.27,1218.78 1968.85,1218.78 1969.44,1218.78 1970.03,1218.78 1970.61,1218.78 1971.2,1218.78 1971.78,1218.78 1972.37,1218.78 1972.96,1218.78 1973.54,1218.78 1974.13,1218.78 1974.72,1218.78 1975.3,1218.78 1975.89,1218.78 1976.48,1218.78 1977.06,1218.78 1977.65,1218.78 1978.24,1218.78 1978.82,1218.78 1979.41,1218.78 1979.99,1218.78 1980.58,1218.78 1981.17,1218.78 1981.75,1218.78 1982.34,1218.78 1982.93,1218.78 1983.51,1218.78 1984.1,1218.78 1984.69,1218.78 1985.27,1218.78 1985.86,1218.78 1986.45,1218.78 1987.03,1218.78 1987.62,1218.78 1988.2,1218.78 1988.79,1218.78 1989.38,1218.78 1989.96,1218.78 1990.55,1218.78 1991.14,1218.78 1991.72,1218.78 1992.31,1218.78 1992.9,1218.78 1993.48,1218.78 1994.07,1218.78 1994.65,1218.78 1995.24,1218.78 1995.83,1218.78 1996.41,1218.78 1997,1218.78 1997.59,1218.78 1998.17,1218.78 1998.76,1218.78 1999.35,1218.78 1999.93,1218.78 2000.52,1218.78 2001.11,1218.78 2001.69,1218.78 2002.28,1218.78 2002.86,1218.78 2003.45,1218.78 2004.04,1218.78 2004.62,1218.78 2005.21,1218.78 2005.8,1218.78 2006.38,1218.78 2006.97,1218.78 2007.56,1218.78 2008.14,1218.78 2008.73,1218.78 2009.32,1218.78 2009.9,1218.78 2010.49,1218.78 2011.07,1218.78 2011.66,1218.78 2012.25,1218.78 2012.83,1218.78 2013.42,1218.78 2014.01,1218.78 2014.59,1218.78 2015.18,1218.78 2015.77,1218.78 2016.35,1218.78 2016.94,1218.78 2017.53,1218.78 2018.11,1218.78 2018.7,1218.78 2019.28,1218.78 2019.87,1218.78 2020.46,1218.78 2021.04,1218.78 2021.63,1218.78 2022.22,1218.78 2022.8,1218.78 2023.39,1218.78 2023.98,1218.78 2024.56,1218.78 2025.15,1218.78 2025.73,1218.78 2026.32,1218.78 2026.91,1218.78 2027.49,1218.78 2028.08,1218.78 2028.67,1218.78 2029.25,1218.78 2029.84,1218.78 2030.43,1218.78 2031.01,1218.78 2031.6,1218.78 2032.19,1218.78 2032.77,1218.78 2033.36,1218.78 2033.94,1218.78 2034.53,1218.78 2035.12,1218.78 2035.7,1218.78 2036.29,1218.78 2036.88,1218.78 2037.46,1218.78 2038.05,1218.78 2038.64,1218.78 2039.22,1218.78 2039.81,1218.78 2040.4,1218.78 2040.98,1218.78 2041.57,1218.78 2042.15,1218.78 2042.74,1218.78 2043.33,1218.78 2043.91,1218.78 2044.5,1218.78 2045.09,1218.78 2045.67,1218.78 2046.26,1218.78 2046.85,1218.78 2047.43,1218.78 2048.02,1218.78 2048.6,1218.78 2049.19,1218.78 2049.78,1218.78 2050.36,1218.78 2050.95,1218.78 2051.54,1218.78 2052.12,1218.78 2052.71,1218.78 2053.3,1218.78 2053.88,1218.78 2054.47,1218.78 2055.06,1218.78 2055.64,1218.78 2056.23,1218.78 2056.81,1218.78 2057.4,1218.78 2057.99,1218.78 2058.57,1218.78 2059.16,1218.78 2059.75,1218.78 2060.33,1218.78 2060.92,1218.78 2061.51,1218.78 2062.09,1218.78 2062.68,1218.78 2063.27,1218.78 2063.85,1218.78 2064.44,1218.78 2065.02,1218.78 2065.61,1218.78 2066.2,1218.78 2066.78,1218.78 2067.37,1218.78 2067.96,1218.78 2068.54,1218.78 2069.13,1218.78 2069.72,1218.78 2070.3,1218.78 2070.89,1218.78 2071.48,1218.78 2072.06,1218.78 2072.65,1218.78 2073.23,1218.78 2073.82,1218.78 2074.41,1218.78 2074.99,1218.78 2075.58,1218.78 2076.17,1218.78 2076.75,1218.78 2077.34,1218.78 2077.93,1218.78 2078.51,1218.78 2079.1,1218.78 2079.68,1218.78 2080.27,1218.78 2080.86,1218.78 2081.44,1218.78 2082.03,1218.78 2082.62,1218.78 2083.2,1218.78 2083.79,1218.78 2084.38,1218.78 2084.96,1218.78 2085.55,1218.78 2086.14,1218.78 2086.72,1218.78 2087.31,1218.78 2087.89,1218.78 2088.48,1218.78 2089.07,1218.78 2089.65,1218.78 2090.24,1218.78 2090.83,1218.78 2091.41,1218.78 2092,1218.78 2092.59,1218.78 2093.17,1218.78 2093.76,1218.78 2094.35,1218.78 2094.93,1218.78 2095.52,1218.78 2096.1,1218.78 2096.69,1218.78 2097.28,1218.78 2097.86,1218.78 2098.45,1218.78 2099.04,1218.78 2099.62,1218.78 2100.21,1218.78 2100.8,1218.78 2101.38,1218.78 2101.97,1218.78 2102.55,1218.78 2103.14,1218.78 2103.73,1218.78 2104.31,1218.78 2104.9,1218.78 2105.49,1218.78 2106.07,1218.78 2106.66,1218.78 2107.25,1218.78 2107.83,1218.78 2108.42,1218.78 2109.01,1218.78 2109.59,1218.78 2110.18,1218.78 2110.76,1218.78 2111.35,1218.78 2111.94,1218.78 2112.52,1218.78 2113.11,1218.78 2113.7,1218.78 2114.28,1218.78 2114.87,1218.78 2115.46,1218.78 2116.04,1218.78 2116.63,1218.78 2117.22,1218.78 2117.8,1218.78 2118.39,1218.78 2118.97,1218.78 2119.56,1218.78 2120.15,1218.78 2120.73,1218.78 2121.32,1218.78 2121.91,1218.78 2122.49,1218.78 2123.08,1218.78 2123.67,1218.78 2124.25,1218.78 2124.84,1218.78 2125.42,1218.78 2126.01,1218.78 2126.6,1218.78 2127.18,1218.78 2127.77,1218.78 2128.36,1218.78 2128.94,1218.78 2129.53,1218.78 2130.12,1218.78 2130.7,1218.78 2131.29,1218.78 2131.88,1218.78 2132.46,1218.78 2133.05,1218.78 2133.63,1218.78 2134.22,1218.78 2134.81,1218.78 2135.39,1218.78 2135.98,1218.78 2136.57,1218.78 2137.15,1218.78 2137.74,1218.78 2138.33,1218.78 2138.91,1218.78 2139.5,1218.78 2140.09,1218.78 2140.67,1218.78 2141.26,1218.78 2141.84,1218.78 2142.43,1218.78 2143.02,1218.78 2143.6,1218.78 2144.19,1218.78 2144.78,1218.78 2145.36,1218.78 2145.95,1218.78 2146.54,1218.78 2147.12,1218.78 2147.71,1218.78 2148.3,1218.78 2148.88,1218.78 2149.47,1218.78 2150.05,1218.78 2150.64,1218.78 2151.23,1218.78 2151.81,1218.78 2152.4,1218.78 2152.99,1218.78 2153.57,1218.78 2154.16,1218.78 2154.75,1218.78 2155.33,1218.78 2155.92,1218.78 2156.5,1218.78 2157.09,1218.78 2157.68,1218.78 2158.26,1218.78 \"/>\n<path clip-path=\"url(#clip512)\" d=\"M986.025 1218.58 L986.612 1218.58 L987.198 1218.58 L987.785 1218.58 L988.371 1218.58 L988.957 1218.58 L989.544 1218.58 L990.13 1218.58 L990.717 1218.58 L991.303 1218.58 L991.889 1218.58 L992.476 1218.58 L993.062 1218.58 L993.649 1218.58 L994.235 1218.58 L994.822 1218.58 L995.408 1218.58 L995.994 1218.58 L996.581 1218.58 L997.167 1218.58 L997.754 1218.58 L998.34 1218.58 L998.926 1218.58 L999.513 1218.58 L1000.1 1218.58 L1000.69 1218.58 L1001.27 1218.58 L1001.86 1218.58 L1002.44 1218.58 L1003.03 1218.58 L1003.62 1218.58 L1004.2 1218.58 L1004.79 1218.58 L1005.38 1218.58 L1005.96 1218.58 L1006.55 1218.58 L1007.14 1218.58 L1007.72 1218.58 L1008.31 1218.58 L1008.9 1218.58 L1009.48 1218.58 L1010.07 1218.58 L1010.65 1218.58 L1011.24 1218.58 L1011.83 1218.58 L1012.41 1218.58 L1013 1218.58 L1013.59 1218.58 L1014.17 1218.58 L1014.76 1218.58 L1015.35 1218.58 L1015.93 1218.58 L1016.52 1218.58 L1017.11 1218.58 L1017.69 1218.58 L1018.28 1218.58 L1018.86 1218.58 L1019.45 1218.58 L1020.04 1218.58 L1020.62 1218.58 L1021.21 1218.58 L1021.8 1218.58 L1022.38 1218.58 L1022.97 1218.58 L1023.56 1218.58 L1024.14 1218.58 L1024.73 1218.58 L1025.32 1218.58 L1025.9 1218.58 L1026.49 1218.58 L1027.07 1218.58 L1027.66 1218.58 L1028.25 1218.58 L1028.83 1218.58 L1029.42 1218.58 L1030.01 1218.58 L1030.59 1218.58 L1031.18 1218.58 L1031.77 1218.58 L1032.35 1218.58 L1032.94 1218.58 L1033.52 1218.58 L1034.11 1218.58 L1034.7 1218.58 L1035.28 1218.58 L1035.87 1218.58 L1036.46 1218.58 L1037.04 1218.58 L1037.63 1218.58 L1038.22 1218.58 L1038.8 1218.58 L1039.39 1218.58 L1039.98 1218.58 L1040.56 1218.58 L1041.15 1218.58 L1041.73 1218.58 L1042.32 1218.58 L1042.91 1218.58 L1043.49 1218.58 L1044.08 1218.58 L1044.67 1218.58 L1045.25 1218.58 L1045.84 1218.58 L1046.43 1218.58 L1047.01 1218.58 L1047.6 1218.58 L1048.19 1218.58 L1048.77 1218.58 L1049.36 1218.58 L1049.94 1218.58 L1050.53 1218.58 L1051.12 1218.58 L1051.7 1218.58 L1052.29 1218.58 L1052.88 1218.58 L1053.46 1218.58 L1054.05 1218.58 L1054.64 1218.58 L1055.22 1218.58 L1055.81 1218.58 L1056.39 1218.58 L1056.98 1218.58 L1057.57 1218.58 L1058.15 1218.58 L1058.74 1218.58 L1059.33 1218.58 L1059.91 1218.58 L1060.5 1218.58 L1061.09 1218.58 L1061.67 1218.58 L1062.26 1218.58 L1062.85 1218.58 L1063.43 1218.58 L1064.02 1218.58 L1064.6 1218.58 L1065.19 1218.58 L1065.78 1218.58 L1066.36 1218.58 L1066.95 1218.58 L1067.54 1218.58 L1068.12 1218.58 L1068.71 1218.58 L1069.3 1218.58 L1069.88 1218.58 L1070.47 1218.58 L1071.06 1218.58 L1071.64 1218.58 L1072.23 1218.58 L1072.81 1218.58 L1073.4 1218.58 L1073.99 1218.58 L1074.57 1218.58 L1075.16 1218.58 L1075.75 1218.58 L1076.33 1218.58 L1076.92 1218.58 L1077.51 1218.58 L1078.09 1218.58 L1078.68 1218.58 L1079.26 1218.58 L1079.85 1218.58 L1080.44 1218.58 L1081.02 1218.58 L1081.61 1218.58 L1082.2 1218.58 L1082.78 1218.58 L1083.37 1218.58 L1083.96 1218.58 L1084.54 1218.58 L1085.13 1218.58 L1085.72 1218.58 L1086.3 1218.58 L1086.89 1218.58 L1087.47 1218.58 L1088.06 1218.58 L1088.65 1218.58 L1089.23 1218.58 L1089.82 1218.58 L1090.41 1218.58 L1090.99 1218.58 L1091.58 1218.58 L1092.17 1218.58 L1092.75 1218.58 L1093.34 1218.58 L1093.93 1218.58 L1094.51 1218.58 L1095.1 1218.58 L1095.68 1218.58 L1096.27 1218.58 L1096.86 1218.58 L1097.44 1218.58 L1098.03 1218.58 L1098.62 1218.58 L1099.2 1218.58 L1099.79 1218.58 L1100.38 1218.58 L1100.96 1218.58 L1101.55 1218.58 L1102.14 1218.58 L1102.72 1218.58 L1103.31 1218.58 L1103.89 1218.58 L1104.48 1218.58 L1105.07 1218.58 L1105.65 1218.58 L1106.24 1218.58 L1106.83 1218.58 L1107.41 1218.58 L1108 1218.58 L1108.59 1218.58 L1109.17 1218.58 L1109.76 1218.58 L1110.34 1218.58 L1110.93 1218.58 L1111.52 1218.58 L1112.1 1218.58 L1112.69 1218.58 L1113.28 1218.58 L1113.86 1218.58 L1114.45 1218.58 L1115.04 1218.58 L1115.62 1218.58 L1116.21 1218.58 L1116.8 1218.58 L1117.38 1218.58 L1117.97 1218.58 L1118.55 1218.58 L1119.14 1218.58 L1119.73 1218.58 L1120.31 1218.58 L1120.9 1218.58 L1121.49 1218.58 L1122.07 1218.58 L1122.66 1218.58 L1123.25 1218.58 L1123.83 1218.58 L1124.42 1218.58 L1125.01 1218.58 L1125.59 1218.58 L1126.18 1218.58 L1126.76 1218.58 L1127.35 1218.58 L1127.94 1218.58 L1128.52 1218.58 L1129.11 1218.58 L1129.7 1218.58 L1130.28 1218.58 L1130.87 1218.58 L1131.46 1218.58 L1132.04 1218.58 L1132.63 1218.58 L1133.21 1218.58 L1133.8 1218.58 L1134.39 1218.58 L1134.97 1218.58 L1135.56 1218.58 L1136.15 1218.58 L1136.73 1218.58 L1137.32 1218.58 L1137.91 1218.58 L1138.49 1218.58 L1139.08 1218.58 L1139.67 1218.58 L1140.25 1218.58 L1140.84 1218.58 L1141.42 1218.58 L1142.01 1218.58 L1142.6 1218.58 L1143.18 1218.58 L1143.77 1218.58 L1144.36 1218.58 L1144.94 1218.58 L1145.53 1218.58 L1146.12 1218.58 L1146.7 1218.58 L1147.29 1218.58 L1147.88 1218.58 L1148.46 1218.58 L1149.05 1218.58 L1149.63 1218.58 L1150.22 1218.58 L1150.81 1218.58 L1151.39 1218.58 L1151.98 1218.58 L1152.57 1218.58 L1153.15 1218.58 L1153.74 1218.58 L1154.33 1218.58 L1154.91 1218.58 L1155.5 1218.58 L1156.09 1218.58 L1156.67 1218.58 L1157.26 1218.58 L1157.84 1218.58 L1158.43 1218.58 L1159.02 1218.58 L1159.6 1218.58 L1160.19 1218.58 L1160.78 1218.58 L1161.36 1218.58 L1161.95 1218.58 L1162.54 1218.58 L1163.12 1218.58 L1163.71 1218.58 L1164.29 1218.58 L1164.88 1218.58 L1165.47 1218.58 L1166.05 1218.58 L1166.64 1218.58 L1167.23 1218.58 L1167.81 1218.58 L1168.4 1218.58 L1168.99 1218.58 L1169.57 1218.58 L1170.16 1218.58 L1170.75 1218.58 L1171.33 1218.58 L1171.92 1218.58 L1172.5 1218.58 L1173.09 1218.58 L1173.68 1218.58 L1174.26 1218.58 L1174.85 1218.58 L1175.44 1218.58 L1176.02 1218.58 L1176.61 1218.58 L1177.2 1218.58 L1177.78 1218.58 L1178.37 1218.58 L1178.96 1218.58 L1179.54 1218.58 L1180.13 1218.58 L1180.71 1218.58 L1181.3 1218.58 L1181.89 1218.58 L1182.47 1218.58 L1183.06 1218.58 L1183.65 1218.58 L1184.23 1218.58 L1184.82 1218.58 L1185.41 1218.58 L1185.99 1218.58 L1186.58 1218.58 L1187.16 1218.58 L1187.75 1218.58 L1188.34 1218.58 L1188.92 1218.58 L1189.51 1218.58 L1190.1 1218.58 L1190.68 1218.58 L1191.27 1218.58 L1191.86 1218.58 L1192.44 1218.58 L1193.03 1218.58 L1193.62 1218.58 L1194.2 1218.58 L1194.79 1218.58 L1195.37 1218.58 L1195.96 1218.58 L1196.55 1218.58 L1197.13 1218.58 L1197.72 1218.58 L1198.31 1218.58 L1198.89 1218.58 L1199.48 1218.58 L1200.07 1218.58 L1200.65 1218.58 L1201.24 1218.58 L1201.83 1218.58 L1202.41 1218.58 L1203 1218.58 L1203.58 1218.58 L1204.17 1218.58 L1204.76 1218.58 L1205.34 1218.58 L1205.93 1218.58 L1206.52 1218.58 L1207.1 1218.58 L1207.69 1218.58 L1208.28 1218.58 L1208.86 1218.58 L1209.45 1218.58 L1210.03 1218.58 L1210.62 1218.58 L1211.21 1218.58 L1211.79 1218.58 L1212.38 1218.58 L1212.97 1218.58 L1213.55 1218.58 L1214.14 1218.58 L1214.73 1218.58 L1215.31 1218.58 L1215.9 1218.58 L1216.49 1218.58 L1217.07 1218.58 L1217.66 1218.58 L1218.24 1218.58 L1218.83 1218.58 L1219.42 1218.58 L1220 1218.58 L1220.59 1218.58 L1221.18 1218.58 L1221.76 1218.58 L1222.35 1218.58 L1222.94 1218.58 L1223.52 1218.58 L1224.11 1218.58 L1224.7 1218.58 L1225.28 1218.58 L1225.87 1218.58 L1226.45 1218.58 L1227.04 1218.58 L1227.63 1218.58 L1228.21 1218.58 L1228.8 1218.58 L1229.39 1218.58 L1229.97 1218.58 L1230.56 1218.58 L1231.15 1218.58 L1231.73 1218.58 L1232.32 1218.58 L1232.91 1218.58 L1233.49 1218.58 L1234.08 1218.58 L1234.66 1218.58 L1235.25 1218.58 L1235.84 1218.58 L1236.42 1218.58 L1237.01 1218.58 L1237.6 1218.58 L1238.18 1218.58 L1238.77 1218.58 L1239.36 1218.58 L1239.94 1218.58 L1240.53 1218.58 L1241.11 1218.58 L1241.7 1218.58 L1242.29 1218.58 L1242.87 1218.58 L1243.46 1218.58 L1244.05 1218.58 L1244.63 1218.58 L1245.22 1218.58 L1245.81 1218.58 L1246.39 1218.58 L1246.98 1218.58 L1247.57 1218.58 L1248.15 1218.58 L1248.74 1218.58 L1249.32 1218.58 L1249.91 1218.58 L1250.5 1218.58 L1251.08 1218.58 L1251.67 1218.58 L1252.26 1218.58 L1252.84 1218.58 L1253.43 1218.58 L1254.02 1218.58 L1254.6 1218.58 L1255.19 1218.58 L1255.78 1218.58 L1256.36 1218.58 L1256.95 1218.58 L1257.53 1218.58 L1258.12 1218.58 L1258.71 1218.58 L1259.29 1218.58 L1259.88 1218.58 L1260.47 1218.58 L1261.05 1218.58 L1261.64 1218.58 L1262.23 1218.58 L1262.81 1218.58 L1263.4 1218.58 L1263.98 1218.58 L1264.57 1218.58 L1265.16 1218.58 L1265.74 1218.58 L1266.33 1218.58 L1266.92 1218.58 L1267.5 1218.58 L1268.09 1218.58 L1268.68 1218.58 L1269.26 1218.58 L1269.85 1218.58 L1270.44 1218.58 L1271.02 1218.58 L1271.61 1218.58 L1272.19 1218.58 L1272.78 1218.58 L1273.37 1218.58 L1273.95 1218.58 L1274.54 1218.58 L1275.13 1218.58 L1275.71 1218.58 L1276.3 1218.58 L1276.89 1218.58 L1277.47 1218.58 L1278.06 1218.58 L1278.65 1218.58 L1279.23 1218.58 L1279.82 1218.58 L1280.4 1218.58 L1280.99 1218.58 L1281.58 1218.58 L1282.16 1218.58 L1282.75 1218.58 L1283.34 1218.58 L1283.92 1218.58 L1284.51 1218.58 L1285.1 1218.58 L1285.68 1218.58 L1286.27 1218.58 L1286.86 1218.58 L1287.44 1218.58 L1288.03 1218.58 L1288.61 1218.58 L1289.2 1218.58 L1289.79 1218.58 L1290.37 1218.58 L1290.96 1218.58 L1291.55 1218.58 L1292.13 1218.58 L1292.72 1218.58 L1293.31 1218.58 L1293.89 1218.58 L1294.48 1218.58 L1295.06 1218.58 L1295.65 1218.58 L1296.24 1218.58 L1296.82 1218.58 L1297.41 1218.58 L1298 1218.58 L1298.58 1218.58 L1299.17 1218.58 L1299.76 1218.58 L1300.34 1218.58 L1300.93 1218.58 L1301.52 1218.58 L1302.1 1218.58 L1302.69 1218.58 L1303.27 1218.58 L1303.86 1218.58 L1304.45 1218.58 L1305.03 1218.58 L1305.62 1218.58 L1306.21 1218.58 L1306.79 1218.58 L1307.38 1218.58 L1307.97 1218.58 L1308.55 1218.58 L1309.14 1218.58 L1309.73 1218.58 L1310.31 1218.58 L1310.9 1218.58 L1311.48 1218.58 L1312.07 1218.58 L1312.66 1218.58 L1313.24 1218.58 L1313.83 1218.58 L1314.42 1218.58 L1315 1218.58 L1315.59 1218.58 L1316.18 1218.58 L1316.76 1218.58 L1317.35 1218.58 L1317.93 1218.58 L1318.52 1218.58 L1319.11 1218.58 L1319.69 1218.58 L1320.28 1218.58 L1320.87 1218.58 L1321.45 1218.58 L1322.04 1218.58 L1322.63 1218.58 L1323.21 1218.58 L1323.8 1218.58 L1324.39 1218.58 L1324.97 1218.58 L1325.56 1218.58 L1326.14 1218.58 L1326.73 1218.58 L1327.32 1218.58 L1327.9 1218.58 L1328.49 1218.58 L1329.08 1218.58 L1329.66 1218.58 L1330.25 1218.58 L1330.84 1218.58 L1331.42 1218.58 L1332.01 1218.58 L1332.6 1218.58 L1333.18 1218.58 L1333.77 1218.58 L1334.35 1218.58 L1334.94 1218.58 L1335.53 1218.58 L1336.11 1218.58 L1336.7 1218.58 L1337.29 1218.58 L1337.87 1218.58 L1338.46 1218.58 L1339.05 1218.58 L1339.63 1218.58 L1340.22 1218.58 L1340.8 1218.58 L1341.39 1218.58 L1341.98 1218.58 L1342.56 1218.58 L1343.15 1218.58 L1343.74 1218.58 L1344.32 1218.58 L1344.91 1218.58 L1345.5 1218.58 L1346.08 1218.58 L1346.67 1218.58 L1347.26 1218.58 L1347.84 1218.58 L1348.43 1218.58 L1349.01 1218.58 L1349.6 1218.58 L1350.19 1218.58 L1350.77 1218.58 L1351.36 1218.58 L1351.95 1218.58 L1352.53 1218.58 L1353.12 1218.58 L1353.71 1218.58 L1354.29 1218.58 L1354.88 1218.58 L1355.47 1218.58 L1356.05 1218.58 L1356.64 1218.58 L1357.22 1218.58 L1357.81 1218.58 L1358.4 1218.58 L1358.98 1218.58 L1359.57 1218.58 L1360.16 1218.58 L1360.74 1218.58 L1361.33 1218.58 L1361.92 1218.58 L1362.5 1218.58 L1363.09 1218.58 L1363.68 1218.58 L1364.26 1218.58 L1364.85 1218.58 L1365.43 1218.58 L1366.02 1218.58 L1366.61 1218.58 L1367.19 1218.58 L1367.78 1218.58 L1368.37 1218.58 L1368.95 1218.58 L1369.54 1218.58 L1370.13 1218.58 L1370.71 1218.58 L1371.3 1218.58 L1371.88 1218.58 L1372.47 1218.58 L1373.06 1218.58 L1373.64 1218.58 L1374.23 1218.58 L1374.82 1218.58 L1375.4 1218.58 L1375.99 1218.58 L1376.58 1218.58 L1377.16 1218.58 L1377.75 1218.58 L1378.34 1218.58 L1378.92 1218.58 L1379.51 1218.58 L1380.09 1218.58 L1380.68 1218.58 L1381.27 1218.58 L1381.85 1218.58 L1382.44 1218.58 L1383.03 1218.58 L1383.61 1218.58 L1384.2 1218.58 L1384.79 1218.58 L1385.37 1218.58 L1385.96 1218.58 L1386.55 1218.58 L1387.13 1218.58 L1387.72 1218.58 L1388.3 1218.58 L1388.89 1218.58 L1389.48 1218.58 L1390.06 1218.58 L1390.65 1218.58 L1391.24 1218.58 L1391.82 1218.58 L1392.41 1218.58 L1393 1218.58 L1393.58 1218.58 L1394.17 1218.58 L1394.75 1218.58 L1395.34 1218.58 L1395.93 1218.58 L1396.51 1218.58 L1397.1 1218.58 L1397.69 1218.58 L1398.27 1218.58 L1398.86 1218.58 L1399.45 1218.58 L1400.03 1218.58 L1400.62 1218.58 L1401.21 1218.58 L1401.79 1218.58 L1402.38 1218.58 L1402.96 1218.58 L1403.55 1218.58 L1404.14 1218.58 L1404.72 1218.58 L1405.31 1218.58 L1405.9 1218.58 L1406.48 1218.58 L1407.07 1218.58 L1407.66 1218.58 L1408.24 1218.58 L1408.83 1218.58 L1409.42 1218.58 L1410 1218.58 L1410.59 1218.58 L1411.17 1218.58 L1411.76 1218.58 L1412.35 1218.58 L1412.93 1218.58 L1413.52 1218.58 L1414.11 1218.58 L1414.69 1218.58 L1415.28 1218.58 L1415.87 1218.58 L1416.45 1218.58 L1417.04 1218.58 L1417.63 1218.58 L1418.21 1218.58 L1418.8 1218.58 L1419.38 1218.58 L1419.97 1218.58 L1420.56 1218.58 L1421.14 1218.58 L1421.73 1218.58 L1422.32 1218.58 L1422.9 1218.58 L1423.49 1218.58 L1424.08 1218.58 L1424.66 1218.58 L1425.25 1218.58 L1425.83 1218.58 L1426.42 1218.58 L1427.01 1218.58 L1427.59 1218.58 L1428.18 1218.58 L1428.77 1218.58 L1429.35 1218.58 L1429.94 1218.58 L1430.53 1218.58 L1431.11 1218.58 L1431.7 1218.58 L1432.29 1218.58 L1432.87 1218.58 L1433.46 1218.58 L1434.04 1218.58 L1434.63 1218.58 L1435.22 1218.58 L1435.8 1218.58 L1436.39 1218.58 L1436.98 1218.58 L1437.56 1218.58 L1438.15 1218.58 L1438.74 1218.58 L1439.32 1218.58 L1439.91 1218.58 L1440.5 1218.58 L1441.08 1218.58 L1441.67 1218.58 L1442.25 1218.58 L1442.84 1218.58 L1443.43 1218.58 L1444.01 1218.58 L1444.6 1218.58 L1445.19 1218.58 L1445.77 1218.58 L1446.36 1218.58 L1446.95 1218.58 L1447.53 1218.58 L1448.12 1218.58 L1448.7 1218.58 L1449.29 1218.58 L1449.88 1218.58 L1450.46 1218.58 L1451.05 1218.58 L1451.64 1218.58 L1452.22 1218.58 L1452.81 1218.58 L1453.4 1218.58 L1453.98 1218.58 L1454.57 1218.58 L1455.16 1218.58 L1455.74 1218.58 L1456.33 1218.58 L1456.91 1218.58 L1457.5 1218.58 L1458.09 1218.58 L1458.67 1218.58 L1459.26 1218.58 L1459.85 1218.58 L1460.43 1218.58 L1461.02 1218.58 L1461.61 1218.58 L1462.19 1218.58 L1462.78 1218.58 L1463.37 1218.58 L1463.95 1218.58 L1464.54 1218.58 L1465.12 1218.58 L1465.71 1218.58 L1466.3 1218.58 L1466.88 1218.58 L1467.47 1218.58 L1468.06 1218.58 L1468.64 1218.58 L1469.23 1218.58 L1469.82 1218.58 L1470.4 1218.58 L1470.99 1218.58 L1471.57 1218.58 L1472.16 1218.58 L1472.75 1218.58 L1473.33 1218.58 L1473.92 1218.58 L1474.51 1218.58 L1475.09 1218.58 L1475.68 1218.58 L1476.27 1218.58 L1476.85 1218.58 L1477.44 1218.58 L1478.03 1218.58 L1478.61 1218.58 L1479.2 1218.58 L1479.78 1218.58 L1480.37 1218.58 L1480.96 1218.58 L1481.54 1218.58 L1482.13 1218.58 L1482.72 1218.58 L1483.3 1218.58 L1483.89 1218.58 L1484.48 1218.58 L1485.06 1218.58 L1485.65 1218.58 L1486.24 1218.58 L1486.82 1218.58 L1487.41 1218.58 L1487.99 1218.58 L1488.58 1218.58 L1489.17 1218.58 L1489.75 1218.58 L1490.34 1218.58 L1490.93 1218.58 L1491.51 1218.58 L1492.1 1218.58 L1492.69 1218.58 L1493.27 1218.58 L1493.86 1218.58 L1494.45 1218.58 L1495.03 1218.58 L1495.62 1218.58 L1496.2 1218.58 L1496.79 1218.58 L1497.38 1218.58 L1497.96 1218.58 L1498.55 1218.58 L1499.14 1218.58 L1499.72 1218.58 L1500.31 1218.58 L1500.9 1218.58 L1501.48 1218.58 L1502.07 1218.58 L1502.65 1218.58 L1503.24 1218.58 L1503.83 1218.58 L1504.41 1218.58 L1505 1218.58 L1505.59 1218.58 L1506.17 1218.58 L1506.76 1218.58 L1507.35 1218.58 L1507.93 1218.58 L1508.52 1218.58 L1509.11 1218.58 L1509.69 1218.58 L1510.28 1218.58 L1510.86 1218.58 L1511.45 1218.58 L1512.04 1218.58 L1512.62 1218.58 L1513.21 1218.58 L1513.8 1218.58 L1514.38 1218.58 L1514.97 1218.58 L1515.56 1218.58 L1516.14 1218.58 L1516.73 1218.58 L1517.32 1218.58 L1517.9 1218.58 L1518.49 1218.58 L1519.07 1218.58 L1519.66 1218.58 L1520.25 1218.58 L1520.83 1218.58 L1521.42 1218.58 L1522.01 1218.58 L1522.59 1218.58 L1523.18 1218.58 L1523.77 1218.58 L1524.35 1218.58 L1524.94 1218.58 L1525.52 1218.58 L1526.11 1218.58 L1526.7 1218.58 L1527.28 1218.58 L1527.87 1218.58 L1528.46 1218.58 L1529.04 1218.58 L1529.63 1218.58 L1530.22 1218.58 L1530.8 1218.58 L1531.39 1218.58 L1531.98 1218.58 L1532.56 1218.58 L1533.15 1218.58 L1533.73 1218.58 L1534.32 1218.58 L1534.91 1218.58 L1535.49 1218.58 L1536.08 1218.58 L1536.67 1218.58 L1537.25 1218.58 L1537.84 1218.58 L1538.43 1218.58 L1539.01 1218.58 L1539.6 1218.58 L1540.19 1218.58 L1540.77 1218.58 L1541.36 1218.58 L1541.94 1218.58 L1542.53 1218.58 L1543.12 1218.58 L1543.7 1218.58 L1544.29 1218.58 L1544.88 1218.58 L1545.46 1218.58 L1546.05 1218.58 L1546.64 1218.58 L1547.22 1218.58 L1547.81 1218.58 L1548.4 1218.58 L1548.98 1218.58 L1549.57 1218.58 L1550.15 1218.58 L1550.74 1218.58 L1551.33 1218.58 L1551.91 1218.58 L1552.5 1218.58 L1553.09 1218.58 L1553.67 1218.58 L1554.26 1218.58 L1554.85 1218.58 L1555.43 1218.58 L1556.02 1218.58 L1556.6 1218.58 L1557.19 1218.58 L1557.78 1218.58 L1558.36 1218.58 L1558.95 1218.58 L1559.54 1218.58 L1560.12 1218.58 L1560.71 1218.58 L1561.3 1218.58 L1561.88 1218.58 L1562.47 1218.58 L1563.06 1218.58 L1563.64 1218.58 L1564.23 1218.58 L1564.81 1218.58 L1565.4 1218.58 L1565.99 1218.58 L1566.57 1218.58 L1567.16 1218.58 L1567.75 1218.58 L1568.33 1218.58 L1568.92 1218.58 L1569.51 1218.58 L1570.09 1218.58 L1570.68 1218.58 L1571.27 1218.58 L1571.85 1218.58 L1572.44 1218.58 L1573.02 1218.58 L1573.61 1218.58 L1574.2 1218.58 L1574.78 1218.58 L1575.37 1218.58 L1575.96 1218.58 L1576.54 1218.58 L1577.13 1218.58 L1577.72 1218.58 L1578.3 1218.58 L1578.89 1218.58 L1579.47 1218.58 L1580.06 1218.58 L1580.65 1218.58 L1581.23 1218.58 L1581.82 1218.58 L1582.41 1218.58 L1582.99 1218.58 L1583.58 1218.58 L1584.17 1218.58 L1584.75 1218.58 L1585.34 1218.58 L1585.93 1218.58 L1586.51 1218.58 L1587.1 1218.58 L1587.68 1218.58 L1588.27 1218.58 L1588.86 1218.58 L1589.44 1218.58 L1590.03 1218.58 L1590.62 1218.58 L1591.2 1218.58 L1591.79 1218.58 L1592.38 1218.58 L1592.96 1218.58 L1593.55 1218.58 L1594.14 1218.58 L1594.72 1218.58 L1595.31 1218.58 L1595.89 1218.58 L1596.48 1218.58 L1597.07 1218.58 L1597.65 1218.58 L1598.24 1218.58 L1598.83 1218.58 L1599.41 1218.58 L1600 1218.58 L1600.59 1218.58 L1601.17 1218.58 L1601.76 1218.58 L1602.34 1218.58 L1602.93 1218.58 L1603.52 1218.58 L1604.1 1218.58 L1604.69 1218.58 L1605.28 1218.58 L1605.86 1218.58 L1606.45 1218.58 L1607.04 1218.58 L1607.62 1218.58 L1608.21 1218.58 L1608.8 1218.58 L1609.38 1218.58 L1609.97 1218.58 L1610.55 1218.58 L1611.14 1218.58 L1611.73 1218.58 L1612.31 1218.58 L1612.9 1218.58 L1613.49 1218.58 L1614.07 1218.58 L1614.66 1218.58 L1615.25 1218.58 L1615.83 1218.58 L1616.42 1218.58 L1617.01 1218.58 L1617.59 1218.58 L1618.18 1218.58 L1618.76 1218.58 L1619.35 1218.58 L1619.94 1218.58 L1620.52 1218.58 L1621.11 1218.58 L1621.7 1218.58 L1622.28 1218.58 L1622.87 1218.58 L1623.46 1218.58 L1624.04 1218.58 L1624.63 1218.58 L1625.22 1218.58 L1625.8 1218.58 L1626.39 1218.58 L1626.97 1218.58 L1627.56 1218.58 L1628.15 1218.58 L1628.73 1218.58 L1629.32 1218.58 L1629.91 1218.58 L1630.49 1218.58 L1631.08 1218.58 L1631.67 1218.58 L1632.25 1218.58 L1632.84 1218.58 L1633.42 1218.58 L1634.01 1218.58 L1634.6 1218.58 L1635.18 1218.58 L1635.77 1218.58 L1636.36 1218.58 L1636.94 1218.58 L1637.53 1218.58 L1638.12 1218.58 L1638.7 1218.58 L1639.29 1218.58 L1639.88 1218.58 L1640.46 1218.58 L1641.05 1218.58 L1641.63 1218.58 L1642.22 1218.58 L1642.81 1218.58 L1643.39 1218.58 L1643.98 1218.58 L1644.57 1218.58 L1645.15 1218.58 L1645.74 1218.58 L1646.33 1218.58 L1646.91 1218.58 L1647.5 1218.58 L1648.09 1218.58 L1648.67 1218.58 L1649.26 1218.58 L1649.84 1218.58 L1650.43 1218.58 L1651.02 1218.58 L1651.6 1218.58 L1652.19 1218.58 L1652.78 1218.58 L1653.36 1218.58 L1653.95 1218.58 L1654.54 1218.58 L1655.12 1218.58 L1655.71 1218.58 L1656.29 1218.58 L1656.88 1218.58 L1657.47 1218.58 L1658.05 1218.58 L1658.64 1218.58 L1659.23 1218.58 L1659.81 1218.58 L1660.4 1218.58 L1660.99 1218.58 L1661.57 1218.58 L1662.16 1218.58 L1662.75 1218.58 L1663.33 1218.58 L1663.92 1218.58 L1664.5 1218.58 L1665.09 1218.58 L1665.68 1218.58 L1666.26 1218.58 L1666.85 1218.58 L1667.44 1218.58 L1668.02 1218.58 L1668.61 1218.58 L1669.2 1218.58 L1669.78 1218.58 L1670.37 1218.58 L1670.96 1218.58 L1671.54 1218.58 L1672.13 1218.58 L1672.71 1218.58 L1673.3 1218.58 L1673.89 1218.58 L1674.47 1218.58 L1675.06 1218.58 L1675.65 1218.58 L1676.23 1218.58 L1676.82 1218.58 L1677.41 1218.58 L1677.99 1218.58 L1678.58 1218.58 L1679.17 1218.58 L1679.75 1218.58 L1680.34 1218.58 L1680.92 1218.58 L1681.51 1218.58 L1682.1 1218.58 L1682.68 1218.58 L1683.27 1218.58 L1683.86 1218.58 L1684.44 1218.58 L1685.03 1218.58 L1685.62 1218.58 L1686.2 1218.58 L1686.79 1218.58 L1687.37 1218.58 L1687.96 1218.58 L1688.55 1218.58 L1689.13 1218.58 L1689.72 1218.58 L1690.31 1218.58 L1690.89 1218.58 L1691.48 1218.58 L1692.07 1218.58 L1692.65 1218.58 L1693.24 1218.58 L1693.83 1218.58 L1694.41 1218.58 L1695 1218.58 L1695.58 1218.58 L1696.17 1218.58 L1696.76 1218.58 L1697.34 1218.58 L1697.93 1218.58 L1698.52 1218.58 L1699.1 1218.58 L1699.69 1218.58 L1700.28 1218.58 L1700.86 1218.58 L1701.45 1218.58 L1702.04 1218.58 L1702.62 1218.58 L1703.21 1218.58 L1703.79 1218.58 L1704.38 1218.58 L1704.97 1218.58 L1705.55 1218.58 L1706.14 1218.58 L1706.73 1218.58 L1707.31 1218.58 L1707.9 1218.58 L1708.49 1218.58 L1709.07 1218.58 L1709.66 1218.58 L1710.24 1218.58 L1710.83 1218.58 L1711.42 1218.58 L1712 1218.58 L1712.59 1218.58 L1713.18 1218.58 L1713.76 1218.58 L1714.35 1218.58 L1714.94 1218.58 L1715.52 1218.58 L1716.11 1218.58 L1716.7 1218.58 L1717.28 1218.58 L1717.87 1218.58 L1718.45 1218.58 L1719.04 1218.58 L1719.63 1218.58 L1720.21 1218.58 L1720.8 1218.58 L1721.39 1218.58 L1721.97 1218.58 L1722.56 1218.58 L1723.15 1218.58 L1723.73 1218.58 L1724.32 1218.58 L1724.91 1218.58 L1725.49 1218.58 L1726.08 1218.58 L1726.66 1218.58 L1727.25 1218.58 L1727.84 1218.58 L1728.42 1218.58 L1729.01 1218.58 L1729.6 1218.58 L1730.18 1218.58 L1730.77 1218.58 L1731.36 1218.58 L1731.94 1218.58 L1732.53 1218.58 L1733.11 1218.58 L1733.7 1218.58 L1734.29 1218.58 L1734.87 1218.58 L1735.46 1218.58 L1736.05 1218.58 L1736.63 1218.58 L1737.22 1218.58 L1737.81 1218.58 L1738.39 1218.58 L1738.98 1218.58 L1739.57 1218.58 L1740.15 1218.58 L1740.74 1218.58 L1741.32 1218.58 L1741.91 1218.58 L1742.5 1218.58 L1743.08 1218.58 L1743.67 1218.58 L1744.26 1218.58 L1744.84 1218.58 L1745.43 1218.58 L1746.02 1218.58 L1746.6 1218.58 L1747.19 1218.58 L1747.78 1218.58 L1748.36 1218.58 L1748.95 1218.58 L1749.53 1218.58 L1750.12 1218.58 L1750.71 1218.58 L1751.29 1218.58 L1751.88 1218.58 L1752.47 1218.58 L1753.05 1218.58 L1753.64 1218.58 L1754.23 1218.58 L1754.81 1218.58 L1755.4 1218.58 L1755.99 1218.58 L1756.57 1218.58 L1757.16 1218.58 L1757.74 1218.58 L1758.33 1218.58 L1758.92 1218.58 L1759.5 1218.58 L1760.09 1218.58 L1760.68 1218.58 L1761.26 1218.58 L1761.85 1218.58 L1762.44 1218.58 L1763.02 1218.58 L1763.61 1218.58 L1764.19 1218.58 L1764.78 1218.58 L1765.37 1218.58 L1765.95 1218.58 L1766.54 1218.58 L1767.13 1218.58 L1767.71 1218.58 L1768.3 1218.58 L1768.89 1218.58 L1769.47 1218.58 L1770.06 1218.58 L1770.65 1218.58 L1771.23 1218.58 L1771.82 1218.58 L1772.4 1218.58 L1772.99 1218.58 L1773.58 1218.58 L1774.16 1218.58 L1774.75 1218.58 L1775.34 1218.58 L1775.92 1218.58 L1776.51 1218.58 L1777.1 1218.58 L1777.68 1218.58 L1778.27 1218.58 L1778.86 1218.58 L1779.44 1218.58 L1780.03 1218.58 L1780.61 1218.58 L1781.2 1218.58 L1781.79 1218.58 L1782.37 1218.58 L1782.96 1218.58 L1783.55 1218.58 L1784.13 1218.58 L1784.72 1218.58 L1785.31 1218.58 L1785.89 1218.58 L1786.48 1218.58 L1787.06 1218.58 L1787.65 1218.58 L1788.24 1218.58 L1788.82 1218.58 L1789.41 1218.58 L1790 1218.58 L1790.58 1218.58 L1791.17 1218.58 L1791.76 1218.58 L1792.34 1218.58 L1792.93 1218.58 L1793.52 1218.58 L1794.1 1218.58 L1794.69 1218.58 L1795.27 1218.58 L1795.86 1218.58 L1796.45 1218.58 L1797.03 1218.58 L1797.62 1218.58 L1798.21 1218.58 L1798.79 1218.58 L1799.38 1218.58 L1799.97 1218.58 L1800.55 1218.58 L1801.14 1218.58 L1801.73 1218.58 L1802.31 1218.58 L1802.9 1218.58 L1803.48 1218.58 L1804.07 1218.58 L1804.66 1218.58 L1805.24 1218.58 L1805.83 1218.58 L1806.42 1218.58 L1807 1218.58 L1807.59 1218.58 L1808.18 1218.58 L1808.76 1218.58 L1809.35 1218.58 L1809.94 1218.58 L1810.52 1218.58 L1811.11 1218.58 L1811.69 1218.58 L1812.28 1218.58 L1812.87 1218.58 L1813.45 1218.58 L1814.04 1218.58 L1814.63 1218.58 L1815.21 1218.58 L1815.8 1218.58 L1816.39 1218.58 L1816.97 1218.58 L1817.56 1218.58 L1818.14 1218.58 L1818.73 1218.58 L1819.32 1218.58 L1819.9 1218.58 L1820.49 1218.58 L1821.08 1218.58 L1821.66 1218.58 L1822.25 1218.58 L1822.84 1218.58 L1823.42 1218.58 L1824.01 1218.58 L1824.6 1218.58 L1825.18 1218.58 L1825.77 1218.58 L1826.35 1218.58 L1826.94 1218.58 L1827.53 1218.58 L1828.11 1218.58 L1828.7 1218.58 L1829.29 1218.58 L1829.87 1218.58 L1830.46 1218.58 L1831.05 1218.58 L1831.63 1218.58 L1832.22 1218.58 L1832.81 1218.58 L1833.39 1218.58 L1833.98 1218.58 L1834.56 1218.58 L1835.15 1218.58 L1835.74 1218.58 L1836.32 1218.58 L1836.91 1218.58 L1837.5 1218.58 L1838.08 1218.58 L1838.67 1218.58 L1839.26 1218.58 L1839.84 1218.58 L1840.43 1218.58 L1841.01 1218.58 L1841.6 1218.58 L1842.19 1218.58 L1842.77 1218.58 L1843.36 1218.58 L1843.95 1218.58 L1844.53 1218.58 L1845.12 1218.58 L1845.71 1218.58 L1846.29 1218.58 L1846.88 1218.58 L1847.47 1218.58 L1848.05 1218.58 L1848.64 1218.58 L1849.22 1218.58 L1849.81 1218.58 L1850.4 1218.58 L1850.98 1218.58 L1851.57 1218.58 L1852.16 1218.58 L1852.74 1218.58 L1853.33 1218.58 L1853.92 1218.58 L1854.5 1218.58 L1855.09 1218.58 L1855.68 1218.58 L1856.26 1218.58 L1856.85 1218.58 L1857.43 1218.58 L1858.02 1218.58 L1858.61 1218.58 L1859.19 1218.58 L1859.78 1218.58 L1860.37 1218.58 L1860.95 1218.58 L1861.54 1218.58 L1862.13 1218.58 L1862.71 1218.58 L1863.3 1218.58 L1863.88 1218.58 L1864.47 1218.58 L1865.06 1218.58 L1865.64 1218.58 L1866.23 1218.58 L1866.82 1218.58 L1867.4 1218.58 L1867.99 1218.58 L1868.58 1218.58 L1869.16 1218.58 L1869.75 1218.58 L1870.34 1218.58 L1870.92 1218.58 L1871.51 1218.58 L1872.09 1218.58 L1872.68 1218.58 L1873.27 1218.58 L1873.85 1218.58 L1874.44 1218.58 L1875.03 1218.58 L1875.61 1218.58 L1876.2 1218.58 L1876.79 1218.58 L1877.37 1218.58 L1877.96 1218.58 L1878.55 1218.58 L1879.13 1218.58 L1879.72 1218.58 L1880.3 1218.58 L1880.89 1218.58 L1881.48 1218.58 L1882.06 1218.58 L1882.65 1218.58 L1883.24 1218.58 L1883.82 1218.58 L1884.41 1218.58 L1885 1218.58 L1885.58 1218.58 L1886.17 1218.58 L1886.76 1218.58 L1887.34 1218.58 L1887.93 1218.58 L1888.51 1218.58 L1889.1 1218.58 L1889.69 1218.58 L1890.27 1218.58 L1890.86 1218.58 L1891.45 1218.58 L1892.03 1218.58 L1892.62 1218.58 L1893.21 1218.58 L1893.79 1218.58 L1894.38 1218.58 L1894.96 1218.58 L1895.55 1218.58 L1896.14 1218.58 L1896.72 1218.58 L1897.31 1218.58 L1897.9 1218.58 L1898.48 1218.58 L1899.07 1218.58 L1899.66 1218.58 L1900.24 1218.58 L1900.83 1218.58 L1901.42 1218.58 L1902 1218.58 L1902.59 1218.58 L1903.17 1218.58 L1903.76 1218.58 L1904.35 1218.58 L1904.93 1218.58 L1905.52 1218.58 L1906.11 1218.58 L1906.69 1218.58 L1907.28 1218.58 L1907.87 1218.58 L1908.45 1218.58 L1909.04 1218.58 L1909.63 1218.58 L1910.21 1218.58 L1910.8 1218.58 L1911.38 1218.58 L1911.97 1218.58 L1912.56 1218.58 L1913.14 1218.58 L1913.73 1218.58 L1914.32 1218.58 L1914.9 1218.58 L1915.49 1218.58 L1916.08 1218.58 L1916.66 1218.58 L1917.25 1218.58 L1917.83 1218.58 L1918.42 1218.58 L1919.01 1218.58 L1919.59 1218.58 L1920.18 1218.58 L1920.77 1218.58 L1921.35 1218.58 L1921.94 1218.58 L1922.53 1218.58 L1923.11 1218.58 L1923.7 1218.58 L1924.29 1218.58 L1924.87 1218.58 L1925.46 1218.58 L1926.04 1218.58 L1926.63 1218.58 L1927.22 1218.58 L1927.8 1218.58 L1928.39 1218.58 L1928.98 1218.58 L1929.56 1218.58 L1930.15 1218.58 L1930.74 1218.58 L1931.32 1218.58 L1931.91 1218.58 L1932.5 1218.58 L1933.08 1218.58 L1933.67 1218.58 L1934.25 1218.58 L1934.84 1218.58 L1935.43 1218.58 L1936.01 1218.58 L1936.6 1218.58 L1937.19 1218.58 L1937.77 1218.58 L1938.36 1218.58 L1938.95 1218.58 L1939.53 1218.58 L1940.12 1218.58 L1940.71 1218.58 L1941.29 1218.58 L1941.88 1218.58 L1942.46 1218.58 L1943.05 1218.58 L1943.64 1218.58 L1944.22 1218.58 L1944.81 1218.58 L1945.4 1218.58 L1945.98 1218.58 L1946.57 1218.58 L1947.16 1218.58 L1947.74 1218.58 L1948.33 1218.58 L1948.91 1218.58 L1949.5 1218.58 L1950.09 1218.58 L1950.67 1218.58 L1951.26 1218.58 L1951.85 1218.58 L1952.43 1218.58 L1953.02 1218.58 L1953.61 1218.58 L1954.19 1218.58 L1954.78 1218.58 L1955.37 1218.58 L1955.95 1218.58 L1956.54 1218.58 L1957.12 1218.58 L1957.71 1218.58 L1958.3 1218.58 L1958.88 1218.58 L1959.47 1218.58 L1960.06 1218.58 L1960.64 1218.58 L1961.23 1218.58 L1961.82 1218.58 L1962.4 1218.58 L1962.99 1218.58 L1963.58 1218.58 L1964.16 1218.58 L1964.75 1218.58 L1965.33 1218.58 L1965.92 1218.58 L1966.51 1218.58 L1967.09 1218.58 L1967.68 1218.58 L1968.27 1218.58 L1968.85 1218.58 L1969.44 1218.58 L1970.03 1218.58 L1970.61 1218.58 L1971.2 1218.58 L1971.78 1218.58 L1972.37 1218.58 L1972.96 1218.58 L1973.54 1218.58 L1974.13 1218.58 L1974.72 1218.58 L1975.3 1218.58 L1975.89 1218.58 L1976.48 1218.58 L1977.06 1218.58 L1977.65 1218.58 L1978.24 1218.58 L1978.82 1218.58 L1979.41 1218.58 L1979.99 1218.58 L1980.58 1218.58 L1981.17 1218.58 L1981.75 1218.58 L1982.34 1218.58 L1982.93 1218.58 L1983.51 1218.58 L1984.1 1218.58 L1984.69 1218.58 L1985.27 1218.58 L1985.86 1218.58 L1986.45 1218.58 L1987.03 1218.58 L1987.62 1218.58 L1988.2 1218.58 L1988.79 1218.58 L1989.38 1218.58 L1989.96 1218.58 L1990.55 1218.58 L1991.14 1218.58 L1991.72 1218.58 L1992.31 1218.58 L1992.9 1218.58 L1993.48 1218.58 L1994.07 1218.58 L1994.65 1218.58 L1995.24 1218.58 L1995.83 1218.58 L1996.41 1218.58 L1997 1218.58 L1997.59 1218.58 L1998.17 1218.58 L1998.76 1218.58 L1999.35 1218.58 L1999.93 1218.58 L2000.52 1218.58 L2001.11 1218.58 L2001.69 1218.58 L2002.28 1218.58 L2002.86 1218.58 L2003.45 1218.58 L2004.04 1218.58 L2004.62 1218.58 L2005.21 1218.58 L2005.8 1218.58 L2006.38 1218.58 L2006.97 1218.58 L2007.56 1218.58 L2008.14 1218.58 L2008.73 1218.58 L2009.32 1218.58 L2009.9 1218.58 L2010.49 1218.58 L2011.07 1218.58 L2011.66 1218.58 L2012.25 1218.58 L2012.83 1218.58 L2013.42 1218.58 L2014.01 1218.58 L2014.59 1218.58 L2015.18 1218.58 L2015.77 1218.58 L2016.35 1218.58 L2016.94 1218.58 L2017.53 1218.58 L2018.11 1218.58 L2018.7 1218.58 L2019.28 1218.58 L2019.87 1218.58 L2020.46 1218.58 L2021.04 1218.58 L2021.63 1218.58 L2022.22 1218.58 L2022.8 1218.58 L2023.39 1218.58 L2023.98 1218.58 L2024.56 1218.58 L2025.15 1218.58 L2025.73 1218.58 L2026.32 1218.58 L2026.91 1218.58 L2027.49 1218.58 L2028.08 1218.58 L2028.67 1218.58 L2029.25 1218.58 L2029.84 1218.58 L2030.43 1218.58 L2031.01 1218.58 L2031.6 1218.58 L2032.19 1218.58 L2032.77 1218.58 L2033.36 1218.58 L2033.94 1218.58 L2034.53 1218.58 L2035.12 1218.58 L2035.7 1218.58 L2036.29 1218.58 L2036.88 1218.58 L2037.46 1218.58 L2038.05 1218.58 L2038.64 1218.58 L2039.22 1218.58 L2039.81 1218.58 L2040.4 1218.58 L2040.98 1218.58 L2041.57 1218.58 L2042.15 1218.58 L2042.74 1218.58 L2043.33 1218.58 L2043.91 1218.58 L2044.5 1218.58 L2045.09 1218.58 L2045.67 1218.58 L2046.26 1218.58 L2046.85 1218.58 L2047.43 1218.58 L2048.02 1218.58 L2048.6 1218.58 L2049.19 1218.58 L2049.78 1218.58 L2050.36 1218.58 L2050.95 1218.58 L2051.54 1218.58 L2052.12 1218.58 L2052.71 1218.58 L2053.3 1218.58 L2053.88 1218.58 L2054.47 1218.58 L2055.06 1218.58 L2055.64 1218.58 L2056.23 1218.58 L2056.81 1218.58 L2057.4 1218.58 L2057.99 1218.58 L2058.57 1218.58 L2059.16 1218.58 L2059.75 1218.58 L2060.33 1218.58 L2060.92 1218.58 L2061.51 1218.58 L2062.09 1218.58 L2062.68 1218.58 L2063.27 1218.58 L2063.85 1218.58 L2064.44 1218.58 L2065.02 1218.58 L2065.61 1218.58 L2066.2 1218.58 L2066.78 1218.58 L2067.37 1218.58 L2067.96 1218.58 L2068.54 1218.58 L2069.13 1218.58 L2069.72 1218.58 L2070.3 1218.58 L2070.89 1218.58 L2071.48 1218.58 L2072.06 1218.58 L2072.65 1218.58 L2073.23 1218.58 L2073.82 1218.58 L2074.41 1218.58 L2074.99 1218.58 L2075.58 1218.58 L2076.17 1218.58 L2076.75 1218.58 L2077.34 1218.58 L2077.93 1218.58 L2078.51 1218.58 L2079.1 1218.58 L2079.68 1218.58 L2080.27 1218.58 L2080.86 1218.58 L2081.44 1218.58 L2082.03 1218.58 L2082.62 1218.58 L2083.2 1218.58 L2083.79 1218.58 L2084.38 1218.58 L2084.96 1218.58 L2085.55 1218.58 L2086.14 1218.58 L2086.72 1218.58 L2087.31 1218.58 L2087.89 1218.58 L2088.48 1218.58 L2089.07 1218.58 L2089.65 1218.58 L2090.24 1218.58 L2090.83 1218.58 L2091.41 1218.58 L2092 1218.58 L2092.59 1218.58 L2093.17 1218.58 L2093.76 1218.58 L2094.35 1218.58 L2094.93 1218.58 L2095.52 1218.58 L2096.1 1218.58 L2096.69 1218.58 L2097.28 1218.58 L2097.86 1218.58 L2098.45 1218.58 L2099.04 1218.58 L2099.62 1218.58 L2100.21 1218.58 L2100.8 1218.58 L2101.38 1218.58 L2101.97 1218.58 L2102.55 1218.58 L2103.14 1218.58 L2103.73 1218.58 L2104.31 1218.58 L2104.9 1218.58 L2105.49 1218.58 L2106.07 1218.58 L2106.66 1218.58 L2107.25 1218.58 L2107.83 1218.58 L2108.42 1218.58 L2109.01 1218.58 L2109.59 1218.58 L2110.18 1218.58 L2110.76 1218.58 L2111.35 1218.58 L2111.94 1218.58 L2112.52 1218.58 L2113.11 1218.58 L2113.7 1218.58 L2114.28 1218.58 L2114.87 1218.58 L2115.46 1218.58 L2116.04 1218.58 L2116.63 1218.58 L2117.22 1218.58 L2117.8 1218.58 L2118.39 1218.58 L2118.97 1218.58 L2119.56 1218.58 L2120.15 1218.58 L2120.73 1218.58 L2121.32 1218.58 L2121.91 1218.58 L2122.49 1218.58 L2123.08 1218.58 L2123.67 1218.58 L2124.25 1218.58 L2124.84 1218.58 L2125.42 1218.58 L2126.01 1218.58 L2126.6 1218.58 L2127.18 1218.58 L2127.77 1218.58 L2128.36 1218.58 L2128.94 1218.58 L2129.53 1218.58 L2130.12 1218.58 L2130.7 1218.58 L2131.29 1218.58 L2131.88 1218.58 L2132.46 1218.58 L2133.05 1218.58 L2133.63 1218.58 L2134.22 1218.58 L2134.81 1218.58 L2135.39 1218.58 L2135.98 1218.58 L2136.57 1218.58 L2137.15 1218.58 L2137.74 1218.58 L2138.33 1218.58 L2138.91 1218.58 L2139.5 1218.58 L2140.09 1218.58 L2140.67 1218.58 L2141.26 1218.58 L2141.84 1218.58 L2142.43 1218.58 L2143.02 1218.58 L2143.6 1218.58 L2144.19 1218.58 L2144.78 1218.58 L2145.36 1218.58 L2145.95 1218.58 L2146.54 1218.58 L2147.12 1218.58 L2147.71 1218.58 L2148.3 1218.58 L2148.88 1218.58 L2149.47 1218.58 L2150.05 1218.58 L2150.64 1218.58 L2151.23 1218.58 L2151.81 1218.58 L2152.4 1218.58 L2152.99 1218.58 L2153.57 1218.58 L2154.16 1218.58 L2154.75 1218.58 L2155.33 1218.58 L2155.92 1218.58 L2156.5 1218.58 L2157.09 1218.58 L2157.68 1218.58 L2158.26 1218.58 L2158.26 1218.42 L2157.68 1218.42 L2157.09 1218.42 L2156.5 1218.42 L2155.92 1218.42 L2155.33 1218.42 L2154.75 1218.42 L2154.16 1218.42 L2153.57 1218.42 L2152.99 1218.42 L2152.4 1218.42 L2151.81 1218.42 L2151.23 1218.42 L2150.64 1218.42 L2150.05 1218.42 L2149.47 1218.42 L2148.88 1218.42 L2148.3 1218.42 L2147.71 1218.42 L2147.12 1218.42 L2146.54 1218.42 L2145.95 1218.42 L2145.36 1218.42 L2144.78 1218.42 L2144.19 1218.42 L2143.6 1218.42 L2143.02 1218.42 L2142.43 1218.42 L2141.84 1218.42 L2141.26 1218.42 L2140.67 1218.42 L2140.09 1218.42 L2139.5 1218.42 L2138.91 1218.42 L2138.33 1218.42 L2137.74 1218.42 L2137.15 1218.42 L2136.57 1218.42 L2135.98 1218.42 L2135.39 1218.42 L2134.81 1218.42 L2134.22 1218.42 L2133.63 1218.42 L2133.05 1218.42 L2132.46 1218.42 L2131.88 1218.42 L2131.29 1218.42 L2130.7 1218.42 L2130.12 1218.42 L2129.53 1218.42 L2128.94 1218.42 L2128.36 1218.42 L2127.77 1218.42 L2127.18 1218.42 L2126.6 1218.42 L2126.01 1218.42 L2125.42 1218.42 L2124.84 1218.42 L2124.25 1218.42 L2123.67 1218.42 L2123.08 1218.42 L2122.49 1218.42 L2121.91 1218.42 L2121.32 1218.42 L2120.73 1218.42 L2120.15 1218.42 L2119.56 1218.42 L2118.97 1218.42 L2118.39 1218.42 L2117.8 1218.42 L2117.22 1218.42 L2116.63 1218.42 L2116.04 1218.42 L2115.46 1218.42 L2114.87 1218.42 L2114.28 1218.42 L2113.7 1218.42 L2113.11 1218.42 L2112.52 1218.42 L2111.94 1218.42 L2111.35 1218.42 L2110.76 1218.42 L2110.18 1218.42 L2109.59 1218.42 L2109.01 1218.42 L2108.42 1218.42 L2107.83 1218.42 L2107.25 1218.42 L2106.66 1218.42 L2106.07 1218.42 L2105.49 1218.42 L2104.9 1218.42 L2104.31 1218.42 L2103.73 1218.42 L2103.14 1218.42 L2102.55 1218.42 L2101.97 1218.42 L2101.38 1218.42 L2100.8 1218.42 L2100.21 1218.42 L2099.62 1218.42 L2099.04 1218.42 L2098.45 1218.42 L2097.86 1218.42 L2097.28 1218.42 L2096.69 1218.42 L2096.1 1218.42 L2095.52 1218.42 L2094.93 1218.42 L2094.35 1218.42 L2093.76 1218.42 L2093.17 1218.42 L2092.59 1218.42 L2092 1218.42 L2091.41 1218.42 L2090.83 1218.42 L2090.24 1218.42 L2089.65 1218.42 L2089.07 1218.42 L2088.48 1218.42 L2087.89 1218.42 L2087.31 1218.42 L2086.72 1218.42 L2086.14 1218.42 L2085.55 1218.42 L2084.96 1218.42 L2084.38 1218.42 L2083.79 1218.42 L2083.2 1218.42 L2082.62 1218.42 L2082.03 1218.42 L2081.44 1218.42 L2080.86 1218.42 L2080.27 1218.42 L2079.68 1218.42 L2079.1 1218.42 L2078.51 1218.42 L2077.93 1218.42 L2077.34 1218.42 L2076.75 1218.42 L2076.17 1218.42 L2075.58 1218.42 L2074.99 1218.42 L2074.41 1218.42 L2073.82 1218.42 L2073.23 1218.42 L2072.65 1218.42 L2072.06 1218.42 L2071.48 1218.42 L2070.89 1218.42 L2070.3 1218.42 L2069.72 1218.42 L2069.13 1218.42 L2068.54 1218.42 L2067.96 1218.42 L2067.37 1218.42 L2066.78 1218.42 L2066.2 1218.42 L2065.61 1218.42 L2065.02 1218.42 L2064.44 1218.42 L2063.85 1218.42 L2063.27 1218.42 L2062.68 1218.42 L2062.09 1218.42 L2061.51 1218.42 L2060.92 1218.42 L2060.33 1218.42 L2059.75 1218.42 L2059.16 1218.42 L2058.57 1218.42 L2057.99 1218.42 L2057.4 1218.42 L2056.81 1218.42 L2056.23 1218.42 L2055.64 1218.42 L2055.06 1218.42 L2054.47 1218.42 L2053.88 1218.42 L2053.3 1218.42 L2052.71 1218.42 L2052.12 1218.42 L2051.54 1218.42 L2050.95 1218.42 L2050.36 1218.42 L2049.78 1218.42 L2049.19 1218.42 L2048.6 1218.42 L2048.02 1218.42 L2047.43 1218.42 L2046.85 1218.42 L2046.26 1218.42 L2045.67 1218.42 L2045.09 1218.42 L2044.5 1218.42 L2043.91 1218.42 L2043.33 1218.42 L2042.74 1218.42 L2042.15 1218.42 L2041.57 1218.42 L2040.98 1218.42 L2040.4 1218.42 L2039.81 1218.42 L2039.22 1218.42 L2038.64 1218.42 L2038.05 1218.42 L2037.46 1218.42 L2036.88 1218.42 L2036.29 1218.42 L2035.7 1218.42 L2035.12 1218.42 L2034.53 1218.42 L2033.94 1218.42 L2033.36 1218.42 L2032.77 1218.42 L2032.19 1218.42 L2031.6 1218.42 L2031.01 1218.42 L2030.43 1218.42 L2029.84 1218.42 L2029.25 1218.42 L2028.67 1218.42 L2028.08 1218.42 L2027.49 1218.42 L2026.91 1218.42 L2026.32 1218.42 L2025.73 1218.42 L2025.15 1218.42 L2024.56 1218.42 L2023.98 1218.42 L2023.39 1218.42 L2022.8 1218.42 L2022.22 1218.42 L2021.63 1218.42 L2021.04 1218.42 L2020.46 1218.42 L2019.87 1218.42 L2019.28 1218.42 L2018.7 1218.42 L2018.11 1218.42 L2017.53 1218.42 L2016.94 1218.42 L2016.35 1218.42 L2015.77 1218.42 L2015.18 1218.42 L2014.59 1218.42 L2014.01 1218.42 L2013.42 1218.42 L2012.83 1218.42 L2012.25 1218.42 L2011.66 1218.42 L2011.07 1218.42 L2010.49 1218.42 L2009.9 1218.42 L2009.32 1218.42 L2008.73 1218.42 L2008.14 1218.42 L2007.56 1218.42 L2006.97 1218.42 L2006.38 1218.42 L2005.8 1218.42 L2005.21 1218.42 L2004.62 1218.42 L2004.04 1218.42 L2003.45 1218.42 L2002.86 1218.42 L2002.28 1218.42 L2001.69 1218.42 L2001.11 1218.42 L2000.52 1218.42 L1999.93 1218.42 L1999.35 1218.42 L1998.76 1218.42 L1998.17 1218.42 L1997.59 1218.42 L1997 1218.42 L1996.41 1218.42 L1995.83 1218.42 L1995.24 1218.42 L1994.65 1218.42 L1994.07 1218.42 L1993.48 1218.42 L1992.9 1218.42 L1992.31 1218.42 L1991.72 1218.42 L1991.14 1218.42 L1990.55 1218.42 L1989.96 1218.42 L1989.38 1218.42 L1988.79 1218.42 L1988.2 1218.42 L1987.62 1218.42 L1987.03 1218.42 L1986.45 1218.42 L1985.86 1218.42 L1985.27 1218.42 L1984.69 1218.42 L1984.1 1218.42 L1983.51 1218.42 L1982.93 1218.42 L1982.34 1218.42 L1981.75 1218.42 L1981.17 1218.42 L1980.58 1218.42 L1979.99 1218.42 L1979.41 1218.42 L1978.82 1218.42 L1978.24 1218.42 L1977.65 1218.42 L1977.06 1218.42 L1976.48 1218.42 L1975.89 1218.42 L1975.3 1218.42 L1974.72 1218.42 L1974.13 1218.42 L1973.54 1218.42 L1972.96 1218.42 L1972.37 1218.42 L1971.78 1218.42 L1971.2 1218.42 L1970.61 1218.42 L1970.03 1218.42 L1969.44 1218.42 L1968.85 1218.42 L1968.27 1218.42 L1967.68 1218.42 L1967.09 1218.42 L1966.51 1218.42 L1965.92 1218.42 L1965.33 1218.42 L1964.75 1218.42 L1964.16 1218.42 L1963.58 1218.42 L1962.99 1218.42 L1962.4 1218.42 L1961.82 1218.42 L1961.23 1218.42 L1960.64 1218.42 L1960.06 1218.42 L1959.47 1218.42 L1958.88 1218.42 L1958.3 1218.42 L1957.71 1218.42 L1957.12 1218.42 L1956.54 1218.42 L1955.95 1218.42 L1955.37 1218.42 L1954.78 1218.42 L1954.19 1218.42 L1953.61 1218.42 L1953.02 1218.42 L1952.43 1218.42 L1951.85 1218.42 L1951.26 1218.42 L1950.67 1218.42 L1950.09 1218.42 L1949.5 1218.42 L1948.91 1218.42 L1948.33 1218.42 L1947.74 1218.42 L1947.16 1218.42 L1946.57 1218.42 L1945.98 1218.42 L1945.4 1218.42 L1944.81 1218.42 L1944.22 1218.42 L1943.64 1218.42 L1943.05 1218.42 L1942.46 1218.42 L1941.88 1218.42 L1941.29 1218.42 L1940.71 1218.42 L1940.12 1218.42 L1939.53 1218.42 L1938.95 1218.42 L1938.36 1218.42 L1937.77 1218.42 L1937.19 1218.42 L1936.6 1218.42 L1936.01 1218.42 L1935.43 1218.42 L1934.84 1218.42 L1934.25 1218.42 L1933.67 1218.42 L1933.08 1218.42 L1932.5 1218.42 L1931.91 1218.42 L1931.32 1218.42 L1930.74 1218.42 L1930.15 1218.42 L1929.56 1218.42 L1928.98 1218.42 L1928.39 1218.42 L1927.8 1218.42 L1927.22 1218.42 L1926.63 1218.42 L1926.04 1218.42 L1925.46 1218.42 L1924.87 1218.42 L1924.29 1218.42 L1923.7 1218.42 L1923.11 1218.42 L1922.53 1218.42 L1921.94 1218.42 L1921.35 1218.42 L1920.77 1218.42 L1920.18 1218.42 L1919.59 1218.42 L1919.01 1218.42 L1918.42 1218.42 L1917.83 1218.42 L1917.25 1218.42 L1916.66 1218.42 L1916.08 1218.42 L1915.49 1218.42 L1914.9 1218.42 L1914.32 1218.42 L1913.73 1218.42 L1913.14 1218.42 L1912.56 1218.42 L1911.97 1218.42 L1911.38 1218.42 L1910.8 1218.42 L1910.21 1218.42 L1909.63 1218.42 L1909.04 1218.42 L1908.45 1218.42 L1907.87 1218.42 L1907.28 1218.42 L1906.69 1218.42 L1906.11 1218.42 L1905.52 1218.42 L1904.93 1218.42 L1904.35 1218.42 L1903.76 1218.42 L1903.17 1218.42 L1902.59 1218.42 L1902 1218.42 L1901.42 1218.42 L1900.83 1218.42 L1900.24 1218.42 L1899.66 1218.42 L1899.07 1218.42 L1898.48 1218.42 L1897.9 1218.42 L1897.31 1218.42 L1896.72 1218.42 L1896.14 1218.42 L1895.55 1218.42 L1894.96 1218.42 L1894.38 1218.42 L1893.79 1218.42 L1893.21 1218.42 L1892.62 1218.42 L1892.03 1218.42 L1891.45 1218.42 L1890.86 1218.42 L1890.27 1218.42 L1889.69 1218.42 L1889.1 1218.42 L1888.51 1218.42 L1887.93 1218.42 L1887.34 1218.42 L1886.76 1218.42 L1886.17 1218.42 L1885.58 1218.42 L1885 1218.42 L1884.41 1218.42 L1883.82 1218.42 L1883.24 1218.42 L1882.65 1218.42 L1882.06 1218.42 L1881.48 1218.42 L1880.89 1218.42 L1880.3 1218.42 L1879.72 1218.42 L1879.13 1218.42 L1878.55 1218.42 L1877.96 1218.42 L1877.37 1218.42 L1876.79 1218.42 L1876.2 1218.42 L1875.61 1218.42 L1875.03 1218.42 L1874.44 1218.42 L1873.85 1218.42 L1873.27 1218.42 L1872.68 1218.42 L1872.09 1218.42 L1871.51 1218.42 L1870.92 1218.42 L1870.34 1218.42 L1869.75 1218.42 L1869.16 1218.42 L1868.58 1218.42 L1867.99 1218.42 L1867.4 1218.42 L1866.82 1218.42 L1866.23 1218.42 L1865.64 1218.42 L1865.06 1218.42 L1864.47 1218.42 L1863.88 1218.42 L1863.3 1218.42 L1862.71 1218.42 L1862.13 1218.42 L1861.54 1218.42 L1860.95 1218.42 L1860.37 1218.42 L1859.78 1218.42 L1859.19 1218.42 L1858.61 1218.42 L1858.02 1218.42 L1857.43 1218.42 L1856.85 1218.42 L1856.26 1218.42 L1855.68 1218.42 L1855.09 1218.42 L1854.5 1218.42 L1853.92 1218.42 L1853.33 1218.42 L1852.74 1218.42 L1852.16 1218.42 L1851.57 1218.42 L1850.98 1218.42 L1850.4 1218.42 L1849.81 1218.42 L1849.22 1218.42 L1848.64 1218.42 L1848.05 1218.42 L1847.47 1218.42 L1846.88 1218.42 L1846.29 1218.42 L1845.71 1218.42 L1845.12 1218.42 L1844.53 1218.42 L1843.95 1218.42 L1843.36 1218.42 L1842.77 1218.42 L1842.19 1218.42 L1841.6 1218.42 L1841.01 1218.42 L1840.43 1218.42 L1839.84 1218.42 L1839.26 1218.42 L1838.67 1218.42 L1838.08 1218.42 L1837.5 1218.42 L1836.91 1218.42 L1836.32 1218.42 L1835.74 1218.42 L1835.15 1218.42 L1834.56 1218.42 L1833.98 1218.42 L1833.39 1218.42 L1832.81 1218.42 L1832.22 1218.42 L1831.63 1218.42 L1831.05 1218.42 L1830.46 1218.42 L1829.87 1218.42 L1829.29 1218.42 L1828.7 1218.42 L1828.11 1218.42 L1827.53 1218.42 L1826.94 1218.42 L1826.35 1218.42 L1825.77 1218.42 L1825.18 1218.42 L1824.6 1218.42 L1824.01 1218.42 L1823.42 1218.42 L1822.84 1218.42 L1822.25 1218.42 L1821.66 1218.42 L1821.08 1218.42 L1820.49 1218.42 L1819.9 1218.42 L1819.32 1218.42 L1818.73 1218.42 L1818.14 1218.42 L1817.56 1218.42 L1816.97 1218.42 L1816.39 1218.42 L1815.8 1218.42 L1815.21 1218.42 L1814.63 1218.42 L1814.04 1218.42 L1813.45 1218.42 L1812.87 1218.42 L1812.28 1218.42 L1811.69 1218.42 L1811.11 1218.42 L1810.52 1218.42 L1809.94 1218.42 L1809.35 1218.42 L1808.76 1218.42 L1808.18 1218.42 L1807.59 1218.42 L1807 1218.42 L1806.42 1218.42 L1805.83 1218.42 L1805.24 1218.42 L1804.66 1218.42 L1804.07 1218.42 L1803.48 1218.42 L1802.9 1218.42 L1802.31 1218.42 L1801.73 1218.42 L1801.14 1218.42 L1800.55 1218.42 L1799.97 1218.42 L1799.38 1218.42 L1798.79 1218.42 L1798.21 1218.42 L1797.62 1218.42 L1797.03 1218.42 L1796.45 1218.42 L1795.86 1218.42 L1795.27 1218.42 L1794.69 1218.42 L1794.1 1218.42 L1793.52 1218.42 L1792.93 1218.42 L1792.34 1218.42 L1791.76 1218.42 L1791.17 1218.42 L1790.58 1218.42 L1790 1218.42 L1789.41 1218.42 L1788.82 1218.42 L1788.24 1218.42 L1787.65 1218.42 L1787.06 1218.42 L1786.48 1218.42 L1785.89 1218.42 L1785.31 1218.42 L1784.72 1218.42 L1784.13 1218.42 L1783.55 1218.42 L1782.96 1218.42 L1782.37 1218.42 L1781.79 1218.42 L1781.2 1218.42 L1780.61 1218.42 L1780.03 1218.42 L1779.44 1218.42 L1778.86 1218.42 L1778.27 1218.42 L1777.68 1218.42 L1777.1 1218.42 L1776.51 1218.42 L1775.92 1218.42 L1775.34 1218.42 L1774.75 1218.42 L1774.16 1218.42 L1773.58 1218.42 L1772.99 1218.42 L1772.4 1218.42 L1771.82 1218.42 L1771.23 1218.42 L1770.65 1218.42 L1770.06 1218.42 L1769.47 1218.42 L1768.89 1218.42 L1768.3 1218.42 L1767.71 1218.42 L1767.13 1218.42 L1766.54 1218.42 L1765.95 1218.42 L1765.37 1218.42 L1764.78 1218.42 L1764.19 1218.42 L1763.61 1218.42 L1763.02 1218.42 L1762.44 1218.42 L1761.85 1218.42 L1761.26 1218.42 L1760.68 1218.42 L1760.09 1218.42 L1759.5 1218.42 L1758.92 1218.42 L1758.33 1218.42 L1757.74 1218.42 L1757.16 1218.42 L1756.57 1218.42 L1755.99 1218.42 L1755.4 1218.42 L1754.81 1218.42 L1754.23 1218.42 L1753.64 1218.42 L1753.05 1218.42 L1752.47 1218.42 L1751.88 1218.42 L1751.29 1218.42 L1750.71 1218.42 L1750.12 1218.42 L1749.53 1218.42 L1748.95 1218.42 L1748.36 1218.42 L1747.78 1218.42 L1747.19 1218.42 L1746.6 1218.42 L1746.02 1218.42 L1745.43 1218.42 L1744.84 1218.42 L1744.26 1218.42 L1743.67 1218.42 L1743.08 1218.42 L1742.5 1218.42 L1741.91 1218.42 L1741.32 1218.42 L1740.74 1218.42 L1740.15 1218.42 L1739.57 1218.42 L1738.98 1218.42 L1738.39 1218.42 L1737.81 1218.42 L1737.22 1218.42 L1736.63 1218.42 L1736.05 1218.42 L1735.46 1218.42 L1734.87 1218.42 L1734.29 1218.42 L1733.7 1218.42 L1733.11 1218.42 L1732.53 1218.42 L1731.94 1218.42 L1731.36 1218.42 L1730.77 1218.42 L1730.18 1218.42 L1729.6 1218.42 L1729.01 1218.42 L1728.42 1218.42 L1727.84 1218.42 L1727.25 1218.42 L1726.66 1218.42 L1726.08 1218.42 L1725.49 1218.42 L1724.91 1218.42 L1724.32 1218.42 L1723.73 1218.42 L1723.15 1218.42 L1722.56 1218.42 L1721.97 1218.42 L1721.39 1218.42 L1720.8 1218.42 L1720.21 1218.42 L1719.63 1218.42 L1719.04 1218.42 L1718.45 1218.42 L1717.87 1218.42 L1717.28 1218.42 L1716.7 1218.42 L1716.11 1218.42 L1715.52 1218.42 L1714.94 1218.42 L1714.35 1218.42 L1713.76 1218.42 L1713.18 1218.42 L1712.59 1218.42 L1712 1218.42 L1711.42 1218.42 L1710.83 1218.42 L1710.24 1218.42 L1709.66 1218.42 L1709.07 1218.42 L1708.49 1218.42 L1707.9 1218.42 L1707.31 1218.42 L1706.73 1218.42 L1706.14 1218.42 L1705.55 1218.42 L1704.97 1218.42 L1704.38 1218.42 L1703.79 1218.42 L1703.21 1218.42 L1702.62 1218.42 L1702.04 1218.42 L1701.45 1218.42 L1700.86 1218.42 L1700.28 1218.42 L1699.69 1218.42 L1699.1 1218.42 L1698.52 1218.42 L1697.93 1218.42 L1697.34 1218.42 L1696.76 1218.42 L1696.17 1218.42 L1695.58 1218.42 L1695 1218.42 L1694.41 1218.42 L1693.83 1218.42 L1693.24 1218.42 L1692.65 1218.42 L1692.07 1218.42 L1691.48 1218.42 L1690.89 1218.42 L1690.31 1218.42 L1689.72 1218.42 L1689.13 1218.42 L1688.55 1218.42 L1687.96 1218.42 L1687.37 1218.42 L1686.79 1218.42 L1686.2 1218.42 L1685.62 1218.42 L1685.03 1218.42 L1684.44 1218.42 L1683.86 1218.42 L1683.27 1218.42 L1682.68 1218.42 L1682.1 1218.42 L1681.51 1218.42 L1680.92 1218.42 L1680.34 1218.42 L1679.75 1218.42 L1679.17 1218.42 L1678.58 1218.42 L1677.99 1218.42 L1677.41 1218.42 L1676.82 1218.42 L1676.23 1218.42 L1675.65 1218.42 L1675.06 1218.42 L1674.47 1218.42 L1673.89 1218.42 L1673.3 1218.42 L1672.71 1218.42 L1672.13 1218.42 L1671.54 1218.42 L1670.96 1218.42 L1670.37 1218.42 L1669.78 1218.42 L1669.2 1218.42 L1668.61 1218.42 L1668.02 1218.42 L1667.44 1218.42 L1666.85 1218.42 L1666.26 1218.42 L1665.68 1218.42 L1665.09 1218.42 L1664.5 1218.42 L1663.92 1218.42 L1663.33 1218.42 L1662.75 1218.42 L1662.16 1218.42 L1661.57 1218.42 L1660.99 1218.42 L1660.4 1218.42 L1659.81 1218.42 L1659.23 1218.42 L1658.64 1218.42 L1658.05 1218.42 L1657.47 1218.42 L1656.88 1218.42 L1656.29 1218.42 L1655.71 1218.42 L1655.12 1218.42 L1654.54 1218.42 L1653.95 1218.42 L1653.36 1218.42 L1652.78 1218.42 L1652.19 1218.42 L1651.6 1218.42 L1651.02 1218.42 L1650.43 1218.42 L1649.84 1218.42 L1649.26 1218.42 L1648.67 1218.42 L1648.09 1218.42 L1647.5 1218.42 L1646.91 1218.42 L1646.33 1218.42 L1645.74 1218.42 L1645.15 1218.42 L1644.57 1218.42 L1643.98 1218.42 L1643.39 1218.42 L1642.81 1218.42 L1642.22 1218.42 L1641.63 1218.42 L1641.05 1218.42 L1640.46 1218.42 L1639.88 1218.42 L1639.29 1218.42 L1638.7 1218.42 L1638.12 1218.42 L1637.53 1218.42 L1636.94 1218.42 L1636.36 1218.42 L1635.77 1218.42 L1635.18 1218.42 L1634.6 1218.42 L1634.01 1218.42 L1633.42 1218.42 L1632.84 1218.42 L1632.25 1218.42 L1631.67 1218.42 L1631.08 1218.42 L1630.49 1218.42 L1629.91 1218.42 L1629.32 1218.42 L1628.73 1218.42 L1628.15 1218.42 L1627.56 1218.42 L1626.97 1218.42 L1626.39 1218.42 L1625.8 1218.42 L1625.22 1218.42 L1624.63 1218.42 L1624.04 1218.42 L1623.46 1218.42 L1622.87 1218.42 L1622.28 1218.42 L1621.7 1218.42 L1621.11 1218.42 L1620.52 1218.42 L1619.94 1218.42 L1619.35 1218.42 L1618.76 1218.42 L1618.18 1218.42 L1617.59 1218.42 L1617.01 1218.42 L1616.42 1218.42 L1615.83 1218.42 L1615.25 1218.42 L1614.66 1218.42 L1614.07 1218.42 L1613.49 1218.42 L1612.9 1218.42 L1612.31 1218.42 L1611.73 1218.42 L1611.14 1218.42 L1610.55 1218.42 L1609.97 1218.42 L1609.38 1218.42 L1608.8 1218.42 L1608.21 1218.42 L1607.62 1218.42 L1607.04 1218.42 L1606.45 1218.42 L1605.86 1218.42 L1605.28 1218.42 L1604.69 1218.42 L1604.1 1218.42 L1603.52 1218.42 L1602.93 1218.42 L1602.34 1218.42 L1601.76 1218.42 L1601.17 1218.42 L1600.59 1218.42 L1600 1218.42 L1599.41 1218.42 L1598.83 1218.42 L1598.24 1218.42 L1597.65 1218.42 L1597.07 1218.42 L1596.48 1218.42 L1595.89 1218.42 L1595.31 1218.42 L1594.72 1218.42 L1594.14 1218.42 L1593.55 1218.42 L1592.96 1218.42 L1592.38 1218.42 L1591.79 1218.42 L1591.2 1218.42 L1590.62 1218.42 L1590.03 1218.42 L1589.44 1218.42 L1588.86 1218.42 L1588.27 1218.42 L1587.68 1218.42 L1587.1 1218.42 L1586.51 1218.42 L1585.93 1218.42 L1585.34 1218.42 L1584.75 1218.42 L1584.17 1218.42 L1583.58 1218.42 L1582.99 1218.42 L1582.41 1218.42 L1581.82 1218.42 L1581.23 1218.42 L1580.65 1218.42 L1580.06 1218.42 L1579.47 1218.42 L1578.89 1218.42 L1578.3 1218.42 L1577.72 1218.42 L1577.13 1218.42 L1576.54 1218.42 L1575.96 1218.42 L1575.37 1218.42 L1574.78 1218.42 L1574.2 1218.42 L1573.61 1218.42 L1573.02 1218.42 L1572.44 1218.42 L1571.85 1218.42 L1571.27 1218.42 L1570.68 1218.42 L1570.09 1218.42 L1569.51 1218.42 L1568.92 1218.42 L1568.33 1218.42 L1567.75 1218.42 L1567.16 1218.42 L1566.57 1218.42 L1565.99 1218.42 L1565.4 1218.42 L1564.81 1218.42 L1564.23 1218.42 L1563.64 1218.42 L1563.06 1218.42 L1562.47 1218.42 L1561.88 1218.42 L1561.3 1218.42 L1560.71 1218.42 L1560.12 1218.42 L1559.54 1218.42 L1558.95 1218.42 L1558.36 1218.42 L1557.78 1218.42 L1557.19 1218.42 L1556.6 1218.42 L1556.02 1218.42 L1555.43 1218.42 L1554.85 1218.42 L1554.26 1218.42 L1553.67 1218.42 L1553.09 1218.42 L1552.5 1218.42 L1551.91 1218.42 L1551.33 1218.42 L1550.74 1218.42 L1550.15 1218.42 L1549.57 1218.42 L1548.98 1218.42 L1548.4 1218.42 L1547.81 1218.42 L1547.22 1218.42 L1546.64 1218.42 L1546.05 1218.42 L1545.46 1218.42 L1544.88 1218.42 L1544.29 1218.42 L1543.7 1218.42 L1543.12 1218.42 L1542.53 1218.42 L1541.94 1218.42 L1541.36 1218.42 L1540.77 1218.42 L1540.19 1218.42 L1539.6 1218.42 L1539.01 1218.42 L1538.43 1218.42 L1537.84 1218.42 L1537.25 1218.42 L1536.67 1218.42 L1536.08 1218.42 L1535.49 1218.42 L1534.91 1218.42 L1534.32 1218.42 L1533.73 1218.42 L1533.15 1218.42 L1532.56 1218.42 L1531.98 1218.42 L1531.39 1218.42 L1530.8 1218.42 L1530.22 1218.42 L1529.63 1218.42 L1529.04 1218.42 L1528.46 1218.42 L1527.87 1218.42 L1527.28 1218.42 L1526.7 1218.42 L1526.11 1218.42 L1525.52 1218.42 L1524.94 1218.42 L1524.35 1218.42 L1523.77 1218.42 L1523.18 1218.42 L1522.59 1218.42 L1522.01 1218.42 L1521.42 1218.42 L1520.83 1218.42 L1520.25 1218.42 L1519.66 1218.42 L1519.07 1218.42 L1518.49 1218.42 L1517.9 1218.42 L1517.32 1218.42 L1516.73 1218.42 L1516.14 1218.42 L1515.56 1218.42 L1514.97 1218.42 L1514.38 1218.42 L1513.8 1218.42 L1513.21 1218.42 L1512.62 1218.42 L1512.04 1218.42 L1511.45 1218.42 L1510.86 1218.42 L1510.28 1218.42 L1509.69 1218.42 L1509.11 1218.42 L1508.52 1218.42 L1507.93 1218.42 L1507.35 1218.42 L1506.76 1218.42 L1506.17 1218.42 L1505.59 1218.42 L1505 1218.42 L1504.41 1218.42 L1503.83 1218.42 L1503.24 1218.42 L1502.65 1218.42 L1502.07 1218.42 L1501.48 1218.42 L1500.9 1218.42 L1500.31 1218.42 L1499.72 1218.42 L1499.14 1218.42 L1498.55 1218.42 L1497.96 1218.42 L1497.38 1218.42 L1496.79 1218.42 L1496.2 1218.42 L1495.62 1218.42 L1495.03 1218.42 L1494.45 1218.42 L1493.86 1218.42 L1493.27 1218.42 L1492.69 1218.42 L1492.1 1218.42 L1491.51 1218.42 L1490.93 1218.42 L1490.34 1218.42 L1489.75 1218.42 L1489.17 1218.42 L1488.58 1218.42 L1487.99 1218.42 L1487.41 1218.42 L1486.82 1218.42 L1486.24 1218.42 L1485.65 1218.42 L1485.06 1218.42 L1484.48 1218.42 L1483.89 1218.42 L1483.3 1218.42 L1482.72 1218.42 L1482.13 1218.42 L1481.54 1218.42 L1480.96 1218.42 L1480.37 1218.42 L1479.78 1218.42 L1479.2 1218.42 L1478.61 1218.42 L1478.03 1218.42 L1477.44 1218.42 L1476.85 1218.42 L1476.27 1218.42 L1475.68 1218.42 L1475.09 1218.42 L1474.51 1218.42 L1473.92 1218.42 L1473.33 1218.42 L1472.75 1218.42 L1472.16 1218.42 L1471.57 1218.42 L1470.99 1218.42 L1470.4 1218.42 L1469.82 1218.42 L1469.23 1218.42 L1468.64 1218.42 L1468.06 1218.42 L1467.47 1218.42 L1466.88 1218.42 L1466.3 1218.42 L1465.71 1218.42 L1465.12 1218.42 L1464.54 1218.42 L1463.95 1218.42 L1463.37 1218.42 L1462.78 1218.42 L1462.19 1218.42 L1461.61 1218.42 L1461.02 1218.42 L1460.43 1218.42 L1459.85 1218.42 L1459.26 1218.42 L1458.67 1218.42 L1458.09 1218.42 L1457.5 1218.42 L1456.91 1218.42 L1456.33 1218.42 L1455.74 1218.42 L1455.16 1218.42 L1454.57 1218.42 L1453.98 1218.42 L1453.4 1218.42 L1452.81 1218.42 L1452.22 1218.42 L1451.64 1218.42 L1451.05 1218.42 L1450.46 1218.42 L1449.88 1218.42 L1449.29 1218.42 L1448.7 1218.42 L1448.12 1218.42 L1447.53 1218.42 L1446.95 1218.42 L1446.36 1218.42 L1445.77 1218.42 L1445.19 1218.42 L1444.6 1218.42 L1444.01 1218.42 L1443.43 1218.42 L1442.84 1218.42 L1442.25 1218.42 L1441.67 1218.42 L1441.08 1218.42 L1440.5 1218.42 L1439.91 1218.42 L1439.32 1218.42 L1438.74 1218.42 L1438.15 1218.42 L1437.56 1218.42 L1436.98 1218.42 L1436.39 1218.42 L1435.8 1218.42 L1435.22 1218.42 L1434.63 1218.42 L1434.04 1218.42 L1433.46 1218.42 L1432.87 1218.42 L1432.29 1218.42 L1431.7 1218.42 L1431.11 1218.42 L1430.53 1218.42 L1429.94 1218.42 L1429.35 1218.42 L1428.77 1218.42 L1428.18 1218.42 L1427.59 1218.42 L1427.01 1218.42 L1426.42 1218.42 L1425.83 1218.42 L1425.25 1218.42 L1424.66 1218.42 L1424.08 1218.42 L1423.49 1218.42 L1422.9 1218.42 L1422.32 1218.42 L1421.73 1218.42 L1421.14 1218.42 L1420.56 1218.42 L1419.97 1218.42 L1419.38 1218.42 L1418.8 1218.42 L1418.21 1218.42 L1417.63 1218.42 L1417.04 1218.42 L1416.45 1218.42 L1415.87 1218.42 L1415.28 1218.42 L1414.69 1218.42 L1414.11 1218.42 L1413.52 1218.42 L1412.93 1218.42 L1412.35 1218.42 L1411.76 1218.42 L1411.17 1218.42 L1410.59 1218.42 L1410 1218.42 L1409.42 1218.42 L1408.83 1218.42 L1408.24 1218.42 L1407.66 1218.42 L1407.07 1218.42 L1406.48 1218.42 L1405.9 1218.42 L1405.31 1218.42 L1404.72 1218.42 L1404.14 1218.42 L1403.55 1218.42 L1402.96 1218.42 L1402.38 1218.42 L1401.79 1218.42 L1401.21 1218.42 L1400.62 1218.42 L1400.03 1218.42 L1399.45 1218.42 L1398.86 1218.42 L1398.27 1218.42 L1397.69 1218.42 L1397.1 1218.42 L1396.51 1218.42 L1395.93 1218.42 L1395.34 1218.42 L1394.75 1218.42 L1394.17 1218.42 L1393.58 1218.42 L1393 1218.42 L1392.41 1218.42 L1391.82 1218.42 L1391.24 1218.42 L1390.65 1218.42 L1390.06 1218.42 L1389.48 1218.42 L1388.89 1218.42 L1388.3 1218.42 L1387.72 1218.42 L1387.13 1218.42 L1386.55 1218.42 L1385.96 1218.42 L1385.37 1218.42 L1384.79 1218.42 L1384.2 1218.42 L1383.61 1218.42 L1383.03 1218.42 L1382.44 1218.42 L1381.85 1218.42 L1381.27 1218.42 L1380.68 1218.42 L1380.09 1218.42 L1379.51 1218.42 L1378.92 1218.42 L1378.34 1218.42 L1377.75 1218.42 L1377.16 1218.42 L1376.58 1218.42 L1375.99 1218.42 L1375.4 1218.42 L1374.82 1218.42 L1374.23 1218.42 L1373.64 1218.42 L1373.06 1218.42 L1372.47 1218.42 L1371.88 1218.42 L1371.3 1218.42 L1370.71 1218.42 L1370.13 1218.42 L1369.54 1218.42 L1368.95 1218.42 L1368.37 1218.42 L1367.78 1218.42 L1367.19 1218.42 L1366.61 1218.42 L1366.02 1218.42 L1365.43 1218.42 L1364.85 1218.42 L1364.26 1218.42 L1363.68 1218.42 L1363.09 1218.42 L1362.5 1218.42 L1361.92 1218.42 L1361.33 1218.42 L1360.74 1218.42 L1360.16 1218.42 L1359.57 1218.42 L1358.98 1218.42 L1358.4 1218.42 L1357.81 1218.42 L1357.22 1218.42 L1356.64 1218.42 L1356.05 1218.42 L1355.47 1218.42 L1354.88 1218.42 L1354.29 1218.42 L1353.71 1218.42 L1353.12 1218.42 L1352.53 1218.42 L1351.95 1218.42 L1351.36 1218.42 L1350.77 1218.42 L1350.19 1218.42 L1349.6 1218.42 L1349.01 1218.42 L1348.43 1218.42 L1347.84 1218.42 L1347.26 1218.42 L1346.67 1218.42 L1346.08 1218.42 L1345.5 1218.42 L1344.91 1218.42 L1344.32 1218.42 L1343.74 1218.42 L1343.15 1218.42 L1342.56 1218.42 L1341.98 1218.42 L1341.39 1218.42 L1340.8 1218.42 L1340.22 1218.42 L1339.63 1218.42 L1339.05 1218.42 L1338.46 1218.42 L1337.87 1218.42 L1337.29 1218.42 L1336.7 1218.42 L1336.11 1218.42 L1335.53 1218.42 L1334.94 1218.42 L1334.35 1218.42 L1333.77 1218.42 L1333.18 1218.42 L1332.6 1218.42 L1332.01 1218.42 L1331.42 1218.42 L1330.84 1218.42 L1330.25 1218.42 L1329.66 1218.42 L1329.08 1218.42 L1328.49 1218.42 L1327.9 1218.42 L1327.32 1218.42 L1326.73 1218.42 L1326.14 1218.42 L1325.56 1218.42 L1324.97 1218.42 L1324.39 1218.42 L1323.8 1218.42 L1323.21 1218.42 L1322.63 1218.42 L1322.04 1218.42 L1321.45 1218.42 L1320.87 1218.42 L1320.28 1218.42 L1319.69 1218.42 L1319.11 1218.42 L1318.52 1218.42 L1317.93 1218.42 L1317.35 1218.42 L1316.76 1218.42 L1316.18 1218.42 L1315.59 1218.42 L1315 1218.42 L1314.42 1218.42 L1313.83 1218.42 L1313.24 1218.42 L1312.66 1218.42 L1312.07 1218.42 L1311.48 1218.42 L1310.9 1218.42 L1310.31 1218.42 L1309.73 1218.42 L1309.14 1218.42 L1308.55 1218.42 L1307.97 1218.42 L1307.38 1218.42 L1306.79 1218.42 L1306.21 1218.42 L1305.62 1218.42 L1305.03 1218.42 L1304.45 1218.42 L1303.86 1218.42 L1303.27 1218.42 L1302.69 1218.42 L1302.1 1218.42 L1301.52 1218.42 L1300.93 1218.42 L1300.34 1218.42 L1299.76 1218.42 L1299.17 1218.42 L1298.58 1218.42 L1298 1218.42 L1297.41 1218.42 L1296.82 1218.42 L1296.24 1218.42 L1295.65 1218.42 L1295.06 1218.42 L1294.48 1218.42 L1293.89 1218.42 L1293.31 1218.42 L1292.72 1218.42 L1292.13 1218.42 L1291.55 1218.42 L1290.96 1218.42 L1290.37 1218.42 L1289.79 1218.42 L1289.2 1218.42 L1288.61 1218.42 L1288.03 1218.42 L1287.44 1218.42 L1286.86 1218.42 L1286.27 1218.42 L1285.68 1218.42 L1285.1 1218.42 L1284.51 1218.42 L1283.92 1218.42 L1283.34 1218.42 L1282.75 1218.42 L1282.16 1218.42 L1281.58 1218.42 L1280.99 1218.42 L1280.4 1218.42 L1279.82 1218.42 L1279.23 1218.42 L1278.65 1218.42 L1278.06 1218.42 L1277.47 1218.42 L1276.89 1218.42 L1276.3 1218.42 L1275.71 1218.42 L1275.13 1218.42 L1274.54 1218.42 L1273.95 1218.42 L1273.37 1218.42 L1272.78 1218.42 L1272.19 1218.42 L1271.61 1218.42 L1271.02 1218.42 L1270.44 1218.42 L1269.85 1218.42 L1269.26 1218.42 L1268.68 1218.42 L1268.09 1218.42 L1267.5 1218.42 L1266.92 1218.42 L1266.33 1218.42 L1265.74 1218.42 L1265.16 1218.42 L1264.57 1218.42 L1263.98 1218.42 L1263.4 1218.42 L1262.81 1218.42 L1262.23 1218.42 L1261.64 1218.42 L1261.05 1218.42 L1260.47 1218.42 L1259.88 1218.42 L1259.29 1218.42 L1258.71 1218.42 L1258.12 1218.42 L1257.53 1218.42 L1256.95 1218.42 L1256.36 1218.42 L1255.78 1218.42 L1255.19 1218.42 L1254.6 1218.42 L1254.02 1218.42 L1253.43 1218.42 L1252.84 1218.42 L1252.26 1218.42 L1251.67 1218.42 L1251.08 1218.42 L1250.5 1218.42 L1249.91 1218.42 L1249.32 1218.42 L1248.74 1218.42 L1248.15 1218.42 L1247.57 1218.42 L1246.98 1218.42 L1246.39 1218.42 L1245.81 1218.42 L1245.22 1218.42 L1244.63 1218.42 L1244.05 1218.42 L1243.46 1218.42 L1242.87 1218.42 L1242.29 1218.42 L1241.7 1218.42 L1241.11 1218.42 L1240.53 1218.42 L1239.94 1218.42 L1239.36 1218.42 L1238.77 1218.42 L1238.18 1218.42 L1237.6 1218.42 L1237.01 1218.42 L1236.42 1218.42 L1235.84 1218.42 L1235.25 1218.42 L1234.66 1218.42 L1234.08 1218.42 L1233.49 1218.42 L1232.91 1218.42 L1232.32 1218.42 L1231.73 1218.42 L1231.15 1218.42 L1230.56 1218.42 L1229.97 1218.42 L1229.39 1218.42 L1228.8 1218.42 L1228.21 1218.42 L1227.63 1218.42 L1227.04 1218.42 L1226.45 1218.42 L1225.87 1218.42 L1225.28 1218.42 L1224.7 1218.42 L1224.11 1218.42 L1223.52 1218.42 L1222.94 1218.42 L1222.35 1218.42 L1221.76 1218.42 L1221.18 1218.42 L1220.59 1218.42 L1220 1218.42 L1219.42 1218.42 L1218.83 1218.42 L1218.24 1218.42 L1217.66 1218.42 L1217.07 1218.42 L1216.49 1218.42 L1215.9 1218.42 L1215.31 1218.42 L1214.73 1218.42 L1214.14 1218.42 L1213.55 1218.42 L1212.97 1218.42 L1212.38 1218.42 L1211.79 1218.42 L1211.21 1218.42 L1210.62 1218.42 L1210.03 1218.42 L1209.45 1218.42 L1208.86 1218.42 L1208.28 1218.42 L1207.69 1218.42 L1207.1 1218.42 L1206.52 1218.42 L1205.93 1218.42 L1205.34 1218.42 L1204.76 1218.42 L1204.17 1218.42 L1203.58 1218.42 L1203 1218.42 L1202.41 1218.42 L1201.83 1218.42 L1201.24 1218.42 L1200.65 1218.42 L1200.07 1218.42 L1199.48 1218.42 L1198.89 1218.42 L1198.31 1218.42 L1197.72 1218.42 L1197.13 1218.42 L1196.55 1218.42 L1195.96 1218.42 L1195.37 1218.42 L1194.79 1218.42 L1194.2 1218.42 L1193.62 1218.42 L1193.03 1218.42 L1192.44 1218.42 L1191.86 1218.42 L1191.27 1218.42 L1190.68 1218.42 L1190.1 1218.42 L1189.51 1218.42 L1188.92 1218.42 L1188.34 1218.42 L1187.75 1218.42 L1187.16 1218.42 L1186.58 1218.42 L1185.99 1218.42 L1185.41 1218.42 L1184.82 1218.42 L1184.23 1218.42 L1183.65 1218.42 L1183.06 1218.42 L1182.47 1218.42 L1181.89 1218.42 L1181.3 1218.42 L1180.71 1218.42 L1180.13 1218.42 L1179.54 1218.42 L1178.96 1218.42 L1178.37 1218.42 L1177.78 1218.42 L1177.2 1218.42 L1176.61 1218.42 L1176.02 1218.42 L1175.44 1218.42 L1174.85 1218.42 L1174.26 1218.42 L1173.68 1218.42 L1173.09 1218.42 L1172.5 1218.42 L1171.92 1218.42 L1171.33 1218.42 L1170.75 1218.42 L1170.16 1218.42 L1169.57 1218.42 L1168.99 1218.42 L1168.4 1218.42 L1167.81 1218.42 L1167.23 1218.42 L1166.64 1218.42 L1166.05 1218.42 L1165.47 1218.42 L1164.88 1218.42 L1164.29 1218.42 L1163.71 1218.42 L1163.12 1218.42 L1162.54 1218.42 L1161.95 1218.42 L1161.36 1218.42 L1160.78 1218.42 L1160.19 1218.42 L1159.6 1218.42 L1159.02 1218.42 L1158.43 1218.42 L1157.84 1218.42 L1157.26 1218.42 L1156.67 1218.42 L1156.09 1218.42 L1155.5 1218.42 L1154.91 1218.42 L1154.33 1218.42 L1153.74 1218.42 L1153.15 1218.42 L1152.57 1218.42 L1151.98 1218.42 L1151.39 1218.42 L1150.81 1218.42 L1150.22 1218.42 L1149.63 1218.42 L1149.05 1218.42 L1148.46 1218.42 L1147.88 1218.42 L1147.29 1218.42 L1146.7 1218.42 L1146.12 1218.42 L1145.53 1218.42 L1144.94 1218.42 L1144.36 1218.42 L1143.77 1218.42 L1143.18 1218.42 L1142.6 1218.42 L1142.01 1218.42 L1141.42 1218.42 L1140.84 1218.42 L1140.25 1218.42 L1139.67 1218.42 L1139.08 1218.42 L1138.49 1218.42 L1137.91 1218.42 L1137.32 1218.42 L1136.73 1218.42 L1136.15 1218.42 L1135.56 1218.42 L1134.97 1218.42 L1134.39 1218.42 L1133.8 1218.42 L1133.21 1218.42 L1132.63 1218.42 L1132.04 1218.42 L1131.46 1218.42 L1130.87 1218.42 L1130.28 1218.42 L1129.7 1218.42 L1129.11 1218.42 L1128.52 1218.42 L1127.94 1218.42 L1127.35 1218.42 L1126.76 1218.42 L1126.18 1218.42 L1125.59 1218.42 L1125.01 1218.42 L1124.42 1218.42 L1123.83 1218.42 L1123.25 1218.42 L1122.66 1218.42 L1122.07 1218.42 L1121.49 1218.42 L1120.9 1218.42 L1120.31 1218.42 L1119.73 1218.42 L1119.14 1218.42 L1118.55 1218.42 L1117.97 1218.42 L1117.38 1218.42 L1116.8 1218.42 L1116.21 1218.42 L1115.62 1218.42 L1115.04 1218.42 L1114.45 1218.42 L1113.86 1218.42 L1113.28 1218.42 L1112.69 1218.42 L1112.1 1218.42 L1111.52 1218.42 L1110.93 1218.42 L1110.34 1218.42 L1109.76 1218.42 L1109.17 1218.42 L1108.59 1218.42 L1108 1218.42 L1107.41 1218.42 L1106.83 1218.42 L1106.24 1218.42 L1105.65 1218.42 L1105.07 1218.42 L1104.48 1218.42 L1103.89 1218.42 L1103.31 1218.42 L1102.72 1218.42 L1102.14 1218.42 L1101.55 1218.42 L1100.96 1218.42 L1100.38 1218.42 L1099.79 1218.42 L1099.2 1218.42 L1098.62 1218.42 L1098.03 1218.42 L1097.44 1218.42 L1096.86 1218.42 L1096.27 1218.42 L1095.68 1218.42 L1095.1 1218.42 L1094.51 1218.42 L1093.93 1218.42 L1093.34 1218.42 L1092.75 1218.42 L1092.17 1218.42 L1091.58 1218.42 L1090.99 1218.42 L1090.41 1218.42 L1089.82 1218.42 L1089.23 1218.42 L1088.65 1218.42 L1088.06 1218.42 L1087.47 1218.42 L1086.89 1218.42 L1086.3 1218.42 L1085.72 1218.42 L1085.13 1218.42 L1084.54 1218.42 L1083.96 1218.42 L1083.37 1218.42 L1082.78 1218.42 L1082.2 1218.42 L1081.61 1218.42 L1081.02 1218.42 L1080.44 1218.42 L1079.85 1218.42 L1079.26 1218.42 L1078.68 1218.42 L1078.09 1218.42 L1077.51 1218.42 L1076.92 1218.42 L1076.33 1218.42 L1075.75 1218.42 L1075.16 1218.42 L1074.57 1218.42 L1073.99 1218.42 L1073.4 1218.42 L1072.81 1218.42 L1072.23 1218.42 L1071.64 1218.42 L1071.06 1218.42 L1070.47 1218.42 L1069.88 1218.42 L1069.3 1218.42 L1068.71 1218.42 L1068.12 1218.42 L1067.54 1218.42 L1066.95 1218.42 L1066.36 1218.42 L1065.78 1218.42 L1065.19 1218.42 L1064.6 1218.42 L1064.02 1218.42 L1063.43 1218.42 L1062.85 1218.42 L1062.26 1218.42 L1061.67 1218.42 L1061.09 1218.42 L1060.5 1218.42 L1059.91 1218.42 L1059.33 1218.42 L1058.74 1218.42 L1058.15 1218.42 L1057.57 1218.42 L1056.98 1218.42 L1056.39 1218.42 L1055.81 1218.42 L1055.22 1218.42 L1054.64 1218.42 L1054.05 1218.42 L1053.46 1218.42 L1052.88 1218.42 L1052.29 1218.42 L1051.7 1218.42 L1051.12 1218.42 L1050.53 1218.42 L1049.94 1218.42 L1049.36 1218.42 L1048.77 1218.42 L1048.19 1218.42 L1047.6 1218.42 L1047.01 1218.42 L1046.43 1218.42 L1045.84 1218.42 L1045.25 1218.42 L1044.67 1218.42 L1044.08 1218.42 L1043.49 1218.42 L1042.91 1218.42 L1042.32 1218.42 L1041.73 1218.42 L1041.15 1218.42 L1040.56 1218.42 L1039.98 1218.42 L1039.39 1218.42 L1038.8 1218.42 L1038.22 1218.42 L1037.63 1218.42 L1037.04 1218.42 L1036.46 1218.42 L1035.87 1218.42 L1035.28 1218.42 L1034.7 1218.42 L1034.11 1218.42 L1033.52 1218.42 L1032.94 1218.42 L1032.35 1218.42 L1031.77 1218.42 L1031.18 1218.42 L1030.59 1218.42 L1030.01 1218.42 L1029.42 1218.42 L1028.83 1218.42 L1028.25 1218.42 L1027.66 1218.42 L1027.07 1218.42 L1026.49 1218.42 L1025.9 1218.42 L1025.32 1218.42 L1024.73 1218.42 L1024.14 1218.42 L1023.56 1218.42 L1022.97 1218.42 L1022.38 1218.42 L1021.8 1218.42 L1021.21 1218.42 L1020.62 1218.42 L1020.04 1218.42 L1019.45 1218.42 L1018.86 1218.42 L1018.28 1218.42 L1017.69 1218.42 L1017.11 1218.42 L1016.52 1218.42 L1015.93 1218.42 L1015.35 1218.42 L1014.76 1218.42 L1014.17 1218.42 L1013.59 1218.42 L1013 1218.42 L1012.41 1218.42 L1011.83 1218.42 L1011.24 1218.42 L1010.65 1218.42 L1010.07 1218.42 L1009.48 1218.42 L1008.9 1218.42 L1008.31 1218.42 L1007.72 1218.42 L1007.14 1218.42 L1006.55 1218.42 L1005.96 1218.42 L1005.38 1218.42 L1004.79 1218.42 L1004.2 1218.42 L1003.62 1218.42 L1003.03 1218.42 L1002.44 1218.42 L1001.86 1218.42 L1001.27 1218.42 L1000.69 1218.42 L1000.1 1218.42 L999.513 1218.42 L998.926 1218.42 L998.34 1218.42 L997.754 1218.42 L997.167 1218.42 L996.581 1218.42 L995.994 1218.42 L995.408 1218.42 L994.822 1218.42 L994.235 1218.42 L993.649 1218.42 L993.062 1218.42 L992.476 1218.42 L991.889 1218.42 L991.303 1218.42 L990.717 1218.42 L990.13 1218.42 L989.544 1218.42 L988.957 1218.42 L988.371 1218.42 L987.785 1218.42 L987.198 1218.42 L986.612 1218.42 L986.025 1218.42  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1218.5 986.612,1218.5 987.198,1218.5 987.785,1218.5 988.371,1218.5 988.957,1218.5 989.544,1218.5 990.13,1218.5 990.717,1218.5 991.303,1218.5 991.889,1218.5 992.476,1218.5 993.062,1218.5 993.649,1218.5 994.235,1218.5 994.822,1218.5 995.408,1218.5 995.994,1218.5 996.581,1218.5 997.167,1218.5 997.754,1218.5 998.34,1218.5 998.926,1218.5 999.513,1218.5 1000.1,1218.5 1000.69,1218.5 1001.27,1218.5 1001.86,1218.5 1002.44,1218.5 1003.03,1218.5 1003.62,1218.5 1004.2,1218.5 1004.79,1218.5 1005.38,1218.5 1005.96,1218.5 1006.55,1218.5 1007.14,1218.5 1007.72,1218.5 1008.31,1218.5 1008.9,1218.5 1009.48,1218.5 1010.07,1218.5 1010.65,1218.5 1011.24,1218.5 1011.83,1218.5 1012.41,1218.5 1013,1218.5 1013.59,1218.5 1014.17,1218.5 1014.76,1218.5 1015.35,1218.5 1015.93,1218.5 1016.52,1218.5 1017.11,1218.5 1017.69,1218.5 1018.28,1218.5 1018.86,1218.5 1019.45,1218.5 1020.04,1218.5 1020.62,1218.5 1021.21,1218.5 1021.8,1218.5 1022.38,1218.5 1022.97,1218.5 1023.56,1218.5 1024.14,1218.5 1024.73,1218.5 1025.32,1218.5 1025.9,1218.5 1026.49,1218.5 1027.07,1218.5 1027.66,1218.5 1028.25,1218.5 1028.83,1218.5 1029.42,1218.5 1030.01,1218.5 1030.59,1218.5 1031.18,1218.5 1031.77,1218.5 1032.35,1218.5 1032.94,1218.5 1033.52,1218.5 1034.11,1218.5 1034.7,1218.5 1035.28,1218.5 1035.87,1218.5 1036.46,1218.5 1037.04,1218.5 1037.63,1218.5 1038.22,1218.5 1038.8,1218.5 1039.39,1218.5 1039.98,1218.5 1040.56,1218.5 1041.15,1218.5 1041.73,1218.5 1042.32,1218.5 1042.91,1218.5 1043.49,1218.5 1044.08,1218.5 1044.67,1218.5 1045.25,1218.5 1045.84,1218.5 1046.43,1218.5 1047.01,1218.5 1047.6,1218.5 1048.19,1218.5 1048.77,1218.5 1049.36,1218.5 1049.94,1218.5 1050.53,1218.5 1051.12,1218.5 1051.7,1218.5 1052.29,1218.5 1052.88,1218.5 1053.46,1218.5 1054.05,1218.5 1054.64,1218.5 1055.22,1218.5 1055.81,1218.5 1056.39,1218.5 1056.98,1218.5 1057.57,1218.5 1058.15,1218.5 1058.74,1218.5 1059.33,1218.5 1059.91,1218.5 1060.5,1218.5 1061.09,1218.5 1061.67,1218.5 1062.26,1218.5 1062.85,1218.5 1063.43,1218.5 1064.02,1218.5 1064.6,1218.5 1065.19,1218.5 1065.78,1218.5 1066.36,1218.5 1066.95,1218.5 1067.54,1218.5 1068.12,1218.5 1068.71,1218.5 1069.3,1218.5 1069.88,1218.5 1070.47,1218.5 1071.06,1218.5 1071.64,1218.5 1072.23,1218.5 1072.81,1218.5 1073.4,1218.5 1073.99,1218.5 1074.57,1218.5 1075.16,1218.5 1075.75,1218.5 1076.33,1218.5 1076.92,1218.5 1077.51,1218.5 1078.09,1218.5 1078.68,1218.5 1079.26,1218.5 1079.85,1218.5 1080.44,1218.5 1081.02,1218.5 1081.61,1218.5 1082.2,1218.5 1082.78,1218.5 1083.37,1218.5 1083.96,1218.5 1084.54,1218.5 1085.13,1218.5 1085.72,1218.5 1086.3,1218.5 1086.89,1218.5 1087.47,1218.5 1088.06,1218.5 1088.65,1218.5 1089.23,1218.5 1089.82,1218.5 1090.41,1218.5 1090.99,1218.5 1091.58,1218.5 1092.17,1218.5 1092.75,1218.5 1093.34,1218.5 1093.93,1218.5 1094.51,1218.5 1095.1,1218.5 1095.68,1218.5 1096.27,1218.5 1096.86,1218.5 1097.44,1218.5 1098.03,1218.5 1098.62,1218.5 1099.2,1218.5 1099.79,1218.5 1100.38,1218.5 1100.96,1218.5 1101.55,1218.5 1102.14,1218.5 1102.72,1218.5 1103.31,1218.5 1103.89,1218.5 1104.48,1218.5 1105.07,1218.5 1105.65,1218.5 1106.24,1218.5 1106.83,1218.5 1107.41,1218.5 1108,1218.5 1108.59,1218.5 1109.17,1218.5 1109.76,1218.5 1110.34,1218.5 1110.93,1218.5 1111.52,1218.5 1112.1,1218.5 1112.69,1218.5 1113.28,1218.5 1113.86,1218.5 1114.45,1218.5 1115.04,1218.5 1115.62,1218.5 1116.21,1218.5 1116.8,1218.5 1117.38,1218.5 1117.97,1218.5 1118.55,1218.5 1119.14,1218.5 1119.73,1218.5 1120.31,1218.5 1120.9,1218.5 1121.49,1218.5 1122.07,1218.5 1122.66,1218.5 1123.25,1218.5 1123.83,1218.5 1124.42,1218.5 1125.01,1218.5 1125.59,1218.5 1126.18,1218.5 1126.76,1218.5 1127.35,1218.5 1127.94,1218.5 1128.52,1218.5 1129.11,1218.5 1129.7,1218.5 1130.28,1218.5 1130.87,1218.5 1131.46,1218.5 1132.04,1218.5 1132.63,1218.5 1133.21,1218.5 1133.8,1218.5 1134.39,1218.5 1134.97,1218.5 1135.56,1218.5 1136.15,1218.5 1136.73,1218.5 1137.32,1218.5 1137.91,1218.5 1138.49,1218.5 1139.08,1218.5 1139.67,1218.5 1140.25,1218.5 1140.84,1218.5 1141.42,1218.5 1142.01,1218.5 1142.6,1218.5 1143.18,1218.5 1143.77,1218.5 1144.36,1218.5 1144.94,1218.5 1145.53,1218.5 1146.12,1218.5 1146.7,1218.5 1147.29,1218.5 1147.88,1218.5 1148.46,1218.5 1149.05,1218.5 1149.63,1218.5 1150.22,1218.5 1150.81,1218.5 1151.39,1218.5 1151.98,1218.5 1152.57,1218.5 1153.15,1218.5 1153.74,1218.5 1154.33,1218.5 1154.91,1218.5 1155.5,1218.5 1156.09,1218.5 1156.67,1218.5 1157.26,1218.5 1157.84,1218.5 1158.43,1218.5 1159.02,1218.5 1159.6,1218.5 1160.19,1218.5 1160.78,1218.5 1161.36,1218.5 1161.95,1218.5 1162.54,1218.5 1163.12,1218.5 1163.71,1218.5 1164.29,1218.5 1164.88,1218.5 1165.47,1218.5 1166.05,1218.5 1166.64,1218.5 1167.23,1218.5 1167.81,1218.5 1168.4,1218.5 1168.99,1218.5 1169.57,1218.5 1170.16,1218.5 1170.75,1218.5 1171.33,1218.5 1171.92,1218.5 1172.5,1218.5 1173.09,1218.5 1173.68,1218.5 1174.26,1218.5 1174.85,1218.5 1175.44,1218.5 1176.02,1218.5 1176.61,1218.5 1177.2,1218.5 1177.78,1218.5 1178.37,1218.5 1178.96,1218.5 1179.54,1218.5 1180.13,1218.5 1180.71,1218.5 1181.3,1218.5 1181.89,1218.5 1182.47,1218.5 1183.06,1218.5 1183.65,1218.5 1184.23,1218.5 1184.82,1218.5 1185.41,1218.5 1185.99,1218.5 1186.58,1218.5 1187.16,1218.5 1187.75,1218.5 1188.34,1218.5 1188.92,1218.5 1189.51,1218.5 1190.1,1218.5 1190.68,1218.5 1191.27,1218.5 1191.86,1218.5 1192.44,1218.5 1193.03,1218.5 1193.62,1218.5 1194.2,1218.5 1194.79,1218.5 1195.37,1218.5 1195.96,1218.5 1196.55,1218.5 1197.13,1218.5 1197.72,1218.5 1198.31,1218.5 1198.89,1218.5 1199.48,1218.5 1200.07,1218.5 1200.65,1218.5 1201.24,1218.5 1201.83,1218.5 1202.41,1218.5 1203,1218.5 1203.58,1218.5 1204.17,1218.5 1204.76,1218.5 1205.34,1218.5 1205.93,1218.5 1206.52,1218.5 1207.1,1218.5 1207.69,1218.5 1208.28,1218.5 1208.86,1218.5 1209.45,1218.5 1210.03,1218.5 1210.62,1218.5 1211.21,1218.5 1211.79,1218.5 1212.38,1218.5 1212.97,1218.5 1213.55,1218.5 1214.14,1218.5 1214.73,1218.5 1215.31,1218.5 1215.9,1218.5 1216.49,1218.5 1217.07,1218.5 1217.66,1218.5 1218.24,1218.5 1218.83,1218.5 1219.42,1218.5 1220,1218.5 1220.59,1218.5 1221.18,1218.5 1221.76,1218.5 1222.35,1218.5 1222.94,1218.5 1223.52,1218.5 1224.11,1218.5 1224.7,1218.5 1225.28,1218.5 1225.87,1218.5 1226.45,1218.5 1227.04,1218.5 1227.63,1218.5 1228.21,1218.5 1228.8,1218.5 1229.39,1218.5 1229.97,1218.5 1230.56,1218.5 1231.15,1218.5 1231.73,1218.5 1232.32,1218.5 1232.91,1218.5 1233.49,1218.5 1234.08,1218.5 1234.66,1218.5 1235.25,1218.5 1235.84,1218.5 1236.42,1218.5 1237.01,1218.5 1237.6,1218.5 1238.18,1218.5 1238.77,1218.5 1239.36,1218.5 1239.94,1218.5 1240.53,1218.5 1241.11,1218.5 1241.7,1218.5 1242.29,1218.5 1242.87,1218.5 1243.46,1218.5 1244.05,1218.5 1244.63,1218.5 1245.22,1218.5 1245.81,1218.5 1246.39,1218.5 1246.98,1218.5 1247.57,1218.5 1248.15,1218.5 1248.74,1218.5 1249.32,1218.5 1249.91,1218.5 1250.5,1218.5 1251.08,1218.5 1251.67,1218.5 1252.26,1218.5 1252.84,1218.5 1253.43,1218.5 1254.02,1218.5 1254.6,1218.5 1255.19,1218.5 1255.78,1218.5 1256.36,1218.5 1256.95,1218.5 1257.53,1218.5 1258.12,1218.5 1258.71,1218.5 1259.29,1218.5 1259.88,1218.5 1260.47,1218.5 1261.05,1218.5 1261.64,1218.5 1262.23,1218.5 1262.81,1218.5 1263.4,1218.5 1263.98,1218.5 1264.57,1218.5 1265.16,1218.5 1265.74,1218.5 1266.33,1218.5 1266.92,1218.5 1267.5,1218.5 1268.09,1218.5 1268.68,1218.5 1269.26,1218.5 1269.85,1218.5 1270.44,1218.5 1271.02,1218.5 1271.61,1218.5 1272.19,1218.5 1272.78,1218.5 1273.37,1218.5 1273.95,1218.5 1274.54,1218.5 1275.13,1218.5 1275.71,1218.5 1276.3,1218.5 1276.89,1218.5 1277.47,1218.5 1278.06,1218.5 1278.65,1218.5 1279.23,1218.5 1279.82,1218.5 1280.4,1218.5 1280.99,1218.5 1281.58,1218.5 1282.16,1218.5 1282.75,1218.5 1283.34,1218.5 1283.92,1218.5 1284.51,1218.5 1285.1,1218.5 1285.68,1218.5 1286.27,1218.5 1286.86,1218.5 1287.44,1218.5 1288.03,1218.5 1288.61,1218.5 1289.2,1218.5 1289.79,1218.5 1290.37,1218.5 1290.96,1218.5 1291.55,1218.5 1292.13,1218.5 1292.72,1218.5 1293.31,1218.5 1293.89,1218.5 1294.48,1218.5 1295.06,1218.5 1295.65,1218.5 1296.24,1218.5 1296.82,1218.5 1297.41,1218.5 1298,1218.5 1298.58,1218.5 1299.17,1218.5 1299.76,1218.5 1300.34,1218.5 1300.93,1218.5 1301.52,1218.5 1302.1,1218.5 1302.69,1218.5 1303.27,1218.5 1303.86,1218.5 1304.45,1218.5 1305.03,1218.5 1305.62,1218.5 1306.21,1218.5 1306.79,1218.5 1307.38,1218.5 1307.97,1218.5 1308.55,1218.5 1309.14,1218.5 1309.73,1218.5 1310.31,1218.5 1310.9,1218.5 1311.48,1218.5 1312.07,1218.5 1312.66,1218.5 1313.24,1218.5 1313.83,1218.5 1314.42,1218.5 1315,1218.5 1315.59,1218.5 1316.18,1218.5 1316.76,1218.5 1317.35,1218.5 1317.93,1218.5 1318.52,1218.5 1319.11,1218.5 1319.69,1218.5 1320.28,1218.5 1320.87,1218.5 1321.45,1218.5 1322.04,1218.5 1322.63,1218.5 1323.21,1218.5 1323.8,1218.5 1324.39,1218.5 1324.97,1218.5 1325.56,1218.5 1326.14,1218.5 1326.73,1218.5 1327.32,1218.5 1327.9,1218.5 1328.49,1218.5 1329.08,1218.5 1329.66,1218.5 1330.25,1218.5 1330.84,1218.5 1331.42,1218.5 1332.01,1218.5 1332.6,1218.5 1333.18,1218.5 1333.77,1218.5 1334.35,1218.5 1334.94,1218.5 1335.53,1218.5 1336.11,1218.5 1336.7,1218.5 1337.29,1218.5 1337.87,1218.5 1338.46,1218.5 1339.05,1218.5 1339.63,1218.5 1340.22,1218.5 1340.8,1218.5 1341.39,1218.5 1341.98,1218.5 1342.56,1218.5 1343.15,1218.5 1343.74,1218.5 1344.32,1218.5 1344.91,1218.5 1345.5,1218.5 1346.08,1218.5 1346.67,1218.5 1347.26,1218.5 1347.84,1218.5 1348.43,1218.5 1349.01,1218.5 1349.6,1218.5 1350.19,1218.5 1350.77,1218.5 1351.36,1218.5 1351.95,1218.5 1352.53,1218.5 1353.12,1218.5 1353.71,1218.5 1354.29,1218.5 1354.88,1218.5 1355.47,1218.5 1356.05,1218.5 1356.64,1218.5 1357.22,1218.5 1357.81,1218.5 1358.4,1218.5 1358.98,1218.5 1359.57,1218.5 1360.16,1218.5 1360.74,1218.5 1361.33,1218.5 1361.92,1218.5 1362.5,1218.5 1363.09,1218.5 1363.68,1218.5 1364.26,1218.5 1364.85,1218.5 1365.43,1218.5 1366.02,1218.5 1366.61,1218.5 1367.19,1218.5 1367.78,1218.5 1368.37,1218.5 1368.95,1218.5 1369.54,1218.5 1370.13,1218.5 1370.71,1218.5 1371.3,1218.5 1371.88,1218.5 1372.47,1218.5 1373.06,1218.5 1373.64,1218.5 1374.23,1218.5 1374.82,1218.5 1375.4,1218.5 1375.99,1218.5 1376.58,1218.5 1377.16,1218.5 1377.75,1218.5 1378.34,1218.5 1378.92,1218.5 1379.51,1218.5 1380.09,1218.5 1380.68,1218.5 1381.27,1218.5 1381.85,1218.5 1382.44,1218.5 1383.03,1218.5 1383.61,1218.5 1384.2,1218.5 1384.79,1218.5 1385.37,1218.5 1385.96,1218.5 1386.55,1218.5 1387.13,1218.5 1387.72,1218.5 1388.3,1218.5 1388.89,1218.5 1389.48,1218.5 1390.06,1218.5 1390.65,1218.5 1391.24,1218.5 1391.82,1218.5 1392.41,1218.5 1393,1218.5 1393.58,1218.5 1394.17,1218.5 1394.75,1218.5 1395.34,1218.5 1395.93,1218.5 1396.51,1218.5 1397.1,1218.5 1397.69,1218.5 1398.27,1218.5 1398.86,1218.5 1399.45,1218.5 1400.03,1218.5 1400.62,1218.5 1401.21,1218.5 1401.79,1218.5 1402.38,1218.5 1402.96,1218.5 1403.55,1218.5 1404.14,1218.5 1404.72,1218.5 1405.31,1218.5 1405.9,1218.5 1406.48,1218.5 1407.07,1218.5 1407.66,1218.5 1408.24,1218.5 1408.83,1218.5 1409.42,1218.5 1410,1218.5 1410.59,1218.5 1411.17,1218.5 1411.76,1218.5 1412.35,1218.5 1412.93,1218.5 1413.52,1218.5 1414.11,1218.5 1414.69,1218.5 1415.28,1218.5 1415.87,1218.5 1416.45,1218.5 1417.04,1218.5 1417.63,1218.5 1418.21,1218.5 1418.8,1218.5 1419.38,1218.5 1419.97,1218.5 1420.56,1218.5 1421.14,1218.5 1421.73,1218.5 1422.32,1218.5 1422.9,1218.5 1423.49,1218.5 1424.08,1218.5 1424.66,1218.5 1425.25,1218.5 1425.83,1218.5 1426.42,1218.5 1427.01,1218.5 1427.59,1218.5 1428.18,1218.5 1428.77,1218.5 1429.35,1218.5 1429.94,1218.5 1430.53,1218.5 1431.11,1218.5 1431.7,1218.5 1432.29,1218.5 1432.87,1218.5 1433.46,1218.5 1434.04,1218.5 1434.63,1218.5 1435.22,1218.5 1435.8,1218.5 1436.39,1218.5 1436.98,1218.5 1437.56,1218.5 1438.15,1218.5 1438.74,1218.5 1439.32,1218.5 1439.91,1218.5 1440.5,1218.5 1441.08,1218.5 1441.67,1218.5 1442.25,1218.5 1442.84,1218.5 1443.43,1218.5 1444.01,1218.5 1444.6,1218.5 1445.19,1218.5 1445.77,1218.5 1446.36,1218.5 1446.95,1218.5 1447.53,1218.5 1448.12,1218.5 1448.7,1218.5 1449.29,1218.5 1449.88,1218.5 1450.46,1218.5 1451.05,1218.5 1451.64,1218.5 1452.22,1218.5 1452.81,1218.5 1453.4,1218.5 1453.98,1218.5 1454.57,1218.5 1455.16,1218.5 1455.74,1218.5 1456.33,1218.5 1456.91,1218.5 1457.5,1218.5 1458.09,1218.5 1458.67,1218.5 1459.26,1218.5 1459.85,1218.5 1460.43,1218.5 1461.02,1218.5 1461.61,1218.5 1462.19,1218.5 1462.78,1218.5 1463.37,1218.5 1463.95,1218.5 1464.54,1218.5 1465.12,1218.5 1465.71,1218.5 1466.3,1218.5 1466.88,1218.5 1467.47,1218.5 1468.06,1218.5 1468.64,1218.5 1469.23,1218.5 1469.82,1218.5 1470.4,1218.5 1470.99,1218.5 1471.57,1218.5 1472.16,1218.5 1472.75,1218.5 1473.33,1218.5 1473.92,1218.5 1474.51,1218.5 1475.09,1218.5 1475.68,1218.5 1476.27,1218.5 1476.85,1218.5 1477.44,1218.5 1478.03,1218.5 1478.61,1218.5 1479.2,1218.5 1479.78,1218.5 1480.37,1218.5 1480.96,1218.5 1481.54,1218.5 1482.13,1218.5 1482.72,1218.5 1483.3,1218.5 1483.89,1218.5 1484.48,1218.5 1485.06,1218.5 1485.65,1218.5 1486.24,1218.5 1486.82,1218.5 1487.41,1218.5 1487.99,1218.5 1488.58,1218.5 1489.17,1218.5 1489.75,1218.5 1490.34,1218.5 1490.93,1218.5 1491.51,1218.5 1492.1,1218.5 1492.69,1218.5 1493.27,1218.5 1493.86,1218.5 1494.45,1218.5 1495.03,1218.5 1495.62,1218.5 1496.2,1218.5 1496.79,1218.5 1497.38,1218.5 1497.96,1218.5 1498.55,1218.5 1499.14,1218.5 1499.72,1218.5 1500.31,1218.5 1500.9,1218.5 1501.48,1218.5 1502.07,1218.5 1502.65,1218.5 1503.24,1218.5 1503.83,1218.5 1504.41,1218.5 1505,1218.5 1505.59,1218.5 1506.17,1218.5 1506.76,1218.5 1507.35,1218.5 1507.93,1218.5 1508.52,1218.5 1509.11,1218.5 1509.69,1218.5 1510.28,1218.5 1510.86,1218.5 1511.45,1218.5 1512.04,1218.5 1512.62,1218.5 1513.21,1218.5 1513.8,1218.5 1514.38,1218.5 1514.97,1218.5 1515.56,1218.5 1516.14,1218.5 1516.73,1218.5 1517.32,1218.5 1517.9,1218.5 1518.49,1218.5 1519.07,1218.5 1519.66,1218.5 1520.25,1218.5 1520.83,1218.5 1521.42,1218.5 1522.01,1218.5 1522.59,1218.5 1523.18,1218.5 1523.77,1218.5 1524.35,1218.5 1524.94,1218.5 1525.52,1218.5 1526.11,1218.5 1526.7,1218.5 1527.28,1218.5 1527.87,1218.5 1528.46,1218.5 1529.04,1218.5 1529.63,1218.5 1530.22,1218.5 1530.8,1218.5 1531.39,1218.5 1531.98,1218.5 1532.56,1218.5 1533.15,1218.5 1533.73,1218.5 1534.32,1218.5 1534.91,1218.5 1535.49,1218.5 1536.08,1218.5 1536.67,1218.5 1537.25,1218.5 1537.84,1218.5 1538.43,1218.5 1539.01,1218.5 1539.6,1218.5 1540.19,1218.5 1540.77,1218.5 1541.36,1218.5 1541.94,1218.5 1542.53,1218.5 1543.12,1218.5 1543.7,1218.5 1544.29,1218.5 1544.88,1218.5 1545.46,1218.5 1546.05,1218.5 1546.64,1218.5 1547.22,1218.5 1547.81,1218.5 1548.4,1218.5 1548.98,1218.5 1549.57,1218.5 1550.15,1218.5 1550.74,1218.5 1551.33,1218.5 1551.91,1218.5 1552.5,1218.5 1553.09,1218.5 1553.67,1218.5 1554.26,1218.5 1554.85,1218.5 1555.43,1218.5 1556.02,1218.5 1556.6,1218.5 1557.19,1218.5 1557.78,1218.5 1558.36,1218.5 1558.95,1218.5 1559.54,1218.5 1560.12,1218.5 1560.71,1218.5 1561.3,1218.5 1561.88,1218.5 1562.47,1218.5 1563.06,1218.5 1563.64,1218.5 1564.23,1218.5 1564.81,1218.5 1565.4,1218.5 1565.99,1218.5 1566.57,1218.5 1567.16,1218.5 1567.75,1218.5 1568.33,1218.5 1568.92,1218.5 1569.51,1218.5 1570.09,1218.5 1570.68,1218.5 1571.27,1218.5 1571.85,1218.5 1572.44,1218.5 1573.02,1218.5 1573.61,1218.5 1574.2,1218.5 1574.78,1218.5 1575.37,1218.5 1575.96,1218.5 1576.54,1218.5 1577.13,1218.5 1577.72,1218.5 1578.3,1218.5 1578.89,1218.5 1579.47,1218.5 1580.06,1218.5 1580.65,1218.5 1581.23,1218.5 1581.82,1218.5 1582.41,1218.5 1582.99,1218.5 1583.58,1218.5 1584.17,1218.5 1584.75,1218.5 1585.34,1218.5 1585.93,1218.5 1586.51,1218.5 1587.1,1218.5 1587.68,1218.5 1588.27,1218.5 1588.86,1218.5 1589.44,1218.5 1590.03,1218.5 1590.62,1218.5 1591.2,1218.5 1591.79,1218.5 1592.38,1218.5 1592.96,1218.5 1593.55,1218.5 1594.14,1218.5 1594.72,1218.5 1595.31,1218.5 1595.89,1218.5 1596.48,1218.5 1597.07,1218.5 1597.65,1218.5 1598.24,1218.5 1598.83,1218.5 1599.41,1218.5 1600,1218.5 1600.59,1218.5 1601.17,1218.5 1601.76,1218.5 1602.34,1218.5 1602.93,1218.5 1603.52,1218.5 1604.1,1218.5 1604.69,1218.5 1605.28,1218.5 1605.86,1218.5 1606.45,1218.5 1607.04,1218.5 1607.62,1218.5 1608.21,1218.5 1608.8,1218.5 1609.38,1218.5 1609.97,1218.5 1610.55,1218.5 1611.14,1218.5 1611.73,1218.5 1612.31,1218.5 1612.9,1218.5 1613.49,1218.5 1614.07,1218.5 1614.66,1218.5 1615.25,1218.5 1615.83,1218.5 1616.42,1218.5 1617.01,1218.5 1617.59,1218.5 1618.18,1218.5 1618.76,1218.5 1619.35,1218.5 1619.94,1218.5 1620.52,1218.5 1621.11,1218.5 1621.7,1218.5 1622.28,1218.5 1622.87,1218.5 1623.46,1218.5 1624.04,1218.5 1624.63,1218.5 1625.22,1218.5 1625.8,1218.5 1626.39,1218.5 1626.97,1218.5 1627.56,1218.5 1628.15,1218.5 1628.73,1218.5 1629.32,1218.5 1629.91,1218.5 1630.49,1218.5 1631.08,1218.5 1631.67,1218.5 1632.25,1218.5 1632.84,1218.5 1633.42,1218.5 1634.01,1218.5 1634.6,1218.5 1635.18,1218.5 1635.77,1218.5 1636.36,1218.5 1636.94,1218.5 1637.53,1218.5 1638.12,1218.5 1638.7,1218.5 1639.29,1218.5 1639.88,1218.5 1640.46,1218.5 1641.05,1218.5 1641.63,1218.5 1642.22,1218.5 1642.81,1218.5 1643.39,1218.5 1643.98,1218.5 1644.57,1218.5 1645.15,1218.5 1645.74,1218.5 1646.33,1218.5 1646.91,1218.5 1647.5,1218.5 1648.09,1218.5 1648.67,1218.5 1649.26,1218.5 1649.84,1218.5 1650.43,1218.5 1651.02,1218.5 1651.6,1218.5 1652.19,1218.5 1652.78,1218.5 1653.36,1218.5 1653.95,1218.5 1654.54,1218.5 1655.12,1218.5 1655.71,1218.5 1656.29,1218.5 1656.88,1218.5 1657.47,1218.5 1658.05,1218.5 1658.64,1218.5 1659.23,1218.5 1659.81,1218.5 1660.4,1218.5 1660.99,1218.5 1661.57,1218.5 1662.16,1218.5 1662.75,1218.5 1663.33,1218.5 1663.92,1218.5 1664.5,1218.5 1665.09,1218.5 1665.68,1218.5 1666.26,1218.5 1666.85,1218.5 1667.44,1218.5 1668.02,1218.5 1668.61,1218.5 1669.2,1218.5 1669.78,1218.5 1670.37,1218.5 1670.96,1218.5 1671.54,1218.5 1672.13,1218.5 1672.71,1218.5 1673.3,1218.5 1673.89,1218.5 1674.47,1218.5 1675.06,1218.5 1675.65,1218.5 1676.23,1218.5 1676.82,1218.5 1677.41,1218.5 1677.99,1218.5 1678.58,1218.5 1679.17,1218.5 1679.75,1218.5 1680.34,1218.5 1680.92,1218.5 1681.51,1218.5 1682.1,1218.5 1682.68,1218.5 1683.27,1218.5 1683.86,1218.5 1684.44,1218.5 1685.03,1218.5 1685.62,1218.5 1686.2,1218.5 1686.79,1218.5 1687.37,1218.5 1687.96,1218.5 1688.55,1218.5 1689.13,1218.5 1689.72,1218.5 1690.31,1218.5 1690.89,1218.5 1691.48,1218.5 1692.07,1218.5 1692.65,1218.5 1693.24,1218.5 1693.83,1218.5 1694.41,1218.5 1695,1218.5 1695.58,1218.5 1696.17,1218.5 1696.76,1218.5 1697.34,1218.5 1697.93,1218.5 1698.52,1218.5 1699.1,1218.5 1699.69,1218.5 1700.28,1218.5 1700.86,1218.5 1701.45,1218.5 1702.04,1218.5 1702.62,1218.5 1703.21,1218.5 1703.79,1218.5 1704.38,1218.5 1704.97,1218.5 1705.55,1218.5 1706.14,1218.5 1706.73,1218.5 1707.31,1218.5 1707.9,1218.5 1708.49,1218.5 1709.07,1218.5 1709.66,1218.5 1710.24,1218.5 1710.83,1218.5 1711.42,1218.5 1712,1218.5 1712.59,1218.5 1713.18,1218.5 1713.76,1218.5 1714.35,1218.5 1714.94,1218.5 1715.52,1218.5 1716.11,1218.5 1716.7,1218.5 1717.28,1218.5 1717.87,1218.5 1718.45,1218.5 1719.04,1218.5 1719.63,1218.5 1720.21,1218.5 1720.8,1218.5 1721.39,1218.5 1721.97,1218.5 1722.56,1218.5 1723.15,1218.5 1723.73,1218.5 1724.32,1218.5 1724.91,1218.5 1725.49,1218.5 1726.08,1218.5 1726.66,1218.5 1727.25,1218.5 1727.84,1218.5 1728.42,1218.5 1729.01,1218.5 1729.6,1218.5 1730.18,1218.5 1730.77,1218.5 1731.36,1218.5 1731.94,1218.5 1732.53,1218.5 1733.11,1218.5 1733.7,1218.5 1734.29,1218.5 1734.87,1218.5 1735.46,1218.5 1736.05,1218.5 1736.63,1218.5 1737.22,1218.5 1737.81,1218.5 1738.39,1218.5 1738.98,1218.5 1739.57,1218.5 1740.15,1218.5 1740.74,1218.5 1741.32,1218.5 1741.91,1218.5 1742.5,1218.5 1743.08,1218.5 1743.67,1218.5 1744.26,1218.5 1744.84,1218.5 1745.43,1218.5 1746.02,1218.5 1746.6,1218.5 1747.19,1218.5 1747.78,1218.5 1748.36,1218.5 1748.95,1218.5 1749.53,1218.5 1750.12,1218.5 1750.71,1218.5 1751.29,1218.5 1751.88,1218.5 1752.47,1218.5 1753.05,1218.5 1753.64,1218.5 1754.23,1218.5 1754.81,1218.5 1755.4,1218.5 1755.99,1218.5 1756.57,1218.5 1757.16,1218.5 1757.74,1218.5 1758.33,1218.5 1758.92,1218.5 1759.5,1218.5 1760.09,1218.5 1760.68,1218.5 1761.26,1218.5 1761.85,1218.5 1762.44,1218.5 1763.02,1218.5 1763.61,1218.5 1764.19,1218.5 1764.78,1218.5 1765.37,1218.5 1765.95,1218.5 1766.54,1218.5 1767.13,1218.5 1767.71,1218.5 1768.3,1218.5 1768.89,1218.5 1769.47,1218.5 1770.06,1218.5 1770.65,1218.5 1771.23,1218.5 1771.82,1218.5 1772.4,1218.5 1772.99,1218.5 1773.58,1218.5 1774.16,1218.5 1774.75,1218.5 1775.34,1218.5 1775.92,1218.5 1776.51,1218.5 1777.1,1218.5 1777.68,1218.5 1778.27,1218.5 1778.86,1218.5 1779.44,1218.5 1780.03,1218.5 1780.61,1218.5 1781.2,1218.5 1781.79,1218.5 1782.37,1218.5 1782.96,1218.5 1783.55,1218.5 1784.13,1218.5 1784.72,1218.5 1785.31,1218.5 1785.89,1218.5 1786.48,1218.5 1787.06,1218.5 1787.65,1218.5 1788.24,1218.5 1788.82,1218.5 1789.41,1218.5 1790,1218.5 1790.58,1218.5 1791.17,1218.5 1791.76,1218.5 1792.34,1218.5 1792.93,1218.5 1793.52,1218.5 1794.1,1218.5 1794.69,1218.5 1795.27,1218.5 1795.86,1218.5 1796.45,1218.5 1797.03,1218.5 1797.62,1218.5 1798.21,1218.5 1798.79,1218.5 1799.38,1218.5 1799.97,1218.5 1800.55,1218.5 1801.14,1218.5 1801.73,1218.5 1802.31,1218.5 1802.9,1218.5 1803.48,1218.5 1804.07,1218.5 1804.66,1218.5 1805.24,1218.5 1805.83,1218.5 1806.42,1218.5 1807,1218.5 1807.59,1218.5 1808.18,1218.5 1808.76,1218.5 1809.35,1218.5 1809.94,1218.5 1810.52,1218.5 1811.11,1218.5 1811.69,1218.5 1812.28,1218.5 1812.87,1218.5 1813.45,1218.5 1814.04,1218.5 1814.63,1218.5 1815.21,1218.5 1815.8,1218.5 1816.39,1218.5 1816.97,1218.5 1817.56,1218.5 1818.14,1218.5 1818.73,1218.5 1819.32,1218.5 1819.9,1218.5 1820.49,1218.5 1821.08,1218.5 1821.66,1218.5 1822.25,1218.5 1822.84,1218.5 1823.42,1218.5 1824.01,1218.5 1824.6,1218.5 1825.18,1218.5 1825.77,1218.5 1826.35,1218.5 1826.94,1218.5 1827.53,1218.5 1828.11,1218.5 1828.7,1218.5 1829.29,1218.5 1829.87,1218.5 1830.46,1218.5 1831.05,1218.5 1831.63,1218.5 1832.22,1218.5 1832.81,1218.5 1833.39,1218.5 1833.98,1218.5 1834.56,1218.5 1835.15,1218.5 1835.74,1218.5 1836.32,1218.5 1836.91,1218.5 1837.5,1218.5 1838.08,1218.5 1838.67,1218.5 1839.26,1218.5 1839.84,1218.5 1840.43,1218.5 1841.01,1218.5 1841.6,1218.5 1842.19,1218.5 1842.77,1218.5 1843.36,1218.5 1843.95,1218.5 1844.53,1218.5 1845.12,1218.5 1845.71,1218.5 1846.29,1218.5 1846.88,1218.5 1847.47,1218.5 1848.05,1218.5 1848.64,1218.5 1849.22,1218.5 1849.81,1218.5 1850.4,1218.5 1850.98,1218.5 1851.57,1218.5 1852.16,1218.5 1852.74,1218.5 1853.33,1218.5 1853.92,1218.5 1854.5,1218.5 1855.09,1218.5 1855.68,1218.5 1856.26,1218.5 1856.85,1218.5 1857.43,1218.5 1858.02,1218.5 1858.61,1218.5 1859.19,1218.5 1859.78,1218.5 1860.37,1218.5 1860.95,1218.5 1861.54,1218.5 1862.13,1218.5 1862.71,1218.5 1863.3,1218.5 1863.88,1218.5 1864.47,1218.5 1865.06,1218.5 1865.64,1218.5 1866.23,1218.5 1866.82,1218.5 1867.4,1218.5 1867.99,1218.5 1868.58,1218.5 1869.16,1218.5 1869.75,1218.5 1870.34,1218.5 1870.92,1218.5 1871.51,1218.5 1872.09,1218.5 1872.68,1218.5 1873.27,1218.5 1873.85,1218.5 1874.44,1218.5 1875.03,1218.5 1875.61,1218.5 1876.2,1218.5 1876.79,1218.5 1877.37,1218.5 1877.96,1218.5 1878.55,1218.5 1879.13,1218.5 1879.72,1218.5 1880.3,1218.5 1880.89,1218.5 1881.48,1218.5 1882.06,1218.5 1882.65,1218.5 1883.24,1218.5 1883.82,1218.5 1884.41,1218.5 1885,1218.5 1885.58,1218.5 1886.17,1218.5 1886.76,1218.5 1887.34,1218.5 1887.93,1218.5 1888.51,1218.5 1889.1,1218.5 1889.69,1218.5 1890.27,1218.5 1890.86,1218.5 1891.45,1218.5 1892.03,1218.5 1892.62,1218.5 1893.21,1218.5 1893.79,1218.5 1894.38,1218.5 1894.96,1218.5 1895.55,1218.5 1896.14,1218.5 1896.72,1218.5 1897.31,1218.5 1897.9,1218.5 1898.48,1218.5 1899.07,1218.5 1899.66,1218.5 1900.24,1218.5 1900.83,1218.5 1901.42,1218.5 1902,1218.5 1902.59,1218.5 1903.17,1218.5 1903.76,1218.5 1904.35,1218.5 1904.93,1218.5 1905.52,1218.5 1906.11,1218.5 1906.69,1218.5 1907.28,1218.5 1907.87,1218.5 1908.45,1218.5 1909.04,1218.5 1909.63,1218.5 1910.21,1218.5 1910.8,1218.5 1911.38,1218.5 1911.97,1218.5 1912.56,1218.5 1913.14,1218.5 1913.73,1218.5 1914.32,1218.5 1914.9,1218.5 1915.49,1218.5 1916.08,1218.5 1916.66,1218.5 1917.25,1218.5 1917.83,1218.5 1918.42,1218.5 1919.01,1218.5 1919.59,1218.5 1920.18,1218.5 1920.77,1218.5 1921.35,1218.5 1921.94,1218.5 1922.53,1218.5 1923.11,1218.5 1923.7,1218.5 1924.29,1218.5 1924.87,1218.5 1925.46,1218.5 1926.04,1218.5 1926.63,1218.5 1927.22,1218.5 1927.8,1218.5 1928.39,1218.5 1928.98,1218.5 1929.56,1218.5 1930.15,1218.5 1930.74,1218.5 1931.32,1218.5 1931.91,1218.5 1932.5,1218.5 1933.08,1218.5 1933.67,1218.5 1934.25,1218.5 1934.84,1218.5 1935.43,1218.5 1936.01,1218.5 1936.6,1218.5 1937.19,1218.5 1937.77,1218.5 1938.36,1218.5 1938.95,1218.5 1939.53,1218.5 1940.12,1218.5 1940.71,1218.5 1941.29,1218.5 1941.88,1218.5 1942.46,1218.5 1943.05,1218.5 1943.64,1218.5 1944.22,1218.5 1944.81,1218.5 1945.4,1218.5 1945.98,1218.5 1946.57,1218.5 1947.16,1218.5 1947.74,1218.5 1948.33,1218.5 1948.91,1218.5 1949.5,1218.5 1950.09,1218.5 1950.67,1218.5 1951.26,1218.5 1951.85,1218.5 1952.43,1218.5 1953.02,1218.5 1953.61,1218.5 1954.19,1218.5 1954.78,1218.5 1955.37,1218.5 1955.95,1218.5 1956.54,1218.5 1957.12,1218.5 1957.71,1218.5 1958.3,1218.5 1958.88,1218.5 1959.47,1218.5 1960.06,1218.5 1960.64,1218.5 1961.23,1218.5 1961.82,1218.5 1962.4,1218.5 1962.99,1218.5 1963.58,1218.5 1964.16,1218.5 1964.75,1218.5 1965.33,1218.5 1965.92,1218.5 1966.51,1218.5 1967.09,1218.5 1967.68,1218.5 1968.27,1218.5 1968.85,1218.5 1969.44,1218.5 1970.03,1218.5 1970.61,1218.5 1971.2,1218.5 1971.78,1218.5 1972.37,1218.5 1972.96,1218.5 1973.54,1218.5 1974.13,1218.5 1974.72,1218.5 1975.3,1218.5 1975.89,1218.5 1976.48,1218.5 1977.06,1218.5 1977.65,1218.5 1978.24,1218.5 1978.82,1218.5 1979.41,1218.5 1979.99,1218.5 1980.58,1218.5 1981.17,1218.5 1981.75,1218.5 1982.34,1218.5 1982.93,1218.5 1983.51,1218.5 1984.1,1218.5 1984.69,1218.5 1985.27,1218.5 1985.86,1218.5 1986.45,1218.5 1987.03,1218.5 1987.62,1218.5 1988.2,1218.5 1988.79,1218.5 1989.38,1218.5 1989.96,1218.5 1990.55,1218.5 1991.14,1218.5 1991.72,1218.5 1992.31,1218.5 1992.9,1218.5 1993.48,1218.5 1994.07,1218.5 1994.65,1218.5 1995.24,1218.5 1995.83,1218.5 1996.41,1218.5 1997,1218.5 1997.59,1218.5 1998.17,1218.5 1998.76,1218.5 1999.35,1218.5 1999.93,1218.5 2000.52,1218.5 2001.11,1218.5 2001.69,1218.5 2002.28,1218.5 2002.86,1218.5 2003.45,1218.5 2004.04,1218.5 2004.62,1218.5 2005.21,1218.5 2005.8,1218.5 2006.38,1218.5 2006.97,1218.5 2007.56,1218.5 2008.14,1218.5 2008.73,1218.5 2009.32,1218.5 2009.9,1218.5 2010.49,1218.5 2011.07,1218.5 2011.66,1218.5 2012.25,1218.5 2012.83,1218.5 2013.42,1218.5 2014.01,1218.5 2014.59,1218.5 2015.18,1218.5 2015.77,1218.5 2016.35,1218.5 2016.94,1218.5 2017.53,1218.5 2018.11,1218.5 2018.7,1218.5 2019.28,1218.5 2019.87,1218.5 2020.46,1218.5 2021.04,1218.5 2021.63,1218.5 2022.22,1218.5 2022.8,1218.5 2023.39,1218.5 2023.98,1218.5 2024.56,1218.5 2025.15,1218.5 2025.73,1218.5 2026.32,1218.5 2026.91,1218.5 2027.49,1218.5 2028.08,1218.5 2028.67,1218.5 2029.25,1218.5 2029.84,1218.5 2030.43,1218.5 2031.01,1218.5 2031.6,1218.5 2032.19,1218.5 2032.77,1218.5 2033.36,1218.5 2033.94,1218.5 2034.53,1218.5 2035.12,1218.5 2035.7,1218.5 2036.29,1218.5 2036.88,1218.5 2037.46,1218.5 2038.05,1218.5 2038.64,1218.5 2039.22,1218.5 2039.81,1218.5 2040.4,1218.5 2040.98,1218.5 2041.57,1218.5 2042.15,1218.5 2042.74,1218.5 2043.33,1218.5 2043.91,1218.5 2044.5,1218.5 2045.09,1218.5 2045.67,1218.5 2046.26,1218.5 2046.85,1218.5 2047.43,1218.5 2048.02,1218.5 2048.6,1218.5 2049.19,1218.5 2049.78,1218.5 2050.36,1218.5 2050.95,1218.5 2051.54,1218.5 2052.12,1218.5 2052.71,1218.5 2053.3,1218.5 2053.88,1218.5 2054.47,1218.5 2055.06,1218.5 2055.64,1218.5 2056.23,1218.5 2056.81,1218.5 2057.4,1218.5 2057.99,1218.5 2058.57,1218.5 2059.16,1218.5 2059.75,1218.5 2060.33,1218.5 2060.92,1218.5 2061.51,1218.5 2062.09,1218.5 2062.68,1218.5 2063.27,1218.5 2063.85,1218.5 2064.44,1218.5 2065.02,1218.5 2065.61,1218.5 2066.2,1218.5 2066.78,1218.5 2067.37,1218.5 2067.96,1218.5 2068.54,1218.5 2069.13,1218.5 2069.72,1218.5 2070.3,1218.5 2070.89,1218.5 2071.48,1218.5 2072.06,1218.5 2072.65,1218.5 2073.23,1218.5 2073.82,1218.5 2074.41,1218.5 2074.99,1218.5 2075.58,1218.5 2076.17,1218.5 2076.75,1218.5 2077.34,1218.5 2077.93,1218.5 2078.51,1218.5 2079.1,1218.5 2079.68,1218.5 2080.27,1218.5 2080.86,1218.5 2081.44,1218.5 2082.03,1218.5 2082.62,1218.5 2083.2,1218.5 2083.79,1218.5 2084.38,1218.5 2084.96,1218.5 2085.55,1218.5 2086.14,1218.5 2086.72,1218.5 2087.31,1218.5 2087.89,1218.5 2088.48,1218.5 2089.07,1218.5 2089.65,1218.5 2090.24,1218.5 2090.83,1218.5 2091.41,1218.5 2092,1218.5 2092.59,1218.5 2093.17,1218.5 2093.76,1218.5 2094.35,1218.5 2094.93,1218.5 2095.52,1218.5 2096.1,1218.5 2096.69,1218.5 2097.28,1218.5 2097.86,1218.5 2098.45,1218.5 2099.04,1218.5 2099.62,1218.5 2100.21,1218.5 2100.8,1218.5 2101.38,1218.5 2101.97,1218.5 2102.55,1218.5 2103.14,1218.5 2103.73,1218.5 2104.31,1218.5 2104.9,1218.5 2105.49,1218.5 2106.07,1218.5 2106.66,1218.5 2107.25,1218.5 2107.83,1218.5 2108.42,1218.5 2109.01,1218.5 2109.59,1218.5 2110.18,1218.5 2110.76,1218.5 2111.35,1218.5 2111.94,1218.5 2112.52,1218.5 2113.11,1218.5 2113.7,1218.5 2114.28,1218.5 2114.87,1218.5 2115.46,1218.5 2116.04,1218.5 2116.63,1218.5 2117.22,1218.5 2117.8,1218.5 2118.39,1218.5 2118.97,1218.5 2119.56,1218.5 2120.15,1218.5 2120.73,1218.5 2121.32,1218.5 2121.91,1218.5 2122.49,1218.5 2123.08,1218.5 2123.67,1218.5 2124.25,1218.5 2124.84,1218.5 2125.42,1218.5 2126.01,1218.5 2126.6,1218.5 2127.18,1218.5 2127.77,1218.5 2128.36,1218.5 2128.94,1218.5 2129.53,1218.5 2130.12,1218.5 2130.7,1218.5 2131.29,1218.5 2131.88,1218.5 2132.46,1218.5 2133.05,1218.5 2133.63,1218.5 2134.22,1218.5 2134.81,1218.5 2135.39,1218.5 2135.98,1218.5 2136.57,1218.5 2137.15,1218.5 2137.74,1218.5 2138.33,1218.5 2138.91,1218.5 2139.5,1218.5 2140.09,1218.5 2140.67,1218.5 2141.26,1218.5 2141.84,1218.5 2142.43,1218.5 2143.02,1218.5 2143.6,1218.5 2144.19,1218.5 2144.78,1218.5 2145.36,1218.5 2145.95,1218.5 2146.54,1218.5 2147.12,1218.5 2147.71,1218.5 2148.3,1218.5 2148.88,1218.5 2149.47,1218.5 2150.05,1218.5 2150.64,1218.5 2151.23,1218.5 2151.81,1218.5 2152.4,1218.5 2152.99,1218.5 2153.57,1218.5 2154.16,1218.5 2154.75,1218.5 2155.33,1218.5 2155.92,1218.5 2156.5,1218.5 2157.09,1218.5 2157.68,1218.5 2158.26,1218.5 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1563.04,1202.09 1397.97,899.083 \"/>\n<polyline clip-path=\"url(#clip512)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1234.44 985.439,1202.09 2158.26,1202.09 2158.26,1234.44 985.439,1234.44 \"/>\n<path clip-path=\"url(#clip510)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip510)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip510)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip510)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip510)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip510)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip513\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip513)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip513)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip513)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip513)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip513)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip513)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip513)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip513)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip513)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip513)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip510)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip510)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip510)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip510)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip513)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-5856.65 164.351,-6785.11 164.91,-7630.93 165.469,-8399.48 166.029,-9097.61 166.588,-9728.04 167.147,-10295.2 167.706,-10803 168.266,-11255.5 168.825,-11656.2 169.384,-12008.5 169.943,-12315.6 170.503,-12580.4 171.062,-12805.8 171.621,-12326.5 172.18,-12504.2 172.74,-11547.2 173.299,-11697.1 173.858,-11817.1 174.417,-11909.3 174.977,-11975.6 175.536,-12004.1 176.095,-12018.9 176.655,-11667.2 177.214,-11637.8 177.773,-11016.8 178.332,-10965.6 178.892,-10653.3 179.451,-10573.9 180.01,-10266.6 180.569,-9960.34 181.129,-9876.43 181.688,-9772.15 182.247,-9668.75 182.806,-9555.16 183.366,-9277.62 183.925,-9012.49 184.484,-8895.87 185.043,-8777.42 185.603,-8654.26 186.162,-8522.57 186.721,-8150.16 187.28,-8014.85 187.84,-7777.74 188.399,-7638.17 188.958,-7403.16 189.517,-7076.23 190.077,-6854.71 190.636,-6639.69 191.195,-6432.46 191.754,-6161.97 192.314,-5886.17 192.873,-5693.88 193.432,-5441.91 193.991,-5266.92 194.551,-5092.29 195.11,-4985.82 195.669,-4817.54 196.228,-4657.62 196.788,-4506.15 197.347,-4248.72 197.906,-4153.67 198.465,-3965.2 199.025,-3872.82 199.584,-3695.29 200.143,-3567.39 200.702,-3484.34 201.262,-3360.17 201.821,-3196.81 202.38,-3038.49 202.939,-2962.5 203.499,-2771.7 204.058,-2693.7 204.617,-2545.81 205.176,-2369.82 205.736,-2268.66 206.295,-2166.51 206.854,-2003.33 207.413,-1914.48 207.973,-1794.26 208.532,-1676.31 209.091,-1596.27 209.65,-1459 210.21,-1355.61 210.769,-1257.7 211.328,-1157.43 211.887,-1034.9 212.447,-942.263 213.006,-853.213 213.565,-841.47 214.124,-807.804 214.684,-747.642 215.243,-661.72 215.802,-579.709 216.361,-498.74 216.921,-423.684 217.48,-395.976 218.039,-294.828 218.598,-274.464 219.158,-228.051 219.717,-156.849 220.276,-114.956 220.835,-71.8804 221.395,12.8671 221.954,51.5491 222.513,85.5007 223.072,163.179 223.632,240.56 224.191,269.23 224.75,278.428 225.309,308.966 225.869,338.263 226.428,390.486 226.987,436.719 227.546,422.793 228.106,488.612 228.665,494.231 229.224,543.39 229.783,591.005 230.343,575.813 230.902,603.063 231.461,607.044 232.02,652.168 232.58,670.528 233.139,671.428 233.698,694.347 234.257,712.553 234.817,729.983 235.376,729.352 235.935,748.011 236.494,802.247 237.054,797.974 237.613,818.014 238.172,889.04 238.731,902.739 239.291,878.741 239.85,889.994 240.409,902.869 240.968,916.231 241.528,908.948 242.087,903.184 242.646,916.508 243.205,893.543 243.765,928.904 244.324,960.75 244.883,935.402 245.442,949.03 246.002,975.989 246.561,986.808 247.12,999.38 247.679,993.03 248.239,1020.99 248.798,1049.92 249.357,1025.32 249.916,1017.32 250.476,992.863 251.035,1056.12 251.594,1049.8 252.153,1057.04 252.713,1048.97 253.272,1059.9 253.831,1069.53 254.39,1075.86 254.95,1070.78 255.509,1027.79 256.068,1071.41 256.627,1082.13 257.187,1057.65 257.746,1085.46 258.305,1093.76 258.864,1101.81 259.424,1097.01 259.983,1089.39 260.542,1083.64 261.101,1056.1 261.661,1052.17 262.22,1064.19 262.779,1108.98 263.338,1102.78 263.898,1061.79 264.457,1057.18 265.016,1033.19 265.575,1031.77 266.135,1026.92 266.694,1039.3 267.253,1069.62 267.812,1045.39 268.372,1059.27 268.931,1072.35 269.49,1067.97 270.049,1060.75 270.609,1056.11 271.168,1018.5 271.727,997.692 272.286,997.656 272.846,998.52 273.405,1011.17 273.964,1044.37 274.523,1055.82 275.083,1033.12 275.642,997.61 276.201,1013.93 276.76,995.923 277.32,1028.79 277.879,1025.85 278.438,1029.91 278.997,1047.08 279.557,1026.46 280.116,1023.98 280.675,1021.5 281.234,1034.48 281.794,1032.96 282.353,1064.23 282.912,1092.5 283.471,1086.42 284.031,1079.77 284.59,1073.33 285.149,1106.33 285.708,1065.58 286.268,1060.57 286.827,1038.26 287.386,1054.21 287.945,1030.83 288.505,1059.41 289.064,1087.23 289.623,1062.74 290.182,1056.9 290.742,1051.37 291.301,1093.59 291.86,1098.48 292.419,1107.33 292.979,1116.4 293.538,1061.21 294.097,1055.54 294.656,1086.38 295.216,1075.63 295.775,1098.04 296.334,1093.95 296.893,1100.17 297.453,1091.93 298.012,1083.55 298.571,1058.67 299.13,1051.92 299.69,1077.13 300.249,1101.35 300.808,1074.95 301.368,1096.62 301.927,1090.94 302.486,1096.9 303.045,1056.47 303.605,1049.04 304.164,1069.86 304.723,1046.7 305.282,1058.92 305.842,1063.17 306.401,1037.98 306.96,1015.58 307.519,1009.28 308.079,1038.31 308.638,1029.71 309.197,1019.21 309.756,1044.09 310.316,1090.19 310.875,1082.12 311.434,1070.14 311.993,1043.14 312.553,1033.89 313.112,1026.62 313.671,1034.51 314.23,1025.38 314.79,1018.69 315.349,977.318 315.908,971.23 316.467,982.744 317.027,995.227 317.586,986.773 318.145,932.039 318.704,913.682 319.264,914.993 319.823,909.751 320.382,906.718 320.941,921.506 321.501,913.892 322.06,911.589 322.619,925.974 323.178,952.835 323.738,949.209 324.297,963.524 324.856,975.854 325.415,983.722 325.975,977.414 326.534,970.658 327.093,927.421 327.652,943.231 328.212,957.015 328.771,972.563 329.33,967.037 329.889,964.693 330.449,981.181 331.008,974.327 331.567,983.937 332.126,990.597 332.686,1030.11 333.245,1007.1 333.804,999.313 334.363,1024.63 334.923,998.069 335.482,974.004 336.041,968.567 336.6,947.819 337.16,959.113 337.719,984.728 338.278,1008.58 338.837,1002.09 339.397,977.532 339.956,970.499 340.515,918.515 341.074,912.08 341.634,960.793 342.193,941.182 342.752,970.006 343.311,963.697 343.871,972.538 344.43,981.141 344.989,1001.95 345.548,1028.46 346.108,1018.07 346.667,988.478 347.226,994.958 347.785,972.313 348.345,968.665 348.904,1009.79 349.463,1017.53 350.022,1009.81 350.582,1000.61 351.141,1010.86 351.7,1002.08 352.259,1025.82 352.819,1029.84 353.378,1036.26 353.937,1073.52 354.496,1074.22 355.056,1044.67 355.615,1032.72 356.174,1007.93 356.733,999.694 357.293,991.972 357.852,948.892 358.411,958.353 358.97,920.934 359.53,933.234 360.089,893.4 360.648,952.059 361.207,927.831 361.767,920.672 362.326,916.396 362.885,911.772 363.444,908.966 364.004,936.268 364.563,964.229 365.122,972.838 365.681,964.248 366.241,939.386 366.8,979.704 367.359,957.954 367.918,949.121 368.478,944.533 369.037,933.426 369.596,915.877 370.155,959.805 370.715,935.243 371.274,940.854 371.833,967.983 372.392,926.744 372.952,952.832 373.511,942.145 374.07,917.431 374.629,907.899 375.189,917.029 375.748,893.685 376.307,921.054 376.866,933.842 377.426,892.329 377.985,874.306 378.544,888.545 379.103,917.026 379.663,943.341 380.222,966.842 380.781,940.865 381.34,932.579 381.9,894.957 382.459,907.213 383.018,922.926 383.577,934.217 384.137,925.154 384.696,919.339 385.255,914.383 385.814,939.689 386.374,934.477 386.933,911.458 387.492,888.804 388.051,850.624 388.611,849.164 389.17,828.359 389.729,776.801 390.288,813.92 390.848,828.964 391.407,826.543 391.966,824.307 392.525,854.318 393.085,847.422 393.644,810.919 394.203,827.474 394.762,827.336 395.322,826.234 395.881,840.786 396.44,839.839 396.999,824.83 397.559,774.791 398.118,778.336 398.677,764.486 399.236,762.972 399.796,778.784 400.355,777.064 400.914,774.824 401.473,793.21 402.033,793.915 402.592,795.271 403.151,764.352 403.71,768.131 404.27,769.901 404.829,756.393 405.388,806.962 405.947,791.427 406.507,857.558 407.066,854.321 407.625,899.472 408.184,908.557 408.744,855.279 409.303,817.172 409.862,846.895 410.421,824.008 410.981,839.339 411.54,785.577 412.099,782.977 412.658,766.144 413.218,765.398 413.777,765.717 414.336,750.649 414.895,752.654 415.455,756.35 416.014,789.642 416.573,771.727 417.132,754.948 417.692,756.626 418.251,757.195 418.81,744.889 419.369,733.235 419.929,716.262 420.488,669.707 421.047,675.089 421.606,697.896 422.166,735.052 422.725,687.413 423.284,708.711 423.843,710.86 424.403,730.664 424.962,734.54 425.521,752.692 426.08,788.96 426.64,803.23 427.199,795.731 427.758,792.463 428.318,822.259 428.877,866.478 429.436,858.819 429.995,823.902 430.555,835.894 431.114,837.271 431.673,816.807 432.232,801.284 432.792,879.418 433.351,872.979 433.91,864.634 434.469,841.859 435.029,802.895 435.588,845.384 436.147,856.313 436.706,867.282 437.266,811.729 437.825,789.151 438.384,757.029 438.943,742.136 439.503,742.364 440.062,759.608 440.621,779.153 441.18,812.556 441.74,776.403 442.299,774.832 442.858,742.759 443.417,742.596 443.977,740.791 444.536,742.406 445.095,759.374 445.654,764.287 446.214,730.422 446.773,698.842 447.332,636.995 447.891,662.814 448.451,683.277 449.01,671.831 449.569,675.478 450.128,699.745 450.688,684.975 451.247,677.723 451.806,680.913 452.365,665.371 452.925,655.171 453.484,693.938 454.043,679.785 454.602,682.766 455.162,686.623 455.721,705.286 456.28,723.736 456.839,726.764 457.399,727.854 457.958,729.214 458.517,731.474 459.076,715.162 459.636,716.731 460.195,751.178 460.754,768.63 461.313,765.649 461.873,748.37 462.432,732.355 462.991,783.488 463.55,781.892 464.11,778.891 464.669,763.999 465.228,811.504 465.787,824.034 466.347,804.531 466.906,784.127 467.465,815.652 468.024,859.709 468.584,870.81 469.143,865.297 469.702,861.593 470.261,886.465 470.821,929.542 471.38,920.53 471.939,910.03 472.498,902.136 473.058,897.068 473.617,875.761 474.176,853.106 474.735,863.931 475.295,858.09 475.854,853.616 476.413,846.26 476.972,776.055 477.532,773.929 478.091,759.764 478.65,770.701 479.209,753.181 479.769,752.646 480.328,753.069 480.887,766.594 481.446,798.669 482.006,815.377 482.565,796.501 483.124,810.32 483.683,805.728 484.243,772.062 484.802,772.515 485.361,786.18 485.92,782.743 486.48,781.378 487.039,775.02 487.598,757.75 488.157,756.991 488.717,738.717 489.276,723.951 489.835,710.58 490.394,713.453 490.954,728.859 491.513,730.394 492.072,730.019 492.631,746.623 493.191,747.574 493.75,761.579 494.309,759.721 494.868,793.639 495.428,787.158 495.987,751.829 496.546,733.656 497.105,767.526 497.665,731.305 498.224,750.167 498.783,749.469 499.342,747.234 499.902,729.536 500.461,732.07 501.02,747.489 501.579,745.86 502.139,740.85 502.698,789.325 503.257,769.837 503.816,768.387 504.376,752.77 504.935,716.143 505.494,717.62 506.053,702.579 506.613,704.058 507.172,702.009 507.731,719.101 508.29,704.672 508.85,704.49 509.409,704.184 509.968,722.073 510.527,736.944 511.087,753.5 511.646,753.354 512.205,734.066 512.764,765.619 513.324,793.193 513.883,793.351 514.442,791.695 515.001,774.161 515.561,773.684 516.12,770.724 516.679,733.532 517.238,715.597 517.798,652.947 518.357,690.603 518.916,724.37 519.475,726.81 520.035,728.319 520.594,729.516 521.153,730.634 521.712,761.427 522.272,773.865 522.831,754.728 523.39,751.81 523.949,748.042 524.509,748.517 525.068,744.844 525.627,744.174 526.186,742.975 526.746,711.742 527.305,708.096 527.864,680.335 528.423,681.646 528.983,700.858 529.542,716.159 530.101,700.109 530.66,701 531.22,672.221 531.779,689.132 532.338,724.971 532.897,710.175 533.457,709.433 534.016,720.68 534.575,720.755 535.134,720.87 535.694,719.93 536.253,719.438 536.812,718.294 537.371,717.743 537.931,686.013 538.49,671.989 539.049,658.897 539.608,647.87 540.168,634.172 540.727,640.546 541.286,663.103 541.845,682.974 542.405,700.564 542.964,703.437 543.523,702.952 544.082,738.426 544.642,769.695 545.201,764.212 545.76,762.3 546.319,777.956 546.879,778.261 547.438,777.191 547.997,773.863 548.556,800.917 549.116,782.368 549.675,732.922 550.234,720.716 550.793,720.119 551.353,702.415 551.912,701.168 552.471,697.054 553.031,731.239 553.59,746.443 554.149,761.537 554.708,759.617 555.268,758.774 555.827,743.402 556.386,711.158 556.945,678.74 557.505,698.082 558.064,746.292 558.623,763.116 559.182,729.512 559.742,709.849 560.301,712.037 560.86,710.098 561.419,698.874 561.979,682.757 562.538,699.377 563.097,685.488 563.656,688.347 564.216,689.996 564.775,705.849 565.334,704.705 565.893,702.287 566.453,734.729 567.012,734.99 567.571,732.707 568.13,731.644 568.69,698.74 569.249,704.189 569.808,703.954 570.367,657.358 570.927,645.12 571.486,680.501 572.045,683.63 572.604,702.894 573.164,719.506 573.723,736.417 574.282,752.469 574.841,753.205 575.401,770.652 575.96,752.885 576.519,735.505 577.078,732.734 577.638,749.097 578.197,730.658 578.756,745.266 579.315,744.926 579.875,730.766 580.434,730.504 580.993,746.502 581.552,713.358 582.112,732.584 582.671,728.596 583.23,745.581 583.789,742.375 584.349,724.034 584.908,738.558 585.467,737.829 586.026,721.215 586.586,739.694 587.145,738.972 587.704,723.966 588.263,741.035 588.823,741.761 589.382,753.985 589.941,750.758 590.5,751.415 591.06,738.248 591.619,768.811 592.178,768.248 592.737,782.971 593.297,762.377 593.856,741.552 594.415,691.76 594.974,693.351 595.534,710.456 596.093,643.745 596.652,630.812 597.211,598.441 597.771,604.135 598.33,611.006 598.889,665.883 599.448,669.031 600.008,671.592 600.567,671.368 601.126,641.094 601.685,647.657 602.245,648.083 602.804,671.856 603.363,671.939 603.922,674.555 604.482,658.369 605.041,693.549 605.6,677.889 606.159,695.544 606.719,662.594 607.278,668.789 607.837,690.143 608.396,673.718 608.956,658.844 609.515,695.495 610.074,685.228 610.633,700.793 611.193,730.493 611.752,777.766 612.311,775.509 612.87,720.96 613.43,720.654 613.989,690.215 614.548,710.487 615.107,713.599 615.667,745.279 616.226,756.717 616.785,738.265 617.344,718.73 617.904,720.389 618.463,747.736 619.022,761.691 619.581,741.725 620.141,757.792 620.7,770.74 621.259,796.799 621.818,806.171 622.378,786.177 622.937,764.719 623.496,757.449 624.055,722.281 624.615,720.48 625.174,737.232 625.733,753.452 626.292,749.28 626.852,728.401 627.411,726.824 627.97,726.126 628.529,708.541 629.089,723.658 629.648,706.145 630.207,690.785 630.766,724.686 631.326,755.161 631.885,733.977 632.444,762.277 633.003,728.28 633.563,678.947 634.122,693.039 634.681,708.947 635.24,726.526 635.8,704.481 636.359,770.492 636.918,765.713 637.477,777.333 638.037,789.368 638.596,782.168 639.155,793.157 639.714,786.262 640.274,748.754 640.833,712.407 641.392,728.339 641.951,713.217 642.511,710.652 643.07,695.543 643.629,698.25 644.188,716.67 644.748,683.519 645.307,714.597 645.866,664.143 646.425,665.358 646.985,668.142 647.544,716.376 648.103,716.743 648.662,718.716 649.222,718.247 649.781,703.579 650.34,703.739 650.899,717.437 651.459,715.723 652.018,746.791 652.577,708.059 653.136,693.697 653.696,677.63 654.255,691.593 654.814,672.772 655.373,672.672 655.933,709.222 656.492,709.249 657.051,692.278 657.61,675.205 658.17,760.912 658.729,773.542 659.288,768.292 659.847,772.999 660.407,735.473 660.966,719.308 661.525,716.004 662.084,699.035 662.644,715.665 663.203,701.439 663.762,698.384 664.321,715.445 664.881,710.258 665.44,727.238 665.999,737.642 666.558,738.431 667.118,720.584 667.677,718.968 668.236,714.494 668.795,680.994 669.355,665.939 669.914,666.01 670.473,653.208 671.032,657.854 671.592,691.506 672.151,688.418 672.71,685.245 673.269,702.57 673.829,719.964 674.388,702.867 674.947,670.274 675.506,621.235 676.066,673.626 676.625,673.91 677.184,675.913 677.743,678.596 678.303,646.025 678.862,631.829 679.421,652.34 679.981,620.174 680.54,655.385 681.099,657.648 681.658,660.326 682.218,647.037 682.777,665.123 683.336,634.044 683.895,621.489 684.455,605.966 685.014,645.365 685.573,647.327 686.132,634.901 686.692,634.947 687.251,622.868 687.81,644.735 688.369,648.769 688.929,654.802 689.488,659.177 690.047,660.029 690.606,653.202 691.166,627.563 691.725,648.45 692.284,634.777 692.843,636.378 693.403,640.214 693.962,627.032 694.521,629.12 695.08,632.178 695.64,636.428 696.199,602.869 696.758,608.017 697.317,610.815 697.877,618.028 698.436,638.167 698.995,623.824 699.554,612.428 700.114,634.007 700.673,588.69 701.232,577.371 701.791,599.514 702.351,573.68 702.91,580.367 703.469,588.97 704.028,597.8 704.588,602.5 705.147,610.928 705.706,619.621 706.265,625.334 706.825,631.251 707.384,681.561 707.943,670.256 708.502,656.598 709.062,644.665 709.621,696.816 710.18,710.934 710.739,742.583 711.299,757.236 711.858,772.653 712.417,736.517 712.976,734.981 713.536,717.768 714.095,685.427 714.654,689.016 715.213,738.904 715.773,754.754 716.332,735.899 716.891,731.681 717.45,760.578 718.01,773.524 718.569,739.157 719.128,752.084 719.687,730.204 720.247,744.236 720.806,742.565 721.365,740.332 721.924,737.412 722.484,757.181 723.043,789.593 723.602,783.175 724.161,776.954 724.721,723.99 725.28,707.209 725.839,738.774 726.398,721.826 726.958,720.519 727.517,718.112 728.076,749.616 728.635,745.58 729.195,791.01 729.754,740.433 730.313,721.793 730.872,723.093 731.432,738.047 731.991,717.607 732.55,685.733 733.109,701.302 733.669,684.437 734.228,685.358 734.787,700.604 735.346,682.656 735.906,718.194 736.465,749.003 737.024,762.179 737.583,760.514 738.143,773.911 738.702,771.454 739.261,770.423 739.82,765.032 740.38,761.604 740.939,742.969 741.498,789.646 742.057,800.961 742.617,796.636 743.176,776.559 743.735,754.586 744.294,750.574 744.854,729.731 745.413,712.973 745.972,715.207 746.531,728.043 747.091,727.782 747.65,724.923 748.209,752.107 748.768,731.735 749.328,730.89 749.887,745.699 750.446,756.929 751.005,736.347 751.565,716.863 752.124,746.582 752.683,730.013 753.242,713.62 753.802,711.166 754.361,675.393 754.92,676.588 755.479,665.27 756.039,650.127 756.598,637.572 757.157,657.681 757.716,642.998 758.276,628.591 758.835,614.012 759.394,620.455 759.953,639.499 760.513,619.75 761.072,608.72 761.631,646.644 762.19,666.706 762.75,682.905 763.309,698.421 763.868,710.36 764.427,726.144 764.987,725.439 765.546,708.425 766.105,707.728 766.664,708.428 767.224,709.128 767.783,691.997 768.342,708.14 768.901,691.962 769.461,724.145 770.02,725.87 770.579,722.436 771.138,703.597 771.698,701.543 772.257,686.612 772.816,681.873 773.375,681.657 773.935,680.928 774.494,683.185 775.053,683.867 775.612,666.058 776.172,649.12 776.731,617.897 777.29,622.479 777.849,606.322 778.409,643.204 778.968,647.461 779.527,666.458 780.086,654.147 780.646,668.038 781.205,655.584 781.764,641.126 782.323,628.445 782.883,648.352 783.442,619.775 784.001,592.558 784.56,613.973 785.12,602.729 785.679,624.078 786.238,638.993 786.797,642.3 787.357,680.606 787.916,647.888 788.475,633.188 789.034,622.125 789.594,623.604 790.153,628.577 790.712,615.696 791.271,637.636 791.831,645.011 792.39,644.686 792.949,630.974 793.508,632.766 794.068,666.252 794.627,651.023 795.186,656.288 795.745,657.275 796.305,629.116 796.864,620.418 797.423,638.632 797.982,655.191 798.542,659.257 799.101,641.152 799.66,625.767 800.219,647.053 800.779,649.319 801.338,651.013 801.897,667.902 802.456,667.293 803.016,653.455 803.575,653.445 804.134,655.38 804.693,673.619 805.253,670.202 805.812,667.727 806.371,671.534 806.931,671.658 807.49,672.576 808.049,706.692 808.608,722.553 809.168,687.172 809.727,688.537 810.286,688.487 810.845,706.016 811.405,721.017 811.964,719.823 812.523,720.7 813.082,734.751 813.642,733.215 814.201,762.203 814.76,789.76 815.319,785.133 815.879,749.535 816.438,745.47 816.997,741.392 817.556,755.263 818.116,797.975 818.675,791.77 819.234,783.197 819.793,745.98 820.353,776.283 820.912,752.936 821.471,796.404 822.03,806.533 822.59,830.082 823.149,823.674 823.708,831.78 824.267,842.732 824.827,837.33 825.386,843.895 825.945,820.062 826.504,814.885 827.064,823.202 827.623,867.962 828.182,839.456 828.741,860.08 829.301,835.435 829.86,807.728 830.419,782.852 830.978,810.352 831.538,769.086 832.097,796.376 832.656,791.996 833.215,803.292 833.775,747.037 834.334,727.524 834.893,742.695 835.452,754.831 836.012,720.416 836.571,722.514 837.13,721.814 837.689,671.759 838.249,687.979 838.808,655.738 839.367,640.24 839.926,643.021 840.486,626.862 841.045,629.995 841.604,630.254 842.163,637.972 842.723,624.808 843.282,611.537 843.841,598.92 844.4,606.121 844.96,611.867 845.519,614.364 846.078,633.249 846.637,652.919 847.197,672.914 847.756,674.201 848.315,673.142 848.874,657.879 849.434,662.6 849.993,698.242 850.552,697.672 851.111,712.645 851.671,679.34 852.23,648.461 852.789,632.317 853.348,631.956 853.908,634.1 854.467,620.197 855.026,623.921 855.585,655.465 856.145,638.819 856.704,642.138 857.263,616.411 857.822,636.732 858.382,658.389 858.941,660.091 859.5,678.476 860.059,663.831 860.619,667.531 861.178,688.516 861.737,674.313 862.296,675.742 862.856,631.023 863.415,633.697 863.974,671.363 864.533,685.419 865.093,667.501 865.652,667.2 866.211,670.658 866.77,671.811 867.33,671.416 867.889,623.437 868.448,625.877 869.007,629.395 869.567,634.702 870.126,638.095 870.685,642.897 871.244,678.485 871.804,614.912 872.363,605.873 872.922,611.678 873.481,616.698 874.041,637.093 874.6,639.649 875.159,669.474 875.718,688.486 876.278,673.334 876.837,672.372 877.396,692.066 877.955,740.159 878.515,738.426 879.074,734.704 879.633,745.778 880.192,741.14 880.752,736.182 881.311,734.826 881.87,731.475 882.429,726.652 882.989,694.238 883.548,712.851 884.107,697.259 884.666,712.266 885.226,729.706 885.785,745.146 886.344,724.562 886.903,721.058 887.463,717.49 888.022,734.162 888.581,744.222 889.14,709.783 889.7,692.693 890.259,704.909 890.818,673.711 891.377,673.96 891.937,691.313 892.496,674.731 893.055,644.34 893.614,629.651 894.174,616.762 894.733,621.57 895.292,605.094 895.851,657.344 896.411,657.615 896.97,643.481 897.529,630.068 898.088,666.555 898.648,664.189 899.207,663.697 899.766,681.69 900.325,700.095 900.885,666.656 901.444,687.777 902.003,688.544 902.562,688.84 903.122,687.994 903.681,686.947 904.24,683.507 904.799,697.431 905.359,697.245 905.918,710.403 906.477,689.404 907.036,691.365 907.596,688.439 908.155,672.449 908.714,689.035 909.273,690.984 909.833,658.077 910.392,678.973 910.951,694.956 911.51,681.086 912.07,666.792 912.629,651.654 913.188,700.029 913.747,701.182 914.307,764.433 914.866,746.111 915.425,743.06 915.984,724.471 916.544,755.264 917.103,734.897 917.662,717.878 918.221,717.226 918.781,729.342 919.34,707.581 919.899,704.915 920.458,722.946 921.018,739.896 921.577,704.774 922.136,720.409 922.695,715.713 923.255,717.365 923.814,715.912 924.373,762.178 924.932,743.214 925.492,722.236 926.051,702.946 926.61,686.58 927.169,672.338 927.729,671.191 928.288,656.528 928.847,655.075 929.406,657.84 929.966,688.116 930.525,673.881 931.084,673.05 931.644,658.805 932.203,710.568 932.762,722.614 933.321,720.201 933.881,717.809 934.44,717.236 934.999,716.124 935.558,711.419 936.118,725.006 936.677,740.077 937.236,767.563 937.795,778.013 938.355,772.111 938.914,783.964 939.473,761.465 940.032,786.231 940.592,813.572 941.151,802.925 941.71,798.228 942.269,773.757 942.829,753.441 943.388,716.056 943.947,664.288 944.506,646.353 945.066,631.809 945.625,667.913 946.184,665.828 946.743,682.247 947.303,667.057 947.862,619.09 948.421,622.672 948.98,656.448 949.54,625.479 950.099,611.41 950.658,632.207 951.217,622.101 951.777,625.628 952.336,615.474 952.895,637.089 953.454,625.6 954.014,598.634 954.573,616.879 955.132,637.343 955.691,655.742 956.251,660.855 956.81,644.896 957.369,664.2 957.928,648.825 958.488,648.423 959.047,668.899 959.606,750.612 960.165,746.391 960.725,758.185 961.284,769.493 961.843,784.926 962.402,729.603 962.962,710.399 963.521,706.229 964.08,703.75 964.639,704.722 965.199,703.719 965.758,700.577 966.317,699.536 966.876,698.933 967.436,701.268 967.995,698.56 968.554,681.588 969.113,697.623 969.673,680.343 970.232,700.433 970.791,699.529 971.35,699.118 971.91,683.984 972.469,684.125 973.028,699.878 973.587,701.786 974.147,667.02 974.706,680.229 975.265,697.608 975.824,696.553 976.384,693.049 976.943,769.909 977.502,748.534 978.061,746.438 978.621,727.841 979.18,773.08 979.739,765.471 980.298,745.422 980.858,724.75 981.417,740.395 981.976,735.009 982.535,721.195 983.095,750.346 983.654,776.657 984.213,792.556 984.772,756.48 985.332,737.34 985.891,785.684 986.45,766.202 987.009,742.324 987.569,771.164 988.128,766.211 988.687,796.611 989.246,778.215 989.806,804.981 990.365,780.861 990.924,762.798 991.483,739.61 992.043,740.258 992.602,757.254 993.161,752.595 993.72,735.843 994.28,718.235 994.839,702.23 995.398,687.632 995.957,656.462 996.517,659.099 997.076,613.618 997.635,630.887 998.194,665.609 998.754,682.058 999.313,668.034 999.872,669.425 1000.43,686.535 1000.99,734.191 1001.55,733.939 1002.11,716.904 1002.67,715.904 1003.23,698.071 1003.79,696.54 1004.35,641.027 1004.91,642.17 1005.46,659.368 1006.02,660.347 1006.58,662.54 1007.14,662.3 1007.7,662.26 1008.26,663.995 1008.82,695.763 1009.38,694.907 1009.94,712.813 1010.5,729.359 1011.06,745.433 1011.62,724.465 1012.18,722.838 1012.73,752.152 1013.29,733.332 1013.85,717.605 1014.41,681.504 1014.97,664.006 1015.53,682.171 1016.09,745.502 1016.65,757.181 1017.21,737.362 1017.77,703.261 1018.33,683.879 1018.89,666.784 1019.45,668.003 1020.01,669.723 1020.56,686.453 1021.12,702.325 1021.68,715.879 1022.24,730.05 1022.8,744.768 1023.36,725.141 1023.92,742.659 1024.48,706.013 1025.04,688.942 1025.6,657.123 1026.16,660.877 1026.72,661.216 1027.28,708.148 1027.83,691.206 1028.39,675.479 1028.95,691.103 1029.51,655.826 1030.07,638.685 1030.63,671.111 1031.19,636.445 1031.75,636.851 1032.31,640.934 1032.87,645.248 1033.43,661.103 1033.99,608.482 1034.55,627.637 1035.1,644.866 1035.66,633.959 1036.22,668.835 1036.78,669.427 1037.34,641.495 1037.9,660.789 1038.46,681.135 1039.02,663.164 1039.58,680.545 1040.14,680.908 1040.7,650.17 1041.26,652.363 1041.82,656.826 1042.38,658.612 1042.93,677.301 1043.49,673.806 1044.05,654.817 1044.61,669.491 1045.17,559.275 1045.73,568.402 1046.29,558.224 1046.85,564.284 1047.41,554.939 1047.97,510.647 1048.53,503.313 1049.09,495.821 1049.65,504.097 1050.2,479.71 1050.76,479.044 1051.32,458.188 1051.88,454.681 1052.44,435.462 1053,465.25 1053.56,478.45 1054.12,440.347 1054.68,453.791 1055.24,482.884 1055.8,446.06 1056.36,493.297 1056.92,551.804 1057.48,579.936 1058.03,567.562 1058.59,588.435 1059.15,594.609 1059.71,633.039 1060.27,664.738 1060.83,698.359 1061.39,684.168 1061.95,688.639 1062.51,657.042 1063.07,692.15 1063.63,725.464 1064.19,708.49 1064.75,711.599 1065.3,724.479 1065.86,739.225 1066.42,688.523 1066.98,703.727 1067.54,670.834 1068.1,719.055 1068.66,688.078 1069.22,644.987 1069.78,632.051 1070.34,633.153 1070.9,668.872 1071.46,666.245 1072.02,665.874 1072.57,683.218 1073.13,648.33 1073.69,664.868 1074.25,682.55 1074.81,681.211 1075.37,635.911 1075.93,634.367 1076.49,678.216 1077.05,697.011 1077.61,699.704 1078.17,732.04 1078.73,731.361 1079.29,730.985 1079.85,727.683 1080.4,725.721 1080.96,722.298 1081.52,723.862 1082.08,755.603 1082.64,752.456 1083.2,717.522 1083.76,730.985 1084.32,746.973 1084.88,728.629 1085.44,727.537 1086,740.991 1086.56,755.339 1087.12,750.058 1087.67,701.71 1088.23,705.144 1088.79,686.854 1089.35,655.512 1089.91,674.732 1090.47,691.705 1091.03,655.506 1091.59,657.935 1092.15,639.029 1092.71,643.566 1093.27,645.245 1093.83,663.722 1094.39,680.192 1094.94,681.341 1095.5,729.501 1096.06,723.691 1096.62,707.681 1097.18,757.751 1097.74,753.572 1098.3,746.254 1098.86,744.367 1099.42,756.327 1099.98,771.336 1100.54,782.761 1101.1,796.419 1101.66,868.22 1102.22,839.195 1102.77,847.344 1103.33,822.932 1103.89,816.49 1104.45,824.314 1105.01,815.224 1105.57,774.579 1106.13,770.42 1106.69,766.91 1107.25,760.01 1107.81,755.384 1108.37,767.688 1108.93,777.418 1109.49,800.869 1110.04,807.302 1110.6,801.635 1111.16,794.286 1111.72,724.319 1112.28,786.599 1112.84,780.285 1113.4,805.351 1113.96,795.328 1114.52,773.708 1115.08,816.267 1115.64,795.945 1116.2,807.204 1116.76,819.446 1117.31,810.213 1117.87,831.673 1118.43,822.362 1118.99,780.148 1119.55,823.432 1120.11,814.676 1120.67,773.776 1121.23,801.406 1121.79,777.838 1122.35,755.713 1122.91,732.903 1123.47,710.481 1124.03,710.643 1124.59,643.377 1125.14,674.433 1125.7,673.99 1126.26,662.385 1126.82,675.999 1127.38,660.32 1127.94,630.787 1128.5,631.917 1129.06,618.079 1129.62,619.759 1130.18,640.706 1130.74,592.404 1131.3,595.696 1131.86,568.21 1132.41,589.211 1132.97,609.128 1133.53,642.061 1134.09,644.279 1134.65,676.955 1135.21,678.328 1135.77,710.184 1136.33,705.083 1136.89,735.616 1137.45,702.312 1138.01,684.113 1138.57,669.892 1139.13,641.888 1139.68,614.113 1140.24,632.663 1140.8,633.405 1141.36,618.544 1141.92,637.88 1142.48,671.336 1143.04,687.591 1143.6,669.219 1144.16,685.906 1144.72,686.471 1145.28,702.133 1145.84,674.546 1146.4,643.927 1146.96,679.676 1147.51,646.059 1148.07,632.42 1148.63,633.41 1149.19,653.799 1149.75,703.328 1150.31,701.08 1150.87,651.157 1151.43,634.349 1151.99,670.712 1152.55,635.746 1153.11,636.413 1153.67,640.986 1154.23,659.61 1154.78,628.068 1155.34,597.826 1155.9,620.5 1156.46,608.439 1157.02,613.884 1157.58,623.887 1158.14,630.234 1158.7,630.526 1159.26,651.998 1159.82,621.724 1160.38,610.29 1160.94,631.159 1161.5,631.913 1162.05,651.414 1162.61,688.814 1163.17,704.595 1163.73,705.669 1164.29,704.354 1164.85,718.651 1165.41,702.08 1165.97,684.511 1166.53,673.132 1167.09,672.682 1167.65,673.268 1168.21,675.744 1168.77,673.71 1169.33,659.076 1169.88,679.776 1170.44,692.43 1171,740.617 1171.56,785.024 1172.12,751.654 1172.68,750.97 1173.24,762.864 1173.8,727.173 1174.36,724.916 1174.92,719.734 1175.48,717.593 1176.04,746.89 1176.6,745.12 1177.15,728.9 1177.71,728.815 1178.27,757.581 1178.83,785.052 1179.39,778.97 1179.95,728.919 1180.51,744 1181.07,709.22 1181.63,678.973 1182.19,644.976 1182.75,643.346 1183.31,662.082 1183.87,661.361 1184.43,644.283 1184.98,647.473 1185.54,618.227 1186.1,624.002 1186.66,626.781 1187.22,631.067 1187.78,632.409 1188.34,619.811 1188.9,654.366 1189.46,669.462 1190.02,669.865 1190.58,688.811 1191.14,675.214 1191.7,677.845 1192.25,693.857 1192.81,692.42 1193.37,706.293 1193.93,720.315 1194.49,719.186 1195.05,719.925 1195.61,718.484 1196.17,731.659 1196.73,744.758 1197.29,745.675 1197.85,727.715 1198.41,728.019 1198.97,726.726 1199.52,720.775 1200.08,703.04 1200.64,733.792 1201.2,729.442 1201.76,713.257 1202.32,726.494 1202.88,755.673 1203.44,707.012 1204,704.467 1204.56,736.982 1205.12,733.352 1205.68,767.02 1206.24,747.667 1206.8,759.983 1207.35,740.383 1207.91,718.355 1208.47,732.204 1209.03,744.849 1209.59,726.717 1210.15,720.447 1210.71,684.284 1211.27,651.751 1211.83,635.513 1212.39,594.405 1212.95,601.458 1213.51,640.487 1214.07,678.259 1214.62,678.166 1215.18,678.478 1215.74,643.124 1216.3,628.746 1216.86,634.527 1217.42,603.485 1217.98,606.498 1218.54,644.216 1219.1,678.759 1219.66,647.884 1220.22,631.369 1220.78,602.621 1221.34,587.955 1221.89,594.757 1222.45,599.879 1223.01,603.425 1223.57,623.29 1224.13,640.685 1224.69,644.758 1225.25,663.837 1225.81,632.931 1226.37,668.657 1226.93,672.655 1227.49,718.665 1228.05,699.243 1228.61,665.374 1229.17,650.231 1229.72,652.656 1230.28,640.83 1230.84,642.534 1231.4,645.276 1231.96,649.67 1232.52,652.045 1233.08,637.871 1233.64,657.896 1234.2,674.438 1234.76,690.494 1235.32,688.7 1235.88,705.091 1236.44,735.33 1236.99,702.288 1237.55,748.58 1238.11,762.563 1238.67,763.22 1239.23,792.738 1239.79,790.086 1240.35,740.114 1240.91,737.322 1241.47,717.17 1242.03,716.275 1242.59,712.729 1243.15,713.315 1243.71,707.172 1244.26,704.246 1244.82,719.777 1245.38,717.009 1245.94,712.999 1246.5,710.575 1247.06,712.362 1247.62,725.948 1248.18,691.612 1248.74,660.032 1249.3,645.819 1249.86,650.635 1250.42,669.143 1250.98,669.729 1251.54,655.415 1252.09,642.708 1252.65,645.314 1253.21,662.663 1253.77,665.38 1254.33,653.631 1254.89,723.797 1255.45,721.77 1256.01,717.702 1256.57,730.808 1257.13,744.16 1257.69,759.331 1258.25,771.236 1258.81,751.486 1259.36,744.865 1259.92,757.719 1260.48,770.639 1261.04,782.082 1261.6,711.257 1262.16,693.101 1262.72,658.279 1263.28,625.733 1263.84,612.574 1264.4,614.037 1264.96,570.049 1265.52,561.641 1266.08,616.674 1266.63,590.371 1267.19,628.196 1267.75,612.866 1268.31,569.655 1268.87,577.524 1269.43,614.252 1269.99,601.815 1270.55,624.066 1271.11,613.522 1271.67,617.257 1272.23,605.173 1272.79,625.166 1273.35,631.025 1273.91,633.077 1274.46,650.111 1275.02,669.401 1275.58,666.392 1276.14,636.37 1276.7,637.728 1277.26,608.434 1277.82,564.582 1278.38,572.915 1278.94,595.366 1279.5,601.745 1280.06,593.11 1280.62,613.298 1281.18,617.754 1281.73,620.512 1282.29,623.126 1282.85,629.385 1283.41,616.92 1283.97,590.161 1284.53,609.584 1285.09,660.362 1285.65,664.35 1286.21,601.549 1286.77,639.627 1287.33,690.749 1287.89,705.522 1288.45,686.046 1289,719.815 1289.56,653.825 1290.12,642.859 1290.68,628.743 1291.24,617.019 1291.8,654.044 1292.36,670.85 1292.92,675.238 1293.48,642.329 1294.04,677.282 1294.6,694.702 1295.16,773.067 1295.72,781.411 1296.28,742.96 1296.83,754.461 1297.39,783.782 1297.95,776.45 1298.51,791.416 1299.07,769.016 1299.63,731.26 1300.19,712.581 1300.75,694.094 1301.31,726.122 1301.87,697.162 1302.43,726.724 1302.99,721.684 1303.55,672.173 1304.1,657.77 1304.66,679.955 1305.22,665.893 1305.78,682.231 1306.34,667.511 1306.9,664.918 1307.46,665.036 1308.02,696.459 1308.58,729.097 1309.14,712.414 1309.7,743.962 1310.26,773.034 1310.82,767.905 1311.38,746.045 1311.93,776.201 1312.49,758.895 1313.05,802.419 1313.61,782.288 1314.17,762.713 1314.73,772.842 1315.29,770.411 1315.85,745.568 1316.41,761.754 1316.97,694.247 1317.53,708.792 1318.09,691.397 1318.65,726.395 1319.2,738.104 1319.76,672.393 1320.32,658.372 1320.88,663.832 1321.44,665.962 1322,653.029 1322.56,624.381 1323.12,630.392 1323.68,616.307 1324.24,651.933 1324.8,683.875 1325.36,681.765 1325.92,681.496 1326.47,666.448 1327.03,683.938 1327.59,681.977 1328.15,650.455 1328.71,666.824 1329.27,685.891 1329.83,689.229 1330.39,671.395 1330.95,684.237 1331.51,667.712 1332.07,603.059 1332.63,593.049 1333.19,596.049 1333.75,602.118 1334.3,603.677 1334.86,605.959 1335.42,626.369 1335.98,658.011 1336.54,677.08 1337.1,679.789 1337.66,677.785 1338.22,693.906 1338.78,677.362 1339.34,712.379 1339.9,697.711 1340.46,712.21 1341.02,709.059 1341.57,705.932 1342.13,736.083 1342.69,749.102 1343.25,743.919 1343.81,756.107 1344.37,722.389 1344.93,709.326 1345.49,741.085 1346.05,740.966 1346.61,737.95 1347.17,735.285 1347.73,693.3 1348.29,662.167 1348.84,698.068 1349.4,713.905 1349.96,727.914 1350.52,676.782 1351.08,677.109 1351.64,709.13 1352.2,726.978 1352.76,739.969 1353.32,750.35 1353.88,781.209 1354.44,726.518 1355,688.746 1355.56,672.23 1356.12,739.813 1356.67,735.708 1357.23,732.049 1357.79,745.083 1358.35,739.612 1358.91,701.821 1359.47,702.615 1360.03,736.337 1360.59,731.481 1361.15,728.808 1361.71,776.671 1362.27,768.949 1362.83,747.911 1363.39,745.965 1363.94,745.93 1364.5,758.395 1365.06,723.351 1365.62,734.974 1366.18,716.623 1366.74,727.723 1367.3,758.304 1367.86,737.344 1368.42,736.209 1368.98,765.886 1369.54,762.792 1370.1,775.5 1370.66,814.233 1371.21,792.925 1371.77,769.32 1372.33,763.69 1372.89,743.203 1373.45,754.962 1374.01,733.842 1374.57,719.36 1375.13,668.612 1375.69,688.659 1376.25,635.242 1376.81,654.149 1377.37,641.739 1377.93,643.556 1378.49,664.691 1379.04,667.072 1379.6,656.529 1380.16,671.714 1380.72,673.386 1381.28,690.576 1381.84,672.08 1382.4,705.826 1382.96,687.494 1383.52,702.401 1384.08,718.228 1384.64,735.389 1385.2,750.174 1385.76,760.612 1386.31,754.228 1386.87,767.661 1387.43,764.019 1387.99,794.933 1388.55,785.59 1389.11,796.867 1389.67,821.583 1390.23,803.281 1390.79,781.929 1391.35,793.86 1391.91,759.112 1392.47,736.196 1393.03,732.164 1393.58,711.191 1394.14,699.373 1394.7,633.637 1395.26,619.857 1395.82,595.789 1396.38,600.207 1396.94,620.231 1397.5,589.544 1398.06,593.627 1398.62,596.218 1399.18,616.744 1399.74,606.91 1400.3,594.796 1400.86,584.265 1401.41,573.307 1401.97,565.104 1402.53,568.928 1403.09,589.364 1403.65,596.163 1404.21,612.849 1404.77,630.852 1405.33,617.842 1405.89,652.787 1406.45,651.722 1407.01,683.382 1407.57,694.237 1408.13,729.748 1408.68,742.366 1409.24,707.372 1409.8,704.707 1410.36,687.187 1410.92,704.899 1411.48,704.332 1412.04,701.301 1412.6,667.047 1413.16,651.361 1413.72,635.199 1414.28,654.946 1414.84,674.846 1415.4,690.356 1415.95,693.064 1416.51,676.93 1417.07,675.554 1417.63,644.07 1418.19,645.205 1418.75,647.995 1419.31,686.372 1419.87,700.106 1420.43,681.521 1420.99,647.641 1421.55,634.423 1422.11,638.625 1422.67,671.544 1423.23,705.085 1423.78,703.864 1424.34,750.507 1424.9,746.703 1425.46,740.323 1426.02,735.289 1426.58,730.08 1427.14,741.049 1427.7,719.871 1428.26,688.383 1428.82,654.471 1429.38,670.257 1429.94,672.901 1430.5,689.699 1431.05,690.498 1431.61,656.657 1432.17,641.994 1432.73,643.373 1433.29,631.214 1433.85,652.244 1434.41,672.574 1434.97,671.603 1435.53,657.275 1436.09,640.023 1436.65,641.985 1437.21,609.708 1437.77,613.384 1438.33,615.891 1438.88,620.445 1439.44,606.909 1440,628.407 1440.56,633.571 1441.12,668.547 1441.68,654.15 1442.24,687.444 1442.8,638.977 1443.36,661.431 1443.92,646.401 1444.48,644.915 1445.04,613.916 1445.6,587.64 1446.15,597.003 1446.71,600.736 1447.27,588.386 1447.83,593.849 1448.39,616.653 1448.95,654.194 1449.51,702.765 1450.07,686.646 1450.63,684.647 1451.19,685.21 1451.75,703.591 1452.31,721.291 1452.87,753.632 1453.42,733.296 1453.98,750.081 1454.54,727.281 1455.1,713.412 1455.66,713.14 1456.22,709.777 1456.78,708.163 1457.34,677.124 1457.9,689.068 1458.46,701.384 1459.02,681.786 1459.58,651.034 1460.14,666.809 1460.7,680.943 1461.25,664.321 1461.81,682.264 1462.37,714.05 1462.93,717.817 1463.49,737.254 1464.05,702.469 1464.61,714.763 1465.17,729.002 1465.73,774.774 1466.29,770.311 1466.85,733.3 1467.41,732.513 1467.97,777.909 1468.52,773.037 1469.08,785.037 1469.64,781.52 1470.2,776.413 1470.76,773.587 1471.32,737.043 1471.88,747.58 1472.44,742.912 1473,725.016 1473.56,737.085 1474.12,716.216 1474.68,699.451 1475.24,667.334 1475.79,649.973 1476.35,638.522 1476.91,638.721 1477.47,654.444 1478.03,640.523 1478.59,641.31 1479.15,624.315 1479.71,610.748 1480.27,632.251 1480.83,589.646 1481.39,624.645 1481.95,611.458 1482.51,598.44 1483.07,603.167 1483.62,622.857 1484.18,639.787 1484.74,644.543 1485.3,645.593 1485.86,613.038 1486.42,602.343 1486.98,620.475 1487.54,593.205 1488.1,614.968 1488.66,620.963 1489.22,639.23 1489.78,670.706 1490.34,688.823 1490.89,724.173 1491.45,726.395 1492.01,723.438 1492.57,738.809 1493.13,728.646 1493.69,724.444 1494.25,736.724 1494.81,768.138 1495.37,762.131 1495.93,759.338 1496.49,789.784 1497.05,818.552 1497.61,811.752 1498.16,819.669 1498.72,856.465 1499.28,828.719 1499.84,836.53 1500.4,841.574 1500.96,829.462 1501.52,837.348 1502.08,792.701 1502.64,752.32 1503.2,762.107 1503.76,789.384 1504.32,798.898 1504.88,727.016 1505.44,711.306 1505.99,708.611 1506.55,707.754 1507.11,709.052 1507.67,706.801 1508.23,700.925 1508.79,671.535 1509.35,702.765 1509.91,715.952 1510.47,678.308 1511.03,663.038 1511.59,664.121 1512.15,647.002 1512.71,633.347 1513.26,631.121 1513.82,633.98 1514.38,619.814 1514.94,605.746 1515.5,577.969 1516.06,535.128 1516.62,525.922 1517.18,532.588 1517.74,558.054 1518.3,551.846 1518.86,593.505 1519.42,583.428 1519.98,607.526 1520.53,609.919 1521.09,617.409 1521.65,588.895 1522.21,594.848 1522.77,617.058 1523.33,620.331 1523.89,639.845 1524.45,639.851 1525.01,626.976 1525.57,663.598 1526.13,679.3 1526.69,679.53 1527.25,665.718 1527.81,683.417 1528.36,684.844 1528.92,652.445 1529.48,652.815 1530.04,658.084 1530.6,625.809 1531.16,611.995 1531.72,647.727 1532.28,636.793 1532.84,639.327 1533.4,624.584 1533.96,611.49 1534.52,633.223 1535.08,602.46 1535.63,655.345 1536.19,606.318 1536.75,610.321 1537.31,552.361 1537.87,625.472 1538.43,646.06 1538.99,649.572 1539.55,633.563 1540.11,637.508 1540.67,641.022 1541.23,627.631 1541.79,646.685 1542.35,660.632 1542.9,630.481 1543.46,635.717 1544.02,655.442 1544.58,659.232 1545.14,645.19 1545.7,678.286 1546.26,694.724 1546.82,692.559 1547.38,723.376 1547.94,752.148 1548.5,749.277 1549.06,730.455 1549.62,759.836 1550.18,736.614 1550.73,767.674 1551.29,728.661 1551.85,724.357 1552.41,736.087 1552.97,734.235 1553.53,751.626 1554.09,748.009 1554.65,745.157 1555.21,744.643 1555.77,742.931 1556.33,723.46 1556.89,722.904 1557.45,721.022 1558,706.031 1558.56,673.945 1559.12,707.659 1559.68,669.496 1560.24,684.665 1560.8,670.882 1561.36,689.258 1561.92,687.38 1562.48,690.823 1563.04,708.136 1563.6,706.189 1564.16,701.268 1564.72,733.011 1565.28,745.952 1565.83,739.712 1566.39,737.362 1566.95,751.43 1567.51,746.701 1568.07,745.682 1568.63,757.229 1569.19,770.769 1569.75,783.251 1570.31,743.452 1570.87,756.14 1571.43,752.244 1571.99,767.337 1572.55,777.624 1573.1,783.79 1573.66,777.13 1574.22,757.464 1574.78,769.549 1575.34,748.139 1575.9,729.937 1576.46,725.914 1577.02,756.664 1577.58,750.007 1578.14,764.96 1578.7,761.559 1579.26,792.755 1579.82,753.831 1580.37,733.482 1580.93,714.427 1581.49,713.92 1582.05,698.211 1582.61,680.978 1583.17,679.716 1583.73,649.725 1584.29,650.616 1584.85,668.449 1585.41,684.747 1585.97,669.008 1586.53,669.687 1587.09,690.159 1587.65,670.541 1588.2,688.853 1588.76,689.601 1589.32,675.819 1589.88,674.342 1590.44,674.082 1591,705.147 1591.56,685.171 1592.12,718.376 1592.68,684.064 1593.24,646.646 1593.8,629.137 1594.36,644.754 1594.92,616.383 1595.47,602.463 1596.03,604.593 1596.59,590.956 1597.15,584.573 1597.71,572.46 1598.27,575.902 1598.83,565.857 1599.39,572.543 1599.95,625.446 1600.51,609.758 1601.07,627.194 1601.63,661.536 1602.19,663.145 1602.74,631.735 1603.3,635.341 1603.86,637.034 1604.42,642.396 1604.98,591.936 1605.54,597.025 1606.1,606.382 1606.66,577.818 1607.22,579.943 1607.78,569.945 1608.34,576.404 1608.9,578.157 1609.46,584.351 1610.02,623.222 1610.57,643.695 1611.13,648.27 1611.69,603.596 1612.25,609.547 1612.81,633.401 1613.37,656.401 1613.93,692.347 1614.49,677.603 1615.05,660.259 1615.61,680.249 1616.17,678.246 1616.73,658.069 1617.29,660.444 1617.84,678.942 1618.4,633.72 1618.96,655.227 1619.52,642.695 1620.08,628.332 1620.64,630.694 1621.2,619.964 1621.76,642.881 1622.32,627.77 1622.88,632.791 1623.44,637.803 1624,643.576 1624.56,645.472 1625.11,664.711 1625.67,616.375 1626.23,635.246 1626.79,638.013 1627.35,659.399 1627.91,629.985 1628.47,616.846 1629.03,555.931 1629.59,563.201 1630.15,537.075 1630.71,544.243 1631.27,569.126 1631.83,573.468 1632.39,595.574 1632.94,604.082 1633.5,609.317 1634.06,664.25 1634.62,648.774 1635.18,656.058 1635.74,639.436 1636.3,659.458 1636.86,677.976 1637.42,663.423 1637.98,650.15 1638.54,640.358 1639.1,643.191 1639.66,649.762 1640.21,652.835 1640.77,655.846 1641.33,658.396 1641.89,659.351 1642.45,659.938 1643.01,661.193 1643.57,631.941 1644.13,618.925 1644.69,621.092 1645.25,637.632 1645.81,638.344 1646.37,676.398 1646.93,693.989 1647.48,709.786 1648.04,740.611 1648.6,735.418 1649.16,698.369 1649.72,716.162 1650.28,715.709 1650.84,733.957 1651.4,718.649 1651.96,719.381 1652.52,730.353 1653.08,759.513 1653.64,752.674 1654.2,763.49 1654.76,745.677 1655.31,743.819 1655.87,739.94 1656.43,738.2 1656.99,718.443 1657.55,701.556 1658.11,669.97 1658.67,668.688 1659.23,719.306 1659.79,736.942 1660.35,699.269 1660.91,697.927 1661.47,699.835 1662.03,684.274 1662.58,683.965 1663.14,718.647 1663.7,732.831 1664.26,742.099 1664.82,753.794 1665.38,750.152 1665.94,729.156 1666.5,738.797 1667.06,718.173 1667.62,665.037 1668.18,679.174 1668.74,646.511 1669.3,650.363 1669.85,638.986 1670.41,689.491 1670.97,657.252 1671.53,692.272 1672.09,706.228 1672.65,674.495 1673.21,724.745 1673.77,720.059 1674.33,717.788 1674.89,714.53 1675.45,715.999 1676.01,698.215 1676.57,698.032 1677.13,758.947 1677.68,751.869 1678.24,781.887 1678.8,794.319 1679.36,754.251 1679.92,777.378 1680.48,770.265 1681.04,764.201 1681.6,793.05 1682.16,804.625 1682.72,811.696 1683.28,820.473 1683.84,844.306 1684.4,805.704 1684.95,812.765 1685.51,789.986 1686.07,785.373 1686.63,829.01 1687.19,819.549 1687.75,812.1 1688.31,819.368 1688.87,846.572 1689.43,853.78 1689.99,842.193 1690.55,834.548 1691.11,809.384 1691.67,819.488 1692.23,796.087 1692.78,774.183 1693.34,687.359 1693.9,687.121 1694.46,701.519 1695.02,665.567 1695.58,678.716 1696.14,659.935 1696.7,657.218 1697.26,626.452 1697.82,660.396 1698.38,676.055 1698.94,643.069 1699.5,648.846 1700.05,646.75 1700.61,648.515 1701.17,619.182 1701.73,658.062 1702.29,628.046 1702.85,593.252 1703.41,598.458 1703.97,622.467 1704.53,630.263 1705.09,615.123 1705.65,601.979 1706.21,575.459 1706.77,614.642 1707.32,620.192 1707.88,607.541 1708.44,612.175 1709,617.127 1709.56,607.184 1710.12,595.548 1710.68,620.135 1711.24,644.123 1711.8,648.367 1712.36,652.843 1712.92,666.159 1713.48,684.077 1714.04,689.486 1714.6,703.107 1715.15,702.539 1715.71,701.987 1716.27,699.207 1716.83,684.212 1717.39,686.94 1717.95,685.572 1718.51,689.858 1719.07,675.799 1719.63,727.575 1720.19,727.874 1720.75,729.57 1721.31,741.571 1721.87,739.241 1722.42,736.578 1722.98,684.697 1723.54,700.026 1724.1,716.714 1724.66,716.81 1725.22,732.724 1725.78,729.239 1726.34,712.507 1726.9,728.123 1727.46,729.095 1728.02,727.705 1728.58,770.178 1729.14,762.356 1729.69,758.149 1730.25,753.289 1730.81,751.872 1731.37,748.743 1731.93,749.598 1732.49,742.527 1733.05,704.67 1733.61,701.107 1734.17,717.291 1734.73,700.932 1735.29,684.278 1735.85,664.373 1736.41,635.866 1736.97,637.944 1737.52,609.677 1738.08,595.847 1738.64,617.894 1739.2,618.071 1739.76,653.042 1740.32,656.688 1740.88,674.78 1741.44,677.623 1742,693.856 1742.56,661.641 1743.12,681.074 1743.68,725.746 1744.24,704.187 1744.79,670.573 1745.35,686.332 1745.91,704.361 1746.47,718.082 1747.03,702.181 1747.59,735.737 1748.15,762.666 1748.71,740.001 1749.27,721.066 1749.83,704.309 1750.39,688.384 1750.95,656.584 1751.51,694.293 1752.06,693.808 1752.62,723.038 1753.18,683.693 1753.74,666.716 1754.3,633.068 1754.86,648.777 1755.42,666.112 1755.98,665.346 1756.54,646.343 1757.1,651.006 1757.66,669.588 1758.22,671.132 1758.78,658.765 1759.34,644.669 1759.89,660.562 1760.45,662.602 1761.01,662.907 1761.57,646.072 1762.13,647.969 1762.69,649.275 1763.25,586.62 1763.81,590.94 1764.37,625.42 1764.93,612.082 1765.49,618.089 1766.05,634.012 1766.61,619.957 1767.16,637.594 1767.72,623.608 1768.28,657.252 1768.84,643.638 1769.4,676.248 1769.96,675.213 1770.52,691.199 1771.08,674.721 1771.64,677.48 1772.2,728.015 1772.76,707.728 1773.32,701.779 1773.88,667.61 1774.43,667.326 1774.99,650.689 1775.55,683.123 1776.11,684.218 1776.67,715.138 1777.23,740.578 1777.79,720.24 1778.35,688.751 1778.91,686.464 1779.47,654.127 1780.03,654.858 1780.59,656.205 1781.15,641.119 1781.71,610.21 1782.26,614.884 1782.82,604.987 1783.38,609.449 1783.94,599.385 1784.5,590.517 1785.06,544.789 1785.62,588.026 1786.18,593.73 1786.74,631.03 1787.3,651.602 1787.86,669.073 1788.42,667.041 1788.98,667.843 1789.53,652.868 1790.09,640.096 1790.65,643.224 1791.21,646.985 1791.77,648.465 1792.33,682.96 1792.89,714.756 1793.45,740.136 1794.01,749.918 1794.57,714.674 1795.13,716.751 1795.69,718.281 1796.25,717.891 1796.8,714.986 1797.36,741.953 1797.92,754.483 1798.48,781.671 1799.04,780.757 1799.6,762.151 1800.16,758.793 1800.72,771.034 1801.28,734.025 1801.84,778.753 1802.4,756.692 1802.96,752.277 1803.52,747.155 1804.08,731.57 1804.63,680.403 1805.19,684.619 1805.75,685.176 1806.31,686.94 1806.87,686.571 1807.43,685.085 1807.99,716.451 1808.55,698.735 1809.11,680.465 1809.67,713.472 1810.23,731.918 1810.79,745.45 1811.35,758.046 1811.9,749.667 1812.46,668.372 1813.02,685.317 1813.58,688.639 1814.14,723.736 1814.7,720.154 1815.26,745.408 1815.82,725.875 1816.38,708.353 1816.94,738.508 1817.5,735.797 1818.06,729.312 1818.62,757.454 1819.18,737.865 1819.73,752.633 1820.29,718.185 1820.85,701.54 1821.41,699.348 1821.97,699.56 1822.53,700.596 1823.09,683.786 1823.65,682.41 1824.21,682.058 1824.77,666.142 1825.33,666.532 1825.89,666.642 1826.45,665.05 1827,618.742 1827.56,640.521 1828.12,646.105 1828.68,663.404 1829.24,664.711 1829.8,649.271 1830.36,651.346 1830.92,620.347 1831.48,610.426 1832.04,596.762 1832.6,597.642 1833.16,584.417 1833.72,572.884 1834.27,584.468 1834.83,590.892 1835.39,598.359 1835.95,600.305 1836.51,604.795 1837.07,606.433 1837.63,592.168 1838.19,597.357 \"/>\n<path clip-path=\"url(#clip513)\" d=\"M720.247 692.875 L720.806 692.875 L721.365 692.875 L721.924 692.875 L722.484 692.875 L723.043 692.875 L723.602 692.875 L724.161 692.875 L724.721 692.875 L725.28 692.875 L725.839 692.875 L726.398 692.875 L726.958 692.875 L727.517 692.875 L728.076 692.875 L728.635 692.875 L729.195 692.875 L729.754 692.875 L730.313 692.875 L730.872 692.875 L731.432 692.875 L731.991 692.875 L732.55 692.875 L733.109 692.875 L733.669 692.875 L734.228 692.875 L734.787 692.875 L735.346 692.875 L735.906 692.875 L736.465 692.875 L737.024 692.875 L737.583 692.875 L738.143 692.875 L738.702 692.875 L739.261 692.875 L739.82 692.875 L740.38 692.875 L740.939 692.875 L741.498 692.875 L742.057 692.875 L742.617 692.875 L743.176 692.875 L743.735 692.875 L744.294 692.875 L744.854 692.875 L745.413 692.875 L745.972 692.875 L746.531 692.875 L747.091 692.875 L747.65 692.875 L748.209 692.875 L748.768 692.875 L749.328 692.875 L749.887 692.875 L750.446 692.875 L751.005 692.875 L751.565 692.875 L752.124 692.875 L752.683 692.875 L753.242 692.875 L753.802 692.875 L754.361 692.875 L754.92 692.875 L755.479 692.875 L756.039 692.875 L756.598 692.875 L757.157 692.875 L757.716 692.875 L758.276 692.875 L758.835 692.875 L759.394 692.875 L759.953 692.875 L760.513 692.875 L761.072 692.875 L761.631 692.875 L762.19 692.875 L762.75 692.875 L763.309 692.875 L763.868 692.875 L764.427 692.875 L764.987 692.875 L765.546 692.875 L766.105 692.875 L766.664 692.875 L767.224 692.875 L767.783 692.875 L768.342 692.875 L768.901 692.875 L769.461 692.875 L770.02 692.875 L770.579 692.875 L771.138 692.875 L771.698 692.875 L772.257 692.875 L772.816 692.875 L773.375 692.875 L773.935 692.875 L774.494 692.875 L775.053 692.875 L775.612 692.875 L776.172 692.875 L776.731 692.875 L777.29 692.875 L777.849 692.875 L778.409 692.875 L778.968 692.875 L779.527 692.875 L780.086 692.875 L780.646 692.875 L781.205 692.875 L781.764 692.875 L782.323 692.875 L782.883 692.875 L783.442 692.875 L784.001 692.875 L784.56 692.875 L785.12 692.875 L785.679 692.875 L786.238 692.875 L786.797 692.875 L787.357 692.875 L787.916 692.875 L788.475 692.875 L789.034 692.875 L789.594 692.875 L790.153 692.875 L790.712 692.875 L791.271 692.875 L791.831 692.875 L792.39 692.875 L792.949 692.875 L793.508 692.875 L794.068 692.875 L794.627 692.875 L795.186 692.875 L795.745 692.875 L796.305 692.875 L796.864 692.875 L797.423 692.875 L797.982 692.875 L798.542 692.875 L799.101 692.875 L799.66 692.875 L800.219 692.875 L800.779 692.875 L801.338 692.875 L801.897 692.875 L802.456 692.875 L803.016 692.875 L803.575 692.875 L804.134 692.875 L804.693 692.875 L805.253 692.875 L805.812 692.875 L806.371 692.875 L806.931 692.875 L807.49 692.875 L808.049 692.875 L808.608 692.875 L809.168 692.875 L809.727 692.875 L810.286 692.875 L810.845 692.875 L811.405 692.875 L811.964 692.875 L812.523 692.875 L813.082 692.875 L813.642 692.875 L814.201 692.875 L814.76 692.875 L815.319 692.875 L815.879 692.875 L816.438 692.875 L816.997 692.875 L817.556 692.875 L818.116 692.875 L818.675 692.875 L819.234 692.875 L819.793 692.875 L820.353 692.875 L820.912 692.875 L821.471 692.875 L822.03 692.875 L822.59 692.875 L823.149 692.875 L823.708 692.875 L824.267 692.875 L824.827 692.875 L825.386 692.875 L825.945 692.875 L826.504 692.875 L827.064 692.875 L827.623 692.875 L828.182 692.875 L828.741 692.875 L829.301 692.875 L829.86 692.875 L830.419 692.875 L830.978 692.875 L831.538 692.875 L832.097 692.875 L832.656 692.875 L833.215 692.875 L833.775 692.875 L834.334 692.875 L834.893 692.875 L835.452 692.875 L836.012 692.875 L836.571 692.875 L837.13 692.875 L837.689 692.875 L838.249 692.875 L838.808 692.875 L839.367 692.875 L839.926 692.875 L840.486 692.875 L841.045 692.875 L841.604 692.875 L842.163 692.875 L842.723 692.875 L843.282 692.875 L843.841 692.875 L844.4 692.875 L844.96 692.875 L845.519 692.875 L846.078 692.875 L846.637 692.875 L847.197 692.875 L847.756 692.875 L848.315 692.875 L848.874 692.875 L849.434 692.875 L849.993 692.875 L850.552 692.875 L851.111 692.875 L851.671 692.875 L852.23 692.875 L852.789 692.875 L853.348 692.875 L853.908 692.875 L854.467 692.875 L855.026 692.875 L855.585 692.875 L856.145 692.875 L856.704 692.875 L857.263 692.875 L857.822 692.875 L858.382 692.875 L858.941 692.875 L859.5 692.875 L860.059 692.875 L860.619 692.875 L861.178 692.875 L861.737 692.875 L862.296 692.875 L862.856 692.875 L863.415 692.875 L863.974 692.875 L864.533 692.875 L865.093 692.875 L865.652 692.875 L866.211 692.875 L866.77 692.875 L867.33 692.875 L867.889 692.875 L868.448 692.875 L869.007 692.875 L869.567 692.875 L870.126 692.875 L870.685 692.875 L871.244 692.875 L871.804 692.875 L872.363 692.875 L872.922 692.875 L873.481 692.875 L874.041 692.875 L874.6 692.875 L875.159 692.875 L875.718 692.875 L876.278 692.875 L876.837 692.875 L877.396 692.875 L877.955 692.875 L878.515 692.875 L879.074 692.875 L879.633 692.875 L880.192 692.875 L880.752 692.875 L881.311 692.875 L881.87 692.875 L882.429 692.875 L882.989 692.875 L883.548 692.875 L884.107 692.875 L884.666 692.875 L885.226 692.875 L885.785 692.875 L886.344 692.875 L886.903 692.875 L887.463 692.875 L888.022 692.875 L888.581 692.875 L889.14 692.875 L889.7 692.875 L890.259 692.875 L890.818 692.875 L891.377 692.875 L891.937 692.875 L892.496 692.875 L893.055 692.875 L893.614 692.875 L894.174 692.875 L894.733 692.875 L895.292 692.875 L895.851 692.875 L896.411 692.875 L896.97 692.875 L897.529 692.875 L898.088 692.875 L898.648 692.875 L899.207 692.875 L899.766 692.875 L900.325 692.875 L900.885 692.875 L901.444 692.875 L902.003 692.875 L902.562 692.875 L903.122 692.875 L903.681 692.875 L904.24 692.875 L904.799 692.875 L905.359 692.875 L905.918 692.875 L906.477 692.875 L907.036 692.875 L907.596 692.875 L908.155 692.875 L908.714 692.875 L909.273 692.875 L909.833 692.875 L910.392 692.875 L910.951 692.875 L911.51 692.875 L912.07 692.875 L912.629 692.875 L913.188 692.875 L913.747 692.875 L914.307 692.875 L914.866 692.875 L915.425 692.875 L915.984 692.875 L916.544 692.875 L917.103 692.875 L917.662 692.875 L918.221 692.875 L918.781 692.875 L919.34 692.875 L919.899 692.875 L920.458 692.875 L921.018 692.875 L921.577 692.875 L922.136 692.875 L922.695 692.875 L923.255 692.875 L923.814 692.875 L924.373 692.875 L924.932 692.875 L925.492 692.875 L926.051 692.875 L926.61 692.875 L927.169 692.875 L927.729 692.875 L928.288 692.875 L928.847 692.875 L929.406 692.875 L929.966 692.875 L930.525 692.875 L931.084 692.875 L931.644 692.875 L932.203 692.875 L932.762 692.875 L933.321 692.875 L933.881 692.875 L934.44 692.875 L934.999 692.875 L935.558 692.875 L936.118 692.875 L936.677 692.875 L937.236 692.875 L937.795 692.875 L938.355 692.875 L938.914 692.875 L939.473 692.875 L940.032 692.875 L940.592 692.875 L941.151 692.875 L941.71 692.875 L942.269 692.875 L942.829 692.875 L943.388 692.875 L943.947 692.875 L944.506 692.875 L945.066 692.875 L945.625 692.875 L946.184 692.875 L946.743 692.875 L947.303 692.875 L947.862 692.875 L948.421 692.875 L948.98 692.875 L949.54 692.875 L950.099 692.875 L950.658 692.875 L951.217 692.875 L951.777 692.875 L952.336 692.875 L952.895 692.875 L953.454 692.875 L954.014 692.875 L954.573 692.875 L955.132 692.875 L955.691 692.875 L956.251 692.875 L956.81 692.875 L957.369 692.875 L957.928 692.875 L958.488 692.875 L959.047 692.875 L959.606 692.875 L960.165 692.875 L960.725 692.875 L961.284 692.875 L961.843 692.875 L962.402 692.875 L962.962 692.875 L963.521 692.875 L964.08 692.875 L964.639 692.875 L965.199 692.875 L965.758 692.875 L966.317 692.875 L966.876 692.875 L967.436 692.875 L967.995 692.875 L968.554 692.875 L969.113 692.875 L969.673 692.875 L970.232 692.875 L970.791 692.875 L971.35 692.875 L971.91 692.875 L972.469 692.875 L973.028 692.875 L973.587 692.875 L974.147 692.875 L974.706 692.875 L975.265 692.875 L975.824 692.875 L976.384 692.875 L976.943 692.875 L977.502 692.875 L978.061 692.875 L978.621 692.875 L979.18 692.875 L979.739 692.875 L980.298 692.875 L980.858 692.875 L981.417 692.875 L981.976 692.875 L982.535 692.875 L983.095 692.875 L983.654 692.875 L984.213 692.875 L984.772 692.875 L985.332 692.875 L985.891 692.875 L986.45 692.875 L987.009 692.875 L987.569 692.875 L988.128 692.875 L988.687 692.875 L989.246 692.875 L989.806 692.875 L990.365 692.875 L990.924 692.875 L991.483 692.875 L992.043 692.875 L992.602 692.875 L993.161 692.875 L993.72 692.875 L994.28 692.875 L994.839 692.875 L995.398 692.875 L995.957 692.875 L996.517 692.875 L997.076 692.875 L997.635 692.875 L998.194 692.875 L998.754 692.875 L999.313 692.875 L999.872 692.875 L1000.43 692.875 L1000.99 692.875 L1001.55 692.875 L1002.11 692.875 L1002.67 692.875 L1003.23 692.875 L1003.79 692.875 L1004.35 692.875 L1004.91 692.875 L1005.46 692.875 L1006.02 692.875 L1006.58 692.875 L1007.14 692.875 L1007.7 692.875 L1008.26 692.875 L1008.82 692.875 L1009.38 692.875 L1009.94 692.875 L1010.5 692.875 L1011.06 692.875 L1011.62 692.875 L1012.18 692.875 L1012.73 692.875 L1013.29 692.875 L1013.85 692.875 L1014.41 692.875 L1014.97 692.875 L1015.53 692.875 L1016.09 692.875 L1016.65 692.875 L1017.21 692.875 L1017.77 692.875 L1018.33 692.875 L1018.89 692.875 L1019.45 692.875 L1020.01 692.875 L1020.56 692.875 L1021.12 692.875 L1021.68 692.875 L1022.24 692.875 L1022.8 692.875 L1023.36 692.875 L1023.92 692.875 L1024.48 692.875 L1025.04 692.875 L1025.6 692.875 L1026.16 692.875 L1026.72 692.875 L1027.28 692.875 L1027.83 692.875 L1028.39 692.875 L1028.95 692.875 L1029.51 692.875 L1030.07 692.875 L1030.63 692.875 L1031.19 692.875 L1031.75 692.875 L1032.31 692.875 L1032.87 692.875 L1033.43 692.875 L1033.99 692.875 L1034.55 692.875 L1035.1 692.875 L1035.66 692.875 L1036.22 692.875 L1036.78 692.875 L1037.34 692.875 L1037.9 692.875 L1038.46 692.875 L1039.02 692.875 L1039.58 692.875 L1040.14 692.875 L1040.7 692.875 L1041.26 692.875 L1041.82 692.875 L1042.38 692.875 L1042.93 692.875 L1043.49 692.875 L1044.05 692.875 L1044.61 692.875 L1045.17 692.875 L1045.73 692.875 L1046.29 692.875 L1046.85 692.875 L1047.41 692.875 L1047.97 692.875 L1048.53 692.875 L1049.09 692.875 L1049.65 692.875 L1050.2 692.875 L1050.76 692.875 L1051.32 692.875 L1051.88 692.875 L1052.44 692.875 L1053 692.875 L1053.56 692.875 L1054.12 692.875 L1054.68 692.875 L1055.24 692.875 L1055.8 692.875 L1056.36 692.875 L1056.92 692.875 L1057.48 692.875 L1058.03 692.875 L1058.59 692.875 L1059.15 692.875 L1059.71 692.875 L1060.27 692.875 L1060.83 692.875 L1061.39 692.875 L1061.95 692.875 L1062.51 692.875 L1063.07 692.875 L1063.63 692.875 L1064.19 692.875 L1064.75 692.875 L1065.3 692.875 L1065.86 692.875 L1066.42 692.875 L1066.98 692.875 L1067.54 692.875 L1068.1 692.875 L1068.66 692.875 L1069.22 692.875 L1069.78 692.875 L1070.34 692.875 L1070.9 692.875 L1071.46 692.875 L1072.02 692.875 L1072.57 692.875 L1073.13 692.875 L1073.69 692.875 L1074.25 692.875 L1074.81 692.875 L1075.37 692.875 L1075.93 692.875 L1076.49 692.875 L1077.05 692.875 L1077.61 692.875 L1078.17 692.875 L1078.73 692.875 L1079.29 692.875 L1079.85 692.875 L1080.4 692.875 L1080.96 692.875 L1081.52 692.875 L1082.08 692.875 L1082.64 692.875 L1083.2 692.875 L1083.76 692.875 L1084.32 692.875 L1084.88 692.875 L1085.44 692.875 L1086 692.875 L1086.56 692.875 L1087.12 692.875 L1087.67 692.875 L1088.23 692.875 L1088.79 692.875 L1089.35 692.875 L1089.91 692.875 L1090.47 692.875 L1091.03 692.875 L1091.59 692.875 L1092.15 692.875 L1092.71 692.875 L1093.27 692.875 L1093.83 692.875 L1094.39 692.875 L1094.94 692.875 L1095.5 692.875 L1096.06 692.875 L1096.62 692.875 L1097.18 692.875 L1097.74 692.875 L1098.3 692.875 L1098.86 692.875 L1099.42 692.875 L1099.98 692.875 L1100.54 692.875 L1101.1 692.875 L1101.66 692.875 L1102.22 692.875 L1102.77 692.875 L1103.33 692.875 L1103.89 692.875 L1104.45 692.875 L1105.01 692.875 L1105.57 692.875 L1106.13 692.875 L1106.69 692.875 L1107.25 692.875 L1107.81 692.875 L1108.37 692.875 L1108.93 692.875 L1109.49 692.875 L1110.04 692.875 L1110.6 692.875 L1111.16 692.875 L1111.72 692.875 L1112.28 692.875 L1112.84 692.875 L1113.4 692.875 L1113.96 692.875 L1114.52 692.875 L1115.08 692.875 L1115.64 692.875 L1116.2 692.875 L1116.76 692.875 L1117.31 692.875 L1117.87 692.875 L1118.43 692.875 L1118.99 692.875 L1119.55 692.875 L1120.11 692.875 L1120.67 692.875 L1121.23 692.875 L1121.79 692.875 L1122.35 692.875 L1122.91 692.875 L1123.47 692.875 L1124.03 692.875 L1124.59 692.875 L1125.14 692.875 L1125.7 692.875 L1126.26 692.875 L1126.82 692.875 L1127.38 692.875 L1127.94 692.875 L1128.5 692.875 L1129.06 692.875 L1129.62 692.875 L1130.18 692.875 L1130.74 692.875 L1131.3 692.875 L1131.86 692.875 L1132.41 692.875 L1132.97 692.875 L1133.53 692.875 L1134.09 692.875 L1134.65 692.875 L1135.21 692.875 L1135.77 692.875 L1136.33 692.875 L1136.89 692.875 L1137.45 692.875 L1138.01 692.875 L1138.57 692.875 L1139.13 692.875 L1139.68 692.875 L1140.24 692.875 L1140.8 692.875 L1141.36 692.875 L1141.92 692.875 L1142.48 692.875 L1143.04 692.875 L1143.6 692.875 L1144.16 692.875 L1144.72 692.875 L1145.28 692.875 L1145.84 692.875 L1146.4 692.875 L1146.96 692.875 L1147.51 692.875 L1148.07 692.875 L1148.63 692.875 L1149.19 692.875 L1149.75 692.875 L1150.31 692.875 L1150.87 692.875 L1151.43 692.875 L1151.99 692.875 L1152.55 692.875 L1153.11 692.875 L1153.67 692.875 L1154.23 692.875 L1154.78 692.875 L1155.34 692.875 L1155.9 692.875 L1156.46 692.875 L1157.02 692.875 L1157.58 692.875 L1158.14 692.875 L1158.7 692.875 L1159.26 692.875 L1159.82 692.875 L1160.38 692.875 L1160.94 692.875 L1161.5 692.875 L1162.05 692.875 L1162.61 692.875 L1163.17 692.875 L1163.73 692.875 L1164.29 692.875 L1164.85 692.875 L1165.41 692.875 L1165.97 692.875 L1166.53 692.875 L1167.09 692.875 L1167.65 692.875 L1168.21 692.875 L1168.77 692.875 L1169.33 692.875 L1169.88 692.875 L1170.44 692.875 L1171 692.875 L1171.56 692.875 L1172.12 692.875 L1172.68 692.875 L1173.24 692.875 L1173.8 692.875 L1174.36 692.875 L1174.92 692.875 L1175.48 692.875 L1176.04 692.875 L1176.6 692.875 L1177.15 692.875 L1177.71 692.875 L1178.27 692.875 L1178.83 692.875 L1179.39 692.875 L1179.95 692.875 L1180.51 692.875 L1181.07 692.875 L1181.63 692.875 L1182.19 692.875 L1182.75 692.875 L1183.31 692.875 L1183.87 692.875 L1184.43 692.875 L1184.98 692.875 L1185.54 692.875 L1186.1 692.875 L1186.66 692.875 L1187.22 692.875 L1187.78 692.875 L1188.34 692.875 L1188.9 692.875 L1189.46 692.875 L1190.02 692.875 L1190.58 692.875 L1191.14 692.875 L1191.7 692.875 L1192.25 692.875 L1192.81 692.875 L1193.37 692.875 L1193.93 692.875 L1194.49 692.875 L1195.05 692.875 L1195.61 692.875 L1196.17 692.875 L1196.73 692.875 L1197.29 692.875 L1197.85 692.875 L1198.41 692.875 L1198.97 692.875 L1199.52 692.875 L1200.08 692.875 L1200.64 692.875 L1201.2 692.875 L1201.76 692.875 L1202.32 692.875 L1202.88 692.875 L1203.44 692.875 L1204 692.875 L1204.56 692.875 L1205.12 692.875 L1205.68 692.875 L1206.24 692.875 L1206.8 692.875 L1207.35 692.875 L1207.91 692.875 L1208.47 692.875 L1209.03 692.875 L1209.59 692.875 L1210.15 692.875 L1210.71 692.875 L1211.27 692.875 L1211.83 692.875 L1212.39 692.875 L1212.95 692.875 L1213.51 692.875 L1214.07 692.875 L1214.62 692.875 L1215.18 692.875 L1215.74 692.875 L1216.3 692.875 L1216.86 692.875 L1217.42 692.875 L1217.98 692.875 L1218.54 692.875 L1219.1 692.875 L1219.66 692.875 L1220.22 692.875 L1220.78 692.875 L1221.34 692.875 L1221.89 692.875 L1222.45 692.875 L1223.01 692.875 L1223.57 692.875 L1224.13 692.875 L1224.69 692.875 L1225.25 692.875 L1225.81 692.875 L1226.37 692.875 L1226.93 692.875 L1227.49 692.875 L1228.05 692.875 L1228.61 692.875 L1229.17 692.875 L1229.72 692.875 L1230.28 692.875 L1230.84 692.875 L1231.4 692.875 L1231.96 692.875 L1232.52 692.875 L1233.08 692.875 L1233.64 692.875 L1234.2 692.875 L1234.76 692.875 L1235.32 692.875 L1235.88 692.875 L1236.44 692.875 L1236.99 692.875 L1237.55 692.875 L1238.11 692.875 L1238.67 692.875 L1239.23 692.875 L1239.79 692.875 L1240.35 692.875 L1240.91 692.875 L1241.47 692.875 L1242.03 692.875 L1242.59 692.875 L1243.15 692.875 L1243.71 692.875 L1244.26 692.875 L1244.82 692.875 L1245.38 692.875 L1245.94 692.875 L1246.5 692.875 L1247.06 692.875 L1247.62 692.875 L1248.18 692.875 L1248.74 692.875 L1249.3 692.875 L1249.86 692.875 L1250.42 692.875 L1250.98 692.875 L1251.54 692.875 L1252.09 692.875 L1252.65 692.875 L1253.21 692.875 L1253.77 692.875 L1254.33 692.875 L1254.89 692.875 L1255.45 692.875 L1256.01 692.875 L1256.57 692.875 L1257.13 692.875 L1257.69 692.875 L1258.25 692.875 L1258.81 692.875 L1259.36 692.875 L1259.92 692.875 L1260.48 692.875 L1261.04 692.875 L1261.6 692.875 L1262.16 692.875 L1262.72 692.875 L1263.28 692.875 L1263.84 692.875 L1264.4 692.875 L1264.96 692.875 L1265.52 692.875 L1266.08 692.875 L1266.63 692.875 L1267.19 692.875 L1267.75 692.875 L1268.31 692.875 L1268.87 692.875 L1269.43 692.875 L1269.99 692.875 L1270.55 692.875 L1271.11 692.875 L1271.67 692.875 L1272.23 692.875 L1272.79 692.875 L1273.35 692.875 L1273.91 692.875 L1274.46 692.875 L1275.02 692.875 L1275.58 692.875 L1276.14 692.875 L1276.7 692.875 L1277.26 692.875 L1277.82 692.875 L1278.38 692.875 L1278.94 692.875 L1279.5 692.875 L1280.06 692.875 L1280.62 692.875 L1281.18 692.875 L1281.73 692.875 L1282.29 692.875 L1282.85 692.875 L1283.41 692.875 L1283.97 692.875 L1284.53 692.875 L1285.09 692.875 L1285.65 692.875 L1286.21 692.875 L1286.77 692.875 L1287.33 692.875 L1287.89 692.875 L1288.45 692.875 L1289 692.875 L1289.56 692.875 L1290.12 692.875 L1290.68 692.875 L1291.24 692.875 L1291.8 692.875 L1292.36 692.875 L1292.92 692.875 L1293.48 692.875 L1294.04 692.875 L1294.6 692.875 L1295.16 692.875 L1295.72 692.875 L1296.28 692.875 L1296.83 692.875 L1297.39 692.875 L1297.95 692.875 L1298.51 692.875 L1299.07 692.875 L1299.63 692.875 L1300.19 692.875 L1300.75 692.875 L1301.31 692.875 L1301.87 692.875 L1302.43 692.875 L1302.99 692.875 L1303.55 692.875 L1304.1 692.875 L1304.66 692.875 L1305.22 692.875 L1305.78 692.875 L1306.34 692.875 L1306.9 692.875 L1307.46 692.875 L1308.02 692.875 L1308.58 692.875 L1309.14 692.875 L1309.7 692.875 L1310.26 692.875 L1310.82 692.875 L1311.38 692.875 L1311.93 692.875 L1312.49 692.875 L1313.05 692.875 L1313.61 692.875 L1314.17 692.875 L1314.73 692.875 L1315.29 692.875 L1315.85 692.875 L1316.41 692.875 L1316.97 692.875 L1317.53 692.875 L1318.09 692.875 L1318.65 692.875 L1319.2 692.875 L1319.76 692.875 L1320.32 692.875 L1320.88 692.875 L1321.44 692.875 L1322 692.875 L1322.56 692.875 L1323.12 692.875 L1323.68 692.875 L1324.24 692.875 L1324.8 692.875 L1325.36 692.875 L1325.92 692.875 L1326.47 692.875 L1327.03 692.875 L1327.59 692.875 L1328.15 692.875 L1328.71 692.875 L1329.27 692.875 L1329.83 692.875 L1330.39 692.875 L1330.95 692.875 L1331.51 692.875 L1332.07 692.875 L1332.63 692.875 L1333.19 692.875 L1333.75 692.875 L1334.3 692.875 L1334.86 692.875 L1335.42 692.875 L1335.98 692.875 L1336.54 692.875 L1337.1 692.875 L1337.66 692.875 L1338.22 692.875 L1338.78 692.875 L1339.34 692.875 L1339.9 692.875 L1340.46 692.875 L1341.02 692.875 L1341.57 692.875 L1342.13 692.875 L1342.69 692.875 L1343.25 692.875 L1343.81 692.875 L1344.37 692.875 L1344.93 692.875 L1345.49 692.875 L1346.05 692.875 L1346.61 692.875 L1347.17 692.875 L1347.73 692.875 L1348.29 692.875 L1348.84 692.875 L1349.4 692.875 L1349.96 692.875 L1350.52 692.875 L1351.08 692.875 L1351.64 692.875 L1352.2 692.875 L1352.76 692.875 L1353.32 692.875 L1353.88 692.875 L1354.44 692.875 L1355 692.875 L1355.56 692.875 L1356.12 692.875 L1356.67 692.875 L1357.23 692.875 L1357.79 692.875 L1358.35 692.875 L1358.91 692.875 L1359.47 692.875 L1360.03 692.875 L1360.59 692.875 L1361.15 692.875 L1361.71 692.875 L1362.27 692.875 L1362.83 692.875 L1363.39 692.875 L1363.94 692.875 L1364.5 692.875 L1365.06 692.875 L1365.62 692.875 L1366.18 692.875 L1366.74 692.875 L1367.3 692.875 L1367.86 692.875 L1368.42 692.875 L1368.98 692.875 L1369.54 692.875 L1370.1 692.875 L1370.66 692.875 L1371.21 692.875 L1371.77 692.875 L1372.33 692.875 L1372.89 692.875 L1373.45 692.875 L1374.01 692.875 L1374.57 692.875 L1375.13 692.875 L1375.69 692.875 L1376.25 692.875 L1376.81 692.875 L1377.37 692.875 L1377.93 692.875 L1378.49 692.875 L1379.04 692.875 L1379.6 692.875 L1380.16 692.875 L1380.72 692.875 L1381.28 692.875 L1381.84 692.875 L1382.4 692.875 L1382.96 692.875 L1383.52 692.875 L1384.08 692.875 L1384.64 692.875 L1385.2 692.875 L1385.76 692.875 L1386.31 692.875 L1386.87 692.875 L1387.43 692.875 L1387.99 692.875 L1388.55 692.875 L1389.11 692.875 L1389.67 692.875 L1390.23 692.875 L1390.79 692.875 L1391.35 692.875 L1391.91 692.875 L1392.47 692.875 L1393.03 692.875 L1393.58 692.875 L1394.14 692.875 L1394.7 692.875 L1395.26 692.875 L1395.82 692.875 L1396.38 692.875 L1396.94 692.875 L1397.5 692.875 L1398.06 692.875 L1398.62 692.875 L1399.18 692.875 L1399.74 692.875 L1400.3 692.875 L1400.86 692.875 L1401.41 692.875 L1401.97 692.875 L1402.53 692.875 L1403.09 692.875 L1403.65 692.875 L1404.21 692.875 L1404.77 692.875 L1405.33 692.875 L1405.89 692.875 L1406.45 692.875 L1407.01 692.875 L1407.57 692.875 L1408.13 692.875 L1408.68 692.875 L1409.24 692.875 L1409.8 692.875 L1410.36 692.875 L1410.92 692.875 L1411.48 692.875 L1412.04 692.875 L1412.6 692.875 L1413.16 692.875 L1413.72 692.875 L1414.28 692.875 L1414.84 692.875 L1415.4 692.875 L1415.95 692.875 L1416.51 692.875 L1417.07 692.875 L1417.63 692.875 L1418.19 692.875 L1418.75 692.875 L1419.31 692.875 L1419.87 692.875 L1420.43 692.875 L1420.99 692.875 L1421.55 692.875 L1422.11 692.875 L1422.67 692.875 L1423.23 692.875 L1423.78 692.875 L1424.34 692.875 L1424.9 692.875 L1425.46 692.875 L1426.02 692.875 L1426.58 692.875 L1427.14 692.875 L1427.7 692.875 L1428.26 692.875 L1428.82 692.875 L1429.38 692.875 L1429.94 692.875 L1430.5 692.875 L1431.05 692.875 L1431.61 692.875 L1432.17 692.875 L1432.73 692.875 L1433.29 692.875 L1433.85 692.875 L1434.41 692.875 L1434.97 692.875 L1435.53 692.875 L1436.09 692.875 L1436.65 692.875 L1437.21 692.875 L1437.77 692.875 L1438.33 692.875 L1438.88 692.875 L1439.44 692.875 L1440 692.875 L1440.56 692.875 L1441.12 692.875 L1441.68 692.875 L1442.24 692.875 L1442.8 692.875 L1443.36 692.875 L1443.92 692.875 L1444.48 692.875 L1445.04 692.875 L1445.6 692.875 L1446.15 692.875 L1446.71 692.875 L1447.27 692.875 L1447.83 692.875 L1448.39 692.875 L1448.95 692.875 L1449.51 692.875 L1450.07 692.875 L1450.63 692.875 L1451.19 692.875 L1451.75 692.875 L1452.31 692.875 L1452.87 692.875 L1453.42 692.875 L1453.98 692.875 L1454.54 692.875 L1455.1 692.875 L1455.66 692.875 L1456.22 692.875 L1456.78 692.875 L1457.34 692.875 L1457.9 692.875 L1458.46 692.875 L1459.02 692.875 L1459.58 692.875 L1460.14 692.875 L1460.7 692.875 L1461.25 692.875 L1461.81 692.875 L1462.37 692.875 L1462.93 692.875 L1463.49 692.875 L1464.05 692.875 L1464.61 692.875 L1465.17 692.875 L1465.73 692.875 L1466.29 692.875 L1466.85 692.875 L1467.41 692.875 L1467.97 692.875 L1468.52 692.875 L1469.08 692.875 L1469.64 692.875 L1470.2 692.875 L1470.76 692.875 L1471.32 692.875 L1471.88 692.875 L1472.44 692.875 L1473 692.875 L1473.56 692.875 L1474.12 692.875 L1474.68 692.875 L1475.24 692.875 L1475.79 692.875 L1476.35 692.875 L1476.91 692.875 L1477.47 692.875 L1478.03 692.875 L1478.59 692.875 L1479.15 692.875 L1479.71 692.875 L1480.27 692.875 L1480.83 692.875 L1481.39 692.875 L1481.95 692.875 L1482.51 692.875 L1483.07 692.875 L1483.62 692.875 L1484.18 692.875 L1484.74 692.875 L1485.3 692.875 L1485.86 692.875 L1486.42 692.875 L1486.98 692.875 L1487.54 692.875 L1488.1 692.875 L1488.66 692.875 L1489.22 692.875 L1489.78 692.875 L1490.34 692.875 L1490.89 692.875 L1491.45 692.875 L1492.01 692.875 L1492.57 692.875 L1493.13 692.875 L1493.69 692.875 L1494.25 692.875 L1494.81 692.875 L1495.37 692.875 L1495.93 692.875 L1496.49 692.875 L1497.05 692.875 L1497.61 692.875 L1498.16 692.875 L1498.72 692.875 L1499.28 692.875 L1499.84 692.875 L1500.4 692.875 L1500.96 692.875 L1501.52 692.875 L1502.08 692.875 L1502.64 692.875 L1503.2 692.875 L1503.76 692.875 L1504.32 692.875 L1504.88 692.875 L1505.44 692.875 L1505.99 692.875 L1506.55 692.875 L1507.11 692.875 L1507.67 692.875 L1508.23 692.875 L1508.79 692.875 L1509.35 692.875 L1509.91 692.875 L1510.47 692.875 L1511.03 692.875 L1511.59 692.875 L1512.15 692.875 L1512.71 692.875 L1513.26 692.875 L1513.82 692.875 L1514.38 692.875 L1514.94 692.875 L1515.5 692.875 L1516.06 692.875 L1516.62 692.875 L1517.18 692.875 L1517.74 692.875 L1518.3 692.875 L1518.86 692.875 L1519.42 692.875 L1519.98 692.875 L1520.53 692.875 L1521.09 692.875 L1521.65 692.875 L1522.21 692.875 L1522.77 692.875 L1523.33 692.875 L1523.89 692.875 L1524.45 692.875 L1525.01 692.875 L1525.57 692.875 L1526.13 692.875 L1526.69 692.875 L1527.25 692.875 L1527.81 692.875 L1528.36 692.875 L1528.92 692.875 L1529.48 692.875 L1530.04 692.875 L1530.6 692.875 L1531.16 692.875 L1531.72 692.875 L1532.28 692.875 L1532.84 692.875 L1533.4 692.875 L1533.96 692.875 L1534.52 692.875 L1535.08 692.875 L1535.63 692.875 L1536.19 692.875 L1536.75 692.875 L1537.31 692.875 L1537.87 692.875 L1538.43 692.875 L1538.99 692.875 L1539.55 692.875 L1540.11 692.875 L1540.67 692.875 L1541.23 692.875 L1541.79 692.875 L1542.35 692.875 L1542.9 692.875 L1543.46 692.875 L1544.02 692.875 L1544.58 692.875 L1545.14 692.875 L1545.7 692.875 L1546.26 692.875 L1546.82 692.875 L1547.38 692.875 L1547.94 692.875 L1548.5 692.875 L1549.06 692.875 L1549.62 692.875 L1550.18 692.875 L1550.73 692.875 L1551.29 692.875 L1551.85 692.875 L1552.41 692.875 L1552.97 692.875 L1553.53 692.875 L1554.09 692.875 L1554.65 692.875 L1555.21 692.875 L1555.77 692.875 L1556.33 692.875 L1556.89 692.875 L1557.45 692.875 L1558 692.875 L1558.56 692.875 L1559.12 692.875 L1559.68 692.875 L1560.24 692.875 L1560.8 692.875 L1561.36 692.875 L1561.92 692.875 L1562.48 692.875 L1563.04 692.875 L1563.6 692.875 L1564.16 692.875 L1564.72 692.875 L1565.28 692.875 L1565.83 692.875 L1566.39 692.875 L1566.95 692.875 L1567.51 692.875 L1568.07 692.875 L1568.63 692.875 L1569.19 692.875 L1569.75 692.875 L1570.31 692.875 L1570.87 692.875 L1571.43 692.875 L1571.99 692.875 L1572.55 692.875 L1573.1 692.875 L1573.66 692.875 L1574.22 692.875 L1574.78 692.875 L1575.34 692.875 L1575.9 692.875 L1576.46 692.875 L1577.02 692.875 L1577.58 692.875 L1578.14 692.875 L1578.7 692.875 L1579.26 692.875 L1579.82 692.875 L1580.37 692.875 L1580.93 692.875 L1581.49 692.875 L1582.05 692.875 L1582.61 692.875 L1583.17 692.875 L1583.73 692.875 L1584.29 692.875 L1584.85 692.875 L1585.41 692.875 L1585.97 692.875 L1586.53 692.875 L1587.09 692.875 L1587.65 692.875 L1588.2 692.875 L1588.76 692.875 L1589.32 692.875 L1589.88 692.875 L1590.44 692.875 L1591 692.875 L1591.56 692.875 L1592.12 692.875 L1592.68 692.875 L1593.24 692.875 L1593.8 692.875 L1594.36 692.875 L1594.92 692.875 L1595.47 692.875 L1596.03 692.875 L1596.59 692.875 L1597.15 692.875 L1597.71 692.875 L1598.27 692.875 L1598.83 692.875 L1599.39 692.875 L1599.95 692.875 L1600.51 692.875 L1601.07 692.875 L1601.63 692.875 L1602.19 692.875 L1602.74 692.875 L1603.3 692.875 L1603.86 692.875 L1604.42 692.875 L1604.98 692.875 L1605.54 692.875 L1606.1 692.875 L1606.66 692.875 L1607.22 692.875 L1607.78 692.875 L1608.34 692.875 L1608.9 692.875 L1609.46 692.875 L1610.02 692.875 L1610.57 692.875 L1611.13 692.875 L1611.69 692.875 L1612.25 692.875 L1612.81 692.875 L1613.37 692.875 L1613.93 692.875 L1614.49 692.875 L1615.05 692.875 L1615.61 692.875 L1616.17 692.875 L1616.73 692.875 L1617.29 692.875 L1617.84 692.875 L1618.4 692.875 L1618.96 692.875 L1619.52 692.875 L1620.08 692.875 L1620.64 692.875 L1621.2 692.875 L1621.76 692.875 L1622.32 692.875 L1622.88 692.875 L1623.44 692.875 L1624 692.875 L1624.56 692.875 L1625.11 692.875 L1625.67 692.875 L1626.23 692.875 L1626.79 692.875 L1627.35 692.875 L1627.91 692.875 L1628.47 692.875 L1629.03 692.875 L1629.59 692.875 L1630.15 692.875 L1630.71 692.875 L1631.27 692.875 L1631.83 692.875 L1632.39 692.875 L1632.94 692.875 L1633.5 692.875 L1634.06 692.875 L1634.62 692.875 L1635.18 692.875 L1635.74 692.875 L1636.3 692.875 L1636.86 692.875 L1637.42 692.875 L1637.98 692.875 L1638.54 692.875 L1639.1 692.875 L1639.66 692.875 L1640.21 692.875 L1640.77 692.875 L1641.33 692.875 L1641.89 692.875 L1642.45 692.875 L1643.01 692.875 L1643.57 692.875 L1644.13 692.875 L1644.69 692.875 L1645.25 692.875 L1645.81 692.875 L1646.37 692.875 L1646.93 692.875 L1647.48 692.875 L1648.04 692.875 L1648.6 692.875 L1649.16 692.875 L1649.72 692.875 L1650.28 692.875 L1650.84 692.875 L1651.4 692.875 L1651.96 692.875 L1652.52 692.875 L1653.08 692.875 L1653.64 692.875 L1654.2 692.875 L1654.76 692.875 L1655.31 692.875 L1655.87 692.875 L1656.43 692.875 L1656.99 692.875 L1657.55 692.875 L1658.11 692.875 L1658.67 692.875 L1659.23 692.875 L1659.79 692.875 L1660.35 692.875 L1660.91 692.875 L1661.47 692.875 L1662.03 692.875 L1662.58 692.875 L1663.14 692.875 L1663.7 692.875 L1664.26 692.875 L1664.82 692.875 L1665.38 692.875 L1665.94 692.875 L1666.5 692.875 L1667.06 692.875 L1667.62 692.875 L1668.18 692.875 L1668.74 692.875 L1669.3 692.875 L1669.85 692.875 L1670.41 692.875 L1670.97 692.875 L1671.53 692.875 L1672.09 692.875 L1672.65 692.875 L1673.21 692.875 L1673.77 692.875 L1674.33 692.875 L1674.89 692.875 L1675.45 692.875 L1676.01 692.875 L1676.57 692.875 L1677.13 692.875 L1677.68 692.875 L1678.24 692.875 L1678.8 692.875 L1679.36 692.875 L1679.92 692.875 L1680.48 692.875 L1681.04 692.875 L1681.6 692.875 L1682.16 692.875 L1682.72 692.875 L1683.28 692.875 L1683.84 692.875 L1684.4 692.875 L1684.95 692.875 L1685.51 692.875 L1686.07 692.875 L1686.63 692.875 L1687.19 692.875 L1687.75 692.875 L1688.31 692.875 L1688.87 692.875 L1689.43 692.875 L1689.99 692.875 L1690.55 692.875 L1691.11 692.875 L1691.67 692.875 L1692.23 692.875 L1692.78 692.875 L1693.34 692.875 L1693.9 692.875 L1694.46 692.875 L1695.02 692.875 L1695.58 692.875 L1696.14 692.875 L1696.7 692.875 L1697.26 692.875 L1697.82 692.875 L1698.38 692.875 L1698.94 692.875 L1699.5 692.875 L1700.05 692.875 L1700.61 692.875 L1701.17 692.875 L1701.73 692.875 L1702.29 692.875 L1702.85 692.875 L1703.41 692.875 L1703.97 692.875 L1704.53 692.875 L1705.09 692.875 L1705.65 692.875 L1706.21 692.875 L1706.77 692.875 L1707.32 692.875 L1707.88 692.875 L1708.44 692.875 L1709 692.875 L1709.56 692.875 L1710.12 692.875 L1710.68 692.875 L1711.24 692.875 L1711.8 692.875 L1712.36 692.875 L1712.92 692.875 L1713.48 692.875 L1714.04 692.875 L1714.6 692.875 L1715.15 692.875 L1715.71 692.875 L1716.27 692.875 L1716.83 692.875 L1717.39 692.875 L1717.95 692.875 L1718.51 692.875 L1719.07 692.875 L1719.63 692.875 L1720.19 692.875 L1720.75 692.875 L1721.31 692.875 L1721.87 692.875 L1722.42 692.875 L1722.98 692.875 L1723.54 692.875 L1724.1 692.875 L1724.66 692.875 L1725.22 692.875 L1725.78 692.875 L1726.34 692.875 L1726.9 692.875 L1727.46 692.875 L1728.02 692.875 L1728.58 692.875 L1729.14 692.875 L1729.69 692.875 L1730.25 692.875 L1730.81 692.875 L1731.37 692.875 L1731.93 692.875 L1732.49 692.875 L1733.05 692.875 L1733.61 692.875 L1734.17 692.875 L1734.73 692.875 L1735.29 692.875 L1735.85 692.875 L1736.41 692.875 L1736.97 692.875 L1737.52 692.875 L1738.08 692.875 L1738.64 692.875 L1739.2 692.875 L1739.76 692.875 L1740.32 692.875 L1740.88 692.875 L1741.44 692.875 L1742 692.875 L1742.56 692.875 L1743.12 692.875 L1743.68 692.875 L1744.24 692.875 L1744.79 692.875 L1745.35 692.875 L1745.91 692.875 L1746.47 692.875 L1747.03 692.875 L1747.59 692.875 L1748.15 692.875 L1748.71 692.875 L1749.27 692.875 L1749.83 692.875 L1750.39 692.875 L1750.95 692.875 L1751.51 692.875 L1752.06 692.875 L1752.62 692.875 L1753.18 692.875 L1753.74 692.875 L1754.3 692.875 L1754.86 692.875 L1755.42 692.875 L1755.98 692.875 L1756.54 692.875 L1757.1 692.875 L1757.66 692.875 L1758.22 692.875 L1758.78 692.875 L1759.34 692.875 L1759.89 692.875 L1760.45 692.875 L1761.01 692.875 L1761.57 692.875 L1762.13 692.875 L1762.69 692.875 L1763.25 692.875 L1763.81 692.875 L1764.37 692.875 L1764.93 692.875 L1765.49 692.875 L1766.05 692.875 L1766.61 692.875 L1767.16 692.875 L1767.72 692.875 L1768.28 692.875 L1768.84 692.875 L1769.4 692.875 L1769.96 692.875 L1770.52 692.875 L1771.08 692.875 L1771.64 692.875 L1772.2 692.875 L1772.76 692.875 L1773.32 692.875 L1773.88 692.875 L1774.43 692.875 L1774.99 692.875 L1775.55 692.875 L1776.11 692.875 L1776.67 692.875 L1777.23 692.875 L1777.79 692.875 L1778.35 692.875 L1778.91 692.875 L1779.47 692.875 L1780.03 692.875 L1780.59 692.875 L1781.15 692.875 L1781.71 692.875 L1782.26 692.875 L1782.82 692.875 L1783.38 692.875 L1783.94 692.875 L1784.5 692.875 L1785.06 692.875 L1785.62 692.875 L1786.18 692.875 L1786.74 692.875 L1787.3 692.875 L1787.86 692.875 L1788.42 692.875 L1788.98 692.875 L1789.53 692.875 L1790.09 692.875 L1790.65 692.875 L1791.21 692.875 L1791.77 692.875 L1792.33 692.875 L1792.89 692.875 L1793.45 692.875 L1794.01 692.875 L1794.57 692.875 L1795.13 692.875 L1795.69 692.875 L1796.25 692.875 L1796.8 692.875 L1797.36 692.875 L1797.92 692.875 L1798.48 692.875 L1799.04 692.875 L1799.6 692.875 L1800.16 692.875 L1800.72 692.875 L1801.28 692.875 L1801.84 692.875 L1802.4 692.875 L1802.96 692.875 L1803.52 692.875 L1804.08 692.875 L1804.63 692.875 L1805.19 692.875 L1805.75 692.875 L1806.31 692.875 L1806.87 692.875 L1807.43 692.875 L1807.99 692.875 L1808.55 692.875 L1809.11 692.875 L1809.67 692.875 L1810.23 692.875 L1810.79 692.875 L1811.35 692.875 L1811.9 692.875 L1812.46 692.875 L1813.02 692.875 L1813.58 692.875 L1814.14 692.875 L1814.7 692.875 L1815.26 692.875 L1815.82 692.875 L1816.38 692.875 L1816.94 692.875 L1817.5 692.875 L1818.06 692.875 L1818.62 692.875 L1819.18 692.875 L1819.73 692.875 L1820.29 692.875 L1820.85 692.875 L1821.41 692.875 L1821.97 692.875 L1822.53 692.875 L1823.09 692.875 L1823.65 692.875 L1824.21 692.875 L1824.77 692.875 L1825.33 692.875 L1825.89 692.875 L1826.45 692.875 L1827 692.875 L1827.56 692.875 L1828.12 692.875 L1828.68 692.875 L1829.24 692.875 L1829.8 692.875 L1830.36 692.875 L1830.92 692.875 L1831.48 692.875 L1832.04 692.875 L1832.6 692.875 L1833.16 692.875 L1833.72 692.875 L1834.27 692.875 L1834.83 692.875 L1835.39 692.875 L1835.95 692.875 L1836.51 692.875 L1837.07 692.875 L1837.63 692.875 L1838.19 692.875 L1838.19 682.194 L1837.63 682.194 L1837.07 682.194 L1836.51 682.194 L1835.95 682.194 L1835.39 682.194 L1834.83 682.194 L1834.27 682.194 L1833.72 682.194 L1833.16 682.194 L1832.6 682.194 L1832.04 682.194 L1831.48 682.194 L1830.92 682.194 L1830.36 682.194 L1829.8 682.194 L1829.24 682.194 L1828.68 682.194 L1828.12 682.194 L1827.56 682.194 L1827 682.194 L1826.45 682.194 L1825.89 682.194 L1825.33 682.194 L1824.77 682.194 L1824.21 682.194 L1823.65 682.194 L1823.09 682.194 L1822.53 682.194 L1821.97 682.194 L1821.41 682.194 L1820.85 682.194 L1820.29 682.194 L1819.73 682.194 L1819.18 682.194 L1818.62 682.194 L1818.06 682.194 L1817.5 682.194 L1816.94 682.194 L1816.38 682.194 L1815.82 682.194 L1815.26 682.194 L1814.7 682.194 L1814.14 682.194 L1813.58 682.194 L1813.02 682.194 L1812.46 682.194 L1811.9 682.194 L1811.35 682.194 L1810.79 682.194 L1810.23 682.194 L1809.67 682.194 L1809.11 682.194 L1808.55 682.194 L1807.99 682.194 L1807.43 682.194 L1806.87 682.194 L1806.31 682.194 L1805.75 682.194 L1805.19 682.194 L1804.63 682.194 L1804.08 682.194 L1803.52 682.194 L1802.96 682.194 L1802.4 682.194 L1801.84 682.194 L1801.28 682.194 L1800.72 682.194 L1800.16 682.194 L1799.6 682.194 L1799.04 682.194 L1798.48 682.194 L1797.92 682.194 L1797.36 682.194 L1796.8 682.194 L1796.25 682.194 L1795.69 682.194 L1795.13 682.194 L1794.57 682.194 L1794.01 682.194 L1793.45 682.194 L1792.89 682.194 L1792.33 682.194 L1791.77 682.194 L1791.21 682.194 L1790.65 682.194 L1790.09 682.194 L1789.53 682.194 L1788.98 682.194 L1788.42 682.194 L1787.86 682.194 L1787.3 682.194 L1786.74 682.194 L1786.18 682.194 L1785.62 682.194 L1785.06 682.194 L1784.5 682.194 L1783.94 682.194 L1783.38 682.194 L1782.82 682.194 L1782.26 682.194 L1781.71 682.194 L1781.15 682.194 L1780.59 682.194 L1780.03 682.194 L1779.47 682.194 L1778.91 682.194 L1778.35 682.194 L1777.79 682.194 L1777.23 682.194 L1776.67 682.194 L1776.11 682.194 L1775.55 682.194 L1774.99 682.194 L1774.43 682.194 L1773.88 682.194 L1773.32 682.194 L1772.76 682.194 L1772.2 682.194 L1771.64 682.194 L1771.08 682.194 L1770.52 682.194 L1769.96 682.194 L1769.4 682.194 L1768.84 682.194 L1768.28 682.194 L1767.72 682.194 L1767.16 682.194 L1766.61 682.194 L1766.05 682.194 L1765.49 682.194 L1764.93 682.194 L1764.37 682.194 L1763.81 682.194 L1763.25 682.194 L1762.69 682.194 L1762.13 682.194 L1761.57 682.194 L1761.01 682.194 L1760.45 682.194 L1759.89 682.194 L1759.34 682.194 L1758.78 682.194 L1758.22 682.194 L1757.66 682.194 L1757.1 682.194 L1756.54 682.194 L1755.98 682.194 L1755.42 682.194 L1754.86 682.194 L1754.3 682.194 L1753.74 682.194 L1753.18 682.194 L1752.62 682.194 L1752.06 682.194 L1751.51 682.194 L1750.95 682.194 L1750.39 682.194 L1749.83 682.194 L1749.27 682.194 L1748.71 682.194 L1748.15 682.194 L1747.59 682.194 L1747.03 682.194 L1746.47 682.194 L1745.91 682.194 L1745.35 682.194 L1744.79 682.194 L1744.24 682.194 L1743.68 682.194 L1743.12 682.194 L1742.56 682.194 L1742 682.194 L1741.44 682.194 L1740.88 682.194 L1740.32 682.194 L1739.76 682.194 L1739.2 682.194 L1738.64 682.194 L1738.08 682.194 L1737.52 682.194 L1736.97 682.194 L1736.41 682.194 L1735.85 682.194 L1735.29 682.194 L1734.73 682.194 L1734.17 682.194 L1733.61 682.194 L1733.05 682.194 L1732.49 682.194 L1731.93 682.194 L1731.37 682.194 L1730.81 682.194 L1730.25 682.194 L1729.69 682.194 L1729.14 682.194 L1728.58 682.194 L1728.02 682.194 L1727.46 682.194 L1726.9 682.194 L1726.34 682.194 L1725.78 682.194 L1725.22 682.194 L1724.66 682.194 L1724.1 682.194 L1723.54 682.194 L1722.98 682.194 L1722.42 682.194 L1721.87 682.194 L1721.31 682.194 L1720.75 682.194 L1720.19 682.194 L1719.63 682.194 L1719.07 682.194 L1718.51 682.194 L1717.95 682.194 L1717.39 682.194 L1716.83 682.194 L1716.27 682.194 L1715.71 682.194 L1715.15 682.194 L1714.6 682.194 L1714.04 682.194 L1713.48 682.194 L1712.92 682.194 L1712.36 682.194 L1711.8 682.194 L1711.24 682.194 L1710.68 682.194 L1710.12 682.194 L1709.56 682.194 L1709 682.194 L1708.44 682.194 L1707.88 682.194 L1707.32 682.194 L1706.77 682.194 L1706.21 682.194 L1705.65 682.194 L1705.09 682.194 L1704.53 682.194 L1703.97 682.194 L1703.41 682.194 L1702.85 682.194 L1702.29 682.194 L1701.73 682.194 L1701.17 682.194 L1700.61 682.194 L1700.05 682.194 L1699.5 682.194 L1698.94 682.194 L1698.38 682.194 L1697.82 682.194 L1697.26 682.194 L1696.7 682.194 L1696.14 682.194 L1695.58 682.194 L1695.02 682.194 L1694.46 682.194 L1693.9 682.194 L1693.34 682.194 L1692.78 682.194 L1692.23 682.194 L1691.67 682.194 L1691.11 682.194 L1690.55 682.194 L1689.99 682.194 L1689.43 682.194 L1688.87 682.194 L1688.31 682.194 L1687.75 682.194 L1687.19 682.194 L1686.63 682.194 L1686.07 682.194 L1685.51 682.194 L1684.95 682.194 L1684.4 682.194 L1683.84 682.194 L1683.28 682.194 L1682.72 682.194 L1682.16 682.194 L1681.6 682.194 L1681.04 682.194 L1680.48 682.194 L1679.92 682.194 L1679.36 682.194 L1678.8 682.194 L1678.24 682.194 L1677.68 682.194 L1677.13 682.194 L1676.57 682.194 L1676.01 682.194 L1675.45 682.194 L1674.89 682.194 L1674.33 682.194 L1673.77 682.194 L1673.21 682.194 L1672.65 682.194 L1672.09 682.194 L1671.53 682.194 L1670.97 682.194 L1670.41 682.194 L1669.85 682.194 L1669.3 682.194 L1668.74 682.194 L1668.18 682.194 L1667.62 682.194 L1667.06 682.194 L1666.5 682.194 L1665.94 682.194 L1665.38 682.194 L1664.82 682.194 L1664.26 682.194 L1663.7 682.194 L1663.14 682.194 L1662.58 682.194 L1662.03 682.194 L1661.47 682.194 L1660.91 682.194 L1660.35 682.194 L1659.79 682.194 L1659.23 682.194 L1658.67 682.194 L1658.11 682.194 L1657.55 682.194 L1656.99 682.194 L1656.43 682.194 L1655.87 682.194 L1655.31 682.194 L1654.76 682.194 L1654.2 682.194 L1653.64 682.194 L1653.08 682.194 L1652.52 682.194 L1651.96 682.194 L1651.4 682.194 L1650.84 682.194 L1650.28 682.194 L1649.72 682.194 L1649.16 682.194 L1648.6 682.194 L1648.04 682.194 L1647.48 682.194 L1646.93 682.194 L1646.37 682.194 L1645.81 682.194 L1645.25 682.194 L1644.69 682.194 L1644.13 682.194 L1643.57 682.194 L1643.01 682.194 L1642.45 682.194 L1641.89 682.194 L1641.33 682.194 L1640.77 682.194 L1640.21 682.194 L1639.66 682.194 L1639.1 682.194 L1638.54 682.194 L1637.98 682.194 L1637.42 682.194 L1636.86 682.194 L1636.3 682.194 L1635.74 682.194 L1635.18 682.194 L1634.62 682.194 L1634.06 682.194 L1633.5 682.194 L1632.94 682.194 L1632.39 682.194 L1631.83 682.194 L1631.27 682.194 L1630.71 682.194 L1630.15 682.194 L1629.59 682.194 L1629.03 682.194 L1628.47 682.194 L1627.91 682.194 L1627.35 682.194 L1626.79 682.194 L1626.23 682.194 L1625.67 682.194 L1625.11 682.194 L1624.56 682.194 L1624 682.194 L1623.44 682.194 L1622.88 682.194 L1622.32 682.194 L1621.76 682.194 L1621.2 682.194 L1620.64 682.194 L1620.08 682.194 L1619.52 682.194 L1618.96 682.194 L1618.4 682.194 L1617.84 682.194 L1617.29 682.194 L1616.73 682.194 L1616.17 682.194 L1615.61 682.194 L1615.05 682.194 L1614.49 682.194 L1613.93 682.194 L1613.37 682.194 L1612.81 682.194 L1612.25 682.194 L1611.69 682.194 L1611.13 682.194 L1610.57 682.194 L1610.02 682.194 L1609.46 682.194 L1608.9 682.194 L1608.34 682.194 L1607.78 682.194 L1607.22 682.194 L1606.66 682.194 L1606.1 682.194 L1605.54 682.194 L1604.98 682.194 L1604.42 682.194 L1603.86 682.194 L1603.3 682.194 L1602.74 682.194 L1602.19 682.194 L1601.63 682.194 L1601.07 682.194 L1600.51 682.194 L1599.95 682.194 L1599.39 682.194 L1598.83 682.194 L1598.27 682.194 L1597.71 682.194 L1597.15 682.194 L1596.59 682.194 L1596.03 682.194 L1595.47 682.194 L1594.92 682.194 L1594.36 682.194 L1593.8 682.194 L1593.24 682.194 L1592.68 682.194 L1592.12 682.194 L1591.56 682.194 L1591 682.194 L1590.44 682.194 L1589.88 682.194 L1589.32 682.194 L1588.76 682.194 L1588.2 682.194 L1587.65 682.194 L1587.09 682.194 L1586.53 682.194 L1585.97 682.194 L1585.41 682.194 L1584.85 682.194 L1584.29 682.194 L1583.73 682.194 L1583.17 682.194 L1582.61 682.194 L1582.05 682.194 L1581.49 682.194 L1580.93 682.194 L1580.37 682.194 L1579.82 682.194 L1579.26 682.194 L1578.7 682.194 L1578.14 682.194 L1577.58 682.194 L1577.02 682.194 L1576.46 682.194 L1575.9 682.194 L1575.34 682.194 L1574.78 682.194 L1574.22 682.194 L1573.66 682.194 L1573.1 682.194 L1572.55 682.194 L1571.99 682.194 L1571.43 682.194 L1570.87 682.194 L1570.31 682.194 L1569.75 682.194 L1569.19 682.194 L1568.63 682.194 L1568.07 682.194 L1567.51 682.194 L1566.95 682.194 L1566.39 682.194 L1565.83 682.194 L1565.28 682.194 L1564.72 682.194 L1564.16 682.194 L1563.6 682.194 L1563.04 682.194 L1562.48 682.194 L1561.92 682.194 L1561.36 682.194 L1560.8 682.194 L1560.24 682.194 L1559.68 682.194 L1559.12 682.194 L1558.56 682.194 L1558 682.194 L1557.45 682.194 L1556.89 682.194 L1556.33 682.194 L1555.77 682.194 L1555.21 682.194 L1554.65 682.194 L1554.09 682.194 L1553.53 682.194 L1552.97 682.194 L1552.41 682.194 L1551.85 682.194 L1551.29 682.194 L1550.73 682.194 L1550.18 682.194 L1549.62 682.194 L1549.06 682.194 L1548.5 682.194 L1547.94 682.194 L1547.38 682.194 L1546.82 682.194 L1546.26 682.194 L1545.7 682.194 L1545.14 682.194 L1544.58 682.194 L1544.02 682.194 L1543.46 682.194 L1542.9 682.194 L1542.35 682.194 L1541.79 682.194 L1541.23 682.194 L1540.67 682.194 L1540.11 682.194 L1539.55 682.194 L1538.99 682.194 L1538.43 682.194 L1537.87 682.194 L1537.31 682.194 L1536.75 682.194 L1536.19 682.194 L1535.63 682.194 L1535.08 682.194 L1534.52 682.194 L1533.96 682.194 L1533.4 682.194 L1532.84 682.194 L1532.28 682.194 L1531.72 682.194 L1531.16 682.194 L1530.6 682.194 L1530.04 682.194 L1529.48 682.194 L1528.92 682.194 L1528.36 682.194 L1527.81 682.194 L1527.25 682.194 L1526.69 682.194 L1526.13 682.194 L1525.57 682.194 L1525.01 682.194 L1524.45 682.194 L1523.89 682.194 L1523.33 682.194 L1522.77 682.194 L1522.21 682.194 L1521.65 682.194 L1521.09 682.194 L1520.53 682.194 L1519.98 682.194 L1519.42 682.194 L1518.86 682.194 L1518.3 682.194 L1517.74 682.194 L1517.18 682.194 L1516.62 682.194 L1516.06 682.194 L1515.5 682.194 L1514.94 682.194 L1514.38 682.194 L1513.82 682.194 L1513.26 682.194 L1512.71 682.194 L1512.15 682.194 L1511.59 682.194 L1511.03 682.194 L1510.47 682.194 L1509.91 682.194 L1509.35 682.194 L1508.79 682.194 L1508.23 682.194 L1507.67 682.194 L1507.11 682.194 L1506.55 682.194 L1505.99 682.194 L1505.44 682.194 L1504.88 682.194 L1504.32 682.194 L1503.76 682.194 L1503.2 682.194 L1502.64 682.194 L1502.08 682.194 L1501.52 682.194 L1500.96 682.194 L1500.4 682.194 L1499.84 682.194 L1499.28 682.194 L1498.72 682.194 L1498.16 682.194 L1497.61 682.194 L1497.05 682.194 L1496.49 682.194 L1495.93 682.194 L1495.37 682.194 L1494.81 682.194 L1494.25 682.194 L1493.69 682.194 L1493.13 682.194 L1492.57 682.194 L1492.01 682.194 L1491.45 682.194 L1490.89 682.194 L1490.34 682.194 L1489.78 682.194 L1489.22 682.194 L1488.66 682.194 L1488.1 682.194 L1487.54 682.194 L1486.98 682.194 L1486.42 682.194 L1485.86 682.194 L1485.3 682.194 L1484.74 682.194 L1484.18 682.194 L1483.62 682.194 L1483.07 682.194 L1482.51 682.194 L1481.95 682.194 L1481.39 682.194 L1480.83 682.194 L1480.27 682.194 L1479.71 682.194 L1479.15 682.194 L1478.59 682.194 L1478.03 682.194 L1477.47 682.194 L1476.91 682.194 L1476.35 682.194 L1475.79 682.194 L1475.24 682.194 L1474.68 682.194 L1474.12 682.194 L1473.56 682.194 L1473 682.194 L1472.44 682.194 L1471.88 682.194 L1471.32 682.194 L1470.76 682.194 L1470.2 682.194 L1469.64 682.194 L1469.08 682.194 L1468.52 682.194 L1467.97 682.194 L1467.41 682.194 L1466.85 682.194 L1466.29 682.194 L1465.73 682.194 L1465.17 682.194 L1464.61 682.194 L1464.05 682.194 L1463.49 682.194 L1462.93 682.194 L1462.37 682.194 L1461.81 682.194 L1461.25 682.194 L1460.7 682.194 L1460.14 682.194 L1459.58 682.194 L1459.02 682.194 L1458.46 682.194 L1457.9 682.194 L1457.34 682.194 L1456.78 682.194 L1456.22 682.194 L1455.66 682.194 L1455.1 682.194 L1454.54 682.194 L1453.98 682.194 L1453.42 682.194 L1452.87 682.194 L1452.31 682.194 L1451.75 682.194 L1451.19 682.194 L1450.63 682.194 L1450.07 682.194 L1449.51 682.194 L1448.95 682.194 L1448.39 682.194 L1447.83 682.194 L1447.27 682.194 L1446.71 682.194 L1446.15 682.194 L1445.6 682.194 L1445.04 682.194 L1444.48 682.194 L1443.92 682.194 L1443.36 682.194 L1442.8 682.194 L1442.24 682.194 L1441.68 682.194 L1441.12 682.194 L1440.56 682.194 L1440 682.194 L1439.44 682.194 L1438.88 682.194 L1438.33 682.194 L1437.77 682.194 L1437.21 682.194 L1436.65 682.194 L1436.09 682.194 L1435.53 682.194 L1434.97 682.194 L1434.41 682.194 L1433.85 682.194 L1433.29 682.194 L1432.73 682.194 L1432.17 682.194 L1431.61 682.194 L1431.05 682.194 L1430.5 682.194 L1429.94 682.194 L1429.38 682.194 L1428.82 682.194 L1428.26 682.194 L1427.7 682.194 L1427.14 682.194 L1426.58 682.194 L1426.02 682.194 L1425.46 682.194 L1424.9 682.194 L1424.34 682.194 L1423.78 682.194 L1423.23 682.194 L1422.67 682.194 L1422.11 682.194 L1421.55 682.194 L1420.99 682.194 L1420.43 682.194 L1419.87 682.194 L1419.31 682.194 L1418.75 682.194 L1418.19 682.194 L1417.63 682.194 L1417.07 682.194 L1416.51 682.194 L1415.95 682.194 L1415.4 682.194 L1414.84 682.194 L1414.28 682.194 L1413.72 682.194 L1413.16 682.194 L1412.6 682.194 L1412.04 682.194 L1411.48 682.194 L1410.92 682.194 L1410.36 682.194 L1409.8 682.194 L1409.24 682.194 L1408.68 682.194 L1408.13 682.194 L1407.57 682.194 L1407.01 682.194 L1406.45 682.194 L1405.89 682.194 L1405.33 682.194 L1404.77 682.194 L1404.21 682.194 L1403.65 682.194 L1403.09 682.194 L1402.53 682.194 L1401.97 682.194 L1401.41 682.194 L1400.86 682.194 L1400.3 682.194 L1399.74 682.194 L1399.18 682.194 L1398.62 682.194 L1398.06 682.194 L1397.5 682.194 L1396.94 682.194 L1396.38 682.194 L1395.82 682.194 L1395.26 682.194 L1394.7 682.194 L1394.14 682.194 L1393.58 682.194 L1393.03 682.194 L1392.47 682.194 L1391.91 682.194 L1391.35 682.194 L1390.79 682.194 L1390.23 682.194 L1389.67 682.194 L1389.11 682.194 L1388.55 682.194 L1387.99 682.194 L1387.43 682.194 L1386.87 682.194 L1386.31 682.194 L1385.76 682.194 L1385.2 682.194 L1384.64 682.194 L1384.08 682.194 L1383.52 682.194 L1382.96 682.194 L1382.4 682.194 L1381.84 682.194 L1381.28 682.194 L1380.72 682.194 L1380.16 682.194 L1379.6 682.194 L1379.04 682.194 L1378.49 682.194 L1377.93 682.194 L1377.37 682.194 L1376.81 682.194 L1376.25 682.194 L1375.69 682.194 L1375.13 682.194 L1374.57 682.194 L1374.01 682.194 L1373.45 682.194 L1372.89 682.194 L1372.33 682.194 L1371.77 682.194 L1371.21 682.194 L1370.66 682.194 L1370.1 682.194 L1369.54 682.194 L1368.98 682.194 L1368.42 682.194 L1367.86 682.194 L1367.3 682.194 L1366.74 682.194 L1366.18 682.194 L1365.62 682.194 L1365.06 682.194 L1364.5 682.194 L1363.94 682.194 L1363.39 682.194 L1362.83 682.194 L1362.27 682.194 L1361.71 682.194 L1361.15 682.194 L1360.59 682.194 L1360.03 682.194 L1359.47 682.194 L1358.91 682.194 L1358.35 682.194 L1357.79 682.194 L1357.23 682.194 L1356.67 682.194 L1356.12 682.194 L1355.56 682.194 L1355 682.194 L1354.44 682.194 L1353.88 682.194 L1353.32 682.194 L1352.76 682.194 L1352.2 682.194 L1351.64 682.194 L1351.08 682.194 L1350.52 682.194 L1349.96 682.194 L1349.4 682.194 L1348.84 682.194 L1348.29 682.194 L1347.73 682.194 L1347.17 682.194 L1346.61 682.194 L1346.05 682.194 L1345.49 682.194 L1344.93 682.194 L1344.37 682.194 L1343.81 682.194 L1343.25 682.194 L1342.69 682.194 L1342.13 682.194 L1341.57 682.194 L1341.02 682.194 L1340.46 682.194 L1339.9 682.194 L1339.34 682.194 L1338.78 682.194 L1338.22 682.194 L1337.66 682.194 L1337.1 682.194 L1336.54 682.194 L1335.98 682.194 L1335.42 682.194 L1334.86 682.194 L1334.3 682.194 L1333.75 682.194 L1333.19 682.194 L1332.63 682.194 L1332.07 682.194 L1331.51 682.194 L1330.95 682.194 L1330.39 682.194 L1329.83 682.194 L1329.27 682.194 L1328.71 682.194 L1328.15 682.194 L1327.59 682.194 L1327.03 682.194 L1326.47 682.194 L1325.92 682.194 L1325.36 682.194 L1324.8 682.194 L1324.24 682.194 L1323.68 682.194 L1323.12 682.194 L1322.56 682.194 L1322 682.194 L1321.44 682.194 L1320.88 682.194 L1320.32 682.194 L1319.76 682.194 L1319.2 682.194 L1318.65 682.194 L1318.09 682.194 L1317.53 682.194 L1316.97 682.194 L1316.41 682.194 L1315.85 682.194 L1315.29 682.194 L1314.73 682.194 L1314.17 682.194 L1313.61 682.194 L1313.05 682.194 L1312.49 682.194 L1311.93 682.194 L1311.38 682.194 L1310.82 682.194 L1310.26 682.194 L1309.7 682.194 L1309.14 682.194 L1308.58 682.194 L1308.02 682.194 L1307.46 682.194 L1306.9 682.194 L1306.34 682.194 L1305.78 682.194 L1305.22 682.194 L1304.66 682.194 L1304.1 682.194 L1303.55 682.194 L1302.99 682.194 L1302.43 682.194 L1301.87 682.194 L1301.31 682.194 L1300.75 682.194 L1300.19 682.194 L1299.63 682.194 L1299.07 682.194 L1298.51 682.194 L1297.95 682.194 L1297.39 682.194 L1296.83 682.194 L1296.28 682.194 L1295.72 682.194 L1295.16 682.194 L1294.6 682.194 L1294.04 682.194 L1293.48 682.194 L1292.92 682.194 L1292.36 682.194 L1291.8 682.194 L1291.24 682.194 L1290.68 682.194 L1290.12 682.194 L1289.56 682.194 L1289 682.194 L1288.45 682.194 L1287.89 682.194 L1287.33 682.194 L1286.77 682.194 L1286.21 682.194 L1285.65 682.194 L1285.09 682.194 L1284.53 682.194 L1283.97 682.194 L1283.41 682.194 L1282.85 682.194 L1282.29 682.194 L1281.73 682.194 L1281.18 682.194 L1280.62 682.194 L1280.06 682.194 L1279.5 682.194 L1278.94 682.194 L1278.38 682.194 L1277.82 682.194 L1277.26 682.194 L1276.7 682.194 L1276.14 682.194 L1275.58 682.194 L1275.02 682.194 L1274.46 682.194 L1273.91 682.194 L1273.35 682.194 L1272.79 682.194 L1272.23 682.194 L1271.67 682.194 L1271.11 682.194 L1270.55 682.194 L1269.99 682.194 L1269.43 682.194 L1268.87 682.194 L1268.31 682.194 L1267.75 682.194 L1267.19 682.194 L1266.63 682.194 L1266.08 682.194 L1265.52 682.194 L1264.96 682.194 L1264.4 682.194 L1263.84 682.194 L1263.28 682.194 L1262.72 682.194 L1262.16 682.194 L1261.6 682.194 L1261.04 682.194 L1260.48 682.194 L1259.92 682.194 L1259.36 682.194 L1258.81 682.194 L1258.25 682.194 L1257.69 682.194 L1257.13 682.194 L1256.57 682.194 L1256.01 682.194 L1255.45 682.194 L1254.89 682.194 L1254.33 682.194 L1253.77 682.194 L1253.21 682.194 L1252.65 682.194 L1252.09 682.194 L1251.54 682.194 L1250.98 682.194 L1250.42 682.194 L1249.86 682.194 L1249.3 682.194 L1248.74 682.194 L1248.18 682.194 L1247.62 682.194 L1247.06 682.194 L1246.5 682.194 L1245.94 682.194 L1245.38 682.194 L1244.82 682.194 L1244.26 682.194 L1243.71 682.194 L1243.15 682.194 L1242.59 682.194 L1242.03 682.194 L1241.47 682.194 L1240.91 682.194 L1240.35 682.194 L1239.79 682.194 L1239.23 682.194 L1238.67 682.194 L1238.11 682.194 L1237.55 682.194 L1236.99 682.194 L1236.44 682.194 L1235.88 682.194 L1235.32 682.194 L1234.76 682.194 L1234.2 682.194 L1233.64 682.194 L1233.08 682.194 L1232.52 682.194 L1231.96 682.194 L1231.4 682.194 L1230.84 682.194 L1230.28 682.194 L1229.72 682.194 L1229.17 682.194 L1228.61 682.194 L1228.05 682.194 L1227.49 682.194 L1226.93 682.194 L1226.37 682.194 L1225.81 682.194 L1225.25 682.194 L1224.69 682.194 L1224.13 682.194 L1223.57 682.194 L1223.01 682.194 L1222.45 682.194 L1221.89 682.194 L1221.34 682.194 L1220.78 682.194 L1220.22 682.194 L1219.66 682.194 L1219.1 682.194 L1218.54 682.194 L1217.98 682.194 L1217.42 682.194 L1216.86 682.194 L1216.3 682.194 L1215.74 682.194 L1215.18 682.194 L1214.62 682.194 L1214.07 682.194 L1213.51 682.194 L1212.95 682.194 L1212.39 682.194 L1211.83 682.194 L1211.27 682.194 L1210.71 682.194 L1210.15 682.194 L1209.59 682.194 L1209.03 682.194 L1208.47 682.194 L1207.91 682.194 L1207.35 682.194 L1206.8 682.194 L1206.24 682.194 L1205.68 682.194 L1205.12 682.194 L1204.56 682.194 L1204 682.194 L1203.44 682.194 L1202.88 682.194 L1202.32 682.194 L1201.76 682.194 L1201.2 682.194 L1200.64 682.194 L1200.08 682.194 L1199.52 682.194 L1198.97 682.194 L1198.41 682.194 L1197.85 682.194 L1197.29 682.194 L1196.73 682.194 L1196.17 682.194 L1195.61 682.194 L1195.05 682.194 L1194.49 682.194 L1193.93 682.194 L1193.37 682.194 L1192.81 682.194 L1192.25 682.194 L1191.7 682.194 L1191.14 682.194 L1190.58 682.194 L1190.02 682.194 L1189.46 682.194 L1188.9 682.194 L1188.34 682.194 L1187.78 682.194 L1187.22 682.194 L1186.66 682.194 L1186.1 682.194 L1185.54 682.194 L1184.98 682.194 L1184.43 682.194 L1183.87 682.194 L1183.31 682.194 L1182.75 682.194 L1182.19 682.194 L1181.63 682.194 L1181.07 682.194 L1180.51 682.194 L1179.95 682.194 L1179.39 682.194 L1178.83 682.194 L1178.27 682.194 L1177.71 682.194 L1177.15 682.194 L1176.6 682.194 L1176.04 682.194 L1175.48 682.194 L1174.92 682.194 L1174.36 682.194 L1173.8 682.194 L1173.24 682.194 L1172.68 682.194 L1172.12 682.194 L1171.56 682.194 L1171 682.194 L1170.44 682.194 L1169.88 682.194 L1169.33 682.194 L1168.77 682.194 L1168.21 682.194 L1167.65 682.194 L1167.09 682.194 L1166.53 682.194 L1165.97 682.194 L1165.41 682.194 L1164.85 682.194 L1164.29 682.194 L1163.73 682.194 L1163.17 682.194 L1162.61 682.194 L1162.05 682.194 L1161.5 682.194 L1160.94 682.194 L1160.38 682.194 L1159.82 682.194 L1159.26 682.194 L1158.7 682.194 L1158.14 682.194 L1157.58 682.194 L1157.02 682.194 L1156.46 682.194 L1155.9 682.194 L1155.34 682.194 L1154.78 682.194 L1154.23 682.194 L1153.67 682.194 L1153.11 682.194 L1152.55 682.194 L1151.99 682.194 L1151.43 682.194 L1150.87 682.194 L1150.31 682.194 L1149.75 682.194 L1149.19 682.194 L1148.63 682.194 L1148.07 682.194 L1147.51 682.194 L1146.96 682.194 L1146.4 682.194 L1145.84 682.194 L1145.28 682.194 L1144.72 682.194 L1144.16 682.194 L1143.6 682.194 L1143.04 682.194 L1142.48 682.194 L1141.92 682.194 L1141.36 682.194 L1140.8 682.194 L1140.24 682.194 L1139.68 682.194 L1139.13 682.194 L1138.57 682.194 L1138.01 682.194 L1137.45 682.194 L1136.89 682.194 L1136.33 682.194 L1135.77 682.194 L1135.21 682.194 L1134.65 682.194 L1134.09 682.194 L1133.53 682.194 L1132.97 682.194 L1132.41 682.194 L1131.86 682.194 L1131.3 682.194 L1130.74 682.194 L1130.18 682.194 L1129.62 682.194 L1129.06 682.194 L1128.5 682.194 L1127.94 682.194 L1127.38 682.194 L1126.82 682.194 L1126.26 682.194 L1125.7 682.194 L1125.14 682.194 L1124.59 682.194 L1124.03 682.194 L1123.47 682.194 L1122.91 682.194 L1122.35 682.194 L1121.79 682.194 L1121.23 682.194 L1120.67 682.194 L1120.11 682.194 L1119.55 682.194 L1118.99 682.194 L1118.43 682.194 L1117.87 682.194 L1117.31 682.194 L1116.76 682.194 L1116.2 682.194 L1115.64 682.194 L1115.08 682.194 L1114.52 682.194 L1113.96 682.194 L1113.4 682.194 L1112.84 682.194 L1112.28 682.194 L1111.72 682.194 L1111.16 682.194 L1110.6 682.194 L1110.04 682.194 L1109.49 682.194 L1108.93 682.194 L1108.37 682.194 L1107.81 682.194 L1107.25 682.194 L1106.69 682.194 L1106.13 682.194 L1105.57 682.194 L1105.01 682.194 L1104.45 682.194 L1103.89 682.194 L1103.33 682.194 L1102.77 682.194 L1102.22 682.194 L1101.66 682.194 L1101.1 682.194 L1100.54 682.194 L1099.98 682.194 L1099.42 682.194 L1098.86 682.194 L1098.3 682.194 L1097.74 682.194 L1097.18 682.194 L1096.62 682.194 L1096.06 682.194 L1095.5 682.194 L1094.94 682.194 L1094.39 682.194 L1093.83 682.194 L1093.27 682.194 L1092.71 682.194 L1092.15 682.194 L1091.59 682.194 L1091.03 682.194 L1090.47 682.194 L1089.91 682.194 L1089.35 682.194 L1088.79 682.194 L1088.23 682.194 L1087.67 682.194 L1087.12 682.194 L1086.56 682.194 L1086 682.194 L1085.44 682.194 L1084.88 682.194 L1084.32 682.194 L1083.76 682.194 L1083.2 682.194 L1082.64 682.194 L1082.08 682.194 L1081.52 682.194 L1080.96 682.194 L1080.4 682.194 L1079.85 682.194 L1079.29 682.194 L1078.73 682.194 L1078.17 682.194 L1077.61 682.194 L1077.05 682.194 L1076.49 682.194 L1075.93 682.194 L1075.37 682.194 L1074.81 682.194 L1074.25 682.194 L1073.69 682.194 L1073.13 682.194 L1072.57 682.194 L1072.02 682.194 L1071.46 682.194 L1070.9 682.194 L1070.34 682.194 L1069.78 682.194 L1069.22 682.194 L1068.66 682.194 L1068.1 682.194 L1067.54 682.194 L1066.98 682.194 L1066.42 682.194 L1065.86 682.194 L1065.3 682.194 L1064.75 682.194 L1064.19 682.194 L1063.63 682.194 L1063.07 682.194 L1062.51 682.194 L1061.95 682.194 L1061.39 682.194 L1060.83 682.194 L1060.27 682.194 L1059.71 682.194 L1059.15 682.194 L1058.59 682.194 L1058.03 682.194 L1057.48 682.194 L1056.92 682.194 L1056.36 682.194 L1055.8 682.194 L1055.24 682.194 L1054.68 682.194 L1054.12 682.194 L1053.56 682.194 L1053 682.194 L1052.44 682.194 L1051.88 682.194 L1051.32 682.194 L1050.76 682.194 L1050.2 682.194 L1049.65 682.194 L1049.09 682.194 L1048.53 682.194 L1047.97 682.194 L1047.41 682.194 L1046.85 682.194 L1046.29 682.194 L1045.73 682.194 L1045.17 682.194 L1044.61 682.194 L1044.05 682.194 L1043.49 682.194 L1042.93 682.194 L1042.38 682.194 L1041.82 682.194 L1041.26 682.194 L1040.7 682.194 L1040.14 682.194 L1039.58 682.194 L1039.02 682.194 L1038.46 682.194 L1037.9 682.194 L1037.34 682.194 L1036.78 682.194 L1036.22 682.194 L1035.66 682.194 L1035.1 682.194 L1034.55 682.194 L1033.99 682.194 L1033.43 682.194 L1032.87 682.194 L1032.31 682.194 L1031.75 682.194 L1031.19 682.194 L1030.63 682.194 L1030.07 682.194 L1029.51 682.194 L1028.95 682.194 L1028.39 682.194 L1027.83 682.194 L1027.28 682.194 L1026.72 682.194 L1026.16 682.194 L1025.6 682.194 L1025.04 682.194 L1024.48 682.194 L1023.92 682.194 L1023.36 682.194 L1022.8 682.194 L1022.24 682.194 L1021.68 682.194 L1021.12 682.194 L1020.56 682.194 L1020.01 682.194 L1019.45 682.194 L1018.89 682.194 L1018.33 682.194 L1017.77 682.194 L1017.21 682.194 L1016.65 682.194 L1016.09 682.194 L1015.53 682.194 L1014.97 682.194 L1014.41 682.194 L1013.85 682.194 L1013.29 682.194 L1012.73 682.194 L1012.18 682.194 L1011.62 682.194 L1011.06 682.194 L1010.5 682.194 L1009.94 682.194 L1009.38 682.194 L1008.82 682.194 L1008.26 682.194 L1007.7 682.194 L1007.14 682.194 L1006.58 682.194 L1006.02 682.194 L1005.46 682.194 L1004.91 682.194 L1004.35 682.194 L1003.79 682.194 L1003.23 682.194 L1002.67 682.194 L1002.11 682.194 L1001.55 682.194 L1000.99 682.194 L1000.43 682.194 L999.872 682.194 L999.313 682.194 L998.754 682.194 L998.194 682.194 L997.635 682.194 L997.076 682.194 L996.517 682.194 L995.957 682.194 L995.398 682.194 L994.839 682.194 L994.28 682.194 L993.72 682.194 L993.161 682.194 L992.602 682.194 L992.043 682.194 L991.483 682.194 L990.924 682.194 L990.365 682.194 L989.806 682.194 L989.246 682.194 L988.687 682.194 L988.128 682.194 L987.569 682.194 L987.009 682.194 L986.45 682.194 L985.891 682.194 L985.332 682.194 L984.772 682.194 L984.213 682.194 L983.654 682.194 L983.095 682.194 L982.535 682.194 L981.976 682.194 L981.417 682.194 L980.858 682.194 L980.298 682.194 L979.739 682.194 L979.18 682.194 L978.621 682.194 L978.061 682.194 L977.502 682.194 L976.943 682.194 L976.384 682.194 L975.824 682.194 L975.265 682.194 L974.706 682.194 L974.147 682.194 L973.587 682.194 L973.028 682.194 L972.469 682.194 L971.91 682.194 L971.35 682.194 L970.791 682.194 L970.232 682.194 L969.673 682.194 L969.113 682.194 L968.554 682.194 L967.995 682.194 L967.436 682.194 L966.876 682.194 L966.317 682.194 L965.758 682.194 L965.199 682.194 L964.639 682.194 L964.08 682.194 L963.521 682.194 L962.962 682.194 L962.402 682.194 L961.843 682.194 L961.284 682.194 L960.725 682.194 L960.165 682.194 L959.606 682.194 L959.047 682.194 L958.488 682.194 L957.928 682.194 L957.369 682.194 L956.81 682.194 L956.251 682.194 L955.691 682.194 L955.132 682.194 L954.573 682.194 L954.014 682.194 L953.454 682.194 L952.895 682.194 L952.336 682.194 L951.777 682.194 L951.217 682.194 L950.658 682.194 L950.099 682.194 L949.54 682.194 L948.98 682.194 L948.421 682.194 L947.862 682.194 L947.303 682.194 L946.743 682.194 L946.184 682.194 L945.625 682.194 L945.066 682.194 L944.506 682.194 L943.947 682.194 L943.388 682.194 L942.829 682.194 L942.269 682.194 L941.71 682.194 L941.151 682.194 L940.592 682.194 L940.032 682.194 L939.473 682.194 L938.914 682.194 L938.355 682.194 L937.795 682.194 L937.236 682.194 L936.677 682.194 L936.118 682.194 L935.558 682.194 L934.999 682.194 L934.44 682.194 L933.881 682.194 L933.321 682.194 L932.762 682.194 L932.203 682.194 L931.644 682.194 L931.084 682.194 L930.525 682.194 L929.966 682.194 L929.406 682.194 L928.847 682.194 L928.288 682.194 L927.729 682.194 L927.169 682.194 L926.61 682.194 L926.051 682.194 L925.492 682.194 L924.932 682.194 L924.373 682.194 L923.814 682.194 L923.255 682.194 L922.695 682.194 L922.136 682.194 L921.577 682.194 L921.018 682.194 L920.458 682.194 L919.899 682.194 L919.34 682.194 L918.781 682.194 L918.221 682.194 L917.662 682.194 L917.103 682.194 L916.544 682.194 L915.984 682.194 L915.425 682.194 L914.866 682.194 L914.307 682.194 L913.747 682.194 L913.188 682.194 L912.629 682.194 L912.07 682.194 L911.51 682.194 L910.951 682.194 L910.392 682.194 L909.833 682.194 L909.273 682.194 L908.714 682.194 L908.155 682.194 L907.596 682.194 L907.036 682.194 L906.477 682.194 L905.918 682.194 L905.359 682.194 L904.799 682.194 L904.24 682.194 L903.681 682.194 L903.122 682.194 L902.562 682.194 L902.003 682.194 L901.444 682.194 L900.885 682.194 L900.325 682.194 L899.766 682.194 L899.207 682.194 L898.648 682.194 L898.088 682.194 L897.529 682.194 L896.97 682.194 L896.411 682.194 L895.851 682.194 L895.292 682.194 L894.733 682.194 L894.174 682.194 L893.614 682.194 L893.055 682.194 L892.496 682.194 L891.937 682.194 L891.377 682.194 L890.818 682.194 L890.259 682.194 L889.7 682.194 L889.14 682.194 L888.581 682.194 L888.022 682.194 L887.463 682.194 L886.903 682.194 L886.344 682.194 L885.785 682.194 L885.226 682.194 L884.666 682.194 L884.107 682.194 L883.548 682.194 L882.989 682.194 L882.429 682.194 L881.87 682.194 L881.311 682.194 L880.752 682.194 L880.192 682.194 L879.633 682.194 L879.074 682.194 L878.515 682.194 L877.955 682.194 L877.396 682.194 L876.837 682.194 L876.278 682.194 L875.718 682.194 L875.159 682.194 L874.6 682.194 L874.041 682.194 L873.481 682.194 L872.922 682.194 L872.363 682.194 L871.804 682.194 L871.244 682.194 L870.685 682.194 L870.126 682.194 L869.567 682.194 L869.007 682.194 L868.448 682.194 L867.889 682.194 L867.33 682.194 L866.77 682.194 L866.211 682.194 L865.652 682.194 L865.093 682.194 L864.533 682.194 L863.974 682.194 L863.415 682.194 L862.856 682.194 L862.296 682.194 L861.737 682.194 L861.178 682.194 L860.619 682.194 L860.059 682.194 L859.5 682.194 L858.941 682.194 L858.382 682.194 L857.822 682.194 L857.263 682.194 L856.704 682.194 L856.145 682.194 L855.585 682.194 L855.026 682.194 L854.467 682.194 L853.908 682.194 L853.348 682.194 L852.789 682.194 L852.23 682.194 L851.671 682.194 L851.111 682.194 L850.552 682.194 L849.993 682.194 L849.434 682.194 L848.874 682.194 L848.315 682.194 L847.756 682.194 L847.197 682.194 L846.637 682.194 L846.078 682.194 L845.519 682.194 L844.96 682.194 L844.4 682.194 L843.841 682.194 L843.282 682.194 L842.723 682.194 L842.163 682.194 L841.604 682.194 L841.045 682.194 L840.486 682.194 L839.926 682.194 L839.367 682.194 L838.808 682.194 L838.249 682.194 L837.689 682.194 L837.13 682.194 L836.571 682.194 L836.012 682.194 L835.452 682.194 L834.893 682.194 L834.334 682.194 L833.775 682.194 L833.215 682.194 L832.656 682.194 L832.097 682.194 L831.538 682.194 L830.978 682.194 L830.419 682.194 L829.86 682.194 L829.301 682.194 L828.741 682.194 L828.182 682.194 L827.623 682.194 L827.064 682.194 L826.504 682.194 L825.945 682.194 L825.386 682.194 L824.827 682.194 L824.267 682.194 L823.708 682.194 L823.149 682.194 L822.59 682.194 L822.03 682.194 L821.471 682.194 L820.912 682.194 L820.353 682.194 L819.793 682.194 L819.234 682.194 L818.675 682.194 L818.116 682.194 L817.556 682.194 L816.997 682.194 L816.438 682.194 L815.879 682.194 L815.319 682.194 L814.76 682.194 L814.201 682.194 L813.642 682.194 L813.082 682.194 L812.523 682.194 L811.964 682.194 L811.405 682.194 L810.845 682.194 L810.286 682.194 L809.727 682.194 L809.168 682.194 L808.608 682.194 L808.049 682.194 L807.49 682.194 L806.931 682.194 L806.371 682.194 L805.812 682.194 L805.253 682.194 L804.693 682.194 L804.134 682.194 L803.575 682.194 L803.016 682.194 L802.456 682.194 L801.897 682.194 L801.338 682.194 L800.779 682.194 L800.219 682.194 L799.66 682.194 L799.101 682.194 L798.542 682.194 L797.982 682.194 L797.423 682.194 L796.864 682.194 L796.305 682.194 L795.745 682.194 L795.186 682.194 L794.627 682.194 L794.068 682.194 L793.508 682.194 L792.949 682.194 L792.39 682.194 L791.831 682.194 L791.271 682.194 L790.712 682.194 L790.153 682.194 L789.594 682.194 L789.034 682.194 L788.475 682.194 L787.916 682.194 L787.357 682.194 L786.797 682.194 L786.238 682.194 L785.679 682.194 L785.12 682.194 L784.56 682.194 L784.001 682.194 L783.442 682.194 L782.883 682.194 L782.323 682.194 L781.764 682.194 L781.205 682.194 L780.646 682.194 L780.086 682.194 L779.527 682.194 L778.968 682.194 L778.409 682.194 L777.849 682.194 L777.29 682.194 L776.731 682.194 L776.172 682.194 L775.612 682.194 L775.053 682.194 L774.494 682.194 L773.935 682.194 L773.375 682.194 L772.816 682.194 L772.257 682.194 L771.698 682.194 L771.138 682.194 L770.579 682.194 L770.02 682.194 L769.461 682.194 L768.901 682.194 L768.342 682.194 L767.783 682.194 L767.224 682.194 L766.664 682.194 L766.105 682.194 L765.546 682.194 L764.987 682.194 L764.427 682.194 L763.868 682.194 L763.309 682.194 L762.75 682.194 L762.19 682.194 L761.631 682.194 L761.072 682.194 L760.513 682.194 L759.953 682.194 L759.394 682.194 L758.835 682.194 L758.276 682.194 L757.716 682.194 L757.157 682.194 L756.598 682.194 L756.039 682.194 L755.479 682.194 L754.92 682.194 L754.361 682.194 L753.802 682.194 L753.242 682.194 L752.683 682.194 L752.124 682.194 L751.565 682.194 L751.005 682.194 L750.446 682.194 L749.887 682.194 L749.328 682.194 L748.768 682.194 L748.209 682.194 L747.65 682.194 L747.091 682.194 L746.531 682.194 L745.972 682.194 L745.413 682.194 L744.854 682.194 L744.294 682.194 L743.735 682.194 L743.176 682.194 L742.617 682.194 L742.057 682.194 L741.498 682.194 L740.939 682.194 L740.38 682.194 L739.82 682.194 L739.261 682.194 L738.702 682.194 L738.143 682.194 L737.583 682.194 L737.024 682.194 L736.465 682.194 L735.906 682.194 L735.346 682.194 L734.787 682.194 L734.228 682.194 L733.669 682.194 L733.109 682.194 L732.55 682.194 L731.991 682.194 L731.432 682.194 L730.872 682.194 L730.313 682.194 L729.754 682.194 L729.195 682.194 L728.635 682.194 L728.076 682.194 L727.517 682.194 L726.958 682.194 L726.398 682.194 L725.839 682.194 L725.28 682.194 L724.721 682.194 L724.161 682.194 L723.602 682.194 L723.043 682.194 L722.484 682.194 L721.924 682.194 L721.365 682.194 L720.806 682.194 L720.247 682.194  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip513)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.535 720.806,687.535 721.365,687.535 721.924,687.535 722.484,687.535 723.043,687.535 723.602,687.535 724.161,687.535 724.721,687.535 725.28,687.535 725.839,687.535 726.398,687.535 726.958,687.535 727.517,687.535 728.076,687.535 728.635,687.535 729.195,687.535 729.754,687.535 730.313,687.535 730.872,687.535 731.432,687.535 731.991,687.535 732.55,687.535 733.109,687.535 733.669,687.535 734.228,687.535 734.787,687.535 735.346,687.535 735.906,687.535 736.465,687.535 737.024,687.535 737.583,687.535 738.143,687.535 738.702,687.535 739.261,687.535 739.82,687.535 740.38,687.535 740.939,687.535 741.498,687.535 742.057,687.535 742.617,687.535 743.176,687.535 743.735,687.535 744.294,687.535 744.854,687.535 745.413,687.535 745.972,687.535 746.531,687.535 747.091,687.535 747.65,687.535 748.209,687.535 748.768,687.535 749.328,687.535 749.887,687.535 750.446,687.535 751.005,687.535 751.565,687.535 752.124,687.535 752.683,687.535 753.242,687.535 753.802,687.535 754.361,687.535 754.92,687.535 755.479,687.535 756.039,687.535 756.598,687.535 757.157,687.535 757.716,687.535 758.276,687.535 758.835,687.535 759.394,687.535 759.953,687.535 760.513,687.535 761.072,687.535 761.631,687.535 762.19,687.535 762.75,687.535 763.309,687.535 763.868,687.535 764.427,687.535 764.987,687.535 765.546,687.535 766.105,687.535 766.664,687.535 767.224,687.535 767.783,687.535 768.342,687.535 768.901,687.535 769.461,687.535 770.02,687.535 770.579,687.535 771.138,687.535 771.698,687.535 772.257,687.535 772.816,687.535 773.375,687.535 773.935,687.535 774.494,687.535 775.053,687.535 775.612,687.535 776.172,687.535 776.731,687.535 777.29,687.535 777.849,687.535 778.409,687.535 778.968,687.535 779.527,687.535 780.086,687.535 780.646,687.535 781.205,687.535 781.764,687.535 782.323,687.535 782.883,687.535 783.442,687.535 784.001,687.535 784.56,687.535 785.12,687.535 785.679,687.535 786.238,687.535 786.797,687.535 787.357,687.535 787.916,687.535 788.475,687.535 789.034,687.535 789.594,687.535 790.153,687.535 790.712,687.535 791.271,687.535 791.831,687.535 792.39,687.535 792.949,687.535 793.508,687.535 794.068,687.535 794.627,687.535 795.186,687.535 795.745,687.535 796.305,687.535 796.864,687.535 797.423,687.535 797.982,687.535 798.542,687.535 799.101,687.535 799.66,687.535 800.219,687.535 800.779,687.535 801.338,687.535 801.897,687.535 802.456,687.535 803.016,687.535 803.575,687.535 804.134,687.535 804.693,687.535 805.253,687.535 805.812,687.535 806.371,687.535 806.931,687.535 807.49,687.535 808.049,687.535 808.608,687.535 809.168,687.535 809.727,687.535 810.286,687.535 810.845,687.535 811.405,687.535 811.964,687.535 812.523,687.535 813.082,687.535 813.642,687.535 814.201,687.535 814.76,687.535 815.319,687.535 815.879,687.535 816.438,687.535 816.997,687.535 817.556,687.535 818.116,687.535 818.675,687.535 819.234,687.535 819.793,687.535 820.353,687.535 820.912,687.535 821.471,687.535 822.03,687.535 822.59,687.535 823.149,687.535 823.708,687.535 824.267,687.535 824.827,687.535 825.386,687.535 825.945,687.535 826.504,687.535 827.064,687.535 827.623,687.535 828.182,687.535 828.741,687.535 829.301,687.535 829.86,687.535 830.419,687.535 830.978,687.535 831.538,687.535 832.097,687.535 832.656,687.535 833.215,687.535 833.775,687.535 834.334,687.535 834.893,687.535 835.452,687.535 836.012,687.535 836.571,687.535 837.13,687.535 837.689,687.535 838.249,687.535 838.808,687.535 839.367,687.535 839.926,687.535 840.486,687.535 841.045,687.535 841.604,687.535 842.163,687.535 842.723,687.535 843.282,687.535 843.841,687.535 844.4,687.535 844.96,687.535 845.519,687.535 846.078,687.535 846.637,687.535 847.197,687.535 847.756,687.535 848.315,687.535 848.874,687.535 849.434,687.535 849.993,687.535 850.552,687.535 851.111,687.535 851.671,687.535 852.23,687.535 852.789,687.535 853.348,687.535 853.908,687.535 854.467,687.535 855.026,687.535 855.585,687.535 856.145,687.535 856.704,687.535 857.263,687.535 857.822,687.535 858.382,687.535 858.941,687.535 859.5,687.535 860.059,687.535 860.619,687.535 861.178,687.535 861.737,687.535 862.296,687.535 862.856,687.535 863.415,687.535 863.974,687.535 864.533,687.535 865.093,687.535 865.652,687.535 866.211,687.535 866.77,687.535 867.33,687.535 867.889,687.535 868.448,687.535 869.007,687.535 869.567,687.535 870.126,687.535 870.685,687.535 871.244,687.535 871.804,687.535 872.363,687.535 872.922,687.535 873.481,687.535 874.041,687.535 874.6,687.535 875.159,687.535 875.718,687.535 876.278,687.535 876.837,687.535 877.396,687.535 877.955,687.535 878.515,687.535 879.074,687.535 879.633,687.535 880.192,687.535 880.752,687.535 881.311,687.535 881.87,687.535 882.429,687.535 882.989,687.535 883.548,687.535 884.107,687.535 884.666,687.535 885.226,687.535 885.785,687.535 886.344,687.535 886.903,687.535 887.463,687.535 888.022,687.535 888.581,687.535 889.14,687.535 889.7,687.535 890.259,687.535 890.818,687.535 891.377,687.535 891.937,687.535 892.496,687.535 893.055,687.535 893.614,687.535 894.174,687.535 894.733,687.535 895.292,687.535 895.851,687.535 896.411,687.535 896.97,687.535 897.529,687.535 898.088,687.535 898.648,687.535 899.207,687.535 899.766,687.535 900.325,687.535 900.885,687.535 901.444,687.535 902.003,687.535 902.562,687.535 903.122,687.535 903.681,687.535 904.24,687.535 904.799,687.535 905.359,687.535 905.918,687.535 906.477,687.535 907.036,687.535 907.596,687.535 908.155,687.535 908.714,687.535 909.273,687.535 909.833,687.535 910.392,687.535 910.951,687.535 911.51,687.535 912.07,687.535 912.629,687.535 913.188,687.535 913.747,687.535 914.307,687.535 914.866,687.535 915.425,687.535 915.984,687.535 916.544,687.535 917.103,687.535 917.662,687.535 918.221,687.535 918.781,687.535 919.34,687.535 919.899,687.535 920.458,687.535 921.018,687.535 921.577,687.535 922.136,687.535 922.695,687.535 923.255,687.535 923.814,687.535 924.373,687.535 924.932,687.535 925.492,687.535 926.051,687.535 926.61,687.535 927.169,687.535 927.729,687.535 928.288,687.535 928.847,687.535 929.406,687.535 929.966,687.535 930.525,687.535 931.084,687.535 931.644,687.535 932.203,687.535 932.762,687.535 933.321,687.535 933.881,687.535 934.44,687.535 934.999,687.535 935.558,687.535 936.118,687.535 936.677,687.535 937.236,687.535 937.795,687.535 938.355,687.535 938.914,687.535 939.473,687.535 940.032,687.535 940.592,687.535 941.151,687.535 941.71,687.535 942.269,687.535 942.829,687.535 943.388,687.535 943.947,687.535 944.506,687.535 945.066,687.535 945.625,687.535 946.184,687.535 946.743,687.535 947.303,687.535 947.862,687.535 948.421,687.535 948.98,687.535 949.54,687.535 950.099,687.535 950.658,687.535 951.217,687.535 951.777,687.535 952.336,687.535 952.895,687.535 953.454,687.535 954.014,687.535 954.573,687.535 955.132,687.535 955.691,687.535 956.251,687.535 956.81,687.535 957.369,687.535 957.928,687.535 958.488,687.535 959.047,687.535 959.606,687.535 960.165,687.535 960.725,687.535 961.284,687.535 961.843,687.535 962.402,687.535 962.962,687.535 963.521,687.535 964.08,687.535 964.639,687.535 965.199,687.535 965.758,687.535 966.317,687.535 966.876,687.535 967.436,687.535 967.995,687.535 968.554,687.535 969.113,687.535 969.673,687.535 970.232,687.535 970.791,687.535 971.35,687.535 971.91,687.535 972.469,687.535 973.028,687.535 973.587,687.535 974.147,687.535 974.706,687.535 975.265,687.535 975.824,687.535 976.384,687.535 976.943,687.535 977.502,687.535 978.061,687.535 978.621,687.535 979.18,687.535 979.739,687.535 980.298,687.535 980.858,687.535 981.417,687.535 981.976,687.535 982.535,687.535 983.095,687.535 983.654,687.535 984.213,687.535 984.772,687.535 985.332,687.535 985.891,687.535 986.45,687.535 987.009,687.535 987.569,687.535 988.128,687.535 988.687,687.535 989.246,687.535 989.806,687.535 990.365,687.535 990.924,687.535 991.483,687.535 992.043,687.535 992.602,687.535 993.161,687.535 993.72,687.535 994.28,687.535 994.839,687.535 995.398,687.535 995.957,687.535 996.517,687.535 997.076,687.535 997.635,687.535 998.194,687.535 998.754,687.535 999.313,687.535 999.872,687.535 1000.43,687.535 1000.99,687.535 1001.55,687.535 1002.11,687.535 1002.67,687.535 1003.23,687.535 1003.79,687.535 1004.35,687.535 1004.91,687.535 1005.46,687.535 1006.02,687.535 1006.58,687.535 1007.14,687.535 1007.7,687.535 1008.26,687.535 1008.82,687.535 1009.38,687.535 1009.94,687.535 1010.5,687.535 1011.06,687.535 1011.62,687.535 1012.18,687.535 1012.73,687.535 1013.29,687.535 1013.85,687.535 1014.41,687.535 1014.97,687.535 1015.53,687.535 1016.09,687.535 1016.65,687.535 1017.21,687.535 1017.77,687.535 1018.33,687.535 1018.89,687.535 1019.45,687.535 1020.01,687.535 1020.56,687.535 1021.12,687.535 1021.68,687.535 1022.24,687.535 1022.8,687.535 1023.36,687.535 1023.92,687.535 1024.48,687.535 1025.04,687.535 1025.6,687.535 1026.16,687.535 1026.72,687.535 1027.28,687.535 1027.83,687.535 1028.39,687.535 1028.95,687.535 1029.51,687.535 1030.07,687.535 1030.63,687.535 1031.19,687.535 1031.75,687.535 1032.31,687.535 1032.87,687.535 1033.43,687.535 1033.99,687.535 1034.55,687.535 1035.1,687.535 1035.66,687.535 1036.22,687.535 1036.78,687.535 1037.34,687.535 1037.9,687.535 1038.46,687.535 1039.02,687.535 1039.58,687.535 1040.14,687.535 1040.7,687.535 1041.26,687.535 1041.82,687.535 1042.38,687.535 1042.93,687.535 1043.49,687.535 1044.05,687.535 1044.61,687.535 1045.17,687.535 1045.73,687.535 1046.29,687.535 1046.85,687.535 1047.41,687.535 1047.97,687.535 1048.53,687.535 1049.09,687.535 1049.65,687.535 1050.2,687.535 1050.76,687.535 1051.32,687.535 1051.88,687.535 1052.44,687.535 1053,687.535 1053.56,687.535 1054.12,687.535 1054.68,687.535 1055.24,687.535 1055.8,687.535 1056.36,687.535 1056.92,687.535 1057.48,687.535 1058.03,687.535 1058.59,687.535 1059.15,687.535 1059.71,687.535 1060.27,687.535 1060.83,687.535 1061.39,687.535 1061.95,687.535 1062.51,687.535 1063.07,687.535 1063.63,687.535 1064.19,687.535 1064.75,687.535 1065.3,687.535 1065.86,687.535 1066.42,687.535 1066.98,687.535 1067.54,687.535 1068.1,687.535 1068.66,687.535 1069.22,687.535 1069.78,687.535 1070.34,687.535 1070.9,687.535 1071.46,687.535 1072.02,687.535 1072.57,687.535 1073.13,687.535 1073.69,687.535 1074.25,687.535 1074.81,687.535 1075.37,687.535 1075.93,687.535 1076.49,687.535 1077.05,687.535 1077.61,687.535 1078.17,687.535 1078.73,687.535 1079.29,687.535 1079.85,687.535 1080.4,687.535 1080.96,687.535 1081.52,687.535 1082.08,687.535 1082.64,687.535 1083.2,687.535 1083.76,687.535 1084.32,687.535 1084.88,687.535 1085.44,687.535 1086,687.535 1086.56,687.535 1087.12,687.535 1087.67,687.535 1088.23,687.535 1088.79,687.535 1089.35,687.535 1089.91,687.535 1090.47,687.535 1091.03,687.535 1091.59,687.535 1092.15,687.535 1092.71,687.535 1093.27,687.535 1093.83,687.535 1094.39,687.535 1094.94,687.535 1095.5,687.535 1096.06,687.535 1096.62,687.535 1097.18,687.535 1097.74,687.535 1098.3,687.535 1098.86,687.535 1099.42,687.535 1099.98,687.535 1100.54,687.535 1101.1,687.535 1101.66,687.535 1102.22,687.535 1102.77,687.535 1103.33,687.535 1103.89,687.535 1104.45,687.535 1105.01,687.535 1105.57,687.535 1106.13,687.535 1106.69,687.535 1107.25,687.535 1107.81,687.535 1108.37,687.535 1108.93,687.535 1109.49,687.535 1110.04,687.535 1110.6,687.535 1111.16,687.535 1111.72,687.535 1112.28,687.535 1112.84,687.535 1113.4,687.535 1113.96,687.535 1114.52,687.535 1115.08,687.535 1115.64,687.535 1116.2,687.535 1116.76,687.535 1117.31,687.535 1117.87,687.535 1118.43,687.535 1118.99,687.535 1119.55,687.535 1120.11,687.535 1120.67,687.535 1121.23,687.535 1121.79,687.535 1122.35,687.535 1122.91,687.535 1123.47,687.535 1124.03,687.535 1124.59,687.535 1125.14,687.535 1125.7,687.535 1126.26,687.535 1126.82,687.535 1127.38,687.535 1127.94,687.535 1128.5,687.535 1129.06,687.535 1129.62,687.535 1130.18,687.535 1130.74,687.535 1131.3,687.535 1131.86,687.535 1132.41,687.535 1132.97,687.535 1133.53,687.535 1134.09,687.535 1134.65,687.535 1135.21,687.535 1135.77,687.535 1136.33,687.535 1136.89,687.535 1137.45,687.535 1138.01,687.535 1138.57,687.535 1139.13,687.535 1139.68,687.535 1140.24,687.535 1140.8,687.535 1141.36,687.535 1141.92,687.535 1142.48,687.535 1143.04,687.535 1143.6,687.535 1144.16,687.535 1144.72,687.535 1145.28,687.535 1145.84,687.535 1146.4,687.535 1146.96,687.535 1147.51,687.535 1148.07,687.535 1148.63,687.535 1149.19,687.535 1149.75,687.535 1150.31,687.535 1150.87,687.535 1151.43,687.535 1151.99,687.535 1152.55,687.535 1153.11,687.535 1153.67,687.535 1154.23,687.535 1154.78,687.535 1155.34,687.535 1155.9,687.535 1156.46,687.535 1157.02,687.535 1157.58,687.535 1158.14,687.535 1158.7,687.535 1159.26,687.535 1159.82,687.535 1160.38,687.535 1160.94,687.535 1161.5,687.535 1162.05,687.535 1162.61,687.535 1163.17,687.535 1163.73,687.535 1164.29,687.535 1164.85,687.535 1165.41,687.535 1165.97,687.535 1166.53,687.535 1167.09,687.535 1167.65,687.535 1168.21,687.535 1168.77,687.535 1169.33,687.535 1169.88,687.535 1170.44,687.535 1171,687.535 1171.56,687.535 1172.12,687.535 1172.68,687.535 1173.24,687.535 1173.8,687.535 1174.36,687.535 1174.92,687.535 1175.48,687.535 1176.04,687.535 1176.6,687.535 1177.15,687.535 1177.71,687.535 1178.27,687.535 1178.83,687.535 1179.39,687.535 1179.95,687.535 1180.51,687.535 1181.07,687.535 1181.63,687.535 1182.19,687.535 1182.75,687.535 1183.31,687.535 1183.87,687.535 1184.43,687.535 1184.98,687.535 1185.54,687.535 1186.1,687.535 1186.66,687.535 1187.22,687.535 1187.78,687.535 1188.34,687.535 1188.9,687.535 1189.46,687.535 1190.02,687.535 1190.58,687.535 1191.14,687.535 1191.7,687.535 1192.25,687.535 1192.81,687.535 1193.37,687.535 1193.93,687.535 1194.49,687.535 1195.05,687.535 1195.61,687.535 1196.17,687.535 1196.73,687.535 1197.29,687.535 1197.85,687.535 1198.41,687.535 1198.97,687.535 1199.52,687.535 1200.08,687.535 1200.64,687.535 1201.2,687.535 1201.76,687.535 1202.32,687.535 1202.88,687.535 1203.44,687.535 1204,687.535 1204.56,687.535 1205.12,687.535 1205.68,687.535 1206.24,687.535 1206.8,687.535 1207.35,687.535 1207.91,687.535 1208.47,687.535 1209.03,687.535 1209.59,687.535 1210.15,687.535 1210.71,687.535 1211.27,687.535 1211.83,687.535 1212.39,687.535 1212.95,687.535 1213.51,687.535 1214.07,687.535 1214.62,687.535 1215.18,687.535 1215.74,687.535 1216.3,687.535 1216.86,687.535 1217.42,687.535 1217.98,687.535 1218.54,687.535 1219.1,687.535 1219.66,687.535 1220.22,687.535 1220.78,687.535 1221.34,687.535 1221.89,687.535 1222.45,687.535 1223.01,687.535 1223.57,687.535 1224.13,687.535 1224.69,687.535 1225.25,687.535 1225.81,687.535 1226.37,687.535 1226.93,687.535 1227.49,687.535 1228.05,687.535 1228.61,687.535 1229.17,687.535 1229.72,687.535 1230.28,687.535 1230.84,687.535 1231.4,687.535 1231.96,687.535 1232.52,687.535 1233.08,687.535 1233.64,687.535 1234.2,687.535 1234.76,687.535 1235.32,687.535 1235.88,687.535 1236.44,687.535 1236.99,687.535 1237.55,687.535 1238.11,687.535 1238.67,687.535 1239.23,687.535 1239.79,687.535 1240.35,687.535 1240.91,687.535 1241.47,687.535 1242.03,687.535 1242.59,687.535 1243.15,687.535 1243.71,687.535 1244.26,687.535 1244.82,687.535 1245.38,687.535 1245.94,687.535 1246.5,687.535 1247.06,687.535 1247.62,687.535 1248.18,687.535 1248.74,687.535 1249.3,687.535 1249.86,687.535 1250.42,687.535 1250.98,687.535 1251.54,687.535 1252.09,687.535 1252.65,687.535 1253.21,687.535 1253.77,687.535 1254.33,687.535 1254.89,687.535 1255.45,687.535 1256.01,687.535 1256.57,687.535 1257.13,687.535 1257.69,687.535 1258.25,687.535 1258.81,687.535 1259.36,687.535 1259.92,687.535 1260.48,687.535 1261.04,687.535 1261.6,687.535 1262.16,687.535 1262.72,687.535 1263.28,687.535 1263.84,687.535 1264.4,687.535 1264.96,687.535 1265.52,687.535 1266.08,687.535 1266.63,687.535 1267.19,687.535 1267.75,687.535 1268.31,687.535 1268.87,687.535 1269.43,687.535 1269.99,687.535 1270.55,687.535 1271.11,687.535 1271.67,687.535 1272.23,687.535 1272.79,687.535 1273.35,687.535 1273.91,687.535 1274.46,687.535 1275.02,687.535 1275.58,687.535 1276.14,687.535 1276.7,687.535 1277.26,687.535 1277.82,687.535 1278.38,687.535 1278.94,687.535 1279.5,687.535 1280.06,687.535 1280.62,687.535 1281.18,687.535 1281.73,687.535 1282.29,687.535 1282.85,687.535 1283.41,687.535 1283.97,687.535 1284.53,687.535 1285.09,687.535 1285.65,687.535 1286.21,687.535 1286.77,687.535 1287.33,687.535 1287.89,687.535 1288.45,687.535 1289,687.535 1289.56,687.535 1290.12,687.535 1290.68,687.535 1291.24,687.535 1291.8,687.535 1292.36,687.535 1292.92,687.535 1293.48,687.535 1294.04,687.535 1294.6,687.535 1295.16,687.535 1295.72,687.535 1296.28,687.535 1296.83,687.535 1297.39,687.535 1297.95,687.535 1298.51,687.535 1299.07,687.535 1299.63,687.535 1300.19,687.535 1300.75,687.535 1301.31,687.535 1301.87,687.535 1302.43,687.535 1302.99,687.535 1303.55,687.535 1304.1,687.535 1304.66,687.535 1305.22,687.535 1305.78,687.535 1306.34,687.535 1306.9,687.535 1307.46,687.535 1308.02,687.535 1308.58,687.535 1309.14,687.535 1309.7,687.535 1310.26,687.535 1310.82,687.535 1311.38,687.535 1311.93,687.535 1312.49,687.535 1313.05,687.535 1313.61,687.535 1314.17,687.535 1314.73,687.535 1315.29,687.535 1315.85,687.535 1316.41,687.535 1316.97,687.535 1317.53,687.535 1318.09,687.535 1318.65,687.535 1319.2,687.535 1319.76,687.535 1320.32,687.535 1320.88,687.535 1321.44,687.535 1322,687.535 1322.56,687.535 1323.12,687.535 1323.68,687.535 1324.24,687.535 1324.8,687.535 1325.36,687.535 1325.92,687.535 1326.47,687.535 1327.03,687.535 1327.59,687.535 1328.15,687.535 1328.71,687.535 1329.27,687.535 1329.83,687.535 1330.39,687.535 1330.95,687.535 1331.51,687.535 1332.07,687.535 1332.63,687.535 1333.19,687.535 1333.75,687.535 1334.3,687.535 1334.86,687.535 1335.42,687.535 1335.98,687.535 1336.54,687.535 1337.1,687.535 1337.66,687.535 1338.22,687.535 1338.78,687.535 1339.34,687.535 1339.9,687.535 1340.46,687.535 1341.02,687.535 1341.57,687.535 1342.13,687.535 1342.69,687.535 1343.25,687.535 1343.81,687.535 1344.37,687.535 1344.93,687.535 1345.49,687.535 1346.05,687.535 1346.61,687.535 1347.17,687.535 1347.73,687.535 1348.29,687.535 1348.84,687.535 1349.4,687.535 1349.96,687.535 1350.52,687.535 1351.08,687.535 1351.64,687.535 1352.2,687.535 1352.76,687.535 1353.32,687.535 1353.88,687.535 1354.44,687.535 1355,687.535 1355.56,687.535 1356.12,687.535 1356.67,687.535 1357.23,687.535 1357.79,687.535 1358.35,687.535 1358.91,687.535 1359.47,687.535 1360.03,687.535 1360.59,687.535 1361.15,687.535 1361.71,687.535 1362.27,687.535 1362.83,687.535 1363.39,687.535 1363.94,687.535 1364.5,687.535 1365.06,687.535 1365.62,687.535 1366.18,687.535 1366.74,687.535 1367.3,687.535 1367.86,687.535 1368.42,687.535 1368.98,687.535 1369.54,687.535 1370.1,687.535 1370.66,687.535 1371.21,687.535 1371.77,687.535 1372.33,687.535 1372.89,687.535 1373.45,687.535 1374.01,687.535 1374.57,687.535 1375.13,687.535 1375.69,687.535 1376.25,687.535 1376.81,687.535 1377.37,687.535 1377.93,687.535 1378.49,687.535 1379.04,687.535 1379.6,687.535 1380.16,687.535 1380.72,687.535 1381.28,687.535 1381.84,687.535 1382.4,687.535 1382.96,687.535 1383.52,687.535 1384.08,687.535 1384.64,687.535 1385.2,687.535 1385.76,687.535 1386.31,687.535 1386.87,687.535 1387.43,687.535 1387.99,687.535 1388.55,687.535 1389.11,687.535 1389.67,687.535 1390.23,687.535 1390.79,687.535 1391.35,687.535 1391.91,687.535 1392.47,687.535 1393.03,687.535 1393.58,687.535 1394.14,687.535 1394.7,687.535 1395.26,687.535 1395.82,687.535 1396.38,687.535 1396.94,687.535 1397.5,687.535 1398.06,687.535 1398.62,687.535 1399.18,687.535 1399.74,687.535 1400.3,687.535 1400.86,687.535 1401.41,687.535 1401.97,687.535 1402.53,687.535 1403.09,687.535 1403.65,687.535 1404.21,687.535 1404.77,687.535 1405.33,687.535 1405.89,687.535 1406.45,687.535 1407.01,687.535 1407.57,687.535 1408.13,687.535 1408.68,687.535 1409.24,687.535 1409.8,687.535 1410.36,687.535 1410.92,687.535 1411.48,687.535 1412.04,687.535 1412.6,687.535 1413.16,687.535 1413.72,687.535 1414.28,687.535 1414.84,687.535 1415.4,687.535 1415.95,687.535 1416.51,687.535 1417.07,687.535 1417.63,687.535 1418.19,687.535 1418.75,687.535 1419.31,687.535 1419.87,687.535 1420.43,687.535 1420.99,687.535 1421.55,687.535 1422.11,687.535 1422.67,687.535 1423.23,687.535 1423.78,687.535 1424.34,687.535 1424.9,687.535 1425.46,687.535 1426.02,687.535 1426.58,687.535 1427.14,687.535 1427.7,687.535 1428.26,687.535 1428.82,687.535 1429.38,687.535 1429.94,687.535 1430.5,687.535 1431.05,687.535 1431.61,687.535 1432.17,687.535 1432.73,687.535 1433.29,687.535 1433.85,687.535 1434.41,687.535 1434.97,687.535 1435.53,687.535 1436.09,687.535 1436.65,687.535 1437.21,687.535 1437.77,687.535 1438.33,687.535 1438.88,687.535 1439.44,687.535 1440,687.535 1440.56,687.535 1441.12,687.535 1441.68,687.535 1442.24,687.535 1442.8,687.535 1443.36,687.535 1443.92,687.535 1444.48,687.535 1445.04,687.535 1445.6,687.535 1446.15,687.535 1446.71,687.535 1447.27,687.535 1447.83,687.535 1448.39,687.535 1448.95,687.535 1449.51,687.535 1450.07,687.535 1450.63,687.535 1451.19,687.535 1451.75,687.535 1452.31,687.535 1452.87,687.535 1453.42,687.535 1453.98,687.535 1454.54,687.535 1455.1,687.535 1455.66,687.535 1456.22,687.535 1456.78,687.535 1457.34,687.535 1457.9,687.535 1458.46,687.535 1459.02,687.535 1459.58,687.535 1460.14,687.535 1460.7,687.535 1461.25,687.535 1461.81,687.535 1462.37,687.535 1462.93,687.535 1463.49,687.535 1464.05,687.535 1464.61,687.535 1465.17,687.535 1465.73,687.535 1466.29,687.535 1466.85,687.535 1467.41,687.535 1467.97,687.535 1468.52,687.535 1469.08,687.535 1469.64,687.535 1470.2,687.535 1470.76,687.535 1471.32,687.535 1471.88,687.535 1472.44,687.535 1473,687.535 1473.56,687.535 1474.12,687.535 1474.68,687.535 1475.24,687.535 1475.79,687.535 1476.35,687.535 1476.91,687.535 1477.47,687.535 1478.03,687.535 1478.59,687.535 1479.15,687.535 1479.71,687.535 1480.27,687.535 1480.83,687.535 1481.39,687.535 1481.95,687.535 1482.51,687.535 1483.07,687.535 1483.62,687.535 1484.18,687.535 1484.74,687.535 1485.3,687.535 1485.86,687.535 1486.42,687.535 1486.98,687.535 1487.54,687.535 1488.1,687.535 1488.66,687.535 1489.22,687.535 1489.78,687.535 1490.34,687.535 1490.89,687.535 1491.45,687.535 1492.01,687.535 1492.57,687.535 1493.13,687.535 1493.69,687.535 1494.25,687.535 1494.81,687.535 1495.37,687.535 1495.93,687.535 1496.49,687.535 1497.05,687.535 1497.61,687.535 1498.16,687.535 1498.72,687.535 1499.28,687.535 1499.84,687.535 1500.4,687.535 1500.96,687.535 1501.52,687.535 1502.08,687.535 1502.64,687.535 1503.2,687.535 1503.76,687.535 1504.32,687.535 1504.88,687.535 1505.44,687.535 1505.99,687.535 1506.55,687.535 1507.11,687.535 1507.67,687.535 1508.23,687.535 1508.79,687.535 1509.35,687.535 1509.91,687.535 1510.47,687.535 1511.03,687.535 1511.59,687.535 1512.15,687.535 1512.71,687.535 1513.26,687.535 1513.82,687.535 1514.38,687.535 1514.94,687.535 1515.5,687.535 1516.06,687.535 1516.62,687.535 1517.18,687.535 1517.74,687.535 1518.3,687.535 1518.86,687.535 1519.42,687.535 1519.98,687.535 1520.53,687.535 1521.09,687.535 1521.65,687.535 1522.21,687.535 1522.77,687.535 1523.33,687.535 1523.89,687.535 1524.45,687.535 1525.01,687.535 1525.57,687.535 1526.13,687.535 1526.69,687.535 1527.25,687.535 1527.81,687.535 1528.36,687.535 1528.92,687.535 1529.48,687.535 1530.04,687.535 1530.6,687.535 1531.16,687.535 1531.72,687.535 1532.28,687.535 1532.84,687.535 1533.4,687.535 1533.96,687.535 1534.52,687.535 1535.08,687.535 1535.63,687.535 1536.19,687.535 1536.75,687.535 1537.31,687.535 1537.87,687.535 1538.43,687.535 1538.99,687.535 1539.55,687.535 1540.11,687.535 1540.67,687.535 1541.23,687.535 1541.79,687.535 1542.35,687.535 1542.9,687.535 1543.46,687.535 1544.02,687.535 1544.58,687.535 1545.14,687.535 1545.7,687.535 1546.26,687.535 1546.82,687.535 1547.38,687.535 1547.94,687.535 1548.5,687.535 1549.06,687.535 1549.62,687.535 1550.18,687.535 1550.73,687.535 1551.29,687.535 1551.85,687.535 1552.41,687.535 1552.97,687.535 1553.53,687.535 1554.09,687.535 1554.65,687.535 1555.21,687.535 1555.77,687.535 1556.33,687.535 1556.89,687.535 1557.45,687.535 1558,687.535 1558.56,687.535 1559.12,687.535 1559.68,687.535 1560.24,687.535 1560.8,687.535 1561.36,687.535 1561.92,687.535 1562.48,687.535 1563.04,687.535 1563.6,687.535 1564.16,687.535 1564.72,687.535 1565.28,687.535 1565.83,687.535 1566.39,687.535 1566.95,687.535 1567.51,687.535 1568.07,687.535 1568.63,687.535 1569.19,687.535 1569.75,687.535 1570.31,687.535 1570.87,687.535 1571.43,687.535 1571.99,687.535 1572.55,687.535 1573.1,687.535 1573.66,687.535 1574.22,687.535 1574.78,687.535 1575.34,687.535 1575.9,687.535 1576.46,687.535 1577.02,687.535 1577.58,687.535 1578.14,687.535 1578.7,687.535 1579.26,687.535 1579.82,687.535 1580.37,687.535 1580.93,687.535 1581.49,687.535 1582.05,687.535 1582.61,687.535 1583.17,687.535 1583.73,687.535 1584.29,687.535 1584.85,687.535 1585.41,687.535 1585.97,687.535 1586.53,687.535 1587.09,687.535 1587.65,687.535 1588.2,687.535 1588.76,687.535 1589.32,687.535 1589.88,687.535 1590.44,687.535 1591,687.535 1591.56,687.535 1592.12,687.535 1592.68,687.535 1593.24,687.535 1593.8,687.535 1594.36,687.535 1594.92,687.535 1595.47,687.535 1596.03,687.535 1596.59,687.535 1597.15,687.535 1597.71,687.535 1598.27,687.535 1598.83,687.535 1599.39,687.535 1599.95,687.535 1600.51,687.535 1601.07,687.535 1601.63,687.535 1602.19,687.535 1602.74,687.535 1603.3,687.535 1603.86,687.535 1604.42,687.535 1604.98,687.535 1605.54,687.535 1606.1,687.535 1606.66,687.535 1607.22,687.535 1607.78,687.535 1608.34,687.535 1608.9,687.535 1609.46,687.535 1610.02,687.535 1610.57,687.535 1611.13,687.535 1611.69,687.535 1612.25,687.535 1612.81,687.535 1613.37,687.535 1613.93,687.535 1614.49,687.535 1615.05,687.535 1615.61,687.535 1616.17,687.535 1616.73,687.535 1617.29,687.535 1617.84,687.535 1618.4,687.535 1618.96,687.535 1619.52,687.535 1620.08,687.535 1620.64,687.535 1621.2,687.535 1621.76,687.535 1622.32,687.535 1622.88,687.535 1623.44,687.535 1624,687.535 1624.56,687.535 1625.11,687.535 1625.67,687.535 1626.23,687.535 1626.79,687.535 1627.35,687.535 1627.91,687.535 1628.47,687.535 1629.03,687.535 1629.59,687.535 1630.15,687.535 1630.71,687.535 1631.27,687.535 1631.83,687.535 1632.39,687.535 1632.94,687.535 1633.5,687.535 1634.06,687.535 1634.62,687.535 1635.18,687.535 1635.74,687.535 1636.3,687.535 1636.86,687.535 1637.42,687.535 1637.98,687.535 1638.54,687.535 1639.1,687.535 1639.66,687.535 1640.21,687.535 1640.77,687.535 1641.33,687.535 1641.89,687.535 1642.45,687.535 1643.01,687.535 1643.57,687.535 1644.13,687.535 1644.69,687.535 1645.25,687.535 1645.81,687.535 1646.37,687.535 1646.93,687.535 1647.48,687.535 1648.04,687.535 1648.6,687.535 1649.16,687.535 1649.72,687.535 1650.28,687.535 1650.84,687.535 1651.4,687.535 1651.96,687.535 1652.52,687.535 1653.08,687.535 1653.64,687.535 1654.2,687.535 1654.76,687.535 1655.31,687.535 1655.87,687.535 1656.43,687.535 1656.99,687.535 1657.55,687.535 1658.11,687.535 1658.67,687.535 1659.23,687.535 1659.79,687.535 1660.35,687.535 1660.91,687.535 1661.47,687.535 1662.03,687.535 1662.58,687.535 1663.14,687.535 1663.7,687.535 1664.26,687.535 1664.82,687.535 1665.38,687.535 1665.94,687.535 1666.5,687.535 1667.06,687.535 1667.62,687.535 1668.18,687.535 1668.74,687.535 1669.3,687.535 1669.85,687.535 1670.41,687.535 1670.97,687.535 1671.53,687.535 1672.09,687.535 1672.65,687.535 1673.21,687.535 1673.77,687.535 1674.33,687.535 1674.89,687.535 1675.45,687.535 1676.01,687.535 1676.57,687.535 1677.13,687.535 1677.68,687.535 1678.24,687.535 1678.8,687.535 1679.36,687.535 1679.92,687.535 1680.48,687.535 1681.04,687.535 1681.6,687.535 1682.16,687.535 1682.72,687.535 1683.28,687.535 1683.84,687.535 1684.4,687.535 1684.95,687.535 1685.51,687.535 1686.07,687.535 1686.63,687.535 1687.19,687.535 1687.75,687.535 1688.31,687.535 1688.87,687.535 1689.43,687.535 1689.99,687.535 1690.55,687.535 1691.11,687.535 1691.67,687.535 1692.23,687.535 1692.78,687.535 1693.34,687.535 1693.9,687.535 1694.46,687.535 1695.02,687.535 1695.58,687.535 1696.14,687.535 1696.7,687.535 1697.26,687.535 1697.82,687.535 1698.38,687.535 1698.94,687.535 1699.5,687.535 1700.05,687.535 1700.61,687.535 1701.17,687.535 1701.73,687.535 1702.29,687.535 1702.85,687.535 1703.41,687.535 1703.97,687.535 1704.53,687.535 1705.09,687.535 1705.65,687.535 1706.21,687.535 1706.77,687.535 1707.32,687.535 1707.88,687.535 1708.44,687.535 1709,687.535 1709.56,687.535 1710.12,687.535 1710.68,687.535 1711.24,687.535 1711.8,687.535 1712.36,687.535 1712.92,687.535 1713.48,687.535 1714.04,687.535 1714.6,687.535 1715.15,687.535 1715.71,687.535 1716.27,687.535 1716.83,687.535 1717.39,687.535 1717.95,687.535 1718.51,687.535 1719.07,687.535 1719.63,687.535 1720.19,687.535 1720.75,687.535 1721.31,687.535 1721.87,687.535 1722.42,687.535 1722.98,687.535 1723.54,687.535 1724.1,687.535 1724.66,687.535 1725.22,687.535 1725.78,687.535 1726.34,687.535 1726.9,687.535 1727.46,687.535 1728.02,687.535 1728.58,687.535 1729.14,687.535 1729.69,687.535 1730.25,687.535 1730.81,687.535 1731.37,687.535 1731.93,687.535 1732.49,687.535 1733.05,687.535 1733.61,687.535 1734.17,687.535 1734.73,687.535 1735.29,687.535 1735.85,687.535 1736.41,687.535 1736.97,687.535 1737.52,687.535 1738.08,687.535 1738.64,687.535 1739.2,687.535 1739.76,687.535 1740.32,687.535 1740.88,687.535 1741.44,687.535 1742,687.535 1742.56,687.535 1743.12,687.535 1743.68,687.535 1744.24,687.535 1744.79,687.535 1745.35,687.535 1745.91,687.535 1746.47,687.535 1747.03,687.535 1747.59,687.535 1748.15,687.535 1748.71,687.535 1749.27,687.535 1749.83,687.535 1750.39,687.535 1750.95,687.535 1751.51,687.535 1752.06,687.535 1752.62,687.535 1753.18,687.535 1753.74,687.535 1754.3,687.535 1754.86,687.535 1755.42,687.535 1755.98,687.535 1756.54,687.535 1757.1,687.535 1757.66,687.535 1758.22,687.535 1758.78,687.535 1759.34,687.535 1759.89,687.535 1760.45,687.535 1761.01,687.535 1761.57,687.535 1762.13,687.535 1762.69,687.535 1763.25,687.535 1763.81,687.535 1764.37,687.535 1764.93,687.535 1765.49,687.535 1766.05,687.535 1766.61,687.535 1767.16,687.535 1767.72,687.535 1768.28,687.535 1768.84,687.535 1769.4,687.535 1769.96,687.535 1770.52,687.535 1771.08,687.535 1771.64,687.535 1772.2,687.535 1772.76,687.535 1773.32,687.535 1773.88,687.535 1774.43,687.535 1774.99,687.535 1775.55,687.535 1776.11,687.535 1776.67,687.535 1777.23,687.535 1777.79,687.535 1778.35,687.535 1778.91,687.535 1779.47,687.535 1780.03,687.535 1780.59,687.535 1781.15,687.535 1781.71,687.535 1782.26,687.535 1782.82,687.535 1783.38,687.535 1783.94,687.535 1784.5,687.535 1785.06,687.535 1785.62,687.535 1786.18,687.535 1786.74,687.535 1787.3,687.535 1787.86,687.535 1788.42,687.535 1788.98,687.535 1789.53,687.535 1790.09,687.535 1790.65,687.535 1791.21,687.535 1791.77,687.535 1792.33,687.535 1792.89,687.535 1793.45,687.535 1794.01,687.535 1794.57,687.535 1795.13,687.535 1795.69,687.535 1796.25,687.535 1796.8,687.535 1797.36,687.535 1797.92,687.535 1798.48,687.535 1799.04,687.535 1799.6,687.535 1800.16,687.535 1800.72,687.535 1801.28,687.535 1801.84,687.535 1802.4,687.535 1802.96,687.535 1803.52,687.535 1804.08,687.535 1804.63,687.535 1805.19,687.535 1805.75,687.535 1806.31,687.535 1806.87,687.535 1807.43,687.535 1807.99,687.535 1808.55,687.535 1809.11,687.535 1809.67,687.535 1810.23,687.535 1810.79,687.535 1811.35,687.535 1811.9,687.535 1812.46,687.535 1813.02,687.535 1813.58,687.535 1814.14,687.535 1814.7,687.535 1815.26,687.535 1815.82,687.535 1816.38,687.535 1816.94,687.535 1817.5,687.535 1818.06,687.535 1818.62,687.535 1819.18,687.535 1819.73,687.535 1820.29,687.535 1820.85,687.535 1821.41,687.535 1821.97,687.535 1822.53,687.535 1823.09,687.535 1823.65,687.535 1824.21,687.535 1824.77,687.535 1825.33,687.535 1825.89,687.535 1826.45,687.535 1827,687.535 1827.56,687.535 1828.12,687.535 1828.68,687.535 1829.24,687.535 1829.8,687.535 1830.36,687.535 1830.92,687.535 1831.48,687.535 1832.04,687.535 1832.6,687.535 1833.16,687.535 1833.72,687.535 1834.27,687.535 1834.83,687.535 1835.39,687.535 1835.95,687.535 1836.51,687.535 1837.07,687.535 1837.63,687.535 1838.19,687.535 \"/>\n<path clip-path=\"url(#clip513)\" d=\"M720.247 684.826 L720.806 684.826 L721.365 684.826 L721.924 684.826 L722.484 684.826 L723.043 684.826 L723.602 684.826 L724.161 684.826 L724.721 684.826 L725.28 684.826 L725.839 684.826 L726.398 684.826 L726.958 684.826 L727.517 684.826 L728.076 684.826 L728.635 684.826 L729.195 684.826 L729.754 684.826 L730.313 684.826 L730.872 684.826 L731.432 684.826 L731.991 684.826 L732.55 684.826 L733.109 684.826 L733.669 684.826 L734.228 684.826 L734.787 684.826 L735.346 684.826 L735.906 684.826 L736.465 684.826 L737.024 684.826 L737.583 684.826 L738.143 684.826 L738.702 684.826 L739.261 684.826 L739.82 684.826 L740.38 684.826 L740.939 684.826 L741.498 684.826 L742.057 684.826 L742.617 684.826 L743.176 684.826 L743.735 684.826 L744.294 684.826 L744.854 684.826 L745.413 684.826 L745.972 684.826 L746.531 684.826 L747.091 684.826 L747.65 684.826 L748.209 684.826 L748.768 684.826 L749.328 684.826 L749.887 684.826 L750.446 684.826 L751.005 684.826 L751.565 684.826 L752.124 684.826 L752.683 684.826 L753.242 684.826 L753.802 684.826 L754.361 684.826 L754.92 684.826 L755.479 684.826 L756.039 684.826 L756.598 684.826 L757.157 684.826 L757.716 684.826 L758.276 684.826 L758.835 684.826 L759.394 684.826 L759.953 684.826 L760.513 684.826 L761.072 684.826 L761.631 684.826 L762.19 684.826 L762.75 684.826 L763.309 684.826 L763.868 684.826 L764.427 684.826 L764.987 684.826 L765.546 684.826 L766.105 684.826 L766.664 684.826 L767.224 684.826 L767.783 684.826 L768.342 684.826 L768.901 684.826 L769.461 684.826 L770.02 684.826 L770.579 684.826 L771.138 684.826 L771.698 684.826 L772.257 684.826 L772.816 684.826 L773.375 684.826 L773.935 684.826 L774.494 684.826 L775.053 684.826 L775.612 684.826 L776.172 684.826 L776.731 684.826 L777.29 684.826 L777.849 684.826 L778.409 684.826 L778.968 684.826 L779.527 684.826 L780.086 684.826 L780.646 684.826 L781.205 684.826 L781.764 684.826 L782.323 684.826 L782.883 684.826 L783.442 684.826 L784.001 684.826 L784.56 684.826 L785.12 684.826 L785.679 684.826 L786.238 684.826 L786.797 684.826 L787.357 684.826 L787.916 684.826 L788.475 684.826 L789.034 684.826 L789.594 684.826 L790.153 684.826 L790.712 684.826 L791.271 684.826 L791.831 684.826 L792.39 684.826 L792.949 684.826 L793.508 684.826 L794.068 684.826 L794.627 684.826 L795.186 684.826 L795.745 684.826 L796.305 684.826 L796.864 684.826 L797.423 684.826 L797.982 684.826 L798.542 684.826 L799.101 684.826 L799.66 684.826 L800.219 684.826 L800.779 684.826 L801.338 684.826 L801.897 684.826 L802.456 684.826 L803.016 684.826 L803.575 684.826 L804.134 684.826 L804.693 684.826 L805.253 684.826 L805.812 684.826 L806.371 684.826 L806.931 684.826 L807.49 684.826 L808.049 684.826 L808.608 684.826 L809.168 684.826 L809.727 684.826 L810.286 684.826 L810.845 684.826 L811.405 684.826 L811.964 684.826 L812.523 684.826 L813.082 684.826 L813.642 684.826 L814.201 684.826 L814.76 684.826 L815.319 684.826 L815.879 684.826 L816.438 684.826 L816.997 684.826 L817.556 684.826 L818.116 684.826 L818.675 684.826 L819.234 684.826 L819.793 684.826 L820.353 684.826 L820.912 684.826 L821.471 684.826 L822.03 684.826 L822.59 684.826 L823.149 684.826 L823.708 684.826 L824.267 684.826 L824.827 684.826 L825.386 684.826 L825.945 684.826 L826.504 684.826 L827.064 684.826 L827.623 684.826 L828.182 684.826 L828.741 684.826 L829.301 684.826 L829.86 684.826 L830.419 684.826 L830.978 684.826 L831.538 684.826 L832.097 684.826 L832.656 684.826 L833.215 684.826 L833.775 684.826 L834.334 684.826 L834.893 684.826 L835.452 684.826 L836.012 684.826 L836.571 684.826 L837.13 684.826 L837.689 684.826 L838.249 684.826 L838.808 684.826 L839.367 684.826 L839.926 684.826 L840.486 684.826 L841.045 684.826 L841.604 684.826 L842.163 684.826 L842.723 684.826 L843.282 684.826 L843.841 684.826 L844.4 684.826 L844.96 684.826 L845.519 684.826 L846.078 684.826 L846.637 684.826 L847.197 684.826 L847.756 684.826 L848.315 684.826 L848.874 684.826 L849.434 684.826 L849.993 684.826 L850.552 684.826 L851.111 684.826 L851.671 684.826 L852.23 684.826 L852.789 684.826 L853.348 684.826 L853.908 684.826 L854.467 684.826 L855.026 684.826 L855.585 684.826 L856.145 684.826 L856.704 684.826 L857.263 684.826 L857.822 684.826 L858.382 684.826 L858.941 684.826 L859.5 684.826 L860.059 684.826 L860.619 684.826 L861.178 684.826 L861.737 684.826 L862.296 684.826 L862.856 684.826 L863.415 684.826 L863.974 684.826 L864.533 684.826 L865.093 684.826 L865.652 684.826 L866.211 684.826 L866.77 684.826 L867.33 684.826 L867.889 684.826 L868.448 684.826 L869.007 684.826 L869.567 684.826 L870.126 684.826 L870.685 684.826 L871.244 684.826 L871.804 684.826 L872.363 684.826 L872.922 684.826 L873.481 684.826 L874.041 684.826 L874.6 684.826 L875.159 684.826 L875.718 684.826 L876.278 684.826 L876.837 684.826 L877.396 684.826 L877.955 684.826 L878.515 684.826 L879.074 684.826 L879.633 684.826 L880.192 684.826 L880.752 684.826 L881.311 684.826 L881.87 684.826 L882.429 684.826 L882.989 684.826 L883.548 684.826 L884.107 684.826 L884.666 684.826 L885.226 684.826 L885.785 684.826 L886.344 684.826 L886.903 684.826 L887.463 684.826 L888.022 684.826 L888.581 684.826 L889.14 684.826 L889.7 684.826 L890.259 684.826 L890.818 684.826 L891.377 684.826 L891.937 684.826 L892.496 684.826 L893.055 684.826 L893.614 684.826 L894.174 684.826 L894.733 684.826 L895.292 684.826 L895.851 684.826 L896.411 684.826 L896.97 684.826 L897.529 684.826 L898.088 684.826 L898.648 684.826 L899.207 684.826 L899.766 684.826 L900.325 684.826 L900.885 684.826 L901.444 684.826 L902.003 684.826 L902.562 684.826 L903.122 684.826 L903.681 684.826 L904.24 684.826 L904.799 684.826 L905.359 684.826 L905.918 684.826 L906.477 684.826 L907.036 684.826 L907.596 684.826 L908.155 684.826 L908.714 684.826 L909.273 684.826 L909.833 684.826 L910.392 684.826 L910.951 684.826 L911.51 684.826 L912.07 684.826 L912.629 684.826 L913.188 684.826 L913.747 684.826 L914.307 684.826 L914.866 684.826 L915.425 684.826 L915.984 684.826 L916.544 684.826 L917.103 684.826 L917.662 684.826 L918.221 684.826 L918.781 684.826 L919.34 684.826 L919.899 684.826 L920.458 684.826 L921.018 684.826 L921.577 684.826 L922.136 684.826 L922.695 684.826 L923.255 684.826 L923.814 684.826 L924.373 684.826 L924.932 684.826 L925.492 684.826 L926.051 684.826 L926.61 684.826 L927.169 684.826 L927.729 684.826 L928.288 684.826 L928.847 684.826 L929.406 684.826 L929.966 684.826 L930.525 684.826 L931.084 684.826 L931.644 684.826 L932.203 684.826 L932.762 684.826 L933.321 684.826 L933.881 684.826 L934.44 684.826 L934.999 684.826 L935.558 684.826 L936.118 684.826 L936.677 684.826 L937.236 684.826 L937.795 684.826 L938.355 684.826 L938.914 684.826 L939.473 684.826 L940.032 684.826 L940.592 684.826 L941.151 684.826 L941.71 684.826 L942.269 684.826 L942.829 684.826 L943.388 684.826 L943.947 684.826 L944.506 684.826 L945.066 684.826 L945.625 684.826 L946.184 684.826 L946.743 684.826 L947.303 684.826 L947.862 684.826 L948.421 684.826 L948.98 684.826 L949.54 684.826 L950.099 684.826 L950.658 684.826 L951.217 684.826 L951.777 684.826 L952.336 684.826 L952.895 684.826 L953.454 684.826 L954.014 684.826 L954.573 684.826 L955.132 684.826 L955.691 684.826 L956.251 684.826 L956.81 684.826 L957.369 684.826 L957.928 684.826 L958.488 684.826 L959.047 684.826 L959.606 684.826 L960.165 684.826 L960.725 684.826 L961.284 684.826 L961.843 684.826 L962.402 684.826 L962.962 684.826 L963.521 684.826 L964.08 684.826 L964.639 684.826 L965.199 684.826 L965.758 684.826 L966.317 684.826 L966.876 684.826 L967.436 684.826 L967.995 684.826 L968.554 684.826 L969.113 684.826 L969.673 684.826 L970.232 684.826 L970.791 684.826 L971.35 684.826 L971.91 684.826 L972.469 684.826 L973.028 684.826 L973.587 684.826 L974.147 684.826 L974.706 684.826 L975.265 684.826 L975.824 684.826 L976.384 684.826 L976.943 684.826 L977.502 684.826 L978.061 684.826 L978.621 684.826 L979.18 684.826 L979.739 684.826 L980.298 684.826 L980.858 684.826 L981.417 684.826 L981.976 684.826 L982.535 684.826 L983.095 684.826 L983.654 684.826 L984.213 684.826 L984.772 684.826 L985.332 684.826 L985.891 684.826 L986.45 684.826 L987.009 684.826 L987.569 684.826 L988.128 684.826 L988.687 684.826 L989.246 684.826 L989.806 684.826 L990.365 684.826 L990.924 684.826 L991.483 684.826 L992.043 684.826 L992.602 684.826 L993.161 684.826 L993.72 684.826 L994.28 684.826 L994.839 684.826 L995.398 684.826 L995.957 684.826 L996.517 684.826 L997.076 684.826 L997.635 684.826 L998.194 684.826 L998.754 684.826 L999.313 684.826 L999.872 684.826 L1000.43 684.826 L1000.99 684.826 L1001.55 684.826 L1002.11 684.826 L1002.67 684.826 L1003.23 684.826 L1003.79 684.826 L1004.35 684.826 L1004.91 684.826 L1005.46 684.826 L1006.02 684.826 L1006.58 684.826 L1007.14 684.826 L1007.7 684.826 L1008.26 684.826 L1008.82 684.826 L1009.38 684.826 L1009.94 684.826 L1010.5 684.826 L1011.06 684.826 L1011.62 684.826 L1012.18 684.826 L1012.73 684.826 L1013.29 684.826 L1013.85 684.826 L1014.41 684.826 L1014.97 684.826 L1015.53 684.826 L1016.09 684.826 L1016.65 684.826 L1017.21 684.826 L1017.77 684.826 L1018.33 684.826 L1018.89 684.826 L1019.45 684.826 L1020.01 684.826 L1020.56 684.826 L1021.12 684.826 L1021.68 684.826 L1022.24 684.826 L1022.8 684.826 L1023.36 684.826 L1023.92 684.826 L1024.48 684.826 L1025.04 684.826 L1025.6 684.826 L1026.16 684.826 L1026.72 684.826 L1027.28 684.826 L1027.83 684.826 L1028.39 684.826 L1028.95 684.826 L1029.51 684.826 L1030.07 684.826 L1030.63 684.826 L1031.19 684.826 L1031.75 684.826 L1032.31 684.826 L1032.87 684.826 L1033.43 684.826 L1033.99 684.826 L1034.55 684.826 L1035.1 684.826 L1035.66 684.826 L1036.22 684.826 L1036.78 684.826 L1037.34 684.826 L1037.9 684.826 L1038.46 684.826 L1039.02 684.826 L1039.58 684.826 L1040.14 684.826 L1040.7 684.826 L1041.26 684.826 L1041.82 684.826 L1042.38 684.826 L1042.93 684.826 L1043.49 684.826 L1044.05 684.826 L1044.61 684.826 L1045.17 684.826 L1045.73 684.826 L1046.29 684.826 L1046.85 684.826 L1047.41 684.826 L1047.97 684.826 L1048.53 684.826 L1049.09 684.826 L1049.65 684.826 L1050.2 684.826 L1050.76 684.826 L1051.32 684.826 L1051.88 684.826 L1052.44 684.826 L1053 684.826 L1053.56 684.826 L1054.12 684.826 L1054.68 684.826 L1055.24 684.826 L1055.8 684.826 L1056.36 684.826 L1056.92 684.826 L1057.48 684.826 L1058.03 684.826 L1058.59 684.826 L1059.15 684.826 L1059.71 684.826 L1060.27 684.826 L1060.83 684.826 L1061.39 684.826 L1061.95 684.826 L1062.51 684.826 L1063.07 684.826 L1063.63 684.826 L1064.19 684.826 L1064.75 684.826 L1065.3 684.826 L1065.86 684.826 L1066.42 684.826 L1066.98 684.826 L1067.54 684.826 L1068.1 684.826 L1068.66 684.826 L1069.22 684.826 L1069.78 684.826 L1070.34 684.826 L1070.9 684.826 L1071.46 684.826 L1072.02 684.826 L1072.57 684.826 L1073.13 684.826 L1073.69 684.826 L1074.25 684.826 L1074.81 684.826 L1075.37 684.826 L1075.93 684.826 L1076.49 684.826 L1077.05 684.826 L1077.61 684.826 L1078.17 684.826 L1078.73 684.826 L1079.29 684.826 L1079.85 684.826 L1080.4 684.826 L1080.96 684.826 L1081.52 684.826 L1082.08 684.826 L1082.64 684.826 L1083.2 684.826 L1083.76 684.826 L1084.32 684.826 L1084.88 684.826 L1085.44 684.826 L1086 684.826 L1086.56 684.826 L1087.12 684.826 L1087.67 684.826 L1088.23 684.826 L1088.79 684.826 L1089.35 684.826 L1089.91 684.826 L1090.47 684.826 L1091.03 684.826 L1091.59 684.826 L1092.15 684.826 L1092.71 684.826 L1093.27 684.826 L1093.83 684.826 L1094.39 684.826 L1094.94 684.826 L1095.5 684.826 L1096.06 684.826 L1096.62 684.826 L1097.18 684.826 L1097.74 684.826 L1098.3 684.826 L1098.86 684.826 L1099.42 684.826 L1099.98 684.826 L1100.54 684.826 L1101.1 684.826 L1101.66 684.826 L1102.22 684.826 L1102.77 684.826 L1103.33 684.826 L1103.89 684.826 L1104.45 684.826 L1105.01 684.826 L1105.57 684.826 L1106.13 684.826 L1106.69 684.826 L1107.25 684.826 L1107.81 684.826 L1108.37 684.826 L1108.93 684.826 L1109.49 684.826 L1110.04 684.826 L1110.6 684.826 L1111.16 684.826 L1111.72 684.826 L1112.28 684.826 L1112.84 684.826 L1113.4 684.826 L1113.96 684.826 L1114.52 684.826 L1115.08 684.826 L1115.64 684.826 L1116.2 684.826 L1116.76 684.826 L1117.31 684.826 L1117.87 684.826 L1118.43 684.826 L1118.99 684.826 L1119.55 684.826 L1120.11 684.826 L1120.67 684.826 L1121.23 684.826 L1121.79 684.826 L1122.35 684.826 L1122.91 684.826 L1123.47 684.826 L1124.03 684.826 L1124.59 684.826 L1125.14 684.826 L1125.7 684.826 L1126.26 684.826 L1126.82 684.826 L1127.38 684.826 L1127.94 684.826 L1128.5 684.826 L1129.06 684.826 L1129.62 684.826 L1130.18 684.826 L1130.74 684.826 L1131.3 684.826 L1131.86 684.826 L1132.41 684.826 L1132.97 684.826 L1133.53 684.826 L1134.09 684.826 L1134.65 684.826 L1135.21 684.826 L1135.77 684.826 L1136.33 684.826 L1136.89 684.826 L1137.45 684.826 L1138.01 684.826 L1138.57 684.826 L1139.13 684.826 L1139.68 684.826 L1140.24 684.826 L1140.8 684.826 L1141.36 684.826 L1141.92 684.826 L1142.48 684.826 L1143.04 684.826 L1143.6 684.826 L1144.16 684.826 L1144.72 684.826 L1145.28 684.826 L1145.84 684.826 L1146.4 684.826 L1146.96 684.826 L1147.51 684.826 L1148.07 684.826 L1148.63 684.826 L1149.19 684.826 L1149.75 684.826 L1150.31 684.826 L1150.87 684.826 L1151.43 684.826 L1151.99 684.826 L1152.55 684.826 L1153.11 684.826 L1153.67 684.826 L1154.23 684.826 L1154.78 684.826 L1155.34 684.826 L1155.9 684.826 L1156.46 684.826 L1157.02 684.826 L1157.58 684.826 L1158.14 684.826 L1158.7 684.826 L1159.26 684.826 L1159.82 684.826 L1160.38 684.826 L1160.94 684.826 L1161.5 684.826 L1162.05 684.826 L1162.61 684.826 L1163.17 684.826 L1163.73 684.826 L1164.29 684.826 L1164.85 684.826 L1165.41 684.826 L1165.97 684.826 L1166.53 684.826 L1167.09 684.826 L1167.65 684.826 L1168.21 684.826 L1168.77 684.826 L1169.33 684.826 L1169.88 684.826 L1170.44 684.826 L1171 684.826 L1171.56 684.826 L1172.12 684.826 L1172.68 684.826 L1173.24 684.826 L1173.8 684.826 L1174.36 684.826 L1174.92 684.826 L1175.48 684.826 L1176.04 684.826 L1176.6 684.826 L1177.15 684.826 L1177.71 684.826 L1178.27 684.826 L1178.83 684.826 L1179.39 684.826 L1179.95 684.826 L1180.51 684.826 L1181.07 684.826 L1181.63 684.826 L1182.19 684.826 L1182.75 684.826 L1183.31 684.826 L1183.87 684.826 L1184.43 684.826 L1184.98 684.826 L1185.54 684.826 L1186.1 684.826 L1186.66 684.826 L1187.22 684.826 L1187.78 684.826 L1188.34 684.826 L1188.9 684.826 L1189.46 684.826 L1190.02 684.826 L1190.58 684.826 L1191.14 684.826 L1191.7 684.826 L1192.25 684.826 L1192.81 684.826 L1193.37 684.826 L1193.93 684.826 L1194.49 684.826 L1195.05 684.826 L1195.61 684.826 L1196.17 684.826 L1196.73 684.826 L1197.29 684.826 L1197.85 684.826 L1198.41 684.826 L1198.97 684.826 L1199.52 684.826 L1200.08 684.826 L1200.64 684.826 L1201.2 684.826 L1201.76 684.826 L1202.32 684.826 L1202.88 684.826 L1203.44 684.826 L1204 684.826 L1204.56 684.826 L1205.12 684.826 L1205.68 684.826 L1206.24 684.826 L1206.8 684.826 L1207.35 684.826 L1207.91 684.826 L1208.47 684.826 L1209.03 684.826 L1209.59 684.826 L1210.15 684.826 L1210.71 684.826 L1211.27 684.826 L1211.83 684.826 L1212.39 684.826 L1212.95 684.826 L1213.51 684.826 L1214.07 684.826 L1214.62 684.826 L1215.18 684.826 L1215.74 684.826 L1216.3 684.826 L1216.86 684.826 L1217.42 684.826 L1217.98 684.826 L1218.54 684.826 L1219.1 684.826 L1219.66 684.826 L1220.22 684.826 L1220.78 684.826 L1221.34 684.826 L1221.89 684.826 L1222.45 684.826 L1223.01 684.826 L1223.57 684.826 L1224.13 684.826 L1224.69 684.826 L1225.25 684.826 L1225.81 684.826 L1226.37 684.826 L1226.93 684.826 L1227.49 684.826 L1228.05 684.826 L1228.61 684.826 L1229.17 684.826 L1229.72 684.826 L1230.28 684.826 L1230.84 684.826 L1231.4 684.826 L1231.96 684.826 L1232.52 684.826 L1233.08 684.826 L1233.64 684.826 L1234.2 684.826 L1234.76 684.826 L1235.32 684.826 L1235.88 684.826 L1236.44 684.826 L1236.99 684.826 L1237.55 684.826 L1238.11 684.826 L1238.67 684.826 L1239.23 684.826 L1239.79 684.826 L1240.35 684.826 L1240.91 684.826 L1241.47 684.826 L1242.03 684.826 L1242.59 684.826 L1243.15 684.826 L1243.71 684.826 L1244.26 684.826 L1244.82 684.826 L1245.38 684.826 L1245.94 684.826 L1246.5 684.826 L1247.06 684.826 L1247.62 684.826 L1248.18 684.826 L1248.74 684.826 L1249.3 684.826 L1249.86 684.826 L1250.42 684.826 L1250.98 684.826 L1251.54 684.826 L1252.09 684.826 L1252.65 684.826 L1253.21 684.826 L1253.77 684.826 L1254.33 684.826 L1254.89 684.826 L1255.45 684.826 L1256.01 684.826 L1256.57 684.826 L1257.13 684.826 L1257.69 684.826 L1258.25 684.826 L1258.81 684.826 L1259.36 684.826 L1259.92 684.826 L1260.48 684.826 L1261.04 684.826 L1261.6 684.826 L1262.16 684.826 L1262.72 684.826 L1263.28 684.826 L1263.84 684.826 L1264.4 684.826 L1264.96 684.826 L1265.52 684.826 L1266.08 684.826 L1266.63 684.826 L1267.19 684.826 L1267.75 684.826 L1268.31 684.826 L1268.87 684.826 L1269.43 684.826 L1269.99 684.826 L1270.55 684.826 L1271.11 684.826 L1271.67 684.826 L1272.23 684.826 L1272.79 684.826 L1273.35 684.826 L1273.91 684.826 L1274.46 684.826 L1275.02 684.826 L1275.58 684.826 L1276.14 684.826 L1276.7 684.826 L1277.26 684.826 L1277.82 684.826 L1278.38 684.826 L1278.94 684.826 L1279.5 684.826 L1280.06 684.826 L1280.62 684.826 L1281.18 684.826 L1281.73 684.826 L1282.29 684.826 L1282.85 684.826 L1283.41 684.826 L1283.97 684.826 L1284.53 684.826 L1285.09 684.826 L1285.65 684.826 L1286.21 684.826 L1286.77 684.826 L1287.33 684.826 L1287.89 684.826 L1288.45 684.826 L1289 684.826 L1289.56 684.826 L1290.12 684.826 L1290.68 684.826 L1291.24 684.826 L1291.8 684.826 L1292.36 684.826 L1292.92 684.826 L1293.48 684.826 L1294.04 684.826 L1294.6 684.826 L1295.16 684.826 L1295.72 684.826 L1296.28 684.826 L1296.83 684.826 L1297.39 684.826 L1297.95 684.826 L1298.51 684.826 L1299.07 684.826 L1299.63 684.826 L1300.19 684.826 L1300.75 684.826 L1301.31 684.826 L1301.87 684.826 L1302.43 684.826 L1302.99 684.826 L1303.55 684.826 L1304.1 684.826 L1304.66 684.826 L1305.22 684.826 L1305.78 684.826 L1306.34 684.826 L1306.9 684.826 L1307.46 684.826 L1308.02 684.826 L1308.58 684.826 L1309.14 684.826 L1309.7 684.826 L1310.26 684.826 L1310.82 684.826 L1311.38 684.826 L1311.93 684.826 L1312.49 684.826 L1313.05 684.826 L1313.61 684.826 L1314.17 684.826 L1314.73 684.826 L1315.29 684.826 L1315.85 684.826 L1316.41 684.826 L1316.97 684.826 L1317.53 684.826 L1318.09 684.826 L1318.65 684.826 L1319.2 684.826 L1319.76 684.826 L1320.32 684.826 L1320.88 684.826 L1321.44 684.826 L1322 684.826 L1322.56 684.826 L1323.12 684.826 L1323.68 684.826 L1324.24 684.826 L1324.8 684.826 L1325.36 684.826 L1325.92 684.826 L1326.47 684.826 L1327.03 684.826 L1327.59 684.826 L1328.15 684.826 L1328.71 684.826 L1329.27 684.826 L1329.83 684.826 L1330.39 684.826 L1330.95 684.826 L1331.51 684.826 L1332.07 684.826 L1332.63 684.826 L1333.19 684.826 L1333.75 684.826 L1334.3 684.826 L1334.86 684.826 L1335.42 684.826 L1335.98 684.826 L1336.54 684.826 L1337.1 684.826 L1337.66 684.826 L1338.22 684.826 L1338.78 684.826 L1339.34 684.826 L1339.9 684.826 L1340.46 684.826 L1341.02 684.826 L1341.57 684.826 L1342.13 684.826 L1342.69 684.826 L1343.25 684.826 L1343.81 684.826 L1344.37 684.826 L1344.93 684.826 L1345.49 684.826 L1346.05 684.826 L1346.61 684.826 L1347.17 684.826 L1347.73 684.826 L1348.29 684.826 L1348.84 684.826 L1349.4 684.826 L1349.96 684.826 L1350.52 684.826 L1351.08 684.826 L1351.64 684.826 L1352.2 684.826 L1352.76 684.826 L1353.32 684.826 L1353.88 684.826 L1354.44 684.826 L1355 684.826 L1355.56 684.826 L1356.12 684.826 L1356.67 684.826 L1357.23 684.826 L1357.79 684.826 L1358.35 684.826 L1358.91 684.826 L1359.47 684.826 L1360.03 684.826 L1360.59 684.826 L1361.15 684.826 L1361.71 684.826 L1362.27 684.826 L1362.83 684.826 L1363.39 684.826 L1363.94 684.826 L1364.5 684.826 L1365.06 684.826 L1365.62 684.826 L1366.18 684.826 L1366.74 684.826 L1367.3 684.826 L1367.86 684.826 L1368.42 684.826 L1368.98 684.826 L1369.54 684.826 L1370.1 684.826 L1370.66 684.826 L1371.21 684.826 L1371.77 684.826 L1372.33 684.826 L1372.89 684.826 L1373.45 684.826 L1374.01 684.826 L1374.57 684.826 L1375.13 684.826 L1375.69 684.826 L1376.25 684.826 L1376.81 684.826 L1377.37 684.826 L1377.93 684.826 L1378.49 684.826 L1379.04 684.826 L1379.6 684.826 L1380.16 684.826 L1380.72 684.826 L1381.28 684.826 L1381.84 684.826 L1382.4 684.826 L1382.96 684.826 L1383.52 684.826 L1384.08 684.826 L1384.64 684.826 L1385.2 684.826 L1385.76 684.826 L1386.31 684.826 L1386.87 684.826 L1387.43 684.826 L1387.99 684.826 L1388.55 684.826 L1389.11 684.826 L1389.67 684.826 L1390.23 684.826 L1390.79 684.826 L1391.35 684.826 L1391.91 684.826 L1392.47 684.826 L1393.03 684.826 L1393.58 684.826 L1394.14 684.826 L1394.7 684.826 L1395.26 684.826 L1395.82 684.826 L1396.38 684.826 L1396.94 684.826 L1397.5 684.826 L1398.06 684.826 L1398.62 684.826 L1399.18 684.826 L1399.74 684.826 L1400.3 684.826 L1400.86 684.826 L1401.41 684.826 L1401.97 684.826 L1402.53 684.826 L1403.09 684.826 L1403.65 684.826 L1404.21 684.826 L1404.77 684.826 L1405.33 684.826 L1405.89 684.826 L1406.45 684.826 L1407.01 684.826 L1407.57 684.826 L1408.13 684.826 L1408.68 684.826 L1409.24 684.826 L1409.8 684.826 L1410.36 684.826 L1410.92 684.826 L1411.48 684.826 L1412.04 684.826 L1412.6 684.826 L1413.16 684.826 L1413.72 684.826 L1414.28 684.826 L1414.84 684.826 L1415.4 684.826 L1415.95 684.826 L1416.51 684.826 L1417.07 684.826 L1417.63 684.826 L1418.19 684.826 L1418.75 684.826 L1419.31 684.826 L1419.87 684.826 L1420.43 684.826 L1420.99 684.826 L1421.55 684.826 L1422.11 684.826 L1422.67 684.826 L1423.23 684.826 L1423.78 684.826 L1424.34 684.826 L1424.9 684.826 L1425.46 684.826 L1426.02 684.826 L1426.58 684.826 L1427.14 684.826 L1427.7 684.826 L1428.26 684.826 L1428.82 684.826 L1429.38 684.826 L1429.94 684.826 L1430.5 684.826 L1431.05 684.826 L1431.61 684.826 L1432.17 684.826 L1432.73 684.826 L1433.29 684.826 L1433.85 684.826 L1434.41 684.826 L1434.97 684.826 L1435.53 684.826 L1436.09 684.826 L1436.65 684.826 L1437.21 684.826 L1437.77 684.826 L1438.33 684.826 L1438.88 684.826 L1439.44 684.826 L1440 684.826 L1440.56 684.826 L1441.12 684.826 L1441.68 684.826 L1442.24 684.826 L1442.8 684.826 L1443.36 684.826 L1443.92 684.826 L1444.48 684.826 L1445.04 684.826 L1445.6 684.826 L1446.15 684.826 L1446.71 684.826 L1447.27 684.826 L1447.83 684.826 L1448.39 684.826 L1448.95 684.826 L1449.51 684.826 L1450.07 684.826 L1450.63 684.826 L1451.19 684.826 L1451.75 684.826 L1452.31 684.826 L1452.87 684.826 L1453.42 684.826 L1453.98 684.826 L1454.54 684.826 L1455.1 684.826 L1455.66 684.826 L1456.22 684.826 L1456.78 684.826 L1457.34 684.826 L1457.9 684.826 L1458.46 684.826 L1459.02 684.826 L1459.58 684.826 L1460.14 684.826 L1460.7 684.826 L1461.25 684.826 L1461.81 684.826 L1462.37 684.826 L1462.93 684.826 L1463.49 684.826 L1464.05 684.826 L1464.61 684.826 L1465.17 684.826 L1465.73 684.826 L1466.29 684.826 L1466.85 684.826 L1467.41 684.826 L1467.97 684.826 L1468.52 684.826 L1469.08 684.826 L1469.64 684.826 L1470.2 684.826 L1470.76 684.826 L1471.32 684.826 L1471.88 684.826 L1472.44 684.826 L1473 684.826 L1473.56 684.826 L1474.12 684.826 L1474.68 684.826 L1475.24 684.826 L1475.79 684.826 L1476.35 684.826 L1476.91 684.826 L1477.47 684.826 L1478.03 684.826 L1478.59 684.826 L1479.15 684.826 L1479.71 684.826 L1480.27 684.826 L1480.83 684.826 L1481.39 684.826 L1481.95 684.826 L1482.51 684.826 L1483.07 684.826 L1483.62 684.826 L1484.18 684.826 L1484.74 684.826 L1485.3 684.826 L1485.86 684.826 L1486.42 684.826 L1486.98 684.826 L1487.54 684.826 L1488.1 684.826 L1488.66 684.826 L1489.22 684.826 L1489.78 684.826 L1490.34 684.826 L1490.89 684.826 L1491.45 684.826 L1492.01 684.826 L1492.57 684.826 L1493.13 684.826 L1493.69 684.826 L1494.25 684.826 L1494.81 684.826 L1495.37 684.826 L1495.93 684.826 L1496.49 684.826 L1497.05 684.826 L1497.61 684.826 L1498.16 684.826 L1498.72 684.826 L1499.28 684.826 L1499.84 684.826 L1500.4 684.826 L1500.96 684.826 L1501.52 684.826 L1502.08 684.826 L1502.64 684.826 L1503.2 684.826 L1503.76 684.826 L1504.32 684.826 L1504.88 684.826 L1505.44 684.826 L1505.99 684.826 L1506.55 684.826 L1507.11 684.826 L1507.67 684.826 L1508.23 684.826 L1508.79 684.826 L1509.35 684.826 L1509.91 684.826 L1510.47 684.826 L1511.03 684.826 L1511.59 684.826 L1512.15 684.826 L1512.71 684.826 L1513.26 684.826 L1513.82 684.826 L1514.38 684.826 L1514.94 684.826 L1515.5 684.826 L1516.06 684.826 L1516.62 684.826 L1517.18 684.826 L1517.74 684.826 L1518.3 684.826 L1518.86 684.826 L1519.42 684.826 L1519.98 684.826 L1520.53 684.826 L1521.09 684.826 L1521.65 684.826 L1522.21 684.826 L1522.77 684.826 L1523.33 684.826 L1523.89 684.826 L1524.45 684.826 L1525.01 684.826 L1525.57 684.826 L1526.13 684.826 L1526.69 684.826 L1527.25 684.826 L1527.81 684.826 L1528.36 684.826 L1528.92 684.826 L1529.48 684.826 L1530.04 684.826 L1530.6 684.826 L1531.16 684.826 L1531.72 684.826 L1532.28 684.826 L1532.84 684.826 L1533.4 684.826 L1533.96 684.826 L1534.52 684.826 L1535.08 684.826 L1535.63 684.826 L1536.19 684.826 L1536.75 684.826 L1537.31 684.826 L1537.87 684.826 L1538.43 684.826 L1538.99 684.826 L1539.55 684.826 L1540.11 684.826 L1540.67 684.826 L1541.23 684.826 L1541.79 684.826 L1542.35 684.826 L1542.9 684.826 L1543.46 684.826 L1544.02 684.826 L1544.58 684.826 L1545.14 684.826 L1545.7 684.826 L1546.26 684.826 L1546.82 684.826 L1547.38 684.826 L1547.94 684.826 L1548.5 684.826 L1549.06 684.826 L1549.62 684.826 L1550.18 684.826 L1550.73 684.826 L1551.29 684.826 L1551.85 684.826 L1552.41 684.826 L1552.97 684.826 L1553.53 684.826 L1554.09 684.826 L1554.65 684.826 L1555.21 684.826 L1555.77 684.826 L1556.33 684.826 L1556.89 684.826 L1557.45 684.826 L1558 684.826 L1558.56 684.826 L1559.12 684.826 L1559.68 684.826 L1560.24 684.826 L1560.8 684.826 L1561.36 684.826 L1561.92 684.826 L1562.48 684.826 L1563.04 684.826 L1563.6 684.826 L1564.16 684.826 L1564.72 684.826 L1565.28 684.826 L1565.83 684.826 L1566.39 684.826 L1566.95 684.826 L1567.51 684.826 L1568.07 684.826 L1568.63 684.826 L1569.19 684.826 L1569.75 684.826 L1570.31 684.826 L1570.87 684.826 L1571.43 684.826 L1571.99 684.826 L1572.55 684.826 L1573.1 684.826 L1573.66 684.826 L1574.22 684.826 L1574.78 684.826 L1575.34 684.826 L1575.9 684.826 L1576.46 684.826 L1577.02 684.826 L1577.58 684.826 L1578.14 684.826 L1578.7 684.826 L1579.26 684.826 L1579.82 684.826 L1580.37 684.826 L1580.93 684.826 L1581.49 684.826 L1582.05 684.826 L1582.61 684.826 L1583.17 684.826 L1583.73 684.826 L1584.29 684.826 L1584.85 684.826 L1585.41 684.826 L1585.97 684.826 L1586.53 684.826 L1587.09 684.826 L1587.65 684.826 L1588.2 684.826 L1588.76 684.826 L1589.32 684.826 L1589.88 684.826 L1590.44 684.826 L1591 684.826 L1591.56 684.826 L1592.12 684.826 L1592.68 684.826 L1593.24 684.826 L1593.8 684.826 L1594.36 684.826 L1594.92 684.826 L1595.47 684.826 L1596.03 684.826 L1596.59 684.826 L1597.15 684.826 L1597.71 684.826 L1598.27 684.826 L1598.83 684.826 L1599.39 684.826 L1599.95 684.826 L1600.51 684.826 L1601.07 684.826 L1601.63 684.826 L1602.19 684.826 L1602.74 684.826 L1603.3 684.826 L1603.86 684.826 L1604.42 684.826 L1604.98 684.826 L1605.54 684.826 L1606.1 684.826 L1606.66 684.826 L1607.22 684.826 L1607.78 684.826 L1608.34 684.826 L1608.9 684.826 L1609.46 684.826 L1610.02 684.826 L1610.57 684.826 L1611.13 684.826 L1611.69 684.826 L1612.25 684.826 L1612.81 684.826 L1613.37 684.826 L1613.93 684.826 L1614.49 684.826 L1615.05 684.826 L1615.61 684.826 L1616.17 684.826 L1616.73 684.826 L1617.29 684.826 L1617.84 684.826 L1618.4 684.826 L1618.96 684.826 L1619.52 684.826 L1620.08 684.826 L1620.64 684.826 L1621.2 684.826 L1621.76 684.826 L1622.32 684.826 L1622.88 684.826 L1623.44 684.826 L1624 684.826 L1624.56 684.826 L1625.11 684.826 L1625.67 684.826 L1626.23 684.826 L1626.79 684.826 L1627.35 684.826 L1627.91 684.826 L1628.47 684.826 L1629.03 684.826 L1629.59 684.826 L1630.15 684.826 L1630.71 684.826 L1631.27 684.826 L1631.83 684.826 L1632.39 684.826 L1632.94 684.826 L1633.5 684.826 L1634.06 684.826 L1634.62 684.826 L1635.18 684.826 L1635.74 684.826 L1636.3 684.826 L1636.86 684.826 L1637.42 684.826 L1637.98 684.826 L1638.54 684.826 L1639.1 684.826 L1639.66 684.826 L1640.21 684.826 L1640.77 684.826 L1641.33 684.826 L1641.89 684.826 L1642.45 684.826 L1643.01 684.826 L1643.57 684.826 L1644.13 684.826 L1644.69 684.826 L1645.25 684.826 L1645.81 684.826 L1646.37 684.826 L1646.93 684.826 L1647.48 684.826 L1648.04 684.826 L1648.6 684.826 L1649.16 684.826 L1649.72 684.826 L1650.28 684.826 L1650.84 684.826 L1651.4 684.826 L1651.96 684.826 L1652.52 684.826 L1653.08 684.826 L1653.64 684.826 L1654.2 684.826 L1654.76 684.826 L1655.31 684.826 L1655.87 684.826 L1656.43 684.826 L1656.99 684.826 L1657.55 684.826 L1658.11 684.826 L1658.67 684.826 L1659.23 684.826 L1659.79 684.826 L1660.35 684.826 L1660.91 684.826 L1661.47 684.826 L1662.03 684.826 L1662.58 684.826 L1663.14 684.826 L1663.7 684.826 L1664.26 684.826 L1664.82 684.826 L1665.38 684.826 L1665.94 684.826 L1666.5 684.826 L1667.06 684.826 L1667.62 684.826 L1668.18 684.826 L1668.74 684.826 L1669.3 684.826 L1669.85 684.826 L1670.41 684.826 L1670.97 684.826 L1671.53 684.826 L1672.09 684.826 L1672.65 684.826 L1673.21 684.826 L1673.77 684.826 L1674.33 684.826 L1674.89 684.826 L1675.45 684.826 L1676.01 684.826 L1676.57 684.826 L1677.13 684.826 L1677.68 684.826 L1678.24 684.826 L1678.8 684.826 L1679.36 684.826 L1679.92 684.826 L1680.48 684.826 L1681.04 684.826 L1681.6 684.826 L1682.16 684.826 L1682.72 684.826 L1683.28 684.826 L1683.84 684.826 L1684.4 684.826 L1684.95 684.826 L1685.51 684.826 L1686.07 684.826 L1686.63 684.826 L1687.19 684.826 L1687.75 684.826 L1688.31 684.826 L1688.87 684.826 L1689.43 684.826 L1689.99 684.826 L1690.55 684.826 L1691.11 684.826 L1691.67 684.826 L1692.23 684.826 L1692.78 684.826 L1693.34 684.826 L1693.9 684.826 L1694.46 684.826 L1695.02 684.826 L1695.58 684.826 L1696.14 684.826 L1696.7 684.826 L1697.26 684.826 L1697.82 684.826 L1698.38 684.826 L1698.94 684.826 L1699.5 684.826 L1700.05 684.826 L1700.61 684.826 L1701.17 684.826 L1701.73 684.826 L1702.29 684.826 L1702.85 684.826 L1703.41 684.826 L1703.97 684.826 L1704.53 684.826 L1705.09 684.826 L1705.65 684.826 L1706.21 684.826 L1706.77 684.826 L1707.32 684.826 L1707.88 684.826 L1708.44 684.826 L1709 684.826 L1709.56 684.826 L1710.12 684.826 L1710.68 684.826 L1711.24 684.826 L1711.8 684.826 L1712.36 684.826 L1712.92 684.826 L1713.48 684.826 L1714.04 684.826 L1714.6 684.826 L1715.15 684.826 L1715.71 684.826 L1716.27 684.826 L1716.83 684.826 L1717.39 684.826 L1717.95 684.826 L1718.51 684.826 L1719.07 684.826 L1719.63 684.826 L1720.19 684.826 L1720.75 684.826 L1721.31 684.826 L1721.87 684.826 L1722.42 684.826 L1722.98 684.826 L1723.54 684.826 L1724.1 684.826 L1724.66 684.826 L1725.22 684.826 L1725.78 684.826 L1726.34 684.826 L1726.9 684.826 L1727.46 684.826 L1728.02 684.826 L1728.58 684.826 L1729.14 684.826 L1729.69 684.826 L1730.25 684.826 L1730.81 684.826 L1731.37 684.826 L1731.93 684.826 L1732.49 684.826 L1733.05 684.826 L1733.61 684.826 L1734.17 684.826 L1734.73 684.826 L1735.29 684.826 L1735.85 684.826 L1736.41 684.826 L1736.97 684.826 L1737.52 684.826 L1738.08 684.826 L1738.64 684.826 L1739.2 684.826 L1739.76 684.826 L1740.32 684.826 L1740.88 684.826 L1741.44 684.826 L1742 684.826 L1742.56 684.826 L1743.12 684.826 L1743.68 684.826 L1744.24 684.826 L1744.79 684.826 L1745.35 684.826 L1745.91 684.826 L1746.47 684.826 L1747.03 684.826 L1747.59 684.826 L1748.15 684.826 L1748.71 684.826 L1749.27 684.826 L1749.83 684.826 L1750.39 684.826 L1750.95 684.826 L1751.51 684.826 L1752.06 684.826 L1752.62 684.826 L1753.18 684.826 L1753.74 684.826 L1754.3 684.826 L1754.86 684.826 L1755.42 684.826 L1755.98 684.826 L1756.54 684.826 L1757.1 684.826 L1757.66 684.826 L1758.22 684.826 L1758.78 684.826 L1759.34 684.826 L1759.89 684.826 L1760.45 684.826 L1761.01 684.826 L1761.57 684.826 L1762.13 684.826 L1762.69 684.826 L1763.25 684.826 L1763.81 684.826 L1764.37 684.826 L1764.93 684.826 L1765.49 684.826 L1766.05 684.826 L1766.61 684.826 L1767.16 684.826 L1767.72 684.826 L1768.28 684.826 L1768.84 684.826 L1769.4 684.826 L1769.96 684.826 L1770.52 684.826 L1771.08 684.826 L1771.64 684.826 L1772.2 684.826 L1772.76 684.826 L1773.32 684.826 L1773.88 684.826 L1774.43 684.826 L1774.99 684.826 L1775.55 684.826 L1776.11 684.826 L1776.67 684.826 L1777.23 684.826 L1777.79 684.826 L1778.35 684.826 L1778.91 684.826 L1779.47 684.826 L1780.03 684.826 L1780.59 684.826 L1781.15 684.826 L1781.71 684.826 L1782.26 684.826 L1782.82 684.826 L1783.38 684.826 L1783.94 684.826 L1784.5 684.826 L1785.06 684.826 L1785.62 684.826 L1786.18 684.826 L1786.74 684.826 L1787.3 684.826 L1787.86 684.826 L1788.42 684.826 L1788.98 684.826 L1789.53 684.826 L1790.09 684.826 L1790.65 684.826 L1791.21 684.826 L1791.77 684.826 L1792.33 684.826 L1792.89 684.826 L1793.45 684.826 L1794.01 684.826 L1794.57 684.826 L1795.13 684.826 L1795.69 684.826 L1796.25 684.826 L1796.8 684.826 L1797.36 684.826 L1797.92 684.826 L1798.48 684.826 L1799.04 684.826 L1799.6 684.826 L1800.16 684.826 L1800.72 684.826 L1801.28 684.826 L1801.84 684.826 L1802.4 684.826 L1802.96 684.826 L1803.52 684.826 L1804.08 684.826 L1804.63 684.826 L1805.19 684.826 L1805.75 684.826 L1806.31 684.826 L1806.87 684.826 L1807.43 684.826 L1807.99 684.826 L1808.55 684.826 L1809.11 684.826 L1809.67 684.826 L1810.23 684.826 L1810.79 684.826 L1811.35 684.826 L1811.9 684.826 L1812.46 684.826 L1813.02 684.826 L1813.58 684.826 L1814.14 684.826 L1814.7 684.826 L1815.26 684.826 L1815.82 684.826 L1816.38 684.826 L1816.94 684.826 L1817.5 684.826 L1818.06 684.826 L1818.62 684.826 L1819.18 684.826 L1819.73 684.826 L1820.29 684.826 L1820.85 684.826 L1821.41 684.826 L1821.97 684.826 L1822.53 684.826 L1823.09 684.826 L1823.65 684.826 L1824.21 684.826 L1824.77 684.826 L1825.33 684.826 L1825.89 684.826 L1826.45 684.826 L1827 684.826 L1827.56 684.826 L1828.12 684.826 L1828.68 684.826 L1829.24 684.826 L1829.8 684.826 L1830.36 684.826 L1830.92 684.826 L1831.48 684.826 L1832.04 684.826 L1832.6 684.826 L1833.16 684.826 L1833.72 684.826 L1834.27 684.826 L1834.83 684.826 L1835.39 684.826 L1835.95 684.826 L1836.51 684.826 L1837.07 684.826 L1837.63 684.826 L1838.19 684.826 L1838.19 682.606 L1837.63 682.606 L1837.07 682.606 L1836.51 682.606 L1835.95 682.606 L1835.39 682.606 L1834.83 682.606 L1834.27 682.606 L1833.72 682.606 L1833.16 682.606 L1832.6 682.606 L1832.04 682.606 L1831.48 682.606 L1830.92 682.606 L1830.36 682.606 L1829.8 682.606 L1829.24 682.606 L1828.68 682.606 L1828.12 682.606 L1827.56 682.606 L1827 682.606 L1826.45 682.606 L1825.89 682.606 L1825.33 682.606 L1824.77 682.606 L1824.21 682.606 L1823.65 682.606 L1823.09 682.606 L1822.53 682.606 L1821.97 682.606 L1821.41 682.606 L1820.85 682.606 L1820.29 682.606 L1819.73 682.606 L1819.18 682.606 L1818.62 682.606 L1818.06 682.606 L1817.5 682.606 L1816.94 682.606 L1816.38 682.606 L1815.82 682.606 L1815.26 682.606 L1814.7 682.606 L1814.14 682.606 L1813.58 682.606 L1813.02 682.606 L1812.46 682.606 L1811.9 682.606 L1811.35 682.606 L1810.79 682.606 L1810.23 682.606 L1809.67 682.606 L1809.11 682.606 L1808.55 682.606 L1807.99 682.606 L1807.43 682.606 L1806.87 682.606 L1806.31 682.606 L1805.75 682.606 L1805.19 682.606 L1804.63 682.606 L1804.08 682.606 L1803.52 682.606 L1802.96 682.606 L1802.4 682.606 L1801.84 682.606 L1801.28 682.606 L1800.72 682.606 L1800.16 682.606 L1799.6 682.606 L1799.04 682.606 L1798.48 682.606 L1797.92 682.606 L1797.36 682.606 L1796.8 682.606 L1796.25 682.606 L1795.69 682.606 L1795.13 682.606 L1794.57 682.606 L1794.01 682.606 L1793.45 682.606 L1792.89 682.606 L1792.33 682.606 L1791.77 682.606 L1791.21 682.606 L1790.65 682.606 L1790.09 682.606 L1789.53 682.606 L1788.98 682.606 L1788.42 682.606 L1787.86 682.606 L1787.3 682.606 L1786.74 682.606 L1786.18 682.606 L1785.62 682.606 L1785.06 682.606 L1784.5 682.606 L1783.94 682.606 L1783.38 682.606 L1782.82 682.606 L1782.26 682.606 L1781.71 682.606 L1781.15 682.606 L1780.59 682.606 L1780.03 682.606 L1779.47 682.606 L1778.91 682.606 L1778.35 682.606 L1777.79 682.606 L1777.23 682.606 L1776.67 682.606 L1776.11 682.606 L1775.55 682.606 L1774.99 682.606 L1774.43 682.606 L1773.88 682.606 L1773.32 682.606 L1772.76 682.606 L1772.2 682.606 L1771.64 682.606 L1771.08 682.606 L1770.52 682.606 L1769.96 682.606 L1769.4 682.606 L1768.84 682.606 L1768.28 682.606 L1767.72 682.606 L1767.16 682.606 L1766.61 682.606 L1766.05 682.606 L1765.49 682.606 L1764.93 682.606 L1764.37 682.606 L1763.81 682.606 L1763.25 682.606 L1762.69 682.606 L1762.13 682.606 L1761.57 682.606 L1761.01 682.606 L1760.45 682.606 L1759.89 682.606 L1759.34 682.606 L1758.78 682.606 L1758.22 682.606 L1757.66 682.606 L1757.1 682.606 L1756.54 682.606 L1755.98 682.606 L1755.42 682.606 L1754.86 682.606 L1754.3 682.606 L1753.74 682.606 L1753.18 682.606 L1752.62 682.606 L1752.06 682.606 L1751.51 682.606 L1750.95 682.606 L1750.39 682.606 L1749.83 682.606 L1749.27 682.606 L1748.71 682.606 L1748.15 682.606 L1747.59 682.606 L1747.03 682.606 L1746.47 682.606 L1745.91 682.606 L1745.35 682.606 L1744.79 682.606 L1744.24 682.606 L1743.68 682.606 L1743.12 682.606 L1742.56 682.606 L1742 682.606 L1741.44 682.606 L1740.88 682.606 L1740.32 682.606 L1739.76 682.606 L1739.2 682.606 L1738.64 682.606 L1738.08 682.606 L1737.52 682.606 L1736.97 682.606 L1736.41 682.606 L1735.85 682.606 L1735.29 682.606 L1734.73 682.606 L1734.17 682.606 L1733.61 682.606 L1733.05 682.606 L1732.49 682.606 L1731.93 682.606 L1731.37 682.606 L1730.81 682.606 L1730.25 682.606 L1729.69 682.606 L1729.14 682.606 L1728.58 682.606 L1728.02 682.606 L1727.46 682.606 L1726.9 682.606 L1726.34 682.606 L1725.78 682.606 L1725.22 682.606 L1724.66 682.606 L1724.1 682.606 L1723.54 682.606 L1722.98 682.606 L1722.42 682.606 L1721.87 682.606 L1721.31 682.606 L1720.75 682.606 L1720.19 682.606 L1719.63 682.606 L1719.07 682.606 L1718.51 682.606 L1717.95 682.606 L1717.39 682.606 L1716.83 682.606 L1716.27 682.606 L1715.71 682.606 L1715.15 682.606 L1714.6 682.606 L1714.04 682.606 L1713.48 682.606 L1712.92 682.606 L1712.36 682.606 L1711.8 682.606 L1711.24 682.606 L1710.68 682.606 L1710.12 682.606 L1709.56 682.606 L1709 682.606 L1708.44 682.606 L1707.88 682.606 L1707.32 682.606 L1706.77 682.606 L1706.21 682.606 L1705.65 682.606 L1705.09 682.606 L1704.53 682.606 L1703.97 682.606 L1703.41 682.606 L1702.85 682.606 L1702.29 682.606 L1701.73 682.606 L1701.17 682.606 L1700.61 682.606 L1700.05 682.606 L1699.5 682.606 L1698.94 682.606 L1698.38 682.606 L1697.82 682.606 L1697.26 682.606 L1696.7 682.606 L1696.14 682.606 L1695.58 682.606 L1695.02 682.606 L1694.46 682.606 L1693.9 682.606 L1693.34 682.606 L1692.78 682.606 L1692.23 682.606 L1691.67 682.606 L1691.11 682.606 L1690.55 682.606 L1689.99 682.606 L1689.43 682.606 L1688.87 682.606 L1688.31 682.606 L1687.75 682.606 L1687.19 682.606 L1686.63 682.606 L1686.07 682.606 L1685.51 682.606 L1684.95 682.606 L1684.4 682.606 L1683.84 682.606 L1683.28 682.606 L1682.72 682.606 L1682.16 682.606 L1681.6 682.606 L1681.04 682.606 L1680.48 682.606 L1679.92 682.606 L1679.36 682.606 L1678.8 682.606 L1678.24 682.606 L1677.68 682.606 L1677.13 682.606 L1676.57 682.606 L1676.01 682.606 L1675.45 682.606 L1674.89 682.606 L1674.33 682.606 L1673.77 682.606 L1673.21 682.606 L1672.65 682.606 L1672.09 682.606 L1671.53 682.606 L1670.97 682.606 L1670.41 682.606 L1669.85 682.606 L1669.3 682.606 L1668.74 682.606 L1668.18 682.606 L1667.62 682.606 L1667.06 682.606 L1666.5 682.606 L1665.94 682.606 L1665.38 682.606 L1664.82 682.606 L1664.26 682.606 L1663.7 682.606 L1663.14 682.606 L1662.58 682.606 L1662.03 682.606 L1661.47 682.606 L1660.91 682.606 L1660.35 682.606 L1659.79 682.606 L1659.23 682.606 L1658.67 682.606 L1658.11 682.606 L1657.55 682.606 L1656.99 682.606 L1656.43 682.606 L1655.87 682.606 L1655.31 682.606 L1654.76 682.606 L1654.2 682.606 L1653.64 682.606 L1653.08 682.606 L1652.52 682.606 L1651.96 682.606 L1651.4 682.606 L1650.84 682.606 L1650.28 682.606 L1649.72 682.606 L1649.16 682.606 L1648.6 682.606 L1648.04 682.606 L1647.48 682.606 L1646.93 682.606 L1646.37 682.606 L1645.81 682.606 L1645.25 682.606 L1644.69 682.606 L1644.13 682.606 L1643.57 682.606 L1643.01 682.606 L1642.45 682.606 L1641.89 682.606 L1641.33 682.606 L1640.77 682.606 L1640.21 682.606 L1639.66 682.606 L1639.1 682.606 L1638.54 682.606 L1637.98 682.606 L1637.42 682.606 L1636.86 682.606 L1636.3 682.606 L1635.74 682.606 L1635.18 682.606 L1634.62 682.606 L1634.06 682.606 L1633.5 682.606 L1632.94 682.606 L1632.39 682.606 L1631.83 682.606 L1631.27 682.606 L1630.71 682.606 L1630.15 682.606 L1629.59 682.606 L1629.03 682.606 L1628.47 682.606 L1627.91 682.606 L1627.35 682.606 L1626.79 682.606 L1626.23 682.606 L1625.67 682.606 L1625.11 682.606 L1624.56 682.606 L1624 682.606 L1623.44 682.606 L1622.88 682.606 L1622.32 682.606 L1621.76 682.606 L1621.2 682.606 L1620.64 682.606 L1620.08 682.606 L1619.52 682.606 L1618.96 682.606 L1618.4 682.606 L1617.84 682.606 L1617.29 682.606 L1616.73 682.606 L1616.17 682.606 L1615.61 682.606 L1615.05 682.606 L1614.49 682.606 L1613.93 682.606 L1613.37 682.606 L1612.81 682.606 L1612.25 682.606 L1611.69 682.606 L1611.13 682.606 L1610.57 682.606 L1610.02 682.606 L1609.46 682.606 L1608.9 682.606 L1608.34 682.606 L1607.78 682.606 L1607.22 682.606 L1606.66 682.606 L1606.1 682.606 L1605.54 682.606 L1604.98 682.606 L1604.42 682.606 L1603.86 682.606 L1603.3 682.606 L1602.74 682.606 L1602.19 682.606 L1601.63 682.606 L1601.07 682.606 L1600.51 682.606 L1599.95 682.606 L1599.39 682.606 L1598.83 682.606 L1598.27 682.606 L1597.71 682.606 L1597.15 682.606 L1596.59 682.606 L1596.03 682.606 L1595.47 682.606 L1594.92 682.606 L1594.36 682.606 L1593.8 682.606 L1593.24 682.606 L1592.68 682.606 L1592.12 682.606 L1591.56 682.606 L1591 682.606 L1590.44 682.606 L1589.88 682.606 L1589.32 682.606 L1588.76 682.606 L1588.2 682.606 L1587.65 682.606 L1587.09 682.606 L1586.53 682.606 L1585.97 682.606 L1585.41 682.606 L1584.85 682.606 L1584.29 682.606 L1583.73 682.606 L1583.17 682.606 L1582.61 682.606 L1582.05 682.606 L1581.49 682.606 L1580.93 682.606 L1580.37 682.606 L1579.82 682.606 L1579.26 682.606 L1578.7 682.606 L1578.14 682.606 L1577.58 682.606 L1577.02 682.606 L1576.46 682.606 L1575.9 682.606 L1575.34 682.606 L1574.78 682.606 L1574.22 682.606 L1573.66 682.606 L1573.1 682.606 L1572.55 682.606 L1571.99 682.606 L1571.43 682.606 L1570.87 682.606 L1570.31 682.606 L1569.75 682.606 L1569.19 682.606 L1568.63 682.606 L1568.07 682.606 L1567.51 682.606 L1566.95 682.606 L1566.39 682.606 L1565.83 682.606 L1565.28 682.606 L1564.72 682.606 L1564.16 682.606 L1563.6 682.606 L1563.04 682.606 L1562.48 682.606 L1561.92 682.606 L1561.36 682.606 L1560.8 682.606 L1560.24 682.606 L1559.68 682.606 L1559.12 682.606 L1558.56 682.606 L1558 682.606 L1557.45 682.606 L1556.89 682.606 L1556.33 682.606 L1555.77 682.606 L1555.21 682.606 L1554.65 682.606 L1554.09 682.606 L1553.53 682.606 L1552.97 682.606 L1552.41 682.606 L1551.85 682.606 L1551.29 682.606 L1550.73 682.606 L1550.18 682.606 L1549.62 682.606 L1549.06 682.606 L1548.5 682.606 L1547.94 682.606 L1547.38 682.606 L1546.82 682.606 L1546.26 682.606 L1545.7 682.606 L1545.14 682.606 L1544.58 682.606 L1544.02 682.606 L1543.46 682.606 L1542.9 682.606 L1542.35 682.606 L1541.79 682.606 L1541.23 682.606 L1540.67 682.606 L1540.11 682.606 L1539.55 682.606 L1538.99 682.606 L1538.43 682.606 L1537.87 682.606 L1537.31 682.606 L1536.75 682.606 L1536.19 682.606 L1535.63 682.606 L1535.08 682.606 L1534.52 682.606 L1533.96 682.606 L1533.4 682.606 L1532.84 682.606 L1532.28 682.606 L1531.72 682.606 L1531.16 682.606 L1530.6 682.606 L1530.04 682.606 L1529.48 682.606 L1528.92 682.606 L1528.36 682.606 L1527.81 682.606 L1527.25 682.606 L1526.69 682.606 L1526.13 682.606 L1525.57 682.606 L1525.01 682.606 L1524.45 682.606 L1523.89 682.606 L1523.33 682.606 L1522.77 682.606 L1522.21 682.606 L1521.65 682.606 L1521.09 682.606 L1520.53 682.606 L1519.98 682.606 L1519.42 682.606 L1518.86 682.606 L1518.3 682.606 L1517.74 682.606 L1517.18 682.606 L1516.62 682.606 L1516.06 682.606 L1515.5 682.606 L1514.94 682.606 L1514.38 682.606 L1513.82 682.606 L1513.26 682.606 L1512.71 682.606 L1512.15 682.606 L1511.59 682.606 L1511.03 682.606 L1510.47 682.606 L1509.91 682.606 L1509.35 682.606 L1508.79 682.606 L1508.23 682.606 L1507.67 682.606 L1507.11 682.606 L1506.55 682.606 L1505.99 682.606 L1505.44 682.606 L1504.88 682.606 L1504.32 682.606 L1503.76 682.606 L1503.2 682.606 L1502.64 682.606 L1502.08 682.606 L1501.52 682.606 L1500.96 682.606 L1500.4 682.606 L1499.84 682.606 L1499.28 682.606 L1498.72 682.606 L1498.16 682.606 L1497.61 682.606 L1497.05 682.606 L1496.49 682.606 L1495.93 682.606 L1495.37 682.606 L1494.81 682.606 L1494.25 682.606 L1493.69 682.606 L1493.13 682.606 L1492.57 682.606 L1492.01 682.606 L1491.45 682.606 L1490.89 682.606 L1490.34 682.606 L1489.78 682.606 L1489.22 682.606 L1488.66 682.606 L1488.1 682.606 L1487.54 682.606 L1486.98 682.606 L1486.42 682.606 L1485.86 682.606 L1485.3 682.606 L1484.74 682.606 L1484.18 682.606 L1483.62 682.606 L1483.07 682.606 L1482.51 682.606 L1481.95 682.606 L1481.39 682.606 L1480.83 682.606 L1480.27 682.606 L1479.71 682.606 L1479.15 682.606 L1478.59 682.606 L1478.03 682.606 L1477.47 682.606 L1476.91 682.606 L1476.35 682.606 L1475.79 682.606 L1475.24 682.606 L1474.68 682.606 L1474.12 682.606 L1473.56 682.606 L1473 682.606 L1472.44 682.606 L1471.88 682.606 L1471.32 682.606 L1470.76 682.606 L1470.2 682.606 L1469.64 682.606 L1469.08 682.606 L1468.52 682.606 L1467.97 682.606 L1467.41 682.606 L1466.85 682.606 L1466.29 682.606 L1465.73 682.606 L1465.17 682.606 L1464.61 682.606 L1464.05 682.606 L1463.49 682.606 L1462.93 682.606 L1462.37 682.606 L1461.81 682.606 L1461.25 682.606 L1460.7 682.606 L1460.14 682.606 L1459.58 682.606 L1459.02 682.606 L1458.46 682.606 L1457.9 682.606 L1457.34 682.606 L1456.78 682.606 L1456.22 682.606 L1455.66 682.606 L1455.1 682.606 L1454.54 682.606 L1453.98 682.606 L1453.42 682.606 L1452.87 682.606 L1452.31 682.606 L1451.75 682.606 L1451.19 682.606 L1450.63 682.606 L1450.07 682.606 L1449.51 682.606 L1448.95 682.606 L1448.39 682.606 L1447.83 682.606 L1447.27 682.606 L1446.71 682.606 L1446.15 682.606 L1445.6 682.606 L1445.04 682.606 L1444.48 682.606 L1443.92 682.606 L1443.36 682.606 L1442.8 682.606 L1442.24 682.606 L1441.68 682.606 L1441.12 682.606 L1440.56 682.606 L1440 682.606 L1439.44 682.606 L1438.88 682.606 L1438.33 682.606 L1437.77 682.606 L1437.21 682.606 L1436.65 682.606 L1436.09 682.606 L1435.53 682.606 L1434.97 682.606 L1434.41 682.606 L1433.85 682.606 L1433.29 682.606 L1432.73 682.606 L1432.17 682.606 L1431.61 682.606 L1431.05 682.606 L1430.5 682.606 L1429.94 682.606 L1429.38 682.606 L1428.82 682.606 L1428.26 682.606 L1427.7 682.606 L1427.14 682.606 L1426.58 682.606 L1426.02 682.606 L1425.46 682.606 L1424.9 682.606 L1424.34 682.606 L1423.78 682.606 L1423.23 682.606 L1422.67 682.606 L1422.11 682.606 L1421.55 682.606 L1420.99 682.606 L1420.43 682.606 L1419.87 682.606 L1419.31 682.606 L1418.75 682.606 L1418.19 682.606 L1417.63 682.606 L1417.07 682.606 L1416.51 682.606 L1415.95 682.606 L1415.4 682.606 L1414.84 682.606 L1414.28 682.606 L1413.72 682.606 L1413.16 682.606 L1412.6 682.606 L1412.04 682.606 L1411.48 682.606 L1410.92 682.606 L1410.36 682.606 L1409.8 682.606 L1409.24 682.606 L1408.68 682.606 L1408.13 682.606 L1407.57 682.606 L1407.01 682.606 L1406.45 682.606 L1405.89 682.606 L1405.33 682.606 L1404.77 682.606 L1404.21 682.606 L1403.65 682.606 L1403.09 682.606 L1402.53 682.606 L1401.97 682.606 L1401.41 682.606 L1400.86 682.606 L1400.3 682.606 L1399.74 682.606 L1399.18 682.606 L1398.62 682.606 L1398.06 682.606 L1397.5 682.606 L1396.94 682.606 L1396.38 682.606 L1395.82 682.606 L1395.26 682.606 L1394.7 682.606 L1394.14 682.606 L1393.58 682.606 L1393.03 682.606 L1392.47 682.606 L1391.91 682.606 L1391.35 682.606 L1390.79 682.606 L1390.23 682.606 L1389.67 682.606 L1389.11 682.606 L1388.55 682.606 L1387.99 682.606 L1387.43 682.606 L1386.87 682.606 L1386.31 682.606 L1385.76 682.606 L1385.2 682.606 L1384.64 682.606 L1384.08 682.606 L1383.52 682.606 L1382.96 682.606 L1382.4 682.606 L1381.84 682.606 L1381.28 682.606 L1380.72 682.606 L1380.16 682.606 L1379.6 682.606 L1379.04 682.606 L1378.49 682.606 L1377.93 682.606 L1377.37 682.606 L1376.81 682.606 L1376.25 682.606 L1375.69 682.606 L1375.13 682.606 L1374.57 682.606 L1374.01 682.606 L1373.45 682.606 L1372.89 682.606 L1372.33 682.606 L1371.77 682.606 L1371.21 682.606 L1370.66 682.606 L1370.1 682.606 L1369.54 682.606 L1368.98 682.606 L1368.42 682.606 L1367.86 682.606 L1367.3 682.606 L1366.74 682.606 L1366.18 682.606 L1365.62 682.606 L1365.06 682.606 L1364.5 682.606 L1363.94 682.606 L1363.39 682.606 L1362.83 682.606 L1362.27 682.606 L1361.71 682.606 L1361.15 682.606 L1360.59 682.606 L1360.03 682.606 L1359.47 682.606 L1358.91 682.606 L1358.35 682.606 L1357.79 682.606 L1357.23 682.606 L1356.67 682.606 L1356.12 682.606 L1355.56 682.606 L1355 682.606 L1354.44 682.606 L1353.88 682.606 L1353.32 682.606 L1352.76 682.606 L1352.2 682.606 L1351.64 682.606 L1351.08 682.606 L1350.52 682.606 L1349.96 682.606 L1349.4 682.606 L1348.84 682.606 L1348.29 682.606 L1347.73 682.606 L1347.17 682.606 L1346.61 682.606 L1346.05 682.606 L1345.49 682.606 L1344.93 682.606 L1344.37 682.606 L1343.81 682.606 L1343.25 682.606 L1342.69 682.606 L1342.13 682.606 L1341.57 682.606 L1341.02 682.606 L1340.46 682.606 L1339.9 682.606 L1339.34 682.606 L1338.78 682.606 L1338.22 682.606 L1337.66 682.606 L1337.1 682.606 L1336.54 682.606 L1335.98 682.606 L1335.42 682.606 L1334.86 682.606 L1334.3 682.606 L1333.75 682.606 L1333.19 682.606 L1332.63 682.606 L1332.07 682.606 L1331.51 682.606 L1330.95 682.606 L1330.39 682.606 L1329.83 682.606 L1329.27 682.606 L1328.71 682.606 L1328.15 682.606 L1327.59 682.606 L1327.03 682.606 L1326.47 682.606 L1325.92 682.606 L1325.36 682.606 L1324.8 682.606 L1324.24 682.606 L1323.68 682.606 L1323.12 682.606 L1322.56 682.606 L1322 682.606 L1321.44 682.606 L1320.88 682.606 L1320.32 682.606 L1319.76 682.606 L1319.2 682.606 L1318.65 682.606 L1318.09 682.606 L1317.53 682.606 L1316.97 682.606 L1316.41 682.606 L1315.85 682.606 L1315.29 682.606 L1314.73 682.606 L1314.17 682.606 L1313.61 682.606 L1313.05 682.606 L1312.49 682.606 L1311.93 682.606 L1311.38 682.606 L1310.82 682.606 L1310.26 682.606 L1309.7 682.606 L1309.14 682.606 L1308.58 682.606 L1308.02 682.606 L1307.46 682.606 L1306.9 682.606 L1306.34 682.606 L1305.78 682.606 L1305.22 682.606 L1304.66 682.606 L1304.1 682.606 L1303.55 682.606 L1302.99 682.606 L1302.43 682.606 L1301.87 682.606 L1301.31 682.606 L1300.75 682.606 L1300.19 682.606 L1299.63 682.606 L1299.07 682.606 L1298.51 682.606 L1297.95 682.606 L1297.39 682.606 L1296.83 682.606 L1296.28 682.606 L1295.72 682.606 L1295.16 682.606 L1294.6 682.606 L1294.04 682.606 L1293.48 682.606 L1292.92 682.606 L1292.36 682.606 L1291.8 682.606 L1291.24 682.606 L1290.68 682.606 L1290.12 682.606 L1289.56 682.606 L1289 682.606 L1288.45 682.606 L1287.89 682.606 L1287.33 682.606 L1286.77 682.606 L1286.21 682.606 L1285.65 682.606 L1285.09 682.606 L1284.53 682.606 L1283.97 682.606 L1283.41 682.606 L1282.85 682.606 L1282.29 682.606 L1281.73 682.606 L1281.18 682.606 L1280.62 682.606 L1280.06 682.606 L1279.5 682.606 L1278.94 682.606 L1278.38 682.606 L1277.82 682.606 L1277.26 682.606 L1276.7 682.606 L1276.14 682.606 L1275.58 682.606 L1275.02 682.606 L1274.46 682.606 L1273.91 682.606 L1273.35 682.606 L1272.79 682.606 L1272.23 682.606 L1271.67 682.606 L1271.11 682.606 L1270.55 682.606 L1269.99 682.606 L1269.43 682.606 L1268.87 682.606 L1268.31 682.606 L1267.75 682.606 L1267.19 682.606 L1266.63 682.606 L1266.08 682.606 L1265.52 682.606 L1264.96 682.606 L1264.4 682.606 L1263.84 682.606 L1263.28 682.606 L1262.72 682.606 L1262.16 682.606 L1261.6 682.606 L1261.04 682.606 L1260.48 682.606 L1259.92 682.606 L1259.36 682.606 L1258.81 682.606 L1258.25 682.606 L1257.69 682.606 L1257.13 682.606 L1256.57 682.606 L1256.01 682.606 L1255.45 682.606 L1254.89 682.606 L1254.33 682.606 L1253.77 682.606 L1253.21 682.606 L1252.65 682.606 L1252.09 682.606 L1251.54 682.606 L1250.98 682.606 L1250.42 682.606 L1249.86 682.606 L1249.3 682.606 L1248.74 682.606 L1248.18 682.606 L1247.62 682.606 L1247.06 682.606 L1246.5 682.606 L1245.94 682.606 L1245.38 682.606 L1244.82 682.606 L1244.26 682.606 L1243.71 682.606 L1243.15 682.606 L1242.59 682.606 L1242.03 682.606 L1241.47 682.606 L1240.91 682.606 L1240.35 682.606 L1239.79 682.606 L1239.23 682.606 L1238.67 682.606 L1238.11 682.606 L1237.55 682.606 L1236.99 682.606 L1236.44 682.606 L1235.88 682.606 L1235.32 682.606 L1234.76 682.606 L1234.2 682.606 L1233.64 682.606 L1233.08 682.606 L1232.52 682.606 L1231.96 682.606 L1231.4 682.606 L1230.84 682.606 L1230.28 682.606 L1229.72 682.606 L1229.17 682.606 L1228.61 682.606 L1228.05 682.606 L1227.49 682.606 L1226.93 682.606 L1226.37 682.606 L1225.81 682.606 L1225.25 682.606 L1224.69 682.606 L1224.13 682.606 L1223.57 682.606 L1223.01 682.606 L1222.45 682.606 L1221.89 682.606 L1221.34 682.606 L1220.78 682.606 L1220.22 682.606 L1219.66 682.606 L1219.1 682.606 L1218.54 682.606 L1217.98 682.606 L1217.42 682.606 L1216.86 682.606 L1216.3 682.606 L1215.74 682.606 L1215.18 682.606 L1214.62 682.606 L1214.07 682.606 L1213.51 682.606 L1212.95 682.606 L1212.39 682.606 L1211.83 682.606 L1211.27 682.606 L1210.71 682.606 L1210.15 682.606 L1209.59 682.606 L1209.03 682.606 L1208.47 682.606 L1207.91 682.606 L1207.35 682.606 L1206.8 682.606 L1206.24 682.606 L1205.68 682.606 L1205.12 682.606 L1204.56 682.606 L1204 682.606 L1203.44 682.606 L1202.88 682.606 L1202.32 682.606 L1201.76 682.606 L1201.2 682.606 L1200.64 682.606 L1200.08 682.606 L1199.52 682.606 L1198.97 682.606 L1198.41 682.606 L1197.85 682.606 L1197.29 682.606 L1196.73 682.606 L1196.17 682.606 L1195.61 682.606 L1195.05 682.606 L1194.49 682.606 L1193.93 682.606 L1193.37 682.606 L1192.81 682.606 L1192.25 682.606 L1191.7 682.606 L1191.14 682.606 L1190.58 682.606 L1190.02 682.606 L1189.46 682.606 L1188.9 682.606 L1188.34 682.606 L1187.78 682.606 L1187.22 682.606 L1186.66 682.606 L1186.1 682.606 L1185.54 682.606 L1184.98 682.606 L1184.43 682.606 L1183.87 682.606 L1183.31 682.606 L1182.75 682.606 L1182.19 682.606 L1181.63 682.606 L1181.07 682.606 L1180.51 682.606 L1179.95 682.606 L1179.39 682.606 L1178.83 682.606 L1178.27 682.606 L1177.71 682.606 L1177.15 682.606 L1176.6 682.606 L1176.04 682.606 L1175.48 682.606 L1174.92 682.606 L1174.36 682.606 L1173.8 682.606 L1173.24 682.606 L1172.68 682.606 L1172.12 682.606 L1171.56 682.606 L1171 682.606 L1170.44 682.606 L1169.88 682.606 L1169.33 682.606 L1168.77 682.606 L1168.21 682.606 L1167.65 682.606 L1167.09 682.606 L1166.53 682.606 L1165.97 682.606 L1165.41 682.606 L1164.85 682.606 L1164.29 682.606 L1163.73 682.606 L1163.17 682.606 L1162.61 682.606 L1162.05 682.606 L1161.5 682.606 L1160.94 682.606 L1160.38 682.606 L1159.82 682.606 L1159.26 682.606 L1158.7 682.606 L1158.14 682.606 L1157.58 682.606 L1157.02 682.606 L1156.46 682.606 L1155.9 682.606 L1155.34 682.606 L1154.78 682.606 L1154.23 682.606 L1153.67 682.606 L1153.11 682.606 L1152.55 682.606 L1151.99 682.606 L1151.43 682.606 L1150.87 682.606 L1150.31 682.606 L1149.75 682.606 L1149.19 682.606 L1148.63 682.606 L1148.07 682.606 L1147.51 682.606 L1146.96 682.606 L1146.4 682.606 L1145.84 682.606 L1145.28 682.606 L1144.72 682.606 L1144.16 682.606 L1143.6 682.606 L1143.04 682.606 L1142.48 682.606 L1141.92 682.606 L1141.36 682.606 L1140.8 682.606 L1140.24 682.606 L1139.68 682.606 L1139.13 682.606 L1138.57 682.606 L1138.01 682.606 L1137.45 682.606 L1136.89 682.606 L1136.33 682.606 L1135.77 682.606 L1135.21 682.606 L1134.65 682.606 L1134.09 682.606 L1133.53 682.606 L1132.97 682.606 L1132.41 682.606 L1131.86 682.606 L1131.3 682.606 L1130.74 682.606 L1130.18 682.606 L1129.62 682.606 L1129.06 682.606 L1128.5 682.606 L1127.94 682.606 L1127.38 682.606 L1126.82 682.606 L1126.26 682.606 L1125.7 682.606 L1125.14 682.606 L1124.59 682.606 L1124.03 682.606 L1123.47 682.606 L1122.91 682.606 L1122.35 682.606 L1121.79 682.606 L1121.23 682.606 L1120.67 682.606 L1120.11 682.606 L1119.55 682.606 L1118.99 682.606 L1118.43 682.606 L1117.87 682.606 L1117.31 682.606 L1116.76 682.606 L1116.2 682.606 L1115.64 682.606 L1115.08 682.606 L1114.52 682.606 L1113.96 682.606 L1113.4 682.606 L1112.84 682.606 L1112.28 682.606 L1111.72 682.606 L1111.16 682.606 L1110.6 682.606 L1110.04 682.606 L1109.49 682.606 L1108.93 682.606 L1108.37 682.606 L1107.81 682.606 L1107.25 682.606 L1106.69 682.606 L1106.13 682.606 L1105.57 682.606 L1105.01 682.606 L1104.45 682.606 L1103.89 682.606 L1103.33 682.606 L1102.77 682.606 L1102.22 682.606 L1101.66 682.606 L1101.1 682.606 L1100.54 682.606 L1099.98 682.606 L1099.42 682.606 L1098.86 682.606 L1098.3 682.606 L1097.74 682.606 L1097.18 682.606 L1096.62 682.606 L1096.06 682.606 L1095.5 682.606 L1094.94 682.606 L1094.39 682.606 L1093.83 682.606 L1093.27 682.606 L1092.71 682.606 L1092.15 682.606 L1091.59 682.606 L1091.03 682.606 L1090.47 682.606 L1089.91 682.606 L1089.35 682.606 L1088.79 682.606 L1088.23 682.606 L1087.67 682.606 L1087.12 682.606 L1086.56 682.606 L1086 682.606 L1085.44 682.606 L1084.88 682.606 L1084.32 682.606 L1083.76 682.606 L1083.2 682.606 L1082.64 682.606 L1082.08 682.606 L1081.52 682.606 L1080.96 682.606 L1080.4 682.606 L1079.85 682.606 L1079.29 682.606 L1078.73 682.606 L1078.17 682.606 L1077.61 682.606 L1077.05 682.606 L1076.49 682.606 L1075.93 682.606 L1075.37 682.606 L1074.81 682.606 L1074.25 682.606 L1073.69 682.606 L1073.13 682.606 L1072.57 682.606 L1072.02 682.606 L1071.46 682.606 L1070.9 682.606 L1070.34 682.606 L1069.78 682.606 L1069.22 682.606 L1068.66 682.606 L1068.1 682.606 L1067.54 682.606 L1066.98 682.606 L1066.42 682.606 L1065.86 682.606 L1065.3 682.606 L1064.75 682.606 L1064.19 682.606 L1063.63 682.606 L1063.07 682.606 L1062.51 682.606 L1061.95 682.606 L1061.39 682.606 L1060.83 682.606 L1060.27 682.606 L1059.71 682.606 L1059.15 682.606 L1058.59 682.606 L1058.03 682.606 L1057.48 682.606 L1056.92 682.606 L1056.36 682.606 L1055.8 682.606 L1055.24 682.606 L1054.68 682.606 L1054.12 682.606 L1053.56 682.606 L1053 682.606 L1052.44 682.606 L1051.88 682.606 L1051.32 682.606 L1050.76 682.606 L1050.2 682.606 L1049.65 682.606 L1049.09 682.606 L1048.53 682.606 L1047.97 682.606 L1047.41 682.606 L1046.85 682.606 L1046.29 682.606 L1045.73 682.606 L1045.17 682.606 L1044.61 682.606 L1044.05 682.606 L1043.49 682.606 L1042.93 682.606 L1042.38 682.606 L1041.82 682.606 L1041.26 682.606 L1040.7 682.606 L1040.14 682.606 L1039.58 682.606 L1039.02 682.606 L1038.46 682.606 L1037.9 682.606 L1037.34 682.606 L1036.78 682.606 L1036.22 682.606 L1035.66 682.606 L1035.1 682.606 L1034.55 682.606 L1033.99 682.606 L1033.43 682.606 L1032.87 682.606 L1032.31 682.606 L1031.75 682.606 L1031.19 682.606 L1030.63 682.606 L1030.07 682.606 L1029.51 682.606 L1028.95 682.606 L1028.39 682.606 L1027.83 682.606 L1027.28 682.606 L1026.72 682.606 L1026.16 682.606 L1025.6 682.606 L1025.04 682.606 L1024.48 682.606 L1023.92 682.606 L1023.36 682.606 L1022.8 682.606 L1022.24 682.606 L1021.68 682.606 L1021.12 682.606 L1020.56 682.606 L1020.01 682.606 L1019.45 682.606 L1018.89 682.606 L1018.33 682.606 L1017.77 682.606 L1017.21 682.606 L1016.65 682.606 L1016.09 682.606 L1015.53 682.606 L1014.97 682.606 L1014.41 682.606 L1013.85 682.606 L1013.29 682.606 L1012.73 682.606 L1012.18 682.606 L1011.62 682.606 L1011.06 682.606 L1010.5 682.606 L1009.94 682.606 L1009.38 682.606 L1008.82 682.606 L1008.26 682.606 L1007.7 682.606 L1007.14 682.606 L1006.58 682.606 L1006.02 682.606 L1005.46 682.606 L1004.91 682.606 L1004.35 682.606 L1003.79 682.606 L1003.23 682.606 L1002.67 682.606 L1002.11 682.606 L1001.55 682.606 L1000.99 682.606 L1000.43 682.606 L999.872 682.606 L999.313 682.606 L998.754 682.606 L998.194 682.606 L997.635 682.606 L997.076 682.606 L996.517 682.606 L995.957 682.606 L995.398 682.606 L994.839 682.606 L994.28 682.606 L993.72 682.606 L993.161 682.606 L992.602 682.606 L992.043 682.606 L991.483 682.606 L990.924 682.606 L990.365 682.606 L989.806 682.606 L989.246 682.606 L988.687 682.606 L988.128 682.606 L987.569 682.606 L987.009 682.606 L986.45 682.606 L985.891 682.606 L985.332 682.606 L984.772 682.606 L984.213 682.606 L983.654 682.606 L983.095 682.606 L982.535 682.606 L981.976 682.606 L981.417 682.606 L980.858 682.606 L980.298 682.606 L979.739 682.606 L979.18 682.606 L978.621 682.606 L978.061 682.606 L977.502 682.606 L976.943 682.606 L976.384 682.606 L975.824 682.606 L975.265 682.606 L974.706 682.606 L974.147 682.606 L973.587 682.606 L973.028 682.606 L972.469 682.606 L971.91 682.606 L971.35 682.606 L970.791 682.606 L970.232 682.606 L969.673 682.606 L969.113 682.606 L968.554 682.606 L967.995 682.606 L967.436 682.606 L966.876 682.606 L966.317 682.606 L965.758 682.606 L965.199 682.606 L964.639 682.606 L964.08 682.606 L963.521 682.606 L962.962 682.606 L962.402 682.606 L961.843 682.606 L961.284 682.606 L960.725 682.606 L960.165 682.606 L959.606 682.606 L959.047 682.606 L958.488 682.606 L957.928 682.606 L957.369 682.606 L956.81 682.606 L956.251 682.606 L955.691 682.606 L955.132 682.606 L954.573 682.606 L954.014 682.606 L953.454 682.606 L952.895 682.606 L952.336 682.606 L951.777 682.606 L951.217 682.606 L950.658 682.606 L950.099 682.606 L949.54 682.606 L948.98 682.606 L948.421 682.606 L947.862 682.606 L947.303 682.606 L946.743 682.606 L946.184 682.606 L945.625 682.606 L945.066 682.606 L944.506 682.606 L943.947 682.606 L943.388 682.606 L942.829 682.606 L942.269 682.606 L941.71 682.606 L941.151 682.606 L940.592 682.606 L940.032 682.606 L939.473 682.606 L938.914 682.606 L938.355 682.606 L937.795 682.606 L937.236 682.606 L936.677 682.606 L936.118 682.606 L935.558 682.606 L934.999 682.606 L934.44 682.606 L933.881 682.606 L933.321 682.606 L932.762 682.606 L932.203 682.606 L931.644 682.606 L931.084 682.606 L930.525 682.606 L929.966 682.606 L929.406 682.606 L928.847 682.606 L928.288 682.606 L927.729 682.606 L927.169 682.606 L926.61 682.606 L926.051 682.606 L925.492 682.606 L924.932 682.606 L924.373 682.606 L923.814 682.606 L923.255 682.606 L922.695 682.606 L922.136 682.606 L921.577 682.606 L921.018 682.606 L920.458 682.606 L919.899 682.606 L919.34 682.606 L918.781 682.606 L918.221 682.606 L917.662 682.606 L917.103 682.606 L916.544 682.606 L915.984 682.606 L915.425 682.606 L914.866 682.606 L914.307 682.606 L913.747 682.606 L913.188 682.606 L912.629 682.606 L912.07 682.606 L911.51 682.606 L910.951 682.606 L910.392 682.606 L909.833 682.606 L909.273 682.606 L908.714 682.606 L908.155 682.606 L907.596 682.606 L907.036 682.606 L906.477 682.606 L905.918 682.606 L905.359 682.606 L904.799 682.606 L904.24 682.606 L903.681 682.606 L903.122 682.606 L902.562 682.606 L902.003 682.606 L901.444 682.606 L900.885 682.606 L900.325 682.606 L899.766 682.606 L899.207 682.606 L898.648 682.606 L898.088 682.606 L897.529 682.606 L896.97 682.606 L896.411 682.606 L895.851 682.606 L895.292 682.606 L894.733 682.606 L894.174 682.606 L893.614 682.606 L893.055 682.606 L892.496 682.606 L891.937 682.606 L891.377 682.606 L890.818 682.606 L890.259 682.606 L889.7 682.606 L889.14 682.606 L888.581 682.606 L888.022 682.606 L887.463 682.606 L886.903 682.606 L886.344 682.606 L885.785 682.606 L885.226 682.606 L884.666 682.606 L884.107 682.606 L883.548 682.606 L882.989 682.606 L882.429 682.606 L881.87 682.606 L881.311 682.606 L880.752 682.606 L880.192 682.606 L879.633 682.606 L879.074 682.606 L878.515 682.606 L877.955 682.606 L877.396 682.606 L876.837 682.606 L876.278 682.606 L875.718 682.606 L875.159 682.606 L874.6 682.606 L874.041 682.606 L873.481 682.606 L872.922 682.606 L872.363 682.606 L871.804 682.606 L871.244 682.606 L870.685 682.606 L870.126 682.606 L869.567 682.606 L869.007 682.606 L868.448 682.606 L867.889 682.606 L867.33 682.606 L866.77 682.606 L866.211 682.606 L865.652 682.606 L865.093 682.606 L864.533 682.606 L863.974 682.606 L863.415 682.606 L862.856 682.606 L862.296 682.606 L861.737 682.606 L861.178 682.606 L860.619 682.606 L860.059 682.606 L859.5 682.606 L858.941 682.606 L858.382 682.606 L857.822 682.606 L857.263 682.606 L856.704 682.606 L856.145 682.606 L855.585 682.606 L855.026 682.606 L854.467 682.606 L853.908 682.606 L853.348 682.606 L852.789 682.606 L852.23 682.606 L851.671 682.606 L851.111 682.606 L850.552 682.606 L849.993 682.606 L849.434 682.606 L848.874 682.606 L848.315 682.606 L847.756 682.606 L847.197 682.606 L846.637 682.606 L846.078 682.606 L845.519 682.606 L844.96 682.606 L844.4 682.606 L843.841 682.606 L843.282 682.606 L842.723 682.606 L842.163 682.606 L841.604 682.606 L841.045 682.606 L840.486 682.606 L839.926 682.606 L839.367 682.606 L838.808 682.606 L838.249 682.606 L837.689 682.606 L837.13 682.606 L836.571 682.606 L836.012 682.606 L835.452 682.606 L834.893 682.606 L834.334 682.606 L833.775 682.606 L833.215 682.606 L832.656 682.606 L832.097 682.606 L831.538 682.606 L830.978 682.606 L830.419 682.606 L829.86 682.606 L829.301 682.606 L828.741 682.606 L828.182 682.606 L827.623 682.606 L827.064 682.606 L826.504 682.606 L825.945 682.606 L825.386 682.606 L824.827 682.606 L824.267 682.606 L823.708 682.606 L823.149 682.606 L822.59 682.606 L822.03 682.606 L821.471 682.606 L820.912 682.606 L820.353 682.606 L819.793 682.606 L819.234 682.606 L818.675 682.606 L818.116 682.606 L817.556 682.606 L816.997 682.606 L816.438 682.606 L815.879 682.606 L815.319 682.606 L814.76 682.606 L814.201 682.606 L813.642 682.606 L813.082 682.606 L812.523 682.606 L811.964 682.606 L811.405 682.606 L810.845 682.606 L810.286 682.606 L809.727 682.606 L809.168 682.606 L808.608 682.606 L808.049 682.606 L807.49 682.606 L806.931 682.606 L806.371 682.606 L805.812 682.606 L805.253 682.606 L804.693 682.606 L804.134 682.606 L803.575 682.606 L803.016 682.606 L802.456 682.606 L801.897 682.606 L801.338 682.606 L800.779 682.606 L800.219 682.606 L799.66 682.606 L799.101 682.606 L798.542 682.606 L797.982 682.606 L797.423 682.606 L796.864 682.606 L796.305 682.606 L795.745 682.606 L795.186 682.606 L794.627 682.606 L794.068 682.606 L793.508 682.606 L792.949 682.606 L792.39 682.606 L791.831 682.606 L791.271 682.606 L790.712 682.606 L790.153 682.606 L789.594 682.606 L789.034 682.606 L788.475 682.606 L787.916 682.606 L787.357 682.606 L786.797 682.606 L786.238 682.606 L785.679 682.606 L785.12 682.606 L784.56 682.606 L784.001 682.606 L783.442 682.606 L782.883 682.606 L782.323 682.606 L781.764 682.606 L781.205 682.606 L780.646 682.606 L780.086 682.606 L779.527 682.606 L778.968 682.606 L778.409 682.606 L777.849 682.606 L777.29 682.606 L776.731 682.606 L776.172 682.606 L775.612 682.606 L775.053 682.606 L774.494 682.606 L773.935 682.606 L773.375 682.606 L772.816 682.606 L772.257 682.606 L771.698 682.606 L771.138 682.606 L770.579 682.606 L770.02 682.606 L769.461 682.606 L768.901 682.606 L768.342 682.606 L767.783 682.606 L767.224 682.606 L766.664 682.606 L766.105 682.606 L765.546 682.606 L764.987 682.606 L764.427 682.606 L763.868 682.606 L763.309 682.606 L762.75 682.606 L762.19 682.606 L761.631 682.606 L761.072 682.606 L760.513 682.606 L759.953 682.606 L759.394 682.606 L758.835 682.606 L758.276 682.606 L757.716 682.606 L757.157 682.606 L756.598 682.606 L756.039 682.606 L755.479 682.606 L754.92 682.606 L754.361 682.606 L753.802 682.606 L753.242 682.606 L752.683 682.606 L752.124 682.606 L751.565 682.606 L751.005 682.606 L750.446 682.606 L749.887 682.606 L749.328 682.606 L748.768 682.606 L748.209 682.606 L747.65 682.606 L747.091 682.606 L746.531 682.606 L745.972 682.606 L745.413 682.606 L744.854 682.606 L744.294 682.606 L743.735 682.606 L743.176 682.606 L742.617 682.606 L742.057 682.606 L741.498 682.606 L740.939 682.606 L740.38 682.606 L739.82 682.606 L739.261 682.606 L738.702 682.606 L738.143 682.606 L737.583 682.606 L737.024 682.606 L736.465 682.606 L735.906 682.606 L735.346 682.606 L734.787 682.606 L734.228 682.606 L733.669 682.606 L733.109 682.606 L732.55 682.606 L731.991 682.606 L731.432 682.606 L730.872 682.606 L730.313 682.606 L729.754 682.606 L729.195 682.606 L728.635 682.606 L728.076 682.606 L727.517 682.606 L726.958 682.606 L726.398 682.606 L725.839 682.606 L725.28 682.606 L724.721 682.606 L724.161 682.606 L723.602 682.606 L723.043 682.606 L722.484 682.606 L721.924 682.606 L721.365 682.606 L720.806 682.606 L720.247 682.606  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip513)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.702 720.806,683.702 721.365,683.702 721.924,683.702 722.484,683.702 723.043,683.702 723.602,683.702 724.161,683.702 724.721,683.702 725.28,683.702 725.839,683.702 726.398,683.702 726.958,683.702 727.517,683.702 728.076,683.702 728.635,683.702 729.195,683.702 729.754,683.702 730.313,683.702 730.872,683.702 731.432,683.702 731.991,683.702 732.55,683.702 733.109,683.702 733.669,683.702 734.228,683.702 734.787,683.702 735.346,683.702 735.906,683.702 736.465,683.702 737.024,683.702 737.583,683.702 738.143,683.702 738.702,683.702 739.261,683.702 739.82,683.702 740.38,683.702 740.939,683.702 741.498,683.702 742.057,683.702 742.617,683.702 743.176,683.702 743.735,683.702 744.294,683.702 744.854,683.702 745.413,683.702 745.972,683.702 746.531,683.702 747.091,683.702 747.65,683.702 748.209,683.702 748.768,683.702 749.328,683.702 749.887,683.702 750.446,683.702 751.005,683.702 751.565,683.702 752.124,683.702 752.683,683.702 753.242,683.702 753.802,683.702 754.361,683.702 754.92,683.702 755.479,683.702 756.039,683.702 756.598,683.702 757.157,683.702 757.716,683.702 758.276,683.702 758.835,683.702 759.394,683.702 759.953,683.702 760.513,683.702 761.072,683.702 761.631,683.702 762.19,683.702 762.75,683.702 763.309,683.702 763.868,683.702 764.427,683.702 764.987,683.702 765.546,683.702 766.105,683.702 766.664,683.702 767.224,683.702 767.783,683.702 768.342,683.702 768.901,683.702 769.461,683.702 770.02,683.702 770.579,683.702 771.138,683.702 771.698,683.702 772.257,683.702 772.816,683.702 773.375,683.702 773.935,683.702 774.494,683.702 775.053,683.702 775.612,683.702 776.172,683.702 776.731,683.702 777.29,683.702 777.849,683.702 778.409,683.702 778.968,683.702 779.527,683.702 780.086,683.702 780.646,683.702 781.205,683.702 781.764,683.702 782.323,683.702 782.883,683.702 783.442,683.702 784.001,683.702 784.56,683.702 785.12,683.702 785.679,683.702 786.238,683.702 786.797,683.702 787.357,683.702 787.916,683.702 788.475,683.702 789.034,683.702 789.594,683.702 790.153,683.702 790.712,683.702 791.271,683.702 791.831,683.702 792.39,683.702 792.949,683.702 793.508,683.702 794.068,683.702 794.627,683.702 795.186,683.702 795.745,683.702 796.305,683.702 796.864,683.702 797.423,683.702 797.982,683.702 798.542,683.702 799.101,683.702 799.66,683.702 800.219,683.702 800.779,683.702 801.338,683.702 801.897,683.702 802.456,683.702 803.016,683.702 803.575,683.702 804.134,683.702 804.693,683.702 805.253,683.702 805.812,683.702 806.371,683.702 806.931,683.702 807.49,683.702 808.049,683.702 808.608,683.702 809.168,683.702 809.727,683.702 810.286,683.702 810.845,683.702 811.405,683.702 811.964,683.702 812.523,683.702 813.082,683.702 813.642,683.702 814.201,683.702 814.76,683.702 815.319,683.702 815.879,683.702 816.438,683.702 816.997,683.702 817.556,683.702 818.116,683.702 818.675,683.702 819.234,683.702 819.793,683.702 820.353,683.702 820.912,683.702 821.471,683.702 822.03,683.702 822.59,683.702 823.149,683.702 823.708,683.702 824.267,683.702 824.827,683.702 825.386,683.702 825.945,683.702 826.504,683.702 827.064,683.702 827.623,683.702 828.182,683.702 828.741,683.702 829.301,683.702 829.86,683.702 830.419,683.702 830.978,683.702 831.538,683.702 832.097,683.702 832.656,683.702 833.215,683.702 833.775,683.702 834.334,683.702 834.893,683.702 835.452,683.702 836.012,683.702 836.571,683.702 837.13,683.702 837.689,683.702 838.249,683.702 838.808,683.702 839.367,683.702 839.926,683.702 840.486,683.702 841.045,683.702 841.604,683.702 842.163,683.702 842.723,683.702 843.282,683.702 843.841,683.702 844.4,683.702 844.96,683.702 845.519,683.702 846.078,683.702 846.637,683.702 847.197,683.702 847.756,683.702 848.315,683.702 848.874,683.702 849.434,683.702 849.993,683.702 850.552,683.702 851.111,683.702 851.671,683.702 852.23,683.702 852.789,683.702 853.348,683.702 853.908,683.702 854.467,683.702 855.026,683.702 855.585,683.702 856.145,683.702 856.704,683.702 857.263,683.702 857.822,683.702 858.382,683.702 858.941,683.702 859.5,683.702 860.059,683.702 860.619,683.702 861.178,683.702 861.737,683.702 862.296,683.702 862.856,683.702 863.415,683.702 863.974,683.702 864.533,683.702 865.093,683.702 865.652,683.702 866.211,683.702 866.77,683.702 867.33,683.702 867.889,683.702 868.448,683.702 869.007,683.702 869.567,683.702 870.126,683.702 870.685,683.702 871.244,683.702 871.804,683.702 872.363,683.702 872.922,683.702 873.481,683.702 874.041,683.702 874.6,683.702 875.159,683.702 875.718,683.702 876.278,683.702 876.837,683.702 877.396,683.702 877.955,683.702 878.515,683.702 879.074,683.702 879.633,683.702 880.192,683.702 880.752,683.702 881.311,683.702 881.87,683.702 882.429,683.702 882.989,683.702 883.548,683.702 884.107,683.702 884.666,683.702 885.226,683.702 885.785,683.702 886.344,683.702 886.903,683.702 887.463,683.702 888.022,683.702 888.581,683.702 889.14,683.702 889.7,683.702 890.259,683.702 890.818,683.702 891.377,683.702 891.937,683.702 892.496,683.702 893.055,683.702 893.614,683.702 894.174,683.702 894.733,683.702 895.292,683.702 895.851,683.702 896.411,683.702 896.97,683.702 897.529,683.702 898.088,683.702 898.648,683.702 899.207,683.702 899.766,683.702 900.325,683.702 900.885,683.702 901.444,683.702 902.003,683.702 902.562,683.702 903.122,683.702 903.681,683.702 904.24,683.702 904.799,683.702 905.359,683.702 905.918,683.702 906.477,683.702 907.036,683.702 907.596,683.702 908.155,683.702 908.714,683.702 909.273,683.702 909.833,683.702 910.392,683.702 910.951,683.702 911.51,683.702 912.07,683.702 912.629,683.702 913.188,683.702 913.747,683.702 914.307,683.702 914.866,683.702 915.425,683.702 915.984,683.702 916.544,683.702 917.103,683.702 917.662,683.702 918.221,683.702 918.781,683.702 919.34,683.702 919.899,683.702 920.458,683.702 921.018,683.702 921.577,683.702 922.136,683.702 922.695,683.702 923.255,683.702 923.814,683.702 924.373,683.702 924.932,683.702 925.492,683.702 926.051,683.702 926.61,683.702 927.169,683.702 927.729,683.702 928.288,683.702 928.847,683.702 929.406,683.702 929.966,683.702 930.525,683.702 931.084,683.702 931.644,683.702 932.203,683.702 932.762,683.702 933.321,683.702 933.881,683.702 934.44,683.702 934.999,683.702 935.558,683.702 936.118,683.702 936.677,683.702 937.236,683.702 937.795,683.702 938.355,683.702 938.914,683.702 939.473,683.702 940.032,683.702 940.592,683.702 941.151,683.702 941.71,683.702 942.269,683.702 942.829,683.702 943.388,683.702 943.947,683.702 944.506,683.702 945.066,683.702 945.625,683.702 946.184,683.702 946.743,683.702 947.303,683.702 947.862,683.702 948.421,683.702 948.98,683.702 949.54,683.702 950.099,683.702 950.658,683.702 951.217,683.702 951.777,683.702 952.336,683.702 952.895,683.702 953.454,683.702 954.014,683.702 954.573,683.702 955.132,683.702 955.691,683.702 956.251,683.702 956.81,683.702 957.369,683.702 957.928,683.702 958.488,683.702 959.047,683.702 959.606,683.702 960.165,683.702 960.725,683.702 961.284,683.702 961.843,683.702 962.402,683.702 962.962,683.702 963.521,683.702 964.08,683.702 964.639,683.702 965.199,683.702 965.758,683.702 966.317,683.702 966.876,683.702 967.436,683.702 967.995,683.702 968.554,683.702 969.113,683.702 969.673,683.702 970.232,683.702 970.791,683.702 971.35,683.702 971.91,683.702 972.469,683.702 973.028,683.702 973.587,683.702 974.147,683.702 974.706,683.702 975.265,683.702 975.824,683.702 976.384,683.702 976.943,683.702 977.502,683.702 978.061,683.702 978.621,683.702 979.18,683.702 979.739,683.702 980.298,683.702 980.858,683.702 981.417,683.702 981.976,683.702 982.535,683.702 983.095,683.702 983.654,683.702 984.213,683.702 984.772,683.702 985.332,683.702 985.891,683.702 986.45,683.702 987.009,683.702 987.569,683.702 988.128,683.702 988.687,683.702 989.246,683.702 989.806,683.702 990.365,683.702 990.924,683.702 991.483,683.702 992.043,683.702 992.602,683.702 993.161,683.702 993.72,683.702 994.28,683.702 994.839,683.702 995.398,683.702 995.957,683.702 996.517,683.702 997.076,683.702 997.635,683.702 998.194,683.702 998.754,683.702 999.313,683.702 999.872,683.702 1000.43,683.702 1000.99,683.702 1001.55,683.702 1002.11,683.702 1002.67,683.702 1003.23,683.702 1003.79,683.702 1004.35,683.702 1004.91,683.702 1005.46,683.702 1006.02,683.702 1006.58,683.702 1007.14,683.702 1007.7,683.702 1008.26,683.702 1008.82,683.702 1009.38,683.702 1009.94,683.702 1010.5,683.702 1011.06,683.702 1011.62,683.702 1012.18,683.702 1012.73,683.702 1013.29,683.702 1013.85,683.702 1014.41,683.702 1014.97,683.702 1015.53,683.702 1016.09,683.702 1016.65,683.702 1017.21,683.702 1017.77,683.702 1018.33,683.702 1018.89,683.702 1019.45,683.702 1020.01,683.702 1020.56,683.702 1021.12,683.702 1021.68,683.702 1022.24,683.702 1022.8,683.702 1023.36,683.702 1023.92,683.702 1024.48,683.702 1025.04,683.702 1025.6,683.702 1026.16,683.702 1026.72,683.702 1027.28,683.702 1027.83,683.702 1028.39,683.702 1028.95,683.702 1029.51,683.702 1030.07,683.702 1030.63,683.702 1031.19,683.702 1031.75,683.702 1032.31,683.702 1032.87,683.702 1033.43,683.702 1033.99,683.702 1034.55,683.702 1035.1,683.702 1035.66,683.702 1036.22,683.702 1036.78,683.702 1037.34,683.702 1037.9,683.702 1038.46,683.702 1039.02,683.702 1039.58,683.702 1040.14,683.702 1040.7,683.702 1041.26,683.702 1041.82,683.702 1042.38,683.702 1042.93,683.702 1043.49,683.702 1044.05,683.702 1044.61,683.702 1045.17,683.702 1045.73,683.702 1046.29,683.702 1046.85,683.702 1047.41,683.702 1047.97,683.702 1048.53,683.702 1049.09,683.702 1049.65,683.702 1050.2,683.702 1050.76,683.702 1051.32,683.702 1051.88,683.702 1052.44,683.702 1053,683.702 1053.56,683.702 1054.12,683.702 1054.68,683.702 1055.24,683.702 1055.8,683.702 1056.36,683.702 1056.92,683.702 1057.48,683.702 1058.03,683.702 1058.59,683.702 1059.15,683.702 1059.71,683.702 1060.27,683.702 1060.83,683.702 1061.39,683.702 1061.95,683.702 1062.51,683.702 1063.07,683.702 1063.63,683.702 1064.19,683.702 1064.75,683.702 1065.3,683.702 1065.86,683.702 1066.42,683.702 1066.98,683.702 1067.54,683.702 1068.1,683.702 1068.66,683.702 1069.22,683.702 1069.78,683.702 1070.34,683.702 1070.9,683.702 1071.46,683.702 1072.02,683.702 1072.57,683.702 1073.13,683.702 1073.69,683.702 1074.25,683.702 1074.81,683.702 1075.37,683.702 1075.93,683.702 1076.49,683.702 1077.05,683.702 1077.61,683.702 1078.17,683.702 1078.73,683.702 1079.29,683.702 1079.85,683.702 1080.4,683.702 1080.96,683.702 1081.52,683.702 1082.08,683.702 1082.64,683.702 1083.2,683.702 1083.76,683.702 1084.32,683.702 1084.88,683.702 1085.44,683.702 1086,683.702 1086.56,683.702 1087.12,683.702 1087.67,683.702 1088.23,683.702 1088.79,683.702 1089.35,683.702 1089.91,683.702 1090.47,683.702 1091.03,683.702 1091.59,683.702 1092.15,683.702 1092.71,683.702 1093.27,683.702 1093.83,683.702 1094.39,683.702 1094.94,683.702 1095.5,683.702 1096.06,683.702 1096.62,683.702 1097.18,683.702 1097.74,683.702 1098.3,683.702 1098.86,683.702 1099.42,683.702 1099.98,683.702 1100.54,683.702 1101.1,683.702 1101.66,683.702 1102.22,683.702 1102.77,683.702 1103.33,683.702 1103.89,683.702 1104.45,683.702 1105.01,683.702 1105.57,683.702 1106.13,683.702 1106.69,683.702 1107.25,683.702 1107.81,683.702 1108.37,683.702 1108.93,683.702 1109.49,683.702 1110.04,683.702 1110.6,683.702 1111.16,683.702 1111.72,683.702 1112.28,683.702 1112.84,683.702 1113.4,683.702 1113.96,683.702 1114.52,683.702 1115.08,683.702 1115.64,683.702 1116.2,683.702 1116.76,683.702 1117.31,683.702 1117.87,683.702 1118.43,683.702 1118.99,683.702 1119.55,683.702 1120.11,683.702 1120.67,683.702 1121.23,683.702 1121.79,683.702 1122.35,683.702 1122.91,683.702 1123.47,683.702 1124.03,683.702 1124.59,683.702 1125.14,683.702 1125.7,683.702 1126.26,683.702 1126.82,683.702 1127.38,683.702 1127.94,683.702 1128.5,683.702 1129.06,683.702 1129.62,683.702 1130.18,683.702 1130.74,683.702 1131.3,683.702 1131.86,683.702 1132.41,683.702 1132.97,683.702 1133.53,683.702 1134.09,683.702 1134.65,683.702 1135.21,683.702 1135.77,683.702 1136.33,683.702 1136.89,683.702 1137.45,683.702 1138.01,683.702 1138.57,683.702 1139.13,683.702 1139.68,683.702 1140.24,683.702 1140.8,683.702 1141.36,683.702 1141.92,683.702 1142.48,683.702 1143.04,683.702 1143.6,683.702 1144.16,683.702 1144.72,683.702 1145.28,683.702 1145.84,683.702 1146.4,683.702 1146.96,683.702 1147.51,683.702 1148.07,683.702 1148.63,683.702 1149.19,683.702 1149.75,683.702 1150.31,683.702 1150.87,683.702 1151.43,683.702 1151.99,683.702 1152.55,683.702 1153.11,683.702 1153.67,683.702 1154.23,683.702 1154.78,683.702 1155.34,683.702 1155.9,683.702 1156.46,683.702 1157.02,683.702 1157.58,683.702 1158.14,683.702 1158.7,683.702 1159.26,683.702 1159.82,683.702 1160.38,683.702 1160.94,683.702 1161.5,683.702 1162.05,683.702 1162.61,683.702 1163.17,683.702 1163.73,683.702 1164.29,683.702 1164.85,683.702 1165.41,683.702 1165.97,683.702 1166.53,683.702 1167.09,683.702 1167.65,683.702 1168.21,683.702 1168.77,683.702 1169.33,683.702 1169.88,683.702 1170.44,683.702 1171,683.702 1171.56,683.702 1172.12,683.702 1172.68,683.702 1173.24,683.702 1173.8,683.702 1174.36,683.702 1174.92,683.702 1175.48,683.702 1176.04,683.702 1176.6,683.702 1177.15,683.702 1177.71,683.702 1178.27,683.702 1178.83,683.702 1179.39,683.702 1179.95,683.702 1180.51,683.702 1181.07,683.702 1181.63,683.702 1182.19,683.702 1182.75,683.702 1183.31,683.702 1183.87,683.702 1184.43,683.702 1184.98,683.702 1185.54,683.702 1186.1,683.702 1186.66,683.702 1187.22,683.702 1187.78,683.702 1188.34,683.702 1188.9,683.702 1189.46,683.702 1190.02,683.702 1190.58,683.702 1191.14,683.702 1191.7,683.702 1192.25,683.702 1192.81,683.702 1193.37,683.702 1193.93,683.702 1194.49,683.702 1195.05,683.702 1195.61,683.702 1196.17,683.702 1196.73,683.702 1197.29,683.702 1197.85,683.702 1198.41,683.702 1198.97,683.702 1199.52,683.702 1200.08,683.702 1200.64,683.702 1201.2,683.702 1201.76,683.702 1202.32,683.702 1202.88,683.702 1203.44,683.702 1204,683.702 1204.56,683.702 1205.12,683.702 1205.68,683.702 1206.24,683.702 1206.8,683.702 1207.35,683.702 1207.91,683.702 1208.47,683.702 1209.03,683.702 1209.59,683.702 1210.15,683.702 1210.71,683.702 1211.27,683.702 1211.83,683.702 1212.39,683.702 1212.95,683.702 1213.51,683.702 1214.07,683.702 1214.62,683.702 1215.18,683.702 1215.74,683.702 1216.3,683.702 1216.86,683.702 1217.42,683.702 1217.98,683.702 1218.54,683.702 1219.1,683.702 1219.66,683.702 1220.22,683.702 1220.78,683.702 1221.34,683.702 1221.89,683.702 1222.45,683.702 1223.01,683.702 1223.57,683.702 1224.13,683.702 1224.69,683.702 1225.25,683.702 1225.81,683.702 1226.37,683.702 1226.93,683.702 1227.49,683.702 1228.05,683.702 1228.61,683.702 1229.17,683.702 1229.72,683.702 1230.28,683.702 1230.84,683.702 1231.4,683.702 1231.96,683.702 1232.52,683.702 1233.08,683.702 1233.64,683.702 1234.2,683.702 1234.76,683.702 1235.32,683.702 1235.88,683.702 1236.44,683.702 1236.99,683.702 1237.55,683.702 1238.11,683.702 1238.67,683.702 1239.23,683.702 1239.79,683.702 1240.35,683.702 1240.91,683.702 1241.47,683.702 1242.03,683.702 1242.59,683.702 1243.15,683.702 1243.71,683.702 1244.26,683.702 1244.82,683.702 1245.38,683.702 1245.94,683.702 1246.5,683.702 1247.06,683.702 1247.62,683.702 1248.18,683.702 1248.74,683.702 1249.3,683.702 1249.86,683.702 1250.42,683.702 1250.98,683.702 1251.54,683.702 1252.09,683.702 1252.65,683.702 1253.21,683.702 1253.77,683.702 1254.33,683.702 1254.89,683.702 1255.45,683.702 1256.01,683.702 1256.57,683.702 1257.13,683.702 1257.69,683.702 1258.25,683.702 1258.81,683.702 1259.36,683.702 1259.92,683.702 1260.48,683.702 1261.04,683.702 1261.6,683.702 1262.16,683.702 1262.72,683.702 1263.28,683.702 1263.84,683.702 1264.4,683.702 1264.96,683.702 1265.52,683.702 1266.08,683.702 1266.63,683.702 1267.19,683.702 1267.75,683.702 1268.31,683.702 1268.87,683.702 1269.43,683.702 1269.99,683.702 1270.55,683.702 1271.11,683.702 1271.67,683.702 1272.23,683.702 1272.79,683.702 1273.35,683.702 1273.91,683.702 1274.46,683.702 1275.02,683.702 1275.58,683.702 1276.14,683.702 1276.7,683.702 1277.26,683.702 1277.82,683.702 1278.38,683.702 1278.94,683.702 1279.5,683.702 1280.06,683.702 1280.62,683.702 1281.18,683.702 1281.73,683.702 1282.29,683.702 1282.85,683.702 1283.41,683.702 1283.97,683.702 1284.53,683.702 1285.09,683.702 1285.65,683.702 1286.21,683.702 1286.77,683.702 1287.33,683.702 1287.89,683.702 1288.45,683.702 1289,683.702 1289.56,683.702 1290.12,683.702 1290.68,683.702 1291.24,683.702 1291.8,683.702 1292.36,683.702 1292.92,683.702 1293.48,683.702 1294.04,683.702 1294.6,683.702 1295.16,683.702 1295.72,683.702 1296.28,683.702 1296.83,683.702 1297.39,683.702 1297.95,683.702 1298.51,683.702 1299.07,683.702 1299.63,683.702 1300.19,683.702 1300.75,683.702 1301.31,683.702 1301.87,683.702 1302.43,683.702 1302.99,683.702 1303.55,683.702 1304.1,683.702 1304.66,683.702 1305.22,683.702 1305.78,683.702 1306.34,683.702 1306.9,683.702 1307.46,683.702 1308.02,683.702 1308.58,683.702 1309.14,683.702 1309.7,683.702 1310.26,683.702 1310.82,683.702 1311.38,683.702 1311.93,683.702 1312.49,683.702 1313.05,683.702 1313.61,683.702 1314.17,683.702 1314.73,683.702 1315.29,683.702 1315.85,683.702 1316.41,683.702 1316.97,683.702 1317.53,683.702 1318.09,683.702 1318.65,683.702 1319.2,683.702 1319.76,683.702 1320.32,683.702 1320.88,683.702 1321.44,683.702 1322,683.702 1322.56,683.702 1323.12,683.702 1323.68,683.702 1324.24,683.702 1324.8,683.702 1325.36,683.702 1325.92,683.702 1326.47,683.702 1327.03,683.702 1327.59,683.702 1328.15,683.702 1328.71,683.702 1329.27,683.702 1329.83,683.702 1330.39,683.702 1330.95,683.702 1331.51,683.702 1332.07,683.702 1332.63,683.702 1333.19,683.702 1333.75,683.702 1334.3,683.702 1334.86,683.702 1335.42,683.702 1335.98,683.702 1336.54,683.702 1337.1,683.702 1337.66,683.702 1338.22,683.702 1338.78,683.702 1339.34,683.702 1339.9,683.702 1340.46,683.702 1341.02,683.702 1341.57,683.702 1342.13,683.702 1342.69,683.702 1343.25,683.702 1343.81,683.702 1344.37,683.702 1344.93,683.702 1345.49,683.702 1346.05,683.702 1346.61,683.702 1347.17,683.702 1347.73,683.702 1348.29,683.702 1348.84,683.702 1349.4,683.702 1349.96,683.702 1350.52,683.702 1351.08,683.702 1351.64,683.702 1352.2,683.702 1352.76,683.702 1353.32,683.702 1353.88,683.702 1354.44,683.702 1355,683.702 1355.56,683.702 1356.12,683.702 1356.67,683.702 1357.23,683.702 1357.79,683.702 1358.35,683.702 1358.91,683.702 1359.47,683.702 1360.03,683.702 1360.59,683.702 1361.15,683.702 1361.71,683.702 1362.27,683.702 1362.83,683.702 1363.39,683.702 1363.94,683.702 1364.5,683.702 1365.06,683.702 1365.62,683.702 1366.18,683.702 1366.74,683.702 1367.3,683.702 1367.86,683.702 1368.42,683.702 1368.98,683.702 1369.54,683.702 1370.1,683.702 1370.66,683.702 1371.21,683.702 1371.77,683.702 1372.33,683.702 1372.89,683.702 1373.45,683.702 1374.01,683.702 1374.57,683.702 1375.13,683.702 1375.69,683.702 1376.25,683.702 1376.81,683.702 1377.37,683.702 1377.93,683.702 1378.49,683.702 1379.04,683.702 1379.6,683.702 1380.16,683.702 1380.72,683.702 1381.28,683.702 1381.84,683.702 1382.4,683.702 1382.96,683.702 1383.52,683.702 1384.08,683.702 1384.64,683.702 1385.2,683.702 1385.76,683.702 1386.31,683.702 1386.87,683.702 1387.43,683.702 1387.99,683.702 1388.55,683.702 1389.11,683.702 1389.67,683.702 1390.23,683.702 1390.79,683.702 1391.35,683.702 1391.91,683.702 1392.47,683.702 1393.03,683.702 1393.58,683.702 1394.14,683.702 1394.7,683.702 1395.26,683.702 1395.82,683.702 1396.38,683.702 1396.94,683.702 1397.5,683.702 1398.06,683.702 1398.62,683.702 1399.18,683.702 1399.74,683.702 1400.3,683.702 1400.86,683.702 1401.41,683.702 1401.97,683.702 1402.53,683.702 1403.09,683.702 1403.65,683.702 1404.21,683.702 1404.77,683.702 1405.33,683.702 1405.89,683.702 1406.45,683.702 1407.01,683.702 1407.57,683.702 1408.13,683.702 1408.68,683.702 1409.24,683.702 1409.8,683.702 1410.36,683.702 1410.92,683.702 1411.48,683.702 1412.04,683.702 1412.6,683.702 1413.16,683.702 1413.72,683.702 1414.28,683.702 1414.84,683.702 1415.4,683.702 1415.95,683.702 1416.51,683.702 1417.07,683.702 1417.63,683.702 1418.19,683.702 1418.75,683.702 1419.31,683.702 1419.87,683.702 1420.43,683.702 1420.99,683.702 1421.55,683.702 1422.11,683.702 1422.67,683.702 1423.23,683.702 1423.78,683.702 1424.34,683.702 1424.9,683.702 1425.46,683.702 1426.02,683.702 1426.58,683.702 1427.14,683.702 1427.7,683.702 1428.26,683.702 1428.82,683.702 1429.38,683.702 1429.94,683.702 1430.5,683.702 1431.05,683.702 1431.61,683.702 1432.17,683.702 1432.73,683.702 1433.29,683.702 1433.85,683.702 1434.41,683.702 1434.97,683.702 1435.53,683.702 1436.09,683.702 1436.65,683.702 1437.21,683.702 1437.77,683.702 1438.33,683.702 1438.88,683.702 1439.44,683.702 1440,683.702 1440.56,683.702 1441.12,683.702 1441.68,683.702 1442.24,683.702 1442.8,683.702 1443.36,683.702 1443.92,683.702 1444.48,683.702 1445.04,683.702 1445.6,683.702 1446.15,683.702 1446.71,683.702 1447.27,683.702 1447.83,683.702 1448.39,683.702 1448.95,683.702 1449.51,683.702 1450.07,683.702 1450.63,683.702 1451.19,683.702 1451.75,683.702 1452.31,683.702 1452.87,683.702 1453.42,683.702 1453.98,683.702 1454.54,683.702 1455.1,683.702 1455.66,683.702 1456.22,683.702 1456.78,683.702 1457.34,683.702 1457.9,683.702 1458.46,683.702 1459.02,683.702 1459.58,683.702 1460.14,683.702 1460.7,683.702 1461.25,683.702 1461.81,683.702 1462.37,683.702 1462.93,683.702 1463.49,683.702 1464.05,683.702 1464.61,683.702 1465.17,683.702 1465.73,683.702 1466.29,683.702 1466.85,683.702 1467.41,683.702 1467.97,683.702 1468.52,683.702 1469.08,683.702 1469.64,683.702 1470.2,683.702 1470.76,683.702 1471.32,683.702 1471.88,683.702 1472.44,683.702 1473,683.702 1473.56,683.702 1474.12,683.702 1474.68,683.702 1475.24,683.702 1475.79,683.702 1476.35,683.702 1476.91,683.702 1477.47,683.702 1478.03,683.702 1478.59,683.702 1479.15,683.702 1479.71,683.702 1480.27,683.702 1480.83,683.702 1481.39,683.702 1481.95,683.702 1482.51,683.702 1483.07,683.702 1483.62,683.702 1484.18,683.702 1484.74,683.702 1485.3,683.702 1485.86,683.702 1486.42,683.702 1486.98,683.702 1487.54,683.702 1488.1,683.702 1488.66,683.702 1489.22,683.702 1489.78,683.702 1490.34,683.702 1490.89,683.702 1491.45,683.702 1492.01,683.702 1492.57,683.702 1493.13,683.702 1493.69,683.702 1494.25,683.702 1494.81,683.702 1495.37,683.702 1495.93,683.702 1496.49,683.702 1497.05,683.702 1497.61,683.702 1498.16,683.702 1498.72,683.702 1499.28,683.702 1499.84,683.702 1500.4,683.702 1500.96,683.702 1501.52,683.702 1502.08,683.702 1502.64,683.702 1503.2,683.702 1503.76,683.702 1504.32,683.702 1504.88,683.702 1505.44,683.702 1505.99,683.702 1506.55,683.702 1507.11,683.702 1507.67,683.702 1508.23,683.702 1508.79,683.702 1509.35,683.702 1509.91,683.702 1510.47,683.702 1511.03,683.702 1511.59,683.702 1512.15,683.702 1512.71,683.702 1513.26,683.702 1513.82,683.702 1514.38,683.702 1514.94,683.702 1515.5,683.702 1516.06,683.702 1516.62,683.702 1517.18,683.702 1517.74,683.702 1518.3,683.702 1518.86,683.702 1519.42,683.702 1519.98,683.702 1520.53,683.702 1521.09,683.702 1521.65,683.702 1522.21,683.702 1522.77,683.702 1523.33,683.702 1523.89,683.702 1524.45,683.702 1525.01,683.702 1525.57,683.702 1526.13,683.702 1526.69,683.702 1527.25,683.702 1527.81,683.702 1528.36,683.702 1528.92,683.702 1529.48,683.702 1530.04,683.702 1530.6,683.702 1531.16,683.702 1531.72,683.702 1532.28,683.702 1532.84,683.702 1533.4,683.702 1533.96,683.702 1534.52,683.702 1535.08,683.702 1535.63,683.702 1536.19,683.702 1536.75,683.702 1537.31,683.702 1537.87,683.702 1538.43,683.702 1538.99,683.702 1539.55,683.702 1540.11,683.702 1540.67,683.702 1541.23,683.702 1541.79,683.702 1542.35,683.702 1542.9,683.702 1543.46,683.702 1544.02,683.702 1544.58,683.702 1545.14,683.702 1545.7,683.702 1546.26,683.702 1546.82,683.702 1547.38,683.702 1547.94,683.702 1548.5,683.702 1549.06,683.702 1549.62,683.702 1550.18,683.702 1550.73,683.702 1551.29,683.702 1551.85,683.702 1552.41,683.702 1552.97,683.702 1553.53,683.702 1554.09,683.702 1554.65,683.702 1555.21,683.702 1555.77,683.702 1556.33,683.702 1556.89,683.702 1557.45,683.702 1558,683.702 1558.56,683.702 1559.12,683.702 1559.68,683.702 1560.24,683.702 1560.8,683.702 1561.36,683.702 1561.92,683.702 1562.48,683.702 1563.04,683.702 1563.6,683.702 1564.16,683.702 1564.72,683.702 1565.28,683.702 1565.83,683.702 1566.39,683.702 1566.95,683.702 1567.51,683.702 1568.07,683.702 1568.63,683.702 1569.19,683.702 1569.75,683.702 1570.31,683.702 1570.87,683.702 1571.43,683.702 1571.99,683.702 1572.55,683.702 1573.1,683.702 1573.66,683.702 1574.22,683.702 1574.78,683.702 1575.34,683.702 1575.9,683.702 1576.46,683.702 1577.02,683.702 1577.58,683.702 1578.14,683.702 1578.7,683.702 1579.26,683.702 1579.82,683.702 1580.37,683.702 1580.93,683.702 1581.49,683.702 1582.05,683.702 1582.61,683.702 1583.17,683.702 1583.73,683.702 1584.29,683.702 1584.85,683.702 1585.41,683.702 1585.97,683.702 1586.53,683.702 1587.09,683.702 1587.65,683.702 1588.2,683.702 1588.76,683.702 1589.32,683.702 1589.88,683.702 1590.44,683.702 1591,683.702 1591.56,683.702 1592.12,683.702 1592.68,683.702 1593.24,683.702 1593.8,683.702 1594.36,683.702 1594.92,683.702 1595.47,683.702 1596.03,683.702 1596.59,683.702 1597.15,683.702 1597.71,683.702 1598.27,683.702 1598.83,683.702 1599.39,683.702 1599.95,683.702 1600.51,683.702 1601.07,683.702 1601.63,683.702 1602.19,683.702 1602.74,683.702 1603.3,683.702 1603.86,683.702 1604.42,683.702 1604.98,683.702 1605.54,683.702 1606.1,683.702 1606.66,683.702 1607.22,683.702 1607.78,683.702 1608.34,683.702 1608.9,683.702 1609.46,683.702 1610.02,683.702 1610.57,683.702 1611.13,683.702 1611.69,683.702 1612.25,683.702 1612.81,683.702 1613.37,683.702 1613.93,683.702 1614.49,683.702 1615.05,683.702 1615.61,683.702 1616.17,683.702 1616.73,683.702 1617.29,683.702 1617.84,683.702 1618.4,683.702 1618.96,683.702 1619.52,683.702 1620.08,683.702 1620.64,683.702 1621.2,683.702 1621.76,683.702 1622.32,683.702 1622.88,683.702 1623.44,683.702 1624,683.702 1624.56,683.702 1625.11,683.702 1625.67,683.702 1626.23,683.702 1626.79,683.702 1627.35,683.702 1627.91,683.702 1628.47,683.702 1629.03,683.702 1629.59,683.702 1630.15,683.702 1630.71,683.702 1631.27,683.702 1631.83,683.702 1632.39,683.702 1632.94,683.702 1633.5,683.702 1634.06,683.702 1634.62,683.702 1635.18,683.702 1635.74,683.702 1636.3,683.702 1636.86,683.702 1637.42,683.702 1637.98,683.702 1638.54,683.702 1639.1,683.702 1639.66,683.702 1640.21,683.702 1640.77,683.702 1641.33,683.702 1641.89,683.702 1642.45,683.702 1643.01,683.702 1643.57,683.702 1644.13,683.702 1644.69,683.702 1645.25,683.702 1645.81,683.702 1646.37,683.702 1646.93,683.702 1647.48,683.702 1648.04,683.702 1648.6,683.702 1649.16,683.702 1649.72,683.702 1650.28,683.702 1650.84,683.702 1651.4,683.702 1651.96,683.702 1652.52,683.702 1653.08,683.702 1653.64,683.702 1654.2,683.702 1654.76,683.702 1655.31,683.702 1655.87,683.702 1656.43,683.702 1656.99,683.702 1657.55,683.702 1658.11,683.702 1658.67,683.702 1659.23,683.702 1659.79,683.702 1660.35,683.702 1660.91,683.702 1661.47,683.702 1662.03,683.702 1662.58,683.702 1663.14,683.702 1663.7,683.702 1664.26,683.702 1664.82,683.702 1665.38,683.702 1665.94,683.702 1666.5,683.702 1667.06,683.702 1667.62,683.702 1668.18,683.702 1668.74,683.702 1669.3,683.702 1669.85,683.702 1670.41,683.702 1670.97,683.702 1671.53,683.702 1672.09,683.702 1672.65,683.702 1673.21,683.702 1673.77,683.702 1674.33,683.702 1674.89,683.702 1675.45,683.702 1676.01,683.702 1676.57,683.702 1677.13,683.702 1677.68,683.702 1678.24,683.702 1678.8,683.702 1679.36,683.702 1679.92,683.702 1680.48,683.702 1681.04,683.702 1681.6,683.702 1682.16,683.702 1682.72,683.702 1683.28,683.702 1683.84,683.702 1684.4,683.702 1684.95,683.702 1685.51,683.702 1686.07,683.702 1686.63,683.702 1687.19,683.702 1687.75,683.702 1688.31,683.702 1688.87,683.702 1689.43,683.702 1689.99,683.702 1690.55,683.702 1691.11,683.702 1691.67,683.702 1692.23,683.702 1692.78,683.702 1693.34,683.702 1693.9,683.702 1694.46,683.702 1695.02,683.702 1695.58,683.702 1696.14,683.702 1696.7,683.702 1697.26,683.702 1697.82,683.702 1698.38,683.702 1698.94,683.702 1699.5,683.702 1700.05,683.702 1700.61,683.702 1701.17,683.702 1701.73,683.702 1702.29,683.702 1702.85,683.702 1703.41,683.702 1703.97,683.702 1704.53,683.702 1705.09,683.702 1705.65,683.702 1706.21,683.702 1706.77,683.702 1707.32,683.702 1707.88,683.702 1708.44,683.702 1709,683.702 1709.56,683.702 1710.12,683.702 1710.68,683.702 1711.24,683.702 1711.8,683.702 1712.36,683.702 1712.92,683.702 1713.48,683.702 1714.04,683.702 1714.6,683.702 1715.15,683.702 1715.71,683.702 1716.27,683.702 1716.83,683.702 1717.39,683.702 1717.95,683.702 1718.51,683.702 1719.07,683.702 1719.63,683.702 1720.19,683.702 1720.75,683.702 1721.31,683.702 1721.87,683.702 1722.42,683.702 1722.98,683.702 1723.54,683.702 1724.1,683.702 1724.66,683.702 1725.22,683.702 1725.78,683.702 1726.34,683.702 1726.9,683.702 1727.46,683.702 1728.02,683.702 1728.58,683.702 1729.14,683.702 1729.69,683.702 1730.25,683.702 1730.81,683.702 1731.37,683.702 1731.93,683.702 1732.49,683.702 1733.05,683.702 1733.61,683.702 1734.17,683.702 1734.73,683.702 1735.29,683.702 1735.85,683.702 1736.41,683.702 1736.97,683.702 1737.52,683.702 1738.08,683.702 1738.64,683.702 1739.2,683.702 1739.76,683.702 1740.32,683.702 1740.88,683.702 1741.44,683.702 1742,683.702 1742.56,683.702 1743.12,683.702 1743.68,683.702 1744.24,683.702 1744.79,683.702 1745.35,683.702 1745.91,683.702 1746.47,683.702 1747.03,683.702 1747.59,683.702 1748.15,683.702 1748.71,683.702 1749.27,683.702 1749.83,683.702 1750.39,683.702 1750.95,683.702 1751.51,683.702 1752.06,683.702 1752.62,683.702 1753.18,683.702 1753.74,683.702 1754.3,683.702 1754.86,683.702 1755.42,683.702 1755.98,683.702 1756.54,683.702 1757.1,683.702 1757.66,683.702 1758.22,683.702 1758.78,683.702 1759.34,683.702 1759.89,683.702 1760.45,683.702 1761.01,683.702 1761.57,683.702 1762.13,683.702 1762.69,683.702 1763.25,683.702 1763.81,683.702 1764.37,683.702 1764.93,683.702 1765.49,683.702 1766.05,683.702 1766.61,683.702 1767.16,683.702 1767.72,683.702 1768.28,683.702 1768.84,683.702 1769.4,683.702 1769.96,683.702 1770.52,683.702 1771.08,683.702 1771.64,683.702 1772.2,683.702 1772.76,683.702 1773.32,683.702 1773.88,683.702 1774.43,683.702 1774.99,683.702 1775.55,683.702 1776.11,683.702 1776.67,683.702 1777.23,683.702 1777.79,683.702 1778.35,683.702 1778.91,683.702 1779.47,683.702 1780.03,683.702 1780.59,683.702 1781.15,683.702 1781.71,683.702 1782.26,683.702 1782.82,683.702 1783.38,683.702 1783.94,683.702 1784.5,683.702 1785.06,683.702 1785.62,683.702 1786.18,683.702 1786.74,683.702 1787.3,683.702 1787.86,683.702 1788.42,683.702 1788.98,683.702 1789.53,683.702 1790.09,683.702 1790.65,683.702 1791.21,683.702 1791.77,683.702 1792.33,683.702 1792.89,683.702 1793.45,683.702 1794.01,683.702 1794.57,683.702 1795.13,683.702 1795.69,683.702 1796.25,683.702 1796.8,683.702 1797.36,683.702 1797.92,683.702 1798.48,683.702 1799.04,683.702 1799.6,683.702 1800.16,683.702 1800.72,683.702 1801.28,683.702 1801.84,683.702 1802.4,683.702 1802.96,683.702 1803.52,683.702 1804.08,683.702 1804.63,683.702 1805.19,683.702 1805.75,683.702 1806.31,683.702 1806.87,683.702 1807.43,683.702 1807.99,683.702 1808.55,683.702 1809.11,683.702 1809.67,683.702 1810.23,683.702 1810.79,683.702 1811.35,683.702 1811.9,683.702 1812.46,683.702 1813.02,683.702 1813.58,683.702 1814.14,683.702 1814.7,683.702 1815.26,683.702 1815.82,683.702 1816.38,683.702 1816.94,683.702 1817.5,683.702 1818.06,683.702 1818.62,683.702 1819.18,683.702 1819.73,683.702 1820.29,683.702 1820.85,683.702 1821.41,683.702 1821.97,683.702 1822.53,683.702 1823.09,683.702 1823.65,683.702 1824.21,683.702 1824.77,683.702 1825.33,683.702 1825.89,683.702 1826.45,683.702 1827,683.702 1827.56,683.702 1828.12,683.702 1828.68,683.702 1829.24,683.702 1829.8,683.702 1830.36,683.702 1830.92,683.702 1831.48,683.702 1832.04,683.702 1832.6,683.702 1833.16,683.702 1833.72,683.702 1834.27,683.702 1834.83,683.702 1835.39,683.702 1835.95,683.702 1836.51,683.702 1837.07,683.702 1837.63,683.702 1838.19,683.702 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.034971358949999 ± 0.02688648123967316\nProjected Energy: -4.015675360343531 ± (0.00565671097966991, 0.005516390762839052)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.509339</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3806e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1352e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.042e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.312e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.766e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.759e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321612\n -3.363124291613378\n -0.7590191922770835\n  0.13584182219622143\n  0.15789998694607021\n  0.8767114411781449\n  1.5305929970973384\n  1.5835732611867366\n  3.0728703303258635\n  3.1256726539518427\n  4.86210722156217\n  6.260694850380593\n  6.40267121118311\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix(addr::SingleComponentFockAddress; n = 1) <: AbstractOperator\n\nRepresent the n-particle reduced density matrix:\n\nρ^(n)_j_1j_1k_1k_n =  prod_i^n a^_j_i prod_l^n a_k_n+1-l\n\nWhere j_i and k_i (all <: Int) specify the single particle sites on a lattice. Additionally, the indices run in the following manners:\n\nj_n   j_i+1  j_i    j_1 and k_n   k_i+1  k_i    k_1\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
