var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21499831920301776 ± 0.001206500690581291\n   G2(1) = 0.9156098708168503 ± 0.0006058759461475571\n   G2(2) = 0.9833321873720174 ± 0.0005231916015763823\n   G2(3) = 0.9871175644192457 ± 0.0007098309527617234\n   G2(4) = 0.9833321873720174 ± 0.0005231916015763823\n   G2(5) = 0.9156098708168503 ± 0.0006058759461475571\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.979065939913028 ± 0.13156372870634223\n   Replica 2: -4.014748462659117 ± 0.1298947911157587\n   Replica 3: -4.040455514805614 ± 0.1390638260954073\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip190\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip190)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip191\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip190)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip192\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.07 2211.02,1003.07 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.298 2211.02,745.298 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.528 2211.02,487.528 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.757 2211.02,229.757 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.07 423.181,1003.07 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.298 423.181,745.298 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.528 423.181,487.528 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.757 423.181,229.757 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.64 356.339 1246.64 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.21 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.21 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M290.043 1016.41 L306.363 1016.41 L306.363 1020.35 L284.418 1020.35 L284.418 1016.41 Q287.08 1013.66 291.664 1009.03 Q296.27 1004.38 297.451 1003.03 Q299.696 1000.51 300.576 998.775 Q301.478 997.016 301.478 995.326 Q301.478 992.571 299.534 990.835 Q297.613 989.099 294.511 989.099 Q292.312 989.099 289.858 989.863 Q287.427 990.627 284.65 992.178 L284.65 987.455 Q287.474 986.321 289.927 985.743 Q292.381 985.164 294.418 985.164 Q299.789 985.164 302.983 987.849 Q306.177 990.534 306.177 995.025 Q306.177 997.154 305.367 999.076 Q304.58 1000.97 302.474 1003.57 Q301.895 1004.24 298.793 1007.46 Q295.691 1010.65 290.043 1016.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M316.224 985.789 L334.58 985.789 L334.58 989.724 L320.506 989.724 L320.506 998.196 Q321.524 997.849 322.543 997.687 Q323.562 997.502 324.58 997.502 Q330.367 997.502 333.747 1000.67 Q337.126 1003.84 337.126 1009.26 Q337.126 1014.84 333.654 1017.94 Q330.182 1021.02 323.862 1021.02 Q321.687 1021.02 319.418 1020.65 Q317.173 1020.28 314.765 1019.54 L314.765 1014.84 Q316.849 1015.97 319.071 1016.53 Q321.293 1017.08 323.77 1017.08 Q327.774 1017.08 330.112 1014.98 Q332.45 1012.87 332.45 1009.26 Q332.45 1005.65 330.112 1003.54 Q327.774 1001.44 323.77 1001.44 Q321.895 1001.44 320.02 1001.85 Q318.168 1002.27 316.224 1003.15 L316.224 985.789 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M356.339 988.867 Q352.728 988.867 350.899 992.432 Q349.094 995.974 349.094 1003.1 Q349.094 1010.21 350.899 1013.77 Q352.728 1017.32 356.339 1017.32 Q359.973 1017.32 361.779 1013.77 Q363.608 1010.21 363.608 1003.1 Q363.608 995.974 361.779 992.432 Q359.973 988.867 356.339 988.867 M356.339 985.164 Q362.149 985.164 365.205 989.77 Q368.284 994.354 368.284 1003.1 Q368.284 1011.83 365.205 1016.44 Q362.149 1021.02 356.339 1021.02 Q350.529 1021.02 347.45 1016.44 Q344.395 1011.83 344.395 1003.1 Q344.395 994.354 347.45 989.77 Q350.529 985.164 356.339 985.164 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M286.062 728.018 L304.418 728.018 L304.418 731.953 L290.344 731.953 L290.344 740.426 Q291.363 740.078 292.381 739.916 Q293.4 739.731 294.418 739.731 Q300.205 739.731 303.585 742.902 Q306.964 746.074 306.964 751.49 Q306.964 757.069 303.492 760.171 Q300.02 763.25 293.701 763.25 Q291.525 763.25 289.256 762.879 Q287.011 762.509 284.603 761.768 L284.603 757.069 Q286.687 758.203 288.909 758.759 Q291.131 759.314 293.608 759.314 Q297.613 759.314 299.951 757.208 Q302.288 755.101 302.288 751.49 Q302.288 747.879 299.951 745.773 Q297.613 743.666 293.608 743.666 Q291.733 743.666 289.858 744.083 Q288.006 744.5 286.062 745.379 L286.062 728.018 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M326.177 731.097 Q322.566 731.097 320.737 734.662 Q318.932 738.203 318.932 745.333 Q318.932 752.439 320.737 756.004 Q322.566 759.546 326.177 759.546 Q329.811 759.546 331.617 756.004 Q333.446 752.439 333.446 745.333 Q333.446 738.203 331.617 734.662 Q329.811 731.097 326.177 731.097 M326.177 727.393 Q331.987 727.393 335.043 732 Q338.122 736.583 338.122 745.333 Q338.122 754.06 335.043 758.666 Q331.987 763.25 326.177 763.25 Q320.367 763.25 317.288 758.666 Q314.233 754.06 314.233 745.333 Q314.233 736.583 317.288 732 Q320.367 727.393 326.177 727.393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M356.339 731.097 Q352.728 731.097 350.899 734.662 Q349.094 738.203 349.094 745.333 Q349.094 752.439 350.899 756.004 Q352.728 759.546 356.339 759.546 Q359.973 759.546 361.779 756.004 Q363.608 752.439 363.608 745.333 Q363.608 738.203 361.779 734.662 Q359.973 731.097 356.339 731.097 M356.339 727.393 Q362.149 727.393 365.205 732 Q368.284 736.583 368.284 745.333 Q368.284 754.06 365.205 758.666 Q362.149 763.25 356.339 763.25 Q350.529 763.25 347.45 758.666 Q344.395 754.06 344.395 745.333 Q344.395 736.583 347.45 732 Q350.529 727.393 356.339 727.393 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M284.835 470.248 L307.057 470.248 L307.057 472.238 L294.511 504.808 L289.627 504.808 L301.432 474.183 L284.835 474.183 L284.835 470.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M316.224 470.248 L334.58 470.248 L334.58 474.183 L320.506 474.183 L320.506 482.655 Q321.524 482.308 322.543 482.146 Q323.562 481.961 324.58 481.961 Q330.367 481.961 333.747 485.132 Q337.126 488.303 337.126 493.72 Q337.126 499.298 333.654 502.4 Q330.182 505.479 323.862 505.479 Q321.687 505.479 319.418 505.109 Q317.173 504.738 314.765 503.997 L314.765 499.298 Q316.849 500.433 319.071 500.988 Q321.293 501.544 323.77 501.544 Q327.774 501.544 330.112 499.437 Q332.45 497.331 332.45 493.72 Q332.45 490.109 330.112 488.002 Q327.774 485.896 323.77 485.896 Q321.895 485.896 320.02 486.312 Q318.168 486.729 316.224 487.609 L316.224 470.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M356.339 473.326 Q352.728 473.326 350.899 476.891 Q349.094 480.433 349.094 487.562 Q349.094 494.669 350.899 498.234 Q352.728 501.775 356.339 501.775 Q359.973 501.775 361.779 498.234 Q363.608 494.669 363.608 487.562 Q363.608 480.433 361.779 476.891 Q359.973 473.326 356.339 473.326 M356.339 469.623 Q362.149 469.623 365.205 474.229 Q368.284 478.812 368.284 487.562 Q368.284 496.289 365.205 500.896 Q362.149 505.479 356.339 505.479 Q350.529 505.479 347.45 500.896 Q344.395 496.289 344.395 487.562 Q344.395 478.812 347.45 474.229 Q350.529 469.623 356.339 469.623 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M256.664 243.102 L264.303 243.102 L264.303 216.736 L255.992 218.403 L255.992 214.144 L264.256 212.477 L268.932 212.477 L268.932 243.102 L276.571 243.102 L276.571 247.037 L256.664 247.037 L256.664 243.102 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M296.015 215.556 Q292.404 215.556 290.576 219.121 Q288.77 222.662 288.77 229.792 Q288.77 236.898 290.576 240.463 Q292.404 244.005 296.015 244.005 Q299.65 244.005 301.455 240.463 Q303.284 236.898 303.284 229.792 Q303.284 222.662 301.455 219.121 Q299.65 215.556 296.015 215.556 M296.015 211.852 Q301.826 211.852 304.881 216.459 Q307.96 221.042 307.96 229.792 Q307.96 238.519 304.881 243.125 Q301.826 247.708 296.015 247.708 Q290.205 247.708 287.127 243.125 Q284.071 238.519 284.071 229.792 Q284.071 221.042 287.127 216.459 Q290.205 211.852 296.015 211.852 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M326.177 215.556 Q322.566 215.556 320.737 219.121 Q318.932 222.662 318.932 229.792 Q318.932 236.898 320.737 240.463 Q322.566 244.005 326.177 244.005 Q329.811 244.005 331.617 240.463 Q333.446 236.898 333.446 229.792 Q333.446 222.662 331.617 219.121 Q329.811 215.556 326.177 215.556 M326.177 211.852 Q331.987 211.852 335.043 216.459 Q338.122 221.042 338.122 229.792 Q338.122 238.519 335.043 243.125 Q331.987 247.708 326.177 247.708 Q320.367 247.708 317.288 243.125 Q314.233 238.519 314.233 229.792 Q314.233 221.042 317.288 216.459 Q320.367 211.852 326.177 211.852 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M356.339 215.556 Q352.728 215.556 350.899 219.121 Q349.094 222.662 349.094 229.792 Q349.094 236.898 350.899 240.463 Q352.728 244.005 356.339 244.005 Q359.973 244.005 361.779 240.463 Q363.608 236.898 363.608 229.792 Q363.608 222.662 361.779 219.121 Q359.973 215.556 356.339 215.556 M356.339 211.852 Q362.149 211.852 365.205 216.459 Q368.284 221.042 368.284 229.792 Q368.284 238.519 365.205 243.125 Q362.149 247.708 356.339 247.708 Q350.529 247.708 347.45 243.125 Q344.395 238.519 344.395 229.792 Q344.395 221.042 347.45 216.459 Q350.529 211.852 356.339 211.852 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip192)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.757 4017.76,229.757 \"/>\n<polyline clip-path=\"url(#clip192)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1249.35 457.123,1249.16 457.691,1248.91 458.259,1248.6 458.828,1248.23 459.396,1247.79 459.964,1247.26 460.533,1245.67 461.101,1245.06 461.669,1244.36 462.238,1243.58 462.806,1242.72 463.375,1240.75 463.943,1238.69 464.511,1236.54 465.08,1235.34 465.648,1234.02 466.216,1231.54 466.785,1229.97 467.353,1228.28 467.921,1226.45 468.49,1224.47 469.058,1222.36 469.626,1220.14 470.195,1217.74 470.763,1214.14 471.331,1210.35 471.9,1206.39 472.468,1203.24 473.036,1197.9 473.605,1193.39 474.173,1189.75 474.741,1184.9 475.31,1179.89 475.878,1175.66 476.446,1170.26 477.015,1164.7 477.583,1158.99 478.152,1152.06 478.72,1145.92 479.288,1139.56 479.857,1132.93 480.425,1126.17 480.993,1120.32 481.562,1113.2 482.13,1105.82 482.698,1098.11 483.267,1091.38 483.835,1081.2 484.403,1074.2 484.972,1065.92 485.54,1057.37 486.108,1048.77 486.677,1041.06 487.245,1031.15 487.813,1022.04 488.382,1012.79 488.95,1003.46 489.518,993.005 490.087,982.552 490.655,974.137 491.224,965.423 491.792,954.685 492.36,944.641 492.929,933.653 493.497,919.583 494.065,910.745 494.634,900.69 495.202,890.649 495.77,878.491 496.339,866.326 496.907,856.393 497.475,847.427 498.044,833.128 498.612,821.119 499.18,810.239 499.749,800.593 500.317,788.661 500.885,780.115 501.454,770.377 502.022,758.941 502.59,749.457 503.159,738.9 503.727,729.643 504.295,719.227 504.864,711.015 505.432,700.686 506.001,692.592 506.569,684.458 507.137,675.273 507.706,665.134 508.274,657.34 508.842,645.422 509.411,634.866 509.979,627.397 510.547,620.184 511.116,610.689 511.684,603.773 512.252,595.651 512.821,585.528 513.389,577.868 513.957,570.185 514.526,562.643 515.094,556.092 515.662,548.587 516.231,539.125 516.799,533.052 517.367,524.882 517.936,516.88 518.504,508.265 519.072,501.789 519.641,496.542 520.209,491.14 520.778,484.96 521.346,479.936 521.914,473.718 522.483,468.782 523.051,460.988 523.619,456.315 524.188,450.591 524.756,444.872 525.324,438.571 525.893,432.267 526.461,428.405 527.029,424.439 527.598,420.817 528.166,416.841 528.734,413.079 529.303,405.056 529.871,401.36 530.439,395.918 531.008,391.718 531.576,386.479 532.144,383.548 532.713,379.699 533.281,374.83 533.85,372.063 534.418,367.296 534.986,365.95 535.555,362.541 536.123,358.967 536.691,354.426 537.26,352.041 537.828,349.689 538.396,347.58 538.965,346.289 539.533,340.744 540.101,339.706 540.67,337.521 541.238,334.577 541.806,328.687 542.375,328.97 542.943,324.051 543.511,322.35 544.08,318.627 544.648,317.004 545.216,315.532 545.785,313.972 546.353,312.567 546.921,311.13 547.49,307.733 548.058,306.458 548.627,304.139 549.195,300.927 549.763,298.878 550.332,297.954 550.9,294.742 551.468,293.983 552.037,292.997 552.605,293.046 553.173,291.839 553.742,289.706 554.31,287.954 554.878,286.194 555.447,285.177 556.015,283.375 556.583,280.806 557.152,281.211 557.72,280.591 558.288,280.87 558.857,277.941 559.425,277.253 559.993,277.751 560.562,277.032 561.13,276.424 561.698,273.835 562.267,274.053 562.835,272.438 563.404,271.89 563.972,271.108 564.54,268.53 565.109,264.735 565.677,264.442 566.245,263.077 566.814,261.039 567.382,260.048 567.95,260.054 568.519,259.957 569.087,257.925 569.655,261.158 570.224,256.965 570.792,257.08 571.36,255.801 571.929,254.896 572.497,255.118 573.065,254.115 573.634,254.347 574.202,252.477 574.77,250.63 575.339,249.141 575.907,249.478 576.476,250.964 577.044,250.096 577.612,250.338 578.181,252.529 578.749,252.504 579.317,253.679 579.886,253.763 580.454,250.539 581.022,250.687 581.591,249.642 582.159,252.87 582.727,253.77 583.296,252.522 583.864,250.37 584.432,251.386 585.001,251.41 585.569,251.328 586.137,251.119 586.706,251.023 587.274,250.767 587.842,250.567 588.411,253.378 588.979,251.041 589.547,248.766 590.116,246.71 590.684,246.677 591.253,244.768 591.821,244.833 592.389,244.863 592.958,246.034 593.526,248.087 594.094,246.966 594.663,246.748 595.231,245.435 595.799,243.5 596.368,244.656 596.936,244.772 597.504,244.679 598.073,243.546 598.641,243.55 599.209,244.546 599.778,244.451 600.346,244.382 600.914,244.68 601.483,245.553 602.051,245.629 602.619,247.322 603.188,248.125 603.756,247.774 604.325,245.548 604.893,243.224 605.461,243.128 606.03,242.909 606.598,241.68 607.166,240.778 607.735,239.787 608.303,242.922 608.871,241.792 609.44,244.714 610.008,245.372 610.576,246.258 611.145,244.656 611.713,244.371 612.281,241.936 612.85,240.792 613.418,240.662 613.986,241.777 614.555,241.654 615.123,241.688 615.691,239.481 616.26,239.538 616.828,240.571 617.396,240.458 617.965,238.342 618.533,239.347 619.102,239.307 619.67,240.346 620.238,238.294 620.807,238.258 621.375,238.201 621.943,237.274 622.512,237.415 623.08,236.48 623.648,237.565 624.217,237.649 624.785,235.568 625.353,233.777 625.922,233.962 626.49,233.129 627.058,234.408 627.627,233.74 628.195,234.106 628.763,234.008 629.332,233.322 629.9,233.663 630.468,232.809 631.037,231.612 631.605,233.134 632.173,234.509 632.742,231.964 633.31,231.203 633.879,233.712 634.447,233.125 635.015,232.387 635.584,232.926 636.152,234.453 636.72,234.379 637.289,234.662 637.857,234.518 638.425,237.792 638.994,236.847 639.562,234.765 640.13,233.82 640.699,232.025 641.267,231.469 641.835,232.958 642.404,234.288 642.972,234.768 643.54,235.073 644.109,234.108 644.677,236.28 645.245,236.179 645.814,237.303 646.382,239.324 646.951,239.171 647.519,236.857 648.087,231.856 648.656,231.378 649.224,232.969 649.792,231.21 650.361,231.704 650.929,232.132 651.497,232.622 652.066,231.933 652.634,234.309 653.202,234.439 653.771,235.64 654.339,235.7 654.907,235.07 655.476,235.099 656.044,235.267 656.612,235.506 657.181,233.652 657.749,233.718 658.317,232.806 658.886,232.085 659.454,233.242 660.022,234.514 660.591,234.547 661.159,235.52 661.728,234.311 662.296,233.368 662.864,231.346 663.433,230.704 664.001,234.354 664.569,235.488 665.138,235.327 665.706,235.254 666.274,234.371 666.843,234.241 667.411,234.397 667.979,234.166 668.548,235.313 669.116,233.203 669.684,232.245 670.253,230.404 670.821,231.655 671.389,232.02 671.958,229.04 672.526,228.465 673.094,226.993 673.663,226.603 674.231,227.209 674.799,227.596 675.368,228.236 675.936,228.793 676.505,228.979 677.073,229.5 677.641,231.973 678.21,232.226 678.778,231.355 679.346,228.671 679.915,228.276 680.483,228.721 681.051,225.985 681.62,227.682 682.188,229.34 682.756,227.839 683.325,226.194 683.893,227.906 684.461,227.52 685.03,228.949 685.598,228.496 686.166,228.085 686.735,228.644 687.303,228.091 687.871,227.741 688.44,228.305 689.008,227.939 689.577,228.644 690.145,231.116 690.713,231.689 691.282,232.904 691.85,236.403 692.418,236.641 692.987,235.531 693.555,235.691 694.123,234.791 694.692,234.877 695.26,236.216 695.828,236.262 696.397,237.388 696.965,238.29 697.533,236.234 698.102,235.223 698.67,236.226 699.238,237.225 699.807,236.812 700.375,236.597 700.943,235.305 701.512,235.5 702.08,234.249 702.648,233.389 703.217,234.659 703.785,237.734 704.354,237.407 704.922,236.14 705.49,236.059 706.059,235.155 706.627,235.081 707.195,235.123 707.764,237.083 708.332,236.052 708.9,230.894 709.469,231.146 710.037,231.362 710.605,230.533 711.174,231.85 711.742,234.965 712.31,235.704 712.879,235.564 713.447,236.731 714.015,235.606 714.584,236.473 715.152,236.216 715.72,234.046 716.289,234.006 716.857,233.823 717.425,233.689 717.994,232.609 718.562,231.661 719.131,233.029 719.699,234.074 720.267,235.055 720.836,232.827 721.404,231.992 721.972,231.223 722.541,234.693 723.109,234.56 723.677,233.671 724.246,232.495 724.814,231.678 725.382,231.844 725.951,233.003 726.519,231.772 727.087,229.861 727.656,230.016 728.224,230.187 728.792,230.3 729.361,230.634 729.929,230.845 730.497,231.081 731.066,231.346 731.634,232.452 732.203,231.521 732.771,234.81 733.339,233.742 733.908,233.387 734.476,235.49 735.044,234.263 735.613,234.332 736.181,232.148 736.749,234.365 737.318,233.422 737.886,234.15 738.454,234.23 739.023,233.073 739.591,232.848 740.159,233.96 740.728,233.873 741.296,232.837 741.864,231.906 742.433,231.02 743.001,232.348 743.569,232.493 744.138,233.388 744.706,229.155 745.274,229.408 745.843,229.437 746.411,228.354 746.98,228.527 747.548,230.856 748.116,232.05 748.685,230.876 749.253,233.217 749.821,234.328 750.39,233.233 750.958,233.136 751.526,234.289 752.095,236.078 752.663,235.826 753.231,236.605 753.8,235.007 754.368,235.768 754.936,236.433 755.505,235.98 756.073,236.761 756.641,235.249 757.21,240.266 757.778,240.661 758.346,241.113 758.915,240.52 759.483,239.867 760.052,237.143 760.62,236.384 761.188,233.932 761.757,231.637 762.325,230.48 762.893,230.409 763.462,228.381 764.03,227.499 764.598,226.617 765.167,226.809 765.735,226.278 766.303,226.679 766.872,230.184 767.44,229.145 768.008,230.052 768.577,229.219 769.145,231.622 769.713,231.58 770.282,231.567 770.85,232.559 771.418,229.303 771.987,227.539 772.555,224.636 773.123,223.909 773.692,224.297 774.26,224.804 774.829,225.46 775.397,225.797 775.965,227.329 776.534,227.685 777.102,228.007 777.67,229.343 778.239,230.495 778.807,233.717 779.375,234.52 779.944,233.103 780.512,232.071 781.08,232.148 781.649,230.93 782.217,229.948 782.785,228.957 783.354,228.073 783.922,230.462 784.49,229.357 785.059,227.359 785.627,228.744 786.195,230.965 786.764,232.048 787.332,229.911 787.9,229.067 788.469,230.184 789.037,230.282 789.606,228.313 790.174,229.54 790.742,229.745 791.311,230.941 791.879,228.993 792.447,228.317 793.016,228.394 793.584,228.675 794.152,227.837 794.721,230.032 795.289,232.331 795.857,230.294 796.426,230.515 796.994,230.601 797.562,230.565 798.131,228.442 798.699,228.638 799.267,225.757 799.836,229.083 800.404,230.379 800.972,230.513 801.541,229.685 802.109,231.889 802.678,232.931 803.246,233.18 803.814,232.995 804.383,232.951 804.951,231.839 805.519,230.591 806.088,231.642 806.656,231.509 807.224,230.441 807.793,228.519 808.361,227.686 808.929,227.993 809.498,229.443 810.066,230.73 810.634,231.796 811.203,234.962 811.771,234.87 812.339,233.73 812.908,234.539 813.476,234.39 814.044,236.167 814.613,234.608 815.181,236.307 815.749,236.056 816.318,234.695 816.886,236.319 817.455,236.903 818.023,236.303 818.591,237.223 819.16,235.746 819.728,236.377 820.296,236.918 820.865,238.458 821.433,236.851 822.001,237.372 822.57,236.646 823.138,237.171 823.706,234.54 824.275,233.22 824.843,230.901 825.411,233.685 825.98,233.498 826.548,233.184 827.116,232.843 827.685,230.477 828.253,230.353 828.821,229.25 829.39,229.401 829.958,230.523 830.526,230.411 831.095,230.2 831.663,229.257 832.232,230.183 832.8,229.142 833.368,228.069 833.937,230.111 834.505,229.079 835.073,227.051 835.642,228.517 836.21,229.627 836.778,230.54 837.347,228.386 837.915,229.611 838.483,229.664 839.052,228.71 839.62,228.812 840.188,230.909 840.757,231.672 841.325,232.35 841.893,231.226 842.462,231.167 843.03,230.917 843.598,231.991 844.167,229.795 844.735,229.638 845.304,231.747 845.872,231.683 846.44,229.496 847.009,229.635 847.577,230.537 848.145,231.594 848.714,231.52 849.282,230.27 849.85,229.266 850.419,228.154 850.987,230.269 851.555,228.088 852.124,231.219 852.692,229.894 853.26,226.701 853.829,227.016 854.397,228.501 854.965,227.6 855.534,226.568 856.102,227.819 856.67,227.981 857.239,229.064 857.807,229.136 858.375,230.131 858.944,230.079 859.512,230.063 860.081,229.993 860.649,230.06 861.217,229.163 861.786,231.39 862.354,232.389 862.922,231.24 863.491,233.115 864.059,232.903 864.627,231.788 865.196,234.715 865.764,233.96 866.332,235.675 866.901,233.105 867.469,232.771 868.037,231.514 868.606,232.355 869.174,231.151 869.742,231.975 870.311,231.715 870.879,231.423 871.447,228.224 872.016,226.279 872.584,226.438 873.152,226.667 873.721,225.739 874.289,226.104 874.858,228.398 875.426,226.313 875.994,225.515 876.563,225.914 877.131,227.233 877.699,225.418 878.268,225.727 878.836,225.971 879.404,225.528 879.973,228.113 880.541,229.28 881.109,229.276 881.678,230.427 882.246,230.512 882.814,230.454 883.383,230.581 883.951,229.593 884.519,229.639 885.088,228.663 885.656,229.928 886.224,226.895 886.793,227.221 887.361,226.554 887.93,226.529 888.498,225.634 889.066,224.827 889.635,226.42 890.203,226.71 890.771,225.933 891.34,224.156 891.908,226.601 892.476,225.958 893.045,224.109 893.613,222.567 894.181,228.481 894.75,228.671 895.318,228.928 895.886,229.196 896.455,231.342 897.023,230.453 897.591,228.509 898.16,227.796 898.728,228.183 899.296,228.45 899.865,225.467 900.433,228.825 901.001,229.924 901.57,228.065 902.138,228.299 902.707,231.809 903.275,232.844 903.843,232.616 904.412,231.495 904.98,231.535 905.548,231.472 906.117,231.376 906.685,231.751 907.253,230.688 907.822,230.776 908.39,232.836 908.958,233.601 909.527,232.309 910.095,232.284 910.663,234.121 911.232,235.873 911.8,236.543 912.368,236.023 912.937,237.566 913.505,239.187 914.073,238.482 914.642,239.158 915.21,238.708 915.779,238.098 916.347,237.63 916.915,236.024 917.484,235.755 918.052,236.325 918.62,234.651 919.189,234.271 919.757,232.779 920.325,232.613 920.894,231.278 921.462,230.139 922.03,228.93 922.599,227.016 923.167,226.087 923.735,226.458 924.304,228.843 924.872,227.66 925.44,227.909 926.009,227.987 926.577,228.019 927.145,229.108 927.714,227.957 928.282,227.93 928.85,225.95 929.419,223.918 929.987,223.401 930.556,221.711 931.124,224.641 931.692,224 932.261,224.478 932.829,225.137 933.397,224.48 933.966,223.878 934.534,225.69 935.102,225.89 935.671,227.454 936.239,227.65 936.807,227.837 937.376,230.277 937.944,230.222 938.512,229.289 939.081,227.419 939.649,225.528 940.217,226.024 940.786,226.162 941.354,226.636 941.922,225.965 942.491,225.543 943.059,228.059 943.627,228.45 944.196,228.487 944.764,229.66 945.333,227.691 945.901,228.024 946.469,229.409 947.038,229.783 947.606,229.839 948.174,231.135 948.743,231.018 949.311,231.139 949.879,231.068 950.448,231.875 951.016,232.86 951.584,232.755 952.153,232.638 952.721,234.728 953.289,232.462 953.858,233.552 954.426,232.474 954.994,231.336 955.563,232.413 956.131,233.326 956.699,232.101 957.268,234.11 957.836,236.033 958.405,235.633 958.973,236.495 959.541,236.028 960.11,235.459 960.678,236.28 961.246,237.854 961.815,239.208 962.383,236.475 962.951,235.98 963.52,235.569 964.088,234.213 964.656,232.955 965.225,232.814 965.793,230.71 966.361,230.858 966.93,229.718 967.498,229.592 968.066,228.485 968.635,230.325 969.203,230.274 969.771,229.218 970.34,229.394 970.908,230.38 971.476,229.33 972.045,228.426 972.613,229.55 973.182,230.281 973.75,229.179 974.318,230.331 974.887,229.133 975.455,229.319 976.023,228.226 976.592,229.13 977.16,230.192 977.728,230.215 978.297,229.984 978.865,228.934 979.433,228.884 980.002,229.008 980.57,227.023 981.138,227.161 981.707,227.152 982.275,229.547 982.843,229.461 983.412,228.459 983.98,228.72 984.548,227.788 985.117,232.258 985.685,236.25 986.253,235.945 986.822,234.729 987.39,233.282 987.959,230.801 988.527,233.679 989.095,232.304 989.664,231.115 990.232,230.763 990.8,230.507 991.369,230.603 991.937,226.479 992.505,224.773 993.074,226.07 993.642,227.28 994.21,226.432 994.779,226.816 995.347,226.207 995.915,228.592 996.484,228.618 997.052,230.906 997.62,228.901 998.189,227.886 998.757,228.218 999.325,227.369 999.894,228.733 1000.46,227.91 1001.03,227.112 1001.6,228.443 1002.17,228.491 1002.74,229.749 1003.3,229.006 1003.87,227.064 1004.44,228.223 1005.01,227.213 1005.58,227.289 1006.15,226.617 1006.71,226.776 1007.28,226.18 1007.85,226.302 1008.42,226.475 1008.99,226.746 1009.56,227.984 1010.12,228.234 1010.69,227.614 1011.26,226.741 1011.83,227.18 1012.4,227.509 1012.97,229.756 1013.53,228.841 1014.1,228.896 1014.67,228.003 1015.24,229.307 1015.81,228.369 1016.38,230.795 1016.94,228.733 1017.51,227.622 1018.08,228.886 1018.65,228.722 1019.22,226.715 1019.79,227.06 1020.35,228.463 1020.92,229.657 1021.49,227.739 1022.06,230.362 1022.63,231.504 1023.2,231.57 1023.76,228.457 1024.33,227.617 1024.9,226.965 1025.47,227.187 1026.04,227.507 1026.61,228.544 1027.17,230.857 1027.74,230.699 1028.31,228.557 1028.88,230.708 1029.45,231.742 1030.02,232.602 1030.58,233.476 1031.15,234.484 1031.72,234.248 1032.29,236.073 1032.86,234.681 1033.43,234.504 1033.99,235.281 1034.56,235.268 1035.13,235.064 1035.7,235.812 1036.27,235.504 1036.84,234.177 1037.4,231.721 1037.97,228.403 1038.54,230.588 1039.11,229.653 1039.68,230.652 1040.25,228.6 1040.81,228.866 1041.38,227.856 1041.95,229.115 1042.52,229.227 1043.09,231.311 1043.66,231.116 1044.22,229.059 1044.79,229.271 1045.36,228.299 1045.93,228.476 1046.5,228.508 1047.07,229.612 1047.63,231.764 1048.2,230.777 1048.77,231.83 1049.34,232.724 1049.91,232.152 1050.48,230.801 1051.05,230.735 1051.61,229.573 1052.18,231.486 1052.75,228.123 1053.32,229.229 1053.89,228.416 1054.46,228.375 1055.02,228.514 1055.59,227.399 1056.16,228.643 1056.73,228.749 1057.3,228.9 1057.87,227.985 1058.43,227.081 1059,224.895 1059.57,227.365 1060.14,225.665 1060.71,226.002 1061.28,229.445 1061.84,229.394 1062.41,230.479 1062.98,231.598 1063.55,232.695 1064.12,230.588 1064.69,230.57 1065.25,232.638 1065.82,230.335 1066.39,231.12 1066.96,231.159 1067.53,230.04 1068.1,229.864 1068.66,231.801 1069.23,231.768 1069.8,231.606 1070.37,229.712 1070.94,230.838 1071.51,231.779 1072.07,230.886 1072.64,230.878 1073.21,230.87 1073.78,232.063 1074.35,230.668 1074.92,229.66 1075.48,228.692 1076.05,227.717 1076.62,229.008 1077.19,229.041 1077.76,227.817 1078.33,231.099 1078.89,231.036 1079.46,228.913 1080.03,229.143 1080.6,230.397 1081.17,228.218 1081.74,227.307 1082.3,225.357 1082.87,227.817 1083.44,227.96 1084.01,226.298 1084.58,225.554 1085.15,224.85 1085.71,226.284 1086.28,228.791 1086.85,228.854 1087.42,231.199 1087.99,230.278 1088.56,231.257 1089.12,233.242 1089.69,230.92 1090.26,229.889 1090.83,232.078 1091.4,229.665 1091.97,228.769 1092.53,231.051 1093.1,232.906 1093.67,231.758 1094.24,230.545 1094.81,227.658 1095.38,227.948 1095.94,228.215 1096.51,228.347 1097.08,228.391 1097.65,229.527 1098.22,228.571 1098.79,227.472 1099.35,228.9 1099.92,229.034 1100.49,230.129 1101.06,230.175 1101.63,230.317 1102.2,231.514 1102.76,232.51 1103.33,231.426 1103.9,231.37 1104.47,232.217 1105.04,232.139 1105.61,232.015 1106.17,231.877 1106.74,231.639 1107.31,233.618 1107.88,233.6 1108.45,232.327 1109.02,232.066 1109.58,234.025 1110.15,231.651 1110.72,229.6 1111.29,229.589 1111.86,230.717 1112.43,229.807 1112.99,230.029 1113.56,228.775 1114.13,227.827 1114.7,227.89 1115.27,227.09 1115.84,226.206 1116.4,227.581 1116.97,227.595 1117.54,225.803 1118.11,227.207 1118.68,228.389 1119.25,228.584 1119.81,229.881 1120.38,227.906 1120.95,228.09 1121.52,227.077 1122.09,229.164 1122.66,229.345 1123.23,228.361 1123.79,228.516 1124.36,228.61 1124.93,229.446 1125.5,229.571 1126.07,229.546 1126.64,230.649 1127.2,228.725 1127.77,230.911 1128.34,229.998 1128.91,230.833 1129.48,230.822 1130.05,231.935 1130.61,230.818 1131.18,230.767 1131.75,229.651 1132.32,230.742 1132.89,230.739 1133.46,229.639 1134.02,228.881 1134.59,227.971 1135.16,228.112 1135.73,228.225 1136.3,229.38 1136.87,229.506 1137.43,230.397 1138,228.168 1138.57,229.45 1139.14,230.611 1139.71,229.807 1140.28,229.867 1140.84,230.089 1141.41,233.227 1141.98,233.868 1142.55,232.466 1143.12,233.423 1143.69,235.056 1144.25,234.654 1144.82,233.476 1145.39,232.364 1145.96,232.189 1146.53,231.995 1147.1,228.714 1147.66,227.793 1148.23,226.928 1148.8,227.254 1149.37,225.37 1149.94,226.583 1150.51,225.919 1151.07,226.529 1151.64,228.863 1152.21,232.123 1152.78,227.96 1153.35,225.002 1153.92,227.35 1154.48,227.798 1155.05,230.818 1155.62,231.978 1156.19,231.63 1156.76,231.469 1157.33,231.386 1157.89,233.197 1158.46,235.28 1159.03,235.067 1159.6,236.788 1160.17,232.222 1160.74,231.176 1161.3,229.025 1161.87,229.017 1162.44,227.729 1163.01,226.848 1163.58,226.899 1164.15,227 1164.71,229.167 1165.28,229.272 1165.85,230.466 1166.42,232.177 1166.99,231.89 1167.56,230.753 1168.12,230.727 1168.69,230.552 1169.26,231.614 1169.83,232.445 1170.4,232.326 1170.97,234.159 1171.53,232.898 1172.1,231.437 1172.67,231.21 1173.24,231.106 1173.81,230.858 1174.38,232.703 1174.94,230.464 1175.51,229.503 1176.08,227.523 1176.65,226.74 1177.22,225.753 1177.79,226.066 1178.35,225.299 1178.92,222.572 1179.49,222.917 1180.06,224.572 1180.63,226.042 1181.2,227.387 1181.76,229.664 1182.33,229.678 1182.9,229.817 1183.47,229.793 1184.04,230.871 1184.61,231.915 1185.17,233.95 1185.74,233.607 1186.31,234.298 1186.88,234.098 1187.45,232.784 1188.02,234.607 1188.58,233.224 1189.15,231.808 1189.72,231.674 1190.29,230.486 1190.86,231.419 1191.43,230.394 1192,235.38 1192.56,236.078 1193.13,236.46 1193.7,235.815 1194.27,234.985 1194.84,231.54 1195.41,234.354 1195.97,234.025 1196.54,235.453 1197.11,234.025 1197.68,237.573 1198.25,237.245 1198.82,236.68 1199.38,238.322 1199.95,237.433 1200.52,236.978 1201.09,238.285 1201.66,237.551 1202.23,237.821 1202.79,237.105 1203.36,235.455 1203.93,232.994 1204.5,230.526 1205.07,231.156 1205.64,229.924 1206.2,229.938 1206.77,230.817 1207.34,231.499 1207.91,230.179 1208.48,230.137 1209.05,230.88 1209.61,233.838 1210.18,233.431 1210.75,232.93 1211.32,232.397 1211.89,233.102 1212.46,230.792 1213.02,230.367 1213.59,229.015 1214.16,228.602 1214.73,224.673 1215.3,225.873 1215.87,225.951 1216.43,225.975 1217,224.112 1217.57,225.462 1218.14,228.434 1218.71,228.47 1219.28,227.367 1219.84,227.211 1220.41,226.389 1220.98,225.298 1221.55,226.592 1222.12,225.603 1222.69,225.904 1223.25,227.391 1223.82,226.517 1224.39,229.729 1224.96,232.582 1225.53,232.255 1226.1,233.246 1226.66,233.819 1227.23,234.542 1227.8,234.155 1228.37,231.77 1228.94,231.498 1229.51,230.066 1230.07,229.708 1230.64,229.42 1231.21,228.184 1231.78,228.196 1232.35,228.446 1232.92,229.307 1233.48,228.138 1234.05,227.394 1234.62,226.574 1235.19,226.497 1235.76,227.862 1236.33,226.844 1236.89,223.642 1237.46,223.794 1238.03,223.194 1238.6,223.655 1239.17,225.207 1239.74,226.455 1240.3,227.725 1240.87,228.795 1241.44,227.672 1242.01,227.742 1242.58,225.853 1243.15,227.907 1243.71,229.066 1244.28,226.952 1244.85,228.128 1245.42,226.25 1245.99,226.256 1246.56,225.436 1247.12,224.646 1247.69,227.124 1248.26,227.211 1248.83,224.218 1249.4,225.666 1249.97,226.187 1250.53,226.365 1251.1,227.623 1251.67,226.668 1252.24,227.013 1252.81,227.277 1253.38,226.54 1253.94,226.937 1254.51,228.193 1255.08,230.264 1255.65,230.298 1256.22,230.568 1256.79,229.573 1257.35,230.713 1257.92,230.508 1258.49,229.438 1259.06,228.455 1259.63,231.859 1260.2,231.414 1260.76,230.263 1261.33,230.186 1261.9,231.186 1262.47,230.988 1263.04,230.944 1263.61,230.831 1264.18,230.607 1264.74,231.566 1265.31,231.29 1265.88,232.189 1266.45,232.019 1267.02,232.008 1267.59,230.981 1268.15,232.122 1268.72,232.179 1269.29,231.91 1269.86,231.641 1270.43,230.534 1271,229.481 1271.56,230.563 1272.13,230.37 1272.7,229.22 1273.27,229.022 1273.84,228.909 1274.41,230.056 1274.97,231.157 1275.54,234.158 1276.11,234.898 1276.68,235.493 1277.25,235.015 1277.82,234.799 1278.38,235.167 1278.95,235.638 1279.52,233.206 1280.09,232.915 1280.66,233.682 1281.23,234.207 1281.79,233.579 1282.36,231.797 1282.93,231.583 1283.5,231.204 1284.07,231.019 1284.64,230.794 1285.2,229.834 1285.77,230.842 1286.34,228.808 1286.91,225.839 1287.48,226.049 1288.05,224.17 1288.61,224.549 1289.18,223.471 1289.75,220.61 1290.32,222.137 1290.89,222.519 1291.46,223.071 1292.02,222.65 1292.59,223.324 1293.16,225.861 1293.73,224.07 1294.3,224.559 1294.87,226.078 1295.43,224.484 1296,221.915 1296.57,222.612 1297.14,220.969 1297.71,222.781 1298.28,225.453 1298.84,226.906 1299.41,226.104 1299.98,223.294 1300.55,224.969 1301.12,225.17 1301.69,224.493 1302.25,222.969 1302.82,222.282 1303.39,222.845 1303.96,223.423 1304.53,226.011 1305.1,226.353 1305.66,227.085 1306.23,229.517 1306.8,228.773 1307.37,228.997 1307.94,230.24 1308.51,230.33 1309.07,230.26 1309.64,226.328 1310.21,225.477 1310.78,227.878 1311.35,228.16 1311.92,232.645 1312.48,234.619 1313.05,236.507 1313.62,236.331 1314.19,236.069 1314.76,238.842 1315.33,237.196 1315.89,234.783 1316.46,234.672 1317.03,235.566 1317.6,235.11 1318.17,234.845 1318.74,236.499 1319.3,238.284 1319.87,237.946 1320.44,237.269 1321.01,237.673 1321.58,238.164 1322.15,239.487 1322.71,238.75 1323.28,237.899 1323.85,237.16 1324.42,238.876 1324.99,237.18 1325.56,235.541 1326.12,234.922 1326.69,235.45 1327.26,233.908 1327.83,231.546 1328.4,230.437 1328.97,233.514 1329.53,234.084 1330.1,233.639 1330.67,233.186 1331.24,234.788 1331.81,234.273 1332.38,231.817 1332.94,234.423 1333.51,232.867 1334.08,230.426 1334.65,230.318 1335.22,231.154 1335.79,230.899 1336.36,231.873 1336.92,231.585 1337.49,229.485 1338.06,231.431 1338.63,229.091 1339.2,227.027 1339.77,224.922 1340.33,225.079 1340.9,224.35 1341.47,224.499 1342.04,223.741 1342.61,224.197 1343.18,223.306 1343.74,222.749 1344.31,225.032 1344.88,226.638 1345.45,226.963 1346.02,224.01 1346.59,223.277 1347.15,223.585 1347.72,221.615 1348.29,226.527 1348.86,225.718 1349.43,227.976 1350,227.98 1350.56,228.214 1351.13,229.42 1351.7,229.286 1352.27,228.256 1352.84,227.385 1353.41,227.513 1353.97,228.923 1354.54,230.053 1355.11,229.999 1355.68,228.996 1356.25,229.234 1356.82,227.198 1357.38,227.204 1357.95,225.218 1358.52,223.511 1359.09,224.877 1359.66,225.198 1360.23,225.548 1360.79,224.696 1361.36,226.112 1361.93,225.505 1362.5,226.915 1363.07,225.153 1363.64,222.505 1364.2,219.895 1364.77,223.45 1365.34,222.881 1365.91,223.411 1366.48,224.795 1367.05,225.155 1367.61,224.502 1368.18,225.02 1368.75,226.445 1369.32,226.607 1369.89,226.946 1370.46,227.313 1371.02,226.54 1371.59,228.964 1372.16,228.355 1372.73,229.735 1373.3,231.88 1373.87,228.634 1374.43,228.659 1375,227.973 1375.57,228.057 1376.14,229.288 1376.71,230.852 1377.28,231.818 1377.84,232.823 1378.41,231.749 1378.98,231.881 1379.55,230.737 1380.12,230.637 1380.69,231.614 1381.25,231.48 1381.82,234.48 1382.39,233.326 1382.96,233.234 1383.53,231.966 1384.1,233.002 1384.66,232.127 1385.23,231.917 1385.8,230.78 1386.37,231.879 1386.94,230.801 1387.51,230.857 1388.07,229.81 1388.64,230.94 1389.21,233.928 1389.78,233.679 1390.35,233.791 1390.92,234.441 1391.48,234.1 1392.05,233.573 1392.62,233.187 1393.19,232.986 1393.76,235.756 1394.33,236.268 1394.89,234.791 1395.46,233.394 1396.03,233.192 1396.6,228.919 1397.17,231.212 1397.74,228.862 1398.3,228.953 1398.87,230.181 1399.44,231.097 1400.01,230.97 1400.58,231.088 1401.15,230.016 1401.71,229.098 1402.28,227.028 1402.85,227.1 1403.42,229.296 1403.99,229.539 1404.56,229.413 1405.13,230.594 1405.69,229.643 1406.26,229.451 1406.83,229.615 1407.4,228.65 1407.97,229.673 1408.54,229.629 1409.1,230.689 1409.67,228.707 1410.24,229.711 1410.81,229.864 1411.38,229.698 1411.95,231.748 1412.51,229.611 1413.08,230.832 1413.65,230.649 1414.22,229.565 1414.79,229.556 1415.36,228.585 1415.92,227.653 1416.49,226.835 1417.06,228.286 1417.63,229.661 1418.2,230.686 1418.77,228.79 1419.33,227.803 1419.9,230.176 1420.47,229.046 1421.04,229.292 1421.61,229.65 1422.18,232.968 1422.74,231.591 1423.31,232.535 1423.88,231.54 1424.45,231.675 1425.02,232.642 1425.59,230.624 1426.15,232.4 1426.72,232.325 1427.29,233.207 1427.86,235.077 1428.43,235.648 1429,234.393 1429.56,237.165 1430.13,236.565 1430.7,236.114 1431.27,236.664 1431.84,235.132 1432.41,235.621 1432.97,233.207 1433.54,232.613 1434.11,233.594 1434.68,233.386 1435.25,230.871 1435.82,230.873 1436.38,230.745 1436.95,230.716 1437.52,229.549 1438.09,230.587 1438.66,228.508 1439.23,227.571 1439.79,228.716 1440.36,227.639 1440.93,227.676 1441.5,229.965 1442.07,227.775 1442.64,228.022 1443.2,228.061 1443.77,229.178 1444.34,225.93 1444.91,226.037 1445.48,225.367 1446.05,223.528 1446.61,221.718 1447.18,222.081 1447.75,223.568 1448.32,224.226 1448.89,224.368 1449.46,226.02 1450.02,225.257 1450.59,227.601 1451.16,226.633 1451.73,228.843 1452.3,232.077 1452.87,232.882 1453.43,231.474 1454,231.221 1454.57,231.241 1455.14,232.163 1455.71,232.843 1456.28,231.764 1456.84,231.528 1457.41,230.341 1457.98,232.349 1458.55,232.94 1459.12,232.625 1459.69,232.461 1460.25,232.345 1460.82,231.327 1461.39,231.272 1461.96,231.103 1462.53,230.933 1463.1,231.76 1463.66,232.461 1464.23,230.18 1464.8,230.98 1465.37,230.832 1465.94,227.786 1466.51,227.822 1467.07,226.617 1467.64,227.564 1468.21,227.597 1468.78,227.694 1469.35,228.742 1469.92,228.849 1470.48,228.796 1471.05,228.725 1471.62,228.616 1472.19,230.958 1472.76,232.829 1473.33,229.54 1473.89,229.314 1474.46,229.085 1475.03,230.323 1475.6,229.311 1476.17,226.038 1476.74,223.975 1477.31,224.359 1477.87,224.725 1478.44,225.101 1479.01,225.391 1479.58,225.621 1480.15,225.683 1480.72,227.153 1481.28,229.412 1481.85,231.371 1482.42,230.269 1482.99,229.062 1483.56,229.301 1484.13,230.381 1484.69,231.11 1485.26,228.894 1485.83,227.691 1486.4,227.01 1486.97,224.979 1487.54,224.521 1488.1,223.981 1488.67,223.607 1489.24,224.13 1489.81,225.615 1490.38,225.896 1490.95,225.416 1491.51,226.607 1492.08,227.92 1492.65,229.077 1493.22,229.061 1493.79,227.228 1494.36,226.425 1494.92,229.985 1495.49,230.105 1496.06,230.152 1496.63,228.097 1497.2,230.263 1497.77,232.355 1498.33,231.324 1498.9,231.253 1499.47,231.147 1500.04,232.303 1500.61,232.139 1501.18,230.932 1501.74,229.649 1502.31,230.704 1502.88,230.724 1503.45,230.77 1504.02,231.869 1504.59,231.849 1505.15,232.714 1505.72,233.758 1506.29,232.275 1506.86,231.089 1507.43,231.169 1508,231.191 1508.56,233.36 1509.13,234.221 1509.7,234.983 1510.27,234.7 1510.84,235.527 1511.41,236.111 1511.97,236.488 1512.54,235.95 1513.11,233.556 1513.68,234.168 1514.25,233.854 1514.82,232.39 1515.38,231.301 1515.95,231.181 1516.52,232.036 1517.09,230.821 1517.66,229.599 1518.23,231.736 1518.79,231.708 1519.36,231.512 1519.93,230.219 1520.5,229.063 1521.07,227.03 1521.64,227.137 1522.2,225.144 1522.77,230.591 1523.34,229.359 1523.91,229.458 1524.48,227.446 1525.05,228.783 1525.61,227.936 1526.18,228.258 1526.75,227.492 1527.32,227.592 1527.89,226.782 1528.46,224.903 1529.02,225.207 1529.59,226.472 1530.16,226.665 1530.73,229.038 1531.3,230.105 1531.87,231.12 1532.43,233.193 1533,232.082 1533.57,233.011 1534.14,232.85 1534.71,232.602 1535.28,233.41 1535.84,233.035 1536.41,232.808 1536.98,232.548 1537.55,233.35 1538.12,230.98 1538.69,230.901 1539.25,228.856 1539.82,229.033 1540.39,231.153 1540.96,231.978 1541.53,230.549 1542.1,232.273 1542.66,232.069 1543.23,232.663 1543.8,233.45 1544.37,233.347 1544.94,233.26 1545.51,230.873 1546.08,230.779 1546.64,230.847 1547.21,227.764 1547.78,232.14 1548.35,233.022 1548.92,233.694 1549.49,231.543 1550.05,233.394 1550.62,234.083 1551.19,233.88 1551.76,233.524 1552.33,234.169 1552.9,232.753 1553.46,229.087 1554.03,227.95 1554.6,228.065 1555.17,230.241 1555.74,230.03 1556.31,230.896 1556.87,231.677 1557.44,231.637 1558.01,231.416 1558.58,230.207 1559.15,228.904 1559.72,228.95 1560.28,228.872 1560.85,228.885 1561.42,228.77 1561.99,229.821 1562.56,228.551 1563.13,225.369 1563.69,226.679 1564.26,225.879 1564.83,224.064 1565.4,224.317 1565.97,223.44 1566.54,223.883 1567.1,223.164 1567.67,222.757 1568.24,223.389 1568.81,223.821 1569.38,223.437 1569.95,223.988 1570.51,222.536 1571.08,224.227 1571.65,225.649 1572.22,226.857 1572.79,227.024 1573.36,228.28 1573.92,232.609 1574.49,232.582 1575.06,229.396 1575.63,228.487 1576.2,227.593 1576.77,226.614 1577.33,225.732 1577.9,227.939 1578.47,227.013 1579.04,227.336 1579.61,228.775 1580.18,226.718 1580.74,226.02 1581.31,228.317 1581.88,230.624 1582.45,227.447 1583.02,226.52 1583.59,228.598 1584.15,227.542 1584.72,227.629 1585.29,227.915 1585.86,228.247 1586.43,225.397 1587,226.915 1587.56,225.111 1588.13,224.556 1588.7,224.302 1589.27,229.138 1589.84,229.467 1590.41,229.679 1590.97,228.777 1591.54,233.274 1592.11,233.139 1592.68,234.034 1593.25,233.739 1593.82,235.669 1594.38,235.533 1594.95,229.947 1595.52,230.035 1596.09,230.1 1596.66,230.202 1597.23,229.329 1597.79,228.456 1598.36,229.839 1598.93,228.743 1599.5,228.962 1600.07,230.067 1600.64,230.152 1601.2,230.1 1601.77,233.128 1602.34,233.904 1602.91,233.718 1603.48,233.422 1604.05,236.252 1604.61,235.937 1605.18,235.53 1605.75,233.222 1606.32,234.142 1606.89,232.853 1607.46,232.607 1608.02,232.416 1608.59,232.291 1609.16,233.15 1609.73,231.811 1610.3,230.585 1610.87,230.404 1611.43,231.554 1612,232.603 1612.57,234.417 1613.14,232.086 1613.71,231.04 1614.28,230.846 1614.84,228.684 1615.41,228.659 1615.98,227.72 1616.55,226.845 1617.12,225.958 1617.69,225.191 1618.26,226.397 1618.82,227.567 1619.39,229.55 1619.96,228.471 1620.53,230.586 1621.1,231.564 1621.67,231.328 1622.23,227.006 1622.8,230.053 1623.37,231.033 1623.94,228.823 1624.51,226.858 1625.08,227.997 1625.64,229.082 1626.21,231.304 1626.78,233.303 1627.35,233.228 1627.92,231.84 1628.49,233.771 1629.05,235.361 1629.62,236.068 1630.19,235.355 1630.76,232.852 1631.33,232.609 1631.9,231.507 1632.46,229.488 1633.03,228.242 1633.6,228.185 1634.17,228.14 1634.74,229.004 1635.31,227.968 1635.87,226.95 1636.44,228.104 1637.01,232.221 1637.58,232.155 1638.15,230.983 1638.72,231.883 1639.28,232.929 1639.85,231.714 1640.42,230.299 1640.99,229.117 1641.56,229.122 1642.13,229.186 1642.69,229.278 1643.26,230.351 1643.83,232.44 1644.4,232.07 1644.97,231.813 1645.54,229.612 1646.1,226.526 1646.67,226.796 1647.24,225.966 1647.81,226.258 1648.38,226.529 1648.95,225.761 1649.51,224.909 1650.08,225.161 1650.65,226.62 1651.22,227.861 1651.79,225.699 1652.36,227.06 1652.92,227.047 1653.49,227.443 1654.06,227.71 1654.63,226.563 1655.2,226.984 1655.77,226.082 1656.33,227.524 1656.9,225.658 1657.47,224.916 1658.04,227.233 1658.61,228.579 1659.18,228.969 1659.74,227.932 1660.31,229.216 1660.88,229.337 1661.45,230.245 1662.02,231.381 1662.59,231.315 1663.15,231.283 1663.72,231.044 1664.29,232.131 1664.86,232.03 1665.43,231.814 1666,231.514 1666.56,232.358 1667.13,232.128 1667.7,231.045 1668.27,231.085 1668.84,230.011 1669.41,231.862 1669.97,231.813 1670.54,231.824 1671.11,231.87 1671.68,231.716 1672.25,234.82 1672.82,234.494 1673.38,236.376 1673.95,231.675 1674.52,229.566 1675.09,230.697 1675.66,229.492 1676.23,230.65 1676.79,230.492 1677.36,229.329 1677.93,229.257 1678.5,230.448 1679.07,230.457 1679.64,230.352 1680.2,230.633 1680.77,229.613 1681.34,227.658 1681.91,226.778 1682.48,227.025 1683.05,228.057 1683.61,227.301 1684.18,222.252 1684.75,222.893 1685.32,223.486 1685.89,223.861 1686.46,225.38 1687.02,225.843 1687.59,224.352 1688.16,229.87 1688.73,226.832 1689.3,228.061 1689.87,228.433 1690.44,229.413 1691,228.627 1691.57,227.782 1692.14,229.079 1692.71,229.305 1693.28,231.449 1693.85,231.324 1694.41,231.171 1694.98,230.948 1695.55,230.934 1696.12,229.962 1696.69,229.278 1697.26,231.288 1697.82,229.122 1698.39,230.192 1698.96,232.334 1699.53,234.11 1700.1,234.834 1700.67,234.644 1701.23,234.391 1701.8,232.208 1702.37,234.131 1702.94,235.09 1703.51,233.747 1704.08,236.349 1704.64,233.968 1705.21,233.599 1705.78,233.38 1706.35,233.123 1706.92,231.975 1707.49,229.578 1708.05,230.602 1708.62,231.463 1709.19,231.377 1709.76,233.37 1710.33,234.198 1710.9,232.777 1711.46,232.487 1712.03,233.402 1712.6,231.989 1713.17,231.954 1713.74,230.782 1714.31,228.746 1714.87,226.819 1715.44,228.774 1716.01,228.666 1716.58,229.817 1717.15,229.704 1717.72,228.69 1718.28,227.655 1718.85,227.848 1719.42,227.941 1719.99,227.105 1720.56,226.044 1721.13,225.22 1721.69,226.422 1722.26,226.677 1722.83,228.017 1723.4,229.201 1723.97,229.167 1724.54,230.207 1725.1,228.391 1725.67,227.433 1726.24,226.477 1726.81,226.612 1727.38,226.952 1727.95,226.256 1728.51,226.304 1729.08,226.41 1729.65,227.809 1730.22,230.023 1730.79,230.12 1731.36,232.038 1731.92,232.974 1732.49,231.688 1733.06,232.87 1733.63,232.696 1734.2,232.24 1734.77,232.305 1735.33,230.135 1735.9,229.748 1736.47,228.8 1737.04,227.06 1737.61,227.172 1738.18,228.45 1738.74,229.613 1739.31,228.548 1739.88,231.79 1740.45,232.727 1741.02,233.654 1741.59,235.335 1742.15,234.905 1742.72,232.269 1743.29,233.075 1743.86,232.906 1744.43,234.597 1745,234.3 1745.56,231.942 1746.13,233.671 1746.7,234.508 1747.27,235.173 1747.84,232.7 1748.41,233.493 1748.97,231.009 1749.54,231.792 1750.11,230.452 1750.68,231.47 1751.25,231.329 1751.82,231.252 1752.38,231.097 1752.95,231.822 1753.52,231.527 1754.09,232.526 1754.66,232.212 1755.23,229.956 1755.79,228.841 1756.36,229.678 1756.93,230.691 1757.5,230.552 1758.07,230.184 1758.64,229.066 1759.21,230.145 1759.77,228.964 1760.34,227.721 1760.91,227.919 1761.48,225.871 1762.05,226.887 1762.62,228.202 1763.18,227.229 1763.75,225.241 1764.32,225.705 1764.89,226.898 1765.46,226.813 1766.03,225.943 1766.59,226.227 1767.16,225.41 1767.73,224.728 1768.3,225.016 1768.87,225.213 1769.44,224.38 1770,224.74 1770.57,227.176 1771.14,224.172 1771.71,224.886 1772.28,223.209 1772.85,224.672 1773.41,225.044 1773.98,224.456 1774.55,223.567 1775.12,224.108 1775.69,227.711 1776.26,227.83 1776.82,229.073 1777.39,229.033 1777.96,227.929 1778.53,227.04 1779.1,226.335 1779.67,229.721 1780.23,229.712 1780.8,230.892 1781.37,230.702 1781.94,230.479 1782.51,230.308 1783.08,230.378 1783.64,229.634 1784.21,227.663 1784.78,227.815 1785.35,228.953 1785.92,233.334 1786.49,233.198 1787.05,232.928 1787.62,231.644 1788.19,230.457 1788.76,230.379 1789.33,229.263 1789.9,229.27 1790.46,230.281 1791.03,230.168 1791.6,229.222 1792.17,229.276 1792.74,231.312 1793.31,230.37 1793.87,230.433 1794.44,231.184 1795.01,234.035 1795.58,233.942 1796.15,233.698 1796.72,234.196 1797.28,232.76 1797.85,232.494 1798.42,231.288 1798.99,230.222 1799.56,230.175 1800.13,229.898 1800.69,227.581 1801.26,226.792 1801.83,227.065 1802.4,229.325 1802.97,231.146 1803.54,229.722 1804.1,230.607 1804.67,229.67 1805.24,226.599 1805.81,225.985 1806.38,226.208 1806.95,225.4 1807.51,225.771 1808.08,226.129 1808.65,227.438 1809.22,231.678 1809.79,231.49 1810.36,231.314 1810.92,232.222 1811.49,233.065 1812.06,233.712 1812.63,235.622 1813.2,236.212 1813.77,237.815 1814.33,237.512 1814.9,237.011 1815.47,235.291 1816.04,233.054 1816.61,230.898 1817.18,230.519 1817.74,234.537 1818.31,234.215 1818.88,233.833 1819.45,233.59 1820.02,233.4 1820.59,232.004 1821.15,231.816 1821.72,231.5 1822.29,231.303 1822.86,231.112 1823.43,230.779 1824,228.565 1824.56,230.629 1825.13,229.607 1825.7,230.497 1826.27,229.432 1826.84,228.544 1827.41,228.521 1827.97,229.544 1828.54,230.527 1829.11,229.302 1829.68,228.421 1830.25,229.38 1830.82,229.278 1831.39,229.148 1831.95,230.037 1832.52,229.855 1833.09,231.91 1833.66,232.741 1834.23,232.608 1834.8,232.569 1835.36,231.267 1835.93,229.68 1836.5,229.683 1837.07,229.682 1837.64,230.505 1838.21,231.553 1838.77,230.439 1839.34,230.257 1839.91,229.193 1840.48,228.078 1841.05,229.039 1841.62,228.896 1842.18,228.791 1842.75,225.719 1843.32,226.063 1843.89,225.384 1844.46,225.698 1845.03,224.8 1845.59,224.105 1846.16,224.324 1846.73,226.723 1847.3,225.692 1847.87,225.014 1848.44,224.143 1849,223.216 1849.57,222.745 1850.14,224.246 1850.71,223.834 1851.28,223.156 1851.85,223.683 1852.41,224.283 1852.98,224.629 1853.55,225.98 1854.12,225.269 1854.69,224.609 1855.26,225.045 1855.82,225.356 1856.39,224.634 1856.96,225.048 1857.53,223.417 1858.1,224.194 1858.67,224.492 1859.23,222.9 1859.8,223.376 1860.37,222.976 1860.94,225.669 1861.51,228.256 1862.08,229.512 1862.64,230.979 1863.21,229.799 1863.78,229.891 1864.35,231.153 1864.92,231.169 1865.49,233.268 1866.05,232.17 1866.62,232.184 1867.19,235.152 1867.76,234.129 1868.33,234.081 1868.9,234.925 1869.46,234.504 1870.03,232.249 1870.6,233.234 1871.17,231.091 1871.74,229.041 1872.31,230.185 1872.87,228.14 1873.44,227.353 1874.01,229.908 1874.58,228.974 1875.15,227.075 1875.72,226.598 1876.28,229.263 1876.85,232.338 1877.42,230.959 1877.99,229.834 1878.56,228.91 1879.13,228.076 1879.69,229.19 1880.26,228.531 1880.83,226.653 1881.4,226.829 1881.97,229.093 1882.54,229.216 1883.1,230.266 1883.67,232.624 1884.24,231.65 1884.81,231.7 1885.38,234.821 1885.95,233.769 1886.51,233.582 1887.08,233.33 1887.65,232.841 1888.22,233.562 1888.79,233.458 1889.36,231.262 1889.92,232.308 1890.49,230.047 1891.06,230.12 1891.63,231.239 1892.2,232.129 1892.77,230.924 1893.33,230.929 1893.9,228.775 1894.47,228.665 1895.04,228.805 1895.61,228.812 1896.18,230.134 1896.74,232.323 1897.31,231.17 1897.88,230.906 1898.45,229.901 1899.02,229.98 1899.59,228.069 1900.16,228.204 1900.72,226.329 1901.29,227.745 1901.86,227.998 1902.43,226.987 1903,230.4 1903.57,234.581 1904.13,234.196 1904.7,234.116 1905.27,236.804 1905.84,237.276 1906.41,238.553 1906.98,238.011 1907.54,236.45 1908.11,235.081 1908.68,235.698 1909.25,231.874 1909.82,235.747 1910.39,234.443 1910.95,232.885 1911.52,231.615 1912.09,226.52 1912.66,224.719 1913.23,225.856 1913.8,225.133 1914.36,226.3 1914.93,224.537 1915.5,221.895 1916.07,220.538 1916.64,220.221 1917.21,219.962 1917.77,220.683 1918.34,222.397 1918.91,220.985 1919.48,224.811 1920.05,226.148 1920.62,228.683 1921.18,228.876 1921.75,225.957 1922.32,230.316 1922.89,230.277 1923.46,229.298 1924.03,228.288 1924.59,228.475 1925.16,228.365 1925.73,229.652 1926.3,230.855 1926.87,231.851 1927.44,232.848 1928,229.874 1928.57,230.003 1929.14,231.122 1929.71,228.99 1930.28,228.049 1930.85,226.264 1931.41,226.468 1931.98,224.746 1932.55,227.309 1933.12,231.58 1933.69,230.692 1934.26,230.553 1934.82,231.784 1935.39,229.68 1935.96,232.88 1936.53,233.682 1937.1,232.473 1937.67,232.357 1938.23,232.266 1938.8,230.125 1939.37,230.227 1939.94,231.379 1940.51,231.431 1941.08,230.649 1941.64,229.524 1942.21,230.693 1942.78,231.669 1943.35,230.55 1943.92,231.785 1944.49,231.563 1945.05,230.448 1945.62,230.366 1946.19,230.374 1946.76,233.354 1947.33,235.074 1947.9,230.539 1948.46,229.447 1949.03,229.527 1949.6,231.695 1950.17,231.709 1950.74,228.685 1951.31,227.79 1951.87,227.936 1952.44,228.095 1953.01,229.229 1953.58,230.502 1954.15,230.535 1954.72,232.486 1955.28,231.215 1955.85,230.195 1956.42,231.403 1956.99,230.321 1957.56,230.377 1958.13,229.369 1958.69,230.235 1959.26,229.137 1959.83,228.279 1960.4,228.285 1960.97,227.322 1961.54,226.658 1962.1,227.785 1962.67,226.889 1963.24,231.385 1963.81,233.411 1964.38,234.147 1964.95,234.915 1965.51,234.758 1966.08,233.315 1966.65,231.132 1967.22,231.059 1967.79,231.779 1968.36,230.34 1968.92,228.311 1969.49,227.491 1970.06,227.559 1970.63,226.633 1971.2,225.648 1971.77,226.065 1972.34,226.488 1972.9,229.012 1973.47,228.168 1974.04,228.114 1974.61,227.203 1975.18,227.3 1975.75,227.449 1976.31,226.64 1976.88,227.824 1977.45,230.204 1978.02,231.284 1978.59,231.142 1979.16,232.056 1979.72,234.257 1980.29,234.913 1980.86,234.672 1981.43,236.656 1982,238.105 1982.57,235.397 1983.13,233.978 1983.7,234.728 1984.27,233.356 1984.84,233.146 1985.41,235.116 1985.98,234.759 1986.54,236.429 1987.11,234.882 1987.68,235.355 1988.25,235.861 1988.82,233.233 1989.39,233.141 1989.95,230.921 1990.52,229.886 1991.09,229.933 1991.66,229.775 1992.23,230.66 1992.8,232.692 1993.36,233.514 1993.93,231.124 1994.5,229.979 1995.07,230.008 1995.64,230.987 1996.21,231.887 1996.77,231.668 1997.34,231.581 1997.91,233.177 1998.48,231.825 1999.05,230.367 1999.62,228.45 2000.18,227.332 2000.75,228.171 2001.32,229.088 2001.89,230.174 2002.46,232.082 2003.03,229.704 2003.59,229.38 2004.16,230.498 2004.73,233.434 2005.3,233.02 2005.87,234.609 2006.44,234.173 2007,235.78 2007.57,234.413 2008.14,233.886 2008.71,233.431 2009.28,234.974 2009.85,234.43 2010.41,232.979 2010.98,233.585 2011.55,232.036 2012.12,231.701 2012.69,230.245 2013.26,225.956 2013.82,228.022 2014.39,226.686 2014.96,224.674 2015.53,223.98 2016.1,225.32 2016.67,225.417 2017.23,222.393 2017.8,222.823 2018.37,222.185 2018.94,223.785 2019.51,224.059 2020.08,224.413 2020.64,226.725 2021.21,227.788 2021.78,228.838 2022.35,229.859 2022.92,229.83 2023.49,228.544 2024.05,228.5 2024.62,227.264 2025.19,227.346 2025.76,228.4 2026.33,228.349 2026.9,228.391 2027.46,228.401 2028.03,227.234 2028.6,227.169 2029.17,228.275 2029.74,227.395 2030.31,228.568 2030.87,229.454 2031.44,230.543 2032.01,229.433 2032.58,232.416 2033.15,230.461 2033.72,231.561 2034.28,231.416 2034.85,230.991 2035.42,230.86 2035.99,231.57 2036.56,232.461 2037.13,231.078 2037.69,230.806 2038.26,229.708 2038.83,229.697 2039.4,229.537 2039.97,229.377 2040.54,228.308 2041.11,226.289 2041.67,226.396 2042.24,226.623 2042.81,227.812 2043.38,226.738 2043.95,228.838 2044.52,230.765 2045.08,232.967 2045.65,231.742 2046.22,231.501 2046.79,230.292 2047.36,228.308 2047.93,227.562 2048.49,227.69 2049.06,226.776 2049.63,227.916 2050.2,227.13 2050.77,225.305 2051.34,226.893 2051.9,228.267 2052.47,227.361 2053.04,227.522 2053.61,229.822 2054.18,226.584 2054.75,224.65 2055.31,224.945 2055.88,224.374 2056.45,223.761 2057.02,227.311 2057.59,227.425 2058.16,227.533 2058.72,227.721 2059.29,230.942 2059.86,229.744 2060.43,230.54 2061,230.55 2061.57,232.397 2062.13,232.35 2062.7,232.16 2063.27,231.031 2063.84,229.867 2064.41,228.885 2064.98,228.957 2065.54,229.922 2066.11,229.895 2066.68,231.799 2067.25,229.411 2067.82,231.612 2068.39,231.493 2068.95,231.47 2069.52,232.438 2070.09,231.239 2070.66,229.928 2071.23,230.878 2071.8,231.659 2072.36,232.73 2072.93,232.578 2073.5,232.334 2074.07,229.297 2074.64,230.444 2075.21,231.682 2075.77,229.391 2076.34,229.401 2076.91,227.419 2077.48,227.687 2078.05,228.752 2078.62,227.853 2079.18,228.202 2079.75,227.229 2080.32,227.289 2080.89,228.362 2081.46,229.531 2082.03,228.639 2082.59,227.738 2083.16,227.536 2083.73,225.606 2084.3,227.046 2084.87,228.25 2085.44,228.412 2086,227.481 2086.57,227.781 2087.14,228.723 2087.71,229.901 2088.28,230.041 2088.85,229.18 2089.41,229.403 2089.98,229.711 2090.55,230.675 2091.12,230.734 2091.69,229.856 2092.26,230.003 2092.82,230.99 2093.39,230.929 2093.96,232.878 2094.53,232.727 2095.1,233.569 2095.67,231.253 2096.23,230.321 2096.8,229.296 2097.37,229.407 2097.94,230.604 2098.51,230.547 2099.08,230.523 2099.64,230.44 2100.21,230.389 2100.78,230.256 2101.35,228.276 2101.92,227.263 2102.49,228.548 2103.05,228.692 2103.62,228.79 2104.19,227.892 2104.76,227.789 2105.33,229 2105.9,231.001 2106.46,229.797 2107.03,231.085 2107.6,232.162 2108.17,230.926 2108.74,229.806 2109.31,226.922 2109.87,228.003 2110.44,229.159 2111.01,227.086 2111.58,227.075 2112.15,227.483 2112.72,225.734 2113.29,222.927 2113.85,223.522 2114.42,224.186 2114.99,224.54 2115.56,226.139 2116.13,226.399 2116.7,226.66 2117.26,227.737 2117.83,226.978 2118.4,227.306 2118.97,227.683 2119.54,228.987 2120.11,228.996 2120.67,228.026 2121.24,228.189 2121.81,228.427 2122.38,230.632 2122.95,229.667 2123.52,229.794 2124.08,228.864 2124.65,229.111 2125.22,229.073 2125.79,228.322 2126.36,225.368 2126.93,226.965 2127.49,227.404 2128.06,229.78 2128.63,231.876 2129.2,233.051 2129.77,231.981 2130.34,231.785 2130.9,233.984 2131.47,231.698 2132.04,231.761 2132.61,231.752 2133.18,230.874 2133.75,230.091 2134.31,230.374 2134.88,229.514 2135.45,229.586 2136.02,228.761 2136.59,227.855 2137.16,225.917 2137.72,229.387 2138.29,230.343 2138.86,229.518 2139.43,231.703 2140,232.47 2140.57,232.335 2141.13,232.24 2141.7,231.189 2142.27,231.999 2142.84,232.923 2143.41,232.746 2143.98,232.414 2144.54,233.158 2145.11,233.118 2145.68,232.812 2146.25,232.719 2146.82,232.154 2147.39,232.748 2147.95,235.708 2148.52,234.449 2149.09,233.303 2149.66,232.88 2150.23,232.573 2150.8,232.338 2151.36,232.323 2151.93,231.155 2152.5,231.892 2153.07,233.572 2153.64,234.232 2154.21,231.963 2154.77,232.087 2155.34,234.238 2155.91,233.839 2156.48,233.745 2157.05,233.285 2157.62,235.055 2158.18,233.611 2158.75,232.39 2159.32,231.022 2159.89,231.743 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip190)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip190)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip190)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip190)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.034 ± 0.021\n  with uncertainty of ± 0.0019353737115083188\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01912 ± (0.00215363, 0.00205456) (MC)\n  95% confidence interval: [-4.0232, -4.01496] (MC)\n  linear error propagation: -4.01916 ± 0.00208771\n  |δ_y| = |0.00125789| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.019119293165016, val_l = 0.00407631877179071, val_u = 0.004164236378766617)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip220\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip220)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip221\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip220)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip222\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1146.26 2211.02,1146.26 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,981.197 2211.02,981.197 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,816.133 2211.02,816.133 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,651.07 2211.02,651.07 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,486.006 2211.02,486.006 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,320.942 2211.02,320.942 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1146.26 365.751,1146.26 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,981.197 365.751,981.197 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,816.133 365.751,816.133 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,651.07 365.751,651.07 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,486.006 365.751,486.006 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,320.942 365.751,320.942 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M298.909 1132.06 Q295.298 1132.06 293.469 1135.62 Q291.664 1139.17 291.664 1146.3 Q291.664 1153.4 293.469 1156.97 Q295.298 1160.51 298.909 1160.51 Q302.543 1160.51 304.349 1156.97 Q306.177 1153.4 306.177 1146.3 Q306.177 1139.17 304.349 1135.62 Q302.543 1132.06 298.909 1132.06 M298.909 1128.36 Q304.719 1128.36 307.775 1132.96 Q310.853 1137.55 310.853 1146.3 Q310.853 1155.02 307.775 1159.63 Q304.719 1164.21 298.909 1164.21 Q293.099 1164.21 290.02 1159.63 Q286.964 1155.02 286.964 1146.3 Q286.964 1137.55 290.02 1132.96 Q293.099 1128.36 298.909 1128.36 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M259.557 994.542 L267.196 994.542 L267.196 968.176 L258.886 969.843 L258.886 965.584 L267.15 963.917 L271.826 963.917 L271.826 994.542 L279.465 994.542 L279.465 998.477 L259.557 998.477 L259.557 994.542 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 966.996 Q295.298 966.996 293.469 970.56 Q291.664 974.102 291.664 981.232 Q291.664 988.338 293.469 991.903 Q295.298 995.445 298.909 995.445 Q302.543 995.445 304.349 991.903 Q306.177 988.338 306.177 981.232 Q306.177 974.102 304.349 970.56 Q302.543 966.996 298.909 966.996 M298.909 963.292 Q304.719 963.292 307.775 967.898 Q310.853 972.482 310.853 981.232 Q310.853 989.959 307.775 994.565 Q304.719 999.148 298.909 999.148 Q293.099 999.148 290.02 994.565 Q286.964 989.959 286.964 981.232 Q286.964 972.482 290.02 967.898 Q293.099 963.292 298.909 963.292 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M262.775 829.478 L279.094 829.478 L279.094 833.413 L257.15 833.413 L257.15 829.478 Q259.812 826.724 264.395 822.094 Q269.002 817.441 270.182 816.099 Q272.428 813.575 273.307 811.839 Q274.21 810.08 274.21 808.39 Q274.21 805.636 272.266 803.9 Q270.344 802.164 267.242 802.164 Q265.043 802.164 262.59 802.927 Q260.159 803.691 257.381 805.242 L257.381 800.52 Q260.205 799.386 262.659 798.807 Q265.113 798.228 267.15 798.228 Q272.52 798.228 275.715 800.914 Q278.909 803.599 278.909 808.089 Q278.909 810.219 278.099 812.14 Q277.312 814.038 275.205 816.631 Q274.627 817.302 271.525 820.52 Q268.423 823.714 262.775 829.478 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 801.932 Q295.298 801.932 293.469 805.497 Q291.664 809.038 291.664 816.168 Q291.664 823.275 293.469 826.839 Q295.298 830.381 298.909 830.381 Q302.543 830.381 304.349 826.839 Q306.177 823.275 306.177 816.168 Q306.177 809.038 304.349 805.497 Q302.543 801.932 298.909 801.932 M298.909 798.228 Q304.719 798.228 307.775 802.835 Q310.853 807.418 310.853 816.168 Q310.853 824.895 307.775 829.501 Q304.719 834.085 298.909 834.085 Q293.099 834.085 290.02 829.501 Q286.964 824.895 286.964 816.168 Q286.964 807.418 290.02 802.835 Q293.099 798.228 298.909 798.228 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M272.914 649.716 Q276.27 650.433 278.145 652.702 Q280.043 654.97 280.043 658.303 Q280.043 663.419 276.525 666.22 Q273.006 669.021 266.525 669.021 Q264.349 669.021 262.034 668.581 Q259.742 668.165 257.289 667.308 L257.289 662.794 Q259.233 663.928 261.548 664.507 Q263.863 665.086 266.386 665.086 Q270.784 665.086 273.076 663.35 Q275.39 661.614 275.39 658.303 Q275.39 655.248 273.238 653.535 Q271.108 651.799 267.289 651.799 L263.261 651.799 L263.261 647.956 L267.474 647.956 Q270.923 647.956 272.752 646.591 Q274.58 645.202 274.58 642.609 Q274.58 639.947 272.682 638.535 Q270.807 637.1 267.289 637.1 Q265.367 637.1 263.168 637.517 Q260.969 637.933 258.33 638.813 L258.33 634.646 Q260.992 633.905 263.307 633.535 Q265.645 633.165 267.705 633.165 Q273.029 633.165 276.131 635.595 Q279.233 638.003 279.233 642.123 Q279.233 644.993 277.59 646.984 Q275.946 648.952 272.914 649.716 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 636.868 Q295.298 636.868 293.469 640.433 Q291.664 643.975 291.664 651.104 Q291.664 658.211 293.469 661.776 Q295.298 665.317 298.909 665.317 Q302.543 665.317 304.349 661.776 Q306.177 658.211 306.177 651.104 Q306.177 643.975 304.349 640.433 Q302.543 636.868 298.909 636.868 M298.909 633.165 Q304.719 633.165 307.775 637.771 Q310.853 642.354 310.853 651.104 Q310.853 659.831 307.775 664.438 Q304.719 669.021 298.909 669.021 Q293.099 669.021 290.02 664.438 Q286.964 659.831 286.964 651.104 Q286.964 642.354 290.02 637.771 Q293.099 633.165 298.909 633.165 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M271.594 472.8 L259.789 491.249 L271.594 491.249 L271.594 472.8 M270.367 468.726 L276.247 468.726 L276.247 491.249 L281.177 491.249 L281.177 495.138 L276.247 495.138 L276.247 503.286 L271.594 503.286 L271.594 495.138 L255.992 495.138 L255.992 490.624 L270.367 468.726 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 471.805 Q295.298 471.805 293.469 475.37 Q291.664 478.911 291.664 486.041 Q291.664 493.147 293.469 496.712 Q295.298 500.254 298.909 500.254 Q302.543 500.254 304.349 496.712 Q306.177 493.147 306.177 486.041 Q306.177 478.911 304.349 475.37 Q302.543 471.805 298.909 471.805 M298.909 468.101 Q304.719 468.101 307.775 472.708 Q310.853 477.291 310.853 486.041 Q310.853 494.768 307.775 499.374 Q304.719 503.957 298.909 503.957 Q293.099 503.957 290.02 499.374 Q286.964 494.768 286.964 486.041 Q286.964 477.291 290.02 472.708 Q293.099 468.101 298.909 468.101 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M258.793 303.662 L277.15 303.662 L277.15 307.598 L263.076 307.598 L263.076 316.07 Q264.094 315.723 265.113 315.56 Q266.131 315.375 267.15 315.375 Q272.937 315.375 276.316 318.547 Q279.696 321.718 279.696 327.134 Q279.696 332.713 276.224 335.815 Q272.752 338.894 266.432 338.894 Q264.256 338.894 261.988 338.523 Q259.742 338.153 257.335 337.412 L257.335 332.713 Q259.418 333.847 261.641 334.403 Q263.863 334.959 266.34 334.959 Q270.344 334.959 272.682 332.852 Q275.02 330.746 275.02 327.134 Q275.02 323.523 272.682 321.417 Q270.344 319.31 266.34 319.31 Q264.465 319.31 262.59 319.727 Q260.738 320.144 258.793 321.023 L258.793 303.662 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M298.909 306.741 Q295.298 306.741 293.469 310.306 Q291.664 313.848 291.664 320.977 Q291.664 328.084 293.469 331.648 Q295.298 335.19 298.909 335.19 Q302.543 335.19 304.349 331.648 Q306.177 328.084 306.177 320.977 Q306.177 313.848 304.349 310.306 Q302.543 306.741 298.909 306.741 M298.909 303.037 Q304.719 303.037 307.775 307.644 Q310.853 312.227 310.853 320.977 Q310.853 329.704 307.775 334.31 Q304.719 338.894 298.909 338.894 Q293.099 338.894 290.02 334.31 Q286.964 329.704 286.964 320.977 Q286.964 312.227 290.02 307.644 Q293.099 303.037 298.909 303.037 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip222)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1024.64 400.199,1040.38 400.786,929.338 401.372,833.582 401.958,743.855 402.545,659.797 403.131,582.844 403.718,512.754 404.304,450.948 404.891,486.212 405.477,427.913 406.063,376.09 406.65,328.582 407.236,285.981 407.823,318.919 408.409,346.319 408.995,369.326 409.582,335.455 410.168,305.467 410.755,328.626 411.341,304.538 411.927,283.664 412.514,266.229 413.1,251.92 413.687,239.31 414.273,228.276 414.86,219.895 415.446,244.2 416.032,267.415 416.619,289.645 417.205,287.688 417.792,330.955 418.378,350.193 418.964,348.937 419.551,367.329 420.137,384.497 420.724,385.773 421.31,402.773 421.896,418.79 422.483,433.857 423.069,461.367 423.656,475.863 424.242,490.558 424.829,505.676 425.415,519.923 426.001,523.453 426.588,537.358 427.174,551.771 427.761,567.075 428.347,572.917 428.933,603.824 429.52,609.171 430.106,622.448 430.693,636.3 431.279,649.196 431.865,655.523 432.452,674.1 433.038,686.859 433.625,699.408 434.211,711.517 434.798,728.484 435.384,744.45 435.97,749.982 436.557,756.511 437.143,771.589 437.73,782.998 438.316,797.793 438.902,824.186 439.489,829.425 440.075,839.036 440.662,848.296 441.248,864.767 441.835,880.755 442.421,888.874 443.007,893.692 443.594,915.355 444.18,929.414 444.767,939.826 445.353,946.494 445.939,959.664 446.526,963.199 447.112,970.057 447.699,981.48 448.285,987.681 448.871,996.683 449.458,1002.38 450.044,1011.02 450.631,1014.29 451.217,1022.75 451.804,1025.96 452.39,1029.37 452.976,1035.3 453.563,1043.48 454.149,1046.5 454.736,1058.69 455.322,1067.97 455.908,1070.77 456.495,1073.15 457.081,1080.4 457.668,1082.47 458.254,1087.12 458.84,1095.89 459.427,1099.9 460.013,1104.09 460.6,1108.14 461.186,1110.42 461.773,1114.64 462.359,1122.64 462.945,1124.51 463.532,1130.34 464.118,1136 464.705,1142.89 465.291,1146.12 465.877,1147.31 466.464,1148.89 467.05,1151.94 467.637,1153.12 468.223,1156.46 468.809,1157.75 469.396,1163.98 469.982,1165.12 470.569,1168.11 471.155,1171.22 471.742,1175.4 472.328,1179.71 472.914,1180.2 473.501,1180.95 474.087,1181.24 474.674,1182.19 475.26,1182.89 475.846,1190.41 476.433,1191.29 477.019,1194.99 477.606,1196.87 478.192,1200.45 478.778,1200.61 479.365,1202.24 479.951,1205.51 480.538,1205.7 481.124,1208.99 481.711,1207.23 482.297,1208.61 482.883,1210.32 483.47,1213.55 484.056,1213.68 484.643,1213.83 485.229,1213.68 485.815,1212.38 486.402,1217.35 486.988,1215.86 487.575,1216.08 488.161,1217.45 488.748,1223.16 489.334,1220.08 489.92,1224.5 490.507,1224.41 491.093,1227.26 491.68,1227.2 492.266,1226.96 492.852,1226.89 493.439,1226.64 494.025,1226.46 494.612,1229.1 495.198,1228.83 495.784,1230.05 496.371,1232.59 496.957,1233.57 497.544,1233.03 498.13,1235.71 498.717,1235.05 499.303,1234.73 499.889,1232.99 500.476,1232.99 501.062,1234.31 501.649,1235.16 502.235,1236.06 502.821,1235.98 503.408,1237 503.994,1239.13 504.581,1237.23 505.167,1236.73 505.753,1235.01 506.34,1237.69 506.926,1237.37 507.513,1235.44 508.099,1235.17 508.686,1234.76 509.272,1237.07 509.858,1235.62 510.445,1236.66 511.031,1236.3 511.618,1236.26 512.204,1238.68 512.79,1242.81 513.377,1242.29 513.963,1243.23 514.55,1245.12 515.136,1245.64 515.722,1244.84 516.309,1244.18 516.895,1246.13 517.482,1241.05 518.068,1245.87 518.655,1245.01 519.241,1246.02 519.827,1246.55 520.414,1245.6 521,1246.29 521.587,1245.35 522.173,1247.21 522.759,1249.09 523.346,1250.53 523.932,1249.58 524.519,1247.09 525.105,1247.7 525.691,1246.85 526.278,1243.39 526.864,1242.84 527.451,1240.68 528.037,1239.94 528.624,1243.63 529.21,1242.89 529.796,1243.74 530.383,1238.92 530.969,1237.12 531.556,1238.17 532.142,1240.45 532.728,1238.56 533.315,1237.97 533.901,1237.52 534.488,1237.24 535.074,1236.81 535.661,1236.6 536.247,1236.33 536.833,1232.04 537.42,1234.54 538.006,1237.02 538.593,1239.27 539.179,1238.87 539.765,1240.97 540.352,1240.49 540.938,1240.07 541.525,1238.12 542.111,1234.97 542.697,1235.99 543.284,1235.84 543.87,1237.14 544.457,1239.3 545.043,1237.41 545.63,1236.87 546.216,1236.61 546.802,1237.73 547.389,1237.37 547.975,1235.69 548.562,1235.44 549.148,1235.15 549.734,1234.38 550.321,1232.83 550.907,1232.33 551.494,1229.67 552.08,1228.15 552.666,1228.14 553.253,1230.63 553.839,1233.3 554.426,1233.08 555.012,1233.02 555.599,1234.31 556.185,1235.2 556.771,1236.22 557.358,1231.82 557.944,1232.98 558.531,1228.8 559.117,1227.54 559.703,1225.96 560.29,1227.66 560.876,1227.65 561.463,1230.5 562.049,1231.7 562.635,1231.58 563.222,1229.83 563.808,1229.68 564.395,1229.33 564.981,1231.94 565.568,1231.61 566.154,1230 566.74,1229.87 567.327,1232.38 567.913,1230.84 568.5,1230.64 569.086,1229.03 569.672,1231.46 570.259,1231.29 570.845,1231.14 571.432,1232.15 572.018,1231.77 572.605,1232.8 573.191,1231.2 573.777,1230.89 574.364,1233.42 574.95,1235.62 575.537,1235.28 576.123,1236.26 576.709,1234.5 577.296,1235.26 577.882,1234.67 578.469,1234.69 579.055,1235.48 579.641,1234.94 580.228,1235.96 580.814,1237.45 581.401,1235.41 581.987,1233.52 582.574,1236.73 583.16,1237.67 583.746,1234.35 584.333,1235.02 584.919,1235.9 585.506,1235.13 586.092,1233.04 586.678,1233.02 587.265,1232.53 587.851,1232.59 588.438,1228.17 589.024,1229.2 589.61,1231.76 590.197,1232.87 590.783,1235.12 591.37,1235.78 591.956,1233.79 592.543,1231.97 593.129,1231.22 593.715,1230.69 594.302,1231.82 594.888,1228.85 595.475,1228.82 596.061,1227.18 596.647,1224.32 597.234,1224.28 597.82,1227.08 598.407,1233.46 598.993,1234.03 599.579,1231.91 600.166,1234.13 600.752,1233.45 601.339,1232.84 601.925,1232.13 602.512,1232.96 603.098,1229.79 603.684,1229.5 604.271,1227.81 604.857,1227.58 605.444,1228.25 606.03,1228.08 606.616,1227.72 607.203,1227.26 607.789,1229.55 608.376,1229.36 608.962,1230.46 609.548,1231.32 610.135,1229.75 610.721,1227.99 611.308,1227.82 611.894,1226.42 612.481,1227.86 613.067,1228.98 613.653,1231.54 614.24,1232.34 614.826,1227.53 615.413,1225.93 615.999,1225.99 616.585,1225.94 617.172,1226.96 617.758,1227.01 618.345,1226.69 618.931,1226.88 619.518,1225.26 620.104,1227.88 620.69,1229.05 621.277,1231.4 621.863,1229.74 622.45,1229.22 623.036,1233.05 623.622,1233.82 624.209,1235.77 624.795,1236.35 625.382,1235.65 625.968,1235.21 626.554,1234.43 627.141,1233.74 627.727,1233.52 628.314,1232.86 628.9,1229.63 629.487,1229.24 630.073,1230.32 630.659,1233.79 631.246,1234.33 631.832,1233.79 632.419,1237.38 633.005,1235.27 633.591,1233.16 634.178,1235.13 634.764,1237.32 635.351,1235.18 635.937,1235.73 636.523,1233.92 637.11,1234.53 637.696,1235.1 638.283,1234.42 638.869,1235.17 639.456,1235.67 640.042,1234.98 640.628,1235.5 641.215,1234.62 641.801,1231.42 642.388,1230.64 642.974,1229 643.56,1224.32 644.147,1223.84 644.733,1225.12 645.32,1224.76 645.906,1225.79 646.492,1225.55 647.079,1223.66 647.665,1223.43 648.252,1221.78 648.838,1220.4 649.425,1222.89 650.011,1224.05 650.597,1222.59 651.184,1221.11 651.77,1221.46 652.357,1221.56 652.943,1223.09 653.529,1222.69 654.116,1224.18 654.702,1225.19 655.289,1223.44 655.875,1219.27 656.462,1219.49 657.048,1220.96 657.634,1220.9 658.221,1221.93 658.807,1221.89 659.394,1221.7 659.98,1218.98 660.566,1220.15 661.153,1226.75 661.739,1226.39 662.326,1226.07 662.912,1227.12 663.498,1225.37 664.085,1221.24 664.671,1220.13 665.258,1220.16 665.844,1218.48 666.431,1219.78 667.017,1218.49 667.603,1218.66 668.19,1221.34 668.776,1221.28 669.363,1221.41 669.949,1221.48 670.535,1222.8 671.122,1223.97 671.708,1222.13 672.295,1220.67 672.881,1219.28 673.467,1222.06 674.054,1223.07 674.64,1224.02 675.227,1219.44 675.813,1219.49 676.4,1220.53 676.986,1221.97 677.572,1222.97 678.159,1222.7 678.745,1221.13 679.332,1222.66 679.918,1225.11 680.504,1224.9 681.091,1224.67 681.677,1224.52 682.264,1224.07 682.85,1223.77 683.436,1223.43 684.023,1223.05 684.609,1221.56 685.196,1222.71 685.782,1218.35 686.369,1219.63 686.955,1219.99 687.541,1217.14 688.128,1218.6 688.714,1218.39 689.301,1221.14 689.887,1218.17 690.473,1219.29 691.06,1218.24 691.646,1218.02 692.233,1219.43 692.819,1219.64 693.405,1218.1 693.992,1218.11 694.578,1219.36 695.165,1220.5 695.751,1221.6 696.338,1219.83 696.924,1219.57 697.51,1218.33 698.097,1223.78 698.683,1223.46 699.27,1223.43 699.856,1224.85 700.442,1224.66 701.029,1221.65 701.615,1220.06 702.202,1221.54 702.788,1218.45 703.375,1216.9 703.961,1218.22 704.547,1218.26 705.134,1216.66 705.72,1214.19 706.307,1214.36 706.893,1213.18 707.479,1215.11 708.066,1213.97 708.652,1212.94 709.239,1213.37 709.825,1212.18 710.411,1213.99 710.998,1207.24 711.584,1206.45 712.171,1205.57 712.757,1206.06 713.344,1206.65 713.93,1209.98 714.516,1210.78 715.103,1213.83 715.689,1216.73 716.276,1218.2 716.862,1218.27 717.448,1220.9 718.035,1222.09 718.621,1223.3 719.208,1223.13 719.794,1223.89 720.38,1223.46 720.967,1218.97 721.553,1220.31 722.14,1219.14 722.726,1220.22 723.313,1217.1 723.899,1217.1 724.485,1217.07 725.072,1215.73 725.658,1219.92 726.245,1222.23 726.831,1226.06 727.417,1227.14 728.004,1226.79 728.59,1226.27 729.177,1225.54 729.763,1225.21 730.349,1223.32 730.936,1222.92 731.522,1222.55 732.109,1220.85 732.695,1219.36 733.282,1215.12 733.868,1213.96 734.454,1215.7 735.041,1216.97 735.627,1216.8 736.214,1218.34 736.8,1219.59 737.386,1220.88 737.973,1222.05 738.559,1218.98 739.146,1220.4 739.732,1223.02 740.318,1221.28 740.905,1218.4 741.491,1216.95 742.078,1219.69 742.664,1220.79 743.251,1219.34 743.837,1219.21 744.423,1221.76 745.01,1220.2 745.596,1219.94 746.183,1218.37 746.769,1220.89 747.355,1221.79 747.942,1221.73 748.528,1221.39 749.115,1222.51 749.701,1219.7 750.288,1216.68 750.874,1219.28 751.46,1218.98 752.047,1218.85 752.633,1218.87 753.22,1221.63 753.806,1221.4 754.392,1225.19 754.979,1220.95 755.565,1219.28 756.152,1219.09 756.738,1220.15 757.324,1217.27 757.911,1215.85 758.497,1215.44 759.084,1215.6 759.67,1215.57 760.257,1216.95 760.843,1218.53 761.429,1217.13 762.016,1217.26 762.602,1218.61 763.189,1221.1 763.775,1222.22 764.361,1221.87 764.948,1220.02 765.534,1218.35 766.121,1216.93 766.707,1212.73 767.293,1212.71 767.88,1214.08 768.466,1212.92 769.053,1212.99 769.639,1210.54 770.226,1212.42 770.812,1210.06 771.398,1210.22 771.985,1211.85 772.571,1209.59 773.158,1208.65 773.744,1209.26 774.33,1207.88 774.917,1209.63 775.503,1208.65 776.09,1207.77 776.676,1205.56 777.262,1207.45 777.849,1206.58 778.435,1207.34 779.022,1206.47 779.608,1209.74 780.195,1211.35 780.781,1214.29 781.367,1210.62 781.954,1210.76 782.54,1211.08 783.127,1211.44 783.713,1214.45 784.299,1214.6 784.886,1216.02 785.472,1215.84 786.059,1214.38 786.645,1214.51 787.232,1214.77 787.818,1215.99 788.404,1214.79 788.991,1216.14 789.577,1217.56 790.164,1214.93 790.75,1216.27 791.336,1218.93 791.923,1217.09 792.509,1215.68 793.096,1214.49 793.682,1217.28 794.268,1215.71 794.855,1215.65 795.441,1216.9 796.028,1216.79 796.614,1214.08 797.201,1213.05 797.787,1212.11 798.373,1213.52 798.96,1213.55 799.546,1213.85 800.133,1212.41 800.719,1215.22 801.305,1215.43 801.892,1212.67 802.478,1212.71 803.065,1215.52 803.651,1215.34 804.237,1214.17 804.824,1212.77 805.41,1212.81 805.997,1214.4 806.583,1215.7 807.17,1217.17 807.756,1214.45 808.342,1217.28 808.929,1213.23 809.515,1214.93 810.102,1219.09 810.688,1218.76 811.274,1216.89 811.861,1218.1 812.447,1219.5 813.034,1217.95 813.62,1217.79 814.206,1216.42 814.793,1216.34 815.379,1215.06 815.966,1215.12 816.552,1215.13 817.139,1215.22 817.725,1215.12 818.311,1216.29 818.898,1213.39 819.484,1212.04 820.071,1213.48 820.657,1210.98 821.243,1211.18 821.83,1212.56 822.416,1208.67 823.003,1209.53 823.589,1207.17 824.175,1210.39 824.762,1210.74 825.348,1212.31 825.935,1211.16 826.521,1212.67 827.108,1211.56 827.694,1211.84 828.28,1212.18 828.867,1216.31 829.453,1218.89 830.04,1218.77 830.626,1218.55 831.212,1219.84 831.799,1219.47 832.385,1216.57 832.972,1219.33 833.558,1220.45 834.145,1220.04 834.731,1218.42 835.317,1220.85 835.904,1220.56 836.49,1220.34 837.077,1221.02 837.663,1217.76 838.249,1216.28 838.836,1216.29 839.422,1214.8 840.009,1214.68 840.595,1214.73 841.181,1214.55 841.768,1215.82 842.354,1215.76 842.941,1217.04 843.527,1215.42 844.114,1219.37 844.7,1219.02 845.286,1219.95 845.873,1220.06 846.459,1221.31 847.046,1222.47 847.632,1220.52 848.218,1220.23 848.805,1221.32 849.391,1223.73 849.978,1220.69 850.564,1221.61 851.15,1224.11 851.737,1226.25 852.323,1218.74 852.91,1218.53 853.496,1218.22 854.083,1217.89 854.669,1215.1 855.255,1216.22 855.842,1218.75 856.428,1219.71 857.015,1219.25 857.601,1218.94 858.187,1222.86 858.774,1218.6 859.36,1217.19 859.947,1219.61 860.533,1219.35 861.119,1214.8 861.706,1213.39 862.292,1213.61 862.879,1215 863.465,1214.91 864.052,1214.94 864.638,1215.03 865.224,1214.49 865.811,1215.83 866.397,1215.69 866.984,1212.97 867.57,1211.89 868.156,1213.48 868.743,1213.45 869.329,1210.98 869.916,1208.57 870.502,1207.53 871.089,1208.04 871.675,1205.85 872.261,1203.51 872.848,1204.2 873.434,1203.08 874.021,1203.43 874.607,1204.01 875.193,1204.41 875.78,1206.32 876.366,1206.51 876.953,1205.61 877.539,1207.64 878.125,1208.01 878.712,1209.85 879.298,1209.99 879.885,1211.67 880.471,1213.12 881.058,1214.69 881.644,1217.2 882.23,1218.48 882.817,1218.09 883.403,1215.07 883.99,1216.63 884.576,1216.36 885.162,1216.31 885.749,1216.31 886.335,1214.94 886.922,1216.45 887.508,1216.54 888.094,1219.16 888.681,1221.9 889.267,1222.72 889.854,1225.08 890.44,1221.48 891.027,1222.44 891.613,1221.97 892.199,1221.25 892.786,1222.22 893.372,1223.14 893.959,1220.93 894.545,1220.77 895.131,1218.84 895.718,1218.64 896.304,1218.45 896.891,1215.31 897.477,1215.37 898.063,1216.58 898.65,1219.03 899.236,1221.55 899.823,1221.01 900.409,1220.93 900.996,1220.41 901.582,1221.36 902.168,1222.01 902.755,1218.84 903.341,1218.37 903.928,1218.35 904.514,1216.86 905.1,1219.43 905.687,1219.05 906.273,1217.28 906.86,1216.8 907.446,1216.73 908.032,1215.03 908.619,1215.15 909.205,1214.96 909.792,1215.02 910.378,1213.93 910.965,1212.58 911.551,1212.64 912.137,1212.72 912.724,1209.9 913.31,1212.75 913.897,1211.25 914.483,1212.57 915.069,1213.99 915.656,1212.53 916.242,1211.27 916.829,1212.78 917.415,1210.09 918.002,1207.45 918.588,1207.82 919.174,1206.53 919.761,1206.98 920.347,1207.56 920.934,1206.34 921.52,1204.1 922.106,1202.11 922.693,1205.46 923.279,1205.94 923.866,1206.32 924.452,1207.95 925.038,1209.48 925.625,1209.59 926.211,1212.26 926.798,1212.04 927.384,1213.51 927.971,1213.67 928.557,1215.12 929.143,1212.75 929.73,1212.8 930.316,1214.17 930.903,1213.95 931.489,1212.67 932.075,1214.03 932.662,1215.22 933.248,1213.79 933.835,1212.84 934.421,1214.26 935.007,1212.77 935.594,1214.32 936.18,1214.1 936.767,1215.54 937.353,1214.4 937.94,1213.02 938.526,1212.98 939.112,1213.27 939.699,1214.64 940.285,1214.73 940.872,1214.59 941.458,1217.19 942.044,1217.08 942.631,1217.16 943.217,1214.1 943.804,1214.22 944.39,1215.54 944.976,1215.23 945.563,1216.47 946.149,1210.68 946.736,1205.38 947.322,1205.61 947.909,1207.05 948.495,1208.82 949.081,1211.98 949.668,1208.18 950.254,1209.89 950.841,1211.38 951.427,1211.8 952.013,1212.11 952.6,1211.97 953.186,1217.33 953.773,1219.63 954.359,1218.07 954.945,1216.59 955.532,1217.76 956.118,1217.34 956.705,1218.21 957.291,1215.19 957.878,1215.19 958.464,1212.23 959.05,1214.82 959.637,1216.16 960.223,1215.78 960.81,1216.92 961.396,1215.21 961.982,1216.31 962.569,1217.39 963.155,1215.73 963.742,1215.7 964.328,1214.09 964.915,1215.06 965.501,1217.61 966.087,1216.17 966.674,1217.52 967.26,1217.49 967.847,1218.43 968.433,1218.3 969.019,1219.15 969.606,1219.09 970.192,1218.95 970.779,1218.68 971.365,1217.15 971.951,1216.86 972.538,1217.71 973.124,1218.9 973.711,1218.41 974.297,1218.05 974.884,1215.17 975.47,1216.37 976.056,1216.32 976.643,1217.5 977.229,1215.85 977.816,1217.08 978.402,1213.95 978.988,1216.62 979.575,1218.09 980.161,1216.5 980.748,1216.74 981.334,1219.38 981.92,1219.01 982.507,1217.25 983.093,1215.72 983.68,1218.23 984.266,1214.85 984.853,1213.35 985.439,1213.21 986.025,1217.24 986.612,1218.36 987.198,1219.27 987.785,1219.05 988.371,1218.7 988.957,1217.4 989.544,1214.41 990.13,1214.59 990.717,1217.37 991.303,1214.59 991.889,1213.21 992.476,1212.03 993.062,1210.81 993.649,1209.4 994.235,1209.59 994.822,1207.07 995.408,1208.74 995.994,1208.85 996.581,1207.7 997.167,1207.58 997.754,1207.7 998.34,1206.59 998.926,1206.84 999.513,1208.43 1000.1,1211.54 1000.69,1215.82 1001.27,1213 1001.86,1214.2 1002.44,1212.9 1003.03,1215.56 1003.62,1215.24 1004.2,1216.58 1004.79,1214.99 1005.38,1214.86 1005.96,1212.15 1006.55,1212.36 1007.14,1215.01 1007.72,1214.76 1008.31,1216.04 1008.9,1215.84 1009.48,1215.83 1010.07,1214.42 1010.65,1211.61 1011.24,1212.85 1011.83,1211.45 1012.41,1210.23 1013,1210.9 1013.59,1212.61 1014.17,1212.66 1014.76,1214.16 1015.35,1211.66 1015.93,1216.01 1016.52,1214.61 1017.11,1215.69 1017.69,1215.77 1018.28,1215.63 1018.86,1217.11 1019.45,1215.55 1020.04,1215.44 1020.62,1215.27 1021.21,1216.48 1021.8,1217.71 1022.38,1220.62 1022.97,1217.53 1023.56,1219.81 1024.14,1219.47 1024.73,1215.08 1025.32,1215.15 1025.9,1213.75 1026.49,1212.26 1027.07,1210.78 1027.66,1213.46 1028.25,1213.46 1028.83,1210.74 1029.42,1213.68 1030.01,1212.64 1030.59,1212.55 1031.18,1213.98 1031.77,1214.2 1032.35,1211.66 1032.94,1211.65 1033.52,1211.81 1034.11,1214.24 1034.7,1212.77 1035.28,1211.51 1035.87,1212.63 1036.46,1212.61 1037.04,1212.59 1037.63,1211.01 1038.22,1212.77 1038.8,1214.06 1039.39,1215.33 1039.98,1216.63 1040.56,1215 1041.15,1214.97 1041.73,1216.59 1042.32,1212.35 1042.91,1212.4 1043.49,1215.14 1044.08,1214.86 1044.67,1213.24 1045.25,1216.07 1045.84,1217.3 1046.43,1219.9 1047.01,1216.81 1047.6,1216.67 1048.19,1218.88 1048.77,1219.94 1049.36,1220.96 1049.94,1219.22 1050.53,1216.04 1051.12,1215.98 1051.7,1212.94 1052.29,1214.11 1052.88,1212.82 1053.46,1210.18 1054.05,1213.13 1054.64,1214.45 1055.22,1211.58 1055.81,1214.68 1056.39,1215.85 1056.98,1212.89 1057.57,1210.43 1058.15,1211.86 1058.74,1213.39 1059.33,1217.14 1059.91,1216.81 1060.5,1216.51 1061.09,1216.38 1061.67,1216.36 1062.26,1214.91 1062.85,1216.17 1063.43,1217.63 1064.02,1215.83 1064.6,1215.67 1065.19,1214.26 1065.78,1214.19 1066.36,1213.99 1066.95,1212.41 1067.54,1211.07 1068.12,1212.41 1068.71,1212.44 1069.3,1211.29 1069.88,1211.33 1070.47,1211.43 1071.06,1211.56 1071.64,1211.81 1072.23,1209.17 1072.81,1209.1 1073.4,1210.67 1073.99,1210.94 1074.57,1208.32 1075.16,1211.32 1075.75,1213.95 1076.33,1213.97 1076.92,1212.5 1077.51,1213.66 1078.09,1213.37 1078.68,1215 1079.26,1216.27 1079.85,1216.23 1080.44,1217.32 1081.02,1218.54 1081.61,1216.84 1082.2,1216.88 1082.78,1219.27 1083.37,1217.54 1083.96,1216.07 1084.54,1215.85 1085.13,1214.18 1085.72,1216.76 1086.3,1216.57 1086.89,1217.93 1087.47,1215.27 1088.06,1215.05 1088.65,1216.35 1089.23,1216.18 1089.82,1216.09 1090.41,1215.03 1090.99,1214.87 1091.58,1214.91 1092.17,1213.48 1092.75,1215.97 1093.34,1213.14 1093.93,1214.3 1094.51,1213.2 1095.1,1213.19 1095.68,1211.71 1096.27,1213.11 1096.86,1213.15 1097.44,1214.58 1098.03,1213.16 1098.62,1213.14 1099.2,1214.55 1099.79,1215.54 1100.38,1216.75 1100.96,1216.62 1101.55,1216.51 1102.14,1215.04 1102.72,1214.89 1103.31,1213.73 1103.89,1216.62 1104.48,1214.99 1105.07,1213.48 1105.65,1214.51 1106.24,1214.43 1106.83,1214.14 1107.41,1210.02 1108,1209.09 1108.59,1210.83 1109.17,1209.5 1109.76,1207.27 1110.34,1207.66 1110.93,1209.08 1111.52,1210.44 1112.1,1210.6 1112.69,1210.79 1113.28,1215.02 1113.86,1216.25 1114.45,1217.43 1115.04,1217.08 1115.62,1219.59 1116.21,1218.13 1116.8,1219.07 1117.38,1218.38 1117.97,1215.42 1118.55,1211.18 1119.14,1216.56 1119.73,1220.45 1120.31,1217.52 1120.9,1217 1121.49,1213.1 1122.07,1211.56 1122.66,1211.96 1123.25,1212.12 1123.83,1212.19 1124.42,1209.77 1125.01,1206.95 1125.59,1207.09 1126.18,1204.69 1126.76,1210.5 1127.35,1211.81 1127.94,1214.58 1128.52,1214.61 1129.11,1216.31 1129.7,1217.51 1130.28,1217.52 1130.87,1217.46 1131.46,1214.7 1132.04,1214.58 1132.63,1213.04 1133.21,1210.78 1133.8,1211.09 1134.39,1212.53 1134.97,1212.53 1135.56,1212.74 1136.15,1211.33 1136.73,1210.19 1137.32,1210.28 1137.91,1207.81 1138.49,1209.35 1139.08,1211.18 1139.67,1211.44 1140.25,1211.54 1140.84,1211.83 1141.42,1209.38 1142.01,1212.24 1142.6,1213.47 1143.18,1216.07 1143.77,1217.14 1144.36,1218.5 1144.94,1218.2 1145.53,1219.29 1146.12,1222.95 1146.7,1222.68 1147.29,1220.71 1147.88,1218.93 1148.46,1217.27 1149.05,1214.36 1149.63,1214.35 1150.22,1214.17 1150.81,1214.2 1151.39,1212.79 1151.98,1211.39 1152.57,1208.67 1153.15,1209.01 1153.74,1208.01 1154.33,1208.15 1154.91,1209.76 1155.5,1207.3 1156.09,1208.99 1156.67,1210.75 1157.26,1210.87 1157.84,1212.38 1158.43,1211.14 1159.02,1212.44 1159.6,1205.89 1160.19,1204.83 1160.78,1204.16 1161.36,1204.84 1161.95,1205.77 1162.54,1210.15 1163.12,1206.42 1163.71,1206.73 1164.29,1204.75 1164.88,1206.48 1165.47,1201.71 1166.05,1201.94 1166.64,1202.49 1167.23,1200.15 1167.81,1201.1 1168.4,1201.5 1168.99,1199.6 1169.57,1200.34 1170.16,1199.79 1170.75,1200.52 1171.33,1202.5 1171.92,1205.58 1172.5,1208.73 1173.09,1207.89 1173.68,1209.46 1174.26,1209.44 1174.85,1208.29 1175.44,1207.37 1176.02,1209.05 1176.61,1209.09 1177.2,1208.11 1177.78,1204.21 1178.37,1204.64 1178.96,1205.2 1179.54,1205.82 1180.13,1204.83 1180.71,1207.76 1181.3,1208.29 1181.89,1210.04 1182.47,1210.6 1183.06,1215.75 1183.65,1214.32 1184.23,1214.31 1184.82,1214.38 1185.41,1216.9 1185.99,1215.29 1186.58,1211.53 1187.16,1211.51 1187.75,1212.98 1188.34,1213.25 1188.92,1214.39 1189.51,1215.89 1190.1,1214.32 1190.68,1215.69 1191.27,1215.4 1191.86,1213.57 1192.44,1214.77 1193.03,1210.66 1193.62,1206.93 1194.2,1207.28 1194.79,1205.92 1195.37,1205.08 1195.96,1204.03 1196.55,1204.41 1197.13,1207.42 1197.72,1207.73 1198.31,1209.56 1198.89,1210.02 1199.48,1210.39 1200.07,1212.02 1200.65,1212.04 1201.24,1211.75 1201.83,1210.66 1202.41,1212.2 1203,1213.21 1203.58,1214.34 1204.17,1214.52 1204.76,1212.83 1205.34,1214.2 1205.93,1218.44 1206.52,1218.4 1207.1,1219.33 1207.69,1218.9 1208.28,1217.04 1208.86,1215.53 1209.45,1213.96 1210.03,1212.62 1210.62,1214.11 1211.21,1214.07 1211.79,1216.58 1212.38,1214.01 1212.97,1212.54 1213.55,1215.32 1214.14,1213.85 1214.73,1216.34 1215.31,1216.43 1215.9,1217.58 1216.49,1218.72 1217.07,1215.63 1217.66,1215.58 1218.24,1219.54 1218.83,1217.8 1219.42,1217.22 1220,1217.08 1220.59,1215.53 1221.18,1216.83 1221.76,1216.46 1222.35,1216.19 1222.94,1217.21 1223.52,1216.78 1224.11,1215.21 1224.7,1212.55 1225.28,1212.49 1225.87,1212.12 1226.45,1213.4 1227.04,1211.92 1227.63,1212.16 1228.21,1213.54 1228.8,1214.83 1229.39,1210.41 1229.97,1210.94 1230.56,1212.41 1231.15,1212.49 1231.73,1211.17 1232.32,1211.4 1232.91,1211.42 1233.49,1211.54 1234.08,1211.81 1234.66,1210.53 1235.25,1210.84 1235.84,1209.63 1236.42,1209.79 1237.01,1209.75 1237.6,1211.03 1238.18,1209.51 1238.77,1209.37 1239.36,1209.66 1239.94,1209.96 1240.53,1211.36 1241.11,1212.72 1241.7,1211.31 1242.29,1211.54 1242.87,1213.03 1243.46,1213.3 1244.05,1213.46 1244.63,1211.99 1245.22,1210.54 1245.81,1206.57 1246.39,1205.49 1246.98,1204.58 1247.57,1205.06 1248.15,1205.21 1248.74,1204.59 1249.32,1203.84 1249.91,1206.88 1250.5,1207.17 1251.08,1206.08 1251.67,1205.29 1252.26,1206 1252.84,1208.24 1253.43,1208.47 1254.02,1208.92 1254.6,1209.12 1255.19,1209.38 1255.78,1210.61 1256.36,1209.29 1256.95,1211.92 1257.53,1215.81 1258.12,1215.64 1258.71,1218.18 1259.29,1217.83 1259.88,1219.36 1260.47,1223.23 1261.05,1221.49 1261.64,1221.19 1262.23,1220.65 1262.81,1221.37 1263.4,1220.68 1263.98,1217.55 1264.57,1219.97 1265.16,1219.48 1265.74,1217.64 1266.33,1219.81 1266.92,1223.28 1267.5,1222.57 1268.09,1224.89 1268.68,1222.76 1269.26,1219.47 1269.85,1217.69 1270.44,1218.8 1271.02,1222.55 1271.61,1220.54 1272.19,1220.4 1272.78,1221.4 1273.37,1223.51 1273.95,1224.57 1274.54,1224.04 1275.13,1223.46 1275.71,1220.26 1276.3,1219.91 1276.89,1219.04 1277.47,1215.94 1278.06,1216.92 1278.65,1216.65 1279.23,1215.05 1279.82,1214.92 1280.4,1214.99 1280.99,1220.11 1281.58,1221.3 1282.16,1218.29 1282.75,1217.97 1283.34,1212.15 1283.92,1209.48 1284.51,1206.88 1285.1,1206.93 1285.68,1207.11 1286.27,1203.3 1286.86,1205.23 1287.44,1208.21 1288.03,1208.23 1288.61,1206.93 1289.2,1207.38 1289.79,1207.59 1290.37,1205.29 1290.96,1202.76 1291.55,1202.99 1292.13,1203.67 1292.72,1202.94 1293.31,1202.09 1293.89,1200.13 1294.48,1200.86 1295.06,1201.75 1295.65,1202.51 1296.24,1200.06 1296.82,1202.06 1297.41,1204.02 1298,1204.69 1298.58,1203.86 1299.17,1205.74 1299.76,1208.73 1300.34,1210.13 1300.93,1206.08 1301.52,1205.24 1302.1,1205.71 1302.69,1206.21 1303.27,1204.02 1303.86,1204.56 1304.45,1207.67 1305.03,1204.2 1305.62,1206.12 1306.21,1209.23 1306.79,1209.36 1307.38,1208.25 1307.97,1208.55 1308.55,1207.25 1309.14,1207.57 1309.73,1210.27 1310.31,1207.73 1310.9,1210.74 1311.48,1213.45 1312.07,1216.26 1312.66,1216.18 1313.24,1217.25 1313.83,1217.19 1314.42,1218.31 1315,1217.88 1315.59,1219.17 1316.18,1220.06 1316.76,1217.27 1317.35,1215.31 1317.93,1214.96 1318.52,1218.88 1319.11,1219.97 1319.69,1219.74 1320.28,1222.45 1320.87,1216.28 1321.45,1217.41 1322.04,1214.58 1322.63,1214.62 1323.21,1214.36 1323.8,1212.82 1324.39,1213.01 1324.97,1214.36 1325.56,1215.54 1326.14,1215.43 1326.73,1213.65 1327.32,1212.2 1327.9,1212.26 1328.49,1213.56 1329.08,1213.27 1329.66,1215.94 1330.25,1216 1330.84,1218.65 1331.42,1220.98 1332.01,1219.37 1332.6,1219.07 1333.18,1218.74 1333.77,1219.95 1334.35,1218.24 1334.94,1219.12 1335.53,1217.39 1336.11,1219.76 1336.7,1223.32 1337.29,1226.88 1337.87,1222.53 1338.46,1223.43 1339.05,1222.92 1339.63,1221.28 1340.22,1220.94 1340.8,1221.9 1341.39,1221.37 1341.98,1219.63 1342.56,1219.51 1343.15,1219.14 1343.74,1218.74 1344.32,1219.81 1344.91,1216.73 1345.5,1217.54 1346.08,1215.78 1346.67,1212.97 1347.26,1217.16 1347.84,1217.16 1348.43,1218.08 1349.01,1218.02 1349.6,1216.45 1350.19,1214.42 1350.77,1213.13 1351.36,1211.76 1351.95,1213.09 1352.53,1212.87 1353.12,1214.31 1353.71,1214.41 1354.29,1213.11 1354.88,1213.24 1355.47,1209.27 1356.05,1210.66 1356.64,1210.69 1357.22,1212.26 1357.81,1210.85 1358.4,1211.91 1358.98,1212.12 1359.57,1213.55 1360.16,1212.09 1360.74,1213.45 1361.33,1213.35 1361.92,1214.69 1362.5,1213.21 1363.09,1209.26 1363.68,1209.49 1364.26,1209.24 1364.85,1208.28 1365.43,1208.61 1366.02,1209.19 1366.61,1209.6 1367.19,1209.77 1367.78,1206.05 1368.37,1205.23 1368.95,1207 1369.54,1208.7 1370.13,1208.87 1370.71,1214.37 1371.3,1211.4 1371.88,1214.43 1372.47,1214.34 1373.06,1212.76 1373.64,1211.55 1374.23,1211.68 1374.82,1211.49 1375.4,1212.86 1375.99,1214.05 1376.58,1216.77 1377.16,1216.74 1377.75,1213.95 1378.34,1213.64 1378.92,1213.81 1379.51,1212.28 1380.09,1213.5 1380.68,1213.75 1381.27,1213.55 1381.85,1214.81 1382.44,1213.5 1383.03,1213.56 1383.61,1212.18 1384.2,1214.75 1384.79,1213.46 1385.37,1213.26 1385.96,1213.48 1386.55,1210.8 1387.13,1213.54 1387.72,1211.95 1388.3,1212.16 1388.89,1213.56 1389.48,1213.57 1390.06,1214.84 1390.65,1216.09 1391.24,1217.21 1391.82,1215.39 1392.41,1213.64 1393,1212.3 1393.58,1214.75 1394.17,1216.06 1394.75,1213.02 1395.34,1214.48 1395.93,1214.18 1396.51,1213.72 1397.1,1209.38 1397.69,1211.11 1398.27,1209.82 1398.86,1211.05 1399.45,1210.83 1400.03,1209.52 1400.62,1212.08 1401.21,1209.74 1401.79,1209.77 1402.38,1208.55 1402.96,1206.01 1403.55,1205.12 1404.14,1206.61 1404.72,1202.85 1405.31,1203.45 1405.9,1203.87 1406.48,1202.98 1407.07,1204.82 1407.66,1204.04 1408.24,1207.06 1408.83,1207.75 1409.42,1206.39 1410,1206.56 1410.59,1209.76 1411.17,1209.73 1411.76,1209.87 1412.35,1209.88 1412.93,1211.38 1413.52,1210.03 1414.11,1212.73 1414.69,1213.98 1415.28,1212.54 1415.87,1213.97 1416.45,1213.98 1417.04,1211.04 1417.63,1213.9 1418.21,1213.63 1418.8,1213.62 1419.38,1212.21 1419.97,1216.45 1420.56,1216.41 1421.14,1217.38 1421.73,1219.88 1422.32,1222.39 1422.9,1222.12 1423.49,1220.39 1424.08,1219.69 1424.66,1219.65 1425.25,1217.64 1425.83,1218.73 1426.42,1215.79 1427.01,1217.11 1427.59,1214.31 1428.18,1210.1 1428.77,1208.99 1429.35,1210.75 1429.94,1211.04 1430.53,1210.97 1431.11,1209.73 1431.7,1208.78 1432.29,1210.11 1432.87,1210.37 1433.46,1211.88 1434.04,1209.23 1434.63,1208.39 1435.22,1208.72 1435.8,1208.86 1436.39,1208.95 1436.98,1210.21 1437.56,1210.25 1438.15,1210.43 1438.74,1210.62 1439.32,1209.5 1439.91,1208.53 1440.5,1211.45 1441.08,1210.39 1441.67,1210.55 1442.25,1214.5 1442.84,1214.51 1443.43,1216.13 1444.01,1214.97 1444.6,1214.99 1445.19,1214.92 1445.77,1213.6 1446.36,1213.49 1446.95,1213.58 1447.53,1213.7 1448.12,1213.87 1448.7,1210.84 1449.29,1208.36 1449.88,1212.58 1450.46,1212.88 1451.05,1213.19 1451.64,1211.59 1452.22,1212.9 1452.81,1217.18 1453.4,1219.95 1453.98,1219.6 1454.57,1219.26 1455.16,1218.91 1455.74,1218.65 1456.33,1218.46 1456.91,1218.48 1457.5,1216.67 1458.09,1213.79 1458.67,1211.24 1459.26,1212.64 1459.85,1214.21 1460.43,1213.91 1461.02,1212.51 1461.61,1211.54 1462.19,1214.4 1462.78,1216 1463.37,1216.94 1463.95,1219.65 1464.54,1220.37 1465.12,1221.2 1465.71,1221.84 1466.3,1221.31 1466.88,1219.53 1467.47,1219.27 1468.06,1219.99 1468.64,1218.55 1469.23,1216.92 1469.82,1215.46 1470.4,1215.5 1470.99,1217.9 1471.57,1219.02 1472.16,1214.46 1472.75,1214.29 1473.33,1214.22 1473.92,1216.9 1474.51,1214.11 1475.09,1211.36 1475.68,1212.64 1476.27,1212.7 1476.85,1212.8 1477.44,1211.25 1478.03,1211.4 1478.61,1212.92 1479.2,1214.56 1479.78,1213.19 1480.37,1213.14 1480.96,1213.05 1481.54,1211.59 1482.13,1211.56 1482.72,1210.37 1483.3,1208.93 1483.89,1210.77 1484.48,1212.26 1485.06,1212.12 1485.65,1212.05 1486.24,1209.18 1486.82,1207.96 1487.41,1206.84 1487.99,1207.08 1488.58,1205.87 1489.17,1204.95 1489.75,1204.29 1490.34,1204.82 1490.93,1207.81 1491.51,1206.91 1492.1,1207.21 1492.69,1209.02 1493.27,1210.38 1493.86,1210.5 1494.45,1209.34 1495.03,1210.87 1495.62,1212.44 1496.2,1209.65 1496.79,1209.64 1497.38,1209.84 1497.96,1211.49 1498.55,1212.99 1499.14,1215.66 1499.72,1215.59 1500.31,1218.25 1500.9,1211.26 1501.48,1212.85 1502.07,1212.73 1502.65,1215.37 1503.24,1213.68 1503.83,1214.81 1504.41,1214.44 1505,1215.48 1505.59,1215.4 1506.17,1216.51 1506.76,1219.04 1507.35,1218.76 1507.93,1217.23 1508.52,1217.07 1509.11,1214.05 1509.69,1212.68 1510.28,1211.34 1510.86,1208.59 1511.45,1209.96 1512.04,1208.68 1512.62,1208.81 1513.21,1209.06 1513.8,1207.92 1514.38,1208.32 1514.97,1208.53 1515.56,1208.8 1516.14,1207.67 1516.73,1210.68 1517.32,1210.76 1517.9,1213.4 1518.49,1213.19 1519.07,1210.44 1519.66,1209.32 1520.25,1211.14 1520.83,1208.86 1521.42,1209.06 1522.01,1208.23 1522.59,1207.12 1523.18,1207.16 1523.77,1207.18 1524.35,1210.22 1524.94,1210.31 1525.52,1210.2 1526.11,1214.19 1526.7,1208.53 1527.28,1207.31 1527.87,1206.35 1528.46,1209.06 1529.04,1206.59 1529.63,1205.6 1530.22,1205.75 1530.8,1206.11 1531.39,1205.17 1531.98,1206.91 1532.56,1211.63 1533.15,1213.13 1533.73,1213.03 1534.32,1210.23 1534.91,1210.49 1535.49,1209.35 1536.08,1208.3 1536.67,1208.31 1537.25,1208.55 1537.84,1210.09 1538.43,1211.78 1539.01,1211.74 1539.6,1211.86 1540.19,1211.87 1540.77,1212.04 1541.36,1210.69 1541.94,1212.35 1542.53,1216.52 1543.12,1214.93 1543.7,1216.05 1544.29,1218.51 1544.88,1218.33 1545.46,1219.61 1546.05,1219.19 1546.64,1220.28 1547.22,1220.97 1547.81,1220.33 1548.4,1219.93 1548.98,1220.58 1549.57,1220.03 1550.15,1222.06 1550.74,1220.05 1551.33,1218.34 1551.91,1216.87 1552.5,1216.73 1553.09,1215.16 1553.67,1209.54 1554.26,1209.5 1554.85,1213.6 1555.43,1214.79 1556.02,1215.99 1556.6,1217.32 1557.19,1218.55 1557.78,1215.78 1558.36,1217.03 1558.95,1216.68 1559.54,1214.87 1560.12,1217.58 1560.71,1218.56 1561.3,1215.66 1561.88,1212.69 1562.47,1216.81 1563.06,1218.08 1563.64,1215.45 1564.23,1216.86 1564.81,1216.8 1565.4,1216.49 1565.99,1216.1 1566.57,1219.85 1567.16,1217.99 1567.75,1220.41 1568.33,1221.25 1568.92,1221.71 1569.51,1215.55 1570.09,1215.14 1570.68,1214.87 1571.27,1216.05 1571.85,1210.19 1572.44,1210.28 1573.02,1209.02 1573.61,1209.29 1574.2,1206.66 1574.78,1206.69 1575.37,1213.86 1575.96,1213.74 1576.54,1213.64 1577.13,1213.5 1577.72,1214.63 1578.3,1215.78 1578.89,1214.01 1579.47,1215.44 1580.06,1215.18 1580.65,1213.76 1581.23,1213.64 1581.82,1213.69 1582.41,1209.72 1582.99,1208.62 1583.58,1208.76 1584.17,1209.04 1584.75,1205.23 1585.34,1205.48 1585.93,1205.86 1586.51,1208.74 1587.1,1207.44 1587.68,1209.02 1588.27,1209.26 1588.86,1209.44 1589.44,1209.53 1590.03,1208.34 1590.62,1210.01 1591.2,1211.56 1591.79,1211.78 1592.38,1210.26 1592.96,1208.84 1593.55,1206.39 1594.14,1209.32 1594.72,1210.63 1595.31,1210.85 1595.89,1213.65 1596.48,1213.71 1597.07,1214.96 1597.65,1216.15 1598.24,1217.38 1598.83,1218.48 1599.41,1217.03 1600,1215.59 1600.59,1213.06 1601.17,1214.47 1601.76,1211.74 1602.34,1210.44 1602.93,1210.7 1603.52,1216.3 1604.1,1212.4 1604.69,1211.11 1605.28,1213.96 1605.86,1216.55 1606.45,1215.14 1607.04,1213.77 1607.62,1210.88 1608.21,1208.23 1608.8,1208.23 1609.38,1209.96 1609.97,1207.38 1610.55,1205.19 1611.14,1204.12 1611.73,1204.89 1612.31,1208.03 1612.9,1208.27 1613.49,1209.64 1614.07,1212.23 1614.66,1213.87 1615.25,1213.98 1615.83,1214.08 1616.42,1212.99 1617.01,1214.36 1617.59,1215.74 1618.18,1214.3 1618.76,1208.97 1619.35,1208.99 1619.94,1210.46 1620.52,1209.25 1621.11,1207.83 1621.7,1209.34 1622.28,1211.14 1622.87,1212.67 1623.46,1212.68 1624.04,1212.61 1624.63,1212.51 1625.22,1211.12 1625.8,1208.37 1626.39,1208.78 1626.97,1209.06 1627.56,1211.89 1628.15,1215.91 1628.73,1215.65 1629.32,1216.8 1629.91,1216.52 1630.49,1216.26 1631.08,1217.34 1631.67,1218.55 1632.25,1218.34 1632.84,1216.56 1633.42,1215.03 1634.01,1217.89 1634.6,1216.22 1635.18,1216.31 1635.77,1215.86 1636.36,1215.57 1636.94,1217.12 1637.53,1216.65 1638.12,1217.9 1638.7,1216.11 1639.29,1218.6 1639.88,1219.67 1640.46,1216.78 1641.05,1215.09 1641.63,1214.61 1642.22,1215.98 1642.81,1214.35 1643.39,1214.21 1643.98,1213.03 1644.57,1211.54 1645.15,1211.58 1645.74,1211.58 1646.33,1211.86 1646.91,1210.4 1647.5,1210.47 1648.09,1210.7 1648.67,1211.04 1649.26,1209.89 1649.84,1210.12 1650.43,1211.48 1651.02,1211.39 1651.6,1212.76 1652.19,1210.34 1652.78,1210.35 1653.36,1210.28 1653.95,1210.16 1654.54,1210.31 1655.12,1206.19 1655.71,1206.49 1656.29,1203.9 1656.88,1209.89 1657.47,1212.6 1658.05,1211.13 1658.64,1212.68 1659.23,1211.17 1659.81,1211.36 1660.4,1212.86 1660.99,1212.96 1661.57,1211.42 1662.16,1211.39 1662.75,1211.51 1663.33,1211.13 1663.92,1212.44 1664.5,1214.99 1665.09,1216.19 1665.68,1215.95 1666.26,1214.67 1666.85,1215.7 1667.44,1222.33 1668.02,1221.69 1668.61,1221.09 1669.2,1220.77 1669.78,1218.94 1670.37,1218.45 1670.96,1220.49 1671.54,1213.44 1672.13,1217.4 1672.71,1215.87 1673.3,1215.43 1673.89,1214.18 1674.47,1215.22 1675.06,1216.35 1675.65,1214.71 1676.23,1214.43 1676.82,1211.64 1677.41,1211.76 1677.99,1211.92 1678.58,1212.18 1679.17,1212.16 1679.75,1213.4 1680.34,1214.29 1680.92,1211.68 1681.51,1214.47 1682.1,1213.09 1682.68,1210.28 1683.27,1207.88 1683.86,1206.82 1684.44,1206.94 1685.03,1207.14 1685.62,1209.89 1686.2,1207.3 1686.79,1205.93 1687.37,1207.56 1687.96,1204.04 1688.55,1207 1689.13,1207.37 1689.72,1207.56 1690.31,1207.81 1690.89,1209.22 1691.48,1212.3 1692.07,1210.97 1692.65,1209.82 1693.24,1209.89 1693.83,1207.24 1694.41,1206.06 1695,1207.81 1695.58,1208.11 1696.17,1206.84 1696.76,1208.6 1697.34,1208.59 1697.93,1210.06 1698.52,1212.7 1699.1,1215.23 1699.69,1212.76 1700.28,1212.93 1700.86,1211.45 1701.45,1211.6 1702.04,1212.92 1702.62,1214.3 1703.21,1214.1 1703.79,1214.03 1704.38,1215.17 1704.97,1216.62 1705.55,1217.78 1706.14,1216.33 1706.73,1216.09 1707.31,1214.42 1707.9,1212.92 1708.49,1212.98 1709.07,1211.64 1709.66,1214 1710.24,1215.28 1710.83,1216.58 1711.42,1216.49 1712,1216.13 1712.59,1217.11 1713.18,1217.14 1713.76,1217.08 1714.35,1215.35 1714.94,1212.51 1715.52,1212.37 1716.11,1209.86 1716.7,1208.57 1717.28,1210.17 1717.87,1208.58 1718.45,1208.72 1719.04,1209.25 1719.63,1209.1 1720.21,1211.87 1720.8,1212.37 1721.39,1213.6 1721.97,1215.9 1722.56,1215.82 1723.15,1214.22 1723.73,1212.74 1724.32,1214.13 1724.91,1209.92 1725.49,1208.65 1726.08,1207.35 1726.66,1205.05 1727.25,1205.47 1727.84,1208.79 1728.42,1207.67 1729.01,1207.81 1729.6,1205.51 1730.18,1205.78 1730.77,1208.75 1731.36,1206.43 1731.94,1205.23 1732.53,1204.24 1733.11,1207.34 1733.7,1206.23 1734.29,1209.38 1734.87,1208.33 1735.46,1210.03 1736.05,1208.68 1736.63,1208.82 1737.22,1208.88 1737.81,1209.04 1738.39,1208.06 1738.98,1208.39 1739.57,1207.04 1740.15,1207.38 1740.74,1210.27 1741.32,1211.72 1741.91,1210.65 1742.5,1209.33 1743.08,1209.49 1743.67,1209.95 1744.26,1211.39 1744.84,1210 1745.43,1211.54 1746.02,1213.18 1746.6,1212.97 1747.19,1215.69 1747.78,1214.46 1748.36,1212.82 1748.95,1214.13 1749.53,1216.78 1750.12,1216.29 1750.71,1214.85 1751.29,1215.03 1751.88,1216.24 1752.47,1215.97 1753.05,1217.12 1753.64,1218.12 1754.23,1217.87 1754.81,1217.74 1755.4,1218.93 1755.99,1218.6 1756.57,1215.56 1757.16,1219.54 1757.74,1218.75 1758.33,1221.06 1758.92,1219.32 1759.5,1218.97 1760.09,1219.85 1760.68,1221.14 1761.26,1220.6 1761.85,1216.05 1762.44,1215.95 1763.02,1214.38 1763.61,1214.45 1764.19,1215.91 1764.78,1217.11 1765.37,1218.1 1765.95,1213.77 1766.54,1213.79 1767.13,1212.24 1767.71,1212.46 1768.3,1212.73 1768.89,1212.93 1769.47,1212.83 1770.06,1213.79 1770.65,1216.36 1771.23,1216.22 1771.82,1214.78 1772.4,1209.07 1772.99,1209.16 1773.58,1209.42 1774.16,1211.02 1774.75,1212.53 1775.34,1212.61 1775.92,1214.05 1776.51,1214.06 1777.1,1212.75 1777.68,1212.88 1778.27,1214.11 1778.86,1214.05 1779.44,1211.4 1780.03,1212.59 1780.61,1212.5 1781.2,1211.5 1781.79,1207.73 1782.37,1207.74 1782.96,1207.95 1783.55,1207.2 1784.13,1208.97 1784.72,1209.24 1785.31,1210.74 1785.89,1212.1 1786.48,1212.15 1787.06,1212.5 1787.65,1215.52 1788.24,1216.6 1788.82,1216.33 1789.41,1213.45 1790,1211.08 1790.58,1212.9 1791.17,1211.75 1791.76,1212.95 1792.34,1216.96 1792.93,1217.84 1793.52,1217.64 1794.1,1218.79 1794.69,1218.42 1795.27,1218.05 1795.86,1216.44 1796.45,1210.96 1797.03,1211.16 1797.62,1211.34 1798.21,1210.11 1798.79,1208.95 1799.38,1208.01 1799.97,1205.41 1800.55,1204.48 1801.14,1202.2 1801.73,1202.4 1802.31,1202.86 1802.9,1204.93 1803.48,1207.72 1804.07,1210.46 1804.66,1210.93 1805.24,1205.65 1805.83,1205.94 1806.42,1206.33 1807,1206.55 1807.59,1206.7 1808.18,1208.43 1808.76,1208.62 1809.35,1208.98 1809.94,1209.19 1810.52,1209.4 1811.11,1209.8 1811.69,1212.67 1812.28,1210.01 1812.87,1211.32 1813.45,1210.16 1814.04,1211.53 1814.63,1212.7 1815.21,1212.76 1815.8,1211.46 1816.39,1210.18 1816.97,1211.76 1817.56,1212.92 1818.14,1211.7 1818.73,1211.85 1819.32,1212.03 1819.9,1210.88 1820.49,1211.11 1821.08,1208.42 1821.66,1207.28 1822.25,1207.38 1822.84,1207.35 1823.42,1208.99 1824.01,1211.02 1824.6,1211.02 1825.18,1211.02 1825.77,1209.95 1826.35,1208.56 1826.94,1209.97 1827.53,1210.19 1828.11,1211.57 1828.7,1213.04 1829.29,1211.83 1829.87,1212.03 1830.46,1212.19 1831.05,1216.22 1831.63,1215.88 1832.22,1216.85 1832.81,1216.56 1833.39,1217.83 1833.98,1218.86 1834.56,1218.72 1835.15,1215.74 1835.74,1217.15 1836.32,1218.14 1836.91,1219.39 1837.5,1220.74 1838.08,1221.52 1838.67,1219.75 1839.26,1220.43 1839.84,1221.46 1840.43,1220.94 1841.01,1220.32 1841.6,1220.01 1842.19,1218.38 1842.77,1219.4 1843.36,1220.38 1843.95,1219.94 1844.53,1219.66 1845.12,1220.71 1845.71,1220.3 1846.29,1222.54 1846.88,1221.69 1847.47,1221.45 1848.05,1223.65 1848.64,1223.21 1849.22,1223.89 1849.81,1220.56 1850.4,1217.3 1850.98,1215.7 1851.57,1213.79 1852.16,1215.3 1852.74,1215.18 1853.33,1213.52 1853.92,1213.47 1854.5,1210.68 1855.09,1212.03 1855.68,1211.95 1856.26,1208 1856.85,1209.2 1857.43,1209.15 1858.02,1207.93 1858.61,1208.35 1859.19,1211.18 1859.78,1209.83 1860.37,1212.55 1860.95,1215.19 1861.54,1213.72 1862.13,1216.38 1862.71,1217.44 1863.3,1214.17 1863.88,1215.39 1864.47,1217.88 1865.06,1218.57 1865.64,1215.18 1866.23,1211.17 1866.82,1212.91 1867.4,1214.35 1867.99,1215.55 1868.58,1216.66 1869.16,1215.25 1869.75,1216.13 1870.34,1218.61 1870.92,1218.46 1871.51,1215.58 1872.09,1215.44 1872.68,1214.08 1873.27,1210.98 1873.85,1212.18 1874.44,1212.07 1875.03,1207.93 1875.61,1209.18 1876.2,1209.32 1876.79,1209.55 1877.37,1210.1 1877.96,1209.08 1878.55,1209.11 1879.13,1211.89 1879.72,1210.49 1880.3,1213.38 1880.89,1213.28 1881.48,1211.8 1882.06,1210.6 1882.65,1212.12 1883.24,1212.08 1883.82,1214.87 1884.41,1215.03 1885,1214.88 1885.58,1214.89 1886.17,1213.19 1886.76,1210.32 1887.34,1211.76 1887.93,1212.07 1888.51,1213.36 1889.1,1213.25 1889.69,1215.74 1890.27,1215.61 1890.86,1218.09 1891.45,1216.33 1892.03,1216.05 1892.62,1217.42 1893.21,1213.03 1893.79,1207.54 1894.38,1207.92 1894.96,1207.91 1895.55,1204.27 1896.14,1203.47 1896.72,1201.59 1897.31,1202.08 1897.9,1203.92 1898.48,1205.55 1899.07,1204.6 1899.66,1209.46 1900.24,1204.33 1900.83,1205.89 1901.42,1207.81 1902,1209.39 1902.59,1216 1903.17,1218.42 1903.76,1217.07 1904.35,1218.11 1904.93,1216.71 1905.52,1219.1 1906.11,1222.66 1906.69,1224.62 1907.28,1225.26 1907.87,1225.84 1908.45,1225.16 1909.04,1223.17 1909.63,1225.19 1910.21,1220.44 1910.8,1218.83 1911.38,1215.62 1911.97,1215.4 1912.56,1219.22 1913.14,1213.63 1913.73,1213.67 1914.32,1214.94 1914.9,1216.27 1915.49,1216.06 1916.08,1216.24 1916.66,1214.59 1917.25,1213.02 1917.83,1211.69 1918.42,1210.33 1919.01,1214.14 1919.59,1213.97 1920.18,1212.5 1920.77,1215.25 1921.35,1216.5 1921.94,1218.87 1922.53,1218.69 1923.11,1221.02 1923.7,1217.81 1924.29,1212.3 1924.87,1213.41 1925.46,1213.57 1926.04,1211.94 1926.63,1214.64 1927.22,1210.45 1927.8,1209.32 1928.39,1210.8 1928.98,1210.89 1929.56,1210.94 1930.15,1213.68 1930.74,1213.53 1931.32,1212.02 1931.91,1211.91 1932.5,1212.89 1933.08,1214.33 1933.67,1212.81 1934.25,1211.51 1934.84,1212.92 1935.43,1211.29 1936.01,1211.53 1936.6,1212.94 1937.19,1213.03 1937.77,1213 1938.36,1209.09 1938.95,1206.74 1939.53,1212.54 1940.12,1213.95 1940.71,1213.85 1941.29,1211.02 1941.88,1210.96 1942.46,1214.86 1943.05,1216.05 1943.64,1215.91 1944.22,1215.75 1944.81,1214.32 1945.4,1212.66 1945.98,1212.6 1946.57,1210.03 1947.16,1211.62 1947.74,1212.92 1948.33,1211.33 1948.91,1212.7 1949.5,1212.61 1950.09,1213.92 1950.67,1212.79 1951.26,1214.22 1951.85,1215.35 1952.43,1215.38 1953.02,1216.67 1953.61,1217.6 1954.19,1216.21 1954.78,1217.43 1955.37,1211.64 1955.95,1208.94 1956.54,1207.88 1957.12,1206.76 1957.71,1206.83 1958.3,1208.6 1958.88,1211.37 1959.47,1211.43 1960.06,1210.45 1960.64,1212.28 1961.23,1214.92 1961.82,1216.02 1962.4,1215.99 1962.99,1217.25 1963.58,1218.62 1964.16,1218.18 1964.75,1217.72 1965.33,1214.51 1965.92,1215.63 1966.51,1215.75 1967.09,1216.98 1967.68,1216.91 1968.27,1216.78 1968.85,1217.9 1969.44,1216.43 1970.03,1213.38 1970.61,1211.95 1971.2,1212.1 1971.78,1210.87 1972.37,1207.92 1972.96,1206.95 1973.54,1207.13 1974.13,1204.4 1974.72,1202.31 1975.3,1205.66 1975.89,1207.38 1976.48,1206.29 1977.06,1207.96 1977.65,1208.14 1978.24,1205.47 1978.82,1205.8 1979.41,1203.48 1979.99,1205.34 1980.58,1204.59 1981.17,1203.78 1981.75,1207.07 1982.34,1207.1 1982.93,1209.92 1983.51,1211.24 1984.1,1211.18 1984.69,1211.38 1985.27,1210.22 1985.86,1207.54 1986.45,1206.39 1987.03,1209.42 1987.62,1210.89 1988.2,1210.84 1988.79,1209.55 1989.38,1208.35 1989.96,1208.58 1990.55,1208.64 1991.14,1206.51 1991.72,1208.19 1992.31,1210.04 1992.9,1212.53 1993.48,1214.02 1994.07,1212.99 1994.65,1211.83 1995.24,1210.43 1995.83,1207.93 1996.41,1210.98 1997,1211.4 1997.59,1209.95 1998.17,1206.09 1998.76,1206.54 1999.35,1204.37 1999.93,1204.82 2000.52,1202.59 2001.11,1204.23 2001.69,1204.8 2002.28,1205.3 2002.86,1203.18 2003.45,1203.76 2004.04,1205.54 2004.62,1204.66 2005.21,1206.59 2005.8,1206.97 2006.38,1208.83 2006.97,1214.41 2007.56,1211.82 2008.14,1213.6 2008.73,1216.3 2009.32,1217.33 2009.9,1215.73 2010.49,1215.72 2011.07,1219.76 2011.66,1219.39 2012.25,1220.4 2012.83,1218.51 2013.42,1218.31 2014.01,1217.99 2014.59,1215.12 2015.18,1213.82 2015.77,1212.5 2016.35,1211.19 2016.94,1211.22 2017.53,1212.9 2018.11,1212.99 2018.7,1214.63 2019.28,1214.59 2019.87,1213.28 2020.46,1213.38 2021.04,1213.36 2021.63,1213.38 2022.22,1214.94 2022.8,1215.09 2023.39,1213.71 2023.98,1214.9 2024.56,1213.43 2025.15,1212.3 2025.73,1210.88 2026.32,1212.31 2026.91,1208.42 2027.49,1210.91 2028.08,1209.46 2028.67,1209.6 2029.25,1210.11 2029.84,1210.25 2030.43,1209.29 2031.01,1208.08 2031.6,1209.82 2032.19,1210.14 2032.77,1211.55 2033.36,1211.57 2033.94,1211.78 2034.53,1211.99 2035.12,1213.4 2035.7,1216.07 2036.29,1216.02 2036.88,1215.81 2037.46,1214.34 2038.05,1215.79 2038.64,1213.12 2039.22,1210.63 2039.81,1207.72 2040.4,1209.25 2040.98,1209.51 2041.57,1211.05 2042.15,1213.62 2042.74,1214.63 2043.33,1214.52 2043.91,1215.77 2044.5,1214.36 2045.09,1215.43 2045.67,1217.87 2046.26,1215.92 2046.85,1214.2 2047.43,1215.42 2048.02,1215.27 2048.6,1212.33 2049.19,1216.55 2049.78,1219.15 2050.36,1218.89 2050.95,1219.76 2051.54,1220.69 2052.12,1216.23 2052.71,1216.14 2053.3,1216.06 2053.88,1215.87 2054.47,1211.72 2055.06,1213.25 2055.64,1212.21 2056.23,1212.18 2056.81,1209.74 2057.4,1209.74 2057.99,1209.92 2058.57,1211.33 2059.16,1212.82 2059.75,1214.1 2060.33,1214.03 2060.92,1212.79 2061.51,1212.82 2062.09,1210.33 2062.68,1213.4 2063.27,1210.53 2063.85,1210.64 2064.44,1210.62 2065.02,1209.31 2065.61,1210.81 2066.2,1212.49 2066.78,1211.24 2067.37,1210.19 2067.96,1208.74 2068.54,1208.87 2069.13,1209.11 2069.72,1213.02 2070.3,1211.53 2070.89,1209.89 2071.48,1212.84 2072.06,1212.84 2072.65,1215.43 2073.23,1215.14 2073.82,1213.81 2074.41,1215 2074.99,1214.6 2075.58,1215.91 2076.17,1215.89 2076.75,1214.56 2077.34,1213.07 2077.93,1214.24 2078.51,1215.44 2079.1,1215.76 2079.68,1218.33 2080.27,1216.56 2080.86,1215.06 2081.44,1214.88 2082.03,1216.13 2082.62,1215.8 2083.2,1214.62 2083.79,1213.11 2084.38,1212.92 2084.96,1214.04 2085.55,1213.76 2086.14,1213.37 2086.72,1212.11 2087.31,1212.01 2087.89,1213.13 2088.48,1212.94 2089.07,1211.64 2089.65,1211.69 2090.24,1209.11 2090.83,1209.23 2091.41,1208.05 2092,1210.98 2092.59,1212.16 2093.17,1213.49 2093.76,1213.36 2094.35,1211.8 2094.93,1211.85 2095.52,1211.86 2096.1,1211.95 2096.69,1212 2097.28,1212.16 2097.86,1214.73 2098.45,1216.09 2099.04,1214.48 2099.62,1214.32 2100.21,1214.22 2100.8,1215.42 2101.38,1215.6 2101.97,1214.07 2102.55,1211.47 2103.14,1213.02 2103.73,1211.33 2104.31,1209.89 2104.9,1211.44 2105.49,1212.88 2106.07,1216.64 2106.66,1215.3 2107.25,1213.84 2107.83,1216.56 2108.42,1216.64 2109.01,1216.18 2109.59,1218.51 2110.18,1222.26 2110.76,1221.67 2111.35,1220.96 2111.94,1220.65 2112.52,1218.7 2113.11,1218.45 2113.7,1218.2 2114.28,1216.87 2114.87,1217.92 2115.46,1217.56 2116.04,1217.13 2116.63,1215.48 2117.22,1215.49 2117.8,1216.78 2118.39,1216.61 2118.97,1216.34 2119.56,1213.49 2120.15,1214.73 2120.73,1214.57 2121.32,1215.78 2121.91,1215.48 2122.49,1215.55 2123.08,1216.54 2123.67,1220.43 2124.25,1218.46 2124.84,1217.96 2125.42,1214.92 2126.01,1212.18 2126.6,1210.59 2127.18,1211.9 2127.77,1212.1 2128.36,1209.17 2128.94,1212.06 2129.53,1211.92 2130.12,1211.88 2130.7,1212.98 2131.29,1213.98 2131.88,1213.6 2132.46,1214.71 2133.05,1214.62 2133.63,1215.7 2134.22,1216.91 2134.81,1219.48 2135.39,1215.06 2135.98,1213.82 2136.57,1214.88 2137.15,1212.03 2137.74,1210.97 2138.33,1211.08 2138.91,1211.14 2139.5,1212.45 2140.09,1211.36 2140.67,1210.09 2141.26,1210.24 2141.84,1210.6 2142.43,1209.55 2143.02,1209.52 2143.6,1209.83 2144.19,1209.88 2144.78,1210.54 2145.36,1209.7 2145.95,1205.74 2146.54,1207.24 2147.12,1208.62 2147.71,1209.09 2148.3,1209.41 2148.88,1209.65 2149.47,1209.6 2150.05,1211.06 2150.64,1210.06 2151.23,1207.81 2151.81,1206.84 2152.4,1209.7 2152.99,1209.48 2153.57,1206.6 2154.16,1207.01 2154.75,1207.03 2155.33,1207.53 2155.92,1205.12 2156.5,1206.88 2157.09,1208.38 2157.68,1210.1 2158.26,1209.12 \"/>\n<path clip-path=\"url(#clip222)\" d=\"M986.025 1213.2 L986.612 1213.2 L987.198 1213.2 L987.785 1213.2 L988.371 1213.2 L988.957 1213.2 L989.544 1213.2 L990.13 1213.2 L990.717 1213.2 L991.303 1213.2 L991.889 1213.2 L992.476 1213.2 L993.062 1213.2 L993.649 1213.2 L994.235 1213.2 L994.822 1213.2 L995.408 1213.2 L995.994 1213.2 L996.581 1213.2 L997.167 1213.2 L997.754 1213.2 L998.34 1213.2 L998.926 1213.2 L999.513 1213.2 L1000.1 1213.2 L1000.69 1213.2 L1001.27 1213.2 L1001.86 1213.2 L1002.44 1213.2 L1003.03 1213.2 L1003.62 1213.2 L1004.2 1213.2 L1004.79 1213.2 L1005.38 1213.2 L1005.96 1213.2 L1006.55 1213.2 L1007.14 1213.2 L1007.72 1213.2 L1008.31 1213.2 L1008.9 1213.2 L1009.48 1213.2 L1010.07 1213.2 L1010.65 1213.2 L1011.24 1213.2 L1011.83 1213.2 L1012.41 1213.2 L1013 1213.2 L1013.59 1213.2 L1014.17 1213.2 L1014.76 1213.2 L1015.35 1213.2 L1015.93 1213.2 L1016.52 1213.2 L1017.11 1213.2 L1017.69 1213.2 L1018.28 1213.2 L1018.86 1213.2 L1019.45 1213.2 L1020.04 1213.2 L1020.62 1213.2 L1021.21 1213.2 L1021.8 1213.2 L1022.38 1213.2 L1022.97 1213.2 L1023.56 1213.2 L1024.14 1213.2 L1024.73 1213.2 L1025.32 1213.2 L1025.9 1213.2 L1026.49 1213.2 L1027.07 1213.2 L1027.66 1213.2 L1028.25 1213.2 L1028.83 1213.2 L1029.42 1213.2 L1030.01 1213.2 L1030.59 1213.2 L1031.18 1213.2 L1031.77 1213.2 L1032.35 1213.2 L1032.94 1213.2 L1033.52 1213.2 L1034.11 1213.2 L1034.7 1213.2 L1035.28 1213.2 L1035.87 1213.2 L1036.46 1213.2 L1037.04 1213.2 L1037.63 1213.2 L1038.22 1213.2 L1038.8 1213.2 L1039.39 1213.2 L1039.98 1213.2 L1040.56 1213.2 L1041.15 1213.2 L1041.73 1213.2 L1042.32 1213.2 L1042.91 1213.2 L1043.49 1213.2 L1044.08 1213.2 L1044.67 1213.2 L1045.25 1213.2 L1045.84 1213.2 L1046.43 1213.2 L1047.01 1213.2 L1047.6 1213.2 L1048.19 1213.2 L1048.77 1213.2 L1049.36 1213.2 L1049.94 1213.2 L1050.53 1213.2 L1051.12 1213.2 L1051.7 1213.2 L1052.29 1213.2 L1052.88 1213.2 L1053.46 1213.2 L1054.05 1213.2 L1054.64 1213.2 L1055.22 1213.2 L1055.81 1213.2 L1056.39 1213.2 L1056.98 1213.2 L1057.57 1213.2 L1058.15 1213.2 L1058.74 1213.2 L1059.33 1213.2 L1059.91 1213.2 L1060.5 1213.2 L1061.09 1213.2 L1061.67 1213.2 L1062.26 1213.2 L1062.85 1213.2 L1063.43 1213.2 L1064.02 1213.2 L1064.6 1213.2 L1065.19 1213.2 L1065.78 1213.2 L1066.36 1213.2 L1066.95 1213.2 L1067.54 1213.2 L1068.12 1213.2 L1068.71 1213.2 L1069.3 1213.2 L1069.88 1213.2 L1070.47 1213.2 L1071.06 1213.2 L1071.64 1213.2 L1072.23 1213.2 L1072.81 1213.2 L1073.4 1213.2 L1073.99 1213.2 L1074.57 1213.2 L1075.16 1213.2 L1075.75 1213.2 L1076.33 1213.2 L1076.92 1213.2 L1077.51 1213.2 L1078.09 1213.2 L1078.68 1213.2 L1079.26 1213.2 L1079.85 1213.2 L1080.44 1213.2 L1081.02 1213.2 L1081.61 1213.2 L1082.2 1213.2 L1082.78 1213.2 L1083.37 1213.2 L1083.96 1213.2 L1084.54 1213.2 L1085.13 1213.2 L1085.72 1213.2 L1086.3 1213.2 L1086.89 1213.2 L1087.47 1213.2 L1088.06 1213.2 L1088.65 1213.2 L1089.23 1213.2 L1089.82 1213.2 L1090.41 1213.2 L1090.99 1213.2 L1091.58 1213.2 L1092.17 1213.2 L1092.75 1213.2 L1093.34 1213.2 L1093.93 1213.2 L1094.51 1213.2 L1095.1 1213.2 L1095.68 1213.2 L1096.27 1213.2 L1096.86 1213.2 L1097.44 1213.2 L1098.03 1213.2 L1098.62 1213.2 L1099.2 1213.2 L1099.79 1213.2 L1100.38 1213.2 L1100.96 1213.2 L1101.55 1213.2 L1102.14 1213.2 L1102.72 1213.2 L1103.31 1213.2 L1103.89 1213.2 L1104.48 1213.2 L1105.07 1213.2 L1105.65 1213.2 L1106.24 1213.2 L1106.83 1213.2 L1107.41 1213.2 L1108 1213.2 L1108.59 1213.2 L1109.17 1213.2 L1109.76 1213.2 L1110.34 1213.2 L1110.93 1213.2 L1111.52 1213.2 L1112.1 1213.2 L1112.69 1213.2 L1113.28 1213.2 L1113.86 1213.2 L1114.45 1213.2 L1115.04 1213.2 L1115.62 1213.2 L1116.21 1213.2 L1116.8 1213.2 L1117.38 1213.2 L1117.97 1213.2 L1118.55 1213.2 L1119.14 1213.2 L1119.73 1213.2 L1120.31 1213.2 L1120.9 1213.2 L1121.49 1213.2 L1122.07 1213.2 L1122.66 1213.2 L1123.25 1213.2 L1123.83 1213.2 L1124.42 1213.2 L1125.01 1213.2 L1125.59 1213.2 L1126.18 1213.2 L1126.76 1213.2 L1127.35 1213.2 L1127.94 1213.2 L1128.52 1213.2 L1129.11 1213.2 L1129.7 1213.2 L1130.28 1213.2 L1130.87 1213.2 L1131.46 1213.2 L1132.04 1213.2 L1132.63 1213.2 L1133.21 1213.2 L1133.8 1213.2 L1134.39 1213.2 L1134.97 1213.2 L1135.56 1213.2 L1136.15 1213.2 L1136.73 1213.2 L1137.32 1213.2 L1137.91 1213.2 L1138.49 1213.2 L1139.08 1213.2 L1139.67 1213.2 L1140.25 1213.2 L1140.84 1213.2 L1141.42 1213.2 L1142.01 1213.2 L1142.6 1213.2 L1143.18 1213.2 L1143.77 1213.2 L1144.36 1213.2 L1144.94 1213.2 L1145.53 1213.2 L1146.12 1213.2 L1146.7 1213.2 L1147.29 1213.2 L1147.88 1213.2 L1148.46 1213.2 L1149.05 1213.2 L1149.63 1213.2 L1150.22 1213.2 L1150.81 1213.2 L1151.39 1213.2 L1151.98 1213.2 L1152.57 1213.2 L1153.15 1213.2 L1153.74 1213.2 L1154.33 1213.2 L1154.91 1213.2 L1155.5 1213.2 L1156.09 1213.2 L1156.67 1213.2 L1157.26 1213.2 L1157.84 1213.2 L1158.43 1213.2 L1159.02 1213.2 L1159.6 1213.2 L1160.19 1213.2 L1160.78 1213.2 L1161.36 1213.2 L1161.95 1213.2 L1162.54 1213.2 L1163.12 1213.2 L1163.71 1213.2 L1164.29 1213.2 L1164.88 1213.2 L1165.47 1213.2 L1166.05 1213.2 L1166.64 1213.2 L1167.23 1213.2 L1167.81 1213.2 L1168.4 1213.2 L1168.99 1213.2 L1169.57 1213.2 L1170.16 1213.2 L1170.75 1213.2 L1171.33 1213.2 L1171.92 1213.2 L1172.5 1213.2 L1173.09 1213.2 L1173.68 1213.2 L1174.26 1213.2 L1174.85 1213.2 L1175.44 1213.2 L1176.02 1213.2 L1176.61 1213.2 L1177.2 1213.2 L1177.78 1213.2 L1178.37 1213.2 L1178.96 1213.2 L1179.54 1213.2 L1180.13 1213.2 L1180.71 1213.2 L1181.3 1213.2 L1181.89 1213.2 L1182.47 1213.2 L1183.06 1213.2 L1183.65 1213.2 L1184.23 1213.2 L1184.82 1213.2 L1185.41 1213.2 L1185.99 1213.2 L1186.58 1213.2 L1187.16 1213.2 L1187.75 1213.2 L1188.34 1213.2 L1188.92 1213.2 L1189.51 1213.2 L1190.1 1213.2 L1190.68 1213.2 L1191.27 1213.2 L1191.86 1213.2 L1192.44 1213.2 L1193.03 1213.2 L1193.62 1213.2 L1194.2 1213.2 L1194.79 1213.2 L1195.37 1213.2 L1195.96 1213.2 L1196.55 1213.2 L1197.13 1213.2 L1197.72 1213.2 L1198.31 1213.2 L1198.89 1213.2 L1199.48 1213.2 L1200.07 1213.2 L1200.65 1213.2 L1201.24 1213.2 L1201.83 1213.2 L1202.41 1213.2 L1203 1213.2 L1203.58 1213.2 L1204.17 1213.2 L1204.76 1213.2 L1205.34 1213.2 L1205.93 1213.2 L1206.52 1213.2 L1207.1 1213.2 L1207.69 1213.2 L1208.28 1213.2 L1208.86 1213.2 L1209.45 1213.2 L1210.03 1213.2 L1210.62 1213.2 L1211.21 1213.2 L1211.79 1213.2 L1212.38 1213.2 L1212.97 1213.2 L1213.55 1213.2 L1214.14 1213.2 L1214.73 1213.2 L1215.31 1213.2 L1215.9 1213.2 L1216.49 1213.2 L1217.07 1213.2 L1217.66 1213.2 L1218.24 1213.2 L1218.83 1213.2 L1219.42 1213.2 L1220 1213.2 L1220.59 1213.2 L1221.18 1213.2 L1221.76 1213.2 L1222.35 1213.2 L1222.94 1213.2 L1223.52 1213.2 L1224.11 1213.2 L1224.7 1213.2 L1225.28 1213.2 L1225.87 1213.2 L1226.45 1213.2 L1227.04 1213.2 L1227.63 1213.2 L1228.21 1213.2 L1228.8 1213.2 L1229.39 1213.2 L1229.97 1213.2 L1230.56 1213.2 L1231.15 1213.2 L1231.73 1213.2 L1232.32 1213.2 L1232.91 1213.2 L1233.49 1213.2 L1234.08 1213.2 L1234.66 1213.2 L1235.25 1213.2 L1235.84 1213.2 L1236.42 1213.2 L1237.01 1213.2 L1237.6 1213.2 L1238.18 1213.2 L1238.77 1213.2 L1239.36 1213.2 L1239.94 1213.2 L1240.53 1213.2 L1241.11 1213.2 L1241.7 1213.2 L1242.29 1213.2 L1242.87 1213.2 L1243.46 1213.2 L1244.05 1213.2 L1244.63 1213.2 L1245.22 1213.2 L1245.81 1213.2 L1246.39 1213.2 L1246.98 1213.2 L1247.57 1213.2 L1248.15 1213.2 L1248.74 1213.2 L1249.32 1213.2 L1249.91 1213.2 L1250.5 1213.2 L1251.08 1213.2 L1251.67 1213.2 L1252.26 1213.2 L1252.84 1213.2 L1253.43 1213.2 L1254.02 1213.2 L1254.6 1213.2 L1255.19 1213.2 L1255.78 1213.2 L1256.36 1213.2 L1256.95 1213.2 L1257.53 1213.2 L1258.12 1213.2 L1258.71 1213.2 L1259.29 1213.2 L1259.88 1213.2 L1260.47 1213.2 L1261.05 1213.2 L1261.64 1213.2 L1262.23 1213.2 L1262.81 1213.2 L1263.4 1213.2 L1263.98 1213.2 L1264.57 1213.2 L1265.16 1213.2 L1265.74 1213.2 L1266.33 1213.2 L1266.92 1213.2 L1267.5 1213.2 L1268.09 1213.2 L1268.68 1213.2 L1269.26 1213.2 L1269.85 1213.2 L1270.44 1213.2 L1271.02 1213.2 L1271.61 1213.2 L1272.19 1213.2 L1272.78 1213.2 L1273.37 1213.2 L1273.95 1213.2 L1274.54 1213.2 L1275.13 1213.2 L1275.71 1213.2 L1276.3 1213.2 L1276.89 1213.2 L1277.47 1213.2 L1278.06 1213.2 L1278.65 1213.2 L1279.23 1213.2 L1279.82 1213.2 L1280.4 1213.2 L1280.99 1213.2 L1281.58 1213.2 L1282.16 1213.2 L1282.75 1213.2 L1283.34 1213.2 L1283.92 1213.2 L1284.51 1213.2 L1285.1 1213.2 L1285.68 1213.2 L1286.27 1213.2 L1286.86 1213.2 L1287.44 1213.2 L1288.03 1213.2 L1288.61 1213.2 L1289.2 1213.2 L1289.79 1213.2 L1290.37 1213.2 L1290.96 1213.2 L1291.55 1213.2 L1292.13 1213.2 L1292.72 1213.2 L1293.31 1213.2 L1293.89 1213.2 L1294.48 1213.2 L1295.06 1213.2 L1295.65 1213.2 L1296.24 1213.2 L1296.82 1213.2 L1297.41 1213.2 L1298 1213.2 L1298.58 1213.2 L1299.17 1213.2 L1299.76 1213.2 L1300.34 1213.2 L1300.93 1213.2 L1301.52 1213.2 L1302.1 1213.2 L1302.69 1213.2 L1303.27 1213.2 L1303.86 1213.2 L1304.45 1213.2 L1305.03 1213.2 L1305.62 1213.2 L1306.21 1213.2 L1306.79 1213.2 L1307.38 1213.2 L1307.97 1213.2 L1308.55 1213.2 L1309.14 1213.2 L1309.73 1213.2 L1310.31 1213.2 L1310.9 1213.2 L1311.48 1213.2 L1312.07 1213.2 L1312.66 1213.2 L1313.24 1213.2 L1313.83 1213.2 L1314.42 1213.2 L1315 1213.2 L1315.59 1213.2 L1316.18 1213.2 L1316.76 1213.2 L1317.35 1213.2 L1317.93 1213.2 L1318.52 1213.2 L1319.11 1213.2 L1319.69 1213.2 L1320.28 1213.2 L1320.87 1213.2 L1321.45 1213.2 L1322.04 1213.2 L1322.63 1213.2 L1323.21 1213.2 L1323.8 1213.2 L1324.39 1213.2 L1324.97 1213.2 L1325.56 1213.2 L1326.14 1213.2 L1326.73 1213.2 L1327.32 1213.2 L1327.9 1213.2 L1328.49 1213.2 L1329.08 1213.2 L1329.66 1213.2 L1330.25 1213.2 L1330.84 1213.2 L1331.42 1213.2 L1332.01 1213.2 L1332.6 1213.2 L1333.18 1213.2 L1333.77 1213.2 L1334.35 1213.2 L1334.94 1213.2 L1335.53 1213.2 L1336.11 1213.2 L1336.7 1213.2 L1337.29 1213.2 L1337.87 1213.2 L1338.46 1213.2 L1339.05 1213.2 L1339.63 1213.2 L1340.22 1213.2 L1340.8 1213.2 L1341.39 1213.2 L1341.98 1213.2 L1342.56 1213.2 L1343.15 1213.2 L1343.74 1213.2 L1344.32 1213.2 L1344.91 1213.2 L1345.5 1213.2 L1346.08 1213.2 L1346.67 1213.2 L1347.26 1213.2 L1347.84 1213.2 L1348.43 1213.2 L1349.01 1213.2 L1349.6 1213.2 L1350.19 1213.2 L1350.77 1213.2 L1351.36 1213.2 L1351.95 1213.2 L1352.53 1213.2 L1353.12 1213.2 L1353.71 1213.2 L1354.29 1213.2 L1354.88 1213.2 L1355.47 1213.2 L1356.05 1213.2 L1356.64 1213.2 L1357.22 1213.2 L1357.81 1213.2 L1358.4 1213.2 L1358.98 1213.2 L1359.57 1213.2 L1360.16 1213.2 L1360.74 1213.2 L1361.33 1213.2 L1361.92 1213.2 L1362.5 1213.2 L1363.09 1213.2 L1363.68 1213.2 L1364.26 1213.2 L1364.85 1213.2 L1365.43 1213.2 L1366.02 1213.2 L1366.61 1213.2 L1367.19 1213.2 L1367.78 1213.2 L1368.37 1213.2 L1368.95 1213.2 L1369.54 1213.2 L1370.13 1213.2 L1370.71 1213.2 L1371.3 1213.2 L1371.88 1213.2 L1372.47 1213.2 L1373.06 1213.2 L1373.64 1213.2 L1374.23 1213.2 L1374.82 1213.2 L1375.4 1213.2 L1375.99 1213.2 L1376.58 1213.2 L1377.16 1213.2 L1377.75 1213.2 L1378.34 1213.2 L1378.92 1213.2 L1379.51 1213.2 L1380.09 1213.2 L1380.68 1213.2 L1381.27 1213.2 L1381.85 1213.2 L1382.44 1213.2 L1383.03 1213.2 L1383.61 1213.2 L1384.2 1213.2 L1384.79 1213.2 L1385.37 1213.2 L1385.96 1213.2 L1386.55 1213.2 L1387.13 1213.2 L1387.72 1213.2 L1388.3 1213.2 L1388.89 1213.2 L1389.48 1213.2 L1390.06 1213.2 L1390.65 1213.2 L1391.24 1213.2 L1391.82 1213.2 L1392.41 1213.2 L1393 1213.2 L1393.58 1213.2 L1394.17 1213.2 L1394.75 1213.2 L1395.34 1213.2 L1395.93 1213.2 L1396.51 1213.2 L1397.1 1213.2 L1397.69 1213.2 L1398.27 1213.2 L1398.86 1213.2 L1399.45 1213.2 L1400.03 1213.2 L1400.62 1213.2 L1401.21 1213.2 L1401.79 1213.2 L1402.38 1213.2 L1402.96 1213.2 L1403.55 1213.2 L1404.14 1213.2 L1404.72 1213.2 L1405.31 1213.2 L1405.9 1213.2 L1406.48 1213.2 L1407.07 1213.2 L1407.66 1213.2 L1408.24 1213.2 L1408.83 1213.2 L1409.42 1213.2 L1410 1213.2 L1410.59 1213.2 L1411.17 1213.2 L1411.76 1213.2 L1412.35 1213.2 L1412.93 1213.2 L1413.52 1213.2 L1414.11 1213.2 L1414.69 1213.2 L1415.28 1213.2 L1415.87 1213.2 L1416.45 1213.2 L1417.04 1213.2 L1417.63 1213.2 L1418.21 1213.2 L1418.8 1213.2 L1419.38 1213.2 L1419.97 1213.2 L1420.56 1213.2 L1421.14 1213.2 L1421.73 1213.2 L1422.32 1213.2 L1422.9 1213.2 L1423.49 1213.2 L1424.08 1213.2 L1424.66 1213.2 L1425.25 1213.2 L1425.83 1213.2 L1426.42 1213.2 L1427.01 1213.2 L1427.59 1213.2 L1428.18 1213.2 L1428.77 1213.2 L1429.35 1213.2 L1429.94 1213.2 L1430.53 1213.2 L1431.11 1213.2 L1431.7 1213.2 L1432.29 1213.2 L1432.87 1213.2 L1433.46 1213.2 L1434.04 1213.2 L1434.63 1213.2 L1435.22 1213.2 L1435.8 1213.2 L1436.39 1213.2 L1436.98 1213.2 L1437.56 1213.2 L1438.15 1213.2 L1438.74 1213.2 L1439.32 1213.2 L1439.91 1213.2 L1440.5 1213.2 L1441.08 1213.2 L1441.67 1213.2 L1442.25 1213.2 L1442.84 1213.2 L1443.43 1213.2 L1444.01 1213.2 L1444.6 1213.2 L1445.19 1213.2 L1445.77 1213.2 L1446.36 1213.2 L1446.95 1213.2 L1447.53 1213.2 L1448.12 1213.2 L1448.7 1213.2 L1449.29 1213.2 L1449.88 1213.2 L1450.46 1213.2 L1451.05 1213.2 L1451.64 1213.2 L1452.22 1213.2 L1452.81 1213.2 L1453.4 1213.2 L1453.98 1213.2 L1454.57 1213.2 L1455.16 1213.2 L1455.74 1213.2 L1456.33 1213.2 L1456.91 1213.2 L1457.5 1213.2 L1458.09 1213.2 L1458.67 1213.2 L1459.26 1213.2 L1459.85 1213.2 L1460.43 1213.2 L1461.02 1213.2 L1461.61 1213.2 L1462.19 1213.2 L1462.78 1213.2 L1463.37 1213.2 L1463.95 1213.2 L1464.54 1213.2 L1465.12 1213.2 L1465.71 1213.2 L1466.3 1213.2 L1466.88 1213.2 L1467.47 1213.2 L1468.06 1213.2 L1468.64 1213.2 L1469.23 1213.2 L1469.82 1213.2 L1470.4 1213.2 L1470.99 1213.2 L1471.57 1213.2 L1472.16 1213.2 L1472.75 1213.2 L1473.33 1213.2 L1473.92 1213.2 L1474.51 1213.2 L1475.09 1213.2 L1475.68 1213.2 L1476.27 1213.2 L1476.85 1213.2 L1477.44 1213.2 L1478.03 1213.2 L1478.61 1213.2 L1479.2 1213.2 L1479.78 1213.2 L1480.37 1213.2 L1480.96 1213.2 L1481.54 1213.2 L1482.13 1213.2 L1482.72 1213.2 L1483.3 1213.2 L1483.89 1213.2 L1484.48 1213.2 L1485.06 1213.2 L1485.65 1213.2 L1486.24 1213.2 L1486.82 1213.2 L1487.41 1213.2 L1487.99 1213.2 L1488.58 1213.2 L1489.17 1213.2 L1489.75 1213.2 L1490.34 1213.2 L1490.93 1213.2 L1491.51 1213.2 L1492.1 1213.2 L1492.69 1213.2 L1493.27 1213.2 L1493.86 1213.2 L1494.45 1213.2 L1495.03 1213.2 L1495.62 1213.2 L1496.2 1213.2 L1496.79 1213.2 L1497.38 1213.2 L1497.96 1213.2 L1498.55 1213.2 L1499.14 1213.2 L1499.72 1213.2 L1500.31 1213.2 L1500.9 1213.2 L1501.48 1213.2 L1502.07 1213.2 L1502.65 1213.2 L1503.24 1213.2 L1503.83 1213.2 L1504.41 1213.2 L1505 1213.2 L1505.59 1213.2 L1506.17 1213.2 L1506.76 1213.2 L1507.35 1213.2 L1507.93 1213.2 L1508.52 1213.2 L1509.11 1213.2 L1509.69 1213.2 L1510.28 1213.2 L1510.86 1213.2 L1511.45 1213.2 L1512.04 1213.2 L1512.62 1213.2 L1513.21 1213.2 L1513.8 1213.2 L1514.38 1213.2 L1514.97 1213.2 L1515.56 1213.2 L1516.14 1213.2 L1516.73 1213.2 L1517.32 1213.2 L1517.9 1213.2 L1518.49 1213.2 L1519.07 1213.2 L1519.66 1213.2 L1520.25 1213.2 L1520.83 1213.2 L1521.42 1213.2 L1522.01 1213.2 L1522.59 1213.2 L1523.18 1213.2 L1523.77 1213.2 L1524.35 1213.2 L1524.94 1213.2 L1525.52 1213.2 L1526.11 1213.2 L1526.7 1213.2 L1527.28 1213.2 L1527.87 1213.2 L1528.46 1213.2 L1529.04 1213.2 L1529.63 1213.2 L1530.22 1213.2 L1530.8 1213.2 L1531.39 1213.2 L1531.98 1213.2 L1532.56 1213.2 L1533.15 1213.2 L1533.73 1213.2 L1534.32 1213.2 L1534.91 1213.2 L1535.49 1213.2 L1536.08 1213.2 L1536.67 1213.2 L1537.25 1213.2 L1537.84 1213.2 L1538.43 1213.2 L1539.01 1213.2 L1539.6 1213.2 L1540.19 1213.2 L1540.77 1213.2 L1541.36 1213.2 L1541.94 1213.2 L1542.53 1213.2 L1543.12 1213.2 L1543.7 1213.2 L1544.29 1213.2 L1544.88 1213.2 L1545.46 1213.2 L1546.05 1213.2 L1546.64 1213.2 L1547.22 1213.2 L1547.81 1213.2 L1548.4 1213.2 L1548.98 1213.2 L1549.57 1213.2 L1550.15 1213.2 L1550.74 1213.2 L1551.33 1213.2 L1551.91 1213.2 L1552.5 1213.2 L1553.09 1213.2 L1553.67 1213.2 L1554.26 1213.2 L1554.85 1213.2 L1555.43 1213.2 L1556.02 1213.2 L1556.6 1213.2 L1557.19 1213.2 L1557.78 1213.2 L1558.36 1213.2 L1558.95 1213.2 L1559.54 1213.2 L1560.12 1213.2 L1560.71 1213.2 L1561.3 1213.2 L1561.88 1213.2 L1562.47 1213.2 L1563.06 1213.2 L1563.64 1213.2 L1564.23 1213.2 L1564.81 1213.2 L1565.4 1213.2 L1565.99 1213.2 L1566.57 1213.2 L1567.16 1213.2 L1567.75 1213.2 L1568.33 1213.2 L1568.92 1213.2 L1569.51 1213.2 L1570.09 1213.2 L1570.68 1213.2 L1571.27 1213.2 L1571.85 1213.2 L1572.44 1213.2 L1573.02 1213.2 L1573.61 1213.2 L1574.2 1213.2 L1574.78 1213.2 L1575.37 1213.2 L1575.96 1213.2 L1576.54 1213.2 L1577.13 1213.2 L1577.72 1213.2 L1578.3 1213.2 L1578.89 1213.2 L1579.47 1213.2 L1580.06 1213.2 L1580.65 1213.2 L1581.23 1213.2 L1581.82 1213.2 L1582.41 1213.2 L1582.99 1213.2 L1583.58 1213.2 L1584.17 1213.2 L1584.75 1213.2 L1585.34 1213.2 L1585.93 1213.2 L1586.51 1213.2 L1587.1 1213.2 L1587.68 1213.2 L1588.27 1213.2 L1588.86 1213.2 L1589.44 1213.2 L1590.03 1213.2 L1590.62 1213.2 L1591.2 1213.2 L1591.79 1213.2 L1592.38 1213.2 L1592.96 1213.2 L1593.55 1213.2 L1594.14 1213.2 L1594.72 1213.2 L1595.31 1213.2 L1595.89 1213.2 L1596.48 1213.2 L1597.07 1213.2 L1597.65 1213.2 L1598.24 1213.2 L1598.83 1213.2 L1599.41 1213.2 L1600 1213.2 L1600.59 1213.2 L1601.17 1213.2 L1601.76 1213.2 L1602.34 1213.2 L1602.93 1213.2 L1603.52 1213.2 L1604.1 1213.2 L1604.69 1213.2 L1605.28 1213.2 L1605.86 1213.2 L1606.45 1213.2 L1607.04 1213.2 L1607.62 1213.2 L1608.21 1213.2 L1608.8 1213.2 L1609.38 1213.2 L1609.97 1213.2 L1610.55 1213.2 L1611.14 1213.2 L1611.73 1213.2 L1612.31 1213.2 L1612.9 1213.2 L1613.49 1213.2 L1614.07 1213.2 L1614.66 1213.2 L1615.25 1213.2 L1615.83 1213.2 L1616.42 1213.2 L1617.01 1213.2 L1617.59 1213.2 L1618.18 1213.2 L1618.76 1213.2 L1619.35 1213.2 L1619.94 1213.2 L1620.52 1213.2 L1621.11 1213.2 L1621.7 1213.2 L1622.28 1213.2 L1622.87 1213.2 L1623.46 1213.2 L1624.04 1213.2 L1624.63 1213.2 L1625.22 1213.2 L1625.8 1213.2 L1626.39 1213.2 L1626.97 1213.2 L1627.56 1213.2 L1628.15 1213.2 L1628.73 1213.2 L1629.32 1213.2 L1629.91 1213.2 L1630.49 1213.2 L1631.08 1213.2 L1631.67 1213.2 L1632.25 1213.2 L1632.84 1213.2 L1633.42 1213.2 L1634.01 1213.2 L1634.6 1213.2 L1635.18 1213.2 L1635.77 1213.2 L1636.36 1213.2 L1636.94 1213.2 L1637.53 1213.2 L1638.12 1213.2 L1638.7 1213.2 L1639.29 1213.2 L1639.88 1213.2 L1640.46 1213.2 L1641.05 1213.2 L1641.63 1213.2 L1642.22 1213.2 L1642.81 1213.2 L1643.39 1213.2 L1643.98 1213.2 L1644.57 1213.2 L1645.15 1213.2 L1645.74 1213.2 L1646.33 1213.2 L1646.91 1213.2 L1647.5 1213.2 L1648.09 1213.2 L1648.67 1213.2 L1649.26 1213.2 L1649.84 1213.2 L1650.43 1213.2 L1651.02 1213.2 L1651.6 1213.2 L1652.19 1213.2 L1652.78 1213.2 L1653.36 1213.2 L1653.95 1213.2 L1654.54 1213.2 L1655.12 1213.2 L1655.71 1213.2 L1656.29 1213.2 L1656.88 1213.2 L1657.47 1213.2 L1658.05 1213.2 L1658.64 1213.2 L1659.23 1213.2 L1659.81 1213.2 L1660.4 1213.2 L1660.99 1213.2 L1661.57 1213.2 L1662.16 1213.2 L1662.75 1213.2 L1663.33 1213.2 L1663.92 1213.2 L1664.5 1213.2 L1665.09 1213.2 L1665.68 1213.2 L1666.26 1213.2 L1666.85 1213.2 L1667.44 1213.2 L1668.02 1213.2 L1668.61 1213.2 L1669.2 1213.2 L1669.78 1213.2 L1670.37 1213.2 L1670.96 1213.2 L1671.54 1213.2 L1672.13 1213.2 L1672.71 1213.2 L1673.3 1213.2 L1673.89 1213.2 L1674.47 1213.2 L1675.06 1213.2 L1675.65 1213.2 L1676.23 1213.2 L1676.82 1213.2 L1677.41 1213.2 L1677.99 1213.2 L1678.58 1213.2 L1679.17 1213.2 L1679.75 1213.2 L1680.34 1213.2 L1680.92 1213.2 L1681.51 1213.2 L1682.1 1213.2 L1682.68 1213.2 L1683.27 1213.2 L1683.86 1213.2 L1684.44 1213.2 L1685.03 1213.2 L1685.62 1213.2 L1686.2 1213.2 L1686.79 1213.2 L1687.37 1213.2 L1687.96 1213.2 L1688.55 1213.2 L1689.13 1213.2 L1689.72 1213.2 L1690.31 1213.2 L1690.89 1213.2 L1691.48 1213.2 L1692.07 1213.2 L1692.65 1213.2 L1693.24 1213.2 L1693.83 1213.2 L1694.41 1213.2 L1695 1213.2 L1695.58 1213.2 L1696.17 1213.2 L1696.76 1213.2 L1697.34 1213.2 L1697.93 1213.2 L1698.52 1213.2 L1699.1 1213.2 L1699.69 1213.2 L1700.28 1213.2 L1700.86 1213.2 L1701.45 1213.2 L1702.04 1213.2 L1702.62 1213.2 L1703.21 1213.2 L1703.79 1213.2 L1704.38 1213.2 L1704.97 1213.2 L1705.55 1213.2 L1706.14 1213.2 L1706.73 1213.2 L1707.31 1213.2 L1707.9 1213.2 L1708.49 1213.2 L1709.07 1213.2 L1709.66 1213.2 L1710.24 1213.2 L1710.83 1213.2 L1711.42 1213.2 L1712 1213.2 L1712.59 1213.2 L1713.18 1213.2 L1713.76 1213.2 L1714.35 1213.2 L1714.94 1213.2 L1715.52 1213.2 L1716.11 1213.2 L1716.7 1213.2 L1717.28 1213.2 L1717.87 1213.2 L1718.45 1213.2 L1719.04 1213.2 L1719.63 1213.2 L1720.21 1213.2 L1720.8 1213.2 L1721.39 1213.2 L1721.97 1213.2 L1722.56 1213.2 L1723.15 1213.2 L1723.73 1213.2 L1724.32 1213.2 L1724.91 1213.2 L1725.49 1213.2 L1726.08 1213.2 L1726.66 1213.2 L1727.25 1213.2 L1727.84 1213.2 L1728.42 1213.2 L1729.01 1213.2 L1729.6 1213.2 L1730.18 1213.2 L1730.77 1213.2 L1731.36 1213.2 L1731.94 1213.2 L1732.53 1213.2 L1733.11 1213.2 L1733.7 1213.2 L1734.29 1213.2 L1734.87 1213.2 L1735.46 1213.2 L1736.05 1213.2 L1736.63 1213.2 L1737.22 1213.2 L1737.81 1213.2 L1738.39 1213.2 L1738.98 1213.2 L1739.57 1213.2 L1740.15 1213.2 L1740.74 1213.2 L1741.32 1213.2 L1741.91 1213.2 L1742.5 1213.2 L1743.08 1213.2 L1743.67 1213.2 L1744.26 1213.2 L1744.84 1213.2 L1745.43 1213.2 L1746.02 1213.2 L1746.6 1213.2 L1747.19 1213.2 L1747.78 1213.2 L1748.36 1213.2 L1748.95 1213.2 L1749.53 1213.2 L1750.12 1213.2 L1750.71 1213.2 L1751.29 1213.2 L1751.88 1213.2 L1752.47 1213.2 L1753.05 1213.2 L1753.64 1213.2 L1754.23 1213.2 L1754.81 1213.2 L1755.4 1213.2 L1755.99 1213.2 L1756.57 1213.2 L1757.16 1213.2 L1757.74 1213.2 L1758.33 1213.2 L1758.92 1213.2 L1759.5 1213.2 L1760.09 1213.2 L1760.68 1213.2 L1761.26 1213.2 L1761.85 1213.2 L1762.44 1213.2 L1763.02 1213.2 L1763.61 1213.2 L1764.19 1213.2 L1764.78 1213.2 L1765.37 1213.2 L1765.95 1213.2 L1766.54 1213.2 L1767.13 1213.2 L1767.71 1213.2 L1768.3 1213.2 L1768.89 1213.2 L1769.47 1213.2 L1770.06 1213.2 L1770.65 1213.2 L1771.23 1213.2 L1771.82 1213.2 L1772.4 1213.2 L1772.99 1213.2 L1773.58 1213.2 L1774.16 1213.2 L1774.75 1213.2 L1775.34 1213.2 L1775.92 1213.2 L1776.51 1213.2 L1777.1 1213.2 L1777.68 1213.2 L1778.27 1213.2 L1778.86 1213.2 L1779.44 1213.2 L1780.03 1213.2 L1780.61 1213.2 L1781.2 1213.2 L1781.79 1213.2 L1782.37 1213.2 L1782.96 1213.2 L1783.55 1213.2 L1784.13 1213.2 L1784.72 1213.2 L1785.31 1213.2 L1785.89 1213.2 L1786.48 1213.2 L1787.06 1213.2 L1787.65 1213.2 L1788.24 1213.2 L1788.82 1213.2 L1789.41 1213.2 L1790 1213.2 L1790.58 1213.2 L1791.17 1213.2 L1791.76 1213.2 L1792.34 1213.2 L1792.93 1213.2 L1793.52 1213.2 L1794.1 1213.2 L1794.69 1213.2 L1795.27 1213.2 L1795.86 1213.2 L1796.45 1213.2 L1797.03 1213.2 L1797.62 1213.2 L1798.21 1213.2 L1798.79 1213.2 L1799.38 1213.2 L1799.97 1213.2 L1800.55 1213.2 L1801.14 1213.2 L1801.73 1213.2 L1802.31 1213.2 L1802.9 1213.2 L1803.48 1213.2 L1804.07 1213.2 L1804.66 1213.2 L1805.24 1213.2 L1805.83 1213.2 L1806.42 1213.2 L1807 1213.2 L1807.59 1213.2 L1808.18 1213.2 L1808.76 1213.2 L1809.35 1213.2 L1809.94 1213.2 L1810.52 1213.2 L1811.11 1213.2 L1811.69 1213.2 L1812.28 1213.2 L1812.87 1213.2 L1813.45 1213.2 L1814.04 1213.2 L1814.63 1213.2 L1815.21 1213.2 L1815.8 1213.2 L1816.39 1213.2 L1816.97 1213.2 L1817.56 1213.2 L1818.14 1213.2 L1818.73 1213.2 L1819.32 1213.2 L1819.9 1213.2 L1820.49 1213.2 L1821.08 1213.2 L1821.66 1213.2 L1822.25 1213.2 L1822.84 1213.2 L1823.42 1213.2 L1824.01 1213.2 L1824.6 1213.2 L1825.18 1213.2 L1825.77 1213.2 L1826.35 1213.2 L1826.94 1213.2 L1827.53 1213.2 L1828.11 1213.2 L1828.7 1213.2 L1829.29 1213.2 L1829.87 1213.2 L1830.46 1213.2 L1831.05 1213.2 L1831.63 1213.2 L1832.22 1213.2 L1832.81 1213.2 L1833.39 1213.2 L1833.98 1213.2 L1834.56 1213.2 L1835.15 1213.2 L1835.74 1213.2 L1836.32 1213.2 L1836.91 1213.2 L1837.5 1213.2 L1838.08 1213.2 L1838.67 1213.2 L1839.26 1213.2 L1839.84 1213.2 L1840.43 1213.2 L1841.01 1213.2 L1841.6 1213.2 L1842.19 1213.2 L1842.77 1213.2 L1843.36 1213.2 L1843.95 1213.2 L1844.53 1213.2 L1845.12 1213.2 L1845.71 1213.2 L1846.29 1213.2 L1846.88 1213.2 L1847.47 1213.2 L1848.05 1213.2 L1848.64 1213.2 L1849.22 1213.2 L1849.81 1213.2 L1850.4 1213.2 L1850.98 1213.2 L1851.57 1213.2 L1852.16 1213.2 L1852.74 1213.2 L1853.33 1213.2 L1853.92 1213.2 L1854.5 1213.2 L1855.09 1213.2 L1855.68 1213.2 L1856.26 1213.2 L1856.85 1213.2 L1857.43 1213.2 L1858.02 1213.2 L1858.61 1213.2 L1859.19 1213.2 L1859.78 1213.2 L1860.37 1213.2 L1860.95 1213.2 L1861.54 1213.2 L1862.13 1213.2 L1862.71 1213.2 L1863.3 1213.2 L1863.88 1213.2 L1864.47 1213.2 L1865.06 1213.2 L1865.64 1213.2 L1866.23 1213.2 L1866.82 1213.2 L1867.4 1213.2 L1867.99 1213.2 L1868.58 1213.2 L1869.16 1213.2 L1869.75 1213.2 L1870.34 1213.2 L1870.92 1213.2 L1871.51 1213.2 L1872.09 1213.2 L1872.68 1213.2 L1873.27 1213.2 L1873.85 1213.2 L1874.44 1213.2 L1875.03 1213.2 L1875.61 1213.2 L1876.2 1213.2 L1876.79 1213.2 L1877.37 1213.2 L1877.96 1213.2 L1878.55 1213.2 L1879.13 1213.2 L1879.72 1213.2 L1880.3 1213.2 L1880.89 1213.2 L1881.48 1213.2 L1882.06 1213.2 L1882.65 1213.2 L1883.24 1213.2 L1883.82 1213.2 L1884.41 1213.2 L1885 1213.2 L1885.58 1213.2 L1886.17 1213.2 L1886.76 1213.2 L1887.34 1213.2 L1887.93 1213.2 L1888.51 1213.2 L1889.1 1213.2 L1889.69 1213.2 L1890.27 1213.2 L1890.86 1213.2 L1891.45 1213.2 L1892.03 1213.2 L1892.62 1213.2 L1893.21 1213.2 L1893.79 1213.2 L1894.38 1213.2 L1894.96 1213.2 L1895.55 1213.2 L1896.14 1213.2 L1896.72 1213.2 L1897.31 1213.2 L1897.9 1213.2 L1898.48 1213.2 L1899.07 1213.2 L1899.66 1213.2 L1900.24 1213.2 L1900.83 1213.2 L1901.42 1213.2 L1902 1213.2 L1902.59 1213.2 L1903.17 1213.2 L1903.76 1213.2 L1904.35 1213.2 L1904.93 1213.2 L1905.52 1213.2 L1906.11 1213.2 L1906.69 1213.2 L1907.28 1213.2 L1907.87 1213.2 L1908.45 1213.2 L1909.04 1213.2 L1909.63 1213.2 L1910.21 1213.2 L1910.8 1213.2 L1911.38 1213.2 L1911.97 1213.2 L1912.56 1213.2 L1913.14 1213.2 L1913.73 1213.2 L1914.32 1213.2 L1914.9 1213.2 L1915.49 1213.2 L1916.08 1213.2 L1916.66 1213.2 L1917.25 1213.2 L1917.83 1213.2 L1918.42 1213.2 L1919.01 1213.2 L1919.59 1213.2 L1920.18 1213.2 L1920.77 1213.2 L1921.35 1213.2 L1921.94 1213.2 L1922.53 1213.2 L1923.11 1213.2 L1923.7 1213.2 L1924.29 1213.2 L1924.87 1213.2 L1925.46 1213.2 L1926.04 1213.2 L1926.63 1213.2 L1927.22 1213.2 L1927.8 1213.2 L1928.39 1213.2 L1928.98 1213.2 L1929.56 1213.2 L1930.15 1213.2 L1930.74 1213.2 L1931.32 1213.2 L1931.91 1213.2 L1932.5 1213.2 L1933.08 1213.2 L1933.67 1213.2 L1934.25 1213.2 L1934.84 1213.2 L1935.43 1213.2 L1936.01 1213.2 L1936.6 1213.2 L1937.19 1213.2 L1937.77 1213.2 L1938.36 1213.2 L1938.95 1213.2 L1939.53 1213.2 L1940.12 1213.2 L1940.71 1213.2 L1941.29 1213.2 L1941.88 1213.2 L1942.46 1213.2 L1943.05 1213.2 L1943.64 1213.2 L1944.22 1213.2 L1944.81 1213.2 L1945.4 1213.2 L1945.98 1213.2 L1946.57 1213.2 L1947.16 1213.2 L1947.74 1213.2 L1948.33 1213.2 L1948.91 1213.2 L1949.5 1213.2 L1950.09 1213.2 L1950.67 1213.2 L1951.26 1213.2 L1951.85 1213.2 L1952.43 1213.2 L1953.02 1213.2 L1953.61 1213.2 L1954.19 1213.2 L1954.78 1213.2 L1955.37 1213.2 L1955.95 1213.2 L1956.54 1213.2 L1957.12 1213.2 L1957.71 1213.2 L1958.3 1213.2 L1958.88 1213.2 L1959.47 1213.2 L1960.06 1213.2 L1960.64 1213.2 L1961.23 1213.2 L1961.82 1213.2 L1962.4 1213.2 L1962.99 1213.2 L1963.58 1213.2 L1964.16 1213.2 L1964.75 1213.2 L1965.33 1213.2 L1965.92 1213.2 L1966.51 1213.2 L1967.09 1213.2 L1967.68 1213.2 L1968.27 1213.2 L1968.85 1213.2 L1969.44 1213.2 L1970.03 1213.2 L1970.61 1213.2 L1971.2 1213.2 L1971.78 1213.2 L1972.37 1213.2 L1972.96 1213.2 L1973.54 1213.2 L1974.13 1213.2 L1974.72 1213.2 L1975.3 1213.2 L1975.89 1213.2 L1976.48 1213.2 L1977.06 1213.2 L1977.65 1213.2 L1978.24 1213.2 L1978.82 1213.2 L1979.41 1213.2 L1979.99 1213.2 L1980.58 1213.2 L1981.17 1213.2 L1981.75 1213.2 L1982.34 1213.2 L1982.93 1213.2 L1983.51 1213.2 L1984.1 1213.2 L1984.69 1213.2 L1985.27 1213.2 L1985.86 1213.2 L1986.45 1213.2 L1987.03 1213.2 L1987.62 1213.2 L1988.2 1213.2 L1988.79 1213.2 L1989.38 1213.2 L1989.96 1213.2 L1990.55 1213.2 L1991.14 1213.2 L1991.72 1213.2 L1992.31 1213.2 L1992.9 1213.2 L1993.48 1213.2 L1994.07 1213.2 L1994.65 1213.2 L1995.24 1213.2 L1995.83 1213.2 L1996.41 1213.2 L1997 1213.2 L1997.59 1213.2 L1998.17 1213.2 L1998.76 1213.2 L1999.35 1213.2 L1999.93 1213.2 L2000.52 1213.2 L2001.11 1213.2 L2001.69 1213.2 L2002.28 1213.2 L2002.86 1213.2 L2003.45 1213.2 L2004.04 1213.2 L2004.62 1213.2 L2005.21 1213.2 L2005.8 1213.2 L2006.38 1213.2 L2006.97 1213.2 L2007.56 1213.2 L2008.14 1213.2 L2008.73 1213.2 L2009.32 1213.2 L2009.9 1213.2 L2010.49 1213.2 L2011.07 1213.2 L2011.66 1213.2 L2012.25 1213.2 L2012.83 1213.2 L2013.42 1213.2 L2014.01 1213.2 L2014.59 1213.2 L2015.18 1213.2 L2015.77 1213.2 L2016.35 1213.2 L2016.94 1213.2 L2017.53 1213.2 L2018.11 1213.2 L2018.7 1213.2 L2019.28 1213.2 L2019.87 1213.2 L2020.46 1213.2 L2021.04 1213.2 L2021.63 1213.2 L2022.22 1213.2 L2022.8 1213.2 L2023.39 1213.2 L2023.98 1213.2 L2024.56 1213.2 L2025.15 1213.2 L2025.73 1213.2 L2026.32 1213.2 L2026.91 1213.2 L2027.49 1213.2 L2028.08 1213.2 L2028.67 1213.2 L2029.25 1213.2 L2029.84 1213.2 L2030.43 1213.2 L2031.01 1213.2 L2031.6 1213.2 L2032.19 1213.2 L2032.77 1213.2 L2033.36 1213.2 L2033.94 1213.2 L2034.53 1213.2 L2035.12 1213.2 L2035.7 1213.2 L2036.29 1213.2 L2036.88 1213.2 L2037.46 1213.2 L2038.05 1213.2 L2038.64 1213.2 L2039.22 1213.2 L2039.81 1213.2 L2040.4 1213.2 L2040.98 1213.2 L2041.57 1213.2 L2042.15 1213.2 L2042.74 1213.2 L2043.33 1213.2 L2043.91 1213.2 L2044.5 1213.2 L2045.09 1213.2 L2045.67 1213.2 L2046.26 1213.2 L2046.85 1213.2 L2047.43 1213.2 L2048.02 1213.2 L2048.6 1213.2 L2049.19 1213.2 L2049.78 1213.2 L2050.36 1213.2 L2050.95 1213.2 L2051.54 1213.2 L2052.12 1213.2 L2052.71 1213.2 L2053.3 1213.2 L2053.88 1213.2 L2054.47 1213.2 L2055.06 1213.2 L2055.64 1213.2 L2056.23 1213.2 L2056.81 1213.2 L2057.4 1213.2 L2057.99 1213.2 L2058.57 1213.2 L2059.16 1213.2 L2059.75 1213.2 L2060.33 1213.2 L2060.92 1213.2 L2061.51 1213.2 L2062.09 1213.2 L2062.68 1213.2 L2063.27 1213.2 L2063.85 1213.2 L2064.44 1213.2 L2065.02 1213.2 L2065.61 1213.2 L2066.2 1213.2 L2066.78 1213.2 L2067.37 1213.2 L2067.96 1213.2 L2068.54 1213.2 L2069.13 1213.2 L2069.72 1213.2 L2070.3 1213.2 L2070.89 1213.2 L2071.48 1213.2 L2072.06 1213.2 L2072.65 1213.2 L2073.23 1213.2 L2073.82 1213.2 L2074.41 1213.2 L2074.99 1213.2 L2075.58 1213.2 L2076.17 1213.2 L2076.75 1213.2 L2077.34 1213.2 L2077.93 1213.2 L2078.51 1213.2 L2079.1 1213.2 L2079.68 1213.2 L2080.27 1213.2 L2080.86 1213.2 L2081.44 1213.2 L2082.03 1213.2 L2082.62 1213.2 L2083.2 1213.2 L2083.79 1213.2 L2084.38 1213.2 L2084.96 1213.2 L2085.55 1213.2 L2086.14 1213.2 L2086.72 1213.2 L2087.31 1213.2 L2087.89 1213.2 L2088.48 1213.2 L2089.07 1213.2 L2089.65 1213.2 L2090.24 1213.2 L2090.83 1213.2 L2091.41 1213.2 L2092 1213.2 L2092.59 1213.2 L2093.17 1213.2 L2093.76 1213.2 L2094.35 1213.2 L2094.93 1213.2 L2095.52 1213.2 L2096.1 1213.2 L2096.69 1213.2 L2097.28 1213.2 L2097.86 1213.2 L2098.45 1213.2 L2099.04 1213.2 L2099.62 1213.2 L2100.21 1213.2 L2100.8 1213.2 L2101.38 1213.2 L2101.97 1213.2 L2102.55 1213.2 L2103.14 1213.2 L2103.73 1213.2 L2104.31 1213.2 L2104.9 1213.2 L2105.49 1213.2 L2106.07 1213.2 L2106.66 1213.2 L2107.25 1213.2 L2107.83 1213.2 L2108.42 1213.2 L2109.01 1213.2 L2109.59 1213.2 L2110.18 1213.2 L2110.76 1213.2 L2111.35 1213.2 L2111.94 1213.2 L2112.52 1213.2 L2113.11 1213.2 L2113.7 1213.2 L2114.28 1213.2 L2114.87 1213.2 L2115.46 1213.2 L2116.04 1213.2 L2116.63 1213.2 L2117.22 1213.2 L2117.8 1213.2 L2118.39 1213.2 L2118.97 1213.2 L2119.56 1213.2 L2120.15 1213.2 L2120.73 1213.2 L2121.32 1213.2 L2121.91 1213.2 L2122.49 1213.2 L2123.08 1213.2 L2123.67 1213.2 L2124.25 1213.2 L2124.84 1213.2 L2125.42 1213.2 L2126.01 1213.2 L2126.6 1213.2 L2127.18 1213.2 L2127.77 1213.2 L2128.36 1213.2 L2128.94 1213.2 L2129.53 1213.2 L2130.12 1213.2 L2130.7 1213.2 L2131.29 1213.2 L2131.88 1213.2 L2132.46 1213.2 L2133.05 1213.2 L2133.63 1213.2 L2134.22 1213.2 L2134.81 1213.2 L2135.39 1213.2 L2135.98 1213.2 L2136.57 1213.2 L2137.15 1213.2 L2137.74 1213.2 L2138.33 1213.2 L2138.91 1213.2 L2139.5 1213.2 L2140.09 1213.2 L2140.67 1213.2 L2141.26 1213.2 L2141.84 1213.2 L2142.43 1213.2 L2143.02 1213.2 L2143.6 1213.2 L2144.19 1213.2 L2144.78 1213.2 L2145.36 1213.2 L2145.95 1213.2 L2146.54 1213.2 L2147.12 1213.2 L2147.71 1213.2 L2148.3 1213.2 L2148.88 1213.2 L2149.47 1213.2 L2150.05 1213.2 L2150.64 1213.2 L2151.23 1213.2 L2151.81 1213.2 L2152.4 1213.2 L2152.99 1213.2 L2153.57 1213.2 L2154.16 1213.2 L2154.75 1213.2 L2155.33 1213.2 L2155.92 1213.2 L2156.5 1213.2 L2157.09 1213.2 L2157.68 1213.2 L2158.26 1213.2 L2158.26 1212.49 L2157.68 1212.49 L2157.09 1212.49 L2156.5 1212.49 L2155.92 1212.49 L2155.33 1212.49 L2154.75 1212.49 L2154.16 1212.49 L2153.57 1212.49 L2152.99 1212.49 L2152.4 1212.49 L2151.81 1212.49 L2151.23 1212.49 L2150.64 1212.49 L2150.05 1212.49 L2149.47 1212.49 L2148.88 1212.49 L2148.3 1212.49 L2147.71 1212.49 L2147.12 1212.49 L2146.54 1212.49 L2145.95 1212.49 L2145.36 1212.49 L2144.78 1212.49 L2144.19 1212.49 L2143.6 1212.49 L2143.02 1212.49 L2142.43 1212.49 L2141.84 1212.49 L2141.26 1212.49 L2140.67 1212.49 L2140.09 1212.49 L2139.5 1212.49 L2138.91 1212.49 L2138.33 1212.49 L2137.74 1212.49 L2137.15 1212.49 L2136.57 1212.49 L2135.98 1212.49 L2135.39 1212.49 L2134.81 1212.49 L2134.22 1212.49 L2133.63 1212.49 L2133.05 1212.49 L2132.46 1212.49 L2131.88 1212.49 L2131.29 1212.49 L2130.7 1212.49 L2130.12 1212.49 L2129.53 1212.49 L2128.94 1212.49 L2128.36 1212.49 L2127.77 1212.49 L2127.18 1212.49 L2126.6 1212.49 L2126.01 1212.49 L2125.42 1212.49 L2124.84 1212.49 L2124.25 1212.49 L2123.67 1212.49 L2123.08 1212.49 L2122.49 1212.49 L2121.91 1212.49 L2121.32 1212.49 L2120.73 1212.49 L2120.15 1212.49 L2119.56 1212.49 L2118.97 1212.49 L2118.39 1212.49 L2117.8 1212.49 L2117.22 1212.49 L2116.63 1212.49 L2116.04 1212.49 L2115.46 1212.49 L2114.87 1212.49 L2114.28 1212.49 L2113.7 1212.49 L2113.11 1212.49 L2112.52 1212.49 L2111.94 1212.49 L2111.35 1212.49 L2110.76 1212.49 L2110.18 1212.49 L2109.59 1212.49 L2109.01 1212.49 L2108.42 1212.49 L2107.83 1212.49 L2107.25 1212.49 L2106.66 1212.49 L2106.07 1212.49 L2105.49 1212.49 L2104.9 1212.49 L2104.31 1212.49 L2103.73 1212.49 L2103.14 1212.49 L2102.55 1212.49 L2101.97 1212.49 L2101.38 1212.49 L2100.8 1212.49 L2100.21 1212.49 L2099.62 1212.49 L2099.04 1212.49 L2098.45 1212.49 L2097.86 1212.49 L2097.28 1212.49 L2096.69 1212.49 L2096.1 1212.49 L2095.52 1212.49 L2094.93 1212.49 L2094.35 1212.49 L2093.76 1212.49 L2093.17 1212.49 L2092.59 1212.49 L2092 1212.49 L2091.41 1212.49 L2090.83 1212.49 L2090.24 1212.49 L2089.65 1212.49 L2089.07 1212.49 L2088.48 1212.49 L2087.89 1212.49 L2087.31 1212.49 L2086.72 1212.49 L2086.14 1212.49 L2085.55 1212.49 L2084.96 1212.49 L2084.38 1212.49 L2083.79 1212.49 L2083.2 1212.49 L2082.62 1212.49 L2082.03 1212.49 L2081.44 1212.49 L2080.86 1212.49 L2080.27 1212.49 L2079.68 1212.49 L2079.1 1212.49 L2078.51 1212.49 L2077.93 1212.49 L2077.34 1212.49 L2076.75 1212.49 L2076.17 1212.49 L2075.58 1212.49 L2074.99 1212.49 L2074.41 1212.49 L2073.82 1212.49 L2073.23 1212.49 L2072.65 1212.49 L2072.06 1212.49 L2071.48 1212.49 L2070.89 1212.49 L2070.3 1212.49 L2069.72 1212.49 L2069.13 1212.49 L2068.54 1212.49 L2067.96 1212.49 L2067.37 1212.49 L2066.78 1212.49 L2066.2 1212.49 L2065.61 1212.49 L2065.02 1212.49 L2064.44 1212.49 L2063.85 1212.49 L2063.27 1212.49 L2062.68 1212.49 L2062.09 1212.49 L2061.51 1212.49 L2060.92 1212.49 L2060.33 1212.49 L2059.75 1212.49 L2059.16 1212.49 L2058.57 1212.49 L2057.99 1212.49 L2057.4 1212.49 L2056.81 1212.49 L2056.23 1212.49 L2055.64 1212.49 L2055.06 1212.49 L2054.47 1212.49 L2053.88 1212.49 L2053.3 1212.49 L2052.71 1212.49 L2052.12 1212.49 L2051.54 1212.49 L2050.95 1212.49 L2050.36 1212.49 L2049.78 1212.49 L2049.19 1212.49 L2048.6 1212.49 L2048.02 1212.49 L2047.43 1212.49 L2046.85 1212.49 L2046.26 1212.49 L2045.67 1212.49 L2045.09 1212.49 L2044.5 1212.49 L2043.91 1212.49 L2043.33 1212.49 L2042.74 1212.49 L2042.15 1212.49 L2041.57 1212.49 L2040.98 1212.49 L2040.4 1212.49 L2039.81 1212.49 L2039.22 1212.49 L2038.64 1212.49 L2038.05 1212.49 L2037.46 1212.49 L2036.88 1212.49 L2036.29 1212.49 L2035.7 1212.49 L2035.12 1212.49 L2034.53 1212.49 L2033.94 1212.49 L2033.36 1212.49 L2032.77 1212.49 L2032.19 1212.49 L2031.6 1212.49 L2031.01 1212.49 L2030.43 1212.49 L2029.84 1212.49 L2029.25 1212.49 L2028.67 1212.49 L2028.08 1212.49 L2027.49 1212.49 L2026.91 1212.49 L2026.32 1212.49 L2025.73 1212.49 L2025.15 1212.49 L2024.56 1212.49 L2023.98 1212.49 L2023.39 1212.49 L2022.8 1212.49 L2022.22 1212.49 L2021.63 1212.49 L2021.04 1212.49 L2020.46 1212.49 L2019.87 1212.49 L2019.28 1212.49 L2018.7 1212.49 L2018.11 1212.49 L2017.53 1212.49 L2016.94 1212.49 L2016.35 1212.49 L2015.77 1212.49 L2015.18 1212.49 L2014.59 1212.49 L2014.01 1212.49 L2013.42 1212.49 L2012.83 1212.49 L2012.25 1212.49 L2011.66 1212.49 L2011.07 1212.49 L2010.49 1212.49 L2009.9 1212.49 L2009.32 1212.49 L2008.73 1212.49 L2008.14 1212.49 L2007.56 1212.49 L2006.97 1212.49 L2006.38 1212.49 L2005.8 1212.49 L2005.21 1212.49 L2004.62 1212.49 L2004.04 1212.49 L2003.45 1212.49 L2002.86 1212.49 L2002.28 1212.49 L2001.69 1212.49 L2001.11 1212.49 L2000.52 1212.49 L1999.93 1212.49 L1999.35 1212.49 L1998.76 1212.49 L1998.17 1212.49 L1997.59 1212.49 L1997 1212.49 L1996.41 1212.49 L1995.83 1212.49 L1995.24 1212.49 L1994.65 1212.49 L1994.07 1212.49 L1993.48 1212.49 L1992.9 1212.49 L1992.31 1212.49 L1991.72 1212.49 L1991.14 1212.49 L1990.55 1212.49 L1989.96 1212.49 L1989.38 1212.49 L1988.79 1212.49 L1988.2 1212.49 L1987.62 1212.49 L1987.03 1212.49 L1986.45 1212.49 L1985.86 1212.49 L1985.27 1212.49 L1984.69 1212.49 L1984.1 1212.49 L1983.51 1212.49 L1982.93 1212.49 L1982.34 1212.49 L1981.75 1212.49 L1981.17 1212.49 L1980.58 1212.49 L1979.99 1212.49 L1979.41 1212.49 L1978.82 1212.49 L1978.24 1212.49 L1977.65 1212.49 L1977.06 1212.49 L1976.48 1212.49 L1975.89 1212.49 L1975.3 1212.49 L1974.72 1212.49 L1974.13 1212.49 L1973.54 1212.49 L1972.96 1212.49 L1972.37 1212.49 L1971.78 1212.49 L1971.2 1212.49 L1970.61 1212.49 L1970.03 1212.49 L1969.44 1212.49 L1968.85 1212.49 L1968.27 1212.49 L1967.68 1212.49 L1967.09 1212.49 L1966.51 1212.49 L1965.92 1212.49 L1965.33 1212.49 L1964.75 1212.49 L1964.16 1212.49 L1963.58 1212.49 L1962.99 1212.49 L1962.4 1212.49 L1961.82 1212.49 L1961.23 1212.49 L1960.64 1212.49 L1960.06 1212.49 L1959.47 1212.49 L1958.88 1212.49 L1958.3 1212.49 L1957.71 1212.49 L1957.12 1212.49 L1956.54 1212.49 L1955.95 1212.49 L1955.37 1212.49 L1954.78 1212.49 L1954.19 1212.49 L1953.61 1212.49 L1953.02 1212.49 L1952.43 1212.49 L1951.85 1212.49 L1951.26 1212.49 L1950.67 1212.49 L1950.09 1212.49 L1949.5 1212.49 L1948.91 1212.49 L1948.33 1212.49 L1947.74 1212.49 L1947.16 1212.49 L1946.57 1212.49 L1945.98 1212.49 L1945.4 1212.49 L1944.81 1212.49 L1944.22 1212.49 L1943.64 1212.49 L1943.05 1212.49 L1942.46 1212.49 L1941.88 1212.49 L1941.29 1212.49 L1940.71 1212.49 L1940.12 1212.49 L1939.53 1212.49 L1938.95 1212.49 L1938.36 1212.49 L1937.77 1212.49 L1937.19 1212.49 L1936.6 1212.49 L1936.01 1212.49 L1935.43 1212.49 L1934.84 1212.49 L1934.25 1212.49 L1933.67 1212.49 L1933.08 1212.49 L1932.5 1212.49 L1931.91 1212.49 L1931.32 1212.49 L1930.74 1212.49 L1930.15 1212.49 L1929.56 1212.49 L1928.98 1212.49 L1928.39 1212.49 L1927.8 1212.49 L1927.22 1212.49 L1926.63 1212.49 L1926.04 1212.49 L1925.46 1212.49 L1924.87 1212.49 L1924.29 1212.49 L1923.7 1212.49 L1923.11 1212.49 L1922.53 1212.49 L1921.94 1212.49 L1921.35 1212.49 L1920.77 1212.49 L1920.18 1212.49 L1919.59 1212.49 L1919.01 1212.49 L1918.42 1212.49 L1917.83 1212.49 L1917.25 1212.49 L1916.66 1212.49 L1916.08 1212.49 L1915.49 1212.49 L1914.9 1212.49 L1914.32 1212.49 L1913.73 1212.49 L1913.14 1212.49 L1912.56 1212.49 L1911.97 1212.49 L1911.38 1212.49 L1910.8 1212.49 L1910.21 1212.49 L1909.63 1212.49 L1909.04 1212.49 L1908.45 1212.49 L1907.87 1212.49 L1907.28 1212.49 L1906.69 1212.49 L1906.11 1212.49 L1905.52 1212.49 L1904.93 1212.49 L1904.35 1212.49 L1903.76 1212.49 L1903.17 1212.49 L1902.59 1212.49 L1902 1212.49 L1901.42 1212.49 L1900.83 1212.49 L1900.24 1212.49 L1899.66 1212.49 L1899.07 1212.49 L1898.48 1212.49 L1897.9 1212.49 L1897.31 1212.49 L1896.72 1212.49 L1896.14 1212.49 L1895.55 1212.49 L1894.96 1212.49 L1894.38 1212.49 L1893.79 1212.49 L1893.21 1212.49 L1892.62 1212.49 L1892.03 1212.49 L1891.45 1212.49 L1890.86 1212.49 L1890.27 1212.49 L1889.69 1212.49 L1889.1 1212.49 L1888.51 1212.49 L1887.93 1212.49 L1887.34 1212.49 L1886.76 1212.49 L1886.17 1212.49 L1885.58 1212.49 L1885 1212.49 L1884.41 1212.49 L1883.82 1212.49 L1883.24 1212.49 L1882.65 1212.49 L1882.06 1212.49 L1881.48 1212.49 L1880.89 1212.49 L1880.3 1212.49 L1879.72 1212.49 L1879.13 1212.49 L1878.55 1212.49 L1877.96 1212.49 L1877.37 1212.49 L1876.79 1212.49 L1876.2 1212.49 L1875.61 1212.49 L1875.03 1212.49 L1874.44 1212.49 L1873.85 1212.49 L1873.27 1212.49 L1872.68 1212.49 L1872.09 1212.49 L1871.51 1212.49 L1870.92 1212.49 L1870.34 1212.49 L1869.75 1212.49 L1869.16 1212.49 L1868.58 1212.49 L1867.99 1212.49 L1867.4 1212.49 L1866.82 1212.49 L1866.23 1212.49 L1865.64 1212.49 L1865.06 1212.49 L1864.47 1212.49 L1863.88 1212.49 L1863.3 1212.49 L1862.71 1212.49 L1862.13 1212.49 L1861.54 1212.49 L1860.95 1212.49 L1860.37 1212.49 L1859.78 1212.49 L1859.19 1212.49 L1858.61 1212.49 L1858.02 1212.49 L1857.43 1212.49 L1856.85 1212.49 L1856.26 1212.49 L1855.68 1212.49 L1855.09 1212.49 L1854.5 1212.49 L1853.92 1212.49 L1853.33 1212.49 L1852.74 1212.49 L1852.16 1212.49 L1851.57 1212.49 L1850.98 1212.49 L1850.4 1212.49 L1849.81 1212.49 L1849.22 1212.49 L1848.64 1212.49 L1848.05 1212.49 L1847.47 1212.49 L1846.88 1212.49 L1846.29 1212.49 L1845.71 1212.49 L1845.12 1212.49 L1844.53 1212.49 L1843.95 1212.49 L1843.36 1212.49 L1842.77 1212.49 L1842.19 1212.49 L1841.6 1212.49 L1841.01 1212.49 L1840.43 1212.49 L1839.84 1212.49 L1839.26 1212.49 L1838.67 1212.49 L1838.08 1212.49 L1837.5 1212.49 L1836.91 1212.49 L1836.32 1212.49 L1835.74 1212.49 L1835.15 1212.49 L1834.56 1212.49 L1833.98 1212.49 L1833.39 1212.49 L1832.81 1212.49 L1832.22 1212.49 L1831.63 1212.49 L1831.05 1212.49 L1830.46 1212.49 L1829.87 1212.49 L1829.29 1212.49 L1828.7 1212.49 L1828.11 1212.49 L1827.53 1212.49 L1826.94 1212.49 L1826.35 1212.49 L1825.77 1212.49 L1825.18 1212.49 L1824.6 1212.49 L1824.01 1212.49 L1823.42 1212.49 L1822.84 1212.49 L1822.25 1212.49 L1821.66 1212.49 L1821.08 1212.49 L1820.49 1212.49 L1819.9 1212.49 L1819.32 1212.49 L1818.73 1212.49 L1818.14 1212.49 L1817.56 1212.49 L1816.97 1212.49 L1816.39 1212.49 L1815.8 1212.49 L1815.21 1212.49 L1814.63 1212.49 L1814.04 1212.49 L1813.45 1212.49 L1812.87 1212.49 L1812.28 1212.49 L1811.69 1212.49 L1811.11 1212.49 L1810.52 1212.49 L1809.94 1212.49 L1809.35 1212.49 L1808.76 1212.49 L1808.18 1212.49 L1807.59 1212.49 L1807 1212.49 L1806.42 1212.49 L1805.83 1212.49 L1805.24 1212.49 L1804.66 1212.49 L1804.07 1212.49 L1803.48 1212.49 L1802.9 1212.49 L1802.31 1212.49 L1801.73 1212.49 L1801.14 1212.49 L1800.55 1212.49 L1799.97 1212.49 L1799.38 1212.49 L1798.79 1212.49 L1798.21 1212.49 L1797.62 1212.49 L1797.03 1212.49 L1796.45 1212.49 L1795.86 1212.49 L1795.27 1212.49 L1794.69 1212.49 L1794.1 1212.49 L1793.52 1212.49 L1792.93 1212.49 L1792.34 1212.49 L1791.76 1212.49 L1791.17 1212.49 L1790.58 1212.49 L1790 1212.49 L1789.41 1212.49 L1788.82 1212.49 L1788.24 1212.49 L1787.65 1212.49 L1787.06 1212.49 L1786.48 1212.49 L1785.89 1212.49 L1785.31 1212.49 L1784.72 1212.49 L1784.13 1212.49 L1783.55 1212.49 L1782.96 1212.49 L1782.37 1212.49 L1781.79 1212.49 L1781.2 1212.49 L1780.61 1212.49 L1780.03 1212.49 L1779.44 1212.49 L1778.86 1212.49 L1778.27 1212.49 L1777.68 1212.49 L1777.1 1212.49 L1776.51 1212.49 L1775.92 1212.49 L1775.34 1212.49 L1774.75 1212.49 L1774.16 1212.49 L1773.58 1212.49 L1772.99 1212.49 L1772.4 1212.49 L1771.82 1212.49 L1771.23 1212.49 L1770.65 1212.49 L1770.06 1212.49 L1769.47 1212.49 L1768.89 1212.49 L1768.3 1212.49 L1767.71 1212.49 L1767.13 1212.49 L1766.54 1212.49 L1765.95 1212.49 L1765.37 1212.49 L1764.78 1212.49 L1764.19 1212.49 L1763.61 1212.49 L1763.02 1212.49 L1762.44 1212.49 L1761.85 1212.49 L1761.26 1212.49 L1760.68 1212.49 L1760.09 1212.49 L1759.5 1212.49 L1758.92 1212.49 L1758.33 1212.49 L1757.74 1212.49 L1757.16 1212.49 L1756.57 1212.49 L1755.99 1212.49 L1755.4 1212.49 L1754.81 1212.49 L1754.23 1212.49 L1753.64 1212.49 L1753.05 1212.49 L1752.47 1212.49 L1751.88 1212.49 L1751.29 1212.49 L1750.71 1212.49 L1750.12 1212.49 L1749.53 1212.49 L1748.95 1212.49 L1748.36 1212.49 L1747.78 1212.49 L1747.19 1212.49 L1746.6 1212.49 L1746.02 1212.49 L1745.43 1212.49 L1744.84 1212.49 L1744.26 1212.49 L1743.67 1212.49 L1743.08 1212.49 L1742.5 1212.49 L1741.91 1212.49 L1741.32 1212.49 L1740.74 1212.49 L1740.15 1212.49 L1739.57 1212.49 L1738.98 1212.49 L1738.39 1212.49 L1737.81 1212.49 L1737.22 1212.49 L1736.63 1212.49 L1736.05 1212.49 L1735.46 1212.49 L1734.87 1212.49 L1734.29 1212.49 L1733.7 1212.49 L1733.11 1212.49 L1732.53 1212.49 L1731.94 1212.49 L1731.36 1212.49 L1730.77 1212.49 L1730.18 1212.49 L1729.6 1212.49 L1729.01 1212.49 L1728.42 1212.49 L1727.84 1212.49 L1727.25 1212.49 L1726.66 1212.49 L1726.08 1212.49 L1725.49 1212.49 L1724.91 1212.49 L1724.32 1212.49 L1723.73 1212.49 L1723.15 1212.49 L1722.56 1212.49 L1721.97 1212.49 L1721.39 1212.49 L1720.8 1212.49 L1720.21 1212.49 L1719.63 1212.49 L1719.04 1212.49 L1718.45 1212.49 L1717.87 1212.49 L1717.28 1212.49 L1716.7 1212.49 L1716.11 1212.49 L1715.52 1212.49 L1714.94 1212.49 L1714.35 1212.49 L1713.76 1212.49 L1713.18 1212.49 L1712.59 1212.49 L1712 1212.49 L1711.42 1212.49 L1710.83 1212.49 L1710.24 1212.49 L1709.66 1212.49 L1709.07 1212.49 L1708.49 1212.49 L1707.9 1212.49 L1707.31 1212.49 L1706.73 1212.49 L1706.14 1212.49 L1705.55 1212.49 L1704.97 1212.49 L1704.38 1212.49 L1703.79 1212.49 L1703.21 1212.49 L1702.62 1212.49 L1702.04 1212.49 L1701.45 1212.49 L1700.86 1212.49 L1700.28 1212.49 L1699.69 1212.49 L1699.1 1212.49 L1698.52 1212.49 L1697.93 1212.49 L1697.34 1212.49 L1696.76 1212.49 L1696.17 1212.49 L1695.58 1212.49 L1695 1212.49 L1694.41 1212.49 L1693.83 1212.49 L1693.24 1212.49 L1692.65 1212.49 L1692.07 1212.49 L1691.48 1212.49 L1690.89 1212.49 L1690.31 1212.49 L1689.72 1212.49 L1689.13 1212.49 L1688.55 1212.49 L1687.96 1212.49 L1687.37 1212.49 L1686.79 1212.49 L1686.2 1212.49 L1685.62 1212.49 L1685.03 1212.49 L1684.44 1212.49 L1683.86 1212.49 L1683.27 1212.49 L1682.68 1212.49 L1682.1 1212.49 L1681.51 1212.49 L1680.92 1212.49 L1680.34 1212.49 L1679.75 1212.49 L1679.17 1212.49 L1678.58 1212.49 L1677.99 1212.49 L1677.41 1212.49 L1676.82 1212.49 L1676.23 1212.49 L1675.65 1212.49 L1675.06 1212.49 L1674.47 1212.49 L1673.89 1212.49 L1673.3 1212.49 L1672.71 1212.49 L1672.13 1212.49 L1671.54 1212.49 L1670.96 1212.49 L1670.37 1212.49 L1669.78 1212.49 L1669.2 1212.49 L1668.61 1212.49 L1668.02 1212.49 L1667.44 1212.49 L1666.85 1212.49 L1666.26 1212.49 L1665.68 1212.49 L1665.09 1212.49 L1664.5 1212.49 L1663.92 1212.49 L1663.33 1212.49 L1662.75 1212.49 L1662.16 1212.49 L1661.57 1212.49 L1660.99 1212.49 L1660.4 1212.49 L1659.81 1212.49 L1659.23 1212.49 L1658.64 1212.49 L1658.05 1212.49 L1657.47 1212.49 L1656.88 1212.49 L1656.29 1212.49 L1655.71 1212.49 L1655.12 1212.49 L1654.54 1212.49 L1653.95 1212.49 L1653.36 1212.49 L1652.78 1212.49 L1652.19 1212.49 L1651.6 1212.49 L1651.02 1212.49 L1650.43 1212.49 L1649.84 1212.49 L1649.26 1212.49 L1648.67 1212.49 L1648.09 1212.49 L1647.5 1212.49 L1646.91 1212.49 L1646.33 1212.49 L1645.74 1212.49 L1645.15 1212.49 L1644.57 1212.49 L1643.98 1212.49 L1643.39 1212.49 L1642.81 1212.49 L1642.22 1212.49 L1641.63 1212.49 L1641.05 1212.49 L1640.46 1212.49 L1639.88 1212.49 L1639.29 1212.49 L1638.7 1212.49 L1638.12 1212.49 L1637.53 1212.49 L1636.94 1212.49 L1636.36 1212.49 L1635.77 1212.49 L1635.18 1212.49 L1634.6 1212.49 L1634.01 1212.49 L1633.42 1212.49 L1632.84 1212.49 L1632.25 1212.49 L1631.67 1212.49 L1631.08 1212.49 L1630.49 1212.49 L1629.91 1212.49 L1629.32 1212.49 L1628.73 1212.49 L1628.15 1212.49 L1627.56 1212.49 L1626.97 1212.49 L1626.39 1212.49 L1625.8 1212.49 L1625.22 1212.49 L1624.63 1212.49 L1624.04 1212.49 L1623.46 1212.49 L1622.87 1212.49 L1622.28 1212.49 L1621.7 1212.49 L1621.11 1212.49 L1620.52 1212.49 L1619.94 1212.49 L1619.35 1212.49 L1618.76 1212.49 L1618.18 1212.49 L1617.59 1212.49 L1617.01 1212.49 L1616.42 1212.49 L1615.83 1212.49 L1615.25 1212.49 L1614.66 1212.49 L1614.07 1212.49 L1613.49 1212.49 L1612.9 1212.49 L1612.31 1212.49 L1611.73 1212.49 L1611.14 1212.49 L1610.55 1212.49 L1609.97 1212.49 L1609.38 1212.49 L1608.8 1212.49 L1608.21 1212.49 L1607.62 1212.49 L1607.04 1212.49 L1606.45 1212.49 L1605.86 1212.49 L1605.28 1212.49 L1604.69 1212.49 L1604.1 1212.49 L1603.52 1212.49 L1602.93 1212.49 L1602.34 1212.49 L1601.76 1212.49 L1601.17 1212.49 L1600.59 1212.49 L1600 1212.49 L1599.41 1212.49 L1598.83 1212.49 L1598.24 1212.49 L1597.65 1212.49 L1597.07 1212.49 L1596.48 1212.49 L1595.89 1212.49 L1595.31 1212.49 L1594.72 1212.49 L1594.14 1212.49 L1593.55 1212.49 L1592.96 1212.49 L1592.38 1212.49 L1591.79 1212.49 L1591.2 1212.49 L1590.62 1212.49 L1590.03 1212.49 L1589.44 1212.49 L1588.86 1212.49 L1588.27 1212.49 L1587.68 1212.49 L1587.1 1212.49 L1586.51 1212.49 L1585.93 1212.49 L1585.34 1212.49 L1584.75 1212.49 L1584.17 1212.49 L1583.58 1212.49 L1582.99 1212.49 L1582.41 1212.49 L1581.82 1212.49 L1581.23 1212.49 L1580.65 1212.49 L1580.06 1212.49 L1579.47 1212.49 L1578.89 1212.49 L1578.3 1212.49 L1577.72 1212.49 L1577.13 1212.49 L1576.54 1212.49 L1575.96 1212.49 L1575.37 1212.49 L1574.78 1212.49 L1574.2 1212.49 L1573.61 1212.49 L1573.02 1212.49 L1572.44 1212.49 L1571.85 1212.49 L1571.27 1212.49 L1570.68 1212.49 L1570.09 1212.49 L1569.51 1212.49 L1568.92 1212.49 L1568.33 1212.49 L1567.75 1212.49 L1567.16 1212.49 L1566.57 1212.49 L1565.99 1212.49 L1565.4 1212.49 L1564.81 1212.49 L1564.23 1212.49 L1563.64 1212.49 L1563.06 1212.49 L1562.47 1212.49 L1561.88 1212.49 L1561.3 1212.49 L1560.71 1212.49 L1560.12 1212.49 L1559.54 1212.49 L1558.95 1212.49 L1558.36 1212.49 L1557.78 1212.49 L1557.19 1212.49 L1556.6 1212.49 L1556.02 1212.49 L1555.43 1212.49 L1554.85 1212.49 L1554.26 1212.49 L1553.67 1212.49 L1553.09 1212.49 L1552.5 1212.49 L1551.91 1212.49 L1551.33 1212.49 L1550.74 1212.49 L1550.15 1212.49 L1549.57 1212.49 L1548.98 1212.49 L1548.4 1212.49 L1547.81 1212.49 L1547.22 1212.49 L1546.64 1212.49 L1546.05 1212.49 L1545.46 1212.49 L1544.88 1212.49 L1544.29 1212.49 L1543.7 1212.49 L1543.12 1212.49 L1542.53 1212.49 L1541.94 1212.49 L1541.36 1212.49 L1540.77 1212.49 L1540.19 1212.49 L1539.6 1212.49 L1539.01 1212.49 L1538.43 1212.49 L1537.84 1212.49 L1537.25 1212.49 L1536.67 1212.49 L1536.08 1212.49 L1535.49 1212.49 L1534.91 1212.49 L1534.32 1212.49 L1533.73 1212.49 L1533.15 1212.49 L1532.56 1212.49 L1531.98 1212.49 L1531.39 1212.49 L1530.8 1212.49 L1530.22 1212.49 L1529.63 1212.49 L1529.04 1212.49 L1528.46 1212.49 L1527.87 1212.49 L1527.28 1212.49 L1526.7 1212.49 L1526.11 1212.49 L1525.52 1212.49 L1524.94 1212.49 L1524.35 1212.49 L1523.77 1212.49 L1523.18 1212.49 L1522.59 1212.49 L1522.01 1212.49 L1521.42 1212.49 L1520.83 1212.49 L1520.25 1212.49 L1519.66 1212.49 L1519.07 1212.49 L1518.49 1212.49 L1517.9 1212.49 L1517.32 1212.49 L1516.73 1212.49 L1516.14 1212.49 L1515.56 1212.49 L1514.97 1212.49 L1514.38 1212.49 L1513.8 1212.49 L1513.21 1212.49 L1512.62 1212.49 L1512.04 1212.49 L1511.45 1212.49 L1510.86 1212.49 L1510.28 1212.49 L1509.69 1212.49 L1509.11 1212.49 L1508.52 1212.49 L1507.93 1212.49 L1507.35 1212.49 L1506.76 1212.49 L1506.17 1212.49 L1505.59 1212.49 L1505 1212.49 L1504.41 1212.49 L1503.83 1212.49 L1503.24 1212.49 L1502.65 1212.49 L1502.07 1212.49 L1501.48 1212.49 L1500.9 1212.49 L1500.31 1212.49 L1499.72 1212.49 L1499.14 1212.49 L1498.55 1212.49 L1497.96 1212.49 L1497.38 1212.49 L1496.79 1212.49 L1496.2 1212.49 L1495.62 1212.49 L1495.03 1212.49 L1494.45 1212.49 L1493.86 1212.49 L1493.27 1212.49 L1492.69 1212.49 L1492.1 1212.49 L1491.51 1212.49 L1490.93 1212.49 L1490.34 1212.49 L1489.75 1212.49 L1489.17 1212.49 L1488.58 1212.49 L1487.99 1212.49 L1487.41 1212.49 L1486.82 1212.49 L1486.24 1212.49 L1485.65 1212.49 L1485.06 1212.49 L1484.48 1212.49 L1483.89 1212.49 L1483.3 1212.49 L1482.72 1212.49 L1482.13 1212.49 L1481.54 1212.49 L1480.96 1212.49 L1480.37 1212.49 L1479.78 1212.49 L1479.2 1212.49 L1478.61 1212.49 L1478.03 1212.49 L1477.44 1212.49 L1476.85 1212.49 L1476.27 1212.49 L1475.68 1212.49 L1475.09 1212.49 L1474.51 1212.49 L1473.92 1212.49 L1473.33 1212.49 L1472.75 1212.49 L1472.16 1212.49 L1471.57 1212.49 L1470.99 1212.49 L1470.4 1212.49 L1469.82 1212.49 L1469.23 1212.49 L1468.64 1212.49 L1468.06 1212.49 L1467.47 1212.49 L1466.88 1212.49 L1466.3 1212.49 L1465.71 1212.49 L1465.12 1212.49 L1464.54 1212.49 L1463.95 1212.49 L1463.37 1212.49 L1462.78 1212.49 L1462.19 1212.49 L1461.61 1212.49 L1461.02 1212.49 L1460.43 1212.49 L1459.85 1212.49 L1459.26 1212.49 L1458.67 1212.49 L1458.09 1212.49 L1457.5 1212.49 L1456.91 1212.49 L1456.33 1212.49 L1455.74 1212.49 L1455.16 1212.49 L1454.57 1212.49 L1453.98 1212.49 L1453.4 1212.49 L1452.81 1212.49 L1452.22 1212.49 L1451.64 1212.49 L1451.05 1212.49 L1450.46 1212.49 L1449.88 1212.49 L1449.29 1212.49 L1448.7 1212.49 L1448.12 1212.49 L1447.53 1212.49 L1446.95 1212.49 L1446.36 1212.49 L1445.77 1212.49 L1445.19 1212.49 L1444.6 1212.49 L1444.01 1212.49 L1443.43 1212.49 L1442.84 1212.49 L1442.25 1212.49 L1441.67 1212.49 L1441.08 1212.49 L1440.5 1212.49 L1439.91 1212.49 L1439.32 1212.49 L1438.74 1212.49 L1438.15 1212.49 L1437.56 1212.49 L1436.98 1212.49 L1436.39 1212.49 L1435.8 1212.49 L1435.22 1212.49 L1434.63 1212.49 L1434.04 1212.49 L1433.46 1212.49 L1432.87 1212.49 L1432.29 1212.49 L1431.7 1212.49 L1431.11 1212.49 L1430.53 1212.49 L1429.94 1212.49 L1429.35 1212.49 L1428.77 1212.49 L1428.18 1212.49 L1427.59 1212.49 L1427.01 1212.49 L1426.42 1212.49 L1425.83 1212.49 L1425.25 1212.49 L1424.66 1212.49 L1424.08 1212.49 L1423.49 1212.49 L1422.9 1212.49 L1422.32 1212.49 L1421.73 1212.49 L1421.14 1212.49 L1420.56 1212.49 L1419.97 1212.49 L1419.38 1212.49 L1418.8 1212.49 L1418.21 1212.49 L1417.63 1212.49 L1417.04 1212.49 L1416.45 1212.49 L1415.87 1212.49 L1415.28 1212.49 L1414.69 1212.49 L1414.11 1212.49 L1413.52 1212.49 L1412.93 1212.49 L1412.35 1212.49 L1411.76 1212.49 L1411.17 1212.49 L1410.59 1212.49 L1410 1212.49 L1409.42 1212.49 L1408.83 1212.49 L1408.24 1212.49 L1407.66 1212.49 L1407.07 1212.49 L1406.48 1212.49 L1405.9 1212.49 L1405.31 1212.49 L1404.72 1212.49 L1404.14 1212.49 L1403.55 1212.49 L1402.96 1212.49 L1402.38 1212.49 L1401.79 1212.49 L1401.21 1212.49 L1400.62 1212.49 L1400.03 1212.49 L1399.45 1212.49 L1398.86 1212.49 L1398.27 1212.49 L1397.69 1212.49 L1397.1 1212.49 L1396.51 1212.49 L1395.93 1212.49 L1395.34 1212.49 L1394.75 1212.49 L1394.17 1212.49 L1393.58 1212.49 L1393 1212.49 L1392.41 1212.49 L1391.82 1212.49 L1391.24 1212.49 L1390.65 1212.49 L1390.06 1212.49 L1389.48 1212.49 L1388.89 1212.49 L1388.3 1212.49 L1387.72 1212.49 L1387.13 1212.49 L1386.55 1212.49 L1385.96 1212.49 L1385.37 1212.49 L1384.79 1212.49 L1384.2 1212.49 L1383.61 1212.49 L1383.03 1212.49 L1382.44 1212.49 L1381.85 1212.49 L1381.27 1212.49 L1380.68 1212.49 L1380.09 1212.49 L1379.51 1212.49 L1378.92 1212.49 L1378.34 1212.49 L1377.75 1212.49 L1377.16 1212.49 L1376.58 1212.49 L1375.99 1212.49 L1375.4 1212.49 L1374.82 1212.49 L1374.23 1212.49 L1373.64 1212.49 L1373.06 1212.49 L1372.47 1212.49 L1371.88 1212.49 L1371.3 1212.49 L1370.71 1212.49 L1370.13 1212.49 L1369.54 1212.49 L1368.95 1212.49 L1368.37 1212.49 L1367.78 1212.49 L1367.19 1212.49 L1366.61 1212.49 L1366.02 1212.49 L1365.43 1212.49 L1364.85 1212.49 L1364.26 1212.49 L1363.68 1212.49 L1363.09 1212.49 L1362.5 1212.49 L1361.92 1212.49 L1361.33 1212.49 L1360.74 1212.49 L1360.16 1212.49 L1359.57 1212.49 L1358.98 1212.49 L1358.4 1212.49 L1357.81 1212.49 L1357.22 1212.49 L1356.64 1212.49 L1356.05 1212.49 L1355.47 1212.49 L1354.88 1212.49 L1354.29 1212.49 L1353.71 1212.49 L1353.12 1212.49 L1352.53 1212.49 L1351.95 1212.49 L1351.36 1212.49 L1350.77 1212.49 L1350.19 1212.49 L1349.6 1212.49 L1349.01 1212.49 L1348.43 1212.49 L1347.84 1212.49 L1347.26 1212.49 L1346.67 1212.49 L1346.08 1212.49 L1345.5 1212.49 L1344.91 1212.49 L1344.32 1212.49 L1343.74 1212.49 L1343.15 1212.49 L1342.56 1212.49 L1341.98 1212.49 L1341.39 1212.49 L1340.8 1212.49 L1340.22 1212.49 L1339.63 1212.49 L1339.05 1212.49 L1338.46 1212.49 L1337.87 1212.49 L1337.29 1212.49 L1336.7 1212.49 L1336.11 1212.49 L1335.53 1212.49 L1334.94 1212.49 L1334.35 1212.49 L1333.77 1212.49 L1333.18 1212.49 L1332.6 1212.49 L1332.01 1212.49 L1331.42 1212.49 L1330.84 1212.49 L1330.25 1212.49 L1329.66 1212.49 L1329.08 1212.49 L1328.49 1212.49 L1327.9 1212.49 L1327.32 1212.49 L1326.73 1212.49 L1326.14 1212.49 L1325.56 1212.49 L1324.97 1212.49 L1324.39 1212.49 L1323.8 1212.49 L1323.21 1212.49 L1322.63 1212.49 L1322.04 1212.49 L1321.45 1212.49 L1320.87 1212.49 L1320.28 1212.49 L1319.69 1212.49 L1319.11 1212.49 L1318.52 1212.49 L1317.93 1212.49 L1317.35 1212.49 L1316.76 1212.49 L1316.18 1212.49 L1315.59 1212.49 L1315 1212.49 L1314.42 1212.49 L1313.83 1212.49 L1313.24 1212.49 L1312.66 1212.49 L1312.07 1212.49 L1311.48 1212.49 L1310.9 1212.49 L1310.31 1212.49 L1309.73 1212.49 L1309.14 1212.49 L1308.55 1212.49 L1307.97 1212.49 L1307.38 1212.49 L1306.79 1212.49 L1306.21 1212.49 L1305.62 1212.49 L1305.03 1212.49 L1304.45 1212.49 L1303.86 1212.49 L1303.27 1212.49 L1302.69 1212.49 L1302.1 1212.49 L1301.52 1212.49 L1300.93 1212.49 L1300.34 1212.49 L1299.76 1212.49 L1299.17 1212.49 L1298.58 1212.49 L1298 1212.49 L1297.41 1212.49 L1296.82 1212.49 L1296.24 1212.49 L1295.65 1212.49 L1295.06 1212.49 L1294.48 1212.49 L1293.89 1212.49 L1293.31 1212.49 L1292.72 1212.49 L1292.13 1212.49 L1291.55 1212.49 L1290.96 1212.49 L1290.37 1212.49 L1289.79 1212.49 L1289.2 1212.49 L1288.61 1212.49 L1288.03 1212.49 L1287.44 1212.49 L1286.86 1212.49 L1286.27 1212.49 L1285.68 1212.49 L1285.1 1212.49 L1284.51 1212.49 L1283.92 1212.49 L1283.34 1212.49 L1282.75 1212.49 L1282.16 1212.49 L1281.58 1212.49 L1280.99 1212.49 L1280.4 1212.49 L1279.82 1212.49 L1279.23 1212.49 L1278.65 1212.49 L1278.06 1212.49 L1277.47 1212.49 L1276.89 1212.49 L1276.3 1212.49 L1275.71 1212.49 L1275.13 1212.49 L1274.54 1212.49 L1273.95 1212.49 L1273.37 1212.49 L1272.78 1212.49 L1272.19 1212.49 L1271.61 1212.49 L1271.02 1212.49 L1270.44 1212.49 L1269.85 1212.49 L1269.26 1212.49 L1268.68 1212.49 L1268.09 1212.49 L1267.5 1212.49 L1266.92 1212.49 L1266.33 1212.49 L1265.74 1212.49 L1265.16 1212.49 L1264.57 1212.49 L1263.98 1212.49 L1263.4 1212.49 L1262.81 1212.49 L1262.23 1212.49 L1261.64 1212.49 L1261.05 1212.49 L1260.47 1212.49 L1259.88 1212.49 L1259.29 1212.49 L1258.71 1212.49 L1258.12 1212.49 L1257.53 1212.49 L1256.95 1212.49 L1256.36 1212.49 L1255.78 1212.49 L1255.19 1212.49 L1254.6 1212.49 L1254.02 1212.49 L1253.43 1212.49 L1252.84 1212.49 L1252.26 1212.49 L1251.67 1212.49 L1251.08 1212.49 L1250.5 1212.49 L1249.91 1212.49 L1249.32 1212.49 L1248.74 1212.49 L1248.15 1212.49 L1247.57 1212.49 L1246.98 1212.49 L1246.39 1212.49 L1245.81 1212.49 L1245.22 1212.49 L1244.63 1212.49 L1244.05 1212.49 L1243.46 1212.49 L1242.87 1212.49 L1242.29 1212.49 L1241.7 1212.49 L1241.11 1212.49 L1240.53 1212.49 L1239.94 1212.49 L1239.36 1212.49 L1238.77 1212.49 L1238.18 1212.49 L1237.6 1212.49 L1237.01 1212.49 L1236.42 1212.49 L1235.84 1212.49 L1235.25 1212.49 L1234.66 1212.49 L1234.08 1212.49 L1233.49 1212.49 L1232.91 1212.49 L1232.32 1212.49 L1231.73 1212.49 L1231.15 1212.49 L1230.56 1212.49 L1229.97 1212.49 L1229.39 1212.49 L1228.8 1212.49 L1228.21 1212.49 L1227.63 1212.49 L1227.04 1212.49 L1226.45 1212.49 L1225.87 1212.49 L1225.28 1212.49 L1224.7 1212.49 L1224.11 1212.49 L1223.52 1212.49 L1222.94 1212.49 L1222.35 1212.49 L1221.76 1212.49 L1221.18 1212.49 L1220.59 1212.49 L1220 1212.49 L1219.42 1212.49 L1218.83 1212.49 L1218.24 1212.49 L1217.66 1212.49 L1217.07 1212.49 L1216.49 1212.49 L1215.9 1212.49 L1215.31 1212.49 L1214.73 1212.49 L1214.14 1212.49 L1213.55 1212.49 L1212.97 1212.49 L1212.38 1212.49 L1211.79 1212.49 L1211.21 1212.49 L1210.62 1212.49 L1210.03 1212.49 L1209.45 1212.49 L1208.86 1212.49 L1208.28 1212.49 L1207.69 1212.49 L1207.1 1212.49 L1206.52 1212.49 L1205.93 1212.49 L1205.34 1212.49 L1204.76 1212.49 L1204.17 1212.49 L1203.58 1212.49 L1203 1212.49 L1202.41 1212.49 L1201.83 1212.49 L1201.24 1212.49 L1200.65 1212.49 L1200.07 1212.49 L1199.48 1212.49 L1198.89 1212.49 L1198.31 1212.49 L1197.72 1212.49 L1197.13 1212.49 L1196.55 1212.49 L1195.96 1212.49 L1195.37 1212.49 L1194.79 1212.49 L1194.2 1212.49 L1193.62 1212.49 L1193.03 1212.49 L1192.44 1212.49 L1191.86 1212.49 L1191.27 1212.49 L1190.68 1212.49 L1190.1 1212.49 L1189.51 1212.49 L1188.92 1212.49 L1188.34 1212.49 L1187.75 1212.49 L1187.16 1212.49 L1186.58 1212.49 L1185.99 1212.49 L1185.41 1212.49 L1184.82 1212.49 L1184.23 1212.49 L1183.65 1212.49 L1183.06 1212.49 L1182.47 1212.49 L1181.89 1212.49 L1181.3 1212.49 L1180.71 1212.49 L1180.13 1212.49 L1179.54 1212.49 L1178.96 1212.49 L1178.37 1212.49 L1177.78 1212.49 L1177.2 1212.49 L1176.61 1212.49 L1176.02 1212.49 L1175.44 1212.49 L1174.85 1212.49 L1174.26 1212.49 L1173.68 1212.49 L1173.09 1212.49 L1172.5 1212.49 L1171.92 1212.49 L1171.33 1212.49 L1170.75 1212.49 L1170.16 1212.49 L1169.57 1212.49 L1168.99 1212.49 L1168.4 1212.49 L1167.81 1212.49 L1167.23 1212.49 L1166.64 1212.49 L1166.05 1212.49 L1165.47 1212.49 L1164.88 1212.49 L1164.29 1212.49 L1163.71 1212.49 L1163.12 1212.49 L1162.54 1212.49 L1161.95 1212.49 L1161.36 1212.49 L1160.78 1212.49 L1160.19 1212.49 L1159.6 1212.49 L1159.02 1212.49 L1158.43 1212.49 L1157.84 1212.49 L1157.26 1212.49 L1156.67 1212.49 L1156.09 1212.49 L1155.5 1212.49 L1154.91 1212.49 L1154.33 1212.49 L1153.74 1212.49 L1153.15 1212.49 L1152.57 1212.49 L1151.98 1212.49 L1151.39 1212.49 L1150.81 1212.49 L1150.22 1212.49 L1149.63 1212.49 L1149.05 1212.49 L1148.46 1212.49 L1147.88 1212.49 L1147.29 1212.49 L1146.7 1212.49 L1146.12 1212.49 L1145.53 1212.49 L1144.94 1212.49 L1144.36 1212.49 L1143.77 1212.49 L1143.18 1212.49 L1142.6 1212.49 L1142.01 1212.49 L1141.42 1212.49 L1140.84 1212.49 L1140.25 1212.49 L1139.67 1212.49 L1139.08 1212.49 L1138.49 1212.49 L1137.91 1212.49 L1137.32 1212.49 L1136.73 1212.49 L1136.15 1212.49 L1135.56 1212.49 L1134.97 1212.49 L1134.39 1212.49 L1133.8 1212.49 L1133.21 1212.49 L1132.63 1212.49 L1132.04 1212.49 L1131.46 1212.49 L1130.87 1212.49 L1130.28 1212.49 L1129.7 1212.49 L1129.11 1212.49 L1128.52 1212.49 L1127.94 1212.49 L1127.35 1212.49 L1126.76 1212.49 L1126.18 1212.49 L1125.59 1212.49 L1125.01 1212.49 L1124.42 1212.49 L1123.83 1212.49 L1123.25 1212.49 L1122.66 1212.49 L1122.07 1212.49 L1121.49 1212.49 L1120.9 1212.49 L1120.31 1212.49 L1119.73 1212.49 L1119.14 1212.49 L1118.55 1212.49 L1117.97 1212.49 L1117.38 1212.49 L1116.8 1212.49 L1116.21 1212.49 L1115.62 1212.49 L1115.04 1212.49 L1114.45 1212.49 L1113.86 1212.49 L1113.28 1212.49 L1112.69 1212.49 L1112.1 1212.49 L1111.52 1212.49 L1110.93 1212.49 L1110.34 1212.49 L1109.76 1212.49 L1109.17 1212.49 L1108.59 1212.49 L1108 1212.49 L1107.41 1212.49 L1106.83 1212.49 L1106.24 1212.49 L1105.65 1212.49 L1105.07 1212.49 L1104.48 1212.49 L1103.89 1212.49 L1103.31 1212.49 L1102.72 1212.49 L1102.14 1212.49 L1101.55 1212.49 L1100.96 1212.49 L1100.38 1212.49 L1099.79 1212.49 L1099.2 1212.49 L1098.62 1212.49 L1098.03 1212.49 L1097.44 1212.49 L1096.86 1212.49 L1096.27 1212.49 L1095.68 1212.49 L1095.1 1212.49 L1094.51 1212.49 L1093.93 1212.49 L1093.34 1212.49 L1092.75 1212.49 L1092.17 1212.49 L1091.58 1212.49 L1090.99 1212.49 L1090.41 1212.49 L1089.82 1212.49 L1089.23 1212.49 L1088.65 1212.49 L1088.06 1212.49 L1087.47 1212.49 L1086.89 1212.49 L1086.3 1212.49 L1085.72 1212.49 L1085.13 1212.49 L1084.54 1212.49 L1083.96 1212.49 L1083.37 1212.49 L1082.78 1212.49 L1082.2 1212.49 L1081.61 1212.49 L1081.02 1212.49 L1080.44 1212.49 L1079.85 1212.49 L1079.26 1212.49 L1078.68 1212.49 L1078.09 1212.49 L1077.51 1212.49 L1076.92 1212.49 L1076.33 1212.49 L1075.75 1212.49 L1075.16 1212.49 L1074.57 1212.49 L1073.99 1212.49 L1073.4 1212.49 L1072.81 1212.49 L1072.23 1212.49 L1071.64 1212.49 L1071.06 1212.49 L1070.47 1212.49 L1069.88 1212.49 L1069.3 1212.49 L1068.71 1212.49 L1068.12 1212.49 L1067.54 1212.49 L1066.95 1212.49 L1066.36 1212.49 L1065.78 1212.49 L1065.19 1212.49 L1064.6 1212.49 L1064.02 1212.49 L1063.43 1212.49 L1062.85 1212.49 L1062.26 1212.49 L1061.67 1212.49 L1061.09 1212.49 L1060.5 1212.49 L1059.91 1212.49 L1059.33 1212.49 L1058.74 1212.49 L1058.15 1212.49 L1057.57 1212.49 L1056.98 1212.49 L1056.39 1212.49 L1055.81 1212.49 L1055.22 1212.49 L1054.64 1212.49 L1054.05 1212.49 L1053.46 1212.49 L1052.88 1212.49 L1052.29 1212.49 L1051.7 1212.49 L1051.12 1212.49 L1050.53 1212.49 L1049.94 1212.49 L1049.36 1212.49 L1048.77 1212.49 L1048.19 1212.49 L1047.6 1212.49 L1047.01 1212.49 L1046.43 1212.49 L1045.84 1212.49 L1045.25 1212.49 L1044.67 1212.49 L1044.08 1212.49 L1043.49 1212.49 L1042.91 1212.49 L1042.32 1212.49 L1041.73 1212.49 L1041.15 1212.49 L1040.56 1212.49 L1039.98 1212.49 L1039.39 1212.49 L1038.8 1212.49 L1038.22 1212.49 L1037.63 1212.49 L1037.04 1212.49 L1036.46 1212.49 L1035.87 1212.49 L1035.28 1212.49 L1034.7 1212.49 L1034.11 1212.49 L1033.52 1212.49 L1032.94 1212.49 L1032.35 1212.49 L1031.77 1212.49 L1031.18 1212.49 L1030.59 1212.49 L1030.01 1212.49 L1029.42 1212.49 L1028.83 1212.49 L1028.25 1212.49 L1027.66 1212.49 L1027.07 1212.49 L1026.49 1212.49 L1025.9 1212.49 L1025.32 1212.49 L1024.73 1212.49 L1024.14 1212.49 L1023.56 1212.49 L1022.97 1212.49 L1022.38 1212.49 L1021.8 1212.49 L1021.21 1212.49 L1020.62 1212.49 L1020.04 1212.49 L1019.45 1212.49 L1018.86 1212.49 L1018.28 1212.49 L1017.69 1212.49 L1017.11 1212.49 L1016.52 1212.49 L1015.93 1212.49 L1015.35 1212.49 L1014.76 1212.49 L1014.17 1212.49 L1013.59 1212.49 L1013 1212.49 L1012.41 1212.49 L1011.83 1212.49 L1011.24 1212.49 L1010.65 1212.49 L1010.07 1212.49 L1009.48 1212.49 L1008.9 1212.49 L1008.31 1212.49 L1007.72 1212.49 L1007.14 1212.49 L1006.55 1212.49 L1005.96 1212.49 L1005.38 1212.49 L1004.79 1212.49 L1004.2 1212.49 L1003.62 1212.49 L1003.03 1212.49 L1002.44 1212.49 L1001.86 1212.49 L1001.27 1212.49 L1000.69 1212.49 L1000.1 1212.49 L999.513 1212.49 L998.926 1212.49 L998.34 1212.49 L997.754 1212.49 L997.167 1212.49 L996.581 1212.49 L995.994 1212.49 L995.408 1212.49 L994.822 1212.49 L994.235 1212.49 L993.649 1212.49 L993.062 1212.49 L992.476 1212.49 L991.889 1212.49 L991.303 1212.49 L990.717 1212.49 L990.13 1212.49 L989.544 1212.49 L988.957 1212.49 L988.371 1212.49 L987.785 1212.49 L987.198 1212.49 L986.612 1212.49 L986.025 1212.49  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.84 986.612,1212.84 987.198,1212.84 987.785,1212.84 988.371,1212.84 988.957,1212.84 989.544,1212.84 990.13,1212.84 990.717,1212.84 991.303,1212.84 991.889,1212.84 992.476,1212.84 993.062,1212.84 993.649,1212.84 994.235,1212.84 994.822,1212.84 995.408,1212.84 995.994,1212.84 996.581,1212.84 997.167,1212.84 997.754,1212.84 998.34,1212.84 998.926,1212.84 999.513,1212.84 1000.1,1212.84 1000.69,1212.84 1001.27,1212.84 1001.86,1212.84 1002.44,1212.84 1003.03,1212.84 1003.62,1212.84 1004.2,1212.84 1004.79,1212.84 1005.38,1212.84 1005.96,1212.84 1006.55,1212.84 1007.14,1212.84 1007.72,1212.84 1008.31,1212.84 1008.9,1212.84 1009.48,1212.84 1010.07,1212.84 1010.65,1212.84 1011.24,1212.84 1011.83,1212.84 1012.41,1212.84 1013,1212.84 1013.59,1212.84 1014.17,1212.84 1014.76,1212.84 1015.35,1212.84 1015.93,1212.84 1016.52,1212.84 1017.11,1212.84 1017.69,1212.84 1018.28,1212.84 1018.86,1212.84 1019.45,1212.84 1020.04,1212.84 1020.62,1212.84 1021.21,1212.84 1021.8,1212.84 1022.38,1212.84 1022.97,1212.84 1023.56,1212.84 1024.14,1212.84 1024.73,1212.84 1025.32,1212.84 1025.9,1212.84 1026.49,1212.84 1027.07,1212.84 1027.66,1212.84 1028.25,1212.84 1028.83,1212.84 1029.42,1212.84 1030.01,1212.84 1030.59,1212.84 1031.18,1212.84 1031.77,1212.84 1032.35,1212.84 1032.94,1212.84 1033.52,1212.84 1034.11,1212.84 1034.7,1212.84 1035.28,1212.84 1035.87,1212.84 1036.46,1212.84 1037.04,1212.84 1037.63,1212.84 1038.22,1212.84 1038.8,1212.84 1039.39,1212.84 1039.98,1212.84 1040.56,1212.84 1041.15,1212.84 1041.73,1212.84 1042.32,1212.84 1042.91,1212.84 1043.49,1212.84 1044.08,1212.84 1044.67,1212.84 1045.25,1212.84 1045.84,1212.84 1046.43,1212.84 1047.01,1212.84 1047.6,1212.84 1048.19,1212.84 1048.77,1212.84 1049.36,1212.84 1049.94,1212.84 1050.53,1212.84 1051.12,1212.84 1051.7,1212.84 1052.29,1212.84 1052.88,1212.84 1053.46,1212.84 1054.05,1212.84 1054.64,1212.84 1055.22,1212.84 1055.81,1212.84 1056.39,1212.84 1056.98,1212.84 1057.57,1212.84 1058.15,1212.84 1058.74,1212.84 1059.33,1212.84 1059.91,1212.84 1060.5,1212.84 1061.09,1212.84 1061.67,1212.84 1062.26,1212.84 1062.85,1212.84 1063.43,1212.84 1064.02,1212.84 1064.6,1212.84 1065.19,1212.84 1065.78,1212.84 1066.36,1212.84 1066.95,1212.84 1067.54,1212.84 1068.12,1212.84 1068.71,1212.84 1069.3,1212.84 1069.88,1212.84 1070.47,1212.84 1071.06,1212.84 1071.64,1212.84 1072.23,1212.84 1072.81,1212.84 1073.4,1212.84 1073.99,1212.84 1074.57,1212.84 1075.16,1212.84 1075.75,1212.84 1076.33,1212.84 1076.92,1212.84 1077.51,1212.84 1078.09,1212.84 1078.68,1212.84 1079.26,1212.84 1079.85,1212.84 1080.44,1212.84 1081.02,1212.84 1081.61,1212.84 1082.2,1212.84 1082.78,1212.84 1083.37,1212.84 1083.96,1212.84 1084.54,1212.84 1085.13,1212.84 1085.72,1212.84 1086.3,1212.84 1086.89,1212.84 1087.47,1212.84 1088.06,1212.84 1088.65,1212.84 1089.23,1212.84 1089.82,1212.84 1090.41,1212.84 1090.99,1212.84 1091.58,1212.84 1092.17,1212.84 1092.75,1212.84 1093.34,1212.84 1093.93,1212.84 1094.51,1212.84 1095.1,1212.84 1095.68,1212.84 1096.27,1212.84 1096.86,1212.84 1097.44,1212.84 1098.03,1212.84 1098.62,1212.84 1099.2,1212.84 1099.79,1212.84 1100.38,1212.84 1100.96,1212.84 1101.55,1212.84 1102.14,1212.84 1102.72,1212.84 1103.31,1212.84 1103.89,1212.84 1104.48,1212.84 1105.07,1212.84 1105.65,1212.84 1106.24,1212.84 1106.83,1212.84 1107.41,1212.84 1108,1212.84 1108.59,1212.84 1109.17,1212.84 1109.76,1212.84 1110.34,1212.84 1110.93,1212.84 1111.52,1212.84 1112.1,1212.84 1112.69,1212.84 1113.28,1212.84 1113.86,1212.84 1114.45,1212.84 1115.04,1212.84 1115.62,1212.84 1116.21,1212.84 1116.8,1212.84 1117.38,1212.84 1117.97,1212.84 1118.55,1212.84 1119.14,1212.84 1119.73,1212.84 1120.31,1212.84 1120.9,1212.84 1121.49,1212.84 1122.07,1212.84 1122.66,1212.84 1123.25,1212.84 1123.83,1212.84 1124.42,1212.84 1125.01,1212.84 1125.59,1212.84 1126.18,1212.84 1126.76,1212.84 1127.35,1212.84 1127.94,1212.84 1128.52,1212.84 1129.11,1212.84 1129.7,1212.84 1130.28,1212.84 1130.87,1212.84 1131.46,1212.84 1132.04,1212.84 1132.63,1212.84 1133.21,1212.84 1133.8,1212.84 1134.39,1212.84 1134.97,1212.84 1135.56,1212.84 1136.15,1212.84 1136.73,1212.84 1137.32,1212.84 1137.91,1212.84 1138.49,1212.84 1139.08,1212.84 1139.67,1212.84 1140.25,1212.84 1140.84,1212.84 1141.42,1212.84 1142.01,1212.84 1142.6,1212.84 1143.18,1212.84 1143.77,1212.84 1144.36,1212.84 1144.94,1212.84 1145.53,1212.84 1146.12,1212.84 1146.7,1212.84 1147.29,1212.84 1147.88,1212.84 1148.46,1212.84 1149.05,1212.84 1149.63,1212.84 1150.22,1212.84 1150.81,1212.84 1151.39,1212.84 1151.98,1212.84 1152.57,1212.84 1153.15,1212.84 1153.74,1212.84 1154.33,1212.84 1154.91,1212.84 1155.5,1212.84 1156.09,1212.84 1156.67,1212.84 1157.26,1212.84 1157.84,1212.84 1158.43,1212.84 1159.02,1212.84 1159.6,1212.84 1160.19,1212.84 1160.78,1212.84 1161.36,1212.84 1161.95,1212.84 1162.54,1212.84 1163.12,1212.84 1163.71,1212.84 1164.29,1212.84 1164.88,1212.84 1165.47,1212.84 1166.05,1212.84 1166.64,1212.84 1167.23,1212.84 1167.81,1212.84 1168.4,1212.84 1168.99,1212.84 1169.57,1212.84 1170.16,1212.84 1170.75,1212.84 1171.33,1212.84 1171.92,1212.84 1172.5,1212.84 1173.09,1212.84 1173.68,1212.84 1174.26,1212.84 1174.85,1212.84 1175.44,1212.84 1176.02,1212.84 1176.61,1212.84 1177.2,1212.84 1177.78,1212.84 1178.37,1212.84 1178.96,1212.84 1179.54,1212.84 1180.13,1212.84 1180.71,1212.84 1181.3,1212.84 1181.89,1212.84 1182.47,1212.84 1183.06,1212.84 1183.65,1212.84 1184.23,1212.84 1184.82,1212.84 1185.41,1212.84 1185.99,1212.84 1186.58,1212.84 1187.16,1212.84 1187.75,1212.84 1188.34,1212.84 1188.92,1212.84 1189.51,1212.84 1190.1,1212.84 1190.68,1212.84 1191.27,1212.84 1191.86,1212.84 1192.44,1212.84 1193.03,1212.84 1193.62,1212.84 1194.2,1212.84 1194.79,1212.84 1195.37,1212.84 1195.96,1212.84 1196.55,1212.84 1197.13,1212.84 1197.72,1212.84 1198.31,1212.84 1198.89,1212.84 1199.48,1212.84 1200.07,1212.84 1200.65,1212.84 1201.24,1212.84 1201.83,1212.84 1202.41,1212.84 1203,1212.84 1203.58,1212.84 1204.17,1212.84 1204.76,1212.84 1205.34,1212.84 1205.93,1212.84 1206.52,1212.84 1207.1,1212.84 1207.69,1212.84 1208.28,1212.84 1208.86,1212.84 1209.45,1212.84 1210.03,1212.84 1210.62,1212.84 1211.21,1212.84 1211.79,1212.84 1212.38,1212.84 1212.97,1212.84 1213.55,1212.84 1214.14,1212.84 1214.73,1212.84 1215.31,1212.84 1215.9,1212.84 1216.49,1212.84 1217.07,1212.84 1217.66,1212.84 1218.24,1212.84 1218.83,1212.84 1219.42,1212.84 1220,1212.84 1220.59,1212.84 1221.18,1212.84 1221.76,1212.84 1222.35,1212.84 1222.94,1212.84 1223.52,1212.84 1224.11,1212.84 1224.7,1212.84 1225.28,1212.84 1225.87,1212.84 1226.45,1212.84 1227.04,1212.84 1227.63,1212.84 1228.21,1212.84 1228.8,1212.84 1229.39,1212.84 1229.97,1212.84 1230.56,1212.84 1231.15,1212.84 1231.73,1212.84 1232.32,1212.84 1232.91,1212.84 1233.49,1212.84 1234.08,1212.84 1234.66,1212.84 1235.25,1212.84 1235.84,1212.84 1236.42,1212.84 1237.01,1212.84 1237.6,1212.84 1238.18,1212.84 1238.77,1212.84 1239.36,1212.84 1239.94,1212.84 1240.53,1212.84 1241.11,1212.84 1241.7,1212.84 1242.29,1212.84 1242.87,1212.84 1243.46,1212.84 1244.05,1212.84 1244.63,1212.84 1245.22,1212.84 1245.81,1212.84 1246.39,1212.84 1246.98,1212.84 1247.57,1212.84 1248.15,1212.84 1248.74,1212.84 1249.32,1212.84 1249.91,1212.84 1250.5,1212.84 1251.08,1212.84 1251.67,1212.84 1252.26,1212.84 1252.84,1212.84 1253.43,1212.84 1254.02,1212.84 1254.6,1212.84 1255.19,1212.84 1255.78,1212.84 1256.36,1212.84 1256.95,1212.84 1257.53,1212.84 1258.12,1212.84 1258.71,1212.84 1259.29,1212.84 1259.88,1212.84 1260.47,1212.84 1261.05,1212.84 1261.64,1212.84 1262.23,1212.84 1262.81,1212.84 1263.4,1212.84 1263.98,1212.84 1264.57,1212.84 1265.16,1212.84 1265.74,1212.84 1266.33,1212.84 1266.92,1212.84 1267.5,1212.84 1268.09,1212.84 1268.68,1212.84 1269.26,1212.84 1269.85,1212.84 1270.44,1212.84 1271.02,1212.84 1271.61,1212.84 1272.19,1212.84 1272.78,1212.84 1273.37,1212.84 1273.95,1212.84 1274.54,1212.84 1275.13,1212.84 1275.71,1212.84 1276.3,1212.84 1276.89,1212.84 1277.47,1212.84 1278.06,1212.84 1278.65,1212.84 1279.23,1212.84 1279.82,1212.84 1280.4,1212.84 1280.99,1212.84 1281.58,1212.84 1282.16,1212.84 1282.75,1212.84 1283.34,1212.84 1283.92,1212.84 1284.51,1212.84 1285.1,1212.84 1285.68,1212.84 1286.27,1212.84 1286.86,1212.84 1287.44,1212.84 1288.03,1212.84 1288.61,1212.84 1289.2,1212.84 1289.79,1212.84 1290.37,1212.84 1290.96,1212.84 1291.55,1212.84 1292.13,1212.84 1292.72,1212.84 1293.31,1212.84 1293.89,1212.84 1294.48,1212.84 1295.06,1212.84 1295.65,1212.84 1296.24,1212.84 1296.82,1212.84 1297.41,1212.84 1298,1212.84 1298.58,1212.84 1299.17,1212.84 1299.76,1212.84 1300.34,1212.84 1300.93,1212.84 1301.52,1212.84 1302.1,1212.84 1302.69,1212.84 1303.27,1212.84 1303.86,1212.84 1304.45,1212.84 1305.03,1212.84 1305.62,1212.84 1306.21,1212.84 1306.79,1212.84 1307.38,1212.84 1307.97,1212.84 1308.55,1212.84 1309.14,1212.84 1309.73,1212.84 1310.31,1212.84 1310.9,1212.84 1311.48,1212.84 1312.07,1212.84 1312.66,1212.84 1313.24,1212.84 1313.83,1212.84 1314.42,1212.84 1315,1212.84 1315.59,1212.84 1316.18,1212.84 1316.76,1212.84 1317.35,1212.84 1317.93,1212.84 1318.52,1212.84 1319.11,1212.84 1319.69,1212.84 1320.28,1212.84 1320.87,1212.84 1321.45,1212.84 1322.04,1212.84 1322.63,1212.84 1323.21,1212.84 1323.8,1212.84 1324.39,1212.84 1324.97,1212.84 1325.56,1212.84 1326.14,1212.84 1326.73,1212.84 1327.32,1212.84 1327.9,1212.84 1328.49,1212.84 1329.08,1212.84 1329.66,1212.84 1330.25,1212.84 1330.84,1212.84 1331.42,1212.84 1332.01,1212.84 1332.6,1212.84 1333.18,1212.84 1333.77,1212.84 1334.35,1212.84 1334.94,1212.84 1335.53,1212.84 1336.11,1212.84 1336.7,1212.84 1337.29,1212.84 1337.87,1212.84 1338.46,1212.84 1339.05,1212.84 1339.63,1212.84 1340.22,1212.84 1340.8,1212.84 1341.39,1212.84 1341.98,1212.84 1342.56,1212.84 1343.15,1212.84 1343.74,1212.84 1344.32,1212.84 1344.91,1212.84 1345.5,1212.84 1346.08,1212.84 1346.67,1212.84 1347.26,1212.84 1347.84,1212.84 1348.43,1212.84 1349.01,1212.84 1349.6,1212.84 1350.19,1212.84 1350.77,1212.84 1351.36,1212.84 1351.95,1212.84 1352.53,1212.84 1353.12,1212.84 1353.71,1212.84 1354.29,1212.84 1354.88,1212.84 1355.47,1212.84 1356.05,1212.84 1356.64,1212.84 1357.22,1212.84 1357.81,1212.84 1358.4,1212.84 1358.98,1212.84 1359.57,1212.84 1360.16,1212.84 1360.74,1212.84 1361.33,1212.84 1361.92,1212.84 1362.5,1212.84 1363.09,1212.84 1363.68,1212.84 1364.26,1212.84 1364.85,1212.84 1365.43,1212.84 1366.02,1212.84 1366.61,1212.84 1367.19,1212.84 1367.78,1212.84 1368.37,1212.84 1368.95,1212.84 1369.54,1212.84 1370.13,1212.84 1370.71,1212.84 1371.3,1212.84 1371.88,1212.84 1372.47,1212.84 1373.06,1212.84 1373.64,1212.84 1374.23,1212.84 1374.82,1212.84 1375.4,1212.84 1375.99,1212.84 1376.58,1212.84 1377.16,1212.84 1377.75,1212.84 1378.34,1212.84 1378.92,1212.84 1379.51,1212.84 1380.09,1212.84 1380.68,1212.84 1381.27,1212.84 1381.85,1212.84 1382.44,1212.84 1383.03,1212.84 1383.61,1212.84 1384.2,1212.84 1384.79,1212.84 1385.37,1212.84 1385.96,1212.84 1386.55,1212.84 1387.13,1212.84 1387.72,1212.84 1388.3,1212.84 1388.89,1212.84 1389.48,1212.84 1390.06,1212.84 1390.65,1212.84 1391.24,1212.84 1391.82,1212.84 1392.41,1212.84 1393,1212.84 1393.58,1212.84 1394.17,1212.84 1394.75,1212.84 1395.34,1212.84 1395.93,1212.84 1396.51,1212.84 1397.1,1212.84 1397.69,1212.84 1398.27,1212.84 1398.86,1212.84 1399.45,1212.84 1400.03,1212.84 1400.62,1212.84 1401.21,1212.84 1401.79,1212.84 1402.38,1212.84 1402.96,1212.84 1403.55,1212.84 1404.14,1212.84 1404.72,1212.84 1405.31,1212.84 1405.9,1212.84 1406.48,1212.84 1407.07,1212.84 1407.66,1212.84 1408.24,1212.84 1408.83,1212.84 1409.42,1212.84 1410,1212.84 1410.59,1212.84 1411.17,1212.84 1411.76,1212.84 1412.35,1212.84 1412.93,1212.84 1413.52,1212.84 1414.11,1212.84 1414.69,1212.84 1415.28,1212.84 1415.87,1212.84 1416.45,1212.84 1417.04,1212.84 1417.63,1212.84 1418.21,1212.84 1418.8,1212.84 1419.38,1212.84 1419.97,1212.84 1420.56,1212.84 1421.14,1212.84 1421.73,1212.84 1422.32,1212.84 1422.9,1212.84 1423.49,1212.84 1424.08,1212.84 1424.66,1212.84 1425.25,1212.84 1425.83,1212.84 1426.42,1212.84 1427.01,1212.84 1427.59,1212.84 1428.18,1212.84 1428.77,1212.84 1429.35,1212.84 1429.94,1212.84 1430.53,1212.84 1431.11,1212.84 1431.7,1212.84 1432.29,1212.84 1432.87,1212.84 1433.46,1212.84 1434.04,1212.84 1434.63,1212.84 1435.22,1212.84 1435.8,1212.84 1436.39,1212.84 1436.98,1212.84 1437.56,1212.84 1438.15,1212.84 1438.74,1212.84 1439.32,1212.84 1439.91,1212.84 1440.5,1212.84 1441.08,1212.84 1441.67,1212.84 1442.25,1212.84 1442.84,1212.84 1443.43,1212.84 1444.01,1212.84 1444.6,1212.84 1445.19,1212.84 1445.77,1212.84 1446.36,1212.84 1446.95,1212.84 1447.53,1212.84 1448.12,1212.84 1448.7,1212.84 1449.29,1212.84 1449.88,1212.84 1450.46,1212.84 1451.05,1212.84 1451.64,1212.84 1452.22,1212.84 1452.81,1212.84 1453.4,1212.84 1453.98,1212.84 1454.57,1212.84 1455.16,1212.84 1455.74,1212.84 1456.33,1212.84 1456.91,1212.84 1457.5,1212.84 1458.09,1212.84 1458.67,1212.84 1459.26,1212.84 1459.85,1212.84 1460.43,1212.84 1461.02,1212.84 1461.61,1212.84 1462.19,1212.84 1462.78,1212.84 1463.37,1212.84 1463.95,1212.84 1464.54,1212.84 1465.12,1212.84 1465.71,1212.84 1466.3,1212.84 1466.88,1212.84 1467.47,1212.84 1468.06,1212.84 1468.64,1212.84 1469.23,1212.84 1469.82,1212.84 1470.4,1212.84 1470.99,1212.84 1471.57,1212.84 1472.16,1212.84 1472.75,1212.84 1473.33,1212.84 1473.92,1212.84 1474.51,1212.84 1475.09,1212.84 1475.68,1212.84 1476.27,1212.84 1476.85,1212.84 1477.44,1212.84 1478.03,1212.84 1478.61,1212.84 1479.2,1212.84 1479.78,1212.84 1480.37,1212.84 1480.96,1212.84 1481.54,1212.84 1482.13,1212.84 1482.72,1212.84 1483.3,1212.84 1483.89,1212.84 1484.48,1212.84 1485.06,1212.84 1485.65,1212.84 1486.24,1212.84 1486.82,1212.84 1487.41,1212.84 1487.99,1212.84 1488.58,1212.84 1489.17,1212.84 1489.75,1212.84 1490.34,1212.84 1490.93,1212.84 1491.51,1212.84 1492.1,1212.84 1492.69,1212.84 1493.27,1212.84 1493.86,1212.84 1494.45,1212.84 1495.03,1212.84 1495.62,1212.84 1496.2,1212.84 1496.79,1212.84 1497.38,1212.84 1497.96,1212.84 1498.55,1212.84 1499.14,1212.84 1499.72,1212.84 1500.31,1212.84 1500.9,1212.84 1501.48,1212.84 1502.07,1212.84 1502.65,1212.84 1503.24,1212.84 1503.83,1212.84 1504.41,1212.84 1505,1212.84 1505.59,1212.84 1506.17,1212.84 1506.76,1212.84 1507.35,1212.84 1507.93,1212.84 1508.52,1212.84 1509.11,1212.84 1509.69,1212.84 1510.28,1212.84 1510.86,1212.84 1511.45,1212.84 1512.04,1212.84 1512.62,1212.84 1513.21,1212.84 1513.8,1212.84 1514.38,1212.84 1514.97,1212.84 1515.56,1212.84 1516.14,1212.84 1516.73,1212.84 1517.32,1212.84 1517.9,1212.84 1518.49,1212.84 1519.07,1212.84 1519.66,1212.84 1520.25,1212.84 1520.83,1212.84 1521.42,1212.84 1522.01,1212.84 1522.59,1212.84 1523.18,1212.84 1523.77,1212.84 1524.35,1212.84 1524.94,1212.84 1525.52,1212.84 1526.11,1212.84 1526.7,1212.84 1527.28,1212.84 1527.87,1212.84 1528.46,1212.84 1529.04,1212.84 1529.63,1212.84 1530.22,1212.84 1530.8,1212.84 1531.39,1212.84 1531.98,1212.84 1532.56,1212.84 1533.15,1212.84 1533.73,1212.84 1534.32,1212.84 1534.91,1212.84 1535.49,1212.84 1536.08,1212.84 1536.67,1212.84 1537.25,1212.84 1537.84,1212.84 1538.43,1212.84 1539.01,1212.84 1539.6,1212.84 1540.19,1212.84 1540.77,1212.84 1541.36,1212.84 1541.94,1212.84 1542.53,1212.84 1543.12,1212.84 1543.7,1212.84 1544.29,1212.84 1544.88,1212.84 1545.46,1212.84 1546.05,1212.84 1546.64,1212.84 1547.22,1212.84 1547.81,1212.84 1548.4,1212.84 1548.98,1212.84 1549.57,1212.84 1550.15,1212.84 1550.74,1212.84 1551.33,1212.84 1551.91,1212.84 1552.5,1212.84 1553.09,1212.84 1553.67,1212.84 1554.26,1212.84 1554.85,1212.84 1555.43,1212.84 1556.02,1212.84 1556.6,1212.84 1557.19,1212.84 1557.78,1212.84 1558.36,1212.84 1558.95,1212.84 1559.54,1212.84 1560.12,1212.84 1560.71,1212.84 1561.3,1212.84 1561.88,1212.84 1562.47,1212.84 1563.06,1212.84 1563.64,1212.84 1564.23,1212.84 1564.81,1212.84 1565.4,1212.84 1565.99,1212.84 1566.57,1212.84 1567.16,1212.84 1567.75,1212.84 1568.33,1212.84 1568.92,1212.84 1569.51,1212.84 1570.09,1212.84 1570.68,1212.84 1571.27,1212.84 1571.85,1212.84 1572.44,1212.84 1573.02,1212.84 1573.61,1212.84 1574.2,1212.84 1574.78,1212.84 1575.37,1212.84 1575.96,1212.84 1576.54,1212.84 1577.13,1212.84 1577.72,1212.84 1578.3,1212.84 1578.89,1212.84 1579.47,1212.84 1580.06,1212.84 1580.65,1212.84 1581.23,1212.84 1581.82,1212.84 1582.41,1212.84 1582.99,1212.84 1583.58,1212.84 1584.17,1212.84 1584.75,1212.84 1585.34,1212.84 1585.93,1212.84 1586.51,1212.84 1587.1,1212.84 1587.68,1212.84 1588.27,1212.84 1588.86,1212.84 1589.44,1212.84 1590.03,1212.84 1590.62,1212.84 1591.2,1212.84 1591.79,1212.84 1592.38,1212.84 1592.96,1212.84 1593.55,1212.84 1594.14,1212.84 1594.72,1212.84 1595.31,1212.84 1595.89,1212.84 1596.48,1212.84 1597.07,1212.84 1597.65,1212.84 1598.24,1212.84 1598.83,1212.84 1599.41,1212.84 1600,1212.84 1600.59,1212.84 1601.17,1212.84 1601.76,1212.84 1602.34,1212.84 1602.93,1212.84 1603.52,1212.84 1604.1,1212.84 1604.69,1212.84 1605.28,1212.84 1605.86,1212.84 1606.45,1212.84 1607.04,1212.84 1607.62,1212.84 1608.21,1212.84 1608.8,1212.84 1609.38,1212.84 1609.97,1212.84 1610.55,1212.84 1611.14,1212.84 1611.73,1212.84 1612.31,1212.84 1612.9,1212.84 1613.49,1212.84 1614.07,1212.84 1614.66,1212.84 1615.25,1212.84 1615.83,1212.84 1616.42,1212.84 1617.01,1212.84 1617.59,1212.84 1618.18,1212.84 1618.76,1212.84 1619.35,1212.84 1619.94,1212.84 1620.52,1212.84 1621.11,1212.84 1621.7,1212.84 1622.28,1212.84 1622.87,1212.84 1623.46,1212.84 1624.04,1212.84 1624.63,1212.84 1625.22,1212.84 1625.8,1212.84 1626.39,1212.84 1626.97,1212.84 1627.56,1212.84 1628.15,1212.84 1628.73,1212.84 1629.32,1212.84 1629.91,1212.84 1630.49,1212.84 1631.08,1212.84 1631.67,1212.84 1632.25,1212.84 1632.84,1212.84 1633.42,1212.84 1634.01,1212.84 1634.6,1212.84 1635.18,1212.84 1635.77,1212.84 1636.36,1212.84 1636.94,1212.84 1637.53,1212.84 1638.12,1212.84 1638.7,1212.84 1639.29,1212.84 1639.88,1212.84 1640.46,1212.84 1641.05,1212.84 1641.63,1212.84 1642.22,1212.84 1642.81,1212.84 1643.39,1212.84 1643.98,1212.84 1644.57,1212.84 1645.15,1212.84 1645.74,1212.84 1646.33,1212.84 1646.91,1212.84 1647.5,1212.84 1648.09,1212.84 1648.67,1212.84 1649.26,1212.84 1649.84,1212.84 1650.43,1212.84 1651.02,1212.84 1651.6,1212.84 1652.19,1212.84 1652.78,1212.84 1653.36,1212.84 1653.95,1212.84 1654.54,1212.84 1655.12,1212.84 1655.71,1212.84 1656.29,1212.84 1656.88,1212.84 1657.47,1212.84 1658.05,1212.84 1658.64,1212.84 1659.23,1212.84 1659.81,1212.84 1660.4,1212.84 1660.99,1212.84 1661.57,1212.84 1662.16,1212.84 1662.75,1212.84 1663.33,1212.84 1663.92,1212.84 1664.5,1212.84 1665.09,1212.84 1665.68,1212.84 1666.26,1212.84 1666.85,1212.84 1667.44,1212.84 1668.02,1212.84 1668.61,1212.84 1669.2,1212.84 1669.78,1212.84 1670.37,1212.84 1670.96,1212.84 1671.54,1212.84 1672.13,1212.84 1672.71,1212.84 1673.3,1212.84 1673.89,1212.84 1674.47,1212.84 1675.06,1212.84 1675.65,1212.84 1676.23,1212.84 1676.82,1212.84 1677.41,1212.84 1677.99,1212.84 1678.58,1212.84 1679.17,1212.84 1679.75,1212.84 1680.34,1212.84 1680.92,1212.84 1681.51,1212.84 1682.1,1212.84 1682.68,1212.84 1683.27,1212.84 1683.86,1212.84 1684.44,1212.84 1685.03,1212.84 1685.62,1212.84 1686.2,1212.84 1686.79,1212.84 1687.37,1212.84 1687.96,1212.84 1688.55,1212.84 1689.13,1212.84 1689.72,1212.84 1690.31,1212.84 1690.89,1212.84 1691.48,1212.84 1692.07,1212.84 1692.65,1212.84 1693.24,1212.84 1693.83,1212.84 1694.41,1212.84 1695,1212.84 1695.58,1212.84 1696.17,1212.84 1696.76,1212.84 1697.34,1212.84 1697.93,1212.84 1698.52,1212.84 1699.1,1212.84 1699.69,1212.84 1700.28,1212.84 1700.86,1212.84 1701.45,1212.84 1702.04,1212.84 1702.62,1212.84 1703.21,1212.84 1703.79,1212.84 1704.38,1212.84 1704.97,1212.84 1705.55,1212.84 1706.14,1212.84 1706.73,1212.84 1707.31,1212.84 1707.9,1212.84 1708.49,1212.84 1709.07,1212.84 1709.66,1212.84 1710.24,1212.84 1710.83,1212.84 1711.42,1212.84 1712,1212.84 1712.59,1212.84 1713.18,1212.84 1713.76,1212.84 1714.35,1212.84 1714.94,1212.84 1715.52,1212.84 1716.11,1212.84 1716.7,1212.84 1717.28,1212.84 1717.87,1212.84 1718.45,1212.84 1719.04,1212.84 1719.63,1212.84 1720.21,1212.84 1720.8,1212.84 1721.39,1212.84 1721.97,1212.84 1722.56,1212.84 1723.15,1212.84 1723.73,1212.84 1724.32,1212.84 1724.91,1212.84 1725.49,1212.84 1726.08,1212.84 1726.66,1212.84 1727.25,1212.84 1727.84,1212.84 1728.42,1212.84 1729.01,1212.84 1729.6,1212.84 1730.18,1212.84 1730.77,1212.84 1731.36,1212.84 1731.94,1212.84 1732.53,1212.84 1733.11,1212.84 1733.7,1212.84 1734.29,1212.84 1734.87,1212.84 1735.46,1212.84 1736.05,1212.84 1736.63,1212.84 1737.22,1212.84 1737.81,1212.84 1738.39,1212.84 1738.98,1212.84 1739.57,1212.84 1740.15,1212.84 1740.74,1212.84 1741.32,1212.84 1741.91,1212.84 1742.5,1212.84 1743.08,1212.84 1743.67,1212.84 1744.26,1212.84 1744.84,1212.84 1745.43,1212.84 1746.02,1212.84 1746.6,1212.84 1747.19,1212.84 1747.78,1212.84 1748.36,1212.84 1748.95,1212.84 1749.53,1212.84 1750.12,1212.84 1750.71,1212.84 1751.29,1212.84 1751.88,1212.84 1752.47,1212.84 1753.05,1212.84 1753.64,1212.84 1754.23,1212.84 1754.81,1212.84 1755.4,1212.84 1755.99,1212.84 1756.57,1212.84 1757.16,1212.84 1757.74,1212.84 1758.33,1212.84 1758.92,1212.84 1759.5,1212.84 1760.09,1212.84 1760.68,1212.84 1761.26,1212.84 1761.85,1212.84 1762.44,1212.84 1763.02,1212.84 1763.61,1212.84 1764.19,1212.84 1764.78,1212.84 1765.37,1212.84 1765.95,1212.84 1766.54,1212.84 1767.13,1212.84 1767.71,1212.84 1768.3,1212.84 1768.89,1212.84 1769.47,1212.84 1770.06,1212.84 1770.65,1212.84 1771.23,1212.84 1771.82,1212.84 1772.4,1212.84 1772.99,1212.84 1773.58,1212.84 1774.16,1212.84 1774.75,1212.84 1775.34,1212.84 1775.92,1212.84 1776.51,1212.84 1777.1,1212.84 1777.68,1212.84 1778.27,1212.84 1778.86,1212.84 1779.44,1212.84 1780.03,1212.84 1780.61,1212.84 1781.2,1212.84 1781.79,1212.84 1782.37,1212.84 1782.96,1212.84 1783.55,1212.84 1784.13,1212.84 1784.72,1212.84 1785.31,1212.84 1785.89,1212.84 1786.48,1212.84 1787.06,1212.84 1787.65,1212.84 1788.24,1212.84 1788.82,1212.84 1789.41,1212.84 1790,1212.84 1790.58,1212.84 1791.17,1212.84 1791.76,1212.84 1792.34,1212.84 1792.93,1212.84 1793.52,1212.84 1794.1,1212.84 1794.69,1212.84 1795.27,1212.84 1795.86,1212.84 1796.45,1212.84 1797.03,1212.84 1797.62,1212.84 1798.21,1212.84 1798.79,1212.84 1799.38,1212.84 1799.97,1212.84 1800.55,1212.84 1801.14,1212.84 1801.73,1212.84 1802.31,1212.84 1802.9,1212.84 1803.48,1212.84 1804.07,1212.84 1804.66,1212.84 1805.24,1212.84 1805.83,1212.84 1806.42,1212.84 1807,1212.84 1807.59,1212.84 1808.18,1212.84 1808.76,1212.84 1809.35,1212.84 1809.94,1212.84 1810.52,1212.84 1811.11,1212.84 1811.69,1212.84 1812.28,1212.84 1812.87,1212.84 1813.45,1212.84 1814.04,1212.84 1814.63,1212.84 1815.21,1212.84 1815.8,1212.84 1816.39,1212.84 1816.97,1212.84 1817.56,1212.84 1818.14,1212.84 1818.73,1212.84 1819.32,1212.84 1819.9,1212.84 1820.49,1212.84 1821.08,1212.84 1821.66,1212.84 1822.25,1212.84 1822.84,1212.84 1823.42,1212.84 1824.01,1212.84 1824.6,1212.84 1825.18,1212.84 1825.77,1212.84 1826.35,1212.84 1826.94,1212.84 1827.53,1212.84 1828.11,1212.84 1828.7,1212.84 1829.29,1212.84 1829.87,1212.84 1830.46,1212.84 1831.05,1212.84 1831.63,1212.84 1832.22,1212.84 1832.81,1212.84 1833.39,1212.84 1833.98,1212.84 1834.56,1212.84 1835.15,1212.84 1835.74,1212.84 1836.32,1212.84 1836.91,1212.84 1837.5,1212.84 1838.08,1212.84 1838.67,1212.84 1839.26,1212.84 1839.84,1212.84 1840.43,1212.84 1841.01,1212.84 1841.6,1212.84 1842.19,1212.84 1842.77,1212.84 1843.36,1212.84 1843.95,1212.84 1844.53,1212.84 1845.12,1212.84 1845.71,1212.84 1846.29,1212.84 1846.88,1212.84 1847.47,1212.84 1848.05,1212.84 1848.64,1212.84 1849.22,1212.84 1849.81,1212.84 1850.4,1212.84 1850.98,1212.84 1851.57,1212.84 1852.16,1212.84 1852.74,1212.84 1853.33,1212.84 1853.92,1212.84 1854.5,1212.84 1855.09,1212.84 1855.68,1212.84 1856.26,1212.84 1856.85,1212.84 1857.43,1212.84 1858.02,1212.84 1858.61,1212.84 1859.19,1212.84 1859.78,1212.84 1860.37,1212.84 1860.95,1212.84 1861.54,1212.84 1862.13,1212.84 1862.71,1212.84 1863.3,1212.84 1863.88,1212.84 1864.47,1212.84 1865.06,1212.84 1865.64,1212.84 1866.23,1212.84 1866.82,1212.84 1867.4,1212.84 1867.99,1212.84 1868.58,1212.84 1869.16,1212.84 1869.75,1212.84 1870.34,1212.84 1870.92,1212.84 1871.51,1212.84 1872.09,1212.84 1872.68,1212.84 1873.27,1212.84 1873.85,1212.84 1874.44,1212.84 1875.03,1212.84 1875.61,1212.84 1876.2,1212.84 1876.79,1212.84 1877.37,1212.84 1877.96,1212.84 1878.55,1212.84 1879.13,1212.84 1879.72,1212.84 1880.3,1212.84 1880.89,1212.84 1881.48,1212.84 1882.06,1212.84 1882.65,1212.84 1883.24,1212.84 1883.82,1212.84 1884.41,1212.84 1885,1212.84 1885.58,1212.84 1886.17,1212.84 1886.76,1212.84 1887.34,1212.84 1887.93,1212.84 1888.51,1212.84 1889.1,1212.84 1889.69,1212.84 1890.27,1212.84 1890.86,1212.84 1891.45,1212.84 1892.03,1212.84 1892.62,1212.84 1893.21,1212.84 1893.79,1212.84 1894.38,1212.84 1894.96,1212.84 1895.55,1212.84 1896.14,1212.84 1896.72,1212.84 1897.31,1212.84 1897.9,1212.84 1898.48,1212.84 1899.07,1212.84 1899.66,1212.84 1900.24,1212.84 1900.83,1212.84 1901.42,1212.84 1902,1212.84 1902.59,1212.84 1903.17,1212.84 1903.76,1212.84 1904.35,1212.84 1904.93,1212.84 1905.52,1212.84 1906.11,1212.84 1906.69,1212.84 1907.28,1212.84 1907.87,1212.84 1908.45,1212.84 1909.04,1212.84 1909.63,1212.84 1910.21,1212.84 1910.8,1212.84 1911.38,1212.84 1911.97,1212.84 1912.56,1212.84 1913.14,1212.84 1913.73,1212.84 1914.32,1212.84 1914.9,1212.84 1915.49,1212.84 1916.08,1212.84 1916.66,1212.84 1917.25,1212.84 1917.83,1212.84 1918.42,1212.84 1919.01,1212.84 1919.59,1212.84 1920.18,1212.84 1920.77,1212.84 1921.35,1212.84 1921.94,1212.84 1922.53,1212.84 1923.11,1212.84 1923.7,1212.84 1924.29,1212.84 1924.87,1212.84 1925.46,1212.84 1926.04,1212.84 1926.63,1212.84 1927.22,1212.84 1927.8,1212.84 1928.39,1212.84 1928.98,1212.84 1929.56,1212.84 1930.15,1212.84 1930.74,1212.84 1931.32,1212.84 1931.91,1212.84 1932.5,1212.84 1933.08,1212.84 1933.67,1212.84 1934.25,1212.84 1934.84,1212.84 1935.43,1212.84 1936.01,1212.84 1936.6,1212.84 1937.19,1212.84 1937.77,1212.84 1938.36,1212.84 1938.95,1212.84 1939.53,1212.84 1940.12,1212.84 1940.71,1212.84 1941.29,1212.84 1941.88,1212.84 1942.46,1212.84 1943.05,1212.84 1943.64,1212.84 1944.22,1212.84 1944.81,1212.84 1945.4,1212.84 1945.98,1212.84 1946.57,1212.84 1947.16,1212.84 1947.74,1212.84 1948.33,1212.84 1948.91,1212.84 1949.5,1212.84 1950.09,1212.84 1950.67,1212.84 1951.26,1212.84 1951.85,1212.84 1952.43,1212.84 1953.02,1212.84 1953.61,1212.84 1954.19,1212.84 1954.78,1212.84 1955.37,1212.84 1955.95,1212.84 1956.54,1212.84 1957.12,1212.84 1957.71,1212.84 1958.3,1212.84 1958.88,1212.84 1959.47,1212.84 1960.06,1212.84 1960.64,1212.84 1961.23,1212.84 1961.82,1212.84 1962.4,1212.84 1962.99,1212.84 1963.58,1212.84 1964.16,1212.84 1964.75,1212.84 1965.33,1212.84 1965.92,1212.84 1966.51,1212.84 1967.09,1212.84 1967.68,1212.84 1968.27,1212.84 1968.85,1212.84 1969.44,1212.84 1970.03,1212.84 1970.61,1212.84 1971.2,1212.84 1971.78,1212.84 1972.37,1212.84 1972.96,1212.84 1973.54,1212.84 1974.13,1212.84 1974.72,1212.84 1975.3,1212.84 1975.89,1212.84 1976.48,1212.84 1977.06,1212.84 1977.65,1212.84 1978.24,1212.84 1978.82,1212.84 1979.41,1212.84 1979.99,1212.84 1980.58,1212.84 1981.17,1212.84 1981.75,1212.84 1982.34,1212.84 1982.93,1212.84 1983.51,1212.84 1984.1,1212.84 1984.69,1212.84 1985.27,1212.84 1985.86,1212.84 1986.45,1212.84 1987.03,1212.84 1987.62,1212.84 1988.2,1212.84 1988.79,1212.84 1989.38,1212.84 1989.96,1212.84 1990.55,1212.84 1991.14,1212.84 1991.72,1212.84 1992.31,1212.84 1992.9,1212.84 1993.48,1212.84 1994.07,1212.84 1994.65,1212.84 1995.24,1212.84 1995.83,1212.84 1996.41,1212.84 1997,1212.84 1997.59,1212.84 1998.17,1212.84 1998.76,1212.84 1999.35,1212.84 1999.93,1212.84 2000.52,1212.84 2001.11,1212.84 2001.69,1212.84 2002.28,1212.84 2002.86,1212.84 2003.45,1212.84 2004.04,1212.84 2004.62,1212.84 2005.21,1212.84 2005.8,1212.84 2006.38,1212.84 2006.97,1212.84 2007.56,1212.84 2008.14,1212.84 2008.73,1212.84 2009.32,1212.84 2009.9,1212.84 2010.49,1212.84 2011.07,1212.84 2011.66,1212.84 2012.25,1212.84 2012.83,1212.84 2013.42,1212.84 2014.01,1212.84 2014.59,1212.84 2015.18,1212.84 2015.77,1212.84 2016.35,1212.84 2016.94,1212.84 2017.53,1212.84 2018.11,1212.84 2018.7,1212.84 2019.28,1212.84 2019.87,1212.84 2020.46,1212.84 2021.04,1212.84 2021.63,1212.84 2022.22,1212.84 2022.8,1212.84 2023.39,1212.84 2023.98,1212.84 2024.56,1212.84 2025.15,1212.84 2025.73,1212.84 2026.32,1212.84 2026.91,1212.84 2027.49,1212.84 2028.08,1212.84 2028.67,1212.84 2029.25,1212.84 2029.84,1212.84 2030.43,1212.84 2031.01,1212.84 2031.6,1212.84 2032.19,1212.84 2032.77,1212.84 2033.36,1212.84 2033.94,1212.84 2034.53,1212.84 2035.12,1212.84 2035.7,1212.84 2036.29,1212.84 2036.88,1212.84 2037.46,1212.84 2038.05,1212.84 2038.64,1212.84 2039.22,1212.84 2039.81,1212.84 2040.4,1212.84 2040.98,1212.84 2041.57,1212.84 2042.15,1212.84 2042.74,1212.84 2043.33,1212.84 2043.91,1212.84 2044.5,1212.84 2045.09,1212.84 2045.67,1212.84 2046.26,1212.84 2046.85,1212.84 2047.43,1212.84 2048.02,1212.84 2048.6,1212.84 2049.19,1212.84 2049.78,1212.84 2050.36,1212.84 2050.95,1212.84 2051.54,1212.84 2052.12,1212.84 2052.71,1212.84 2053.3,1212.84 2053.88,1212.84 2054.47,1212.84 2055.06,1212.84 2055.64,1212.84 2056.23,1212.84 2056.81,1212.84 2057.4,1212.84 2057.99,1212.84 2058.57,1212.84 2059.16,1212.84 2059.75,1212.84 2060.33,1212.84 2060.92,1212.84 2061.51,1212.84 2062.09,1212.84 2062.68,1212.84 2063.27,1212.84 2063.85,1212.84 2064.44,1212.84 2065.02,1212.84 2065.61,1212.84 2066.2,1212.84 2066.78,1212.84 2067.37,1212.84 2067.96,1212.84 2068.54,1212.84 2069.13,1212.84 2069.72,1212.84 2070.3,1212.84 2070.89,1212.84 2071.48,1212.84 2072.06,1212.84 2072.65,1212.84 2073.23,1212.84 2073.82,1212.84 2074.41,1212.84 2074.99,1212.84 2075.58,1212.84 2076.17,1212.84 2076.75,1212.84 2077.34,1212.84 2077.93,1212.84 2078.51,1212.84 2079.1,1212.84 2079.68,1212.84 2080.27,1212.84 2080.86,1212.84 2081.44,1212.84 2082.03,1212.84 2082.62,1212.84 2083.2,1212.84 2083.79,1212.84 2084.38,1212.84 2084.96,1212.84 2085.55,1212.84 2086.14,1212.84 2086.72,1212.84 2087.31,1212.84 2087.89,1212.84 2088.48,1212.84 2089.07,1212.84 2089.65,1212.84 2090.24,1212.84 2090.83,1212.84 2091.41,1212.84 2092,1212.84 2092.59,1212.84 2093.17,1212.84 2093.76,1212.84 2094.35,1212.84 2094.93,1212.84 2095.52,1212.84 2096.1,1212.84 2096.69,1212.84 2097.28,1212.84 2097.86,1212.84 2098.45,1212.84 2099.04,1212.84 2099.62,1212.84 2100.21,1212.84 2100.8,1212.84 2101.38,1212.84 2101.97,1212.84 2102.55,1212.84 2103.14,1212.84 2103.73,1212.84 2104.31,1212.84 2104.9,1212.84 2105.49,1212.84 2106.07,1212.84 2106.66,1212.84 2107.25,1212.84 2107.83,1212.84 2108.42,1212.84 2109.01,1212.84 2109.59,1212.84 2110.18,1212.84 2110.76,1212.84 2111.35,1212.84 2111.94,1212.84 2112.52,1212.84 2113.11,1212.84 2113.7,1212.84 2114.28,1212.84 2114.87,1212.84 2115.46,1212.84 2116.04,1212.84 2116.63,1212.84 2117.22,1212.84 2117.8,1212.84 2118.39,1212.84 2118.97,1212.84 2119.56,1212.84 2120.15,1212.84 2120.73,1212.84 2121.32,1212.84 2121.91,1212.84 2122.49,1212.84 2123.08,1212.84 2123.67,1212.84 2124.25,1212.84 2124.84,1212.84 2125.42,1212.84 2126.01,1212.84 2126.6,1212.84 2127.18,1212.84 2127.77,1212.84 2128.36,1212.84 2128.94,1212.84 2129.53,1212.84 2130.12,1212.84 2130.7,1212.84 2131.29,1212.84 2131.88,1212.84 2132.46,1212.84 2133.05,1212.84 2133.63,1212.84 2134.22,1212.84 2134.81,1212.84 2135.39,1212.84 2135.98,1212.84 2136.57,1212.84 2137.15,1212.84 2137.74,1212.84 2138.33,1212.84 2138.91,1212.84 2139.5,1212.84 2140.09,1212.84 2140.67,1212.84 2141.26,1212.84 2141.84,1212.84 2142.43,1212.84 2143.02,1212.84 2143.6,1212.84 2144.19,1212.84 2144.78,1212.84 2145.36,1212.84 2145.95,1212.84 2146.54,1212.84 2147.12,1212.84 2147.71,1212.84 2148.3,1212.84 2148.88,1212.84 2149.47,1212.84 2150.05,1212.84 2150.64,1212.84 2151.23,1212.84 2151.81,1212.84 2152.4,1212.84 2152.99,1212.84 2153.57,1212.84 2154.16,1212.84 2154.75,1212.84 2155.33,1212.84 2155.92,1212.84 2156.5,1212.84 2157.09,1212.84 2157.68,1212.84 2158.26,1212.84 \"/>\n<path clip-path=\"url(#clip222)\" d=\"M986.025 1212.67 L986.612 1212.67 L987.198 1212.67 L987.785 1212.67 L988.371 1212.67 L988.957 1212.67 L989.544 1212.67 L990.13 1212.67 L990.717 1212.67 L991.303 1212.67 L991.889 1212.67 L992.476 1212.67 L993.062 1212.67 L993.649 1212.67 L994.235 1212.67 L994.822 1212.67 L995.408 1212.67 L995.994 1212.67 L996.581 1212.67 L997.167 1212.67 L997.754 1212.67 L998.34 1212.67 L998.926 1212.67 L999.513 1212.67 L1000.1 1212.67 L1000.69 1212.67 L1001.27 1212.67 L1001.86 1212.67 L1002.44 1212.67 L1003.03 1212.67 L1003.62 1212.67 L1004.2 1212.67 L1004.79 1212.67 L1005.38 1212.67 L1005.96 1212.67 L1006.55 1212.67 L1007.14 1212.67 L1007.72 1212.67 L1008.31 1212.67 L1008.9 1212.67 L1009.48 1212.67 L1010.07 1212.67 L1010.65 1212.67 L1011.24 1212.67 L1011.83 1212.67 L1012.41 1212.67 L1013 1212.67 L1013.59 1212.67 L1014.17 1212.67 L1014.76 1212.67 L1015.35 1212.67 L1015.93 1212.67 L1016.52 1212.67 L1017.11 1212.67 L1017.69 1212.67 L1018.28 1212.67 L1018.86 1212.67 L1019.45 1212.67 L1020.04 1212.67 L1020.62 1212.67 L1021.21 1212.67 L1021.8 1212.67 L1022.38 1212.67 L1022.97 1212.67 L1023.56 1212.67 L1024.14 1212.67 L1024.73 1212.67 L1025.32 1212.67 L1025.9 1212.67 L1026.49 1212.67 L1027.07 1212.67 L1027.66 1212.67 L1028.25 1212.67 L1028.83 1212.67 L1029.42 1212.67 L1030.01 1212.67 L1030.59 1212.67 L1031.18 1212.67 L1031.77 1212.67 L1032.35 1212.67 L1032.94 1212.67 L1033.52 1212.67 L1034.11 1212.67 L1034.7 1212.67 L1035.28 1212.67 L1035.87 1212.67 L1036.46 1212.67 L1037.04 1212.67 L1037.63 1212.67 L1038.22 1212.67 L1038.8 1212.67 L1039.39 1212.67 L1039.98 1212.67 L1040.56 1212.67 L1041.15 1212.67 L1041.73 1212.67 L1042.32 1212.67 L1042.91 1212.67 L1043.49 1212.67 L1044.08 1212.67 L1044.67 1212.67 L1045.25 1212.67 L1045.84 1212.67 L1046.43 1212.67 L1047.01 1212.67 L1047.6 1212.67 L1048.19 1212.67 L1048.77 1212.67 L1049.36 1212.67 L1049.94 1212.67 L1050.53 1212.67 L1051.12 1212.67 L1051.7 1212.67 L1052.29 1212.67 L1052.88 1212.67 L1053.46 1212.67 L1054.05 1212.67 L1054.64 1212.67 L1055.22 1212.67 L1055.81 1212.67 L1056.39 1212.67 L1056.98 1212.67 L1057.57 1212.67 L1058.15 1212.67 L1058.74 1212.67 L1059.33 1212.67 L1059.91 1212.67 L1060.5 1212.67 L1061.09 1212.67 L1061.67 1212.67 L1062.26 1212.67 L1062.85 1212.67 L1063.43 1212.67 L1064.02 1212.67 L1064.6 1212.67 L1065.19 1212.67 L1065.78 1212.67 L1066.36 1212.67 L1066.95 1212.67 L1067.54 1212.67 L1068.12 1212.67 L1068.71 1212.67 L1069.3 1212.67 L1069.88 1212.67 L1070.47 1212.67 L1071.06 1212.67 L1071.64 1212.67 L1072.23 1212.67 L1072.81 1212.67 L1073.4 1212.67 L1073.99 1212.67 L1074.57 1212.67 L1075.16 1212.67 L1075.75 1212.67 L1076.33 1212.67 L1076.92 1212.67 L1077.51 1212.67 L1078.09 1212.67 L1078.68 1212.67 L1079.26 1212.67 L1079.85 1212.67 L1080.44 1212.67 L1081.02 1212.67 L1081.61 1212.67 L1082.2 1212.67 L1082.78 1212.67 L1083.37 1212.67 L1083.96 1212.67 L1084.54 1212.67 L1085.13 1212.67 L1085.72 1212.67 L1086.3 1212.67 L1086.89 1212.67 L1087.47 1212.67 L1088.06 1212.67 L1088.65 1212.67 L1089.23 1212.67 L1089.82 1212.67 L1090.41 1212.67 L1090.99 1212.67 L1091.58 1212.67 L1092.17 1212.67 L1092.75 1212.67 L1093.34 1212.67 L1093.93 1212.67 L1094.51 1212.67 L1095.1 1212.67 L1095.68 1212.67 L1096.27 1212.67 L1096.86 1212.67 L1097.44 1212.67 L1098.03 1212.67 L1098.62 1212.67 L1099.2 1212.67 L1099.79 1212.67 L1100.38 1212.67 L1100.96 1212.67 L1101.55 1212.67 L1102.14 1212.67 L1102.72 1212.67 L1103.31 1212.67 L1103.89 1212.67 L1104.48 1212.67 L1105.07 1212.67 L1105.65 1212.67 L1106.24 1212.67 L1106.83 1212.67 L1107.41 1212.67 L1108 1212.67 L1108.59 1212.67 L1109.17 1212.67 L1109.76 1212.67 L1110.34 1212.67 L1110.93 1212.67 L1111.52 1212.67 L1112.1 1212.67 L1112.69 1212.67 L1113.28 1212.67 L1113.86 1212.67 L1114.45 1212.67 L1115.04 1212.67 L1115.62 1212.67 L1116.21 1212.67 L1116.8 1212.67 L1117.38 1212.67 L1117.97 1212.67 L1118.55 1212.67 L1119.14 1212.67 L1119.73 1212.67 L1120.31 1212.67 L1120.9 1212.67 L1121.49 1212.67 L1122.07 1212.67 L1122.66 1212.67 L1123.25 1212.67 L1123.83 1212.67 L1124.42 1212.67 L1125.01 1212.67 L1125.59 1212.67 L1126.18 1212.67 L1126.76 1212.67 L1127.35 1212.67 L1127.94 1212.67 L1128.52 1212.67 L1129.11 1212.67 L1129.7 1212.67 L1130.28 1212.67 L1130.87 1212.67 L1131.46 1212.67 L1132.04 1212.67 L1132.63 1212.67 L1133.21 1212.67 L1133.8 1212.67 L1134.39 1212.67 L1134.97 1212.67 L1135.56 1212.67 L1136.15 1212.67 L1136.73 1212.67 L1137.32 1212.67 L1137.91 1212.67 L1138.49 1212.67 L1139.08 1212.67 L1139.67 1212.67 L1140.25 1212.67 L1140.84 1212.67 L1141.42 1212.67 L1142.01 1212.67 L1142.6 1212.67 L1143.18 1212.67 L1143.77 1212.67 L1144.36 1212.67 L1144.94 1212.67 L1145.53 1212.67 L1146.12 1212.67 L1146.7 1212.67 L1147.29 1212.67 L1147.88 1212.67 L1148.46 1212.67 L1149.05 1212.67 L1149.63 1212.67 L1150.22 1212.67 L1150.81 1212.67 L1151.39 1212.67 L1151.98 1212.67 L1152.57 1212.67 L1153.15 1212.67 L1153.74 1212.67 L1154.33 1212.67 L1154.91 1212.67 L1155.5 1212.67 L1156.09 1212.67 L1156.67 1212.67 L1157.26 1212.67 L1157.84 1212.67 L1158.43 1212.67 L1159.02 1212.67 L1159.6 1212.67 L1160.19 1212.67 L1160.78 1212.67 L1161.36 1212.67 L1161.95 1212.67 L1162.54 1212.67 L1163.12 1212.67 L1163.71 1212.67 L1164.29 1212.67 L1164.88 1212.67 L1165.47 1212.67 L1166.05 1212.67 L1166.64 1212.67 L1167.23 1212.67 L1167.81 1212.67 L1168.4 1212.67 L1168.99 1212.67 L1169.57 1212.67 L1170.16 1212.67 L1170.75 1212.67 L1171.33 1212.67 L1171.92 1212.67 L1172.5 1212.67 L1173.09 1212.67 L1173.68 1212.67 L1174.26 1212.67 L1174.85 1212.67 L1175.44 1212.67 L1176.02 1212.67 L1176.61 1212.67 L1177.2 1212.67 L1177.78 1212.67 L1178.37 1212.67 L1178.96 1212.67 L1179.54 1212.67 L1180.13 1212.67 L1180.71 1212.67 L1181.3 1212.67 L1181.89 1212.67 L1182.47 1212.67 L1183.06 1212.67 L1183.65 1212.67 L1184.23 1212.67 L1184.82 1212.67 L1185.41 1212.67 L1185.99 1212.67 L1186.58 1212.67 L1187.16 1212.67 L1187.75 1212.67 L1188.34 1212.67 L1188.92 1212.67 L1189.51 1212.67 L1190.1 1212.67 L1190.68 1212.67 L1191.27 1212.67 L1191.86 1212.67 L1192.44 1212.67 L1193.03 1212.67 L1193.62 1212.67 L1194.2 1212.67 L1194.79 1212.67 L1195.37 1212.67 L1195.96 1212.67 L1196.55 1212.67 L1197.13 1212.67 L1197.72 1212.67 L1198.31 1212.67 L1198.89 1212.67 L1199.48 1212.67 L1200.07 1212.67 L1200.65 1212.67 L1201.24 1212.67 L1201.83 1212.67 L1202.41 1212.67 L1203 1212.67 L1203.58 1212.67 L1204.17 1212.67 L1204.76 1212.67 L1205.34 1212.67 L1205.93 1212.67 L1206.52 1212.67 L1207.1 1212.67 L1207.69 1212.67 L1208.28 1212.67 L1208.86 1212.67 L1209.45 1212.67 L1210.03 1212.67 L1210.62 1212.67 L1211.21 1212.67 L1211.79 1212.67 L1212.38 1212.67 L1212.97 1212.67 L1213.55 1212.67 L1214.14 1212.67 L1214.73 1212.67 L1215.31 1212.67 L1215.9 1212.67 L1216.49 1212.67 L1217.07 1212.67 L1217.66 1212.67 L1218.24 1212.67 L1218.83 1212.67 L1219.42 1212.67 L1220 1212.67 L1220.59 1212.67 L1221.18 1212.67 L1221.76 1212.67 L1222.35 1212.67 L1222.94 1212.67 L1223.52 1212.67 L1224.11 1212.67 L1224.7 1212.67 L1225.28 1212.67 L1225.87 1212.67 L1226.45 1212.67 L1227.04 1212.67 L1227.63 1212.67 L1228.21 1212.67 L1228.8 1212.67 L1229.39 1212.67 L1229.97 1212.67 L1230.56 1212.67 L1231.15 1212.67 L1231.73 1212.67 L1232.32 1212.67 L1232.91 1212.67 L1233.49 1212.67 L1234.08 1212.67 L1234.66 1212.67 L1235.25 1212.67 L1235.84 1212.67 L1236.42 1212.67 L1237.01 1212.67 L1237.6 1212.67 L1238.18 1212.67 L1238.77 1212.67 L1239.36 1212.67 L1239.94 1212.67 L1240.53 1212.67 L1241.11 1212.67 L1241.7 1212.67 L1242.29 1212.67 L1242.87 1212.67 L1243.46 1212.67 L1244.05 1212.67 L1244.63 1212.67 L1245.22 1212.67 L1245.81 1212.67 L1246.39 1212.67 L1246.98 1212.67 L1247.57 1212.67 L1248.15 1212.67 L1248.74 1212.67 L1249.32 1212.67 L1249.91 1212.67 L1250.5 1212.67 L1251.08 1212.67 L1251.67 1212.67 L1252.26 1212.67 L1252.84 1212.67 L1253.43 1212.67 L1254.02 1212.67 L1254.6 1212.67 L1255.19 1212.67 L1255.78 1212.67 L1256.36 1212.67 L1256.95 1212.67 L1257.53 1212.67 L1258.12 1212.67 L1258.71 1212.67 L1259.29 1212.67 L1259.88 1212.67 L1260.47 1212.67 L1261.05 1212.67 L1261.64 1212.67 L1262.23 1212.67 L1262.81 1212.67 L1263.4 1212.67 L1263.98 1212.67 L1264.57 1212.67 L1265.16 1212.67 L1265.74 1212.67 L1266.33 1212.67 L1266.92 1212.67 L1267.5 1212.67 L1268.09 1212.67 L1268.68 1212.67 L1269.26 1212.67 L1269.85 1212.67 L1270.44 1212.67 L1271.02 1212.67 L1271.61 1212.67 L1272.19 1212.67 L1272.78 1212.67 L1273.37 1212.67 L1273.95 1212.67 L1274.54 1212.67 L1275.13 1212.67 L1275.71 1212.67 L1276.3 1212.67 L1276.89 1212.67 L1277.47 1212.67 L1278.06 1212.67 L1278.65 1212.67 L1279.23 1212.67 L1279.82 1212.67 L1280.4 1212.67 L1280.99 1212.67 L1281.58 1212.67 L1282.16 1212.67 L1282.75 1212.67 L1283.34 1212.67 L1283.92 1212.67 L1284.51 1212.67 L1285.1 1212.67 L1285.68 1212.67 L1286.27 1212.67 L1286.86 1212.67 L1287.44 1212.67 L1288.03 1212.67 L1288.61 1212.67 L1289.2 1212.67 L1289.79 1212.67 L1290.37 1212.67 L1290.96 1212.67 L1291.55 1212.67 L1292.13 1212.67 L1292.72 1212.67 L1293.31 1212.67 L1293.89 1212.67 L1294.48 1212.67 L1295.06 1212.67 L1295.65 1212.67 L1296.24 1212.67 L1296.82 1212.67 L1297.41 1212.67 L1298 1212.67 L1298.58 1212.67 L1299.17 1212.67 L1299.76 1212.67 L1300.34 1212.67 L1300.93 1212.67 L1301.52 1212.67 L1302.1 1212.67 L1302.69 1212.67 L1303.27 1212.67 L1303.86 1212.67 L1304.45 1212.67 L1305.03 1212.67 L1305.62 1212.67 L1306.21 1212.67 L1306.79 1212.67 L1307.38 1212.67 L1307.97 1212.67 L1308.55 1212.67 L1309.14 1212.67 L1309.73 1212.67 L1310.31 1212.67 L1310.9 1212.67 L1311.48 1212.67 L1312.07 1212.67 L1312.66 1212.67 L1313.24 1212.67 L1313.83 1212.67 L1314.42 1212.67 L1315 1212.67 L1315.59 1212.67 L1316.18 1212.67 L1316.76 1212.67 L1317.35 1212.67 L1317.93 1212.67 L1318.52 1212.67 L1319.11 1212.67 L1319.69 1212.67 L1320.28 1212.67 L1320.87 1212.67 L1321.45 1212.67 L1322.04 1212.67 L1322.63 1212.67 L1323.21 1212.67 L1323.8 1212.67 L1324.39 1212.67 L1324.97 1212.67 L1325.56 1212.67 L1326.14 1212.67 L1326.73 1212.67 L1327.32 1212.67 L1327.9 1212.67 L1328.49 1212.67 L1329.08 1212.67 L1329.66 1212.67 L1330.25 1212.67 L1330.84 1212.67 L1331.42 1212.67 L1332.01 1212.67 L1332.6 1212.67 L1333.18 1212.67 L1333.77 1212.67 L1334.35 1212.67 L1334.94 1212.67 L1335.53 1212.67 L1336.11 1212.67 L1336.7 1212.67 L1337.29 1212.67 L1337.87 1212.67 L1338.46 1212.67 L1339.05 1212.67 L1339.63 1212.67 L1340.22 1212.67 L1340.8 1212.67 L1341.39 1212.67 L1341.98 1212.67 L1342.56 1212.67 L1343.15 1212.67 L1343.74 1212.67 L1344.32 1212.67 L1344.91 1212.67 L1345.5 1212.67 L1346.08 1212.67 L1346.67 1212.67 L1347.26 1212.67 L1347.84 1212.67 L1348.43 1212.67 L1349.01 1212.67 L1349.6 1212.67 L1350.19 1212.67 L1350.77 1212.67 L1351.36 1212.67 L1351.95 1212.67 L1352.53 1212.67 L1353.12 1212.67 L1353.71 1212.67 L1354.29 1212.67 L1354.88 1212.67 L1355.47 1212.67 L1356.05 1212.67 L1356.64 1212.67 L1357.22 1212.67 L1357.81 1212.67 L1358.4 1212.67 L1358.98 1212.67 L1359.57 1212.67 L1360.16 1212.67 L1360.74 1212.67 L1361.33 1212.67 L1361.92 1212.67 L1362.5 1212.67 L1363.09 1212.67 L1363.68 1212.67 L1364.26 1212.67 L1364.85 1212.67 L1365.43 1212.67 L1366.02 1212.67 L1366.61 1212.67 L1367.19 1212.67 L1367.78 1212.67 L1368.37 1212.67 L1368.95 1212.67 L1369.54 1212.67 L1370.13 1212.67 L1370.71 1212.67 L1371.3 1212.67 L1371.88 1212.67 L1372.47 1212.67 L1373.06 1212.67 L1373.64 1212.67 L1374.23 1212.67 L1374.82 1212.67 L1375.4 1212.67 L1375.99 1212.67 L1376.58 1212.67 L1377.16 1212.67 L1377.75 1212.67 L1378.34 1212.67 L1378.92 1212.67 L1379.51 1212.67 L1380.09 1212.67 L1380.68 1212.67 L1381.27 1212.67 L1381.85 1212.67 L1382.44 1212.67 L1383.03 1212.67 L1383.61 1212.67 L1384.2 1212.67 L1384.79 1212.67 L1385.37 1212.67 L1385.96 1212.67 L1386.55 1212.67 L1387.13 1212.67 L1387.72 1212.67 L1388.3 1212.67 L1388.89 1212.67 L1389.48 1212.67 L1390.06 1212.67 L1390.65 1212.67 L1391.24 1212.67 L1391.82 1212.67 L1392.41 1212.67 L1393 1212.67 L1393.58 1212.67 L1394.17 1212.67 L1394.75 1212.67 L1395.34 1212.67 L1395.93 1212.67 L1396.51 1212.67 L1397.1 1212.67 L1397.69 1212.67 L1398.27 1212.67 L1398.86 1212.67 L1399.45 1212.67 L1400.03 1212.67 L1400.62 1212.67 L1401.21 1212.67 L1401.79 1212.67 L1402.38 1212.67 L1402.96 1212.67 L1403.55 1212.67 L1404.14 1212.67 L1404.72 1212.67 L1405.31 1212.67 L1405.9 1212.67 L1406.48 1212.67 L1407.07 1212.67 L1407.66 1212.67 L1408.24 1212.67 L1408.83 1212.67 L1409.42 1212.67 L1410 1212.67 L1410.59 1212.67 L1411.17 1212.67 L1411.76 1212.67 L1412.35 1212.67 L1412.93 1212.67 L1413.52 1212.67 L1414.11 1212.67 L1414.69 1212.67 L1415.28 1212.67 L1415.87 1212.67 L1416.45 1212.67 L1417.04 1212.67 L1417.63 1212.67 L1418.21 1212.67 L1418.8 1212.67 L1419.38 1212.67 L1419.97 1212.67 L1420.56 1212.67 L1421.14 1212.67 L1421.73 1212.67 L1422.32 1212.67 L1422.9 1212.67 L1423.49 1212.67 L1424.08 1212.67 L1424.66 1212.67 L1425.25 1212.67 L1425.83 1212.67 L1426.42 1212.67 L1427.01 1212.67 L1427.59 1212.67 L1428.18 1212.67 L1428.77 1212.67 L1429.35 1212.67 L1429.94 1212.67 L1430.53 1212.67 L1431.11 1212.67 L1431.7 1212.67 L1432.29 1212.67 L1432.87 1212.67 L1433.46 1212.67 L1434.04 1212.67 L1434.63 1212.67 L1435.22 1212.67 L1435.8 1212.67 L1436.39 1212.67 L1436.98 1212.67 L1437.56 1212.67 L1438.15 1212.67 L1438.74 1212.67 L1439.32 1212.67 L1439.91 1212.67 L1440.5 1212.67 L1441.08 1212.67 L1441.67 1212.67 L1442.25 1212.67 L1442.84 1212.67 L1443.43 1212.67 L1444.01 1212.67 L1444.6 1212.67 L1445.19 1212.67 L1445.77 1212.67 L1446.36 1212.67 L1446.95 1212.67 L1447.53 1212.67 L1448.12 1212.67 L1448.7 1212.67 L1449.29 1212.67 L1449.88 1212.67 L1450.46 1212.67 L1451.05 1212.67 L1451.64 1212.67 L1452.22 1212.67 L1452.81 1212.67 L1453.4 1212.67 L1453.98 1212.67 L1454.57 1212.67 L1455.16 1212.67 L1455.74 1212.67 L1456.33 1212.67 L1456.91 1212.67 L1457.5 1212.67 L1458.09 1212.67 L1458.67 1212.67 L1459.26 1212.67 L1459.85 1212.67 L1460.43 1212.67 L1461.02 1212.67 L1461.61 1212.67 L1462.19 1212.67 L1462.78 1212.67 L1463.37 1212.67 L1463.95 1212.67 L1464.54 1212.67 L1465.12 1212.67 L1465.71 1212.67 L1466.3 1212.67 L1466.88 1212.67 L1467.47 1212.67 L1468.06 1212.67 L1468.64 1212.67 L1469.23 1212.67 L1469.82 1212.67 L1470.4 1212.67 L1470.99 1212.67 L1471.57 1212.67 L1472.16 1212.67 L1472.75 1212.67 L1473.33 1212.67 L1473.92 1212.67 L1474.51 1212.67 L1475.09 1212.67 L1475.68 1212.67 L1476.27 1212.67 L1476.85 1212.67 L1477.44 1212.67 L1478.03 1212.67 L1478.61 1212.67 L1479.2 1212.67 L1479.78 1212.67 L1480.37 1212.67 L1480.96 1212.67 L1481.54 1212.67 L1482.13 1212.67 L1482.72 1212.67 L1483.3 1212.67 L1483.89 1212.67 L1484.48 1212.67 L1485.06 1212.67 L1485.65 1212.67 L1486.24 1212.67 L1486.82 1212.67 L1487.41 1212.67 L1487.99 1212.67 L1488.58 1212.67 L1489.17 1212.67 L1489.75 1212.67 L1490.34 1212.67 L1490.93 1212.67 L1491.51 1212.67 L1492.1 1212.67 L1492.69 1212.67 L1493.27 1212.67 L1493.86 1212.67 L1494.45 1212.67 L1495.03 1212.67 L1495.62 1212.67 L1496.2 1212.67 L1496.79 1212.67 L1497.38 1212.67 L1497.96 1212.67 L1498.55 1212.67 L1499.14 1212.67 L1499.72 1212.67 L1500.31 1212.67 L1500.9 1212.67 L1501.48 1212.67 L1502.07 1212.67 L1502.65 1212.67 L1503.24 1212.67 L1503.83 1212.67 L1504.41 1212.67 L1505 1212.67 L1505.59 1212.67 L1506.17 1212.67 L1506.76 1212.67 L1507.35 1212.67 L1507.93 1212.67 L1508.52 1212.67 L1509.11 1212.67 L1509.69 1212.67 L1510.28 1212.67 L1510.86 1212.67 L1511.45 1212.67 L1512.04 1212.67 L1512.62 1212.67 L1513.21 1212.67 L1513.8 1212.67 L1514.38 1212.67 L1514.97 1212.67 L1515.56 1212.67 L1516.14 1212.67 L1516.73 1212.67 L1517.32 1212.67 L1517.9 1212.67 L1518.49 1212.67 L1519.07 1212.67 L1519.66 1212.67 L1520.25 1212.67 L1520.83 1212.67 L1521.42 1212.67 L1522.01 1212.67 L1522.59 1212.67 L1523.18 1212.67 L1523.77 1212.67 L1524.35 1212.67 L1524.94 1212.67 L1525.52 1212.67 L1526.11 1212.67 L1526.7 1212.67 L1527.28 1212.67 L1527.87 1212.67 L1528.46 1212.67 L1529.04 1212.67 L1529.63 1212.67 L1530.22 1212.67 L1530.8 1212.67 L1531.39 1212.67 L1531.98 1212.67 L1532.56 1212.67 L1533.15 1212.67 L1533.73 1212.67 L1534.32 1212.67 L1534.91 1212.67 L1535.49 1212.67 L1536.08 1212.67 L1536.67 1212.67 L1537.25 1212.67 L1537.84 1212.67 L1538.43 1212.67 L1539.01 1212.67 L1539.6 1212.67 L1540.19 1212.67 L1540.77 1212.67 L1541.36 1212.67 L1541.94 1212.67 L1542.53 1212.67 L1543.12 1212.67 L1543.7 1212.67 L1544.29 1212.67 L1544.88 1212.67 L1545.46 1212.67 L1546.05 1212.67 L1546.64 1212.67 L1547.22 1212.67 L1547.81 1212.67 L1548.4 1212.67 L1548.98 1212.67 L1549.57 1212.67 L1550.15 1212.67 L1550.74 1212.67 L1551.33 1212.67 L1551.91 1212.67 L1552.5 1212.67 L1553.09 1212.67 L1553.67 1212.67 L1554.26 1212.67 L1554.85 1212.67 L1555.43 1212.67 L1556.02 1212.67 L1556.6 1212.67 L1557.19 1212.67 L1557.78 1212.67 L1558.36 1212.67 L1558.95 1212.67 L1559.54 1212.67 L1560.12 1212.67 L1560.71 1212.67 L1561.3 1212.67 L1561.88 1212.67 L1562.47 1212.67 L1563.06 1212.67 L1563.64 1212.67 L1564.23 1212.67 L1564.81 1212.67 L1565.4 1212.67 L1565.99 1212.67 L1566.57 1212.67 L1567.16 1212.67 L1567.75 1212.67 L1568.33 1212.67 L1568.92 1212.67 L1569.51 1212.67 L1570.09 1212.67 L1570.68 1212.67 L1571.27 1212.67 L1571.85 1212.67 L1572.44 1212.67 L1573.02 1212.67 L1573.61 1212.67 L1574.2 1212.67 L1574.78 1212.67 L1575.37 1212.67 L1575.96 1212.67 L1576.54 1212.67 L1577.13 1212.67 L1577.72 1212.67 L1578.3 1212.67 L1578.89 1212.67 L1579.47 1212.67 L1580.06 1212.67 L1580.65 1212.67 L1581.23 1212.67 L1581.82 1212.67 L1582.41 1212.67 L1582.99 1212.67 L1583.58 1212.67 L1584.17 1212.67 L1584.75 1212.67 L1585.34 1212.67 L1585.93 1212.67 L1586.51 1212.67 L1587.1 1212.67 L1587.68 1212.67 L1588.27 1212.67 L1588.86 1212.67 L1589.44 1212.67 L1590.03 1212.67 L1590.62 1212.67 L1591.2 1212.67 L1591.79 1212.67 L1592.38 1212.67 L1592.96 1212.67 L1593.55 1212.67 L1594.14 1212.67 L1594.72 1212.67 L1595.31 1212.67 L1595.89 1212.67 L1596.48 1212.67 L1597.07 1212.67 L1597.65 1212.67 L1598.24 1212.67 L1598.83 1212.67 L1599.41 1212.67 L1600 1212.67 L1600.59 1212.67 L1601.17 1212.67 L1601.76 1212.67 L1602.34 1212.67 L1602.93 1212.67 L1603.52 1212.67 L1604.1 1212.67 L1604.69 1212.67 L1605.28 1212.67 L1605.86 1212.67 L1606.45 1212.67 L1607.04 1212.67 L1607.62 1212.67 L1608.21 1212.67 L1608.8 1212.67 L1609.38 1212.67 L1609.97 1212.67 L1610.55 1212.67 L1611.14 1212.67 L1611.73 1212.67 L1612.31 1212.67 L1612.9 1212.67 L1613.49 1212.67 L1614.07 1212.67 L1614.66 1212.67 L1615.25 1212.67 L1615.83 1212.67 L1616.42 1212.67 L1617.01 1212.67 L1617.59 1212.67 L1618.18 1212.67 L1618.76 1212.67 L1619.35 1212.67 L1619.94 1212.67 L1620.52 1212.67 L1621.11 1212.67 L1621.7 1212.67 L1622.28 1212.67 L1622.87 1212.67 L1623.46 1212.67 L1624.04 1212.67 L1624.63 1212.67 L1625.22 1212.67 L1625.8 1212.67 L1626.39 1212.67 L1626.97 1212.67 L1627.56 1212.67 L1628.15 1212.67 L1628.73 1212.67 L1629.32 1212.67 L1629.91 1212.67 L1630.49 1212.67 L1631.08 1212.67 L1631.67 1212.67 L1632.25 1212.67 L1632.84 1212.67 L1633.42 1212.67 L1634.01 1212.67 L1634.6 1212.67 L1635.18 1212.67 L1635.77 1212.67 L1636.36 1212.67 L1636.94 1212.67 L1637.53 1212.67 L1638.12 1212.67 L1638.7 1212.67 L1639.29 1212.67 L1639.88 1212.67 L1640.46 1212.67 L1641.05 1212.67 L1641.63 1212.67 L1642.22 1212.67 L1642.81 1212.67 L1643.39 1212.67 L1643.98 1212.67 L1644.57 1212.67 L1645.15 1212.67 L1645.74 1212.67 L1646.33 1212.67 L1646.91 1212.67 L1647.5 1212.67 L1648.09 1212.67 L1648.67 1212.67 L1649.26 1212.67 L1649.84 1212.67 L1650.43 1212.67 L1651.02 1212.67 L1651.6 1212.67 L1652.19 1212.67 L1652.78 1212.67 L1653.36 1212.67 L1653.95 1212.67 L1654.54 1212.67 L1655.12 1212.67 L1655.71 1212.67 L1656.29 1212.67 L1656.88 1212.67 L1657.47 1212.67 L1658.05 1212.67 L1658.64 1212.67 L1659.23 1212.67 L1659.81 1212.67 L1660.4 1212.67 L1660.99 1212.67 L1661.57 1212.67 L1662.16 1212.67 L1662.75 1212.67 L1663.33 1212.67 L1663.92 1212.67 L1664.5 1212.67 L1665.09 1212.67 L1665.68 1212.67 L1666.26 1212.67 L1666.85 1212.67 L1667.44 1212.67 L1668.02 1212.67 L1668.61 1212.67 L1669.2 1212.67 L1669.78 1212.67 L1670.37 1212.67 L1670.96 1212.67 L1671.54 1212.67 L1672.13 1212.67 L1672.71 1212.67 L1673.3 1212.67 L1673.89 1212.67 L1674.47 1212.67 L1675.06 1212.67 L1675.65 1212.67 L1676.23 1212.67 L1676.82 1212.67 L1677.41 1212.67 L1677.99 1212.67 L1678.58 1212.67 L1679.17 1212.67 L1679.75 1212.67 L1680.34 1212.67 L1680.92 1212.67 L1681.51 1212.67 L1682.1 1212.67 L1682.68 1212.67 L1683.27 1212.67 L1683.86 1212.67 L1684.44 1212.67 L1685.03 1212.67 L1685.62 1212.67 L1686.2 1212.67 L1686.79 1212.67 L1687.37 1212.67 L1687.96 1212.67 L1688.55 1212.67 L1689.13 1212.67 L1689.72 1212.67 L1690.31 1212.67 L1690.89 1212.67 L1691.48 1212.67 L1692.07 1212.67 L1692.65 1212.67 L1693.24 1212.67 L1693.83 1212.67 L1694.41 1212.67 L1695 1212.67 L1695.58 1212.67 L1696.17 1212.67 L1696.76 1212.67 L1697.34 1212.67 L1697.93 1212.67 L1698.52 1212.67 L1699.1 1212.67 L1699.69 1212.67 L1700.28 1212.67 L1700.86 1212.67 L1701.45 1212.67 L1702.04 1212.67 L1702.62 1212.67 L1703.21 1212.67 L1703.79 1212.67 L1704.38 1212.67 L1704.97 1212.67 L1705.55 1212.67 L1706.14 1212.67 L1706.73 1212.67 L1707.31 1212.67 L1707.9 1212.67 L1708.49 1212.67 L1709.07 1212.67 L1709.66 1212.67 L1710.24 1212.67 L1710.83 1212.67 L1711.42 1212.67 L1712 1212.67 L1712.59 1212.67 L1713.18 1212.67 L1713.76 1212.67 L1714.35 1212.67 L1714.94 1212.67 L1715.52 1212.67 L1716.11 1212.67 L1716.7 1212.67 L1717.28 1212.67 L1717.87 1212.67 L1718.45 1212.67 L1719.04 1212.67 L1719.63 1212.67 L1720.21 1212.67 L1720.8 1212.67 L1721.39 1212.67 L1721.97 1212.67 L1722.56 1212.67 L1723.15 1212.67 L1723.73 1212.67 L1724.32 1212.67 L1724.91 1212.67 L1725.49 1212.67 L1726.08 1212.67 L1726.66 1212.67 L1727.25 1212.67 L1727.84 1212.67 L1728.42 1212.67 L1729.01 1212.67 L1729.6 1212.67 L1730.18 1212.67 L1730.77 1212.67 L1731.36 1212.67 L1731.94 1212.67 L1732.53 1212.67 L1733.11 1212.67 L1733.7 1212.67 L1734.29 1212.67 L1734.87 1212.67 L1735.46 1212.67 L1736.05 1212.67 L1736.63 1212.67 L1737.22 1212.67 L1737.81 1212.67 L1738.39 1212.67 L1738.98 1212.67 L1739.57 1212.67 L1740.15 1212.67 L1740.74 1212.67 L1741.32 1212.67 L1741.91 1212.67 L1742.5 1212.67 L1743.08 1212.67 L1743.67 1212.67 L1744.26 1212.67 L1744.84 1212.67 L1745.43 1212.67 L1746.02 1212.67 L1746.6 1212.67 L1747.19 1212.67 L1747.78 1212.67 L1748.36 1212.67 L1748.95 1212.67 L1749.53 1212.67 L1750.12 1212.67 L1750.71 1212.67 L1751.29 1212.67 L1751.88 1212.67 L1752.47 1212.67 L1753.05 1212.67 L1753.64 1212.67 L1754.23 1212.67 L1754.81 1212.67 L1755.4 1212.67 L1755.99 1212.67 L1756.57 1212.67 L1757.16 1212.67 L1757.74 1212.67 L1758.33 1212.67 L1758.92 1212.67 L1759.5 1212.67 L1760.09 1212.67 L1760.68 1212.67 L1761.26 1212.67 L1761.85 1212.67 L1762.44 1212.67 L1763.02 1212.67 L1763.61 1212.67 L1764.19 1212.67 L1764.78 1212.67 L1765.37 1212.67 L1765.95 1212.67 L1766.54 1212.67 L1767.13 1212.67 L1767.71 1212.67 L1768.3 1212.67 L1768.89 1212.67 L1769.47 1212.67 L1770.06 1212.67 L1770.65 1212.67 L1771.23 1212.67 L1771.82 1212.67 L1772.4 1212.67 L1772.99 1212.67 L1773.58 1212.67 L1774.16 1212.67 L1774.75 1212.67 L1775.34 1212.67 L1775.92 1212.67 L1776.51 1212.67 L1777.1 1212.67 L1777.68 1212.67 L1778.27 1212.67 L1778.86 1212.67 L1779.44 1212.67 L1780.03 1212.67 L1780.61 1212.67 L1781.2 1212.67 L1781.79 1212.67 L1782.37 1212.67 L1782.96 1212.67 L1783.55 1212.67 L1784.13 1212.67 L1784.72 1212.67 L1785.31 1212.67 L1785.89 1212.67 L1786.48 1212.67 L1787.06 1212.67 L1787.65 1212.67 L1788.24 1212.67 L1788.82 1212.67 L1789.41 1212.67 L1790 1212.67 L1790.58 1212.67 L1791.17 1212.67 L1791.76 1212.67 L1792.34 1212.67 L1792.93 1212.67 L1793.52 1212.67 L1794.1 1212.67 L1794.69 1212.67 L1795.27 1212.67 L1795.86 1212.67 L1796.45 1212.67 L1797.03 1212.67 L1797.62 1212.67 L1798.21 1212.67 L1798.79 1212.67 L1799.38 1212.67 L1799.97 1212.67 L1800.55 1212.67 L1801.14 1212.67 L1801.73 1212.67 L1802.31 1212.67 L1802.9 1212.67 L1803.48 1212.67 L1804.07 1212.67 L1804.66 1212.67 L1805.24 1212.67 L1805.83 1212.67 L1806.42 1212.67 L1807 1212.67 L1807.59 1212.67 L1808.18 1212.67 L1808.76 1212.67 L1809.35 1212.67 L1809.94 1212.67 L1810.52 1212.67 L1811.11 1212.67 L1811.69 1212.67 L1812.28 1212.67 L1812.87 1212.67 L1813.45 1212.67 L1814.04 1212.67 L1814.63 1212.67 L1815.21 1212.67 L1815.8 1212.67 L1816.39 1212.67 L1816.97 1212.67 L1817.56 1212.67 L1818.14 1212.67 L1818.73 1212.67 L1819.32 1212.67 L1819.9 1212.67 L1820.49 1212.67 L1821.08 1212.67 L1821.66 1212.67 L1822.25 1212.67 L1822.84 1212.67 L1823.42 1212.67 L1824.01 1212.67 L1824.6 1212.67 L1825.18 1212.67 L1825.77 1212.67 L1826.35 1212.67 L1826.94 1212.67 L1827.53 1212.67 L1828.11 1212.67 L1828.7 1212.67 L1829.29 1212.67 L1829.87 1212.67 L1830.46 1212.67 L1831.05 1212.67 L1831.63 1212.67 L1832.22 1212.67 L1832.81 1212.67 L1833.39 1212.67 L1833.98 1212.67 L1834.56 1212.67 L1835.15 1212.67 L1835.74 1212.67 L1836.32 1212.67 L1836.91 1212.67 L1837.5 1212.67 L1838.08 1212.67 L1838.67 1212.67 L1839.26 1212.67 L1839.84 1212.67 L1840.43 1212.67 L1841.01 1212.67 L1841.6 1212.67 L1842.19 1212.67 L1842.77 1212.67 L1843.36 1212.67 L1843.95 1212.67 L1844.53 1212.67 L1845.12 1212.67 L1845.71 1212.67 L1846.29 1212.67 L1846.88 1212.67 L1847.47 1212.67 L1848.05 1212.67 L1848.64 1212.67 L1849.22 1212.67 L1849.81 1212.67 L1850.4 1212.67 L1850.98 1212.67 L1851.57 1212.67 L1852.16 1212.67 L1852.74 1212.67 L1853.33 1212.67 L1853.92 1212.67 L1854.5 1212.67 L1855.09 1212.67 L1855.68 1212.67 L1856.26 1212.67 L1856.85 1212.67 L1857.43 1212.67 L1858.02 1212.67 L1858.61 1212.67 L1859.19 1212.67 L1859.78 1212.67 L1860.37 1212.67 L1860.95 1212.67 L1861.54 1212.67 L1862.13 1212.67 L1862.71 1212.67 L1863.3 1212.67 L1863.88 1212.67 L1864.47 1212.67 L1865.06 1212.67 L1865.64 1212.67 L1866.23 1212.67 L1866.82 1212.67 L1867.4 1212.67 L1867.99 1212.67 L1868.58 1212.67 L1869.16 1212.67 L1869.75 1212.67 L1870.34 1212.67 L1870.92 1212.67 L1871.51 1212.67 L1872.09 1212.67 L1872.68 1212.67 L1873.27 1212.67 L1873.85 1212.67 L1874.44 1212.67 L1875.03 1212.67 L1875.61 1212.67 L1876.2 1212.67 L1876.79 1212.67 L1877.37 1212.67 L1877.96 1212.67 L1878.55 1212.67 L1879.13 1212.67 L1879.72 1212.67 L1880.3 1212.67 L1880.89 1212.67 L1881.48 1212.67 L1882.06 1212.67 L1882.65 1212.67 L1883.24 1212.67 L1883.82 1212.67 L1884.41 1212.67 L1885 1212.67 L1885.58 1212.67 L1886.17 1212.67 L1886.76 1212.67 L1887.34 1212.67 L1887.93 1212.67 L1888.51 1212.67 L1889.1 1212.67 L1889.69 1212.67 L1890.27 1212.67 L1890.86 1212.67 L1891.45 1212.67 L1892.03 1212.67 L1892.62 1212.67 L1893.21 1212.67 L1893.79 1212.67 L1894.38 1212.67 L1894.96 1212.67 L1895.55 1212.67 L1896.14 1212.67 L1896.72 1212.67 L1897.31 1212.67 L1897.9 1212.67 L1898.48 1212.67 L1899.07 1212.67 L1899.66 1212.67 L1900.24 1212.67 L1900.83 1212.67 L1901.42 1212.67 L1902 1212.67 L1902.59 1212.67 L1903.17 1212.67 L1903.76 1212.67 L1904.35 1212.67 L1904.93 1212.67 L1905.52 1212.67 L1906.11 1212.67 L1906.69 1212.67 L1907.28 1212.67 L1907.87 1212.67 L1908.45 1212.67 L1909.04 1212.67 L1909.63 1212.67 L1910.21 1212.67 L1910.8 1212.67 L1911.38 1212.67 L1911.97 1212.67 L1912.56 1212.67 L1913.14 1212.67 L1913.73 1212.67 L1914.32 1212.67 L1914.9 1212.67 L1915.49 1212.67 L1916.08 1212.67 L1916.66 1212.67 L1917.25 1212.67 L1917.83 1212.67 L1918.42 1212.67 L1919.01 1212.67 L1919.59 1212.67 L1920.18 1212.67 L1920.77 1212.67 L1921.35 1212.67 L1921.94 1212.67 L1922.53 1212.67 L1923.11 1212.67 L1923.7 1212.67 L1924.29 1212.67 L1924.87 1212.67 L1925.46 1212.67 L1926.04 1212.67 L1926.63 1212.67 L1927.22 1212.67 L1927.8 1212.67 L1928.39 1212.67 L1928.98 1212.67 L1929.56 1212.67 L1930.15 1212.67 L1930.74 1212.67 L1931.32 1212.67 L1931.91 1212.67 L1932.5 1212.67 L1933.08 1212.67 L1933.67 1212.67 L1934.25 1212.67 L1934.84 1212.67 L1935.43 1212.67 L1936.01 1212.67 L1936.6 1212.67 L1937.19 1212.67 L1937.77 1212.67 L1938.36 1212.67 L1938.95 1212.67 L1939.53 1212.67 L1940.12 1212.67 L1940.71 1212.67 L1941.29 1212.67 L1941.88 1212.67 L1942.46 1212.67 L1943.05 1212.67 L1943.64 1212.67 L1944.22 1212.67 L1944.81 1212.67 L1945.4 1212.67 L1945.98 1212.67 L1946.57 1212.67 L1947.16 1212.67 L1947.74 1212.67 L1948.33 1212.67 L1948.91 1212.67 L1949.5 1212.67 L1950.09 1212.67 L1950.67 1212.67 L1951.26 1212.67 L1951.85 1212.67 L1952.43 1212.67 L1953.02 1212.67 L1953.61 1212.67 L1954.19 1212.67 L1954.78 1212.67 L1955.37 1212.67 L1955.95 1212.67 L1956.54 1212.67 L1957.12 1212.67 L1957.71 1212.67 L1958.3 1212.67 L1958.88 1212.67 L1959.47 1212.67 L1960.06 1212.67 L1960.64 1212.67 L1961.23 1212.67 L1961.82 1212.67 L1962.4 1212.67 L1962.99 1212.67 L1963.58 1212.67 L1964.16 1212.67 L1964.75 1212.67 L1965.33 1212.67 L1965.92 1212.67 L1966.51 1212.67 L1967.09 1212.67 L1967.68 1212.67 L1968.27 1212.67 L1968.85 1212.67 L1969.44 1212.67 L1970.03 1212.67 L1970.61 1212.67 L1971.2 1212.67 L1971.78 1212.67 L1972.37 1212.67 L1972.96 1212.67 L1973.54 1212.67 L1974.13 1212.67 L1974.72 1212.67 L1975.3 1212.67 L1975.89 1212.67 L1976.48 1212.67 L1977.06 1212.67 L1977.65 1212.67 L1978.24 1212.67 L1978.82 1212.67 L1979.41 1212.67 L1979.99 1212.67 L1980.58 1212.67 L1981.17 1212.67 L1981.75 1212.67 L1982.34 1212.67 L1982.93 1212.67 L1983.51 1212.67 L1984.1 1212.67 L1984.69 1212.67 L1985.27 1212.67 L1985.86 1212.67 L1986.45 1212.67 L1987.03 1212.67 L1987.62 1212.67 L1988.2 1212.67 L1988.79 1212.67 L1989.38 1212.67 L1989.96 1212.67 L1990.55 1212.67 L1991.14 1212.67 L1991.72 1212.67 L1992.31 1212.67 L1992.9 1212.67 L1993.48 1212.67 L1994.07 1212.67 L1994.65 1212.67 L1995.24 1212.67 L1995.83 1212.67 L1996.41 1212.67 L1997 1212.67 L1997.59 1212.67 L1998.17 1212.67 L1998.76 1212.67 L1999.35 1212.67 L1999.93 1212.67 L2000.52 1212.67 L2001.11 1212.67 L2001.69 1212.67 L2002.28 1212.67 L2002.86 1212.67 L2003.45 1212.67 L2004.04 1212.67 L2004.62 1212.67 L2005.21 1212.67 L2005.8 1212.67 L2006.38 1212.67 L2006.97 1212.67 L2007.56 1212.67 L2008.14 1212.67 L2008.73 1212.67 L2009.32 1212.67 L2009.9 1212.67 L2010.49 1212.67 L2011.07 1212.67 L2011.66 1212.67 L2012.25 1212.67 L2012.83 1212.67 L2013.42 1212.67 L2014.01 1212.67 L2014.59 1212.67 L2015.18 1212.67 L2015.77 1212.67 L2016.35 1212.67 L2016.94 1212.67 L2017.53 1212.67 L2018.11 1212.67 L2018.7 1212.67 L2019.28 1212.67 L2019.87 1212.67 L2020.46 1212.67 L2021.04 1212.67 L2021.63 1212.67 L2022.22 1212.67 L2022.8 1212.67 L2023.39 1212.67 L2023.98 1212.67 L2024.56 1212.67 L2025.15 1212.67 L2025.73 1212.67 L2026.32 1212.67 L2026.91 1212.67 L2027.49 1212.67 L2028.08 1212.67 L2028.67 1212.67 L2029.25 1212.67 L2029.84 1212.67 L2030.43 1212.67 L2031.01 1212.67 L2031.6 1212.67 L2032.19 1212.67 L2032.77 1212.67 L2033.36 1212.67 L2033.94 1212.67 L2034.53 1212.67 L2035.12 1212.67 L2035.7 1212.67 L2036.29 1212.67 L2036.88 1212.67 L2037.46 1212.67 L2038.05 1212.67 L2038.64 1212.67 L2039.22 1212.67 L2039.81 1212.67 L2040.4 1212.67 L2040.98 1212.67 L2041.57 1212.67 L2042.15 1212.67 L2042.74 1212.67 L2043.33 1212.67 L2043.91 1212.67 L2044.5 1212.67 L2045.09 1212.67 L2045.67 1212.67 L2046.26 1212.67 L2046.85 1212.67 L2047.43 1212.67 L2048.02 1212.67 L2048.6 1212.67 L2049.19 1212.67 L2049.78 1212.67 L2050.36 1212.67 L2050.95 1212.67 L2051.54 1212.67 L2052.12 1212.67 L2052.71 1212.67 L2053.3 1212.67 L2053.88 1212.67 L2054.47 1212.67 L2055.06 1212.67 L2055.64 1212.67 L2056.23 1212.67 L2056.81 1212.67 L2057.4 1212.67 L2057.99 1212.67 L2058.57 1212.67 L2059.16 1212.67 L2059.75 1212.67 L2060.33 1212.67 L2060.92 1212.67 L2061.51 1212.67 L2062.09 1212.67 L2062.68 1212.67 L2063.27 1212.67 L2063.85 1212.67 L2064.44 1212.67 L2065.02 1212.67 L2065.61 1212.67 L2066.2 1212.67 L2066.78 1212.67 L2067.37 1212.67 L2067.96 1212.67 L2068.54 1212.67 L2069.13 1212.67 L2069.72 1212.67 L2070.3 1212.67 L2070.89 1212.67 L2071.48 1212.67 L2072.06 1212.67 L2072.65 1212.67 L2073.23 1212.67 L2073.82 1212.67 L2074.41 1212.67 L2074.99 1212.67 L2075.58 1212.67 L2076.17 1212.67 L2076.75 1212.67 L2077.34 1212.67 L2077.93 1212.67 L2078.51 1212.67 L2079.1 1212.67 L2079.68 1212.67 L2080.27 1212.67 L2080.86 1212.67 L2081.44 1212.67 L2082.03 1212.67 L2082.62 1212.67 L2083.2 1212.67 L2083.79 1212.67 L2084.38 1212.67 L2084.96 1212.67 L2085.55 1212.67 L2086.14 1212.67 L2086.72 1212.67 L2087.31 1212.67 L2087.89 1212.67 L2088.48 1212.67 L2089.07 1212.67 L2089.65 1212.67 L2090.24 1212.67 L2090.83 1212.67 L2091.41 1212.67 L2092 1212.67 L2092.59 1212.67 L2093.17 1212.67 L2093.76 1212.67 L2094.35 1212.67 L2094.93 1212.67 L2095.52 1212.67 L2096.1 1212.67 L2096.69 1212.67 L2097.28 1212.67 L2097.86 1212.67 L2098.45 1212.67 L2099.04 1212.67 L2099.62 1212.67 L2100.21 1212.67 L2100.8 1212.67 L2101.38 1212.67 L2101.97 1212.67 L2102.55 1212.67 L2103.14 1212.67 L2103.73 1212.67 L2104.31 1212.67 L2104.9 1212.67 L2105.49 1212.67 L2106.07 1212.67 L2106.66 1212.67 L2107.25 1212.67 L2107.83 1212.67 L2108.42 1212.67 L2109.01 1212.67 L2109.59 1212.67 L2110.18 1212.67 L2110.76 1212.67 L2111.35 1212.67 L2111.94 1212.67 L2112.52 1212.67 L2113.11 1212.67 L2113.7 1212.67 L2114.28 1212.67 L2114.87 1212.67 L2115.46 1212.67 L2116.04 1212.67 L2116.63 1212.67 L2117.22 1212.67 L2117.8 1212.67 L2118.39 1212.67 L2118.97 1212.67 L2119.56 1212.67 L2120.15 1212.67 L2120.73 1212.67 L2121.32 1212.67 L2121.91 1212.67 L2122.49 1212.67 L2123.08 1212.67 L2123.67 1212.67 L2124.25 1212.67 L2124.84 1212.67 L2125.42 1212.67 L2126.01 1212.67 L2126.6 1212.67 L2127.18 1212.67 L2127.77 1212.67 L2128.36 1212.67 L2128.94 1212.67 L2129.53 1212.67 L2130.12 1212.67 L2130.7 1212.67 L2131.29 1212.67 L2131.88 1212.67 L2132.46 1212.67 L2133.05 1212.67 L2133.63 1212.67 L2134.22 1212.67 L2134.81 1212.67 L2135.39 1212.67 L2135.98 1212.67 L2136.57 1212.67 L2137.15 1212.67 L2137.74 1212.67 L2138.33 1212.67 L2138.91 1212.67 L2139.5 1212.67 L2140.09 1212.67 L2140.67 1212.67 L2141.26 1212.67 L2141.84 1212.67 L2142.43 1212.67 L2143.02 1212.67 L2143.6 1212.67 L2144.19 1212.67 L2144.78 1212.67 L2145.36 1212.67 L2145.95 1212.67 L2146.54 1212.67 L2147.12 1212.67 L2147.71 1212.67 L2148.3 1212.67 L2148.88 1212.67 L2149.47 1212.67 L2150.05 1212.67 L2150.64 1212.67 L2151.23 1212.67 L2151.81 1212.67 L2152.4 1212.67 L2152.99 1212.67 L2153.57 1212.67 L2154.16 1212.67 L2154.75 1212.67 L2155.33 1212.67 L2155.92 1212.67 L2156.5 1212.67 L2157.09 1212.67 L2157.68 1212.67 L2158.26 1212.67 L2158.26 1212.53 L2157.68 1212.53 L2157.09 1212.53 L2156.5 1212.53 L2155.92 1212.53 L2155.33 1212.53 L2154.75 1212.53 L2154.16 1212.53 L2153.57 1212.53 L2152.99 1212.53 L2152.4 1212.53 L2151.81 1212.53 L2151.23 1212.53 L2150.64 1212.53 L2150.05 1212.53 L2149.47 1212.53 L2148.88 1212.53 L2148.3 1212.53 L2147.71 1212.53 L2147.12 1212.53 L2146.54 1212.53 L2145.95 1212.53 L2145.36 1212.53 L2144.78 1212.53 L2144.19 1212.53 L2143.6 1212.53 L2143.02 1212.53 L2142.43 1212.53 L2141.84 1212.53 L2141.26 1212.53 L2140.67 1212.53 L2140.09 1212.53 L2139.5 1212.53 L2138.91 1212.53 L2138.33 1212.53 L2137.74 1212.53 L2137.15 1212.53 L2136.57 1212.53 L2135.98 1212.53 L2135.39 1212.53 L2134.81 1212.53 L2134.22 1212.53 L2133.63 1212.53 L2133.05 1212.53 L2132.46 1212.53 L2131.88 1212.53 L2131.29 1212.53 L2130.7 1212.53 L2130.12 1212.53 L2129.53 1212.53 L2128.94 1212.53 L2128.36 1212.53 L2127.77 1212.53 L2127.18 1212.53 L2126.6 1212.53 L2126.01 1212.53 L2125.42 1212.53 L2124.84 1212.53 L2124.25 1212.53 L2123.67 1212.53 L2123.08 1212.53 L2122.49 1212.53 L2121.91 1212.53 L2121.32 1212.53 L2120.73 1212.53 L2120.15 1212.53 L2119.56 1212.53 L2118.97 1212.53 L2118.39 1212.53 L2117.8 1212.53 L2117.22 1212.53 L2116.63 1212.53 L2116.04 1212.53 L2115.46 1212.53 L2114.87 1212.53 L2114.28 1212.53 L2113.7 1212.53 L2113.11 1212.53 L2112.52 1212.53 L2111.94 1212.53 L2111.35 1212.53 L2110.76 1212.53 L2110.18 1212.53 L2109.59 1212.53 L2109.01 1212.53 L2108.42 1212.53 L2107.83 1212.53 L2107.25 1212.53 L2106.66 1212.53 L2106.07 1212.53 L2105.49 1212.53 L2104.9 1212.53 L2104.31 1212.53 L2103.73 1212.53 L2103.14 1212.53 L2102.55 1212.53 L2101.97 1212.53 L2101.38 1212.53 L2100.8 1212.53 L2100.21 1212.53 L2099.62 1212.53 L2099.04 1212.53 L2098.45 1212.53 L2097.86 1212.53 L2097.28 1212.53 L2096.69 1212.53 L2096.1 1212.53 L2095.52 1212.53 L2094.93 1212.53 L2094.35 1212.53 L2093.76 1212.53 L2093.17 1212.53 L2092.59 1212.53 L2092 1212.53 L2091.41 1212.53 L2090.83 1212.53 L2090.24 1212.53 L2089.65 1212.53 L2089.07 1212.53 L2088.48 1212.53 L2087.89 1212.53 L2087.31 1212.53 L2086.72 1212.53 L2086.14 1212.53 L2085.55 1212.53 L2084.96 1212.53 L2084.38 1212.53 L2083.79 1212.53 L2083.2 1212.53 L2082.62 1212.53 L2082.03 1212.53 L2081.44 1212.53 L2080.86 1212.53 L2080.27 1212.53 L2079.68 1212.53 L2079.1 1212.53 L2078.51 1212.53 L2077.93 1212.53 L2077.34 1212.53 L2076.75 1212.53 L2076.17 1212.53 L2075.58 1212.53 L2074.99 1212.53 L2074.41 1212.53 L2073.82 1212.53 L2073.23 1212.53 L2072.65 1212.53 L2072.06 1212.53 L2071.48 1212.53 L2070.89 1212.53 L2070.3 1212.53 L2069.72 1212.53 L2069.13 1212.53 L2068.54 1212.53 L2067.96 1212.53 L2067.37 1212.53 L2066.78 1212.53 L2066.2 1212.53 L2065.61 1212.53 L2065.02 1212.53 L2064.44 1212.53 L2063.85 1212.53 L2063.27 1212.53 L2062.68 1212.53 L2062.09 1212.53 L2061.51 1212.53 L2060.92 1212.53 L2060.33 1212.53 L2059.75 1212.53 L2059.16 1212.53 L2058.57 1212.53 L2057.99 1212.53 L2057.4 1212.53 L2056.81 1212.53 L2056.23 1212.53 L2055.64 1212.53 L2055.06 1212.53 L2054.47 1212.53 L2053.88 1212.53 L2053.3 1212.53 L2052.71 1212.53 L2052.12 1212.53 L2051.54 1212.53 L2050.95 1212.53 L2050.36 1212.53 L2049.78 1212.53 L2049.19 1212.53 L2048.6 1212.53 L2048.02 1212.53 L2047.43 1212.53 L2046.85 1212.53 L2046.26 1212.53 L2045.67 1212.53 L2045.09 1212.53 L2044.5 1212.53 L2043.91 1212.53 L2043.33 1212.53 L2042.74 1212.53 L2042.15 1212.53 L2041.57 1212.53 L2040.98 1212.53 L2040.4 1212.53 L2039.81 1212.53 L2039.22 1212.53 L2038.64 1212.53 L2038.05 1212.53 L2037.46 1212.53 L2036.88 1212.53 L2036.29 1212.53 L2035.7 1212.53 L2035.12 1212.53 L2034.53 1212.53 L2033.94 1212.53 L2033.36 1212.53 L2032.77 1212.53 L2032.19 1212.53 L2031.6 1212.53 L2031.01 1212.53 L2030.43 1212.53 L2029.84 1212.53 L2029.25 1212.53 L2028.67 1212.53 L2028.08 1212.53 L2027.49 1212.53 L2026.91 1212.53 L2026.32 1212.53 L2025.73 1212.53 L2025.15 1212.53 L2024.56 1212.53 L2023.98 1212.53 L2023.39 1212.53 L2022.8 1212.53 L2022.22 1212.53 L2021.63 1212.53 L2021.04 1212.53 L2020.46 1212.53 L2019.87 1212.53 L2019.28 1212.53 L2018.7 1212.53 L2018.11 1212.53 L2017.53 1212.53 L2016.94 1212.53 L2016.35 1212.53 L2015.77 1212.53 L2015.18 1212.53 L2014.59 1212.53 L2014.01 1212.53 L2013.42 1212.53 L2012.83 1212.53 L2012.25 1212.53 L2011.66 1212.53 L2011.07 1212.53 L2010.49 1212.53 L2009.9 1212.53 L2009.32 1212.53 L2008.73 1212.53 L2008.14 1212.53 L2007.56 1212.53 L2006.97 1212.53 L2006.38 1212.53 L2005.8 1212.53 L2005.21 1212.53 L2004.62 1212.53 L2004.04 1212.53 L2003.45 1212.53 L2002.86 1212.53 L2002.28 1212.53 L2001.69 1212.53 L2001.11 1212.53 L2000.52 1212.53 L1999.93 1212.53 L1999.35 1212.53 L1998.76 1212.53 L1998.17 1212.53 L1997.59 1212.53 L1997 1212.53 L1996.41 1212.53 L1995.83 1212.53 L1995.24 1212.53 L1994.65 1212.53 L1994.07 1212.53 L1993.48 1212.53 L1992.9 1212.53 L1992.31 1212.53 L1991.72 1212.53 L1991.14 1212.53 L1990.55 1212.53 L1989.96 1212.53 L1989.38 1212.53 L1988.79 1212.53 L1988.2 1212.53 L1987.62 1212.53 L1987.03 1212.53 L1986.45 1212.53 L1985.86 1212.53 L1985.27 1212.53 L1984.69 1212.53 L1984.1 1212.53 L1983.51 1212.53 L1982.93 1212.53 L1982.34 1212.53 L1981.75 1212.53 L1981.17 1212.53 L1980.58 1212.53 L1979.99 1212.53 L1979.41 1212.53 L1978.82 1212.53 L1978.24 1212.53 L1977.65 1212.53 L1977.06 1212.53 L1976.48 1212.53 L1975.89 1212.53 L1975.3 1212.53 L1974.72 1212.53 L1974.13 1212.53 L1973.54 1212.53 L1972.96 1212.53 L1972.37 1212.53 L1971.78 1212.53 L1971.2 1212.53 L1970.61 1212.53 L1970.03 1212.53 L1969.44 1212.53 L1968.85 1212.53 L1968.27 1212.53 L1967.68 1212.53 L1967.09 1212.53 L1966.51 1212.53 L1965.92 1212.53 L1965.33 1212.53 L1964.75 1212.53 L1964.16 1212.53 L1963.58 1212.53 L1962.99 1212.53 L1962.4 1212.53 L1961.82 1212.53 L1961.23 1212.53 L1960.64 1212.53 L1960.06 1212.53 L1959.47 1212.53 L1958.88 1212.53 L1958.3 1212.53 L1957.71 1212.53 L1957.12 1212.53 L1956.54 1212.53 L1955.95 1212.53 L1955.37 1212.53 L1954.78 1212.53 L1954.19 1212.53 L1953.61 1212.53 L1953.02 1212.53 L1952.43 1212.53 L1951.85 1212.53 L1951.26 1212.53 L1950.67 1212.53 L1950.09 1212.53 L1949.5 1212.53 L1948.91 1212.53 L1948.33 1212.53 L1947.74 1212.53 L1947.16 1212.53 L1946.57 1212.53 L1945.98 1212.53 L1945.4 1212.53 L1944.81 1212.53 L1944.22 1212.53 L1943.64 1212.53 L1943.05 1212.53 L1942.46 1212.53 L1941.88 1212.53 L1941.29 1212.53 L1940.71 1212.53 L1940.12 1212.53 L1939.53 1212.53 L1938.95 1212.53 L1938.36 1212.53 L1937.77 1212.53 L1937.19 1212.53 L1936.6 1212.53 L1936.01 1212.53 L1935.43 1212.53 L1934.84 1212.53 L1934.25 1212.53 L1933.67 1212.53 L1933.08 1212.53 L1932.5 1212.53 L1931.91 1212.53 L1931.32 1212.53 L1930.74 1212.53 L1930.15 1212.53 L1929.56 1212.53 L1928.98 1212.53 L1928.39 1212.53 L1927.8 1212.53 L1927.22 1212.53 L1926.63 1212.53 L1926.04 1212.53 L1925.46 1212.53 L1924.87 1212.53 L1924.29 1212.53 L1923.7 1212.53 L1923.11 1212.53 L1922.53 1212.53 L1921.94 1212.53 L1921.35 1212.53 L1920.77 1212.53 L1920.18 1212.53 L1919.59 1212.53 L1919.01 1212.53 L1918.42 1212.53 L1917.83 1212.53 L1917.25 1212.53 L1916.66 1212.53 L1916.08 1212.53 L1915.49 1212.53 L1914.9 1212.53 L1914.32 1212.53 L1913.73 1212.53 L1913.14 1212.53 L1912.56 1212.53 L1911.97 1212.53 L1911.38 1212.53 L1910.8 1212.53 L1910.21 1212.53 L1909.63 1212.53 L1909.04 1212.53 L1908.45 1212.53 L1907.87 1212.53 L1907.28 1212.53 L1906.69 1212.53 L1906.11 1212.53 L1905.52 1212.53 L1904.93 1212.53 L1904.35 1212.53 L1903.76 1212.53 L1903.17 1212.53 L1902.59 1212.53 L1902 1212.53 L1901.42 1212.53 L1900.83 1212.53 L1900.24 1212.53 L1899.66 1212.53 L1899.07 1212.53 L1898.48 1212.53 L1897.9 1212.53 L1897.31 1212.53 L1896.72 1212.53 L1896.14 1212.53 L1895.55 1212.53 L1894.96 1212.53 L1894.38 1212.53 L1893.79 1212.53 L1893.21 1212.53 L1892.62 1212.53 L1892.03 1212.53 L1891.45 1212.53 L1890.86 1212.53 L1890.27 1212.53 L1889.69 1212.53 L1889.1 1212.53 L1888.51 1212.53 L1887.93 1212.53 L1887.34 1212.53 L1886.76 1212.53 L1886.17 1212.53 L1885.58 1212.53 L1885 1212.53 L1884.41 1212.53 L1883.82 1212.53 L1883.24 1212.53 L1882.65 1212.53 L1882.06 1212.53 L1881.48 1212.53 L1880.89 1212.53 L1880.3 1212.53 L1879.72 1212.53 L1879.13 1212.53 L1878.55 1212.53 L1877.96 1212.53 L1877.37 1212.53 L1876.79 1212.53 L1876.2 1212.53 L1875.61 1212.53 L1875.03 1212.53 L1874.44 1212.53 L1873.85 1212.53 L1873.27 1212.53 L1872.68 1212.53 L1872.09 1212.53 L1871.51 1212.53 L1870.92 1212.53 L1870.34 1212.53 L1869.75 1212.53 L1869.16 1212.53 L1868.58 1212.53 L1867.99 1212.53 L1867.4 1212.53 L1866.82 1212.53 L1866.23 1212.53 L1865.64 1212.53 L1865.06 1212.53 L1864.47 1212.53 L1863.88 1212.53 L1863.3 1212.53 L1862.71 1212.53 L1862.13 1212.53 L1861.54 1212.53 L1860.95 1212.53 L1860.37 1212.53 L1859.78 1212.53 L1859.19 1212.53 L1858.61 1212.53 L1858.02 1212.53 L1857.43 1212.53 L1856.85 1212.53 L1856.26 1212.53 L1855.68 1212.53 L1855.09 1212.53 L1854.5 1212.53 L1853.92 1212.53 L1853.33 1212.53 L1852.74 1212.53 L1852.16 1212.53 L1851.57 1212.53 L1850.98 1212.53 L1850.4 1212.53 L1849.81 1212.53 L1849.22 1212.53 L1848.64 1212.53 L1848.05 1212.53 L1847.47 1212.53 L1846.88 1212.53 L1846.29 1212.53 L1845.71 1212.53 L1845.12 1212.53 L1844.53 1212.53 L1843.95 1212.53 L1843.36 1212.53 L1842.77 1212.53 L1842.19 1212.53 L1841.6 1212.53 L1841.01 1212.53 L1840.43 1212.53 L1839.84 1212.53 L1839.26 1212.53 L1838.67 1212.53 L1838.08 1212.53 L1837.5 1212.53 L1836.91 1212.53 L1836.32 1212.53 L1835.74 1212.53 L1835.15 1212.53 L1834.56 1212.53 L1833.98 1212.53 L1833.39 1212.53 L1832.81 1212.53 L1832.22 1212.53 L1831.63 1212.53 L1831.05 1212.53 L1830.46 1212.53 L1829.87 1212.53 L1829.29 1212.53 L1828.7 1212.53 L1828.11 1212.53 L1827.53 1212.53 L1826.94 1212.53 L1826.35 1212.53 L1825.77 1212.53 L1825.18 1212.53 L1824.6 1212.53 L1824.01 1212.53 L1823.42 1212.53 L1822.84 1212.53 L1822.25 1212.53 L1821.66 1212.53 L1821.08 1212.53 L1820.49 1212.53 L1819.9 1212.53 L1819.32 1212.53 L1818.73 1212.53 L1818.14 1212.53 L1817.56 1212.53 L1816.97 1212.53 L1816.39 1212.53 L1815.8 1212.53 L1815.21 1212.53 L1814.63 1212.53 L1814.04 1212.53 L1813.45 1212.53 L1812.87 1212.53 L1812.28 1212.53 L1811.69 1212.53 L1811.11 1212.53 L1810.52 1212.53 L1809.94 1212.53 L1809.35 1212.53 L1808.76 1212.53 L1808.18 1212.53 L1807.59 1212.53 L1807 1212.53 L1806.42 1212.53 L1805.83 1212.53 L1805.24 1212.53 L1804.66 1212.53 L1804.07 1212.53 L1803.48 1212.53 L1802.9 1212.53 L1802.31 1212.53 L1801.73 1212.53 L1801.14 1212.53 L1800.55 1212.53 L1799.97 1212.53 L1799.38 1212.53 L1798.79 1212.53 L1798.21 1212.53 L1797.62 1212.53 L1797.03 1212.53 L1796.45 1212.53 L1795.86 1212.53 L1795.27 1212.53 L1794.69 1212.53 L1794.1 1212.53 L1793.52 1212.53 L1792.93 1212.53 L1792.34 1212.53 L1791.76 1212.53 L1791.17 1212.53 L1790.58 1212.53 L1790 1212.53 L1789.41 1212.53 L1788.82 1212.53 L1788.24 1212.53 L1787.65 1212.53 L1787.06 1212.53 L1786.48 1212.53 L1785.89 1212.53 L1785.31 1212.53 L1784.72 1212.53 L1784.13 1212.53 L1783.55 1212.53 L1782.96 1212.53 L1782.37 1212.53 L1781.79 1212.53 L1781.2 1212.53 L1780.61 1212.53 L1780.03 1212.53 L1779.44 1212.53 L1778.86 1212.53 L1778.27 1212.53 L1777.68 1212.53 L1777.1 1212.53 L1776.51 1212.53 L1775.92 1212.53 L1775.34 1212.53 L1774.75 1212.53 L1774.16 1212.53 L1773.58 1212.53 L1772.99 1212.53 L1772.4 1212.53 L1771.82 1212.53 L1771.23 1212.53 L1770.65 1212.53 L1770.06 1212.53 L1769.47 1212.53 L1768.89 1212.53 L1768.3 1212.53 L1767.71 1212.53 L1767.13 1212.53 L1766.54 1212.53 L1765.95 1212.53 L1765.37 1212.53 L1764.78 1212.53 L1764.19 1212.53 L1763.61 1212.53 L1763.02 1212.53 L1762.44 1212.53 L1761.85 1212.53 L1761.26 1212.53 L1760.68 1212.53 L1760.09 1212.53 L1759.5 1212.53 L1758.92 1212.53 L1758.33 1212.53 L1757.74 1212.53 L1757.16 1212.53 L1756.57 1212.53 L1755.99 1212.53 L1755.4 1212.53 L1754.81 1212.53 L1754.23 1212.53 L1753.64 1212.53 L1753.05 1212.53 L1752.47 1212.53 L1751.88 1212.53 L1751.29 1212.53 L1750.71 1212.53 L1750.12 1212.53 L1749.53 1212.53 L1748.95 1212.53 L1748.36 1212.53 L1747.78 1212.53 L1747.19 1212.53 L1746.6 1212.53 L1746.02 1212.53 L1745.43 1212.53 L1744.84 1212.53 L1744.26 1212.53 L1743.67 1212.53 L1743.08 1212.53 L1742.5 1212.53 L1741.91 1212.53 L1741.32 1212.53 L1740.74 1212.53 L1740.15 1212.53 L1739.57 1212.53 L1738.98 1212.53 L1738.39 1212.53 L1737.81 1212.53 L1737.22 1212.53 L1736.63 1212.53 L1736.05 1212.53 L1735.46 1212.53 L1734.87 1212.53 L1734.29 1212.53 L1733.7 1212.53 L1733.11 1212.53 L1732.53 1212.53 L1731.94 1212.53 L1731.36 1212.53 L1730.77 1212.53 L1730.18 1212.53 L1729.6 1212.53 L1729.01 1212.53 L1728.42 1212.53 L1727.84 1212.53 L1727.25 1212.53 L1726.66 1212.53 L1726.08 1212.53 L1725.49 1212.53 L1724.91 1212.53 L1724.32 1212.53 L1723.73 1212.53 L1723.15 1212.53 L1722.56 1212.53 L1721.97 1212.53 L1721.39 1212.53 L1720.8 1212.53 L1720.21 1212.53 L1719.63 1212.53 L1719.04 1212.53 L1718.45 1212.53 L1717.87 1212.53 L1717.28 1212.53 L1716.7 1212.53 L1716.11 1212.53 L1715.52 1212.53 L1714.94 1212.53 L1714.35 1212.53 L1713.76 1212.53 L1713.18 1212.53 L1712.59 1212.53 L1712 1212.53 L1711.42 1212.53 L1710.83 1212.53 L1710.24 1212.53 L1709.66 1212.53 L1709.07 1212.53 L1708.49 1212.53 L1707.9 1212.53 L1707.31 1212.53 L1706.73 1212.53 L1706.14 1212.53 L1705.55 1212.53 L1704.97 1212.53 L1704.38 1212.53 L1703.79 1212.53 L1703.21 1212.53 L1702.62 1212.53 L1702.04 1212.53 L1701.45 1212.53 L1700.86 1212.53 L1700.28 1212.53 L1699.69 1212.53 L1699.1 1212.53 L1698.52 1212.53 L1697.93 1212.53 L1697.34 1212.53 L1696.76 1212.53 L1696.17 1212.53 L1695.58 1212.53 L1695 1212.53 L1694.41 1212.53 L1693.83 1212.53 L1693.24 1212.53 L1692.65 1212.53 L1692.07 1212.53 L1691.48 1212.53 L1690.89 1212.53 L1690.31 1212.53 L1689.72 1212.53 L1689.13 1212.53 L1688.55 1212.53 L1687.96 1212.53 L1687.37 1212.53 L1686.79 1212.53 L1686.2 1212.53 L1685.62 1212.53 L1685.03 1212.53 L1684.44 1212.53 L1683.86 1212.53 L1683.27 1212.53 L1682.68 1212.53 L1682.1 1212.53 L1681.51 1212.53 L1680.92 1212.53 L1680.34 1212.53 L1679.75 1212.53 L1679.17 1212.53 L1678.58 1212.53 L1677.99 1212.53 L1677.41 1212.53 L1676.82 1212.53 L1676.23 1212.53 L1675.65 1212.53 L1675.06 1212.53 L1674.47 1212.53 L1673.89 1212.53 L1673.3 1212.53 L1672.71 1212.53 L1672.13 1212.53 L1671.54 1212.53 L1670.96 1212.53 L1670.37 1212.53 L1669.78 1212.53 L1669.2 1212.53 L1668.61 1212.53 L1668.02 1212.53 L1667.44 1212.53 L1666.85 1212.53 L1666.26 1212.53 L1665.68 1212.53 L1665.09 1212.53 L1664.5 1212.53 L1663.92 1212.53 L1663.33 1212.53 L1662.75 1212.53 L1662.16 1212.53 L1661.57 1212.53 L1660.99 1212.53 L1660.4 1212.53 L1659.81 1212.53 L1659.23 1212.53 L1658.64 1212.53 L1658.05 1212.53 L1657.47 1212.53 L1656.88 1212.53 L1656.29 1212.53 L1655.71 1212.53 L1655.12 1212.53 L1654.54 1212.53 L1653.95 1212.53 L1653.36 1212.53 L1652.78 1212.53 L1652.19 1212.53 L1651.6 1212.53 L1651.02 1212.53 L1650.43 1212.53 L1649.84 1212.53 L1649.26 1212.53 L1648.67 1212.53 L1648.09 1212.53 L1647.5 1212.53 L1646.91 1212.53 L1646.33 1212.53 L1645.74 1212.53 L1645.15 1212.53 L1644.57 1212.53 L1643.98 1212.53 L1643.39 1212.53 L1642.81 1212.53 L1642.22 1212.53 L1641.63 1212.53 L1641.05 1212.53 L1640.46 1212.53 L1639.88 1212.53 L1639.29 1212.53 L1638.7 1212.53 L1638.12 1212.53 L1637.53 1212.53 L1636.94 1212.53 L1636.36 1212.53 L1635.77 1212.53 L1635.18 1212.53 L1634.6 1212.53 L1634.01 1212.53 L1633.42 1212.53 L1632.84 1212.53 L1632.25 1212.53 L1631.67 1212.53 L1631.08 1212.53 L1630.49 1212.53 L1629.91 1212.53 L1629.32 1212.53 L1628.73 1212.53 L1628.15 1212.53 L1627.56 1212.53 L1626.97 1212.53 L1626.39 1212.53 L1625.8 1212.53 L1625.22 1212.53 L1624.63 1212.53 L1624.04 1212.53 L1623.46 1212.53 L1622.87 1212.53 L1622.28 1212.53 L1621.7 1212.53 L1621.11 1212.53 L1620.52 1212.53 L1619.94 1212.53 L1619.35 1212.53 L1618.76 1212.53 L1618.18 1212.53 L1617.59 1212.53 L1617.01 1212.53 L1616.42 1212.53 L1615.83 1212.53 L1615.25 1212.53 L1614.66 1212.53 L1614.07 1212.53 L1613.49 1212.53 L1612.9 1212.53 L1612.31 1212.53 L1611.73 1212.53 L1611.14 1212.53 L1610.55 1212.53 L1609.97 1212.53 L1609.38 1212.53 L1608.8 1212.53 L1608.21 1212.53 L1607.62 1212.53 L1607.04 1212.53 L1606.45 1212.53 L1605.86 1212.53 L1605.28 1212.53 L1604.69 1212.53 L1604.1 1212.53 L1603.52 1212.53 L1602.93 1212.53 L1602.34 1212.53 L1601.76 1212.53 L1601.17 1212.53 L1600.59 1212.53 L1600 1212.53 L1599.41 1212.53 L1598.83 1212.53 L1598.24 1212.53 L1597.65 1212.53 L1597.07 1212.53 L1596.48 1212.53 L1595.89 1212.53 L1595.31 1212.53 L1594.72 1212.53 L1594.14 1212.53 L1593.55 1212.53 L1592.96 1212.53 L1592.38 1212.53 L1591.79 1212.53 L1591.2 1212.53 L1590.62 1212.53 L1590.03 1212.53 L1589.44 1212.53 L1588.86 1212.53 L1588.27 1212.53 L1587.68 1212.53 L1587.1 1212.53 L1586.51 1212.53 L1585.93 1212.53 L1585.34 1212.53 L1584.75 1212.53 L1584.17 1212.53 L1583.58 1212.53 L1582.99 1212.53 L1582.41 1212.53 L1581.82 1212.53 L1581.23 1212.53 L1580.65 1212.53 L1580.06 1212.53 L1579.47 1212.53 L1578.89 1212.53 L1578.3 1212.53 L1577.72 1212.53 L1577.13 1212.53 L1576.54 1212.53 L1575.96 1212.53 L1575.37 1212.53 L1574.78 1212.53 L1574.2 1212.53 L1573.61 1212.53 L1573.02 1212.53 L1572.44 1212.53 L1571.85 1212.53 L1571.27 1212.53 L1570.68 1212.53 L1570.09 1212.53 L1569.51 1212.53 L1568.92 1212.53 L1568.33 1212.53 L1567.75 1212.53 L1567.16 1212.53 L1566.57 1212.53 L1565.99 1212.53 L1565.4 1212.53 L1564.81 1212.53 L1564.23 1212.53 L1563.64 1212.53 L1563.06 1212.53 L1562.47 1212.53 L1561.88 1212.53 L1561.3 1212.53 L1560.71 1212.53 L1560.12 1212.53 L1559.54 1212.53 L1558.95 1212.53 L1558.36 1212.53 L1557.78 1212.53 L1557.19 1212.53 L1556.6 1212.53 L1556.02 1212.53 L1555.43 1212.53 L1554.85 1212.53 L1554.26 1212.53 L1553.67 1212.53 L1553.09 1212.53 L1552.5 1212.53 L1551.91 1212.53 L1551.33 1212.53 L1550.74 1212.53 L1550.15 1212.53 L1549.57 1212.53 L1548.98 1212.53 L1548.4 1212.53 L1547.81 1212.53 L1547.22 1212.53 L1546.64 1212.53 L1546.05 1212.53 L1545.46 1212.53 L1544.88 1212.53 L1544.29 1212.53 L1543.7 1212.53 L1543.12 1212.53 L1542.53 1212.53 L1541.94 1212.53 L1541.36 1212.53 L1540.77 1212.53 L1540.19 1212.53 L1539.6 1212.53 L1539.01 1212.53 L1538.43 1212.53 L1537.84 1212.53 L1537.25 1212.53 L1536.67 1212.53 L1536.08 1212.53 L1535.49 1212.53 L1534.91 1212.53 L1534.32 1212.53 L1533.73 1212.53 L1533.15 1212.53 L1532.56 1212.53 L1531.98 1212.53 L1531.39 1212.53 L1530.8 1212.53 L1530.22 1212.53 L1529.63 1212.53 L1529.04 1212.53 L1528.46 1212.53 L1527.87 1212.53 L1527.28 1212.53 L1526.7 1212.53 L1526.11 1212.53 L1525.52 1212.53 L1524.94 1212.53 L1524.35 1212.53 L1523.77 1212.53 L1523.18 1212.53 L1522.59 1212.53 L1522.01 1212.53 L1521.42 1212.53 L1520.83 1212.53 L1520.25 1212.53 L1519.66 1212.53 L1519.07 1212.53 L1518.49 1212.53 L1517.9 1212.53 L1517.32 1212.53 L1516.73 1212.53 L1516.14 1212.53 L1515.56 1212.53 L1514.97 1212.53 L1514.38 1212.53 L1513.8 1212.53 L1513.21 1212.53 L1512.62 1212.53 L1512.04 1212.53 L1511.45 1212.53 L1510.86 1212.53 L1510.28 1212.53 L1509.69 1212.53 L1509.11 1212.53 L1508.52 1212.53 L1507.93 1212.53 L1507.35 1212.53 L1506.76 1212.53 L1506.17 1212.53 L1505.59 1212.53 L1505 1212.53 L1504.41 1212.53 L1503.83 1212.53 L1503.24 1212.53 L1502.65 1212.53 L1502.07 1212.53 L1501.48 1212.53 L1500.9 1212.53 L1500.31 1212.53 L1499.72 1212.53 L1499.14 1212.53 L1498.55 1212.53 L1497.96 1212.53 L1497.38 1212.53 L1496.79 1212.53 L1496.2 1212.53 L1495.62 1212.53 L1495.03 1212.53 L1494.45 1212.53 L1493.86 1212.53 L1493.27 1212.53 L1492.69 1212.53 L1492.1 1212.53 L1491.51 1212.53 L1490.93 1212.53 L1490.34 1212.53 L1489.75 1212.53 L1489.17 1212.53 L1488.58 1212.53 L1487.99 1212.53 L1487.41 1212.53 L1486.82 1212.53 L1486.24 1212.53 L1485.65 1212.53 L1485.06 1212.53 L1484.48 1212.53 L1483.89 1212.53 L1483.3 1212.53 L1482.72 1212.53 L1482.13 1212.53 L1481.54 1212.53 L1480.96 1212.53 L1480.37 1212.53 L1479.78 1212.53 L1479.2 1212.53 L1478.61 1212.53 L1478.03 1212.53 L1477.44 1212.53 L1476.85 1212.53 L1476.27 1212.53 L1475.68 1212.53 L1475.09 1212.53 L1474.51 1212.53 L1473.92 1212.53 L1473.33 1212.53 L1472.75 1212.53 L1472.16 1212.53 L1471.57 1212.53 L1470.99 1212.53 L1470.4 1212.53 L1469.82 1212.53 L1469.23 1212.53 L1468.64 1212.53 L1468.06 1212.53 L1467.47 1212.53 L1466.88 1212.53 L1466.3 1212.53 L1465.71 1212.53 L1465.12 1212.53 L1464.54 1212.53 L1463.95 1212.53 L1463.37 1212.53 L1462.78 1212.53 L1462.19 1212.53 L1461.61 1212.53 L1461.02 1212.53 L1460.43 1212.53 L1459.85 1212.53 L1459.26 1212.53 L1458.67 1212.53 L1458.09 1212.53 L1457.5 1212.53 L1456.91 1212.53 L1456.33 1212.53 L1455.74 1212.53 L1455.16 1212.53 L1454.57 1212.53 L1453.98 1212.53 L1453.4 1212.53 L1452.81 1212.53 L1452.22 1212.53 L1451.64 1212.53 L1451.05 1212.53 L1450.46 1212.53 L1449.88 1212.53 L1449.29 1212.53 L1448.7 1212.53 L1448.12 1212.53 L1447.53 1212.53 L1446.95 1212.53 L1446.36 1212.53 L1445.77 1212.53 L1445.19 1212.53 L1444.6 1212.53 L1444.01 1212.53 L1443.43 1212.53 L1442.84 1212.53 L1442.25 1212.53 L1441.67 1212.53 L1441.08 1212.53 L1440.5 1212.53 L1439.91 1212.53 L1439.32 1212.53 L1438.74 1212.53 L1438.15 1212.53 L1437.56 1212.53 L1436.98 1212.53 L1436.39 1212.53 L1435.8 1212.53 L1435.22 1212.53 L1434.63 1212.53 L1434.04 1212.53 L1433.46 1212.53 L1432.87 1212.53 L1432.29 1212.53 L1431.7 1212.53 L1431.11 1212.53 L1430.53 1212.53 L1429.94 1212.53 L1429.35 1212.53 L1428.77 1212.53 L1428.18 1212.53 L1427.59 1212.53 L1427.01 1212.53 L1426.42 1212.53 L1425.83 1212.53 L1425.25 1212.53 L1424.66 1212.53 L1424.08 1212.53 L1423.49 1212.53 L1422.9 1212.53 L1422.32 1212.53 L1421.73 1212.53 L1421.14 1212.53 L1420.56 1212.53 L1419.97 1212.53 L1419.38 1212.53 L1418.8 1212.53 L1418.21 1212.53 L1417.63 1212.53 L1417.04 1212.53 L1416.45 1212.53 L1415.87 1212.53 L1415.28 1212.53 L1414.69 1212.53 L1414.11 1212.53 L1413.52 1212.53 L1412.93 1212.53 L1412.35 1212.53 L1411.76 1212.53 L1411.17 1212.53 L1410.59 1212.53 L1410 1212.53 L1409.42 1212.53 L1408.83 1212.53 L1408.24 1212.53 L1407.66 1212.53 L1407.07 1212.53 L1406.48 1212.53 L1405.9 1212.53 L1405.31 1212.53 L1404.72 1212.53 L1404.14 1212.53 L1403.55 1212.53 L1402.96 1212.53 L1402.38 1212.53 L1401.79 1212.53 L1401.21 1212.53 L1400.62 1212.53 L1400.03 1212.53 L1399.45 1212.53 L1398.86 1212.53 L1398.27 1212.53 L1397.69 1212.53 L1397.1 1212.53 L1396.51 1212.53 L1395.93 1212.53 L1395.34 1212.53 L1394.75 1212.53 L1394.17 1212.53 L1393.58 1212.53 L1393 1212.53 L1392.41 1212.53 L1391.82 1212.53 L1391.24 1212.53 L1390.65 1212.53 L1390.06 1212.53 L1389.48 1212.53 L1388.89 1212.53 L1388.3 1212.53 L1387.72 1212.53 L1387.13 1212.53 L1386.55 1212.53 L1385.96 1212.53 L1385.37 1212.53 L1384.79 1212.53 L1384.2 1212.53 L1383.61 1212.53 L1383.03 1212.53 L1382.44 1212.53 L1381.85 1212.53 L1381.27 1212.53 L1380.68 1212.53 L1380.09 1212.53 L1379.51 1212.53 L1378.92 1212.53 L1378.34 1212.53 L1377.75 1212.53 L1377.16 1212.53 L1376.58 1212.53 L1375.99 1212.53 L1375.4 1212.53 L1374.82 1212.53 L1374.23 1212.53 L1373.64 1212.53 L1373.06 1212.53 L1372.47 1212.53 L1371.88 1212.53 L1371.3 1212.53 L1370.71 1212.53 L1370.13 1212.53 L1369.54 1212.53 L1368.95 1212.53 L1368.37 1212.53 L1367.78 1212.53 L1367.19 1212.53 L1366.61 1212.53 L1366.02 1212.53 L1365.43 1212.53 L1364.85 1212.53 L1364.26 1212.53 L1363.68 1212.53 L1363.09 1212.53 L1362.5 1212.53 L1361.92 1212.53 L1361.33 1212.53 L1360.74 1212.53 L1360.16 1212.53 L1359.57 1212.53 L1358.98 1212.53 L1358.4 1212.53 L1357.81 1212.53 L1357.22 1212.53 L1356.64 1212.53 L1356.05 1212.53 L1355.47 1212.53 L1354.88 1212.53 L1354.29 1212.53 L1353.71 1212.53 L1353.12 1212.53 L1352.53 1212.53 L1351.95 1212.53 L1351.36 1212.53 L1350.77 1212.53 L1350.19 1212.53 L1349.6 1212.53 L1349.01 1212.53 L1348.43 1212.53 L1347.84 1212.53 L1347.26 1212.53 L1346.67 1212.53 L1346.08 1212.53 L1345.5 1212.53 L1344.91 1212.53 L1344.32 1212.53 L1343.74 1212.53 L1343.15 1212.53 L1342.56 1212.53 L1341.98 1212.53 L1341.39 1212.53 L1340.8 1212.53 L1340.22 1212.53 L1339.63 1212.53 L1339.05 1212.53 L1338.46 1212.53 L1337.87 1212.53 L1337.29 1212.53 L1336.7 1212.53 L1336.11 1212.53 L1335.53 1212.53 L1334.94 1212.53 L1334.35 1212.53 L1333.77 1212.53 L1333.18 1212.53 L1332.6 1212.53 L1332.01 1212.53 L1331.42 1212.53 L1330.84 1212.53 L1330.25 1212.53 L1329.66 1212.53 L1329.08 1212.53 L1328.49 1212.53 L1327.9 1212.53 L1327.32 1212.53 L1326.73 1212.53 L1326.14 1212.53 L1325.56 1212.53 L1324.97 1212.53 L1324.39 1212.53 L1323.8 1212.53 L1323.21 1212.53 L1322.63 1212.53 L1322.04 1212.53 L1321.45 1212.53 L1320.87 1212.53 L1320.28 1212.53 L1319.69 1212.53 L1319.11 1212.53 L1318.52 1212.53 L1317.93 1212.53 L1317.35 1212.53 L1316.76 1212.53 L1316.18 1212.53 L1315.59 1212.53 L1315 1212.53 L1314.42 1212.53 L1313.83 1212.53 L1313.24 1212.53 L1312.66 1212.53 L1312.07 1212.53 L1311.48 1212.53 L1310.9 1212.53 L1310.31 1212.53 L1309.73 1212.53 L1309.14 1212.53 L1308.55 1212.53 L1307.97 1212.53 L1307.38 1212.53 L1306.79 1212.53 L1306.21 1212.53 L1305.62 1212.53 L1305.03 1212.53 L1304.45 1212.53 L1303.86 1212.53 L1303.27 1212.53 L1302.69 1212.53 L1302.1 1212.53 L1301.52 1212.53 L1300.93 1212.53 L1300.34 1212.53 L1299.76 1212.53 L1299.17 1212.53 L1298.58 1212.53 L1298 1212.53 L1297.41 1212.53 L1296.82 1212.53 L1296.24 1212.53 L1295.65 1212.53 L1295.06 1212.53 L1294.48 1212.53 L1293.89 1212.53 L1293.31 1212.53 L1292.72 1212.53 L1292.13 1212.53 L1291.55 1212.53 L1290.96 1212.53 L1290.37 1212.53 L1289.79 1212.53 L1289.2 1212.53 L1288.61 1212.53 L1288.03 1212.53 L1287.44 1212.53 L1286.86 1212.53 L1286.27 1212.53 L1285.68 1212.53 L1285.1 1212.53 L1284.51 1212.53 L1283.92 1212.53 L1283.34 1212.53 L1282.75 1212.53 L1282.16 1212.53 L1281.58 1212.53 L1280.99 1212.53 L1280.4 1212.53 L1279.82 1212.53 L1279.23 1212.53 L1278.65 1212.53 L1278.06 1212.53 L1277.47 1212.53 L1276.89 1212.53 L1276.3 1212.53 L1275.71 1212.53 L1275.13 1212.53 L1274.54 1212.53 L1273.95 1212.53 L1273.37 1212.53 L1272.78 1212.53 L1272.19 1212.53 L1271.61 1212.53 L1271.02 1212.53 L1270.44 1212.53 L1269.85 1212.53 L1269.26 1212.53 L1268.68 1212.53 L1268.09 1212.53 L1267.5 1212.53 L1266.92 1212.53 L1266.33 1212.53 L1265.74 1212.53 L1265.16 1212.53 L1264.57 1212.53 L1263.98 1212.53 L1263.4 1212.53 L1262.81 1212.53 L1262.23 1212.53 L1261.64 1212.53 L1261.05 1212.53 L1260.47 1212.53 L1259.88 1212.53 L1259.29 1212.53 L1258.71 1212.53 L1258.12 1212.53 L1257.53 1212.53 L1256.95 1212.53 L1256.36 1212.53 L1255.78 1212.53 L1255.19 1212.53 L1254.6 1212.53 L1254.02 1212.53 L1253.43 1212.53 L1252.84 1212.53 L1252.26 1212.53 L1251.67 1212.53 L1251.08 1212.53 L1250.5 1212.53 L1249.91 1212.53 L1249.32 1212.53 L1248.74 1212.53 L1248.15 1212.53 L1247.57 1212.53 L1246.98 1212.53 L1246.39 1212.53 L1245.81 1212.53 L1245.22 1212.53 L1244.63 1212.53 L1244.05 1212.53 L1243.46 1212.53 L1242.87 1212.53 L1242.29 1212.53 L1241.7 1212.53 L1241.11 1212.53 L1240.53 1212.53 L1239.94 1212.53 L1239.36 1212.53 L1238.77 1212.53 L1238.18 1212.53 L1237.6 1212.53 L1237.01 1212.53 L1236.42 1212.53 L1235.84 1212.53 L1235.25 1212.53 L1234.66 1212.53 L1234.08 1212.53 L1233.49 1212.53 L1232.91 1212.53 L1232.32 1212.53 L1231.73 1212.53 L1231.15 1212.53 L1230.56 1212.53 L1229.97 1212.53 L1229.39 1212.53 L1228.8 1212.53 L1228.21 1212.53 L1227.63 1212.53 L1227.04 1212.53 L1226.45 1212.53 L1225.87 1212.53 L1225.28 1212.53 L1224.7 1212.53 L1224.11 1212.53 L1223.52 1212.53 L1222.94 1212.53 L1222.35 1212.53 L1221.76 1212.53 L1221.18 1212.53 L1220.59 1212.53 L1220 1212.53 L1219.42 1212.53 L1218.83 1212.53 L1218.24 1212.53 L1217.66 1212.53 L1217.07 1212.53 L1216.49 1212.53 L1215.9 1212.53 L1215.31 1212.53 L1214.73 1212.53 L1214.14 1212.53 L1213.55 1212.53 L1212.97 1212.53 L1212.38 1212.53 L1211.79 1212.53 L1211.21 1212.53 L1210.62 1212.53 L1210.03 1212.53 L1209.45 1212.53 L1208.86 1212.53 L1208.28 1212.53 L1207.69 1212.53 L1207.1 1212.53 L1206.52 1212.53 L1205.93 1212.53 L1205.34 1212.53 L1204.76 1212.53 L1204.17 1212.53 L1203.58 1212.53 L1203 1212.53 L1202.41 1212.53 L1201.83 1212.53 L1201.24 1212.53 L1200.65 1212.53 L1200.07 1212.53 L1199.48 1212.53 L1198.89 1212.53 L1198.31 1212.53 L1197.72 1212.53 L1197.13 1212.53 L1196.55 1212.53 L1195.96 1212.53 L1195.37 1212.53 L1194.79 1212.53 L1194.2 1212.53 L1193.62 1212.53 L1193.03 1212.53 L1192.44 1212.53 L1191.86 1212.53 L1191.27 1212.53 L1190.68 1212.53 L1190.1 1212.53 L1189.51 1212.53 L1188.92 1212.53 L1188.34 1212.53 L1187.75 1212.53 L1187.16 1212.53 L1186.58 1212.53 L1185.99 1212.53 L1185.41 1212.53 L1184.82 1212.53 L1184.23 1212.53 L1183.65 1212.53 L1183.06 1212.53 L1182.47 1212.53 L1181.89 1212.53 L1181.3 1212.53 L1180.71 1212.53 L1180.13 1212.53 L1179.54 1212.53 L1178.96 1212.53 L1178.37 1212.53 L1177.78 1212.53 L1177.2 1212.53 L1176.61 1212.53 L1176.02 1212.53 L1175.44 1212.53 L1174.85 1212.53 L1174.26 1212.53 L1173.68 1212.53 L1173.09 1212.53 L1172.5 1212.53 L1171.92 1212.53 L1171.33 1212.53 L1170.75 1212.53 L1170.16 1212.53 L1169.57 1212.53 L1168.99 1212.53 L1168.4 1212.53 L1167.81 1212.53 L1167.23 1212.53 L1166.64 1212.53 L1166.05 1212.53 L1165.47 1212.53 L1164.88 1212.53 L1164.29 1212.53 L1163.71 1212.53 L1163.12 1212.53 L1162.54 1212.53 L1161.95 1212.53 L1161.36 1212.53 L1160.78 1212.53 L1160.19 1212.53 L1159.6 1212.53 L1159.02 1212.53 L1158.43 1212.53 L1157.84 1212.53 L1157.26 1212.53 L1156.67 1212.53 L1156.09 1212.53 L1155.5 1212.53 L1154.91 1212.53 L1154.33 1212.53 L1153.74 1212.53 L1153.15 1212.53 L1152.57 1212.53 L1151.98 1212.53 L1151.39 1212.53 L1150.81 1212.53 L1150.22 1212.53 L1149.63 1212.53 L1149.05 1212.53 L1148.46 1212.53 L1147.88 1212.53 L1147.29 1212.53 L1146.7 1212.53 L1146.12 1212.53 L1145.53 1212.53 L1144.94 1212.53 L1144.36 1212.53 L1143.77 1212.53 L1143.18 1212.53 L1142.6 1212.53 L1142.01 1212.53 L1141.42 1212.53 L1140.84 1212.53 L1140.25 1212.53 L1139.67 1212.53 L1139.08 1212.53 L1138.49 1212.53 L1137.91 1212.53 L1137.32 1212.53 L1136.73 1212.53 L1136.15 1212.53 L1135.56 1212.53 L1134.97 1212.53 L1134.39 1212.53 L1133.8 1212.53 L1133.21 1212.53 L1132.63 1212.53 L1132.04 1212.53 L1131.46 1212.53 L1130.87 1212.53 L1130.28 1212.53 L1129.7 1212.53 L1129.11 1212.53 L1128.52 1212.53 L1127.94 1212.53 L1127.35 1212.53 L1126.76 1212.53 L1126.18 1212.53 L1125.59 1212.53 L1125.01 1212.53 L1124.42 1212.53 L1123.83 1212.53 L1123.25 1212.53 L1122.66 1212.53 L1122.07 1212.53 L1121.49 1212.53 L1120.9 1212.53 L1120.31 1212.53 L1119.73 1212.53 L1119.14 1212.53 L1118.55 1212.53 L1117.97 1212.53 L1117.38 1212.53 L1116.8 1212.53 L1116.21 1212.53 L1115.62 1212.53 L1115.04 1212.53 L1114.45 1212.53 L1113.86 1212.53 L1113.28 1212.53 L1112.69 1212.53 L1112.1 1212.53 L1111.52 1212.53 L1110.93 1212.53 L1110.34 1212.53 L1109.76 1212.53 L1109.17 1212.53 L1108.59 1212.53 L1108 1212.53 L1107.41 1212.53 L1106.83 1212.53 L1106.24 1212.53 L1105.65 1212.53 L1105.07 1212.53 L1104.48 1212.53 L1103.89 1212.53 L1103.31 1212.53 L1102.72 1212.53 L1102.14 1212.53 L1101.55 1212.53 L1100.96 1212.53 L1100.38 1212.53 L1099.79 1212.53 L1099.2 1212.53 L1098.62 1212.53 L1098.03 1212.53 L1097.44 1212.53 L1096.86 1212.53 L1096.27 1212.53 L1095.68 1212.53 L1095.1 1212.53 L1094.51 1212.53 L1093.93 1212.53 L1093.34 1212.53 L1092.75 1212.53 L1092.17 1212.53 L1091.58 1212.53 L1090.99 1212.53 L1090.41 1212.53 L1089.82 1212.53 L1089.23 1212.53 L1088.65 1212.53 L1088.06 1212.53 L1087.47 1212.53 L1086.89 1212.53 L1086.3 1212.53 L1085.72 1212.53 L1085.13 1212.53 L1084.54 1212.53 L1083.96 1212.53 L1083.37 1212.53 L1082.78 1212.53 L1082.2 1212.53 L1081.61 1212.53 L1081.02 1212.53 L1080.44 1212.53 L1079.85 1212.53 L1079.26 1212.53 L1078.68 1212.53 L1078.09 1212.53 L1077.51 1212.53 L1076.92 1212.53 L1076.33 1212.53 L1075.75 1212.53 L1075.16 1212.53 L1074.57 1212.53 L1073.99 1212.53 L1073.4 1212.53 L1072.81 1212.53 L1072.23 1212.53 L1071.64 1212.53 L1071.06 1212.53 L1070.47 1212.53 L1069.88 1212.53 L1069.3 1212.53 L1068.71 1212.53 L1068.12 1212.53 L1067.54 1212.53 L1066.95 1212.53 L1066.36 1212.53 L1065.78 1212.53 L1065.19 1212.53 L1064.6 1212.53 L1064.02 1212.53 L1063.43 1212.53 L1062.85 1212.53 L1062.26 1212.53 L1061.67 1212.53 L1061.09 1212.53 L1060.5 1212.53 L1059.91 1212.53 L1059.33 1212.53 L1058.74 1212.53 L1058.15 1212.53 L1057.57 1212.53 L1056.98 1212.53 L1056.39 1212.53 L1055.81 1212.53 L1055.22 1212.53 L1054.64 1212.53 L1054.05 1212.53 L1053.46 1212.53 L1052.88 1212.53 L1052.29 1212.53 L1051.7 1212.53 L1051.12 1212.53 L1050.53 1212.53 L1049.94 1212.53 L1049.36 1212.53 L1048.77 1212.53 L1048.19 1212.53 L1047.6 1212.53 L1047.01 1212.53 L1046.43 1212.53 L1045.84 1212.53 L1045.25 1212.53 L1044.67 1212.53 L1044.08 1212.53 L1043.49 1212.53 L1042.91 1212.53 L1042.32 1212.53 L1041.73 1212.53 L1041.15 1212.53 L1040.56 1212.53 L1039.98 1212.53 L1039.39 1212.53 L1038.8 1212.53 L1038.22 1212.53 L1037.63 1212.53 L1037.04 1212.53 L1036.46 1212.53 L1035.87 1212.53 L1035.28 1212.53 L1034.7 1212.53 L1034.11 1212.53 L1033.52 1212.53 L1032.94 1212.53 L1032.35 1212.53 L1031.77 1212.53 L1031.18 1212.53 L1030.59 1212.53 L1030.01 1212.53 L1029.42 1212.53 L1028.83 1212.53 L1028.25 1212.53 L1027.66 1212.53 L1027.07 1212.53 L1026.49 1212.53 L1025.9 1212.53 L1025.32 1212.53 L1024.73 1212.53 L1024.14 1212.53 L1023.56 1212.53 L1022.97 1212.53 L1022.38 1212.53 L1021.8 1212.53 L1021.21 1212.53 L1020.62 1212.53 L1020.04 1212.53 L1019.45 1212.53 L1018.86 1212.53 L1018.28 1212.53 L1017.69 1212.53 L1017.11 1212.53 L1016.52 1212.53 L1015.93 1212.53 L1015.35 1212.53 L1014.76 1212.53 L1014.17 1212.53 L1013.59 1212.53 L1013 1212.53 L1012.41 1212.53 L1011.83 1212.53 L1011.24 1212.53 L1010.65 1212.53 L1010.07 1212.53 L1009.48 1212.53 L1008.9 1212.53 L1008.31 1212.53 L1007.72 1212.53 L1007.14 1212.53 L1006.55 1212.53 L1005.96 1212.53 L1005.38 1212.53 L1004.79 1212.53 L1004.2 1212.53 L1003.62 1212.53 L1003.03 1212.53 L1002.44 1212.53 L1001.86 1212.53 L1001.27 1212.53 L1000.69 1212.53 L1000.1 1212.53 L999.513 1212.53 L998.926 1212.53 L998.34 1212.53 L997.754 1212.53 L997.167 1212.53 L996.581 1212.53 L995.994 1212.53 L995.408 1212.53 L994.822 1212.53 L994.235 1212.53 L993.649 1212.53 L993.062 1212.53 L992.476 1212.53 L991.889 1212.53 L991.303 1212.53 L990.717 1212.53 L990.13 1212.53 L989.544 1212.53 L988.957 1212.53 L988.371 1212.53 L987.785 1212.53 L987.198 1212.53 L986.612 1212.53 L986.025 1212.53  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.6 986.612,1212.6 987.198,1212.6 987.785,1212.6 988.371,1212.6 988.957,1212.6 989.544,1212.6 990.13,1212.6 990.717,1212.6 991.303,1212.6 991.889,1212.6 992.476,1212.6 993.062,1212.6 993.649,1212.6 994.235,1212.6 994.822,1212.6 995.408,1212.6 995.994,1212.6 996.581,1212.6 997.167,1212.6 997.754,1212.6 998.34,1212.6 998.926,1212.6 999.513,1212.6 1000.1,1212.6 1000.69,1212.6 1001.27,1212.6 1001.86,1212.6 1002.44,1212.6 1003.03,1212.6 1003.62,1212.6 1004.2,1212.6 1004.79,1212.6 1005.38,1212.6 1005.96,1212.6 1006.55,1212.6 1007.14,1212.6 1007.72,1212.6 1008.31,1212.6 1008.9,1212.6 1009.48,1212.6 1010.07,1212.6 1010.65,1212.6 1011.24,1212.6 1011.83,1212.6 1012.41,1212.6 1013,1212.6 1013.59,1212.6 1014.17,1212.6 1014.76,1212.6 1015.35,1212.6 1015.93,1212.6 1016.52,1212.6 1017.11,1212.6 1017.69,1212.6 1018.28,1212.6 1018.86,1212.6 1019.45,1212.6 1020.04,1212.6 1020.62,1212.6 1021.21,1212.6 1021.8,1212.6 1022.38,1212.6 1022.97,1212.6 1023.56,1212.6 1024.14,1212.6 1024.73,1212.6 1025.32,1212.6 1025.9,1212.6 1026.49,1212.6 1027.07,1212.6 1027.66,1212.6 1028.25,1212.6 1028.83,1212.6 1029.42,1212.6 1030.01,1212.6 1030.59,1212.6 1031.18,1212.6 1031.77,1212.6 1032.35,1212.6 1032.94,1212.6 1033.52,1212.6 1034.11,1212.6 1034.7,1212.6 1035.28,1212.6 1035.87,1212.6 1036.46,1212.6 1037.04,1212.6 1037.63,1212.6 1038.22,1212.6 1038.8,1212.6 1039.39,1212.6 1039.98,1212.6 1040.56,1212.6 1041.15,1212.6 1041.73,1212.6 1042.32,1212.6 1042.91,1212.6 1043.49,1212.6 1044.08,1212.6 1044.67,1212.6 1045.25,1212.6 1045.84,1212.6 1046.43,1212.6 1047.01,1212.6 1047.6,1212.6 1048.19,1212.6 1048.77,1212.6 1049.36,1212.6 1049.94,1212.6 1050.53,1212.6 1051.12,1212.6 1051.7,1212.6 1052.29,1212.6 1052.88,1212.6 1053.46,1212.6 1054.05,1212.6 1054.64,1212.6 1055.22,1212.6 1055.81,1212.6 1056.39,1212.6 1056.98,1212.6 1057.57,1212.6 1058.15,1212.6 1058.74,1212.6 1059.33,1212.6 1059.91,1212.6 1060.5,1212.6 1061.09,1212.6 1061.67,1212.6 1062.26,1212.6 1062.85,1212.6 1063.43,1212.6 1064.02,1212.6 1064.6,1212.6 1065.19,1212.6 1065.78,1212.6 1066.36,1212.6 1066.95,1212.6 1067.54,1212.6 1068.12,1212.6 1068.71,1212.6 1069.3,1212.6 1069.88,1212.6 1070.47,1212.6 1071.06,1212.6 1071.64,1212.6 1072.23,1212.6 1072.81,1212.6 1073.4,1212.6 1073.99,1212.6 1074.57,1212.6 1075.16,1212.6 1075.75,1212.6 1076.33,1212.6 1076.92,1212.6 1077.51,1212.6 1078.09,1212.6 1078.68,1212.6 1079.26,1212.6 1079.85,1212.6 1080.44,1212.6 1081.02,1212.6 1081.61,1212.6 1082.2,1212.6 1082.78,1212.6 1083.37,1212.6 1083.96,1212.6 1084.54,1212.6 1085.13,1212.6 1085.72,1212.6 1086.3,1212.6 1086.89,1212.6 1087.47,1212.6 1088.06,1212.6 1088.65,1212.6 1089.23,1212.6 1089.82,1212.6 1090.41,1212.6 1090.99,1212.6 1091.58,1212.6 1092.17,1212.6 1092.75,1212.6 1093.34,1212.6 1093.93,1212.6 1094.51,1212.6 1095.1,1212.6 1095.68,1212.6 1096.27,1212.6 1096.86,1212.6 1097.44,1212.6 1098.03,1212.6 1098.62,1212.6 1099.2,1212.6 1099.79,1212.6 1100.38,1212.6 1100.96,1212.6 1101.55,1212.6 1102.14,1212.6 1102.72,1212.6 1103.31,1212.6 1103.89,1212.6 1104.48,1212.6 1105.07,1212.6 1105.65,1212.6 1106.24,1212.6 1106.83,1212.6 1107.41,1212.6 1108,1212.6 1108.59,1212.6 1109.17,1212.6 1109.76,1212.6 1110.34,1212.6 1110.93,1212.6 1111.52,1212.6 1112.1,1212.6 1112.69,1212.6 1113.28,1212.6 1113.86,1212.6 1114.45,1212.6 1115.04,1212.6 1115.62,1212.6 1116.21,1212.6 1116.8,1212.6 1117.38,1212.6 1117.97,1212.6 1118.55,1212.6 1119.14,1212.6 1119.73,1212.6 1120.31,1212.6 1120.9,1212.6 1121.49,1212.6 1122.07,1212.6 1122.66,1212.6 1123.25,1212.6 1123.83,1212.6 1124.42,1212.6 1125.01,1212.6 1125.59,1212.6 1126.18,1212.6 1126.76,1212.6 1127.35,1212.6 1127.94,1212.6 1128.52,1212.6 1129.11,1212.6 1129.7,1212.6 1130.28,1212.6 1130.87,1212.6 1131.46,1212.6 1132.04,1212.6 1132.63,1212.6 1133.21,1212.6 1133.8,1212.6 1134.39,1212.6 1134.97,1212.6 1135.56,1212.6 1136.15,1212.6 1136.73,1212.6 1137.32,1212.6 1137.91,1212.6 1138.49,1212.6 1139.08,1212.6 1139.67,1212.6 1140.25,1212.6 1140.84,1212.6 1141.42,1212.6 1142.01,1212.6 1142.6,1212.6 1143.18,1212.6 1143.77,1212.6 1144.36,1212.6 1144.94,1212.6 1145.53,1212.6 1146.12,1212.6 1146.7,1212.6 1147.29,1212.6 1147.88,1212.6 1148.46,1212.6 1149.05,1212.6 1149.63,1212.6 1150.22,1212.6 1150.81,1212.6 1151.39,1212.6 1151.98,1212.6 1152.57,1212.6 1153.15,1212.6 1153.74,1212.6 1154.33,1212.6 1154.91,1212.6 1155.5,1212.6 1156.09,1212.6 1156.67,1212.6 1157.26,1212.6 1157.84,1212.6 1158.43,1212.6 1159.02,1212.6 1159.6,1212.6 1160.19,1212.6 1160.78,1212.6 1161.36,1212.6 1161.95,1212.6 1162.54,1212.6 1163.12,1212.6 1163.71,1212.6 1164.29,1212.6 1164.88,1212.6 1165.47,1212.6 1166.05,1212.6 1166.64,1212.6 1167.23,1212.6 1167.81,1212.6 1168.4,1212.6 1168.99,1212.6 1169.57,1212.6 1170.16,1212.6 1170.75,1212.6 1171.33,1212.6 1171.92,1212.6 1172.5,1212.6 1173.09,1212.6 1173.68,1212.6 1174.26,1212.6 1174.85,1212.6 1175.44,1212.6 1176.02,1212.6 1176.61,1212.6 1177.2,1212.6 1177.78,1212.6 1178.37,1212.6 1178.96,1212.6 1179.54,1212.6 1180.13,1212.6 1180.71,1212.6 1181.3,1212.6 1181.89,1212.6 1182.47,1212.6 1183.06,1212.6 1183.65,1212.6 1184.23,1212.6 1184.82,1212.6 1185.41,1212.6 1185.99,1212.6 1186.58,1212.6 1187.16,1212.6 1187.75,1212.6 1188.34,1212.6 1188.92,1212.6 1189.51,1212.6 1190.1,1212.6 1190.68,1212.6 1191.27,1212.6 1191.86,1212.6 1192.44,1212.6 1193.03,1212.6 1193.62,1212.6 1194.2,1212.6 1194.79,1212.6 1195.37,1212.6 1195.96,1212.6 1196.55,1212.6 1197.13,1212.6 1197.72,1212.6 1198.31,1212.6 1198.89,1212.6 1199.48,1212.6 1200.07,1212.6 1200.65,1212.6 1201.24,1212.6 1201.83,1212.6 1202.41,1212.6 1203,1212.6 1203.58,1212.6 1204.17,1212.6 1204.76,1212.6 1205.34,1212.6 1205.93,1212.6 1206.52,1212.6 1207.1,1212.6 1207.69,1212.6 1208.28,1212.6 1208.86,1212.6 1209.45,1212.6 1210.03,1212.6 1210.62,1212.6 1211.21,1212.6 1211.79,1212.6 1212.38,1212.6 1212.97,1212.6 1213.55,1212.6 1214.14,1212.6 1214.73,1212.6 1215.31,1212.6 1215.9,1212.6 1216.49,1212.6 1217.07,1212.6 1217.66,1212.6 1218.24,1212.6 1218.83,1212.6 1219.42,1212.6 1220,1212.6 1220.59,1212.6 1221.18,1212.6 1221.76,1212.6 1222.35,1212.6 1222.94,1212.6 1223.52,1212.6 1224.11,1212.6 1224.7,1212.6 1225.28,1212.6 1225.87,1212.6 1226.45,1212.6 1227.04,1212.6 1227.63,1212.6 1228.21,1212.6 1228.8,1212.6 1229.39,1212.6 1229.97,1212.6 1230.56,1212.6 1231.15,1212.6 1231.73,1212.6 1232.32,1212.6 1232.91,1212.6 1233.49,1212.6 1234.08,1212.6 1234.66,1212.6 1235.25,1212.6 1235.84,1212.6 1236.42,1212.6 1237.01,1212.6 1237.6,1212.6 1238.18,1212.6 1238.77,1212.6 1239.36,1212.6 1239.94,1212.6 1240.53,1212.6 1241.11,1212.6 1241.7,1212.6 1242.29,1212.6 1242.87,1212.6 1243.46,1212.6 1244.05,1212.6 1244.63,1212.6 1245.22,1212.6 1245.81,1212.6 1246.39,1212.6 1246.98,1212.6 1247.57,1212.6 1248.15,1212.6 1248.74,1212.6 1249.32,1212.6 1249.91,1212.6 1250.5,1212.6 1251.08,1212.6 1251.67,1212.6 1252.26,1212.6 1252.84,1212.6 1253.43,1212.6 1254.02,1212.6 1254.6,1212.6 1255.19,1212.6 1255.78,1212.6 1256.36,1212.6 1256.95,1212.6 1257.53,1212.6 1258.12,1212.6 1258.71,1212.6 1259.29,1212.6 1259.88,1212.6 1260.47,1212.6 1261.05,1212.6 1261.64,1212.6 1262.23,1212.6 1262.81,1212.6 1263.4,1212.6 1263.98,1212.6 1264.57,1212.6 1265.16,1212.6 1265.74,1212.6 1266.33,1212.6 1266.92,1212.6 1267.5,1212.6 1268.09,1212.6 1268.68,1212.6 1269.26,1212.6 1269.85,1212.6 1270.44,1212.6 1271.02,1212.6 1271.61,1212.6 1272.19,1212.6 1272.78,1212.6 1273.37,1212.6 1273.95,1212.6 1274.54,1212.6 1275.13,1212.6 1275.71,1212.6 1276.3,1212.6 1276.89,1212.6 1277.47,1212.6 1278.06,1212.6 1278.65,1212.6 1279.23,1212.6 1279.82,1212.6 1280.4,1212.6 1280.99,1212.6 1281.58,1212.6 1282.16,1212.6 1282.75,1212.6 1283.34,1212.6 1283.92,1212.6 1284.51,1212.6 1285.1,1212.6 1285.68,1212.6 1286.27,1212.6 1286.86,1212.6 1287.44,1212.6 1288.03,1212.6 1288.61,1212.6 1289.2,1212.6 1289.79,1212.6 1290.37,1212.6 1290.96,1212.6 1291.55,1212.6 1292.13,1212.6 1292.72,1212.6 1293.31,1212.6 1293.89,1212.6 1294.48,1212.6 1295.06,1212.6 1295.65,1212.6 1296.24,1212.6 1296.82,1212.6 1297.41,1212.6 1298,1212.6 1298.58,1212.6 1299.17,1212.6 1299.76,1212.6 1300.34,1212.6 1300.93,1212.6 1301.52,1212.6 1302.1,1212.6 1302.69,1212.6 1303.27,1212.6 1303.86,1212.6 1304.45,1212.6 1305.03,1212.6 1305.62,1212.6 1306.21,1212.6 1306.79,1212.6 1307.38,1212.6 1307.97,1212.6 1308.55,1212.6 1309.14,1212.6 1309.73,1212.6 1310.31,1212.6 1310.9,1212.6 1311.48,1212.6 1312.07,1212.6 1312.66,1212.6 1313.24,1212.6 1313.83,1212.6 1314.42,1212.6 1315,1212.6 1315.59,1212.6 1316.18,1212.6 1316.76,1212.6 1317.35,1212.6 1317.93,1212.6 1318.52,1212.6 1319.11,1212.6 1319.69,1212.6 1320.28,1212.6 1320.87,1212.6 1321.45,1212.6 1322.04,1212.6 1322.63,1212.6 1323.21,1212.6 1323.8,1212.6 1324.39,1212.6 1324.97,1212.6 1325.56,1212.6 1326.14,1212.6 1326.73,1212.6 1327.32,1212.6 1327.9,1212.6 1328.49,1212.6 1329.08,1212.6 1329.66,1212.6 1330.25,1212.6 1330.84,1212.6 1331.42,1212.6 1332.01,1212.6 1332.6,1212.6 1333.18,1212.6 1333.77,1212.6 1334.35,1212.6 1334.94,1212.6 1335.53,1212.6 1336.11,1212.6 1336.7,1212.6 1337.29,1212.6 1337.87,1212.6 1338.46,1212.6 1339.05,1212.6 1339.63,1212.6 1340.22,1212.6 1340.8,1212.6 1341.39,1212.6 1341.98,1212.6 1342.56,1212.6 1343.15,1212.6 1343.74,1212.6 1344.32,1212.6 1344.91,1212.6 1345.5,1212.6 1346.08,1212.6 1346.67,1212.6 1347.26,1212.6 1347.84,1212.6 1348.43,1212.6 1349.01,1212.6 1349.6,1212.6 1350.19,1212.6 1350.77,1212.6 1351.36,1212.6 1351.95,1212.6 1352.53,1212.6 1353.12,1212.6 1353.71,1212.6 1354.29,1212.6 1354.88,1212.6 1355.47,1212.6 1356.05,1212.6 1356.64,1212.6 1357.22,1212.6 1357.81,1212.6 1358.4,1212.6 1358.98,1212.6 1359.57,1212.6 1360.16,1212.6 1360.74,1212.6 1361.33,1212.6 1361.92,1212.6 1362.5,1212.6 1363.09,1212.6 1363.68,1212.6 1364.26,1212.6 1364.85,1212.6 1365.43,1212.6 1366.02,1212.6 1366.61,1212.6 1367.19,1212.6 1367.78,1212.6 1368.37,1212.6 1368.95,1212.6 1369.54,1212.6 1370.13,1212.6 1370.71,1212.6 1371.3,1212.6 1371.88,1212.6 1372.47,1212.6 1373.06,1212.6 1373.64,1212.6 1374.23,1212.6 1374.82,1212.6 1375.4,1212.6 1375.99,1212.6 1376.58,1212.6 1377.16,1212.6 1377.75,1212.6 1378.34,1212.6 1378.92,1212.6 1379.51,1212.6 1380.09,1212.6 1380.68,1212.6 1381.27,1212.6 1381.85,1212.6 1382.44,1212.6 1383.03,1212.6 1383.61,1212.6 1384.2,1212.6 1384.79,1212.6 1385.37,1212.6 1385.96,1212.6 1386.55,1212.6 1387.13,1212.6 1387.72,1212.6 1388.3,1212.6 1388.89,1212.6 1389.48,1212.6 1390.06,1212.6 1390.65,1212.6 1391.24,1212.6 1391.82,1212.6 1392.41,1212.6 1393,1212.6 1393.58,1212.6 1394.17,1212.6 1394.75,1212.6 1395.34,1212.6 1395.93,1212.6 1396.51,1212.6 1397.1,1212.6 1397.69,1212.6 1398.27,1212.6 1398.86,1212.6 1399.45,1212.6 1400.03,1212.6 1400.62,1212.6 1401.21,1212.6 1401.79,1212.6 1402.38,1212.6 1402.96,1212.6 1403.55,1212.6 1404.14,1212.6 1404.72,1212.6 1405.31,1212.6 1405.9,1212.6 1406.48,1212.6 1407.07,1212.6 1407.66,1212.6 1408.24,1212.6 1408.83,1212.6 1409.42,1212.6 1410,1212.6 1410.59,1212.6 1411.17,1212.6 1411.76,1212.6 1412.35,1212.6 1412.93,1212.6 1413.52,1212.6 1414.11,1212.6 1414.69,1212.6 1415.28,1212.6 1415.87,1212.6 1416.45,1212.6 1417.04,1212.6 1417.63,1212.6 1418.21,1212.6 1418.8,1212.6 1419.38,1212.6 1419.97,1212.6 1420.56,1212.6 1421.14,1212.6 1421.73,1212.6 1422.32,1212.6 1422.9,1212.6 1423.49,1212.6 1424.08,1212.6 1424.66,1212.6 1425.25,1212.6 1425.83,1212.6 1426.42,1212.6 1427.01,1212.6 1427.59,1212.6 1428.18,1212.6 1428.77,1212.6 1429.35,1212.6 1429.94,1212.6 1430.53,1212.6 1431.11,1212.6 1431.7,1212.6 1432.29,1212.6 1432.87,1212.6 1433.46,1212.6 1434.04,1212.6 1434.63,1212.6 1435.22,1212.6 1435.8,1212.6 1436.39,1212.6 1436.98,1212.6 1437.56,1212.6 1438.15,1212.6 1438.74,1212.6 1439.32,1212.6 1439.91,1212.6 1440.5,1212.6 1441.08,1212.6 1441.67,1212.6 1442.25,1212.6 1442.84,1212.6 1443.43,1212.6 1444.01,1212.6 1444.6,1212.6 1445.19,1212.6 1445.77,1212.6 1446.36,1212.6 1446.95,1212.6 1447.53,1212.6 1448.12,1212.6 1448.7,1212.6 1449.29,1212.6 1449.88,1212.6 1450.46,1212.6 1451.05,1212.6 1451.64,1212.6 1452.22,1212.6 1452.81,1212.6 1453.4,1212.6 1453.98,1212.6 1454.57,1212.6 1455.16,1212.6 1455.74,1212.6 1456.33,1212.6 1456.91,1212.6 1457.5,1212.6 1458.09,1212.6 1458.67,1212.6 1459.26,1212.6 1459.85,1212.6 1460.43,1212.6 1461.02,1212.6 1461.61,1212.6 1462.19,1212.6 1462.78,1212.6 1463.37,1212.6 1463.95,1212.6 1464.54,1212.6 1465.12,1212.6 1465.71,1212.6 1466.3,1212.6 1466.88,1212.6 1467.47,1212.6 1468.06,1212.6 1468.64,1212.6 1469.23,1212.6 1469.82,1212.6 1470.4,1212.6 1470.99,1212.6 1471.57,1212.6 1472.16,1212.6 1472.75,1212.6 1473.33,1212.6 1473.92,1212.6 1474.51,1212.6 1475.09,1212.6 1475.68,1212.6 1476.27,1212.6 1476.85,1212.6 1477.44,1212.6 1478.03,1212.6 1478.61,1212.6 1479.2,1212.6 1479.78,1212.6 1480.37,1212.6 1480.96,1212.6 1481.54,1212.6 1482.13,1212.6 1482.72,1212.6 1483.3,1212.6 1483.89,1212.6 1484.48,1212.6 1485.06,1212.6 1485.65,1212.6 1486.24,1212.6 1486.82,1212.6 1487.41,1212.6 1487.99,1212.6 1488.58,1212.6 1489.17,1212.6 1489.75,1212.6 1490.34,1212.6 1490.93,1212.6 1491.51,1212.6 1492.1,1212.6 1492.69,1212.6 1493.27,1212.6 1493.86,1212.6 1494.45,1212.6 1495.03,1212.6 1495.62,1212.6 1496.2,1212.6 1496.79,1212.6 1497.38,1212.6 1497.96,1212.6 1498.55,1212.6 1499.14,1212.6 1499.72,1212.6 1500.31,1212.6 1500.9,1212.6 1501.48,1212.6 1502.07,1212.6 1502.65,1212.6 1503.24,1212.6 1503.83,1212.6 1504.41,1212.6 1505,1212.6 1505.59,1212.6 1506.17,1212.6 1506.76,1212.6 1507.35,1212.6 1507.93,1212.6 1508.52,1212.6 1509.11,1212.6 1509.69,1212.6 1510.28,1212.6 1510.86,1212.6 1511.45,1212.6 1512.04,1212.6 1512.62,1212.6 1513.21,1212.6 1513.8,1212.6 1514.38,1212.6 1514.97,1212.6 1515.56,1212.6 1516.14,1212.6 1516.73,1212.6 1517.32,1212.6 1517.9,1212.6 1518.49,1212.6 1519.07,1212.6 1519.66,1212.6 1520.25,1212.6 1520.83,1212.6 1521.42,1212.6 1522.01,1212.6 1522.59,1212.6 1523.18,1212.6 1523.77,1212.6 1524.35,1212.6 1524.94,1212.6 1525.52,1212.6 1526.11,1212.6 1526.7,1212.6 1527.28,1212.6 1527.87,1212.6 1528.46,1212.6 1529.04,1212.6 1529.63,1212.6 1530.22,1212.6 1530.8,1212.6 1531.39,1212.6 1531.98,1212.6 1532.56,1212.6 1533.15,1212.6 1533.73,1212.6 1534.32,1212.6 1534.91,1212.6 1535.49,1212.6 1536.08,1212.6 1536.67,1212.6 1537.25,1212.6 1537.84,1212.6 1538.43,1212.6 1539.01,1212.6 1539.6,1212.6 1540.19,1212.6 1540.77,1212.6 1541.36,1212.6 1541.94,1212.6 1542.53,1212.6 1543.12,1212.6 1543.7,1212.6 1544.29,1212.6 1544.88,1212.6 1545.46,1212.6 1546.05,1212.6 1546.64,1212.6 1547.22,1212.6 1547.81,1212.6 1548.4,1212.6 1548.98,1212.6 1549.57,1212.6 1550.15,1212.6 1550.74,1212.6 1551.33,1212.6 1551.91,1212.6 1552.5,1212.6 1553.09,1212.6 1553.67,1212.6 1554.26,1212.6 1554.85,1212.6 1555.43,1212.6 1556.02,1212.6 1556.6,1212.6 1557.19,1212.6 1557.78,1212.6 1558.36,1212.6 1558.95,1212.6 1559.54,1212.6 1560.12,1212.6 1560.71,1212.6 1561.3,1212.6 1561.88,1212.6 1562.47,1212.6 1563.06,1212.6 1563.64,1212.6 1564.23,1212.6 1564.81,1212.6 1565.4,1212.6 1565.99,1212.6 1566.57,1212.6 1567.16,1212.6 1567.75,1212.6 1568.33,1212.6 1568.92,1212.6 1569.51,1212.6 1570.09,1212.6 1570.68,1212.6 1571.27,1212.6 1571.85,1212.6 1572.44,1212.6 1573.02,1212.6 1573.61,1212.6 1574.2,1212.6 1574.78,1212.6 1575.37,1212.6 1575.96,1212.6 1576.54,1212.6 1577.13,1212.6 1577.72,1212.6 1578.3,1212.6 1578.89,1212.6 1579.47,1212.6 1580.06,1212.6 1580.65,1212.6 1581.23,1212.6 1581.82,1212.6 1582.41,1212.6 1582.99,1212.6 1583.58,1212.6 1584.17,1212.6 1584.75,1212.6 1585.34,1212.6 1585.93,1212.6 1586.51,1212.6 1587.1,1212.6 1587.68,1212.6 1588.27,1212.6 1588.86,1212.6 1589.44,1212.6 1590.03,1212.6 1590.62,1212.6 1591.2,1212.6 1591.79,1212.6 1592.38,1212.6 1592.96,1212.6 1593.55,1212.6 1594.14,1212.6 1594.72,1212.6 1595.31,1212.6 1595.89,1212.6 1596.48,1212.6 1597.07,1212.6 1597.65,1212.6 1598.24,1212.6 1598.83,1212.6 1599.41,1212.6 1600,1212.6 1600.59,1212.6 1601.17,1212.6 1601.76,1212.6 1602.34,1212.6 1602.93,1212.6 1603.52,1212.6 1604.1,1212.6 1604.69,1212.6 1605.28,1212.6 1605.86,1212.6 1606.45,1212.6 1607.04,1212.6 1607.62,1212.6 1608.21,1212.6 1608.8,1212.6 1609.38,1212.6 1609.97,1212.6 1610.55,1212.6 1611.14,1212.6 1611.73,1212.6 1612.31,1212.6 1612.9,1212.6 1613.49,1212.6 1614.07,1212.6 1614.66,1212.6 1615.25,1212.6 1615.83,1212.6 1616.42,1212.6 1617.01,1212.6 1617.59,1212.6 1618.18,1212.6 1618.76,1212.6 1619.35,1212.6 1619.94,1212.6 1620.52,1212.6 1621.11,1212.6 1621.7,1212.6 1622.28,1212.6 1622.87,1212.6 1623.46,1212.6 1624.04,1212.6 1624.63,1212.6 1625.22,1212.6 1625.8,1212.6 1626.39,1212.6 1626.97,1212.6 1627.56,1212.6 1628.15,1212.6 1628.73,1212.6 1629.32,1212.6 1629.91,1212.6 1630.49,1212.6 1631.08,1212.6 1631.67,1212.6 1632.25,1212.6 1632.84,1212.6 1633.42,1212.6 1634.01,1212.6 1634.6,1212.6 1635.18,1212.6 1635.77,1212.6 1636.36,1212.6 1636.94,1212.6 1637.53,1212.6 1638.12,1212.6 1638.7,1212.6 1639.29,1212.6 1639.88,1212.6 1640.46,1212.6 1641.05,1212.6 1641.63,1212.6 1642.22,1212.6 1642.81,1212.6 1643.39,1212.6 1643.98,1212.6 1644.57,1212.6 1645.15,1212.6 1645.74,1212.6 1646.33,1212.6 1646.91,1212.6 1647.5,1212.6 1648.09,1212.6 1648.67,1212.6 1649.26,1212.6 1649.84,1212.6 1650.43,1212.6 1651.02,1212.6 1651.6,1212.6 1652.19,1212.6 1652.78,1212.6 1653.36,1212.6 1653.95,1212.6 1654.54,1212.6 1655.12,1212.6 1655.71,1212.6 1656.29,1212.6 1656.88,1212.6 1657.47,1212.6 1658.05,1212.6 1658.64,1212.6 1659.23,1212.6 1659.81,1212.6 1660.4,1212.6 1660.99,1212.6 1661.57,1212.6 1662.16,1212.6 1662.75,1212.6 1663.33,1212.6 1663.92,1212.6 1664.5,1212.6 1665.09,1212.6 1665.68,1212.6 1666.26,1212.6 1666.85,1212.6 1667.44,1212.6 1668.02,1212.6 1668.61,1212.6 1669.2,1212.6 1669.78,1212.6 1670.37,1212.6 1670.96,1212.6 1671.54,1212.6 1672.13,1212.6 1672.71,1212.6 1673.3,1212.6 1673.89,1212.6 1674.47,1212.6 1675.06,1212.6 1675.65,1212.6 1676.23,1212.6 1676.82,1212.6 1677.41,1212.6 1677.99,1212.6 1678.58,1212.6 1679.17,1212.6 1679.75,1212.6 1680.34,1212.6 1680.92,1212.6 1681.51,1212.6 1682.1,1212.6 1682.68,1212.6 1683.27,1212.6 1683.86,1212.6 1684.44,1212.6 1685.03,1212.6 1685.62,1212.6 1686.2,1212.6 1686.79,1212.6 1687.37,1212.6 1687.96,1212.6 1688.55,1212.6 1689.13,1212.6 1689.72,1212.6 1690.31,1212.6 1690.89,1212.6 1691.48,1212.6 1692.07,1212.6 1692.65,1212.6 1693.24,1212.6 1693.83,1212.6 1694.41,1212.6 1695,1212.6 1695.58,1212.6 1696.17,1212.6 1696.76,1212.6 1697.34,1212.6 1697.93,1212.6 1698.52,1212.6 1699.1,1212.6 1699.69,1212.6 1700.28,1212.6 1700.86,1212.6 1701.45,1212.6 1702.04,1212.6 1702.62,1212.6 1703.21,1212.6 1703.79,1212.6 1704.38,1212.6 1704.97,1212.6 1705.55,1212.6 1706.14,1212.6 1706.73,1212.6 1707.31,1212.6 1707.9,1212.6 1708.49,1212.6 1709.07,1212.6 1709.66,1212.6 1710.24,1212.6 1710.83,1212.6 1711.42,1212.6 1712,1212.6 1712.59,1212.6 1713.18,1212.6 1713.76,1212.6 1714.35,1212.6 1714.94,1212.6 1715.52,1212.6 1716.11,1212.6 1716.7,1212.6 1717.28,1212.6 1717.87,1212.6 1718.45,1212.6 1719.04,1212.6 1719.63,1212.6 1720.21,1212.6 1720.8,1212.6 1721.39,1212.6 1721.97,1212.6 1722.56,1212.6 1723.15,1212.6 1723.73,1212.6 1724.32,1212.6 1724.91,1212.6 1725.49,1212.6 1726.08,1212.6 1726.66,1212.6 1727.25,1212.6 1727.84,1212.6 1728.42,1212.6 1729.01,1212.6 1729.6,1212.6 1730.18,1212.6 1730.77,1212.6 1731.36,1212.6 1731.94,1212.6 1732.53,1212.6 1733.11,1212.6 1733.7,1212.6 1734.29,1212.6 1734.87,1212.6 1735.46,1212.6 1736.05,1212.6 1736.63,1212.6 1737.22,1212.6 1737.81,1212.6 1738.39,1212.6 1738.98,1212.6 1739.57,1212.6 1740.15,1212.6 1740.74,1212.6 1741.32,1212.6 1741.91,1212.6 1742.5,1212.6 1743.08,1212.6 1743.67,1212.6 1744.26,1212.6 1744.84,1212.6 1745.43,1212.6 1746.02,1212.6 1746.6,1212.6 1747.19,1212.6 1747.78,1212.6 1748.36,1212.6 1748.95,1212.6 1749.53,1212.6 1750.12,1212.6 1750.71,1212.6 1751.29,1212.6 1751.88,1212.6 1752.47,1212.6 1753.05,1212.6 1753.64,1212.6 1754.23,1212.6 1754.81,1212.6 1755.4,1212.6 1755.99,1212.6 1756.57,1212.6 1757.16,1212.6 1757.74,1212.6 1758.33,1212.6 1758.92,1212.6 1759.5,1212.6 1760.09,1212.6 1760.68,1212.6 1761.26,1212.6 1761.85,1212.6 1762.44,1212.6 1763.02,1212.6 1763.61,1212.6 1764.19,1212.6 1764.78,1212.6 1765.37,1212.6 1765.95,1212.6 1766.54,1212.6 1767.13,1212.6 1767.71,1212.6 1768.3,1212.6 1768.89,1212.6 1769.47,1212.6 1770.06,1212.6 1770.65,1212.6 1771.23,1212.6 1771.82,1212.6 1772.4,1212.6 1772.99,1212.6 1773.58,1212.6 1774.16,1212.6 1774.75,1212.6 1775.34,1212.6 1775.92,1212.6 1776.51,1212.6 1777.1,1212.6 1777.68,1212.6 1778.27,1212.6 1778.86,1212.6 1779.44,1212.6 1780.03,1212.6 1780.61,1212.6 1781.2,1212.6 1781.79,1212.6 1782.37,1212.6 1782.96,1212.6 1783.55,1212.6 1784.13,1212.6 1784.72,1212.6 1785.31,1212.6 1785.89,1212.6 1786.48,1212.6 1787.06,1212.6 1787.65,1212.6 1788.24,1212.6 1788.82,1212.6 1789.41,1212.6 1790,1212.6 1790.58,1212.6 1791.17,1212.6 1791.76,1212.6 1792.34,1212.6 1792.93,1212.6 1793.52,1212.6 1794.1,1212.6 1794.69,1212.6 1795.27,1212.6 1795.86,1212.6 1796.45,1212.6 1797.03,1212.6 1797.62,1212.6 1798.21,1212.6 1798.79,1212.6 1799.38,1212.6 1799.97,1212.6 1800.55,1212.6 1801.14,1212.6 1801.73,1212.6 1802.31,1212.6 1802.9,1212.6 1803.48,1212.6 1804.07,1212.6 1804.66,1212.6 1805.24,1212.6 1805.83,1212.6 1806.42,1212.6 1807,1212.6 1807.59,1212.6 1808.18,1212.6 1808.76,1212.6 1809.35,1212.6 1809.94,1212.6 1810.52,1212.6 1811.11,1212.6 1811.69,1212.6 1812.28,1212.6 1812.87,1212.6 1813.45,1212.6 1814.04,1212.6 1814.63,1212.6 1815.21,1212.6 1815.8,1212.6 1816.39,1212.6 1816.97,1212.6 1817.56,1212.6 1818.14,1212.6 1818.73,1212.6 1819.32,1212.6 1819.9,1212.6 1820.49,1212.6 1821.08,1212.6 1821.66,1212.6 1822.25,1212.6 1822.84,1212.6 1823.42,1212.6 1824.01,1212.6 1824.6,1212.6 1825.18,1212.6 1825.77,1212.6 1826.35,1212.6 1826.94,1212.6 1827.53,1212.6 1828.11,1212.6 1828.7,1212.6 1829.29,1212.6 1829.87,1212.6 1830.46,1212.6 1831.05,1212.6 1831.63,1212.6 1832.22,1212.6 1832.81,1212.6 1833.39,1212.6 1833.98,1212.6 1834.56,1212.6 1835.15,1212.6 1835.74,1212.6 1836.32,1212.6 1836.91,1212.6 1837.5,1212.6 1838.08,1212.6 1838.67,1212.6 1839.26,1212.6 1839.84,1212.6 1840.43,1212.6 1841.01,1212.6 1841.6,1212.6 1842.19,1212.6 1842.77,1212.6 1843.36,1212.6 1843.95,1212.6 1844.53,1212.6 1845.12,1212.6 1845.71,1212.6 1846.29,1212.6 1846.88,1212.6 1847.47,1212.6 1848.05,1212.6 1848.64,1212.6 1849.22,1212.6 1849.81,1212.6 1850.4,1212.6 1850.98,1212.6 1851.57,1212.6 1852.16,1212.6 1852.74,1212.6 1853.33,1212.6 1853.92,1212.6 1854.5,1212.6 1855.09,1212.6 1855.68,1212.6 1856.26,1212.6 1856.85,1212.6 1857.43,1212.6 1858.02,1212.6 1858.61,1212.6 1859.19,1212.6 1859.78,1212.6 1860.37,1212.6 1860.95,1212.6 1861.54,1212.6 1862.13,1212.6 1862.71,1212.6 1863.3,1212.6 1863.88,1212.6 1864.47,1212.6 1865.06,1212.6 1865.64,1212.6 1866.23,1212.6 1866.82,1212.6 1867.4,1212.6 1867.99,1212.6 1868.58,1212.6 1869.16,1212.6 1869.75,1212.6 1870.34,1212.6 1870.92,1212.6 1871.51,1212.6 1872.09,1212.6 1872.68,1212.6 1873.27,1212.6 1873.85,1212.6 1874.44,1212.6 1875.03,1212.6 1875.61,1212.6 1876.2,1212.6 1876.79,1212.6 1877.37,1212.6 1877.96,1212.6 1878.55,1212.6 1879.13,1212.6 1879.72,1212.6 1880.3,1212.6 1880.89,1212.6 1881.48,1212.6 1882.06,1212.6 1882.65,1212.6 1883.24,1212.6 1883.82,1212.6 1884.41,1212.6 1885,1212.6 1885.58,1212.6 1886.17,1212.6 1886.76,1212.6 1887.34,1212.6 1887.93,1212.6 1888.51,1212.6 1889.1,1212.6 1889.69,1212.6 1890.27,1212.6 1890.86,1212.6 1891.45,1212.6 1892.03,1212.6 1892.62,1212.6 1893.21,1212.6 1893.79,1212.6 1894.38,1212.6 1894.96,1212.6 1895.55,1212.6 1896.14,1212.6 1896.72,1212.6 1897.31,1212.6 1897.9,1212.6 1898.48,1212.6 1899.07,1212.6 1899.66,1212.6 1900.24,1212.6 1900.83,1212.6 1901.42,1212.6 1902,1212.6 1902.59,1212.6 1903.17,1212.6 1903.76,1212.6 1904.35,1212.6 1904.93,1212.6 1905.52,1212.6 1906.11,1212.6 1906.69,1212.6 1907.28,1212.6 1907.87,1212.6 1908.45,1212.6 1909.04,1212.6 1909.63,1212.6 1910.21,1212.6 1910.8,1212.6 1911.38,1212.6 1911.97,1212.6 1912.56,1212.6 1913.14,1212.6 1913.73,1212.6 1914.32,1212.6 1914.9,1212.6 1915.49,1212.6 1916.08,1212.6 1916.66,1212.6 1917.25,1212.6 1917.83,1212.6 1918.42,1212.6 1919.01,1212.6 1919.59,1212.6 1920.18,1212.6 1920.77,1212.6 1921.35,1212.6 1921.94,1212.6 1922.53,1212.6 1923.11,1212.6 1923.7,1212.6 1924.29,1212.6 1924.87,1212.6 1925.46,1212.6 1926.04,1212.6 1926.63,1212.6 1927.22,1212.6 1927.8,1212.6 1928.39,1212.6 1928.98,1212.6 1929.56,1212.6 1930.15,1212.6 1930.74,1212.6 1931.32,1212.6 1931.91,1212.6 1932.5,1212.6 1933.08,1212.6 1933.67,1212.6 1934.25,1212.6 1934.84,1212.6 1935.43,1212.6 1936.01,1212.6 1936.6,1212.6 1937.19,1212.6 1937.77,1212.6 1938.36,1212.6 1938.95,1212.6 1939.53,1212.6 1940.12,1212.6 1940.71,1212.6 1941.29,1212.6 1941.88,1212.6 1942.46,1212.6 1943.05,1212.6 1943.64,1212.6 1944.22,1212.6 1944.81,1212.6 1945.4,1212.6 1945.98,1212.6 1946.57,1212.6 1947.16,1212.6 1947.74,1212.6 1948.33,1212.6 1948.91,1212.6 1949.5,1212.6 1950.09,1212.6 1950.67,1212.6 1951.26,1212.6 1951.85,1212.6 1952.43,1212.6 1953.02,1212.6 1953.61,1212.6 1954.19,1212.6 1954.78,1212.6 1955.37,1212.6 1955.95,1212.6 1956.54,1212.6 1957.12,1212.6 1957.71,1212.6 1958.3,1212.6 1958.88,1212.6 1959.47,1212.6 1960.06,1212.6 1960.64,1212.6 1961.23,1212.6 1961.82,1212.6 1962.4,1212.6 1962.99,1212.6 1963.58,1212.6 1964.16,1212.6 1964.75,1212.6 1965.33,1212.6 1965.92,1212.6 1966.51,1212.6 1967.09,1212.6 1967.68,1212.6 1968.27,1212.6 1968.85,1212.6 1969.44,1212.6 1970.03,1212.6 1970.61,1212.6 1971.2,1212.6 1971.78,1212.6 1972.37,1212.6 1972.96,1212.6 1973.54,1212.6 1974.13,1212.6 1974.72,1212.6 1975.3,1212.6 1975.89,1212.6 1976.48,1212.6 1977.06,1212.6 1977.65,1212.6 1978.24,1212.6 1978.82,1212.6 1979.41,1212.6 1979.99,1212.6 1980.58,1212.6 1981.17,1212.6 1981.75,1212.6 1982.34,1212.6 1982.93,1212.6 1983.51,1212.6 1984.1,1212.6 1984.69,1212.6 1985.27,1212.6 1985.86,1212.6 1986.45,1212.6 1987.03,1212.6 1987.62,1212.6 1988.2,1212.6 1988.79,1212.6 1989.38,1212.6 1989.96,1212.6 1990.55,1212.6 1991.14,1212.6 1991.72,1212.6 1992.31,1212.6 1992.9,1212.6 1993.48,1212.6 1994.07,1212.6 1994.65,1212.6 1995.24,1212.6 1995.83,1212.6 1996.41,1212.6 1997,1212.6 1997.59,1212.6 1998.17,1212.6 1998.76,1212.6 1999.35,1212.6 1999.93,1212.6 2000.52,1212.6 2001.11,1212.6 2001.69,1212.6 2002.28,1212.6 2002.86,1212.6 2003.45,1212.6 2004.04,1212.6 2004.62,1212.6 2005.21,1212.6 2005.8,1212.6 2006.38,1212.6 2006.97,1212.6 2007.56,1212.6 2008.14,1212.6 2008.73,1212.6 2009.32,1212.6 2009.9,1212.6 2010.49,1212.6 2011.07,1212.6 2011.66,1212.6 2012.25,1212.6 2012.83,1212.6 2013.42,1212.6 2014.01,1212.6 2014.59,1212.6 2015.18,1212.6 2015.77,1212.6 2016.35,1212.6 2016.94,1212.6 2017.53,1212.6 2018.11,1212.6 2018.7,1212.6 2019.28,1212.6 2019.87,1212.6 2020.46,1212.6 2021.04,1212.6 2021.63,1212.6 2022.22,1212.6 2022.8,1212.6 2023.39,1212.6 2023.98,1212.6 2024.56,1212.6 2025.15,1212.6 2025.73,1212.6 2026.32,1212.6 2026.91,1212.6 2027.49,1212.6 2028.08,1212.6 2028.67,1212.6 2029.25,1212.6 2029.84,1212.6 2030.43,1212.6 2031.01,1212.6 2031.6,1212.6 2032.19,1212.6 2032.77,1212.6 2033.36,1212.6 2033.94,1212.6 2034.53,1212.6 2035.12,1212.6 2035.7,1212.6 2036.29,1212.6 2036.88,1212.6 2037.46,1212.6 2038.05,1212.6 2038.64,1212.6 2039.22,1212.6 2039.81,1212.6 2040.4,1212.6 2040.98,1212.6 2041.57,1212.6 2042.15,1212.6 2042.74,1212.6 2043.33,1212.6 2043.91,1212.6 2044.5,1212.6 2045.09,1212.6 2045.67,1212.6 2046.26,1212.6 2046.85,1212.6 2047.43,1212.6 2048.02,1212.6 2048.6,1212.6 2049.19,1212.6 2049.78,1212.6 2050.36,1212.6 2050.95,1212.6 2051.54,1212.6 2052.12,1212.6 2052.71,1212.6 2053.3,1212.6 2053.88,1212.6 2054.47,1212.6 2055.06,1212.6 2055.64,1212.6 2056.23,1212.6 2056.81,1212.6 2057.4,1212.6 2057.99,1212.6 2058.57,1212.6 2059.16,1212.6 2059.75,1212.6 2060.33,1212.6 2060.92,1212.6 2061.51,1212.6 2062.09,1212.6 2062.68,1212.6 2063.27,1212.6 2063.85,1212.6 2064.44,1212.6 2065.02,1212.6 2065.61,1212.6 2066.2,1212.6 2066.78,1212.6 2067.37,1212.6 2067.96,1212.6 2068.54,1212.6 2069.13,1212.6 2069.72,1212.6 2070.3,1212.6 2070.89,1212.6 2071.48,1212.6 2072.06,1212.6 2072.65,1212.6 2073.23,1212.6 2073.82,1212.6 2074.41,1212.6 2074.99,1212.6 2075.58,1212.6 2076.17,1212.6 2076.75,1212.6 2077.34,1212.6 2077.93,1212.6 2078.51,1212.6 2079.1,1212.6 2079.68,1212.6 2080.27,1212.6 2080.86,1212.6 2081.44,1212.6 2082.03,1212.6 2082.62,1212.6 2083.2,1212.6 2083.79,1212.6 2084.38,1212.6 2084.96,1212.6 2085.55,1212.6 2086.14,1212.6 2086.72,1212.6 2087.31,1212.6 2087.89,1212.6 2088.48,1212.6 2089.07,1212.6 2089.65,1212.6 2090.24,1212.6 2090.83,1212.6 2091.41,1212.6 2092,1212.6 2092.59,1212.6 2093.17,1212.6 2093.76,1212.6 2094.35,1212.6 2094.93,1212.6 2095.52,1212.6 2096.1,1212.6 2096.69,1212.6 2097.28,1212.6 2097.86,1212.6 2098.45,1212.6 2099.04,1212.6 2099.62,1212.6 2100.21,1212.6 2100.8,1212.6 2101.38,1212.6 2101.97,1212.6 2102.55,1212.6 2103.14,1212.6 2103.73,1212.6 2104.31,1212.6 2104.9,1212.6 2105.49,1212.6 2106.07,1212.6 2106.66,1212.6 2107.25,1212.6 2107.83,1212.6 2108.42,1212.6 2109.01,1212.6 2109.59,1212.6 2110.18,1212.6 2110.76,1212.6 2111.35,1212.6 2111.94,1212.6 2112.52,1212.6 2113.11,1212.6 2113.7,1212.6 2114.28,1212.6 2114.87,1212.6 2115.46,1212.6 2116.04,1212.6 2116.63,1212.6 2117.22,1212.6 2117.8,1212.6 2118.39,1212.6 2118.97,1212.6 2119.56,1212.6 2120.15,1212.6 2120.73,1212.6 2121.32,1212.6 2121.91,1212.6 2122.49,1212.6 2123.08,1212.6 2123.67,1212.6 2124.25,1212.6 2124.84,1212.6 2125.42,1212.6 2126.01,1212.6 2126.6,1212.6 2127.18,1212.6 2127.77,1212.6 2128.36,1212.6 2128.94,1212.6 2129.53,1212.6 2130.12,1212.6 2130.7,1212.6 2131.29,1212.6 2131.88,1212.6 2132.46,1212.6 2133.05,1212.6 2133.63,1212.6 2134.22,1212.6 2134.81,1212.6 2135.39,1212.6 2135.98,1212.6 2136.57,1212.6 2137.15,1212.6 2137.74,1212.6 2138.33,1212.6 2138.91,1212.6 2139.5,1212.6 2140.09,1212.6 2140.67,1212.6 2141.26,1212.6 2141.84,1212.6 2142.43,1212.6 2143.02,1212.6 2143.6,1212.6 2144.19,1212.6 2144.78,1212.6 2145.36,1212.6 2145.95,1212.6 2146.54,1212.6 2147.12,1212.6 2147.71,1212.6 2148.3,1212.6 2148.88,1212.6 2149.47,1212.6 2150.05,1212.6 2150.64,1212.6 2151.23,1212.6 2151.81,1212.6 2152.4,1212.6 2152.99,1212.6 2153.57,1212.6 2154.16,1212.6 2154.75,1212.6 2155.33,1212.6 2155.92,1212.6 2156.5,1212.6 2157.09,1212.6 2157.68,1212.6 2158.26,1212.6 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.85,1194.13 1399.31,899.083 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1230.44 985.439,1194.13 2158.26,1194.13 2158.26,1230.44 985.439,1230.44 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip220)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip220)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip223\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip223)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2724.3 162.673,-3876.59 163.232,-4956.32 163.792,-5967.85 164.351,-6893.87 164.91,-7737.31 165.469,-8481.05 166.029,-8056.7 166.588,-8758.25 167.147,-9381.87 167.706,-9953.56 168.266,-10466.2 168.825,-10069.8 169.384,-9740.12 169.943,-9463.26 170.503,-9870.85 171.062,-10231.7 171.621,-9953.03 172.18,-10242.9 172.74,-10494.1 173.299,-10703.9 173.858,-10876.1 174.417,-11027.8 174.977,-11160.6 175.536,-11261.5 176.095,-10969 176.655,-10689.6 177.214,-10422.1 177.773,-10445.7 178.332,-9925 178.892,-9693.5 179.451,-9708.62 180.01,-9487.29 180.569,-9280.7 181.129,-9265.34 181.688,-9060.77 182.247,-8868.03 182.806,-8686.72 183.366,-8355.68 183.925,-8181.24 184.484,-8004.41 185.043,-7822.48 185.603,-7651.04 186.162,-7608.55 186.721,-7441.23 187.28,-7267.8 187.84,-7083.63 188.399,-7013.33 188.958,-6641.41 189.517,-6577.07 190.077,-6417.29 190.636,-6250.61 191.195,-6095.41 191.754,-6019.28 192.314,-5795.73 192.873,-5642.19 193.432,-5491.19 193.991,-5345.47 194.551,-5141.3 195.11,-4949.16 195.669,-4882.59 196.228,-4804.03 196.788,-4622.58 197.347,-4485.3 197.906,-4307.26 198.465,-3989.65 199.025,-3926.61 199.584,-3810.95 200.143,-3699.52 200.702,-3501.32 201.262,-3308.92 201.821,-3211.22 202.38,-3153.25 202.939,-2892.57 203.499,-2723.39 204.058,-2598.09 204.617,-2517.85 205.176,-2359.37 205.736,-2316.83 206.295,-2234.31 206.854,-2096.84 207.413,-2022.23 207.973,-1913.9 208.532,-1845.33 209.091,-1741.35 209.65,-1702.07 210.21,-1600.23 210.769,-1561.63 211.328,-1520.6 211.887,-1449.19 212.447,-1350.75 213.006,-1314.43 213.565,-1167.69 214.124,-1056.03 214.684,-1022.39 215.243,-993.705 215.802,-906.496 216.361,-881.546 216.921,-825.608 217.48,-720.103 218.039,-671.79 218.598,-621.377 219.158,-572.704 219.717,-545.238 220.276,-494.466 220.835,-398.149 221.395,-375.698 221.954,-305.471 222.513,-237.359 223.072,-154.458 223.632,-115.647 224.191,-101.342 224.75,-82.3521 225.309,-45.6315 225.869,-31.397 226.428,8.8248 226.987,24.3428 227.546,99.2356 228.106,112.957 228.665,149.021 229.224,186.413 229.783,236.73 230.343,288.6 230.902,294.485 231.461,303.499 232.02,307.032 232.58,318.455 233.139,326.897 233.698,417.358 234.257,427.983 234.817,472.438 235.376,495.096 235.935,538.204 236.494,540.04 237.054,559.676 237.613,599.052 238.172,601.393 238.731,640.887 239.291,619.781 239.85,636.39 240.409,656.939 240.968,695.791 241.528,697.42 242.087,699.193 242.646,697.371 243.205,681.708 243.765,741.57 244.324,723.655 244.883,726.208 245.442,742.73 246.002,811.397 246.561,774.42 247.12,827.605 247.679,826.529 248.239,860.789 248.798,860.041 249.357,857.202 249.916,856.317 250.476,853.281 251.035,851.207 251.594,882.952 252.153,879.626 252.713,894.394 253.272,924.94 253.831,936.768 254.39,930.267 254.95,962.499 255.509,954.537 256.068,950.622 256.627,929.679 257.187,929.759 257.746,945.652 258.305,955.843 258.864,966.673 259.424,965.688 259.983,978.036 260.542,1003.6 261.101,980.766 261.661,974.745 262.22,954.076 262.779,986.284 263.338,982.407 263.898,959.223 264.457,955.922 265.016,951.022 265.575,978.864 266.135,961.406 266.694,973.95 267.253,969.506 267.812,969.057 268.372,998.207 268.931,1047.9 269.49,1041.7 270.049,1053.01 270.609,1075.64 271.168,1081.92 271.727,1072.33 272.286,1064.43 272.846,1087.85 273.405,1026.72 273.964,1084.73 274.523,1074.38 275.083,1086.48 275.642,1092.93 276.201,1081.52 276.76,1089.75 277.32,1078.42 277.879,1100.83 278.438,1123.42 278.997,1140.78 279.557,1129.36 280.116,1099.39 280.675,1106.71 281.234,1096.49 281.794,1054.91 282.353,1048.21 282.912,1022.22 283.471,1013.41 284.031,1057.73 284.59,1048.88 285.149,1059.13 285.708,1001.11 286.268,979.421 286.827,992.016 287.386,1019.47 287.945,996.756 288.505,989.62 289.064,984.202 289.623,980.84 290.182,975.717 290.742,973.211 291.301,969.879 291.86,918.239 292.419,948.42 292.979,978.263 293.538,1005.25 294.097,1000.5 294.656,1025.73 295.216,1020.04 295.775,1014.88 296.334,991.491 296.893,953.614 297.453,965.831 298.012,963.97 298.571,979.664 299.13,1005.66 299.69,982.968 300.249,976.48 300.808,973.312 301.368,986.731 301.927,982.398 302.486,962.243 303.045,959.158 303.605,955.702 304.164,946.409 304.723,927.848 305.282,921.729 305.842,889.739 306.401,871.434 306.96,871.342 307.519,901.31 308.079,933.459 308.638,930.813 309.197,930.146 309.756,945.629 310.316,956.269 310.875,968.594 311.434,915.641 311.993,929.553 312.553,879.275 313.112,864.133 313.671,845.13 314.23,865.584 314.79,865.498 315.349,899.744 315.908,914.154 316.467,912.794 317.027,891.69 317.586,889.923 318.145,885.691 318.704,917.059 319.264,913.144 319.823,893.712 320.382,892.153 320.941,922.419 321.501,903.82 322.06,901.482 322.619,882.038 323.178,911.307 323.738,909.248 324.297,907.512 324.856,919.583 325.415,915.033 325.975,927.465 326.534,908.199 327.093,904.449 327.652,934.954 328.212,961.433 328.771,957.278 329.33,969.124 329.889,947.901 330.449,957.011 331.008,949.997 331.567,950.2 332.126,959.71 332.686,953.231 333.245,965.498 333.804,983.414 334.363,958.859 334.923,936.121 335.482,974.781 336.041,986.099 336.6,946.095 337.16,954.136 337.719,964.733 338.278,955.43 338.837,930.358 339.397,930.069 339.956,924.181 340.515,924.94 341.074,871.676 341.634,884.151 342.193,914.883 342.752,928.259 343.311,955.305 343.871,963.357 344.43,939.374 344.989,917.397 345.548,908.412 346.108,902.041 346.667,915.644 347.226,879.972 347.785,879.557 348.345,859.785 348.904,825.408 349.463,824.873 350.022,858.641 350.582,935.407 351.141,942.287 351.7,916.723 352.259,943.439 352.819,935.207 353.378,927.875 353.937,919.411 354.496,929.388 355.056,891.242 355.615,887.787 356.174,867.364 356.733,864.592 357.293,872.711 357.852,870.608 358.411,866.315 358.97,860.822 359.53,888.326 360.089,886.088 360.648,899.252 361.207,909.674 361.767,890.715 362.326,869.568 362.885,867.572 363.444,850.713 364.004,868.033 364.563,881.517 365.122,912.267 365.681,921.874 366.241,864.05 366.8,844.714 367.359,845.489 367.918,844.932 368.478,857.176 369.037,857.809 369.596,853.957 370.155,856.172 370.715,836.694 371.274,868.283 371.833,882.317 372.392,910.547 372.952,890.648 373.511,884.313 374.07,930.496 374.629,939.754 375.189,963.235 375.748,970.208 376.307,961.682 376.866,956.387 377.426,947.018 377.985,938.744 378.544,936.12 379.103,928.166 379.663,889.334 380.222,884.657 380.781,897.627 381.34,939.329 381.9,945.869 382.459,939.34 383.018,982.565 383.577,957.125 384.137,931.725 384.696,955.423 385.255,981.802 385.814,956.065 386.374,962.696 386.933,940.951 387.492,948.305 388.051,955.146 388.611,946.884 389.17,955.913 389.729,961.921 390.288,953.696 390.848,959.877 391.407,949.381 391.966,910.849 392.525,901.409 393.085,881.67 393.644,825.428 394.203,819.619 394.762,835.038 395.322,830.73 395.881,843.116 396.44,840.199 396.999,817.455 397.559,814.726 398.118,794.893 398.677,778.241 399.236,808.163 399.796,822.145 400.355,804.588 400.914,786.779 401.473,791.006 402.033,792.224 402.592,810.539 403.151,805.75 403.71,823.737 404.27,835.914 404.829,814.751 405.388,764.589 405.947,767.313 406.507,784.997 407.066,784.303 407.625,796.65 408.184,796.14 408.744,793.831 409.303,761.184 409.862,775.222 410.421,854.651 410.981,850.339 411.54,846.514 412.099,859.067 412.658,838.091 413.218,788.306 413.777,775.011 414.336,775.383 414.895,755.141 415.455,770.773 416.014,755.253 416.573,757.238 417.132,789.539 417.692,788.838 418.251,790.415 418.81,791.277 419.369,807.104 419.929,821.156 420.488,799.01 421.047,781.514 421.606,764.69 422.166,798.214 422.725,810.417 423.284,821.845 423.843,766.67 424.403,767.243 424.962,779.802 425.521,797.135 426.08,809.159 426.64,805.95 427.199,787.052 427.758,805.452 428.318,834.891 428.877,832.419 429.436,829.651 429.995,827.755 430.555,822.333 431.114,818.74 431.673,814.683 432.232,810.106 432.792,792.201 433.351,806.031 433.91,753.611 434.469,768.913 435.029,773.289 435.588,738.952 436.147,756.56 436.706,754.089 437.266,787.119 437.825,751.419 438.384,764.87 438.943,752.249 439.503,749.624 440.062,766.506 440.621,769.035 441.18,750.529 441.74,750.614 442.299,765.676 442.858,779.396 443.417,792.693 443.977,771.382 444.536,768.296 445.095,753.342 445.654,818.869 446.214,815.067 446.773,814.72 447.332,831.825 447.891,829.546 448.451,793.317 449.01,774.176 449.569,791.963 450.128,754.729 450.688,736.131 451.247,751.995 451.806,752.456 452.365,733.214 452.925,703.542 453.484,705.574 454.043,691.384 454.602,714.525 455.162,700.87 455.721,688.493 456.28,693.601 456.839,679.321 457.399,701.07 457.958,619.893 458.517,610.352 459.076,599.791 459.636,605.696 460.195,612.73 460.754,652.797 461.313,662.516 461.873,699.209 462.432,734.109 462.991,751.734 463.55,752.637 464.11,784.305 464.669,798.561 465.228,813.093 465.787,811.047 466.347,820.273 466.906,815.06 467.465,760.987 468.024,777.183 468.584,763.117 469.143,776.118 469.702,738.489 470.261,738.567 470.821,738.214 471.38,722.022 471.939,772.397 472.498,800.237 473.058,846.384 473.617,859.34 474.176,855.072 474.735,848.811 475.295,840.076 475.854,836.115 476.413,813.319 476.972,808.497 477.532,804.082 478.091,783.638 478.65,765.655 479.209,714.659 479.769,700.764 480.328,721.644 480.887,736.893 481.446,734.954 482.006,753.405 482.565,768.485 483.124,783.992 483.683,798.128 484.243,761.103 484.802,778.262 485.361,809.756 485.92,788.761 486.48,754.145 487.039,736.732 487.598,769.643 488.157,782.866 488.717,765.526 489.276,763.853 489.835,794.621 490.394,775.801 490.954,772.65 491.513,753.841 492.072,784.097 492.631,794.952 493.191,794.185 493.75,790.188 494.309,803.678 494.868,769.799 495.428,733.513 495.987,764.789 496.546,761.153 497.105,759.561 497.665,759.873 498.224,792.984 498.783,790.309 499.342,835.828 499.902,784.898 500.461,764.728 501.02,762.438 501.579,775.218 502.139,740.559 502.698,723.489 503.257,718.575 503.816,720.44 504.376,720.13 504.935,736.671 505.494,755.675 506.053,738.875 506.613,740.386 507.172,756.662 507.731,786.648 508.29,800.099 508.85,795.931 509.409,773.706 509.968,753.565 510.527,736.474 511.087,685.897 511.646,685.745 512.205,702.174 512.764,688.167 513.324,689.051 513.883,659.53 514.442,682.187 515.001,653.838 515.561,655.774 516.12,675.343 516.679,648.153 517.238,636.87 517.798,644.16 518.357,627.569 518.916,648.628 519.475,636.808 520.035,626.199 520.594,599.592 521.153,622.346 521.712,611.905 522.272,621.037 522.831,610.599 523.39,649.907 523.949,669.264 524.509,704.738 525.068,660.505 525.627,662.248 526.186,666.046 526.746,670.366 527.305,706.674 527.864,708.396 528.423,725.558 528.983,723.336 529.542,705.816 530.101,707.329 530.66,710.451 531.22,725.136 531.779,710.733 532.338,726.974 532.897,744.012 533.457,712.445 534.016,728.554 534.575,760.593 535.134,738.422 535.694,721.371 536.253,707.055 536.812,740.668 537.371,721.842 537.931,721.049 538.49,736.079 539.049,734.795 539.608,702.124 540.168,689.755 540.727,678.477 541.286,695.387 541.845,695.853 542.405,699.365 542.964,682.09 543.523,715.951 544.082,718.42 544.642,685.264 545.201,685.661 545.76,719.481 546.319,717.369 546.879,703.218 547.438,686.354 547.997,686.94 548.556,706.077 549.116,721.703 549.675,739.306 550.234,706.579 550.793,740.688 551.353,691.99 551.912,712.375 552.471,762.456 553.031,758.457 553.59,736.001 554.149,750.538 554.708,767.383 555.268,748.738 555.827,746.802 556.386,730.341 556.945,729.426 557.505,713.97 558.064,714.675 558.623,714.829 559.182,715.841 559.742,714.708 560.301,728.713 560.86,693.865 561.419,677.625 561.979,694.916 562.538,664.92 563.097,667.231 563.656,683.829 564.216,637.022 564.775,647.421 565.334,619.026 565.893,657.782 566.453,662.022 567.012,680.884 567.571,667.093 568.13,685.267 568.69,671.859 569.249,675.27 569.808,679.254 570.367,729.043 570.927,760.013 571.486,758.583 572.045,756.018 572.604,771.51 573.164,767.034 573.723,732.176 574.282,765.298 574.841,778.851 575.401,773.914 575.96,754.422 576.519,783.633 577.078,780.142 577.638,777.551 578.197,785.652 578.756,746.44 579.315,728.62 579.875,728.823 580.434,710.877 580.993,709.339 581.552,710.021 582.112,707.808 582.671,723.087 583.23,722.418 583.789,737.788 584.349,718.243 584.908,765.812 585.467,761.573 586.026,772.816 586.586,774.193 587.145,789.197 587.704,803.1 588.263,779.682 588.823,776.161 589.382,789.264 589.941,818.251 590.5,781.702 591.06,792.753 591.619,822.846 592.178,848.677 592.737,758.303 593.297,755.705 593.856,752.01 594.415,748.045 594.974,714.465 595.534,727.972 596.093,758.313 596.652,769.887 597.211,764.421 597.771,760.717 598.33,807.878 598.889,756.549 599.448,739.56 600.008,768.714 600.567,765.565 601.126,710.815 601.685,693.871 602.245,696.52 602.804,713.299 603.363,712.132 603.922,712.571 604.482,713.55 605.041,707.146 605.6,723.272 606.159,721.601 606.719,688.831 607.278,675.82 607.837,695.008 608.396,694.61 608.956,664.85 609.515,635.829 610.074,623.336 610.633,629.467 611.193,603.101 611.752,574.998 612.311,583.258 612.87,569.83 613.43,574.059 613.989,580.963 614.548,585.794 615.107,608.772 615.667,611.1 616.226,600.221 616.785,624.657 617.344,629.136 617.904,651.286 618.463,652.972 619.022,673.117 619.581,690.576 620.141,709.461 620.7,739.753 621.259,755.145 621.818,750.472 622.378,714.063 622.937,732.914 623.496,729.663 624.055,729.007 624.615,729.047 625.174,712.48 625.733,730.749 626.292,731.724 626.852,763.332 627.411,796.304 627.97,806.179 628.529,834.507 629.089,791.21 629.648,802.81 630.207,797.1 630.766,788.417 631.326,800.111 631.885,811.145 632.444,784.607 633.003,782.729 633.563,759.404 634.122,757.037 634.681,754.755 635.24,717.025 635.8,717.727 636.359,732.245 636.918,761.742 637.477,792.093 638.037,785.627 638.596,784.613 639.155,778.299 639.714,789.772 640.274,797.55 640.833,759.41 641.392,753.789 641.951,753.618 642.511,735.577 643.07,766.524 643.629,761.935 644.188,740.714 644.748,734.954 645.307,734.058 645.866,713.647 646.425,715.068 646.985,712.775 647.544,713.457 648.103,700.357 648.662,684.178 649.222,684.867 649.781,685.787 650.34,651.922 650.899,686.14 651.459,668.118 652.018,683.945 652.577,701.037 653.136,683.573 653.696,668.372 654.255,686.57 654.814,654.163 655.373,622.44 655.933,626.815 656.492,611.373 657.051,616.682 657.61,623.735 658.17,608.989 658.729,582.051 659.288,558.075 659.847,598.46 660.407,604.205 660.966,608.78 661.525,628.405 662.084,646.875 662.644,648.118 663.203,680.313 663.762,677.682 664.321,695.274 664.881,697.272 665.44,714.717 665.999,686.184 666.558,686.822 667.118,703.264 667.677,700.655 668.236,685.262 668.795,701.583 669.355,715.908 669.914,698.662 670.473,687.236 671.032,704.397 671.592,686.464 672.151,705.118 672.71,702.398 673.269,719.697 673.829,705.97 674.388,689.462 674.947,688.979 675.506,692.458 676.066,708.889 676.625,709.939 677.184,708.258 677.743,739.636 678.303,738.31 678.862,739.25 679.421,702.466 679.981,703.869 680.54,719.712 681.099,716.003 681.658,730.951 682.218,661.277 682.777,597.478 683.336,600.301 683.895,617.606 684.455,638.905 685.014,676.905 685.573,631.225 686.132,651.706 686.692,669.638 687.251,674.759 687.81,678.487 688.369,676.742 688.929,741.235 689.488,768.945 690.047,750.182 690.606,732.344 691.166,746.413 691.725,741.409 692.284,751.866 692.843,715.549 693.403,715.499 693.962,679.884 694.521,711.048 695.08,727.245 695.64,722.617 696.199,736.41 696.758,715.744 697.317,728.966 697.877,742.058 698.436,721.988 698.995,721.633 699.554,702.259 700.114,713.939 700.673,744.646 701.232,727.298 701.791,743.625 702.351,743.208 702.91,754.51 703.469,752.984 704.028,763.236 704.588,762.419 705.147,760.785 705.706,757.536 706.265,739.059 706.825,735.674 707.384,745.879 707.943,760.225 708.502,754.266 709.062,749.899 709.621,715.316 710.18,729.683 710.739,729.111 711.299,743.383 711.858,723.457 712.417,738.332 712.976,700.621 713.536,732.718 714.095,750.466 714.654,731.285 715.213,734.128 715.773,765.942 716.332,761.469 716.891,740.278 717.45,721.927 718.01,752.07 718.569,711.486 719.128,693.336 719.687,691.754 720.247,740.15 720.806,753.731 721.365,764.603 721.924,761.99 722.484,757.758 723.043,742.186 723.602,706.197 724.161,708.34 724.721,741.716 725.28,708.274 725.839,691.702 726.398,677.546 726.958,662.884 727.517,645.831 728.076,648.095 728.635,617.868 729.195,637.917 729.754,639.194 730.313,625.446 730.872,623.953 731.432,625.46 731.991,612.007 732.55,615.008 733.109,634.192 733.669,671.551 734.228,723.119 734.787,689.202 735.346,703.648 735.906,687.968 736.465,719.944 737.024,716.122 737.583,732.25 738.143,713.075 738.702,711.514 739.261,678.894 739.82,681.479 740.38,713.413 740.939,710.298 741.498,725.711 742.057,723.385 742.617,723.276 743.176,706.324 743.735,672.504 744.294,687.416 744.854,670.527 745.413,655.802 745.972,663.901 746.531,684.44 747.091,685.146 747.65,703.128 748.209,673.087 748.768,725.411 749.328,708.548 749.887,721.49 750.446,722.539 751.005,720.794 751.565,738.665 752.124,719.875 752.683,718.546 753.242,716.494 753.802,731.109 754.361,745.846 754.92,780.897 755.479,743.701 756.039,771.076 756.598,767.069 757.157,714.202 757.716,715.101 758.276,698.157 758.835,680.312 759.394,662.469 759.953,694.75 760.513,694.766 761.072,661.95 761.631,697.325 762.19,684.8 762.75,683.761 763.309,700.933 763.868,703.611 764.427,673.108 764.987,672.994 765.546,674.919 766.105,704.145 766.664,686.451 767.224,671.301 767.783,684.738 768.342,684.522 768.901,684.306 769.461,665.174 770.02,686.418 770.579,701.988 771.138,717.227 771.698,732.87 772.257,713.228 772.816,712.934 773.375,732.375 773.935,681.39 774.494,681.972 775.053,714.959 775.612,711.606 776.172,692.084 776.731,726.116 777.29,740.89 777.849,772.194 778.409,734.998 778.968,733.353 779.527,759.962 780.086,772.686 780.646,784.988 781.205,764.042 781.764,725.786 782.323,725.095 782.883,688.512 783.442,702.547 784.001,686.989 784.56,655.247 785.12,690.749 785.679,706.618 786.238,672.121 786.797,709.371 787.357,723.479 787.916,687.909 788.475,658.285 789.034,675.414 789.594,693.887 790.153,738.989 790.712,735.083 791.271,731.452 791.831,729.866 792.39,729.603 792.949,712.176 793.508,727.275 794.068,744.884 794.627,723.178 795.186,721.338 795.745,704.349 796.305,703.508 796.864,701.142 797.423,682.132 797.982,665.9 798.542,682.12 799.101,682.499 799.66,668.649 800.219,669.132 800.779,670.345 801.338,671.815 801.897,674.91 802.456,643.142 803.016,642.233 803.575,661.112 804.134,664.444 804.693,632.837 805.253,668.937 805.812,700.62 806.371,700.844 806.931,683.166 807.49,697.175 808.049,693.676 808.608,713.301 809.168,728.47 809.727,728.078 810.286,741.206 810.845,755.886 811.405,735.418 811.964,735.871 812.523,764.621 813.082,743.837 813.642,726.08 814.201,723.444 814.76,703.424 815.319,734.397 815.879,732.079 816.438,748.485 816.997,716.555 817.556,713.903 818.116,729.485 818.675,727.476 819.234,726.38 819.793,713.602 820.353,711.741 820.912,712.191 821.471,694.913 822.03,724.871 822.59,690.831 823.149,704.826 823.708,691.62 824.267,691.46 824.827,673.618 825.386,690.529 825.945,690.996 826.504,708.234 827.064,691.111 827.623,690.867 828.182,707.86 828.741,719.804 829.301,734.357 829.86,732.698 830.419,731.432 830.978,713.766 831.538,711.897 832.097,697.966 832.656,732.795 833.215,713.155 833.775,694.99 834.334,707.369 834.893,706.406 835.452,702.878 836.012,653.355 836.571,642.183 837.13,663.014 837.689,647.088 838.249,620.185 838.808,624.893 839.367,641.977 839.926,658.353 840.486,660.316 841.045,662.622 841.604,713.543 842.163,728.312 842.723,742.485 843.282,738.239 843.841,768.528 844.4,750.882 844.96,762.267 845.519,753.881 846.078,718.268 846.637,667.258 847.197,731.993 847.756,778.883 848.315,743.578 848.874,737.285 849.434,690.439 849.993,671.848 850.552,676.632 851.111,678.6 851.671,679.373 852.23,650.338 852.789,616.384 853.348,618.044 853.908,589.194 854.467,659.122 855.026,674.837 855.585,708.214 856.145,708.58 856.704,729.014 857.263,743.455 857.822,743.556 858.382,742.853 858.941,709.689 859.5,708.224 860.059,689.601 860.619,662.449 861.178,666.224 861.737,683.464 862.296,683.56 862.856,686.021 863.415,669.051 863.974,655.391 864.533,656.442 865.093,626.74 865.652,645.264 866.211,667.317 866.77,670.37 867.33,671.567 867.889,675.058 868.448,645.656 869.007,680.002 869.567,694.889 870.126,726.064 870.685,739.022 871.244,755.411 871.804,751.74 872.363,764.887 872.922,808.895 873.481,805.711 874.041,781.95 874.6,760.531 875.159,740.599 875.718,705.567 876.278,705.384 876.837,703.216 877.396,703.576 877.955,686.607 878.515,669.839 879.074,637.076 879.633,641.203 880.192,629.095 880.752,630.862 881.311,650.25 881.87,620.545 882.429,640.865 882.989,662.114 883.548,663.599 884.107,681.712 884.666,666.8 885.226,682.421 885.785,603.6 886.344,590.824 886.903,582.835 887.463,590.957 888.022,602.203 888.581,654.926 889.14,610.011 889.7,613.784 890.259,589.907 890.818,610.701 891.377,553.286 891.937,556.066 892.496,562.692 893.055,534.538 893.614,545.972 894.174,550.801 894.733,527.874 895.292,536.856 895.851,530.166 896.411,539.016 896.97,562.835 897.529,599.932 898.088,637.816 898.648,627.654 899.207,646.611 899.766,646.335 900.325,632.452 900.885,621.388 901.444,641.632 902.003,642.149 902.562,630.349 903.122,583.385 903.681,588.557 904.24,595.323 904.799,602.744 905.359,590.816 905.918,626.163 906.477,632.54 907.036,653.602 907.596,660.307 908.155,722.248 908.714,705.021 909.273,704.997 909.833,705.799 910.392,736.114 910.951,716.731 911.51,671.454 912.07,671.3 912.629,688.998 913.188,692.18 913.747,705.851 914.307,723.975 914.866,705.075 915.425,721.547 915.984,718.11 916.544,695.986 917.103,710.419 917.662,661.002 918.221,616.102 918.781,620.389 919.34,603.993 919.899,593.876 920.458,581.213 921.018,585.838 921.577,622.086 922.136,625.758 922.695,647.745 923.255,653.279 923.814,657.816 924.373,677.331 924.932,677.631 925.492,674.192 926.051,661.068 926.61,679.564 927.169,691.739 927.729,705.328 928.288,707.503 928.847,687.109 929.406,703.664 929.966,754.662 930.525,754.178 931.084,765.382 931.644,760.198 932.203,737.791 932.762,719.656 933.321,700.75 933.881,684.585 934.44,702.508 934.999,702.056 935.558,732.288 936.118,701.292 936.677,683.653 937.236,717.048 937.795,699.457 938.355,729.419 938.914,730.403 939.473,744.313 940.032,758.006 940.592,720.776 941.151,720.213 941.71,767.865 942.269,746.91 942.829,740.017 943.388,738.327 943.947,719.652 944.506,735.276 945.066,730.824 945.625,727.52 946.184,739.836 946.743,734.613 947.303,715.777 947.862,683.711 948.421,683.031 948.98,678.619 949.54,694.012 950.099,676.144 950.658,679.061 951.217,695.658 951.777,711.195 952.336,658.069 952.895,664.427 953.454,682.025 954.014,683.093 954.573,667.212 955.132,669.902 955.691,670.207 956.251,671.626 956.81,674.818 957.369,659.458 957.928,663.237 958.488,648.607 959.047,650.542 959.606,650.022 960.165,665.495 960.725,647.143 961.284,645.514 961.843,649.003 962.402,652.587 962.962,669.429 963.521,685.75 964.08,668.816 964.639,671.609 965.199,689.491 965.758,692.764 966.317,694.769 966.876,677.012 967.436,659.597 967.995,611.847 968.554,598.812 969.113,587.813 969.673,593.602 970.232,595.385 970.791,588.009 971.35,578.9 971.91,615.487 972.469,619.012 973.028,605.934 973.587,596.427 974.147,604.969 974.706,631.882 975.265,634.629 975.824,640.03 976.384,642.488 976.943,645.638 977.502,660.429 978.061,644.551 978.621,676.193 979.18,723.037 979.739,720.951 980.298,751.504 980.858,747.291 981.417,765.747 981.976,812.322 982.535,791.312 983.095,787.694 983.654,781.292 984.213,789.923 984.772,781.59 985.332,743.884 985.891,773.093 986.45,767.196 987.009,745.03 987.569,771.11 988.128,812.859 988.687,804.382 989.246,832.216 989.806,806.633 990.365,767.006 990.924,745.568 991.483,759.021 992.043,804.102 992.602,779.886 993.161,778.22 993.72,790.223 994.28,815.667 994.839,828.462 995.398,821.982 995.957,815.071 996.517,776.538 997.076,772.336 997.635,761.898 998.194,724.544 998.754,736.308 999.313,733.09 999.872,713.79 1000.43,712.231 1000.99,713.155 1001.55,774.717 1002.11,789.101 1002.67,752.797 1003.23,748.94 1003.79,678.892 1004.35,646.852 1004.91,615.504 1005.46,616.195 1006.02,618.306 1006.58,572.43 1007.14,595.714 1007.7,631.567 1008.26,631.763 1008.82,616.119 1009.38,621.534 1009.94,624.066 1010.5,596.34 1011.06,565.992 1011.62,568.707 1012.18,576.905 1012.73,568.172 1013.29,557.943 1013.85,534.363 1014.41,543.041 1014.97,553.754 1015.53,562.939 1016.09,533.451 1016.65,557.496 1017.21,581.138 1017.77,589.141 1018.33,579.193 1018.89,601.786 1019.45,637.738 1020.01,654.651 1020.56,605.959 1021.12,595.812 1021.68,601.498 1022.24,607.441 1022.8,581.097 1023.36,587.67 1023.92,625.016 1024.48,583.283 1025.04,606.386 1025.6,643.866 1026.16,645.356 1026.72,632.039 1027.28,635.618 1027.83,619.935 1028.39,623.814 1028.95,656.291 1029.51,625.762 1030.07,662.039 1030.63,694.641 1031.19,728.448 1031.75,727.488 1032.31,740.323 1032.87,739.657 1033.43,753.119 1033.99,747.85 1034.55,763.481 1035.1,774.163 1035.66,740.621 1036.22,716.933 1036.78,712.793 1037.34,759.881 1037.9,773.111 1038.46,770.277 1039.02,802.932 1039.58,728.64 1040.14,742.303 1040.7,708.149 1041.26,708.643 1041.82,705.525 1042.38,687.053 1042.93,689.259 1043.49,705.584 1044.05,719.714 1044.61,718.44 1045.17,696.992 1045.73,679.498 1046.29,680.247 1046.85,695.935 1047.41,692.429 1047.97,724.547 1048.53,725.25 1049.09,757.137 1049.65,785.226 1050.2,765.795 1050.76,762.266 1051.32,758.197 1051.88,772.819 1052.44,752.216 1053,762.835 1053.56,742.056 1054.12,770.534 1054.68,813.34 1055.24,856.25 1055.8,803.829 1056.36,814.651 1056.92,808.496 1057.48,788.798 1058.03,784.7 1058.59,796.326 1059.15,789.849 1059.71,768.983 1060.27,767.462 1060.83,763.122 1061.39,758.238 1061.95,771.104 1062.51,734.068 1063.07,743.87 1063.63,722.62 1064.19,688.876 1064.75,739.27 1065.3,739.225 1065.86,750.326 1066.42,749.564 1066.98,730.75 1067.54,706.313 1068.1,690.763 1068.66,674.291 1069.22,690.273 1069.78,687.575 1070.34,704.923 1070.9,706.207 1071.46,690.555 1072.02,692.082 1072.57,644.245 1073.13,661 1073.69,661.357 1074.25,680.262 1074.81,663.253 1075.37,676.042 1075.93,678.627 1076.49,695.852 1077.05,678.245 1077.61,694.562 1078.17,693.354 1078.73,709.48 1079.29,691.69 1079.85,644.232 1080.4,646.882 1080.96,643.905 1081.52,632.388 1082.08,636.323 1082.64,643.297 1083.2,648.218 1083.76,650.323 1084.32,605.596 1084.88,595.634 1085.44,616.972 1086,637.464 1086.56,639.537 1087.12,705.722 1087.67,669.933 1088.23,706.435 1088.79,705.279 1089.35,686.234 1089.91,671.689 1090.47,673.268 1091.03,671.035 1091.59,687.487 1092.15,701.834 1092.71,734.531 1093.27,734.236 1093.83,700.598 1094.39,696.917 1094.94,698.966 1095.5,680.499 1096.06,695.2 1096.62,698.241 1097.18,695.758 1097.74,710.974 1098.3,695.233 1098.86,695.954 1099.42,679.32 1099.98,710.194 1100.54,694.735 1101.1,692.352 1101.66,694.92 1102.22,662.695 1102.77,695.699 1103.33,676.547 1103.89,679.092 1104.45,695.866 1105.01,696.058 1105.57,711.377 1106.13,726.365 1106.69,739.833 1107.25,717.974 1107.81,696.829 1108.37,680.736 1108.93,710.263 1109.49,726.053 1110.04,689.375 1110.6,707.008 1111.16,703.364 1111.72,697.883 1112.28,645.673 1112.84,666.392 1113.4,650.956 1113.96,665.772 1114.52,663.098 1115.08,647.269 1115.64,678.148 1116.2,649.913 1116.76,650.289 1117.31,635.592 1117.87,605.006 1118.43,594.331 1118.99,612.344 1119.55,567.078 1120.11,574.278 1120.67,579.32 1121.23,568.654 1121.79,590.736 1122.35,581.341 1122.91,617.649 1123.47,625.948 1124.03,609.607 1124.59,611.698 1125.14,650.198 1125.7,649.835 1126.26,651.494 1126.82,651.645 1127.38,669.709 1127.94,653.447 1128.5,685.87 1129.06,700.954 1129.62,683.663 1130.18,700.881 1130.74,700.953 1131.3,665.645 1131.86,699.984 1132.41,696.713 1132.97,696.635 1133.53,679.619 1134.09,730.75 1134.65,730.253 1135.21,741.882 1135.77,771.999 1136.33,802.159 1136.89,798.966 1137.45,778.101 1138.01,769.719 1138.57,769.209 1139.13,745.009 1139.68,758.097 1140.24,722.766 1140.8,738.606 1141.36,704.883 1141.92,654.296 1142.48,640.895 1143.04,662.114 1143.6,665.576 1144.16,664.807 1144.72,649.829 1145.28,638.362 1145.84,654.422 1146.4,657.511 1146.96,675.652 1147.51,643.859 1148.07,633.737 1148.63,637.723 1149.19,639.42 1149.75,640.414 1150.31,655.652 1150.87,656.03 1151.43,658.222 1151.99,660.487 1152.55,647.097 1153.11,635.445 1153.67,670.518 1154.23,657.806 1154.78,659.746 1155.34,707.284 1155.9,707.327 1156.46,726.823 1157.02,712.927 1157.58,713.091 1158.14,712.237 1158.7,696.429 1159.26,695.049 1159.82,696.163 1160.38,697.579 1160.94,699.598 1161.5,663.144 1162.05,633.296 1162.61,684.123 1163.17,687.742 1163.73,691.475 1164.29,672.219 1164.85,687.954 1165.41,739.444 1165.97,772.868 1166.53,768.633 1167.09,764.568 1167.65,760.242 1168.21,757.138 1168.77,754.875 1169.33,755.176 1169.88,733.399 1170.44,698.735 1171,668.025 1171.56,684.879 1172.12,703.691 1172.68,700.143 1173.24,683.316 1173.8,671.648 1174.36,706.068 1174.92,725.223 1175.48,736.533 1176.04,769.2 1176.6,777.824 1177.15,787.883 1177.71,795.504 1178.27,789.213 1178.83,767.72 1179.39,764.594 1179.95,773.287 1180.51,755.977 1181.07,736.345 1181.63,718.749 1182.19,719.208 1182.75,748.195 1183.31,761.567 1183.87,706.708 1184.43,704.76 1184.98,703.907 1185.54,736.074 1186.1,702.543 1186.66,669.463 1187.22,684.898 1187.78,685.533 1188.34,686.735 1188.9,668.101 1189.46,669.895 1190.02,688.179 1190.58,707.994 1191.14,691.431 1191.7,690.82 1192.25,689.808 1192.81,672.191 1193.37,671.857 1193.93,657.583 1194.49,640.198 1195.05,662.351 1195.61,680.242 1196.17,678.578 1196.73,677.801 1197.29,643.169 1197.85,628.481 1198.41,615.06 1198.97,617.916 1199.52,603.325 1200.08,592.306 1200.64,584.372 1201.2,590.799 1201.76,626.701 1202.32,615.871 1202.88,619.467 1203.44,641.294 1204,657.633 1204.56,659.05 1205.12,645.135 1205.68,663.564 1206.24,682.45 1206.8,648.881 1207.35,648.71 1207.91,651.203 1208.47,670.999 1209.03,689.027 1209.59,721.144 1210.15,720.308 1210.71,752.343 1211.27,668.295 1211.83,687.409 1212.39,685.968 1212.95,717.65 1213.51,697.373 1214.07,710.969 1214.62,706.474 1215.18,718.964 1215.74,718.091 1216.3,731.461 1216.86,761.804 1217.42,758.542 1217.98,740.126 1218.54,738.106 1219.1,701.83 1219.66,685.275 1220.22,669.205 1220.78,636.128 1221.34,652.582 1221.89,637.211 1222.45,638.755 1223.01,641.71 1223.57,628.085 1224.13,632.868 1224.69,635.434 1225.25,638.597 1225.81,625.08 1226.37,661.321 1226.93,662.191 1227.49,693.978 1228.05,691.489 1228.61,658.365 1229.17,644.943 1229.72,666.753 1230.28,639.374 1230.84,641.812 1231.4,631.739 1231.96,618.421 1232.52,618.911 1233.08,619.175 1233.64,655.692 1234.2,656.835 1234.76,655.441 1235.32,703.55 1235.88,635.367 1236.44,620.731 1236.99,609.12 1237.55,641.805 1238.11,612.09 1238.67,600.088 1239.23,601.961 1239.79,606.298 1240.35,594.961 1240.91,615.932 1241.47,672.698 1242.03,690.767 1242.59,689.507 1243.15,655.845 1243.71,659.026 1244.26,645.307 1244.82,632.672 1245.38,632.705 1245.94,635.606 1246.5,654.11 1247.06,674.458 1247.62,673.99 1248.18,675.472 1248.74,675.543 1249.3,677.615 1249.86,661.409 1250.42,681.341 1250.98,731.585 1251.54,712.419 1252.09,725.898 1252.65,755.491 1253.21,753.295 1253.77,768.67 1254.33,763.693 1254.89,776.737 1255.45,785.105 1256.01,777.39 1256.57,772.601 1257.13,780.415 1257.69,773.753 1258.25,798.201 1258.81,774.012 1259.36,753.462 1259.92,735.804 1260.48,734.079 1261.04,715.205 1261.6,647.575 1262.16,647.116 1262.72,696.39 1263.28,710.779 1263.84,725.188 1264.4,741.204 1264.96,755.991 1265.52,722.639 1266.08,737.726 1266.63,733.502 1267.19,711.666 1267.75,744.234 1268.31,756.113 1268.87,721.246 1269.43,685.426 1269.99,735.065 1270.55,750.317 1271.11,718.721 1271.67,735.647 1272.23,734.957 1272.79,731.125 1273.35,726.494 1273.91,771.63 1274.46,749.192 1275.02,778.325 1275.58,788.423 1276.14,794.002 1276.7,719.883 1277.26,714.909 1277.82,711.659 1278.38,725.853 1278.94,655.376 1279.5,656.421 1280.06,641.256 1280.62,644.586 1281.18,612.874 1281.73,613.203 1282.29,699.473 1282.85,698.045 1283.41,696.922 1283.97,695.214 1284.53,708.798 1285.09,722.656 1285.65,701.318 1286.21,718.517 1286.77,715.393 1287.33,698.276 1287.89,696.845 1288.45,697.533 1289,649.739 1289.56,636.461 1290.12,638.107 1290.68,641.56 1291.24,595.715 1291.8,598.7 1292.36,603.22 1292.92,637.88 1293.48,622.297 1294.04,641.279 1294.6,644.193 1295.16,646.324 1295.72,647.481 1296.28,633.156 1296.83,653.212 1297.39,671.88 1297.95,674.471 1298.51,656.163 1299.07,639.085 1299.63,609.598 1300.19,644.922 1300.75,660.665 1301.31,663.331 1301.87,696.983 1302.43,697.698 1302.99,712.776 1303.55,727.127 1304.1,741.918 1304.66,755.094 1305.22,737.615 1305.78,720.315 1306.34,689.845 1306.9,706.868 1307.46,674.018 1308.02,658.372 1308.58,661.525 1309.14,728.945 1309.7,681.944 1310.26,666.444 1310.82,700.787 1311.38,731.92 1311.93,714.946 1312.49,698.443 1313.05,663.71 1313.61,631.733 1314.17,631.822 1314.73,652.628 1315.29,621.54 1315.85,595.184 1316.41,582.273 1316.97,591.595 1317.53,629.39 1318.09,632.263 1318.65,648.733 1319.2,679.962 1319.76,699.614 1320.32,700.974 1320.88,702.164 1321.44,689.103 1322,705.6 1322.56,722.108 1323.12,704.878 1323.68,640.645 1324.24,640.918 1324.8,658.632 1325.36,644.092 1325.92,626.947 1326.47,645.112 1327.03,666.787 1327.59,685.189 1328.15,685.309 1328.71,684.506 1329.27,683.24 1329.83,666.51 1330.39,633.442 1330.95,638.443 1331.51,641.773 1332.07,675.771 1332.63,724.254 1333.19,721.013 1333.75,734.936 1334.3,731.529 1334.86,728.357 1335.42,741.37 1335.98,755.938 1336.54,753.491 1337.1,732.055 1337.66,713.565 1338.22,748.03 1338.78,727.946 1339.34,728.991 1339.9,723.613 1340.46,720.137 1341.02,738.746 1341.57,733.137 1342.13,748.118 1342.69,726.644 1343.25,756.586 1343.81,769.449 1344.37,734.65 1344.93,714.308 1345.49,708.549 1346.05,725.075 1346.61,705.477 1347.17,703.744 1347.73,689.592 1348.29,671.561 1348.84,672.109 1349.4,672.134 1349.96,675.425 1350.52,657.91 1351.08,658.758 1351.64,661.463 1352.2,665.548 1352.76,651.718 1353.32,654.535 1353.88,670.858 1354.44,669.829 1355,686.327 1355.56,657.117 1356.12,657.233 1356.67,656.429 1357.23,655.057 1357.79,656.834 1358.35,607.273 1358.91,610.853 1359.47,579.644 1360.03,651.804 1360.59,684.398 1361.15,666.67 1361.71,685.325 1362.27,667.193 1362.83,669.412 1363.39,687.474 1363.94,688.732 1364.5,670.16 1365.06,669.811 1365.62,671.236 1366.18,666.631 1366.74,682.402 1367.3,713.154 1367.86,727.597 1368.42,724.644 1368.98,709.288 1369.54,721.679 1370.1,801.421 1370.66,793.723 1371.21,786.569 1371.77,782.636 1372.33,760.691 1372.89,754.776 1373.45,779.318 1374.01,694.462 1374.57,742.111 1375.13,723.743 1375.69,718.429 1376.25,703.433 1376.81,715.892 1377.37,729.511 1377.93,709.745 1378.49,706.407 1379.04,672.823 1379.6,674.263 1380.16,676.193 1380.72,679.261 1381.28,679.128 1381.84,694.05 1382.4,704.73 1382.96,673.275 1383.52,706.863 1384.08,690.235 1384.64,656.391 1385.2,627.572 1385.76,614.795 1386.31,616.234 1386.87,618.716 1387.43,651.721 1387.99,620.629 1388.55,604.133 1389.11,623.703 1389.67,581.355 1390.23,616.945 1390.79,621.459 1391.35,623.725 1391.91,626.665 1392.47,643.718 1393.03,680.755 1393.58,664.71 1394.14,650.891 1394.7,651.721 1395.26,619.806 1395.82,605.632 1396.38,626.678 1396.94,630.31 1397.5,615.045 1398.06,636.203 1398.62,636.052 1399.18,653.827 1399.74,685.525 1400.3,716.065 1400.86,686.299 1401.41,688.296 1401.97,670.546 1402.53,672.311 1403.09,688.257 1403.65,704.834 1404.21,702.452 1404.77,701.572 1405.33,715.241 1405.89,732.687 1406.45,746.744 1407.01,729.31 1407.57,726.346 1408.13,706.267 1408.68,688.222 1409.24,688.918 1409.8,672.755 1410.36,701.155 1410.92,716.604 1411.48,732.306 1412.04,731.196 1412.6,726.835 1413.16,738.619 1413.72,738.94 1414.28,738.336 1414.84,717.432 1415.4,683.255 1415.95,681.656 1416.51,651.354 1417.07,635.899 1417.63,655.167 1418.19,635.945 1418.75,637.72 1419.31,644.007 1419.87,642.209 1420.43,675.592 1420.99,681.561 1421.55,696.458 1422.11,724.049 1422.67,723.127 1423.23,703.865 1423.78,686.003 1424.34,702.779 1424.9,652.162 1425.46,636.781 1426.02,621.232 1426.58,593.482 1427.14,598.562 1427.7,638.559 1428.26,625.083 1428.82,626.716 1429.38,599.069 1429.94,602.263 1430.5,638.042 1431.05,610.104 1431.61,595.687 1432.17,583.709 1432.73,621.077 1433.29,607.655 1433.85,645.64 1434.41,632.94 1434.97,653.394 1435.53,637.158 1436.09,638.848 1436.65,639.574 1437.21,641.554 1437.77,629.728 1438.33,633.739 1438.88,617.454 1439.44,621.549 1440,656.298 1440.56,673.755 1441.12,660.897 1441.68,644.983 1442.24,646.89 1442.8,652.434 1443.36,669.865 1443.92,653.129 1444.48,671.561 1445.04,691.319 1445.6,688.844 1446.15,721.506 1446.71,706.791 1447.27,687.044 1447.83,702.783 1448.39,734.703 1448.95,728.828 1449.51,711.384 1450.07,713.603 1450.63,728.138 1451.19,724.863 1451.75,738.752 1452.31,750.748 1452.87,747.793 1453.42,746.17 1453.98,760.593 1454.54,756.62 1455.1,720.019 1455.66,767.849 1456.22,758.398 1456.78,786.114 1457.34,765.245 1457.9,760.998 1458.46,771.649 1459.02,787.164 1459.58,780.611 1460.14,725.927 1460.7,724.684 1461.25,705.761 1461.81,706.605 1462.37,724.164 1462.93,738.668 1463.49,750.548 1464.05,698.466 1464.61,698.629 1465.17,680.078 1465.73,682.71 1466.29,685.939 1466.85,688.395 1467.41,687.135 1467.97,698.631 1468.52,729.627 1469.08,727.878 1469.64,710.619 1470.2,641.905 1470.76,642.937 1471.32,646.148 1471.88,665.391 1472.44,683.497 1473,684.501 1473.56,701.867 1474.12,701.909 1474.68,686.165 1475.24,687.77 1475.79,702.517 1476.35,701.832 1476.91,669.966 1477.47,684.298 1478.03,683.117 1478.59,671.091 1479.15,625.712 1479.71,625.871 1480.27,628.422 1480.83,619.35 1481.39,640.635 1481.95,643.891 1482.51,662.041 1483.07,678.341 1483.62,678.946 1484.18,683.179 1484.74,719.519 1485.3,732.558 1485.86,729.195 1486.42,694.54 1486.98,666.04 1487.54,688.01 1488.1,674.096 1488.66,688.578 1489.22,736.798 1489.78,747.395 1490.34,745.063 1490.89,758.81 1491.45,754.343 1492.01,749.958 1492.57,730.551 1493.13,664.637 1493.69,667.004 1494.25,669.238 1494.81,654.449 1495.37,640.405 1495.93,629.17 1496.49,597.788 1497.05,586.638 1497.61,559.274 1498.16,561.584 1498.72,567.119 1499.28,592.075 1499.84,625.684 1500.4,658.623 1500.96,664.231 1501.52,600.679 1502.08,604.282 1502.64,608.931 1503.2,611.514 1503.76,613.317 1504.32,634.197 1504.88,636.467 1505.44,640.807 1505.99,643.385 1506.55,645.901 1507.11,650.728 1507.67,685.213 1508.23,653.144 1508.79,668.948 1509.35,654.989 1509.91,671.507 1510.47,685.556 1511.03,686.298 1511.59,670.608 1512.15,655.209 1512.71,674.243 1513.26,688.211 1513.82,673.562 1514.38,675.285 1514.94,677.478 1515.5,663.685 1516.06,666.467 1516.62,634.101 1517.18,620.336 1517.74,621.517 1518.3,621.241 1518.86,640.887 1519.42,665.378 1519.98,665.367 1520.53,665.397 1521.09,652.475 1521.65,635.756 1522.21,652.739 1522.77,655.381 1523.33,671.956 1523.89,689.648 1524.45,675.072 1525.01,677.542 1525.57,679.448 1526.13,727.917 1526.69,723.777 1527.25,735.552 1527.81,731.981 1528.36,747.284 1528.92,759.67 1529.48,757.991 1530.04,722.103 1530.6,739.179 1531.16,751.053 1531.72,766.126 1532.28,782.341 1532.84,791.715 1533.4,770.407 1533.96,778.548 1534.52,790.965 1535.08,784.755 1535.63,777.242 1536.19,773.518 1536.75,753.945 1537.31,766.232 1537.87,777.95 1538.43,772.713 1538.99,769.292 1539.55,781.937 1540.11,777.038 1540.67,803.994 1541.23,793.791 1541.79,790.842 1542.35,817.337 1542.9,812.014 1543.46,820.22 1544.02,780.194 1544.58,740.898 1545.14,721.623 1545.7,698.629 1546.26,716.819 1546.82,715.354 1547.38,695.463 1547.94,694.781 1548.5,661.263 1549.06,677.492 1549.62,676.536 1550.18,628.953 1550.73,643.444 1551.29,642.844 1551.85,628.18 1552.41,633.228 1552.97,667.335 1553.53,651.04 1554.09,683.73 1554.65,715.553 1555.21,697.793 1555.77,729.802 1556.33,742.643 1556.89,703.252 1557.45,717.896 1558,747.929 1558.56,756.23 1559.12,715.384 1559.68,667.154 1560.24,688.078 1560.8,705.397 1561.36,719.893 1561.92,733.259 1562.48,716.274 1563.04,726.801 1563.6,756.643 1564.16,754.832 1564.72,720.202 1565.28,718.485 1565.83,702.146 1566.39,664.861 1566.95,679.319 1567.51,677.953 1568.07,628.125 1568.63,643.172 1569.19,644.87 1569.75,647.674 1570.31,654.288 1570.87,641.956 1571.43,642.428 1571.99,675.881 1572.55,658.956 1573.1,693.756 1573.66,692.51 1574.22,674.792 1574.78,660.324 1575.34,678.565 1575.9,678.123 1576.46,711.628 1577.02,713.666 1577.58,711.79 1578.14,711.974 1578.7,691.502 1579.26,656.919 1579.82,674.282 1580.37,678.007 1580.93,693.456 1581.49,692.17 1582.05,722.132 1582.61,720.529 1583.17,750.415 1583.73,729.258 1584.29,725.906 1584.85,742.312 1585.41,689.569 1585.97,623.476 1586.53,628.067 1587.09,627.948 1587.65,584.109 1588.2,574.468 1588.76,551.911 1589.32,557.772 1589.88,579.936 1590.44,599.518 1591,588.119 1591.56,646.633 1592.12,584.851 1592.68,603.609 1593.24,626.737 1593.8,645.793 1594.36,725.257 1594.92,754.44 1595.47,738.206 1596.03,750.723 1596.59,733.87 1597.15,762.529 1597.71,805.404 1598.27,828.977 1598.83,836.747 1599.39,843.698 1599.95,835.482 1600.51,811.528 1601.07,835.817 1601.63,778.757 1602.19,759.352 1602.74,720.697 1603.3,718.006 1603.86,764.049 1604.42,696.811 1604.98,697.254 1605.54,712.488 1606.1,728.491 1606.66,725.995 1607.22,728.116 1607.78,708.331 1608.34,689.439 1608.9,673.434 1609.46,657.073 1610.02,702.935 1610.57,700.881 1611.13,683.196 1611.69,716.303 1612.25,731.316 1612.81,759.829 1613.37,757.702 1613.93,785.681 1614.49,747.067 1615.05,680.713 1615.61,694.128 1616.17,696.016 1616.73,676.403 1617.29,708.876 1617.84,658.521 1618.4,644.904 1618.96,662.765 1619.52,663.752 1620.08,664.391 1620.64,697.308 1621.2,695.604 1621.76,677.329 1622.32,676.01 1622.88,687.802 1623.44,705.205 1624,686.904 1624.56,671.254 1625.11,688.273 1625.67,668.582 1626.23,671.466 1626.79,688.447 1627.35,689.532 1627.91,689.209 1628.47,642.077 1629.03,613.819 1629.59,683.668 1630.15,700.602 1630.71,699.435 1631.27,665.403 1631.83,664.577 1632.39,711.535 1632.94,725.924 1633.5,724.235 1634.06,722.292 1634.62,705.006 1635.18,685.147 1635.74,684.405 1636.3,653.439 1636.86,672.617 1637.42,688.22 1637.98,669.071 1638.54,685.598 1639.1,684.535 1639.66,700.195 1640.21,686.7 1640.77,703.817 1641.33,717.476 1641.89,717.84 1642.45,733.401 1643.01,744.562 1643.57,727.844 1644.13,742.508 1644.69,672.757 1645.25,640.322 1645.81,627.57 1646.37,614.088 1646.93,614.975 1647.48,636.216 1648.04,669.505 1648.6,670.235 1649.16,658.496 1649.72,680.516 1650.28,712.228 1650.84,725.538 1651.4,725.171 1651.96,740.36 1652.52,756.761 1653.08,751.485 1653.64,745.999 1654.2,707.408 1654.76,720.883 1655.31,722.23 1655.87,737.029 1656.43,736.286 1656.99,734.699 1657.55,748.095 1658.11,730.492 1658.67,693.699 1659.23,676.577 1659.79,678.332 1660.35,663.518 1660.91,628.096 1661.47,616.335 1662.03,618.555 1662.58,585.671 1663.14,560.584 1663.7,600.869 1664.26,621.534 1664.82,608.384 1665.38,628.51 1665.94,630.717 1666.5,598.569 1667.06,602.546 1667.62,574.597 1668.18,596.999 1668.74,587.945 1669.3,578.216 1669.85,617.823 1670.41,618.204 1670.97,652.133 1671.53,668.059 1672.09,667.28 1672.65,669.7 1673.21,655.78 1673.77,623.51 1674.33,609.637 1674.89,646.134 1675.45,663.729 1676.01,663.202 1676.57,647.722 1677.13,633.17 1677.68,635.961 1678.24,636.745 1678.8,611.04 1679.36,631.281 1679.92,653.596 1680.48,683.53 1681.04,701.481 1681.6,689.06 1682.16,675.157 1682.72,658.288 1683.28,628.129 1683.84,664.831 1684.4,669.937 1684.95,652.482 1685.51,605.994 1686.07,611.396 1686.63,585.301 1687.19,590.701 1687.75,563.943 1688.31,583.68 1688.87,590.561 1689.43,596.461 1689.99,570.971 1690.55,577.943 1691.11,599.396 1691.67,588.85 1692.23,612.084 1692.78,616.659 1693.34,638.977 1693.9,706.145 1694.46,674.924 1695.02,696.412 1695.58,728.864 1696.14,741.272 1696.7,722.082 1697.26,721.934 1697.82,770.54 1698.38,766.09 1698.94,778.171 1699.5,755.518 1700.05,753.07 1700.61,749.283 1701.17,714.732 1701.73,698.994 1702.29,683.112 1702.85,667.359 1703.41,667.781 1703.97,687.959 1704.53,689.022 1705.09,708.814 1705.65,708.281 1706.21,692.494 1706.77,693.705 1707.32,693.48 1707.88,693.755 1708.44,712.472 1709,714.278 1709.56,697.712 1710.12,711.988 1710.68,694.306 1711.24,680.75 1711.8,663.724 1712.36,680.928 1712.92,634.081 1713.48,664.054 1714.04,646.527 1714.6,648.243 1715.15,654.425 1715.71,656.103 1716.27,644.582 1716.83,629.992 1717.39,650.945 1717.95,654.815 1718.51,671.764 1719.07,671.949 1719.63,674.481 1720.19,677.06 1720.75,693.968 1721.31,726.082 1721.87,725.476 1722.42,722.954 1722.98,705.26 1723.54,722.7 1724.1,690.682 1724.66,660.678 1725.22,625.673 1725.78,643.993 1726.34,647.174 1726.9,665.668 1727.46,696.682 1728.02,708.822 1728.58,707.501 1729.14,722.46 1729.69,705.505 1730.25,718.407 1730.81,747.806 1731.37,724.288 1731.93,703.625 1732.49,718.295 1733.05,716.503 1733.61,681.081 1734.17,731.879 1734.73,763.146 1735.29,760.097 1735.85,770.513 1736.41,781.751 1736.97,728.016 1737.52,726.976 1738.08,726 1738.64,723.732 1739.2,673.746 1739.76,692.227 1740.32,679.707 1740.88,679.313 1741.44,649.989 1742,649.915 1742.56,652.107 1743.12,669.139 1743.68,687.068 1744.24,702.453 1744.79,701.591 1745.35,686.672 1745.91,687.059 1746.47,657.042 1747.03,693.987 1747.59,659.463 1748.15,660.771 1748.71,660.598 1749.27,644.824 1749.83,662.872 1750.39,683.046 1750.95,668.053 1751.51,655.407 1752.06,637.942 1752.62,639.422 1753.18,642.406 1753.74,689.388 1754.3,671.511 1754.86,651.801 1755.42,687.253 1755.98,687.204 1756.54,718.437 1757.1,714.956 1757.66,698.866 1758.22,713.299 1758.78,708.402 1759.34,724.145 1759.89,723.983 1760.45,707.902 1761.01,689.977 1761.57,704.055 1762.13,718.553 1762.69,722.343 1763.25,753.271 1763.81,731.983 1764.37,713.925 1764.93,711.842 1765.49,726.877 1766.05,722.872 1766.61,708.695 1767.16,690.493 1767.72,688.256 1768.28,701.694 1768.84,698.366 1769.4,693.633 1769.96,678.496 1770.52,677.289 1771.08,690.794 1771.64,688.453 1772.2,672.854 1772.76,673.429 1773.32,642.369 1773.88,643.776 1774.43,629.588 1774.99,664.902 1775.55,679.111 1776.11,695.05 1776.67,693.456 1777.23,674.738 1777.79,675.372 1778.35,675.5 1778.91,676.578 1779.47,677.166 1780.03,679.068 1780.59,710.016 1781.15,726.375 1781.71,706.973 1782.26,705.09 1782.82,703.871 1783.38,718.273 1783.94,720.458 1784.5,702.048 1785.06,670.827 1785.62,689.386 1786.18,669.106 1786.74,651.744 1787.3,670.456 1787.86,687.707 1788.42,732.977 1788.98,716.883 1789.53,699.278 1790.09,731.993 1790.65,732.989 1791.21,727.419 1791.77,755.538 1792.33,800.662 1792.89,793.464 1793.45,785.009 1794.01,781.181 1794.57,757.76 1795.13,754.801 1795.69,751.743 1796.25,735.805 1796.8,748.334 1797.36,744.041 1797.92,738.89 1798.48,719.049 1799.04,719.156 1799.6,734.618 1800.16,732.593 1800.72,729.343 1801.28,695.087 1801.84,709.995 1802.4,708.032 1802.96,722.627 1803.52,719.029 1804.08,719.818 1804.63,731.823 1805.19,778.578 1805.75,754.908 1806.31,748.88 1806.87,712.303 1807.43,679.309 1807.99,660.129 1808.55,675.979 1809.11,678.377 1809.67,643.09 1810.23,677.822 1810.79,676.234 1811.35,675.748 1811.9,688.959 1812.46,700.94 1813.02,696.382 1813.58,709.709 1814.14,708.649 1814.7,721.673 1815.26,736.205 1815.82,767.166 1816.38,713.912 1816.94,698.992 1817.5,711.777 1818.06,677.476 1818.62,664.792 1819.18,666.095 1819.73,666.784 1820.29,682.58 1820.85,669.385 1821.41,654.122 1821.97,655.934 1822.53,660.248 1823.09,647.692 1823.65,647.275 1824.21,651.066 1824.77,651.588 1825.33,659.579 1825.89,649.473 1826.45,601.823 1827,619.874 1827.56,636.507 1828.12,642.091 1828.68,645.968 1829.24,648.807 1829.8,648.244 1830.36,665.837 1830.92,653.806 1831.48,626.669 1832.04,615.061 1832.6,649.465 1833.16,646.838 1833.72,612.197 1834.27,617.111 1834.83,617.329 1835.39,623.351 1835.95,594.329 1836.51,615.487 1837.07,633.547 1837.63,654.277 1838.19,642.536 \"/>\n<path clip-path=\"url(#clip223)\" d=\"M720.247 691.548 L720.806 691.548 L721.365 691.548 L721.924 691.548 L722.484 691.548 L723.043 691.548 L723.602 691.548 L724.161 691.548 L724.721 691.548 L725.28 691.548 L725.839 691.548 L726.398 691.548 L726.958 691.548 L727.517 691.548 L728.076 691.548 L728.635 691.548 L729.195 691.548 L729.754 691.548 L730.313 691.548 L730.872 691.548 L731.432 691.548 L731.991 691.548 L732.55 691.548 L733.109 691.548 L733.669 691.548 L734.228 691.548 L734.787 691.548 L735.346 691.548 L735.906 691.548 L736.465 691.548 L737.024 691.548 L737.583 691.548 L738.143 691.548 L738.702 691.548 L739.261 691.548 L739.82 691.548 L740.38 691.548 L740.939 691.548 L741.498 691.548 L742.057 691.548 L742.617 691.548 L743.176 691.548 L743.735 691.548 L744.294 691.548 L744.854 691.548 L745.413 691.548 L745.972 691.548 L746.531 691.548 L747.091 691.548 L747.65 691.548 L748.209 691.548 L748.768 691.548 L749.328 691.548 L749.887 691.548 L750.446 691.548 L751.005 691.548 L751.565 691.548 L752.124 691.548 L752.683 691.548 L753.242 691.548 L753.802 691.548 L754.361 691.548 L754.92 691.548 L755.479 691.548 L756.039 691.548 L756.598 691.548 L757.157 691.548 L757.716 691.548 L758.276 691.548 L758.835 691.548 L759.394 691.548 L759.953 691.548 L760.513 691.548 L761.072 691.548 L761.631 691.548 L762.19 691.548 L762.75 691.548 L763.309 691.548 L763.868 691.548 L764.427 691.548 L764.987 691.548 L765.546 691.548 L766.105 691.548 L766.664 691.548 L767.224 691.548 L767.783 691.548 L768.342 691.548 L768.901 691.548 L769.461 691.548 L770.02 691.548 L770.579 691.548 L771.138 691.548 L771.698 691.548 L772.257 691.548 L772.816 691.548 L773.375 691.548 L773.935 691.548 L774.494 691.548 L775.053 691.548 L775.612 691.548 L776.172 691.548 L776.731 691.548 L777.29 691.548 L777.849 691.548 L778.409 691.548 L778.968 691.548 L779.527 691.548 L780.086 691.548 L780.646 691.548 L781.205 691.548 L781.764 691.548 L782.323 691.548 L782.883 691.548 L783.442 691.548 L784.001 691.548 L784.56 691.548 L785.12 691.548 L785.679 691.548 L786.238 691.548 L786.797 691.548 L787.357 691.548 L787.916 691.548 L788.475 691.548 L789.034 691.548 L789.594 691.548 L790.153 691.548 L790.712 691.548 L791.271 691.548 L791.831 691.548 L792.39 691.548 L792.949 691.548 L793.508 691.548 L794.068 691.548 L794.627 691.548 L795.186 691.548 L795.745 691.548 L796.305 691.548 L796.864 691.548 L797.423 691.548 L797.982 691.548 L798.542 691.548 L799.101 691.548 L799.66 691.548 L800.219 691.548 L800.779 691.548 L801.338 691.548 L801.897 691.548 L802.456 691.548 L803.016 691.548 L803.575 691.548 L804.134 691.548 L804.693 691.548 L805.253 691.548 L805.812 691.548 L806.371 691.548 L806.931 691.548 L807.49 691.548 L808.049 691.548 L808.608 691.548 L809.168 691.548 L809.727 691.548 L810.286 691.548 L810.845 691.548 L811.405 691.548 L811.964 691.548 L812.523 691.548 L813.082 691.548 L813.642 691.548 L814.201 691.548 L814.76 691.548 L815.319 691.548 L815.879 691.548 L816.438 691.548 L816.997 691.548 L817.556 691.548 L818.116 691.548 L818.675 691.548 L819.234 691.548 L819.793 691.548 L820.353 691.548 L820.912 691.548 L821.471 691.548 L822.03 691.548 L822.59 691.548 L823.149 691.548 L823.708 691.548 L824.267 691.548 L824.827 691.548 L825.386 691.548 L825.945 691.548 L826.504 691.548 L827.064 691.548 L827.623 691.548 L828.182 691.548 L828.741 691.548 L829.301 691.548 L829.86 691.548 L830.419 691.548 L830.978 691.548 L831.538 691.548 L832.097 691.548 L832.656 691.548 L833.215 691.548 L833.775 691.548 L834.334 691.548 L834.893 691.548 L835.452 691.548 L836.012 691.548 L836.571 691.548 L837.13 691.548 L837.689 691.548 L838.249 691.548 L838.808 691.548 L839.367 691.548 L839.926 691.548 L840.486 691.548 L841.045 691.548 L841.604 691.548 L842.163 691.548 L842.723 691.548 L843.282 691.548 L843.841 691.548 L844.4 691.548 L844.96 691.548 L845.519 691.548 L846.078 691.548 L846.637 691.548 L847.197 691.548 L847.756 691.548 L848.315 691.548 L848.874 691.548 L849.434 691.548 L849.993 691.548 L850.552 691.548 L851.111 691.548 L851.671 691.548 L852.23 691.548 L852.789 691.548 L853.348 691.548 L853.908 691.548 L854.467 691.548 L855.026 691.548 L855.585 691.548 L856.145 691.548 L856.704 691.548 L857.263 691.548 L857.822 691.548 L858.382 691.548 L858.941 691.548 L859.5 691.548 L860.059 691.548 L860.619 691.548 L861.178 691.548 L861.737 691.548 L862.296 691.548 L862.856 691.548 L863.415 691.548 L863.974 691.548 L864.533 691.548 L865.093 691.548 L865.652 691.548 L866.211 691.548 L866.77 691.548 L867.33 691.548 L867.889 691.548 L868.448 691.548 L869.007 691.548 L869.567 691.548 L870.126 691.548 L870.685 691.548 L871.244 691.548 L871.804 691.548 L872.363 691.548 L872.922 691.548 L873.481 691.548 L874.041 691.548 L874.6 691.548 L875.159 691.548 L875.718 691.548 L876.278 691.548 L876.837 691.548 L877.396 691.548 L877.955 691.548 L878.515 691.548 L879.074 691.548 L879.633 691.548 L880.192 691.548 L880.752 691.548 L881.311 691.548 L881.87 691.548 L882.429 691.548 L882.989 691.548 L883.548 691.548 L884.107 691.548 L884.666 691.548 L885.226 691.548 L885.785 691.548 L886.344 691.548 L886.903 691.548 L887.463 691.548 L888.022 691.548 L888.581 691.548 L889.14 691.548 L889.7 691.548 L890.259 691.548 L890.818 691.548 L891.377 691.548 L891.937 691.548 L892.496 691.548 L893.055 691.548 L893.614 691.548 L894.174 691.548 L894.733 691.548 L895.292 691.548 L895.851 691.548 L896.411 691.548 L896.97 691.548 L897.529 691.548 L898.088 691.548 L898.648 691.548 L899.207 691.548 L899.766 691.548 L900.325 691.548 L900.885 691.548 L901.444 691.548 L902.003 691.548 L902.562 691.548 L903.122 691.548 L903.681 691.548 L904.24 691.548 L904.799 691.548 L905.359 691.548 L905.918 691.548 L906.477 691.548 L907.036 691.548 L907.596 691.548 L908.155 691.548 L908.714 691.548 L909.273 691.548 L909.833 691.548 L910.392 691.548 L910.951 691.548 L911.51 691.548 L912.07 691.548 L912.629 691.548 L913.188 691.548 L913.747 691.548 L914.307 691.548 L914.866 691.548 L915.425 691.548 L915.984 691.548 L916.544 691.548 L917.103 691.548 L917.662 691.548 L918.221 691.548 L918.781 691.548 L919.34 691.548 L919.899 691.548 L920.458 691.548 L921.018 691.548 L921.577 691.548 L922.136 691.548 L922.695 691.548 L923.255 691.548 L923.814 691.548 L924.373 691.548 L924.932 691.548 L925.492 691.548 L926.051 691.548 L926.61 691.548 L927.169 691.548 L927.729 691.548 L928.288 691.548 L928.847 691.548 L929.406 691.548 L929.966 691.548 L930.525 691.548 L931.084 691.548 L931.644 691.548 L932.203 691.548 L932.762 691.548 L933.321 691.548 L933.881 691.548 L934.44 691.548 L934.999 691.548 L935.558 691.548 L936.118 691.548 L936.677 691.548 L937.236 691.548 L937.795 691.548 L938.355 691.548 L938.914 691.548 L939.473 691.548 L940.032 691.548 L940.592 691.548 L941.151 691.548 L941.71 691.548 L942.269 691.548 L942.829 691.548 L943.388 691.548 L943.947 691.548 L944.506 691.548 L945.066 691.548 L945.625 691.548 L946.184 691.548 L946.743 691.548 L947.303 691.548 L947.862 691.548 L948.421 691.548 L948.98 691.548 L949.54 691.548 L950.099 691.548 L950.658 691.548 L951.217 691.548 L951.777 691.548 L952.336 691.548 L952.895 691.548 L953.454 691.548 L954.014 691.548 L954.573 691.548 L955.132 691.548 L955.691 691.548 L956.251 691.548 L956.81 691.548 L957.369 691.548 L957.928 691.548 L958.488 691.548 L959.047 691.548 L959.606 691.548 L960.165 691.548 L960.725 691.548 L961.284 691.548 L961.843 691.548 L962.402 691.548 L962.962 691.548 L963.521 691.548 L964.08 691.548 L964.639 691.548 L965.199 691.548 L965.758 691.548 L966.317 691.548 L966.876 691.548 L967.436 691.548 L967.995 691.548 L968.554 691.548 L969.113 691.548 L969.673 691.548 L970.232 691.548 L970.791 691.548 L971.35 691.548 L971.91 691.548 L972.469 691.548 L973.028 691.548 L973.587 691.548 L974.147 691.548 L974.706 691.548 L975.265 691.548 L975.824 691.548 L976.384 691.548 L976.943 691.548 L977.502 691.548 L978.061 691.548 L978.621 691.548 L979.18 691.548 L979.739 691.548 L980.298 691.548 L980.858 691.548 L981.417 691.548 L981.976 691.548 L982.535 691.548 L983.095 691.548 L983.654 691.548 L984.213 691.548 L984.772 691.548 L985.332 691.548 L985.891 691.548 L986.45 691.548 L987.009 691.548 L987.569 691.548 L988.128 691.548 L988.687 691.548 L989.246 691.548 L989.806 691.548 L990.365 691.548 L990.924 691.548 L991.483 691.548 L992.043 691.548 L992.602 691.548 L993.161 691.548 L993.72 691.548 L994.28 691.548 L994.839 691.548 L995.398 691.548 L995.957 691.548 L996.517 691.548 L997.076 691.548 L997.635 691.548 L998.194 691.548 L998.754 691.548 L999.313 691.548 L999.872 691.548 L1000.43 691.548 L1000.99 691.548 L1001.55 691.548 L1002.11 691.548 L1002.67 691.548 L1003.23 691.548 L1003.79 691.548 L1004.35 691.548 L1004.91 691.548 L1005.46 691.548 L1006.02 691.548 L1006.58 691.548 L1007.14 691.548 L1007.7 691.548 L1008.26 691.548 L1008.82 691.548 L1009.38 691.548 L1009.94 691.548 L1010.5 691.548 L1011.06 691.548 L1011.62 691.548 L1012.18 691.548 L1012.73 691.548 L1013.29 691.548 L1013.85 691.548 L1014.41 691.548 L1014.97 691.548 L1015.53 691.548 L1016.09 691.548 L1016.65 691.548 L1017.21 691.548 L1017.77 691.548 L1018.33 691.548 L1018.89 691.548 L1019.45 691.548 L1020.01 691.548 L1020.56 691.548 L1021.12 691.548 L1021.68 691.548 L1022.24 691.548 L1022.8 691.548 L1023.36 691.548 L1023.92 691.548 L1024.48 691.548 L1025.04 691.548 L1025.6 691.548 L1026.16 691.548 L1026.72 691.548 L1027.28 691.548 L1027.83 691.548 L1028.39 691.548 L1028.95 691.548 L1029.51 691.548 L1030.07 691.548 L1030.63 691.548 L1031.19 691.548 L1031.75 691.548 L1032.31 691.548 L1032.87 691.548 L1033.43 691.548 L1033.99 691.548 L1034.55 691.548 L1035.1 691.548 L1035.66 691.548 L1036.22 691.548 L1036.78 691.548 L1037.34 691.548 L1037.9 691.548 L1038.46 691.548 L1039.02 691.548 L1039.58 691.548 L1040.14 691.548 L1040.7 691.548 L1041.26 691.548 L1041.82 691.548 L1042.38 691.548 L1042.93 691.548 L1043.49 691.548 L1044.05 691.548 L1044.61 691.548 L1045.17 691.548 L1045.73 691.548 L1046.29 691.548 L1046.85 691.548 L1047.41 691.548 L1047.97 691.548 L1048.53 691.548 L1049.09 691.548 L1049.65 691.548 L1050.2 691.548 L1050.76 691.548 L1051.32 691.548 L1051.88 691.548 L1052.44 691.548 L1053 691.548 L1053.56 691.548 L1054.12 691.548 L1054.68 691.548 L1055.24 691.548 L1055.8 691.548 L1056.36 691.548 L1056.92 691.548 L1057.48 691.548 L1058.03 691.548 L1058.59 691.548 L1059.15 691.548 L1059.71 691.548 L1060.27 691.548 L1060.83 691.548 L1061.39 691.548 L1061.95 691.548 L1062.51 691.548 L1063.07 691.548 L1063.63 691.548 L1064.19 691.548 L1064.75 691.548 L1065.3 691.548 L1065.86 691.548 L1066.42 691.548 L1066.98 691.548 L1067.54 691.548 L1068.1 691.548 L1068.66 691.548 L1069.22 691.548 L1069.78 691.548 L1070.34 691.548 L1070.9 691.548 L1071.46 691.548 L1072.02 691.548 L1072.57 691.548 L1073.13 691.548 L1073.69 691.548 L1074.25 691.548 L1074.81 691.548 L1075.37 691.548 L1075.93 691.548 L1076.49 691.548 L1077.05 691.548 L1077.61 691.548 L1078.17 691.548 L1078.73 691.548 L1079.29 691.548 L1079.85 691.548 L1080.4 691.548 L1080.96 691.548 L1081.52 691.548 L1082.08 691.548 L1082.64 691.548 L1083.2 691.548 L1083.76 691.548 L1084.32 691.548 L1084.88 691.548 L1085.44 691.548 L1086 691.548 L1086.56 691.548 L1087.12 691.548 L1087.67 691.548 L1088.23 691.548 L1088.79 691.548 L1089.35 691.548 L1089.91 691.548 L1090.47 691.548 L1091.03 691.548 L1091.59 691.548 L1092.15 691.548 L1092.71 691.548 L1093.27 691.548 L1093.83 691.548 L1094.39 691.548 L1094.94 691.548 L1095.5 691.548 L1096.06 691.548 L1096.62 691.548 L1097.18 691.548 L1097.74 691.548 L1098.3 691.548 L1098.86 691.548 L1099.42 691.548 L1099.98 691.548 L1100.54 691.548 L1101.1 691.548 L1101.66 691.548 L1102.22 691.548 L1102.77 691.548 L1103.33 691.548 L1103.89 691.548 L1104.45 691.548 L1105.01 691.548 L1105.57 691.548 L1106.13 691.548 L1106.69 691.548 L1107.25 691.548 L1107.81 691.548 L1108.37 691.548 L1108.93 691.548 L1109.49 691.548 L1110.04 691.548 L1110.6 691.548 L1111.16 691.548 L1111.72 691.548 L1112.28 691.548 L1112.84 691.548 L1113.4 691.548 L1113.96 691.548 L1114.52 691.548 L1115.08 691.548 L1115.64 691.548 L1116.2 691.548 L1116.76 691.548 L1117.31 691.548 L1117.87 691.548 L1118.43 691.548 L1118.99 691.548 L1119.55 691.548 L1120.11 691.548 L1120.67 691.548 L1121.23 691.548 L1121.79 691.548 L1122.35 691.548 L1122.91 691.548 L1123.47 691.548 L1124.03 691.548 L1124.59 691.548 L1125.14 691.548 L1125.7 691.548 L1126.26 691.548 L1126.82 691.548 L1127.38 691.548 L1127.94 691.548 L1128.5 691.548 L1129.06 691.548 L1129.62 691.548 L1130.18 691.548 L1130.74 691.548 L1131.3 691.548 L1131.86 691.548 L1132.41 691.548 L1132.97 691.548 L1133.53 691.548 L1134.09 691.548 L1134.65 691.548 L1135.21 691.548 L1135.77 691.548 L1136.33 691.548 L1136.89 691.548 L1137.45 691.548 L1138.01 691.548 L1138.57 691.548 L1139.13 691.548 L1139.68 691.548 L1140.24 691.548 L1140.8 691.548 L1141.36 691.548 L1141.92 691.548 L1142.48 691.548 L1143.04 691.548 L1143.6 691.548 L1144.16 691.548 L1144.72 691.548 L1145.28 691.548 L1145.84 691.548 L1146.4 691.548 L1146.96 691.548 L1147.51 691.548 L1148.07 691.548 L1148.63 691.548 L1149.19 691.548 L1149.75 691.548 L1150.31 691.548 L1150.87 691.548 L1151.43 691.548 L1151.99 691.548 L1152.55 691.548 L1153.11 691.548 L1153.67 691.548 L1154.23 691.548 L1154.78 691.548 L1155.34 691.548 L1155.9 691.548 L1156.46 691.548 L1157.02 691.548 L1157.58 691.548 L1158.14 691.548 L1158.7 691.548 L1159.26 691.548 L1159.82 691.548 L1160.38 691.548 L1160.94 691.548 L1161.5 691.548 L1162.05 691.548 L1162.61 691.548 L1163.17 691.548 L1163.73 691.548 L1164.29 691.548 L1164.85 691.548 L1165.41 691.548 L1165.97 691.548 L1166.53 691.548 L1167.09 691.548 L1167.65 691.548 L1168.21 691.548 L1168.77 691.548 L1169.33 691.548 L1169.88 691.548 L1170.44 691.548 L1171 691.548 L1171.56 691.548 L1172.12 691.548 L1172.68 691.548 L1173.24 691.548 L1173.8 691.548 L1174.36 691.548 L1174.92 691.548 L1175.48 691.548 L1176.04 691.548 L1176.6 691.548 L1177.15 691.548 L1177.71 691.548 L1178.27 691.548 L1178.83 691.548 L1179.39 691.548 L1179.95 691.548 L1180.51 691.548 L1181.07 691.548 L1181.63 691.548 L1182.19 691.548 L1182.75 691.548 L1183.31 691.548 L1183.87 691.548 L1184.43 691.548 L1184.98 691.548 L1185.54 691.548 L1186.1 691.548 L1186.66 691.548 L1187.22 691.548 L1187.78 691.548 L1188.34 691.548 L1188.9 691.548 L1189.46 691.548 L1190.02 691.548 L1190.58 691.548 L1191.14 691.548 L1191.7 691.548 L1192.25 691.548 L1192.81 691.548 L1193.37 691.548 L1193.93 691.548 L1194.49 691.548 L1195.05 691.548 L1195.61 691.548 L1196.17 691.548 L1196.73 691.548 L1197.29 691.548 L1197.85 691.548 L1198.41 691.548 L1198.97 691.548 L1199.52 691.548 L1200.08 691.548 L1200.64 691.548 L1201.2 691.548 L1201.76 691.548 L1202.32 691.548 L1202.88 691.548 L1203.44 691.548 L1204 691.548 L1204.56 691.548 L1205.12 691.548 L1205.68 691.548 L1206.24 691.548 L1206.8 691.548 L1207.35 691.548 L1207.91 691.548 L1208.47 691.548 L1209.03 691.548 L1209.59 691.548 L1210.15 691.548 L1210.71 691.548 L1211.27 691.548 L1211.83 691.548 L1212.39 691.548 L1212.95 691.548 L1213.51 691.548 L1214.07 691.548 L1214.62 691.548 L1215.18 691.548 L1215.74 691.548 L1216.3 691.548 L1216.86 691.548 L1217.42 691.548 L1217.98 691.548 L1218.54 691.548 L1219.1 691.548 L1219.66 691.548 L1220.22 691.548 L1220.78 691.548 L1221.34 691.548 L1221.89 691.548 L1222.45 691.548 L1223.01 691.548 L1223.57 691.548 L1224.13 691.548 L1224.69 691.548 L1225.25 691.548 L1225.81 691.548 L1226.37 691.548 L1226.93 691.548 L1227.49 691.548 L1228.05 691.548 L1228.61 691.548 L1229.17 691.548 L1229.72 691.548 L1230.28 691.548 L1230.84 691.548 L1231.4 691.548 L1231.96 691.548 L1232.52 691.548 L1233.08 691.548 L1233.64 691.548 L1234.2 691.548 L1234.76 691.548 L1235.32 691.548 L1235.88 691.548 L1236.44 691.548 L1236.99 691.548 L1237.55 691.548 L1238.11 691.548 L1238.67 691.548 L1239.23 691.548 L1239.79 691.548 L1240.35 691.548 L1240.91 691.548 L1241.47 691.548 L1242.03 691.548 L1242.59 691.548 L1243.15 691.548 L1243.71 691.548 L1244.26 691.548 L1244.82 691.548 L1245.38 691.548 L1245.94 691.548 L1246.5 691.548 L1247.06 691.548 L1247.62 691.548 L1248.18 691.548 L1248.74 691.548 L1249.3 691.548 L1249.86 691.548 L1250.42 691.548 L1250.98 691.548 L1251.54 691.548 L1252.09 691.548 L1252.65 691.548 L1253.21 691.548 L1253.77 691.548 L1254.33 691.548 L1254.89 691.548 L1255.45 691.548 L1256.01 691.548 L1256.57 691.548 L1257.13 691.548 L1257.69 691.548 L1258.25 691.548 L1258.81 691.548 L1259.36 691.548 L1259.92 691.548 L1260.48 691.548 L1261.04 691.548 L1261.6 691.548 L1262.16 691.548 L1262.72 691.548 L1263.28 691.548 L1263.84 691.548 L1264.4 691.548 L1264.96 691.548 L1265.52 691.548 L1266.08 691.548 L1266.63 691.548 L1267.19 691.548 L1267.75 691.548 L1268.31 691.548 L1268.87 691.548 L1269.43 691.548 L1269.99 691.548 L1270.55 691.548 L1271.11 691.548 L1271.67 691.548 L1272.23 691.548 L1272.79 691.548 L1273.35 691.548 L1273.91 691.548 L1274.46 691.548 L1275.02 691.548 L1275.58 691.548 L1276.14 691.548 L1276.7 691.548 L1277.26 691.548 L1277.82 691.548 L1278.38 691.548 L1278.94 691.548 L1279.5 691.548 L1280.06 691.548 L1280.62 691.548 L1281.18 691.548 L1281.73 691.548 L1282.29 691.548 L1282.85 691.548 L1283.41 691.548 L1283.97 691.548 L1284.53 691.548 L1285.09 691.548 L1285.65 691.548 L1286.21 691.548 L1286.77 691.548 L1287.33 691.548 L1287.89 691.548 L1288.45 691.548 L1289 691.548 L1289.56 691.548 L1290.12 691.548 L1290.68 691.548 L1291.24 691.548 L1291.8 691.548 L1292.36 691.548 L1292.92 691.548 L1293.48 691.548 L1294.04 691.548 L1294.6 691.548 L1295.16 691.548 L1295.72 691.548 L1296.28 691.548 L1296.83 691.548 L1297.39 691.548 L1297.95 691.548 L1298.51 691.548 L1299.07 691.548 L1299.63 691.548 L1300.19 691.548 L1300.75 691.548 L1301.31 691.548 L1301.87 691.548 L1302.43 691.548 L1302.99 691.548 L1303.55 691.548 L1304.1 691.548 L1304.66 691.548 L1305.22 691.548 L1305.78 691.548 L1306.34 691.548 L1306.9 691.548 L1307.46 691.548 L1308.02 691.548 L1308.58 691.548 L1309.14 691.548 L1309.7 691.548 L1310.26 691.548 L1310.82 691.548 L1311.38 691.548 L1311.93 691.548 L1312.49 691.548 L1313.05 691.548 L1313.61 691.548 L1314.17 691.548 L1314.73 691.548 L1315.29 691.548 L1315.85 691.548 L1316.41 691.548 L1316.97 691.548 L1317.53 691.548 L1318.09 691.548 L1318.65 691.548 L1319.2 691.548 L1319.76 691.548 L1320.32 691.548 L1320.88 691.548 L1321.44 691.548 L1322 691.548 L1322.56 691.548 L1323.12 691.548 L1323.68 691.548 L1324.24 691.548 L1324.8 691.548 L1325.36 691.548 L1325.92 691.548 L1326.47 691.548 L1327.03 691.548 L1327.59 691.548 L1328.15 691.548 L1328.71 691.548 L1329.27 691.548 L1329.83 691.548 L1330.39 691.548 L1330.95 691.548 L1331.51 691.548 L1332.07 691.548 L1332.63 691.548 L1333.19 691.548 L1333.75 691.548 L1334.3 691.548 L1334.86 691.548 L1335.42 691.548 L1335.98 691.548 L1336.54 691.548 L1337.1 691.548 L1337.66 691.548 L1338.22 691.548 L1338.78 691.548 L1339.34 691.548 L1339.9 691.548 L1340.46 691.548 L1341.02 691.548 L1341.57 691.548 L1342.13 691.548 L1342.69 691.548 L1343.25 691.548 L1343.81 691.548 L1344.37 691.548 L1344.93 691.548 L1345.49 691.548 L1346.05 691.548 L1346.61 691.548 L1347.17 691.548 L1347.73 691.548 L1348.29 691.548 L1348.84 691.548 L1349.4 691.548 L1349.96 691.548 L1350.52 691.548 L1351.08 691.548 L1351.64 691.548 L1352.2 691.548 L1352.76 691.548 L1353.32 691.548 L1353.88 691.548 L1354.44 691.548 L1355 691.548 L1355.56 691.548 L1356.12 691.548 L1356.67 691.548 L1357.23 691.548 L1357.79 691.548 L1358.35 691.548 L1358.91 691.548 L1359.47 691.548 L1360.03 691.548 L1360.59 691.548 L1361.15 691.548 L1361.71 691.548 L1362.27 691.548 L1362.83 691.548 L1363.39 691.548 L1363.94 691.548 L1364.5 691.548 L1365.06 691.548 L1365.62 691.548 L1366.18 691.548 L1366.74 691.548 L1367.3 691.548 L1367.86 691.548 L1368.42 691.548 L1368.98 691.548 L1369.54 691.548 L1370.1 691.548 L1370.66 691.548 L1371.21 691.548 L1371.77 691.548 L1372.33 691.548 L1372.89 691.548 L1373.45 691.548 L1374.01 691.548 L1374.57 691.548 L1375.13 691.548 L1375.69 691.548 L1376.25 691.548 L1376.81 691.548 L1377.37 691.548 L1377.93 691.548 L1378.49 691.548 L1379.04 691.548 L1379.6 691.548 L1380.16 691.548 L1380.72 691.548 L1381.28 691.548 L1381.84 691.548 L1382.4 691.548 L1382.96 691.548 L1383.52 691.548 L1384.08 691.548 L1384.64 691.548 L1385.2 691.548 L1385.76 691.548 L1386.31 691.548 L1386.87 691.548 L1387.43 691.548 L1387.99 691.548 L1388.55 691.548 L1389.11 691.548 L1389.67 691.548 L1390.23 691.548 L1390.79 691.548 L1391.35 691.548 L1391.91 691.548 L1392.47 691.548 L1393.03 691.548 L1393.58 691.548 L1394.14 691.548 L1394.7 691.548 L1395.26 691.548 L1395.82 691.548 L1396.38 691.548 L1396.94 691.548 L1397.5 691.548 L1398.06 691.548 L1398.62 691.548 L1399.18 691.548 L1399.74 691.548 L1400.3 691.548 L1400.86 691.548 L1401.41 691.548 L1401.97 691.548 L1402.53 691.548 L1403.09 691.548 L1403.65 691.548 L1404.21 691.548 L1404.77 691.548 L1405.33 691.548 L1405.89 691.548 L1406.45 691.548 L1407.01 691.548 L1407.57 691.548 L1408.13 691.548 L1408.68 691.548 L1409.24 691.548 L1409.8 691.548 L1410.36 691.548 L1410.92 691.548 L1411.48 691.548 L1412.04 691.548 L1412.6 691.548 L1413.16 691.548 L1413.72 691.548 L1414.28 691.548 L1414.84 691.548 L1415.4 691.548 L1415.95 691.548 L1416.51 691.548 L1417.07 691.548 L1417.63 691.548 L1418.19 691.548 L1418.75 691.548 L1419.31 691.548 L1419.87 691.548 L1420.43 691.548 L1420.99 691.548 L1421.55 691.548 L1422.11 691.548 L1422.67 691.548 L1423.23 691.548 L1423.78 691.548 L1424.34 691.548 L1424.9 691.548 L1425.46 691.548 L1426.02 691.548 L1426.58 691.548 L1427.14 691.548 L1427.7 691.548 L1428.26 691.548 L1428.82 691.548 L1429.38 691.548 L1429.94 691.548 L1430.5 691.548 L1431.05 691.548 L1431.61 691.548 L1432.17 691.548 L1432.73 691.548 L1433.29 691.548 L1433.85 691.548 L1434.41 691.548 L1434.97 691.548 L1435.53 691.548 L1436.09 691.548 L1436.65 691.548 L1437.21 691.548 L1437.77 691.548 L1438.33 691.548 L1438.88 691.548 L1439.44 691.548 L1440 691.548 L1440.56 691.548 L1441.12 691.548 L1441.68 691.548 L1442.24 691.548 L1442.8 691.548 L1443.36 691.548 L1443.92 691.548 L1444.48 691.548 L1445.04 691.548 L1445.6 691.548 L1446.15 691.548 L1446.71 691.548 L1447.27 691.548 L1447.83 691.548 L1448.39 691.548 L1448.95 691.548 L1449.51 691.548 L1450.07 691.548 L1450.63 691.548 L1451.19 691.548 L1451.75 691.548 L1452.31 691.548 L1452.87 691.548 L1453.42 691.548 L1453.98 691.548 L1454.54 691.548 L1455.1 691.548 L1455.66 691.548 L1456.22 691.548 L1456.78 691.548 L1457.34 691.548 L1457.9 691.548 L1458.46 691.548 L1459.02 691.548 L1459.58 691.548 L1460.14 691.548 L1460.7 691.548 L1461.25 691.548 L1461.81 691.548 L1462.37 691.548 L1462.93 691.548 L1463.49 691.548 L1464.05 691.548 L1464.61 691.548 L1465.17 691.548 L1465.73 691.548 L1466.29 691.548 L1466.85 691.548 L1467.41 691.548 L1467.97 691.548 L1468.52 691.548 L1469.08 691.548 L1469.64 691.548 L1470.2 691.548 L1470.76 691.548 L1471.32 691.548 L1471.88 691.548 L1472.44 691.548 L1473 691.548 L1473.56 691.548 L1474.12 691.548 L1474.68 691.548 L1475.24 691.548 L1475.79 691.548 L1476.35 691.548 L1476.91 691.548 L1477.47 691.548 L1478.03 691.548 L1478.59 691.548 L1479.15 691.548 L1479.71 691.548 L1480.27 691.548 L1480.83 691.548 L1481.39 691.548 L1481.95 691.548 L1482.51 691.548 L1483.07 691.548 L1483.62 691.548 L1484.18 691.548 L1484.74 691.548 L1485.3 691.548 L1485.86 691.548 L1486.42 691.548 L1486.98 691.548 L1487.54 691.548 L1488.1 691.548 L1488.66 691.548 L1489.22 691.548 L1489.78 691.548 L1490.34 691.548 L1490.89 691.548 L1491.45 691.548 L1492.01 691.548 L1492.57 691.548 L1493.13 691.548 L1493.69 691.548 L1494.25 691.548 L1494.81 691.548 L1495.37 691.548 L1495.93 691.548 L1496.49 691.548 L1497.05 691.548 L1497.61 691.548 L1498.16 691.548 L1498.72 691.548 L1499.28 691.548 L1499.84 691.548 L1500.4 691.548 L1500.96 691.548 L1501.52 691.548 L1502.08 691.548 L1502.64 691.548 L1503.2 691.548 L1503.76 691.548 L1504.32 691.548 L1504.88 691.548 L1505.44 691.548 L1505.99 691.548 L1506.55 691.548 L1507.11 691.548 L1507.67 691.548 L1508.23 691.548 L1508.79 691.548 L1509.35 691.548 L1509.91 691.548 L1510.47 691.548 L1511.03 691.548 L1511.59 691.548 L1512.15 691.548 L1512.71 691.548 L1513.26 691.548 L1513.82 691.548 L1514.38 691.548 L1514.94 691.548 L1515.5 691.548 L1516.06 691.548 L1516.62 691.548 L1517.18 691.548 L1517.74 691.548 L1518.3 691.548 L1518.86 691.548 L1519.42 691.548 L1519.98 691.548 L1520.53 691.548 L1521.09 691.548 L1521.65 691.548 L1522.21 691.548 L1522.77 691.548 L1523.33 691.548 L1523.89 691.548 L1524.45 691.548 L1525.01 691.548 L1525.57 691.548 L1526.13 691.548 L1526.69 691.548 L1527.25 691.548 L1527.81 691.548 L1528.36 691.548 L1528.92 691.548 L1529.48 691.548 L1530.04 691.548 L1530.6 691.548 L1531.16 691.548 L1531.72 691.548 L1532.28 691.548 L1532.84 691.548 L1533.4 691.548 L1533.96 691.548 L1534.52 691.548 L1535.08 691.548 L1535.63 691.548 L1536.19 691.548 L1536.75 691.548 L1537.31 691.548 L1537.87 691.548 L1538.43 691.548 L1538.99 691.548 L1539.55 691.548 L1540.11 691.548 L1540.67 691.548 L1541.23 691.548 L1541.79 691.548 L1542.35 691.548 L1542.9 691.548 L1543.46 691.548 L1544.02 691.548 L1544.58 691.548 L1545.14 691.548 L1545.7 691.548 L1546.26 691.548 L1546.82 691.548 L1547.38 691.548 L1547.94 691.548 L1548.5 691.548 L1549.06 691.548 L1549.62 691.548 L1550.18 691.548 L1550.73 691.548 L1551.29 691.548 L1551.85 691.548 L1552.41 691.548 L1552.97 691.548 L1553.53 691.548 L1554.09 691.548 L1554.65 691.548 L1555.21 691.548 L1555.77 691.548 L1556.33 691.548 L1556.89 691.548 L1557.45 691.548 L1558 691.548 L1558.56 691.548 L1559.12 691.548 L1559.68 691.548 L1560.24 691.548 L1560.8 691.548 L1561.36 691.548 L1561.92 691.548 L1562.48 691.548 L1563.04 691.548 L1563.6 691.548 L1564.16 691.548 L1564.72 691.548 L1565.28 691.548 L1565.83 691.548 L1566.39 691.548 L1566.95 691.548 L1567.51 691.548 L1568.07 691.548 L1568.63 691.548 L1569.19 691.548 L1569.75 691.548 L1570.31 691.548 L1570.87 691.548 L1571.43 691.548 L1571.99 691.548 L1572.55 691.548 L1573.1 691.548 L1573.66 691.548 L1574.22 691.548 L1574.78 691.548 L1575.34 691.548 L1575.9 691.548 L1576.46 691.548 L1577.02 691.548 L1577.58 691.548 L1578.14 691.548 L1578.7 691.548 L1579.26 691.548 L1579.82 691.548 L1580.37 691.548 L1580.93 691.548 L1581.49 691.548 L1582.05 691.548 L1582.61 691.548 L1583.17 691.548 L1583.73 691.548 L1584.29 691.548 L1584.85 691.548 L1585.41 691.548 L1585.97 691.548 L1586.53 691.548 L1587.09 691.548 L1587.65 691.548 L1588.2 691.548 L1588.76 691.548 L1589.32 691.548 L1589.88 691.548 L1590.44 691.548 L1591 691.548 L1591.56 691.548 L1592.12 691.548 L1592.68 691.548 L1593.24 691.548 L1593.8 691.548 L1594.36 691.548 L1594.92 691.548 L1595.47 691.548 L1596.03 691.548 L1596.59 691.548 L1597.15 691.548 L1597.71 691.548 L1598.27 691.548 L1598.83 691.548 L1599.39 691.548 L1599.95 691.548 L1600.51 691.548 L1601.07 691.548 L1601.63 691.548 L1602.19 691.548 L1602.74 691.548 L1603.3 691.548 L1603.86 691.548 L1604.42 691.548 L1604.98 691.548 L1605.54 691.548 L1606.1 691.548 L1606.66 691.548 L1607.22 691.548 L1607.78 691.548 L1608.34 691.548 L1608.9 691.548 L1609.46 691.548 L1610.02 691.548 L1610.57 691.548 L1611.13 691.548 L1611.69 691.548 L1612.25 691.548 L1612.81 691.548 L1613.37 691.548 L1613.93 691.548 L1614.49 691.548 L1615.05 691.548 L1615.61 691.548 L1616.17 691.548 L1616.73 691.548 L1617.29 691.548 L1617.84 691.548 L1618.4 691.548 L1618.96 691.548 L1619.52 691.548 L1620.08 691.548 L1620.64 691.548 L1621.2 691.548 L1621.76 691.548 L1622.32 691.548 L1622.88 691.548 L1623.44 691.548 L1624 691.548 L1624.56 691.548 L1625.11 691.548 L1625.67 691.548 L1626.23 691.548 L1626.79 691.548 L1627.35 691.548 L1627.91 691.548 L1628.47 691.548 L1629.03 691.548 L1629.59 691.548 L1630.15 691.548 L1630.71 691.548 L1631.27 691.548 L1631.83 691.548 L1632.39 691.548 L1632.94 691.548 L1633.5 691.548 L1634.06 691.548 L1634.62 691.548 L1635.18 691.548 L1635.74 691.548 L1636.3 691.548 L1636.86 691.548 L1637.42 691.548 L1637.98 691.548 L1638.54 691.548 L1639.1 691.548 L1639.66 691.548 L1640.21 691.548 L1640.77 691.548 L1641.33 691.548 L1641.89 691.548 L1642.45 691.548 L1643.01 691.548 L1643.57 691.548 L1644.13 691.548 L1644.69 691.548 L1645.25 691.548 L1645.81 691.548 L1646.37 691.548 L1646.93 691.548 L1647.48 691.548 L1648.04 691.548 L1648.6 691.548 L1649.16 691.548 L1649.72 691.548 L1650.28 691.548 L1650.84 691.548 L1651.4 691.548 L1651.96 691.548 L1652.52 691.548 L1653.08 691.548 L1653.64 691.548 L1654.2 691.548 L1654.76 691.548 L1655.31 691.548 L1655.87 691.548 L1656.43 691.548 L1656.99 691.548 L1657.55 691.548 L1658.11 691.548 L1658.67 691.548 L1659.23 691.548 L1659.79 691.548 L1660.35 691.548 L1660.91 691.548 L1661.47 691.548 L1662.03 691.548 L1662.58 691.548 L1663.14 691.548 L1663.7 691.548 L1664.26 691.548 L1664.82 691.548 L1665.38 691.548 L1665.94 691.548 L1666.5 691.548 L1667.06 691.548 L1667.62 691.548 L1668.18 691.548 L1668.74 691.548 L1669.3 691.548 L1669.85 691.548 L1670.41 691.548 L1670.97 691.548 L1671.53 691.548 L1672.09 691.548 L1672.65 691.548 L1673.21 691.548 L1673.77 691.548 L1674.33 691.548 L1674.89 691.548 L1675.45 691.548 L1676.01 691.548 L1676.57 691.548 L1677.13 691.548 L1677.68 691.548 L1678.24 691.548 L1678.8 691.548 L1679.36 691.548 L1679.92 691.548 L1680.48 691.548 L1681.04 691.548 L1681.6 691.548 L1682.16 691.548 L1682.72 691.548 L1683.28 691.548 L1683.84 691.548 L1684.4 691.548 L1684.95 691.548 L1685.51 691.548 L1686.07 691.548 L1686.63 691.548 L1687.19 691.548 L1687.75 691.548 L1688.31 691.548 L1688.87 691.548 L1689.43 691.548 L1689.99 691.548 L1690.55 691.548 L1691.11 691.548 L1691.67 691.548 L1692.23 691.548 L1692.78 691.548 L1693.34 691.548 L1693.9 691.548 L1694.46 691.548 L1695.02 691.548 L1695.58 691.548 L1696.14 691.548 L1696.7 691.548 L1697.26 691.548 L1697.82 691.548 L1698.38 691.548 L1698.94 691.548 L1699.5 691.548 L1700.05 691.548 L1700.61 691.548 L1701.17 691.548 L1701.73 691.548 L1702.29 691.548 L1702.85 691.548 L1703.41 691.548 L1703.97 691.548 L1704.53 691.548 L1705.09 691.548 L1705.65 691.548 L1706.21 691.548 L1706.77 691.548 L1707.32 691.548 L1707.88 691.548 L1708.44 691.548 L1709 691.548 L1709.56 691.548 L1710.12 691.548 L1710.68 691.548 L1711.24 691.548 L1711.8 691.548 L1712.36 691.548 L1712.92 691.548 L1713.48 691.548 L1714.04 691.548 L1714.6 691.548 L1715.15 691.548 L1715.71 691.548 L1716.27 691.548 L1716.83 691.548 L1717.39 691.548 L1717.95 691.548 L1718.51 691.548 L1719.07 691.548 L1719.63 691.548 L1720.19 691.548 L1720.75 691.548 L1721.31 691.548 L1721.87 691.548 L1722.42 691.548 L1722.98 691.548 L1723.54 691.548 L1724.1 691.548 L1724.66 691.548 L1725.22 691.548 L1725.78 691.548 L1726.34 691.548 L1726.9 691.548 L1727.46 691.548 L1728.02 691.548 L1728.58 691.548 L1729.14 691.548 L1729.69 691.548 L1730.25 691.548 L1730.81 691.548 L1731.37 691.548 L1731.93 691.548 L1732.49 691.548 L1733.05 691.548 L1733.61 691.548 L1734.17 691.548 L1734.73 691.548 L1735.29 691.548 L1735.85 691.548 L1736.41 691.548 L1736.97 691.548 L1737.52 691.548 L1738.08 691.548 L1738.64 691.548 L1739.2 691.548 L1739.76 691.548 L1740.32 691.548 L1740.88 691.548 L1741.44 691.548 L1742 691.548 L1742.56 691.548 L1743.12 691.548 L1743.68 691.548 L1744.24 691.548 L1744.79 691.548 L1745.35 691.548 L1745.91 691.548 L1746.47 691.548 L1747.03 691.548 L1747.59 691.548 L1748.15 691.548 L1748.71 691.548 L1749.27 691.548 L1749.83 691.548 L1750.39 691.548 L1750.95 691.548 L1751.51 691.548 L1752.06 691.548 L1752.62 691.548 L1753.18 691.548 L1753.74 691.548 L1754.3 691.548 L1754.86 691.548 L1755.42 691.548 L1755.98 691.548 L1756.54 691.548 L1757.1 691.548 L1757.66 691.548 L1758.22 691.548 L1758.78 691.548 L1759.34 691.548 L1759.89 691.548 L1760.45 691.548 L1761.01 691.548 L1761.57 691.548 L1762.13 691.548 L1762.69 691.548 L1763.25 691.548 L1763.81 691.548 L1764.37 691.548 L1764.93 691.548 L1765.49 691.548 L1766.05 691.548 L1766.61 691.548 L1767.16 691.548 L1767.72 691.548 L1768.28 691.548 L1768.84 691.548 L1769.4 691.548 L1769.96 691.548 L1770.52 691.548 L1771.08 691.548 L1771.64 691.548 L1772.2 691.548 L1772.76 691.548 L1773.32 691.548 L1773.88 691.548 L1774.43 691.548 L1774.99 691.548 L1775.55 691.548 L1776.11 691.548 L1776.67 691.548 L1777.23 691.548 L1777.79 691.548 L1778.35 691.548 L1778.91 691.548 L1779.47 691.548 L1780.03 691.548 L1780.59 691.548 L1781.15 691.548 L1781.71 691.548 L1782.26 691.548 L1782.82 691.548 L1783.38 691.548 L1783.94 691.548 L1784.5 691.548 L1785.06 691.548 L1785.62 691.548 L1786.18 691.548 L1786.74 691.548 L1787.3 691.548 L1787.86 691.548 L1788.42 691.548 L1788.98 691.548 L1789.53 691.548 L1790.09 691.548 L1790.65 691.548 L1791.21 691.548 L1791.77 691.548 L1792.33 691.548 L1792.89 691.548 L1793.45 691.548 L1794.01 691.548 L1794.57 691.548 L1795.13 691.548 L1795.69 691.548 L1796.25 691.548 L1796.8 691.548 L1797.36 691.548 L1797.92 691.548 L1798.48 691.548 L1799.04 691.548 L1799.6 691.548 L1800.16 691.548 L1800.72 691.548 L1801.28 691.548 L1801.84 691.548 L1802.4 691.548 L1802.96 691.548 L1803.52 691.548 L1804.08 691.548 L1804.63 691.548 L1805.19 691.548 L1805.75 691.548 L1806.31 691.548 L1806.87 691.548 L1807.43 691.548 L1807.99 691.548 L1808.55 691.548 L1809.11 691.548 L1809.67 691.548 L1810.23 691.548 L1810.79 691.548 L1811.35 691.548 L1811.9 691.548 L1812.46 691.548 L1813.02 691.548 L1813.58 691.548 L1814.14 691.548 L1814.7 691.548 L1815.26 691.548 L1815.82 691.548 L1816.38 691.548 L1816.94 691.548 L1817.5 691.548 L1818.06 691.548 L1818.62 691.548 L1819.18 691.548 L1819.73 691.548 L1820.29 691.548 L1820.85 691.548 L1821.41 691.548 L1821.97 691.548 L1822.53 691.548 L1823.09 691.548 L1823.65 691.548 L1824.21 691.548 L1824.77 691.548 L1825.33 691.548 L1825.89 691.548 L1826.45 691.548 L1827 691.548 L1827.56 691.548 L1828.12 691.548 L1828.68 691.548 L1829.24 691.548 L1829.8 691.548 L1830.36 691.548 L1830.92 691.548 L1831.48 691.548 L1832.04 691.548 L1832.6 691.548 L1833.16 691.548 L1833.72 691.548 L1834.27 691.548 L1834.83 691.548 L1835.39 691.548 L1835.95 691.548 L1836.51 691.548 L1837.07 691.548 L1837.63 691.548 L1838.19 691.548 L1838.19 683.056 L1837.63 683.056 L1837.07 683.056 L1836.51 683.056 L1835.95 683.056 L1835.39 683.056 L1834.83 683.056 L1834.27 683.056 L1833.72 683.056 L1833.16 683.056 L1832.6 683.056 L1832.04 683.056 L1831.48 683.056 L1830.92 683.056 L1830.36 683.056 L1829.8 683.056 L1829.24 683.056 L1828.68 683.056 L1828.12 683.056 L1827.56 683.056 L1827 683.056 L1826.45 683.056 L1825.89 683.056 L1825.33 683.056 L1824.77 683.056 L1824.21 683.056 L1823.65 683.056 L1823.09 683.056 L1822.53 683.056 L1821.97 683.056 L1821.41 683.056 L1820.85 683.056 L1820.29 683.056 L1819.73 683.056 L1819.18 683.056 L1818.62 683.056 L1818.06 683.056 L1817.5 683.056 L1816.94 683.056 L1816.38 683.056 L1815.82 683.056 L1815.26 683.056 L1814.7 683.056 L1814.14 683.056 L1813.58 683.056 L1813.02 683.056 L1812.46 683.056 L1811.9 683.056 L1811.35 683.056 L1810.79 683.056 L1810.23 683.056 L1809.67 683.056 L1809.11 683.056 L1808.55 683.056 L1807.99 683.056 L1807.43 683.056 L1806.87 683.056 L1806.31 683.056 L1805.75 683.056 L1805.19 683.056 L1804.63 683.056 L1804.08 683.056 L1803.52 683.056 L1802.96 683.056 L1802.4 683.056 L1801.84 683.056 L1801.28 683.056 L1800.72 683.056 L1800.16 683.056 L1799.6 683.056 L1799.04 683.056 L1798.48 683.056 L1797.92 683.056 L1797.36 683.056 L1796.8 683.056 L1796.25 683.056 L1795.69 683.056 L1795.13 683.056 L1794.57 683.056 L1794.01 683.056 L1793.45 683.056 L1792.89 683.056 L1792.33 683.056 L1791.77 683.056 L1791.21 683.056 L1790.65 683.056 L1790.09 683.056 L1789.53 683.056 L1788.98 683.056 L1788.42 683.056 L1787.86 683.056 L1787.3 683.056 L1786.74 683.056 L1786.18 683.056 L1785.62 683.056 L1785.06 683.056 L1784.5 683.056 L1783.94 683.056 L1783.38 683.056 L1782.82 683.056 L1782.26 683.056 L1781.71 683.056 L1781.15 683.056 L1780.59 683.056 L1780.03 683.056 L1779.47 683.056 L1778.91 683.056 L1778.35 683.056 L1777.79 683.056 L1777.23 683.056 L1776.67 683.056 L1776.11 683.056 L1775.55 683.056 L1774.99 683.056 L1774.43 683.056 L1773.88 683.056 L1773.32 683.056 L1772.76 683.056 L1772.2 683.056 L1771.64 683.056 L1771.08 683.056 L1770.52 683.056 L1769.96 683.056 L1769.4 683.056 L1768.84 683.056 L1768.28 683.056 L1767.72 683.056 L1767.16 683.056 L1766.61 683.056 L1766.05 683.056 L1765.49 683.056 L1764.93 683.056 L1764.37 683.056 L1763.81 683.056 L1763.25 683.056 L1762.69 683.056 L1762.13 683.056 L1761.57 683.056 L1761.01 683.056 L1760.45 683.056 L1759.89 683.056 L1759.34 683.056 L1758.78 683.056 L1758.22 683.056 L1757.66 683.056 L1757.1 683.056 L1756.54 683.056 L1755.98 683.056 L1755.42 683.056 L1754.86 683.056 L1754.3 683.056 L1753.74 683.056 L1753.18 683.056 L1752.62 683.056 L1752.06 683.056 L1751.51 683.056 L1750.95 683.056 L1750.39 683.056 L1749.83 683.056 L1749.27 683.056 L1748.71 683.056 L1748.15 683.056 L1747.59 683.056 L1747.03 683.056 L1746.47 683.056 L1745.91 683.056 L1745.35 683.056 L1744.79 683.056 L1744.24 683.056 L1743.68 683.056 L1743.12 683.056 L1742.56 683.056 L1742 683.056 L1741.44 683.056 L1740.88 683.056 L1740.32 683.056 L1739.76 683.056 L1739.2 683.056 L1738.64 683.056 L1738.08 683.056 L1737.52 683.056 L1736.97 683.056 L1736.41 683.056 L1735.85 683.056 L1735.29 683.056 L1734.73 683.056 L1734.17 683.056 L1733.61 683.056 L1733.05 683.056 L1732.49 683.056 L1731.93 683.056 L1731.37 683.056 L1730.81 683.056 L1730.25 683.056 L1729.69 683.056 L1729.14 683.056 L1728.58 683.056 L1728.02 683.056 L1727.46 683.056 L1726.9 683.056 L1726.34 683.056 L1725.78 683.056 L1725.22 683.056 L1724.66 683.056 L1724.1 683.056 L1723.54 683.056 L1722.98 683.056 L1722.42 683.056 L1721.87 683.056 L1721.31 683.056 L1720.75 683.056 L1720.19 683.056 L1719.63 683.056 L1719.07 683.056 L1718.51 683.056 L1717.95 683.056 L1717.39 683.056 L1716.83 683.056 L1716.27 683.056 L1715.71 683.056 L1715.15 683.056 L1714.6 683.056 L1714.04 683.056 L1713.48 683.056 L1712.92 683.056 L1712.36 683.056 L1711.8 683.056 L1711.24 683.056 L1710.68 683.056 L1710.12 683.056 L1709.56 683.056 L1709 683.056 L1708.44 683.056 L1707.88 683.056 L1707.32 683.056 L1706.77 683.056 L1706.21 683.056 L1705.65 683.056 L1705.09 683.056 L1704.53 683.056 L1703.97 683.056 L1703.41 683.056 L1702.85 683.056 L1702.29 683.056 L1701.73 683.056 L1701.17 683.056 L1700.61 683.056 L1700.05 683.056 L1699.5 683.056 L1698.94 683.056 L1698.38 683.056 L1697.82 683.056 L1697.26 683.056 L1696.7 683.056 L1696.14 683.056 L1695.58 683.056 L1695.02 683.056 L1694.46 683.056 L1693.9 683.056 L1693.34 683.056 L1692.78 683.056 L1692.23 683.056 L1691.67 683.056 L1691.11 683.056 L1690.55 683.056 L1689.99 683.056 L1689.43 683.056 L1688.87 683.056 L1688.31 683.056 L1687.75 683.056 L1687.19 683.056 L1686.63 683.056 L1686.07 683.056 L1685.51 683.056 L1684.95 683.056 L1684.4 683.056 L1683.84 683.056 L1683.28 683.056 L1682.72 683.056 L1682.16 683.056 L1681.6 683.056 L1681.04 683.056 L1680.48 683.056 L1679.92 683.056 L1679.36 683.056 L1678.8 683.056 L1678.24 683.056 L1677.68 683.056 L1677.13 683.056 L1676.57 683.056 L1676.01 683.056 L1675.45 683.056 L1674.89 683.056 L1674.33 683.056 L1673.77 683.056 L1673.21 683.056 L1672.65 683.056 L1672.09 683.056 L1671.53 683.056 L1670.97 683.056 L1670.41 683.056 L1669.85 683.056 L1669.3 683.056 L1668.74 683.056 L1668.18 683.056 L1667.62 683.056 L1667.06 683.056 L1666.5 683.056 L1665.94 683.056 L1665.38 683.056 L1664.82 683.056 L1664.26 683.056 L1663.7 683.056 L1663.14 683.056 L1662.58 683.056 L1662.03 683.056 L1661.47 683.056 L1660.91 683.056 L1660.35 683.056 L1659.79 683.056 L1659.23 683.056 L1658.67 683.056 L1658.11 683.056 L1657.55 683.056 L1656.99 683.056 L1656.43 683.056 L1655.87 683.056 L1655.31 683.056 L1654.76 683.056 L1654.2 683.056 L1653.64 683.056 L1653.08 683.056 L1652.52 683.056 L1651.96 683.056 L1651.4 683.056 L1650.84 683.056 L1650.28 683.056 L1649.72 683.056 L1649.16 683.056 L1648.6 683.056 L1648.04 683.056 L1647.48 683.056 L1646.93 683.056 L1646.37 683.056 L1645.81 683.056 L1645.25 683.056 L1644.69 683.056 L1644.13 683.056 L1643.57 683.056 L1643.01 683.056 L1642.45 683.056 L1641.89 683.056 L1641.33 683.056 L1640.77 683.056 L1640.21 683.056 L1639.66 683.056 L1639.1 683.056 L1638.54 683.056 L1637.98 683.056 L1637.42 683.056 L1636.86 683.056 L1636.3 683.056 L1635.74 683.056 L1635.18 683.056 L1634.62 683.056 L1634.06 683.056 L1633.5 683.056 L1632.94 683.056 L1632.39 683.056 L1631.83 683.056 L1631.27 683.056 L1630.71 683.056 L1630.15 683.056 L1629.59 683.056 L1629.03 683.056 L1628.47 683.056 L1627.91 683.056 L1627.35 683.056 L1626.79 683.056 L1626.23 683.056 L1625.67 683.056 L1625.11 683.056 L1624.56 683.056 L1624 683.056 L1623.44 683.056 L1622.88 683.056 L1622.32 683.056 L1621.76 683.056 L1621.2 683.056 L1620.64 683.056 L1620.08 683.056 L1619.52 683.056 L1618.96 683.056 L1618.4 683.056 L1617.84 683.056 L1617.29 683.056 L1616.73 683.056 L1616.17 683.056 L1615.61 683.056 L1615.05 683.056 L1614.49 683.056 L1613.93 683.056 L1613.37 683.056 L1612.81 683.056 L1612.25 683.056 L1611.69 683.056 L1611.13 683.056 L1610.57 683.056 L1610.02 683.056 L1609.46 683.056 L1608.9 683.056 L1608.34 683.056 L1607.78 683.056 L1607.22 683.056 L1606.66 683.056 L1606.1 683.056 L1605.54 683.056 L1604.98 683.056 L1604.42 683.056 L1603.86 683.056 L1603.3 683.056 L1602.74 683.056 L1602.19 683.056 L1601.63 683.056 L1601.07 683.056 L1600.51 683.056 L1599.95 683.056 L1599.39 683.056 L1598.83 683.056 L1598.27 683.056 L1597.71 683.056 L1597.15 683.056 L1596.59 683.056 L1596.03 683.056 L1595.47 683.056 L1594.92 683.056 L1594.36 683.056 L1593.8 683.056 L1593.24 683.056 L1592.68 683.056 L1592.12 683.056 L1591.56 683.056 L1591 683.056 L1590.44 683.056 L1589.88 683.056 L1589.32 683.056 L1588.76 683.056 L1588.2 683.056 L1587.65 683.056 L1587.09 683.056 L1586.53 683.056 L1585.97 683.056 L1585.41 683.056 L1584.85 683.056 L1584.29 683.056 L1583.73 683.056 L1583.17 683.056 L1582.61 683.056 L1582.05 683.056 L1581.49 683.056 L1580.93 683.056 L1580.37 683.056 L1579.82 683.056 L1579.26 683.056 L1578.7 683.056 L1578.14 683.056 L1577.58 683.056 L1577.02 683.056 L1576.46 683.056 L1575.9 683.056 L1575.34 683.056 L1574.78 683.056 L1574.22 683.056 L1573.66 683.056 L1573.1 683.056 L1572.55 683.056 L1571.99 683.056 L1571.43 683.056 L1570.87 683.056 L1570.31 683.056 L1569.75 683.056 L1569.19 683.056 L1568.63 683.056 L1568.07 683.056 L1567.51 683.056 L1566.95 683.056 L1566.39 683.056 L1565.83 683.056 L1565.28 683.056 L1564.72 683.056 L1564.16 683.056 L1563.6 683.056 L1563.04 683.056 L1562.48 683.056 L1561.92 683.056 L1561.36 683.056 L1560.8 683.056 L1560.24 683.056 L1559.68 683.056 L1559.12 683.056 L1558.56 683.056 L1558 683.056 L1557.45 683.056 L1556.89 683.056 L1556.33 683.056 L1555.77 683.056 L1555.21 683.056 L1554.65 683.056 L1554.09 683.056 L1553.53 683.056 L1552.97 683.056 L1552.41 683.056 L1551.85 683.056 L1551.29 683.056 L1550.73 683.056 L1550.18 683.056 L1549.62 683.056 L1549.06 683.056 L1548.5 683.056 L1547.94 683.056 L1547.38 683.056 L1546.82 683.056 L1546.26 683.056 L1545.7 683.056 L1545.14 683.056 L1544.58 683.056 L1544.02 683.056 L1543.46 683.056 L1542.9 683.056 L1542.35 683.056 L1541.79 683.056 L1541.23 683.056 L1540.67 683.056 L1540.11 683.056 L1539.55 683.056 L1538.99 683.056 L1538.43 683.056 L1537.87 683.056 L1537.31 683.056 L1536.75 683.056 L1536.19 683.056 L1535.63 683.056 L1535.08 683.056 L1534.52 683.056 L1533.96 683.056 L1533.4 683.056 L1532.84 683.056 L1532.28 683.056 L1531.72 683.056 L1531.16 683.056 L1530.6 683.056 L1530.04 683.056 L1529.48 683.056 L1528.92 683.056 L1528.36 683.056 L1527.81 683.056 L1527.25 683.056 L1526.69 683.056 L1526.13 683.056 L1525.57 683.056 L1525.01 683.056 L1524.45 683.056 L1523.89 683.056 L1523.33 683.056 L1522.77 683.056 L1522.21 683.056 L1521.65 683.056 L1521.09 683.056 L1520.53 683.056 L1519.98 683.056 L1519.42 683.056 L1518.86 683.056 L1518.3 683.056 L1517.74 683.056 L1517.18 683.056 L1516.62 683.056 L1516.06 683.056 L1515.5 683.056 L1514.94 683.056 L1514.38 683.056 L1513.82 683.056 L1513.26 683.056 L1512.71 683.056 L1512.15 683.056 L1511.59 683.056 L1511.03 683.056 L1510.47 683.056 L1509.91 683.056 L1509.35 683.056 L1508.79 683.056 L1508.23 683.056 L1507.67 683.056 L1507.11 683.056 L1506.55 683.056 L1505.99 683.056 L1505.44 683.056 L1504.88 683.056 L1504.32 683.056 L1503.76 683.056 L1503.2 683.056 L1502.64 683.056 L1502.08 683.056 L1501.52 683.056 L1500.96 683.056 L1500.4 683.056 L1499.84 683.056 L1499.28 683.056 L1498.72 683.056 L1498.16 683.056 L1497.61 683.056 L1497.05 683.056 L1496.49 683.056 L1495.93 683.056 L1495.37 683.056 L1494.81 683.056 L1494.25 683.056 L1493.69 683.056 L1493.13 683.056 L1492.57 683.056 L1492.01 683.056 L1491.45 683.056 L1490.89 683.056 L1490.34 683.056 L1489.78 683.056 L1489.22 683.056 L1488.66 683.056 L1488.1 683.056 L1487.54 683.056 L1486.98 683.056 L1486.42 683.056 L1485.86 683.056 L1485.3 683.056 L1484.74 683.056 L1484.18 683.056 L1483.62 683.056 L1483.07 683.056 L1482.51 683.056 L1481.95 683.056 L1481.39 683.056 L1480.83 683.056 L1480.27 683.056 L1479.71 683.056 L1479.15 683.056 L1478.59 683.056 L1478.03 683.056 L1477.47 683.056 L1476.91 683.056 L1476.35 683.056 L1475.79 683.056 L1475.24 683.056 L1474.68 683.056 L1474.12 683.056 L1473.56 683.056 L1473 683.056 L1472.44 683.056 L1471.88 683.056 L1471.32 683.056 L1470.76 683.056 L1470.2 683.056 L1469.64 683.056 L1469.08 683.056 L1468.52 683.056 L1467.97 683.056 L1467.41 683.056 L1466.85 683.056 L1466.29 683.056 L1465.73 683.056 L1465.17 683.056 L1464.61 683.056 L1464.05 683.056 L1463.49 683.056 L1462.93 683.056 L1462.37 683.056 L1461.81 683.056 L1461.25 683.056 L1460.7 683.056 L1460.14 683.056 L1459.58 683.056 L1459.02 683.056 L1458.46 683.056 L1457.9 683.056 L1457.34 683.056 L1456.78 683.056 L1456.22 683.056 L1455.66 683.056 L1455.1 683.056 L1454.54 683.056 L1453.98 683.056 L1453.42 683.056 L1452.87 683.056 L1452.31 683.056 L1451.75 683.056 L1451.19 683.056 L1450.63 683.056 L1450.07 683.056 L1449.51 683.056 L1448.95 683.056 L1448.39 683.056 L1447.83 683.056 L1447.27 683.056 L1446.71 683.056 L1446.15 683.056 L1445.6 683.056 L1445.04 683.056 L1444.48 683.056 L1443.92 683.056 L1443.36 683.056 L1442.8 683.056 L1442.24 683.056 L1441.68 683.056 L1441.12 683.056 L1440.56 683.056 L1440 683.056 L1439.44 683.056 L1438.88 683.056 L1438.33 683.056 L1437.77 683.056 L1437.21 683.056 L1436.65 683.056 L1436.09 683.056 L1435.53 683.056 L1434.97 683.056 L1434.41 683.056 L1433.85 683.056 L1433.29 683.056 L1432.73 683.056 L1432.17 683.056 L1431.61 683.056 L1431.05 683.056 L1430.5 683.056 L1429.94 683.056 L1429.38 683.056 L1428.82 683.056 L1428.26 683.056 L1427.7 683.056 L1427.14 683.056 L1426.58 683.056 L1426.02 683.056 L1425.46 683.056 L1424.9 683.056 L1424.34 683.056 L1423.78 683.056 L1423.23 683.056 L1422.67 683.056 L1422.11 683.056 L1421.55 683.056 L1420.99 683.056 L1420.43 683.056 L1419.87 683.056 L1419.31 683.056 L1418.75 683.056 L1418.19 683.056 L1417.63 683.056 L1417.07 683.056 L1416.51 683.056 L1415.95 683.056 L1415.4 683.056 L1414.84 683.056 L1414.28 683.056 L1413.72 683.056 L1413.16 683.056 L1412.6 683.056 L1412.04 683.056 L1411.48 683.056 L1410.92 683.056 L1410.36 683.056 L1409.8 683.056 L1409.24 683.056 L1408.68 683.056 L1408.13 683.056 L1407.57 683.056 L1407.01 683.056 L1406.45 683.056 L1405.89 683.056 L1405.33 683.056 L1404.77 683.056 L1404.21 683.056 L1403.65 683.056 L1403.09 683.056 L1402.53 683.056 L1401.97 683.056 L1401.41 683.056 L1400.86 683.056 L1400.3 683.056 L1399.74 683.056 L1399.18 683.056 L1398.62 683.056 L1398.06 683.056 L1397.5 683.056 L1396.94 683.056 L1396.38 683.056 L1395.82 683.056 L1395.26 683.056 L1394.7 683.056 L1394.14 683.056 L1393.58 683.056 L1393.03 683.056 L1392.47 683.056 L1391.91 683.056 L1391.35 683.056 L1390.79 683.056 L1390.23 683.056 L1389.67 683.056 L1389.11 683.056 L1388.55 683.056 L1387.99 683.056 L1387.43 683.056 L1386.87 683.056 L1386.31 683.056 L1385.76 683.056 L1385.2 683.056 L1384.64 683.056 L1384.08 683.056 L1383.52 683.056 L1382.96 683.056 L1382.4 683.056 L1381.84 683.056 L1381.28 683.056 L1380.72 683.056 L1380.16 683.056 L1379.6 683.056 L1379.04 683.056 L1378.49 683.056 L1377.93 683.056 L1377.37 683.056 L1376.81 683.056 L1376.25 683.056 L1375.69 683.056 L1375.13 683.056 L1374.57 683.056 L1374.01 683.056 L1373.45 683.056 L1372.89 683.056 L1372.33 683.056 L1371.77 683.056 L1371.21 683.056 L1370.66 683.056 L1370.1 683.056 L1369.54 683.056 L1368.98 683.056 L1368.42 683.056 L1367.86 683.056 L1367.3 683.056 L1366.74 683.056 L1366.18 683.056 L1365.62 683.056 L1365.06 683.056 L1364.5 683.056 L1363.94 683.056 L1363.39 683.056 L1362.83 683.056 L1362.27 683.056 L1361.71 683.056 L1361.15 683.056 L1360.59 683.056 L1360.03 683.056 L1359.47 683.056 L1358.91 683.056 L1358.35 683.056 L1357.79 683.056 L1357.23 683.056 L1356.67 683.056 L1356.12 683.056 L1355.56 683.056 L1355 683.056 L1354.44 683.056 L1353.88 683.056 L1353.32 683.056 L1352.76 683.056 L1352.2 683.056 L1351.64 683.056 L1351.08 683.056 L1350.52 683.056 L1349.96 683.056 L1349.4 683.056 L1348.84 683.056 L1348.29 683.056 L1347.73 683.056 L1347.17 683.056 L1346.61 683.056 L1346.05 683.056 L1345.49 683.056 L1344.93 683.056 L1344.37 683.056 L1343.81 683.056 L1343.25 683.056 L1342.69 683.056 L1342.13 683.056 L1341.57 683.056 L1341.02 683.056 L1340.46 683.056 L1339.9 683.056 L1339.34 683.056 L1338.78 683.056 L1338.22 683.056 L1337.66 683.056 L1337.1 683.056 L1336.54 683.056 L1335.98 683.056 L1335.42 683.056 L1334.86 683.056 L1334.3 683.056 L1333.75 683.056 L1333.19 683.056 L1332.63 683.056 L1332.07 683.056 L1331.51 683.056 L1330.95 683.056 L1330.39 683.056 L1329.83 683.056 L1329.27 683.056 L1328.71 683.056 L1328.15 683.056 L1327.59 683.056 L1327.03 683.056 L1326.47 683.056 L1325.92 683.056 L1325.36 683.056 L1324.8 683.056 L1324.24 683.056 L1323.68 683.056 L1323.12 683.056 L1322.56 683.056 L1322 683.056 L1321.44 683.056 L1320.88 683.056 L1320.32 683.056 L1319.76 683.056 L1319.2 683.056 L1318.65 683.056 L1318.09 683.056 L1317.53 683.056 L1316.97 683.056 L1316.41 683.056 L1315.85 683.056 L1315.29 683.056 L1314.73 683.056 L1314.17 683.056 L1313.61 683.056 L1313.05 683.056 L1312.49 683.056 L1311.93 683.056 L1311.38 683.056 L1310.82 683.056 L1310.26 683.056 L1309.7 683.056 L1309.14 683.056 L1308.58 683.056 L1308.02 683.056 L1307.46 683.056 L1306.9 683.056 L1306.34 683.056 L1305.78 683.056 L1305.22 683.056 L1304.66 683.056 L1304.1 683.056 L1303.55 683.056 L1302.99 683.056 L1302.43 683.056 L1301.87 683.056 L1301.31 683.056 L1300.75 683.056 L1300.19 683.056 L1299.63 683.056 L1299.07 683.056 L1298.51 683.056 L1297.95 683.056 L1297.39 683.056 L1296.83 683.056 L1296.28 683.056 L1295.72 683.056 L1295.16 683.056 L1294.6 683.056 L1294.04 683.056 L1293.48 683.056 L1292.92 683.056 L1292.36 683.056 L1291.8 683.056 L1291.24 683.056 L1290.68 683.056 L1290.12 683.056 L1289.56 683.056 L1289 683.056 L1288.45 683.056 L1287.89 683.056 L1287.33 683.056 L1286.77 683.056 L1286.21 683.056 L1285.65 683.056 L1285.09 683.056 L1284.53 683.056 L1283.97 683.056 L1283.41 683.056 L1282.85 683.056 L1282.29 683.056 L1281.73 683.056 L1281.18 683.056 L1280.62 683.056 L1280.06 683.056 L1279.5 683.056 L1278.94 683.056 L1278.38 683.056 L1277.82 683.056 L1277.26 683.056 L1276.7 683.056 L1276.14 683.056 L1275.58 683.056 L1275.02 683.056 L1274.46 683.056 L1273.91 683.056 L1273.35 683.056 L1272.79 683.056 L1272.23 683.056 L1271.67 683.056 L1271.11 683.056 L1270.55 683.056 L1269.99 683.056 L1269.43 683.056 L1268.87 683.056 L1268.31 683.056 L1267.75 683.056 L1267.19 683.056 L1266.63 683.056 L1266.08 683.056 L1265.52 683.056 L1264.96 683.056 L1264.4 683.056 L1263.84 683.056 L1263.28 683.056 L1262.72 683.056 L1262.16 683.056 L1261.6 683.056 L1261.04 683.056 L1260.48 683.056 L1259.92 683.056 L1259.36 683.056 L1258.81 683.056 L1258.25 683.056 L1257.69 683.056 L1257.13 683.056 L1256.57 683.056 L1256.01 683.056 L1255.45 683.056 L1254.89 683.056 L1254.33 683.056 L1253.77 683.056 L1253.21 683.056 L1252.65 683.056 L1252.09 683.056 L1251.54 683.056 L1250.98 683.056 L1250.42 683.056 L1249.86 683.056 L1249.3 683.056 L1248.74 683.056 L1248.18 683.056 L1247.62 683.056 L1247.06 683.056 L1246.5 683.056 L1245.94 683.056 L1245.38 683.056 L1244.82 683.056 L1244.26 683.056 L1243.71 683.056 L1243.15 683.056 L1242.59 683.056 L1242.03 683.056 L1241.47 683.056 L1240.91 683.056 L1240.35 683.056 L1239.79 683.056 L1239.23 683.056 L1238.67 683.056 L1238.11 683.056 L1237.55 683.056 L1236.99 683.056 L1236.44 683.056 L1235.88 683.056 L1235.32 683.056 L1234.76 683.056 L1234.2 683.056 L1233.64 683.056 L1233.08 683.056 L1232.52 683.056 L1231.96 683.056 L1231.4 683.056 L1230.84 683.056 L1230.28 683.056 L1229.72 683.056 L1229.17 683.056 L1228.61 683.056 L1228.05 683.056 L1227.49 683.056 L1226.93 683.056 L1226.37 683.056 L1225.81 683.056 L1225.25 683.056 L1224.69 683.056 L1224.13 683.056 L1223.57 683.056 L1223.01 683.056 L1222.45 683.056 L1221.89 683.056 L1221.34 683.056 L1220.78 683.056 L1220.22 683.056 L1219.66 683.056 L1219.1 683.056 L1218.54 683.056 L1217.98 683.056 L1217.42 683.056 L1216.86 683.056 L1216.3 683.056 L1215.74 683.056 L1215.18 683.056 L1214.62 683.056 L1214.07 683.056 L1213.51 683.056 L1212.95 683.056 L1212.39 683.056 L1211.83 683.056 L1211.27 683.056 L1210.71 683.056 L1210.15 683.056 L1209.59 683.056 L1209.03 683.056 L1208.47 683.056 L1207.91 683.056 L1207.35 683.056 L1206.8 683.056 L1206.24 683.056 L1205.68 683.056 L1205.12 683.056 L1204.56 683.056 L1204 683.056 L1203.44 683.056 L1202.88 683.056 L1202.32 683.056 L1201.76 683.056 L1201.2 683.056 L1200.64 683.056 L1200.08 683.056 L1199.52 683.056 L1198.97 683.056 L1198.41 683.056 L1197.85 683.056 L1197.29 683.056 L1196.73 683.056 L1196.17 683.056 L1195.61 683.056 L1195.05 683.056 L1194.49 683.056 L1193.93 683.056 L1193.37 683.056 L1192.81 683.056 L1192.25 683.056 L1191.7 683.056 L1191.14 683.056 L1190.58 683.056 L1190.02 683.056 L1189.46 683.056 L1188.9 683.056 L1188.34 683.056 L1187.78 683.056 L1187.22 683.056 L1186.66 683.056 L1186.1 683.056 L1185.54 683.056 L1184.98 683.056 L1184.43 683.056 L1183.87 683.056 L1183.31 683.056 L1182.75 683.056 L1182.19 683.056 L1181.63 683.056 L1181.07 683.056 L1180.51 683.056 L1179.95 683.056 L1179.39 683.056 L1178.83 683.056 L1178.27 683.056 L1177.71 683.056 L1177.15 683.056 L1176.6 683.056 L1176.04 683.056 L1175.48 683.056 L1174.92 683.056 L1174.36 683.056 L1173.8 683.056 L1173.24 683.056 L1172.68 683.056 L1172.12 683.056 L1171.56 683.056 L1171 683.056 L1170.44 683.056 L1169.88 683.056 L1169.33 683.056 L1168.77 683.056 L1168.21 683.056 L1167.65 683.056 L1167.09 683.056 L1166.53 683.056 L1165.97 683.056 L1165.41 683.056 L1164.85 683.056 L1164.29 683.056 L1163.73 683.056 L1163.17 683.056 L1162.61 683.056 L1162.05 683.056 L1161.5 683.056 L1160.94 683.056 L1160.38 683.056 L1159.82 683.056 L1159.26 683.056 L1158.7 683.056 L1158.14 683.056 L1157.58 683.056 L1157.02 683.056 L1156.46 683.056 L1155.9 683.056 L1155.34 683.056 L1154.78 683.056 L1154.23 683.056 L1153.67 683.056 L1153.11 683.056 L1152.55 683.056 L1151.99 683.056 L1151.43 683.056 L1150.87 683.056 L1150.31 683.056 L1149.75 683.056 L1149.19 683.056 L1148.63 683.056 L1148.07 683.056 L1147.51 683.056 L1146.96 683.056 L1146.4 683.056 L1145.84 683.056 L1145.28 683.056 L1144.72 683.056 L1144.16 683.056 L1143.6 683.056 L1143.04 683.056 L1142.48 683.056 L1141.92 683.056 L1141.36 683.056 L1140.8 683.056 L1140.24 683.056 L1139.68 683.056 L1139.13 683.056 L1138.57 683.056 L1138.01 683.056 L1137.45 683.056 L1136.89 683.056 L1136.33 683.056 L1135.77 683.056 L1135.21 683.056 L1134.65 683.056 L1134.09 683.056 L1133.53 683.056 L1132.97 683.056 L1132.41 683.056 L1131.86 683.056 L1131.3 683.056 L1130.74 683.056 L1130.18 683.056 L1129.62 683.056 L1129.06 683.056 L1128.5 683.056 L1127.94 683.056 L1127.38 683.056 L1126.82 683.056 L1126.26 683.056 L1125.7 683.056 L1125.14 683.056 L1124.59 683.056 L1124.03 683.056 L1123.47 683.056 L1122.91 683.056 L1122.35 683.056 L1121.79 683.056 L1121.23 683.056 L1120.67 683.056 L1120.11 683.056 L1119.55 683.056 L1118.99 683.056 L1118.43 683.056 L1117.87 683.056 L1117.31 683.056 L1116.76 683.056 L1116.2 683.056 L1115.64 683.056 L1115.08 683.056 L1114.52 683.056 L1113.96 683.056 L1113.4 683.056 L1112.84 683.056 L1112.28 683.056 L1111.72 683.056 L1111.16 683.056 L1110.6 683.056 L1110.04 683.056 L1109.49 683.056 L1108.93 683.056 L1108.37 683.056 L1107.81 683.056 L1107.25 683.056 L1106.69 683.056 L1106.13 683.056 L1105.57 683.056 L1105.01 683.056 L1104.45 683.056 L1103.89 683.056 L1103.33 683.056 L1102.77 683.056 L1102.22 683.056 L1101.66 683.056 L1101.1 683.056 L1100.54 683.056 L1099.98 683.056 L1099.42 683.056 L1098.86 683.056 L1098.3 683.056 L1097.74 683.056 L1097.18 683.056 L1096.62 683.056 L1096.06 683.056 L1095.5 683.056 L1094.94 683.056 L1094.39 683.056 L1093.83 683.056 L1093.27 683.056 L1092.71 683.056 L1092.15 683.056 L1091.59 683.056 L1091.03 683.056 L1090.47 683.056 L1089.91 683.056 L1089.35 683.056 L1088.79 683.056 L1088.23 683.056 L1087.67 683.056 L1087.12 683.056 L1086.56 683.056 L1086 683.056 L1085.44 683.056 L1084.88 683.056 L1084.32 683.056 L1083.76 683.056 L1083.2 683.056 L1082.64 683.056 L1082.08 683.056 L1081.52 683.056 L1080.96 683.056 L1080.4 683.056 L1079.85 683.056 L1079.29 683.056 L1078.73 683.056 L1078.17 683.056 L1077.61 683.056 L1077.05 683.056 L1076.49 683.056 L1075.93 683.056 L1075.37 683.056 L1074.81 683.056 L1074.25 683.056 L1073.69 683.056 L1073.13 683.056 L1072.57 683.056 L1072.02 683.056 L1071.46 683.056 L1070.9 683.056 L1070.34 683.056 L1069.78 683.056 L1069.22 683.056 L1068.66 683.056 L1068.1 683.056 L1067.54 683.056 L1066.98 683.056 L1066.42 683.056 L1065.86 683.056 L1065.3 683.056 L1064.75 683.056 L1064.19 683.056 L1063.63 683.056 L1063.07 683.056 L1062.51 683.056 L1061.95 683.056 L1061.39 683.056 L1060.83 683.056 L1060.27 683.056 L1059.71 683.056 L1059.15 683.056 L1058.59 683.056 L1058.03 683.056 L1057.48 683.056 L1056.92 683.056 L1056.36 683.056 L1055.8 683.056 L1055.24 683.056 L1054.68 683.056 L1054.12 683.056 L1053.56 683.056 L1053 683.056 L1052.44 683.056 L1051.88 683.056 L1051.32 683.056 L1050.76 683.056 L1050.2 683.056 L1049.65 683.056 L1049.09 683.056 L1048.53 683.056 L1047.97 683.056 L1047.41 683.056 L1046.85 683.056 L1046.29 683.056 L1045.73 683.056 L1045.17 683.056 L1044.61 683.056 L1044.05 683.056 L1043.49 683.056 L1042.93 683.056 L1042.38 683.056 L1041.82 683.056 L1041.26 683.056 L1040.7 683.056 L1040.14 683.056 L1039.58 683.056 L1039.02 683.056 L1038.46 683.056 L1037.9 683.056 L1037.34 683.056 L1036.78 683.056 L1036.22 683.056 L1035.66 683.056 L1035.1 683.056 L1034.55 683.056 L1033.99 683.056 L1033.43 683.056 L1032.87 683.056 L1032.31 683.056 L1031.75 683.056 L1031.19 683.056 L1030.63 683.056 L1030.07 683.056 L1029.51 683.056 L1028.95 683.056 L1028.39 683.056 L1027.83 683.056 L1027.28 683.056 L1026.72 683.056 L1026.16 683.056 L1025.6 683.056 L1025.04 683.056 L1024.48 683.056 L1023.92 683.056 L1023.36 683.056 L1022.8 683.056 L1022.24 683.056 L1021.68 683.056 L1021.12 683.056 L1020.56 683.056 L1020.01 683.056 L1019.45 683.056 L1018.89 683.056 L1018.33 683.056 L1017.77 683.056 L1017.21 683.056 L1016.65 683.056 L1016.09 683.056 L1015.53 683.056 L1014.97 683.056 L1014.41 683.056 L1013.85 683.056 L1013.29 683.056 L1012.73 683.056 L1012.18 683.056 L1011.62 683.056 L1011.06 683.056 L1010.5 683.056 L1009.94 683.056 L1009.38 683.056 L1008.82 683.056 L1008.26 683.056 L1007.7 683.056 L1007.14 683.056 L1006.58 683.056 L1006.02 683.056 L1005.46 683.056 L1004.91 683.056 L1004.35 683.056 L1003.79 683.056 L1003.23 683.056 L1002.67 683.056 L1002.11 683.056 L1001.55 683.056 L1000.99 683.056 L1000.43 683.056 L999.872 683.056 L999.313 683.056 L998.754 683.056 L998.194 683.056 L997.635 683.056 L997.076 683.056 L996.517 683.056 L995.957 683.056 L995.398 683.056 L994.839 683.056 L994.28 683.056 L993.72 683.056 L993.161 683.056 L992.602 683.056 L992.043 683.056 L991.483 683.056 L990.924 683.056 L990.365 683.056 L989.806 683.056 L989.246 683.056 L988.687 683.056 L988.128 683.056 L987.569 683.056 L987.009 683.056 L986.45 683.056 L985.891 683.056 L985.332 683.056 L984.772 683.056 L984.213 683.056 L983.654 683.056 L983.095 683.056 L982.535 683.056 L981.976 683.056 L981.417 683.056 L980.858 683.056 L980.298 683.056 L979.739 683.056 L979.18 683.056 L978.621 683.056 L978.061 683.056 L977.502 683.056 L976.943 683.056 L976.384 683.056 L975.824 683.056 L975.265 683.056 L974.706 683.056 L974.147 683.056 L973.587 683.056 L973.028 683.056 L972.469 683.056 L971.91 683.056 L971.35 683.056 L970.791 683.056 L970.232 683.056 L969.673 683.056 L969.113 683.056 L968.554 683.056 L967.995 683.056 L967.436 683.056 L966.876 683.056 L966.317 683.056 L965.758 683.056 L965.199 683.056 L964.639 683.056 L964.08 683.056 L963.521 683.056 L962.962 683.056 L962.402 683.056 L961.843 683.056 L961.284 683.056 L960.725 683.056 L960.165 683.056 L959.606 683.056 L959.047 683.056 L958.488 683.056 L957.928 683.056 L957.369 683.056 L956.81 683.056 L956.251 683.056 L955.691 683.056 L955.132 683.056 L954.573 683.056 L954.014 683.056 L953.454 683.056 L952.895 683.056 L952.336 683.056 L951.777 683.056 L951.217 683.056 L950.658 683.056 L950.099 683.056 L949.54 683.056 L948.98 683.056 L948.421 683.056 L947.862 683.056 L947.303 683.056 L946.743 683.056 L946.184 683.056 L945.625 683.056 L945.066 683.056 L944.506 683.056 L943.947 683.056 L943.388 683.056 L942.829 683.056 L942.269 683.056 L941.71 683.056 L941.151 683.056 L940.592 683.056 L940.032 683.056 L939.473 683.056 L938.914 683.056 L938.355 683.056 L937.795 683.056 L937.236 683.056 L936.677 683.056 L936.118 683.056 L935.558 683.056 L934.999 683.056 L934.44 683.056 L933.881 683.056 L933.321 683.056 L932.762 683.056 L932.203 683.056 L931.644 683.056 L931.084 683.056 L930.525 683.056 L929.966 683.056 L929.406 683.056 L928.847 683.056 L928.288 683.056 L927.729 683.056 L927.169 683.056 L926.61 683.056 L926.051 683.056 L925.492 683.056 L924.932 683.056 L924.373 683.056 L923.814 683.056 L923.255 683.056 L922.695 683.056 L922.136 683.056 L921.577 683.056 L921.018 683.056 L920.458 683.056 L919.899 683.056 L919.34 683.056 L918.781 683.056 L918.221 683.056 L917.662 683.056 L917.103 683.056 L916.544 683.056 L915.984 683.056 L915.425 683.056 L914.866 683.056 L914.307 683.056 L913.747 683.056 L913.188 683.056 L912.629 683.056 L912.07 683.056 L911.51 683.056 L910.951 683.056 L910.392 683.056 L909.833 683.056 L909.273 683.056 L908.714 683.056 L908.155 683.056 L907.596 683.056 L907.036 683.056 L906.477 683.056 L905.918 683.056 L905.359 683.056 L904.799 683.056 L904.24 683.056 L903.681 683.056 L903.122 683.056 L902.562 683.056 L902.003 683.056 L901.444 683.056 L900.885 683.056 L900.325 683.056 L899.766 683.056 L899.207 683.056 L898.648 683.056 L898.088 683.056 L897.529 683.056 L896.97 683.056 L896.411 683.056 L895.851 683.056 L895.292 683.056 L894.733 683.056 L894.174 683.056 L893.614 683.056 L893.055 683.056 L892.496 683.056 L891.937 683.056 L891.377 683.056 L890.818 683.056 L890.259 683.056 L889.7 683.056 L889.14 683.056 L888.581 683.056 L888.022 683.056 L887.463 683.056 L886.903 683.056 L886.344 683.056 L885.785 683.056 L885.226 683.056 L884.666 683.056 L884.107 683.056 L883.548 683.056 L882.989 683.056 L882.429 683.056 L881.87 683.056 L881.311 683.056 L880.752 683.056 L880.192 683.056 L879.633 683.056 L879.074 683.056 L878.515 683.056 L877.955 683.056 L877.396 683.056 L876.837 683.056 L876.278 683.056 L875.718 683.056 L875.159 683.056 L874.6 683.056 L874.041 683.056 L873.481 683.056 L872.922 683.056 L872.363 683.056 L871.804 683.056 L871.244 683.056 L870.685 683.056 L870.126 683.056 L869.567 683.056 L869.007 683.056 L868.448 683.056 L867.889 683.056 L867.33 683.056 L866.77 683.056 L866.211 683.056 L865.652 683.056 L865.093 683.056 L864.533 683.056 L863.974 683.056 L863.415 683.056 L862.856 683.056 L862.296 683.056 L861.737 683.056 L861.178 683.056 L860.619 683.056 L860.059 683.056 L859.5 683.056 L858.941 683.056 L858.382 683.056 L857.822 683.056 L857.263 683.056 L856.704 683.056 L856.145 683.056 L855.585 683.056 L855.026 683.056 L854.467 683.056 L853.908 683.056 L853.348 683.056 L852.789 683.056 L852.23 683.056 L851.671 683.056 L851.111 683.056 L850.552 683.056 L849.993 683.056 L849.434 683.056 L848.874 683.056 L848.315 683.056 L847.756 683.056 L847.197 683.056 L846.637 683.056 L846.078 683.056 L845.519 683.056 L844.96 683.056 L844.4 683.056 L843.841 683.056 L843.282 683.056 L842.723 683.056 L842.163 683.056 L841.604 683.056 L841.045 683.056 L840.486 683.056 L839.926 683.056 L839.367 683.056 L838.808 683.056 L838.249 683.056 L837.689 683.056 L837.13 683.056 L836.571 683.056 L836.012 683.056 L835.452 683.056 L834.893 683.056 L834.334 683.056 L833.775 683.056 L833.215 683.056 L832.656 683.056 L832.097 683.056 L831.538 683.056 L830.978 683.056 L830.419 683.056 L829.86 683.056 L829.301 683.056 L828.741 683.056 L828.182 683.056 L827.623 683.056 L827.064 683.056 L826.504 683.056 L825.945 683.056 L825.386 683.056 L824.827 683.056 L824.267 683.056 L823.708 683.056 L823.149 683.056 L822.59 683.056 L822.03 683.056 L821.471 683.056 L820.912 683.056 L820.353 683.056 L819.793 683.056 L819.234 683.056 L818.675 683.056 L818.116 683.056 L817.556 683.056 L816.997 683.056 L816.438 683.056 L815.879 683.056 L815.319 683.056 L814.76 683.056 L814.201 683.056 L813.642 683.056 L813.082 683.056 L812.523 683.056 L811.964 683.056 L811.405 683.056 L810.845 683.056 L810.286 683.056 L809.727 683.056 L809.168 683.056 L808.608 683.056 L808.049 683.056 L807.49 683.056 L806.931 683.056 L806.371 683.056 L805.812 683.056 L805.253 683.056 L804.693 683.056 L804.134 683.056 L803.575 683.056 L803.016 683.056 L802.456 683.056 L801.897 683.056 L801.338 683.056 L800.779 683.056 L800.219 683.056 L799.66 683.056 L799.101 683.056 L798.542 683.056 L797.982 683.056 L797.423 683.056 L796.864 683.056 L796.305 683.056 L795.745 683.056 L795.186 683.056 L794.627 683.056 L794.068 683.056 L793.508 683.056 L792.949 683.056 L792.39 683.056 L791.831 683.056 L791.271 683.056 L790.712 683.056 L790.153 683.056 L789.594 683.056 L789.034 683.056 L788.475 683.056 L787.916 683.056 L787.357 683.056 L786.797 683.056 L786.238 683.056 L785.679 683.056 L785.12 683.056 L784.56 683.056 L784.001 683.056 L783.442 683.056 L782.883 683.056 L782.323 683.056 L781.764 683.056 L781.205 683.056 L780.646 683.056 L780.086 683.056 L779.527 683.056 L778.968 683.056 L778.409 683.056 L777.849 683.056 L777.29 683.056 L776.731 683.056 L776.172 683.056 L775.612 683.056 L775.053 683.056 L774.494 683.056 L773.935 683.056 L773.375 683.056 L772.816 683.056 L772.257 683.056 L771.698 683.056 L771.138 683.056 L770.579 683.056 L770.02 683.056 L769.461 683.056 L768.901 683.056 L768.342 683.056 L767.783 683.056 L767.224 683.056 L766.664 683.056 L766.105 683.056 L765.546 683.056 L764.987 683.056 L764.427 683.056 L763.868 683.056 L763.309 683.056 L762.75 683.056 L762.19 683.056 L761.631 683.056 L761.072 683.056 L760.513 683.056 L759.953 683.056 L759.394 683.056 L758.835 683.056 L758.276 683.056 L757.716 683.056 L757.157 683.056 L756.598 683.056 L756.039 683.056 L755.479 683.056 L754.92 683.056 L754.361 683.056 L753.802 683.056 L753.242 683.056 L752.683 683.056 L752.124 683.056 L751.565 683.056 L751.005 683.056 L750.446 683.056 L749.887 683.056 L749.328 683.056 L748.768 683.056 L748.209 683.056 L747.65 683.056 L747.091 683.056 L746.531 683.056 L745.972 683.056 L745.413 683.056 L744.854 683.056 L744.294 683.056 L743.735 683.056 L743.176 683.056 L742.617 683.056 L742.057 683.056 L741.498 683.056 L740.939 683.056 L740.38 683.056 L739.82 683.056 L739.261 683.056 L738.702 683.056 L738.143 683.056 L737.583 683.056 L737.024 683.056 L736.465 683.056 L735.906 683.056 L735.346 683.056 L734.787 683.056 L734.228 683.056 L733.669 683.056 L733.109 683.056 L732.55 683.056 L731.991 683.056 L731.432 683.056 L730.872 683.056 L730.313 683.056 L729.754 683.056 L729.195 683.056 L728.635 683.056 L728.076 683.056 L727.517 683.056 L726.958 683.056 L726.398 683.056 L725.839 683.056 L725.28 683.056 L724.721 683.056 L724.161 683.056 L723.602 683.056 L723.043 683.056 L722.484 683.056 L721.924 683.056 L721.365 683.056 L720.806 683.056 L720.247 683.056  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.302 720.806,687.302 721.365,687.302 721.924,687.302 722.484,687.302 723.043,687.302 723.602,687.302 724.161,687.302 724.721,687.302 725.28,687.302 725.839,687.302 726.398,687.302 726.958,687.302 727.517,687.302 728.076,687.302 728.635,687.302 729.195,687.302 729.754,687.302 730.313,687.302 730.872,687.302 731.432,687.302 731.991,687.302 732.55,687.302 733.109,687.302 733.669,687.302 734.228,687.302 734.787,687.302 735.346,687.302 735.906,687.302 736.465,687.302 737.024,687.302 737.583,687.302 738.143,687.302 738.702,687.302 739.261,687.302 739.82,687.302 740.38,687.302 740.939,687.302 741.498,687.302 742.057,687.302 742.617,687.302 743.176,687.302 743.735,687.302 744.294,687.302 744.854,687.302 745.413,687.302 745.972,687.302 746.531,687.302 747.091,687.302 747.65,687.302 748.209,687.302 748.768,687.302 749.328,687.302 749.887,687.302 750.446,687.302 751.005,687.302 751.565,687.302 752.124,687.302 752.683,687.302 753.242,687.302 753.802,687.302 754.361,687.302 754.92,687.302 755.479,687.302 756.039,687.302 756.598,687.302 757.157,687.302 757.716,687.302 758.276,687.302 758.835,687.302 759.394,687.302 759.953,687.302 760.513,687.302 761.072,687.302 761.631,687.302 762.19,687.302 762.75,687.302 763.309,687.302 763.868,687.302 764.427,687.302 764.987,687.302 765.546,687.302 766.105,687.302 766.664,687.302 767.224,687.302 767.783,687.302 768.342,687.302 768.901,687.302 769.461,687.302 770.02,687.302 770.579,687.302 771.138,687.302 771.698,687.302 772.257,687.302 772.816,687.302 773.375,687.302 773.935,687.302 774.494,687.302 775.053,687.302 775.612,687.302 776.172,687.302 776.731,687.302 777.29,687.302 777.849,687.302 778.409,687.302 778.968,687.302 779.527,687.302 780.086,687.302 780.646,687.302 781.205,687.302 781.764,687.302 782.323,687.302 782.883,687.302 783.442,687.302 784.001,687.302 784.56,687.302 785.12,687.302 785.679,687.302 786.238,687.302 786.797,687.302 787.357,687.302 787.916,687.302 788.475,687.302 789.034,687.302 789.594,687.302 790.153,687.302 790.712,687.302 791.271,687.302 791.831,687.302 792.39,687.302 792.949,687.302 793.508,687.302 794.068,687.302 794.627,687.302 795.186,687.302 795.745,687.302 796.305,687.302 796.864,687.302 797.423,687.302 797.982,687.302 798.542,687.302 799.101,687.302 799.66,687.302 800.219,687.302 800.779,687.302 801.338,687.302 801.897,687.302 802.456,687.302 803.016,687.302 803.575,687.302 804.134,687.302 804.693,687.302 805.253,687.302 805.812,687.302 806.371,687.302 806.931,687.302 807.49,687.302 808.049,687.302 808.608,687.302 809.168,687.302 809.727,687.302 810.286,687.302 810.845,687.302 811.405,687.302 811.964,687.302 812.523,687.302 813.082,687.302 813.642,687.302 814.201,687.302 814.76,687.302 815.319,687.302 815.879,687.302 816.438,687.302 816.997,687.302 817.556,687.302 818.116,687.302 818.675,687.302 819.234,687.302 819.793,687.302 820.353,687.302 820.912,687.302 821.471,687.302 822.03,687.302 822.59,687.302 823.149,687.302 823.708,687.302 824.267,687.302 824.827,687.302 825.386,687.302 825.945,687.302 826.504,687.302 827.064,687.302 827.623,687.302 828.182,687.302 828.741,687.302 829.301,687.302 829.86,687.302 830.419,687.302 830.978,687.302 831.538,687.302 832.097,687.302 832.656,687.302 833.215,687.302 833.775,687.302 834.334,687.302 834.893,687.302 835.452,687.302 836.012,687.302 836.571,687.302 837.13,687.302 837.689,687.302 838.249,687.302 838.808,687.302 839.367,687.302 839.926,687.302 840.486,687.302 841.045,687.302 841.604,687.302 842.163,687.302 842.723,687.302 843.282,687.302 843.841,687.302 844.4,687.302 844.96,687.302 845.519,687.302 846.078,687.302 846.637,687.302 847.197,687.302 847.756,687.302 848.315,687.302 848.874,687.302 849.434,687.302 849.993,687.302 850.552,687.302 851.111,687.302 851.671,687.302 852.23,687.302 852.789,687.302 853.348,687.302 853.908,687.302 854.467,687.302 855.026,687.302 855.585,687.302 856.145,687.302 856.704,687.302 857.263,687.302 857.822,687.302 858.382,687.302 858.941,687.302 859.5,687.302 860.059,687.302 860.619,687.302 861.178,687.302 861.737,687.302 862.296,687.302 862.856,687.302 863.415,687.302 863.974,687.302 864.533,687.302 865.093,687.302 865.652,687.302 866.211,687.302 866.77,687.302 867.33,687.302 867.889,687.302 868.448,687.302 869.007,687.302 869.567,687.302 870.126,687.302 870.685,687.302 871.244,687.302 871.804,687.302 872.363,687.302 872.922,687.302 873.481,687.302 874.041,687.302 874.6,687.302 875.159,687.302 875.718,687.302 876.278,687.302 876.837,687.302 877.396,687.302 877.955,687.302 878.515,687.302 879.074,687.302 879.633,687.302 880.192,687.302 880.752,687.302 881.311,687.302 881.87,687.302 882.429,687.302 882.989,687.302 883.548,687.302 884.107,687.302 884.666,687.302 885.226,687.302 885.785,687.302 886.344,687.302 886.903,687.302 887.463,687.302 888.022,687.302 888.581,687.302 889.14,687.302 889.7,687.302 890.259,687.302 890.818,687.302 891.377,687.302 891.937,687.302 892.496,687.302 893.055,687.302 893.614,687.302 894.174,687.302 894.733,687.302 895.292,687.302 895.851,687.302 896.411,687.302 896.97,687.302 897.529,687.302 898.088,687.302 898.648,687.302 899.207,687.302 899.766,687.302 900.325,687.302 900.885,687.302 901.444,687.302 902.003,687.302 902.562,687.302 903.122,687.302 903.681,687.302 904.24,687.302 904.799,687.302 905.359,687.302 905.918,687.302 906.477,687.302 907.036,687.302 907.596,687.302 908.155,687.302 908.714,687.302 909.273,687.302 909.833,687.302 910.392,687.302 910.951,687.302 911.51,687.302 912.07,687.302 912.629,687.302 913.188,687.302 913.747,687.302 914.307,687.302 914.866,687.302 915.425,687.302 915.984,687.302 916.544,687.302 917.103,687.302 917.662,687.302 918.221,687.302 918.781,687.302 919.34,687.302 919.899,687.302 920.458,687.302 921.018,687.302 921.577,687.302 922.136,687.302 922.695,687.302 923.255,687.302 923.814,687.302 924.373,687.302 924.932,687.302 925.492,687.302 926.051,687.302 926.61,687.302 927.169,687.302 927.729,687.302 928.288,687.302 928.847,687.302 929.406,687.302 929.966,687.302 930.525,687.302 931.084,687.302 931.644,687.302 932.203,687.302 932.762,687.302 933.321,687.302 933.881,687.302 934.44,687.302 934.999,687.302 935.558,687.302 936.118,687.302 936.677,687.302 937.236,687.302 937.795,687.302 938.355,687.302 938.914,687.302 939.473,687.302 940.032,687.302 940.592,687.302 941.151,687.302 941.71,687.302 942.269,687.302 942.829,687.302 943.388,687.302 943.947,687.302 944.506,687.302 945.066,687.302 945.625,687.302 946.184,687.302 946.743,687.302 947.303,687.302 947.862,687.302 948.421,687.302 948.98,687.302 949.54,687.302 950.099,687.302 950.658,687.302 951.217,687.302 951.777,687.302 952.336,687.302 952.895,687.302 953.454,687.302 954.014,687.302 954.573,687.302 955.132,687.302 955.691,687.302 956.251,687.302 956.81,687.302 957.369,687.302 957.928,687.302 958.488,687.302 959.047,687.302 959.606,687.302 960.165,687.302 960.725,687.302 961.284,687.302 961.843,687.302 962.402,687.302 962.962,687.302 963.521,687.302 964.08,687.302 964.639,687.302 965.199,687.302 965.758,687.302 966.317,687.302 966.876,687.302 967.436,687.302 967.995,687.302 968.554,687.302 969.113,687.302 969.673,687.302 970.232,687.302 970.791,687.302 971.35,687.302 971.91,687.302 972.469,687.302 973.028,687.302 973.587,687.302 974.147,687.302 974.706,687.302 975.265,687.302 975.824,687.302 976.384,687.302 976.943,687.302 977.502,687.302 978.061,687.302 978.621,687.302 979.18,687.302 979.739,687.302 980.298,687.302 980.858,687.302 981.417,687.302 981.976,687.302 982.535,687.302 983.095,687.302 983.654,687.302 984.213,687.302 984.772,687.302 985.332,687.302 985.891,687.302 986.45,687.302 987.009,687.302 987.569,687.302 988.128,687.302 988.687,687.302 989.246,687.302 989.806,687.302 990.365,687.302 990.924,687.302 991.483,687.302 992.043,687.302 992.602,687.302 993.161,687.302 993.72,687.302 994.28,687.302 994.839,687.302 995.398,687.302 995.957,687.302 996.517,687.302 997.076,687.302 997.635,687.302 998.194,687.302 998.754,687.302 999.313,687.302 999.872,687.302 1000.43,687.302 1000.99,687.302 1001.55,687.302 1002.11,687.302 1002.67,687.302 1003.23,687.302 1003.79,687.302 1004.35,687.302 1004.91,687.302 1005.46,687.302 1006.02,687.302 1006.58,687.302 1007.14,687.302 1007.7,687.302 1008.26,687.302 1008.82,687.302 1009.38,687.302 1009.94,687.302 1010.5,687.302 1011.06,687.302 1011.62,687.302 1012.18,687.302 1012.73,687.302 1013.29,687.302 1013.85,687.302 1014.41,687.302 1014.97,687.302 1015.53,687.302 1016.09,687.302 1016.65,687.302 1017.21,687.302 1017.77,687.302 1018.33,687.302 1018.89,687.302 1019.45,687.302 1020.01,687.302 1020.56,687.302 1021.12,687.302 1021.68,687.302 1022.24,687.302 1022.8,687.302 1023.36,687.302 1023.92,687.302 1024.48,687.302 1025.04,687.302 1025.6,687.302 1026.16,687.302 1026.72,687.302 1027.28,687.302 1027.83,687.302 1028.39,687.302 1028.95,687.302 1029.51,687.302 1030.07,687.302 1030.63,687.302 1031.19,687.302 1031.75,687.302 1032.31,687.302 1032.87,687.302 1033.43,687.302 1033.99,687.302 1034.55,687.302 1035.1,687.302 1035.66,687.302 1036.22,687.302 1036.78,687.302 1037.34,687.302 1037.9,687.302 1038.46,687.302 1039.02,687.302 1039.58,687.302 1040.14,687.302 1040.7,687.302 1041.26,687.302 1041.82,687.302 1042.38,687.302 1042.93,687.302 1043.49,687.302 1044.05,687.302 1044.61,687.302 1045.17,687.302 1045.73,687.302 1046.29,687.302 1046.85,687.302 1047.41,687.302 1047.97,687.302 1048.53,687.302 1049.09,687.302 1049.65,687.302 1050.2,687.302 1050.76,687.302 1051.32,687.302 1051.88,687.302 1052.44,687.302 1053,687.302 1053.56,687.302 1054.12,687.302 1054.68,687.302 1055.24,687.302 1055.8,687.302 1056.36,687.302 1056.92,687.302 1057.48,687.302 1058.03,687.302 1058.59,687.302 1059.15,687.302 1059.71,687.302 1060.27,687.302 1060.83,687.302 1061.39,687.302 1061.95,687.302 1062.51,687.302 1063.07,687.302 1063.63,687.302 1064.19,687.302 1064.75,687.302 1065.3,687.302 1065.86,687.302 1066.42,687.302 1066.98,687.302 1067.54,687.302 1068.1,687.302 1068.66,687.302 1069.22,687.302 1069.78,687.302 1070.34,687.302 1070.9,687.302 1071.46,687.302 1072.02,687.302 1072.57,687.302 1073.13,687.302 1073.69,687.302 1074.25,687.302 1074.81,687.302 1075.37,687.302 1075.93,687.302 1076.49,687.302 1077.05,687.302 1077.61,687.302 1078.17,687.302 1078.73,687.302 1079.29,687.302 1079.85,687.302 1080.4,687.302 1080.96,687.302 1081.52,687.302 1082.08,687.302 1082.64,687.302 1083.2,687.302 1083.76,687.302 1084.32,687.302 1084.88,687.302 1085.44,687.302 1086,687.302 1086.56,687.302 1087.12,687.302 1087.67,687.302 1088.23,687.302 1088.79,687.302 1089.35,687.302 1089.91,687.302 1090.47,687.302 1091.03,687.302 1091.59,687.302 1092.15,687.302 1092.71,687.302 1093.27,687.302 1093.83,687.302 1094.39,687.302 1094.94,687.302 1095.5,687.302 1096.06,687.302 1096.62,687.302 1097.18,687.302 1097.74,687.302 1098.3,687.302 1098.86,687.302 1099.42,687.302 1099.98,687.302 1100.54,687.302 1101.1,687.302 1101.66,687.302 1102.22,687.302 1102.77,687.302 1103.33,687.302 1103.89,687.302 1104.45,687.302 1105.01,687.302 1105.57,687.302 1106.13,687.302 1106.69,687.302 1107.25,687.302 1107.81,687.302 1108.37,687.302 1108.93,687.302 1109.49,687.302 1110.04,687.302 1110.6,687.302 1111.16,687.302 1111.72,687.302 1112.28,687.302 1112.84,687.302 1113.4,687.302 1113.96,687.302 1114.52,687.302 1115.08,687.302 1115.64,687.302 1116.2,687.302 1116.76,687.302 1117.31,687.302 1117.87,687.302 1118.43,687.302 1118.99,687.302 1119.55,687.302 1120.11,687.302 1120.67,687.302 1121.23,687.302 1121.79,687.302 1122.35,687.302 1122.91,687.302 1123.47,687.302 1124.03,687.302 1124.59,687.302 1125.14,687.302 1125.7,687.302 1126.26,687.302 1126.82,687.302 1127.38,687.302 1127.94,687.302 1128.5,687.302 1129.06,687.302 1129.62,687.302 1130.18,687.302 1130.74,687.302 1131.3,687.302 1131.86,687.302 1132.41,687.302 1132.97,687.302 1133.53,687.302 1134.09,687.302 1134.65,687.302 1135.21,687.302 1135.77,687.302 1136.33,687.302 1136.89,687.302 1137.45,687.302 1138.01,687.302 1138.57,687.302 1139.13,687.302 1139.68,687.302 1140.24,687.302 1140.8,687.302 1141.36,687.302 1141.92,687.302 1142.48,687.302 1143.04,687.302 1143.6,687.302 1144.16,687.302 1144.72,687.302 1145.28,687.302 1145.84,687.302 1146.4,687.302 1146.96,687.302 1147.51,687.302 1148.07,687.302 1148.63,687.302 1149.19,687.302 1149.75,687.302 1150.31,687.302 1150.87,687.302 1151.43,687.302 1151.99,687.302 1152.55,687.302 1153.11,687.302 1153.67,687.302 1154.23,687.302 1154.78,687.302 1155.34,687.302 1155.9,687.302 1156.46,687.302 1157.02,687.302 1157.58,687.302 1158.14,687.302 1158.7,687.302 1159.26,687.302 1159.82,687.302 1160.38,687.302 1160.94,687.302 1161.5,687.302 1162.05,687.302 1162.61,687.302 1163.17,687.302 1163.73,687.302 1164.29,687.302 1164.85,687.302 1165.41,687.302 1165.97,687.302 1166.53,687.302 1167.09,687.302 1167.65,687.302 1168.21,687.302 1168.77,687.302 1169.33,687.302 1169.88,687.302 1170.44,687.302 1171,687.302 1171.56,687.302 1172.12,687.302 1172.68,687.302 1173.24,687.302 1173.8,687.302 1174.36,687.302 1174.92,687.302 1175.48,687.302 1176.04,687.302 1176.6,687.302 1177.15,687.302 1177.71,687.302 1178.27,687.302 1178.83,687.302 1179.39,687.302 1179.95,687.302 1180.51,687.302 1181.07,687.302 1181.63,687.302 1182.19,687.302 1182.75,687.302 1183.31,687.302 1183.87,687.302 1184.43,687.302 1184.98,687.302 1185.54,687.302 1186.1,687.302 1186.66,687.302 1187.22,687.302 1187.78,687.302 1188.34,687.302 1188.9,687.302 1189.46,687.302 1190.02,687.302 1190.58,687.302 1191.14,687.302 1191.7,687.302 1192.25,687.302 1192.81,687.302 1193.37,687.302 1193.93,687.302 1194.49,687.302 1195.05,687.302 1195.61,687.302 1196.17,687.302 1196.73,687.302 1197.29,687.302 1197.85,687.302 1198.41,687.302 1198.97,687.302 1199.52,687.302 1200.08,687.302 1200.64,687.302 1201.2,687.302 1201.76,687.302 1202.32,687.302 1202.88,687.302 1203.44,687.302 1204,687.302 1204.56,687.302 1205.12,687.302 1205.68,687.302 1206.24,687.302 1206.8,687.302 1207.35,687.302 1207.91,687.302 1208.47,687.302 1209.03,687.302 1209.59,687.302 1210.15,687.302 1210.71,687.302 1211.27,687.302 1211.83,687.302 1212.39,687.302 1212.95,687.302 1213.51,687.302 1214.07,687.302 1214.62,687.302 1215.18,687.302 1215.74,687.302 1216.3,687.302 1216.86,687.302 1217.42,687.302 1217.98,687.302 1218.54,687.302 1219.1,687.302 1219.66,687.302 1220.22,687.302 1220.78,687.302 1221.34,687.302 1221.89,687.302 1222.45,687.302 1223.01,687.302 1223.57,687.302 1224.13,687.302 1224.69,687.302 1225.25,687.302 1225.81,687.302 1226.37,687.302 1226.93,687.302 1227.49,687.302 1228.05,687.302 1228.61,687.302 1229.17,687.302 1229.72,687.302 1230.28,687.302 1230.84,687.302 1231.4,687.302 1231.96,687.302 1232.52,687.302 1233.08,687.302 1233.64,687.302 1234.2,687.302 1234.76,687.302 1235.32,687.302 1235.88,687.302 1236.44,687.302 1236.99,687.302 1237.55,687.302 1238.11,687.302 1238.67,687.302 1239.23,687.302 1239.79,687.302 1240.35,687.302 1240.91,687.302 1241.47,687.302 1242.03,687.302 1242.59,687.302 1243.15,687.302 1243.71,687.302 1244.26,687.302 1244.82,687.302 1245.38,687.302 1245.94,687.302 1246.5,687.302 1247.06,687.302 1247.62,687.302 1248.18,687.302 1248.74,687.302 1249.3,687.302 1249.86,687.302 1250.42,687.302 1250.98,687.302 1251.54,687.302 1252.09,687.302 1252.65,687.302 1253.21,687.302 1253.77,687.302 1254.33,687.302 1254.89,687.302 1255.45,687.302 1256.01,687.302 1256.57,687.302 1257.13,687.302 1257.69,687.302 1258.25,687.302 1258.81,687.302 1259.36,687.302 1259.92,687.302 1260.48,687.302 1261.04,687.302 1261.6,687.302 1262.16,687.302 1262.72,687.302 1263.28,687.302 1263.84,687.302 1264.4,687.302 1264.96,687.302 1265.52,687.302 1266.08,687.302 1266.63,687.302 1267.19,687.302 1267.75,687.302 1268.31,687.302 1268.87,687.302 1269.43,687.302 1269.99,687.302 1270.55,687.302 1271.11,687.302 1271.67,687.302 1272.23,687.302 1272.79,687.302 1273.35,687.302 1273.91,687.302 1274.46,687.302 1275.02,687.302 1275.58,687.302 1276.14,687.302 1276.7,687.302 1277.26,687.302 1277.82,687.302 1278.38,687.302 1278.94,687.302 1279.5,687.302 1280.06,687.302 1280.62,687.302 1281.18,687.302 1281.73,687.302 1282.29,687.302 1282.85,687.302 1283.41,687.302 1283.97,687.302 1284.53,687.302 1285.09,687.302 1285.65,687.302 1286.21,687.302 1286.77,687.302 1287.33,687.302 1287.89,687.302 1288.45,687.302 1289,687.302 1289.56,687.302 1290.12,687.302 1290.68,687.302 1291.24,687.302 1291.8,687.302 1292.36,687.302 1292.92,687.302 1293.48,687.302 1294.04,687.302 1294.6,687.302 1295.16,687.302 1295.72,687.302 1296.28,687.302 1296.83,687.302 1297.39,687.302 1297.95,687.302 1298.51,687.302 1299.07,687.302 1299.63,687.302 1300.19,687.302 1300.75,687.302 1301.31,687.302 1301.87,687.302 1302.43,687.302 1302.99,687.302 1303.55,687.302 1304.1,687.302 1304.66,687.302 1305.22,687.302 1305.78,687.302 1306.34,687.302 1306.9,687.302 1307.46,687.302 1308.02,687.302 1308.58,687.302 1309.14,687.302 1309.7,687.302 1310.26,687.302 1310.82,687.302 1311.38,687.302 1311.93,687.302 1312.49,687.302 1313.05,687.302 1313.61,687.302 1314.17,687.302 1314.73,687.302 1315.29,687.302 1315.85,687.302 1316.41,687.302 1316.97,687.302 1317.53,687.302 1318.09,687.302 1318.65,687.302 1319.2,687.302 1319.76,687.302 1320.32,687.302 1320.88,687.302 1321.44,687.302 1322,687.302 1322.56,687.302 1323.12,687.302 1323.68,687.302 1324.24,687.302 1324.8,687.302 1325.36,687.302 1325.92,687.302 1326.47,687.302 1327.03,687.302 1327.59,687.302 1328.15,687.302 1328.71,687.302 1329.27,687.302 1329.83,687.302 1330.39,687.302 1330.95,687.302 1331.51,687.302 1332.07,687.302 1332.63,687.302 1333.19,687.302 1333.75,687.302 1334.3,687.302 1334.86,687.302 1335.42,687.302 1335.98,687.302 1336.54,687.302 1337.1,687.302 1337.66,687.302 1338.22,687.302 1338.78,687.302 1339.34,687.302 1339.9,687.302 1340.46,687.302 1341.02,687.302 1341.57,687.302 1342.13,687.302 1342.69,687.302 1343.25,687.302 1343.81,687.302 1344.37,687.302 1344.93,687.302 1345.49,687.302 1346.05,687.302 1346.61,687.302 1347.17,687.302 1347.73,687.302 1348.29,687.302 1348.84,687.302 1349.4,687.302 1349.96,687.302 1350.52,687.302 1351.08,687.302 1351.64,687.302 1352.2,687.302 1352.76,687.302 1353.32,687.302 1353.88,687.302 1354.44,687.302 1355,687.302 1355.56,687.302 1356.12,687.302 1356.67,687.302 1357.23,687.302 1357.79,687.302 1358.35,687.302 1358.91,687.302 1359.47,687.302 1360.03,687.302 1360.59,687.302 1361.15,687.302 1361.71,687.302 1362.27,687.302 1362.83,687.302 1363.39,687.302 1363.94,687.302 1364.5,687.302 1365.06,687.302 1365.62,687.302 1366.18,687.302 1366.74,687.302 1367.3,687.302 1367.86,687.302 1368.42,687.302 1368.98,687.302 1369.54,687.302 1370.1,687.302 1370.66,687.302 1371.21,687.302 1371.77,687.302 1372.33,687.302 1372.89,687.302 1373.45,687.302 1374.01,687.302 1374.57,687.302 1375.13,687.302 1375.69,687.302 1376.25,687.302 1376.81,687.302 1377.37,687.302 1377.93,687.302 1378.49,687.302 1379.04,687.302 1379.6,687.302 1380.16,687.302 1380.72,687.302 1381.28,687.302 1381.84,687.302 1382.4,687.302 1382.96,687.302 1383.52,687.302 1384.08,687.302 1384.64,687.302 1385.2,687.302 1385.76,687.302 1386.31,687.302 1386.87,687.302 1387.43,687.302 1387.99,687.302 1388.55,687.302 1389.11,687.302 1389.67,687.302 1390.23,687.302 1390.79,687.302 1391.35,687.302 1391.91,687.302 1392.47,687.302 1393.03,687.302 1393.58,687.302 1394.14,687.302 1394.7,687.302 1395.26,687.302 1395.82,687.302 1396.38,687.302 1396.94,687.302 1397.5,687.302 1398.06,687.302 1398.62,687.302 1399.18,687.302 1399.74,687.302 1400.3,687.302 1400.86,687.302 1401.41,687.302 1401.97,687.302 1402.53,687.302 1403.09,687.302 1403.65,687.302 1404.21,687.302 1404.77,687.302 1405.33,687.302 1405.89,687.302 1406.45,687.302 1407.01,687.302 1407.57,687.302 1408.13,687.302 1408.68,687.302 1409.24,687.302 1409.8,687.302 1410.36,687.302 1410.92,687.302 1411.48,687.302 1412.04,687.302 1412.6,687.302 1413.16,687.302 1413.72,687.302 1414.28,687.302 1414.84,687.302 1415.4,687.302 1415.95,687.302 1416.51,687.302 1417.07,687.302 1417.63,687.302 1418.19,687.302 1418.75,687.302 1419.31,687.302 1419.87,687.302 1420.43,687.302 1420.99,687.302 1421.55,687.302 1422.11,687.302 1422.67,687.302 1423.23,687.302 1423.78,687.302 1424.34,687.302 1424.9,687.302 1425.46,687.302 1426.02,687.302 1426.58,687.302 1427.14,687.302 1427.7,687.302 1428.26,687.302 1428.82,687.302 1429.38,687.302 1429.94,687.302 1430.5,687.302 1431.05,687.302 1431.61,687.302 1432.17,687.302 1432.73,687.302 1433.29,687.302 1433.85,687.302 1434.41,687.302 1434.97,687.302 1435.53,687.302 1436.09,687.302 1436.65,687.302 1437.21,687.302 1437.77,687.302 1438.33,687.302 1438.88,687.302 1439.44,687.302 1440,687.302 1440.56,687.302 1441.12,687.302 1441.68,687.302 1442.24,687.302 1442.8,687.302 1443.36,687.302 1443.92,687.302 1444.48,687.302 1445.04,687.302 1445.6,687.302 1446.15,687.302 1446.71,687.302 1447.27,687.302 1447.83,687.302 1448.39,687.302 1448.95,687.302 1449.51,687.302 1450.07,687.302 1450.63,687.302 1451.19,687.302 1451.75,687.302 1452.31,687.302 1452.87,687.302 1453.42,687.302 1453.98,687.302 1454.54,687.302 1455.1,687.302 1455.66,687.302 1456.22,687.302 1456.78,687.302 1457.34,687.302 1457.9,687.302 1458.46,687.302 1459.02,687.302 1459.58,687.302 1460.14,687.302 1460.7,687.302 1461.25,687.302 1461.81,687.302 1462.37,687.302 1462.93,687.302 1463.49,687.302 1464.05,687.302 1464.61,687.302 1465.17,687.302 1465.73,687.302 1466.29,687.302 1466.85,687.302 1467.41,687.302 1467.97,687.302 1468.52,687.302 1469.08,687.302 1469.64,687.302 1470.2,687.302 1470.76,687.302 1471.32,687.302 1471.88,687.302 1472.44,687.302 1473,687.302 1473.56,687.302 1474.12,687.302 1474.68,687.302 1475.24,687.302 1475.79,687.302 1476.35,687.302 1476.91,687.302 1477.47,687.302 1478.03,687.302 1478.59,687.302 1479.15,687.302 1479.71,687.302 1480.27,687.302 1480.83,687.302 1481.39,687.302 1481.95,687.302 1482.51,687.302 1483.07,687.302 1483.62,687.302 1484.18,687.302 1484.74,687.302 1485.3,687.302 1485.86,687.302 1486.42,687.302 1486.98,687.302 1487.54,687.302 1488.1,687.302 1488.66,687.302 1489.22,687.302 1489.78,687.302 1490.34,687.302 1490.89,687.302 1491.45,687.302 1492.01,687.302 1492.57,687.302 1493.13,687.302 1493.69,687.302 1494.25,687.302 1494.81,687.302 1495.37,687.302 1495.93,687.302 1496.49,687.302 1497.05,687.302 1497.61,687.302 1498.16,687.302 1498.72,687.302 1499.28,687.302 1499.84,687.302 1500.4,687.302 1500.96,687.302 1501.52,687.302 1502.08,687.302 1502.64,687.302 1503.2,687.302 1503.76,687.302 1504.32,687.302 1504.88,687.302 1505.44,687.302 1505.99,687.302 1506.55,687.302 1507.11,687.302 1507.67,687.302 1508.23,687.302 1508.79,687.302 1509.35,687.302 1509.91,687.302 1510.47,687.302 1511.03,687.302 1511.59,687.302 1512.15,687.302 1512.71,687.302 1513.26,687.302 1513.82,687.302 1514.38,687.302 1514.94,687.302 1515.5,687.302 1516.06,687.302 1516.62,687.302 1517.18,687.302 1517.74,687.302 1518.3,687.302 1518.86,687.302 1519.42,687.302 1519.98,687.302 1520.53,687.302 1521.09,687.302 1521.65,687.302 1522.21,687.302 1522.77,687.302 1523.33,687.302 1523.89,687.302 1524.45,687.302 1525.01,687.302 1525.57,687.302 1526.13,687.302 1526.69,687.302 1527.25,687.302 1527.81,687.302 1528.36,687.302 1528.92,687.302 1529.48,687.302 1530.04,687.302 1530.6,687.302 1531.16,687.302 1531.72,687.302 1532.28,687.302 1532.84,687.302 1533.4,687.302 1533.96,687.302 1534.52,687.302 1535.08,687.302 1535.63,687.302 1536.19,687.302 1536.75,687.302 1537.31,687.302 1537.87,687.302 1538.43,687.302 1538.99,687.302 1539.55,687.302 1540.11,687.302 1540.67,687.302 1541.23,687.302 1541.79,687.302 1542.35,687.302 1542.9,687.302 1543.46,687.302 1544.02,687.302 1544.58,687.302 1545.14,687.302 1545.7,687.302 1546.26,687.302 1546.82,687.302 1547.38,687.302 1547.94,687.302 1548.5,687.302 1549.06,687.302 1549.62,687.302 1550.18,687.302 1550.73,687.302 1551.29,687.302 1551.85,687.302 1552.41,687.302 1552.97,687.302 1553.53,687.302 1554.09,687.302 1554.65,687.302 1555.21,687.302 1555.77,687.302 1556.33,687.302 1556.89,687.302 1557.45,687.302 1558,687.302 1558.56,687.302 1559.12,687.302 1559.68,687.302 1560.24,687.302 1560.8,687.302 1561.36,687.302 1561.92,687.302 1562.48,687.302 1563.04,687.302 1563.6,687.302 1564.16,687.302 1564.72,687.302 1565.28,687.302 1565.83,687.302 1566.39,687.302 1566.95,687.302 1567.51,687.302 1568.07,687.302 1568.63,687.302 1569.19,687.302 1569.75,687.302 1570.31,687.302 1570.87,687.302 1571.43,687.302 1571.99,687.302 1572.55,687.302 1573.1,687.302 1573.66,687.302 1574.22,687.302 1574.78,687.302 1575.34,687.302 1575.9,687.302 1576.46,687.302 1577.02,687.302 1577.58,687.302 1578.14,687.302 1578.7,687.302 1579.26,687.302 1579.82,687.302 1580.37,687.302 1580.93,687.302 1581.49,687.302 1582.05,687.302 1582.61,687.302 1583.17,687.302 1583.73,687.302 1584.29,687.302 1584.85,687.302 1585.41,687.302 1585.97,687.302 1586.53,687.302 1587.09,687.302 1587.65,687.302 1588.2,687.302 1588.76,687.302 1589.32,687.302 1589.88,687.302 1590.44,687.302 1591,687.302 1591.56,687.302 1592.12,687.302 1592.68,687.302 1593.24,687.302 1593.8,687.302 1594.36,687.302 1594.92,687.302 1595.47,687.302 1596.03,687.302 1596.59,687.302 1597.15,687.302 1597.71,687.302 1598.27,687.302 1598.83,687.302 1599.39,687.302 1599.95,687.302 1600.51,687.302 1601.07,687.302 1601.63,687.302 1602.19,687.302 1602.74,687.302 1603.3,687.302 1603.86,687.302 1604.42,687.302 1604.98,687.302 1605.54,687.302 1606.1,687.302 1606.66,687.302 1607.22,687.302 1607.78,687.302 1608.34,687.302 1608.9,687.302 1609.46,687.302 1610.02,687.302 1610.57,687.302 1611.13,687.302 1611.69,687.302 1612.25,687.302 1612.81,687.302 1613.37,687.302 1613.93,687.302 1614.49,687.302 1615.05,687.302 1615.61,687.302 1616.17,687.302 1616.73,687.302 1617.29,687.302 1617.84,687.302 1618.4,687.302 1618.96,687.302 1619.52,687.302 1620.08,687.302 1620.64,687.302 1621.2,687.302 1621.76,687.302 1622.32,687.302 1622.88,687.302 1623.44,687.302 1624,687.302 1624.56,687.302 1625.11,687.302 1625.67,687.302 1626.23,687.302 1626.79,687.302 1627.35,687.302 1627.91,687.302 1628.47,687.302 1629.03,687.302 1629.59,687.302 1630.15,687.302 1630.71,687.302 1631.27,687.302 1631.83,687.302 1632.39,687.302 1632.94,687.302 1633.5,687.302 1634.06,687.302 1634.62,687.302 1635.18,687.302 1635.74,687.302 1636.3,687.302 1636.86,687.302 1637.42,687.302 1637.98,687.302 1638.54,687.302 1639.1,687.302 1639.66,687.302 1640.21,687.302 1640.77,687.302 1641.33,687.302 1641.89,687.302 1642.45,687.302 1643.01,687.302 1643.57,687.302 1644.13,687.302 1644.69,687.302 1645.25,687.302 1645.81,687.302 1646.37,687.302 1646.93,687.302 1647.48,687.302 1648.04,687.302 1648.6,687.302 1649.16,687.302 1649.72,687.302 1650.28,687.302 1650.84,687.302 1651.4,687.302 1651.96,687.302 1652.52,687.302 1653.08,687.302 1653.64,687.302 1654.2,687.302 1654.76,687.302 1655.31,687.302 1655.87,687.302 1656.43,687.302 1656.99,687.302 1657.55,687.302 1658.11,687.302 1658.67,687.302 1659.23,687.302 1659.79,687.302 1660.35,687.302 1660.91,687.302 1661.47,687.302 1662.03,687.302 1662.58,687.302 1663.14,687.302 1663.7,687.302 1664.26,687.302 1664.82,687.302 1665.38,687.302 1665.94,687.302 1666.5,687.302 1667.06,687.302 1667.62,687.302 1668.18,687.302 1668.74,687.302 1669.3,687.302 1669.85,687.302 1670.41,687.302 1670.97,687.302 1671.53,687.302 1672.09,687.302 1672.65,687.302 1673.21,687.302 1673.77,687.302 1674.33,687.302 1674.89,687.302 1675.45,687.302 1676.01,687.302 1676.57,687.302 1677.13,687.302 1677.68,687.302 1678.24,687.302 1678.8,687.302 1679.36,687.302 1679.92,687.302 1680.48,687.302 1681.04,687.302 1681.6,687.302 1682.16,687.302 1682.72,687.302 1683.28,687.302 1683.84,687.302 1684.4,687.302 1684.95,687.302 1685.51,687.302 1686.07,687.302 1686.63,687.302 1687.19,687.302 1687.75,687.302 1688.31,687.302 1688.87,687.302 1689.43,687.302 1689.99,687.302 1690.55,687.302 1691.11,687.302 1691.67,687.302 1692.23,687.302 1692.78,687.302 1693.34,687.302 1693.9,687.302 1694.46,687.302 1695.02,687.302 1695.58,687.302 1696.14,687.302 1696.7,687.302 1697.26,687.302 1697.82,687.302 1698.38,687.302 1698.94,687.302 1699.5,687.302 1700.05,687.302 1700.61,687.302 1701.17,687.302 1701.73,687.302 1702.29,687.302 1702.85,687.302 1703.41,687.302 1703.97,687.302 1704.53,687.302 1705.09,687.302 1705.65,687.302 1706.21,687.302 1706.77,687.302 1707.32,687.302 1707.88,687.302 1708.44,687.302 1709,687.302 1709.56,687.302 1710.12,687.302 1710.68,687.302 1711.24,687.302 1711.8,687.302 1712.36,687.302 1712.92,687.302 1713.48,687.302 1714.04,687.302 1714.6,687.302 1715.15,687.302 1715.71,687.302 1716.27,687.302 1716.83,687.302 1717.39,687.302 1717.95,687.302 1718.51,687.302 1719.07,687.302 1719.63,687.302 1720.19,687.302 1720.75,687.302 1721.31,687.302 1721.87,687.302 1722.42,687.302 1722.98,687.302 1723.54,687.302 1724.1,687.302 1724.66,687.302 1725.22,687.302 1725.78,687.302 1726.34,687.302 1726.9,687.302 1727.46,687.302 1728.02,687.302 1728.58,687.302 1729.14,687.302 1729.69,687.302 1730.25,687.302 1730.81,687.302 1731.37,687.302 1731.93,687.302 1732.49,687.302 1733.05,687.302 1733.61,687.302 1734.17,687.302 1734.73,687.302 1735.29,687.302 1735.85,687.302 1736.41,687.302 1736.97,687.302 1737.52,687.302 1738.08,687.302 1738.64,687.302 1739.2,687.302 1739.76,687.302 1740.32,687.302 1740.88,687.302 1741.44,687.302 1742,687.302 1742.56,687.302 1743.12,687.302 1743.68,687.302 1744.24,687.302 1744.79,687.302 1745.35,687.302 1745.91,687.302 1746.47,687.302 1747.03,687.302 1747.59,687.302 1748.15,687.302 1748.71,687.302 1749.27,687.302 1749.83,687.302 1750.39,687.302 1750.95,687.302 1751.51,687.302 1752.06,687.302 1752.62,687.302 1753.18,687.302 1753.74,687.302 1754.3,687.302 1754.86,687.302 1755.42,687.302 1755.98,687.302 1756.54,687.302 1757.1,687.302 1757.66,687.302 1758.22,687.302 1758.78,687.302 1759.34,687.302 1759.89,687.302 1760.45,687.302 1761.01,687.302 1761.57,687.302 1762.13,687.302 1762.69,687.302 1763.25,687.302 1763.81,687.302 1764.37,687.302 1764.93,687.302 1765.49,687.302 1766.05,687.302 1766.61,687.302 1767.16,687.302 1767.72,687.302 1768.28,687.302 1768.84,687.302 1769.4,687.302 1769.96,687.302 1770.52,687.302 1771.08,687.302 1771.64,687.302 1772.2,687.302 1772.76,687.302 1773.32,687.302 1773.88,687.302 1774.43,687.302 1774.99,687.302 1775.55,687.302 1776.11,687.302 1776.67,687.302 1777.23,687.302 1777.79,687.302 1778.35,687.302 1778.91,687.302 1779.47,687.302 1780.03,687.302 1780.59,687.302 1781.15,687.302 1781.71,687.302 1782.26,687.302 1782.82,687.302 1783.38,687.302 1783.94,687.302 1784.5,687.302 1785.06,687.302 1785.62,687.302 1786.18,687.302 1786.74,687.302 1787.3,687.302 1787.86,687.302 1788.42,687.302 1788.98,687.302 1789.53,687.302 1790.09,687.302 1790.65,687.302 1791.21,687.302 1791.77,687.302 1792.33,687.302 1792.89,687.302 1793.45,687.302 1794.01,687.302 1794.57,687.302 1795.13,687.302 1795.69,687.302 1796.25,687.302 1796.8,687.302 1797.36,687.302 1797.92,687.302 1798.48,687.302 1799.04,687.302 1799.6,687.302 1800.16,687.302 1800.72,687.302 1801.28,687.302 1801.84,687.302 1802.4,687.302 1802.96,687.302 1803.52,687.302 1804.08,687.302 1804.63,687.302 1805.19,687.302 1805.75,687.302 1806.31,687.302 1806.87,687.302 1807.43,687.302 1807.99,687.302 1808.55,687.302 1809.11,687.302 1809.67,687.302 1810.23,687.302 1810.79,687.302 1811.35,687.302 1811.9,687.302 1812.46,687.302 1813.02,687.302 1813.58,687.302 1814.14,687.302 1814.7,687.302 1815.26,687.302 1815.82,687.302 1816.38,687.302 1816.94,687.302 1817.5,687.302 1818.06,687.302 1818.62,687.302 1819.18,687.302 1819.73,687.302 1820.29,687.302 1820.85,687.302 1821.41,687.302 1821.97,687.302 1822.53,687.302 1823.09,687.302 1823.65,687.302 1824.21,687.302 1824.77,687.302 1825.33,687.302 1825.89,687.302 1826.45,687.302 1827,687.302 1827.56,687.302 1828.12,687.302 1828.68,687.302 1829.24,687.302 1829.8,687.302 1830.36,687.302 1830.92,687.302 1831.48,687.302 1832.04,687.302 1832.6,687.302 1833.16,687.302 1833.72,687.302 1834.27,687.302 1834.83,687.302 1835.39,687.302 1835.95,687.302 1836.51,687.302 1837.07,687.302 1837.63,687.302 1838.19,687.302 \"/>\n<path clip-path=\"url(#clip223)\" d=\"M720.247 685.196 L720.806 685.196 L721.365 685.196 L721.924 685.196 L722.484 685.196 L723.043 685.196 L723.602 685.196 L724.161 685.196 L724.721 685.196 L725.28 685.196 L725.839 685.196 L726.398 685.196 L726.958 685.196 L727.517 685.196 L728.076 685.196 L728.635 685.196 L729.195 685.196 L729.754 685.196 L730.313 685.196 L730.872 685.196 L731.432 685.196 L731.991 685.196 L732.55 685.196 L733.109 685.196 L733.669 685.196 L734.228 685.196 L734.787 685.196 L735.346 685.196 L735.906 685.196 L736.465 685.196 L737.024 685.196 L737.583 685.196 L738.143 685.196 L738.702 685.196 L739.261 685.196 L739.82 685.196 L740.38 685.196 L740.939 685.196 L741.498 685.196 L742.057 685.196 L742.617 685.196 L743.176 685.196 L743.735 685.196 L744.294 685.196 L744.854 685.196 L745.413 685.196 L745.972 685.196 L746.531 685.196 L747.091 685.196 L747.65 685.196 L748.209 685.196 L748.768 685.196 L749.328 685.196 L749.887 685.196 L750.446 685.196 L751.005 685.196 L751.565 685.196 L752.124 685.196 L752.683 685.196 L753.242 685.196 L753.802 685.196 L754.361 685.196 L754.92 685.196 L755.479 685.196 L756.039 685.196 L756.598 685.196 L757.157 685.196 L757.716 685.196 L758.276 685.196 L758.835 685.196 L759.394 685.196 L759.953 685.196 L760.513 685.196 L761.072 685.196 L761.631 685.196 L762.19 685.196 L762.75 685.196 L763.309 685.196 L763.868 685.196 L764.427 685.196 L764.987 685.196 L765.546 685.196 L766.105 685.196 L766.664 685.196 L767.224 685.196 L767.783 685.196 L768.342 685.196 L768.901 685.196 L769.461 685.196 L770.02 685.196 L770.579 685.196 L771.138 685.196 L771.698 685.196 L772.257 685.196 L772.816 685.196 L773.375 685.196 L773.935 685.196 L774.494 685.196 L775.053 685.196 L775.612 685.196 L776.172 685.196 L776.731 685.196 L777.29 685.196 L777.849 685.196 L778.409 685.196 L778.968 685.196 L779.527 685.196 L780.086 685.196 L780.646 685.196 L781.205 685.196 L781.764 685.196 L782.323 685.196 L782.883 685.196 L783.442 685.196 L784.001 685.196 L784.56 685.196 L785.12 685.196 L785.679 685.196 L786.238 685.196 L786.797 685.196 L787.357 685.196 L787.916 685.196 L788.475 685.196 L789.034 685.196 L789.594 685.196 L790.153 685.196 L790.712 685.196 L791.271 685.196 L791.831 685.196 L792.39 685.196 L792.949 685.196 L793.508 685.196 L794.068 685.196 L794.627 685.196 L795.186 685.196 L795.745 685.196 L796.305 685.196 L796.864 685.196 L797.423 685.196 L797.982 685.196 L798.542 685.196 L799.101 685.196 L799.66 685.196 L800.219 685.196 L800.779 685.196 L801.338 685.196 L801.897 685.196 L802.456 685.196 L803.016 685.196 L803.575 685.196 L804.134 685.196 L804.693 685.196 L805.253 685.196 L805.812 685.196 L806.371 685.196 L806.931 685.196 L807.49 685.196 L808.049 685.196 L808.608 685.196 L809.168 685.196 L809.727 685.196 L810.286 685.196 L810.845 685.196 L811.405 685.196 L811.964 685.196 L812.523 685.196 L813.082 685.196 L813.642 685.196 L814.201 685.196 L814.76 685.196 L815.319 685.196 L815.879 685.196 L816.438 685.196 L816.997 685.196 L817.556 685.196 L818.116 685.196 L818.675 685.196 L819.234 685.196 L819.793 685.196 L820.353 685.196 L820.912 685.196 L821.471 685.196 L822.03 685.196 L822.59 685.196 L823.149 685.196 L823.708 685.196 L824.267 685.196 L824.827 685.196 L825.386 685.196 L825.945 685.196 L826.504 685.196 L827.064 685.196 L827.623 685.196 L828.182 685.196 L828.741 685.196 L829.301 685.196 L829.86 685.196 L830.419 685.196 L830.978 685.196 L831.538 685.196 L832.097 685.196 L832.656 685.196 L833.215 685.196 L833.775 685.196 L834.334 685.196 L834.893 685.196 L835.452 685.196 L836.012 685.196 L836.571 685.196 L837.13 685.196 L837.689 685.196 L838.249 685.196 L838.808 685.196 L839.367 685.196 L839.926 685.196 L840.486 685.196 L841.045 685.196 L841.604 685.196 L842.163 685.196 L842.723 685.196 L843.282 685.196 L843.841 685.196 L844.4 685.196 L844.96 685.196 L845.519 685.196 L846.078 685.196 L846.637 685.196 L847.197 685.196 L847.756 685.196 L848.315 685.196 L848.874 685.196 L849.434 685.196 L849.993 685.196 L850.552 685.196 L851.111 685.196 L851.671 685.196 L852.23 685.196 L852.789 685.196 L853.348 685.196 L853.908 685.196 L854.467 685.196 L855.026 685.196 L855.585 685.196 L856.145 685.196 L856.704 685.196 L857.263 685.196 L857.822 685.196 L858.382 685.196 L858.941 685.196 L859.5 685.196 L860.059 685.196 L860.619 685.196 L861.178 685.196 L861.737 685.196 L862.296 685.196 L862.856 685.196 L863.415 685.196 L863.974 685.196 L864.533 685.196 L865.093 685.196 L865.652 685.196 L866.211 685.196 L866.77 685.196 L867.33 685.196 L867.889 685.196 L868.448 685.196 L869.007 685.196 L869.567 685.196 L870.126 685.196 L870.685 685.196 L871.244 685.196 L871.804 685.196 L872.363 685.196 L872.922 685.196 L873.481 685.196 L874.041 685.196 L874.6 685.196 L875.159 685.196 L875.718 685.196 L876.278 685.196 L876.837 685.196 L877.396 685.196 L877.955 685.196 L878.515 685.196 L879.074 685.196 L879.633 685.196 L880.192 685.196 L880.752 685.196 L881.311 685.196 L881.87 685.196 L882.429 685.196 L882.989 685.196 L883.548 685.196 L884.107 685.196 L884.666 685.196 L885.226 685.196 L885.785 685.196 L886.344 685.196 L886.903 685.196 L887.463 685.196 L888.022 685.196 L888.581 685.196 L889.14 685.196 L889.7 685.196 L890.259 685.196 L890.818 685.196 L891.377 685.196 L891.937 685.196 L892.496 685.196 L893.055 685.196 L893.614 685.196 L894.174 685.196 L894.733 685.196 L895.292 685.196 L895.851 685.196 L896.411 685.196 L896.97 685.196 L897.529 685.196 L898.088 685.196 L898.648 685.196 L899.207 685.196 L899.766 685.196 L900.325 685.196 L900.885 685.196 L901.444 685.196 L902.003 685.196 L902.562 685.196 L903.122 685.196 L903.681 685.196 L904.24 685.196 L904.799 685.196 L905.359 685.196 L905.918 685.196 L906.477 685.196 L907.036 685.196 L907.596 685.196 L908.155 685.196 L908.714 685.196 L909.273 685.196 L909.833 685.196 L910.392 685.196 L910.951 685.196 L911.51 685.196 L912.07 685.196 L912.629 685.196 L913.188 685.196 L913.747 685.196 L914.307 685.196 L914.866 685.196 L915.425 685.196 L915.984 685.196 L916.544 685.196 L917.103 685.196 L917.662 685.196 L918.221 685.196 L918.781 685.196 L919.34 685.196 L919.899 685.196 L920.458 685.196 L921.018 685.196 L921.577 685.196 L922.136 685.196 L922.695 685.196 L923.255 685.196 L923.814 685.196 L924.373 685.196 L924.932 685.196 L925.492 685.196 L926.051 685.196 L926.61 685.196 L927.169 685.196 L927.729 685.196 L928.288 685.196 L928.847 685.196 L929.406 685.196 L929.966 685.196 L930.525 685.196 L931.084 685.196 L931.644 685.196 L932.203 685.196 L932.762 685.196 L933.321 685.196 L933.881 685.196 L934.44 685.196 L934.999 685.196 L935.558 685.196 L936.118 685.196 L936.677 685.196 L937.236 685.196 L937.795 685.196 L938.355 685.196 L938.914 685.196 L939.473 685.196 L940.032 685.196 L940.592 685.196 L941.151 685.196 L941.71 685.196 L942.269 685.196 L942.829 685.196 L943.388 685.196 L943.947 685.196 L944.506 685.196 L945.066 685.196 L945.625 685.196 L946.184 685.196 L946.743 685.196 L947.303 685.196 L947.862 685.196 L948.421 685.196 L948.98 685.196 L949.54 685.196 L950.099 685.196 L950.658 685.196 L951.217 685.196 L951.777 685.196 L952.336 685.196 L952.895 685.196 L953.454 685.196 L954.014 685.196 L954.573 685.196 L955.132 685.196 L955.691 685.196 L956.251 685.196 L956.81 685.196 L957.369 685.196 L957.928 685.196 L958.488 685.196 L959.047 685.196 L959.606 685.196 L960.165 685.196 L960.725 685.196 L961.284 685.196 L961.843 685.196 L962.402 685.196 L962.962 685.196 L963.521 685.196 L964.08 685.196 L964.639 685.196 L965.199 685.196 L965.758 685.196 L966.317 685.196 L966.876 685.196 L967.436 685.196 L967.995 685.196 L968.554 685.196 L969.113 685.196 L969.673 685.196 L970.232 685.196 L970.791 685.196 L971.35 685.196 L971.91 685.196 L972.469 685.196 L973.028 685.196 L973.587 685.196 L974.147 685.196 L974.706 685.196 L975.265 685.196 L975.824 685.196 L976.384 685.196 L976.943 685.196 L977.502 685.196 L978.061 685.196 L978.621 685.196 L979.18 685.196 L979.739 685.196 L980.298 685.196 L980.858 685.196 L981.417 685.196 L981.976 685.196 L982.535 685.196 L983.095 685.196 L983.654 685.196 L984.213 685.196 L984.772 685.196 L985.332 685.196 L985.891 685.196 L986.45 685.196 L987.009 685.196 L987.569 685.196 L988.128 685.196 L988.687 685.196 L989.246 685.196 L989.806 685.196 L990.365 685.196 L990.924 685.196 L991.483 685.196 L992.043 685.196 L992.602 685.196 L993.161 685.196 L993.72 685.196 L994.28 685.196 L994.839 685.196 L995.398 685.196 L995.957 685.196 L996.517 685.196 L997.076 685.196 L997.635 685.196 L998.194 685.196 L998.754 685.196 L999.313 685.196 L999.872 685.196 L1000.43 685.196 L1000.99 685.196 L1001.55 685.196 L1002.11 685.196 L1002.67 685.196 L1003.23 685.196 L1003.79 685.196 L1004.35 685.196 L1004.91 685.196 L1005.46 685.196 L1006.02 685.196 L1006.58 685.196 L1007.14 685.196 L1007.7 685.196 L1008.26 685.196 L1008.82 685.196 L1009.38 685.196 L1009.94 685.196 L1010.5 685.196 L1011.06 685.196 L1011.62 685.196 L1012.18 685.196 L1012.73 685.196 L1013.29 685.196 L1013.85 685.196 L1014.41 685.196 L1014.97 685.196 L1015.53 685.196 L1016.09 685.196 L1016.65 685.196 L1017.21 685.196 L1017.77 685.196 L1018.33 685.196 L1018.89 685.196 L1019.45 685.196 L1020.01 685.196 L1020.56 685.196 L1021.12 685.196 L1021.68 685.196 L1022.24 685.196 L1022.8 685.196 L1023.36 685.196 L1023.92 685.196 L1024.48 685.196 L1025.04 685.196 L1025.6 685.196 L1026.16 685.196 L1026.72 685.196 L1027.28 685.196 L1027.83 685.196 L1028.39 685.196 L1028.95 685.196 L1029.51 685.196 L1030.07 685.196 L1030.63 685.196 L1031.19 685.196 L1031.75 685.196 L1032.31 685.196 L1032.87 685.196 L1033.43 685.196 L1033.99 685.196 L1034.55 685.196 L1035.1 685.196 L1035.66 685.196 L1036.22 685.196 L1036.78 685.196 L1037.34 685.196 L1037.9 685.196 L1038.46 685.196 L1039.02 685.196 L1039.58 685.196 L1040.14 685.196 L1040.7 685.196 L1041.26 685.196 L1041.82 685.196 L1042.38 685.196 L1042.93 685.196 L1043.49 685.196 L1044.05 685.196 L1044.61 685.196 L1045.17 685.196 L1045.73 685.196 L1046.29 685.196 L1046.85 685.196 L1047.41 685.196 L1047.97 685.196 L1048.53 685.196 L1049.09 685.196 L1049.65 685.196 L1050.2 685.196 L1050.76 685.196 L1051.32 685.196 L1051.88 685.196 L1052.44 685.196 L1053 685.196 L1053.56 685.196 L1054.12 685.196 L1054.68 685.196 L1055.24 685.196 L1055.8 685.196 L1056.36 685.196 L1056.92 685.196 L1057.48 685.196 L1058.03 685.196 L1058.59 685.196 L1059.15 685.196 L1059.71 685.196 L1060.27 685.196 L1060.83 685.196 L1061.39 685.196 L1061.95 685.196 L1062.51 685.196 L1063.07 685.196 L1063.63 685.196 L1064.19 685.196 L1064.75 685.196 L1065.3 685.196 L1065.86 685.196 L1066.42 685.196 L1066.98 685.196 L1067.54 685.196 L1068.1 685.196 L1068.66 685.196 L1069.22 685.196 L1069.78 685.196 L1070.34 685.196 L1070.9 685.196 L1071.46 685.196 L1072.02 685.196 L1072.57 685.196 L1073.13 685.196 L1073.69 685.196 L1074.25 685.196 L1074.81 685.196 L1075.37 685.196 L1075.93 685.196 L1076.49 685.196 L1077.05 685.196 L1077.61 685.196 L1078.17 685.196 L1078.73 685.196 L1079.29 685.196 L1079.85 685.196 L1080.4 685.196 L1080.96 685.196 L1081.52 685.196 L1082.08 685.196 L1082.64 685.196 L1083.2 685.196 L1083.76 685.196 L1084.32 685.196 L1084.88 685.196 L1085.44 685.196 L1086 685.196 L1086.56 685.196 L1087.12 685.196 L1087.67 685.196 L1088.23 685.196 L1088.79 685.196 L1089.35 685.196 L1089.91 685.196 L1090.47 685.196 L1091.03 685.196 L1091.59 685.196 L1092.15 685.196 L1092.71 685.196 L1093.27 685.196 L1093.83 685.196 L1094.39 685.196 L1094.94 685.196 L1095.5 685.196 L1096.06 685.196 L1096.62 685.196 L1097.18 685.196 L1097.74 685.196 L1098.3 685.196 L1098.86 685.196 L1099.42 685.196 L1099.98 685.196 L1100.54 685.196 L1101.1 685.196 L1101.66 685.196 L1102.22 685.196 L1102.77 685.196 L1103.33 685.196 L1103.89 685.196 L1104.45 685.196 L1105.01 685.196 L1105.57 685.196 L1106.13 685.196 L1106.69 685.196 L1107.25 685.196 L1107.81 685.196 L1108.37 685.196 L1108.93 685.196 L1109.49 685.196 L1110.04 685.196 L1110.6 685.196 L1111.16 685.196 L1111.72 685.196 L1112.28 685.196 L1112.84 685.196 L1113.4 685.196 L1113.96 685.196 L1114.52 685.196 L1115.08 685.196 L1115.64 685.196 L1116.2 685.196 L1116.76 685.196 L1117.31 685.196 L1117.87 685.196 L1118.43 685.196 L1118.99 685.196 L1119.55 685.196 L1120.11 685.196 L1120.67 685.196 L1121.23 685.196 L1121.79 685.196 L1122.35 685.196 L1122.91 685.196 L1123.47 685.196 L1124.03 685.196 L1124.59 685.196 L1125.14 685.196 L1125.7 685.196 L1126.26 685.196 L1126.82 685.196 L1127.38 685.196 L1127.94 685.196 L1128.5 685.196 L1129.06 685.196 L1129.62 685.196 L1130.18 685.196 L1130.74 685.196 L1131.3 685.196 L1131.86 685.196 L1132.41 685.196 L1132.97 685.196 L1133.53 685.196 L1134.09 685.196 L1134.65 685.196 L1135.21 685.196 L1135.77 685.196 L1136.33 685.196 L1136.89 685.196 L1137.45 685.196 L1138.01 685.196 L1138.57 685.196 L1139.13 685.196 L1139.68 685.196 L1140.24 685.196 L1140.8 685.196 L1141.36 685.196 L1141.92 685.196 L1142.48 685.196 L1143.04 685.196 L1143.6 685.196 L1144.16 685.196 L1144.72 685.196 L1145.28 685.196 L1145.84 685.196 L1146.4 685.196 L1146.96 685.196 L1147.51 685.196 L1148.07 685.196 L1148.63 685.196 L1149.19 685.196 L1149.75 685.196 L1150.31 685.196 L1150.87 685.196 L1151.43 685.196 L1151.99 685.196 L1152.55 685.196 L1153.11 685.196 L1153.67 685.196 L1154.23 685.196 L1154.78 685.196 L1155.34 685.196 L1155.9 685.196 L1156.46 685.196 L1157.02 685.196 L1157.58 685.196 L1158.14 685.196 L1158.7 685.196 L1159.26 685.196 L1159.82 685.196 L1160.38 685.196 L1160.94 685.196 L1161.5 685.196 L1162.05 685.196 L1162.61 685.196 L1163.17 685.196 L1163.73 685.196 L1164.29 685.196 L1164.85 685.196 L1165.41 685.196 L1165.97 685.196 L1166.53 685.196 L1167.09 685.196 L1167.65 685.196 L1168.21 685.196 L1168.77 685.196 L1169.33 685.196 L1169.88 685.196 L1170.44 685.196 L1171 685.196 L1171.56 685.196 L1172.12 685.196 L1172.68 685.196 L1173.24 685.196 L1173.8 685.196 L1174.36 685.196 L1174.92 685.196 L1175.48 685.196 L1176.04 685.196 L1176.6 685.196 L1177.15 685.196 L1177.71 685.196 L1178.27 685.196 L1178.83 685.196 L1179.39 685.196 L1179.95 685.196 L1180.51 685.196 L1181.07 685.196 L1181.63 685.196 L1182.19 685.196 L1182.75 685.196 L1183.31 685.196 L1183.87 685.196 L1184.43 685.196 L1184.98 685.196 L1185.54 685.196 L1186.1 685.196 L1186.66 685.196 L1187.22 685.196 L1187.78 685.196 L1188.34 685.196 L1188.9 685.196 L1189.46 685.196 L1190.02 685.196 L1190.58 685.196 L1191.14 685.196 L1191.7 685.196 L1192.25 685.196 L1192.81 685.196 L1193.37 685.196 L1193.93 685.196 L1194.49 685.196 L1195.05 685.196 L1195.61 685.196 L1196.17 685.196 L1196.73 685.196 L1197.29 685.196 L1197.85 685.196 L1198.41 685.196 L1198.97 685.196 L1199.52 685.196 L1200.08 685.196 L1200.64 685.196 L1201.2 685.196 L1201.76 685.196 L1202.32 685.196 L1202.88 685.196 L1203.44 685.196 L1204 685.196 L1204.56 685.196 L1205.12 685.196 L1205.68 685.196 L1206.24 685.196 L1206.8 685.196 L1207.35 685.196 L1207.91 685.196 L1208.47 685.196 L1209.03 685.196 L1209.59 685.196 L1210.15 685.196 L1210.71 685.196 L1211.27 685.196 L1211.83 685.196 L1212.39 685.196 L1212.95 685.196 L1213.51 685.196 L1214.07 685.196 L1214.62 685.196 L1215.18 685.196 L1215.74 685.196 L1216.3 685.196 L1216.86 685.196 L1217.42 685.196 L1217.98 685.196 L1218.54 685.196 L1219.1 685.196 L1219.66 685.196 L1220.22 685.196 L1220.78 685.196 L1221.34 685.196 L1221.89 685.196 L1222.45 685.196 L1223.01 685.196 L1223.57 685.196 L1224.13 685.196 L1224.69 685.196 L1225.25 685.196 L1225.81 685.196 L1226.37 685.196 L1226.93 685.196 L1227.49 685.196 L1228.05 685.196 L1228.61 685.196 L1229.17 685.196 L1229.72 685.196 L1230.28 685.196 L1230.84 685.196 L1231.4 685.196 L1231.96 685.196 L1232.52 685.196 L1233.08 685.196 L1233.64 685.196 L1234.2 685.196 L1234.76 685.196 L1235.32 685.196 L1235.88 685.196 L1236.44 685.196 L1236.99 685.196 L1237.55 685.196 L1238.11 685.196 L1238.67 685.196 L1239.23 685.196 L1239.79 685.196 L1240.35 685.196 L1240.91 685.196 L1241.47 685.196 L1242.03 685.196 L1242.59 685.196 L1243.15 685.196 L1243.71 685.196 L1244.26 685.196 L1244.82 685.196 L1245.38 685.196 L1245.94 685.196 L1246.5 685.196 L1247.06 685.196 L1247.62 685.196 L1248.18 685.196 L1248.74 685.196 L1249.3 685.196 L1249.86 685.196 L1250.42 685.196 L1250.98 685.196 L1251.54 685.196 L1252.09 685.196 L1252.65 685.196 L1253.21 685.196 L1253.77 685.196 L1254.33 685.196 L1254.89 685.196 L1255.45 685.196 L1256.01 685.196 L1256.57 685.196 L1257.13 685.196 L1257.69 685.196 L1258.25 685.196 L1258.81 685.196 L1259.36 685.196 L1259.92 685.196 L1260.48 685.196 L1261.04 685.196 L1261.6 685.196 L1262.16 685.196 L1262.72 685.196 L1263.28 685.196 L1263.84 685.196 L1264.4 685.196 L1264.96 685.196 L1265.52 685.196 L1266.08 685.196 L1266.63 685.196 L1267.19 685.196 L1267.75 685.196 L1268.31 685.196 L1268.87 685.196 L1269.43 685.196 L1269.99 685.196 L1270.55 685.196 L1271.11 685.196 L1271.67 685.196 L1272.23 685.196 L1272.79 685.196 L1273.35 685.196 L1273.91 685.196 L1274.46 685.196 L1275.02 685.196 L1275.58 685.196 L1276.14 685.196 L1276.7 685.196 L1277.26 685.196 L1277.82 685.196 L1278.38 685.196 L1278.94 685.196 L1279.5 685.196 L1280.06 685.196 L1280.62 685.196 L1281.18 685.196 L1281.73 685.196 L1282.29 685.196 L1282.85 685.196 L1283.41 685.196 L1283.97 685.196 L1284.53 685.196 L1285.09 685.196 L1285.65 685.196 L1286.21 685.196 L1286.77 685.196 L1287.33 685.196 L1287.89 685.196 L1288.45 685.196 L1289 685.196 L1289.56 685.196 L1290.12 685.196 L1290.68 685.196 L1291.24 685.196 L1291.8 685.196 L1292.36 685.196 L1292.92 685.196 L1293.48 685.196 L1294.04 685.196 L1294.6 685.196 L1295.16 685.196 L1295.72 685.196 L1296.28 685.196 L1296.83 685.196 L1297.39 685.196 L1297.95 685.196 L1298.51 685.196 L1299.07 685.196 L1299.63 685.196 L1300.19 685.196 L1300.75 685.196 L1301.31 685.196 L1301.87 685.196 L1302.43 685.196 L1302.99 685.196 L1303.55 685.196 L1304.1 685.196 L1304.66 685.196 L1305.22 685.196 L1305.78 685.196 L1306.34 685.196 L1306.9 685.196 L1307.46 685.196 L1308.02 685.196 L1308.58 685.196 L1309.14 685.196 L1309.7 685.196 L1310.26 685.196 L1310.82 685.196 L1311.38 685.196 L1311.93 685.196 L1312.49 685.196 L1313.05 685.196 L1313.61 685.196 L1314.17 685.196 L1314.73 685.196 L1315.29 685.196 L1315.85 685.196 L1316.41 685.196 L1316.97 685.196 L1317.53 685.196 L1318.09 685.196 L1318.65 685.196 L1319.2 685.196 L1319.76 685.196 L1320.32 685.196 L1320.88 685.196 L1321.44 685.196 L1322 685.196 L1322.56 685.196 L1323.12 685.196 L1323.68 685.196 L1324.24 685.196 L1324.8 685.196 L1325.36 685.196 L1325.92 685.196 L1326.47 685.196 L1327.03 685.196 L1327.59 685.196 L1328.15 685.196 L1328.71 685.196 L1329.27 685.196 L1329.83 685.196 L1330.39 685.196 L1330.95 685.196 L1331.51 685.196 L1332.07 685.196 L1332.63 685.196 L1333.19 685.196 L1333.75 685.196 L1334.3 685.196 L1334.86 685.196 L1335.42 685.196 L1335.98 685.196 L1336.54 685.196 L1337.1 685.196 L1337.66 685.196 L1338.22 685.196 L1338.78 685.196 L1339.34 685.196 L1339.9 685.196 L1340.46 685.196 L1341.02 685.196 L1341.57 685.196 L1342.13 685.196 L1342.69 685.196 L1343.25 685.196 L1343.81 685.196 L1344.37 685.196 L1344.93 685.196 L1345.49 685.196 L1346.05 685.196 L1346.61 685.196 L1347.17 685.196 L1347.73 685.196 L1348.29 685.196 L1348.84 685.196 L1349.4 685.196 L1349.96 685.196 L1350.52 685.196 L1351.08 685.196 L1351.64 685.196 L1352.2 685.196 L1352.76 685.196 L1353.32 685.196 L1353.88 685.196 L1354.44 685.196 L1355 685.196 L1355.56 685.196 L1356.12 685.196 L1356.67 685.196 L1357.23 685.196 L1357.79 685.196 L1358.35 685.196 L1358.91 685.196 L1359.47 685.196 L1360.03 685.196 L1360.59 685.196 L1361.15 685.196 L1361.71 685.196 L1362.27 685.196 L1362.83 685.196 L1363.39 685.196 L1363.94 685.196 L1364.5 685.196 L1365.06 685.196 L1365.62 685.196 L1366.18 685.196 L1366.74 685.196 L1367.3 685.196 L1367.86 685.196 L1368.42 685.196 L1368.98 685.196 L1369.54 685.196 L1370.1 685.196 L1370.66 685.196 L1371.21 685.196 L1371.77 685.196 L1372.33 685.196 L1372.89 685.196 L1373.45 685.196 L1374.01 685.196 L1374.57 685.196 L1375.13 685.196 L1375.69 685.196 L1376.25 685.196 L1376.81 685.196 L1377.37 685.196 L1377.93 685.196 L1378.49 685.196 L1379.04 685.196 L1379.6 685.196 L1380.16 685.196 L1380.72 685.196 L1381.28 685.196 L1381.84 685.196 L1382.4 685.196 L1382.96 685.196 L1383.52 685.196 L1384.08 685.196 L1384.64 685.196 L1385.2 685.196 L1385.76 685.196 L1386.31 685.196 L1386.87 685.196 L1387.43 685.196 L1387.99 685.196 L1388.55 685.196 L1389.11 685.196 L1389.67 685.196 L1390.23 685.196 L1390.79 685.196 L1391.35 685.196 L1391.91 685.196 L1392.47 685.196 L1393.03 685.196 L1393.58 685.196 L1394.14 685.196 L1394.7 685.196 L1395.26 685.196 L1395.82 685.196 L1396.38 685.196 L1396.94 685.196 L1397.5 685.196 L1398.06 685.196 L1398.62 685.196 L1399.18 685.196 L1399.74 685.196 L1400.3 685.196 L1400.86 685.196 L1401.41 685.196 L1401.97 685.196 L1402.53 685.196 L1403.09 685.196 L1403.65 685.196 L1404.21 685.196 L1404.77 685.196 L1405.33 685.196 L1405.89 685.196 L1406.45 685.196 L1407.01 685.196 L1407.57 685.196 L1408.13 685.196 L1408.68 685.196 L1409.24 685.196 L1409.8 685.196 L1410.36 685.196 L1410.92 685.196 L1411.48 685.196 L1412.04 685.196 L1412.6 685.196 L1413.16 685.196 L1413.72 685.196 L1414.28 685.196 L1414.84 685.196 L1415.4 685.196 L1415.95 685.196 L1416.51 685.196 L1417.07 685.196 L1417.63 685.196 L1418.19 685.196 L1418.75 685.196 L1419.31 685.196 L1419.87 685.196 L1420.43 685.196 L1420.99 685.196 L1421.55 685.196 L1422.11 685.196 L1422.67 685.196 L1423.23 685.196 L1423.78 685.196 L1424.34 685.196 L1424.9 685.196 L1425.46 685.196 L1426.02 685.196 L1426.58 685.196 L1427.14 685.196 L1427.7 685.196 L1428.26 685.196 L1428.82 685.196 L1429.38 685.196 L1429.94 685.196 L1430.5 685.196 L1431.05 685.196 L1431.61 685.196 L1432.17 685.196 L1432.73 685.196 L1433.29 685.196 L1433.85 685.196 L1434.41 685.196 L1434.97 685.196 L1435.53 685.196 L1436.09 685.196 L1436.65 685.196 L1437.21 685.196 L1437.77 685.196 L1438.33 685.196 L1438.88 685.196 L1439.44 685.196 L1440 685.196 L1440.56 685.196 L1441.12 685.196 L1441.68 685.196 L1442.24 685.196 L1442.8 685.196 L1443.36 685.196 L1443.92 685.196 L1444.48 685.196 L1445.04 685.196 L1445.6 685.196 L1446.15 685.196 L1446.71 685.196 L1447.27 685.196 L1447.83 685.196 L1448.39 685.196 L1448.95 685.196 L1449.51 685.196 L1450.07 685.196 L1450.63 685.196 L1451.19 685.196 L1451.75 685.196 L1452.31 685.196 L1452.87 685.196 L1453.42 685.196 L1453.98 685.196 L1454.54 685.196 L1455.1 685.196 L1455.66 685.196 L1456.22 685.196 L1456.78 685.196 L1457.34 685.196 L1457.9 685.196 L1458.46 685.196 L1459.02 685.196 L1459.58 685.196 L1460.14 685.196 L1460.7 685.196 L1461.25 685.196 L1461.81 685.196 L1462.37 685.196 L1462.93 685.196 L1463.49 685.196 L1464.05 685.196 L1464.61 685.196 L1465.17 685.196 L1465.73 685.196 L1466.29 685.196 L1466.85 685.196 L1467.41 685.196 L1467.97 685.196 L1468.52 685.196 L1469.08 685.196 L1469.64 685.196 L1470.2 685.196 L1470.76 685.196 L1471.32 685.196 L1471.88 685.196 L1472.44 685.196 L1473 685.196 L1473.56 685.196 L1474.12 685.196 L1474.68 685.196 L1475.24 685.196 L1475.79 685.196 L1476.35 685.196 L1476.91 685.196 L1477.47 685.196 L1478.03 685.196 L1478.59 685.196 L1479.15 685.196 L1479.71 685.196 L1480.27 685.196 L1480.83 685.196 L1481.39 685.196 L1481.95 685.196 L1482.51 685.196 L1483.07 685.196 L1483.62 685.196 L1484.18 685.196 L1484.74 685.196 L1485.3 685.196 L1485.86 685.196 L1486.42 685.196 L1486.98 685.196 L1487.54 685.196 L1488.1 685.196 L1488.66 685.196 L1489.22 685.196 L1489.78 685.196 L1490.34 685.196 L1490.89 685.196 L1491.45 685.196 L1492.01 685.196 L1492.57 685.196 L1493.13 685.196 L1493.69 685.196 L1494.25 685.196 L1494.81 685.196 L1495.37 685.196 L1495.93 685.196 L1496.49 685.196 L1497.05 685.196 L1497.61 685.196 L1498.16 685.196 L1498.72 685.196 L1499.28 685.196 L1499.84 685.196 L1500.4 685.196 L1500.96 685.196 L1501.52 685.196 L1502.08 685.196 L1502.64 685.196 L1503.2 685.196 L1503.76 685.196 L1504.32 685.196 L1504.88 685.196 L1505.44 685.196 L1505.99 685.196 L1506.55 685.196 L1507.11 685.196 L1507.67 685.196 L1508.23 685.196 L1508.79 685.196 L1509.35 685.196 L1509.91 685.196 L1510.47 685.196 L1511.03 685.196 L1511.59 685.196 L1512.15 685.196 L1512.71 685.196 L1513.26 685.196 L1513.82 685.196 L1514.38 685.196 L1514.94 685.196 L1515.5 685.196 L1516.06 685.196 L1516.62 685.196 L1517.18 685.196 L1517.74 685.196 L1518.3 685.196 L1518.86 685.196 L1519.42 685.196 L1519.98 685.196 L1520.53 685.196 L1521.09 685.196 L1521.65 685.196 L1522.21 685.196 L1522.77 685.196 L1523.33 685.196 L1523.89 685.196 L1524.45 685.196 L1525.01 685.196 L1525.57 685.196 L1526.13 685.196 L1526.69 685.196 L1527.25 685.196 L1527.81 685.196 L1528.36 685.196 L1528.92 685.196 L1529.48 685.196 L1530.04 685.196 L1530.6 685.196 L1531.16 685.196 L1531.72 685.196 L1532.28 685.196 L1532.84 685.196 L1533.4 685.196 L1533.96 685.196 L1534.52 685.196 L1535.08 685.196 L1535.63 685.196 L1536.19 685.196 L1536.75 685.196 L1537.31 685.196 L1537.87 685.196 L1538.43 685.196 L1538.99 685.196 L1539.55 685.196 L1540.11 685.196 L1540.67 685.196 L1541.23 685.196 L1541.79 685.196 L1542.35 685.196 L1542.9 685.196 L1543.46 685.196 L1544.02 685.196 L1544.58 685.196 L1545.14 685.196 L1545.7 685.196 L1546.26 685.196 L1546.82 685.196 L1547.38 685.196 L1547.94 685.196 L1548.5 685.196 L1549.06 685.196 L1549.62 685.196 L1550.18 685.196 L1550.73 685.196 L1551.29 685.196 L1551.85 685.196 L1552.41 685.196 L1552.97 685.196 L1553.53 685.196 L1554.09 685.196 L1554.65 685.196 L1555.21 685.196 L1555.77 685.196 L1556.33 685.196 L1556.89 685.196 L1557.45 685.196 L1558 685.196 L1558.56 685.196 L1559.12 685.196 L1559.68 685.196 L1560.24 685.196 L1560.8 685.196 L1561.36 685.196 L1561.92 685.196 L1562.48 685.196 L1563.04 685.196 L1563.6 685.196 L1564.16 685.196 L1564.72 685.196 L1565.28 685.196 L1565.83 685.196 L1566.39 685.196 L1566.95 685.196 L1567.51 685.196 L1568.07 685.196 L1568.63 685.196 L1569.19 685.196 L1569.75 685.196 L1570.31 685.196 L1570.87 685.196 L1571.43 685.196 L1571.99 685.196 L1572.55 685.196 L1573.1 685.196 L1573.66 685.196 L1574.22 685.196 L1574.78 685.196 L1575.34 685.196 L1575.9 685.196 L1576.46 685.196 L1577.02 685.196 L1577.58 685.196 L1578.14 685.196 L1578.7 685.196 L1579.26 685.196 L1579.82 685.196 L1580.37 685.196 L1580.93 685.196 L1581.49 685.196 L1582.05 685.196 L1582.61 685.196 L1583.17 685.196 L1583.73 685.196 L1584.29 685.196 L1584.85 685.196 L1585.41 685.196 L1585.97 685.196 L1586.53 685.196 L1587.09 685.196 L1587.65 685.196 L1588.2 685.196 L1588.76 685.196 L1589.32 685.196 L1589.88 685.196 L1590.44 685.196 L1591 685.196 L1591.56 685.196 L1592.12 685.196 L1592.68 685.196 L1593.24 685.196 L1593.8 685.196 L1594.36 685.196 L1594.92 685.196 L1595.47 685.196 L1596.03 685.196 L1596.59 685.196 L1597.15 685.196 L1597.71 685.196 L1598.27 685.196 L1598.83 685.196 L1599.39 685.196 L1599.95 685.196 L1600.51 685.196 L1601.07 685.196 L1601.63 685.196 L1602.19 685.196 L1602.74 685.196 L1603.3 685.196 L1603.86 685.196 L1604.42 685.196 L1604.98 685.196 L1605.54 685.196 L1606.1 685.196 L1606.66 685.196 L1607.22 685.196 L1607.78 685.196 L1608.34 685.196 L1608.9 685.196 L1609.46 685.196 L1610.02 685.196 L1610.57 685.196 L1611.13 685.196 L1611.69 685.196 L1612.25 685.196 L1612.81 685.196 L1613.37 685.196 L1613.93 685.196 L1614.49 685.196 L1615.05 685.196 L1615.61 685.196 L1616.17 685.196 L1616.73 685.196 L1617.29 685.196 L1617.84 685.196 L1618.4 685.196 L1618.96 685.196 L1619.52 685.196 L1620.08 685.196 L1620.64 685.196 L1621.2 685.196 L1621.76 685.196 L1622.32 685.196 L1622.88 685.196 L1623.44 685.196 L1624 685.196 L1624.56 685.196 L1625.11 685.196 L1625.67 685.196 L1626.23 685.196 L1626.79 685.196 L1627.35 685.196 L1627.91 685.196 L1628.47 685.196 L1629.03 685.196 L1629.59 685.196 L1630.15 685.196 L1630.71 685.196 L1631.27 685.196 L1631.83 685.196 L1632.39 685.196 L1632.94 685.196 L1633.5 685.196 L1634.06 685.196 L1634.62 685.196 L1635.18 685.196 L1635.74 685.196 L1636.3 685.196 L1636.86 685.196 L1637.42 685.196 L1637.98 685.196 L1638.54 685.196 L1639.1 685.196 L1639.66 685.196 L1640.21 685.196 L1640.77 685.196 L1641.33 685.196 L1641.89 685.196 L1642.45 685.196 L1643.01 685.196 L1643.57 685.196 L1644.13 685.196 L1644.69 685.196 L1645.25 685.196 L1645.81 685.196 L1646.37 685.196 L1646.93 685.196 L1647.48 685.196 L1648.04 685.196 L1648.6 685.196 L1649.16 685.196 L1649.72 685.196 L1650.28 685.196 L1650.84 685.196 L1651.4 685.196 L1651.96 685.196 L1652.52 685.196 L1653.08 685.196 L1653.64 685.196 L1654.2 685.196 L1654.76 685.196 L1655.31 685.196 L1655.87 685.196 L1656.43 685.196 L1656.99 685.196 L1657.55 685.196 L1658.11 685.196 L1658.67 685.196 L1659.23 685.196 L1659.79 685.196 L1660.35 685.196 L1660.91 685.196 L1661.47 685.196 L1662.03 685.196 L1662.58 685.196 L1663.14 685.196 L1663.7 685.196 L1664.26 685.196 L1664.82 685.196 L1665.38 685.196 L1665.94 685.196 L1666.5 685.196 L1667.06 685.196 L1667.62 685.196 L1668.18 685.196 L1668.74 685.196 L1669.3 685.196 L1669.85 685.196 L1670.41 685.196 L1670.97 685.196 L1671.53 685.196 L1672.09 685.196 L1672.65 685.196 L1673.21 685.196 L1673.77 685.196 L1674.33 685.196 L1674.89 685.196 L1675.45 685.196 L1676.01 685.196 L1676.57 685.196 L1677.13 685.196 L1677.68 685.196 L1678.24 685.196 L1678.8 685.196 L1679.36 685.196 L1679.92 685.196 L1680.48 685.196 L1681.04 685.196 L1681.6 685.196 L1682.16 685.196 L1682.72 685.196 L1683.28 685.196 L1683.84 685.196 L1684.4 685.196 L1684.95 685.196 L1685.51 685.196 L1686.07 685.196 L1686.63 685.196 L1687.19 685.196 L1687.75 685.196 L1688.31 685.196 L1688.87 685.196 L1689.43 685.196 L1689.99 685.196 L1690.55 685.196 L1691.11 685.196 L1691.67 685.196 L1692.23 685.196 L1692.78 685.196 L1693.34 685.196 L1693.9 685.196 L1694.46 685.196 L1695.02 685.196 L1695.58 685.196 L1696.14 685.196 L1696.7 685.196 L1697.26 685.196 L1697.82 685.196 L1698.38 685.196 L1698.94 685.196 L1699.5 685.196 L1700.05 685.196 L1700.61 685.196 L1701.17 685.196 L1701.73 685.196 L1702.29 685.196 L1702.85 685.196 L1703.41 685.196 L1703.97 685.196 L1704.53 685.196 L1705.09 685.196 L1705.65 685.196 L1706.21 685.196 L1706.77 685.196 L1707.32 685.196 L1707.88 685.196 L1708.44 685.196 L1709 685.196 L1709.56 685.196 L1710.12 685.196 L1710.68 685.196 L1711.24 685.196 L1711.8 685.196 L1712.36 685.196 L1712.92 685.196 L1713.48 685.196 L1714.04 685.196 L1714.6 685.196 L1715.15 685.196 L1715.71 685.196 L1716.27 685.196 L1716.83 685.196 L1717.39 685.196 L1717.95 685.196 L1718.51 685.196 L1719.07 685.196 L1719.63 685.196 L1720.19 685.196 L1720.75 685.196 L1721.31 685.196 L1721.87 685.196 L1722.42 685.196 L1722.98 685.196 L1723.54 685.196 L1724.1 685.196 L1724.66 685.196 L1725.22 685.196 L1725.78 685.196 L1726.34 685.196 L1726.9 685.196 L1727.46 685.196 L1728.02 685.196 L1728.58 685.196 L1729.14 685.196 L1729.69 685.196 L1730.25 685.196 L1730.81 685.196 L1731.37 685.196 L1731.93 685.196 L1732.49 685.196 L1733.05 685.196 L1733.61 685.196 L1734.17 685.196 L1734.73 685.196 L1735.29 685.196 L1735.85 685.196 L1736.41 685.196 L1736.97 685.196 L1737.52 685.196 L1738.08 685.196 L1738.64 685.196 L1739.2 685.196 L1739.76 685.196 L1740.32 685.196 L1740.88 685.196 L1741.44 685.196 L1742 685.196 L1742.56 685.196 L1743.12 685.196 L1743.68 685.196 L1744.24 685.196 L1744.79 685.196 L1745.35 685.196 L1745.91 685.196 L1746.47 685.196 L1747.03 685.196 L1747.59 685.196 L1748.15 685.196 L1748.71 685.196 L1749.27 685.196 L1749.83 685.196 L1750.39 685.196 L1750.95 685.196 L1751.51 685.196 L1752.06 685.196 L1752.62 685.196 L1753.18 685.196 L1753.74 685.196 L1754.3 685.196 L1754.86 685.196 L1755.42 685.196 L1755.98 685.196 L1756.54 685.196 L1757.1 685.196 L1757.66 685.196 L1758.22 685.196 L1758.78 685.196 L1759.34 685.196 L1759.89 685.196 L1760.45 685.196 L1761.01 685.196 L1761.57 685.196 L1762.13 685.196 L1762.69 685.196 L1763.25 685.196 L1763.81 685.196 L1764.37 685.196 L1764.93 685.196 L1765.49 685.196 L1766.05 685.196 L1766.61 685.196 L1767.16 685.196 L1767.72 685.196 L1768.28 685.196 L1768.84 685.196 L1769.4 685.196 L1769.96 685.196 L1770.52 685.196 L1771.08 685.196 L1771.64 685.196 L1772.2 685.196 L1772.76 685.196 L1773.32 685.196 L1773.88 685.196 L1774.43 685.196 L1774.99 685.196 L1775.55 685.196 L1776.11 685.196 L1776.67 685.196 L1777.23 685.196 L1777.79 685.196 L1778.35 685.196 L1778.91 685.196 L1779.47 685.196 L1780.03 685.196 L1780.59 685.196 L1781.15 685.196 L1781.71 685.196 L1782.26 685.196 L1782.82 685.196 L1783.38 685.196 L1783.94 685.196 L1784.5 685.196 L1785.06 685.196 L1785.62 685.196 L1786.18 685.196 L1786.74 685.196 L1787.3 685.196 L1787.86 685.196 L1788.42 685.196 L1788.98 685.196 L1789.53 685.196 L1790.09 685.196 L1790.65 685.196 L1791.21 685.196 L1791.77 685.196 L1792.33 685.196 L1792.89 685.196 L1793.45 685.196 L1794.01 685.196 L1794.57 685.196 L1795.13 685.196 L1795.69 685.196 L1796.25 685.196 L1796.8 685.196 L1797.36 685.196 L1797.92 685.196 L1798.48 685.196 L1799.04 685.196 L1799.6 685.196 L1800.16 685.196 L1800.72 685.196 L1801.28 685.196 L1801.84 685.196 L1802.4 685.196 L1802.96 685.196 L1803.52 685.196 L1804.08 685.196 L1804.63 685.196 L1805.19 685.196 L1805.75 685.196 L1806.31 685.196 L1806.87 685.196 L1807.43 685.196 L1807.99 685.196 L1808.55 685.196 L1809.11 685.196 L1809.67 685.196 L1810.23 685.196 L1810.79 685.196 L1811.35 685.196 L1811.9 685.196 L1812.46 685.196 L1813.02 685.196 L1813.58 685.196 L1814.14 685.196 L1814.7 685.196 L1815.26 685.196 L1815.82 685.196 L1816.38 685.196 L1816.94 685.196 L1817.5 685.196 L1818.06 685.196 L1818.62 685.196 L1819.18 685.196 L1819.73 685.196 L1820.29 685.196 L1820.85 685.196 L1821.41 685.196 L1821.97 685.196 L1822.53 685.196 L1823.09 685.196 L1823.65 685.196 L1824.21 685.196 L1824.77 685.196 L1825.33 685.196 L1825.89 685.196 L1826.45 685.196 L1827 685.196 L1827.56 685.196 L1828.12 685.196 L1828.68 685.196 L1829.24 685.196 L1829.8 685.196 L1830.36 685.196 L1830.92 685.196 L1831.48 685.196 L1832.04 685.196 L1832.6 685.196 L1833.16 685.196 L1833.72 685.196 L1834.27 685.196 L1834.83 685.196 L1835.39 685.196 L1835.95 685.196 L1836.51 685.196 L1837.07 685.196 L1837.63 685.196 L1838.19 685.196 L1838.19 683.559 L1837.63 683.559 L1837.07 683.559 L1836.51 683.559 L1835.95 683.559 L1835.39 683.559 L1834.83 683.559 L1834.27 683.559 L1833.72 683.559 L1833.16 683.559 L1832.6 683.559 L1832.04 683.559 L1831.48 683.559 L1830.92 683.559 L1830.36 683.559 L1829.8 683.559 L1829.24 683.559 L1828.68 683.559 L1828.12 683.559 L1827.56 683.559 L1827 683.559 L1826.45 683.559 L1825.89 683.559 L1825.33 683.559 L1824.77 683.559 L1824.21 683.559 L1823.65 683.559 L1823.09 683.559 L1822.53 683.559 L1821.97 683.559 L1821.41 683.559 L1820.85 683.559 L1820.29 683.559 L1819.73 683.559 L1819.18 683.559 L1818.62 683.559 L1818.06 683.559 L1817.5 683.559 L1816.94 683.559 L1816.38 683.559 L1815.82 683.559 L1815.26 683.559 L1814.7 683.559 L1814.14 683.559 L1813.58 683.559 L1813.02 683.559 L1812.46 683.559 L1811.9 683.559 L1811.35 683.559 L1810.79 683.559 L1810.23 683.559 L1809.67 683.559 L1809.11 683.559 L1808.55 683.559 L1807.99 683.559 L1807.43 683.559 L1806.87 683.559 L1806.31 683.559 L1805.75 683.559 L1805.19 683.559 L1804.63 683.559 L1804.08 683.559 L1803.52 683.559 L1802.96 683.559 L1802.4 683.559 L1801.84 683.559 L1801.28 683.559 L1800.72 683.559 L1800.16 683.559 L1799.6 683.559 L1799.04 683.559 L1798.48 683.559 L1797.92 683.559 L1797.36 683.559 L1796.8 683.559 L1796.25 683.559 L1795.69 683.559 L1795.13 683.559 L1794.57 683.559 L1794.01 683.559 L1793.45 683.559 L1792.89 683.559 L1792.33 683.559 L1791.77 683.559 L1791.21 683.559 L1790.65 683.559 L1790.09 683.559 L1789.53 683.559 L1788.98 683.559 L1788.42 683.559 L1787.86 683.559 L1787.3 683.559 L1786.74 683.559 L1786.18 683.559 L1785.62 683.559 L1785.06 683.559 L1784.5 683.559 L1783.94 683.559 L1783.38 683.559 L1782.82 683.559 L1782.26 683.559 L1781.71 683.559 L1781.15 683.559 L1780.59 683.559 L1780.03 683.559 L1779.47 683.559 L1778.91 683.559 L1778.35 683.559 L1777.79 683.559 L1777.23 683.559 L1776.67 683.559 L1776.11 683.559 L1775.55 683.559 L1774.99 683.559 L1774.43 683.559 L1773.88 683.559 L1773.32 683.559 L1772.76 683.559 L1772.2 683.559 L1771.64 683.559 L1771.08 683.559 L1770.52 683.559 L1769.96 683.559 L1769.4 683.559 L1768.84 683.559 L1768.28 683.559 L1767.72 683.559 L1767.16 683.559 L1766.61 683.559 L1766.05 683.559 L1765.49 683.559 L1764.93 683.559 L1764.37 683.559 L1763.81 683.559 L1763.25 683.559 L1762.69 683.559 L1762.13 683.559 L1761.57 683.559 L1761.01 683.559 L1760.45 683.559 L1759.89 683.559 L1759.34 683.559 L1758.78 683.559 L1758.22 683.559 L1757.66 683.559 L1757.1 683.559 L1756.54 683.559 L1755.98 683.559 L1755.42 683.559 L1754.86 683.559 L1754.3 683.559 L1753.74 683.559 L1753.18 683.559 L1752.62 683.559 L1752.06 683.559 L1751.51 683.559 L1750.95 683.559 L1750.39 683.559 L1749.83 683.559 L1749.27 683.559 L1748.71 683.559 L1748.15 683.559 L1747.59 683.559 L1747.03 683.559 L1746.47 683.559 L1745.91 683.559 L1745.35 683.559 L1744.79 683.559 L1744.24 683.559 L1743.68 683.559 L1743.12 683.559 L1742.56 683.559 L1742 683.559 L1741.44 683.559 L1740.88 683.559 L1740.32 683.559 L1739.76 683.559 L1739.2 683.559 L1738.64 683.559 L1738.08 683.559 L1737.52 683.559 L1736.97 683.559 L1736.41 683.559 L1735.85 683.559 L1735.29 683.559 L1734.73 683.559 L1734.17 683.559 L1733.61 683.559 L1733.05 683.559 L1732.49 683.559 L1731.93 683.559 L1731.37 683.559 L1730.81 683.559 L1730.25 683.559 L1729.69 683.559 L1729.14 683.559 L1728.58 683.559 L1728.02 683.559 L1727.46 683.559 L1726.9 683.559 L1726.34 683.559 L1725.78 683.559 L1725.22 683.559 L1724.66 683.559 L1724.1 683.559 L1723.54 683.559 L1722.98 683.559 L1722.42 683.559 L1721.87 683.559 L1721.31 683.559 L1720.75 683.559 L1720.19 683.559 L1719.63 683.559 L1719.07 683.559 L1718.51 683.559 L1717.95 683.559 L1717.39 683.559 L1716.83 683.559 L1716.27 683.559 L1715.71 683.559 L1715.15 683.559 L1714.6 683.559 L1714.04 683.559 L1713.48 683.559 L1712.92 683.559 L1712.36 683.559 L1711.8 683.559 L1711.24 683.559 L1710.68 683.559 L1710.12 683.559 L1709.56 683.559 L1709 683.559 L1708.44 683.559 L1707.88 683.559 L1707.32 683.559 L1706.77 683.559 L1706.21 683.559 L1705.65 683.559 L1705.09 683.559 L1704.53 683.559 L1703.97 683.559 L1703.41 683.559 L1702.85 683.559 L1702.29 683.559 L1701.73 683.559 L1701.17 683.559 L1700.61 683.559 L1700.05 683.559 L1699.5 683.559 L1698.94 683.559 L1698.38 683.559 L1697.82 683.559 L1697.26 683.559 L1696.7 683.559 L1696.14 683.559 L1695.58 683.559 L1695.02 683.559 L1694.46 683.559 L1693.9 683.559 L1693.34 683.559 L1692.78 683.559 L1692.23 683.559 L1691.67 683.559 L1691.11 683.559 L1690.55 683.559 L1689.99 683.559 L1689.43 683.559 L1688.87 683.559 L1688.31 683.559 L1687.75 683.559 L1687.19 683.559 L1686.63 683.559 L1686.07 683.559 L1685.51 683.559 L1684.95 683.559 L1684.4 683.559 L1683.84 683.559 L1683.28 683.559 L1682.72 683.559 L1682.16 683.559 L1681.6 683.559 L1681.04 683.559 L1680.48 683.559 L1679.92 683.559 L1679.36 683.559 L1678.8 683.559 L1678.24 683.559 L1677.68 683.559 L1677.13 683.559 L1676.57 683.559 L1676.01 683.559 L1675.45 683.559 L1674.89 683.559 L1674.33 683.559 L1673.77 683.559 L1673.21 683.559 L1672.65 683.559 L1672.09 683.559 L1671.53 683.559 L1670.97 683.559 L1670.41 683.559 L1669.85 683.559 L1669.3 683.559 L1668.74 683.559 L1668.18 683.559 L1667.62 683.559 L1667.06 683.559 L1666.5 683.559 L1665.94 683.559 L1665.38 683.559 L1664.82 683.559 L1664.26 683.559 L1663.7 683.559 L1663.14 683.559 L1662.58 683.559 L1662.03 683.559 L1661.47 683.559 L1660.91 683.559 L1660.35 683.559 L1659.79 683.559 L1659.23 683.559 L1658.67 683.559 L1658.11 683.559 L1657.55 683.559 L1656.99 683.559 L1656.43 683.559 L1655.87 683.559 L1655.31 683.559 L1654.76 683.559 L1654.2 683.559 L1653.64 683.559 L1653.08 683.559 L1652.52 683.559 L1651.96 683.559 L1651.4 683.559 L1650.84 683.559 L1650.28 683.559 L1649.72 683.559 L1649.16 683.559 L1648.6 683.559 L1648.04 683.559 L1647.48 683.559 L1646.93 683.559 L1646.37 683.559 L1645.81 683.559 L1645.25 683.559 L1644.69 683.559 L1644.13 683.559 L1643.57 683.559 L1643.01 683.559 L1642.45 683.559 L1641.89 683.559 L1641.33 683.559 L1640.77 683.559 L1640.21 683.559 L1639.66 683.559 L1639.1 683.559 L1638.54 683.559 L1637.98 683.559 L1637.42 683.559 L1636.86 683.559 L1636.3 683.559 L1635.74 683.559 L1635.18 683.559 L1634.62 683.559 L1634.06 683.559 L1633.5 683.559 L1632.94 683.559 L1632.39 683.559 L1631.83 683.559 L1631.27 683.559 L1630.71 683.559 L1630.15 683.559 L1629.59 683.559 L1629.03 683.559 L1628.47 683.559 L1627.91 683.559 L1627.35 683.559 L1626.79 683.559 L1626.23 683.559 L1625.67 683.559 L1625.11 683.559 L1624.56 683.559 L1624 683.559 L1623.44 683.559 L1622.88 683.559 L1622.32 683.559 L1621.76 683.559 L1621.2 683.559 L1620.64 683.559 L1620.08 683.559 L1619.52 683.559 L1618.96 683.559 L1618.4 683.559 L1617.84 683.559 L1617.29 683.559 L1616.73 683.559 L1616.17 683.559 L1615.61 683.559 L1615.05 683.559 L1614.49 683.559 L1613.93 683.559 L1613.37 683.559 L1612.81 683.559 L1612.25 683.559 L1611.69 683.559 L1611.13 683.559 L1610.57 683.559 L1610.02 683.559 L1609.46 683.559 L1608.9 683.559 L1608.34 683.559 L1607.78 683.559 L1607.22 683.559 L1606.66 683.559 L1606.1 683.559 L1605.54 683.559 L1604.98 683.559 L1604.42 683.559 L1603.86 683.559 L1603.3 683.559 L1602.74 683.559 L1602.19 683.559 L1601.63 683.559 L1601.07 683.559 L1600.51 683.559 L1599.95 683.559 L1599.39 683.559 L1598.83 683.559 L1598.27 683.559 L1597.71 683.559 L1597.15 683.559 L1596.59 683.559 L1596.03 683.559 L1595.47 683.559 L1594.92 683.559 L1594.36 683.559 L1593.8 683.559 L1593.24 683.559 L1592.68 683.559 L1592.12 683.559 L1591.56 683.559 L1591 683.559 L1590.44 683.559 L1589.88 683.559 L1589.32 683.559 L1588.76 683.559 L1588.2 683.559 L1587.65 683.559 L1587.09 683.559 L1586.53 683.559 L1585.97 683.559 L1585.41 683.559 L1584.85 683.559 L1584.29 683.559 L1583.73 683.559 L1583.17 683.559 L1582.61 683.559 L1582.05 683.559 L1581.49 683.559 L1580.93 683.559 L1580.37 683.559 L1579.82 683.559 L1579.26 683.559 L1578.7 683.559 L1578.14 683.559 L1577.58 683.559 L1577.02 683.559 L1576.46 683.559 L1575.9 683.559 L1575.34 683.559 L1574.78 683.559 L1574.22 683.559 L1573.66 683.559 L1573.1 683.559 L1572.55 683.559 L1571.99 683.559 L1571.43 683.559 L1570.87 683.559 L1570.31 683.559 L1569.75 683.559 L1569.19 683.559 L1568.63 683.559 L1568.07 683.559 L1567.51 683.559 L1566.95 683.559 L1566.39 683.559 L1565.83 683.559 L1565.28 683.559 L1564.72 683.559 L1564.16 683.559 L1563.6 683.559 L1563.04 683.559 L1562.48 683.559 L1561.92 683.559 L1561.36 683.559 L1560.8 683.559 L1560.24 683.559 L1559.68 683.559 L1559.12 683.559 L1558.56 683.559 L1558 683.559 L1557.45 683.559 L1556.89 683.559 L1556.33 683.559 L1555.77 683.559 L1555.21 683.559 L1554.65 683.559 L1554.09 683.559 L1553.53 683.559 L1552.97 683.559 L1552.41 683.559 L1551.85 683.559 L1551.29 683.559 L1550.73 683.559 L1550.18 683.559 L1549.62 683.559 L1549.06 683.559 L1548.5 683.559 L1547.94 683.559 L1547.38 683.559 L1546.82 683.559 L1546.26 683.559 L1545.7 683.559 L1545.14 683.559 L1544.58 683.559 L1544.02 683.559 L1543.46 683.559 L1542.9 683.559 L1542.35 683.559 L1541.79 683.559 L1541.23 683.559 L1540.67 683.559 L1540.11 683.559 L1539.55 683.559 L1538.99 683.559 L1538.43 683.559 L1537.87 683.559 L1537.31 683.559 L1536.75 683.559 L1536.19 683.559 L1535.63 683.559 L1535.08 683.559 L1534.52 683.559 L1533.96 683.559 L1533.4 683.559 L1532.84 683.559 L1532.28 683.559 L1531.72 683.559 L1531.16 683.559 L1530.6 683.559 L1530.04 683.559 L1529.48 683.559 L1528.92 683.559 L1528.36 683.559 L1527.81 683.559 L1527.25 683.559 L1526.69 683.559 L1526.13 683.559 L1525.57 683.559 L1525.01 683.559 L1524.45 683.559 L1523.89 683.559 L1523.33 683.559 L1522.77 683.559 L1522.21 683.559 L1521.65 683.559 L1521.09 683.559 L1520.53 683.559 L1519.98 683.559 L1519.42 683.559 L1518.86 683.559 L1518.3 683.559 L1517.74 683.559 L1517.18 683.559 L1516.62 683.559 L1516.06 683.559 L1515.5 683.559 L1514.94 683.559 L1514.38 683.559 L1513.82 683.559 L1513.26 683.559 L1512.71 683.559 L1512.15 683.559 L1511.59 683.559 L1511.03 683.559 L1510.47 683.559 L1509.91 683.559 L1509.35 683.559 L1508.79 683.559 L1508.23 683.559 L1507.67 683.559 L1507.11 683.559 L1506.55 683.559 L1505.99 683.559 L1505.44 683.559 L1504.88 683.559 L1504.32 683.559 L1503.76 683.559 L1503.2 683.559 L1502.64 683.559 L1502.08 683.559 L1501.52 683.559 L1500.96 683.559 L1500.4 683.559 L1499.84 683.559 L1499.28 683.559 L1498.72 683.559 L1498.16 683.559 L1497.61 683.559 L1497.05 683.559 L1496.49 683.559 L1495.93 683.559 L1495.37 683.559 L1494.81 683.559 L1494.25 683.559 L1493.69 683.559 L1493.13 683.559 L1492.57 683.559 L1492.01 683.559 L1491.45 683.559 L1490.89 683.559 L1490.34 683.559 L1489.78 683.559 L1489.22 683.559 L1488.66 683.559 L1488.1 683.559 L1487.54 683.559 L1486.98 683.559 L1486.42 683.559 L1485.86 683.559 L1485.3 683.559 L1484.74 683.559 L1484.18 683.559 L1483.62 683.559 L1483.07 683.559 L1482.51 683.559 L1481.95 683.559 L1481.39 683.559 L1480.83 683.559 L1480.27 683.559 L1479.71 683.559 L1479.15 683.559 L1478.59 683.559 L1478.03 683.559 L1477.47 683.559 L1476.91 683.559 L1476.35 683.559 L1475.79 683.559 L1475.24 683.559 L1474.68 683.559 L1474.12 683.559 L1473.56 683.559 L1473 683.559 L1472.44 683.559 L1471.88 683.559 L1471.32 683.559 L1470.76 683.559 L1470.2 683.559 L1469.64 683.559 L1469.08 683.559 L1468.52 683.559 L1467.97 683.559 L1467.41 683.559 L1466.85 683.559 L1466.29 683.559 L1465.73 683.559 L1465.17 683.559 L1464.61 683.559 L1464.05 683.559 L1463.49 683.559 L1462.93 683.559 L1462.37 683.559 L1461.81 683.559 L1461.25 683.559 L1460.7 683.559 L1460.14 683.559 L1459.58 683.559 L1459.02 683.559 L1458.46 683.559 L1457.9 683.559 L1457.34 683.559 L1456.78 683.559 L1456.22 683.559 L1455.66 683.559 L1455.1 683.559 L1454.54 683.559 L1453.98 683.559 L1453.42 683.559 L1452.87 683.559 L1452.31 683.559 L1451.75 683.559 L1451.19 683.559 L1450.63 683.559 L1450.07 683.559 L1449.51 683.559 L1448.95 683.559 L1448.39 683.559 L1447.83 683.559 L1447.27 683.559 L1446.71 683.559 L1446.15 683.559 L1445.6 683.559 L1445.04 683.559 L1444.48 683.559 L1443.92 683.559 L1443.36 683.559 L1442.8 683.559 L1442.24 683.559 L1441.68 683.559 L1441.12 683.559 L1440.56 683.559 L1440 683.559 L1439.44 683.559 L1438.88 683.559 L1438.33 683.559 L1437.77 683.559 L1437.21 683.559 L1436.65 683.559 L1436.09 683.559 L1435.53 683.559 L1434.97 683.559 L1434.41 683.559 L1433.85 683.559 L1433.29 683.559 L1432.73 683.559 L1432.17 683.559 L1431.61 683.559 L1431.05 683.559 L1430.5 683.559 L1429.94 683.559 L1429.38 683.559 L1428.82 683.559 L1428.26 683.559 L1427.7 683.559 L1427.14 683.559 L1426.58 683.559 L1426.02 683.559 L1425.46 683.559 L1424.9 683.559 L1424.34 683.559 L1423.78 683.559 L1423.23 683.559 L1422.67 683.559 L1422.11 683.559 L1421.55 683.559 L1420.99 683.559 L1420.43 683.559 L1419.87 683.559 L1419.31 683.559 L1418.75 683.559 L1418.19 683.559 L1417.63 683.559 L1417.07 683.559 L1416.51 683.559 L1415.95 683.559 L1415.4 683.559 L1414.84 683.559 L1414.28 683.559 L1413.72 683.559 L1413.16 683.559 L1412.6 683.559 L1412.04 683.559 L1411.48 683.559 L1410.92 683.559 L1410.36 683.559 L1409.8 683.559 L1409.24 683.559 L1408.68 683.559 L1408.13 683.559 L1407.57 683.559 L1407.01 683.559 L1406.45 683.559 L1405.89 683.559 L1405.33 683.559 L1404.77 683.559 L1404.21 683.559 L1403.65 683.559 L1403.09 683.559 L1402.53 683.559 L1401.97 683.559 L1401.41 683.559 L1400.86 683.559 L1400.3 683.559 L1399.74 683.559 L1399.18 683.559 L1398.62 683.559 L1398.06 683.559 L1397.5 683.559 L1396.94 683.559 L1396.38 683.559 L1395.82 683.559 L1395.26 683.559 L1394.7 683.559 L1394.14 683.559 L1393.58 683.559 L1393.03 683.559 L1392.47 683.559 L1391.91 683.559 L1391.35 683.559 L1390.79 683.559 L1390.23 683.559 L1389.67 683.559 L1389.11 683.559 L1388.55 683.559 L1387.99 683.559 L1387.43 683.559 L1386.87 683.559 L1386.31 683.559 L1385.76 683.559 L1385.2 683.559 L1384.64 683.559 L1384.08 683.559 L1383.52 683.559 L1382.96 683.559 L1382.4 683.559 L1381.84 683.559 L1381.28 683.559 L1380.72 683.559 L1380.16 683.559 L1379.6 683.559 L1379.04 683.559 L1378.49 683.559 L1377.93 683.559 L1377.37 683.559 L1376.81 683.559 L1376.25 683.559 L1375.69 683.559 L1375.13 683.559 L1374.57 683.559 L1374.01 683.559 L1373.45 683.559 L1372.89 683.559 L1372.33 683.559 L1371.77 683.559 L1371.21 683.559 L1370.66 683.559 L1370.1 683.559 L1369.54 683.559 L1368.98 683.559 L1368.42 683.559 L1367.86 683.559 L1367.3 683.559 L1366.74 683.559 L1366.18 683.559 L1365.62 683.559 L1365.06 683.559 L1364.5 683.559 L1363.94 683.559 L1363.39 683.559 L1362.83 683.559 L1362.27 683.559 L1361.71 683.559 L1361.15 683.559 L1360.59 683.559 L1360.03 683.559 L1359.47 683.559 L1358.91 683.559 L1358.35 683.559 L1357.79 683.559 L1357.23 683.559 L1356.67 683.559 L1356.12 683.559 L1355.56 683.559 L1355 683.559 L1354.44 683.559 L1353.88 683.559 L1353.32 683.559 L1352.76 683.559 L1352.2 683.559 L1351.64 683.559 L1351.08 683.559 L1350.52 683.559 L1349.96 683.559 L1349.4 683.559 L1348.84 683.559 L1348.29 683.559 L1347.73 683.559 L1347.17 683.559 L1346.61 683.559 L1346.05 683.559 L1345.49 683.559 L1344.93 683.559 L1344.37 683.559 L1343.81 683.559 L1343.25 683.559 L1342.69 683.559 L1342.13 683.559 L1341.57 683.559 L1341.02 683.559 L1340.46 683.559 L1339.9 683.559 L1339.34 683.559 L1338.78 683.559 L1338.22 683.559 L1337.66 683.559 L1337.1 683.559 L1336.54 683.559 L1335.98 683.559 L1335.42 683.559 L1334.86 683.559 L1334.3 683.559 L1333.75 683.559 L1333.19 683.559 L1332.63 683.559 L1332.07 683.559 L1331.51 683.559 L1330.95 683.559 L1330.39 683.559 L1329.83 683.559 L1329.27 683.559 L1328.71 683.559 L1328.15 683.559 L1327.59 683.559 L1327.03 683.559 L1326.47 683.559 L1325.92 683.559 L1325.36 683.559 L1324.8 683.559 L1324.24 683.559 L1323.68 683.559 L1323.12 683.559 L1322.56 683.559 L1322 683.559 L1321.44 683.559 L1320.88 683.559 L1320.32 683.559 L1319.76 683.559 L1319.2 683.559 L1318.65 683.559 L1318.09 683.559 L1317.53 683.559 L1316.97 683.559 L1316.41 683.559 L1315.85 683.559 L1315.29 683.559 L1314.73 683.559 L1314.17 683.559 L1313.61 683.559 L1313.05 683.559 L1312.49 683.559 L1311.93 683.559 L1311.38 683.559 L1310.82 683.559 L1310.26 683.559 L1309.7 683.559 L1309.14 683.559 L1308.58 683.559 L1308.02 683.559 L1307.46 683.559 L1306.9 683.559 L1306.34 683.559 L1305.78 683.559 L1305.22 683.559 L1304.66 683.559 L1304.1 683.559 L1303.55 683.559 L1302.99 683.559 L1302.43 683.559 L1301.87 683.559 L1301.31 683.559 L1300.75 683.559 L1300.19 683.559 L1299.63 683.559 L1299.07 683.559 L1298.51 683.559 L1297.95 683.559 L1297.39 683.559 L1296.83 683.559 L1296.28 683.559 L1295.72 683.559 L1295.16 683.559 L1294.6 683.559 L1294.04 683.559 L1293.48 683.559 L1292.92 683.559 L1292.36 683.559 L1291.8 683.559 L1291.24 683.559 L1290.68 683.559 L1290.12 683.559 L1289.56 683.559 L1289 683.559 L1288.45 683.559 L1287.89 683.559 L1287.33 683.559 L1286.77 683.559 L1286.21 683.559 L1285.65 683.559 L1285.09 683.559 L1284.53 683.559 L1283.97 683.559 L1283.41 683.559 L1282.85 683.559 L1282.29 683.559 L1281.73 683.559 L1281.18 683.559 L1280.62 683.559 L1280.06 683.559 L1279.5 683.559 L1278.94 683.559 L1278.38 683.559 L1277.82 683.559 L1277.26 683.559 L1276.7 683.559 L1276.14 683.559 L1275.58 683.559 L1275.02 683.559 L1274.46 683.559 L1273.91 683.559 L1273.35 683.559 L1272.79 683.559 L1272.23 683.559 L1271.67 683.559 L1271.11 683.559 L1270.55 683.559 L1269.99 683.559 L1269.43 683.559 L1268.87 683.559 L1268.31 683.559 L1267.75 683.559 L1267.19 683.559 L1266.63 683.559 L1266.08 683.559 L1265.52 683.559 L1264.96 683.559 L1264.4 683.559 L1263.84 683.559 L1263.28 683.559 L1262.72 683.559 L1262.16 683.559 L1261.6 683.559 L1261.04 683.559 L1260.48 683.559 L1259.92 683.559 L1259.36 683.559 L1258.81 683.559 L1258.25 683.559 L1257.69 683.559 L1257.13 683.559 L1256.57 683.559 L1256.01 683.559 L1255.45 683.559 L1254.89 683.559 L1254.33 683.559 L1253.77 683.559 L1253.21 683.559 L1252.65 683.559 L1252.09 683.559 L1251.54 683.559 L1250.98 683.559 L1250.42 683.559 L1249.86 683.559 L1249.3 683.559 L1248.74 683.559 L1248.18 683.559 L1247.62 683.559 L1247.06 683.559 L1246.5 683.559 L1245.94 683.559 L1245.38 683.559 L1244.82 683.559 L1244.26 683.559 L1243.71 683.559 L1243.15 683.559 L1242.59 683.559 L1242.03 683.559 L1241.47 683.559 L1240.91 683.559 L1240.35 683.559 L1239.79 683.559 L1239.23 683.559 L1238.67 683.559 L1238.11 683.559 L1237.55 683.559 L1236.99 683.559 L1236.44 683.559 L1235.88 683.559 L1235.32 683.559 L1234.76 683.559 L1234.2 683.559 L1233.64 683.559 L1233.08 683.559 L1232.52 683.559 L1231.96 683.559 L1231.4 683.559 L1230.84 683.559 L1230.28 683.559 L1229.72 683.559 L1229.17 683.559 L1228.61 683.559 L1228.05 683.559 L1227.49 683.559 L1226.93 683.559 L1226.37 683.559 L1225.81 683.559 L1225.25 683.559 L1224.69 683.559 L1224.13 683.559 L1223.57 683.559 L1223.01 683.559 L1222.45 683.559 L1221.89 683.559 L1221.34 683.559 L1220.78 683.559 L1220.22 683.559 L1219.66 683.559 L1219.1 683.559 L1218.54 683.559 L1217.98 683.559 L1217.42 683.559 L1216.86 683.559 L1216.3 683.559 L1215.74 683.559 L1215.18 683.559 L1214.62 683.559 L1214.07 683.559 L1213.51 683.559 L1212.95 683.559 L1212.39 683.559 L1211.83 683.559 L1211.27 683.559 L1210.71 683.559 L1210.15 683.559 L1209.59 683.559 L1209.03 683.559 L1208.47 683.559 L1207.91 683.559 L1207.35 683.559 L1206.8 683.559 L1206.24 683.559 L1205.68 683.559 L1205.12 683.559 L1204.56 683.559 L1204 683.559 L1203.44 683.559 L1202.88 683.559 L1202.32 683.559 L1201.76 683.559 L1201.2 683.559 L1200.64 683.559 L1200.08 683.559 L1199.52 683.559 L1198.97 683.559 L1198.41 683.559 L1197.85 683.559 L1197.29 683.559 L1196.73 683.559 L1196.17 683.559 L1195.61 683.559 L1195.05 683.559 L1194.49 683.559 L1193.93 683.559 L1193.37 683.559 L1192.81 683.559 L1192.25 683.559 L1191.7 683.559 L1191.14 683.559 L1190.58 683.559 L1190.02 683.559 L1189.46 683.559 L1188.9 683.559 L1188.34 683.559 L1187.78 683.559 L1187.22 683.559 L1186.66 683.559 L1186.1 683.559 L1185.54 683.559 L1184.98 683.559 L1184.43 683.559 L1183.87 683.559 L1183.31 683.559 L1182.75 683.559 L1182.19 683.559 L1181.63 683.559 L1181.07 683.559 L1180.51 683.559 L1179.95 683.559 L1179.39 683.559 L1178.83 683.559 L1178.27 683.559 L1177.71 683.559 L1177.15 683.559 L1176.6 683.559 L1176.04 683.559 L1175.48 683.559 L1174.92 683.559 L1174.36 683.559 L1173.8 683.559 L1173.24 683.559 L1172.68 683.559 L1172.12 683.559 L1171.56 683.559 L1171 683.559 L1170.44 683.559 L1169.88 683.559 L1169.33 683.559 L1168.77 683.559 L1168.21 683.559 L1167.65 683.559 L1167.09 683.559 L1166.53 683.559 L1165.97 683.559 L1165.41 683.559 L1164.85 683.559 L1164.29 683.559 L1163.73 683.559 L1163.17 683.559 L1162.61 683.559 L1162.05 683.559 L1161.5 683.559 L1160.94 683.559 L1160.38 683.559 L1159.82 683.559 L1159.26 683.559 L1158.7 683.559 L1158.14 683.559 L1157.58 683.559 L1157.02 683.559 L1156.46 683.559 L1155.9 683.559 L1155.34 683.559 L1154.78 683.559 L1154.23 683.559 L1153.67 683.559 L1153.11 683.559 L1152.55 683.559 L1151.99 683.559 L1151.43 683.559 L1150.87 683.559 L1150.31 683.559 L1149.75 683.559 L1149.19 683.559 L1148.63 683.559 L1148.07 683.559 L1147.51 683.559 L1146.96 683.559 L1146.4 683.559 L1145.84 683.559 L1145.28 683.559 L1144.72 683.559 L1144.16 683.559 L1143.6 683.559 L1143.04 683.559 L1142.48 683.559 L1141.92 683.559 L1141.36 683.559 L1140.8 683.559 L1140.24 683.559 L1139.68 683.559 L1139.13 683.559 L1138.57 683.559 L1138.01 683.559 L1137.45 683.559 L1136.89 683.559 L1136.33 683.559 L1135.77 683.559 L1135.21 683.559 L1134.65 683.559 L1134.09 683.559 L1133.53 683.559 L1132.97 683.559 L1132.41 683.559 L1131.86 683.559 L1131.3 683.559 L1130.74 683.559 L1130.18 683.559 L1129.62 683.559 L1129.06 683.559 L1128.5 683.559 L1127.94 683.559 L1127.38 683.559 L1126.82 683.559 L1126.26 683.559 L1125.7 683.559 L1125.14 683.559 L1124.59 683.559 L1124.03 683.559 L1123.47 683.559 L1122.91 683.559 L1122.35 683.559 L1121.79 683.559 L1121.23 683.559 L1120.67 683.559 L1120.11 683.559 L1119.55 683.559 L1118.99 683.559 L1118.43 683.559 L1117.87 683.559 L1117.31 683.559 L1116.76 683.559 L1116.2 683.559 L1115.64 683.559 L1115.08 683.559 L1114.52 683.559 L1113.96 683.559 L1113.4 683.559 L1112.84 683.559 L1112.28 683.559 L1111.72 683.559 L1111.16 683.559 L1110.6 683.559 L1110.04 683.559 L1109.49 683.559 L1108.93 683.559 L1108.37 683.559 L1107.81 683.559 L1107.25 683.559 L1106.69 683.559 L1106.13 683.559 L1105.57 683.559 L1105.01 683.559 L1104.45 683.559 L1103.89 683.559 L1103.33 683.559 L1102.77 683.559 L1102.22 683.559 L1101.66 683.559 L1101.1 683.559 L1100.54 683.559 L1099.98 683.559 L1099.42 683.559 L1098.86 683.559 L1098.3 683.559 L1097.74 683.559 L1097.18 683.559 L1096.62 683.559 L1096.06 683.559 L1095.5 683.559 L1094.94 683.559 L1094.39 683.559 L1093.83 683.559 L1093.27 683.559 L1092.71 683.559 L1092.15 683.559 L1091.59 683.559 L1091.03 683.559 L1090.47 683.559 L1089.91 683.559 L1089.35 683.559 L1088.79 683.559 L1088.23 683.559 L1087.67 683.559 L1087.12 683.559 L1086.56 683.559 L1086 683.559 L1085.44 683.559 L1084.88 683.559 L1084.32 683.559 L1083.76 683.559 L1083.2 683.559 L1082.64 683.559 L1082.08 683.559 L1081.52 683.559 L1080.96 683.559 L1080.4 683.559 L1079.85 683.559 L1079.29 683.559 L1078.73 683.559 L1078.17 683.559 L1077.61 683.559 L1077.05 683.559 L1076.49 683.559 L1075.93 683.559 L1075.37 683.559 L1074.81 683.559 L1074.25 683.559 L1073.69 683.559 L1073.13 683.559 L1072.57 683.559 L1072.02 683.559 L1071.46 683.559 L1070.9 683.559 L1070.34 683.559 L1069.78 683.559 L1069.22 683.559 L1068.66 683.559 L1068.1 683.559 L1067.54 683.559 L1066.98 683.559 L1066.42 683.559 L1065.86 683.559 L1065.3 683.559 L1064.75 683.559 L1064.19 683.559 L1063.63 683.559 L1063.07 683.559 L1062.51 683.559 L1061.95 683.559 L1061.39 683.559 L1060.83 683.559 L1060.27 683.559 L1059.71 683.559 L1059.15 683.559 L1058.59 683.559 L1058.03 683.559 L1057.48 683.559 L1056.92 683.559 L1056.36 683.559 L1055.8 683.559 L1055.24 683.559 L1054.68 683.559 L1054.12 683.559 L1053.56 683.559 L1053 683.559 L1052.44 683.559 L1051.88 683.559 L1051.32 683.559 L1050.76 683.559 L1050.2 683.559 L1049.65 683.559 L1049.09 683.559 L1048.53 683.559 L1047.97 683.559 L1047.41 683.559 L1046.85 683.559 L1046.29 683.559 L1045.73 683.559 L1045.17 683.559 L1044.61 683.559 L1044.05 683.559 L1043.49 683.559 L1042.93 683.559 L1042.38 683.559 L1041.82 683.559 L1041.26 683.559 L1040.7 683.559 L1040.14 683.559 L1039.58 683.559 L1039.02 683.559 L1038.46 683.559 L1037.9 683.559 L1037.34 683.559 L1036.78 683.559 L1036.22 683.559 L1035.66 683.559 L1035.1 683.559 L1034.55 683.559 L1033.99 683.559 L1033.43 683.559 L1032.87 683.559 L1032.31 683.559 L1031.75 683.559 L1031.19 683.559 L1030.63 683.559 L1030.07 683.559 L1029.51 683.559 L1028.95 683.559 L1028.39 683.559 L1027.83 683.559 L1027.28 683.559 L1026.72 683.559 L1026.16 683.559 L1025.6 683.559 L1025.04 683.559 L1024.48 683.559 L1023.92 683.559 L1023.36 683.559 L1022.8 683.559 L1022.24 683.559 L1021.68 683.559 L1021.12 683.559 L1020.56 683.559 L1020.01 683.559 L1019.45 683.559 L1018.89 683.559 L1018.33 683.559 L1017.77 683.559 L1017.21 683.559 L1016.65 683.559 L1016.09 683.559 L1015.53 683.559 L1014.97 683.559 L1014.41 683.559 L1013.85 683.559 L1013.29 683.559 L1012.73 683.559 L1012.18 683.559 L1011.62 683.559 L1011.06 683.559 L1010.5 683.559 L1009.94 683.559 L1009.38 683.559 L1008.82 683.559 L1008.26 683.559 L1007.7 683.559 L1007.14 683.559 L1006.58 683.559 L1006.02 683.559 L1005.46 683.559 L1004.91 683.559 L1004.35 683.559 L1003.79 683.559 L1003.23 683.559 L1002.67 683.559 L1002.11 683.559 L1001.55 683.559 L1000.99 683.559 L1000.43 683.559 L999.872 683.559 L999.313 683.559 L998.754 683.559 L998.194 683.559 L997.635 683.559 L997.076 683.559 L996.517 683.559 L995.957 683.559 L995.398 683.559 L994.839 683.559 L994.28 683.559 L993.72 683.559 L993.161 683.559 L992.602 683.559 L992.043 683.559 L991.483 683.559 L990.924 683.559 L990.365 683.559 L989.806 683.559 L989.246 683.559 L988.687 683.559 L988.128 683.559 L987.569 683.559 L987.009 683.559 L986.45 683.559 L985.891 683.559 L985.332 683.559 L984.772 683.559 L984.213 683.559 L983.654 683.559 L983.095 683.559 L982.535 683.559 L981.976 683.559 L981.417 683.559 L980.858 683.559 L980.298 683.559 L979.739 683.559 L979.18 683.559 L978.621 683.559 L978.061 683.559 L977.502 683.559 L976.943 683.559 L976.384 683.559 L975.824 683.559 L975.265 683.559 L974.706 683.559 L974.147 683.559 L973.587 683.559 L973.028 683.559 L972.469 683.559 L971.91 683.559 L971.35 683.559 L970.791 683.559 L970.232 683.559 L969.673 683.559 L969.113 683.559 L968.554 683.559 L967.995 683.559 L967.436 683.559 L966.876 683.559 L966.317 683.559 L965.758 683.559 L965.199 683.559 L964.639 683.559 L964.08 683.559 L963.521 683.559 L962.962 683.559 L962.402 683.559 L961.843 683.559 L961.284 683.559 L960.725 683.559 L960.165 683.559 L959.606 683.559 L959.047 683.559 L958.488 683.559 L957.928 683.559 L957.369 683.559 L956.81 683.559 L956.251 683.559 L955.691 683.559 L955.132 683.559 L954.573 683.559 L954.014 683.559 L953.454 683.559 L952.895 683.559 L952.336 683.559 L951.777 683.559 L951.217 683.559 L950.658 683.559 L950.099 683.559 L949.54 683.559 L948.98 683.559 L948.421 683.559 L947.862 683.559 L947.303 683.559 L946.743 683.559 L946.184 683.559 L945.625 683.559 L945.066 683.559 L944.506 683.559 L943.947 683.559 L943.388 683.559 L942.829 683.559 L942.269 683.559 L941.71 683.559 L941.151 683.559 L940.592 683.559 L940.032 683.559 L939.473 683.559 L938.914 683.559 L938.355 683.559 L937.795 683.559 L937.236 683.559 L936.677 683.559 L936.118 683.559 L935.558 683.559 L934.999 683.559 L934.44 683.559 L933.881 683.559 L933.321 683.559 L932.762 683.559 L932.203 683.559 L931.644 683.559 L931.084 683.559 L930.525 683.559 L929.966 683.559 L929.406 683.559 L928.847 683.559 L928.288 683.559 L927.729 683.559 L927.169 683.559 L926.61 683.559 L926.051 683.559 L925.492 683.559 L924.932 683.559 L924.373 683.559 L923.814 683.559 L923.255 683.559 L922.695 683.559 L922.136 683.559 L921.577 683.559 L921.018 683.559 L920.458 683.559 L919.899 683.559 L919.34 683.559 L918.781 683.559 L918.221 683.559 L917.662 683.559 L917.103 683.559 L916.544 683.559 L915.984 683.559 L915.425 683.559 L914.866 683.559 L914.307 683.559 L913.747 683.559 L913.188 683.559 L912.629 683.559 L912.07 683.559 L911.51 683.559 L910.951 683.559 L910.392 683.559 L909.833 683.559 L909.273 683.559 L908.714 683.559 L908.155 683.559 L907.596 683.559 L907.036 683.559 L906.477 683.559 L905.918 683.559 L905.359 683.559 L904.799 683.559 L904.24 683.559 L903.681 683.559 L903.122 683.559 L902.562 683.559 L902.003 683.559 L901.444 683.559 L900.885 683.559 L900.325 683.559 L899.766 683.559 L899.207 683.559 L898.648 683.559 L898.088 683.559 L897.529 683.559 L896.97 683.559 L896.411 683.559 L895.851 683.559 L895.292 683.559 L894.733 683.559 L894.174 683.559 L893.614 683.559 L893.055 683.559 L892.496 683.559 L891.937 683.559 L891.377 683.559 L890.818 683.559 L890.259 683.559 L889.7 683.559 L889.14 683.559 L888.581 683.559 L888.022 683.559 L887.463 683.559 L886.903 683.559 L886.344 683.559 L885.785 683.559 L885.226 683.559 L884.666 683.559 L884.107 683.559 L883.548 683.559 L882.989 683.559 L882.429 683.559 L881.87 683.559 L881.311 683.559 L880.752 683.559 L880.192 683.559 L879.633 683.559 L879.074 683.559 L878.515 683.559 L877.955 683.559 L877.396 683.559 L876.837 683.559 L876.278 683.559 L875.718 683.559 L875.159 683.559 L874.6 683.559 L874.041 683.559 L873.481 683.559 L872.922 683.559 L872.363 683.559 L871.804 683.559 L871.244 683.559 L870.685 683.559 L870.126 683.559 L869.567 683.559 L869.007 683.559 L868.448 683.559 L867.889 683.559 L867.33 683.559 L866.77 683.559 L866.211 683.559 L865.652 683.559 L865.093 683.559 L864.533 683.559 L863.974 683.559 L863.415 683.559 L862.856 683.559 L862.296 683.559 L861.737 683.559 L861.178 683.559 L860.619 683.559 L860.059 683.559 L859.5 683.559 L858.941 683.559 L858.382 683.559 L857.822 683.559 L857.263 683.559 L856.704 683.559 L856.145 683.559 L855.585 683.559 L855.026 683.559 L854.467 683.559 L853.908 683.559 L853.348 683.559 L852.789 683.559 L852.23 683.559 L851.671 683.559 L851.111 683.559 L850.552 683.559 L849.993 683.559 L849.434 683.559 L848.874 683.559 L848.315 683.559 L847.756 683.559 L847.197 683.559 L846.637 683.559 L846.078 683.559 L845.519 683.559 L844.96 683.559 L844.4 683.559 L843.841 683.559 L843.282 683.559 L842.723 683.559 L842.163 683.559 L841.604 683.559 L841.045 683.559 L840.486 683.559 L839.926 683.559 L839.367 683.559 L838.808 683.559 L838.249 683.559 L837.689 683.559 L837.13 683.559 L836.571 683.559 L836.012 683.559 L835.452 683.559 L834.893 683.559 L834.334 683.559 L833.775 683.559 L833.215 683.559 L832.656 683.559 L832.097 683.559 L831.538 683.559 L830.978 683.559 L830.419 683.559 L829.86 683.559 L829.301 683.559 L828.741 683.559 L828.182 683.559 L827.623 683.559 L827.064 683.559 L826.504 683.559 L825.945 683.559 L825.386 683.559 L824.827 683.559 L824.267 683.559 L823.708 683.559 L823.149 683.559 L822.59 683.559 L822.03 683.559 L821.471 683.559 L820.912 683.559 L820.353 683.559 L819.793 683.559 L819.234 683.559 L818.675 683.559 L818.116 683.559 L817.556 683.559 L816.997 683.559 L816.438 683.559 L815.879 683.559 L815.319 683.559 L814.76 683.559 L814.201 683.559 L813.642 683.559 L813.082 683.559 L812.523 683.559 L811.964 683.559 L811.405 683.559 L810.845 683.559 L810.286 683.559 L809.727 683.559 L809.168 683.559 L808.608 683.559 L808.049 683.559 L807.49 683.559 L806.931 683.559 L806.371 683.559 L805.812 683.559 L805.253 683.559 L804.693 683.559 L804.134 683.559 L803.575 683.559 L803.016 683.559 L802.456 683.559 L801.897 683.559 L801.338 683.559 L800.779 683.559 L800.219 683.559 L799.66 683.559 L799.101 683.559 L798.542 683.559 L797.982 683.559 L797.423 683.559 L796.864 683.559 L796.305 683.559 L795.745 683.559 L795.186 683.559 L794.627 683.559 L794.068 683.559 L793.508 683.559 L792.949 683.559 L792.39 683.559 L791.831 683.559 L791.271 683.559 L790.712 683.559 L790.153 683.559 L789.594 683.559 L789.034 683.559 L788.475 683.559 L787.916 683.559 L787.357 683.559 L786.797 683.559 L786.238 683.559 L785.679 683.559 L785.12 683.559 L784.56 683.559 L784.001 683.559 L783.442 683.559 L782.883 683.559 L782.323 683.559 L781.764 683.559 L781.205 683.559 L780.646 683.559 L780.086 683.559 L779.527 683.559 L778.968 683.559 L778.409 683.559 L777.849 683.559 L777.29 683.559 L776.731 683.559 L776.172 683.559 L775.612 683.559 L775.053 683.559 L774.494 683.559 L773.935 683.559 L773.375 683.559 L772.816 683.559 L772.257 683.559 L771.698 683.559 L771.138 683.559 L770.579 683.559 L770.02 683.559 L769.461 683.559 L768.901 683.559 L768.342 683.559 L767.783 683.559 L767.224 683.559 L766.664 683.559 L766.105 683.559 L765.546 683.559 L764.987 683.559 L764.427 683.559 L763.868 683.559 L763.309 683.559 L762.75 683.559 L762.19 683.559 L761.631 683.559 L761.072 683.559 L760.513 683.559 L759.953 683.559 L759.394 683.559 L758.835 683.559 L758.276 683.559 L757.716 683.559 L757.157 683.559 L756.598 683.559 L756.039 683.559 L755.479 683.559 L754.92 683.559 L754.361 683.559 L753.802 683.559 L753.242 683.559 L752.683 683.559 L752.124 683.559 L751.565 683.559 L751.005 683.559 L750.446 683.559 L749.887 683.559 L749.328 683.559 L748.768 683.559 L748.209 683.559 L747.65 683.559 L747.091 683.559 L746.531 683.559 L745.972 683.559 L745.413 683.559 L744.854 683.559 L744.294 683.559 L743.735 683.559 L743.176 683.559 L742.617 683.559 L742.057 683.559 L741.498 683.559 L740.939 683.559 L740.38 683.559 L739.82 683.559 L739.261 683.559 L738.702 683.559 L738.143 683.559 L737.583 683.559 L737.024 683.559 L736.465 683.559 L735.906 683.559 L735.346 683.559 L734.787 683.559 L734.228 683.559 L733.669 683.559 L733.109 683.559 L732.55 683.559 L731.991 683.559 L731.432 683.559 L730.872 683.559 L730.313 683.559 L729.754 683.559 L729.195 683.559 L728.635 683.559 L728.076 683.559 L727.517 683.559 L726.958 683.559 L726.398 683.559 L725.839 683.559 L725.28 683.559 L724.721 683.559 L724.161 683.559 L723.602 683.559 L723.043 683.559 L722.484 683.559 L721.924 683.559 L721.365 683.559 L720.806 683.559 L720.247 683.559  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip223)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.386 720.806,684.386 721.365,684.386 721.924,684.386 722.484,684.386 723.043,684.386 723.602,684.386 724.161,684.386 724.721,684.386 725.28,684.386 725.839,684.386 726.398,684.386 726.958,684.386 727.517,684.386 728.076,684.386 728.635,684.386 729.195,684.386 729.754,684.386 730.313,684.386 730.872,684.386 731.432,684.386 731.991,684.386 732.55,684.386 733.109,684.386 733.669,684.386 734.228,684.386 734.787,684.386 735.346,684.386 735.906,684.386 736.465,684.386 737.024,684.386 737.583,684.386 738.143,684.386 738.702,684.386 739.261,684.386 739.82,684.386 740.38,684.386 740.939,684.386 741.498,684.386 742.057,684.386 742.617,684.386 743.176,684.386 743.735,684.386 744.294,684.386 744.854,684.386 745.413,684.386 745.972,684.386 746.531,684.386 747.091,684.386 747.65,684.386 748.209,684.386 748.768,684.386 749.328,684.386 749.887,684.386 750.446,684.386 751.005,684.386 751.565,684.386 752.124,684.386 752.683,684.386 753.242,684.386 753.802,684.386 754.361,684.386 754.92,684.386 755.479,684.386 756.039,684.386 756.598,684.386 757.157,684.386 757.716,684.386 758.276,684.386 758.835,684.386 759.394,684.386 759.953,684.386 760.513,684.386 761.072,684.386 761.631,684.386 762.19,684.386 762.75,684.386 763.309,684.386 763.868,684.386 764.427,684.386 764.987,684.386 765.546,684.386 766.105,684.386 766.664,684.386 767.224,684.386 767.783,684.386 768.342,684.386 768.901,684.386 769.461,684.386 770.02,684.386 770.579,684.386 771.138,684.386 771.698,684.386 772.257,684.386 772.816,684.386 773.375,684.386 773.935,684.386 774.494,684.386 775.053,684.386 775.612,684.386 776.172,684.386 776.731,684.386 777.29,684.386 777.849,684.386 778.409,684.386 778.968,684.386 779.527,684.386 780.086,684.386 780.646,684.386 781.205,684.386 781.764,684.386 782.323,684.386 782.883,684.386 783.442,684.386 784.001,684.386 784.56,684.386 785.12,684.386 785.679,684.386 786.238,684.386 786.797,684.386 787.357,684.386 787.916,684.386 788.475,684.386 789.034,684.386 789.594,684.386 790.153,684.386 790.712,684.386 791.271,684.386 791.831,684.386 792.39,684.386 792.949,684.386 793.508,684.386 794.068,684.386 794.627,684.386 795.186,684.386 795.745,684.386 796.305,684.386 796.864,684.386 797.423,684.386 797.982,684.386 798.542,684.386 799.101,684.386 799.66,684.386 800.219,684.386 800.779,684.386 801.338,684.386 801.897,684.386 802.456,684.386 803.016,684.386 803.575,684.386 804.134,684.386 804.693,684.386 805.253,684.386 805.812,684.386 806.371,684.386 806.931,684.386 807.49,684.386 808.049,684.386 808.608,684.386 809.168,684.386 809.727,684.386 810.286,684.386 810.845,684.386 811.405,684.386 811.964,684.386 812.523,684.386 813.082,684.386 813.642,684.386 814.201,684.386 814.76,684.386 815.319,684.386 815.879,684.386 816.438,684.386 816.997,684.386 817.556,684.386 818.116,684.386 818.675,684.386 819.234,684.386 819.793,684.386 820.353,684.386 820.912,684.386 821.471,684.386 822.03,684.386 822.59,684.386 823.149,684.386 823.708,684.386 824.267,684.386 824.827,684.386 825.386,684.386 825.945,684.386 826.504,684.386 827.064,684.386 827.623,684.386 828.182,684.386 828.741,684.386 829.301,684.386 829.86,684.386 830.419,684.386 830.978,684.386 831.538,684.386 832.097,684.386 832.656,684.386 833.215,684.386 833.775,684.386 834.334,684.386 834.893,684.386 835.452,684.386 836.012,684.386 836.571,684.386 837.13,684.386 837.689,684.386 838.249,684.386 838.808,684.386 839.367,684.386 839.926,684.386 840.486,684.386 841.045,684.386 841.604,684.386 842.163,684.386 842.723,684.386 843.282,684.386 843.841,684.386 844.4,684.386 844.96,684.386 845.519,684.386 846.078,684.386 846.637,684.386 847.197,684.386 847.756,684.386 848.315,684.386 848.874,684.386 849.434,684.386 849.993,684.386 850.552,684.386 851.111,684.386 851.671,684.386 852.23,684.386 852.789,684.386 853.348,684.386 853.908,684.386 854.467,684.386 855.026,684.386 855.585,684.386 856.145,684.386 856.704,684.386 857.263,684.386 857.822,684.386 858.382,684.386 858.941,684.386 859.5,684.386 860.059,684.386 860.619,684.386 861.178,684.386 861.737,684.386 862.296,684.386 862.856,684.386 863.415,684.386 863.974,684.386 864.533,684.386 865.093,684.386 865.652,684.386 866.211,684.386 866.77,684.386 867.33,684.386 867.889,684.386 868.448,684.386 869.007,684.386 869.567,684.386 870.126,684.386 870.685,684.386 871.244,684.386 871.804,684.386 872.363,684.386 872.922,684.386 873.481,684.386 874.041,684.386 874.6,684.386 875.159,684.386 875.718,684.386 876.278,684.386 876.837,684.386 877.396,684.386 877.955,684.386 878.515,684.386 879.074,684.386 879.633,684.386 880.192,684.386 880.752,684.386 881.311,684.386 881.87,684.386 882.429,684.386 882.989,684.386 883.548,684.386 884.107,684.386 884.666,684.386 885.226,684.386 885.785,684.386 886.344,684.386 886.903,684.386 887.463,684.386 888.022,684.386 888.581,684.386 889.14,684.386 889.7,684.386 890.259,684.386 890.818,684.386 891.377,684.386 891.937,684.386 892.496,684.386 893.055,684.386 893.614,684.386 894.174,684.386 894.733,684.386 895.292,684.386 895.851,684.386 896.411,684.386 896.97,684.386 897.529,684.386 898.088,684.386 898.648,684.386 899.207,684.386 899.766,684.386 900.325,684.386 900.885,684.386 901.444,684.386 902.003,684.386 902.562,684.386 903.122,684.386 903.681,684.386 904.24,684.386 904.799,684.386 905.359,684.386 905.918,684.386 906.477,684.386 907.036,684.386 907.596,684.386 908.155,684.386 908.714,684.386 909.273,684.386 909.833,684.386 910.392,684.386 910.951,684.386 911.51,684.386 912.07,684.386 912.629,684.386 913.188,684.386 913.747,684.386 914.307,684.386 914.866,684.386 915.425,684.386 915.984,684.386 916.544,684.386 917.103,684.386 917.662,684.386 918.221,684.386 918.781,684.386 919.34,684.386 919.899,684.386 920.458,684.386 921.018,684.386 921.577,684.386 922.136,684.386 922.695,684.386 923.255,684.386 923.814,684.386 924.373,684.386 924.932,684.386 925.492,684.386 926.051,684.386 926.61,684.386 927.169,684.386 927.729,684.386 928.288,684.386 928.847,684.386 929.406,684.386 929.966,684.386 930.525,684.386 931.084,684.386 931.644,684.386 932.203,684.386 932.762,684.386 933.321,684.386 933.881,684.386 934.44,684.386 934.999,684.386 935.558,684.386 936.118,684.386 936.677,684.386 937.236,684.386 937.795,684.386 938.355,684.386 938.914,684.386 939.473,684.386 940.032,684.386 940.592,684.386 941.151,684.386 941.71,684.386 942.269,684.386 942.829,684.386 943.388,684.386 943.947,684.386 944.506,684.386 945.066,684.386 945.625,684.386 946.184,684.386 946.743,684.386 947.303,684.386 947.862,684.386 948.421,684.386 948.98,684.386 949.54,684.386 950.099,684.386 950.658,684.386 951.217,684.386 951.777,684.386 952.336,684.386 952.895,684.386 953.454,684.386 954.014,684.386 954.573,684.386 955.132,684.386 955.691,684.386 956.251,684.386 956.81,684.386 957.369,684.386 957.928,684.386 958.488,684.386 959.047,684.386 959.606,684.386 960.165,684.386 960.725,684.386 961.284,684.386 961.843,684.386 962.402,684.386 962.962,684.386 963.521,684.386 964.08,684.386 964.639,684.386 965.199,684.386 965.758,684.386 966.317,684.386 966.876,684.386 967.436,684.386 967.995,684.386 968.554,684.386 969.113,684.386 969.673,684.386 970.232,684.386 970.791,684.386 971.35,684.386 971.91,684.386 972.469,684.386 973.028,684.386 973.587,684.386 974.147,684.386 974.706,684.386 975.265,684.386 975.824,684.386 976.384,684.386 976.943,684.386 977.502,684.386 978.061,684.386 978.621,684.386 979.18,684.386 979.739,684.386 980.298,684.386 980.858,684.386 981.417,684.386 981.976,684.386 982.535,684.386 983.095,684.386 983.654,684.386 984.213,684.386 984.772,684.386 985.332,684.386 985.891,684.386 986.45,684.386 987.009,684.386 987.569,684.386 988.128,684.386 988.687,684.386 989.246,684.386 989.806,684.386 990.365,684.386 990.924,684.386 991.483,684.386 992.043,684.386 992.602,684.386 993.161,684.386 993.72,684.386 994.28,684.386 994.839,684.386 995.398,684.386 995.957,684.386 996.517,684.386 997.076,684.386 997.635,684.386 998.194,684.386 998.754,684.386 999.313,684.386 999.872,684.386 1000.43,684.386 1000.99,684.386 1001.55,684.386 1002.11,684.386 1002.67,684.386 1003.23,684.386 1003.79,684.386 1004.35,684.386 1004.91,684.386 1005.46,684.386 1006.02,684.386 1006.58,684.386 1007.14,684.386 1007.7,684.386 1008.26,684.386 1008.82,684.386 1009.38,684.386 1009.94,684.386 1010.5,684.386 1011.06,684.386 1011.62,684.386 1012.18,684.386 1012.73,684.386 1013.29,684.386 1013.85,684.386 1014.41,684.386 1014.97,684.386 1015.53,684.386 1016.09,684.386 1016.65,684.386 1017.21,684.386 1017.77,684.386 1018.33,684.386 1018.89,684.386 1019.45,684.386 1020.01,684.386 1020.56,684.386 1021.12,684.386 1021.68,684.386 1022.24,684.386 1022.8,684.386 1023.36,684.386 1023.92,684.386 1024.48,684.386 1025.04,684.386 1025.6,684.386 1026.16,684.386 1026.72,684.386 1027.28,684.386 1027.83,684.386 1028.39,684.386 1028.95,684.386 1029.51,684.386 1030.07,684.386 1030.63,684.386 1031.19,684.386 1031.75,684.386 1032.31,684.386 1032.87,684.386 1033.43,684.386 1033.99,684.386 1034.55,684.386 1035.1,684.386 1035.66,684.386 1036.22,684.386 1036.78,684.386 1037.34,684.386 1037.9,684.386 1038.46,684.386 1039.02,684.386 1039.58,684.386 1040.14,684.386 1040.7,684.386 1041.26,684.386 1041.82,684.386 1042.38,684.386 1042.93,684.386 1043.49,684.386 1044.05,684.386 1044.61,684.386 1045.17,684.386 1045.73,684.386 1046.29,684.386 1046.85,684.386 1047.41,684.386 1047.97,684.386 1048.53,684.386 1049.09,684.386 1049.65,684.386 1050.2,684.386 1050.76,684.386 1051.32,684.386 1051.88,684.386 1052.44,684.386 1053,684.386 1053.56,684.386 1054.12,684.386 1054.68,684.386 1055.24,684.386 1055.8,684.386 1056.36,684.386 1056.92,684.386 1057.48,684.386 1058.03,684.386 1058.59,684.386 1059.15,684.386 1059.71,684.386 1060.27,684.386 1060.83,684.386 1061.39,684.386 1061.95,684.386 1062.51,684.386 1063.07,684.386 1063.63,684.386 1064.19,684.386 1064.75,684.386 1065.3,684.386 1065.86,684.386 1066.42,684.386 1066.98,684.386 1067.54,684.386 1068.1,684.386 1068.66,684.386 1069.22,684.386 1069.78,684.386 1070.34,684.386 1070.9,684.386 1071.46,684.386 1072.02,684.386 1072.57,684.386 1073.13,684.386 1073.69,684.386 1074.25,684.386 1074.81,684.386 1075.37,684.386 1075.93,684.386 1076.49,684.386 1077.05,684.386 1077.61,684.386 1078.17,684.386 1078.73,684.386 1079.29,684.386 1079.85,684.386 1080.4,684.386 1080.96,684.386 1081.52,684.386 1082.08,684.386 1082.64,684.386 1083.2,684.386 1083.76,684.386 1084.32,684.386 1084.88,684.386 1085.44,684.386 1086,684.386 1086.56,684.386 1087.12,684.386 1087.67,684.386 1088.23,684.386 1088.79,684.386 1089.35,684.386 1089.91,684.386 1090.47,684.386 1091.03,684.386 1091.59,684.386 1092.15,684.386 1092.71,684.386 1093.27,684.386 1093.83,684.386 1094.39,684.386 1094.94,684.386 1095.5,684.386 1096.06,684.386 1096.62,684.386 1097.18,684.386 1097.74,684.386 1098.3,684.386 1098.86,684.386 1099.42,684.386 1099.98,684.386 1100.54,684.386 1101.1,684.386 1101.66,684.386 1102.22,684.386 1102.77,684.386 1103.33,684.386 1103.89,684.386 1104.45,684.386 1105.01,684.386 1105.57,684.386 1106.13,684.386 1106.69,684.386 1107.25,684.386 1107.81,684.386 1108.37,684.386 1108.93,684.386 1109.49,684.386 1110.04,684.386 1110.6,684.386 1111.16,684.386 1111.72,684.386 1112.28,684.386 1112.84,684.386 1113.4,684.386 1113.96,684.386 1114.52,684.386 1115.08,684.386 1115.64,684.386 1116.2,684.386 1116.76,684.386 1117.31,684.386 1117.87,684.386 1118.43,684.386 1118.99,684.386 1119.55,684.386 1120.11,684.386 1120.67,684.386 1121.23,684.386 1121.79,684.386 1122.35,684.386 1122.91,684.386 1123.47,684.386 1124.03,684.386 1124.59,684.386 1125.14,684.386 1125.7,684.386 1126.26,684.386 1126.82,684.386 1127.38,684.386 1127.94,684.386 1128.5,684.386 1129.06,684.386 1129.62,684.386 1130.18,684.386 1130.74,684.386 1131.3,684.386 1131.86,684.386 1132.41,684.386 1132.97,684.386 1133.53,684.386 1134.09,684.386 1134.65,684.386 1135.21,684.386 1135.77,684.386 1136.33,684.386 1136.89,684.386 1137.45,684.386 1138.01,684.386 1138.57,684.386 1139.13,684.386 1139.68,684.386 1140.24,684.386 1140.8,684.386 1141.36,684.386 1141.92,684.386 1142.48,684.386 1143.04,684.386 1143.6,684.386 1144.16,684.386 1144.72,684.386 1145.28,684.386 1145.84,684.386 1146.4,684.386 1146.96,684.386 1147.51,684.386 1148.07,684.386 1148.63,684.386 1149.19,684.386 1149.75,684.386 1150.31,684.386 1150.87,684.386 1151.43,684.386 1151.99,684.386 1152.55,684.386 1153.11,684.386 1153.67,684.386 1154.23,684.386 1154.78,684.386 1155.34,684.386 1155.9,684.386 1156.46,684.386 1157.02,684.386 1157.58,684.386 1158.14,684.386 1158.7,684.386 1159.26,684.386 1159.82,684.386 1160.38,684.386 1160.94,684.386 1161.5,684.386 1162.05,684.386 1162.61,684.386 1163.17,684.386 1163.73,684.386 1164.29,684.386 1164.85,684.386 1165.41,684.386 1165.97,684.386 1166.53,684.386 1167.09,684.386 1167.65,684.386 1168.21,684.386 1168.77,684.386 1169.33,684.386 1169.88,684.386 1170.44,684.386 1171,684.386 1171.56,684.386 1172.12,684.386 1172.68,684.386 1173.24,684.386 1173.8,684.386 1174.36,684.386 1174.92,684.386 1175.48,684.386 1176.04,684.386 1176.6,684.386 1177.15,684.386 1177.71,684.386 1178.27,684.386 1178.83,684.386 1179.39,684.386 1179.95,684.386 1180.51,684.386 1181.07,684.386 1181.63,684.386 1182.19,684.386 1182.75,684.386 1183.31,684.386 1183.87,684.386 1184.43,684.386 1184.98,684.386 1185.54,684.386 1186.1,684.386 1186.66,684.386 1187.22,684.386 1187.78,684.386 1188.34,684.386 1188.9,684.386 1189.46,684.386 1190.02,684.386 1190.58,684.386 1191.14,684.386 1191.7,684.386 1192.25,684.386 1192.81,684.386 1193.37,684.386 1193.93,684.386 1194.49,684.386 1195.05,684.386 1195.61,684.386 1196.17,684.386 1196.73,684.386 1197.29,684.386 1197.85,684.386 1198.41,684.386 1198.97,684.386 1199.52,684.386 1200.08,684.386 1200.64,684.386 1201.2,684.386 1201.76,684.386 1202.32,684.386 1202.88,684.386 1203.44,684.386 1204,684.386 1204.56,684.386 1205.12,684.386 1205.68,684.386 1206.24,684.386 1206.8,684.386 1207.35,684.386 1207.91,684.386 1208.47,684.386 1209.03,684.386 1209.59,684.386 1210.15,684.386 1210.71,684.386 1211.27,684.386 1211.83,684.386 1212.39,684.386 1212.95,684.386 1213.51,684.386 1214.07,684.386 1214.62,684.386 1215.18,684.386 1215.74,684.386 1216.3,684.386 1216.86,684.386 1217.42,684.386 1217.98,684.386 1218.54,684.386 1219.1,684.386 1219.66,684.386 1220.22,684.386 1220.78,684.386 1221.34,684.386 1221.89,684.386 1222.45,684.386 1223.01,684.386 1223.57,684.386 1224.13,684.386 1224.69,684.386 1225.25,684.386 1225.81,684.386 1226.37,684.386 1226.93,684.386 1227.49,684.386 1228.05,684.386 1228.61,684.386 1229.17,684.386 1229.72,684.386 1230.28,684.386 1230.84,684.386 1231.4,684.386 1231.96,684.386 1232.52,684.386 1233.08,684.386 1233.64,684.386 1234.2,684.386 1234.76,684.386 1235.32,684.386 1235.88,684.386 1236.44,684.386 1236.99,684.386 1237.55,684.386 1238.11,684.386 1238.67,684.386 1239.23,684.386 1239.79,684.386 1240.35,684.386 1240.91,684.386 1241.47,684.386 1242.03,684.386 1242.59,684.386 1243.15,684.386 1243.71,684.386 1244.26,684.386 1244.82,684.386 1245.38,684.386 1245.94,684.386 1246.5,684.386 1247.06,684.386 1247.62,684.386 1248.18,684.386 1248.74,684.386 1249.3,684.386 1249.86,684.386 1250.42,684.386 1250.98,684.386 1251.54,684.386 1252.09,684.386 1252.65,684.386 1253.21,684.386 1253.77,684.386 1254.33,684.386 1254.89,684.386 1255.45,684.386 1256.01,684.386 1256.57,684.386 1257.13,684.386 1257.69,684.386 1258.25,684.386 1258.81,684.386 1259.36,684.386 1259.92,684.386 1260.48,684.386 1261.04,684.386 1261.6,684.386 1262.16,684.386 1262.72,684.386 1263.28,684.386 1263.84,684.386 1264.4,684.386 1264.96,684.386 1265.52,684.386 1266.08,684.386 1266.63,684.386 1267.19,684.386 1267.75,684.386 1268.31,684.386 1268.87,684.386 1269.43,684.386 1269.99,684.386 1270.55,684.386 1271.11,684.386 1271.67,684.386 1272.23,684.386 1272.79,684.386 1273.35,684.386 1273.91,684.386 1274.46,684.386 1275.02,684.386 1275.58,684.386 1276.14,684.386 1276.7,684.386 1277.26,684.386 1277.82,684.386 1278.38,684.386 1278.94,684.386 1279.5,684.386 1280.06,684.386 1280.62,684.386 1281.18,684.386 1281.73,684.386 1282.29,684.386 1282.85,684.386 1283.41,684.386 1283.97,684.386 1284.53,684.386 1285.09,684.386 1285.65,684.386 1286.21,684.386 1286.77,684.386 1287.33,684.386 1287.89,684.386 1288.45,684.386 1289,684.386 1289.56,684.386 1290.12,684.386 1290.68,684.386 1291.24,684.386 1291.8,684.386 1292.36,684.386 1292.92,684.386 1293.48,684.386 1294.04,684.386 1294.6,684.386 1295.16,684.386 1295.72,684.386 1296.28,684.386 1296.83,684.386 1297.39,684.386 1297.95,684.386 1298.51,684.386 1299.07,684.386 1299.63,684.386 1300.19,684.386 1300.75,684.386 1301.31,684.386 1301.87,684.386 1302.43,684.386 1302.99,684.386 1303.55,684.386 1304.1,684.386 1304.66,684.386 1305.22,684.386 1305.78,684.386 1306.34,684.386 1306.9,684.386 1307.46,684.386 1308.02,684.386 1308.58,684.386 1309.14,684.386 1309.7,684.386 1310.26,684.386 1310.82,684.386 1311.38,684.386 1311.93,684.386 1312.49,684.386 1313.05,684.386 1313.61,684.386 1314.17,684.386 1314.73,684.386 1315.29,684.386 1315.85,684.386 1316.41,684.386 1316.97,684.386 1317.53,684.386 1318.09,684.386 1318.65,684.386 1319.2,684.386 1319.76,684.386 1320.32,684.386 1320.88,684.386 1321.44,684.386 1322,684.386 1322.56,684.386 1323.12,684.386 1323.68,684.386 1324.24,684.386 1324.8,684.386 1325.36,684.386 1325.92,684.386 1326.47,684.386 1327.03,684.386 1327.59,684.386 1328.15,684.386 1328.71,684.386 1329.27,684.386 1329.83,684.386 1330.39,684.386 1330.95,684.386 1331.51,684.386 1332.07,684.386 1332.63,684.386 1333.19,684.386 1333.75,684.386 1334.3,684.386 1334.86,684.386 1335.42,684.386 1335.98,684.386 1336.54,684.386 1337.1,684.386 1337.66,684.386 1338.22,684.386 1338.78,684.386 1339.34,684.386 1339.9,684.386 1340.46,684.386 1341.02,684.386 1341.57,684.386 1342.13,684.386 1342.69,684.386 1343.25,684.386 1343.81,684.386 1344.37,684.386 1344.93,684.386 1345.49,684.386 1346.05,684.386 1346.61,684.386 1347.17,684.386 1347.73,684.386 1348.29,684.386 1348.84,684.386 1349.4,684.386 1349.96,684.386 1350.52,684.386 1351.08,684.386 1351.64,684.386 1352.2,684.386 1352.76,684.386 1353.32,684.386 1353.88,684.386 1354.44,684.386 1355,684.386 1355.56,684.386 1356.12,684.386 1356.67,684.386 1357.23,684.386 1357.79,684.386 1358.35,684.386 1358.91,684.386 1359.47,684.386 1360.03,684.386 1360.59,684.386 1361.15,684.386 1361.71,684.386 1362.27,684.386 1362.83,684.386 1363.39,684.386 1363.94,684.386 1364.5,684.386 1365.06,684.386 1365.62,684.386 1366.18,684.386 1366.74,684.386 1367.3,684.386 1367.86,684.386 1368.42,684.386 1368.98,684.386 1369.54,684.386 1370.1,684.386 1370.66,684.386 1371.21,684.386 1371.77,684.386 1372.33,684.386 1372.89,684.386 1373.45,684.386 1374.01,684.386 1374.57,684.386 1375.13,684.386 1375.69,684.386 1376.25,684.386 1376.81,684.386 1377.37,684.386 1377.93,684.386 1378.49,684.386 1379.04,684.386 1379.6,684.386 1380.16,684.386 1380.72,684.386 1381.28,684.386 1381.84,684.386 1382.4,684.386 1382.96,684.386 1383.52,684.386 1384.08,684.386 1384.64,684.386 1385.2,684.386 1385.76,684.386 1386.31,684.386 1386.87,684.386 1387.43,684.386 1387.99,684.386 1388.55,684.386 1389.11,684.386 1389.67,684.386 1390.23,684.386 1390.79,684.386 1391.35,684.386 1391.91,684.386 1392.47,684.386 1393.03,684.386 1393.58,684.386 1394.14,684.386 1394.7,684.386 1395.26,684.386 1395.82,684.386 1396.38,684.386 1396.94,684.386 1397.5,684.386 1398.06,684.386 1398.62,684.386 1399.18,684.386 1399.74,684.386 1400.3,684.386 1400.86,684.386 1401.41,684.386 1401.97,684.386 1402.53,684.386 1403.09,684.386 1403.65,684.386 1404.21,684.386 1404.77,684.386 1405.33,684.386 1405.89,684.386 1406.45,684.386 1407.01,684.386 1407.57,684.386 1408.13,684.386 1408.68,684.386 1409.24,684.386 1409.8,684.386 1410.36,684.386 1410.92,684.386 1411.48,684.386 1412.04,684.386 1412.6,684.386 1413.16,684.386 1413.72,684.386 1414.28,684.386 1414.84,684.386 1415.4,684.386 1415.95,684.386 1416.51,684.386 1417.07,684.386 1417.63,684.386 1418.19,684.386 1418.75,684.386 1419.31,684.386 1419.87,684.386 1420.43,684.386 1420.99,684.386 1421.55,684.386 1422.11,684.386 1422.67,684.386 1423.23,684.386 1423.78,684.386 1424.34,684.386 1424.9,684.386 1425.46,684.386 1426.02,684.386 1426.58,684.386 1427.14,684.386 1427.7,684.386 1428.26,684.386 1428.82,684.386 1429.38,684.386 1429.94,684.386 1430.5,684.386 1431.05,684.386 1431.61,684.386 1432.17,684.386 1432.73,684.386 1433.29,684.386 1433.85,684.386 1434.41,684.386 1434.97,684.386 1435.53,684.386 1436.09,684.386 1436.65,684.386 1437.21,684.386 1437.77,684.386 1438.33,684.386 1438.88,684.386 1439.44,684.386 1440,684.386 1440.56,684.386 1441.12,684.386 1441.68,684.386 1442.24,684.386 1442.8,684.386 1443.36,684.386 1443.92,684.386 1444.48,684.386 1445.04,684.386 1445.6,684.386 1446.15,684.386 1446.71,684.386 1447.27,684.386 1447.83,684.386 1448.39,684.386 1448.95,684.386 1449.51,684.386 1450.07,684.386 1450.63,684.386 1451.19,684.386 1451.75,684.386 1452.31,684.386 1452.87,684.386 1453.42,684.386 1453.98,684.386 1454.54,684.386 1455.1,684.386 1455.66,684.386 1456.22,684.386 1456.78,684.386 1457.34,684.386 1457.9,684.386 1458.46,684.386 1459.02,684.386 1459.58,684.386 1460.14,684.386 1460.7,684.386 1461.25,684.386 1461.81,684.386 1462.37,684.386 1462.93,684.386 1463.49,684.386 1464.05,684.386 1464.61,684.386 1465.17,684.386 1465.73,684.386 1466.29,684.386 1466.85,684.386 1467.41,684.386 1467.97,684.386 1468.52,684.386 1469.08,684.386 1469.64,684.386 1470.2,684.386 1470.76,684.386 1471.32,684.386 1471.88,684.386 1472.44,684.386 1473,684.386 1473.56,684.386 1474.12,684.386 1474.68,684.386 1475.24,684.386 1475.79,684.386 1476.35,684.386 1476.91,684.386 1477.47,684.386 1478.03,684.386 1478.59,684.386 1479.15,684.386 1479.71,684.386 1480.27,684.386 1480.83,684.386 1481.39,684.386 1481.95,684.386 1482.51,684.386 1483.07,684.386 1483.62,684.386 1484.18,684.386 1484.74,684.386 1485.3,684.386 1485.86,684.386 1486.42,684.386 1486.98,684.386 1487.54,684.386 1488.1,684.386 1488.66,684.386 1489.22,684.386 1489.78,684.386 1490.34,684.386 1490.89,684.386 1491.45,684.386 1492.01,684.386 1492.57,684.386 1493.13,684.386 1493.69,684.386 1494.25,684.386 1494.81,684.386 1495.37,684.386 1495.93,684.386 1496.49,684.386 1497.05,684.386 1497.61,684.386 1498.16,684.386 1498.72,684.386 1499.28,684.386 1499.84,684.386 1500.4,684.386 1500.96,684.386 1501.52,684.386 1502.08,684.386 1502.64,684.386 1503.2,684.386 1503.76,684.386 1504.32,684.386 1504.88,684.386 1505.44,684.386 1505.99,684.386 1506.55,684.386 1507.11,684.386 1507.67,684.386 1508.23,684.386 1508.79,684.386 1509.35,684.386 1509.91,684.386 1510.47,684.386 1511.03,684.386 1511.59,684.386 1512.15,684.386 1512.71,684.386 1513.26,684.386 1513.82,684.386 1514.38,684.386 1514.94,684.386 1515.5,684.386 1516.06,684.386 1516.62,684.386 1517.18,684.386 1517.74,684.386 1518.3,684.386 1518.86,684.386 1519.42,684.386 1519.98,684.386 1520.53,684.386 1521.09,684.386 1521.65,684.386 1522.21,684.386 1522.77,684.386 1523.33,684.386 1523.89,684.386 1524.45,684.386 1525.01,684.386 1525.57,684.386 1526.13,684.386 1526.69,684.386 1527.25,684.386 1527.81,684.386 1528.36,684.386 1528.92,684.386 1529.48,684.386 1530.04,684.386 1530.6,684.386 1531.16,684.386 1531.72,684.386 1532.28,684.386 1532.84,684.386 1533.4,684.386 1533.96,684.386 1534.52,684.386 1535.08,684.386 1535.63,684.386 1536.19,684.386 1536.75,684.386 1537.31,684.386 1537.87,684.386 1538.43,684.386 1538.99,684.386 1539.55,684.386 1540.11,684.386 1540.67,684.386 1541.23,684.386 1541.79,684.386 1542.35,684.386 1542.9,684.386 1543.46,684.386 1544.02,684.386 1544.58,684.386 1545.14,684.386 1545.7,684.386 1546.26,684.386 1546.82,684.386 1547.38,684.386 1547.94,684.386 1548.5,684.386 1549.06,684.386 1549.62,684.386 1550.18,684.386 1550.73,684.386 1551.29,684.386 1551.85,684.386 1552.41,684.386 1552.97,684.386 1553.53,684.386 1554.09,684.386 1554.65,684.386 1555.21,684.386 1555.77,684.386 1556.33,684.386 1556.89,684.386 1557.45,684.386 1558,684.386 1558.56,684.386 1559.12,684.386 1559.68,684.386 1560.24,684.386 1560.8,684.386 1561.36,684.386 1561.92,684.386 1562.48,684.386 1563.04,684.386 1563.6,684.386 1564.16,684.386 1564.72,684.386 1565.28,684.386 1565.83,684.386 1566.39,684.386 1566.95,684.386 1567.51,684.386 1568.07,684.386 1568.63,684.386 1569.19,684.386 1569.75,684.386 1570.31,684.386 1570.87,684.386 1571.43,684.386 1571.99,684.386 1572.55,684.386 1573.1,684.386 1573.66,684.386 1574.22,684.386 1574.78,684.386 1575.34,684.386 1575.9,684.386 1576.46,684.386 1577.02,684.386 1577.58,684.386 1578.14,684.386 1578.7,684.386 1579.26,684.386 1579.82,684.386 1580.37,684.386 1580.93,684.386 1581.49,684.386 1582.05,684.386 1582.61,684.386 1583.17,684.386 1583.73,684.386 1584.29,684.386 1584.85,684.386 1585.41,684.386 1585.97,684.386 1586.53,684.386 1587.09,684.386 1587.65,684.386 1588.2,684.386 1588.76,684.386 1589.32,684.386 1589.88,684.386 1590.44,684.386 1591,684.386 1591.56,684.386 1592.12,684.386 1592.68,684.386 1593.24,684.386 1593.8,684.386 1594.36,684.386 1594.92,684.386 1595.47,684.386 1596.03,684.386 1596.59,684.386 1597.15,684.386 1597.71,684.386 1598.27,684.386 1598.83,684.386 1599.39,684.386 1599.95,684.386 1600.51,684.386 1601.07,684.386 1601.63,684.386 1602.19,684.386 1602.74,684.386 1603.3,684.386 1603.86,684.386 1604.42,684.386 1604.98,684.386 1605.54,684.386 1606.1,684.386 1606.66,684.386 1607.22,684.386 1607.78,684.386 1608.34,684.386 1608.9,684.386 1609.46,684.386 1610.02,684.386 1610.57,684.386 1611.13,684.386 1611.69,684.386 1612.25,684.386 1612.81,684.386 1613.37,684.386 1613.93,684.386 1614.49,684.386 1615.05,684.386 1615.61,684.386 1616.17,684.386 1616.73,684.386 1617.29,684.386 1617.84,684.386 1618.4,684.386 1618.96,684.386 1619.52,684.386 1620.08,684.386 1620.64,684.386 1621.2,684.386 1621.76,684.386 1622.32,684.386 1622.88,684.386 1623.44,684.386 1624,684.386 1624.56,684.386 1625.11,684.386 1625.67,684.386 1626.23,684.386 1626.79,684.386 1627.35,684.386 1627.91,684.386 1628.47,684.386 1629.03,684.386 1629.59,684.386 1630.15,684.386 1630.71,684.386 1631.27,684.386 1631.83,684.386 1632.39,684.386 1632.94,684.386 1633.5,684.386 1634.06,684.386 1634.62,684.386 1635.18,684.386 1635.74,684.386 1636.3,684.386 1636.86,684.386 1637.42,684.386 1637.98,684.386 1638.54,684.386 1639.1,684.386 1639.66,684.386 1640.21,684.386 1640.77,684.386 1641.33,684.386 1641.89,684.386 1642.45,684.386 1643.01,684.386 1643.57,684.386 1644.13,684.386 1644.69,684.386 1645.25,684.386 1645.81,684.386 1646.37,684.386 1646.93,684.386 1647.48,684.386 1648.04,684.386 1648.6,684.386 1649.16,684.386 1649.72,684.386 1650.28,684.386 1650.84,684.386 1651.4,684.386 1651.96,684.386 1652.52,684.386 1653.08,684.386 1653.64,684.386 1654.2,684.386 1654.76,684.386 1655.31,684.386 1655.87,684.386 1656.43,684.386 1656.99,684.386 1657.55,684.386 1658.11,684.386 1658.67,684.386 1659.23,684.386 1659.79,684.386 1660.35,684.386 1660.91,684.386 1661.47,684.386 1662.03,684.386 1662.58,684.386 1663.14,684.386 1663.7,684.386 1664.26,684.386 1664.82,684.386 1665.38,684.386 1665.94,684.386 1666.5,684.386 1667.06,684.386 1667.62,684.386 1668.18,684.386 1668.74,684.386 1669.3,684.386 1669.85,684.386 1670.41,684.386 1670.97,684.386 1671.53,684.386 1672.09,684.386 1672.65,684.386 1673.21,684.386 1673.77,684.386 1674.33,684.386 1674.89,684.386 1675.45,684.386 1676.01,684.386 1676.57,684.386 1677.13,684.386 1677.68,684.386 1678.24,684.386 1678.8,684.386 1679.36,684.386 1679.92,684.386 1680.48,684.386 1681.04,684.386 1681.6,684.386 1682.16,684.386 1682.72,684.386 1683.28,684.386 1683.84,684.386 1684.4,684.386 1684.95,684.386 1685.51,684.386 1686.07,684.386 1686.63,684.386 1687.19,684.386 1687.75,684.386 1688.31,684.386 1688.87,684.386 1689.43,684.386 1689.99,684.386 1690.55,684.386 1691.11,684.386 1691.67,684.386 1692.23,684.386 1692.78,684.386 1693.34,684.386 1693.9,684.386 1694.46,684.386 1695.02,684.386 1695.58,684.386 1696.14,684.386 1696.7,684.386 1697.26,684.386 1697.82,684.386 1698.38,684.386 1698.94,684.386 1699.5,684.386 1700.05,684.386 1700.61,684.386 1701.17,684.386 1701.73,684.386 1702.29,684.386 1702.85,684.386 1703.41,684.386 1703.97,684.386 1704.53,684.386 1705.09,684.386 1705.65,684.386 1706.21,684.386 1706.77,684.386 1707.32,684.386 1707.88,684.386 1708.44,684.386 1709,684.386 1709.56,684.386 1710.12,684.386 1710.68,684.386 1711.24,684.386 1711.8,684.386 1712.36,684.386 1712.92,684.386 1713.48,684.386 1714.04,684.386 1714.6,684.386 1715.15,684.386 1715.71,684.386 1716.27,684.386 1716.83,684.386 1717.39,684.386 1717.95,684.386 1718.51,684.386 1719.07,684.386 1719.63,684.386 1720.19,684.386 1720.75,684.386 1721.31,684.386 1721.87,684.386 1722.42,684.386 1722.98,684.386 1723.54,684.386 1724.1,684.386 1724.66,684.386 1725.22,684.386 1725.78,684.386 1726.34,684.386 1726.9,684.386 1727.46,684.386 1728.02,684.386 1728.58,684.386 1729.14,684.386 1729.69,684.386 1730.25,684.386 1730.81,684.386 1731.37,684.386 1731.93,684.386 1732.49,684.386 1733.05,684.386 1733.61,684.386 1734.17,684.386 1734.73,684.386 1735.29,684.386 1735.85,684.386 1736.41,684.386 1736.97,684.386 1737.52,684.386 1738.08,684.386 1738.64,684.386 1739.2,684.386 1739.76,684.386 1740.32,684.386 1740.88,684.386 1741.44,684.386 1742,684.386 1742.56,684.386 1743.12,684.386 1743.68,684.386 1744.24,684.386 1744.79,684.386 1745.35,684.386 1745.91,684.386 1746.47,684.386 1747.03,684.386 1747.59,684.386 1748.15,684.386 1748.71,684.386 1749.27,684.386 1749.83,684.386 1750.39,684.386 1750.95,684.386 1751.51,684.386 1752.06,684.386 1752.62,684.386 1753.18,684.386 1753.74,684.386 1754.3,684.386 1754.86,684.386 1755.42,684.386 1755.98,684.386 1756.54,684.386 1757.1,684.386 1757.66,684.386 1758.22,684.386 1758.78,684.386 1759.34,684.386 1759.89,684.386 1760.45,684.386 1761.01,684.386 1761.57,684.386 1762.13,684.386 1762.69,684.386 1763.25,684.386 1763.81,684.386 1764.37,684.386 1764.93,684.386 1765.49,684.386 1766.05,684.386 1766.61,684.386 1767.16,684.386 1767.72,684.386 1768.28,684.386 1768.84,684.386 1769.4,684.386 1769.96,684.386 1770.52,684.386 1771.08,684.386 1771.64,684.386 1772.2,684.386 1772.76,684.386 1773.32,684.386 1773.88,684.386 1774.43,684.386 1774.99,684.386 1775.55,684.386 1776.11,684.386 1776.67,684.386 1777.23,684.386 1777.79,684.386 1778.35,684.386 1778.91,684.386 1779.47,684.386 1780.03,684.386 1780.59,684.386 1781.15,684.386 1781.71,684.386 1782.26,684.386 1782.82,684.386 1783.38,684.386 1783.94,684.386 1784.5,684.386 1785.06,684.386 1785.62,684.386 1786.18,684.386 1786.74,684.386 1787.3,684.386 1787.86,684.386 1788.42,684.386 1788.98,684.386 1789.53,684.386 1790.09,684.386 1790.65,684.386 1791.21,684.386 1791.77,684.386 1792.33,684.386 1792.89,684.386 1793.45,684.386 1794.01,684.386 1794.57,684.386 1795.13,684.386 1795.69,684.386 1796.25,684.386 1796.8,684.386 1797.36,684.386 1797.92,684.386 1798.48,684.386 1799.04,684.386 1799.6,684.386 1800.16,684.386 1800.72,684.386 1801.28,684.386 1801.84,684.386 1802.4,684.386 1802.96,684.386 1803.52,684.386 1804.08,684.386 1804.63,684.386 1805.19,684.386 1805.75,684.386 1806.31,684.386 1806.87,684.386 1807.43,684.386 1807.99,684.386 1808.55,684.386 1809.11,684.386 1809.67,684.386 1810.23,684.386 1810.79,684.386 1811.35,684.386 1811.9,684.386 1812.46,684.386 1813.02,684.386 1813.58,684.386 1814.14,684.386 1814.7,684.386 1815.26,684.386 1815.82,684.386 1816.38,684.386 1816.94,684.386 1817.5,684.386 1818.06,684.386 1818.62,684.386 1819.18,684.386 1819.73,684.386 1820.29,684.386 1820.85,684.386 1821.41,684.386 1821.97,684.386 1822.53,684.386 1823.09,684.386 1823.65,684.386 1824.21,684.386 1824.77,684.386 1825.33,684.386 1825.89,684.386 1826.45,684.386 1827,684.386 1827.56,684.386 1828.12,684.386 1828.68,684.386 1829.24,684.386 1829.8,684.386 1830.36,684.386 1830.92,684.386 1831.48,684.386 1832.04,684.386 1832.6,684.386 1833.16,684.386 1833.72,684.386 1834.27,684.386 1834.83,684.386 1835.39,684.386 1835.95,684.386 1836.51,684.386 1837.07,684.386 1837.63,684.386 1838.19,684.386 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.033800295629633 ± 0.02137690134678301\nProjected Energy: -4.019119293165016 ± (0.00407631877179071, 0.004164236378766617)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.520049</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3555e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.3105e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.088e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.323e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.705e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.638e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321633\n -3.363124291613353\n -0.7590191922770906\n  0.13584182219622853\n  0.15789998694608265\n  0.8767114411781343\n  1.5305929970973304\n  1.5835732611867472\n  3.0728703303258644\n  3.1256726539518374\n  4.86210722156217\n  6.260694850380588\n  6.402671211183111\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix(addr::SingleComponentFockAddress; n = 1) <: AbstractOperator\n\nRepresent the n-particle reduced density matrix:\n\nρ^(n)_j_1j_1k_1k_n =  prod_i^n a^_j_i prod_i^n a_n+1-k\n\nWhere j_i and k_i (all <: Int) specify the single particle sites on a lattice. Additionally, the indices run in the following manners:\n\nj_n   j_i+1  j_i    j_1 and k_n   k_i+1  k_i    k_1\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
