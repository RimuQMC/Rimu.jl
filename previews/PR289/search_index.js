var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21241076283503335 ± 0.0014980298824560242\n   G2(1) = 0.9166250727224817 ± 0.0006301576150612942\n   G2(2) = 0.9817984137908135 ± 0.0006577019068552289\n   G2(3) = 0.9907422641383764 ± 0.0007732378953655543\n   G2(4) = 0.9817984137908135 ± 0.0006577019068552289\n   G2(5) = 0.9166250727224817 ± 0.0006301576150612942\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.0805869412644356 ± 0.12300617950857715\n   Replica 2: -3.9658020078636285 ± 0.11645514497474196\n   Replica 3: -4.027285393994267 ± 0.15240954172408414\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip910\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip910)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip911\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip910)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip912\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.31 2211.02,1003.31 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.798 2211.02,745.798 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.282 2211.02,488.282 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.767 2211.02,230.767 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.31 423.181,1003.31 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.798 423.181,745.798 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.282 423.181,488.282 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.767 423.181,230.767 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M290.043 1016.66 L306.363 1016.66 L306.363 1020.59 L284.418 1020.59 L284.418 1016.66 Q287.08 1013.9 291.664 1009.27 Q296.27 1004.62 297.451 1003.28 Q299.696 1000.76 300.576 999.02 Q301.478 997.26 301.478 995.571 Q301.478 992.816 299.534 991.08 Q297.613 989.344 294.511 989.344 Q292.312 989.344 289.858 990.108 Q287.427 990.872 284.65 992.422 L284.65 987.7 Q287.474 986.566 289.927 985.987 Q292.381 985.409 294.418 985.409 Q299.789 985.409 302.983 988.094 Q306.177 990.779 306.177 995.27 Q306.177 997.399 305.367 999.321 Q304.58 1001.22 302.474 1003.81 Q301.895 1004.48 298.793 1007.7 Q295.691 1010.89 290.043 1016.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M316.224 986.034 L334.58 986.034 L334.58 989.969 L320.506 989.969 L320.506 998.441 Q321.524 998.094 322.543 997.932 Q323.562 997.746 324.58 997.746 Q330.367 997.746 333.747 1000.92 Q337.126 1004.09 337.126 1009.51 Q337.126 1015.08 333.654 1018.19 Q330.182 1021.26 323.862 1021.26 Q321.687 1021.26 319.418 1020.89 Q317.173 1020.52 314.765 1019.78 L314.765 1015.08 Q316.849 1016.22 319.071 1016.77 Q321.293 1017.33 323.77 1017.33 Q327.774 1017.33 330.112 1015.22 Q332.45 1013.12 332.45 1009.51 Q332.45 1005.89 330.112 1003.79 Q327.774 1001.68 323.77 1001.68 Q321.895 1001.68 320.02 1002.1 Q318.168 1002.51 316.224 1003.39 L316.224 986.034 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M356.339 989.112 Q352.728 989.112 350.899 992.677 Q349.094 996.219 349.094 1003.35 Q349.094 1010.45 350.899 1014.02 Q352.728 1017.56 356.339 1017.56 Q359.973 1017.56 361.779 1014.02 Q363.608 1010.45 363.608 1003.35 Q363.608 996.219 361.779 992.677 Q359.973 989.112 356.339 989.112 M356.339 985.409 Q362.149 985.409 365.205 990.015 Q368.284 994.598 368.284 1003.35 Q368.284 1012.08 365.205 1016.68 Q362.149 1021.26 356.339 1021.26 Q350.529 1021.26 347.45 1016.68 Q344.395 1012.08 344.395 1003.35 Q344.395 994.598 347.45 990.015 Q350.529 985.409 356.339 985.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M286.062 728.518 L304.418 728.518 L304.418 732.453 L290.344 732.453 L290.344 740.925 Q291.363 740.578 292.381 740.416 Q293.4 740.231 294.418 740.231 Q300.205 740.231 303.585 743.402 Q306.964 746.573 306.964 751.99 Q306.964 757.569 303.492 760.671 Q300.02 763.749 293.701 763.749 Q291.525 763.749 289.256 763.379 Q287.011 763.009 284.603 762.268 L284.603 757.569 Q286.687 758.703 288.909 759.259 Q291.131 759.814 293.608 759.814 Q297.613 759.814 299.951 757.708 Q302.288 755.601 302.288 751.99 Q302.288 748.379 299.951 746.273 Q297.613 744.166 293.608 744.166 Q291.733 744.166 289.858 744.583 Q288.006 744.999 286.062 745.879 L286.062 728.518 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M326.177 731.597 Q322.566 731.597 320.737 735.161 Q318.932 738.703 318.932 745.833 Q318.932 752.939 320.737 756.504 Q322.566 760.046 326.177 760.046 Q329.811 760.046 331.617 756.504 Q333.446 752.939 333.446 745.833 Q333.446 738.703 331.617 735.161 Q329.811 731.597 326.177 731.597 M326.177 727.893 Q331.987 727.893 335.043 732.499 Q338.122 737.083 338.122 745.833 Q338.122 754.56 335.043 759.166 Q331.987 763.749 326.177 763.749 Q320.367 763.749 317.288 759.166 Q314.233 754.56 314.233 745.833 Q314.233 737.083 317.288 732.499 Q320.367 727.893 326.177 727.893 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M356.339 731.597 Q352.728 731.597 350.899 735.161 Q349.094 738.703 349.094 745.833 Q349.094 752.939 350.899 756.504 Q352.728 760.046 356.339 760.046 Q359.973 760.046 361.779 756.504 Q363.608 752.939 363.608 745.833 Q363.608 738.703 361.779 735.161 Q359.973 731.597 356.339 731.597 M356.339 727.893 Q362.149 727.893 365.205 732.499 Q368.284 737.083 368.284 745.833 Q368.284 754.56 365.205 759.166 Q362.149 763.749 356.339 763.749 Q350.529 763.749 347.45 759.166 Q344.395 754.56 344.395 745.833 Q344.395 737.083 347.45 732.499 Q350.529 727.893 356.339 727.893 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M284.835 471.002 L307.057 471.002 L307.057 472.993 L294.511 505.562 L289.627 505.562 L301.432 474.938 L284.835 474.938 L284.835 471.002 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M316.224 471.002 L334.58 471.002 L334.58 474.938 L320.506 474.938 L320.506 483.41 Q321.524 483.063 322.543 482.9 Q323.562 482.715 324.58 482.715 Q330.367 482.715 333.747 485.887 Q337.126 489.058 337.126 494.475 Q337.126 500.053 333.654 503.155 Q330.182 506.234 323.862 506.234 Q321.687 506.234 319.418 505.863 Q317.173 505.493 314.765 504.752 L314.765 500.053 Q316.849 501.187 319.071 501.743 Q321.293 502.299 323.77 502.299 Q327.774 502.299 330.112 500.192 Q332.45 498.086 332.45 494.475 Q332.45 490.863 330.112 488.757 Q327.774 486.65 323.77 486.65 Q321.895 486.65 320.02 487.067 Q318.168 487.484 316.224 488.363 L316.224 471.002 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M356.339 474.081 Q352.728 474.081 350.899 477.646 Q349.094 481.188 349.094 488.317 Q349.094 495.424 350.899 498.988 Q352.728 502.53 356.339 502.53 Q359.973 502.53 361.779 498.988 Q363.608 495.424 363.608 488.317 Q363.608 481.188 361.779 477.646 Q359.973 474.081 356.339 474.081 M356.339 470.377 Q362.149 470.377 365.205 474.984 Q368.284 479.567 368.284 488.317 Q368.284 497.044 365.205 501.65 Q362.149 506.234 356.339 506.234 Q350.529 506.234 347.45 501.65 Q344.395 497.044 344.395 488.317 Q344.395 479.567 347.45 474.984 Q350.529 470.377 356.339 470.377 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M256.664 244.112 L264.303 244.112 L264.303 217.746 L255.992 219.413 L255.992 215.153 L264.256 213.487 L268.932 213.487 L268.932 244.112 L276.571 244.112 L276.571 248.047 L256.664 248.047 L256.664 244.112 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M296.015 216.565 Q292.404 216.565 290.576 220.13 Q288.77 223.672 288.77 230.802 Q288.77 237.908 290.576 241.473 Q292.404 245.014 296.015 245.014 Q299.65 245.014 301.455 241.473 Q303.284 237.908 303.284 230.802 Q303.284 223.672 301.455 220.13 Q299.65 216.565 296.015 216.565 M296.015 212.862 Q301.826 212.862 304.881 217.468 Q307.96 222.052 307.96 230.802 Q307.96 239.528 304.881 244.135 Q301.826 248.718 296.015 248.718 Q290.205 248.718 287.127 244.135 Q284.071 239.528 284.071 230.802 Q284.071 222.052 287.127 217.468 Q290.205 212.862 296.015 212.862 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M326.177 216.565 Q322.566 216.565 320.737 220.13 Q318.932 223.672 318.932 230.802 Q318.932 237.908 320.737 241.473 Q322.566 245.014 326.177 245.014 Q329.811 245.014 331.617 241.473 Q333.446 237.908 333.446 230.802 Q333.446 223.672 331.617 220.13 Q329.811 216.565 326.177 216.565 M326.177 212.862 Q331.987 212.862 335.043 217.468 Q338.122 222.052 338.122 230.802 Q338.122 239.528 335.043 244.135 Q331.987 248.718 326.177 248.718 Q320.367 248.718 317.288 244.135 Q314.233 239.528 314.233 230.802 Q314.233 222.052 317.288 217.468 Q320.367 212.862 326.177 212.862 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M356.339 216.565 Q352.728 216.565 350.899 220.13 Q349.094 223.672 349.094 230.802 Q349.094 237.908 350.899 241.473 Q352.728 245.014 356.339 245.014 Q359.973 245.014 361.779 241.473 Q363.608 237.908 363.608 230.802 Q363.608 223.672 361.779 220.13 Q359.973 216.565 356.339 216.565 M356.339 212.862 Q362.149 212.862 365.205 217.468 Q368.284 222.052 368.284 230.802 Q368.284 239.528 365.205 244.135 Q362.149 248.718 356.339 248.718 Q350.529 248.718 347.45 244.135 Q344.395 239.528 344.395 230.802 Q344.395 222.052 347.45 217.468 Q350.529 212.862 356.339 212.862 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip912)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.767 4017.76,230.767 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1248.78 458.259,1248.47 458.828,1248.1 459.396,1246.64 459.964,1246.19 460.533,1245.64 461.101,1243.98 461.669,1243.28 462.238,1242.5 462.806,1240.62 463.375,1238.64 463.943,1237.65 464.511,1236.55 465.08,1235.3 465.648,1232.95 466.216,1230.48 466.785,1227.97 467.353,1226.38 467.921,1224.62 468.49,1222.74 469.058,1219.73 469.626,1217.62 470.195,1214.3 470.763,1211.88 471.331,1208.25 471.9,1205.56 472.468,1202.67 473.036,1198.51 473.605,1194.25 474.173,1190.86 474.741,1187.2 475.31,1182.44 475.878,1177.38 476.446,1172.23 477.015,1165.76 477.583,1161.18 478.152,1156.42 478.72,1151.42 479.288,1144.09 479.857,1138.66 480.425,1133.02 480.993,1127.11 481.562,1119.95 482.13,1113.63 482.698,1106.04 483.267,1099.39 483.835,1091.44 484.403,1083.39 484.972,1072.9 485.54,1063.28 486.108,1051.38 486.677,1043.62 487.245,1035.67 487.813,1027.52 488.382,1019.36 488.95,1010.83 489.518,1000.26 490.087,990.586 490.655,981.746 491.224,969.638 491.792,960.672 492.36,949.594 492.929,939.414 493.497,930.293 494.065,919.983 494.634,908.63 495.202,898.377 495.77,883.788 496.339,872.326 496.907,862.19 497.475,850.825 498.044,840.494 498.612,827.03 499.18,818.051 499.749,807.87 500.317,796.672 500.885,786.622 501.454,776.677 502.022,766.78 502.59,757.916 503.159,749.043 503.727,739.203 504.295,730.484 504.864,720.481 505.432,710.418 506.001,700.741 506.569,689.034 507.137,678.543 507.706,666.045 508.274,657.884 508.842,648.865 509.411,641 509.979,630.072 510.547,622.402 511.116,614.687 511.684,607.18 512.252,596.389 512.821,588.13 513.389,578.716 513.957,570.751 514.526,560.786 515.094,553.159 515.662,544.582 516.231,536.03 516.799,527.762 517.367,519.899 517.936,515.185 518.504,509.329 519.072,502.472 519.641,495.69 520.209,489.29 520.778,483.889 521.346,477.535 521.914,472.263 522.483,465.136 523.051,458.041 523.619,452.207 524.188,445.713 524.756,438.396 525.324,433.947 525.893,428.561 526.461,425.419 527.029,419.279 527.598,414.328 528.166,410.369 528.734,407.575 529.303,404.811 529.871,397.708 530.439,392.991 531.008,389.384 531.576,384.896 532.144,379.398 532.713,376.286 533.281,372.346 533.85,368.275 534.418,362.457 534.986,357.62 535.555,353.298 536.123,351.146 536.691,348.703 537.26,345.318 537.828,344.309 538.396,339.085 538.965,333.043 539.533,332.305 540.101,328.402 540.67,325.638 541.238,325.22 541.806,323.585 542.375,320.932 542.943,314.311 543.511,315.238 544.08,313.937 544.648,312.458 545.216,309.201 545.785,305.936 546.353,305.954 546.921,302.79 547.49,301.71 548.058,297.815 548.627,296.094 549.195,295.237 549.763,294.498 550.332,293.504 550.9,292.525 551.468,289.599 552.037,289.787 552.605,286.735 553.173,285.07 553.742,284.59 554.31,281.976 554.878,281.347 555.447,278.941 556.015,277.635 556.583,277.445 557.152,276.112 557.72,274.755 558.288,272.369 558.857,273.323 559.425,271.096 559.993,272.012 560.562,272.034 561.13,270.757 561.698,269.648 562.267,271.466 562.835,267.175 563.404,265.993 563.972,265.822 564.54,265.5 565.109,266.556 565.677,268.54 566.245,266.275 566.814,264.002 567.382,261.783 567.95,259.854 568.519,261.051 569.087,258.932 569.655,261.011 570.224,257.577 570.792,256.67 571.36,257.035 571.929,254.168 572.497,253.644 573.065,253.86 573.634,256.289 574.202,256.538 574.77,256.631 575.339,256.506 575.907,255.564 576.476,253.624 577.044,252.984 577.612,253.128 578.181,254.528 578.749,255.52 579.317,255.39 579.886,252.312 580.454,250.722 581.022,250.976 581.591,250.058 582.159,252.556 582.727,251.383 583.296,252.587 583.864,249.65 584.432,251.142 585.001,249.331 585.569,249.432 586.137,248.533 586.706,247.743 587.274,249.104 587.842,248.254 588.411,248.117 588.979,249.113 589.547,249.067 590.116,248.157 590.684,247.475 591.253,246.799 591.821,248.038 592.389,246.998 592.958,247.145 593.526,248.056 594.094,249.211 594.663,249.144 595.231,246.925 595.799,241.846 596.368,240.092 596.936,241.53 597.504,242.109 598.073,242.536 598.641,241.765 599.209,243.239 599.778,243.461 600.346,241.475 600.914,243.796 601.483,243.911 602.051,242.994 602.619,243.305 603.188,243.284 603.756,242.292 604.325,241.76 604.893,241.114 605.461,243.547 606.03,243.793 606.598,242.942 607.166,243.155 607.735,242.186 608.303,243.687 608.871,244.835 609.44,242.771 610.008,242.777 610.576,241.87 611.145,243.302 611.713,243.396 612.281,242.338 612.85,240.36 613.418,238.561 613.986,238.898 614.555,239.1 615.123,241.441 615.691,242.539 616.26,241.364 616.828,240.503 617.396,241.505 617.965,241.795 618.533,242.102 619.102,241.869 619.67,243.977 620.238,244.019 620.807,243.649 621.375,246.527 621.943,246.206 622.512,245.923 623.08,246.517 623.648,247.281 624.217,246.706 624.785,246.226 625.353,244.723 625.922,245.236 626.49,243.756 627.058,243.557 627.627,242.215 628.195,244.183 628.763,241.835 629.332,240.461 629.9,239.362 630.468,239.387 631.037,239.607 631.605,237.383 632.173,237.626 632.742,237.584 633.31,237.663 633.879,239.732 634.447,239.421 635.015,237.312 635.584,236.229 636.152,236.461 636.72,236.63 637.289,238.938 637.857,239.954 638.425,238.68 638.994,236.647 639.562,236.782 640.13,236.937 640.699,236.988 641.267,237.96 641.835,237.941 642.404,236.919 642.972,236.921 643.54,236.656 644.109,234.613 644.677,235.001 645.245,236.195 645.814,236.282 646.382,234.43 646.951,232.684 647.519,230.819 648.087,231.238 648.656,232.415 649.224,232.84 649.792,232.218 650.361,232.577 650.929,234.16 651.497,233.304 652.066,232.556 652.634,231.818 653.202,231.269 653.771,231.517 654.339,233.215 654.907,232.368 655.476,233.715 656.044,231.818 656.612,235.136 657.181,239.112 657.749,238.108 658.317,240.045 658.886,238.855 659.454,235.824 660.022,235.814 660.591,233.152 661.159,233.674 661.728,233.868 662.296,235.14 662.864,234.128 663.433,232.97 664.001,234.481 664.569,236.676 665.138,237.667 665.706,240.768 666.274,240.431 666.843,239.02 667.411,238.666 667.979,237.246 668.548,236.997 669.116,236.885 669.684,234.692 670.253,236.006 670.821,236.06 671.389,237.901 671.958,237.88 672.526,237.68 673.094,238.594 673.663,238.409 674.231,236.06 674.799,234.084 675.368,234.127 675.936,234.299 676.505,232.176 677.073,233.397 677.641,234.51 678.21,233.694 678.778,235.154 679.346,234.989 679.915,234.872 680.483,233.808 681.051,233.921 681.62,231.104 682.188,232.537 682.756,230.786 683.325,231.091 683.893,230.019 684.461,229.316 685.03,227.909 685.598,226.651 686.166,226.961 686.735,228.672 687.303,228.092 687.871,229.666 688.44,230.069 689.008,230.681 689.577,233.149 690.145,235.117 690.713,236.308 691.282,235.22 691.85,236.284 692.418,238.302 692.987,236.843 693.555,235.767 694.123,236.578 694.692,234.613 695.26,234.582 695.828,233.668 696.397,235.682 696.965,233.496 697.533,231.554 698.102,230.542 698.67,228.796 699.238,229.46 699.807,231.862 700.375,230.958 700.943,229.278 701.512,227.458 702.08,227.961 702.648,226.686 703.217,228.208 703.785,225.661 704.354,226.638 704.922,229.302 705.49,229.977 706.059,233.428 706.627,232.691 707.195,233.085 707.764,235.49 708.332,234.266 708.9,233.457 709.469,234.761 710.037,235.844 710.605,235.786 711.174,234.866 711.742,233.729 712.31,232.709 712.879,233.989 713.447,234.987 714.015,235.121 714.584,234.91 715.152,235.856 715.72,237.786 716.289,236.725 716.857,237.606 717.425,236.339 717.994,233.898 718.562,232.757 719.131,236.958 719.699,235.807 720.267,235.92 720.836,236.798 721.404,235.393 721.972,234.317 722.541,233.163 723.109,234.347 723.677,234.223 724.246,235.025 724.814,235.803 725.382,235.77 725.951,233.898 726.519,236.177 727.087,236.112 727.656,234.913 728.224,234.635 728.792,233.641 729.361,233.654 729.929,233.585 730.497,233.905 731.066,234.001 731.634,235.089 732.203,234.868 732.771,234.962 733.339,236.077 733.908,236.785 734.476,234.548 735.044,233.159 735.613,234.305 736.181,233.223 736.749,233.211 737.318,232.176 737.886,231.188 738.454,231.307 739.023,231.371 739.591,234.796 740.159,233.876 740.728,232.776 741.296,233.82 741.864,232.872 742.433,234.776 743.001,234.796 743.569,232.685 744.138,231.907 744.706,232.116 745.274,232.236 745.843,231.32 746.411,232.381 746.98,233.352 747.548,231.212 748.116,231.486 748.685,231.629 749.253,230.78 749.821,233.139 750.39,233.096 750.958,235.238 751.526,236.245 752.095,238.187 752.663,238.63 753.231,239.508 753.8,239.048 754.368,239.757 754.936,237.399 755.505,237.899 756.073,237.51 756.641,240.227 757.21,240.54 757.778,240.015 758.346,237.391 758.915,238.041 759.483,237.85 760.052,238.471 760.62,236.912 761.188,235.408 761.757,235.227 762.325,233.958 762.893,233.832 763.462,230.563 764.03,230.562 764.598,229.378 765.167,229.353 765.735,228.596 766.303,226.701 766.872,226.837 767.44,225.223 768.008,225.511 768.577,227.041 769.145,226.331 769.713,227.696 770.282,227.99 770.85,230.196 771.418,231.474 771.987,230.342 772.555,230.401 773.123,228.358 773.692,229.596 774.26,229.642 774.829,227.827 775.397,229.177 775.965,230.375 776.534,229.45 777.102,230.616 777.67,231.962 778.239,232.038 778.807,231.138 779.375,232.27 779.944,232.132 780.512,231.212 781.08,234.393 781.649,234.317 782.217,235.087 782.785,234.93 783.354,233.813 783.922,233.688 784.49,233.625 785.059,232.545 785.627,232.473 786.195,231.299 786.764,231.281 787.332,230.288 787.9,228.49 788.469,226.909 789.037,226.061 789.606,226.432 790.174,226.701 790.742,226.991 791.311,229.383 791.879,229.419 792.447,230.67 793.016,231.657 793.584,233.734 794.152,232.675 794.721,234.657 795.289,233.398 795.857,236.293 796.426,234.982 796.994,232.555 797.562,233.519 798.131,234.493 798.699,236.414 799.267,235.035 799.836,234.608 800.404,233.397 800.972,230.243 801.541,230.256 802.109,229.537 802.678,229.761 803.246,230.07 803.814,231.342 804.383,230.179 804.951,230.339 805.519,229.529 806.088,229.711 806.656,230.797 807.224,231.058 807.793,230.938 808.361,230.037 808.929,231.129 809.498,231.237 810.066,232.225 810.634,232.248 811.203,232.336 811.771,230.288 812.339,232.243 812.908,230.099 813.476,230.026 814.044,229.102 814.613,229.216 815.181,229.187 815.749,231.58 816.318,230.546 816.886,228.493 817.455,226.775 818.023,227.165 818.591,227.751 819.16,226.959 819.728,228.61 820.296,229.876 820.865,229.872 821.433,230.21 822.001,230.416 822.57,230.393 823.138,229.578 823.706,230.948 824.275,229.985 824.843,229.118 825.411,229.179 825.98,229.334 826.548,230.747 827.116,231.895 827.685,233.009 828.253,229.865 828.821,228.175 829.39,228.528 829.958,228.759 830.526,230.082 831.095,229.286 831.663,229.52 832.232,231.971 832.8,232.048 833.368,232.024 833.937,230.124 834.505,229.271 835.073,229.411 835.642,227.63 836.21,227.995 836.778,233.25 837.347,232.179 837.915,229.064 838.483,229.343 839.052,229.593 839.62,230.842 840.188,229.068 840.757,230.174 841.325,231.337 841.893,231.409 842.462,232.654 843.03,232.57 843.598,232.505 844.167,231.542 844.735,232.653 845.304,232.821 845.872,232.848 846.44,232.947 847.009,234.125 847.577,234.037 848.145,234.959 848.714,234.873 849.282,235.745 849.85,238.649 850.419,235.236 850.987,232.025 851.555,232.069 852.124,232.204 852.692,231.369 853.26,232.594 853.829,233.572 854.397,231.481 854.965,229.607 855.534,232.71 856.102,232.53 856.67,233.698 857.239,232.578 857.807,232.511 858.375,231.298 858.944,232.357 859.512,232.362 860.081,232.274 860.649,233.308 861.217,234.272 861.786,232.053 862.354,234.032 862.922,233.849 863.491,233.582 864.059,230.165 864.627,229.186 865.196,229.356 865.764,231.553 866.332,230.695 866.901,228.951 867.469,230.048 868.037,231.192 868.606,232.253 869.174,232.117 869.742,233.951 870.311,233.74 870.879,234.652 871.447,234.335 872.016,234.02 872.584,233.627 873.152,232.58 873.721,233.552 874.289,235.446 874.858,235.049 875.426,232.616 875.994,233.562 876.563,233.267 877.131,228.875 877.699,229.047 878.268,230.39 878.836,232.593 879.404,229.563 879.973,230.634 880.541,230.737 881.109,230.627 881.678,231.741 882.246,232.546 882.814,233.747 883.383,233.335 883.951,234.247 884.519,236.198 885.088,234.784 885.656,236.592 886.224,236.346 886.793,237.946 887.361,238.556 887.93,241.228 888.498,238.377 889.066,235.94 889.635,236.339 890.203,235.897 890.771,235.411 891.34,237.138 891.908,234.391 892.476,234.027 893.045,231.803 893.613,233.586 894.181,231.266 894.75,231.071 895.318,231.883 895.886,230.745 896.455,230.567 897.023,230.714 897.591,230.418 898.16,230.409 898.728,230.548 899.296,229.497 899.865,228.585 900.433,229.716 901.001,229.551 901.57,231.697 902.138,229.589 902.707,229.739 903.275,229.708 903.843,226.709 904.412,228.017 904.98,228.036 905.548,226.206 906.117,225.623 906.685,226.945 907.253,227.259 907.822,227.335 908.39,227.657 908.958,227.884 909.527,226.038 910.095,224.396 910.663,224.967 911.232,225.462 911.8,226.068 912.368,228.591 912.937,228.571 913.505,227.972 914.073,227.027 914.642,227.391 915.21,229.038 915.779,230.324 916.347,230.312 916.915,232.424 917.484,231.419 918.052,230.348 918.62,228.357 919.189,231.938 919.757,231.667 920.325,230.557 920.894,230.507 921.462,231.62 922.03,231.461 922.599,230.507 923.167,230.514 923.735,230.572 924.304,229.777 924.872,229.951 925.44,228.703 926.009,229.905 926.577,229.931 927.145,233.263 927.714,232.008 928.282,232.923 928.85,230.914 929.419,231.899 929.987,230.983 930.556,233.233 931.124,234.226 931.692,234.24 932.261,233.034 932.829,232.161 933.397,230.996 933.966,230.178 934.534,231.256 935.102,233.23 935.671,232.945 936.239,230.843 936.807,231.991 937.376,232.948 937.944,233.888 938.512,232.681 939.081,232.617 939.649,231.292 940.217,231.363 940.786,231.374 941.354,231.227 941.922,230.052 942.491,231.366 943.059,230.465 943.627,229.439 944.196,230.712 944.764,228.735 945.333,230.902 945.901,233.061 946.469,234.019 947.038,234.905 947.606,235.702 948.174,235.469 948.743,236.073 949.311,236.8 949.879,236.368 950.448,236.016 951.016,236.615 951.584,237.257 952.153,237.828 952.721,236.127 953.289,234.7 953.858,234.51 954.426,231.104 954.994,229.985 955.563,230.983 956.131,232.764 956.699,232.475 957.268,233.263 957.836,230.917 958.405,229.937 958.973,227.867 959.541,227.158 960.11,228.48 960.678,227.725 961.246,226.805 961.815,226.242 962.383,226.552 962.951,226.849 963.52,227.042 964.088,225.379 964.656,227.913 965.225,228.219 965.793,227.276 966.361,228.516 966.93,227.813 967.498,229.183 968.066,229.403 968.635,230.242 969.203,229.286 969.771,229.404 970.34,229.586 970.908,228.756 971.476,230.08 972.045,231.145 972.613,233.137 973.182,233.059 973.75,232.771 974.318,231.86 974.887,231.742 975.455,233.709 976.023,231.583 976.592,234.589 977.16,234.18 977.728,231.888 978.297,230.771 978.865,230.651 979.433,231.697 980.002,232.756 980.57,229.555 981.138,230.652 981.707,229.832 982.275,229.834 982.843,232.091 983.412,233.217 983.98,233.109 984.548,232.899 985.117,231.745 985.685,233.834 986.253,234.505 986.822,233.183 987.39,230.861 987.959,229.89 988.527,229.793 989.095,228.969 989.664,230.038 990.232,230.155 990.8,232.307 991.369,233.24 991.937,233.014 992.505,230.826 993.074,231.591 993.642,231.387 994.21,230.588 994.779,231.52 995.347,231.478 995.915,232.264 996.484,232.146 997.052,233.267 997.62,236.163 998.189,234.639 998.757,234.372 999.325,230.848 999.894,232.974 1000.46,230.797 1001.03,229.721 1001.6,229.979 1002.17,229.023 1002.74,231.214 1003.3,231.035 1003.87,234.256 1004.44,234.079 1005.01,233.932 1005.58,232.687 1006.15,232.585 1006.71,232.48 1007.28,232.489 1007.85,230.302 1008.42,230.308 1008.99,231.239 1009.56,229.032 1010.12,228.346 1010.69,227.548 1011.26,226.714 1011.83,228.119 1012.4,228.518 1012.97,229.764 1013.53,227.646 1014.1,226.734 1014.67,226.911 1015.24,227.132 1015.81,228.383 1016.38,227.616 1016.94,227.883 1017.51,228.241 1018.08,226.236 1018.65,226.679 1019.22,224.897 1019.79,224.482 1020.35,224.969 1020.92,225.326 1021.49,224.739 1022.06,226.215 1022.63,227.386 1023.2,228.554 1023.76,227.85 1024.33,229.024 1024.9,229.371 1025.47,228.478 1026.04,228.373 1026.61,228.633 1027.17,228.769 1027.74,229.103 1028.31,231.463 1028.88,231.453 1029.45,232.596 1030.02,231.609 1030.58,231.526 1031.15,232.701 1031.72,233.817 1032.29,234.683 1032.86,234.488 1033.43,236.167 1033.99,233.78 1034.56,232.715 1035.13,234.583 1035.7,236.534 1036.27,237.085 1036.84,235.832 1037.4,236.556 1037.97,237.168 1038.54,236.822 1039.11,236.444 1039.68,235.023 1040.25,235.699 1040.81,236.43 1041.38,235.231 1041.95,231.702 1042.52,231.523 1043.09,230.493 1043.66,231.427 1044.22,232.393 1044.79,234.182 1045.36,230.815 1045.93,230.634 1046.5,230.402 1047.07,231.579 1047.63,231.579 1048.2,226.411 1048.77,229.504 1049.34,231.404 1049.91,233.523 1050.48,231.376 1051.05,230.179 1051.61,230.063 1052.18,229.051 1052.75,228.897 1053.32,226.036 1053.89,227.424 1054.46,228.789 1055.02,229.924 1055.59,232.061 1056.16,229.803 1056.73,230.927 1057.3,233.204 1057.87,231.864 1058.43,229.774 1059,228.706 1059.57,227.783 1060.14,229.16 1060.71,228.987 1061.28,230.149 1061.84,230.14 1062.41,232.435 1062.98,234.124 1063.55,235.792 1064.12,236.33 1064.69,237.138 1065.25,235.611 1065.82,235.084 1066.39,234.835 1066.96,234.444 1067.53,234.922 1068.1,232.465 1068.66,232.034 1069.23,232.94 1069.8,233.764 1070.37,234.588 1070.94,231.373 1071.51,231.445 1072.07,232.129 1072.64,233.923 1073.21,234.894 1073.78,234.378 1074.35,234.887 1074.92,234.446 1075.48,234.961 1076.05,234.52 1076.62,234.369 1077.19,233.054 1077.76,232.834 1078.33,231.488 1078.89,231.309 1079.46,230.002 1080.03,228.017 1080.6,228.19 1081.17,227.452 1081.74,227.65 1082.3,227.502 1082.87,225.577 1083.44,226.972 1084.01,227.464 1084.58,227.716 1085.15,228.923 1085.71,226.927 1086.28,226.198 1086.85,226.359 1087.42,226.761 1087.99,226.009 1088.56,226.431 1089.12,225.647 1089.69,223.847 1090.26,223.401 1090.83,222.752 1091.4,224.404 1091.97,225.919 1092.53,225.432 1093.1,226.691 1093.67,226.071 1094.24,228.233 1094.81,227.428 1095.38,228.689 1095.94,230.087 1096.51,230.314 1097.08,228.4 1097.65,227.785 1098.22,229.046 1098.79,229.169 1099.35,228.454 1099.92,226.591 1100.49,226.17 1101.06,225.686 1101.63,226.09 1102.2,227.669 1102.76,230.055 1103.33,230.167 1103.9,230.471 1104.47,230.495 1105.04,230.677 1105.61,231.736 1106.17,230.808 1106.74,231.909 1107.31,232.019 1107.88,233.09 1108.45,232.054 1109.02,233.046 1109.58,233.016 1110.15,231.86 1110.72,231.739 1111.29,231.71 1111.86,230.896 1112.43,229.896 1112.99,229.952 1113.56,229.035 1114.13,230.169 1114.7,230.241 1115.27,229.167 1115.84,230.183 1116.4,228.945 1116.97,227.928 1117.54,229.17 1118.11,230.381 1118.68,230.541 1119.25,231.649 1119.81,229.353 1120.38,227.482 1120.95,228.891 1121.52,231.318 1122.09,233.525 1122.66,235.569 1123.23,233.119 1123.79,232.077 1124.36,232.168 1124.93,231.193 1125.5,230.306 1126.07,230.512 1126.64,230.735 1127.2,230.828 1127.77,230.844 1128.34,230.973 1128.91,231.009 1129.48,230.053 1130.05,230.339 1130.61,230.449 1131.18,229.407 1131.75,228.423 1132.32,228.602 1132.89,228.921 1133.46,230.072 1134.02,228.194 1134.59,227.432 1135.16,223.663 1135.73,224.522 1136.3,225.036 1136.87,224.874 1137.43,226.312 1138,228.432 1138.57,230.83 1139.14,230.981 1139.71,232.026 1140.28,232.007 1140.84,231.273 1141.41,230.238 1141.98,229.32 1142.55,229.535 1143.12,228.83 1143.69,230.275 1144.25,229.333 1144.82,231.749 1145.39,230.884 1145.96,231.153 1146.53,230.202 1147.1,231.579 1147.66,231.706 1148.23,231.859 1148.8,232.763 1149.37,233.864 1149.94,233.694 1150.51,234.622 1151.07,235.493 1151.64,236.239 1152.21,233.896 1152.78,233.729 1153.35,233.566 1153.92,233.596 1154.48,234.507 1155.05,237.265 1155.62,236.839 1156.19,236.374 1156.76,237.188 1157.33,238.806 1157.89,239.264 1158.46,236.582 1159.03,236.231 1159.6,235.7 1160.17,237.433 1160.74,240.764 1161.3,239.947 1161.87,240.474 1162.44,239.049 1163.01,238.602 1163.58,237.107 1164.15,236.605 1164.71,236.197 1165.28,235.707 1165.85,236.35 1166.42,235.872 1166.99,234.306 1167.56,234.155 1168.12,233.697 1168.69,235.166 1169.26,234.696 1169.83,234.294 1170.4,232.846 1170.97,229.491 1171.53,229.485 1172.1,232.505 1172.67,233.215 1173.24,232.985 1173.81,234.088 1174.38,233.858 1174.94,234.741 1175.51,233.465 1176.08,233.048 1176.65,230.406 1177.22,229.097 1177.79,227.939 1178.35,229.415 1178.92,230.465 1179.49,229.499 1180.06,229.463 1180.63,227.301 1181.2,227.484 1181.76,227.537 1182.33,226.736 1182.9,225.876 1183.47,227.044 1184.04,228.089 1184.61,228.158 1185.17,228.298 1185.74,228.481 1186.31,230.747 1186.88,228.425 1187.45,228.452 1188.02,230.369 1188.58,228.23 1189.15,228.245 1189.72,228.311 1190.29,228.492 1190.86,227.453 1191.43,226.565 1192,226.764 1192.56,227.193 1193.13,228.214 1193.7,228.191 1194.27,229.325 1194.84,229.339 1195.41,228.408 1195.97,228.608 1196.54,229.689 1197.11,227.842 1197.68,229.815 1198.25,228.89 1198.82,228.977 1199.38,230.226 1199.95,231.323 1200.52,231.18 1201.09,232.13 1201.66,232.121 1202.23,232.045 1202.79,231.854 1203.36,232.8 1203.93,232.842 1204.5,232.736 1205.07,231.607 1205.64,231.532 1206.2,231.414 1206.77,230.401 1207.34,232.625 1207.91,232.282 1208.48,233.144 1209.05,232.764 1209.61,232.481 1210.18,233.152 1210.75,231.91 1211.32,230.789 1211.89,229.717 1212.46,228.536 1213.02,227.824 1213.59,228.093 1214.16,228.341 1214.73,228.531 1215.3,230.57 1215.87,230.552 1216.43,230.928 1217,229.972 1217.57,230.982 1218.14,228.93 1218.71,228.035 1219.28,228.278 1219.84,225.465 1220.41,226.933 1220.98,226.39 1221.55,226.647 1222.12,226.995 1222.69,227.089 1223.25,225.278 1223.82,226.619 1224.39,227.797 1224.96,229.008 1225.53,229.212 1226.1,229.472 1226.66,228.677 1227.23,229.783 1227.8,229.071 1228.37,226.305 1228.94,225.653 1229.51,227.016 1230.07,227.536 1230.64,227.796 1231.21,227.963 1231.78,227.216 1232.35,228.687 1232.92,228.731 1233.48,229.009 1234.05,229.013 1234.62,226.039 1235.19,227.476 1235.76,227.868 1236.33,228.259 1236.89,227.4 1237.46,227.633 1238.03,230.942 1238.6,231.019 1239.17,232.134 1239.74,233.306 1240.3,229.244 1240.87,228.461 1241.44,228.786 1242.01,230.178 1242.58,230.238 1243.15,228.453 1243.71,229.865 1244.28,227.973 1244.85,226.34 1245.42,227.784 1245.99,231.054 1246.56,231.295 1247.12,230.425 1247.69,232.747 1248.26,230.835 1248.83,228.02 1249.4,226.212 1249.97,226.468 1250.53,225.689 1251.1,227.179 1251.67,228.662 1252.24,226.068 1252.81,230.603 1253.38,231.545 1253.94,232.627 1254.51,233.646 1255.08,234.764 1255.65,234.494 1256.22,235.081 1256.79,233.771 1257.35,235.818 1257.92,235.708 1258.49,233.556 1259.06,234.331 1259.63,235.166 1260.2,237.006 1260.76,235.661 1261.33,236.36 1261.9,237.983 1262.47,240.628 1263.04,239.875 1263.61,244.542 1264.18,242.586 1264.74,241.599 1265.31,239.735 1265.88,236.957 1266.45,234.328 1267.02,234.167 1267.59,234.699 1268.15,235.51 1268.72,234.168 1269.29,232.64 1269.86,233.658 1270.43,232.233 1271,232.156 1271.56,231.957 1272.13,229.588 1272.7,228.192 1273.27,229.547 1273.84,227.635 1274.41,227.873 1274.97,227.164 1275.54,228.411 1276.11,228.559 1276.68,228.854 1277.25,228.047 1277.82,227.145 1278.38,230.342 1278.95,229.246 1279.52,229.129 1280.09,231.36 1280.66,232.391 1281.23,231.276 1281.79,232.277 1282.36,232.093 1282.93,230.011 1283.5,232.089 1284.07,231.891 1284.64,231.711 1285.2,231.525 1285.77,231.712 1286.34,231.751 1286.91,232.638 1287.48,230.358 1288.05,228.37 1288.61,226.205 1289.18,225.508 1289.75,225.917 1290.32,225.765 1290.89,226.01 1291.46,226.357 1292.02,227.849 1292.59,229.257 1293.16,227.459 1293.73,228.663 1294.3,228.977 1294.87,227.971 1295.43,226.066 1296,227.517 1296.57,229.888 1297.14,229.082 1297.71,230.268 1298.28,228.416 1298.84,229.711 1299.41,230.939 1299.98,230.906 1300.55,231.68 1301.12,230.456 1301.69,231.594 1302.25,230.505 1302.82,228.754 1303.39,229.919 1303.96,230.256 1304.53,232.437 1305.1,236.394 1305.66,236.091 1306.23,233.564 1306.8,231.539 1307.37,233.821 1307.94,232.574 1308.51,231.319 1309.07,230.386 1309.64,232.811 1310.21,232.582 1310.78,233.489 1311.35,234.526 1311.92,234.18 1312.48,232.836 1313.05,232.861 1313.62,234.899 1314.19,232.46 1314.76,232.402 1315.33,232.201 1315.89,230.955 1316.46,230.031 1317.03,228.907 1317.6,231.322 1318.17,231.338 1318.74,233.293 1319.3,233.26 1319.87,234.233 1320.44,234.093 1321.01,233.002 1321.58,232.964 1322.15,230.634 1322.71,230.582 1323.28,232.616 1323.85,232.174 1324.42,232.98 1324.99,232.838 1325.56,233.706 1326.12,233.594 1326.69,233.377 1327.26,232.24 1327.83,232.016 1328.4,232.859 1328.97,233.767 1329.53,233.654 1330.1,231.191 1330.67,230.11 1331.24,232.201 1331.81,231.863 1332.38,231.78 1332.94,229.678 1333.51,229.651 1334.08,229.588 1334.65,228.566 1335.22,229.397 1335.79,228.39 1336.36,226.543 1336.92,228.987 1337.49,227.186 1338.06,226.527 1338.63,227.846 1339.2,227.684 1339.77,226.978 1340.33,227.306 1340.9,224.694 1341.47,225.999 1342.04,226.228 1342.61,226.618 1343.18,226.998 1343.74,228.266 1344.31,228.323 1344.88,228.662 1345.45,228.685 1346.02,230.957 1346.59,230.994 1347.15,232.996 1347.72,231.879 1348.29,231.962 1348.86,233.069 1349.43,232.921 1350,229.642 1350.56,226.601 1351.13,226.045 1351.7,228.763 1352.27,228.929 1352.84,231.154 1353.41,232.224 1353.97,231.992 1354.54,232.654 1355.11,232.483 1355.68,233.264 1356.25,232.955 1356.82,234.829 1357.38,232.439 1357.95,229.14 1358.52,230.503 1359.09,228.687 1359.66,228.74 1360.23,228.959 1360.79,227.907 1361.36,228.273 1361.93,227.614 1362.5,228.89 1363.07,232.221 1363.64,230.193 1364.2,230.144 1364.77,230.051 1365.34,232.205 1365.91,231.948 1366.48,232.886 1367.05,229.826 1367.61,229.706 1368.18,227.683 1368.75,227.886 1369.32,226.98 1369.89,224.316 1370.46,224.634 1371.02,225.223 1371.59,224.491 1372.16,223.826 1372.73,226.381 1373.3,229.952 1373.87,227.888 1374.43,230.128 1375,230.293 1375.57,228.297 1376.14,227.529 1376.71,229.924 1377.28,228.008 1377.84,226.339 1378.41,224.821 1378.98,226.259 1379.55,230.679 1380.12,230.642 1380.69,230.677 1381.25,231.863 1381.82,233.151 1382.39,233.163 1382.96,234.015 1383.53,234.765 1384.1,232.489 1384.66,235.5 1385.23,234.084 1385.8,231.018 1386.37,229.875 1386.94,227.718 1387.51,230.183 1388.07,229.232 1388.64,231.327 1389.21,231.719 1389.78,231.68 1390.35,231.791 1390.92,232.04 1391.48,232.051 1392.05,229.884 1392.62,230.161 1393.19,231.35 1393.76,230.331 1394.33,231.493 1394.89,229.57 1395.46,229.724 1396.03,232.762 1396.6,235.809 1397.17,235.405 1397.74,235.378 1398.3,235.328 1398.87,234.058 1399.44,231.714 1400.01,231.582 1400.58,232.522 1401.15,232.594 1401.71,233.653 1402.28,235.52 1402.85,235.372 1403.42,233.099 1403.99,236.327 1404.56,234.773 1405.13,234.671 1405.69,235.56 1406.26,233.409 1406.83,233.207 1407.4,233.293 1407.97,231.997 1408.54,232.08 1409.1,235.075 1409.67,233.789 1410.24,233.458 1410.81,231.135 1411.38,231.937 1411.95,232.011 1412.51,230.882 1413.08,229.808 1413.65,230.077 1414.22,232.155 1414.79,233.292 1415.36,230.062 1415.92,229.928 1416.49,229.063 1417.06,229.138 1417.63,231.326 1418.2,231.314 1418.77,232.465 1419.33,231.132 1419.9,228.025 1420.47,225.928 1421.04,224.22 1421.61,226.711 1422.18,227.958 1422.74,229.208 1423.31,228.403 1423.88,229.671 1424.45,229.871 1425.02,231.105 1425.59,229.968 1426.15,232.036 1426.72,231.855 1427.29,230.632 1427.86,232.555 1428.43,232.571 1429,233.571 1429.56,231.361 1430.13,231.448 1430.7,232.258 1431.27,231.25 1431.84,229.122 1432.41,230.335 1432.97,231.483 1433.54,231.654 1434.11,232.48 1434.68,232.332 1435.25,232.062 1435.82,232.902 1436.38,231.862 1436.95,231.701 1437.52,231.337 1438.09,234.347 1438.66,233.879 1439.23,233.67 1439.79,235.403 1440.36,237.135 1440.93,237.714 1441.5,237.219 1442.07,238.773 1442.64,238.995 1443.2,238.16 1443.77,236.585 1444.34,235.109 1444.91,234.909 1445.48,230.363 1446.05,230.03 1446.61,228.932 1447.18,228.979 1447.75,229.059 1448.32,228.248 1448.89,230.426 1449.46,229.269 1450.02,226.511 1450.59,225.85 1451.16,228.196 1451.73,227.212 1452.3,228.576 1452.87,229.499 1453.43,228.682 1454,227.902 1454.57,229.077 1455.14,228.005 1455.71,229.277 1456.28,230.212 1456.84,230.101 1457.41,230.317 1457.98,229.197 1458.55,229.056 1459.12,226.971 1459.69,227.08 1460.25,226.126 1460.82,226.401 1461.39,227.564 1461.96,226.857 1462.53,226.484 1463.1,228.745 1463.66,226.789 1464.23,227.948 1464.8,228.19 1465.37,227.49 1465.94,225.445 1466.51,226.791 1467.07,226.86 1467.64,229.166 1468.21,231.364 1468.78,232.501 1469.35,232.492 1469.92,232.251 1470.48,233.316 1471.05,235.337 1471.62,238.275 1472.19,237.984 1472.76,238.624 1473.33,239.343 1473.89,238.772 1474.46,241.307 1475.03,239.441 1475.6,237.874 1476.17,234.325 1476.74,233.057 1477.31,234.783 1477.87,235.421 1478.44,233.871 1479.01,233.708 1479.58,232.506 1480.15,230.375 1480.72,228.277 1481.28,227.197 1481.85,227.293 1482.42,227.107 1482.99,226.531 1483.56,227.891 1484.13,228.141 1484.69,231.226 1485.26,231.119 1485.83,231.038 1486.4,228.966 1486.97,228.977 1487.54,228.857 1488.1,227.686 1488.67,227.77 1489.24,229.242 1489.81,229.407 1490.38,229.512 1490.95,229.699 1491.51,231.733 1492.08,232.635 1492.65,232.403 1493.22,232.443 1493.79,231.111 1494.36,232.267 1494.92,230.951 1495.49,231.003 1496.06,230.049 1496.63,230.914 1497.2,228.711 1497.77,226.688 1498.33,226.994 1498.9,228.215 1499.47,230.441 1500.04,230.536 1500.61,230.567 1501.18,229.455 1501.74,229.69 1502.31,229.891 1502.88,230.201 1503.45,230.972 1504.02,229.937 1504.59,231.118 1505.15,232.071 1505.72,231.075 1506.29,232.158 1506.86,230.061 1507.43,229.043 1508,230.183 1508.56,228.084 1509.13,229.198 1509.7,227.24 1510.27,226.655 1510.84,227.102 1511.41,226.435 1511.97,226.735 1512.54,224.857 1513.11,224.14 1513.68,223.53 1514.25,225.107 1514.82,226.432 1515.38,226.777 1515.95,227.03 1516.52,228.248 1517.09,225.554 1517.66,227.122 1518.23,227.597 1518.79,226.89 1519.36,227.228 1519.93,229.553 1520.5,230.845 1521.07,231.117 1521.64,230.221 1522.2,231.468 1522.77,231.642 1523.34,231.462 1523.91,228.208 1524.48,228.331 1525.05,230.562 1525.61,229.571 1526.18,230.671 1526.75,229.476 1527.32,229.77 1527.89,233.872 1528.46,231.807 1529.02,231.949 1529.59,230.911 1530.16,231.135 1530.73,231.463 1531.3,232.627 1531.87,234.516 1532.43,235.344 1533,233.995 1533.57,233.853 1534.14,231.793 1534.71,228.843 1535.28,228.257 1535.84,229.416 1536.41,231.662 1536.98,231.821 1537.55,231.891 1538.12,232.648 1538.69,230.572 1539.25,229.904 1539.82,232.147 1540.39,233.102 1540.96,233.07 1541.53,232.898 1542.1,231.56 1542.66,229.357 1543.23,230.336 1543.8,230.508 1544.37,231.583 1544.94,231.648 1545.51,229.761 1546.08,228.924 1546.64,228.925 1547.21,230.114 1547.78,232.06 1548.35,232.779 1548.92,230.718 1549.49,228.719 1550.05,230.128 1550.62,229.307 1551.19,229.324 1551.76,229.496 1552.33,232.835 1552.9,232.741 1553.46,231.524 1554.03,230.584 1554.6,231.68 1555.17,231.524 1555.74,230.392 1556.31,229.281 1556.87,229.282 1557.44,230.547 1558.01,232.654 1558.58,231.501 1559.15,234.657 1559.72,234.427 1560.28,234.101 1560.85,233.982 1561.42,235.661 1561.99,234.137 1562.56,232.851 1563.13,233.768 1563.69,233.492 1564.26,232.369 1564.83,228.294 1565.4,228.461 1565.97,228.644 1566.54,228.822 1567.1,231.013 1567.67,232.861 1568.24,233.675 1568.81,233.471 1569.38,233.145 1569.95,233.895 1570.51,233.671 1571.08,235.542 1571.65,236.245 1572.22,237.914 1572.79,237.129 1573.36,237.478 1573.92,235.779 1574.49,233.449 1575.06,231.165 1575.63,231.094 1576.2,232.9 1576.77,232.912 1577.33,230.707 1577.9,228.615 1578.47,229.794 1579.04,229.756 1579.61,228.822 1580.18,229.714 1580.74,228.679 1581.31,228.713 1581.88,228.843 1582.45,229.2 1583.02,228.202 1583.59,228.199 1584.15,229.214 1584.72,229.257 1585.29,230.355 1585.86,229.397 1586.43,231.586 1587,228.315 1587.56,229.559 1588.13,230.919 1588.7,231.916 1589.27,231.829 1589.84,232.897 1590.41,232.89 1590.97,229.462 1591.54,229.501 1592.11,229.286 1592.68,230.535 1593.25,230.504 1593.82,230.406 1594.38,230.466 1594.95,230.539 1595.52,228.492 1596.09,228.73 1596.66,229.937 1597.23,229.867 1597.79,230.869 1598.36,230.841 1598.93,229.66 1599.5,229.959 1600.07,231.29 1600.64,233.402 1601.2,233.069 1601.77,232.893 1602.34,232.766 1602.91,233.526 1603.48,234.309 1604.05,234.897 1604.61,233.231 1605.18,234.139 1605.75,231.985 1606.32,233.863 1606.89,232.619 1607.46,234.599 1608.02,233.363 1608.59,232.188 1609.16,231.999 1609.73,232.761 1610.3,232.678 1610.87,231.378 1611.43,233.181 1612,230.784 1612.57,230.659 1613.14,232.503 1613.71,232.172 1614.28,232.92 1614.84,229.559 1615.41,229.662 1615.98,229.525 1616.55,226.523 1617.12,227.809 1617.69,230.165 1618.26,230.401 1618.82,231.331 1619.39,234.476 1619.96,231.954 1620.53,231.632 1621.1,230.454 1621.67,229.434 1622.23,230.672 1622.8,229.693 1623.37,229.664 1623.94,231.507 1624.51,231.451 1625.08,230.496 1625.64,230.315 1626.21,228.555 1626.78,227.553 1627.35,225.622 1627.92,226.952 1628.49,227.216 1629.05,227.478 1629.62,228.645 1630.19,229.865 1630.76,230.783 1631.33,229.828 1631.9,228.827 1632.46,224.88 1633.03,225.224 1633.6,224.697 1634.17,225.122 1634.74,223.471 1635.31,224.249 1635.87,222.716 1636.44,222.353 1637.01,223.98 1637.58,225.527 1638.15,226.163 1638.72,227.511 1639.28,228.932 1639.85,230.102 1640.42,227.173 1640.99,226.453 1641.56,228.071 1642.13,230.537 1642.69,229.788 1643.26,229.092 1643.83,228.284 1644.4,228.609 1644.97,228.685 1645.54,228.868 1646.1,228.254 1646.67,228.715 1647.24,227.806 1647.81,227.136 1648.38,229.588 1648.95,230.908 1649.51,232.011 1650.08,233 1650.65,233.019 1651.22,235.177 1651.79,239.076 1652.36,238.681 1652.92,238.299 1653.49,237.934 1654.06,236.501 1654.63,236.238 1655.2,238.304 1655.77,237.71 1656.33,237.27 1656.9,237.545 1657.47,236.202 1658.04,235.952 1658.61,233.459 1659.18,233.118 1659.74,231.772 1660.31,231.734 1660.88,234.647 1661.45,234.227 1662.02,233.023 1662.59,232.817 1663.15,233.701 1663.72,234.655 1664.29,237.599 1664.86,239.191 1665.43,237.643 1666,238.152 1666.56,235.587 1667.13,235.105 1667.7,237.649 1668.27,236.172 1668.84,235.785 1669.41,234.363 1669.97,235.048 1670.54,232.783 1671.11,233.637 1671.68,233.525 1672.25,232.204 1672.82,232.092 1673.38,230.824 1673.95,229.756 1674.52,229.793 1675.09,229.718 1675.66,228.825 1676.23,228.604 1676.79,230.745 1677.36,230.402 1677.93,230.361 1678.5,231.532 1679.07,231.541 1679.64,231.324 1680.2,230.052 1680.77,231.198 1681.34,231.22 1681.91,229.883 1682.48,229.897 1683.05,228.831 1683.61,226.584 1684.18,223.654 1684.75,224.053 1685.32,224.805 1685.89,225.218 1686.46,223.594 1687.02,225.889 1687.59,227.269 1688.16,227.363 1688.73,229.477 1689.3,231.711 1689.87,231.675 1690.44,232.551 1691,234.412 1691.57,234.052 1692.14,231.566 1692.71,228.379 1693.28,228.342 1693.85,228.51 1694.41,229.728 1694.98,229.95 1695.55,230.943 1696.12,231.859 1696.69,231.805 1697.26,229.682 1697.82,234.601 1698.39,236.054 1698.96,234.591 1699.53,234.163 1700.1,234.01 1700.67,232.729 1701.23,231.414 1701.8,231.32 1702.37,230.161 1702.94,229.053 1703.51,230.268 1704.08,228.991 1704.64,229.162 1705.21,230.135 1705.78,229.184 1706.35,230.08 1706.92,233.144 1707.49,231.819 1708.05,231.491 1708.62,233.456 1709.19,233.066 1709.76,233.913 1710.33,233.598 1710.9,232.456 1711.46,230.156 1712.03,233.209 1712.6,232.996 1713.17,232.603 1713.74,232.503 1714.31,232.368 1714.87,233.391 1715.44,233.978 1716.01,233.612 1716.58,233.607 1717.15,232.504 1717.72,235.405 1718.28,232.81 1718.85,233.629 1719.42,232.515 1719.99,227.143 1720.56,227.059 1721.13,231.252 1721.69,231.943 1722.26,231.895 1722.83,232.592 1723.4,231.204 1723.97,231.097 1724.54,231.146 1725.1,232.138 1725.67,232.008 1726.24,233.862 1726.81,233.438 1727.38,233.343 1727.95,230.883 1728.51,232.645 1729.08,230.164 1729.65,231.002 1730.22,231.817 1730.79,232.616 1731.36,230.345 1731.92,230.107 1732.49,229.103 1733.06,225.95 1733.63,227.013 1734.2,229.353 1734.77,229.113 1735.33,229.112 1735.9,228.729 1736.47,228.85 1737.04,227.894 1737.61,233.066 1738.18,232.998 1738.74,230.63 1739.31,230.513 1739.88,230.375 1740.45,229.136 1741.02,227.099 1741.59,226.224 1742.15,225.397 1742.72,227.523 1743.29,225.573 1743.86,226.987 1744.43,228.268 1745,228.461 1745.56,227.474 1746.13,226.824 1746.7,225.016 1747.27,225.328 1747.84,226.693 1748.41,227.256 1748.97,226.479 1749.54,224.817 1750.11,224.317 1750.68,223.631 1751.25,223.105 1751.82,221.339 1752.38,225.328 1752.95,224.694 1753.52,226.058 1754.09,227.403 1754.66,228.662 1755.23,228.581 1755.79,229.835 1756.36,230.949 1756.93,230.019 1757.5,230.227 1758.07,231.108 1758.64,231.189 1759.21,229.132 1759.77,231.204 1760.34,231.248 1760.91,231.273 1761.48,231.465 1762.05,229.498 1762.62,230.631 1763.18,228.506 1763.75,228.592 1764.32,229.77 1764.89,228.845 1765.46,229.998 1766.03,230.033 1766.59,229.296 1767.16,229.454 1767.73,229.495 1768.3,228.608 1768.87,229.787 1769.44,229.894 1770,228.999 1770.57,229.145 1771.14,229.288 1771.71,231.429 1772.28,231.482 1772.85,231.791 1773.41,232.006 1773.98,233.994 1774.55,233.831 1775.12,233.606 1775.69,235.63 1776.26,234.263 1776.82,233.003 1777.39,232.746 1777.96,232.709 1778.53,234.756 1779.1,233.405 1779.67,230.177 1780.23,231.221 1780.8,231.276 1781.37,231.196 1781.94,231.206 1782.51,233.179 1783.08,234.124 1783.64,232.802 1784.21,233.784 1784.78,231.652 1785.35,232.77 1785.92,231.669 1786.49,231.685 1787.05,231.567 1787.62,234.537 1788.19,233.124 1788.76,233.065 1789.33,232.991 1789.9,231.672 1790.46,232.661 1791.03,232.307 1791.6,232.971 1792.17,231.815 1792.74,230.752 1793.31,229.734 1793.87,229.799 1794.44,229.877 1795.01,230.079 1795.58,228.801 1796.15,228.739 1796.72,229.981 1797.28,230.989 1797.85,229.939 1798.42,230.056 1798.99,231.171 1799.56,232.282 1800.13,231.957 1800.69,231.761 1801.26,232.711 1801.83,230.632 1802.4,229.67 1802.97,228.665 1803.54,228.933 1804.1,227.931 1804.67,229.098 1805.24,229.271 1805.81,229.552 1806.38,231.539 1806.95,228.431 1807.51,227.706 1808.08,227.757 1808.65,228.992 1809.22,230.103 1809.79,226.953 1810.36,229.092 1810.92,228.134 1811.49,229.206 1812.06,230.331 1812.63,230.26 1813.2,230.256 1813.77,229.164 1814.33,230.253 1814.9,229.302 1815.47,225.145 1816.04,226.75 1816.61,227.132 1817.18,228.395 1817.74,224.57 1818.31,226.225 1818.88,226.529 1819.45,226.867 1820.02,228.053 1820.59,226.321 1821.15,226.814 1821.72,223.944 1822.29,225.406 1822.86,224.868 1823.43,225.637 1824,226.96 1824.56,230.302 1825.13,231.375 1825.7,229.644 1826.27,225.833 1826.84,226.295 1827.41,226.7 1827.97,225.05 1828.54,221.207 1829.11,220.01 1829.68,219.895 1830.25,222.784 1830.82,223.712 1831.39,222.403 1831.95,223.262 1832.52,225.106 1833.09,227.812 1833.66,229.391 1834.23,229.413 1834.8,231.762 1835.36,232.05 1835.93,233.159 1836.5,233.419 1837.07,234.576 1837.64,235.577 1838.21,236.288 1838.77,235.077 1839.34,235.893 1839.91,233.728 1840.48,232.531 1841.05,234.441 1841.62,234.418 1842.18,235.261 1842.75,235.19 1843.32,234.004 1843.89,234.077 1844.46,233.023 1845.03,234.24 1845.59,235.258 1846.16,234.245 1846.73,237.511 1847.3,236.253 1847.87,236.977 1848.44,237.622 1849,238.416 1849.57,236.986 1850.14,236.672 1850.71,238.48 1851.28,237.769 1851.85,237.553 1852.41,237.229 1852.98,235.92 1853.55,235.607 1854.12,237.107 1854.69,236.625 1855.26,234.032 1855.82,233.836 1856.39,233.671 1856.96,234.529 1857.53,234.147 1858.1,235.012 1858.67,233.711 1859.23,234.537 1859.8,235.271 1860.37,231.82 1860.94,231.732 1861.51,231.424 1862.08,230.185 1862.64,231.176 1863.21,230.931 1863.78,234.003 1864.35,234.76 1864.92,233.311 1865.49,233.005 1866.05,231.669 1866.62,230.554 1867.19,230.56 1867.76,231.533 1868.33,232.515 1868.9,233.498 1869.46,236.353 1870.03,234.856 1870.6,235.569 1871.17,235.151 1871.74,233.719 1872.31,233.417 1872.87,232.267 1873.44,233.018 1874.01,231.667 1874.58,231.357 1875.15,233.282 1875.72,234.092 1876.28,231.884 1876.85,232.692 1877.42,232.302 1877.99,230.98 1878.56,232.007 1879.13,230.793 1879.69,230.82 1880.26,231.599 1880.83,231.244 1881.4,231.971 1881.97,232.777 1882.54,232.586 1883.1,232.456 1883.67,231.823 1884.24,231.579 1884.81,231.416 1885.38,230.185 1885.95,229.102 1886.51,230.083 1887.08,227.971 1887.65,227.09 1888.22,226.132 1888.79,227.248 1889.36,226.495 1889.92,225.681 1890.49,226.114 1891.06,230.641 1891.63,228.416 1892.2,227.261 1892.77,226.379 1893.33,226.639 1893.9,226.601 1894.47,224.825 1895.04,226.308 1895.61,224.292 1896.18,224.758 1896.74,225.385 1897.31,228.664 1897.88,230.828 1898.45,230.738 1899.02,231.875 1899.59,230.846 1900.16,230.89 1900.72,233.07 1901.29,231.927 1901.86,228.73 1902.43,228.722 1903,227.654 1903.57,228.812 1904.13,230.949 1904.7,230.922 1905.27,230.942 1905.84,230.857 1906.41,230.717 1906.98,231.626 1907.54,232.607 1908.11,229.496 1908.68,229.742 1909.25,228.838 1909.82,230.233 1910.39,230.374 1910.95,230.358 1911.52,230.358 1912.09,228.257 1912.66,228.42 1913.23,227.506 1913.8,227.8 1914.36,228.157 1914.93,228.17 1915.5,228.359 1916.07,228.557 1916.64,228.813 1917.21,229.052 1917.77,230.381 1918.34,230.154 1918.91,228.259 1919.48,229.475 1920.05,228.578 1920.62,228.888 1921.18,228.033 1921.75,230.652 1922.32,228.571 1922.89,227.646 1923.46,227.847 1924.03,230.848 1924.59,230.975 1925.16,230.948 1925.73,228.927 1926.3,230.201 1926.87,229.134 1927.44,227.371 1928,227.708 1928.57,229.8 1929.14,232.068 1929.71,231.943 1930.28,232.177 1930.85,232.347 1931.41,233.449 1931.98,234.467 1932.55,232.162 1933.12,228.758 1933.69,228.966 1934.26,229.405 1934.82,229.617 1935.39,231.6 1935.96,227.538 1936.53,227.819 1937.1,228.855 1937.67,228.072 1938.23,227.272 1938.8,228.612 1939.37,228.958 1939.94,228.993 1940.51,231.297 1941.08,231.6 1941.64,231.409 1942.21,229.397 1942.78,228.318 1943.35,229.496 1943.92,229.551 1944.49,229.595 1945.05,231.751 1945.62,232.737 1946.19,232.52 1946.76,232.834 1947.33,233.761 1947.9,236.768 1948.46,237.472 1949.03,236.988 1949.6,236.566 1950.17,234.994 1950.74,232.508 1951.31,233.635 1951.87,233.431 1952.44,234.248 1953.01,232.011 1953.58,230.806 1954.15,230.885 1954.72,230.905 1955.28,229.801 1955.85,230.844 1956.42,230.841 1956.99,231.728 1957.56,230.598 1958.13,230.593 1958.69,231.79 1959.26,231.668 1959.83,230.529 1960.4,231.766 1960.97,230.738 1961.54,228.523 1962.1,229.597 1962.67,232.834 1963.24,233.678 1963.81,231.528 1964.38,231.505 1964.95,232.622 1965.51,233.521 1966.08,232.291 1966.65,231.285 1967.22,231.239 1967.79,233.348 1968.36,234.108 1968.92,231.705 1969.49,233.655 1970.06,233.51 1970.63,233.292 1971.2,233.087 1971.77,231.848 1972.34,230.643 1972.9,232.668 1973.47,233.431 1974.04,235.119 1974.61,233.857 1975.18,234.685 1975.75,235.495 1976.31,235.041 1976.88,232.62 1977.45,233.606 1978.02,233.526 1978.59,232.305 1979.16,233.286 1979.72,232.85 1980.29,232.733 1980.86,231.62 1981.43,229.722 1982,230.868 1982.57,233.01 1983.13,232.656 1983.7,231.306 1984.27,230.159 1984.84,231.274 1985.41,230.204 1985.98,233.336 1986.54,233.191 1987.11,234.051 1987.68,230.624 1988.25,228.435 1988.82,226.35 1989.39,225.576 1989.95,225.824 1990.52,227.029 1991.09,228.263 1991.66,227.397 1992.23,228.833 1992.8,232.159 1993.36,232.971 1993.93,230.636 1994.5,230.514 1995.07,230.41 1995.64,229.427 1996.21,228.589 1996.77,226.614 1997.34,225.836 1997.91,226.011 1998.48,227.017 1999.05,227.087 1999.62,227.315 2000.18,228.516 2000.75,227.639 2001.32,226.884 2001.89,227.052 2002.46,229.364 2003.03,228.466 2003.59,228.536 2004.16,226.6 2004.73,227.005 2005.3,228.422 2005.87,228.61 2006.44,227.679 2007,226.938 2007.57,227.263 2008.14,229.775 2008.71,230.98 2009.28,229.991 2009.85,232.101 2010.41,234.207 2010.98,234.872 2011.55,233.683 2012.12,233.353 2012.69,233.262 2013.26,234.971 2013.82,236.903 2014.39,235.335 2014.96,234.015 2015.53,233.715 2016.1,233.394 2016.67,234.381 2017.23,234.105 2017.8,231.828 2018.37,231.687 2018.94,232.487 2019.51,232.484 2020.08,233.094 2020.64,230.027 2021.21,233.115 2021.78,230.946 2022.35,229.483 2022.92,232.479 2023.49,232.39 2024.05,231.189 2024.62,231.164 2025.19,230.013 2025.76,229.077 2026.33,230.109 2026.9,230.147 2027.46,230.18 2028.03,229.189 2028.6,231.242 2029.17,230.222 2029.74,232.122 2030.31,231.974 2030.87,231.792 2031.44,230.43 2032.01,232.161 2032.58,232.012 2033.15,231.81 2033.72,233.838 2034.28,233.262 2034.85,233.261 2035.42,234.163 2035.99,234.66 2036.56,235.413 2037.13,234.206 2037.69,234.874 2038.26,234.683 2038.83,234.473 2039.4,233.057 2039.97,230.702 2040.54,228.395 2041.11,226.362 2041.67,227.577 2042.24,227.697 2042.81,225.96 2043.38,229.332 2043.95,230.449 2044.52,232.362 2045.08,232.221 2045.65,231.241 2046.22,232.275 2046.79,232.061 2047.36,230.012 2047.93,230.137 2048.49,229.149 2049.06,230.251 2049.63,232.379 2050.2,231.103 2050.77,231.036 2051.34,232.971 2051.9,233.751 2052.47,231.364 2053.04,231.108 2053.61,230.087 2054.18,229.964 2054.75,228.795 2055.31,228.781 2055.88,228.965 2056.45,228.008 2057.02,227.219 2057.59,228.364 2058.16,230.475 2058.72,230.193 2059.29,230.939 2059.86,231.859 2060.43,231.774 2061,231.667 2061.57,232.534 2062.13,231.661 2062.7,231.652 2063.27,231.703 2063.84,229.733 2064.41,225.805 2064.98,224.995 2065.54,224.578 2066.11,224.923 2066.68,226.305 2067.25,227.631 2067.82,229.204 2068.39,228.295 2068.95,227.297 2069.52,227.701 2070.09,228.157 2070.66,227.215 2071.23,227.535 2071.8,227.591 2072.36,227.983 2072.93,227.108 2073.5,227.088 2074.07,225.362 2074.64,225.834 2075.21,227.107 2075.77,227.558 2076.34,224.571 2076.91,225.212 2077.48,226.506 2078.05,226.808 2078.62,227.103 2079.18,226.213 2079.75,227.461 2080.32,229.873 2080.89,227.96 2081.46,228.128 2082.03,229.385 2082.59,229.605 2083.16,228.74 2083.73,228.011 2084.3,228.28 2084.87,227.475 2085.44,227.613 2086,228.843 2086.57,229.153 2087.14,230.401 2087.71,230.738 2088.28,232.906 2088.85,229.524 2089.41,229.836 2089.98,231.115 2090.55,231.097 2091.12,230.226 2091.69,230.337 2092.26,228.591 2092.82,229.836 2093.39,229.094 2093.96,228.314 2094.53,228.453 2095.1,228.74 2095.67,227.793 2096.23,229.258 2096.8,230.565 2097.37,228.88 2097.94,229.102 2098.51,230.447 2099.08,231.907 2099.64,230.952 2100.21,230.969 2100.78,231.199 2101.35,231.384 2101.92,232.633 2102.49,232.5 2103.05,234.56 2103.62,235.285 2104.19,235.057 2104.76,236.911 2105.33,236.538 2105.9,236.295 2106.46,235.771 2107.03,235.508 2107.6,236.257 2108.17,236.814 2108.74,234.544 2109.31,235.369 2109.87,237.087 2110.44,235.724 2111.01,235.561 2111.58,232.218 2112.15,231.185 2112.72,230.014 2113.29,230.202 2113.85,230.406 2114.42,230.268 2114.99,231.562 2115.56,231.54 2116.13,231.431 2116.7,232.787 2117.26,233.794 2117.83,232.556 2118.4,232.502 2118.97,231.322 2119.54,231.405 2120.11,231.011 2120.67,233.017 2121.24,232.891 2121.81,229.434 2122.38,228.262 2122.95,226.274 2123.52,227.682 2124.08,227.83 2124.65,227.067 2125.22,226.334 2125.79,226.549 2126.36,228.034 2126.93,226.046 2127.49,229.71 2128.06,228.635 2128.63,228.728 2129.2,230.116 2129.77,230.403 2130.34,230.428 2130.9,230.434 2131.47,231.415 2132.04,232.541 2132.61,231.528 2133.18,232.448 2133.75,233.484 2134.31,233.56 2134.88,231.31 2135.45,233.34 2136.02,233.359 2136.59,232.217 2137.16,232.296 2137.72,232.202 2138.29,234.109 2138.86,233.775 2139.43,235.789 2140,235.297 2140.57,234.971 2141.13,232.842 2141.7,233.983 2142.27,232.722 2142.84,233.365 2143.41,232.261 2143.98,233.251 2144.54,234.172 2145.11,233.054 2145.68,231.628 2146.25,230.411 2146.82,231.446 2147.39,230.315 2147.95,229.295 2148.52,229.395 2149.09,228.132 2149.66,229.194 2150.23,229.289 2150.8,229.36 2151.36,229.443 2151.93,230.423 2152.5,228.45 2153.07,227.773 2153.64,227.006 2154.21,228.454 2154.77,228.5 2155.34,226.651 2155.91,227.01 2156.48,227.343 2157.05,228.711 2157.62,227.857 2158.18,227.188 2158.75,228.283 2159.32,230.449 2159.89,232.406 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip910)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ± 0.022\n  with uncertainty of ± 0.0019541531567315706\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0128 ± (0.00350165, 0.0034749) (MC)\n  95% confidence interval: [-4.01965, -4.0061] (MC)\n  linear error propagation: -4.01309 ± 0.00349851\n  |δ_y| = |0.00283612| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.012800951150911, val_l = 0.00685162507482584, val_u = 0.0067003810819210585)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip940\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip940)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip941\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip940)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip942\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1133.2 2211.02,1133.2 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,948.912 2211.02,948.912 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,764.624 2211.02,764.624 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,580.337 2211.02,580.337 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,396.049 2211.02,396.049 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,211.761 2211.02,211.761 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1133.2 365.751,1133.2 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,948.912 365.751,948.912 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,764.624 365.751,764.624 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,580.337 365.751,580.337 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,396.049 365.751,396.049 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,211.761 365.751,211.761 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M298.909 1119 Q295.298 1119 293.469 1122.56 Q291.664 1126.1 291.664 1133.23 Q291.664 1140.34 293.469 1143.91 Q295.298 1147.45 298.909 1147.45 Q302.543 1147.45 304.349 1143.91 Q306.177 1140.34 306.177 1133.23 Q306.177 1126.1 304.349 1122.56 Q302.543 1119 298.909 1119 M298.909 1115.29 Q304.719 1115.29 307.775 1119.9 Q310.853 1124.48 310.853 1133.23 Q310.853 1141.96 307.775 1146.57 Q304.719 1151.15 298.909 1151.15 Q293.099 1151.15 290.02 1146.57 Q286.964 1141.96 286.964 1133.23 Q286.964 1124.48 290.02 1119.9 Q293.099 1115.29 298.909 1115.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M259.557 962.257 L267.196 962.257 L267.196 935.891 L258.886 937.558 L258.886 933.299 L267.15 931.632 L271.826 931.632 L271.826 962.257 L279.465 962.257 L279.465 966.192 L259.557 966.192 L259.557 962.257 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 934.711 Q295.298 934.711 293.469 938.276 Q291.664 941.817 291.664 948.947 Q291.664 956.053 293.469 959.618 Q295.298 963.16 298.909 963.16 Q302.543 963.16 304.349 959.618 Q306.177 956.053 306.177 948.947 Q306.177 941.817 304.349 938.276 Q302.543 934.711 298.909 934.711 M298.909 931.007 Q304.719 931.007 307.775 935.614 Q310.853 940.197 310.853 948.947 Q310.853 957.674 307.775 962.28 Q304.719 966.863 298.909 966.863 Q293.099 966.863 290.02 962.28 Q286.964 957.674 286.964 948.947 Q286.964 940.197 290.02 935.614 Q293.099 931.007 298.909 931.007 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M262.775 777.969 L279.094 777.969 L279.094 781.904 L257.15 781.904 L257.15 777.969 Q259.812 775.215 264.395 770.585 Q269.002 765.932 270.182 764.59 Q272.428 762.066 273.307 760.33 Q274.21 758.571 274.21 756.881 Q274.21 754.127 272.266 752.391 Q270.344 750.655 267.242 750.655 Q265.043 750.655 262.59 751.418 Q260.159 752.182 257.381 753.733 L257.381 749.011 Q260.205 747.877 262.659 747.298 Q265.113 746.719 267.15 746.719 Q272.52 746.719 275.715 749.405 Q278.909 752.09 278.909 756.58 Q278.909 758.71 278.099 760.631 Q277.312 762.529 275.205 765.122 Q274.627 765.793 271.525 769.011 Q268.423 772.205 262.775 777.969 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 750.423 Q295.298 750.423 293.469 753.988 Q291.664 757.529 291.664 764.659 Q291.664 771.766 293.469 775.33 Q295.298 778.872 298.909 778.872 Q302.543 778.872 304.349 775.33 Q306.177 771.766 306.177 764.659 Q306.177 757.529 304.349 753.988 Q302.543 750.423 298.909 750.423 M298.909 746.719 Q304.719 746.719 307.775 751.326 Q310.853 755.909 310.853 764.659 Q310.853 773.386 307.775 777.992 Q304.719 782.576 298.909 782.576 Q293.099 782.576 290.02 777.992 Q286.964 773.386 286.964 764.659 Q286.964 755.909 290.02 751.326 Q293.099 746.719 298.909 746.719 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M272.914 578.982 Q276.27 579.7 278.145 581.969 Q280.043 584.237 280.043 587.57 Q280.043 592.686 276.525 595.487 Q273.006 598.288 266.525 598.288 Q264.349 598.288 262.034 597.848 Q259.742 597.431 257.289 596.575 L257.289 592.061 Q259.233 593.195 261.548 593.774 Q263.863 594.353 266.386 594.353 Q270.784 594.353 273.076 592.617 Q275.39 590.881 275.39 587.57 Q275.39 584.515 273.238 582.802 Q271.108 581.066 267.289 581.066 L263.261 581.066 L263.261 577.223 L267.474 577.223 Q270.923 577.223 272.752 575.858 Q274.58 574.469 274.58 571.876 Q274.58 569.214 272.682 567.802 Q270.807 566.367 267.289 566.367 Q265.367 566.367 263.168 566.783 Q260.969 567.2 258.33 568.08 L258.33 563.913 Q260.992 563.172 263.307 562.802 Q265.645 562.432 267.705 562.432 Q273.029 562.432 276.131 564.862 Q279.233 567.27 279.233 571.39 Q279.233 574.26 277.59 576.251 Q275.946 578.219 272.914 578.982 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 566.135 Q295.298 566.135 293.469 569.7 Q291.664 573.242 291.664 580.371 Q291.664 587.478 293.469 591.043 Q295.298 594.584 298.909 594.584 Q302.543 594.584 304.349 591.043 Q306.177 587.478 306.177 580.371 Q306.177 573.242 304.349 569.7 Q302.543 566.135 298.909 566.135 M298.909 562.432 Q304.719 562.432 307.775 567.038 Q310.853 571.621 310.853 580.371 Q310.853 589.098 307.775 593.705 Q304.719 598.288 298.909 598.288 Q293.099 598.288 290.02 593.705 Q286.964 589.098 286.964 580.371 Q286.964 571.621 290.02 567.038 Q293.099 562.432 298.909 562.432 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M271.594 382.843 L259.789 401.292 L271.594 401.292 L271.594 382.843 M270.367 378.769 L276.247 378.769 L276.247 401.292 L281.177 401.292 L281.177 405.181 L276.247 405.181 L276.247 413.329 L271.594 413.329 L271.594 405.181 L255.992 405.181 L255.992 400.667 L270.367 378.769 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 381.848 Q295.298 381.848 293.469 385.412 Q291.664 388.954 291.664 396.084 Q291.664 403.19 293.469 406.755 Q295.298 410.297 298.909 410.297 Q302.543 410.297 304.349 406.755 Q306.177 403.19 306.177 396.084 Q306.177 388.954 304.349 385.412 Q302.543 381.848 298.909 381.848 M298.909 378.144 Q304.719 378.144 307.775 382.75 Q310.853 387.334 310.853 396.084 Q310.853 404.81 307.775 409.417 Q304.719 414 298.909 414 Q293.099 414 290.02 409.417 Q286.964 404.81 286.964 396.084 Q286.964 387.334 290.02 382.75 Q293.099 378.144 298.909 378.144 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M258.793 194.481 L277.15 194.481 L277.15 198.416 L263.076 198.416 L263.076 206.889 Q264.094 206.541 265.113 206.379 Q266.131 206.194 267.15 206.194 Q272.937 206.194 276.316 209.365 Q279.696 212.537 279.696 217.953 Q279.696 223.532 276.224 226.634 Q272.752 229.713 266.432 229.713 Q264.256 229.713 261.988 229.342 Q259.742 228.972 257.335 228.231 L257.335 223.532 Q259.418 224.666 261.641 225.222 Q263.863 225.777 266.34 225.777 Q270.344 225.777 272.682 223.671 Q275.02 221.564 275.02 217.953 Q275.02 214.342 272.682 212.236 Q270.344 210.129 266.34 210.129 Q264.465 210.129 262.59 210.546 Q260.738 210.963 258.793 211.842 L258.793 194.481 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 197.56 Q295.298 197.56 293.469 201.125 Q291.664 204.666 291.664 211.796 Q291.664 218.902 293.469 222.467 Q295.298 226.009 298.909 226.009 Q302.543 226.009 304.349 222.467 Q306.177 218.902 306.177 211.796 Q306.177 204.666 304.349 201.125 Q302.543 197.56 298.909 197.56 M298.909 193.856 Q304.719 193.856 307.775 198.463 Q310.853 203.046 310.853 211.796 Q310.853 220.523 307.775 225.129 Q304.719 229.713 298.909 229.713 Q293.099 229.713 290.02 225.129 Q286.964 220.523 286.964 211.796 Q286.964 203.046 290.02 198.463 Q293.099 193.856 298.909 193.856 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip942)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,997.412 400.199,872.663 400.786,758.202 401.372,653.337 401.958,691.84 402.545,599.558 403.131,513.585 403.718,546.385 404.304,467.734 404.891,397.798 405.477,429.278 406.063,369.018 406.65,314.33 407.236,342.578 407.823,366.762 408.409,319.632 408.995,277.43 409.582,242.328 410.168,265.53 410.755,286.825 411.341,302.677 411.927,272.142 412.514,246.571 413.1,224.25 413.687,241.204 414.273,221.634 414.86,239.506 415.446,224.191 416.032,242.04 416.619,229.444 417.205,219.895 417.792,238.963 418.378,255.549 418.964,249.655 419.551,246.873 420.137,263.264 420.724,281.466 421.31,297.48 421.896,331.121 422.483,331.53 423.069,332.857 423.656,335.736 424.242,367.165 424.829,371.246 425.415,376.249 426.001,382.74 426.588,400.941 427.174,408.305 427.761,426.528 428.347,433.882 428.933,451.546 429.52,468.164 430.106,502.691 430.693,527.549 431.279,566.84 431.865,574.564 432.452,582.767 433.038,591.363 433.625,599.266 434.211,608.72 434.798,629.223 435.384,643.529 435.97,652.479 436.557,677.842 437.143,686.194 437.73,704.334 438.316,717.443 438.902,725.182 439.489,737.859 440.075,754.521 440.662,766.028 441.248,794.573 441.835,809.975 442.421,819.953 443.007,834.233 443.594,844.491 444.18,865.476 444.767,870.785 445.353,880.076 445.939,892.575 446.526,901.283 447.112,909.621 447.699,917.79 448.285,922.868 448.871,928.028 449.458,936.041 450.044,940.906 450.631,949.432 451.217,958.156 451.804,965.886 452.39,979.03 452.976,989.014 453.563,1004.13 454.149,1008.43 454.736,1014.97 455.322,1018.82 455.908,1030.12 456.495,1033.84 457.081,1037.8 457.668,1041.41 458.254,1052.63 458.84,1058.27 459.427,1066.61 460.013,1071.91 460.6,1081.66 461.186,1086.57 461.773,1093.62 462.359,1100.75 462.945,1107.45 463.532,1113.46 464.118,1113.28 464.705,1115.52 465.291,1119.88 465.877,1124.24 466.464,1128 467.05,1129.97 467.637,1133.9 468.223,1135.92 468.809,1141.57 469.396,1147.31 469.982,1150.84 470.569,1155.74 471.155,1162.27 471.742,1163.75 472.328,1167.03 472.914,1166.41 473.501,1171.25 474.087,1174.11 474.674,1175.34 475.26,1174.62 475.846,1173.93 476.433,1180.9 477.019,1183.88 477.606,1185.07 478.192,1187.86 478.778,1192.49 479.365,1193.2 479.951,1195.39 480.538,1197.91 481.124,1203.45 481.711,1207.49 482.297,1210.8 482.883,1210.62 483.47,1210.99 484.056,1212.98 484.643,1211.16 485.229,1216.26 485.815,1222.81 486.402,1220.92 486.988,1224.17 487.575,1225.68 488.161,1223.51 488.748,1223.3 489.334,1224.76 489.92,1232.62 490.507,1228.65 491.093,1228.2 491.68,1228.06 492.266,1230.78 492.852,1233.6 493.439,1231.33 494.025,1234.07 494.612,1233.63 495.198,1237.62 495.784,1238.32 496.371,1237.72 496.957,1236.97 497.544,1236.63 498.13,1236.3 498.717,1239.01 499.303,1236.99 499.889,1239.97 500.476,1240.89 501.062,1240.03 501.649,1242.47 502.235,1241.93 502.821,1244.14 503.408,1244.72 503.994,1243.64 504.581,1244.31 505.167,1245.05 505.753,1247.4 506.34,1244.73 506.926,1246.88 507.513,1244.31 508.099,1243.07 508.686,1243.8 509.272,1244.32 509.858,1240.42 510.445,1245.74 511.031,1246.47 511.618,1245.7 512.204,1245.17 512.79,1242.56 513.377,1238.51 513.963,1240.84 514.55,1243.24 515.136,1245.62 515.722,1247.62 516.309,1244.97 516.895,1247.28 517.482,1243.33 518.068,1247.61 518.655,1248.19 519.241,1246.9 519.827,1250.42 520.414,1250.53 521,1249.54 521.587,1245.24 522.173,1244.13 522.759,1243.24 523.346,1242.68 523.932,1243.35 524.519,1245.53 525.105,1245.82 525.691,1244.96 526.278,1242.22 526.864,1240.05 527.451,1239.53 528.037,1243.41 528.624,1245.16 529.21,1244.2 529.796,1244.99 530.383,1240.71 530.969,1241.82 531.556,1239.43 532.142,1243.18 532.728,1240.41 533.315,1242.52 533.901,1241.83 534.488,1242.63 535.074,1243.29 535.661,1240.78 536.247,1241.51 536.833,1241.21 537.42,1239.23 538.006,1238.76 538.593,1239.59 539.179,1240.1 539.765,1240.62 540.352,1238.32 540.938,1239.36 541.525,1238.68 542.111,1236.85 542.697,1234.64 543.284,1234.2 543.87,1236.97 544.457,1244.02 545.043,1246.28 545.63,1243.9 546.216,1242.73 546.802,1241.77 547.389,1242.57 547.975,1240.08 548.562,1239.39 549.148,1241.96 549.734,1238.22 550.321,1237.68 550.907,1238.66 551.494,1237.84 552.08,1237.51 552.666,1238.62 553.253,1239.07 553.839,1239.71 554.426,1235.82 555.012,1235.09 555.599,1235.97 556.185,1235.3 556.771,1236.38 557.358,1233.83 557.944,1231.76 558.531,1234.41 559.117,1234.05 559.703,1235.05 560.29,1232.61 560.876,1232.11 561.463,1233.31 562.049,1235.9 562.635,1238.27 563.222,1237.55 563.808,1237.02 564.395,1233.33 564.981,1231.4 565.568,1232.8 566.154,1233.76 566.74,1232 567.327,1231.27 567.913,1230.5 568.5,1230.51 569.086,1227.08 569.672,1226.64 570.259,1226.8 570.845,1222.17 571.432,1222.19 572.018,1222.17 572.605,1220.85 573.191,1219.26 573.777,1219.64 574.364,1219.89 574.95,1221.67 575.537,1220.51 576.123,1222.28 576.709,1222.2 577.296,1223.82 577.882,1220.58 578.469,1223.66 579.055,1225.37 579.641,1226.71 580.228,1226.42 580.814,1225.85 581.401,1228.87 581.987,1228.32 582.574,1228.19 583.16,1227.88 583.746,1224.63 584.333,1224.83 584.919,1227.69 585.506,1229.09 586.092,1228.59 586.678,1228.18 587.265,1224.62 587.851,1222.89 588.438,1224.5 589.024,1227.26 589.61,1226.89 590.197,1226.49 590.783,1226.24 591.37,1224.63 591.956,1224.46 592.543,1225.75 593.129,1225.57 593.715,1225.78 594.302,1228.61 594.888,1227.93 595.475,1226.06 596.061,1225.78 596.647,1228.33 597.234,1230.78 597.82,1233.45 598.407,1232.84 598.993,1231.11 599.579,1230.44 600.166,1231.29 600.752,1230.72 601.339,1228.35 601.925,1229.51 602.512,1230.53 603.098,1231.56 603.684,1232.33 604.271,1231.95 604.857,1229.45 605.444,1230.62 606.03,1228.6 606.616,1231.29 607.203,1226.41 607.789,1220.44 608.376,1221.68 608.962,1218.62 609.548,1220.1 610.135,1224.32 610.721,1224.19 611.308,1227.95 611.894,1227.11 612.481,1226.75 613.067,1224.79 613.653,1226.15 614.24,1227.75 614.826,1225.47 615.413,1222.15 615.999,1220.52 616.585,1215.76 617.172,1215.97 617.758,1217.77 618.345,1218.05 618.931,1219.91 619.518,1220.09 620.104,1220.08 620.69,1223.12 621.277,1221.08 621.863,1220.85 622.45,1218 623.036,1217.82 623.622,1217.91 624.209,1216.37 624.795,1216.42 625.382,1219.65 625.968,1222.39 626.554,1222.24 627.141,1221.89 627.727,1224.89 628.314,1223.07 628.9,1221.36 629.487,1222.45 630.073,1220.22 630.659,1220.34 631.246,1220.39 631.832,1221.83 632.419,1221.58 633.005,1225.61 633.591,1223.51 634.178,1226.01 634.764,1225.57 635.351,1227.12 635.937,1228.17 636.523,1230.26 637.11,1232.17 637.696,1231.84 638.283,1229.46 638.869,1230.36 639.456,1228.14 640.042,1227.59 640.628,1226.72 641.215,1223.11 641.801,1220.16 642.388,1218.29 642.974,1219.72 643.56,1218.04 644.147,1214.91 644.733,1216.84 645.32,1218.25 645.906,1216.91 646.492,1219.63 647.079,1219.56 647.665,1220.79 648.252,1217.76 648.838,1220.82 649.425,1223.58 650.011,1225.04 650.597,1227.59 651.184,1226.68 651.77,1223.21 652.357,1224.5 652.943,1226.94 653.529,1229.64 654.116,1229 654.702,1230.93 655.289,1228.84 655.875,1232.61 656.462,1231.34 657.048,1227.58 657.634,1226.64 658.221,1221.62 658.807,1222.62 659.394,1221.99 659.98,1218.4 660.566,1220.06 661.153,1221.14 661.739,1219.15 662.326,1217.45 662.912,1217.39 663.498,1218.6 664.085,1220.14 664.671,1221.55 665.258,1219.62 665.844,1218.07 666.431,1217.75 667.017,1217.93 667.603,1216.43 668.19,1213.45 668.776,1214.81 669.363,1213.34 669.949,1215 670.535,1218.42 671.122,1220 671.708,1213.79 672.295,1215.3 672.881,1214.99 673.467,1213.55 674.054,1215.44 674.64,1216.89 675.227,1218.47 675.813,1216.67 676.4,1216.75 676.986,1215.48 677.572,1214.21 678.159,1214.12 678.745,1216.72 679.332,1213.29 679.918,1213.23 680.504,1214.83 681.091,1215.12 681.677,1216.47 682.264,1216.36 682.85,1216.38 683.436,1215.83 684.023,1215.6 684.609,1213.92 685.196,1214.12 685.782,1213.86 686.369,1212.1 686.955,1210.91 687.541,1214.02 688.128,1215.95 688.714,1214.2 689.301,1215.68 689.887,1215.63 690.473,1217.07 691.06,1218.48 691.646,1218.29 692.233,1218.18 692.819,1213.15 693.405,1214.39 693.992,1215.91 694.578,1214.32 695.165,1215.62 695.751,1212.77 696.338,1212.63 696.924,1215.6 697.51,1216.69 698.097,1216.35 698.683,1216.13 699.27,1217.43 699.856,1215.86 700.442,1214.4 701.029,1217.45 701.615,1217.04 702.202,1216.81 702.788,1218.03 703.375,1214.58 703.961,1214.57 704.547,1211.37 705.134,1209.76 705.72,1206.75 706.307,1205.89 706.893,1204.37 707.479,1204.8 708.066,1203.51 708.652,1206.72 709.239,1205.8 709.825,1206.16 710.411,1201.97 710.998,1201.24 711.584,1201.73 712.171,1205.33 712.757,1204.18 713.344,1204.25 713.93,1203.14 714.516,1205.21 715.103,1207.24 715.689,1207.37 716.276,1209.1 716.862,1209.19 717.448,1213.89 718.035,1213.89 718.621,1215.63 719.208,1215.7 719.794,1216.84 720.38,1219.67 720.967,1219.58 721.553,1222.04 722.14,1221.78 722.726,1219.71 723.313,1220.85 723.899,1218.99 724.485,1218.65 725.072,1215.51 725.658,1213.66 726.245,1215.29 726.831,1215.22 727.417,1218.21 728.004,1216.48 728.59,1216.44 729.177,1219.12 729.763,1217.24 730.349,1215.53 730.936,1216.89 731.522,1215.23 732.109,1213.27 732.695,1213.12 733.282,1214.4 733.868,1212.74 734.454,1212.9 735.041,1214.2 735.627,1209.54 736.214,1209.54 736.8,1208.31 737.386,1208.42 737.973,1209.94 738.559,1210.03 739.146,1210.04 739.732,1211.54 740.318,1211.59 740.905,1213.26 741.491,1213.27 742.078,1214.71 742.664,1217.34 743.251,1219.71 743.837,1221.05 744.423,1220.65 745.01,1220.38 745.596,1220.07 746.183,1216.7 746.769,1216.68 747.355,1214.9 747.942,1213.46 748.528,1210.4 749.115,1211.86 749.701,1208.9 750.288,1210.64 750.874,1206.32 751.46,1208.08 752.047,1211.51 752.633,1210.05 753.22,1208.55 753.806,1205.62 754.392,1207.48 754.979,1207.99 755.565,1209.65 756.152,1214.18 756.738,1214.18 757.324,1215.24 757.911,1214.95 758.497,1214.53 759.084,1212.69 759.67,1214.38 760.257,1214.16 760.843,1215.35 761.429,1215.12 762.016,1213.57 762.602,1213.19 763.189,1213.35 763.775,1214.66 764.361,1213.09 764.948,1212.92 765.534,1211.46 766.121,1211.39 766.707,1211.22 767.293,1214.17 767.88,1211.32 768.466,1214.41 769.053,1214.54 769.639,1215.91 770.226,1215.79 770.812,1215.87 771.398,1212.43 771.985,1213.91 772.571,1216.91 773.158,1219.48 773.744,1219.03 774.33,1218.28 774.917,1219.51 775.503,1217.22 776.09,1215.44 776.676,1215.47 777.262,1215 777.849,1214.72 778.435,1214.76 779.022,1215.96 779.608,1213.99 780.195,1215.39 780.781,1216.68 781.367,1216.64 781.954,1216.46 782.54,1214.44 783.127,1212.76 783.713,1211.1 784.299,1215.63 784.886,1218.12 785.472,1217.68 786.059,1217.41 786.645,1215.53 787.232,1216.71 787.818,1216.41 788.404,1212.87 788.991,1212.73 789.577,1212.72 790.164,1215.46 790.75,1216.72 791.336,1216.56 791.923,1219.2 792.509,1218.75 793.096,1211.16 793.682,1212.66 794.268,1217.17 794.855,1216.81 795.441,1216.48 796.028,1214.7 796.614,1217.28 797.201,1215.72 797.787,1214.04 798.373,1213.91 798.96,1212.08 799.546,1212.14 800.133,1212.19 800.719,1213.55 801.305,1211.9 801.892,1211.6 802.478,1211.5 803.065,1211.3 803.651,1209.51 804.237,1209.54 804.824,1208.1 805.41,1208.1 805.997,1206.71 806.583,1202.3 807.17,1207.08 807.756,1211.66 808.342,1211.56 808.929,1211.32 809.515,1212.5 810.102,1210.69 810.688,1209.21 811.274,1212.19 811.861,1214.9 812.447,1210.4 813.034,1210.61 813.62,1208.85 814.206,1210.41 814.793,1210.45 815.379,1212.18 815.966,1210.61 816.552,1210.56 817.139,1210.64 817.725,1209.09 818.311,1207.6 818.898,1210.75 819.484,1207.82 820.071,1207.99 820.657,1208.29 821.243,1213.21 821.83,1214.65 822.416,1214.45 823.003,1211.28 823.589,1212.51 824.175,1215.06 824.762,1213.51 825.348,1211.86 825.935,1210.3 826.521,1210.46 827.108,1207.73 827.694,1207.95 828.28,1206.53 828.867,1206.88 829.453,1207.24 830.04,1207.73 830.626,1209.18 831.212,1207.7 831.799,1204.85 832.385,1205.29 832.972,1208.73 833.558,1207.3 834.145,1207.65 834.731,1213.99 835.317,1213.79 835.904,1211.88 836.49,1208.68 837.077,1213.05 837.663,1211.52 838.249,1211.37 838.836,1211.54 839.422,1209.91 840.009,1208.71 840.595,1206.9 841.181,1207.42 841.768,1206.01 842.354,1203.05 842.941,1204.97 843.527,1202.2 844.114,1202.39 844.7,1199.88 845.286,1198.78 845.873,1194.62 846.459,1198.52 847.046,1201.88 847.632,1201.14 848.218,1201.63 848.805,1202.2 849.391,1199.53 849.978,1203.38 850.564,1203.81 851.15,1206.97 851.737,1204.33 852.323,1207.64 852.91,1207.91 853.496,1206.72 854.083,1208.35 854.669,1208.61 855.255,1208.4 855.842,1208.83 856.428,1208.86 857.015,1208.66 857.601,1210.2 858.187,1211.57 858.774,1209.98 859.36,1210.25 859.947,1207.15 860.533,1210.21 861.119,1210.02 861.706,1210.09 862.292,1214.49 862.879,1212.71 863.465,1212.76 864.052,1215.5 864.638,1216.47 865.224,1214.7 865.811,1214.35 866.397,1214.34 866.984,1213.97 867.57,1213.73 868.156,1216.5 868.743,1219.02 869.329,1218.37 869.916,1217.82 870.502,1217.09 871.089,1213.55 871.675,1213.64 872.261,1214.58 872.848,1216.03 873.434,1215.61 874.021,1213.31 874.607,1211.48 875.193,1211.51 875.78,1208.44 876.366,1209.86 876.953,1211.4 877.539,1214.32 878.125,1209.16 878.712,1209.53 879.298,1211.12 879.885,1211.2 880.471,1209.58 881.058,1209.79 881.644,1211.16 882.23,1211.16 882.817,1211.08 883.403,1212.25 883.99,1212.02 884.576,1213.87 885.162,1212.17 885.749,1212.16 886.335,1207.32 886.922,1209.08 887.508,1207.71 888.094,1210.58 888.681,1209.14 889.267,1210.44 889.854,1207.15 890.44,1205.62 891.027,1205.5 891.613,1207.17 892.199,1208.38 892.786,1210.04 893.372,1211.23 893.959,1209.67 894.545,1206.77 895.131,1207.12 895.718,1210.13 896.304,1208.45 896.891,1207.02 897.477,1205.58 898.063,1207.25 898.65,1207.29 899.236,1209.18 899.823,1209.06 900.409,1209.03 900.996,1209.22 901.582,1210.92 902.168,1209.03 902.755,1210.33 903.341,1211.83 903.928,1210.01 904.514,1212.9 905.1,1209.79 905.687,1206.63 906.273,1205.17 906.86,1203.77 907.446,1202.49 908.032,1202.69 908.619,1201.67 909.205,1200.45 909.792,1200.91 910.378,1201.26 910.965,1200.23 911.551,1199.12 912.137,1198.1 912.724,1200.39 913.31,1202.33 913.897,1202.5 914.483,1207.37 915.069,1209 915.656,1207.56 916.242,1204.95 916.829,1205.32 917.415,1204.12 918.002,1207.47 918.588,1208.9 919.174,1211.94 919.761,1213.06 920.347,1211.23 920.934,1212.4 921.52,1213.82 922.106,1214.76 922.693,1214.43 923.279,1214.12 923.866,1213.95 924.452,1216.48 925.038,1212.95 925.625,1212.58 926.211,1214.03 926.798,1212.32 927.384,1213.41 927.971,1211.5 928.557,1211.23 929.143,1210.04 929.73,1211.45 930.316,1211.32 930.903,1211.09 931.489,1212.34 932.075,1210.46 932.662,1208.93 933.248,1206.01 933.835,1206.05 934.421,1206.41 935.007,1207.68 935.594,1207.82 936.18,1204.92 936.767,1207.94 937.353,1203.52 937.94,1204.01 938.526,1207.27 939.112,1208.87 939.699,1209.04 940.285,1207.52 940.872,1205.94 941.458,1210.56 942.044,1209 942.631,1210.19 943.217,1210.22 943.804,1206.95 944.39,1205.26 944.976,1205.35 945.563,1205.59 946.149,1207.22 946.736,1204.14 947.322,1203.06 947.909,1204.89 948.495,1208.22 949.081,1209.63 949.668,1209.8 950.254,1211.03 950.841,1209.52 951.427,1209.37 952.013,1206.24 952.6,1204.84 953.186,1205.1 953.773,1208.23 954.359,1207.11 954.945,1207.38 955.532,1208.53 956.118,1207.18 956.705,1207.22 957.291,1206.05 957.878,1206.18 958.464,1204.5 959.05,1200.18 959.637,1202.26 960.223,1202.54 960.81,1207.59 961.396,1204.48 961.982,1207.6 962.569,1209.17 963.155,1208.83 963.742,1210.24 964.328,1207.1 964.915,1207.34 965.501,1202.63 966.087,1202.78 966.674,1202.91 967.26,1204.64 967.847,1204.73 968.433,1204.83 969.019,1204.77 969.606,1207.91 970.192,1207.92 970.779,1206.57 971.365,1209.78 971.951,1210.83 972.538,1212.06 973.124,1213.36 973.711,1211.44 974.297,1210.93 974.884,1209.18 975.47,1212.29 976.056,1213.71 976.643,1213.57 977.229,1213.36 977.816,1211.64 978.402,1212.82 978.988,1212.53 979.575,1212.09 980.161,1215.08 980.748,1214.56 981.334,1217.27 981.92,1218.04 982.507,1217.51 983.093,1217.16 983.68,1218.16 984.266,1216.19 984.853,1214.62 985.439,1213.02 986.025,1214.1 986.612,1212.48 987.198,1212.02 987.785,1213.36 988.371,1213.58 988.957,1213.27 989.544,1213.13 990.13,1212.7 990.717,1209.31 991.303,1209.3 991.889,1207.61 992.476,1209 993.062,1209.1 993.649,1207.36 994.235,1205.67 994.822,1204.32 995.408,1204.49 995.994,1201.92 996.581,1205.26 997.167,1206.74 997.754,1203.95 998.34,1200.97 998.926,1200 999.513,1201.66 1000.1,1200.45 1000.69,1199.39 1001.27,1199.71 1001.86,1200.09 1002.44,1202.01 1003.03,1200.9 1003.62,1199.69 1004.2,1201.28 1004.79,1206.32 1005.38,1206.55 1005.96,1208.04 1006.55,1206.68 1007.14,1205.25 1007.72,1202.58 1008.31,1207.41 1008.9,1207.67 1009.48,1208.02 1010.07,1206.31 1010.65,1206.28 1011.24,1213.79 1011.83,1209.41 1012.41,1206.68 1013,1203.56 1013.59,1206.62 1014.17,1208.35 1014.76,1208.54 1015.35,1210.03 1015.93,1210.31 1016.52,1214.52 1017.11,1212.64 1017.69,1210.75 1018.28,1209.15 1018.86,1206.05 1019.45,1209.31 1020.04,1207.7 1020.62,1204.37 1021.21,1206.26 1021.8,1209.28 1022.38,1210.86 1022.97,1212.27 1023.56,1210.34 1024.14,1210.64 1024.73,1209 1025.32,1209.03 1025.9,1205.7 1026.49,1203.18 1027.07,1200.63 1027.66,1199.7 1028.25,1198.36 1028.83,1200.41 1029.42,1201.05 1030.01,1201.29 1030.59,1201.74 1031.18,1200.94 1031.77,1204.42 1032.35,1205 1032.94,1203.64 1033.52,1202.37 1034.11,1201.08 1034.7,1205.67 1035.28,1205.55 1035.87,1204.53 1036.46,1201.86 1037.04,1200.35 1037.63,1200.99 1038.22,1200.14 1038.8,1200.67 1039.39,1199.81 1039.98,1200.33 1040.56,1200.45 1041.15,1202.27 1041.73,1202.53 1042.32,1204.43 1042.91,1204.68 1043.49,1206.57 1044.08,1209.48 1044.67,1209.31 1045.25,1210.46 1045.84,1210.26 1046.43,1210.57 1047.01,1213.46 1047.6,1211.58 1048.19,1210.97 1048.77,1210.7 1049.36,1209.03 1049.94,1211.99 1050.53,1213.16 1051.12,1213.06 1051.7,1212.6 1052.29,1213.8 1052.88,1213.33 1053.46,1214.59 1054.05,1217.35 1054.64,1218.19 1055.22,1219.34 1055.81,1217.18 1056.39,1215.16 1056.98,1216.01 1057.57,1214.33 1058.15,1215.35 1058.74,1212.33 1059.33,1213.58 1059.91,1211.84 1060.5,1209.86 1061.09,1209.55 1061.67,1212.35 1062.26,1213.31 1062.85,1211.56 1063.43,1211.43 1064.02,1212.52 1064.6,1215.3 1065.19,1216.03 1065.78,1216.86 1066.36,1216.42 1066.95,1214.26 1067.54,1210.87 1068.12,1210.73 1068.71,1210.3 1069.3,1210.27 1069.88,1210.02 1070.47,1208.47 1071.06,1209.8 1071.64,1208.19 1072.23,1208 1072.81,1206.39 1073.4,1207.84 1073.99,1206.36 1074.57,1206.33 1075.16,1207.96 1075.75,1208.11 1076.33,1208.12 1076.92,1209.28 1077.51,1210.74 1078.09,1210.68 1078.68,1212.04 1079.26,1210.44 1079.85,1210.35 1080.44,1211.93 1081.02,1210.49 1081.61,1212.32 1082.2,1213.85 1082.78,1212.12 1083.37,1210.4 1083.96,1210.18 1084.54,1208.57 1085.13,1211.89 1085.72,1214.66 1086.3,1212.7 1086.89,1209.21 1087.47,1205.97 1088.06,1202.9 1088.65,1206.35 1089.23,1207.8 1089.82,1207.63 1090.41,1209.02 1090.99,1210.3 1091.58,1210.01 1092.17,1209.7 1092.75,1209.56 1093.34,1209.54 1093.93,1209.35 1094.51,1209.29 1095.1,1210.67 1095.68,1210.28 1096.27,1210.13 1096.86,1211.66 1097.44,1213.13 1098.03,1212.94 1098.62,1212.53 1099.2,1210.91 1099.79,1213.67 1100.38,1214.85 1100.96,1220.42 1101.55,1219.38 1102.14,1218.81 1102.72,1219.21 1103.31,1217.29 1103.89,1214.33 1104.48,1210.9 1105.07,1210.68 1105.65,1209.14 1106.24,1209.14 1106.83,1210.17 1107.41,1211.67 1108,1213.02 1108.59,1212.75 1109.17,1213.81 1109.76,1211.76 1110.34,1213.15 1110.93,1209.66 1111.52,1210.9 1112.1,1210.5 1112.69,1211.88 1113.28,1209.89 1113.86,1209.68 1114.45,1209.43 1115.04,1208.07 1115.62,1206.41 1116.21,1206.57 1116.8,1205.12 1117.38,1203.73 1117.97,1202.51 1118.55,1205.78 1119.14,1205.94 1119.73,1206.09 1120.31,1205.97 1120.9,1204.55 1121.49,1200.4 1122.07,1200.84 1122.66,1201.35 1123.25,1199.99 1123.83,1197.43 1124.42,1196.52 1125.01,1200.22 1125.59,1200.57 1126.18,1201.19 1126.76,1198.5 1127.35,1193.41 1127.94,1194.33 1128.52,1193.29 1129.11,1195.11 1129.7,1195.53 1130.28,1197.5 1130.87,1198.05 1131.46,1198.48 1132.04,1199.05 1132.63,1197.96 1133.21,1198.5 1133.8,1200.65 1134.39,1200.77 1134.97,1201.35 1135.56,1199.11 1136.15,1199.67 1136.73,1200.15 1137.32,1202.17 1137.91,1207.01 1138.49,1207.05 1139.08,1202.68 1139.67,1201.59 1140.25,1201.86 1140.84,1200.18 1141.42,1200.42 1142.01,1199.04 1142.6,1200.79 1143.18,1201.33 1143.77,1205.12 1144.36,1207.04 1144.94,1208.78 1145.53,1206.71 1146.12,1205.21 1146.7,1206.63 1147.29,1206.72 1147.88,1209.91 1148.46,1209.74 1149.05,1209.76 1149.63,1211.01 1150.22,1212.38 1150.81,1210.82 1151.39,1209.41 1151.98,1209.38 1152.57,1209.25 1153.15,1209.06 1153.74,1205.82 1154.33,1209.2 1154.91,1209.23 1155.5,1206.5 1156.09,1209.63 1156.67,1209.68 1157.26,1209.66 1157.84,1209.47 1158.43,1211.04 1159.02,1212.43 1159.6,1212.26 1160.19,1211.75 1160.78,1210.37 1161.36,1210.47 1161.95,1208.89 1162.54,1208.92 1163.12,1210.31 1163.71,1210.09 1164.29,1208.58 1164.88,1211.3 1165.47,1208.51 1166.05,1209.88 1166.64,1209.81 1167.23,1208.04 1167.81,1206.45 1168.4,1206.64 1168.99,1205.25 1169.57,1205.22 1170.16,1205.29 1170.75,1205.54 1171.33,1204.12 1171.92,1204 1172.5,1204.1 1173.09,1205.69 1173.68,1205.78 1174.26,1205.93 1174.85,1207.39 1175.44,1204.15 1176.02,1204.6 1176.61,1203.29 1177.2,1203.78 1177.78,1204.14 1178.37,1203.11 1178.96,1204.85 1179.54,1206.46 1180.13,1208.02 1180.71,1209.77 1181.3,1210.87 1181.89,1210.57 1182.47,1210.28 1183.06,1210.07 1183.65,1207.17 1184.23,1207.2 1184.82,1206.65 1185.41,1208.05 1185.99,1206.59 1186.58,1209.58 1187.16,1210.94 1187.75,1210.66 1188.34,1214.82 1188.92,1212.84 1189.51,1213.74 1190.1,1213.49 1190.68,1213.1 1191.27,1213.08 1191.86,1215.81 1192.44,1214.02 1193.03,1212.42 1193.62,1210.75 1194.2,1210.5 1194.79,1210.16 1195.37,1211.36 1195.96,1209.81 1196.55,1210.87 1197.13,1214.95 1197.72,1216.02 1198.31,1214.19 1198.89,1213.54 1199.48,1213.25 1200.07,1213.09 1200.65,1214.26 1201.24,1212.22 1201.83,1212.22 1202.41,1211.87 1203,1211.91 1203.58,1216.29 1204.17,1214.34 1204.76,1213.86 1205.34,1213.37 1205.93,1214.7 1206.52,1214.45 1207.1,1209.72 1207.69,1209.6 1208.28,1207.97 1208.86,1206.21 1209.45,1212.07 1210.03,1213.26 1210.62,1212.85 1211.21,1210.88 1211.79,1210.81 1212.38,1213.42 1212.97,1211.43 1213.55,1214.22 1214.14,1216.67 1214.73,1214.7 1215.31,1210.01 1215.9,1209.65 1216.49,1210.91 1217.07,1207.53 1217.66,1210.26 1218.24,1214.37 1218.83,1217.07 1219.42,1216.83 1220,1218.09 1220.59,1216.07 1221.18,1214.01 1221.76,1217.84 1222.35,1211.37 1222.94,1210 1223.52,1208.4 1224.11,1206.85 1224.7,1205.13 1225.28,1205.41 1225.87,1204.45 1226.45,1206.24 1227.04,1203.16 1227.63,1203.17 1228.21,1206.19 1228.8,1204.97 1229.39,1203.64 1229.97,1200.82 1230.56,1202.61 1231.15,1201.45 1231.73,1198.9 1232.32,1194.8 1232.91,1195.63 1233.49,1188.48 1234.08,1190.97 1234.66,1192.09 1235.25,1194.52 1235.84,1198.35 1236.42,1202.03 1237.01,1202.16 1237.6,1201.29 1238.18,1199.98 1238.77,1201.81 1239.36,1203.95 1239.94,1202.41 1240.53,1204.41 1241.11,1204.48 1241.7,1204.73 1242.29,1208.16 1242.87,1210.23 1243.46,1208.32 1244.05,1211.15 1244.63,1210.89 1245.22,1212 1245.81,1210.29 1246.39,1210.14 1246.98,1209.78 1247.57,1211.01 1248.15,1212.4 1248.74,1207.84 1249.32,1209.45 1249.91,1209.67 1250.5,1206.46 1251.08,1204.94 1251.67,1206.52 1252.26,1205.04 1252.84,1205.27 1253.43,1208.27 1254.02,1205.26 1254.6,1205.51 1255.19,1205.74 1255.78,1205.98 1256.36,1205.69 1256.95,1205.6 1257.53,1204.28 1258.12,1207.56 1258.71,1210.47 1259.29,1213.69 1259.88,1214.83 1260.47,1214.38 1261.05,1214.74 1261.64,1214.53 1262.23,1214.16 1262.81,1212.12 1263.4,1210.15 1263.98,1212.81 1264.57,1211.15 1265.16,1210.76 1265.74,1212.27 1266.33,1215.12 1266.92,1213.15 1267.5,1209.79 1268.09,1210.99 1268.68,1209.3 1269.26,1212.02 1269.85,1210.2 1270.44,1208.44 1271.02,1208.48 1271.61,1207.35 1272.19,1209.11 1272.78,1207.45 1273.37,1209.02 1273.95,1211.58 1274.54,1209.94 1275.13,1209.47 1275.71,1206.3 1276.3,1200.46 1276.89,1200.74 1277.47,1204.29 1278.06,1207.17 1278.65,1203.81 1279.23,1205.55 1279.82,1207.33 1280.4,1208.68 1280.99,1205.15 1281.58,1205.42 1282.16,1204.04 1282.75,1202.45 1283.34,1202.85 1283.92,1204.71 1284.51,1204.62 1285.1,1201.58 1285.68,1205.03 1286.27,1205.06 1286.86,1205.31 1287.44,1207.09 1288.03,1208.43 1288.61,1210.09 1289.2,1206.62 1289.79,1206.58 1290.37,1203.71 1290.96,1203.68 1291.55,1202.19 1292.13,1202.29 1292.72,1203.8 1293.31,1203.79 1293.89,1207.13 1294.48,1207.21 1295.06,1204.24 1295.65,1204.84 1296.24,1203.62 1296.82,1203.76 1297.41,1202.43 1298,1202.51 1298.58,1202.75 1299.17,1204.34 1299.76,1204.62 1300.34,1203.35 1300.93,1201.96 1301.52,1202.04 1302.1,1205.56 1302.69,1207.13 1303.27,1204.09 1303.86,1204.55 1304.45,1204.64 1305.03,1207.68 1305.62,1207.75 1306.21,1207.87 1306.79,1209.39 1307.38,1208.25 1307.97,1209.75 1308.55,1212.51 1309.14,1209.07 1309.73,1211.74 1310.31,1212.81 1310.9,1211.01 1311.48,1211.33 1312.07,1212.44 1312.66,1212.07 1313.24,1215.97 1313.83,1214.25 1314.42,1214.05 1315,1213.61 1315.59,1213.18 1316.18,1211.44 1316.76,1211.43 1317.35,1211 1317.93,1211.03 1318.52,1207.78 1319.11,1207.72 1319.69,1204.78 1320.28,1206.35 1320.87,1206.2 1321.45,1204.55 1322.04,1204.7 1322.63,1209.43 1323.21,1213.89 1323.8,1214.81 1324.39,1210.99 1324.97,1210.81 1325.56,1207.62 1326.14,1206.04 1326.73,1206.34 1327.32,1205.34 1327.9,1205.53 1328.49,1204.34 1329.08,1204.72 1329.66,1201.91 1330.25,1205.3 1330.84,1210.06 1331.42,1208.12 1332.01,1210.78 1332.6,1210.76 1333.18,1210.5 1333.77,1212.08 1334.35,1211.63 1334.94,1212.66 1335.53,1210.89 1336.11,1206.09 1336.7,1209.01 1337.29,1209.09 1337.87,1209.25 1338.46,1206.12 1339.05,1206.46 1339.63,1205.05 1340.22,1209.46 1340.8,1209.66 1341.39,1212.64 1341.98,1212.43 1342.56,1213.83 1343.15,1217.81 1343.74,1217.53 1344.32,1216.86 1344.91,1218.08 1345.5,1219.22 1346.08,1215.71 1346.67,1210.63 1347.26,1213.66 1347.84,1210.48 1348.43,1210.26 1349.01,1213.18 1349.6,1214.37 1350.19,1210.97 1350.77,1213.79 1351.36,1216.3 1351.95,1218.63 1352.53,1216.71 1353.12,1210.4 1353.71,1210.46 1354.29,1210.41 1354.88,1208.68 1355.47,1206.76 1356.05,1206.68 1356.64,1205.36 1357.22,1204.17 1357.81,1207.39 1358.4,1202.93 1358.98,1204.87 1359.57,1209.26 1360.16,1210.92 1360.74,1214.09 1361.33,1210.58 1361.92,1211.99 1362.5,1208.97 1363.09,1208.38 1363.68,1208.41 1364.26,1208.23 1364.85,1207.83 1365.43,1207.78 1366.02,1210.91 1366.61,1210.53 1367.19,1208.81 1367.78,1210.28 1368.37,1208.6 1368.95,1211.38 1369.54,1211.19 1370.13,1206.78 1370.71,1202.26 1371.3,1202.71 1371.88,1202.62 1372.47,1202.56 1373.06,1204.29 1373.64,1207.62 1374.23,1207.79 1374.82,1206.39 1375.4,1206.24 1375.99,1204.64 1376.58,1201.82 1377.16,1201.9 1377.75,1205.1 1378.34,1200.3 1378.92,1202.42 1379.51,1202.45 1380.09,1201.04 1380.68,1204.05 1381.27,1204.27 1381.85,1204.07 1382.44,1205.9 1383.03,1205.74 1383.61,1201.32 1384.2,1203.08 1384.79,1203.48 1385.37,1206.8 1385.96,1205.61 1386.55,1205.47 1387.13,1207.09 1387.72,1208.65 1388.3,1208.28 1388.89,1205.27 1389.48,1203.57 1390.06,1208.21 1390.65,1208.43 1391.24,1209.72 1391.82,1209.65 1392.41,1206.51 1393,1206.51 1393.58,1204.81 1394.17,1206.71 1394.75,1211.23 1395.34,1214.36 1395.93,1216.98 1396.51,1213.55 1397.1,1211.85 1397.69,1210.11 1398.27,1211.33 1398.86,1209.55 1399.45,1209.28 1400.03,1207.51 1400.62,1209.16 1401.21,1206.16 1401.79,1206.39 1402.38,1208.15 1402.96,1205.34 1403.55,1205.27 1404.14,1203.75 1404.72,1206.9 1405.31,1206.76 1405.9,1205.55 1406.48,1206.98 1407.07,1210.08 1407.66,1208.35 1408.24,1206.69 1408.83,1206.42 1409.42,1205.19 1410,1205.35 1410.59,1205.7 1411.17,1204.44 1411.76,1205.9 1412.35,1206.1 1412.93,1206.61 1413.52,1202.19 1414.11,1202.77 1414.69,1202.99 1415.28,1200.36 1415.87,1197.69 1416.45,1196.66 1417.04,1197.18 1417.63,1194.71 1418.21,1194.16 1418.8,1195.15 1419.38,1197.25 1419.97,1199.25 1420.56,1199.42 1421.14,1205.95 1421.73,1206.45 1422.32,1208.07 1422.9,1208.05 1423.49,1207.99 1424.08,1209.22 1424.66,1206.11 1425.25,1207.81 1425.83,1211.87 1426.42,1212.95 1427.01,1209.68 1427.59,1211.18 1428.18,1209.3 1428.77,1208.02 1429.35,1209.24 1429.94,1210.44 1430.53,1208.81 1431.11,1210.42 1431.7,1208.65 1432.29,1207.33 1432.87,1207.5 1433.46,1207.21 1434.04,1208.85 1434.63,1209.1 1435.22,1212.19 1435.8,1212.14 1436.39,1213.63 1436.98,1213.36 1437.56,1211.8 1438.15,1212.92 1438.74,1213.57 1439.32,1210.4 1439.91,1213.31 1440.5,1211.73 1441.08,1211.46 1441.67,1212.56 1442.25,1215.62 1442.84,1213.82 1443.43,1213.83 1444.01,1210.59 1444.6,1207.42 1445.19,1205.75 1445.77,1205.71 1446.36,1206.01 1446.95,1204.41 1447.53,1201.38 1448.12,1196.93 1448.7,1197.14 1449.29,1196 1449.88,1194.71 1450.46,1195.31 1451.05,1191.34 1451.64,1193.79 1452.22,1195.84 1452.81,1200.85 1453.4,1202.6 1453.98,1200.01 1454.57,1198.96 1455.16,1201.1 1455.74,1201.25 1456.33,1202.92 1456.91,1205.98 1457.5,1209.05 1458.09,1210.7 1458.67,1210.66 1459.26,1211.03 1459.85,1211.97 1460.43,1210.11 1461.02,1209.83 1461.61,1205.41 1462.19,1205.55 1462.78,1205.66 1463.37,1208.67 1463.95,1208.71 1464.54,1208.94 1465.12,1210.7 1465.71,1210.66 1466.3,1208.6 1466.88,1208.41 1467.47,1208.29 1468.06,1208.05 1468.64,1205.12 1469.23,1203.77 1469.82,1204.06 1470.4,1203.95 1470.99,1205.85 1471.57,1204.15 1472.16,1206.03 1472.75,1205.95 1473.33,1207.33 1473.92,1206.09 1474.51,1209.3 1475.09,1212.3 1475.68,1211.98 1476.27,1210.31 1476.85,1207.13 1477.44,1207 1478.03,1206.97 1478.61,1208.59 1479.2,1208.29 1479.78,1208.03 1480.37,1207.6 1480.96,1206.49 1481.54,1208 1482.13,1206.29 1482.72,1204.89 1483.3,1206.31 1483.89,1204.72 1484.48,1207.74 1485.06,1209.25 1485.65,1207.63 1486.24,1210.71 1486.82,1209.16 1487.41,1212.06 1487.99,1213.01 1488.58,1212.48 1489.17,1213.55 1489.75,1213.24 1490.34,1216.08 1490.93,1217.29 1491.51,1218.37 1492.1,1216.28 1492.69,1214.52 1493.27,1214.14 1493.86,1213.89 1494.45,1212.22 1495.03,1216.22 1495.62,1214.08 1496.2,1213.5 1496.79,1214.62 1497.38,1214.24 1497.96,1210.95 1498.55,1209.1 1499.14,1208.7 1499.72,1210 1500.31,1208.19 1500.9,1207.92 1501.48,1208.16 1502.07,1212.88 1502.65,1212.78 1503.24,1209.59 1503.83,1211.05 1504.41,1209.48 1505,1211.22 1505.59,1210.83 1506.17,1204.86 1506.76,1207.8 1507.35,1207.56 1507.93,1209.04 1508.52,1208.71 1509.11,1208.22 1509.69,1206.5 1510.28,1203.68 1510.86,1202.36 1511.45,1204.2 1512.04,1204.32 1512.62,1207.24 1513.21,1211.52 1513.8,1212.43 1514.38,1210.81 1514.97,1207.57 1515.56,1207.31 1516.14,1207.18 1516.73,1206.04 1517.32,1209.02 1517.9,1210 1518.49,1206.75 1519.07,1205.31 1519.66,1205.29 1520.25,1205.48 1520.83,1207.38 1521.42,1210.57 1522.01,1209.18 1522.59,1208.94 1523.18,1207.38 1523.77,1207.26 1524.35,1209.99 1524.94,1211.24 1525.52,1211.29 1526.11,1209.61 1526.7,1206.79 1527.28,1205.7 1527.87,1208.65 1528.46,1211.57 1529.04,1209.57 1529.63,1210.79 1530.22,1210.81 1530.8,1210.6 1531.39,1205.76 1531.98,1205.83 1532.56,1207.56 1533.15,1208.91 1533.73,1207.31 1534.32,1207.51 1534.91,1209.14 1535.49,1210.78 1536.08,1210.82 1536.67,1209.01 1537.25,1205.94 1537.84,1207.57 1538.43,1202.94 1539.01,1203.16 1539.6,1203.53 1540.19,1203.61 1540.77,1201.06 1541.36,1203.15 1541.94,1204.94 1542.53,1203.54 1543.12,1203.85 1543.7,1205.42 1544.29,1211.32 1544.88,1211.15 1545.46,1210.95 1546.05,1210.75 1546.64,1207.61 1547.22,1204.9 1547.81,1203.65 1548.4,1203.86 1548.98,1204.26 1549.57,1203.1 1550.15,1203.33 1550.74,1200.51 1551.33,1199.34 1551.91,1196.73 1552.5,1197.68 1553.09,1196.99 1553.67,1199.29 1554.26,1202.56 1554.85,1205.82 1555.43,1205.91 1556.02,1203.26 1556.6,1203.18 1557.19,1206.35 1557.78,1209.4 1558.36,1207.74 1558.95,1207.82 1559.54,1209.22 1560.12,1207.97 1560.71,1209.51 1561.3,1209.52 1561.88,1209.39 1562.47,1208.92 1563.06,1210.42 1563.64,1210.5 1564.23,1209.1 1564.81,1209.08 1565.4,1207.52 1565.99,1208.93 1566.57,1205.77 1567.16,1210.52 1567.75,1208.78 1568.33,1206.83 1568.92,1205.37 1569.51,1205.46 1570.09,1203.87 1570.68,1203.82 1571.27,1208.76 1571.85,1208.74 1572.44,1209.09 1573.02,1207.31 1573.61,1207.37 1574.2,1207.52 1574.78,1207.44 1575.37,1207.34 1575.96,1210.33 1576.54,1210.05 1577.13,1208.35 1577.72,1208.48 1578.3,1207.04 1578.89,1207.08 1579.47,1208.8 1580.06,1208.39 1580.65,1206.47 1581.23,1203.37 1581.82,1203.78 1582.41,1203.97 1582.99,1204.1 1583.58,1202.93 1584.17,1201.7 1584.75,1200.74 1585.34,1203.06 1585.93,1201.66 1586.51,1204.72 1587.1,1201.93 1587.68,1203.67 1588.27,1200.71 1588.86,1202.42 1589.44,1204.06 1590.03,1204.3 1590.62,1203.15 1591.2,1203.21 1591.79,1205.05 1592.38,1202.4 1592.96,1205.84 1593.55,1206.02 1594.14,1203.33 1594.72,1203.76 1595.31,1202.63 1595.89,1207.47 1596.48,1207.36 1597.07,1207.59 1597.65,1212 1598.24,1210.25 1598.83,1206.9 1599.41,1206.57 1600,1205.22 1600.59,1200.61 1601.17,1204.19 1601.76,1204.63 1602.34,1206.32 1602.93,1207.82 1603.52,1206.05 1604.1,1207.48 1604.69,1207.56 1605.28,1204.9 1605.86,1204.96 1606.45,1206.33 1607.04,1206.6 1607.62,1209.18 1608.21,1210.71 1608.8,1213.61 1609.38,1211.82 1609.97,1211.54 1610.55,1211.26 1611.14,1209.66 1611.73,1207.94 1612.31,1206.63 1612.9,1208.02 1613.49,1209.51 1614.07,1215.3 1614.66,1214.97 1615.25,1215.89 1615.83,1215.45 1616.42,1218.01 1617.01,1217.09 1617.59,1219.49 1618.18,1220.25 1618.76,1218.13 1619.35,1216.08 1619.94,1215.31 1620.52,1213.48 1621.11,1211.5 1621.7,1209.85 1622.28,1214.13 1622.87,1215.28 1623.46,1213.05 1624.04,1209.53 1624.63,1210.63 1625.22,1211.68 1625.8,1212.9 1626.39,1212.5 1626.97,1212.45 1627.56,1212.24 1628.15,1213.19 1628.73,1212.59 1629.32,1213.97 1629.91,1215.03 1630.49,1211.57 1631.08,1209.68 1631.67,1208.06 1632.25,1206.58 1632.84,1206.48 1633.42,1203.26 1634.01,1197.41 1634.6,1197.75 1635.18,1198.08 1635.77,1198.4 1636.36,1200.3 1636.94,1200.52 1637.53,1197.33 1638.12,1197.99 1638.7,1198.44 1639.29,1197.85 1639.88,1199.62 1640.46,1199.83 1641.05,1203.34 1641.63,1203.76 1642.22,1205.66 1642.81,1205.69 1643.39,1201.4 1643.98,1201.9 1644.57,1203.56 1645.15,1203.8 1645.74,1202.45 1646.33,1200.97 1646.91,1196.54 1647.5,1194 1648.09,1196.03 1648.67,1195.09 1649.26,1198.64 1649.84,1199.21 1650.43,1195.35 1651.02,1197.32 1651.6,1197.73 1652.19,1199.68 1652.78,1198.57 1653.36,1201.76 1653.95,1200.46 1654.54,1200.54 1655.12,1202.39 1655.71,1202.51 1656.29,1204.33 1656.88,1205.88 1657.47,1205.86 1658.05,1206 1658.64,1207.33 1659.23,1207.71 1659.81,1204.65 1660.4,1205.15 1660.99,1205.22 1661.57,1203.52 1662.16,1203.48 1662.75,1203.78 1663.33,1205.62 1663.92,1203.97 1664.5,1203.92 1665.09,1205.86 1665.68,1205.87 1666.26,1207.45 1666.85,1210.77 1667.44,1215.14 1668.02,1214.77 1668.61,1213.87 1669.2,1213.44 1669.78,1215.95 1670.37,1212.83 1670.96,1210.96 1671.54,1210.92 1672.13,1207.94 1672.71,1204.72 1673.3,1204.74 1673.89,1203.44 1674.47,1200.66 1675.06,1201.09 1675.65,1204.63 1676.23,1209.25 1676.82,1209.38 1677.41,1209.2 1677.99,1207.49 1678.58,1207.2 1679.17,1205.77 1679.75,1204.43 1680.34,1204.47 1680.92,1207.54 1681.51,1200.38 1682.1,1198.14 1682.68,1200.14 1683.27,1200.65 1683.86,1200.78 1684.44,1202.56 1685.03,1204.43 1685.62,1204.55 1686.2,1206.22 1686.79,1207.86 1687.37,1206.13 1687.96,1208.01 1688.55,1207.81 1689.13,1206.44 1689.72,1207.84 1690.31,1206.58 1690.89,1202.13 1691.48,1203.99 1692.07,1204.44 1692.65,1201.55 1693.24,1202.04 1693.83,1200.74 1694.41,1201.11 1695,1202.7 1695.58,1206.01 1696.17,1201.57 1696.76,1201.81 1697.34,1202.32 1697.93,1202.41 1698.52,1202.56 1699.1,1201.02 1699.69,1200.08 1700.28,1200.53 1700.86,1200.45 1701.45,1201.98 1702.04,1197.69 1702.62,1201.35 1703.21,1200.1 1703.79,1201.65 1704.38,1209.43 1704.97,1209.66 1705.55,1203.65 1706.14,1202.63 1706.73,1202.66 1707.31,1201.61 1707.9,1203.59 1708.49,1203.73 1709.07,1203.65 1709.66,1202.19 1710.24,1202.34 1710.83,1199.59 1711.42,1200.13 1712,1200.19 1712.59,1203.71 1713.18,1201.13 1713.76,1204.7 1714.35,1203.5 1714.94,1202.3 1715.52,1201.1 1716.11,1204.37 1716.7,1204.73 1717.28,1206.21 1717.87,1210.84 1718.45,1209.44 1719.04,1206.14 1719.63,1206.53 1720.21,1206.58 1720.8,1207.18 1721.39,1207.06 1721.97,1208.51 1722.56,1201.04 1723.15,1201.08 1723.73,1204.48 1724.32,1204.65 1724.91,1204.86 1725.49,1206.68 1726.08,1209.69 1726.66,1211.07 1727.25,1212.4 1727.84,1209.46 1728.42,1212.39 1729.01,1210.48 1729.6,1208.72 1730.18,1208.52 1730.77,1210.02 1731.36,1211.06 1731.94,1213.8 1732.53,1213.51 1733.11,1211.68 1733.7,1210.98 1734.29,1212.21 1734.87,1214.74 1735.46,1215.64 1736.05,1216.82 1736.63,1217.79 1737.22,1220.56 1737.81,1215.05 1738.39,1216.12 1738.98,1214.31 1739.57,1212.49 1740.15,1210.76 1740.74,1210.94 1741.32,1209.17 1741.91,1207.57 1742.5,1208.92 1743.08,1208.64 1743.67,1207.37 1744.26,1207.24 1744.84,1210.23 1745.43,1207.26 1746.02,1207.18 1746.6,1207.13 1747.19,1206.83 1747.78,1209.68 1748.36,1208.07 1748.95,1211.17 1749.53,1211.11 1750.12,1209.45 1750.71,1210.83 1751.29,1209.2 1751.88,1209.18 1752.47,1210.27 1753.05,1210.08 1753.64,1210.06 1754.23,1211.39 1754.81,1209.73 1755.4,1209.61 1755.99,1210.93 1756.57,1210.77 1757.16,1210.61 1757.74,1207.53 1758.33,1207.43 1758.92,1206.96 1759.5,1206.62 1760.09,1203.67 1760.68,1203.82 1761.26,1204.06 1761.85,1201.01 1762.44,1202.88 1763.02,1204.62 1763.61,1204.93 1764.19,1204.93 1764.78,1201.88 1765.37,1203.74 1765.95,1208.38 1766.54,1206.88 1767.13,1206.78 1767.71,1206.89 1768.3,1206.86 1768.89,1203.96 1769.47,1202.51 1770.06,1204.35 1770.65,1202.85 1771.23,1205.89 1771.82,1204.23 1772.4,1205.78 1772.99,1205.73 1773.58,1205.87 1774.16,1201.51 1774.75,1203.47 1775.34,1203.49 1775.92,1203.53 1776.51,1205.39 1777.1,1203.92 1777.68,1204.38 1778.27,1203.37 1778.86,1205 1779.44,1206.52 1780.03,1208.01 1780.61,1207.94 1781.2,1207.85 1781.79,1207.58 1782.37,1209.47 1782.96,1209.61 1783.55,1207.86 1784.13,1206.41 1784.72,1207.94 1785.31,1207.79 1785.89,1206.18 1786.48,1204.55 1787.06,1204.98 1787.65,1205.23 1788.24,1203.82 1788.82,1206.8 1789.41,1208.21 1790,1209.7 1790.58,1209.37 1791.17,1210.88 1791.76,1209.26 1792.34,1209.06 1792.93,1208.69 1793.52,1205.83 1794.1,1210.34 1794.69,1211.46 1795.27,1211.47 1795.86,1209.76 1796.45,1208.19 1797.03,1212.8 1797.62,1209.79 1798.21,1211.24 1798.79,1209.75 1799.38,1208.16 1799.97,1208.27 1800.55,1208.29 1801.14,1209.9 1801.73,1208.36 1802.31,1209.76 1802.9,1215.85 1803.48,1213.68 1804.07,1213.24 1804.66,1211.5 1805.24,1217.13 1805.83,1214.9 1806.42,1214.59 1807,1214.22 1807.59,1212.61 1808.18,1215.2 1808.76,1214.61 1809.35,1218.89 1809.94,1216.97 1810.52,1217.9 1811.11,1216.95 1811.69,1215.18 1812.28,1210.42 1812.87,1208.86 1813.45,1211.37 1814.04,1216.95 1814.63,1216.42 1815.21,1215.96 1815.8,1218.47 1816.39,1224.21 1816.97,1226.21 1817.56,1226.68 1818.14,1222.81 1818.73,1221.7 1819.32,1223.79 1819.9,1222.79 1820.49,1220.33 1821.08,1216.55 1821.66,1214.34 1822.25,1214.34 1822.84,1210.95 1823.42,1210.51 1824.01,1208.85 1824.6,1208.4 1825.18,1206.63 1825.77,1205.05 1826.35,1203.87 1826.94,1205.49 1827.53,1204.17 1828.11,1207.19 1828.7,1208.86 1829.29,1206.01 1829.87,1205.94 1830.46,1204.6 1831.05,1204.58 1831.63,1206.19 1832.22,1205.99 1832.81,1207.44 1833.39,1205.59 1833.98,1204 1834.56,1205.35 1835.15,1200.46 1835.74,1202.12 1836.32,1200.9 1836.91,1199.77 1837.5,1198.41 1838.08,1200.29 1838.67,1200.57 1839.26,1197.74 1839.84,1198.57 1840.43,1198.68 1841.01,1198.97 1841.6,1200.7 1842.19,1201.01 1842.77,1198.67 1843.36,1199.2 1843.95,1202.83 1844.53,1203.02 1845.12,1203.18 1845.71,1201.84 1846.29,1202.29 1846.88,1200.93 1847.47,1202.71 1848.05,1201.42 1848.64,1200.23 1849.22,1205.15 1849.81,1205.25 1850.4,1205.68 1850.98,1207.47 1851.57,1206.04 1852.16,1206.38 1852.74,1201.88 1853.33,1200.68 1853.92,1202.69 1854.5,1203.07 1855.09,1204.95 1855.68,1206.56 1856.26,1206.55 1856.85,1205.14 1857.43,1203.68 1858.02,1202.19 1858.61,1197.93 1859.19,1199.97 1859.78,1198.8 1860.37,1199.28 1860.95,1201.25 1861.54,1201.61 1862.13,1203.21 1862.71,1202.07 1863.3,1203.98 1863.88,1204.41 1864.47,1201.58 1865.06,1200.32 1865.64,1203.46 1866.23,1202.24 1866.82,1202.76 1867.4,1204.65 1867.99,1203.14 1868.58,1204.88 1869.16,1204.84 1869.75,1203.7 1870.34,1204.19 1870.92,1203.12 1871.51,1201.9 1872.09,1202.13 1872.68,1202.26 1873.27,1203.14 1873.85,1203.47 1874.44,1203.68 1875.03,1205.46 1875.61,1207.06 1876.2,1205.67 1876.79,1208.77 1877.37,1210.13 1877.96,1211.63 1878.55,1210.14 1879.13,1211.34 1879.72,1212.64 1880.3,1212.16 1880.89,1205.7 1881.48,1208.95 1882.06,1210.69 1882.65,1212.08 1883.24,1211.82 1883.82,1212 1884.41,1214.7 1885,1212.71 1885.58,1215.77 1886.17,1215.27 1886.76,1214.54 1887.34,1209.92 1887.93,1206.82 1888.51,1206.95 1889.1,1205.29 1889.69,1206.76 1890.27,1206.7 1890.86,1203.51 1891.45,1205.11 1892.03,1209.75 1892.62,1209.82 1893.21,1211.43 1893.79,1209.83 1894.38,1206.77 1894.96,1206.81 1895.55,1206.77 1896.14,1206.89 1896.72,1207.09 1897.31,1205.77 1897.9,1204.31 1898.48,1208.8 1899.07,1208.48 1899.66,1209.82 1900.24,1207.84 1900.83,1207.65 1901.42,1207.69 1902,1207.7 1902.59,1210.78 1903.17,1210.61 1903.76,1212.01 1904.35,1211.67 1904.93,1211.24 1905.52,1211.29 1906.11,1211.09 1906.69,1210.87 1907.28,1210.56 1907.87,1210.27 1908.45,1208.38 1909.04,1208.72 1909.63,1211.5 1910.21,1209.8 1910.8,1211.15 1911.38,1210.76 1911.97,1212.06 1912.56,1208.32 1913.14,1211.36 1913.73,1212.76 1914.32,1212.56 1914.9,1208.27 1915.49,1208.08 1916.08,1208.12 1916.66,1211.06 1917.25,1209.25 1917.83,1210.83 1918.42,1213.44 1919.01,1213.05 1919.59,1210.09 1920.18,1206.8 1920.77,1206.95 1921.35,1206.57 1921.94,1206.28 1922.53,1204.62 1923.11,1203.06 1923.7,1206.32 1924.29,1211.25 1924.87,1211.01 1925.46,1210.42 1926.04,1210.15 1926.63,1207.29 1927.22,1213.19 1927.8,1212.87 1928.39,1211.44 1928.98,1212.64 1929.56,1213.88 1930.15,1212.03 1930.74,1211.59 1931.32,1211.59 1931.91,1208.28 1932.5,1207.82 1933.08,1208.08 1933.67,1210.99 1934.25,1212.6 1934.84,1210.96 1935.43,1210.91 1936.01,1210.89 1936.6,1207.77 1937.19,1206.3 1937.77,1206.56 1938.36,1206.05 1938.95,1204.64 1939.53,1200.14 1940.12,1198.93 1940.71,1199.45 1941.29,1199.9 1941.88,1202.03 1942.46,1205.55 1943.05,1203.85 1943.64,1204.07 1944.22,1202.8 1944.81,1205.97 1945.4,1207.7 1945.98,1207.58 1946.57,1207.55 1947.16,1209.15 1947.74,1207.66 1948.33,1207.66 1948.91,1206.36 1949.5,1207.99 1950.09,1208 1950.67,1206.26 1951.26,1206.4 1951.85,1208.04 1952.43,1206.24 1953.02,1207.72 1953.61,1210.95 1954.19,1209.45 1954.78,1204.75 1955.37,1203.46 1955.95,1206.52 1956.54,1206.53 1957.12,1204.88 1957.71,1203.51 1958.3,1205.23 1958.88,1206.65 1959.47,1206.71 1960.06,1203.61 1960.64,1202.42 1961.23,1205.84 1961.82,1202.96 1962.4,1203.09 1962.99,1203.33 1963.58,1203.56 1964.16,1205.31 1964.75,1207.03 1965.33,1204.08 1965.92,1202.91 1966.51,1200.36 1967.09,1202.08 1967.68,1200.78 1968.27,1199.48 1968.85,1200.01 1969.44,1203.44 1970.03,1201.94 1970.61,1201.98 1971.2,1203.68 1971.78,1202.2 1972.37,1202.77 1972.96,1202.88 1973.54,1204.45 1974.13,1207.2 1974.72,1205.56 1975.3,1202.42 1975.89,1202.87 1976.48,1204.79 1977.06,1206.45 1977.65,1204.84 1978.24,1206.39 1978.82,1201.83 1979.41,1201.97 1979.99,1200.64 1980.58,1205.56 1981.17,1208.75 1981.75,1211.85 1982.34,1213.1 1982.93,1212.89 1983.51,1211.28 1984.1,1209.59 1984.69,1210.92 1985.27,1208.93 1985.86,1204.13 1986.45,1202.9 1987.03,1206.25 1987.62,1206.43 1988.2,1206.59 1988.79,1208.04 1989.38,1209.3 1989.96,1212.23 1990.55,1213.48 1991.14,1213.37 1991.72,1212.04 1992.31,1212.05 1992.9,1211.82 1993.48,1210.17 1994.07,1211.51 1994.65,1212.7 1995.24,1212.57 1995.83,1209.31 1996.41,1210.65 1997,1210.62 1997.59,1213.5 1998.17,1213.03 1998.76,1211.07 1999.35,1210.87 1999.93,1212.29 2000.52,1213.45 2001.11,1213.09 2001.69,1209.53 2002.28,1207.8 2002.86,1209.24 2003.45,1206.18 2004.04,1203.06 2004.62,1201.98 2005.21,1203.61 2005.8,1204.01 2006.38,1204.07 2006.97,1201.49 2007.56,1198.54 2008.14,1200.66 2008.73,1202.47 2009.32,1202.81 2009.9,1203.2 2010.49,1201.68 2011.07,1201.98 2011.66,1205.21 2012.25,1205.39 2012.83,1204.19 2013.42,1204.15 2014.01,1203.21 2014.59,1207.62 2015.18,1203.13 2015.77,1206.23 2016.35,1208.36 2016.94,1204.03 2017.53,1204.11 2018.11,1205.81 2018.7,1205.84 2019.28,1207.51 2019.87,1208.89 2020.46,1207.44 2021.04,1207.4 2021.63,1207.37 2022.22,1208.83 2022.8,1205.88 2023.39,1207.36 2023.98,1204.6 2024.56,1204.78 2025.15,1205.01 2025.73,1206.97 2026.32,1204.45 2026.91,1204.63 2027.49,1204.89 2028.08,1201.89 2028.67,1202.64 2029.25,1202.57 2029.84,1201.18 2030.43,1200.36 2031.01,1199.14 2031.6,1200.78 2032.19,1199.7 2032.77,1199.86 2033.36,1200.06 2033.94,1202.02 2034.53,1205.4 2035.12,1208.77 2035.7,1211.79 2036.29,1210.15 2036.88,1210.07 2037.46,1212.68 2038.05,1207.91 2038.64,1206.32 2039.22,1203.54 2039.81,1203.7 2040.4,1205.09 2040.98,1203.56 2041.57,1203.83 2042.15,1206.79 2042.74,1206.63 2043.33,1208.09 2043.91,1206.52 2044.5,1203.43 2045.09,1205.25 2045.67,1205.34 2046.26,1202.5 2046.85,1201.3 2047.43,1204.7 2048.02,1205.06 2048.6,1206.54 2049.19,1206.74 2049.78,1208.47 2050.36,1208.54 2050.95,1208.33 2051.54,1209.78 2052.12,1211 2052.71,1209.44 2053.3,1206.43 2053.88,1206.85 2054.47,1205.78 2055.06,1204.43 2055.64,1204.52 2056.23,1204.65 2056.81,1203.36 2057.4,1204.58 2057.99,1204.57 2058.57,1204.47 2059.16,1207.32 2059.75,1213.06 2060.33,1214.38 2060.92,1215.15 2061.51,1214.83 2062.09,1212.99 2062.68,1211.19 2063.27,1208.99 2063.85,1210.35 2064.44,1211.88 2065.02,1211.39 2065.61,1210.81 2066.2,1212.26 2066.78,1211.9 2067.37,1211.91 2067.96,1211.43 2068.54,1212.78 2069.13,1212.91 2069.72,1215.53 2070.3,1215 2070.89,1213.28 2071.48,1212.73 2072.06,1217.17 2072.65,1216.41 2073.23,1214.69 2073.82,1214.37 2074.41,1214.06 2074.99,1215.46 2075.58,1213.77 2076.17,1210.35 2076.75,1213.17 2077.34,1213 2077.93,1211.24 2078.51,1210.96 2079.1,1212.26 2079.68,1213.38 2080.27,1213.06 2080.86,1214.31 2081.44,1214.2 2082.03,1212.5 2082.62,1212.1 2083.2,1210.33 2083.79,1209.85 2084.38,1206.68 2084.96,1211.56 2085.55,1211.14 2086.14,1209.3 2086.72,1209.31 2087.31,1210.58 2087.89,1210.43 2088.48,1212.99 2089.07,1211.24 2089.65,1212.34 2090.24,1213.53 2090.83,1213.4 2091.41,1213.04 2092,1214.48 2092.59,1212.43 2093.17,1210.57 2093.76,1213.03 2094.35,1212.76 2094.93,1210.85 2095.52,1208.73 2096.1,1210.09 2096.69,1210.06 2097.28,1209.72 2097.86,1209.43 2098.45,1207.59 2099.04,1207.73 2099.62,1204.67 2100.21,1203.49 2100.8,1203.7 2101.38,1200.86 2101.97,1201.23 2102.55,1201.42 2103.14,1202.03 2103.73,1202.27 2104.31,1201.03 2104.9,1200.06 2105.49,1203.22 2106.07,1201.9 2106.66,1199.24 2107.25,1201.06 2107.83,1201.16 2108.42,1205.92 2109.01,1207.39 2109.59,1209.08 2110.18,1208.83 2110.76,1208.55 2111.35,1208.76 2111.94,1206.89 2112.52,1206.9 2113.11,1207.03 2113.7,1205.03 2114.28,1203.5 2114.87,1205.22 2115.46,1205.25 2116.04,1206.93 2116.63,1206.79 2117.22,1207.35 2117.8,1204.41 2118.39,1204.53 2118.97,1209.52 2119.56,1211.26 2120.15,1214.23 2120.73,1212.31 2121.32,1212.18 2121.91,1213.37 2122.49,1214.54 2123.08,1214.36 2123.67,1212.32 2124.25,1215.29 2124.84,1210.09 2125.42,1211.69 2126.01,1211.61 2126.6,1209.65 2127.18,1209.25 2127.77,1209.22 2128.36,1209.22 2128.94,1207.8 2129.53,1206.13 2130.12,1207.56 2130.7,1206.2 2131.29,1204.63 2131.88,1204.44 2132.46,1207.66 2133.05,1204.67 2133.63,1204.57 2134.22,1206.17 2134.81,1206.01 2135.39,1206.1 2135.98,1203.27 2136.57,1203.66 2137.15,1200.63 2137.74,1201.2 2138.33,1201.55 2138.91,1204.55 2139.5,1202.82 2140.09,1204.57 2140.67,1203.57 2141.26,1205.12 2141.84,1203.62 2142.43,1202.2 2143.02,1203.74 2143.6,1205.76 2144.19,1207.52 2144.78,1206.02 2145.36,1207.65 2145.95,1209.15 2146.54,1209.04 2147.12,1210.92 2147.71,1209.45 2148.3,1209.36 2148.88,1209.3 2149.47,1209.22 2150.05,1207.82 2150.64,1210.71 2151.23,1211.76 2151.81,1212.96 2152.4,1210.97 2152.99,1210.96 2153.57,1213.72 2154.16,1213.32 2154.75,1212.94 2155.33,1211.04 2155.92,1212.35 2156.5,1213.4 2157.09,1211.91 2157.68,1208.83 2158.26,1205.97 \"/>\n<path clip-path=\"url(#clip942)\" d=\"M986.025 1207.9 L986.612 1207.9 L987.198 1207.9 L987.785 1207.9 L988.371 1207.9 L988.957 1207.9 L989.544 1207.9 L990.13 1207.9 L990.717 1207.9 L991.303 1207.9 L991.889 1207.9 L992.476 1207.9 L993.062 1207.9 L993.649 1207.9 L994.235 1207.9 L994.822 1207.9 L995.408 1207.9 L995.994 1207.9 L996.581 1207.9 L997.167 1207.9 L997.754 1207.9 L998.34 1207.9 L998.926 1207.9 L999.513 1207.9 L1000.1 1207.9 L1000.69 1207.9 L1001.27 1207.9 L1001.86 1207.9 L1002.44 1207.9 L1003.03 1207.9 L1003.62 1207.9 L1004.2 1207.9 L1004.79 1207.9 L1005.38 1207.9 L1005.96 1207.9 L1006.55 1207.9 L1007.14 1207.9 L1007.72 1207.9 L1008.31 1207.9 L1008.9 1207.9 L1009.48 1207.9 L1010.07 1207.9 L1010.65 1207.9 L1011.24 1207.9 L1011.83 1207.9 L1012.41 1207.9 L1013 1207.9 L1013.59 1207.9 L1014.17 1207.9 L1014.76 1207.9 L1015.35 1207.9 L1015.93 1207.9 L1016.52 1207.9 L1017.11 1207.9 L1017.69 1207.9 L1018.28 1207.9 L1018.86 1207.9 L1019.45 1207.9 L1020.04 1207.9 L1020.62 1207.9 L1021.21 1207.9 L1021.8 1207.9 L1022.38 1207.9 L1022.97 1207.9 L1023.56 1207.9 L1024.14 1207.9 L1024.73 1207.9 L1025.32 1207.9 L1025.9 1207.9 L1026.49 1207.9 L1027.07 1207.9 L1027.66 1207.9 L1028.25 1207.9 L1028.83 1207.9 L1029.42 1207.9 L1030.01 1207.9 L1030.59 1207.9 L1031.18 1207.9 L1031.77 1207.9 L1032.35 1207.9 L1032.94 1207.9 L1033.52 1207.9 L1034.11 1207.9 L1034.7 1207.9 L1035.28 1207.9 L1035.87 1207.9 L1036.46 1207.9 L1037.04 1207.9 L1037.63 1207.9 L1038.22 1207.9 L1038.8 1207.9 L1039.39 1207.9 L1039.98 1207.9 L1040.56 1207.9 L1041.15 1207.9 L1041.73 1207.9 L1042.32 1207.9 L1042.91 1207.9 L1043.49 1207.9 L1044.08 1207.9 L1044.67 1207.9 L1045.25 1207.9 L1045.84 1207.9 L1046.43 1207.9 L1047.01 1207.9 L1047.6 1207.9 L1048.19 1207.9 L1048.77 1207.9 L1049.36 1207.9 L1049.94 1207.9 L1050.53 1207.9 L1051.12 1207.9 L1051.7 1207.9 L1052.29 1207.9 L1052.88 1207.9 L1053.46 1207.9 L1054.05 1207.9 L1054.64 1207.9 L1055.22 1207.9 L1055.81 1207.9 L1056.39 1207.9 L1056.98 1207.9 L1057.57 1207.9 L1058.15 1207.9 L1058.74 1207.9 L1059.33 1207.9 L1059.91 1207.9 L1060.5 1207.9 L1061.09 1207.9 L1061.67 1207.9 L1062.26 1207.9 L1062.85 1207.9 L1063.43 1207.9 L1064.02 1207.9 L1064.6 1207.9 L1065.19 1207.9 L1065.78 1207.9 L1066.36 1207.9 L1066.95 1207.9 L1067.54 1207.9 L1068.12 1207.9 L1068.71 1207.9 L1069.3 1207.9 L1069.88 1207.9 L1070.47 1207.9 L1071.06 1207.9 L1071.64 1207.9 L1072.23 1207.9 L1072.81 1207.9 L1073.4 1207.9 L1073.99 1207.9 L1074.57 1207.9 L1075.16 1207.9 L1075.75 1207.9 L1076.33 1207.9 L1076.92 1207.9 L1077.51 1207.9 L1078.09 1207.9 L1078.68 1207.9 L1079.26 1207.9 L1079.85 1207.9 L1080.44 1207.9 L1081.02 1207.9 L1081.61 1207.9 L1082.2 1207.9 L1082.78 1207.9 L1083.37 1207.9 L1083.96 1207.9 L1084.54 1207.9 L1085.13 1207.9 L1085.72 1207.9 L1086.3 1207.9 L1086.89 1207.9 L1087.47 1207.9 L1088.06 1207.9 L1088.65 1207.9 L1089.23 1207.9 L1089.82 1207.9 L1090.41 1207.9 L1090.99 1207.9 L1091.58 1207.9 L1092.17 1207.9 L1092.75 1207.9 L1093.34 1207.9 L1093.93 1207.9 L1094.51 1207.9 L1095.1 1207.9 L1095.68 1207.9 L1096.27 1207.9 L1096.86 1207.9 L1097.44 1207.9 L1098.03 1207.9 L1098.62 1207.9 L1099.2 1207.9 L1099.79 1207.9 L1100.38 1207.9 L1100.96 1207.9 L1101.55 1207.9 L1102.14 1207.9 L1102.72 1207.9 L1103.31 1207.9 L1103.89 1207.9 L1104.48 1207.9 L1105.07 1207.9 L1105.65 1207.9 L1106.24 1207.9 L1106.83 1207.9 L1107.41 1207.9 L1108 1207.9 L1108.59 1207.9 L1109.17 1207.9 L1109.76 1207.9 L1110.34 1207.9 L1110.93 1207.9 L1111.52 1207.9 L1112.1 1207.9 L1112.69 1207.9 L1113.28 1207.9 L1113.86 1207.9 L1114.45 1207.9 L1115.04 1207.9 L1115.62 1207.9 L1116.21 1207.9 L1116.8 1207.9 L1117.38 1207.9 L1117.97 1207.9 L1118.55 1207.9 L1119.14 1207.9 L1119.73 1207.9 L1120.31 1207.9 L1120.9 1207.9 L1121.49 1207.9 L1122.07 1207.9 L1122.66 1207.9 L1123.25 1207.9 L1123.83 1207.9 L1124.42 1207.9 L1125.01 1207.9 L1125.59 1207.9 L1126.18 1207.9 L1126.76 1207.9 L1127.35 1207.9 L1127.94 1207.9 L1128.52 1207.9 L1129.11 1207.9 L1129.7 1207.9 L1130.28 1207.9 L1130.87 1207.9 L1131.46 1207.9 L1132.04 1207.9 L1132.63 1207.9 L1133.21 1207.9 L1133.8 1207.9 L1134.39 1207.9 L1134.97 1207.9 L1135.56 1207.9 L1136.15 1207.9 L1136.73 1207.9 L1137.32 1207.9 L1137.91 1207.9 L1138.49 1207.9 L1139.08 1207.9 L1139.67 1207.9 L1140.25 1207.9 L1140.84 1207.9 L1141.42 1207.9 L1142.01 1207.9 L1142.6 1207.9 L1143.18 1207.9 L1143.77 1207.9 L1144.36 1207.9 L1144.94 1207.9 L1145.53 1207.9 L1146.12 1207.9 L1146.7 1207.9 L1147.29 1207.9 L1147.88 1207.9 L1148.46 1207.9 L1149.05 1207.9 L1149.63 1207.9 L1150.22 1207.9 L1150.81 1207.9 L1151.39 1207.9 L1151.98 1207.9 L1152.57 1207.9 L1153.15 1207.9 L1153.74 1207.9 L1154.33 1207.9 L1154.91 1207.9 L1155.5 1207.9 L1156.09 1207.9 L1156.67 1207.9 L1157.26 1207.9 L1157.84 1207.9 L1158.43 1207.9 L1159.02 1207.9 L1159.6 1207.9 L1160.19 1207.9 L1160.78 1207.9 L1161.36 1207.9 L1161.95 1207.9 L1162.54 1207.9 L1163.12 1207.9 L1163.71 1207.9 L1164.29 1207.9 L1164.88 1207.9 L1165.47 1207.9 L1166.05 1207.9 L1166.64 1207.9 L1167.23 1207.9 L1167.81 1207.9 L1168.4 1207.9 L1168.99 1207.9 L1169.57 1207.9 L1170.16 1207.9 L1170.75 1207.9 L1171.33 1207.9 L1171.92 1207.9 L1172.5 1207.9 L1173.09 1207.9 L1173.68 1207.9 L1174.26 1207.9 L1174.85 1207.9 L1175.44 1207.9 L1176.02 1207.9 L1176.61 1207.9 L1177.2 1207.9 L1177.78 1207.9 L1178.37 1207.9 L1178.96 1207.9 L1179.54 1207.9 L1180.13 1207.9 L1180.71 1207.9 L1181.3 1207.9 L1181.89 1207.9 L1182.47 1207.9 L1183.06 1207.9 L1183.65 1207.9 L1184.23 1207.9 L1184.82 1207.9 L1185.41 1207.9 L1185.99 1207.9 L1186.58 1207.9 L1187.16 1207.9 L1187.75 1207.9 L1188.34 1207.9 L1188.92 1207.9 L1189.51 1207.9 L1190.1 1207.9 L1190.68 1207.9 L1191.27 1207.9 L1191.86 1207.9 L1192.44 1207.9 L1193.03 1207.9 L1193.62 1207.9 L1194.2 1207.9 L1194.79 1207.9 L1195.37 1207.9 L1195.96 1207.9 L1196.55 1207.9 L1197.13 1207.9 L1197.72 1207.9 L1198.31 1207.9 L1198.89 1207.9 L1199.48 1207.9 L1200.07 1207.9 L1200.65 1207.9 L1201.24 1207.9 L1201.83 1207.9 L1202.41 1207.9 L1203 1207.9 L1203.58 1207.9 L1204.17 1207.9 L1204.76 1207.9 L1205.34 1207.9 L1205.93 1207.9 L1206.52 1207.9 L1207.1 1207.9 L1207.69 1207.9 L1208.28 1207.9 L1208.86 1207.9 L1209.45 1207.9 L1210.03 1207.9 L1210.62 1207.9 L1211.21 1207.9 L1211.79 1207.9 L1212.38 1207.9 L1212.97 1207.9 L1213.55 1207.9 L1214.14 1207.9 L1214.73 1207.9 L1215.31 1207.9 L1215.9 1207.9 L1216.49 1207.9 L1217.07 1207.9 L1217.66 1207.9 L1218.24 1207.9 L1218.83 1207.9 L1219.42 1207.9 L1220 1207.9 L1220.59 1207.9 L1221.18 1207.9 L1221.76 1207.9 L1222.35 1207.9 L1222.94 1207.9 L1223.52 1207.9 L1224.11 1207.9 L1224.7 1207.9 L1225.28 1207.9 L1225.87 1207.9 L1226.45 1207.9 L1227.04 1207.9 L1227.63 1207.9 L1228.21 1207.9 L1228.8 1207.9 L1229.39 1207.9 L1229.97 1207.9 L1230.56 1207.9 L1231.15 1207.9 L1231.73 1207.9 L1232.32 1207.9 L1232.91 1207.9 L1233.49 1207.9 L1234.08 1207.9 L1234.66 1207.9 L1235.25 1207.9 L1235.84 1207.9 L1236.42 1207.9 L1237.01 1207.9 L1237.6 1207.9 L1238.18 1207.9 L1238.77 1207.9 L1239.36 1207.9 L1239.94 1207.9 L1240.53 1207.9 L1241.11 1207.9 L1241.7 1207.9 L1242.29 1207.9 L1242.87 1207.9 L1243.46 1207.9 L1244.05 1207.9 L1244.63 1207.9 L1245.22 1207.9 L1245.81 1207.9 L1246.39 1207.9 L1246.98 1207.9 L1247.57 1207.9 L1248.15 1207.9 L1248.74 1207.9 L1249.32 1207.9 L1249.91 1207.9 L1250.5 1207.9 L1251.08 1207.9 L1251.67 1207.9 L1252.26 1207.9 L1252.84 1207.9 L1253.43 1207.9 L1254.02 1207.9 L1254.6 1207.9 L1255.19 1207.9 L1255.78 1207.9 L1256.36 1207.9 L1256.95 1207.9 L1257.53 1207.9 L1258.12 1207.9 L1258.71 1207.9 L1259.29 1207.9 L1259.88 1207.9 L1260.47 1207.9 L1261.05 1207.9 L1261.64 1207.9 L1262.23 1207.9 L1262.81 1207.9 L1263.4 1207.9 L1263.98 1207.9 L1264.57 1207.9 L1265.16 1207.9 L1265.74 1207.9 L1266.33 1207.9 L1266.92 1207.9 L1267.5 1207.9 L1268.09 1207.9 L1268.68 1207.9 L1269.26 1207.9 L1269.85 1207.9 L1270.44 1207.9 L1271.02 1207.9 L1271.61 1207.9 L1272.19 1207.9 L1272.78 1207.9 L1273.37 1207.9 L1273.95 1207.9 L1274.54 1207.9 L1275.13 1207.9 L1275.71 1207.9 L1276.3 1207.9 L1276.89 1207.9 L1277.47 1207.9 L1278.06 1207.9 L1278.65 1207.9 L1279.23 1207.9 L1279.82 1207.9 L1280.4 1207.9 L1280.99 1207.9 L1281.58 1207.9 L1282.16 1207.9 L1282.75 1207.9 L1283.34 1207.9 L1283.92 1207.9 L1284.51 1207.9 L1285.1 1207.9 L1285.68 1207.9 L1286.27 1207.9 L1286.86 1207.9 L1287.44 1207.9 L1288.03 1207.9 L1288.61 1207.9 L1289.2 1207.9 L1289.79 1207.9 L1290.37 1207.9 L1290.96 1207.9 L1291.55 1207.9 L1292.13 1207.9 L1292.72 1207.9 L1293.31 1207.9 L1293.89 1207.9 L1294.48 1207.9 L1295.06 1207.9 L1295.65 1207.9 L1296.24 1207.9 L1296.82 1207.9 L1297.41 1207.9 L1298 1207.9 L1298.58 1207.9 L1299.17 1207.9 L1299.76 1207.9 L1300.34 1207.9 L1300.93 1207.9 L1301.52 1207.9 L1302.1 1207.9 L1302.69 1207.9 L1303.27 1207.9 L1303.86 1207.9 L1304.45 1207.9 L1305.03 1207.9 L1305.62 1207.9 L1306.21 1207.9 L1306.79 1207.9 L1307.38 1207.9 L1307.97 1207.9 L1308.55 1207.9 L1309.14 1207.9 L1309.73 1207.9 L1310.31 1207.9 L1310.9 1207.9 L1311.48 1207.9 L1312.07 1207.9 L1312.66 1207.9 L1313.24 1207.9 L1313.83 1207.9 L1314.42 1207.9 L1315 1207.9 L1315.59 1207.9 L1316.18 1207.9 L1316.76 1207.9 L1317.35 1207.9 L1317.93 1207.9 L1318.52 1207.9 L1319.11 1207.9 L1319.69 1207.9 L1320.28 1207.9 L1320.87 1207.9 L1321.45 1207.9 L1322.04 1207.9 L1322.63 1207.9 L1323.21 1207.9 L1323.8 1207.9 L1324.39 1207.9 L1324.97 1207.9 L1325.56 1207.9 L1326.14 1207.9 L1326.73 1207.9 L1327.32 1207.9 L1327.9 1207.9 L1328.49 1207.9 L1329.08 1207.9 L1329.66 1207.9 L1330.25 1207.9 L1330.84 1207.9 L1331.42 1207.9 L1332.01 1207.9 L1332.6 1207.9 L1333.18 1207.9 L1333.77 1207.9 L1334.35 1207.9 L1334.94 1207.9 L1335.53 1207.9 L1336.11 1207.9 L1336.7 1207.9 L1337.29 1207.9 L1337.87 1207.9 L1338.46 1207.9 L1339.05 1207.9 L1339.63 1207.9 L1340.22 1207.9 L1340.8 1207.9 L1341.39 1207.9 L1341.98 1207.9 L1342.56 1207.9 L1343.15 1207.9 L1343.74 1207.9 L1344.32 1207.9 L1344.91 1207.9 L1345.5 1207.9 L1346.08 1207.9 L1346.67 1207.9 L1347.26 1207.9 L1347.84 1207.9 L1348.43 1207.9 L1349.01 1207.9 L1349.6 1207.9 L1350.19 1207.9 L1350.77 1207.9 L1351.36 1207.9 L1351.95 1207.9 L1352.53 1207.9 L1353.12 1207.9 L1353.71 1207.9 L1354.29 1207.9 L1354.88 1207.9 L1355.47 1207.9 L1356.05 1207.9 L1356.64 1207.9 L1357.22 1207.9 L1357.81 1207.9 L1358.4 1207.9 L1358.98 1207.9 L1359.57 1207.9 L1360.16 1207.9 L1360.74 1207.9 L1361.33 1207.9 L1361.92 1207.9 L1362.5 1207.9 L1363.09 1207.9 L1363.68 1207.9 L1364.26 1207.9 L1364.85 1207.9 L1365.43 1207.9 L1366.02 1207.9 L1366.61 1207.9 L1367.19 1207.9 L1367.78 1207.9 L1368.37 1207.9 L1368.95 1207.9 L1369.54 1207.9 L1370.13 1207.9 L1370.71 1207.9 L1371.3 1207.9 L1371.88 1207.9 L1372.47 1207.9 L1373.06 1207.9 L1373.64 1207.9 L1374.23 1207.9 L1374.82 1207.9 L1375.4 1207.9 L1375.99 1207.9 L1376.58 1207.9 L1377.16 1207.9 L1377.75 1207.9 L1378.34 1207.9 L1378.92 1207.9 L1379.51 1207.9 L1380.09 1207.9 L1380.68 1207.9 L1381.27 1207.9 L1381.85 1207.9 L1382.44 1207.9 L1383.03 1207.9 L1383.61 1207.9 L1384.2 1207.9 L1384.79 1207.9 L1385.37 1207.9 L1385.96 1207.9 L1386.55 1207.9 L1387.13 1207.9 L1387.72 1207.9 L1388.3 1207.9 L1388.89 1207.9 L1389.48 1207.9 L1390.06 1207.9 L1390.65 1207.9 L1391.24 1207.9 L1391.82 1207.9 L1392.41 1207.9 L1393 1207.9 L1393.58 1207.9 L1394.17 1207.9 L1394.75 1207.9 L1395.34 1207.9 L1395.93 1207.9 L1396.51 1207.9 L1397.1 1207.9 L1397.69 1207.9 L1398.27 1207.9 L1398.86 1207.9 L1399.45 1207.9 L1400.03 1207.9 L1400.62 1207.9 L1401.21 1207.9 L1401.79 1207.9 L1402.38 1207.9 L1402.96 1207.9 L1403.55 1207.9 L1404.14 1207.9 L1404.72 1207.9 L1405.31 1207.9 L1405.9 1207.9 L1406.48 1207.9 L1407.07 1207.9 L1407.66 1207.9 L1408.24 1207.9 L1408.83 1207.9 L1409.42 1207.9 L1410 1207.9 L1410.59 1207.9 L1411.17 1207.9 L1411.76 1207.9 L1412.35 1207.9 L1412.93 1207.9 L1413.52 1207.9 L1414.11 1207.9 L1414.69 1207.9 L1415.28 1207.9 L1415.87 1207.9 L1416.45 1207.9 L1417.04 1207.9 L1417.63 1207.9 L1418.21 1207.9 L1418.8 1207.9 L1419.38 1207.9 L1419.97 1207.9 L1420.56 1207.9 L1421.14 1207.9 L1421.73 1207.9 L1422.32 1207.9 L1422.9 1207.9 L1423.49 1207.9 L1424.08 1207.9 L1424.66 1207.9 L1425.25 1207.9 L1425.83 1207.9 L1426.42 1207.9 L1427.01 1207.9 L1427.59 1207.9 L1428.18 1207.9 L1428.77 1207.9 L1429.35 1207.9 L1429.94 1207.9 L1430.53 1207.9 L1431.11 1207.9 L1431.7 1207.9 L1432.29 1207.9 L1432.87 1207.9 L1433.46 1207.9 L1434.04 1207.9 L1434.63 1207.9 L1435.22 1207.9 L1435.8 1207.9 L1436.39 1207.9 L1436.98 1207.9 L1437.56 1207.9 L1438.15 1207.9 L1438.74 1207.9 L1439.32 1207.9 L1439.91 1207.9 L1440.5 1207.9 L1441.08 1207.9 L1441.67 1207.9 L1442.25 1207.9 L1442.84 1207.9 L1443.43 1207.9 L1444.01 1207.9 L1444.6 1207.9 L1445.19 1207.9 L1445.77 1207.9 L1446.36 1207.9 L1446.95 1207.9 L1447.53 1207.9 L1448.12 1207.9 L1448.7 1207.9 L1449.29 1207.9 L1449.88 1207.9 L1450.46 1207.9 L1451.05 1207.9 L1451.64 1207.9 L1452.22 1207.9 L1452.81 1207.9 L1453.4 1207.9 L1453.98 1207.9 L1454.57 1207.9 L1455.16 1207.9 L1455.74 1207.9 L1456.33 1207.9 L1456.91 1207.9 L1457.5 1207.9 L1458.09 1207.9 L1458.67 1207.9 L1459.26 1207.9 L1459.85 1207.9 L1460.43 1207.9 L1461.02 1207.9 L1461.61 1207.9 L1462.19 1207.9 L1462.78 1207.9 L1463.37 1207.9 L1463.95 1207.9 L1464.54 1207.9 L1465.12 1207.9 L1465.71 1207.9 L1466.3 1207.9 L1466.88 1207.9 L1467.47 1207.9 L1468.06 1207.9 L1468.64 1207.9 L1469.23 1207.9 L1469.82 1207.9 L1470.4 1207.9 L1470.99 1207.9 L1471.57 1207.9 L1472.16 1207.9 L1472.75 1207.9 L1473.33 1207.9 L1473.92 1207.9 L1474.51 1207.9 L1475.09 1207.9 L1475.68 1207.9 L1476.27 1207.9 L1476.85 1207.9 L1477.44 1207.9 L1478.03 1207.9 L1478.61 1207.9 L1479.2 1207.9 L1479.78 1207.9 L1480.37 1207.9 L1480.96 1207.9 L1481.54 1207.9 L1482.13 1207.9 L1482.72 1207.9 L1483.3 1207.9 L1483.89 1207.9 L1484.48 1207.9 L1485.06 1207.9 L1485.65 1207.9 L1486.24 1207.9 L1486.82 1207.9 L1487.41 1207.9 L1487.99 1207.9 L1488.58 1207.9 L1489.17 1207.9 L1489.75 1207.9 L1490.34 1207.9 L1490.93 1207.9 L1491.51 1207.9 L1492.1 1207.9 L1492.69 1207.9 L1493.27 1207.9 L1493.86 1207.9 L1494.45 1207.9 L1495.03 1207.9 L1495.62 1207.9 L1496.2 1207.9 L1496.79 1207.9 L1497.38 1207.9 L1497.96 1207.9 L1498.55 1207.9 L1499.14 1207.9 L1499.72 1207.9 L1500.31 1207.9 L1500.9 1207.9 L1501.48 1207.9 L1502.07 1207.9 L1502.65 1207.9 L1503.24 1207.9 L1503.83 1207.9 L1504.41 1207.9 L1505 1207.9 L1505.59 1207.9 L1506.17 1207.9 L1506.76 1207.9 L1507.35 1207.9 L1507.93 1207.9 L1508.52 1207.9 L1509.11 1207.9 L1509.69 1207.9 L1510.28 1207.9 L1510.86 1207.9 L1511.45 1207.9 L1512.04 1207.9 L1512.62 1207.9 L1513.21 1207.9 L1513.8 1207.9 L1514.38 1207.9 L1514.97 1207.9 L1515.56 1207.9 L1516.14 1207.9 L1516.73 1207.9 L1517.32 1207.9 L1517.9 1207.9 L1518.49 1207.9 L1519.07 1207.9 L1519.66 1207.9 L1520.25 1207.9 L1520.83 1207.9 L1521.42 1207.9 L1522.01 1207.9 L1522.59 1207.9 L1523.18 1207.9 L1523.77 1207.9 L1524.35 1207.9 L1524.94 1207.9 L1525.52 1207.9 L1526.11 1207.9 L1526.7 1207.9 L1527.28 1207.9 L1527.87 1207.9 L1528.46 1207.9 L1529.04 1207.9 L1529.63 1207.9 L1530.22 1207.9 L1530.8 1207.9 L1531.39 1207.9 L1531.98 1207.9 L1532.56 1207.9 L1533.15 1207.9 L1533.73 1207.9 L1534.32 1207.9 L1534.91 1207.9 L1535.49 1207.9 L1536.08 1207.9 L1536.67 1207.9 L1537.25 1207.9 L1537.84 1207.9 L1538.43 1207.9 L1539.01 1207.9 L1539.6 1207.9 L1540.19 1207.9 L1540.77 1207.9 L1541.36 1207.9 L1541.94 1207.9 L1542.53 1207.9 L1543.12 1207.9 L1543.7 1207.9 L1544.29 1207.9 L1544.88 1207.9 L1545.46 1207.9 L1546.05 1207.9 L1546.64 1207.9 L1547.22 1207.9 L1547.81 1207.9 L1548.4 1207.9 L1548.98 1207.9 L1549.57 1207.9 L1550.15 1207.9 L1550.74 1207.9 L1551.33 1207.9 L1551.91 1207.9 L1552.5 1207.9 L1553.09 1207.9 L1553.67 1207.9 L1554.26 1207.9 L1554.85 1207.9 L1555.43 1207.9 L1556.02 1207.9 L1556.6 1207.9 L1557.19 1207.9 L1557.78 1207.9 L1558.36 1207.9 L1558.95 1207.9 L1559.54 1207.9 L1560.12 1207.9 L1560.71 1207.9 L1561.3 1207.9 L1561.88 1207.9 L1562.47 1207.9 L1563.06 1207.9 L1563.64 1207.9 L1564.23 1207.9 L1564.81 1207.9 L1565.4 1207.9 L1565.99 1207.9 L1566.57 1207.9 L1567.16 1207.9 L1567.75 1207.9 L1568.33 1207.9 L1568.92 1207.9 L1569.51 1207.9 L1570.09 1207.9 L1570.68 1207.9 L1571.27 1207.9 L1571.85 1207.9 L1572.44 1207.9 L1573.02 1207.9 L1573.61 1207.9 L1574.2 1207.9 L1574.78 1207.9 L1575.37 1207.9 L1575.96 1207.9 L1576.54 1207.9 L1577.13 1207.9 L1577.72 1207.9 L1578.3 1207.9 L1578.89 1207.9 L1579.47 1207.9 L1580.06 1207.9 L1580.65 1207.9 L1581.23 1207.9 L1581.82 1207.9 L1582.41 1207.9 L1582.99 1207.9 L1583.58 1207.9 L1584.17 1207.9 L1584.75 1207.9 L1585.34 1207.9 L1585.93 1207.9 L1586.51 1207.9 L1587.1 1207.9 L1587.68 1207.9 L1588.27 1207.9 L1588.86 1207.9 L1589.44 1207.9 L1590.03 1207.9 L1590.62 1207.9 L1591.2 1207.9 L1591.79 1207.9 L1592.38 1207.9 L1592.96 1207.9 L1593.55 1207.9 L1594.14 1207.9 L1594.72 1207.9 L1595.31 1207.9 L1595.89 1207.9 L1596.48 1207.9 L1597.07 1207.9 L1597.65 1207.9 L1598.24 1207.9 L1598.83 1207.9 L1599.41 1207.9 L1600 1207.9 L1600.59 1207.9 L1601.17 1207.9 L1601.76 1207.9 L1602.34 1207.9 L1602.93 1207.9 L1603.52 1207.9 L1604.1 1207.9 L1604.69 1207.9 L1605.28 1207.9 L1605.86 1207.9 L1606.45 1207.9 L1607.04 1207.9 L1607.62 1207.9 L1608.21 1207.9 L1608.8 1207.9 L1609.38 1207.9 L1609.97 1207.9 L1610.55 1207.9 L1611.14 1207.9 L1611.73 1207.9 L1612.31 1207.9 L1612.9 1207.9 L1613.49 1207.9 L1614.07 1207.9 L1614.66 1207.9 L1615.25 1207.9 L1615.83 1207.9 L1616.42 1207.9 L1617.01 1207.9 L1617.59 1207.9 L1618.18 1207.9 L1618.76 1207.9 L1619.35 1207.9 L1619.94 1207.9 L1620.52 1207.9 L1621.11 1207.9 L1621.7 1207.9 L1622.28 1207.9 L1622.87 1207.9 L1623.46 1207.9 L1624.04 1207.9 L1624.63 1207.9 L1625.22 1207.9 L1625.8 1207.9 L1626.39 1207.9 L1626.97 1207.9 L1627.56 1207.9 L1628.15 1207.9 L1628.73 1207.9 L1629.32 1207.9 L1629.91 1207.9 L1630.49 1207.9 L1631.08 1207.9 L1631.67 1207.9 L1632.25 1207.9 L1632.84 1207.9 L1633.42 1207.9 L1634.01 1207.9 L1634.6 1207.9 L1635.18 1207.9 L1635.77 1207.9 L1636.36 1207.9 L1636.94 1207.9 L1637.53 1207.9 L1638.12 1207.9 L1638.7 1207.9 L1639.29 1207.9 L1639.88 1207.9 L1640.46 1207.9 L1641.05 1207.9 L1641.63 1207.9 L1642.22 1207.9 L1642.81 1207.9 L1643.39 1207.9 L1643.98 1207.9 L1644.57 1207.9 L1645.15 1207.9 L1645.74 1207.9 L1646.33 1207.9 L1646.91 1207.9 L1647.5 1207.9 L1648.09 1207.9 L1648.67 1207.9 L1649.26 1207.9 L1649.84 1207.9 L1650.43 1207.9 L1651.02 1207.9 L1651.6 1207.9 L1652.19 1207.9 L1652.78 1207.9 L1653.36 1207.9 L1653.95 1207.9 L1654.54 1207.9 L1655.12 1207.9 L1655.71 1207.9 L1656.29 1207.9 L1656.88 1207.9 L1657.47 1207.9 L1658.05 1207.9 L1658.64 1207.9 L1659.23 1207.9 L1659.81 1207.9 L1660.4 1207.9 L1660.99 1207.9 L1661.57 1207.9 L1662.16 1207.9 L1662.75 1207.9 L1663.33 1207.9 L1663.92 1207.9 L1664.5 1207.9 L1665.09 1207.9 L1665.68 1207.9 L1666.26 1207.9 L1666.85 1207.9 L1667.44 1207.9 L1668.02 1207.9 L1668.61 1207.9 L1669.2 1207.9 L1669.78 1207.9 L1670.37 1207.9 L1670.96 1207.9 L1671.54 1207.9 L1672.13 1207.9 L1672.71 1207.9 L1673.3 1207.9 L1673.89 1207.9 L1674.47 1207.9 L1675.06 1207.9 L1675.65 1207.9 L1676.23 1207.9 L1676.82 1207.9 L1677.41 1207.9 L1677.99 1207.9 L1678.58 1207.9 L1679.17 1207.9 L1679.75 1207.9 L1680.34 1207.9 L1680.92 1207.9 L1681.51 1207.9 L1682.1 1207.9 L1682.68 1207.9 L1683.27 1207.9 L1683.86 1207.9 L1684.44 1207.9 L1685.03 1207.9 L1685.62 1207.9 L1686.2 1207.9 L1686.79 1207.9 L1687.37 1207.9 L1687.96 1207.9 L1688.55 1207.9 L1689.13 1207.9 L1689.72 1207.9 L1690.31 1207.9 L1690.89 1207.9 L1691.48 1207.9 L1692.07 1207.9 L1692.65 1207.9 L1693.24 1207.9 L1693.83 1207.9 L1694.41 1207.9 L1695 1207.9 L1695.58 1207.9 L1696.17 1207.9 L1696.76 1207.9 L1697.34 1207.9 L1697.93 1207.9 L1698.52 1207.9 L1699.1 1207.9 L1699.69 1207.9 L1700.28 1207.9 L1700.86 1207.9 L1701.45 1207.9 L1702.04 1207.9 L1702.62 1207.9 L1703.21 1207.9 L1703.79 1207.9 L1704.38 1207.9 L1704.97 1207.9 L1705.55 1207.9 L1706.14 1207.9 L1706.73 1207.9 L1707.31 1207.9 L1707.9 1207.9 L1708.49 1207.9 L1709.07 1207.9 L1709.66 1207.9 L1710.24 1207.9 L1710.83 1207.9 L1711.42 1207.9 L1712 1207.9 L1712.59 1207.9 L1713.18 1207.9 L1713.76 1207.9 L1714.35 1207.9 L1714.94 1207.9 L1715.52 1207.9 L1716.11 1207.9 L1716.7 1207.9 L1717.28 1207.9 L1717.87 1207.9 L1718.45 1207.9 L1719.04 1207.9 L1719.63 1207.9 L1720.21 1207.9 L1720.8 1207.9 L1721.39 1207.9 L1721.97 1207.9 L1722.56 1207.9 L1723.15 1207.9 L1723.73 1207.9 L1724.32 1207.9 L1724.91 1207.9 L1725.49 1207.9 L1726.08 1207.9 L1726.66 1207.9 L1727.25 1207.9 L1727.84 1207.9 L1728.42 1207.9 L1729.01 1207.9 L1729.6 1207.9 L1730.18 1207.9 L1730.77 1207.9 L1731.36 1207.9 L1731.94 1207.9 L1732.53 1207.9 L1733.11 1207.9 L1733.7 1207.9 L1734.29 1207.9 L1734.87 1207.9 L1735.46 1207.9 L1736.05 1207.9 L1736.63 1207.9 L1737.22 1207.9 L1737.81 1207.9 L1738.39 1207.9 L1738.98 1207.9 L1739.57 1207.9 L1740.15 1207.9 L1740.74 1207.9 L1741.32 1207.9 L1741.91 1207.9 L1742.5 1207.9 L1743.08 1207.9 L1743.67 1207.9 L1744.26 1207.9 L1744.84 1207.9 L1745.43 1207.9 L1746.02 1207.9 L1746.6 1207.9 L1747.19 1207.9 L1747.78 1207.9 L1748.36 1207.9 L1748.95 1207.9 L1749.53 1207.9 L1750.12 1207.9 L1750.71 1207.9 L1751.29 1207.9 L1751.88 1207.9 L1752.47 1207.9 L1753.05 1207.9 L1753.64 1207.9 L1754.23 1207.9 L1754.81 1207.9 L1755.4 1207.9 L1755.99 1207.9 L1756.57 1207.9 L1757.16 1207.9 L1757.74 1207.9 L1758.33 1207.9 L1758.92 1207.9 L1759.5 1207.9 L1760.09 1207.9 L1760.68 1207.9 L1761.26 1207.9 L1761.85 1207.9 L1762.44 1207.9 L1763.02 1207.9 L1763.61 1207.9 L1764.19 1207.9 L1764.78 1207.9 L1765.37 1207.9 L1765.95 1207.9 L1766.54 1207.9 L1767.13 1207.9 L1767.71 1207.9 L1768.3 1207.9 L1768.89 1207.9 L1769.47 1207.9 L1770.06 1207.9 L1770.65 1207.9 L1771.23 1207.9 L1771.82 1207.9 L1772.4 1207.9 L1772.99 1207.9 L1773.58 1207.9 L1774.16 1207.9 L1774.75 1207.9 L1775.34 1207.9 L1775.92 1207.9 L1776.51 1207.9 L1777.1 1207.9 L1777.68 1207.9 L1778.27 1207.9 L1778.86 1207.9 L1779.44 1207.9 L1780.03 1207.9 L1780.61 1207.9 L1781.2 1207.9 L1781.79 1207.9 L1782.37 1207.9 L1782.96 1207.9 L1783.55 1207.9 L1784.13 1207.9 L1784.72 1207.9 L1785.31 1207.9 L1785.89 1207.9 L1786.48 1207.9 L1787.06 1207.9 L1787.65 1207.9 L1788.24 1207.9 L1788.82 1207.9 L1789.41 1207.9 L1790 1207.9 L1790.58 1207.9 L1791.17 1207.9 L1791.76 1207.9 L1792.34 1207.9 L1792.93 1207.9 L1793.52 1207.9 L1794.1 1207.9 L1794.69 1207.9 L1795.27 1207.9 L1795.86 1207.9 L1796.45 1207.9 L1797.03 1207.9 L1797.62 1207.9 L1798.21 1207.9 L1798.79 1207.9 L1799.38 1207.9 L1799.97 1207.9 L1800.55 1207.9 L1801.14 1207.9 L1801.73 1207.9 L1802.31 1207.9 L1802.9 1207.9 L1803.48 1207.9 L1804.07 1207.9 L1804.66 1207.9 L1805.24 1207.9 L1805.83 1207.9 L1806.42 1207.9 L1807 1207.9 L1807.59 1207.9 L1808.18 1207.9 L1808.76 1207.9 L1809.35 1207.9 L1809.94 1207.9 L1810.52 1207.9 L1811.11 1207.9 L1811.69 1207.9 L1812.28 1207.9 L1812.87 1207.9 L1813.45 1207.9 L1814.04 1207.9 L1814.63 1207.9 L1815.21 1207.9 L1815.8 1207.9 L1816.39 1207.9 L1816.97 1207.9 L1817.56 1207.9 L1818.14 1207.9 L1818.73 1207.9 L1819.32 1207.9 L1819.9 1207.9 L1820.49 1207.9 L1821.08 1207.9 L1821.66 1207.9 L1822.25 1207.9 L1822.84 1207.9 L1823.42 1207.9 L1824.01 1207.9 L1824.6 1207.9 L1825.18 1207.9 L1825.77 1207.9 L1826.35 1207.9 L1826.94 1207.9 L1827.53 1207.9 L1828.11 1207.9 L1828.7 1207.9 L1829.29 1207.9 L1829.87 1207.9 L1830.46 1207.9 L1831.05 1207.9 L1831.63 1207.9 L1832.22 1207.9 L1832.81 1207.9 L1833.39 1207.9 L1833.98 1207.9 L1834.56 1207.9 L1835.15 1207.9 L1835.74 1207.9 L1836.32 1207.9 L1836.91 1207.9 L1837.5 1207.9 L1838.08 1207.9 L1838.67 1207.9 L1839.26 1207.9 L1839.84 1207.9 L1840.43 1207.9 L1841.01 1207.9 L1841.6 1207.9 L1842.19 1207.9 L1842.77 1207.9 L1843.36 1207.9 L1843.95 1207.9 L1844.53 1207.9 L1845.12 1207.9 L1845.71 1207.9 L1846.29 1207.9 L1846.88 1207.9 L1847.47 1207.9 L1848.05 1207.9 L1848.64 1207.9 L1849.22 1207.9 L1849.81 1207.9 L1850.4 1207.9 L1850.98 1207.9 L1851.57 1207.9 L1852.16 1207.9 L1852.74 1207.9 L1853.33 1207.9 L1853.92 1207.9 L1854.5 1207.9 L1855.09 1207.9 L1855.68 1207.9 L1856.26 1207.9 L1856.85 1207.9 L1857.43 1207.9 L1858.02 1207.9 L1858.61 1207.9 L1859.19 1207.9 L1859.78 1207.9 L1860.37 1207.9 L1860.95 1207.9 L1861.54 1207.9 L1862.13 1207.9 L1862.71 1207.9 L1863.3 1207.9 L1863.88 1207.9 L1864.47 1207.9 L1865.06 1207.9 L1865.64 1207.9 L1866.23 1207.9 L1866.82 1207.9 L1867.4 1207.9 L1867.99 1207.9 L1868.58 1207.9 L1869.16 1207.9 L1869.75 1207.9 L1870.34 1207.9 L1870.92 1207.9 L1871.51 1207.9 L1872.09 1207.9 L1872.68 1207.9 L1873.27 1207.9 L1873.85 1207.9 L1874.44 1207.9 L1875.03 1207.9 L1875.61 1207.9 L1876.2 1207.9 L1876.79 1207.9 L1877.37 1207.9 L1877.96 1207.9 L1878.55 1207.9 L1879.13 1207.9 L1879.72 1207.9 L1880.3 1207.9 L1880.89 1207.9 L1881.48 1207.9 L1882.06 1207.9 L1882.65 1207.9 L1883.24 1207.9 L1883.82 1207.9 L1884.41 1207.9 L1885 1207.9 L1885.58 1207.9 L1886.17 1207.9 L1886.76 1207.9 L1887.34 1207.9 L1887.93 1207.9 L1888.51 1207.9 L1889.1 1207.9 L1889.69 1207.9 L1890.27 1207.9 L1890.86 1207.9 L1891.45 1207.9 L1892.03 1207.9 L1892.62 1207.9 L1893.21 1207.9 L1893.79 1207.9 L1894.38 1207.9 L1894.96 1207.9 L1895.55 1207.9 L1896.14 1207.9 L1896.72 1207.9 L1897.31 1207.9 L1897.9 1207.9 L1898.48 1207.9 L1899.07 1207.9 L1899.66 1207.9 L1900.24 1207.9 L1900.83 1207.9 L1901.42 1207.9 L1902 1207.9 L1902.59 1207.9 L1903.17 1207.9 L1903.76 1207.9 L1904.35 1207.9 L1904.93 1207.9 L1905.52 1207.9 L1906.11 1207.9 L1906.69 1207.9 L1907.28 1207.9 L1907.87 1207.9 L1908.45 1207.9 L1909.04 1207.9 L1909.63 1207.9 L1910.21 1207.9 L1910.8 1207.9 L1911.38 1207.9 L1911.97 1207.9 L1912.56 1207.9 L1913.14 1207.9 L1913.73 1207.9 L1914.32 1207.9 L1914.9 1207.9 L1915.49 1207.9 L1916.08 1207.9 L1916.66 1207.9 L1917.25 1207.9 L1917.83 1207.9 L1918.42 1207.9 L1919.01 1207.9 L1919.59 1207.9 L1920.18 1207.9 L1920.77 1207.9 L1921.35 1207.9 L1921.94 1207.9 L1922.53 1207.9 L1923.11 1207.9 L1923.7 1207.9 L1924.29 1207.9 L1924.87 1207.9 L1925.46 1207.9 L1926.04 1207.9 L1926.63 1207.9 L1927.22 1207.9 L1927.8 1207.9 L1928.39 1207.9 L1928.98 1207.9 L1929.56 1207.9 L1930.15 1207.9 L1930.74 1207.9 L1931.32 1207.9 L1931.91 1207.9 L1932.5 1207.9 L1933.08 1207.9 L1933.67 1207.9 L1934.25 1207.9 L1934.84 1207.9 L1935.43 1207.9 L1936.01 1207.9 L1936.6 1207.9 L1937.19 1207.9 L1937.77 1207.9 L1938.36 1207.9 L1938.95 1207.9 L1939.53 1207.9 L1940.12 1207.9 L1940.71 1207.9 L1941.29 1207.9 L1941.88 1207.9 L1942.46 1207.9 L1943.05 1207.9 L1943.64 1207.9 L1944.22 1207.9 L1944.81 1207.9 L1945.4 1207.9 L1945.98 1207.9 L1946.57 1207.9 L1947.16 1207.9 L1947.74 1207.9 L1948.33 1207.9 L1948.91 1207.9 L1949.5 1207.9 L1950.09 1207.9 L1950.67 1207.9 L1951.26 1207.9 L1951.85 1207.9 L1952.43 1207.9 L1953.02 1207.9 L1953.61 1207.9 L1954.19 1207.9 L1954.78 1207.9 L1955.37 1207.9 L1955.95 1207.9 L1956.54 1207.9 L1957.12 1207.9 L1957.71 1207.9 L1958.3 1207.9 L1958.88 1207.9 L1959.47 1207.9 L1960.06 1207.9 L1960.64 1207.9 L1961.23 1207.9 L1961.82 1207.9 L1962.4 1207.9 L1962.99 1207.9 L1963.58 1207.9 L1964.16 1207.9 L1964.75 1207.9 L1965.33 1207.9 L1965.92 1207.9 L1966.51 1207.9 L1967.09 1207.9 L1967.68 1207.9 L1968.27 1207.9 L1968.85 1207.9 L1969.44 1207.9 L1970.03 1207.9 L1970.61 1207.9 L1971.2 1207.9 L1971.78 1207.9 L1972.37 1207.9 L1972.96 1207.9 L1973.54 1207.9 L1974.13 1207.9 L1974.72 1207.9 L1975.3 1207.9 L1975.89 1207.9 L1976.48 1207.9 L1977.06 1207.9 L1977.65 1207.9 L1978.24 1207.9 L1978.82 1207.9 L1979.41 1207.9 L1979.99 1207.9 L1980.58 1207.9 L1981.17 1207.9 L1981.75 1207.9 L1982.34 1207.9 L1982.93 1207.9 L1983.51 1207.9 L1984.1 1207.9 L1984.69 1207.9 L1985.27 1207.9 L1985.86 1207.9 L1986.45 1207.9 L1987.03 1207.9 L1987.62 1207.9 L1988.2 1207.9 L1988.79 1207.9 L1989.38 1207.9 L1989.96 1207.9 L1990.55 1207.9 L1991.14 1207.9 L1991.72 1207.9 L1992.31 1207.9 L1992.9 1207.9 L1993.48 1207.9 L1994.07 1207.9 L1994.65 1207.9 L1995.24 1207.9 L1995.83 1207.9 L1996.41 1207.9 L1997 1207.9 L1997.59 1207.9 L1998.17 1207.9 L1998.76 1207.9 L1999.35 1207.9 L1999.93 1207.9 L2000.52 1207.9 L2001.11 1207.9 L2001.69 1207.9 L2002.28 1207.9 L2002.86 1207.9 L2003.45 1207.9 L2004.04 1207.9 L2004.62 1207.9 L2005.21 1207.9 L2005.8 1207.9 L2006.38 1207.9 L2006.97 1207.9 L2007.56 1207.9 L2008.14 1207.9 L2008.73 1207.9 L2009.32 1207.9 L2009.9 1207.9 L2010.49 1207.9 L2011.07 1207.9 L2011.66 1207.9 L2012.25 1207.9 L2012.83 1207.9 L2013.42 1207.9 L2014.01 1207.9 L2014.59 1207.9 L2015.18 1207.9 L2015.77 1207.9 L2016.35 1207.9 L2016.94 1207.9 L2017.53 1207.9 L2018.11 1207.9 L2018.7 1207.9 L2019.28 1207.9 L2019.87 1207.9 L2020.46 1207.9 L2021.04 1207.9 L2021.63 1207.9 L2022.22 1207.9 L2022.8 1207.9 L2023.39 1207.9 L2023.98 1207.9 L2024.56 1207.9 L2025.15 1207.9 L2025.73 1207.9 L2026.32 1207.9 L2026.91 1207.9 L2027.49 1207.9 L2028.08 1207.9 L2028.67 1207.9 L2029.25 1207.9 L2029.84 1207.9 L2030.43 1207.9 L2031.01 1207.9 L2031.6 1207.9 L2032.19 1207.9 L2032.77 1207.9 L2033.36 1207.9 L2033.94 1207.9 L2034.53 1207.9 L2035.12 1207.9 L2035.7 1207.9 L2036.29 1207.9 L2036.88 1207.9 L2037.46 1207.9 L2038.05 1207.9 L2038.64 1207.9 L2039.22 1207.9 L2039.81 1207.9 L2040.4 1207.9 L2040.98 1207.9 L2041.57 1207.9 L2042.15 1207.9 L2042.74 1207.9 L2043.33 1207.9 L2043.91 1207.9 L2044.5 1207.9 L2045.09 1207.9 L2045.67 1207.9 L2046.26 1207.9 L2046.85 1207.9 L2047.43 1207.9 L2048.02 1207.9 L2048.6 1207.9 L2049.19 1207.9 L2049.78 1207.9 L2050.36 1207.9 L2050.95 1207.9 L2051.54 1207.9 L2052.12 1207.9 L2052.71 1207.9 L2053.3 1207.9 L2053.88 1207.9 L2054.47 1207.9 L2055.06 1207.9 L2055.64 1207.9 L2056.23 1207.9 L2056.81 1207.9 L2057.4 1207.9 L2057.99 1207.9 L2058.57 1207.9 L2059.16 1207.9 L2059.75 1207.9 L2060.33 1207.9 L2060.92 1207.9 L2061.51 1207.9 L2062.09 1207.9 L2062.68 1207.9 L2063.27 1207.9 L2063.85 1207.9 L2064.44 1207.9 L2065.02 1207.9 L2065.61 1207.9 L2066.2 1207.9 L2066.78 1207.9 L2067.37 1207.9 L2067.96 1207.9 L2068.54 1207.9 L2069.13 1207.9 L2069.72 1207.9 L2070.3 1207.9 L2070.89 1207.9 L2071.48 1207.9 L2072.06 1207.9 L2072.65 1207.9 L2073.23 1207.9 L2073.82 1207.9 L2074.41 1207.9 L2074.99 1207.9 L2075.58 1207.9 L2076.17 1207.9 L2076.75 1207.9 L2077.34 1207.9 L2077.93 1207.9 L2078.51 1207.9 L2079.1 1207.9 L2079.68 1207.9 L2080.27 1207.9 L2080.86 1207.9 L2081.44 1207.9 L2082.03 1207.9 L2082.62 1207.9 L2083.2 1207.9 L2083.79 1207.9 L2084.38 1207.9 L2084.96 1207.9 L2085.55 1207.9 L2086.14 1207.9 L2086.72 1207.9 L2087.31 1207.9 L2087.89 1207.9 L2088.48 1207.9 L2089.07 1207.9 L2089.65 1207.9 L2090.24 1207.9 L2090.83 1207.9 L2091.41 1207.9 L2092 1207.9 L2092.59 1207.9 L2093.17 1207.9 L2093.76 1207.9 L2094.35 1207.9 L2094.93 1207.9 L2095.52 1207.9 L2096.1 1207.9 L2096.69 1207.9 L2097.28 1207.9 L2097.86 1207.9 L2098.45 1207.9 L2099.04 1207.9 L2099.62 1207.9 L2100.21 1207.9 L2100.8 1207.9 L2101.38 1207.9 L2101.97 1207.9 L2102.55 1207.9 L2103.14 1207.9 L2103.73 1207.9 L2104.31 1207.9 L2104.9 1207.9 L2105.49 1207.9 L2106.07 1207.9 L2106.66 1207.9 L2107.25 1207.9 L2107.83 1207.9 L2108.42 1207.9 L2109.01 1207.9 L2109.59 1207.9 L2110.18 1207.9 L2110.76 1207.9 L2111.35 1207.9 L2111.94 1207.9 L2112.52 1207.9 L2113.11 1207.9 L2113.7 1207.9 L2114.28 1207.9 L2114.87 1207.9 L2115.46 1207.9 L2116.04 1207.9 L2116.63 1207.9 L2117.22 1207.9 L2117.8 1207.9 L2118.39 1207.9 L2118.97 1207.9 L2119.56 1207.9 L2120.15 1207.9 L2120.73 1207.9 L2121.32 1207.9 L2121.91 1207.9 L2122.49 1207.9 L2123.08 1207.9 L2123.67 1207.9 L2124.25 1207.9 L2124.84 1207.9 L2125.42 1207.9 L2126.01 1207.9 L2126.6 1207.9 L2127.18 1207.9 L2127.77 1207.9 L2128.36 1207.9 L2128.94 1207.9 L2129.53 1207.9 L2130.12 1207.9 L2130.7 1207.9 L2131.29 1207.9 L2131.88 1207.9 L2132.46 1207.9 L2133.05 1207.9 L2133.63 1207.9 L2134.22 1207.9 L2134.81 1207.9 L2135.39 1207.9 L2135.98 1207.9 L2136.57 1207.9 L2137.15 1207.9 L2137.74 1207.9 L2138.33 1207.9 L2138.91 1207.9 L2139.5 1207.9 L2140.09 1207.9 L2140.67 1207.9 L2141.26 1207.9 L2141.84 1207.9 L2142.43 1207.9 L2143.02 1207.9 L2143.6 1207.9 L2144.19 1207.9 L2144.78 1207.9 L2145.36 1207.9 L2145.95 1207.9 L2146.54 1207.9 L2147.12 1207.9 L2147.71 1207.9 L2148.3 1207.9 L2148.88 1207.9 L2149.47 1207.9 L2150.05 1207.9 L2150.64 1207.9 L2151.23 1207.9 L2151.81 1207.9 L2152.4 1207.9 L2152.99 1207.9 L2153.57 1207.9 L2154.16 1207.9 L2154.75 1207.9 L2155.33 1207.9 L2155.92 1207.9 L2156.5 1207.9 L2157.09 1207.9 L2157.68 1207.9 L2158.26 1207.9 L2158.26 1207.1 L2157.68 1207.1 L2157.09 1207.1 L2156.5 1207.1 L2155.92 1207.1 L2155.33 1207.1 L2154.75 1207.1 L2154.16 1207.1 L2153.57 1207.1 L2152.99 1207.1 L2152.4 1207.1 L2151.81 1207.1 L2151.23 1207.1 L2150.64 1207.1 L2150.05 1207.1 L2149.47 1207.1 L2148.88 1207.1 L2148.3 1207.1 L2147.71 1207.1 L2147.12 1207.1 L2146.54 1207.1 L2145.95 1207.1 L2145.36 1207.1 L2144.78 1207.1 L2144.19 1207.1 L2143.6 1207.1 L2143.02 1207.1 L2142.43 1207.1 L2141.84 1207.1 L2141.26 1207.1 L2140.67 1207.1 L2140.09 1207.1 L2139.5 1207.1 L2138.91 1207.1 L2138.33 1207.1 L2137.74 1207.1 L2137.15 1207.1 L2136.57 1207.1 L2135.98 1207.1 L2135.39 1207.1 L2134.81 1207.1 L2134.22 1207.1 L2133.63 1207.1 L2133.05 1207.1 L2132.46 1207.1 L2131.88 1207.1 L2131.29 1207.1 L2130.7 1207.1 L2130.12 1207.1 L2129.53 1207.1 L2128.94 1207.1 L2128.36 1207.1 L2127.77 1207.1 L2127.18 1207.1 L2126.6 1207.1 L2126.01 1207.1 L2125.42 1207.1 L2124.84 1207.1 L2124.25 1207.1 L2123.67 1207.1 L2123.08 1207.1 L2122.49 1207.1 L2121.91 1207.1 L2121.32 1207.1 L2120.73 1207.1 L2120.15 1207.1 L2119.56 1207.1 L2118.97 1207.1 L2118.39 1207.1 L2117.8 1207.1 L2117.22 1207.1 L2116.63 1207.1 L2116.04 1207.1 L2115.46 1207.1 L2114.87 1207.1 L2114.28 1207.1 L2113.7 1207.1 L2113.11 1207.1 L2112.52 1207.1 L2111.94 1207.1 L2111.35 1207.1 L2110.76 1207.1 L2110.18 1207.1 L2109.59 1207.1 L2109.01 1207.1 L2108.42 1207.1 L2107.83 1207.1 L2107.25 1207.1 L2106.66 1207.1 L2106.07 1207.1 L2105.49 1207.1 L2104.9 1207.1 L2104.31 1207.1 L2103.73 1207.1 L2103.14 1207.1 L2102.55 1207.1 L2101.97 1207.1 L2101.38 1207.1 L2100.8 1207.1 L2100.21 1207.1 L2099.62 1207.1 L2099.04 1207.1 L2098.45 1207.1 L2097.86 1207.1 L2097.28 1207.1 L2096.69 1207.1 L2096.1 1207.1 L2095.52 1207.1 L2094.93 1207.1 L2094.35 1207.1 L2093.76 1207.1 L2093.17 1207.1 L2092.59 1207.1 L2092 1207.1 L2091.41 1207.1 L2090.83 1207.1 L2090.24 1207.1 L2089.65 1207.1 L2089.07 1207.1 L2088.48 1207.1 L2087.89 1207.1 L2087.31 1207.1 L2086.72 1207.1 L2086.14 1207.1 L2085.55 1207.1 L2084.96 1207.1 L2084.38 1207.1 L2083.79 1207.1 L2083.2 1207.1 L2082.62 1207.1 L2082.03 1207.1 L2081.44 1207.1 L2080.86 1207.1 L2080.27 1207.1 L2079.68 1207.1 L2079.1 1207.1 L2078.51 1207.1 L2077.93 1207.1 L2077.34 1207.1 L2076.75 1207.1 L2076.17 1207.1 L2075.58 1207.1 L2074.99 1207.1 L2074.41 1207.1 L2073.82 1207.1 L2073.23 1207.1 L2072.65 1207.1 L2072.06 1207.1 L2071.48 1207.1 L2070.89 1207.1 L2070.3 1207.1 L2069.72 1207.1 L2069.13 1207.1 L2068.54 1207.1 L2067.96 1207.1 L2067.37 1207.1 L2066.78 1207.1 L2066.2 1207.1 L2065.61 1207.1 L2065.02 1207.1 L2064.44 1207.1 L2063.85 1207.1 L2063.27 1207.1 L2062.68 1207.1 L2062.09 1207.1 L2061.51 1207.1 L2060.92 1207.1 L2060.33 1207.1 L2059.75 1207.1 L2059.16 1207.1 L2058.57 1207.1 L2057.99 1207.1 L2057.4 1207.1 L2056.81 1207.1 L2056.23 1207.1 L2055.64 1207.1 L2055.06 1207.1 L2054.47 1207.1 L2053.88 1207.1 L2053.3 1207.1 L2052.71 1207.1 L2052.12 1207.1 L2051.54 1207.1 L2050.95 1207.1 L2050.36 1207.1 L2049.78 1207.1 L2049.19 1207.1 L2048.6 1207.1 L2048.02 1207.1 L2047.43 1207.1 L2046.85 1207.1 L2046.26 1207.1 L2045.67 1207.1 L2045.09 1207.1 L2044.5 1207.1 L2043.91 1207.1 L2043.33 1207.1 L2042.74 1207.1 L2042.15 1207.1 L2041.57 1207.1 L2040.98 1207.1 L2040.4 1207.1 L2039.81 1207.1 L2039.22 1207.1 L2038.64 1207.1 L2038.05 1207.1 L2037.46 1207.1 L2036.88 1207.1 L2036.29 1207.1 L2035.7 1207.1 L2035.12 1207.1 L2034.53 1207.1 L2033.94 1207.1 L2033.36 1207.1 L2032.77 1207.1 L2032.19 1207.1 L2031.6 1207.1 L2031.01 1207.1 L2030.43 1207.1 L2029.84 1207.1 L2029.25 1207.1 L2028.67 1207.1 L2028.08 1207.1 L2027.49 1207.1 L2026.91 1207.1 L2026.32 1207.1 L2025.73 1207.1 L2025.15 1207.1 L2024.56 1207.1 L2023.98 1207.1 L2023.39 1207.1 L2022.8 1207.1 L2022.22 1207.1 L2021.63 1207.1 L2021.04 1207.1 L2020.46 1207.1 L2019.87 1207.1 L2019.28 1207.1 L2018.7 1207.1 L2018.11 1207.1 L2017.53 1207.1 L2016.94 1207.1 L2016.35 1207.1 L2015.77 1207.1 L2015.18 1207.1 L2014.59 1207.1 L2014.01 1207.1 L2013.42 1207.1 L2012.83 1207.1 L2012.25 1207.1 L2011.66 1207.1 L2011.07 1207.1 L2010.49 1207.1 L2009.9 1207.1 L2009.32 1207.1 L2008.73 1207.1 L2008.14 1207.1 L2007.56 1207.1 L2006.97 1207.1 L2006.38 1207.1 L2005.8 1207.1 L2005.21 1207.1 L2004.62 1207.1 L2004.04 1207.1 L2003.45 1207.1 L2002.86 1207.1 L2002.28 1207.1 L2001.69 1207.1 L2001.11 1207.1 L2000.52 1207.1 L1999.93 1207.1 L1999.35 1207.1 L1998.76 1207.1 L1998.17 1207.1 L1997.59 1207.1 L1997 1207.1 L1996.41 1207.1 L1995.83 1207.1 L1995.24 1207.1 L1994.65 1207.1 L1994.07 1207.1 L1993.48 1207.1 L1992.9 1207.1 L1992.31 1207.1 L1991.72 1207.1 L1991.14 1207.1 L1990.55 1207.1 L1989.96 1207.1 L1989.38 1207.1 L1988.79 1207.1 L1988.2 1207.1 L1987.62 1207.1 L1987.03 1207.1 L1986.45 1207.1 L1985.86 1207.1 L1985.27 1207.1 L1984.69 1207.1 L1984.1 1207.1 L1983.51 1207.1 L1982.93 1207.1 L1982.34 1207.1 L1981.75 1207.1 L1981.17 1207.1 L1980.58 1207.1 L1979.99 1207.1 L1979.41 1207.1 L1978.82 1207.1 L1978.24 1207.1 L1977.65 1207.1 L1977.06 1207.1 L1976.48 1207.1 L1975.89 1207.1 L1975.3 1207.1 L1974.72 1207.1 L1974.13 1207.1 L1973.54 1207.1 L1972.96 1207.1 L1972.37 1207.1 L1971.78 1207.1 L1971.2 1207.1 L1970.61 1207.1 L1970.03 1207.1 L1969.44 1207.1 L1968.85 1207.1 L1968.27 1207.1 L1967.68 1207.1 L1967.09 1207.1 L1966.51 1207.1 L1965.92 1207.1 L1965.33 1207.1 L1964.75 1207.1 L1964.16 1207.1 L1963.58 1207.1 L1962.99 1207.1 L1962.4 1207.1 L1961.82 1207.1 L1961.23 1207.1 L1960.64 1207.1 L1960.06 1207.1 L1959.47 1207.1 L1958.88 1207.1 L1958.3 1207.1 L1957.71 1207.1 L1957.12 1207.1 L1956.54 1207.1 L1955.95 1207.1 L1955.37 1207.1 L1954.78 1207.1 L1954.19 1207.1 L1953.61 1207.1 L1953.02 1207.1 L1952.43 1207.1 L1951.85 1207.1 L1951.26 1207.1 L1950.67 1207.1 L1950.09 1207.1 L1949.5 1207.1 L1948.91 1207.1 L1948.33 1207.1 L1947.74 1207.1 L1947.16 1207.1 L1946.57 1207.1 L1945.98 1207.1 L1945.4 1207.1 L1944.81 1207.1 L1944.22 1207.1 L1943.64 1207.1 L1943.05 1207.1 L1942.46 1207.1 L1941.88 1207.1 L1941.29 1207.1 L1940.71 1207.1 L1940.12 1207.1 L1939.53 1207.1 L1938.95 1207.1 L1938.36 1207.1 L1937.77 1207.1 L1937.19 1207.1 L1936.6 1207.1 L1936.01 1207.1 L1935.43 1207.1 L1934.84 1207.1 L1934.25 1207.1 L1933.67 1207.1 L1933.08 1207.1 L1932.5 1207.1 L1931.91 1207.1 L1931.32 1207.1 L1930.74 1207.1 L1930.15 1207.1 L1929.56 1207.1 L1928.98 1207.1 L1928.39 1207.1 L1927.8 1207.1 L1927.22 1207.1 L1926.63 1207.1 L1926.04 1207.1 L1925.46 1207.1 L1924.87 1207.1 L1924.29 1207.1 L1923.7 1207.1 L1923.11 1207.1 L1922.53 1207.1 L1921.94 1207.1 L1921.35 1207.1 L1920.77 1207.1 L1920.18 1207.1 L1919.59 1207.1 L1919.01 1207.1 L1918.42 1207.1 L1917.83 1207.1 L1917.25 1207.1 L1916.66 1207.1 L1916.08 1207.1 L1915.49 1207.1 L1914.9 1207.1 L1914.32 1207.1 L1913.73 1207.1 L1913.14 1207.1 L1912.56 1207.1 L1911.97 1207.1 L1911.38 1207.1 L1910.8 1207.1 L1910.21 1207.1 L1909.63 1207.1 L1909.04 1207.1 L1908.45 1207.1 L1907.87 1207.1 L1907.28 1207.1 L1906.69 1207.1 L1906.11 1207.1 L1905.52 1207.1 L1904.93 1207.1 L1904.35 1207.1 L1903.76 1207.1 L1903.17 1207.1 L1902.59 1207.1 L1902 1207.1 L1901.42 1207.1 L1900.83 1207.1 L1900.24 1207.1 L1899.66 1207.1 L1899.07 1207.1 L1898.48 1207.1 L1897.9 1207.1 L1897.31 1207.1 L1896.72 1207.1 L1896.14 1207.1 L1895.55 1207.1 L1894.96 1207.1 L1894.38 1207.1 L1893.79 1207.1 L1893.21 1207.1 L1892.62 1207.1 L1892.03 1207.1 L1891.45 1207.1 L1890.86 1207.1 L1890.27 1207.1 L1889.69 1207.1 L1889.1 1207.1 L1888.51 1207.1 L1887.93 1207.1 L1887.34 1207.1 L1886.76 1207.1 L1886.17 1207.1 L1885.58 1207.1 L1885 1207.1 L1884.41 1207.1 L1883.82 1207.1 L1883.24 1207.1 L1882.65 1207.1 L1882.06 1207.1 L1881.48 1207.1 L1880.89 1207.1 L1880.3 1207.1 L1879.72 1207.1 L1879.13 1207.1 L1878.55 1207.1 L1877.96 1207.1 L1877.37 1207.1 L1876.79 1207.1 L1876.2 1207.1 L1875.61 1207.1 L1875.03 1207.1 L1874.44 1207.1 L1873.85 1207.1 L1873.27 1207.1 L1872.68 1207.1 L1872.09 1207.1 L1871.51 1207.1 L1870.92 1207.1 L1870.34 1207.1 L1869.75 1207.1 L1869.16 1207.1 L1868.58 1207.1 L1867.99 1207.1 L1867.4 1207.1 L1866.82 1207.1 L1866.23 1207.1 L1865.64 1207.1 L1865.06 1207.1 L1864.47 1207.1 L1863.88 1207.1 L1863.3 1207.1 L1862.71 1207.1 L1862.13 1207.1 L1861.54 1207.1 L1860.95 1207.1 L1860.37 1207.1 L1859.78 1207.1 L1859.19 1207.1 L1858.61 1207.1 L1858.02 1207.1 L1857.43 1207.1 L1856.85 1207.1 L1856.26 1207.1 L1855.68 1207.1 L1855.09 1207.1 L1854.5 1207.1 L1853.92 1207.1 L1853.33 1207.1 L1852.74 1207.1 L1852.16 1207.1 L1851.57 1207.1 L1850.98 1207.1 L1850.4 1207.1 L1849.81 1207.1 L1849.22 1207.1 L1848.64 1207.1 L1848.05 1207.1 L1847.47 1207.1 L1846.88 1207.1 L1846.29 1207.1 L1845.71 1207.1 L1845.12 1207.1 L1844.53 1207.1 L1843.95 1207.1 L1843.36 1207.1 L1842.77 1207.1 L1842.19 1207.1 L1841.6 1207.1 L1841.01 1207.1 L1840.43 1207.1 L1839.84 1207.1 L1839.26 1207.1 L1838.67 1207.1 L1838.08 1207.1 L1837.5 1207.1 L1836.91 1207.1 L1836.32 1207.1 L1835.74 1207.1 L1835.15 1207.1 L1834.56 1207.1 L1833.98 1207.1 L1833.39 1207.1 L1832.81 1207.1 L1832.22 1207.1 L1831.63 1207.1 L1831.05 1207.1 L1830.46 1207.1 L1829.87 1207.1 L1829.29 1207.1 L1828.7 1207.1 L1828.11 1207.1 L1827.53 1207.1 L1826.94 1207.1 L1826.35 1207.1 L1825.77 1207.1 L1825.18 1207.1 L1824.6 1207.1 L1824.01 1207.1 L1823.42 1207.1 L1822.84 1207.1 L1822.25 1207.1 L1821.66 1207.1 L1821.08 1207.1 L1820.49 1207.1 L1819.9 1207.1 L1819.32 1207.1 L1818.73 1207.1 L1818.14 1207.1 L1817.56 1207.1 L1816.97 1207.1 L1816.39 1207.1 L1815.8 1207.1 L1815.21 1207.1 L1814.63 1207.1 L1814.04 1207.1 L1813.45 1207.1 L1812.87 1207.1 L1812.28 1207.1 L1811.69 1207.1 L1811.11 1207.1 L1810.52 1207.1 L1809.94 1207.1 L1809.35 1207.1 L1808.76 1207.1 L1808.18 1207.1 L1807.59 1207.1 L1807 1207.1 L1806.42 1207.1 L1805.83 1207.1 L1805.24 1207.1 L1804.66 1207.1 L1804.07 1207.1 L1803.48 1207.1 L1802.9 1207.1 L1802.31 1207.1 L1801.73 1207.1 L1801.14 1207.1 L1800.55 1207.1 L1799.97 1207.1 L1799.38 1207.1 L1798.79 1207.1 L1798.21 1207.1 L1797.62 1207.1 L1797.03 1207.1 L1796.45 1207.1 L1795.86 1207.1 L1795.27 1207.1 L1794.69 1207.1 L1794.1 1207.1 L1793.52 1207.1 L1792.93 1207.1 L1792.34 1207.1 L1791.76 1207.1 L1791.17 1207.1 L1790.58 1207.1 L1790 1207.1 L1789.41 1207.1 L1788.82 1207.1 L1788.24 1207.1 L1787.65 1207.1 L1787.06 1207.1 L1786.48 1207.1 L1785.89 1207.1 L1785.31 1207.1 L1784.72 1207.1 L1784.13 1207.1 L1783.55 1207.1 L1782.96 1207.1 L1782.37 1207.1 L1781.79 1207.1 L1781.2 1207.1 L1780.61 1207.1 L1780.03 1207.1 L1779.44 1207.1 L1778.86 1207.1 L1778.27 1207.1 L1777.68 1207.1 L1777.1 1207.1 L1776.51 1207.1 L1775.92 1207.1 L1775.34 1207.1 L1774.75 1207.1 L1774.16 1207.1 L1773.58 1207.1 L1772.99 1207.1 L1772.4 1207.1 L1771.82 1207.1 L1771.23 1207.1 L1770.65 1207.1 L1770.06 1207.1 L1769.47 1207.1 L1768.89 1207.1 L1768.3 1207.1 L1767.71 1207.1 L1767.13 1207.1 L1766.54 1207.1 L1765.95 1207.1 L1765.37 1207.1 L1764.78 1207.1 L1764.19 1207.1 L1763.61 1207.1 L1763.02 1207.1 L1762.44 1207.1 L1761.85 1207.1 L1761.26 1207.1 L1760.68 1207.1 L1760.09 1207.1 L1759.5 1207.1 L1758.92 1207.1 L1758.33 1207.1 L1757.74 1207.1 L1757.16 1207.1 L1756.57 1207.1 L1755.99 1207.1 L1755.4 1207.1 L1754.81 1207.1 L1754.23 1207.1 L1753.64 1207.1 L1753.05 1207.1 L1752.47 1207.1 L1751.88 1207.1 L1751.29 1207.1 L1750.71 1207.1 L1750.12 1207.1 L1749.53 1207.1 L1748.95 1207.1 L1748.36 1207.1 L1747.78 1207.1 L1747.19 1207.1 L1746.6 1207.1 L1746.02 1207.1 L1745.43 1207.1 L1744.84 1207.1 L1744.26 1207.1 L1743.67 1207.1 L1743.08 1207.1 L1742.5 1207.1 L1741.91 1207.1 L1741.32 1207.1 L1740.74 1207.1 L1740.15 1207.1 L1739.57 1207.1 L1738.98 1207.1 L1738.39 1207.1 L1737.81 1207.1 L1737.22 1207.1 L1736.63 1207.1 L1736.05 1207.1 L1735.46 1207.1 L1734.87 1207.1 L1734.29 1207.1 L1733.7 1207.1 L1733.11 1207.1 L1732.53 1207.1 L1731.94 1207.1 L1731.36 1207.1 L1730.77 1207.1 L1730.18 1207.1 L1729.6 1207.1 L1729.01 1207.1 L1728.42 1207.1 L1727.84 1207.1 L1727.25 1207.1 L1726.66 1207.1 L1726.08 1207.1 L1725.49 1207.1 L1724.91 1207.1 L1724.32 1207.1 L1723.73 1207.1 L1723.15 1207.1 L1722.56 1207.1 L1721.97 1207.1 L1721.39 1207.1 L1720.8 1207.1 L1720.21 1207.1 L1719.63 1207.1 L1719.04 1207.1 L1718.45 1207.1 L1717.87 1207.1 L1717.28 1207.1 L1716.7 1207.1 L1716.11 1207.1 L1715.52 1207.1 L1714.94 1207.1 L1714.35 1207.1 L1713.76 1207.1 L1713.18 1207.1 L1712.59 1207.1 L1712 1207.1 L1711.42 1207.1 L1710.83 1207.1 L1710.24 1207.1 L1709.66 1207.1 L1709.07 1207.1 L1708.49 1207.1 L1707.9 1207.1 L1707.31 1207.1 L1706.73 1207.1 L1706.14 1207.1 L1705.55 1207.1 L1704.97 1207.1 L1704.38 1207.1 L1703.79 1207.1 L1703.21 1207.1 L1702.62 1207.1 L1702.04 1207.1 L1701.45 1207.1 L1700.86 1207.1 L1700.28 1207.1 L1699.69 1207.1 L1699.1 1207.1 L1698.52 1207.1 L1697.93 1207.1 L1697.34 1207.1 L1696.76 1207.1 L1696.17 1207.1 L1695.58 1207.1 L1695 1207.1 L1694.41 1207.1 L1693.83 1207.1 L1693.24 1207.1 L1692.65 1207.1 L1692.07 1207.1 L1691.48 1207.1 L1690.89 1207.1 L1690.31 1207.1 L1689.72 1207.1 L1689.13 1207.1 L1688.55 1207.1 L1687.96 1207.1 L1687.37 1207.1 L1686.79 1207.1 L1686.2 1207.1 L1685.62 1207.1 L1685.03 1207.1 L1684.44 1207.1 L1683.86 1207.1 L1683.27 1207.1 L1682.68 1207.1 L1682.1 1207.1 L1681.51 1207.1 L1680.92 1207.1 L1680.34 1207.1 L1679.75 1207.1 L1679.17 1207.1 L1678.58 1207.1 L1677.99 1207.1 L1677.41 1207.1 L1676.82 1207.1 L1676.23 1207.1 L1675.65 1207.1 L1675.06 1207.1 L1674.47 1207.1 L1673.89 1207.1 L1673.3 1207.1 L1672.71 1207.1 L1672.13 1207.1 L1671.54 1207.1 L1670.96 1207.1 L1670.37 1207.1 L1669.78 1207.1 L1669.2 1207.1 L1668.61 1207.1 L1668.02 1207.1 L1667.44 1207.1 L1666.85 1207.1 L1666.26 1207.1 L1665.68 1207.1 L1665.09 1207.1 L1664.5 1207.1 L1663.92 1207.1 L1663.33 1207.1 L1662.75 1207.1 L1662.16 1207.1 L1661.57 1207.1 L1660.99 1207.1 L1660.4 1207.1 L1659.81 1207.1 L1659.23 1207.1 L1658.64 1207.1 L1658.05 1207.1 L1657.47 1207.1 L1656.88 1207.1 L1656.29 1207.1 L1655.71 1207.1 L1655.12 1207.1 L1654.54 1207.1 L1653.95 1207.1 L1653.36 1207.1 L1652.78 1207.1 L1652.19 1207.1 L1651.6 1207.1 L1651.02 1207.1 L1650.43 1207.1 L1649.84 1207.1 L1649.26 1207.1 L1648.67 1207.1 L1648.09 1207.1 L1647.5 1207.1 L1646.91 1207.1 L1646.33 1207.1 L1645.74 1207.1 L1645.15 1207.1 L1644.57 1207.1 L1643.98 1207.1 L1643.39 1207.1 L1642.81 1207.1 L1642.22 1207.1 L1641.63 1207.1 L1641.05 1207.1 L1640.46 1207.1 L1639.88 1207.1 L1639.29 1207.1 L1638.7 1207.1 L1638.12 1207.1 L1637.53 1207.1 L1636.94 1207.1 L1636.36 1207.1 L1635.77 1207.1 L1635.18 1207.1 L1634.6 1207.1 L1634.01 1207.1 L1633.42 1207.1 L1632.84 1207.1 L1632.25 1207.1 L1631.67 1207.1 L1631.08 1207.1 L1630.49 1207.1 L1629.91 1207.1 L1629.32 1207.1 L1628.73 1207.1 L1628.15 1207.1 L1627.56 1207.1 L1626.97 1207.1 L1626.39 1207.1 L1625.8 1207.1 L1625.22 1207.1 L1624.63 1207.1 L1624.04 1207.1 L1623.46 1207.1 L1622.87 1207.1 L1622.28 1207.1 L1621.7 1207.1 L1621.11 1207.1 L1620.52 1207.1 L1619.94 1207.1 L1619.35 1207.1 L1618.76 1207.1 L1618.18 1207.1 L1617.59 1207.1 L1617.01 1207.1 L1616.42 1207.1 L1615.83 1207.1 L1615.25 1207.1 L1614.66 1207.1 L1614.07 1207.1 L1613.49 1207.1 L1612.9 1207.1 L1612.31 1207.1 L1611.73 1207.1 L1611.14 1207.1 L1610.55 1207.1 L1609.97 1207.1 L1609.38 1207.1 L1608.8 1207.1 L1608.21 1207.1 L1607.62 1207.1 L1607.04 1207.1 L1606.45 1207.1 L1605.86 1207.1 L1605.28 1207.1 L1604.69 1207.1 L1604.1 1207.1 L1603.52 1207.1 L1602.93 1207.1 L1602.34 1207.1 L1601.76 1207.1 L1601.17 1207.1 L1600.59 1207.1 L1600 1207.1 L1599.41 1207.1 L1598.83 1207.1 L1598.24 1207.1 L1597.65 1207.1 L1597.07 1207.1 L1596.48 1207.1 L1595.89 1207.1 L1595.31 1207.1 L1594.72 1207.1 L1594.14 1207.1 L1593.55 1207.1 L1592.96 1207.1 L1592.38 1207.1 L1591.79 1207.1 L1591.2 1207.1 L1590.62 1207.1 L1590.03 1207.1 L1589.44 1207.1 L1588.86 1207.1 L1588.27 1207.1 L1587.68 1207.1 L1587.1 1207.1 L1586.51 1207.1 L1585.93 1207.1 L1585.34 1207.1 L1584.75 1207.1 L1584.17 1207.1 L1583.58 1207.1 L1582.99 1207.1 L1582.41 1207.1 L1581.82 1207.1 L1581.23 1207.1 L1580.65 1207.1 L1580.06 1207.1 L1579.47 1207.1 L1578.89 1207.1 L1578.3 1207.1 L1577.72 1207.1 L1577.13 1207.1 L1576.54 1207.1 L1575.96 1207.1 L1575.37 1207.1 L1574.78 1207.1 L1574.2 1207.1 L1573.61 1207.1 L1573.02 1207.1 L1572.44 1207.1 L1571.85 1207.1 L1571.27 1207.1 L1570.68 1207.1 L1570.09 1207.1 L1569.51 1207.1 L1568.92 1207.1 L1568.33 1207.1 L1567.75 1207.1 L1567.16 1207.1 L1566.57 1207.1 L1565.99 1207.1 L1565.4 1207.1 L1564.81 1207.1 L1564.23 1207.1 L1563.64 1207.1 L1563.06 1207.1 L1562.47 1207.1 L1561.88 1207.1 L1561.3 1207.1 L1560.71 1207.1 L1560.12 1207.1 L1559.54 1207.1 L1558.95 1207.1 L1558.36 1207.1 L1557.78 1207.1 L1557.19 1207.1 L1556.6 1207.1 L1556.02 1207.1 L1555.43 1207.1 L1554.85 1207.1 L1554.26 1207.1 L1553.67 1207.1 L1553.09 1207.1 L1552.5 1207.1 L1551.91 1207.1 L1551.33 1207.1 L1550.74 1207.1 L1550.15 1207.1 L1549.57 1207.1 L1548.98 1207.1 L1548.4 1207.1 L1547.81 1207.1 L1547.22 1207.1 L1546.64 1207.1 L1546.05 1207.1 L1545.46 1207.1 L1544.88 1207.1 L1544.29 1207.1 L1543.7 1207.1 L1543.12 1207.1 L1542.53 1207.1 L1541.94 1207.1 L1541.36 1207.1 L1540.77 1207.1 L1540.19 1207.1 L1539.6 1207.1 L1539.01 1207.1 L1538.43 1207.1 L1537.84 1207.1 L1537.25 1207.1 L1536.67 1207.1 L1536.08 1207.1 L1535.49 1207.1 L1534.91 1207.1 L1534.32 1207.1 L1533.73 1207.1 L1533.15 1207.1 L1532.56 1207.1 L1531.98 1207.1 L1531.39 1207.1 L1530.8 1207.1 L1530.22 1207.1 L1529.63 1207.1 L1529.04 1207.1 L1528.46 1207.1 L1527.87 1207.1 L1527.28 1207.1 L1526.7 1207.1 L1526.11 1207.1 L1525.52 1207.1 L1524.94 1207.1 L1524.35 1207.1 L1523.77 1207.1 L1523.18 1207.1 L1522.59 1207.1 L1522.01 1207.1 L1521.42 1207.1 L1520.83 1207.1 L1520.25 1207.1 L1519.66 1207.1 L1519.07 1207.1 L1518.49 1207.1 L1517.9 1207.1 L1517.32 1207.1 L1516.73 1207.1 L1516.14 1207.1 L1515.56 1207.1 L1514.97 1207.1 L1514.38 1207.1 L1513.8 1207.1 L1513.21 1207.1 L1512.62 1207.1 L1512.04 1207.1 L1511.45 1207.1 L1510.86 1207.1 L1510.28 1207.1 L1509.69 1207.1 L1509.11 1207.1 L1508.52 1207.1 L1507.93 1207.1 L1507.35 1207.1 L1506.76 1207.1 L1506.17 1207.1 L1505.59 1207.1 L1505 1207.1 L1504.41 1207.1 L1503.83 1207.1 L1503.24 1207.1 L1502.65 1207.1 L1502.07 1207.1 L1501.48 1207.1 L1500.9 1207.1 L1500.31 1207.1 L1499.72 1207.1 L1499.14 1207.1 L1498.55 1207.1 L1497.96 1207.1 L1497.38 1207.1 L1496.79 1207.1 L1496.2 1207.1 L1495.62 1207.1 L1495.03 1207.1 L1494.45 1207.1 L1493.86 1207.1 L1493.27 1207.1 L1492.69 1207.1 L1492.1 1207.1 L1491.51 1207.1 L1490.93 1207.1 L1490.34 1207.1 L1489.75 1207.1 L1489.17 1207.1 L1488.58 1207.1 L1487.99 1207.1 L1487.41 1207.1 L1486.82 1207.1 L1486.24 1207.1 L1485.65 1207.1 L1485.06 1207.1 L1484.48 1207.1 L1483.89 1207.1 L1483.3 1207.1 L1482.72 1207.1 L1482.13 1207.1 L1481.54 1207.1 L1480.96 1207.1 L1480.37 1207.1 L1479.78 1207.1 L1479.2 1207.1 L1478.61 1207.1 L1478.03 1207.1 L1477.44 1207.1 L1476.85 1207.1 L1476.27 1207.1 L1475.68 1207.1 L1475.09 1207.1 L1474.51 1207.1 L1473.92 1207.1 L1473.33 1207.1 L1472.75 1207.1 L1472.16 1207.1 L1471.57 1207.1 L1470.99 1207.1 L1470.4 1207.1 L1469.82 1207.1 L1469.23 1207.1 L1468.64 1207.1 L1468.06 1207.1 L1467.47 1207.1 L1466.88 1207.1 L1466.3 1207.1 L1465.71 1207.1 L1465.12 1207.1 L1464.54 1207.1 L1463.95 1207.1 L1463.37 1207.1 L1462.78 1207.1 L1462.19 1207.1 L1461.61 1207.1 L1461.02 1207.1 L1460.43 1207.1 L1459.85 1207.1 L1459.26 1207.1 L1458.67 1207.1 L1458.09 1207.1 L1457.5 1207.1 L1456.91 1207.1 L1456.33 1207.1 L1455.74 1207.1 L1455.16 1207.1 L1454.57 1207.1 L1453.98 1207.1 L1453.4 1207.1 L1452.81 1207.1 L1452.22 1207.1 L1451.64 1207.1 L1451.05 1207.1 L1450.46 1207.1 L1449.88 1207.1 L1449.29 1207.1 L1448.7 1207.1 L1448.12 1207.1 L1447.53 1207.1 L1446.95 1207.1 L1446.36 1207.1 L1445.77 1207.1 L1445.19 1207.1 L1444.6 1207.1 L1444.01 1207.1 L1443.43 1207.1 L1442.84 1207.1 L1442.25 1207.1 L1441.67 1207.1 L1441.08 1207.1 L1440.5 1207.1 L1439.91 1207.1 L1439.32 1207.1 L1438.74 1207.1 L1438.15 1207.1 L1437.56 1207.1 L1436.98 1207.1 L1436.39 1207.1 L1435.8 1207.1 L1435.22 1207.1 L1434.63 1207.1 L1434.04 1207.1 L1433.46 1207.1 L1432.87 1207.1 L1432.29 1207.1 L1431.7 1207.1 L1431.11 1207.1 L1430.53 1207.1 L1429.94 1207.1 L1429.35 1207.1 L1428.77 1207.1 L1428.18 1207.1 L1427.59 1207.1 L1427.01 1207.1 L1426.42 1207.1 L1425.83 1207.1 L1425.25 1207.1 L1424.66 1207.1 L1424.08 1207.1 L1423.49 1207.1 L1422.9 1207.1 L1422.32 1207.1 L1421.73 1207.1 L1421.14 1207.1 L1420.56 1207.1 L1419.97 1207.1 L1419.38 1207.1 L1418.8 1207.1 L1418.21 1207.1 L1417.63 1207.1 L1417.04 1207.1 L1416.45 1207.1 L1415.87 1207.1 L1415.28 1207.1 L1414.69 1207.1 L1414.11 1207.1 L1413.52 1207.1 L1412.93 1207.1 L1412.35 1207.1 L1411.76 1207.1 L1411.17 1207.1 L1410.59 1207.1 L1410 1207.1 L1409.42 1207.1 L1408.83 1207.1 L1408.24 1207.1 L1407.66 1207.1 L1407.07 1207.1 L1406.48 1207.1 L1405.9 1207.1 L1405.31 1207.1 L1404.72 1207.1 L1404.14 1207.1 L1403.55 1207.1 L1402.96 1207.1 L1402.38 1207.1 L1401.79 1207.1 L1401.21 1207.1 L1400.62 1207.1 L1400.03 1207.1 L1399.45 1207.1 L1398.86 1207.1 L1398.27 1207.1 L1397.69 1207.1 L1397.1 1207.1 L1396.51 1207.1 L1395.93 1207.1 L1395.34 1207.1 L1394.75 1207.1 L1394.17 1207.1 L1393.58 1207.1 L1393 1207.1 L1392.41 1207.1 L1391.82 1207.1 L1391.24 1207.1 L1390.65 1207.1 L1390.06 1207.1 L1389.48 1207.1 L1388.89 1207.1 L1388.3 1207.1 L1387.72 1207.1 L1387.13 1207.1 L1386.55 1207.1 L1385.96 1207.1 L1385.37 1207.1 L1384.79 1207.1 L1384.2 1207.1 L1383.61 1207.1 L1383.03 1207.1 L1382.44 1207.1 L1381.85 1207.1 L1381.27 1207.1 L1380.68 1207.1 L1380.09 1207.1 L1379.51 1207.1 L1378.92 1207.1 L1378.34 1207.1 L1377.75 1207.1 L1377.16 1207.1 L1376.58 1207.1 L1375.99 1207.1 L1375.4 1207.1 L1374.82 1207.1 L1374.23 1207.1 L1373.64 1207.1 L1373.06 1207.1 L1372.47 1207.1 L1371.88 1207.1 L1371.3 1207.1 L1370.71 1207.1 L1370.13 1207.1 L1369.54 1207.1 L1368.95 1207.1 L1368.37 1207.1 L1367.78 1207.1 L1367.19 1207.1 L1366.61 1207.1 L1366.02 1207.1 L1365.43 1207.1 L1364.85 1207.1 L1364.26 1207.1 L1363.68 1207.1 L1363.09 1207.1 L1362.5 1207.1 L1361.92 1207.1 L1361.33 1207.1 L1360.74 1207.1 L1360.16 1207.1 L1359.57 1207.1 L1358.98 1207.1 L1358.4 1207.1 L1357.81 1207.1 L1357.22 1207.1 L1356.64 1207.1 L1356.05 1207.1 L1355.47 1207.1 L1354.88 1207.1 L1354.29 1207.1 L1353.71 1207.1 L1353.12 1207.1 L1352.53 1207.1 L1351.95 1207.1 L1351.36 1207.1 L1350.77 1207.1 L1350.19 1207.1 L1349.6 1207.1 L1349.01 1207.1 L1348.43 1207.1 L1347.84 1207.1 L1347.26 1207.1 L1346.67 1207.1 L1346.08 1207.1 L1345.5 1207.1 L1344.91 1207.1 L1344.32 1207.1 L1343.74 1207.1 L1343.15 1207.1 L1342.56 1207.1 L1341.98 1207.1 L1341.39 1207.1 L1340.8 1207.1 L1340.22 1207.1 L1339.63 1207.1 L1339.05 1207.1 L1338.46 1207.1 L1337.87 1207.1 L1337.29 1207.1 L1336.7 1207.1 L1336.11 1207.1 L1335.53 1207.1 L1334.94 1207.1 L1334.35 1207.1 L1333.77 1207.1 L1333.18 1207.1 L1332.6 1207.1 L1332.01 1207.1 L1331.42 1207.1 L1330.84 1207.1 L1330.25 1207.1 L1329.66 1207.1 L1329.08 1207.1 L1328.49 1207.1 L1327.9 1207.1 L1327.32 1207.1 L1326.73 1207.1 L1326.14 1207.1 L1325.56 1207.1 L1324.97 1207.1 L1324.39 1207.1 L1323.8 1207.1 L1323.21 1207.1 L1322.63 1207.1 L1322.04 1207.1 L1321.45 1207.1 L1320.87 1207.1 L1320.28 1207.1 L1319.69 1207.1 L1319.11 1207.1 L1318.52 1207.1 L1317.93 1207.1 L1317.35 1207.1 L1316.76 1207.1 L1316.18 1207.1 L1315.59 1207.1 L1315 1207.1 L1314.42 1207.1 L1313.83 1207.1 L1313.24 1207.1 L1312.66 1207.1 L1312.07 1207.1 L1311.48 1207.1 L1310.9 1207.1 L1310.31 1207.1 L1309.73 1207.1 L1309.14 1207.1 L1308.55 1207.1 L1307.97 1207.1 L1307.38 1207.1 L1306.79 1207.1 L1306.21 1207.1 L1305.62 1207.1 L1305.03 1207.1 L1304.45 1207.1 L1303.86 1207.1 L1303.27 1207.1 L1302.69 1207.1 L1302.1 1207.1 L1301.52 1207.1 L1300.93 1207.1 L1300.34 1207.1 L1299.76 1207.1 L1299.17 1207.1 L1298.58 1207.1 L1298 1207.1 L1297.41 1207.1 L1296.82 1207.1 L1296.24 1207.1 L1295.65 1207.1 L1295.06 1207.1 L1294.48 1207.1 L1293.89 1207.1 L1293.31 1207.1 L1292.72 1207.1 L1292.13 1207.1 L1291.55 1207.1 L1290.96 1207.1 L1290.37 1207.1 L1289.79 1207.1 L1289.2 1207.1 L1288.61 1207.1 L1288.03 1207.1 L1287.44 1207.1 L1286.86 1207.1 L1286.27 1207.1 L1285.68 1207.1 L1285.1 1207.1 L1284.51 1207.1 L1283.92 1207.1 L1283.34 1207.1 L1282.75 1207.1 L1282.16 1207.1 L1281.58 1207.1 L1280.99 1207.1 L1280.4 1207.1 L1279.82 1207.1 L1279.23 1207.1 L1278.65 1207.1 L1278.06 1207.1 L1277.47 1207.1 L1276.89 1207.1 L1276.3 1207.1 L1275.71 1207.1 L1275.13 1207.1 L1274.54 1207.1 L1273.95 1207.1 L1273.37 1207.1 L1272.78 1207.1 L1272.19 1207.1 L1271.61 1207.1 L1271.02 1207.1 L1270.44 1207.1 L1269.85 1207.1 L1269.26 1207.1 L1268.68 1207.1 L1268.09 1207.1 L1267.5 1207.1 L1266.92 1207.1 L1266.33 1207.1 L1265.74 1207.1 L1265.16 1207.1 L1264.57 1207.1 L1263.98 1207.1 L1263.4 1207.1 L1262.81 1207.1 L1262.23 1207.1 L1261.64 1207.1 L1261.05 1207.1 L1260.47 1207.1 L1259.88 1207.1 L1259.29 1207.1 L1258.71 1207.1 L1258.12 1207.1 L1257.53 1207.1 L1256.95 1207.1 L1256.36 1207.1 L1255.78 1207.1 L1255.19 1207.1 L1254.6 1207.1 L1254.02 1207.1 L1253.43 1207.1 L1252.84 1207.1 L1252.26 1207.1 L1251.67 1207.1 L1251.08 1207.1 L1250.5 1207.1 L1249.91 1207.1 L1249.32 1207.1 L1248.74 1207.1 L1248.15 1207.1 L1247.57 1207.1 L1246.98 1207.1 L1246.39 1207.1 L1245.81 1207.1 L1245.22 1207.1 L1244.63 1207.1 L1244.05 1207.1 L1243.46 1207.1 L1242.87 1207.1 L1242.29 1207.1 L1241.7 1207.1 L1241.11 1207.1 L1240.53 1207.1 L1239.94 1207.1 L1239.36 1207.1 L1238.77 1207.1 L1238.18 1207.1 L1237.6 1207.1 L1237.01 1207.1 L1236.42 1207.1 L1235.84 1207.1 L1235.25 1207.1 L1234.66 1207.1 L1234.08 1207.1 L1233.49 1207.1 L1232.91 1207.1 L1232.32 1207.1 L1231.73 1207.1 L1231.15 1207.1 L1230.56 1207.1 L1229.97 1207.1 L1229.39 1207.1 L1228.8 1207.1 L1228.21 1207.1 L1227.63 1207.1 L1227.04 1207.1 L1226.45 1207.1 L1225.87 1207.1 L1225.28 1207.1 L1224.7 1207.1 L1224.11 1207.1 L1223.52 1207.1 L1222.94 1207.1 L1222.35 1207.1 L1221.76 1207.1 L1221.18 1207.1 L1220.59 1207.1 L1220 1207.1 L1219.42 1207.1 L1218.83 1207.1 L1218.24 1207.1 L1217.66 1207.1 L1217.07 1207.1 L1216.49 1207.1 L1215.9 1207.1 L1215.31 1207.1 L1214.73 1207.1 L1214.14 1207.1 L1213.55 1207.1 L1212.97 1207.1 L1212.38 1207.1 L1211.79 1207.1 L1211.21 1207.1 L1210.62 1207.1 L1210.03 1207.1 L1209.45 1207.1 L1208.86 1207.1 L1208.28 1207.1 L1207.69 1207.1 L1207.1 1207.1 L1206.52 1207.1 L1205.93 1207.1 L1205.34 1207.1 L1204.76 1207.1 L1204.17 1207.1 L1203.58 1207.1 L1203 1207.1 L1202.41 1207.1 L1201.83 1207.1 L1201.24 1207.1 L1200.65 1207.1 L1200.07 1207.1 L1199.48 1207.1 L1198.89 1207.1 L1198.31 1207.1 L1197.72 1207.1 L1197.13 1207.1 L1196.55 1207.1 L1195.96 1207.1 L1195.37 1207.1 L1194.79 1207.1 L1194.2 1207.1 L1193.62 1207.1 L1193.03 1207.1 L1192.44 1207.1 L1191.86 1207.1 L1191.27 1207.1 L1190.68 1207.1 L1190.1 1207.1 L1189.51 1207.1 L1188.92 1207.1 L1188.34 1207.1 L1187.75 1207.1 L1187.16 1207.1 L1186.58 1207.1 L1185.99 1207.1 L1185.41 1207.1 L1184.82 1207.1 L1184.23 1207.1 L1183.65 1207.1 L1183.06 1207.1 L1182.47 1207.1 L1181.89 1207.1 L1181.3 1207.1 L1180.71 1207.1 L1180.13 1207.1 L1179.54 1207.1 L1178.96 1207.1 L1178.37 1207.1 L1177.78 1207.1 L1177.2 1207.1 L1176.61 1207.1 L1176.02 1207.1 L1175.44 1207.1 L1174.85 1207.1 L1174.26 1207.1 L1173.68 1207.1 L1173.09 1207.1 L1172.5 1207.1 L1171.92 1207.1 L1171.33 1207.1 L1170.75 1207.1 L1170.16 1207.1 L1169.57 1207.1 L1168.99 1207.1 L1168.4 1207.1 L1167.81 1207.1 L1167.23 1207.1 L1166.64 1207.1 L1166.05 1207.1 L1165.47 1207.1 L1164.88 1207.1 L1164.29 1207.1 L1163.71 1207.1 L1163.12 1207.1 L1162.54 1207.1 L1161.95 1207.1 L1161.36 1207.1 L1160.78 1207.1 L1160.19 1207.1 L1159.6 1207.1 L1159.02 1207.1 L1158.43 1207.1 L1157.84 1207.1 L1157.26 1207.1 L1156.67 1207.1 L1156.09 1207.1 L1155.5 1207.1 L1154.91 1207.1 L1154.33 1207.1 L1153.74 1207.1 L1153.15 1207.1 L1152.57 1207.1 L1151.98 1207.1 L1151.39 1207.1 L1150.81 1207.1 L1150.22 1207.1 L1149.63 1207.1 L1149.05 1207.1 L1148.46 1207.1 L1147.88 1207.1 L1147.29 1207.1 L1146.7 1207.1 L1146.12 1207.1 L1145.53 1207.1 L1144.94 1207.1 L1144.36 1207.1 L1143.77 1207.1 L1143.18 1207.1 L1142.6 1207.1 L1142.01 1207.1 L1141.42 1207.1 L1140.84 1207.1 L1140.25 1207.1 L1139.67 1207.1 L1139.08 1207.1 L1138.49 1207.1 L1137.91 1207.1 L1137.32 1207.1 L1136.73 1207.1 L1136.15 1207.1 L1135.56 1207.1 L1134.97 1207.1 L1134.39 1207.1 L1133.8 1207.1 L1133.21 1207.1 L1132.63 1207.1 L1132.04 1207.1 L1131.46 1207.1 L1130.87 1207.1 L1130.28 1207.1 L1129.7 1207.1 L1129.11 1207.1 L1128.52 1207.1 L1127.94 1207.1 L1127.35 1207.1 L1126.76 1207.1 L1126.18 1207.1 L1125.59 1207.1 L1125.01 1207.1 L1124.42 1207.1 L1123.83 1207.1 L1123.25 1207.1 L1122.66 1207.1 L1122.07 1207.1 L1121.49 1207.1 L1120.9 1207.1 L1120.31 1207.1 L1119.73 1207.1 L1119.14 1207.1 L1118.55 1207.1 L1117.97 1207.1 L1117.38 1207.1 L1116.8 1207.1 L1116.21 1207.1 L1115.62 1207.1 L1115.04 1207.1 L1114.45 1207.1 L1113.86 1207.1 L1113.28 1207.1 L1112.69 1207.1 L1112.1 1207.1 L1111.52 1207.1 L1110.93 1207.1 L1110.34 1207.1 L1109.76 1207.1 L1109.17 1207.1 L1108.59 1207.1 L1108 1207.1 L1107.41 1207.1 L1106.83 1207.1 L1106.24 1207.1 L1105.65 1207.1 L1105.07 1207.1 L1104.48 1207.1 L1103.89 1207.1 L1103.31 1207.1 L1102.72 1207.1 L1102.14 1207.1 L1101.55 1207.1 L1100.96 1207.1 L1100.38 1207.1 L1099.79 1207.1 L1099.2 1207.1 L1098.62 1207.1 L1098.03 1207.1 L1097.44 1207.1 L1096.86 1207.1 L1096.27 1207.1 L1095.68 1207.1 L1095.1 1207.1 L1094.51 1207.1 L1093.93 1207.1 L1093.34 1207.1 L1092.75 1207.1 L1092.17 1207.1 L1091.58 1207.1 L1090.99 1207.1 L1090.41 1207.1 L1089.82 1207.1 L1089.23 1207.1 L1088.65 1207.1 L1088.06 1207.1 L1087.47 1207.1 L1086.89 1207.1 L1086.3 1207.1 L1085.72 1207.1 L1085.13 1207.1 L1084.54 1207.1 L1083.96 1207.1 L1083.37 1207.1 L1082.78 1207.1 L1082.2 1207.1 L1081.61 1207.1 L1081.02 1207.1 L1080.44 1207.1 L1079.85 1207.1 L1079.26 1207.1 L1078.68 1207.1 L1078.09 1207.1 L1077.51 1207.1 L1076.92 1207.1 L1076.33 1207.1 L1075.75 1207.1 L1075.16 1207.1 L1074.57 1207.1 L1073.99 1207.1 L1073.4 1207.1 L1072.81 1207.1 L1072.23 1207.1 L1071.64 1207.1 L1071.06 1207.1 L1070.47 1207.1 L1069.88 1207.1 L1069.3 1207.1 L1068.71 1207.1 L1068.12 1207.1 L1067.54 1207.1 L1066.95 1207.1 L1066.36 1207.1 L1065.78 1207.1 L1065.19 1207.1 L1064.6 1207.1 L1064.02 1207.1 L1063.43 1207.1 L1062.85 1207.1 L1062.26 1207.1 L1061.67 1207.1 L1061.09 1207.1 L1060.5 1207.1 L1059.91 1207.1 L1059.33 1207.1 L1058.74 1207.1 L1058.15 1207.1 L1057.57 1207.1 L1056.98 1207.1 L1056.39 1207.1 L1055.81 1207.1 L1055.22 1207.1 L1054.64 1207.1 L1054.05 1207.1 L1053.46 1207.1 L1052.88 1207.1 L1052.29 1207.1 L1051.7 1207.1 L1051.12 1207.1 L1050.53 1207.1 L1049.94 1207.1 L1049.36 1207.1 L1048.77 1207.1 L1048.19 1207.1 L1047.6 1207.1 L1047.01 1207.1 L1046.43 1207.1 L1045.84 1207.1 L1045.25 1207.1 L1044.67 1207.1 L1044.08 1207.1 L1043.49 1207.1 L1042.91 1207.1 L1042.32 1207.1 L1041.73 1207.1 L1041.15 1207.1 L1040.56 1207.1 L1039.98 1207.1 L1039.39 1207.1 L1038.8 1207.1 L1038.22 1207.1 L1037.63 1207.1 L1037.04 1207.1 L1036.46 1207.1 L1035.87 1207.1 L1035.28 1207.1 L1034.7 1207.1 L1034.11 1207.1 L1033.52 1207.1 L1032.94 1207.1 L1032.35 1207.1 L1031.77 1207.1 L1031.18 1207.1 L1030.59 1207.1 L1030.01 1207.1 L1029.42 1207.1 L1028.83 1207.1 L1028.25 1207.1 L1027.66 1207.1 L1027.07 1207.1 L1026.49 1207.1 L1025.9 1207.1 L1025.32 1207.1 L1024.73 1207.1 L1024.14 1207.1 L1023.56 1207.1 L1022.97 1207.1 L1022.38 1207.1 L1021.8 1207.1 L1021.21 1207.1 L1020.62 1207.1 L1020.04 1207.1 L1019.45 1207.1 L1018.86 1207.1 L1018.28 1207.1 L1017.69 1207.1 L1017.11 1207.1 L1016.52 1207.1 L1015.93 1207.1 L1015.35 1207.1 L1014.76 1207.1 L1014.17 1207.1 L1013.59 1207.1 L1013 1207.1 L1012.41 1207.1 L1011.83 1207.1 L1011.24 1207.1 L1010.65 1207.1 L1010.07 1207.1 L1009.48 1207.1 L1008.9 1207.1 L1008.31 1207.1 L1007.72 1207.1 L1007.14 1207.1 L1006.55 1207.1 L1005.96 1207.1 L1005.38 1207.1 L1004.79 1207.1 L1004.2 1207.1 L1003.62 1207.1 L1003.03 1207.1 L1002.44 1207.1 L1001.86 1207.1 L1001.27 1207.1 L1000.69 1207.1 L1000.1 1207.1 L999.513 1207.1 L998.926 1207.1 L998.34 1207.1 L997.754 1207.1 L997.167 1207.1 L996.581 1207.1 L995.994 1207.1 L995.408 1207.1 L994.822 1207.1 L994.235 1207.1 L993.649 1207.1 L993.062 1207.1 L992.476 1207.1 L991.889 1207.1 L991.303 1207.1 L990.717 1207.1 L990.13 1207.1 L989.544 1207.1 L988.957 1207.1 L988.371 1207.1 L987.785 1207.1 L987.198 1207.1 L986.612 1207.1 L986.025 1207.1  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1207.5 986.612,1207.5 987.198,1207.5 987.785,1207.5 988.371,1207.5 988.957,1207.5 989.544,1207.5 990.13,1207.5 990.717,1207.5 991.303,1207.5 991.889,1207.5 992.476,1207.5 993.062,1207.5 993.649,1207.5 994.235,1207.5 994.822,1207.5 995.408,1207.5 995.994,1207.5 996.581,1207.5 997.167,1207.5 997.754,1207.5 998.34,1207.5 998.926,1207.5 999.513,1207.5 1000.1,1207.5 1000.69,1207.5 1001.27,1207.5 1001.86,1207.5 1002.44,1207.5 1003.03,1207.5 1003.62,1207.5 1004.2,1207.5 1004.79,1207.5 1005.38,1207.5 1005.96,1207.5 1006.55,1207.5 1007.14,1207.5 1007.72,1207.5 1008.31,1207.5 1008.9,1207.5 1009.48,1207.5 1010.07,1207.5 1010.65,1207.5 1011.24,1207.5 1011.83,1207.5 1012.41,1207.5 1013,1207.5 1013.59,1207.5 1014.17,1207.5 1014.76,1207.5 1015.35,1207.5 1015.93,1207.5 1016.52,1207.5 1017.11,1207.5 1017.69,1207.5 1018.28,1207.5 1018.86,1207.5 1019.45,1207.5 1020.04,1207.5 1020.62,1207.5 1021.21,1207.5 1021.8,1207.5 1022.38,1207.5 1022.97,1207.5 1023.56,1207.5 1024.14,1207.5 1024.73,1207.5 1025.32,1207.5 1025.9,1207.5 1026.49,1207.5 1027.07,1207.5 1027.66,1207.5 1028.25,1207.5 1028.83,1207.5 1029.42,1207.5 1030.01,1207.5 1030.59,1207.5 1031.18,1207.5 1031.77,1207.5 1032.35,1207.5 1032.94,1207.5 1033.52,1207.5 1034.11,1207.5 1034.7,1207.5 1035.28,1207.5 1035.87,1207.5 1036.46,1207.5 1037.04,1207.5 1037.63,1207.5 1038.22,1207.5 1038.8,1207.5 1039.39,1207.5 1039.98,1207.5 1040.56,1207.5 1041.15,1207.5 1041.73,1207.5 1042.32,1207.5 1042.91,1207.5 1043.49,1207.5 1044.08,1207.5 1044.67,1207.5 1045.25,1207.5 1045.84,1207.5 1046.43,1207.5 1047.01,1207.5 1047.6,1207.5 1048.19,1207.5 1048.77,1207.5 1049.36,1207.5 1049.94,1207.5 1050.53,1207.5 1051.12,1207.5 1051.7,1207.5 1052.29,1207.5 1052.88,1207.5 1053.46,1207.5 1054.05,1207.5 1054.64,1207.5 1055.22,1207.5 1055.81,1207.5 1056.39,1207.5 1056.98,1207.5 1057.57,1207.5 1058.15,1207.5 1058.74,1207.5 1059.33,1207.5 1059.91,1207.5 1060.5,1207.5 1061.09,1207.5 1061.67,1207.5 1062.26,1207.5 1062.85,1207.5 1063.43,1207.5 1064.02,1207.5 1064.6,1207.5 1065.19,1207.5 1065.78,1207.5 1066.36,1207.5 1066.95,1207.5 1067.54,1207.5 1068.12,1207.5 1068.71,1207.5 1069.3,1207.5 1069.88,1207.5 1070.47,1207.5 1071.06,1207.5 1071.64,1207.5 1072.23,1207.5 1072.81,1207.5 1073.4,1207.5 1073.99,1207.5 1074.57,1207.5 1075.16,1207.5 1075.75,1207.5 1076.33,1207.5 1076.92,1207.5 1077.51,1207.5 1078.09,1207.5 1078.68,1207.5 1079.26,1207.5 1079.85,1207.5 1080.44,1207.5 1081.02,1207.5 1081.61,1207.5 1082.2,1207.5 1082.78,1207.5 1083.37,1207.5 1083.96,1207.5 1084.54,1207.5 1085.13,1207.5 1085.72,1207.5 1086.3,1207.5 1086.89,1207.5 1087.47,1207.5 1088.06,1207.5 1088.65,1207.5 1089.23,1207.5 1089.82,1207.5 1090.41,1207.5 1090.99,1207.5 1091.58,1207.5 1092.17,1207.5 1092.75,1207.5 1093.34,1207.5 1093.93,1207.5 1094.51,1207.5 1095.1,1207.5 1095.68,1207.5 1096.27,1207.5 1096.86,1207.5 1097.44,1207.5 1098.03,1207.5 1098.62,1207.5 1099.2,1207.5 1099.79,1207.5 1100.38,1207.5 1100.96,1207.5 1101.55,1207.5 1102.14,1207.5 1102.72,1207.5 1103.31,1207.5 1103.89,1207.5 1104.48,1207.5 1105.07,1207.5 1105.65,1207.5 1106.24,1207.5 1106.83,1207.5 1107.41,1207.5 1108,1207.5 1108.59,1207.5 1109.17,1207.5 1109.76,1207.5 1110.34,1207.5 1110.93,1207.5 1111.52,1207.5 1112.1,1207.5 1112.69,1207.5 1113.28,1207.5 1113.86,1207.5 1114.45,1207.5 1115.04,1207.5 1115.62,1207.5 1116.21,1207.5 1116.8,1207.5 1117.38,1207.5 1117.97,1207.5 1118.55,1207.5 1119.14,1207.5 1119.73,1207.5 1120.31,1207.5 1120.9,1207.5 1121.49,1207.5 1122.07,1207.5 1122.66,1207.5 1123.25,1207.5 1123.83,1207.5 1124.42,1207.5 1125.01,1207.5 1125.59,1207.5 1126.18,1207.5 1126.76,1207.5 1127.35,1207.5 1127.94,1207.5 1128.52,1207.5 1129.11,1207.5 1129.7,1207.5 1130.28,1207.5 1130.87,1207.5 1131.46,1207.5 1132.04,1207.5 1132.63,1207.5 1133.21,1207.5 1133.8,1207.5 1134.39,1207.5 1134.97,1207.5 1135.56,1207.5 1136.15,1207.5 1136.73,1207.5 1137.32,1207.5 1137.91,1207.5 1138.49,1207.5 1139.08,1207.5 1139.67,1207.5 1140.25,1207.5 1140.84,1207.5 1141.42,1207.5 1142.01,1207.5 1142.6,1207.5 1143.18,1207.5 1143.77,1207.5 1144.36,1207.5 1144.94,1207.5 1145.53,1207.5 1146.12,1207.5 1146.7,1207.5 1147.29,1207.5 1147.88,1207.5 1148.46,1207.5 1149.05,1207.5 1149.63,1207.5 1150.22,1207.5 1150.81,1207.5 1151.39,1207.5 1151.98,1207.5 1152.57,1207.5 1153.15,1207.5 1153.74,1207.5 1154.33,1207.5 1154.91,1207.5 1155.5,1207.5 1156.09,1207.5 1156.67,1207.5 1157.26,1207.5 1157.84,1207.5 1158.43,1207.5 1159.02,1207.5 1159.6,1207.5 1160.19,1207.5 1160.78,1207.5 1161.36,1207.5 1161.95,1207.5 1162.54,1207.5 1163.12,1207.5 1163.71,1207.5 1164.29,1207.5 1164.88,1207.5 1165.47,1207.5 1166.05,1207.5 1166.64,1207.5 1167.23,1207.5 1167.81,1207.5 1168.4,1207.5 1168.99,1207.5 1169.57,1207.5 1170.16,1207.5 1170.75,1207.5 1171.33,1207.5 1171.92,1207.5 1172.5,1207.5 1173.09,1207.5 1173.68,1207.5 1174.26,1207.5 1174.85,1207.5 1175.44,1207.5 1176.02,1207.5 1176.61,1207.5 1177.2,1207.5 1177.78,1207.5 1178.37,1207.5 1178.96,1207.5 1179.54,1207.5 1180.13,1207.5 1180.71,1207.5 1181.3,1207.5 1181.89,1207.5 1182.47,1207.5 1183.06,1207.5 1183.65,1207.5 1184.23,1207.5 1184.82,1207.5 1185.41,1207.5 1185.99,1207.5 1186.58,1207.5 1187.16,1207.5 1187.75,1207.5 1188.34,1207.5 1188.92,1207.5 1189.51,1207.5 1190.1,1207.5 1190.68,1207.5 1191.27,1207.5 1191.86,1207.5 1192.44,1207.5 1193.03,1207.5 1193.62,1207.5 1194.2,1207.5 1194.79,1207.5 1195.37,1207.5 1195.96,1207.5 1196.55,1207.5 1197.13,1207.5 1197.72,1207.5 1198.31,1207.5 1198.89,1207.5 1199.48,1207.5 1200.07,1207.5 1200.65,1207.5 1201.24,1207.5 1201.83,1207.5 1202.41,1207.5 1203,1207.5 1203.58,1207.5 1204.17,1207.5 1204.76,1207.5 1205.34,1207.5 1205.93,1207.5 1206.52,1207.5 1207.1,1207.5 1207.69,1207.5 1208.28,1207.5 1208.86,1207.5 1209.45,1207.5 1210.03,1207.5 1210.62,1207.5 1211.21,1207.5 1211.79,1207.5 1212.38,1207.5 1212.97,1207.5 1213.55,1207.5 1214.14,1207.5 1214.73,1207.5 1215.31,1207.5 1215.9,1207.5 1216.49,1207.5 1217.07,1207.5 1217.66,1207.5 1218.24,1207.5 1218.83,1207.5 1219.42,1207.5 1220,1207.5 1220.59,1207.5 1221.18,1207.5 1221.76,1207.5 1222.35,1207.5 1222.94,1207.5 1223.52,1207.5 1224.11,1207.5 1224.7,1207.5 1225.28,1207.5 1225.87,1207.5 1226.45,1207.5 1227.04,1207.5 1227.63,1207.5 1228.21,1207.5 1228.8,1207.5 1229.39,1207.5 1229.97,1207.5 1230.56,1207.5 1231.15,1207.5 1231.73,1207.5 1232.32,1207.5 1232.91,1207.5 1233.49,1207.5 1234.08,1207.5 1234.66,1207.5 1235.25,1207.5 1235.84,1207.5 1236.42,1207.5 1237.01,1207.5 1237.6,1207.5 1238.18,1207.5 1238.77,1207.5 1239.36,1207.5 1239.94,1207.5 1240.53,1207.5 1241.11,1207.5 1241.7,1207.5 1242.29,1207.5 1242.87,1207.5 1243.46,1207.5 1244.05,1207.5 1244.63,1207.5 1245.22,1207.5 1245.81,1207.5 1246.39,1207.5 1246.98,1207.5 1247.57,1207.5 1248.15,1207.5 1248.74,1207.5 1249.32,1207.5 1249.91,1207.5 1250.5,1207.5 1251.08,1207.5 1251.67,1207.5 1252.26,1207.5 1252.84,1207.5 1253.43,1207.5 1254.02,1207.5 1254.6,1207.5 1255.19,1207.5 1255.78,1207.5 1256.36,1207.5 1256.95,1207.5 1257.53,1207.5 1258.12,1207.5 1258.71,1207.5 1259.29,1207.5 1259.88,1207.5 1260.47,1207.5 1261.05,1207.5 1261.64,1207.5 1262.23,1207.5 1262.81,1207.5 1263.4,1207.5 1263.98,1207.5 1264.57,1207.5 1265.16,1207.5 1265.74,1207.5 1266.33,1207.5 1266.92,1207.5 1267.5,1207.5 1268.09,1207.5 1268.68,1207.5 1269.26,1207.5 1269.85,1207.5 1270.44,1207.5 1271.02,1207.5 1271.61,1207.5 1272.19,1207.5 1272.78,1207.5 1273.37,1207.5 1273.95,1207.5 1274.54,1207.5 1275.13,1207.5 1275.71,1207.5 1276.3,1207.5 1276.89,1207.5 1277.47,1207.5 1278.06,1207.5 1278.65,1207.5 1279.23,1207.5 1279.82,1207.5 1280.4,1207.5 1280.99,1207.5 1281.58,1207.5 1282.16,1207.5 1282.75,1207.5 1283.34,1207.5 1283.92,1207.5 1284.51,1207.5 1285.1,1207.5 1285.68,1207.5 1286.27,1207.5 1286.86,1207.5 1287.44,1207.5 1288.03,1207.5 1288.61,1207.5 1289.2,1207.5 1289.79,1207.5 1290.37,1207.5 1290.96,1207.5 1291.55,1207.5 1292.13,1207.5 1292.72,1207.5 1293.31,1207.5 1293.89,1207.5 1294.48,1207.5 1295.06,1207.5 1295.65,1207.5 1296.24,1207.5 1296.82,1207.5 1297.41,1207.5 1298,1207.5 1298.58,1207.5 1299.17,1207.5 1299.76,1207.5 1300.34,1207.5 1300.93,1207.5 1301.52,1207.5 1302.1,1207.5 1302.69,1207.5 1303.27,1207.5 1303.86,1207.5 1304.45,1207.5 1305.03,1207.5 1305.62,1207.5 1306.21,1207.5 1306.79,1207.5 1307.38,1207.5 1307.97,1207.5 1308.55,1207.5 1309.14,1207.5 1309.73,1207.5 1310.31,1207.5 1310.9,1207.5 1311.48,1207.5 1312.07,1207.5 1312.66,1207.5 1313.24,1207.5 1313.83,1207.5 1314.42,1207.5 1315,1207.5 1315.59,1207.5 1316.18,1207.5 1316.76,1207.5 1317.35,1207.5 1317.93,1207.5 1318.52,1207.5 1319.11,1207.5 1319.69,1207.5 1320.28,1207.5 1320.87,1207.5 1321.45,1207.5 1322.04,1207.5 1322.63,1207.5 1323.21,1207.5 1323.8,1207.5 1324.39,1207.5 1324.97,1207.5 1325.56,1207.5 1326.14,1207.5 1326.73,1207.5 1327.32,1207.5 1327.9,1207.5 1328.49,1207.5 1329.08,1207.5 1329.66,1207.5 1330.25,1207.5 1330.84,1207.5 1331.42,1207.5 1332.01,1207.5 1332.6,1207.5 1333.18,1207.5 1333.77,1207.5 1334.35,1207.5 1334.94,1207.5 1335.53,1207.5 1336.11,1207.5 1336.7,1207.5 1337.29,1207.5 1337.87,1207.5 1338.46,1207.5 1339.05,1207.5 1339.63,1207.5 1340.22,1207.5 1340.8,1207.5 1341.39,1207.5 1341.98,1207.5 1342.56,1207.5 1343.15,1207.5 1343.74,1207.5 1344.32,1207.5 1344.91,1207.5 1345.5,1207.5 1346.08,1207.5 1346.67,1207.5 1347.26,1207.5 1347.84,1207.5 1348.43,1207.5 1349.01,1207.5 1349.6,1207.5 1350.19,1207.5 1350.77,1207.5 1351.36,1207.5 1351.95,1207.5 1352.53,1207.5 1353.12,1207.5 1353.71,1207.5 1354.29,1207.5 1354.88,1207.5 1355.47,1207.5 1356.05,1207.5 1356.64,1207.5 1357.22,1207.5 1357.81,1207.5 1358.4,1207.5 1358.98,1207.5 1359.57,1207.5 1360.16,1207.5 1360.74,1207.5 1361.33,1207.5 1361.92,1207.5 1362.5,1207.5 1363.09,1207.5 1363.68,1207.5 1364.26,1207.5 1364.85,1207.5 1365.43,1207.5 1366.02,1207.5 1366.61,1207.5 1367.19,1207.5 1367.78,1207.5 1368.37,1207.5 1368.95,1207.5 1369.54,1207.5 1370.13,1207.5 1370.71,1207.5 1371.3,1207.5 1371.88,1207.5 1372.47,1207.5 1373.06,1207.5 1373.64,1207.5 1374.23,1207.5 1374.82,1207.5 1375.4,1207.5 1375.99,1207.5 1376.58,1207.5 1377.16,1207.5 1377.75,1207.5 1378.34,1207.5 1378.92,1207.5 1379.51,1207.5 1380.09,1207.5 1380.68,1207.5 1381.27,1207.5 1381.85,1207.5 1382.44,1207.5 1383.03,1207.5 1383.61,1207.5 1384.2,1207.5 1384.79,1207.5 1385.37,1207.5 1385.96,1207.5 1386.55,1207.5 1387.13,1207.5 1387.72,1207.5 1388.3,1207.5 1388.89,1207.5 1389.48,1207.5 1390.06,1207.5 1390.65,1207.5 1391.24,1207.5 1391.82,1207.5 1392.41,1207.5 1393,1207.5 1393.58,1207.5 1394.17,1207.5 1394.75,1207.5 1395.34,1207.5 1395.93,1207.5 1396.51,1207.5 1397.1,1207.5 1397.69,1207.5 1398.27,1207.5 1398.86,1207.5 1399.45,1207.5 1400.03,1207.5 1400.62,1207.5 1401.21,1207.5 1401.79,1207.5 1402.38,1207.5 1402.96,1207.5 1403.55,1207.5 1404.14,1207.5 1404.72,1207.5 1405.31,1207.5 1405.9,1207.5 1406.48,1207.5 1407.07,1207.5 1407.66,1207.5 1408.24,1207.5 1408.83,1207.5 1409.42,1207.5 1410,1207.5 1410.59,1207.5 1411.17,1207.5 1411.76,1207.5 1412.35,1207.5 1412.93,1207.5 1413.52,1207.5 1414.11,1207.5 1414.69,1207.5 1415.28,1207.5 1415.87,1207.5 1416.45,1207.5 1417.04,1207.5 1417.63,1207.5 1418.21,1207.5 1418.8,1207.5 1419.38,1207.5 1419.97,1207.5 1420.56,1207.5 1421.14,1207.5 1421.73,1207.5 1422.32,1207.5 1422.9,1207.5 1423.49,1207.5 1424.08,1207.5 1424.66,1207.5 1425.25,1207.5 1425.83,1207.5 1426.42,1207.5 1427.01,1207.5 1427.59,1207.5 1428.18,1207.5 1428.77,1207.5 1429.35,1207.5 1429.94,1207.5 1430.53,1207.5 1431.11,1207.5 1431.7,1207.5 1432.29,1207.5 1432.87,1207.5 1433.46,1207.5 1434.04,1207.5 1434.63,1207.5 1435.22,1207.5 1435.8,1207.5 1436.39,1207.5 1436.98,1207.5 1437.56,1207.5 1438.15,1207.5 1438.74,1207.5 1439.32,1207.5 1439.91,1207.5 1440.5,1207.5 1441.08,1207.5 1441.67,1207.5 1442.25,1207.5 1442.84,1207.5 1443.43,1207.5 1444.01,1207.5 1444.6,1207.5 1445.19,1207.5 1445.77,1207.5 1446.36,1207.5 1446.95,1207.5 1447.53,1207.5 1448.12,1207.5 1448.7,1207.5 1449.29,1207.5 1449.88,1207.5 1450.46,1207.5 1451.05,1207.5 1451.64,1207.5 1452.22,1207.5 1452.81,1207.5 1453.4,1207.5 1453.98,1207.5 1454.57,1207.5 1455.16,1207.5 1455.74,1207.5 1456.33,1207.5 1456.91,1207.5 1457.5,1207.5 1458.09,1207.5 1458.67,1207.5 1459.26,1207.5 1459.85,1207.5 1460.43,1207.5 1461.02,1207.5 1461.61,1207.5 1462.19,1207.5 1462.78,1207.5 1463.37,1207.5 1463.95,1207.5 1464.54,1207.5 1465.12,1207.5 1465.71,1207.5 1466.3,1207.5 1466.88,1207.5 1467.47,1207.5 1468.06,1207.5 1468.64,1207.5 1469.23,1207.5 1469.82,1207.5 1470.4,1207.5 1470.99,1207.5 1471.57,1207.5 1472.16,1207.5 1472.75,1207.5 1473.33,1207.5 1473.92,1207.5 1474.51,1207.5 1475.09,1207.5 1475.68,1207.5 1476.27,1207.5 1476.85,1207.5 1477.44,1207.5 1478.03,1207.5 1478.61,1207.5 1479.2,1207.5 1479.78,1207.5 1480.37,1207.5 1480.96,1207.5 1481.54,1207.5 1482.13,1207.5 1482.72,1207.5 1483.3,1207.5 1483.89,1207.5 1484.48,1207.5 1485.06,1207.5 1485.65,1207.5 1486.24,1207.5 1486.82,1207.5 1487.41,1207.5 1487.99,1207.5 1488.58,1207.5 1489.17,1207.5 1489.75,1207.5 1490.34,1207.5 1490.93,1207.5 1491.51,1207.5 1492.1,1207.5 1492.69,1207.5 1493.27,1207.5 1493.86,1207.5 1494.45,1207.5 1495.03,1207.5 1495.62,1207.5 1496.2,1207.5 1496.79,1207.5 1497.38,1207.5 1497.96,1207.5 1498.55,1207.5 1499.14,1207.5 1499.72,1207.5 1500.31,1207.5 1500.9,1207.5 1501.48,1207.5 1502.07,1207.5 1502.65,1207.5 1503.24,1207.5 1503.83,1207.5 1504.41,1207.5 1505,1207.5 1505.59,1207.5 1506.17,1207.5 1506.76,1207.5 1507.35,1207.5 1507.93,1207.5 1508.52,1207.5 1509.11,1207.5 1509.69,1207.5 1510.28,1207.5 1510.86,1207.5 1511.45,1207.5 1512.04,1207.5 1512.62,1207.5 1513.21,1207.5 1513.8,1207.5 1514.38,1207.5 1514.97,1207.5 1515.56,1207.5 1516.14,1207.5 1516.73,1207.5 1517.32,1207.5 1517.9,1207.5 1518.49,1207.5 1519.07,1207.5 1519.66,1207.5 1520.25,1207.5 1520.83,1207.5 1521.42,1207.5 1522.01,1207.5 1522.59,1207.5 1523.18,1207.5 1523.77,1207.5 1524.35,1207.5 1524.94,1207.5 1525.52,1207.5 1526.11,1207.5 1526.7,1207.5 1527.28,1207.5 1527.87,1207.5 1528.46,1207.5 1529.04,1207.5 1529.63,1207.5 1530.22,1207.5 1530.8,1207.5 1531.39,1207.5 1531.98,1207.5 1532.56,1207.5 1533.15,1207.5 1533.73,1207.5 1534.32,1207.5 1534.91,1207.5 1535.49,1207.5 1536.08,1207.5 1536.67,1207.5 1537.25,1207.5 1537.84,1207.5 1538.43,1207.5 1539.01,1207.5 1539.6,1207.5 1540.19,1207.5 1540.77,1207.5 1541.36,1207.5 1541.94,1207.5 1542.53,1207.5 1543.12,1207.5 1543.7,1207.5 1544.29,1207.5 1544.88,1207.5 1545.46,1207.5 1546.05,1207.5 1546.64,1207.5 1547.22,1207.5 1547.81,1207.5 1548.4,1207.5 1548.98,1207.5 1549.57,1207.5 1550.15,1207.5 1550.74,1207.5 1551.33,1207.5 1551.91,1207.5 1552.5,1207.5 1553.09,1207.5 1553.67,1207.5 1554.26,1207.5 1554.85,1207.5 1555.43,1207.5 1556.02,1207.5 1556.6,1207.5 1557.19,1207.5 1557.78,1207.5 1558.36,1207.5 1558.95,1207.5 1559.54,1207.5 1560.12,1207.5 1560.71,1207.5 1561.3,1207.5 1561.88,1207.5 1562.47,1207.5 1563.06,1207.5 1563.64,1207.5 1564.23,1207.5 1564.81,1207.5 1565.4,1207.5 1565.99,1207.5 1566.57,1207.5 1567.16,1207.5 1567.75,1207.5 1568.33,1207.5 1568.92,1207.5 1569.51,1207.5 1570.09,1207.5 1570.68,1207.5 1571.27,1207.5 1571.85,1207.5 1572.44,1207.5 1573.02,1207.5 1573.61,1207.5 1574.2,1207.5 1574.78,1207.5 1575.37,1207.5 1575.96,1207.5 1576.54,1207.5 1577.13,1207.5 1577.72,1207.5 1578.3,1207.5 1578.89,1207.5 1579.47,1207.5 1580.06,1207.5 1580.65,1207.5 1581.23,1207.5 1581.82,1207.5 1582.41,1207.5 1582.99,1207.5 1583.58,1207.5 1584.17,1207.5 1584.75,1207.5 1585.34,1207.5 1585.93,1207.5 1586.51,1207.5 1587.1,1207.5 1587.68,1207.5 1588.27,1207.5 1588.86,1207.5 1589.44,1207.5 1590.03,1207.5 1590.62,1207.5 1591.2,1207.5 1591.79,1207.5 1592.38,1207.5 1592.96,1207.5 1593.55,1207.5 1594.14,1207.5 1594.72,1207.5 1595.31,1207.5 1595.89,1207.5 1596.48,1207.5 1597.07,1207.5 1597.65,1207.5 1598.24,1207.5 1598.83,1207.5 1599.41,1207.5 1600,1207.5 1600.59,1207.5 1601.17,1207.5 1601.76,1207.5 1602.34,1207.5 1602.93,1207.5 1603.52,1207.5 1604.1,1207.5 1604.69,1207.5 1605.28,1207.5 1605.86,1207.5 1606.45,1207.5 1607.04,1207.5 1607.62,1207.5 1608.21,1207.5 1608.8,1207.5 1609.38,1207.5 1609.97,1207.5 1610.55,1207.5 1611.14,1207.5 1611.73,1207.5 1612.31,1207.5 1612.9,1207.5 1613.49,1207.5 1614.07,1207.5 1614.66,1207.5 1615.25,1207.5 1615.83,1207.5 1616.42,1207.5 1617.01,1207.5 1617.59,1207.5 1618.18,1207.5 1618.76,1207.5 1619.35,1207.5 1619.94,1207.5 1620.52,1207.5 1621.11,1207.5 1621.7,1207.5 1622.28,1207.5 1622.87,1207.5 1623.46,1207.5 1624.04,1207.5 1624.63,1207.5 1625.22,1207.5 1625.8,1207.5 1626.39,1207.5 1626.97,1207.5 1627.56,1207.5 1628.15,1207.5 1628.73,1207.5 1629.32,1207.5 1629.91,1207.5 1630.49,1207.5 1631.08,1207.5 1631.67,1207.5 1632.25,1207.5 1632.84,1207.5 1633.42,1207.5 1634.01,1207.5 1634.6,1207.5 1635.18,1207.5 1635.77,1207.5 1636.36,1207.5 1636.94,1207.5 1637.53,1207.5 1638.12,1207.5 1638.7,1207.5 1639.29,1207.5 1639.88,1207.5 1640.46,1207.5 1641.05,1207.5 1641.63,1207.5 1642.22,1207.5 1642.81,1207.5 1643.39,1207.5 1643.98,1207.5 1644.57,1207.5 1645.15,1207.5 1645.74,1207.5 1646.33,1207.5 1646.91,1207.5 1647.5,1207.5 1648.09,1207.5 1648.67,1207.5 1649.26,1207.5 1649.84,1207.5 1650.43,1207.5 1651.02,1207.5 1651.6,1207.5 1652.19,1207.5 1652.78,1207.5 1653.36,1207.5 1653.95,1207.5 1654.54,1207.5 1655.12,1207.5 1655.71,1207.5 1656.29,1207.5 1656.88,1207.5 1657.47,1207.5 1658.05,1207.5 1658.64,1207.5 1659.23,1207.5 1659.81,1207.5 1660.4,1207.5 1660.99,1207.5 1661.57,1207.5 1662.16,1207.5 1662.75,1207.5 1663.33,1207.5 1663.92,1207.5 1664.5,1207.5 1665.09,1207.5 1665.68,1207.5 1666.26,1207.5 1666.85,1207.5 1667.44,1207.5 1668.02,1207.5 1668.61,1207.5 1669.2,1207.5 1669.78,1207.5 1670.37,1207.5 1670.96,1207.5 1671.54,1207.5 1672.13,1207.5 1672.71,1207.5 1673.3,1207.5 1673.89,1207.5 1674.47,1207.5 1675.06,1207.5 1675.65,1207.5 1676.23,1207.5 1676.82,1207.5 1677.41,1207.5 1677.99,1207.5 1678.58,1207.5 1679.17,1207.5 1679.75,1207.5 1680.34,1207.5 1680.92,1207.5 1681.51,1207.5 1682.1,1207.5 1682.68,1207.5 1683.27,1207.5 1683.86,1207.5 1684.44,1207.5 1685.03,1207.5 1685.62,1207.5 1686.2,1207.5 1686.79,1207.5 1687.37,1207.5 1687.96,1207.5 1688.55,1207.5 1689.13,1207.5 1689.72,1207.5 1690.31,1207.5 1690.89,1207.5 1691.48,1207.5 1692.07,1207.5 1692.65,1207.5 1693.24,1207.5 1693.83,1207.5 1694.41,1207.5 1695,1207.5 1695.58,1207.5 1696.17,1207.5 1696.76,1207.5 1697.34,1207.5 1697.93,1207.5 1698.52,1207.5 1699.1,1207.5 1699.69,1207.5 1700.28,1207.5 1700.86,1207.5 1701.45,1207.5 1702.04,1207.5 1702.62,1207.5 1703.21,1207.5 1703.79,1207.5 1704.38,1207.5 1704.97,1207.5 1705.55,1207.5 1706.14,1207.5 1706.73,1207.5 1707.31,1207.5 1707.9,1207.5 1708.49,1207.5 1709.07,1207.5 1709.66,1207.5 1710.24,1207.5 1710.83,1207.5 1711.42,1207.5 1712,1207.5 1712.59,1207.5 1713.18,1207.5 1713.76,1207.5 1714.35,1207.5 1714.94,1207.5 1715.52,1207.5 1716.11,1207.5 1716.7,1207.5 1717.28,1207.5 1717.87,1207.5 1718.45,1207.5 1719.04,1207.5 1719.63,1207.5 1720.21,1207.5 1720.8,1207.5 1721.39,1207.5 1721.97,1207.5 1722.56,1207.5 1723.15,1207.5 1723.73,1207.5 1724.32,1207.5 1724.91,1207.5 1725.49,1207.5 1726.08,1207.5 1726.66,1207.5 1727.25,1207.5 1727.84,1207.5 1728.42,1207.5 1729.01,1207.5 1729.6,1207.5 1730.18,1207.5 1730.77,1207.5 1731.36,1207.5 1731.94,1207.5 1732.53,1207.5 1733.11,1207.5 1733.7,1207.5 1734.29,1207.5 1734.87,1207.5 1735.46,1207.5 1736.05,1207.5 1736.63,1207.5 1737.22,1207.5 1737.81,1207.5 1738.39,1207.5 1738.98,1207.5 1739.57,1207.5 1740.15,1207.5 1740.74,1207.5 1741.32,1207.5 1741.91,1207.5 1742.5,1207.5 1743.08,1207.5 1743.67,1207.5 1744.26,1207.5 1744.84,1207.5 1745.43,1207.5 1746.02,1207.5 1746.6,1207.5 1747.19,1207.5 1747.78,1207.5 1748.36,1207.5 1748.95,1207.5 1749.53,1207.5 1750.12,1207.5 1750.71,1207.5 1751.29,1207.5 1751.88,1207.5 1752.47,1207.5 1753.05,1207.5 1753.64,1207.5 1754.23,1207.5 1754.81,1207.5 1755.4,1207.5 1755.99,1207.5 1756.57,1207.5 1757.16,1207.5 1757.74,1207.5 1758.33,1207.5 1758.92,1207.5 1759.5,1207.5 1760.09,1207.5 1760.68,1207.5 1761.26,1207.5 1761.85,1207.5 1762.44,1207.5 1763.02,1207.5 1763.61,1207.5 1764.19,1207.5 1764.78,1207.5 1765.37,1207.5 1765.95,1207.5 1766.54,1207.5 1767.13,1207.5 1767.71,1207.5 1768.3,1207.5 1768.89,1207.5 1769.47,1207.5 1770.06,1207.5 1770.65,1207.5 1771.23,1207.5 1771.82,1207.5 1772.4,1207.5 1772.99,1207.5 1773.58,1207.5 1774.16,1207.5 1774.75,1207.5 1775.34,1207.5 1775.92,1207.5 1776.51,1207.5 1777.1,1207.5 1777.68,1207.5 1778.27,1207.5 1778.86,1207.5 1779.44,1207.5 1780.03,1207.5 1780.61,1207.5 1781.2,1207.5 1781.79,1207.5 1782.37,1207.5 1782.96,1207.5 1783.55,1207.5 1784.13,1207.5 1784.72,1207.5 1785.31,1207.5 1785.89,1207.5 1786.48,1207.5 1787.06,1207.5 1787.65,1207.5 1788.24,1207.5 1788.82,1207.5 1789.41,1207.5 1790,1207.5 1790.58,1207.5 1791.17,1207.5 1791.76,1207.5 1792.34,1207.5 1792.93,1207.5 1793.52,1207.5 1794.1,1207.5 1794.69,1207.5 1795.27,1207.5 1795.86,1207.5 1796.45,1207.5 1797.03,1207.5 1797.62,1207.5 1798.21,1207.5 1798.79,1207.5 1799.38,1207.5 1799.97,1207.5 1800.55,1207.5 1801.14,1207.5 1801.73,1207.5 1802.31,1207.5 1802.9,1207.5 1803.48,1207.5 1804.07,1207.5 1804.66,1207.5 1805.24,1207.5 1805.83,1207.5 1806.42,1207.5 1807,1207.5 1807.59,1207.5 1808.18,1207.5 1808.76,1207.5 1809.35,1207.5 1809.94,1207.5 1810.52,1207.5 1811.11,1207.5 1811.69,1207.5 1812.28,1207.5 1812.87,1207.5 1813.45,1207.5 1814.04,1207.5 1814.63,1207.5 1815.21,1207.5 1815.8,1207.5 1816.39,1207.5 1816.97,1207.5 1817.56,1207.5 1818.14,1207.5 1818.73,1207.5 1819.32,1207.5 1819.9,1207.5 1820.49,1207.5 1821.08,1207.5 1821.66,1207.5 1822.25,1207.5 1822.84,1207.5 1823.42,1207.5 1824.01,1207.5 1824.6,1207.5 1825.18,1207.5 1825.77,1207.5 1826.35,1207.5 1826.94,1207.5 1827.53,1207.5 1828.11,1207.5 1828.7,1207.5 1829.29,1207.5 1829.87,1207.5 1830.46,1207.5 1831.05,1207.5 1831.63,1207.5 1832.22,1207.5 1832.81,1207.5 1833.39,1207.5 1833.98,1207.5 1834.56,1207.5 1835.15,1207.5 1835.74,1207.5 1836.32,1207.5 1836.91,1207.5 1837.5,1207.5 1838.08,1207.5 1838.67,1207.5 1839.26,1207.5 1839.84,1207.5 1840.43,1207.5 1841.01,1207.5 1841.6,1207.5 1842.19,1207.5 1842.77,1207.5 1843.36,1207.5 1843.95,1207.5 1844.53,1207.5 1845.12,1207.5 1845.71,1207.5 1846.29,1207.5 1846.88,1207.5 1847.47,1207.5 1848.05,1207.5 1848.64,1207.5 1849.22,1207.5 1849.81,1207.5 1850.4,1207.5 1850.98,1207.5 1851.57,1207.5 1852.16,1207.5 1852.74,1207.5 1853.33,1207.5 1853.92,1207.5 1854.5,1207.5 1855.09,1207.5 1855.68,1207.5 1856.26,1207.5 1856.85,1207.5 1857.43,1207.5 1858.02,1207.5 1858.61,1207.5 1859.19,1207.5 1859.78,1207.5 1860.37,1207.5 1860.95,1207.5 1861.54,1207.5 1862.13,1207.5 1862.71,1207.5 1863.3,1207.5 1863.88,1207.5 1864.47,1207.5 1865.06,1207.5 1865.64,1207.5 1866.23,1207.5 1866.82,1207.5 1867.4,1207.5 1867.99,1207.5 1868.58,1207.5 1869.16,1207.5 1869.75,1207.5 1870.34,1207.5 1870.92,1207.5 1871.51,1207.5 1872.09,1207.5 1872.68,1207.5 1873.27,1207.5 1873.85,1207.5 1874.44,1207.5 1875.03,1207.5 1875.61,1207.5 1876.2,1207.5 1876.79,1207.5 1877.37,1207.5 1877.96,1207.5 1878.55,1207.5 1879.13,1207.5 1879.72,1207.5 1880.3,1207.5 1880.89,1207.5 1881.48,1207.5 1882.06,1207.5 1882.65,1207.5 1883.24,1207.5 1883.82,1207.5 1884.41,1207.5 1885,1207.5 1885.58,1207.5 1886.17,1207.5 1886.76,1207.5 1887.34,1207.5 1887.93,1207.5 1888.51,1207.5 1889.1,1207.5 1889.69,1207.5 1890.27,1207.5 1890.86,1207.5 1891.45,1207.5 1892.03,1207.5 1892.62,1207.5 1893.21,1207.5 1893.79,1207.5 1894.38,1207.5 1894.96,1207.5 1895.55,1207.5 1896.14,1207.5 1896.72,1207.5 1897.31,1207.5 1897.9,1207.5 1898.48,1207.5 1899.07,1207.5 1899.66,1207.5 1900.24,1207.5 1900.83,1207.5 1901.42,1207.5 1902,1207.5 1902.59,1207.5 1903.17,1207.5 1903.76,1207.5 1904.35,1207.5 1904.93,1207.5 1905.52,1207.5 1906.11,1207.5 1906.69,1207.5 1907.28,1207.5 1907.87,1207.5 1908.45,1207.5 1909.04,1207.5 1909.63,1207.5 1910.21,1207.5 1910.8,1207.5 1911.38,1207.5 1911.97,1207.5 1912.56,1207.5 1913.14,1207.5 1913.73,1207.5 1914.32,1207.5 1914.9,1207.5 1915.49,1207.5 1916.08,1207.5 1916.66,1207.5 1917.25,1207.5 1917.83,1207.5 1918.42,1207.5 1919.01,1207.5 1919.59,1207.5 1920.18,1207.5 1920.77,1207.5 1921.35,1207.5 1921.94,1207.5 1922.53,1207.5 1923.11,1207.5 1923.7,1207.5 1924.29,1207.5 1924.87,1207.5 1925.46,1207.5 1926.04,1207.5 1926.63,1207.5 1927.22,1207.5 1927.8,1207.5 1928.39,1207.5 1928.98,1207.5 1929.56,1207.5 1930.15,1207.5 1930.74,1207.5 1931.32,1207.5 1931.91,1207.5 1932.5,1207.5 1933.08,1207.5 1933.67,1207.5 1934.25,1207.5 1934.84,1207.5 1935.43,1207.5 1936.01,1207.5 1936.6,1207.5 1937.19,1207.5 1937.77,1207.5 1938.36,1207.5 1938.95,1207.5 1939.53,1207.5 1940.12,1207.5 1940.71,1207.5 1941.29,1207.5 1941.88,1207.5 1942.46,1207.5 1943.05,1207.5 1943.64,1207.5 1944.22,1207.5 1944.81,1207.5 1945.4,1207.5 1945.98,1207.5 1946.57,1207.5 1947.16,1207.5 1947.74,1207.5 1948.33,1207.5 1948.91,1207.5 1949.5,1207.5 1950.09,1207.5 1950.67,1207.5 1951.26,1207.5 1951.85,1207.5 1952.43,1207.5 1953.02,1207.5 1953.61,1207.5 1954.19,1207.5 1954.78,1207.5 1955.37,1207.5 1955.95,1207.5 1956.54,1207.5 1957.12,1207.5 1957.71,1207.5 1958.3,1207.5 1958.88,1207.5 1959.47,1207.5 1960.06,1207.5 1960.64,1207.5 1961.23,1207.5 1961.82,1207.5 1962.4,1207.5 1962.99,1207.5 1963.58,1207.5 1964.16,1207.5 1964.75,1207.5 1965.33,1207.5 1965.92,1207.5 1966.51,1207.5 1967.09,1207.5 1967.68,1207.5 1968.27,1207.5 1968.85,1207.5 1969.44,1207.5 1970.03,1207.5 1970.61,1207.5 1971.2,1207.5 1971.78,1207.5 1972.37,1207.5 1972.96,1207.5 1973.54,1207.5 1974.13,1207.5 1974.72,1207.5 1975.3,1207.5 1975.89,1207.5 1976.48,1207.5 1977.06,1207.5 1977.65,1207.5 1978.24,1207.5 1978.82,1207.5 1979.41,1207.5 1979.99,1207.5 1980.58,1207.5 1981.17,1207.5 1981.75,1207.5 1982.34,1207.5 1982.93,1207.5 1983.51,1207.5 1984.1,1207.5 1984.69,1207.5 1985.27,1207.5 1985.86,1207.5 1986.45,1207.5 1987.03,1207.5 1987.62,1207.5 1988.2,1207.5 1988.79,1207.5 1989.38,1207.5 1989.96,1207.5 1990.55,1207.5 1991.14,1207.5 1991.72,1207.5 1992.31,1207.5 1992.9,1207.5 1993.48,1207.5 1994.07,1207.5 1994.65,1207.5 1995.24,1207.5 1995.83,1207.5 1996.41,1207.5 1997,1207.5 1997.59,1207.5 1998.17,1207.5 1998.76,1207.5 1999.35,1207.5 1999.93,1207.5 2000.52,1207.5 2001.11,1207.5 2001.69,1207.5 2002.28,1207.5 2002.86,1207.5 2003.45,1207.5 2004.04,1207.5 2004.62,1207.5 2005.21,1207.5 2005.8,1207.5 2006.38,1207.5 2006.97,1207.5 2007.56,1207.5 2008.14,1207.5 2008.73,1207.5 2009.32,1207.5 2009.9,1207.5 2010.49,1207.5 2011.07,1207.5 2011.66,1207.5 2012.25,1207.5 2012.83,1207.5 2013.42,1207.5 2014.01,1207.5 2014.59,1207.5 2015.18,1207.5 2015.77,1207.5 2016.35,1207.5 2016.94,1207.5 2017.53,1207.5 2018.11,1207.5 2018.7,1207.5 2019.28,1207.5 2019.87,1207.5 2020.46,1207.5 2021.04,1207.5 2021.63,1207.5 2022.22,1207.5 2022.8,1207.5 2023.39,1207.5 2023.98,1207.5 2024.56,1207.5 2025.15,1207.5 2025.73,1207.5 2026.32,1207.5 2026.91,1207.5 2027.49,1207.5 2028.08,1207.5 2028.67,1207.5 2029.25,1207.5 2029.84,1207.5 2030.43,1207.5 2031.01,1207.5 2031.6,1207.5 2032.19,1207.5 2032.77,1207.5 2033.36,1207.5 2033.94,1207.5 2034.53,1207.5 2035.12,1207.5 2035.7,1207.5 2036.29,1207.5 2036.88,1207.5 2037.46,1207.5 2038.05,1207.5 2038.64,1207.5 2039.22,1207.5 2039.81,1207.5 2040.4,1207.5 2040.98,1207.5 2041.57,1207.5 2042.15,1207.5 2042.74,1207.5 2043.33,1207.5 2043.91,1207.5 2044.5,1207.5 2045.09,1207.5 2045.67,1207.5 2046.26,1207.5 2046.85,1207.5 2047.43,1207.5 2048.02,1207.5 2048.6,1207.5 2049.19,1207.5 2049.78,1207.5 2050.36,1207.5 2050.95,1207.5 2051.54,1207.5 2052.12,1207.5 2052.71,1207.5 2053.3,1207.5 2053.88,1207.5 2054.47,1207.5 2055.06,1207.5 2055.64,1207.5 2056.23,1207.5 2056.81,1207.5 2057.4,1207.5 2057.99,1207.5 2058.57,1207.5 2059.16,1207.5 2059.75,1207.5 2060.33,1207.5 2060.92,1207.5 2061.51,1207.5 2062.09,1207.5 2062.68,1207.5 2063.27,1207.5 2063.85,1207.5 2064.44,1207.5 2065.02,1207.5 2065.61,1207.5 2066.2,1207.5 2066.78,1207.5 2067.37,1207.5 2067.96,1207.5 2068.54,1207.5 2069.13,1207.5 2069.72,1207.5 2070.3,1207.5 2070.89,1207.5 2071.48,1207.5 2072.06,1207.5 2072.65,1207.5 2073.23,1207.5 2073.82,1207.5 2074.41,1207.5 2074.99,1207.5 2075.58,1207.5 2076.17,1207.5 2076.75,1207.5 2077.34,1207.5 2077.93,1207.5 2078.51,1207.5 2079.1,1207.5 2079.68,1207.5 2080.27,1207.5 2080.86,1207.5 2081.44,1207.5 2082.03,1207.5 2082.62,1207.5 2083.2,1207.5 2083.79,1207.5 2084.38,1207.5 2084.96,1207.5 2085.55,1207.5 2086.14,1207.5 2086.72,1207.5 2087.31,1207.5 2087.89,1207.5 2088.48,1207.5 2089.07,1207.5 2089.65,1207.5 2090.24,1207.5 2090.83,1207.5 2091.41,1207.5 2092,1207.5 2092.59,1207.5 2093.17,1207.5 2093.76,1207.5 2094.35,1207.5 2094.93,1207.5 2095.52,1207.5 2096.1,1207.5 2096.69,1207.5 2097.28,1207.5 2097.86,1207.5 2098.45,1207.5 2099.04,1207.5 2099.62,1207.5 2100.21,1207.5 2100.8,1207.5 2101.38,1207.5 2101.97,1207.5 2102.55,1207.5 2103.14,1207.5 2103.73,1207.5 2104.31,1207.5 2104.9,1207.5 2105.49,1207.5 2106.07,1207.5 2106.66,1207.5 2107.25,1207.5 2107.83,1207.5 2108.42,1207.5 2109.01,1207.5 2109.59,1207.5 2110.18,1207.5 2110.76,1207.5 2111.35,1207.5 2111.94,1207.5 2112.52,1207.5 2113.11,1207.5 2113.7,1207.5 2114.28,1207.5 2114.87,1207.5 2115.46,1207.5 2116.04,1207.5 2116.63,1207.5 2117.22,1207.5 2117.8,1207.5 2118.39,1207.5 2118.97,1207.5 2119.56,1207.5 2120.15,1207.5 2120.73,1207.5 2121.32,1207.5 2121.91,1207.5 2122.49,1207.5 2123.08,1207.5 2123.67,1207.5 2124.25,1207.5 2124.84,1207.5 2125.42,1207.5 2126.01,1207.5 2126.6,1207.5 2127.18,1207.5 2127.77,1207.5 2128.36,1207.5 2128.94,1207.5 2129.53,1207.5 2130.12,1207.5 2130.7,1207.5 2131.29,1207.5 2131.88,1207.5 2132.46,1207.5 2133.05,1207.5 2133.63,1207.5 2134.22,1207.5 2134.81,1207.5 2135.39,1207.5 2135.98,1207.5 2136.57,1207.5 2137.15,1207.5 2137.74,1207.5 2138.33,1207.5 2138.91,1207.5 2139.5,1207.5 2140.09,1207.5 2140.67,1207.5 2141.26,1207.5 2141.84,1207.5 2142.43,1207.5 2143.02,1207.5 2143.6,1207.5 2144.19,1207.5 2144.78,1207.5 2145.36,1207.5 2145.95,1207.5 2146.54,1207.5 2147.12,1207.5 2147.71,1207.5 2148.3,1207.5 2148.88,1207.5 2149.47,1207.5 2150.05,1207.5 2150.64,1207.5 2151.23,1207.5 2151.81,1207.5 2152.4,1207.5 2152.99,1207.5 2153.57,1207.5 2154.16,1207.5 2154.75,1207.5 2155.33,1207.5 2155.92,1207.5 2156.5,1207.5 2157.09,1207.5 2157.68,1207.5 2158.26,1207.5 \"/>\n<path clip-path=\"url(#clip942)\" d=\"M986.025 1207.28 L986.612 1207.28 L987.198 1207.28 L987.785 1207.28 L988.371 1207.28 L988.957 1207.28 L989.544 1207.28 L990.13 1207.28 L990.717 1207.28 L991.303 1207.28 L991.889 1207.28 L992.476 1207.28 L993.062 1207.28 L993.649 1207.28 L994.235 1207.28 L994.822 1207.28 L995.408 1207.28 L995.994 1207.28 L996.581 1207.28 L997.167 1207.28 L997.754 1207.28 L998.34 1207.28 L998.926 1207.28 L999.513 1207.28 L1000.1 1207.28 L1000.69 1207.28 L1001.27 1207.28 L1001.86 1207.28 L1002.44 1207.28 L1003.03 1207.28 L1003.62 1207.28 L1004.2 1207.28 L1004.79 1207.28 L1005.38 1207.28 L1005.96 1207.28 L1006.55 1207.28 L1007.14 1207.28 L1007.72 1207.28 L1008.31 1207.28 L1008.9 1207.28 L1009.48 1207.28 L1010.07 1207.28 L1010.65 1207.28 L1011.24 1207.28 L1011.83 1207.28 L1012.41 1207.28 L1013 1207.28 L1013.59 1207.28 L1014.17 1207.28 L1014.76 1207.28 L1015.35 1207.28 L1015.93 1207.28 L1016.52 1207.28 L1017.11 1207.28 L1017.69 1207.28 L1018.28 1207.28 L1018.86 1207.28 L1019.45 1207.28 L1020.04 1207.28 L1020.62 1207.28 L1021.21 1207.28 L1021.8 1207.28 L1022.38 1207.28 L1022.97 1207.28 L1023.56 1207.28 L1024.14 1207.28 L1024.73 1207.28 L1025.32 1207.28 L1025.9 1207.28 L1026.49 1207.28 L1027.07 1207.28 L1027.66 1207.28 L1028.25 1207.28 L1028.83 1207.28 L1029.42 1207.28 L1030.01 1207.28 L1030.59 1207.28 L1031.18 1207.28 L1031.77 1207.28 L1032.35 1207.28 L1032.94 1207.28 L1033.52 1207.28 L1034.11 1207.28 L1034.7 1207.28 L1035.28 1207.28 L1035.87 1207.28 L1036.46 1207.28 L1037.04 1207.28 L1037.63 1207.28 L1038.22 1207.28 L1038.8 1207.28 L1039.39 1207.28 L1039.98 1207.28 L1040.56 1207.28 L1041.15 1207.28 L1041.73 1207.28 L1042.32 1207.28 L1042.91 1207.28 L1043.49 1207.28 L1044.08 1207.28 L1044.67 1207.28 L1045.25 1207.28 L1045.84 1207.28 L1046.43 1207.28 L1047.01 1207.28 L1047.6 1207.28 L1048.19 1207.28 L1048.77 1207.28 L1049.36 1207.28 L1049.94 1207.28 L1050.53 1207.28 L1051.12 1207.28 L1051.7 1207.28 L1052.29 1207.28 L1052.88 1207.28 L1053.46 1207.28 L1054.05 1207.28 L1054.64 1207.28 L1055.22 1207.28 L1055.81 1207.28 L1056.39 1207.28 L1056.98 1207.28 L1057.57 1207.28 L1058.15 1207.28 L1058.74 1207.28 L1059.33 1207.28 L1059.91 1207.28 L1060.5 1207.28 L1061.09 1207.28 L1061.67 1207.28 L1062.26 1207.28 L1062.85 1207.28 L1063.43 1207.28 L1064.02 1207.28 L1064.6 1207.28 L1065.19 1207.28 L1065.78 1207.28 L1066.36 1207.28 L1066.95 1207.28 L1067.54 1207.28 L1068.12 1207.28 L1068.71 1207.28 L1069.3 1207.28 L1069.88 1207.28 L1070.47 1207.28 L1071.06 1207.28 L1071.64 1207.28 L1072.23 1207.28 L1072.81 1207.28 L1073.4 1207.28 L1073.99 1207.28 L1074.57 1207.28 L1075.16 1207.28 L1075.75 1207.28 L1076.33 1207.28 L1076.92 1207.28 L1077.51 1207.28 L1078.09 1207.28 L1078.68 1207.28 L1079.26 1207.28 L1079.85 1207.28 L1080.44 1207.28 L1081.02 1207.28 L1081.61 1207.28 L1082.2 1207.28 L1082.78 1207.28 L1083.37 1207.28 L1083.96 1207.28 L1084.54 1207.28 L1085.13 1207.28 L1085.72 1207.28 L1086.3 1207.28 L1086.89 1207.28 L1087.47 1207.28 L1088.06 1207.28 L1088.65 1207.28 L1089.23 1207.28 L1089.82 1207.28 L1090.41 1207.28 L1090.99 1207.28 L1091.58 1207.28 L1092.17 1207.28 L1092.75 1207.28 L1093.34 1207.28 L1093.93 1207.28 L1094.51 1207.28 L1095.1 1207.28 L1095.68 1207.28 L1096.27 1207.28 L1096.86 1207.28 L1097.44 1207.28 L1098.03 1207.28 L1098.62 1207.28 L1099.2 1207.28 L1099.79 1207.28 L1100.38 1207.28 L1100.96 1207.28 L1101.55 1207.28 L1102.14 1207.28 L1102.72 1207.28 L1103.31 1207.28 L1103.89 1207.28 L1104.48 1207.28 L1105.07 1207.28 L1105.65 1207.28 L1106.24 1207.28 L1106.83 1207.28 L1107.41 1207.28 L1108 1207.28 L1108.59 1207.28 L1109.17 1207.28 L1109.76 1207.28 L1110.34 1207.28 L1110.93 1207.28 L1111.52 1207.28 L1112.1 1207.28 L1112.69 1207.28 L1113.28 1207.28 L1113.86 1207.28 L1114.45 1207.28 L1115.04 1207.28 L1115.62 1207.28 L1116.21 1207.28 L1116.8 1207.28 L1117.38 1207.28 L1117.97 1207.28 L1118.55 1207.28 L1119.14 1207.28 L1119.73 1207.28 L1120.31 1207.28 L1120.9 1207.28 L1121.49 1207.28 L1122.07 1207.28 L1122.66 1207.28 L1123.25 1207.28 L1123.83 1207.28 L1124.42 1207.28 L1125.01 1207.28 L1125.59 1207.28 L1126.18 1207.28 L1126.76 1207.28 L1127.35 1207.28 L1127.94 1207.28 L1128.52 1207.28 L1129.11 1207.28 L1129.7 1207.28 L1130.28 1207.28 L1130.87 1207.28 L1131.46 1207.28 L1132.04 1207.28 L1132.63 1207.28 L1133.21 1207.28 L1133.8 1207.28 L1134.39 1207.28 L1134.97 1207.28 L1135.56 1207.28 L1136.15 1207.28 L1136.73 1207.28 L1137.32 1207.28 L1137.91 1207.28 L1138.49 1207.28 L1139.08 1207.28 L1139.67 1207.28 L1140.25 1207.28 L1140.84 1207.28 L1141.42 1207.28 L1142.01 1207.28 L1142.6 1207.28 L1143.18 1207.28 L1143.77 1207.28 L1144.36 1207.28 L1144.94 1207.28 L1145.53 1207.28 L1146.12 1207.28 L1146.7 1207.28 L1147.29 1207.28 L1147.88 1207.28 L1148.46 1207.28 L1149.05 1207.28 L1149.63 1207.28 L1150.22 1207.28 L1150.81 1207.28 L1151.39 1207.28 L1151.98 1207.28 L1152.57 1207.28 L1153.15 1207.28 L1153.74 1207.28 L1154.33 1207.28 L1154.91 1207.28 L1155.5 1207.28 L1156.09 1207.28 L1156.67 1207.28 L1157.26 1207.28 L1157.84 1207.28 L1158.43 1207.28 L1159.02 1207.28 L1159.6 1207.28 L1160.19 1207.28 L1160.78 1207.28 L1161.36 1207.28 L1161.95 1207.28 L1162.54 1207.28 L1163.12 1207.28 L1163.71 1207.28 L1164.29 1207.28 L1164.88 1207.28 L1165.47 1207.28 L1166.05 1207.28 L1166.64 1207.28 L1167.23 1207.28 L1167.81 1207.28 L1168.4 1207.28 L1168.99 1207.28 L1169.57 1207.28 L1170.16 1207.28 L1170.75 1207.28 L1171.33 1207.28 L1171.92 1207.28 L1172.5 1207.28 L1173.09 1207.28 L1173.68 1207.28 L1174.26 1207.28 L1174.85 1207.28 L1175.44 1207.28 L1176.02 1207.28 L1176.61 1207.28 L1177.2 1207.28 L1177.78 1207.28 L1178.37 1207.28 L1178.96 1207.28 L1179.54 1207.28 L1180.13 1207.28 L1180.71 1207.28 L1181.3 1207.28 L1181.89 1207.28 L1182.47 1207.28 L1183.06 1207.28 L1183.65 1207.28 L1184.23 1207.28 L1184.82 1207.28 L1185.41 1207.28 L1185.99 1207.28 L1186.58 1207.28 L1187.16 1207.28 L1187.75 1207.28 L1188.34 1207.28 L1188.92 1207.28 L1189.51 1207.28 L1190.1 1207.28 L1190.68 1207.28 L1191.27 1207.28 L1191.86 1207.28 L1192.44 1207.28 L1193.03 1207.28 L1193.62 1207.28 L1194.2 1207.28 L1194.79 1207.28 L1195.37 1207.28 L1195.96 1207.28 L1196.55 1207.28 L1197.13 1207.28 L1197.72 1207.28 L1198.31 1207.28 L1198.89 1207.28 L1199.48 1207.28 L1200.07 1207.28 L1200.65 1207.28 L1201.24 1207.28 L1201.83 1207.28 L1202.41 1207.28 L1203 1207.28 L1203.58 1207.28 L1204.17 1207.28 L1204.76 1207.28 L1205.34 1207.28 L1205.93 1207.28 L1206.52 1207.28 L1207.1 1207.28 L1207.69 1207.28 L1208.28 1207.28 L1208.86 1207.28 L1209.45 1207.28 L1210.03 1207.28 L1210.62 1207.28 L1211.21 1207.28 L1211.79 1207.28 L1212.38 1207.28 L1212.97 1207.28 L1213.55 1207.28 L1214.14 1207.28 L1214.73 1207.28 L1215.31 1207.28 L1215.9 1207.28 L1216.49 1207.28 L1217.07 1207.28 L1217.66 1207.28 L1218.24 1207.28 L1218.83 1207.28 L1219.42 1207.28 L1220 1207.28 L1220.59 1207.28 L1221.18 1207.28 L1221.76 1207.28 L1222.35 1207.28 L1222.94 1207.28 L1223.52 1207.28 L1224.11 1207.28 L1224.7 1207.28 L1225.28 1207.28 L1225.87 1207.28 L1226.45 1207.28 L1227.04 1207.28 L1227.63 1207.28 L1228.21 1207.28 L1228.8 1207.28 L1229.39 1207.28 L1229.97 1207.28 L1230.56 1207.28 L1231.15 1207.28 L1231.73 1207.28 L1232.32 1207.28 L1232.91 1207.28 L1233.49 1207.28 L1234.08 1207.28 L1234.66 1207.28 L1235.25 1207.28 L1235.84 1207.28 L1236.42 1207.28 L1237.01 1207.28 L1237.6 1207.28 L1238.18 1207.28 L1238.77 1207.28 L1239.36 1207.28 L1239.94 1207.28 L1240.53 1207.28 L1241.11 1207.28 L1241.7 1207.28 L1242.29 1207.28 L1242.87 1207.28 L1243.46 1207.28 L1244.05 1207.28 L1244.63 1207.28 L1245.22 1207.28 L1245.81 1207.28 L1246.39 1207.28 L1246.98 1207.28 L1247.57 1207.28 L1248.15 1207.28 L1248.74 1207.28 L1249.32 1207.28 L1249.91 1207.28 L1250.5 1207.28 L1251.08 1207.28 L1251.67 1207.28 L1252.26 1207.28 L1252.84 1207.28 L1253.43 1207.28 L1254.02 1207.28 L1254.6 1207.28 L1255.19 1207.28 L1255.78 1207.28 L1256.36 1207.28 L1256.95 1207.28 L1257.53 1207.28 L1258.12 1207.28 L1258.71 1207.28 L1259.29 1207.28 L1259.88 1207.28 L1260.47 1207.28 L1261.05 1207.28 L1261.64 1207.28 L1262.23 1207.28 L1262.81 1207.28 L1263.4 1207.28 L1263.98 1207.28 L1264.57 1207.28 L1265.16 1207.28 L1265.74 1207.28 L1266.33 1207.28 L1266.92 1207.28 L1267.5 1207.28 L1268.09 1207.28 L1268.68 1207.28 L1269.26 1207.28 L1269.85 1207.28 L1270.44 1207.28 L1271.02 1207.28 L1271.61 1207.28 L1272.19 1207.28 L1272.78 1207.28 L1273.37 1207.28 L1273.95 1207.28 L1274.54 1207.28 L1275.13 1207.28 L1275.71 1207.28 L1276.3 1207.28 L1276.89 1207.28 L1277.47 1207.28 L1278.06 1207.28 L1278.65 1207.28 L1279.23 1207.28 L1279.82 1207.28 L1280.4 1207.28 L1280.99 1207.28 L1281.58 1207.28 L1282.16 1207.28 L1282.75 1207.28 L1283.34 1207.28 L1283.92 1207.28 L1284.51 1207.28 L1285.1 1207.28 L1285.68 1207.28 L1286.27 1207.28 L1286.86 1207.28 L1287.44 1207.28 L1288.03 1207.28 L1288.61 1207.28 L1289.2 1207.28 L1289.79 1207.28 L1290.37 1207.28 L1290.96 1207.28 L1291.55 1207.28 L1292.13 1207.28 L1292.72 1207.28 L1293.31 1207.28 L1293.89 1207.28 L1294.48 1207.28 L1295.06 1207.28 L1295.65 1207.28 L1296.24 1207.28 L1296.82 1207.28 L1297.41 1207.28 L1298 1207.28 L1298.58 1207.28 L1299.17 1207.28 L1299.76 1207.28 L1300.34 1207.28 L1300.93 1207.28 L1301.52 1207.28 L1302.1 1207.28 L1302.69 1207.28 L1303.27 1207.28 L1303.86 1207.28 L1304.45 1207.28 L1305.03 1207.28 L1305.62 1207.28 L1306.21 1207.28 L1306.79 1207.28 L1307.38 1207.28 L1307.97 1207.28 L1308.55 1207.28 L1309.14 1207.28 L1309.73 1207.28 L1310.31 1207.28 L1310.9 1207.28 L1311.48 1207.28 L1312.07 1207.28 L1312.66 1207.28 L1313.24 1207.28 L1313.83 1207.28 L1314.42 1207.28 L1315 1207.28 L1315.59 1207.28 L1316.18 1207.28 L1316.76 1207.28 L1317.35 1207.28 L1317.93 1207.28 L1318.52 1207.28 L1319.11 1207.28 L1319.69 1207.28 L1320.28 1207.28 L1320.87 1207.28 L1321.45 1207.28 L1322.04 1207.28 L1322.63 1207.28 L1323.21 1207.28 L1323.8 1207.28 L1324.39 1207.28 L1324.97 1207.28 L1325.56 1207.28 L1326.14 1207.28 L1326.73 1207.28 L1327.32 1207.28 L1327.9 1207.28 L1328.49 1207.28 L1329.08 1207.28 L1329.66 1207.28 L1330.25 1207.28 L1330.84 1207.28 L1331.42 1207.28 L1332.01 1207.28 L1332.6 1207.28 L1333.18 1207.28 L1333.77 1207.28 L1334.35 1207.28 L1334.94 1207.28 L1335.53 1207.28 L1336.11 1207.28 L1336.7 1207.28 L1337.29 1207.28 L1337.87 1207.28 L1338.46 1207.28 L1339.05 1207.28 L1339.63 1207.28 L1340.22 1207.28 L1340.8 1207.28 L1341.39 1207.28 L1341.98 1207.28 L1342.56 1207.28 L1343.15 1207.28 L1343.74 1207.28 L1344.32 1207.28 L1344.91 1207.28 L1345.5 1207.28 L1346.08 1207.28 L1346.67 1207.28 L1347.26 1207.28 L1347.84 1207.28 L1348.43 1207.28 L1349.01 1207.28 L1349.6 1207.28 L1350.19 1207.28 L1350.77 1207.28 L1351.36 1207.28 L1351.95 1207.28 L1352.53 1207.28 L1353.12 1207.28 L1353.71 1207.28 L1354.29 1207.28 L1354.88 1207.28 L1355.47 1207.28 L1356.05 1207.28 L1356.64 1207.28 L1357.22 1207.28 L1357.81 1207.28 L1358.4 1207.28 L1358.98 1207.28 L1359.57 1207.28 L1360.16 1207.28 L1360.74 1207.28 L1361.33 1207.28 L1361.92 1207.28 L1362.5 1207.28 L1363.09 1207.28 L1363.68 1207.28 L1364.26 1207.28 L1364.85 1207.28 L1365.43 1207.28 L1366.02 1207.28 L1366.61 1207.28 L1367.19 1207.28 L1367.78 1207.28 L1368.37 1207.28 L1368.95 1207.28 L1369.54 1207.28 L1370.13 1207.28 L1370.71 1207.28 L1371.3 1207.28 L1371.88 1207.28 L1372.47 1207.28 L1373.06 1207.28 L1373.64 1207.28 L1374.23 1207.28 L1374.82 1207.28 L1375.4 1207.28 L1375.99 1207.28 L1376.58 1207.28 L1377.16 1207.28 L1377.75 1207.28 L1378.34 1207.28 L1378.92 1207.28 L1379.51 1207.28 L1380.09 1207.28 L1380.68 1207.28 L1381.27 1207.28 L1381.85 1207.28 L1382.44 1207.28 L1383.03 1207.28 L1383.61 1207.28 L1384.2 1207.28 L1384.79 1207.28 L1385.37 1207.28 L1385.96 1207.28 L1386.55 1207.28 L1387.13 1207.28 L1387.72 1207.28 L1388.3 1207.28 L1388.89 1207.28 L1389.48 1207.28 L1390.06 1207.28 L1390.65 1207.28 L1391.24 1207.28 L1391.82 1207.28 L1392.41 1207.28 L1393 1207.28 L1393.58 1207.28 L1394.17 1207.28 L1394.75 1207.28 L1395.34 1207.28 L1395.93 1207.28 L1396.51 1207.28 L1397.1 1207.28 L1397.69 1207.28 L1398.27 1207.28 L1398.86 1207.28 L1399.45 1207.28 L1400.03 1207.28 L1400.62 1207.28 L1401.21 1207.28 L1401.79 1207.28 L1402.38 1207.28 L1402.96 1207.28 L1403.55 1207.28 L1404.14 1207.28 L1404.72 1207.28 L1405.31 1207.28 L1405.9 1207.28 L1406.48 1207.28 L1407.07 1207.28 L1407.66 1207.28 L1408.24 1207.28 L1408.83 1207.28 L1409.42 1207.28 L1410 1207.28 L1410.59 1207.28 L1411.17 1207.28 L1411.76 1207.28 L1412.35 1207.28 L1412.93 1207.28 L1413.52 1207.28 L1414.11 1207.28 L1414.69 1207.28 L1415.28 1207.28 L1415.87 1207.28 L1416.45 1207.28 L1417.04 1207.28 L1417.63 1207.28 L1418.21 1207.28 L1418.8 1207.28 L1419.38 1207.28 L1419.97 1207.28 L1420.56 1207.28 L1421.14 1207.28 L1421.73 1207.28 L1422.32 1207.28 L1422.9 1207.28 L1423.49 1207.28 L1424.08 1207.28 L1424.66 1207.28 L1425.25 1207.28 L1425.83 1207.28 L1426.42 1207.28 L1427.01 1207.28 L1427.59 1207.28 L1428.18 1207.28 L1428.77 1207.28 L1429.35 1207.28 L1429.94 1207.28 L1430.53 1207.28 L1431.11 1207.28 L1431.7 1207.28 L1432.29 1207.28 L1432.87 1207.28 L1433.46 1207.28 L1434.04 1207.28 L1434.63 1207.28 L1435.22 1207.28 L1435.8 1207.28 L1436.39 1207.28 L1436.98 1207.28 L1437.56 1207.28 L1438.15 1207.28 L1438.74 1207.28 L1439.32 1207.28 L1439.91 1207.28 L1440.5 1207.28 L1441.08 1207.28 L1441.67 1207.28 L1442.25 1207.28 L1442.84 1207.28 L1443.43 1207.28 L1444.01 1207.28 L1444.6 1207.28 L1445.19 1207.28 L1445.77 1207.28 L1446.36 1207.28 L1446.95 1207.28 L1447.53 1207.28 L1448.12 1207.28 L1448.7 1207.28 L1449.29 1207.28 L1449.88 1207.28 L1450.46 1207.28 L1451.05 1207.28 L1451.64 1207.28 L1452.22 1207.28 L1452.81 1207.28 L1453.4 1207.28 L1453.98 1207.28 L1454.57 1207.28 L1455.16 1207.28 L1455.74 1207.28 L1456.33 1207.28 L1456.91 1207.28 L1457.5 1207.28 L1458.09 1207.28 L1458.67 1207.28 L1459.26 1207.28 L1459.85 1207.28 L1460.43 1207.28 L1461.02 1207.28 L1461.61 1207.28 L1462.19 1207.28 L1462.78 1207.28 L1463.37 1207.28 L1463.95 1207.28 L1464.54 1207.28 L1465.12 1207.28 L1465.71 1207.28 L1466.3 1207.28 L1466.88 1207.28 L1467.47 1207.28 L1468.06 1207.28 L1468.64 1207.28 L1469.23 1207.28 L1469.82 1207.28 L1470.4 1207.28 L1470.99 1207.28 L1471.57 1207.28 L1472.16 1207.28 L1472.75 1207.28 L1473.33 1207.28 L1473.92 1207.28 L1474.51 1207.28 L1475.09 1207.28 L1475.68 1207.28 L1476.27 1207.28 L1476.85 1207.28 L1477.44 1207.28 L1478.03 1207.28 L1478.61 1207.28 L1479.2 1207.28 L1479.78 1207.28 L1480.37 1207.28 L1480.96 1207.28 L1481.54 1207.28 L1482.13 1207.28 L1482.72 1207.28 L1483.3 1207.28 L1483.89 1207.28 L1484.48 1207.28 L1485.06 1207.28 L1485.65 1207.28 L1486.24 1207.28 L1486.82 1207.28 L1487.41 1207.28 L1487.99 1207.28 L1488.58 1207.28 L1489.17 1207.28 L1489.75 1207.28 L1490.34 1207.28 L1490.93 1207.28 L1491.51 1207.28 L1492.1 1207.28 L1492.69 1207.28 L1493.27 1207.28 L1493.86 1207.28 L1494.45 1207.28 L1495.03 1207.28 L1495.62 1207.28 L1496.2 1207.28 L1496.79 1207.28 L1497.38 1207.28 L1497.96 1207.28 L1498.55 1207.28 L1499.14 1207.28 L1499.72 1207.28 L1500.31 1207.28 L1500.9 1207.28 L1501.48 1207.28 L1502.07 1207.28 L1502.65 1207.28 L1503.24 1207.28 L1503.83 1207.28 L1504.41 1207.28 L1505 1207.28 L1505.59 1207.28 L1506.17 1207.28 L1506.76 1207.28 L1507.35 1207.28 L1507.93 1207.28 L1508.52 1207.28 L1509.11 1207.28 L1509.69 1207.28 L1510.28 1207.28 L1510.86 1207.28 L1511.45 1207.28 L1512.04 1207.28 L1512.62 1207.28 L1513.21 1207.28 L1513.8 1207.28 L1514.38 1207.28 L1514.97 1207.28 L1515.56 1207.28 L1516.14 1207.28 L1516.73 1207.28 L1517.32 1207.28 L1517.9 1207.28 L1518.49 1207.28 L1519.07 1207.28 L1519.66 1207.28 L1520.25 1207.28 L1520.83 1207.28 L1521.42 1207.28 L1522.01 1207.28 L1522.59 1207.28 L1523.18 1207.28 L1523.77 1207.28 L1524.35 1207.28 L1524.94 1207.28 L1525.52 1207.28 L1526.11 1207.28 L1526.7 1207.28 L1527.28 1207.28 L1527.87 1207.28 L1528.46 1207.28 L1529.04 1207.28 L1529.63 1207.28 L1530.22 1207.28 L1530.8 1207.28 L1531.39 1207.28 L1531.98 1207.28 L1532.56 1207.28 L1533.15 1207.28 L1533.73 1207.28 L1534.32 1207.28 L1534.91 1207.28 L1535.49 1207.28 L1536.08 1207.28 L1536.67 1207.28 L1537.25 1207.28 L1537.84 1207.28 L1538.43 1207.28 L1539.01 1207.28 L1539.6 1207.28 L1540.19 1207.28 L1540.77 1207.28 L1541.36 1207.28 L1541.94 1207.28 L1542.53 1207.28 L1543.12 1207.28 L1543.7 1207.28 L1544.29 1207.28 L1544.88 1207.28 L1545.46 1207.28 L1546.05 1207.28 L1546.64 1207.28 L1547.22 1207.28 L1547.81 1207.28 L1548.4 1207.28 L1548.98 1207.28 L1549.57 1207.28 L1550.15 1207.28 L1550.74 1207.28 L1551.33 1207.28 L1551.91 1207.28 L1552.5 1207.28 L1553.09 1207.28 L1553.67 1207.28 L1554.26 1207.28 L1554.85 1207.28 L1555.43 1207.28 L1556.02 1207.28 L1556.6 1207.28 L1557.19 1207.28 L1557.78 1207.28 L1558.36 1207.28 L1558.95 1207.28 L1559.54 1207.28 L1560.12 1207.28 L1560.71 1207.28 L1561.3 1207.28 L1561.88 1207.28 L1562.47 1207.28 L1563.06 1207.28 L1563.64 1207.28 L1564.23 1207.28 L1564.81 1207.28 L1565.4 1207.28 L1565.99 1207.28 L1566.57 1207.28 L1567.16 1207.28 L1567.75 1207.28 L1568.33 1207.28 L1568.92 1207.28 L1569.51 1207.28 L1570.09 1207.28 L1570.68 1207.28 L1571.27 1207.28 L1571.85 1207.28 L1572.44 1207.28 L1573.02 1207.28 L1573.61 1207.28 L1574.2 1207.28 L1574.78 1207.28 L1575.37 1207.28 L1575.96 1207.28 L1576.54 1207.28 L1577.13 1207.28 L1577.72 1207.28 L1578.3 1207.28 L1578.89 1207.28 L1579.47 1207.28 L1580.06 1207.28 L1580.65 1207.28 L1581.23 1207.28 L1581.82 1207.28 L1582.41 1207.28 L1582.99 1207.28 L1583.58 1207.28 L1584.17 1207.28 L1584.75 1207.28 L1585.34 1207.28 L1585.93 1207.28 L1586.51 1207.28 L1587.1 1207.28 L1587.68 1207.28 L1588.27 1207.28 L1588.86 1207.28 L1589.44 1207.28 L1590.03 1207.28 L1590.62 1207.28 L1591.2 1207.28 L1591.79 1207.28 L1592.38 1207.28 L1592.96 1207.28 L1593.55 1207.28 L1594.14 1207.28 L1594.72 1207.28 L1595.31 1207.28 L1595.89 1207.28 L1596.48 1207.28 L1597.07 1207.28 L1597.65 1207.28 L1598.24 1207.28 L1598.83 1207.28 L1599.41 1207.28 L1600 1207.28 L1600.59 1207.28 L1601.17 1207.28 L1601.76 1207.28 L1602.34 1207.28 L1602.93 1207.28 L1603.52 1207.28 L1604.1 1207.28 L1604.69 1207.28 L1605.28 1207.28 L1605.86 1207.28 L1606.45 1207.28 L1607.04 1207.28 L1607.62 1207.28 L1608.21 1207.28 L1608.8 1207.28 L1609.38 1207.28 L1609.97 1207.28 L1610.55 1207.28 L1611.14 1207.28 L1611.73 1207.28 L1612.31 1207.28 L1612.9 1207.28 L1613.49 1207.28 L1614.07 1207.28 L1614.66 1207.28 L1615.25 1207.28 L1615.83 1207.28 L1616.42 1207.28 L1617.01 1207.28 L1617.59 1207.28 L1618.18 1207.28 L1618.76 1207.28 L1619.35 1207.28 L1619.94 1207.28 L1620.52 1207.28 L1621.11 1207.28 L1621.7 1207.28 L1622.28 1207.28 L1622.87 1207.28 L1623.46 1207.28 L1624.04 1207.28 L1624.63 1207.28 L1625.22 1207.28 L1625.8 1207.28 L1626.39 1207.28 L1626.97 1207.28 L1627.56 1207.28 L1628.15 1207.28 L1628.73 1207.28 L1629.32 1207.28 L1629.91 1207.28 L1630.49 1207.28 L1631.08 1207.28 L1631.67 1207.28 L1632.25 1207.28 L1632.84 1207.28 L1633.42 1207.28 L1634.01 1207.28 L1634.6 1207.28 L1635.18 1207.28 L1635.77 1207.28 L1636.36 1207.28 L1636.94 1207.28 L1637.53 1207.28 L1638.12 1207.28 L1638.7 1207.28 L1639.29 1207.28 L1639.88 1207.28 L1640.46 1207.28 L1641.05 1207.28 L1641.63 1207.28 L1642.22 1207.28 L1642.81 1207.28 L1643.39 1207.28 L1643.98 1207.28 L1644.57 1207.28 L1645.15 1207.28 L1645.74 1207.28 L1646.33 1207.28 L1646.91 1207.28 L1647.5 1207.28 L1648.09 1207.28 L1648.67 1207.28 L1649.26 1207.28 L1649.84 1207.28 L1650.43 1207.28 L1651.02 1207.28 L1651.6 1207.28 L1652.19 1207.28 L1652.78 1207.28 L1653.36 1207.28 L1653.95 1207.28 L1654.54 1207.28 L1655.12 1207.28 L1655.71 1207.28 L1656.29 1207.28 L1656.88 1207.28 L1657.47 1207.28 L1658.05 1207.28 L1658.64 1207.28 L1659.23 1207.28 L1659.81 1207.28 L1660.4 1207.28 L1660.99 1207.28 L1661.57 1207.28 L1662.16 1207.28 L1662.75 1207.28 L1663.33 1207.28 L1663.92 1207.28 L1664.5 1207.28 L1665.09 1207.28 L1665.68 1207.28 L1666.26 1207.28 L1666.85 1207.28 L1667.44 1207.28 L1668.02 1207.28 L1668.61 1207.28 L1669.2 1207.28 L1669.78 1207.28 L1670.37 1207.28 L1670.96 1207.28 L1671.54 1207.28 L1672.13 1207.28 L1672.71 1207.28 L1673.3 1207.28 L1673.89 1207.28 L1674.47 1207.28 L1675.06 1207.28 L1675.65 1207.28 L1676.23 1207.28 L1676.82 1207.28 L1677.41 1207.28 L1677.99 1207.28 L1678.58 1207.28 L1679.17 1207.28 L1679.75 1207.28 L1680.34 1207.28 L1680.92 1207.28 L1681.51 1207.28 L1682.1 1207.28 L1682.68 1207.28 L1683.27 1207.28 L1683.86 1207.28 L1684.44 1207.28 L1685.03 1207.28 L1685.62 1207.28 L1686.2 1207.28 L1686.79 1207.28 L1687.37 1207.28 L1687.96 1207.28 L1688.55 1207.28 L1689.13 1207.28 L1689.72 1207.28 L1690.31 1207.28 L1690.89 1207.28 L1691.48 1207.28 L1692.07 1207.28 L1692.65 1207.28 L1693.24 1207.28 L1693.83 1207.28 L1694.41 1207.28 L1695 1207.28 L1695.58 1207.28 L1696.17 1207.28 L1696.76 1207.28 L1697.34 1207.28 L1697.93 1207.28 L1698.52 1207.28 L1699.1 1207.28 L1699.69 1207.28 L1700.28 1207.28 L1700.86 1207.28 L1701.45 1207.28 L1702.04 1207.28 L1702.62 1207.28 L1703.21 1207.28 L1703.79 1207.28 L1704.38 1207.28 L1704.97 1207.28 L1705.55 1207.28 L1706.14 1207.28 L1706.73 1207.28 L1707.31 1207.28 L1707.9 1207.28 L1708.49 1207.28 L1709.07 1207.28 L1709.66 1207.28 L1710.24 1207.28 L1710.83 1207.28 L1711.42 1207.28 L1712 1207.28 L1712.59 1207.28 L1713.18 1207.28 L1713.76 1207.28 L1714.35 1207.28 L1714.94 1207.28 L1715.52 1207.28 L1716.11 1207.28 L1716.7 1207.28 L1717.28 1207.28 L1717.87 1207.28 L1718.45 1207.28 L1719.04 1207.28 L1719.63 1207.28 L1720.21 1207.28 L1720.8 1207.28 L1721.39 1207.28 L1721.97 1207.28 L1722.56 1207.28 L1723.15 1207.28 L1723.73 1207.28 L1724.32 1207.28 L1724.91 1207.28 L1725.49 1207.28 L1726.08 1207.28 L1726.66 1207.28 L1727.25 1207.28 L1727.84 1207.28 L1728.42 1207.28 L1729.01 1207.28 L1729.6 1207.28 L1730.18 1207.28 L1730.77 1207.28 L1731.36 1207.28 L1731.94 1207.28 L1732.53 1207.28 L1733.11 1207.28 L1733.7 1207.28 L1734.29 1207.28 L1734.87 1207.28 L1735.46 1207.28 L1736.05 1207.28 L1736.63 1207.28 L1737.22 1207.28 L1737.81 1207.28 L1738.39 1207.28 L1738.98 1207.28 L1739.57 1207.28 L1740.15 1207.28 L1740.74 1207.28 L1741.32 1207.28 L1741.91 1207.28 L1742.5 1207.28 L1743.08 1207.28 L1743.67 1207.28 L1744.26 1207.28 L1744.84 1207.28 L1745.43 1207.28 L1746.02 1207.28 L1746.6 1207.28 L1747.19 1207.28 L1747.78 1207.28 L1748.36 1207.28 L1748.95 1207.28 L1749.53 1207.28 L1750.12 1207.28 L1750.71 1207.28 L1751.29 1207.28 L1751.88 1207.28 L1752.47 1207.28 L1753.05 1207.28 L1753.64 1207.28 L1754.23 1207.28 L1754.81 1207.28 L1755.4 1207.28 L1755.99 1207.28 L1756.57 1207.28 L1757.16 1207.28 L1757.74 1207.28 L1758.33 1207.28 L1758.92 1207.28 L1759.5 1207.28 L1760.09 1207.28 L1760.68 1207.28 L1761.26 1207.28 L1761.85 1207.28 L1762.44 1207.28 L1763.02 1207.28 L1763.61 1207.28 L1764.19 1207.28 L1764.78 1207.28 L1765.37 1207.28 L1765.95 1207.28 L1766.54 1207.28 L1767.13 1207.28 L1767.71 1207.28 L1768.3 1207.28 L1768.89 1207.28 L1769.47 1207.28 L1770.06 1207.28 L1770.65 1207.28 L1771.23 1207.28 L1771.82 1207.28 L1772.4 1207.28 L1772.99 1207.28 L1773.58 1207.28 L1774.16 1207.28 L1774.75 1207.28 L1775.34 1207.28 L1775.92 1207.28 L1776.51 1207.28 L1777.1 1207.28 L1777.68 1207.28 L1778.27 1207.28 L1778.86 1207.28 L1779.44 1207.28 L1780.03 1207.28 L1780.61 1207.28 L1781.2 1207.28 L1781.79 1207.28 L1782.37 1207.28 L1782.96 1207.28 L1783.55 1207.28 L1784.13 1207.28 L1784.72 1207.28 L1785.31 1207.28 L1785.89 1207.28 L1786.48 1207.28 L1787.06 1207.28 L1787.65 1207.28 L1788.24 1207.28 L1788.82 1207.28 L1789.41 1207.28 L1790 1207.28 L1790.58 1207.28 L1791.17 1207.28 L1791.76 1207.28 L1792.34 1207.28 L1792.93 1207.28 L1793.52 1207.28 L1794.1 1207.28 L1794.69 1207.28 L1795.27 1207.28 L1795.86 1207.28 L1796.45 1207.28 L1797.03 1207.28 L1797.62 1207.28 L1798.21 1207.28 L1798.79 1207.28 L1799.38 1207.28 L1799.97 1207.28 L1800.55 1207.28 L1801.14 1207.28 L1801.73 1207.28 L1802.31 1207.28 L1802.9 1207.28 L1803.48 1207.28 L1804.07 1207.28 L1804.66 1207.28 L1805.24 1207.28 L1805.83 1207.28 L1806.42 1207.28 L1807 1207.28 L1807.59 1207.28 L1808.18 1207.28 L1808.76 1207.28 L1809.35 1207.28 L1809.94 1207.28 L1810.52 1207.28 L1811.11 1207.28 L1811.69 1207.28 L1812.28 1207.28 L1812.87 1207.28 L1813.45 1207.28 L1814.04 1207.28 L1814.63 1207.28 L1815.21 1207.28 L1815.8 1207.28 L1816.39 1207.28 L1816.97 1207.28 L1817.56 1207.28 L1818.14 1207.28 L1818.73 1207.28 L1819.32 1207.28 L1819.9 1207.28 L1820.49 1207.28 L1821.08 1207.28 L1821.66 1207.28 L1822.25 1207.28 L1822.84 1207.28 L1823.42 1207.28 L1824.01 1207.28 L1824.6 1207.28 L1825.18 1207.28 L1825.77 1207.28 L1826.35 1207.28 L1826.94 1207.28 L1827.53 1207.28 L1828.11 1207.28 L1828.7 1207.28 L1829.29 1207.28 L1829.87 1207.28 L1830.46 1207.28 L1831.05 1207.28 L1831.63 1207.28 L1832.22 1207.28 L1832.81 1207.28 L1833.39 1207.28 L1833.98 1207.28 L1834.56 1207.28 L1835.15 1207.28 L1835.74 1207.28 L1836.32 1207.28 L1836.91 1207.28 L1837.5 1207.28 L1838.08 1207.28 L1838.67 1207.28 L1839.26 1207.28 L1839.84 1207.28 L1840.43 1207.28 L1841.01 1207.28 L1841.6 1207.28 L1842.19 1207.28 L1842.77 1207.28 L1843.36 1207.28 L1843.95 1207.28 L1844.53 1207.28 L1845.12 1207.28 L1845.71 1207.28 L1846.29 1207.28 L1846.88 1207.28 L1847.47 1207.28 L1848.05 1207.28 L1848.64 1207.28 L1849.22 1207.28 L1849.81 1207.28 L1850.4 1207.28 L1850.98 1207.28 L1851.57 1207.28 L1852.16 1207.28 L1852.74 1207.28 L1853.33 1207.28 L1853.92 1207.28 L1854.5 1207.28 L1855.09 1207.28 L1855.68 1207.28 L1856.26 1207.28 L1856.85 1207.28 L1857.43 1207.28 L1858.02 1207.28 L1858.61 1207.28 L1859.19 1207.28 L1859.78 1207.28 L1860.37 1207.28 L1860.95 1207.28 L1861.54 1207.28 L1862.13 1207.28 L1862.71 1207.28 L1863.3 1207.28 L1863.88 1207.28 L1864.47 1207.28 L1865.06 1207.28 L1865.64 1207.28 L1866.23 1207.28 L1866.82 1207.28 L1867.4 1207.28 L1867.99 1207.28 L1868.58 1207.28 L1869.16 1207.28 L1869.75 1207.28 L1870.34 1207.28 L1870.92 1207.28 L1871.51 1207.28 L1872.09 1207.28 L1872.68 1207.28 L1873.27 1207.28 L1873.85 1207.28 L1874.44 1207.28 L1875.03 1207.28 L1875.61 1207.28 L1876.2 1207.28 L1876.79 1207.28 L1877.37 1207.28 L1877.96 1207.28 L1878.55 1207.28 L1879.13 1207.28 L1879.72 1207.28 L1880.3 1207.28 L1880.89 1207.28 L1881.48 1207.28 L1882.06 1207.28 L1882.65 1207.28 L1883.24 1207.28 L1883.82 1207.28 L1884.41 1207.28 L1885 1207.28 L1885.58 1207.28 L1886.17 1207.28 L1886.76 1207.28 L1887.34 1207.28 L1887.93 1207.28 L1888.51 1207.28 L1889.1 1207.28 L1889.69 1207.28 L1890.27 1207.28 L1890.86 1207.28 L1891.45 1207.28 L1892.03 1207.28 L1892.62 1207.28 L1893.21 1207.28 L1893.79 1207.28 L1894.38 1207.28 L1894.96 1207.28 L1895.55 1207.28 L1896.14 1207.28 L1896.72 1207.28 L1897.31 1207.28 L1897.9 1207.28 L1898.48 1207.28 L1899.07 1207.28 L1899.66 1207.28 L1900.24 1207.28 L1900.83 1207.28 L1901.42 1207.28 L1902 1207.28 L1902.59 1207.28 L1903.17 1207.28 L1903.76 1207.28 L1904.35 1207.28 L1904.93 1207.28 L1905.52 1207.28 L1906.11 1207.28 L1906.69 1207.28 L1907.28 1207.28 L1907.87 1207.28 L1908.45 1207.28 L1909.04 1207.28 L1909.63 1207.28 L1910.21 1207.28 L1910.8 1207.28 L1911.38 1207.28 L1911.97 1207.28 L1912.56 1207.28 L1913.14 1207.28 L1913.73 1207.28 L1914.32 1207.28 L1914.9 1207.28 L1915.49 1207.28 L1916.08 1207.28 L1916.66 1207.28 L1917.25 1207.28 L1917.83 1207.28 L1918.42 1207.28 L1919.01 1207.28 L1919.59 1207.28 L1920.18 1207.28 L1920.77 1207.28 L1921.35 1207.28 L1921.94 1207.28 L1922.53 1207.28 L1923.11 1207.28 L1923.7 1207.28 L1924.29 1207.28 L1924.87 1207.28 L1925.46 1207.28 L1926.04 1207.28 L1926.63 1207.28 L1927.22 1207.28 L1927.8 1207.28 L1928.39 1207.28 L1928.98 1207.28 L1929.56 1207.28 L1930.15 1207.28 L1930.74 1207.28 L1931.32 1207.28 L1931.91 1207.28 L1932.5 1207.28 L1933.08 1207.28 L1933.67 1207.28 L1934.25 1207.28 L1934.84 1207.28 L1935.43 1207.28 L1936.01 1207.28 L1936.6 1207.28 L1937.19 1207.28 L1937.77 1207.28 L1938.36 1207.28 L1938.95 1207.28 L1939.53 1207.28 L1940.12 1207.28 L1940.71 1207.28 L1941.29 1207.28 L1941.88 1207.28 L1942.46 1207.28 L1943.05 1207.28 L1943.64 1207.28 L1944.22 1207.28 L1944.81 1207.28 L1945.4 1207.28 L1945.98 1207.28 L1946.57 1207.28 L1947.16 1207.28 L1947.74 1207.28 L1948.33 1207.28 L1948.91 1207.28 L1949.5 1207.28 L1950.09 1207.28 L1950.67 1207.28 L1951.26 1207.28 L1951.85 1207.28 L1952.43 1207.28 L1953.02 1207.28 L1953.61 1207.28 L1954.19 1207.28 L1954.78 1207.28 L1955.37 1207.28 L1955.95 1207.28 L1956.54 1207.28 L1957.12 1207.28 L1957.71 1207.28 L1958.3 1207.28 L1958.88 1207.28 L1959.47 1207.28 L1960.06 1207.28 L1960.64 1207.28 L1961.23 1207.28 L1961.82 1207.28 L1962.4 1207.28 L1962.99 1207.28 L1963.58 1207.28 L1964.16 1207.28 L1964.75 1207.28 L1965.33 1207.28 L1965.92 1207.28 L1966.51 1207.28 L1967.09 1207.28 L1967.68 1207.28 L1968.27 1207.28 L1968.85 1207.28 L1969.44 1207.28 L1970.03 1207.28 L1970.61 1207.28 L1971.2 1207.28 L1971.78 1207.28 L1972.37 1207.28 L1972.96 1207.28 L1973.54 1207.28 L1974.13 1207.28 L1974.72 1207.28 L1975.3 1207.28 L1975.89 1207.28 L1976.48 1207.28 L1977.06 1207.28 L1977.65 1207.28 L1978.24 1207.28 L1978.82 1207.28 L1979.41 1207.28 L1979.99 1207.28 L1980.58 1207.28 L1981.17 1207.28 L1981.75 1207.28 L1982.34 1207.28 L1982.93 1207.28 L1983.51 1207.28 L1984.1 1207.28 L1984.69 1207.28 L1985.27 1207.28 L1985.86 1207.28 L1986.45 1207.28 L1987.03 1207.28 L1987.62 1207.28 L1988.2 1207.28 L1988.79 1207.28 L1989.38 1207.28 L1989.96 1207.28 L1990.55 1207.28 L1991.14 1207.28 L1991.72 1207.28 L1992.31 1207.28 L1992.9 1207.28 L1993.48 1207.28 L1994.07 1207.28 L1994.65 1207.28 L1995.24 1207.28 L1995.83 1207.28 L1996.41 1207.28 L1997 1207.28 L1997.59 1207.28 L1998.17 1207.28 L1998.76 1207.28 L1999.35 1207.28 L1999.93 1207.28 L2000.52 1207.28 L2001.11 1207.28 L2001.69 1207.28 L2002.28 1207.28 L2002.86 1207.28 L2003.45 1207.28 L2004.04 1207.28 L2004.62 1207.28 L2005.21 1207.28 L2005.8 1207.28 L2006.38 1207.28 L2006.97 1207.28 L2007.56 1207.28 L2008.14 1207.28 L2008.73 1207.28 L2009.32 1207.28 L2009.9 1207.28 L2010.49 1207.28 L2011.07 1207.28 L2011.66 1207.28 L2012.25 1207.28 L2012.83 1207.28 L2013.42 1207.28 L2014.01 1207.28 L2014.59 1207.28 L2015.18 1207.28 L2015.77 1207.28 L2016.35 1207.28 L2016.94 1207.28 L2017.53 1207.28 L2018.11 1207.28 L2018.7 1207.28 L2019.28 1207.28 L2019.87 1207.28 L2020.46 1207.28 L2021.04 1207.28 L2021.63 1207.28 L2022.22 1207.28 L2022.8 1207.28 L2023.39 1207.28 L2023.98 1207.28 L2024.56 1207.28 L2025.15 1207.28 L2025.73 1207.28 L2026.32 1207.28 L2026.91 1207.28 L2027.49 1207.28 L2028.08 1207.28 L2028.67 1207.28 L2029.25 1207.28 L2029.84 1207.28 L2030.43 1207.28 L2031.01 1207.28 L2031.6 1207.28 L2032.19 1207.28 L2032.77 1207.28 L2033.36 1207.28 L2033.94 1207.28 L2034.53 1207.28 L2035.12 1207.28 L2035.7 1207.28 L2036.29 1207.28 L2036.88 1207.28 L2037.46 1207.28 L2038.05 1207.28 L2038.64 1207.28 L2039.22 1207.28 L2039.81 1207.28 L2040.4 1207.28 L2040.98 1207.28 L2041.57 1207.28 L2042.15 1207.28 L2042.74 1207.28 L2043.33 1207.28 L2043.91 1207.28 L2044.5 1207.28 L2045.09 1207.28 L2045.67 1207.28 L2046.26 1207.28 L2046.85 1207.28 L2047.43 1207.28 L2048.02 1207.28 L2048.6 1207.28 L2049.19 1207.28 L2049.78 1207.28 L2050.36 1207.28 L2050.95 1207.28 L2051.54 1207.28 L2052.12 1207.28 L2052.71 1207.28 L2053.3 1207.28 L2053.88 1207.28 L2054.47 1207.28 L2055.06 1207.28 L2055.64 1207.28 L2056.23 1207.28 L2056.81 1207.28 L2057.4 1207.28 L2057.99 1207.28 L2058.57 1207.28 L2059.16 1207.28 L2059.75 1207.28 L2060.33 1207.28 L2060.92 1207.28 L2061.51 1207.28 L2062.09 1207.28 L2062.68 1207.28 L2063.27 1207.28 L2063.85 1207.28 L2064.44 1207.28 L2065.02 1207.28 L2065.61 1207.28 L2066.2 1207.28 L2066.78 1207.28 L2067.37 1207.28 L2067.96 1207.28 L2068.54 1207.28 L2069.13 1207.28 L2069.72 1207.28 L2070.3 1207.28 L2070.89 1207.28 L2071.48 1207.28 L2072.06 1207.28 L2072.65 1207.28 L2073.23 1207.28 L2073.82 1207.28 L2074.41 1207.28 L2074.99 1207.28 L2075.58 1207.28 L2076.17 1207.28 L2076.75 1207.28 L2077.34 1207.28 L2077.93 1207.28 L2078.51 1207.28 L2079.1 1207.28 L2079.68 1207.28 L2080.27 1207.28 L2080.86 1207.28 L2081.44 1207.28 L2082.03 1207.28 L2082.62 1207.28 L2083.2 1207.28 L2083.79 1207.28 L2084.38 1207.28 L2084.96 1207.28 L2085.55 1207.28 L2086.14 1207.28 L2086.72 1207.28 L2087.31 1207.28 L2087.89 1207.28 L2088.48 1207.28 L2089.07 1207.28 L2089.65 1207.28 L2090.24 1207.28 L2090.83 1207.28 L2091.41 1207.28 L2092 1207.28 L2092.59 1207.28 L2093.17 1207.28 L2093.76 1207.28 L2094.35 1207.28 L2094.93 1207.28 L2095.52 1207.28 L2096.1 1207.28 L2096.69 1207.28 L2097.28 1207.28 L2097.86 1207.28 L2098.45 1207.28 L2099.04 1207.28 L2099.62 1207.28 L2100.21 1207.28 L2100.8 1207.28 L2101.38 1207.28 L2101.97 1207.28 L2102.55 1207.28 L2103.14 1207.28 L2103.73 1207.28 L2104.31 1207.28 L2104.9 1207.28 L2105.49 1207.28 L2106.07 1207.28 L2106.66 1207.28 L2107.25 1207.28 L2107.83 1207.28 L2108.42 1207.28 L2109.01 1207.28 L2109.59 1207.28 L2110.18 1207.28 L2110.76 1207.28 L2111.35 1207.28 L2111.94 1207.28 L2112.52 1207.28 L2113.11 1207.28 L2113.7 1207.28 L2114.28 1207.28 L2114.87 1207.28 L2115.46 1207.28 L2116.04 1207.28 L2116.63 1207.28 L2117.22 1207.28 L2117.8 1207.28 L2118.39 1207.28 L2118.97 1207.28 L2119.56 1207.28 L2120.15 1207.28 L2120.73 1207.28 L2121.32 1207.28 L2121.91 1207.28 L2122.49 1207.28 L2123.08 1207.28 L2123.67 1207.28 L2124.25 1207.28 L2124.84 1207.28 L2125.42 1207.28 L2126.01 1207.28 L2126.6 1207.28 L2127.18 1207.28 L2127.77 1207.28 L2128.36 1207.28 L2128.94 1207.28 L2129.53 1207.28 L2130.12 1207.28 L2130.7 1207.28 L2131.29 1207.28 L2131.88 1207.28 L2132.46 1207.28 L2133.05 1207.28 L2133.63 1207.28 L2134.22 1207.28 L2134.81 1207.28 L2135.39 1207.28 L2135.98 1207.28 L2136.57 1207.28 L2137.15 1207.28 L2137.74 1207.28 L2138.33 1207.28 L2138.91 1207.28 L2139.5 1207.28 L2140.09 1207.28 L2140.67 1207.28 L2141.26 1207.28 L2141.84 1207.28 L2142.43 1207.28 L2143.02 1207.28 L2143.6 1207.28 L2144.19 1207.28 L2144.78 1207.28 L2145.36 1207.28 L2145.95 1207.28 L2146.54 1207.28 L2147.12 1207.28 L2147.71 1207.28 L2148.3 1207.28 L2148.88 1207.28 L2149.47 1207.28 L2150.05 1207.28 L2150.64 1207.28 L2151.23 1207.28 L2151.81 1207.28 L2152.4 1207.28 L2152.99 1207.28 L2153.57 1207.28 L2154.16 1207.28 L2154.75 1207.28 L2155.33 1207.28 L2155.92 1207.28 L2156.5 1207.28 L2157.09 1207.28 L2157.68 1207.28 L2158.26 1207.28 L2158.26 1207.03 L2157.68 1207.03 L2157.09 1207.03 L2156.5 1207.03 L2155.92 1207.03 L2155.33 1207.03 L2154.75 1207.03 L2154.16 1207.03 L2153.57 1207.03 L2152.99 1207.03 L2152.4 1207.03 L2151.81 1207.03 L2151.23 1207.03 L2150.64 1207.03 L2150.05 1207.03 L2149.47 1207.03 L2148.88 1207.03 L2148.3 1207.03 L2147.71 1207.03 L2147.12 1207.03 L2146.54 1207.03 L2145.95 1207.03 L2145.36 1207.03 L2144.78 1207.03 L2144.19 1207.03 L2143.6 1207.03 L2143.02 1207.03 L2142.43 1207.03 L2141.84 1207.03 L2141.26 1207.03 L2140.67 1207.03 L2140.09 1207.03 L2139.5 1207.03 L2138.91 1207.03 L2138.33 1207.03 L2137.74 1207.03 L2137.15 1207.03 L2136.57 1207.03 L2135.98 1207.03 L2135.39 1207.03 L2134.81 1207.03 L2134.22 1207.03 L2133.63 1207.03 L2133.05 1207.03 L2132.46 1207.03 L2131.88 1207.03 L2131.29 1207.03 L2130.7 1207.03 L2130.12 1207.03 L2129.53 1207.03 L2128.94 1207.03 L2128.36 1207.03 L2127.77 1207.03 L2127.18 1207.03 L2126.6 1207.03 L2126.01 1207.03 L2125.42 1207.03 L2124.84 1207.03 L2124.25 1207.03 L2123.67 1207.03 L2123.08 1207.03 L2122.49 1207.03 L2121.91 1207.03 L2121.32 1207.03 L2120.73 1207.03 L2120.15 1207.03 L2119.56 1207.03 L2118.97 1207.03 L2118.39 1207.03 L2117.8 1207.03 L2117.22 1207.03 L2116.63 1207.03 L2116.04 1207.03 L2115.46 1207.03 L2114.87 1207.03 L2114.28 1207.03 L2113.7 1207.03 L2113.11 1207.03 L2112.52 1207.03 L2111.94 1207.03 L2111.35 1207.03 L2110.76 1207.03 L2110.18 1207.03 L2109.59 1207.03 L2109.01 1207.03 L2108.42 1207.03 L2107.83 1207.03 L2107.25 1207.03 L2106.66 1207.03 L2106.07 1207.03 L2105.49 1207.03 L2104.9 1207.03 L2104.31 1207.03 L2103.73 1207.03 L2103.14 1207.03 L2102.55 1207.03 L2101.97 1207.03 L2101.38 1207.03 L2100.8 1207.03 L2100.21 1207.03 L2099.62 1207.03 L2099.04 1207.03 L2098.45 1207.03 L2097.86 1207.03 L2097.28 1207.03 L2096.69 1207.03 L2096.1 1207.03 L2095.52 1207.03 L2094.93 1207.03 L2094.35 1207.03 L2093.76 1207.03 L2093.17 1207.03 L2092.59 1207.03 L2092 1207.03 L2091.41 1207.03 L2090.83 1207.03 L2090.24 1207.03 L2089.65 1207.03 L2089.07 1207.03 L2088.48 1207.03 L2087.89 1207.03 L2087.31 1207.03 L2086.72 1207.03 L2086.14 1207.03 L2085.55 1207.03 L2084.96 1207.03 L2084.38 1207.03 L2083.79 1207.03 L2083.2 1207.03 L2082.62 1207.03 L2082.03 1207.03 L2081.44 1207.03 L2080.86 1207.03 L2080.27 1207.03 L2079.68 1207.03 L2079.1 1207.03 L2078.51 1207.03 L2077.93 1207.03 L2077.34 1207.03 L2076.75 1207.03 L2076.17 1207.03 L2075.58 1207.03 L2074.99 1207.03 L2074.41 1207.03 L2073.82 1207.03 L2073.23 1207.03 L2072.65 1207.03 L2072.06 1207.03 L2071.48 1207.03 L2070.89 1207.03 L2070.3 1207.03 L2069.72 1207.03 L2069.13 1207.03 L2068.54 1207.03 L2067.96 1207.03 L2067.37 1207.03 L2066.78 1207.03 L2066.2 1207.03 L2065.61 1207.03 L2065.02 1207.03 L2064.44 1207.03 L2063.85 1207.03 L2063.27 1207.03 L2062.68 1207.03 L2062.09 1207.03 L2061.51 1207.03 L2060.92 1207.03 L2060.33 1207.03 L2059.75 1207.03 L2059.16 1207.03 L2058.57 1207.03 L2057.99 1207.03 L2057.4 1207.03 L2056.81 1207.03 L2056.23 1207.03 L2055.64 1207.03 L2055.06 1207.03 L2054.47 1207.03 L2053.88 1207.03 L2053.3 1207.03 L2052.71 1207.03 L2052.12 1207.03 L2051.54 1207.03 L2050.95 1207.03 L2050.36 1207.03 L2049.78 1207.03 L2049.19 1207.03 L2048.6 1207.03 L2048.02 1207.03 L2047.43 1207.03 L2046.85 1207.03 L2046.26 1207.03 L2045.67 1207.03 L2045.09 1207.03 L2044.5 1207.03 L2043.91 1207.03 L2043.33 1207.03 L2042.74 1207.03 L2042.15 1207.03 L2041.57 1207.03 L2040.98 1207.03 L2040.4 1207.03 L2039.81 1207.03 L2039.22 1207.03 L2038.64 1207.03 L2038.05 1207.03 L2037.46 1207.03 L2036.88 1207.03 L2036.29 1207.03 L2035.7 1207.03 L2035.12 1207.03 L2034.53 1207.03 L2033.94 1207.03 L2033.36 1207.03 L2032.77 1207.03 L2032.19 1207.03 L2031.6 1207.03 L2031.01 1207.03 L2030.43 1207.03 L2029.84 1207.03 L2029.25 1207.03 L2028.67 1207.03 L2028.08 1207.03 L2027.49 1207.03 L2026.91 1207.03 L2026.32 1207.03 L2025.73 1207.03 L2025.15 1207.03 L2024.56 1207.03 L2023.98 1207.03 L2023.39 1207.03 L2022.8 1207.03 L2022.22 1207.03 L2021.63 1207.03 L2021.04 1207.03 L2020.46 1207.03 L2019.87 1207.03 L2019.28 1207.03 L2018.7 1207.03 L2018.11 1207.03 L2017.53 1207.03 L2016.94 1207.03 L2016.35 1207.03 L2015.77 1207.03 L2015.18 1207.03 L2014.59 1207.03 L2014.01 1207.03 L2013.42 1207.03 L2012.83 1207.03 L2012.25 1207.03 L2011.66 1207.03 L2011.07 1207.03 L2010.49 1207.03 L2009.9 1207.03 L2009.32 1207.03 L2008.73 1207.03 L2008.14 1207.03 L2007.56 1207.03 L2006.97 1207.03 L2006.38 1207.03 L2005.8 1207.03 L2005.21 1207.03 L2004.62 1207.03 L2004.04 1207.03 L2003.45 1207.03 L2002.86 1207.03 L2002.28 1207.03 L2001.69 1207.03 L2001.11 1207.03 L2000.52 1207.03 L1999.93 1207.03 L1999.35 1207.03 L1998.76 1207.03 L1998.17 1207.03 L1997.59 1207.03 L1997 1207.03 L1996.41 1207.03 L1995.83 1207.03 L1995.24 1207.03 L1994.65 1207.03 L1994.07 1207.03 L1993.48 1207.03 L1992.9 1207.03 L1992.31 1207.03 L1991.72 1207.03 L1991.14 1207.03 L1990.55 1207.03 L1989.96 1207.03 L1989.38 1207.03 L1988.79 1207.03 L1988.2 1207.03 L1987.62 1207.03 L1987.03 1207.03 L1986.45 1207.03 L1985.86 1207.03 L1985.27 1207.03 L1984.69 1207.03 L1984.1 1207.03 L1983.51 1207.03 L1982.93 1207.03 L1982.34 1207.03 L1981.75 1207.03 L1981.17 1207.03 L1980.58 1207.03 L1979.99 1207.03 L1979.41 1207.03 L1978.82 1207.03 L1978.24 1207.03 L1977.65 1207.03 L1977.06 1207.03 L1976.48 1207.03 L1975.89 1207.03 L1975.3 1207.03 L1974.72 1207.03 L1974.13 1207.03 L1973.54 1207.03 L1972.96 1207.03 L1972.37 1207.03 L1971.78 1207.03 L1971.2 1207.03 L1970.61 1207.03 L1970.03 1207.03 L1969.44 1207.03 L1968.85 1207.03 L1968.27 1207.03 L1967.68 1207.03 L1967.09 1207.03 L1966.51 1207.03 L1965.92 1207.03 L1965.33 1207.03 L1964.75 1207.03 L1964.16 1207.03 L1963.58 1207.03 L1962.99 1207.03 L1962.4 1207.03 L1961.82 1207.03 L1961.23 1207.03 L1960.64 1207.03 L1960.06 1207.03 L1959.47 1207.03 L1958.88 1207.03 L1958.3 1207.03 L1957.71 1207.03 L1957.12 1207.03 L1956.54 1207.03 L1955.95 1207.03 L1955.37 1207.03 L1954.78 1207.03 L1954.19 1207.03 L1953.61 1207.03 L1953.02 1207.03 L1952.43 1207.03 L1951.85 1207.03 L1951.26 1207.03 L1950.67 1207.03 L1950.09 1207.03 L1949.5 1207.03 L1948.91 1207.03 L1948.33 1207.03 L1947.74 1207.03 L1947.16 1207.03 L1946.57 1207.03 L1945.98 1207.03 L1945.4 1207.03 L1944.81 1207.03 L1944.22 1207.03 L1943.64 1207.03 L1943.05 1207.03 L1942.46 1207.03 L1941.88 1207.03 L1941.29 1207.03 L1940.71 1207.03 L1940.12 1207.03 L1939.53 1207.03 L1938.95 1207.03 L1938.36 1207.03 L1937.77 1207.03 L1937.19 1207.03 L1936.6 1207.03 L1936.01 1207.03 L1935.43 1207.03 L1934.84 1207.03 L1934.25 1207.03 L1933.67 1207.03 L1933.08 1207.03 L1932.5 1207.03 L1931.91 1207.03 L1931.32 1207.03 L1930.74 1207.03 L1930.15 1207.03 L1929.56 1207.03 L1928.98 1207.03 L1928.39 1207.03 L1927.8 1207.03 L1927.22 1207.03 L1926.63 1207.03 L1926.04 1207.03 L1925.46 1207.03 L1924.87 1207.03 L1924.29 1207.03 L1923.7 1207.03 L1923.11 1207.03 L1922.53 1207.03 L1921.94 1207.03 L1921.35 1207.03 L1920.77 1207.03 L1920.18 1207.03 L1919.59 1207.03 L1919.01 1207.03 L1918.42 1207.03 L1917.83 1207.03 L1917.25 1207.03 L1916.66 1207.03 L1916.08 1207.03 L1915.49 1207.03 L1914.9 1207.03 L1914.32 1207.03 L1913.73 1207.03 L1913.14 1207.03 L1912.56 1207.03 L1911.97 1207.03 L1911.38 1207.03 L1910.8 1207.03 L1910.21 1207.03 L1909.63 1207.03 L1909.04 1207.03 L1908.45 1207.03 L1907.87 1207.03 L1907.28 1207.03 L1906.69 1207.03 L1906.11 1207.03 L1905.52 1207.03 L1904.93 1207.03 L1904.35 1207.03 L1903.76 1207.03 L1903.17 1207.03 L1902.59 1207.03 L1902 1207.03 L1901.42 1207.03 L1900.83 1207.03 L1900.24 1207.03 L1899.66 1207.03 L1899.07 1207.03 L1898.48 1207.03 L1897.9 1207.03 L1897.31 1207.03 L1896.72 1207.03 L1896.14 1207.03 L1895.55 1207.03 L1894.96 1207.03 L1894.38 1207.03 L1893.79 1207.03 L1893.21 1207.03 L1892.62 1207.03 L1892.03 1207.03 L1891.45 1207.03 L1890.86 1207.03 L1890.27 1207.03 L1889.69 1207.03 L1889.1 1207.03 L1888.51 1207.03 L1887.93 1207.03 L1887.34 1207.03 L1886.76 1207.03 L1886.17 1207.03 L1885.58 1207.03 L1885 1207.03 L1884.41 1207.03 L1883.82 1207.03 L1883.24 1207.03 L1882.65 1207.03 L1882.06 1207.03 L1881.48 1207.03 L1880.89 1207.03 L1880.3 1207.03 L1879.72 1207.03 L1879.13 1207.03 L1878.55 1207.03 L1877.96 1207.03 L1877.37 1207.03 L1876.79 1207.03 L1876.2 1207.03 L1875.61 1207.03 L1875.03 1207.03 L1874.44 1207.03 L1873.85 1207.03 L1873.27 1207.03 L1872.68 1207.03 L1872.09 1207.03 L1871.51 1207.03 L1870.92 1207.03 L1870.34 1207.03 L1869.75 1207.03 L1869.16 1207.03 L1868.58 1207.03 L1867.99 1207.03 L1867.4 1207.03 L1866.82 1207.03 L1866.23 1207.03 L1865.64 1207.03 L1865.06 1207.03 L1864.47 1207.03 L1863.88 1207.03 L1863.3 1207.03 L1862.71 1207.03 L1862.13 1207.03 L1861.54 1207.03 L1860.95 1207.03 L1860.37 1207.03 L1859.78 1207.03 L1859.19 1207.03 L1858.61 1207.03 L1858.02 1207.03 L1857.43 1207.03 L1856.85 1207.03 L1856.26 1207.03 L1855.68 1207.03 L1855.09 1207.03 L1854.5 1207.03 L1853.92 1207.03 L1853.33 1207.03 L1852.74 1207.03 L1852.16 1207.03 L1851.57 1207.03 L1850.98 1207.03 L1850.4 1207.03 L1849.81 1207.03 L1849.22 1207.03 L1848.64 1207.03 L1848.05 1207.03 L1847.47 1207.03 L1846.88 1207.03 L1846.29 1207.03 L1845.71 1207.03 L1845.12 1207.03 L1844.53 1207.03 L1843.95 1207.03 L1843.36 1207.03 L1842.77 1207.03 L1842.19 1207.03 L1841.6 1207.03 L1841.01 1207.03 L1840.43 1207.03 L1839.84 1207.03 L1839.26 1207.03 L1838.67 1207.03 L1838.08 1207.03 L1837.5 1207.03 L1836.91 1207.03 L1836.32 1207.03 L1835.74 1207.03 L1835.15 1207.03 L1834.56 1207.03 L1833.98 1207.03 L1833.39 1207.03 L1832.81 1207.03 L1832.22 1207.03 L1831.63 1207.03 L1831.05 1207.03 L1830.46 1207.03 L1829.87 1207.03 L1829.29 1207.03 L1828.7 1207.03 L1828.11 1207.03 L1827.53 1207.03 L1826.94 1207.03 L1826.35 1207.03 L1825.77 1207.03 L1825.18 1207.03 L1824.6 1207.03 L1824.01 1207.03 L1823.42 1207.03 L1822.84 1207.03 L1822.25 1207.03 L1821.66 1207.03 L1821.08 1207.03 L1820.49 1207.03 L1819.9 1207.03 L1819.32 1207.03 L1818.73 1207.03 L1818.14 1207.03 L1817.56 1207.03 L1816.97 1207.03 L1816.39 1207.03 L1815.8 1207.03 L1815.21 1207.03 L1814.63 1207.03 L1814.04 1207.03 L1813.45 1207.03 L1812.87 1207.03 L1812.28 1207.03 L1811.69 1207.03 L1811.11 1207.03 L1810.52 1207.03 L1809.94 1207.03 L1809.35 1207.03 L1808.76 1207.03 L1808.18 1207.03 L1807.59 1207.03 L1807 1207.03 L1806.42 1207.03 L1805.83 1207.03 L1805.24 1207.03 L1804.66 1207.03 L1804.07 1207.03 L1803.48 1207.03 L1802.9 1207.03 L1802.31 1207.03 L1801.73 1207.03 L1801.14 1207.03 L1800.55 1207.03 L1799.97 1207.03 L1799.38 1207.03 L1798.79 1207.03 L1798.21 1207.03 L1797.62 1207.03 L1797.03 1207.03 L1796.45 1207.03 L1795.86 1207.03 L1795.27 1207.03 L1794.69 1207.03 L1794.1 1207.03 L1793.52 1207.03 L1792.93 1207.03 L1792.34 1207.03 L1791.76 1207.03 L1791.17 1207.03 L1790.58 1207.03 L1790 1207.03 L1789.41 1207.03 L1788.82 1207.03 L1788.24 1207.03 L1787.65 1207.03 L1787.06 1207.03 L1786.48 1207.03 L1785.89 1207.03 L1785.31 1207.03 L1784.72 1207.03 L1784.13 1207.03 L1783.55 1207.03 L1782.96 1207.03 L1782.37 1207.03 L1781.79 1207.03 L1781.2 1207.03 L1780.61 1207.03 L1780.03 1207.03 L1779.44 1207.03 L1778.86 1207.03 L1778.27 1207.03 L1777.68 1207.03 L1777.1 1207.03 L1776.51 1207.03 L1775.92 1207.03 L1775.34 1207.03 L1774.75 1207.03 L1774.16 1207.03 L1773.58 1207.03 L1772.99 1207.03 L1772.4 1207.03 L1771.82 1207.03 L1771.23 1207.03 L1770.65 1207.03 L1770.06 1207.03 L1769.47 1207.03 L1768.89 1207.03 L1768.3 1207.03 L1767.71 1207.03 L1767.13 1207.03 L1766.54 1207.03 L1765.95 1207.03 L1765.37 1207.03 L1764.78 1207.03 L1764.19 1207.03 L1763.61 1207.03 L1763.02 1207.03 L1762.44 1207.03 L1761.85 1207.03 L1761.26 1207.03 L1760.68 1207.03 L1760.09 1207.03 L1759.5 1207.03 L1758.92 1207.03 L1758.33 1207.03 L1757.74 1207.03 L1757.16 1207.03 L1756.57 1207.03 L1755.99 1207.03 L1755.4 1207.03 L1754.81 1207.03 L1754.23 1207.03 L1753.64 1207.03 L1753.05 1207.03 L1752.47 1207.03 L1751.88 1207.03 L1751.29 1207.03 L1750.71 1207.03 L1750.12 1207.03 L1749.53 1207.03 L1748.95 1207.03 L1748.36 1207.03 L1747.78 1207.03 L1747.19 1207.03 L1746.6 1207.03 L1746.02 1207.03 L1745.43 1207.03 L1744.84 1207.03 L1744.26 1207.03 L1743.67 1207.03 L1743.08 1207.03 L1742.5 1207.03 L1741.91 1207.03 L1741.32 1207.03 L1740.74 1207.03 L1740.15 1207.03 L1739.57 1207.03 L1738.98 1207.03 L1738.39 1207.03 L1737.81 1207.03 L1737.22 1207.03 L1736.63 1207.03 L1736.05 1207.03 L1735.46 1207.03 L1734.87 1207.03 L1734.29 1207.03 L1733.7 1207.03 L1733.11 1207.03 L1732.53 1207.03 L1731.94 1207.03 L1731.36 1207.03 L1730.77 1207.03 L1730.18 1207.03 L1729.6 1207.03 L1729.01 1207.03 L1728.42 1207.03 L1727.84 1207.03 L1727.25 1207.03 L1726.66 1207.03 L1726.08 1207.03 L1725.49 1207.03 L1724.91 1207.03 L1724.32 1207.03 L1723.73 1207.03 L1723.15 1207.03 L1722.56 1207.03 L1721.97 1207.03 L1721.39 1207.03 L1720.8 1207.03 L1720.21 1207.03 L1719.63 1207.03 L1719.04 1207.03 L1718.45 1207.03 L1717.87 1207.03 L1717.28 1207.03 L1716.7 1207.03 L1716.11 1207.03 L1715.52 1207.03 L1714.94 1207.03 L1714.35 1207.03 L1713.76 1207.03 L1713.18 1207.03 L1712.59 1207.03 L1712 1207.03 L1711.42 1207.03 L1710.83 1207.03 L1710.24 1207.03 L1709.66 1207.03 L1709.07 1207.03 L1708.49 1207.03 L1707.9 1207.03 L1707.31 1207.03 L1706.73 1207.03 L1706.14 1207.03 L1705.55 1207.03 L1704.97 1207.03 L1704.38 1207.03 L1703.79 1207.03 L1703.21 1207.03 L1702.62 1207.03 L1702.04 1207.03 L1701.45 1207.03 L1700.86 1207.03 L1700.28 1207.03 L1699.69 1207.03 L1699.1 1207.03 L1698.52 1207.03 L1697.93 1207.03 L1697.34 1207.03 L1696.76 1207.03 L1696.17 1207.03 L1695.58 1207.03 L1695 1207.03 L1694.41 1207.03 L1693.83 1207.03 L1693.24 1207.03 L1692.65 1207.03 L1692.07 1207.03 L1691.48 1207.03 L1690.89 1207.03 L1690.31 1207.03 L1689.72 1207.03 L1689.13 1207.03 L1688.55 1207.03 L1687.96 1207.03 L1687.37 1207.03 L1686.79 1207.03 L1686.2 1207.03 L1685.62 1207.03 L1685.03 1207.03 L1684.44 1207.03 L1683.86 1207.03 L1683.27 1207.03 L1682.68 1207.03 L1682.1 1207.03 L1681.51 1207.03 L1680.92 1207.03 L1680.34 1207.03 L1679.75 1207.03 L1679.17 1207.03 L1678.58 1207.03 L1677.99 1207.03 L1677.41 1207.03 L1676.82 1207.03 L1676.23 1207.03 L1675.65 1207.03 L1675.06 1207.03 L1674.47 1207.03 L1673.89 1207.03 L1673.3 1207.03 L1672.71 1207.03 L1672.13 1207.03 L1671.54 1207.03 L1670.96 1207.03 L1670.37 1207.03 L1669.78 1207.03 L1669.2 1207.03 L1668.61 1207.03 L1668.02 1207.03 L1667.44 1207.03 L1666.85 1207.03 L1666.26 1207.03 L1665.68 1207.03 L1665.09 1207.03 L1664.5 1207.03 L1663.92 1207.03 L1663.33 1207.03 L1662.75 1207.03 L1662.16 1207.03 L1661.57 1207.03 L1660.99 1207.03 L1660.4 1207.03 L1659.81 1207.03 L1659.23 1207.03 L1658.64 1207.03 L1658.05 1207.03 L1657.47 1207.03 L1656.88 1207.03 L1656.29 1207.03 L1655.71 1207.03 L1655.12 1207.03 L1654.54 1207.03 L1653.95 1207.03 L1653.36 1207.03 L1652.78 1207.03 L1652.19 1207.03 L1651.6 1207.03 L1651.02 1207.03 L1650.43 1207.03 L1649.84 1207.03 L1649.26 1207.03 L1648.67 1207.03 L1648.09 1207.03 L1647.5 1207.03 L1646.91 1207.03 L1646.33 1207.03 L1645.74 1207.03 L1645.15 1207.03 L1644.57 1207.03 L1643.98 1207.03 L1643.39 1207.03 L1642.81 1207.03 L1642.22 1207.03 L1641.63 1207.03 L1641.05 1207.03 L1640.46 1207.03 L1639.88 1207.03 L1639.29 1207.03 L1638.7 1207.03 L1638.12 1207.03 L1637.53 1207.03 L1636.94 1207.03 L1636.36 1207.03 L1635.77 1207.03 L1635.18 1207.03 L1634.6 1207.03 L1634.01 1207.03 L1633.42 1207.03 L1632.84 1207.03 L1632.25 1207.03 L1631.67 1207.03 L1631.08 1207.03 L1630.49 1207.03 L1629.91 1207.03 L1629.32 1207.03 L1628.73 1207.03 L1628.15 1207.03 L1627.56 1207.03 L1626.97 1207.03 L1626.39 1207.03 L1625.8 1207.03 L1625.22 1207.03 L1624.63 1207.03 L1624.04 1207.03 L1623.46 1207.03 L1622.87 1207.03 L1622.28 1207.03 L1621.7 1207.03 L1621.11 1207.03 L1620.52 1207.03 L1619.94 1207.03 L1619.35 1207.03 L1618.76 1207.03 L1618.18 1207.03 L1617.59 1207.03 L1617.01 1207.03 L1616.42 1207.03 L1615.83 1207.03 L1615.25 1207.03 L1614.66 1207.03 L1614.07 1207.03 L1613.49 1207.03 L1612.9 1207.03 L1612.31 1207.03 L1611.73 1207.03 L1611.14 1207.03 L1610.55 1207.03 L1609.97 1207.03 L1609.38 1207.03 L1608.8 1207.03 L1608.21 1207.03 L1607.62 1207.03 L1607.04 1207.03 L1606.45 1207.03 L1605.86 1207.03 L1605.28 1207.03 L1604.69 1207.03 L1604.1 1207.03 L1603.52 1207.03 L1602.93 1207.03 L1602.34 1207.03 L1601.76 1207.03 L1601.17 1207.03 L1600.59 1207.03 L1600 1207.03 L1599.41 1207.03 L1598.83 1207.03 L1598.24 1207.03 L1597.65 1207.03 L1597.07 1207.03 L1596.48 1207.03 L1595.89 1207.03 L1595.31 1207.03 L1594.72 1207.03 L1594.14 1207.03 L1593.55 1207.03 L1592.96 1207.03 L1592.38 1207.03 L1591.79 1207.03 L1591.2 1207.03 L1590.62 1207.03 L1590.03 1207.03 L1589.44 1207.03 L1588.86 1207.03 L1588.27 1207.03 L1587.68 1207.03 L1587.1 1207.03 L1586.51 1207.03 L1585.93 1207.03 L1585.34 1207.03 L1584.75 1207.03 L1584.17 1207.03 L1583.58 1207.03 L1582.99 1207.03 L1582.41 1207.03 L1581.82 1207.03 L1581.23 1207.03 L1580.65 1207.03 L1580.06 1207.03 L1579.47 1207.03 L1578.89 1207.03 L1578.3 1207.03 L1577.72 1207.03 L1577.13 1207.03 L1576.54 1207.03 L1575.96 1207.03 L1575.37 1207.03 L1574.78 1207.03 L1574.2 1207.03 L1573.61 1207.03 L1573.02 1207.03 L1572.44 1207.03 L1571.85 1207.03 L1571.27 1207.03 L1570.68 1207.03 L1570.09 1207.03 L1569.51 1207.03 L1568.92 1207.03 L1568.33 1207.03 L1567.75 1207.03 L1567.16 1207.03 L1566.57 1207.03 L1565.99 1207.03 L1565.4 1207.03 L1564.81 1207.03 L1564.23 1207.03 L1563.64 1207.03 L1563.06 1207.03 L1562.47 1207.03 L1561.88 1207.03 L1561.3 1207.03 L1560.71 1207.03 L1560.12 1207.03 L1559.54 1207.03 L1558.95 1207.03 L1558.36 1207.03 L1557.78 1207.03 L1557.19 1207.03 L1556.6 1207.03 L1556.02 1207.03 L1555.43 1207.03 L1554.85 1207.03 L1554.26 1207.03 L1553.67 1207.03 L1553.09 1207.03 L1552.5 1207.03 L1551.91 1207.03 L1551.33 1207.03 L1550.74 1207.03 L1550.15 1207.03 L1549.57 1207.03 L1548.98 1207.03 L1548.4 1207.03 L1547.81 1207.03 L1547.22 1207.03 L1546.64 1207.03 L1546.05 1207.03 L1545.46 1207.03 L1544.88 1207.03 L1544.29 1207.03 L1543.7 1207.03 L1543.12 1207.03 L1542.53 1207.03 L1541.94 1207.03 L1541.36 1207.03 L1540.77 1207.03 L1540.19 1207.03 L1539.6 1207.03 L1539.01 1207.03 L1538.43 1207.03 L1537.84 1207.03 L1537.25 1207.03 L1536.67 1207.03 L1536.08 1207.03 L1535.49 1207.03 L1534.91 1207.03 L1534.32 1207.03 L1533.73 1207.03 L1533.15 1207.03 L1532.56 1207.03 L1531.98 1207.03 L1531.39 1207.03 L1530.8 1207.03 L1530.22 1207.03 L1529.63 1207.03 L1529.04 1207.03 L1528.46 1207.03 L1527.87 1207.03 L1527.28 1207.03 L1526.7 1207.03 L1526.11 1207.03 L1525.52 1207.03 L1524.94 1207.03 L1524.35 1207.03 L1523.77 1207.03 L1523.18 1207.03 L1522.59 1207.03 L1522.01 1207.03 L1521.42 1207.03 L1520.83 1207.03 L1520.25 1207.03 L1519.66 1207.03 L1519.07 1207.03 L1518.49 1207.03 L1517.9 1207.03 L1517.32 1207.03 L1516.73 1207.03 L1516.14 1207.03 L1515.56 1207.03 L1514.97 1207.03 L1514.38 1207.03 L1513.8 1207.03 L1513.21 1207.03 L1512.62 1207.03 L1512.04 1207.03 L1511.45 1207.03 L1510.86 1207.03 L1510.28 1207.03 L1509.69 1207.03 L1509.11 1207.03 L1508.52 1207.03 L1507.93 1207.03 L1507.35 1207.03 L1506.76 1207.03 L1506.17 1207.03 L1505.59 1207.03 L1505 1207.03 L1504.41 1207.03 L1503.83 1207.03 L1503.24 1207.03 L1502.65 1207.03 L1502.07 1207.03 L1501.48 1207.03 L1500.9 1207.03 L1500.31 1207.03 L1499.72 1207.03 L1499.14 1207.03 L1498.55 1207.03 L1497.96 1207.03 L1497.38 1207.03 L1496.79 1207.03 L1496.2 1207.03 L1495.62 1207.03 L1495.03 1207.03 L1494.45 1207.03 L1493.86 1207.03 L1493.27 1207.03 L1492.69 1207.03 L1492.1 1207.03 L1491.51 1207.03 L1490.93 1207.03 L1490.34 1207.03 L1489.75 1207.03 L1489.17 1207.03 L1488.58 1207.03 L1487.99 1207.03 L1487.41 1207.03 L1486.82 1207.03 L1486.24 1207.03 L1485.65 1207.03 L1485.06 1207.03 L1484.48 1207.03 L1483.89 1207.03 L1483.3 1207.03 L1482.72 1207.03 L1482.13 1207.03 L1481.54 1207.03 L1480.96 1207.03 L1480.37 1207.03 L1479.78 1207.03 L1479.2 1207.03 L1478.61 1207.03 L1478.03 1207.03 L1477.44 1207.03 L1476.85 1207.03 L1476.27 1207.03 L1475.68 1207.03 L1475.09 1207.03 L1474.51 1207.03 L1473.92 1207.03 L1473.33 1207.03 L1472.75 1207.03 L1472.16 1207.03 L1471.57 1207.03 L1470.99 1207.03 L1470.4 1207.03 L1469.82 1207.03 L1469.23 1207.03 L1468.64 1207.03 L1468.06 1207.03 L1467.47 1207.03 L1466.88 1207.03 L1466.3 1207.03 L1465.71 1207.03 L1465.12 1207.03 L1464.54 1207.03 L1463.95 1207.03 L1463.37 1207.03 L1462.78 1207.03 L1462.19 1207.03 L1461.61 1207.03 L1461.02 1207.03 L1460.43 1207.03 L1459.85 1207.03 L1459.26 1207.03 L1458.67 1207.03 L1458.09 1207.03 L1457.5 1207.03 L1456.91 1207.03 L1456.33 1207.03 L1455.74 1207.03 L1455.16 1207.03 L1454.57 1207.03 L1453.98 1207.03 L1453.4 1207.03 L1452.81 1207.03 L1452.22 1207.03 L1451.64 1207.03 L1451.05 1207.03 L1450.46 1207.03 L1449.88 1207.03 L1449.29 1207.03 L1448.7 1207.03 L1448.12 1207.03 L1447.53 1207.03 L1446.95 1207.03 L1446.36 1207.03 L1445.77 1207.03 L1445.19 1207.03 L1444.6 1207.03 L1444.01 1207.03 L1443.43 1207.03 L1442.84 1207.03 L1442.25 1207.03 L1441.67 1207.03 L1441.08 1207.03 L1440.5 1207.03 L1439.91 1207.03 L1439.32 1207.03 L1438.74 1207.03 L1438.15 1207.03 L1437.56 1207.03 L1436.98 1207.03 L1436.39 1207.03 L1435.8 1207.03 L1435.22 1207.03 L1434.63 1207.03 L1434.04 1207.03 L1433.46 1207.03 L1432.87 1207.03 L1432.29 1207.03 L1431.7 1207.03 L1431.11 1207.03 L1430.53 1207.03 L1429.94 1207.03 L1429.35 1207.03 L1428.77 1207.03 L1428.18 1207.03 L1427.59 1207.03 L1427.01 1207.03 L1426.42 1207.03 L1425.83 1207.03 L1425.25 1207.03 L1424.66 1207.03 L1424.08 1207.03 L1423.49 1207.03 L1422.9 1207.03 L1422.32 1207.03 L1421.73 1207.03 L1421.14 1207.03 L1420.56 1207.03 L1419.97 1207.03 L1419.38 1207.03 L1418.8 1207.03 L1418.21 1207.03 L1417.63 1207.03 L1417.04 1207.03 L1416.45 1207.03 L1415.87 1207.03 L1415.28 1207.03 L1414.69 1207.03 L1414.11 1207.03 L1413.52 1207.03 L1412.93 1207.03 L1412.35 1207.03 L1411.76 1207.03 L1411.17 1207.03 L1410.59 1207.03 L1410 1207.03 L1409.42 1207.03 L1408.83 1207.03 L1408.24 1207.03 L1407.66 1207.03 L1407.07 1207.03 L1406.48 1207.03 L1405.9 1207.03 L1405.31 1207.03 L1404.72 1207.03 L1404.14 1207.03 L1403.55 1207.03 L1402.96 1207.03 L1402.38 1207.03 L1401.79 1207.03 L1401.21 1207.03 L1400.62 1207.03 L1400.03 1207.03 L1399.45 1207.03 L1398.86 1207.03 L1398.27 1207.03 L1397.69 1207.03 L1397.1 1207.03 L1396.51 1207.03 L1395.93 1207.03 L1395.34 1207.03 L1394.75 1207.03 L1394.17 1207.03 L1393.58 1207.03 L1393 1207.03 L1392.41 1207.03 L1391.82 1207.03 L1391.24 1207.03 L1390.65 1207.03 L1390.06 1207.03 L1389.48 1207.03 L1388.89 1207.03 L1388.3 1207.03 L1387.72 1207.03 L1387.13 1207.03 L1386.55 1207.03 L1385.96 1207.03 L1385.37 1207.03 L1384.79 1207.03 L1384.2 1207.03 L1383.61 1207.03 L1383.03 1207.03 L1382.44 1207.03 L1381.85 1207.03 L1381.27 1207.03 L1380.68 1207.03 L1380.09 1207.03 L1379.51 1207.03 L1378.92 1207.03 L1378.34 1207.03 L1377.75 1207.03 L1377.16 1207.03 L1376.58 1207.03 L1375.99 1207.03 L1375.4 1207.03 L1374.82 1207.03 L1374.23 1207.03 L1373.64 1207.03 L1373.06 1207.03 L1372.47 1207.03 L1371.88 1207.03 L1371.3 1207.03 L1370.71 1207.03 L1370.13 1207.03 L1369.54 1207.03 L1368.95 1207.03 L1368.37 1207.03 L1367.78 1207.03 L1367.19 1207.03 L1366.61 1207.03 L1366.02 1207.03 L1365.43 1207.03 L1364.85 1207.03 L1364.26 1207.03 L1363.68 1207.03 L1363.09 1207.03 L1362.5 1207.03 L1361.92 1207.03 L1361.33 1207.03 L1360.74 1207.03 L1360.16 1207.03 L1359.57 1207.03 L1358.98 1207.03 L1358.4 1207.03 L1357.81 1207.03 L1357.22 1207.03 L1356.64 1207.03 L1356.05 1207.03 L1355.47 1207.03 L1354.88 1207.03 L1354.29 1207.03 L1353.71 1207.03 L1353.12 1207.03 L1352.53 1207.03 L1351.95 1207.03 L1351.36 1207.03 L1350.77 1207.03 L1350.19 1207.03 L1349.6 1207.03 L1349.01 1207.03 L1348.43 1207.03 L1347.84 1207.03 L1347.26 1207.03 L1346.67 1207.03 L1346.08 1207.03 L1345.5 1207.03 L1344.91 1207.03 L1344.32 1207.03 L1343.74 1207.03 L1343.15 1207.03 L1342.56 1207.03 L1341.98 1207.03 L1341.39 1207.03 L1340.8 1207.03 L1340.22 1207.03 L1339.63 1207.03 L1339.05 1207.03 L1338.46 1207.03 L1337.87 1207.03 L1337.29 1207.03 L1336.7 1207.03 L1336.11 1207.03 L1335.53 1207.03 L1334.94 1207.03 L1334.35 1207.03 L1333.77 1207.03 L1333.18 1207.03 L1332.6 1207.03 L1332.01 1207.03 L1331.42 1207.03 L1330.84 1207.03 L1330.25 1207.03 L1329.66 1207.03 L1329.08 1207.03 L1328.49 1207.03 L1327.9 1207.03 L1327.32 1207.03 L1326.73 1207.03 L1326.14 1207.03 L1325.56 1207.03 L1324.97 1207.03 L1324.39 1207.03 L1323.8 1207.03 L1323.21 1207.03 L1322.63 1207.03 L1322.04 1207.03 L1321.45 1207.03 L1320.87 1207.03 L1320.28 1207.03 L1319.69 1207.03 L1319.11 1207.03 L1318.52 1207.03 L1317.93 1207.03 L1317.35 1207.03 L1316.76 1207.03 L1316.18 1207.03 L1315.59 1207.03 L1315 1207.03 L1314.42 1207.03 L1313.83 1207.03 L1313.24 1207.03 L1312.66 1207.03 L1312.07 1207.03 L1311.48 1207.03 L1310.9 1207.03 L1310.31 1207.03 L1309.73 1207.03 L1309.14 1207.03 L1308.55 1207.03 L1307.97 1207.03 L1307.38 1207.03 L1306.79 1207.03 L1306.21 1207.03 L1305.62 1207.03 L1305.03 1207.03 L1304.45 1207.03 L1303.86 1207.03 L1303.27 1207.03 L1302.69 1207.03 L1302.1 1207.03 L1301.52 1207.03 L1300.93 1207.03 L1300.34 1207.03 L1299.76 1207.03 L1299.17 1207.03 L1298.58 1207.03 L1298 1207.03 L1297.41 1207.03 L1296.82 1207.03 L1296.24 1207.03 L1295.65 1207.03 L1295.06 1207.03 L1294.48 1207.03 L1293.89 1207.03 L1293.31 1207.03 L1292.72 1207.03 L1292.13 1207.03 L1291.55 1207.03 L1290.96 1207.03 L1290.37 1207.03 L1289.79 1207.03 L1289.2 1207.03 L1288.61 1207.03 L1288.03 1207.03 L1287.44 1207.03 L1286.86 1207.03 L1286.27 1207.03 L1285.68 1207.03 L1285.1 1207.03 L1284.51 1207.03 L1283.92 1207.03 L1283.34 1207.03 L1282.75 1207.03 L1282.16 1207.03 L1281.58 1207.03 L1280.99 1207.03 L1280.4 1207.03 L1279.82 1207.03 L1279.23 1207.03 L1278.65 1207.03 L1278.06 1207.03 L1277.47 1207.03 L1276.89 1207.03 L1276.3 1207.03 L1275.71 1207.03 L1275.13 1207.03 L1274.54 1207.03 L1273.95 1207.03 L1273.37 1207.03 L1272.78 1207.03 L1272.19 1207.03 L1271.61 1207.03 L1271.02 1207.03 L1270.44 1207.03 L1269.85 1207.03 L1269.26 1207.03 L1268.68 1207.03 L1268.09 1207.03 L1267.5 1207.03 L1266.92 1207.03 L1266.33 1207.03 L1265.74 1207.03 L1265.16 1207.03 L1264.57 1207.03 L1263.98 1207.03 L1263.4 1207.03 L1262.81 1207.03 L1262.23 1207.03 L1261.64 1207.03 L1261.05 1207.03 L1260.47 1207.03 L1259.88 1207.03 L1259.29 1207.03 L1258.71 1207.03 L1258.12 1207.03 L1257.53 1207.03 L1256.95 1207.03 L1256.36 1207.03 L1255.78 1207.03 L1255.19 1207.03 L1254.6 1207.03 L1254.02 1207.03 L1253.43 1207.03 L1252.84 1207.03 L1252.26 1207.03 L1251.67 1207.03 L1251.08 1207.03 L1250.5 1207.03 L1249.91 1207.03 L1249.32 1207.03 L1248.74 1207.03 L1248.15 1207.03 L1247.57 1207.03 L1246.98 1207.03 L1246.39 1207.03 L1245.81 1207.03 L1245.22 1207.03 L1244.63 1207.03 L1244.05 1207.03 L1243.46 1207.03 L1242.87 1207.03 L1242.29 1207.03 L1241.7 1207.03 L1241.11 1207.03 L1240.53 1207.03 L1239.94 1207.03 L1239.36 1207.03 L1238.77 1207.03 L1238.18 1207.03 L1237.6 1207.03 L1237.01 1207.03 L1236.42 1207.03 L1235.84 1207.03 L1235.25 1207.03 L1234.66 1207.03 L1234.08 1207.03 L1233.49 1207.03 L1232.91 1207.03 L1232.32 1207.03 L1231.73 1207.03 L1231.15 1207.03 L1230.56 1207.03 L1229.97 1207.03 L1229.39 1207.03 L1228.8 1207.03 L1228.21 1207.03 L1227.63 1207.03 L1227.04 1207.03 L1226.45 1207.03 L1225.87 1207.03 L1225.28 1207.03 L1224.7 1207.03 L1224.11 1207.03 L1223.52 1207.03 L1222.94 1207.03 L1222.35 1207.03 L1221.76 1207.03 L1221.18 1207.03 L1220.59 1207.03 L1220 1207.03 L1219.42 1207.03 L1218.83 1207.03 L1218.24 1207.03 L1217.66 1207.03 L1217.07 1207.03 L1216.49 1207.03 L1215.9 1207.03 L1215.31 1207.03 L1214.73 1207.03 L1214.14 1207.03 L1213.55 1207.03 L1212.97 1207.03 L1212.38 1207.03 L1211.79 1207.03 L1211.21 1207.03 L1210.62 1207.03 L1210.03 1207.03 L1209.45 1207.03 L1208.86 1207.03 L1208.28 1207.03 L1207.69 1207.03 L1207.1 1207.03 L1206.52 1207.03 L1205.93 1207.03 L1205.34 1207.03 L1204.76 1207.03 L1204.17 1207.03 L1203.58 1207.03 L1203 1207.03 L1202.41 1207.03 L1201.83 1207.03 L1201.24 1207.03 L1200.65 1207.03 L1200.07 1207.03 L1199.48 1207.03 L1198.89 1207.03 L1198.31 1207.03 L1197.72 1207.03 L1197.13 1207.03 L1196.55 1207.03 L1195.96 1207.03 L1195.37 1207.03 L1194.79 1207.03 L1194.2 1207.03 L1193.62 1207.03 L1193.03 1207.03 L1192.44 1207.03 L1191.86 1207.03 L1191.27 1207.03 L1190.68 1207.03 L1190.1 1207.03 L1189.51 1207.03 L1188.92 1207.03 L1188.34 1207.03 L1187.75 1207.03 L1187.16 1207.03 L1186.58 1207.03 L1185.99 1207.03 L1185.41 1207.03 L1184.82 1207.03 L1184.23 1207.03 L1183.65 1207.03 L1183.06 1207.03 L1182.47 1207.03 L1181.89 1207.03 L1181.3 1207.03 L1180.71 1207.03 L1180.13 1207.03 L1179.54 1207.03 L1178.96 1207.03 L1178.37 1207.03 L1177.78 1207.03 L1177.2 1207.03 L1176.61 1207.03 L1176.02 1207.03 L1175.44 1207.03 L1174.85 1207.03 L1174.26 1207.03 L1173.68 1207.03 L1173.09 1207.03 L1172.5 1207.03 L1171.92 1207.03 L1171.33 1207.03 L1170.75 1207.03 L1170.16 1207.03 L1169.57 1207.03 L1168.99 1207.03 L1168.4 1207.03 L1167.81 1207.03 L1167.23 1207.03 L1166.64 1207.03 L1166.05 1207.03 L1165.47 1207.03 L1164.88 1207.03 L1164.29 1207.03 L1163.71 1207.03 L1163.12 1207.03 L1162.54 1207.03 L1161.95 1207.03 L1161.36 1207.03 L1160.78 1207.03 L1160.19 1207.03 L1159.6 1207.03 L1159.02 1207.03 L1158.43 1207.03 L1157.84 1207.03 L1157.26 1207.03 L1156.67 1207.03 L1156.09 1207.03 L1155.5 1207.03 L1154.91 1207.03 L1154.33 1207.03 L1153.74 1207.03 L1153.15 1207.03 L1152.57 1207.03 L1151.98 1207.03 L1151.39 1207.03 L1150.81 1207.03 L1150.22 1207.03 L1149.63 1207.03 L1149.05 1207.03 L1148.46 1207.03 L1147.88 1207.03 L1147.29 1207.03 L1146.7 1207.03 L1146.12 1207.03 L1145.53 1207.03 L1144.94 1207.03 L1144.36 1207.03 L1143.77 1207.03 L1143.18 1207.03 L1142.6 1207.03 L1142.01 1207.03 L1141.42 1207.03 L1140.84 1207.03 L1140.25 1207.03 L1139.67 1207.03 L1139.08 1207.03 L1138.49 1207.03 L1137.91 1207.03 L1137.32 1207.03 L1136.73 1207.03 L1136.15 1207.03 L1135.56 1207.03 L1134.97 1207.03 L1134.39 1207.03 L1133.8 1207.03 L1133.21 1207.03 L1132.63 1207.03 L1132.04 1207.03 L1131.46 1207.03 L1130.87 1207.03 L1130.28 1207.03 L1129.7 1207.03 L1129.11 1207.03 L1128.52 1207.03 L1127.94 1207.03 L1127.35 1207.03 L1126.76 1207.03 L1126.18 1207.03 L1125.59 1207.03 L1125.01 1207.03 L1124.42 1207.03 L1123.83 1207.03 L1123.25 1207.03 L1122.66 1207.03 L1122.07 1207.03 L1121.49 1207.03 L1120.9 1207.03 L1120.31 1207.03 L1119.73 1207.03 L1119.14 1207.03 L1118.55 1207.03 L1117.97 1207.03 L1117.38 1207.03 L1116.8 1207.03 L1116.21 1207.03 L1115.62 1207.03 L1115.04 1207.03 L1114.45 1207.03 L1113.86 1207.03 L1113.28 1207.03 L1112.69 1207.03 L1112.1 1207.03 L1111.52 1207.03 L1110.93 1207.03 L1110.34 1207.03 L1109.76 1207.03 L1109.17 1207.03 L1108.59 1207.03 L1108 1207.03 L1107.41 1207.03 L1106.83 1207.03 L1106.24 1207.03 L1105.65 1207.03 L1105.07 1207.03 L1104.48 1207.03 L1103.89 1207.03 L1103.31 1207.03 L1102.72 1207.03 L1102.14 1207.03 L1101.55 1207.03 L1100.96 1207.03 L1100.38 1207.03 L1099.79 1207.03 L1099.2 1207.03 L1098.62 1207.03 L1098.03 1207.03 L1097.44 1207.03 L1096.86 1207.03 L1096.27 1207.03 L1095.68 1207.03 L1095.1 1207.03 L1094.51 1207.03 L1093.93 1207.03 L1093.34 1207.03 L1092.75 1207.03 L1092.17 1207.03 L1091.58 1207.03 L1090.99 1207.03 L1090.41 1207.03 L1089.82 1207.03 L1089.23 1207.03 L1088.65 1207.03 L1088.06 1207.03 L1087.47 1207.03 L1086.89 1207.03 L1086.3 1207.03 L1085.72 1207.03 L1085.13 1207.03 L1084.54 1207.03 L1083.96 1207.03 L1083.37 1207.03 L1082.78 1207.03 L1082.2 1207.03 L1081.61 1207.03 L1081.02 1207.03 L1080.44 1207.03 L1079.85 1207.03 L1079.26 1207.03 L1078.68 1207.03 L1078.09 1207.03 L1077.51 1207.03 L1076.92 1207.03 L1076.33 1207.03 L1075.75 1207.03 L1075.16 1207.03 L1074.57 1207.03 L1073.99 1207.03 L1073.4 1207.03 L1072.81 1207.03 L1072.23 1207.03 L1071.64 1207.03 L1071.06 1207.03 L1070.47 1207.03 L1069.88 1207.03 L1069.3 1207.03 L1068.71 1207.03 L1068.12 1207.03 L1067.54 1207.03 L1066.95 1207.03 L1066.36 1207.03 L1065.78 1207.03 L1065.19 1207.03 L1064.6 1207.03 L1064.02 1207.03 L1063.43 1207.03 L1062.85 1207.03 L1062.26 1207.03 L1061.67 1207.03 L1061.09 1207.03 L1060.5 1207.03 L1059.91 1207.03 L1059.33 1207.03 L1058.74 1207.03 L1058.15 1207.03 L1057.57 1207.03 L1056.98 1207.03 L1056.39 1207.03 L1055.81 1207.03 L1055.22 1207.03 L1054.64 1207.03 L1054.05 1207.03 L1053.46 1207.03 L1052.88 1207.03 L1052.29 1207.03 L1051.7 1207.03 L1051.12 1207.03 L1050.53 1207.03 L1049.94 1207.03 L1049.36 1207.03 L1048.77 1207.03 L1048.19 1207.03 L1047.6 1207.03 L1047.01 1207.03 L1046.43 1207.03 L1045.84 1207.03 L1045.25 1207.03 L1044.67 1207.03 L1044.08 1207.03 L1043.49 1207.03 L1042.91 1207.03 L1042.32 1207.03 L1041.73 1207.03 L1041.15 1207.03 L1040.56 1207.03 L1039.98 1207.03 L1039.39 1207.03 L1038.8 1207.03 L1038.22 1207.03 L1037.63 1207.03 L1037.04 1207.03 L1036.46 1207.03 L1035.87 1207.03 L1035.28 1207.03 L1034.7 1207.03 L1034.11 1207.03 L1033.52 1207.03 L1032.94 1207.03 L1032.35 1207.03 L1031.77 1207.03 L1031.18 1207.03 L1030.59 1207.03 L1030.01 1207.03 L1029.42 1207.03 L1028.83 1207.03 L1028.25 1207.03 L1027.66 1207.03 L1027.07 1207.03 L1026.49 1207.03 L1025.9 1207.03 L1025.32 1207.03 L1024.73 1207.03 L1024.14 1207.03 L1023.56 1207.03 L1022.97 1207.03 L1022.38 1207.03 L1021.8 1207.03 L1021.21 1207.03 L1020.62 1207.03 L1020.04 1207.03 L1019.45 1207.03 L1018.86 1207.03 L1018.28 1207.03 L1017.69 1207.03 L1017.11 1207.03 L1016.52 1207.03 L1015.93 1207.03 L1015.35 1207.03 L1014.76 1207.03 L1014.17 1207.03 L1013.59 1207.03 L1013 1207.03 L1012.41 1207.03 L1011.83 1207.03 L1011.24 1207.03 L1010.65 1207.03 L1010.07 1207.03 L1009.48 1207.03 L1008.9 1207.03 L1008.31 1207.03 L1007.72 1207.03 L1007.14 1207.03 L1006.55 1207.03 L1005.96 1207.03 L1005.38 1207.03 L1004.79 1207.03 L1004.2 1207.03 L1003.62 1207.03 L1003.03 1207.03 L1002.44 1207.03 L1001.86 1207.03 L1001.27 1207.03 L1000.69 1207.03 L1000.1 1207.03 L999.513 1207.03 L998.926 1207.03 L998.34 1207.03 L997.754 1207.03 L997.167 1207.03 L996.581 1207.03 L995.994 1207.03 L995.408 1207.03 L994.822 1207.03 L994.235 1207.03 L993.649 1207.03 L993.062 1207.03 L992.476 1207.03 L991.889 1207.03 L991.303 1207.03 L990.717 1207.03 L990.13 1207.03 L989.544 1207.03 L988.957 1207.03 L988.371 1207.03 L987.785 1207.03 L987.198 1207.03 L986.612 1207.03 L986.025 1207.03  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1207.15 986.612,1207.15 987.198,1207.15 987.785,1207.15 988.371,1207.15 988.957,1207.15 989.544,1207.15 990.13,1207.15 990.717,1207.15 991.303,1207.15 991.889,1207.15 992.476,1207.15 993.062,1207.15 993.649,1207.15 994.235,1207.15 994.822,1207.15 995.408,1207.15 995.994,1207.15 996.581,1207.15 997.167,1207.15 997.754,1207.15 998.34,1207.15 998.926,1207.15 999.513,1207.15 1000.1,1207.15 1000.69,1207.15 1001.27,1207.15 1001.86,1207.15 1002.44,1207.15 1003.03,1207.15 1003.62,1207.15 1004.2,1207.15 1004.79,1207.15 1005.38,1207.15 1005.96,1207.15 1006.55,1207.15 1007.14,1207.15 1007.72,1207.15 1008.31,1207.15 1008.9,1207.15 1009.48,1207.15 1010.07,1207.15 1010.65,1207.15 1011.24,1207.15 1011.83,1207.15 1012.41,1207.15 1013,1207.15 1013.59,1207.15 1014.17,1207.15 1014.76,1207.15 1015.35,1207.15 1015.93,1207.15 1016.52,1207.15 1017.11,1207.15 1017.69,1207.15 1018.28,1207.15 1018.86,1207.15 1019.45,1207.15 1020.04,1207.15 1020.62,1207.15 1021.21,1207.15 1021.8,1207.15 1022.38,1207.15 1022.97,1207.15 1023.56,1207.15 1024.14,1207.15 1024.73,1207.15 1025.32,1207.15 1025.9,1207.15 1026.49,1207.15 1027.07,1207.15 1027.66,1207.15 1028.25,1207.15 1028.83,1207.15 1029.42,1207.15 1030.01,1207.15 1030.59,1207.15 1031.18,1207.15 1031.77,1207.15 1032.35,1207.15 1032.94,1207.15 1033.52,1207.15 1034.11,1207.15 1034.7,1207.15 1035.28,1207.15 1035.87,1207.15 1036.46,1207.15 1037.04,1207.15 1037.63,1207.15 1038.22,1207.15 1038.8,1207.15 1039.39,1207.15 1039.98,1207.15 1040.56,1207.15 1041.15,1207.15 1041.73,1207.15 1042.32,1207.15 1042.91,1207.15 1043.49,1207.15 1044.08,1207.15 1044.67,1207.15 1045.25,1207.15 1045.84,1207.15 1046.43,1207.15 1047.01,1207.15 1047.6,1207.15 1048.19,1207.15 1048.77,1207.15 1049.36,1207.15 1049.94,1207.15 1050.53,1207.15 1051.12,1207.15 1051.7,1207.15 1052.29,1207.15 1052.88,1207.15 1053.46,1207.15 1054.05,1207.15 1054.64,1207.15 1055.22,1207.15 1055.81,1207.15 1056.39,1207.15 1056.98,1207.15 1057.57,1207.15 1058.15,1207.15 1058.74,1207.15 1059.33,1207.15 1059.91,1207.15 1060.5,1207.15 1061.09,1207.15 1061.67,1207.15 1062.26,1207.15 1062.85,1207.15 1063.43,1207.15 1064.02,1207.15 1064.6,1207.15 1065.19,1207.15 1065.78,1207.15 1066.36,1207.15 1066.95,1207.15 1067.54,1207.15 1068.12,1207.15 1068.71,1207.15 1069.3,1207.15 1069.88,1207.15 1070.47,1207.15 1071.06,1207.15 1071.64,1207.15 1072.23,1207.15 1072.81,1207.15 1073.4,1207.15 1073.99,1207.15 1074.57,1207.15 1075.16,1207.15 1075.75,1207.15 1076.33,1207.15 1076.92,1207.15 1077.51,1207.15 1078.09,1207.15 1078.68,1207.15 1079.26,1207.15 1079.85,1207.15 1080.44,1207.15 1081.02,1207.15 1081.61,1207.15 1082.2,1207.15 1082.78,1207.15 1083.37,1207.15 1083.96,1207.15 1084.54,1207.15 1085.13,1207.15 1085.72,1207.15 1086.3,1207.15 1086.89,1207.15 1087.47,1207.15 1088.06,1207.15 1088.65,1207.15 1089.23,1207.15 1089.82,1207.15 1090.41,1207.15 1090.99,1207.15 1091.58,1207.15 1092.17,1207.15 1092.75,1207.15 1093.34,1207.15 1093.93,1207.15 1094.51,1207.15 1095.1,1207.15 1095.68,1207.15 1096.27,1207.15 1096.86,1207.15 1097.44,1207.15 1098.03,1207.15 1098.62,1207.15 1099.2,1207.15 1099.79,1207.15 1100.38,1207.15 1100.96,1207.15 1101.55,1207.15 1102.14,1207.15 1102.72,1207.15 1103.31,1207.15 1103.89,1207.15 1104.48,1207.15 1105.07,1207.15 1105.65,1207.15 1106.24,1207.15 1106.83,1207.15 1107.41,1207.15 1108,1207.15 1108.59,1207.15 1109.17,1207.15 1109.76,1207.15 1110.34,1207.15 1110.93,1207.15 1111.52,1207.15 1112.1,1207.15 1112.69,1207.15 1113.28,1207.15 1113.86,1207.15 1114.45,1207.15 1115.04,1207.15 1115.62,1207.15 1116.21,1207.15 1116.8,1207.15 1117.38,1207.15 1117.97,1207.15 1118.55,1207.15 1119.14,1207.15 1119.73,1207.15 1120.31,1207.15 1120.9,1207.15 1121.49,1207.15 1122.07,1207.15 1122.66,1207.15 1123.25,1207.15 1123.83,1207.15 1124.42,1207.15 1125.01,1207.15 1125.59,1207.15 1126.18,1207.15 1126.76,1207.15 1127.35,1207.15 1127.94,1207.15 1128.52,1207.15 1129.11,1207.15 1129.7,1207.15 1130.28,1207.15 1130.87,1207.15 1131.46,1207.15 1132.04,1207.15 1132.63,1207.15 1133.21,1207.15 1133.8,1207.15 1134.39,1207.15 1134.97,1207.15 1135.56,1207.15 1136.15,1207.15 1136.73,1207.15 1137.32,1207.15 1137.91,1207.15 1138.49,1207.15 1139.08,1207.15 1139.67,1207.15 1140.25,1207.15 1140.84,1207.15 1141.42,1207.15 1142.01,1207.15 1142.6,1207.15 1143.18,1207.15 1143.77,1207.15 1144.36,1207.15 1144.94,1207.15 1145.53,1207.15 1146.12,1207.15 1146.7,1207.15 1147.29,1207.15 1147.88,1207.15 1148.46,1207.15 1149.05,1207.15 1149.63,1207.15 1150.22,1207.15 1150.81,1207.15 1151.39,1207.15 1151.98,1207.15 1152.57,1207.15 1153.15,1207.15 1153.74,1207.15 1154.33,1207.15 1154.91,1207.15 1155.5,1207.15 1156.09,1207.15 1156.67,1207.15 1157.26,1207.15 1157.84,1207.15 1158.43,1207.15 1159.02,1207.15 1159.6,1207.15 1160.19,1207.15 1160.78,1207.15 1161.36,1207.15 1161.95,1207.15 1162.54,1207.15 1163.12,1207.15 1163.71,1207.15 1164.29,1207.15 1164.88,1207.15 1165.47,1207.15 1166.05,1207.15 1166.64,1207.15 1167.23,1207.15 1167.81,1207.15 1168.4,1207.15 1168.99,1207.15 1169.57,1207.15 1170.16,1207.15 1170.75,1207.15 1171.33,1207.15 1171.92,1207.15 1172.5,1207.15 1173.09,1207.15 1173.68,1207.15 1174.26,1207.15 1174.85,1207.15 1175.44,1207.15 1176.02,1207.15 1176.61,1207.15 1177.2,1207.15 1177.78,1207.15 1178.37,1207.15 1178.96,1207.15 1179.54,1207.15 1180.13,1207.15 1180.71,1207.15 1181.3,1207.15 1181.89,1207.15 1182.47,1207.15 1183.06,1207.15 1183.65,1207.15 1184.23,1207.15 1184.82,1207.15 1185.41,1207.15 1185.99,1207.15 1186.58,1207.15 1187.16,1207.15 1187.75,1207.15 1188.34,1207.15 1188.92,1207.15 1189.51,1207.15 1190.1,1207.15 1190.68,1207.15 1191.27,1207.15 1191.86,1207.15 1192.44,1207.15 1193.03,1207.15 1193.62,1207.15 1194.2,1207.15 1194.79,1207.15 1195.37,1207.15 1195.96,1207.15 1196.55,1207.15 1197.13,1207.15 1197.72,1207.15 1198.31,1207.15 1198.89,1207.15 1199.48,1207.15 1200.07,1207.15 1200.65,1207.15 1201.24,1207.15 1201.83,1207.15 1202.41,1207.15 1203,1207.15 1203.58,1207.15 1204.17,1207.15 1204.76,1207.15 1205.34,1207.15 1205.93,1207.15 1206.52,1207.15 1207.1,1207.15 1207.69,1207.15 1208.28,1207.15 1208.86,1207.15 1209.45,1207.15 1210.03,1207.15 1210.62,1207.15 1211.21,1207.15 1211.79,1207.15 1212.38,1207.15 1212.97,1207.15 1213.55,1207.15 1214.14,1207.15 1214.73,1207.15 1215.31,1207.15 1215.9,1207.15 1216.49,1207.15 1217.07,1207.15 1217.66,1207.15 1218.24,1207.15 1218.83,1207.15 1219.42,1207.15 1220,1207.15 1220.59,1207.15 1221.18,1207.15 1221.76,1207.15 1222.35,1207.15 1222.94,1207.15 1223.52,1207.15 1224.11,1207.15 1224.7,1207.15 1225.28,1207.15 1225.87,1207.15 1226.45,1207.15 1227.04,1207.15 1227.63,1207.15 1228.21,1207.15 1228.8,1207.15 1229.39,1207.15 1229.97,1207.15 1230.56,1207.15 1231.15,1207.15 1231.73,1207.15 1232.32,1207.15 1232.91,1207.15 1233.49,1207.15 1234.08,1207.15 1234.66,1207.15 1235.25,1207.15 1235.84,1207.15 1236.42,1207.15 1237.01,1207.15 1237.6,1207.15 1238.18,1207.15 1238.77,1207.15 1239.36,1207.15 1239.94,1207.15 1240.53,1207.15 1241.11,1207.15 1241.7,1207.15 1242.29,1207.15 1242.87,1207.15 1243.46,1207.15 1244.05,1207.15 1244.63,1207.15 1245.22,1207.15 1245.81,1207.15 1246.39,1207.15 1246.98,1207.15 1247.57,1207.15 1248.15,1207.15 1248.74,1207.15 1249.32,1207.15 1249.91,1207.15 1250.5,1207.15 1251.08,1207.15 1251.67,1207.15 1252.26,1207.15 1252.84,1207.15 1253.43,1207.15 1254.02,1207.15 1254.6,1207.15 1255.19,1207.15 1255.78,1207.15 1256.36,1207.15 1256.95,1207.15 1257.53,1207.15 1258.12,1207.15 1258.71,1207.15 1259.29,1207.15 1259.88,1207.15 1260.47,1207.15 1261.05,1207.15 1261.64,1207.15 1262.23,1207.15 1262.81,1207.15 1263.4,1207.15 1263.98,1207.15 1264.57,1207.15 1265.16,1207.15 1265.74,1207.15 1266.33,1207.15 1266.92,1207.15 1267.5,1207.15 1268.09,1207.15 1268.68,1207.15 1269.26,1207.15 1269.85,1207.15 1270.44,1207.15 1271.02,1207.15 1271.61,1207.15 1272.19,1207.15 1272.78,1207.15 1273.37,1207.15 1273.95,1207.15 1274.54,1207.15 1275.13,1207.15 1275.71,1207.15 1276.3,1207.15 1276.89,1207.15 1277.47,1207.15 1278.06,1207.15 1278.65,1207.15 1279.23,1207.15 1279.82,1207.15 1280.4,1207.15 1280.99,1207.15 1281.58,1207.15 1282.16,1207.15 1282.75,1207.15 1283.34,1207.15 1283.92,1207.15 1284.51,1207.15 1285.1,1207.15 1285.68,1207.15 1286.27,1207.15 1286.86,1207.15 1287.44,1207.15 1288.03,1207.15 1288.61,1207.15 1289.2,1207.15 1289.79,1207.15 1290.37,1207.15 1290.96,1207.15 1291.55,1207.15 1292.13,1207.15 1292.72,1207.15 1293.31,1207.15 1293.89,1207.15 1294.48,1207.15 1295.06,1207.15 1295.65,1207.15 1296.24,1207.15 1296.82,1207.15 1297.41,1207.15 1298,1207.15 1298.58,1207.15 1299.17,1207.15 1299.76,1207.15 1300.34,1207.15 1300.93,1207.15 1301.52,1207.15 1302.1,1207.15 1302.69,1207.15 1303.27,1207.15 1303.86,1207.15 1304.45,1207.15 1305.03,1207.15 1305.62,1207.15 1306.21,1207.15 1306.79,1207.15 1307.38,1207.15 1307.97,1207.15 1308.55,1207.15 1309.14,1207.15 1309.73,1207.15 1310.31,1207.15 1310.9,1207.15 1311.48,1207.15 1312.07,1207.15 1312.66,1207.15 1313.24,1207.15 1313.83,1207.15 1314.42,1207.15 1315,1207.15 1315.59,1207.15 1316.18,1207.15 1316.76,1207.15 1317.35,1207.15 1317.93,1207.15 1318.52,1207.15 1319.11,1207.15 1319.69,1207.15 1320.28,1207.15 1320.87,1207.15 1321.45,1207.15 1322.04,1207.15 1322.63,1207.15 1323.21,1207.15 1323.8,1207.15 1324.39,1207.15 1324.97,1207.15 1325.56,1207.15 1326.14,1207.15 1326.73,1207.15 1327.32,1207.15 1327.9,1207.15 1328.49,1207.15 1329.08,1207.15 1329.66,1207.15 1330.25,1207.15 1330.84,1207.15 1331.42,1207.15 1332.01,1207.15 1332.6,1207.15 1333.18,1207.15 1333.77,1207.15 1334.35,1207.15 1334.94,1207.15 1335.53,1207.15 1336.11,1207.15 1336.7,1207.15 1337.29,1207.15 1337.87,1207.15 1338.46,1207.15 1339.05,1207.15 1339.63,1207.15 1340.22,1207.15 1340.8,1207.15 1341.39,1207.15 1341.98,1207.15 1342.56,1207.15 1343.15,1207.15 1343.74,1207.15 1344.32,1207.15 1344.91,1207.15 1345.5,1207.15 1346.08,1207.15 1346.67,1207.15 1347.26,1207.15 1347.84,1207.15 1348.43,1207.15 1349.01,1207.15 1349.6,1207.15 1350.19,1207.15 1350.77,1207.15 1351.36,1207.15 1351.95,1207.15 1352.53,1207.15 1353.12,1207.15 1353.71,1207.15 1354.29,1207.15 1354.88,1207.15 1355.47,1207.15 1356.05,1207.15 1356.64,1207.15 1357.22,1207.15 1357.81,1207.15 1358.4,1207.15 1358.98,1207.15 1359.57,1207.15 1360.16,1207.15 1360.74,1207.15 1361.33,1207.15 1361.92,1207.15 1362.5,1207.15 1363.09,1207.15 1363.68,1207.15 1364.26,1207.15 1364.85,1207.15 1365.43,1207.15 1366.02,1207.15 1366.61,1207.15 1367.19,1207.15 1367.78,1207.15 1368.37,1207.15 1368.95,1207.15 1369.54,1207.15 1370.13,1207.15 1370.71,1207.15 1371.3,1207.15 1371.88,1207.15 1372.47,1207.15 1373.06,1207.15 1373.64,1207.15 1374.23,1207.15 1374.82,1207.15 1375.4,1207.15 1375.99,1207.15 1376.58,1207.15 1377.16,1207.15 1377.75,1207.15 1378.34,1207.15 1378.92,1207.15 1379.51,1207.15 1380.09,1207.15 1380.68,1207.15 1381.27,1207.15 1381.85,1207.15 1382.44,1207.15 1383.03,1207.15 1383.61,1207.15 1384.2,1207.15 1384.79,1207.15 1385.37,1207.15 1385.96,1207.15 1386.55,1207.15 1387.13,1207.15 1387.72,1207.15 1388.3,1207.15 1388.89,1207.15 1389.48,1207.15 1390.06,1207.15 1390.65,1207.15 1391.24,1207.15 1391.82,1207.15 1392.41,1207.15 1393,1207.15 1393.58,1207.15 1394.17,1207.15 1394.75,1207.15 1395.34,1207.15 1395.93,1207.15 1396.51,1207.15 1397.1,1207.15 1397.69,1207.15 1398.27,1207.15 1398.86,1207.15 1399.45,1207.15 1400.03,1207.15 1400.62,1207.15 1401.21,1207.15 1401.79,1207.15 1402.38,1207.15 1402.96,1207.15 1403.55,1207.15 1404.14,1207.15 1404.72,1207.15 1405.31,1207.15 1405.9,1207.15 1406.48,1207.15 1407.07,1207.15 1407.66,1207.15 1408.24,1207.15 1408.83,1207.15 1409.42,1207.15 1410,1207.15 1410.59,1207.15 1411.17,1207.15 1411.76,1207.15 1412.35,1207.15 1412.93,1207.15 1413.52,1207.15 1414.11,1207.15 1414.69,1207.15 1415.28,1207.15 1415.87,1207.15 1416.45,1207.15 1417.04,1207.15 1417.63,1207.15 1418.21,1207.15 1418.8,1207.15 1419.38,1207.15 1419.97,1207.15 1420.56,1207.15 1421.14,1207.15 1421.73,1207.15 1422.32,1207.15 1422.9,1207.15 1423.49,1207.15 1424.08,1207.15 1424.66,1207.15 1425.25,1207.15 1425.83,1207.15 1426.42,1207.15 1427.01,1207.15 1427.59,1207.15 1428.18,1207.15 1428.77,1207.15 1429.35,1207.15 1429.94,1207.15 1430.53,1207.15 1431.11,1207.15 1431.7,1207.15 1432.29,1207.15 1432.87,1207.15 1433.46,1207.15 1434.04,1207.15 1434.63,1207.15 1435.22,1207.15 1435.8,1207.15 1436.39,1207.15 1436.98,1207.15 1437.56,1207.15 1438.15,1207.15 1438.74,1207.15 1439.32,1207.15 1439.91,1207.15 1440.5,1207.15 1441.08,1207.15 1441.67,1207.15 1442.25,1207.15 1442.84,1207.15 1443.43,1207.15 1444.01,1207.15 1444.6,1207.15 1445.19,1207.15 1445.77,1207.15 1446.36,1207.15 1446.95,1207.15 1447.53,1207.15 1448.12,1207.15 1448.7,1207.15 1449.29,1207.15 1449.88,1207.15 1450.46,1207.15 1451.05,1207.15 1451.64,1207.15 1452.22,1207.15 1452.81,1207.15 1453.4,1207.15 1453.98,1207.15 1454.57,1207.15 1455.16,1207.15 1455.74,1207.15 1456.33,1207.15 1456.91,1207.15 1457.5,1207.15 1458.09,1207.15 1458.67,1207.15 1459.26,1207.15 1459.85,1207.15 1460.43,1207.15 1461.02,1207.15 1461.61,1207.15 1462.19,1207.15 1462.78,1207.15 1463.37,1207.15 1463.95,1207.15 1464.54,1207.15 1465.12,1207.15 1465.71,1207.15 1466.3,1207.15 1466.88,1207.15 1467.47,1207.15 1468.06,1207.15 1468.64,1207.15 1469.23,1207.15 1469.82,1207.15 1470.4,1207.15 1470.99,1207.15 1471.57,1207.15 1472.16,1207.15 1472.75,1207.15 1473.33,1207.15 1473.92,1207.15 1474.51,1207.15 1475.09,1207.15 1475.68,1207.15 1476.27,1207.15 1476.85,1207.15 1477.44,1207.15 1478.03,1207.15 1478.61,1207.15 1479.2,1207.15 1479.78,1207.15 1480.37,1207.15 1480.96,1207.15 1481.54,1207.15 1482.13,1207.15 1482.72,1207.15 1483.3,1207.15 1483.89,1207.15 1484.48,1207.15 1485.06,1207.15 1485.65,1207.15 1486.24,1207.15 1486.82,1207.15 1487.41,1207.15 1487.99,1207.15 1488.58,1207.15 1489.17,1207.15 1489.75,1207.15 1490.34,1207.15 1490.93,1207.15 1491.51,1207.15 1492.1,1207.15 1492.69,1207.15 1493.27,1207.15 1493.86,1207.15 1494.45,1207.15 1495.03,1207.15 1495.62,1207.15 1496.2,1207.15 1496.79,1207.15 1497.38,1207.15 1497.96,1207.15 1498.55,1207.15 1499.14,1207.15 1499.72,1207.15 1500.31,1207.15 1500.9,1207.15 1501.48,1207.15 1502.07,1207.15 1502.65,1207.15 1503.24,1207.15 1503.83,1207.15 1504.41,1207.15 1505,1207.15 1505.59,1207.15 1506.17,1207.15 1506.76,1207.15 1507.35,1207.15 1507.93,1207.15 1508.52,1207.15 1509.11,1207.15 1509.69,1207.15 1510.28,1207.15 1510.86,1207.15 1511.45,1207.15 1512.04,1207.15 1512.62,1207.15 1513.21,1207.15 1513.8,1207.15 1514.38,1207.15 1514.97,1207.15 1515.56,1207.15 1516.14,1207.15 1516.73,1207.15 1517.32,1207.15 1517.9,1207.15 1518.49,1207.15 1519.07,1207.15 1519.66,1207.15 1520.25,1207.15 1520.83,1207.15 1521.42,1207.15 1522.01,1207.15 1522.59,1207.15 1523.18,1207.15 1523.77,1207.15 1524.35,1207.15 1524.94,1207.15 1525.52,1207.15 1526.11,1207.15 1526.7,1207.15 1527.28,1207.15 1527.87,1207.15 1528.46,1207.15 1529.04,1207.15 1529.63,1207.15 1530.22,1207.15 1530.8,1207.15 1531.39,1207.15 1531.98,1207.15 1532.56,1207.15 1533.15,1207.15 1533.73,1207.15 1534.32,1207.15 1534.91,1207.15 1535.49,1207.15 1536.08,1207.15 1536.67,1207.15 1537.25,1207.15 1537.84,1207.15 1538.43,1207.15 1539.01,1207.15 1539.6,1207.15 1540.19,1207.15 1540.77,1207.15 1541.36,1207.15 1541.94,1207.15 1542.53,1207.15 1543.12,1207.15 1543.7,1207.15 1544.29,1207.15 1544.88,1207.15 1545.46,1207.15 1546.05,1207.15 1546.64,1207.15 1547.22,1207.15 1547.81,1207.15 1548.4,1207.15 1548.98,1207.15 1549.57,1207.15 1550.15,1207.15 1550.74,1207.15 1551.33,1207.15 1551.91,1207.15 1552.5,1207.15 1553.09,1207.15 1553.67,1207.15 1554.26,1207.15 1554.85,1207.15 1555.43,1207.15 1556.02,1207.15 1556.6,1207.15 1557.19,1207.15 1557.78,1207.15 1558.36,1207.15 1558.95,1207.15 1559.54,1207.15 1560.12,1207.15 1560.71,1207.15 1561.3,1207.15 1561.88,1207.15 1562.47,1207.15 1563.06,1207.15 1563.64,1207.15 1564.23,1207.15 1564.81,1207.15 1565.4,1207.15 1565.99,1207.15 1566.57,1207.15 1567.16,1207.15 1567.75,1207.15 1568.33,1207.15 1568.92,1207.15 1569.51,1207.15 1570.09,1207.15 1570.68,1207.15 1571.27,1207.15 1571.85,1207.15 1572.44,1207.15 1573.02,1207.15 1573.61,1207.15 1574.2,1207.15 1574.78,1207.15 1575.37,1207.15 1575.96,1207.15 1576.54,1207.15 1577.13,1207.15 1577.72,1207.15 1578.3,1207.15 1578.89,1207.15 1579.47,1207.15 1580.06,1207.15 1580.65,1207.15 1581.23,1207.15 1581.82,1207.15 1582.41,1207.15 1582.99,1207.15 1583.58,1207.15 1584.17,1207.15 1584.75,1207.15 1585.34,1207.15 1585.93,1207.15 1586.51,1207.15 1587.1,1207.15 1587.68,1207.15 1588.27,1207.15 1588.86,1207.15 1589.44,1207.15 1590.03,1207.15 1590.62,1207.15 1591.2,1207.15 1591.79,1207.15 1592.38,1207.15 1592.96,1207.15 1593.55,1207.15 1594.14,1207.15 1594.72,1207.15 1595.31,1207.15 1595.89,1207.15 1596.48,1207.15 1597.07,1207.15 1597.65,1207.15 1598.24,1207.15 1598.83,1207.15 1599.41,1207.15 1600,1207.15 1600.59,1207.15 1601.17,1207.15 1601.76,1207.15 1602.34,1207.15 1602.93,1207.15 1603.52,1207.15 1604.1,1207.15 1604.69,1207.15 1605.28,1207.15 1605.86,1207.15 1606.45,1207.15 1607.04,1207.15 1607.62,1207.15 1608.21,1207.15 1608.8,1207.15 1609.38,1207.15 1609.97,1207.15 1610.55,1207.15 1611.14,1207.15 1611.73,1207.15 1612.31,1207.15 1612.9,1207.15 1613.49,1207.15 1614.07,1207.15 1614.66,1207.15 1615.25,1207.15 1615.83,1207.15 1616.42,1207.15 1617.01,1207.15 1617.59,1207.15 1618.18,1207.15 1618.76,1207.15 1619.35,1207.15 1619.94,1207.15 1620.52,1207.15 1621.11,1207.15 1621.7,1207.15 1622.28,1207.15 1622.87,1207.15 1623.46,1207.15 1624.04,1207.15 1624.63,1207.15 1625.22,1207.15 1625.8,1207.15 1626.39,1207.15 1626.97,1207.15 1627.56,1207.15 1628.15,1207.15 1628.73,1207.15 1629.32,1207.15 1629.91,1207.15 1630.49,1207.15 1631.08,1207.15 1631.67,1207.15 1632.25,1207.15 1632.84,1207.15 1633.42,1207.15 1634.01,1207.15 1634.6,1207.15 1635.18,1207.15 1635.77,1207.15 1636.36,1207.15 1636.94,1207.15 1637.53,1207.15 1638.12,1207.15 1638.7,1207.15 1639.29,1207.15 1639.88,1207.15 1640.46,1207.15 1641.05,1207.15 1641.63,1207.15 1642.22,1207.15 1642.81,1207.15 1643.39,1207.15 1643.98,1207.15 1644.57,1207.15 1645.15,1207.15 1645.74,1207.15 1646.33,1207.15 1646.91,1207.15 1647.5,1207.15 1648.09,1207.15 1648.67,1207.15 1649.26,1207.15 1649.84,1207.15 1650.43,1207.15 1651.02,1207.15 1651.6,1207.15 1652.19,1207.15 1652.78,1207.15 1653.36,1207.15 1653.95,1207.15 1654.54,1207.15 1655.12,1207.15 1655.71,1207.15 1656.29,1207.15 1656.88,1207.15 1657.47,1207.15 1658.05,1207.15 1658.64,1207.15 1659.23,1207.15 1659.81,1207.15 1660.4,1207.15 1660.99,1207.15 1661.57,1207.15 1662.16,1207.15 1662.75,1207.15 1663.33,1207.15 1663.92,1207.15 1664.5,1207.15 1665.09,1207.15 1665.68,1207.15 1666.26,1207.15 1666.85,1207.15 1667.44,1207.15 1668.02,1207.15 1668.61,1207.15 1669.2,1207.15 1669.78,1207.15 1670.37,1207.15 1670.96,1207.15 1671.54,1207.15 1672.13,1207.15 1672.71,1207.15 1673.3,1207.15 1673.89,1207.15 1674.47,1207.15 1675.06,1207.15 1675.65,1207.15 1676.23,1207.15 1676.82,1207.15 1677.41,1207.15 1677.99,1207.15 1678.58,1207.15 1679.17,1207.15 1679.75,1207.15 1680.34,1207.15 1680.92,1207.15 1681.51,1207.15 1682.1,1207.15 1682.68,1207.15 1683.27,1207.15 1683.86,1207.15 1684.44,1207.15 1685.03,1207.15 1685.62,1207.15 1686.2,1207.15 1686.79,1207.15 1687.37,1207.15 1687.96,1207.15 1688.55,1207.15 1689.13,1207.15 1689.72,1207.15 1690.31,1207.15 1690.89,1207.15 1691.48,1207.15 1692.07,1207.15 1692.65,1207.15 1693.24,1207.15 1693.83,1207.15 1694.41,1207.15 1695,1207.15 1695.58,1207.15 1696.17,1207.15 1696.76,1207.15 1697.34,1207.15 1697.93,1207.15 1698.52,1207.15 1699.1,1207.15 1699.69,1207.15 1700.28,1207.15 1700.86,1207.15 1701.45,1207.15 1702.04,1207.15 1702.62,1207.15 1703.21,1207.15 1703.79,1207.15 1704.38,1207.15 1704.97,1207.15 1705.55,1207.15 1706.14,1207.15 1706.73,1207.15 1707.31,1207.15 1707.9,1207.15 1708.49,1207.15 1709.07,1207.15 1709.66,1207.15 1710.24,1207.15 1710.83,1207.15 1711.42,1207.15 1712,1207.15 1712.59,1207.15 1713.18,1207.15 1713.76,1207.15 1714.35,1207.15 1714.94,1207.15 1715.52,1207.15 1716.11,1207.15 1716.7,1207.15 1717.28,1207.15 1717.87,1207.15 1718.45,1207.15 1719.04,1207.15 1719.63,1207.15 1720.21,1207.15 1720.8,1207.15 1721.39,1207.15 1721.97,1207.15 1722.56,1207.15 1723.15,1207.15 1723.73,1207.15 1724.32,1207.15 1724.91,1207.15 1725.49,1207.15 1726.08,1207.15 1726.66,1207.15 1727.25,1207.15 1727.84,1207.15 1728.42,1207.15 1729.01,1207.15 1729.6,1207.15 1730.18,1207.15 1730.77,1207.15 1731.36,1207.15 1731.94,1207.15 1732.53,1207.15 1733.11,1207.15 1733.7,1207.15 1734.29,1207.15 1734.87,1207.15 1735.46,1207.15 1736.05,1207.15 1736.63,1207.15 1737.22,1207.15 1737.81,1207.15 1738.39,1207.15 1738.98,1207.15 1739.57,1207.15 1740.15,1207.15 1740.74,1207.15 1741.32,1207.15 1741.91,1207.15 1742.5,1207.15 1743.08,1207.15 1743.67,1207.15 1744.26,1207.15 1744.84,1207.15 1745.43,1207.15 1746.02,1207.15 1746.6,1207.15 1747.19,1207.15 1747.78,1207.15 1748.36,1207.15 1748.95,1207.15 1749.53,1207.15 1750.12,1207.15 1750.71,1207.15 1751.29,1207.15 1751.88,1207.15 1752.47,1207.15 1753.05,1207.15 1753.64,1207.15 1754.23,1207.15 1754.81,1207.15 1755.4,1207.15 1755.99,1207.15 1756.57,1207.15 1757.16,1207.15 1757.74,1207.15 1758.33,1207.15 1758.92,1207.15 1759.5,1207.15 1760.09,1207.15 1760.68,1207.15 1761.26,1207.15 1761.85,1207.15 1762.44,1207.15 1763.02,1207.15 1763.61,1207.15 1764.19,1207.15 1764.78,1207.15 1765.37,1207.15 1765.95,1207.15 1766.54,1207.15 1767.13,1207.15 1767.71,1207.15 1768.3,1207.15 1768.89,1207.15 1769.47,1207.15 1770.06,1207.15 1770.65,1207.15 1771.23,1207.15 1771.82,1207.15 1772.4,1207.15 1772.99,1207.15 1773.58,1207.15 1774.16,1207.15 1774.75,1207.15 1775.34,1207.15 1775.92,1207.15 1776.51,1207.15 1777.1,1207.15 1777.68,1207.15 1778.27,1207.15 1778.86,1207.15 1779.44,1207.15 1780.03,1207.15 1780.61,1207.15 1781.2,1207.15 1781.79,1207.15 1782.37,1207.15 1782.96,1207.15 1783.55,1207.15 1784.13,1207.15 1784.72,1207.15 1785.31,1207.15 1785.89,1207.15 1786.48,1207.15 1787.06,1207.15 1787.65,1207.15 1788.24,1207.15 1788.82,1207.15 1789.41,1207.15 1790,1207.15 1790.58,1207.15 1791.17,1207.15 1791.76,1207.15 1792.34,1207.15 1792.93,1207.15 1793.52,1207.15 1794.1,1207.15 1794.69,1207.15 1795.27,1207.15 1795.86,1207.15 1796.45,1207.15 1797.03,1207.15 1797.62,1207.15 1798.21,1207.15 1798.79,1207.15 1799.38,1207.15 1799.97,1207.15 1800.55,1207.15 1801.14,1207.15 1801.73,1207.15 1802.31,1207.15 1802.9,1207.15 1803.48,1207.15 1804.07,1207.15 1804.66,1207.15 1805.24,1207.15 1805.83,1207.15 1806.42,1207.15 1807,1207.15 1807.59,1207.15 1808.18,1207.15 1808.76,1207.15 1809.35,1207.15 1809.94,1207.15 1810.52,1207.15 1811.11,1207.15 1811.69,1207.15 1812.28,1207.15 1812.87,1207.15 1813.45,1207.15 1814.04,1207.15 1814.63,1207.15 1815.21,1207.15 1815.8,1207.15 1816.39,1207.15 1816.97,1207.15 1817.56,1207.15 1818.14,1207.15 1818.73,1207.15 1819.32,1207.15 1819.9,1207.15 1820.49,1207.15 1821.08,1207.15 1821.66,1207.15 1822.25,1207.15 1822.84,1207.15 1823.42,1207.15 1824.01,1207.15 1824.6,1207.15 1825.18,1207.15 1825.77,1207.15 1826.35,1207.15 1826.94,1207.15 1827.53,1207.15 1828.11,1207.15 1828.7,1207.15 1829.29,1207.15 1829.87,1207.15 1830.46,1207.15 1831.05,1207.15 1831.63,1207.15 1832.22,1207.15 1832.81,1207.15 1833.39,1207.15 1833.98,1207.15 1834.56,1207.15 1835.15,1207.15 1835.74,1207.15 1836.32,1207.15 1836.91,1207.15 1837.5,1207.15 1838.08,1207.15 1838.67,1207.15 1839.26,1207.15 1839.84,1207.15 1840.43,1207.15 1841.01,1207.15 1841.6,1207.15 1842.19,1207.15 1842.77,1207.15 1843.36,1207.15 1843.95,1207.15 1844.53,1207.15 1845.12,1207.15 1845.71,1207.15 1846.29,1207.15 1846.88,1207.15 1847.47,1207.15 1848.05,1207.15 1848.64,1207.15 1849.22,1207.15 1849.81,1207.15 1850.4,1207.15 1850.98,1207.15 1851.57,1207.15 1852.16,1207.15 1852.74,1207.15 1853.33,1207.15 1853.92,1207.15 1854.5,1207.15 1855.09,1207.15 1855.68,1207.15 1856.26,1207.15 1856.85,1207.15 1857.43,1207.15 1858.02,1207.15 1858.61,1207.15 1859.19,1207.15 1859.78,1207.15 1860.37,1207.15 1860.95,1207.15 1861.54,1207.15 1862.13,1207.15 1862.71,1207.15 1863.3,1207.15 1863.88,1207.15 1864.47,1207.15 1865.06,1207.15 1865.64,1207.15 1866.23,1207.15 1866.82,1207.15 1867.4,1207.15 1867.99,1207.15 1868.58,1207.15 1869.16,1207.15 1869.75,1207.15 1870.34,1207.15 1870.92,1207.15 1871.51,1207.15 1872.09,1207.15 1872.68,1207.15 1873.27,1207.15 1873.85,1207.15 1874.44,1207.15 1875.03,1207.15 1875.61,1207.15 1876.2,1207.15 1876.79,1207.15 1877.37,1207.15 1877.96,1207.15 1878.55,1207.15 1879.13,1207.15 1879.72,1207.15 1880.3,1207.15 1880.89,1207.15 1881.48,1207.15 1882.06,1207.15 1882.65,1207.15 1883.24,1207.15 1883.82,1207.15 1884.41,1207.15 1885,1207.15 1885.58,1207.15 1886.17,1207.15 1886.76,1207.15 1887.34,1207.15 1887.93,1207.15 1888.51,1207.15 1889.1,1207.15 1889.69,1207.15 1890.27,1207.15 1890.86,1207.15 1891.45,1207.15 1892.03,1207.15 1892.62,1207.15 1893.21,1207.15 1893.79,1207.15 1894.38,1207.15 1894.96,1207.15 1895.55,1207.15 1896.14,1207.15 1896.72,1207.15 1897.31,1207.15 1897.9,1207.15 1898.48,1207.15 1899.07,1207.15 1899.66,1207.15 1900.24,1207.15 1900.83,1207.15 1901.42,1207.15 1902,1207.15 1902.59,1207.15 1903.17,1207.15 1903.76,1207.15 1904.35,1207.15 1904.93,1207.15 1905.52,1207.15 1906.11,1207.15 1906.69,1207.15 1907.28,1207.15 1907.87,1207.15 1908.45,1207.15 1909.04,1207.15 1909.63,1207.15 1910.21,1207.15 1910.8,1207.15 1911.38,1207.15 1911.97,1207.15 1912.56,1207.15 1913.14,1207.15 1913.73,1207.15 1914.32,1207.15 1914.9,1207.15 1915.49,1207.15 1916.08,1207.15 1916.66,1207.15 1917.25,1207.15 1917.83,1207.15 1918.42,1207.15 1919.01,1207.15 1919.59,1207.15 1920.18,1207.15 1920.77,1207.15 1921.35,1207.15 1921.94,1207.15 1922.53,1207.15 1923.11,1207.15 1923.7,1207.15 1924.29,1207.15 1924.87,1207.15 1925.46,1207.15 1926.04,1207.15 1926.63,1207.15 1927.22,1207.15 1927.8,1207.15 1928.39,1207.15 1928.98,1207.15 1929.56,1207.15 1930.15,1207.15 1930.74,1207.15 1931.32,1207.15 1931.91,1207.15 1932.5,1207.15 1933.08,1207.15 1933.67,1207.15 1934.25,1207.15 1934.84,1207.15 1935.43,1207.15 1936.01,1207.15 1936.6,1207.15 1937.19,1207.15 1937.77,1207.15 1938.36,1207.15 1938.95,1207.15 1939.53,1207.15 1940.12,1207.15 1940.71,1207.15 1941.29,1207.15 1941.88,1207.15 1942.46,1207.15 1943.05,1207.15 1943.64,1207.15 1944.22,1207.15 1944.81,1207.15 1945.4,1207.15 1945.98,1207.15 1946.57,1207.15 1947.16,1207.15 1947.74,1207.15 1948.33,1207.15 1948.91,1207.15 1949.5,1207.15 1950.09,1207.15 1950.67,1207.15 1951.26,1207.15 1951.85,1207.15 1952.43,1207.15 1953.02,1207.15 1953.61,1207.15 1954.19,1207.15 1954.78,1207.15 1955.37,1207.15 1955.95,1207.15 1956.54,1207.15 1957.12,1207.15 1957.71,1207.15 1958.3,1207.15 1958.88,1207.15 1959.47,1207.15 1960.06,1207.15 1960.64,1207.15 1961.23,1207.15 1961.82,1207.15 1962.4,1207.15 1962.99,1207.15 1963.58,1207.15 1964.16,1207.15 1964.75,1207.15 1965.33,1207.15 1965.92,1207.15 1966.51,1207.15 1967.09,1207.15 1967.68,1207.15 1968.27,1207.15 1968.85,1207.15 1969.44,1207.15 1970.03,1207.15 1970.61,1207.15 1971.2,1207.15 1971.78,1207.15 1972.37,1207.15 1972.96,1207.15 1973.54,1207.15 1974.13,1207.15 1974.72,1207.15 1975.3,1207.15 1975.89,1207.15 1976.48,1207.15 1977.06,1207.15 1977.65,1207.15 1978.24,1207.15 1978.82,1207.15 1979.41,1207.15 1979.99,1207.15 1980.58,1207.15 1981.17,1207.15 1981.75,1207.15 1982.34,1207.15 1982.93,1207.15 1983.51,1207.15 1984.1,1207.15 1984.69,1207.15 1985.27,1207.15 1985.86,1207.15 1986.45,1207.15 1987.03,1207.15 1987.62,1207.15 1988.2,1207.15 1988.79,1207.15 1989.38,1207.15 1989.96,1207.15 1990.55,1207.15 1991.14,1207.15 1991.72,1207.15 1992.31,1207.15 1992.9,1207.15 1993.48,1207.15 1994.07,1207.15 1994.65,1207.15 1995.24,1207.15 1995.83,1207.15 1996.41,1207.15 1997,1207.15 1997.59,1207.15 1998.17,1207.15 1998.76,1207.15 1999.35,1207.15 1999.93,1207.15 2000.52,1207.15 2001.11,1207.15 2001.69,1207.15 2002.28,1207.15 2002.86,1207.15 2003.45,1207.15 2004.04,1207.15 2004.62,1207.15 2005.21,1207.15 2005.8,1207.15 2006.38,1207.15 2006.97,1207.15 2007.56,1207.15 2008.14,1207.15 2008.73,1207.15 2009.32,1207.15 2009.9,1207.15 2010.49,1207.15 2011.07,1207.15 2011.66,1207.15 2012.25,1207.15 2012.83,1207.15 2013.42,1207.15 2014.01,1207.15 2014.59,1207.15 2015.18,1207.15 2015.77,1207.15 2016.35,1207.15 2016.94,1207.15 2017.53,1207.15 2018.11,1207.15 2018.7,1207.15 2019.28,1207.15 2019.87,1207.15 2020.46,1207.15 2021.04,1207.15 2021.63,1207.15 2022.22,1207.15 2022.8,1207.15 2023.39,1207.15 2023.98,1207.15 2024.56,1207.15 2025.15,1207.15 2025.73,1207.15 2026.32,1207.15 2026.91,1207.15 2027.49,1207.15 2028.08,1207.15 2028.67,1207.15 2029.25,1207.15 2029.84,1207.15 2030.43,1207.15 2031.01,1207.15 2031.6,1207.15 2032.19,1207.15 2032.77,1207.15 2033.36,1207.15 2033.94,1207.15 2034.53,1207.15 2035.12,1207.15 2035.7,1207.15 2036.29,1207.15 2036.88,1207.15 2037.46,1207.15 2038.05,1207.15 2038.64,1207.15 2039.22,1207.15 2039.81,1207.15 2040.4,1207.15 2040.98,1207.15 2041.57,1207.15 2042.15,1207.15 2042.74,1207.15 2043.33,1207.15 2043.91,1207.15 2044.5,1207.15 2045.09,1207.15 2045.67,1207.15 2046.26,1207.15 2046.85,1207.15 2047.43,1207.15 2048.02,1207.15 2048.6,1207.15 2049.19,1207.15 2049.78,1207.15 2050.36,1207.15 2050.95,1207.15 2051.54,1207.15 2052.12,1207.15 2052.71,1207.15 2053.3,1207.15 2053.88,1207.15 2054.47,1207.15 2055.06,1207.15 2055.64,1207.15 2056.23,1207.15 2056.81,1207.15 2057.4,1207.15 2057.99,1207.15 2058.57,1207.15 2059.16,1207.15 2059.75,1207.15 2060.33,1207.15 2060.92,1207.15 2061.51,1207.15 2062.09,1207.15 2062.68,1207.15 2063.27,1207.15 2063.85,1207.15 2064.44,1207.15 2065.02,1207.15 2065.61,1207.15 2066.2,1207.15 2066.78,1207.15 2067.37,1207.15 2067.96,1207.15 2068.54,1207.15 2069.13,1207.15 2069.72,1207.15 2070.3,1207.15 2070.89,1207.15 2071.48,1207.15 2072.06,1207.15 2072.65,1207.15 2073.23,1207.15 2073.82,1207.15 2074.41,1207.15 2074.99,1207.15 2075.58,1207.15 2076.17,1207.15 2076.75,1207.15 2077.34,1207.15 2077.93,1207.15 2078.51,1207.15 2079.1,1207.15 2079.68,1207.15 2080.27,1207.15 2080.86,1207.15 2081.44,1207.15 2082.03,1207.15 2082.62,1207.15 2083.2,1207.15 2083.79,1207.15 2084.38,1207.15 2084.96,1207.15 2085.55,1207.15 2086.14,1207.15 2086.72,1207.15 2087.31,1207.15 2087.89,1207.15 2088.48,1207.15 2089.07,1207.15 2089.65,1207.15 2090.24,1207.15 2090.83,1207.15 2091.41,1207.15 2092,1207.15 2092.59,1207.15 2093.17,1207.15 2093.76,1207.15 2094.35,1207.15 2094.93,1207.15 2095.52,1207.15 2096.1,1207.15 2096.69,1207.15 2097.28,1207.15 2097.86,1207.15 2098.45,1207.15 2099.04,1207.15 2099.62,1207.15 2100.21,1207.15 2100.8,1207.15 2101.38,1207.15 2101.97,1207.15 2102.55,1207.15 2103.14,1207.15 2103.73,1207.15 2104.31,1207.15 2104.9,1207.15 2105.49,1207.15 2106.07,1207.15 2106.66,1207.15 2107.25,1207.15 2107.83,1207.15 2108.42,1207.15 2109.01,1207.15 2109.59,1207.15 2110.18,1207.15 2110.76,1207.15 2111.35,1207.15 2111.94,1207.15 2112.52,1207.15 2113.11,1207.15 2113.7,1207.15 2114.28,1207.15 2114.87,1207.15 2115.46,1207.15 2116.04,1207.15 2116.63,1207.15 2117.22,1207.15 2117.8,1207.15 2118.39,1207.15 2118.97,1207.15 2119.56,1207.15 2120.15,1207.15 2120.73,1207.15 2121.32,1207.15 2121.91,1207.15 2122.49,1207.15 2123.08,1207.15 2123.67,1207.15 2124.25,1207.15 2124.84,1207.15 2125.42,1207.15 2126.01,1207.15 2126.6,1207.15 2127.18,1207.15 2127.77,1207.15 2128.36,1207.15 2128.94,1207.15 2129.53,1207.15 2130.12,1207.15 2130.7,1207.15 2131.29,1207.15 2131.88,1207.15 2132.46,1207.15 2133.05,1207.15 2133.63,1207.15 2134.22,1207.15 2134.81,1207.15 2135.39,1207.15 2135.98,1207.15 2136.57,1207.15 2137.15,1207.15 2137.74,1207.15 2138.33,1207.15 2138.91,1207.15 2139.5,1207.15 2140.09,1207.15 2140.67,1207.15 2141.26,1207.15 2141.84,1207.15 2142.43,1207.15 2143.02,1207.15 2143.6,1207.15 2144.19,1207.15 2144.78,1207.15 2145.36,1207.15 2145.95,1207.15 2146.54,1207.15 2147.12,1207.15 2147.71,1207.15 2148.3,1207.15 2148.88,1207.15 2149.47,1207.15 2150.05,1207.15 2150.64,1207.15 2151.23,1207.15 2151.81,1207.15 2152.4,1207.15 2152.99,1207.15 2153.57,1207.15 2154.16,1207.15 2154.75,1207.15 2155.33,1207.15 2155.92,1207.15 2156.5,1207.15 2157.09,1207.15 2157.68,1207.15 2158.26,1207.15 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1560.57,1186.64 1400.54,899.083 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1227.19 985.439,1186.64 2158.26,1186.64 2158.26,1227.19 985.439,1227.19 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip940)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip940)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip943\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip943)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-4871.05 163.792,-5865.69 164.351,-6792.34 164.91,-6438.82 165.469,-7286.54 166.029,-8040.33 166.588,-7701.03 167.147,-8350.52 167.706,-8939.98 168.266,-8635.51 168.825,-8374.85 169.384,-8882.83 169.943,-9337.69 170.503,-9716.04 171.062,-9465.95 171.621,-9236.43 172.18,-9065.57 172.74,-9394.69 173.299,-9670.31 173.858,-9910.88 174.417,-9728.15 174.977,-9939.08 175.536,-9746.45 176.095,-9911.52 176.655,-9719.14 177.214,-9854.9 177.773,-9957.82 178.332,-9752.3 178.892,-9573.54 179.451,-9637.06 180.01,-9667.05 180.569,-9490.38 181.129,-9294.2 181.688,-9121.59 182.247,-8759 182.806,-8754.59 183.366,-8740.28 183.925,-8709.25 184.484,-8370.5 185.043,-8326.51 185.603,-8272.59 186.162,-8202.63 186.721,-8006.45 187.28,-7927.08 187.84,-7730.67 188.399,-7651.4 188.958,-7461.02 189.517,-7281.9 190.077,-6909.76 190.636,-6641.83 191.195,-6218.34 191.754,-6135.09 192.314,-6046.67 192.873,-5954.03 193.432,-5868.84 193.991,-5766.94 194.551,-5545.96 195.11,-5391.76 195.669,-5295.3 196.228,-5021.93 196.788,-4931.91 197.347,-4736.39 197.906,-4595.09 198.465,-4511.68 199.025,-4375.05 199.584,-4195.46 200.143,-4071.43 200.702,-3763.77 201.262,-3597.76 201.821,-3490.21 202.38,-3336.29 202.939,-3225.73 203.499,-2999.55 204.058,-2942.33 204.617,-2842.19 205.176,-2707.47 205.736,-2613.61 206.295,-2523.74 206.854,-2435.69 207.413,-2380.96 207.973,-2325.34 208.532,-2238.97 209.091,-2186.54 209.65,-2094.64 210.21,-2000.61 210.769,-1917.3 211.328,-1775.63 211.887,-1668.02 212.447,-1505.09 213.006,-1458.75 213.565,-1388.28 214.124,-1346.8 214.684,-1224.95 215.243,-1184.91 215.802,-1142.24 216.361,-1103.24 216.921,-982.37 217.48,-921.499 218.039,-831.652 218.598,-774.485 219.158,-669.41 219.717,-616.525 220.276,-540.555 220.835,-463.641 221.395,-391.498 221.954,-326.688 222.513,-328.597 223.072,-304.495 223.632,-257.473 224.191,-210.486 224.75,-169.976 225.309,-148.733 225.869,-106.352 226.428,-84.6661 226.987,-23.7434 227.546,38.1003 228.106,76.2356 228.665,128.968 229.224,199.423 229.783,215.321 230.343,250.739 230.902,244.044 231.461,296.17 232.02,327.009 232.58,340.254 233.139,332.526 233.698,325.097 234.257,400.226 234.817,432.36 235.376,445.124 235.935,475.243 236.494,525.146 237.054,532.755 237.613,556.378 238.172,583.49 238.731,643.255 239.291,686.818 239.85,722.429 240.409,720.573 240.968,724.538 241.528,745.935 242.087,726.317 242.646,781.321 243.205,851.914 243.765,831.56 244.324,866.57 244.883,882.897 245.442,859.435 246.002,857.165 246.561,872.972 247.12,957.643 247.679,914.869 248.239,909.969 248.798,908.5 249.357,937.805 249.916,968.161 250.476,943.765 251.035,973.301 251.594,968.524 252.153,1011.53 252.713,1019.08 253.272,1012.65 253.831,1004.51 254.39,1000.87 254.95,997.294 255.509,1026.55 256.068,1004.72 256.627,1036.83 257.187,1046.77 257.746,1037.52 258.305,1063.8 258.864,1058.01 259.424,1081.78 259.983,1088.11 260.542,1076.43 261.101,1083.64 261.661,1091.67 262.22,1116.97 262.779,1088.21 263.338,1111.31 263.898,1083.62 264.457,1070.26 265.016,1078.19 265.575,1083.76 266.135,1041.77 266.694,1099.1 267.253,1106.93 267.812,1098.66 268.372,1092.9 268.931,1064.79 269.49,1021.18 270.049,1046.26 270.609,1072.12 271.168,1097.74 271.727,1119.28 272.286,1090.78 272.846,1115.61 273.405,1073.13 273.964,1119.24 274.523,1125.5 275.083,1111.52 275.642,1149.53 276.201,1150.67 276.76,1140.05 277.32,1093.69 277.879,1081.71 278.438,1072.16 278.997,1066.1 279.557,1073.25 280.116,1096.75 280.675,1099.91 281.234,1090.67 281.794,1061.16 282.353,1037.75 282.912,1032.12 283.471,1073.97 284.031,1092.79 284.59,1082.49 285.149,1090.92 285.708,1044.81 286.268,1056.86 286.827,1031.09 287.386,1071.44 287.945,1041.63 288.505,1064.31 289.064,1056.92 289.623,1065.51 290.182,1072.63 290.742,1045.55 291.301,1053.45 291.86,1050.21 292.419,1028.86 292.979,1023.88 293.538,1032.75 294.097,1038.26 294.656,1043.88 295.216,1019.07 295.775,1030.33 296.334,1022.94 296.893,1003.27 297.453,979.399 298.012,974.719 298.571,1004.51 299.13,1080.48 299.69,1104.92 300.249,1079.17 300.808,1066.62 301.368,1056.32 301.927,1064.94 302.486,1038.06 303.045,1030.64 303.605,1058.32 304.164,1018.05 304.723,1012.17 305.282,1022.71 305.842,1013.96 306.401,1010.39 306.96,1022.3 307.519,1027.19 308.079,1034.06 308.638,992.126 309.197,984.239 309.756,993.751 310.316,986.569 310.875,998.159 311.434,970.711 311.993,948.392 312.553,976.928 313.112,973.101 313.671,983.806 314.23,957.568 314.79,952.177 315.349,965.11 315.908,992.96 316.467,1018.53 317.027,1010.78 317.586,1005.05 318.145,965.292 318.704,944.511 319.264,959.556 319.823,969.956 320.382,951.008 320.941,943.074 321.501,934.768 322.06,934.949 322.619,897.947 323.178,893.163 323.738,894.948 324.297,845.028 324.856,845.248 325.415,844.983 325.975,830.773 326.534,813.668 327.093,817.721 327.652,820.442 328.212,839.617 328.771,827.109 329.33,846.212 329.889,845.353 330.449,862.751 331.008,827.846 331.567,861.078 332.126,879.473 332.686,893.924 333.245,890.861 333.804,884.693 334.363,917.218 334.923,911.325 335.482,909.869 336.041,906.51 336.6,871.566 337.16,873.723 337.719,904.468 338.278,919.579 338.837,914.23 339.397,909.783 339.956,871.404 340.515,852.754 341.074,870.121 341.634,899.883 342.193,895.919 342.752,891.597 343.311,888.889 343.871,871.574 344.43,869.647 344.989,883.607 345.548,881.674 346.108,883.956 346.667,914.435 347.226,907.127 347.785,886.931 348.345,883.875 348.904,911.447 349.463,937.867 350.022,966.645 350.582,960.031 351.141,941.354 351.7,934.139 352.259,943.309 352.819,937.205 353.378,911.659 353.937,924.129 354.496,935.144 355.056,946.214 355.615,954.539 356.174,950.476 356.733,923.476 357.293,936.074 357.852,914.341 358.411,943.337 358.97,890.664 359.53,826.37 360.089,839.696 360.648,806.697 361.207,822.702 361.767,868.197 362.326,866.794 362.885,907.27 363.444,898.31 364.004,894.345 364.563,873.297 365.122,887.924 365.681,905.157 366.241,880.636 366.8,844.781 367.359,827.268 367.918,775.936 368.478,778.189 369.037,797.583 369.596,800.648 370.155,820.703 370.715,822.634 371.274,822.475 371.833,855.267 372.392,833.276 372.952,830.804 373.511,800.019 374.07,798.142 374.629,799.11 375.189,782.492 375.748,782.992 376.307,817.824 376.866,847.407 377.426,845.715 377.985,841.951 378.544,874.351 379.103,854.661 379.663,836.291 380.222,848.01 380.781,824.047 381.34,825.292 381.9,825.847 382.459,841.379 383.018,838.646 383.577,882.082 384.137,859.405 384.696,886.43 385.255,881.631 385.814,898.39 386.374,909.679 386.933,932.219 387.492,952.82 388.051,949.223 388.611,923.56 389.17,933.314 389.729,909.411 390.288,903.419 390.848,894.009 391.407,855.154 391.966,823.348 392.525,803.166 393.085,818.653 393.644,800.454 394.203,766.801 394.762,787.574 395.322,802.717 395.881,788.339 396.44,817.6 396.999,816.91 397.559,830.162 398.118,797.445 398.677,830.453 399.236,860.219 399.796,875.901 400.355,903.413 400.914,893.602 401.473,856.208 402.033,870.097 402.592,896.458 403.151,925.492 403.71,918.618 404.27,939.482 404.829,916.858 405.388,957.587 405.947,943.848 406.507,903.313 407.066,893.157 407.625,839.054 408.184,849.85 408.744,843.047 409.303,804.36 409.862,822.231 410.421,833.921 410.981,812.5 411.54,794.152 412.099,793.502 412.658,806.481 413.218,823.175 413.777,838.34 414.336,817.544 414.895,800.794 415.455,797.367 416.014,799.36 416.573,783.123 417.132,750.998 417.692,765.635 418.251,749.84 418.81,767.774 419.369,804.627 419.929,821.659 420.488,754.684 421.047,770.974 421.606,767.618 422.166,752.134 422.725,772.498 423.284,788.06 423.843,805.174 424.403,785.757 424.962,786.6 425.521,772.868 426.08,759.258 426.64,758.224 427.199,786.242 427.758,749.266 428.318,748.628 428.877,765.931 429.436,769.028 429.995,783.528 430.555,782.443 431.114,782.64 431.673,776.72 432.232,774.221 432.792,756.051 433.351,758.201 433.91,755.452 434.469,736.522 435.029,723.675 435.588,757.183 436.147,777.944 436.706,759.116 437.266,775.1 437.825,774.521 438.384,790.085 438.943,805.209 439.503,803.21 440.062,802.033 440.621,747.828 441.18,761.121 441.74,777.511 442.299,760.419 442.858,774.426 443.417,743.732 443.977,742.182 444.536,774.246 445.095,785.914 445.654,782.262 446.214,779.957 446.773,793.926 447.332,777.045 447.891,761.234 448.451,794.159 449.01,789.713 449.569,787.233 450.128,800.345 450.688,763.174 451.247,763.11 451.806,728.581 452.365,711.273 452.925,678.824 453.484,669.503 454.043,653.142 454.602,657.745 455.162,643.928 455.721,678.524 456.28,668.554 456.839,672.504 457.399,627.317 457.958,619.425 458.517,624.731 459.076,663.467 459.636,651.132 460.195,651.9 460.754,639.87 461.313,662.183 461.873,684.06 462.432,685.483 462.991,704.154 463.55,705.158 464.11,755.718 464.669,755.803 465.228,774.479 465.787,775.298 466.347,787.618 466.906,818.018 467.465,817.141 468.024,843.633 468.584,840.829 469.143,818.484 469.702,830.758 470.261,810.723 470.821,807.05 471.38,773.25 471.939,753.323 472.498,770.908 473.058,770.118 473.617,802.338 474.176,783.634 474.735,783.269 475.295,812.115 475.854,791.829 476.413,773.492 476.972,788.155 477.532,770.217 478.091,749.073 478.65,747.509 479.209,761.283 479.769,743.341 480.328,745.057 480.887,759.129 481.446,708.83 482.006,708.91 482.565,695.648 483.124,696.791 483.683,713.15 484.243,714.181 484.802,714.271 485.361,730.415 485.92,731.01 486.48,748.976 487.039,749.101 487.598,764.562 488.157,792.955 488.717,818.461 489.276,832.943 489.835,828.583 490.394,825.699 490.954,822.404 491.513,786.017 492.072,785.88 492.631,766.621 493.191,751.125 493.75,718.102 494.309,733.897 494.868,702.033 495.428,720.703 495.987,674.144 496.546,693.17 497.105,730.17 497.665,714.407 498.224,698.192 498.783,666.669 499.342,686.723 499.902,692.155 500.461,710.071 501.02,758.948 501.579,758.908 502.139,770.371 502.698,767.222 503.257,762.672 503.816,742.877 504.376,761.005 504.935,758.659 505.494,771.526 506.053,769.056 506.613,752.297 507.172,748.186 507.731,749.975 508.29,764.1 508.85,747.145 509.409,745.335 509.968,729.62 510.527,728.817 511.087,726.969 511.646,758.733 512.205,728.101 512.764,761.388 513.324,762.742 513.883,777.492 514.442,776.212 515.001,777.159 515.561,739.992 516.12,756.018 516.679,788.359 517.238,816.012 517.798,811.129 518.357,803.05 518.916,816.392 519.475,791.662 520.035,772.432 520.594,772.774 521.153,767.738 521.712,764.669 522.272,765.128 522.831,778.059 523.39,756.88 523.949,771.978 524.509,785.842 525.068,785.396 525.627,783.453 526.186,761.669 526.746,743.601 527.305,725.697 527.864,774.514 528.423,801.338 528.983,796.587 529.542,793.657 530.101,773.489 530.66,786.206 531.22,782.982 531.779,744.8 532.338,743.221 532.897,743.199 533.457,772.726 534.016,786.325 534.575,784.582 535.134,812.966 535.694,808.202 536.253,726.382 536.812,742.503 537.371,791.07 537.931,787.212 538.49,783.727 539.049,764.453 539.608,792.318 540.168,775.455 540.727,757.34 541.286,756.03 541.845,736.21 542.405,736.958 542.964,737.42 543.523,752.062 544.082,734.322 544.642,731.083 545.201,730.024 545.76,727.816 546.319,708.554 546.879,708.911 547.438,693.34 547.997,693.398 548.556,678.35 549.116,630.828 549.675,682.42 550.234,731.704 550.793,730.619 551.353,728.098 551.912,740.803 552.471,721.317 553.031,705.334 553.59,737.414 554.149,766.683 554.708,718.187 555.268,720.43 555.827,701.467 556.386,718.229 556.945,718.724 557.505,737.289 558.064,720.449 558.623,719.87 559.182,720.769 559.742,704.006 560.301,688.001 560.86,721.912 561.419,690.314 561.979,692.187 562.538,695.458 563.097,748.413 563.656,763.979 564.216,761.793 564.775,727.67 565.334,740.93 565.893,768.37 566.453,751.697 567.012,733.918 567.571,717.076 568.13,718.754 568.69,689.425 569.249,691.764 569.808,676.445 570.367,680.262 570.927,684.121 571.486,689.323 572.045,704.953 572.604,689.056 573.164,658.288 573.723,663.115 574.282,700.195 574.841,684.695 575.401,688.494 575.96,756.849 576.519,754.724 577.078,734.144 577.638,699.572 578.197,746.707 578.756,730.237 579.315,728.651 579.875,730.403 580.434,712.909 580.993,699.919 581.552,680.431 582.112,686.008 582.671,670.82 583.23,638.905 583.789,659.579 584.349,629.748 584.908,631.845 585.467,604.791 586.026,592.891 586.586,548.061 587.145,590.077 587.704,626.307 588.263,618.394 588.823,623.668 589.382,629.752 589.941,601.008 590.5,642.468 591.06,647.091 591.619,681.149 592.178,652.724 592.737,688.416 593.297,691.339 593.856,678.45 594.415,696.02 594.974,698.835 595.534,696.582 596.093,701.252 596.652,701.501 597.211,699.426 597.771,716.024 598.33,730.74 598.889,713.647 599.448,716.561 600.008,683.166 600.567,716.058 601.126,714.051 601.685,714.854 602.245,762.262 602.804,743.001 603.363,743.548 603.922,773.08 604.482,783.615 605.041,764.489 605.6,760.737 606.159,760.626 606.719,756.635 607.278,754.027 607.837,783.866 608.396,811.02 608.956,804.034 609.515,798.075 610.074,790.218 610.633,752.107 611.193,753.08 611.752,763.171 612.311,778.843 612.87,774.295 613.43,749.476 613.989,729.798 614.548,730.129 615.107,697.011 615.667,712.331 616.226,728.978 616.785,760.408 617.344,704.834 617.904,708.73 618.463,725.937 619.022,726.781 619.581,709.339 620.141,711.581 620.7,726.39 621.259,726.361 621.818,725.523 622.378,738.085 622.937,735.653 623.496,755.514 624.055,737.27 624.615,737.126 625.174,684.909 625.733,703.921 626.292,689.115 626.852,720.096 627.411,704.546 627.97,718.611 628.529,683.104 629.089,666.659 629.648,665.376 630.207,683.33 630.766,696.389 631.326,714.314 631.885,727.099 632.444,710.32 633.003,679.062 633.563,682.809 634.122,715.246 634.681,697.142 635.24,681.678 635.8,666.174 636.359,684.25 636.918,684.668 637.477,704.971 638.037,703.685 638.596,703.341 639.155,705.464 639.714,723.805 640.274,703.349 640.833,717.345 641.392,733.569 641.951,713.964 642.511,745.058 643.07,711.621 643.629,677.565 644.188,661.739 644.748,646.739 645.307,632.866 645.866,635.02 646.425,624.019 646.985,610.875 647.544,615.837 648.103,619.686 648.662,608.577 649.222,596.604 649.781,585.558 650.34,610.298 650.899,631.2 651.459,632.98 652.018,685.523 652.577,703.016 653.136,687.569 653.696,659.446 654.255,663.383 654.814,650.427 655.373,686.625 655.933,701.983 656.492,734.756 657.051,746.777 657.61,727.14 658.17,739.7 658.729,755.058 659.288,765.107 659.847,761.632 660.407,758.281 660.966,756.458 661.525,783.658 662.084,745.604 662.644,741.678 663.203,757.256 663.762,738.876 664.321,750.61 664.881,730.006 665.44,727.046 665.999,714.277 666.558,729.466 667.118,728.06 667.677,725.624 668.236,739.031 668.795,718.84 669.355,702.296 669.914,670.786 670.473,671.288 671.032,675.123 671.592,688.865 672.151,690.381 672.71,659.065 673.269,691.681 673.829,644.025 674.388,649.296 674.947,684.383 675.506,701.631 676.066,703.509 676.625,687.08 677.184,670.104 677.743,719.879 678.303,703.009 678.862,715.942 679.421,716.194 679.981,680.954 680.54,662.806 681.099,663.751 681.658,666.342 682.218,683.864 682.777,650.63 683.336,639.083 683.895,658.787 684.455,694.632 685.014,709.871 685.573,711.664 686.132,724.91 686.692,708.668 687.251,707.06 687.81,673.363 688.369,658.188 688.929,660.98 689.488,694.763 690.047,682.699 690.606,685.648 691.166,698.036 691.725,683.422 692.284,683.85 692.843,671.252 693.403,672.651 693.962,654.555 694.521,608.035 695.08,630.444 695.64,633.469 696.199,687.909 696.758,654.387 697.317,688.001 697.877,704.913 698.436,701.179 698.995,716.443 699.554,682.535 700.114,685.217 700.673,634.362 701.232,636.068 701.791,637.373 702.351,656.03 702.91,657.035 703.469,658.135 704.028,657.465 704.588,691.365 705.147,691.41 705.706,676.903 706.265,711.466 706.825,722.781 707.384,736.038 707.943,750.106 708.502,729.332 709.062,723.873 709.621,704.99 710.18,738.571 710.739,753.832 711.299,752.29 711.858,750.016 712.417,731.51 712.976,744.28 713.536,741.064 714.095,736.334 714.654,768.549 715.213,763.003 715.773,792.167 716.332,800.467 716.891,794.775 717.45,790.979 718.01,801.831 718.569,780.59 719.128,763.63 719.687,746.35 720.247,758.081 720.806,740.54 721.365,735.622 721.924,750.079 722.484,752.436 723.043,749.1 723.602,747.624 724.161,742.983 724.721,706.388 725.28,706.332 725.839,688.105 726.398,703.088 726.958,704.145 727.517,685.387 728.076,667.195 728.635,652.579 729.195,654.445 729.754,626.751 730.313,662.801 730.872,678.663 731.432,648.583 731.991,616.567 732.55,606.069 733.109,623.938 733.669,610.908 734.228,599.433 734.787,602.926 735.346,607.039 735.906,627.755 736.465,615.752 737.024,602.664 737.583,619.866 738.143,674.168 738.702,676.701 739.261,692.675 739.82,678.062 740.38,662.637 740.939,633.915 741.498,685.929 742.057,688.767 742.617,692.448 743.176,674.051 743.735,673.796 744.294,754.722 744.854,707.528 745.413,678.027 745.972,644.44 746.531,677.422 747.091,696.071 747.65,698.07 748.209,714.202 748.768,717.14 749.328,762.589 749.887,742.293 750.446,721.908 751.005,704.67 751.565,671.307 752.124,706.436 752.683,689.06 753.242,653.13 753.802,673.504 754.361,706.056 754.92,723.145 755.479,738.26 756.039,717.554 756.598,720.772 757.157,703.067 757.716,703.392 758.276,667.458 758.835,640.298 759.394,612.9 759.953,602.846 760.513,588.334 761.072,610.524 761.631,617.361 762.19,619.951 762.75,624.866 763.309,616.179 763.868,653.667 764.427,659.941 764.987,645.262 765.546,631.599 766.105,617.663 766.664,667.18 767.224,665.858 767.783,654.881 768.342,626.159 768.901,609.85 769.461,616.735 770.02,607.575 770.579,613.272 771.138,604 771.698,609.665 772.257,610.884 772.816,630.518 773.375,633.281 773.935,653.85 774.494,656.459 775.053,676.85 775.612,708.263 776.172,706.404 776.731,718.769 777.29,716.695 777.849,719.966 778.409,751.146 778.968,730.89 779.527,724.344 780.086,721.395 780.646,703.39 781.205,735.29 781.764,747.892 782.323,746.778 782.883,741.832 783.442,754.844 784.001,749.697 784.56,763.318 785.12,793.054 785.679,802.142 786.238,814.547 786.797,791.197 787.357,769.438 787.916,778.566 788.475,760.489 789.034,771.46 789.594,738.992 790.153,752.409 790.712,733.65 791.271,712.328 791.831,708.965 792.39,739.171 792.949,749.565 793.508,730.674 794.068,729.275 794.627,741.005 795.186,770.93 795.745,778.824 796.305,787.809 796.864,783.057 797.423,759.738 797.982,723.22 798.542,721.667 799.101,717.081 799.66,716.79 800.219,714.012 800.779,697.371 801.338,711.68 801.897,694.33 802.456,692.249 803.016,674.977 803.575,690.591 804.134,674.558 804.693,674.323 805.253,691.85 805.812,693.427 806.371,693.58 806.931,706.095 807.49,721.788 808.049,721.178 808.608,735.837 809.168,718.544 809.727,717.596 810.286,734.647 810.845,719.168 811.405,738.805 811.964,755.342 812.523,736.709 813.082,718.158 813.642,715.77 814.201,698.393 814.76,734.25 815.319,764.05 815.879,742.945 816.438,705.366 816.997,670.416 817.556,637.272 818.116,674.472 818.675,690.181 819.234,688.334 819.793,703.253 820.353,717.092 820.912,713.988 821.471,710.562 822.03,709.098 822.59,708.838 823.149,706.786 823.708,706.143 824.267,721.108 824.827,716.84 825.386,715.234 825.945,731.718 826.504,747.589 827.064,745.507 827.623,741.164 828.182,723.64 828.741,753.364 829.301,766.108 829.86,826.151 830.419,814.895 830.978,808.777 831.538,813.075 832.097,792.377 832.656,760.503 833.215,723.52 833.775,721.137 834.334,704.602 834.893,704.522 835.452,715.691 836.012,731.826 836.571,746.419 837.13,743.494 837.689,754.951 838.249,732.833 838.808,747.797 839.367,710.219 839.926,723.543 840.486,719.277 841.045,734.111 841.604,712.612 842.163,710.36 842.723,707.662 843.282,693.078 843.841,675.102 844.4,676.822 844.96,661.274 845.519,646.308 846.078,633.064 846.637,668.393 847.197,670.048 847.756,671.706 848.315,670.369 848.874,655.126 849.434,610.353 849.993,615.075 850.552,620.567 851.111,605.946 851.671,578.316 852.23,568.566 852.789,608.429 853.348,612.186 853.908,618.888 854.467,589.933 855.026,535.033 855.585,544.904 856.145,533.7 856.704,553.306 857.263,557.837 857.822,579.094 858.382,585.074 858.941,589.722 859.5,595.785 860.059,584.092 860.619,589.934 861.178,613.101 861.737,614.391 862.296,620.571 862.856,596.466 863.415,602.536 863.974,607.669 864.533,629.42 865.093,681.59 865.652,682.083 866.211,634.942 866.77,623.208 867.33,626.086 867.889,607.988 868.448,610.598 869.007,595.698 869.567,614.617 870.126,620.365 870.685,661.265 871.244,681.947 871.804,700.646 872.363,678.34 872.922,662.257 873.481,677.541 874.041,678.491 874.6,712.835 875.159,711.034 875.718,711.218 876.278,724.761 876.837,739.478 877.396,722.687 877.955,707.444 878.515,707.184 879.074,705.79 879.633,703.669 880.192,668.759 880.752,705.266 881.311,705.562 881.87,676.15 882.429,709.887 882.989,710.429 883.548,710.168 884.107,708.08 884.666,725.085 885.226,740.042 885.785,738.216 886.344,732.711 886.903,717.802 887.463,718.939 888.022,701.93 888.581,702.155 889.14,717.216 889.7,714.801 890.259,698.485 890.818,727.827 891.377,697.737 891.937,712.566 892.496,711.785 893.055,692.704 893.614,675.609 894.174,677.679 894.733,662.602 895.292,662.317 895.851,663.095 896.411,665.717 896.97,650.475 897.529,649.172 898.088,650.204 898.648,667.395 899.207,668.304 899.766,669.937 900.325,685.674 900.885,650.761 901.444,655.603 902.003,641.542 902.562,646.805 903.122,650.642 903.681,639.533 904.24,658.381 904.799,675.679 905.359,692.531 905.918,711.41 906.477,723.267 907.036,719.946 907.596,716.888 908.155,714.648 908.714,683.291 909.273,683.64 909.833,677.781 910.392,692.776 910.951,677.128 911.51,709.327 912.07,723.945 912.629,720.965 913.188,765.828 913.747,744.478 914.307,754.168 914.866,751.488 915.425,747.294 915.984,746.987 916.544,776.49 917.103,757.18 917.662,739.973 918.221,721.882 918.781,719.212 919.34,715.606 919.899,728.497 920.458,711.769 921.018,723.262 921.577,767.168 922.136,778.761 922.695,758.98 923.255,751.985 923.814,748.899 924.373,747.196 924.932,759.766 925.492,737.776 926.051,737.735 926.61,734 927.169,734.468 927.729,781.661 928.288,760.601 928.847,755.454 929.406,750.211 929.966,764.46 930.525,761.846 931.084,710.827 931.644,709.56 932.203,691.927 932.762,673.023 933.321,736.189 933.881,748.946 934.44,744.56 934.999,723.292 935.558,722.533 936.118,750.751 936.677,729.266 937.236,759.275 937.795,785.737 938.355,764.455 938.914,713.997 939.473,710.102 940.032,723.635 940.592,687.178 941.151,716.685 941.71,760.9 942.269,790.084 942.829,787.486 943.388,801.014 943.947,779.225 944.506,757.055 945.066,798.395 945.625,728.647 946.184,713.862 946.743,696.585 947.303,679.932 947.862,661.398 948.421,664.418 948.98,654.005 949.54,673.346 950.099,640.086 950.658,640.262 951.217,672.724 951.777,659.636 952.336,645.335 952.895,614.873 953.454,634.229 954.014,621.654 954.573,594.228 955.132,550.021 955.691,558.928 956.251,481.841 956.81,508.731 957.369,520.759 957.928,547.023 958.488,588.269 959.047,627.921 959.606,629.372 960.165,619.916 960.725,605.879 961.284,625.615 961.843,648.665 962.402,632.043 962.962,653.622 963.521,654.376 964.08,657.08 964.639,693.997 965.199,716.278 965.758,695.787 966.317,726.184 966.876,723.425 967.436,735.435 967.995,716.987 968.554,715.376 969.113,711.435 969.673,724.69 970.232,739.681 970.791,690.582 971.35,707.946 971.91,710.255 972.469,675.672 973.028,659.253 973.587,676.302 974.147,660.384 974.706,662.815 975.265,695.171 975.824,662.702 976.384,665.417 976.943,667.899 977.502,670.545 978.061,667.356 978.621,666.46 979.18,652.17 979.739,687.496 980.298,718.861 980.858,753.561 981.417,765.877 981.976,761.085 982.535,764.959 983.095,762.664 983.654,758.69 984.213,736.656 984.772,715.452 985.332,744.139 985.891,726.27 986.45,721.986 987.009,738.325 987.569,769.051 988.128,747.756 988.687,711.526 989.246,724.47 989.806,706.34 990.365,735.598 990.924,715.973 991.483,696.982 992.043,697.453 992.602,685.231 993.161,704.204 993.72,686.398 994.28,703.278 994.839,730.88 995.398,713.192 995.957,708.165 996.517,673.975 997.076,610.982 997.635,614.029 998.194,652.298 998.754,683.357 999.313,647.15 999.872,665.876 1000.43,685.075 1000.99,699.593 1001.55,661.521 1002.11,664.499 1002.67,649.631 1003.23,632.431 1003.79,636.729 1004.35,656.877 1004.91,655.844 1005.46,623.036 1006.02,660.248 1006.58,660.629 1007.14,663.298 1007.7,682.469 1008.26,696.947 1008.82,714.849 1009.38,677.447 1009.94,677.009 1010.5,646.034 1011.06,645.768 1011.62,629.647 1012.18,630.784 1012.73,646.972 1013.29,646.882 1013.85,682.9 1014.41,683.758 1014.97,651.788 1015.53,658.18 1016.09,645.041 1016.65,646.599 1017.21,632.263 1017.77,633.125 1018.33,635.67 1018.89,652.791 1019.45,655.871 1020.01,642.2 1020.56,627.223 1021.12,628.08 1021.68,666.017 1022.24,682.89 1022.8,650.18 1023.36,655.06 1023.92,656.023 1024.48,688.783 1025.04,689.547 1025.6,690.886 1026.16,707.309 1026.72,694.925 1027.28,711.167 1027.83,740.874 1028.39,703.83 1028.95,732.636 1029.51,744.075 1030.07,724.689 1030.63,728.135 1031.19,740.164 1031.75,736.177 1032.31,778.157 1032.87,759.604 1033.43,757.483 1033.99,752.768 1034.55,748.093 1035.1,729.356 1035.66,729.23 1036.22,724.656 1036.78,724.955 1037.34,689.875 1037.9,689.235 1038.46,657.629 1039.02,674.537 1039.58,672.891 1040.14,655.078 1040.7,656.698 1041.26,707.653 1041.82,755.731 1042.38,765.715 1042.93,724.552 1043.49,722.554 1044.05,688.14 1044.61,671.167 1045.17,674.373 1045.73,663.566 1046.29,665.669 1046.85,652.821 1047.41,656.927 1047.97,626.674 1048.53,663.132 1049.09,714.535 1049.65,693.597 1050.2,722.222 1050.76,722.041 1051.32,719.223 1051.88,736.297 1052.44,731.437 1053,742.538 1053.56,723.476 1054.12,671.661 1054.68,703.127 1055.24,704.078 1055.8,705.73 1056.36,672.053 1056.92,675.647 1057.48,660.505 1058.03,708.022 1058.59,710.203 1059.15,742.302 1059.71,740.059 1060.27,755.156 1060.83,798.041 1061.39,795.051 1061.95,787.73 1062.51,800.884 1063.07,813.209 1063.63,775.359 1064.19,720.654 1064.75,753.332 1065.3,719.037 1065.86,716.637 1066.42,748.142 1066.98,760.96 1067.54,724.335 1068.1,754.694 1068.66,781.723 1069.22,806.843 1069.78,786.158 1070.34,718.152 1070.9,718.76 1071.46,718.252 1072.02,699.605 1072.57,678.971 1073.13,678.046 1073.69,663.861 1074.25,651.013 1074.81,685.698 1075.37,637.627 1075.93,658.541 1076.49,705.832 1077.05,723.74 1077.61,757.89 1078.17,720.108 1078.73,735.243 1079.29,702.768 1079.85,696.419 1080.4,696.747 1080.96,694.714 1081.52,690.473 1082.08,689.903 1082.64,723.618 1083.2,719.527 1083.76,701.012 1084.32,716.868 1084.88,698.705 1085.44,728.733 1086,726.694 1086.56,679.185 1087.12,630.464 1087.67,635.284 1088.23,634.28 1088.79,633.649 1089.35,652.287 1089.91,688.237 1090.47,690.025 1091.03,674.963 1091.59,673.283 1092.15,656.021 1092.71,625.639 1093.27,626.499 1093.83,660.974 1094.39,609.268 1094.94,632.1 1095.5,632.487 1096.06,617.222 1096.62,649.715 1097.18,652.083 1097.74,649.967 1098.3,669.615 1098.86,667.936 1099.42,620.278 1099.98,639.248 1100.54,643.545 1101.1,679.312 1101.66,666.569 1102.22,665.038 1102.77,682.43 1103.33,699.301 1103.89,695.353 1104.45,662.858 1105.01,644.514 1105.57,694.598 1106.13,696.926 1106.69,710.783 1107.25,710.12 1107.81,676.22 1108.37,676.228 1108.93,657.933 1109.49,678.405 1110.04,727.118 1110.6,760.849 1111.16,789.062 1111.72,752.077 1112.28,733.773 1112.84,715.005 1113.4,728.136 1113.96,708.939 1114.52,706.135 1115.08,686.996 1115.64,704.788 1116.2,672.481 1116.76,674.937 1117.31,693.854 1117.87,663.623 1118.43,662.813 1118.99,646.483 1119.55,680.447 1120.11,678.902 1120.67,665.931 1121.23,681.342 1121.79,714.657 1122.35,696.106 1122.91,678.164 1123.47,675.248 1124.03,661.958 1124.59,663.764 1125.14,667.544 1125.7,653.897 1126.26,669.637 1126.82,671.827 1127.38,677.266 1127.94,629.634 1128.5,635.916 1129.06,638.258 1129.62,609.989 1130.18,581.149 1130.74,570.021 1131.3,575.711 1131.86,549.086 1132.41,543.08 1132.97,553.775 1133.53,576.424 1134.09,597.968 1134.65,599.778 1135.21,670.164 1135.77,675.527 1136.33,693.018 1136.89,692.844 1137.45,692.136 1138.01,705.4 1138.57,671.953 1139.13,690.247 1139.68,733.975 1140.24,745.649 1140.8,710.376 1141.36,726.61 1141.92,706.294 1142.48,692.476 1143.04,705.696 1143.6,718.581 1144.16,701.021 1144.72,718.367 1145.28,699.244 1145.84,685.01 1146.4,686.93 1146.96,683.739 1147.51,701.475 1148.07,704.182 1148.63,737.432 1149.19,736.895 1149.75,752.972 1150.31,750.088 1150.87,733.202 1151.43,745.283 1151.99,752.324 1152.55,718.176 1153.11,749.491 1153.67,732.532 1154.23,729.603 1154.78,741.386 1155.34,774.441 1155.9,754.997 1156.46,755.134 1157.02,720.158 1157.58,686.077 1158.14,667.981 1158.7,667.586 1159.26,670.857 1159.82,653.601 1160.38,620.898 1160.94,572.993 1161.5,575.27 1162.05,562.893 1162.61,549.061 1163.17,555.461 1163.73,512.724 1164.29,539.095 1164.85,561.261 1165.41,615.191 1165.97,634.104 1166.53,606.148 1167.09,594.826 1167.65,617.871 1168.21,619.488 1168.77,637.539 1169.33,670.549 1169.88,703.637 1170.44,721.351 1171,720.948 1171.56,724.934 1172.12,735.088 1172.68,715.056 1173.24,712.021 1173.8,664.343 1174.36,665.881 1174.92,667.055 1175.48,699.554 1176.04,699.934 1176.6,702.363 1177.15,721.333 1177.71,720.972 1178.27,698.782 1178.83,696.66 1179.39,695.431 1179.95,692.866 1180.51,661.205 1181.07,646.69 1181.63,649.77 1182.19,648.625 1182.75,669.089 1183.31,650.778 1183.87,671.051 1184.43,670.164 1184.98,685.101 1185.54,671.719 1186.1,706.303 1186.66,738.677 1187.22,735.129 1187.78,717.138 1188.34,682.956 1188.9,681.551 1189.46,681.143 1190.02,698.681 1190.58,695.4 1191.14,692.563 1191.7,687.962 1192.25,676.013 1192.81,692.234 1193.37,673.906 1193.93,658.797 1194.49,674.071 1195.05,656.919 1195.61,689.502 1196.17,705.719 1196.73,688.329 1197.29,721.481 1197.85,704.813 1198.41,736.04 1198.97,746.299 1199.52,740.548 1200.08,752.137 1200.64,748.776 1201.2,779.416 1201.76,792.454 1202.32,804.027 1202.88,781.583 1203.44,762.586 1204,758.509 1204.56,755.766 1205.12,737.817 1205.68,780.831 1206.24,757.868 1206.8,751.537 1207.35,763.593 1207.91,759.495 1208.47,724.082 1209.03,704.143 1209.59,699.835 1210.15,713.828 1210.71,694.364 1211.27,691.409 1211.83,693.971 1212.39,744.911 1212.95,743.776 1213.51,709.472 1214.07,725.109 1214.62,708.185 1215.18,726.998 1215.74,722.78 1216.3,658.471 1216.86,690.077 1217.42,687.514 1217.98,703.498 1218.54,699.917 1219.1,694.644 1219.66,676.1 1220.22,645.715 1220.78,631.481 1221.34,651.373 1221.89,652.616 1222.45,684.143 1223.01,730.221 1223.57,740.017 1224.13,722.588 1224.69,687.667 1225.25,684.878 1225.81,683.452 1226.37,671.18 1226.93,703.291 1227.49,713.862 1228.05,678.819 1228.61,663.344 1229.17,663.125 1229.72,665.127 1230.28,685.559 1230.84,719.956 1231.4,705.005 1231.96,702.427 1232.52,685.584 1233.08,684.321 1233.64,713.735 1234.2,727.201 1234.76,727.748 1235.32,709.632 1235.88,679.201 1236.44,667.476 1236.99,699.312 1237.55,730.755 1238.11,709.236 1238.67,722.337 1239.23,722.53 1239.79,720.265 1240.35,668.096 1240.91,668.936 1241.47,687.513 1242.03,702.069 1242.59,684.869 1243.15,687.043 1243.71,704.622 1244.26,722.207 1244.82,722.649 1245.38,703.214 1245.94,670.109 1246.5,687.694 1247.06,637.694 1247.62,640.119 1248.18,644.13 1248.74,644.985 1249.3,617.469 1249.86,640.038 1250.42,659.282 1250.98,644.177 1251.54,647.602 1252.09,664.471 1252.65,728.064 1253.21,726.203 1253.77,724.045 1254.33,721.894 1254.89,688.06 1255.45,658.867 1256.01,645.372 1256.57,647.7 1257.13,652.006 1257.69,639.433 1258.25,642.002 1258.81,611.559 1259.36,598.967 1259.92,570.844 1260.48,581.065 1261.04,573.569 1261.6,598.376 1262.16,633.627 1262.72,668.802 1263.28,669.796 1263.84,641.229 1264.4,640.387 1264.96,674.45 1265.52,707.366 1266.08,689.497 1266.63,690.397 1267.19,705.385 1267.75,691.968 1268.31,708.546 1268.87,708.661 1269.43,707.255 1269.99,702.242 1270.55,718.391 1271.11,719.234 1271.67,704.088 1272.23,703.89 1272.79,687.089 1273.35,702.287 1273.91,668.263 1274.46,719.444 1275.02,700.662 1275.58,679.649 1276.14,663.894 1276.7,664.906 1277.26,647.747 1277.82,647.204 1278.38,700.519 1278.94,700.297 1279.5,704.063 1280.06,684.885 1280.62,685.446 1281.18,687.069 1281.73,686.242 1282.29,685.182 1282.85,717.432 1283.41,714.393 1283.97,696.053 1284.53,697.411 1285.09,681.919 1285.65,682.333 1286.21,700.877 1286.77,696.52 1287.33,675.836 1287.89,642.386 1288.45,646.819 1289,648.894 1289.56,650.234 1290.12,637.626 1290.68,624.416 1291.24,614.042 1291.8,639.068 1292.36,623.971 1292.92,656.904 1293.48,626.906 1294.04,645.576 1294.6,613.764 1295.16,632.092 1295.72,649.817 1296.28,652.354 1296.83,639.96 1297.39,640.659 1297.95,660.539 1298.51,631.95 1299.07,668.955 1299.63,670.916 1300.19,641.913 1300.75,646.601 1301.31,634.374 1301.87,686.613 1302.43,685.377 1302.99,687.86 1303.55,735.352 1304.1,716.498 1304.66,680.403 1305.22,676.869 1305.78,662.356 1306.34,612.594 1306.9,651.23 1307.46,655.934 1308.02,674.202 1308.58,690.336 1309.14,671.283 1309.7,686.703 1310.26,687.5 1310.82,658.839 1311.38,659.491 1311.93,674.315 1312.49,677.248 1313.05,705.045 1313.61,721.441 1314.17,752.698 1314.73,733.448 1315.29,730.476 1315.85,727.466 1316.41,710.158 1316.97,691.644 1317.53,677.493 1318.09,692.498 1318.65,708.515 1319.2,770.993 1319.76,767.411 1320.32,777.374 1320.88,772.587 1321.44,800.137 1322,790.231 1322.56,816.179 1323.12,824.325 1323.68,801.494 1324.24,779.372 1324.8,771.027 1325.36,751.322 1325.92,730.023 1326.47,712.193 1327.03,758.386 1327.59,770.779 1328.15,746.741 1328.71,708.821 1329.27,720.676 1329.83,731.917 1330.39,745.115 1330.95,740.778 1331.51,740.25 1332.07,738.025 1332.63,748.248 1333.19,741.782 1333.75,756.684 1334.3,768.1 1334.86,730.725 1335.42,710.34 1335.98,692.921 1336.54,676.95 1337.1,675.953 1337.66,641.195 1338.22,578.094 1338.78,581.785 1339.34,585.401 1339.9,588.842 1340.46,609.313 1341.02,611.713 1341.57,577.293 1342.13,584.378 1342.69,589.2 1343.25,582.831 1343.81,601.992 1344.37,604.262 1344.93,642.04 1345.49,646.584 1346.05,667.075 1346.61,667.366 1347.17,621.113 1347.73,626.549 1348.29,644.474 1348.84,647.029 1349.4,632.453 1349.96,616.491 1350.52,568.722 1351.08,541.369 1351.64,563.295 1352.2,553.097 1352.76,591.422 1353.32,597.538 1353.88,555.959 1354.44,577.203 1355,581.643 1355.56,602.572 1356.12,590.637 1356.67,625.066 1357.23,610.971 1357.79,611.85 1358.35,631.83 1358.91,633.142 1359.47,652.71 1360.03,669.489 1360.59,669.215 1361.15,670.696 1361.71,685.042 1362.27,689.11 1362.83,656.134 1363.39,661.538 1363.94,662.296 1364.5,643.993 1365.06,643.609 1365.62,646.78 1366.18,666.627 1366.74,648.819 1367.3,648.338 1367.86,669.24 1368.42,669.293 1368.98,686.309 1369.54,722.147 1370.1,769.293 1370.66,765.246 1371.21,755.545 1371.77,750.925 1372.33,778.026 1372.89,744.325 1373.45,724.205 1374.01,723.8 1374.57,691.67 1375.13,656.913 1375.69,657.188 1376.25,643.115 1376.81,613.201 1377.37,617.755 1377.93,655.93 1378.49,705.798 1379.04,707.12 1379.6,705.233 1380.16,686.78 1380.72,683.618 1381.28,668.242 1381.84,653.776 1382.4,654.289 1382.96,687.363 1383.52,610.198 1384.08,586.047 1384.64,607.531 1385.2,613.117 1385.76,614.485 1386.31,633.679 1386.87,653.793 1387.43,655.07 1387.99,673.143 1388.55,690.74 1389.11,672.172 1389.67,692.398 1390.23,690.253 1390.79,675.458 1391.35,690.606 1391.91,677.012 1392.47,628.974 1393.03,649.116 1393.58,653.964 1394.14,622.759 1394.7,628.09 1395.26,614.02 1395.82,618.012 1396.38,635.151 1396.94,670.835 1397.5,622.942 1398.06,625.55 1398.62,631.046 1399.18,632.068 1399.74,633.656 1400.3,617.033 1400.86,606.955 1401.41,611.732 1401.97,610.941 1402.53,627.449 1403.09,581.125 1403.65,620.656 1404.21,607.118 1404.77,623.791 1405.33,707.705 1405.89,710.138 1406.45,645.405 1407.01,634.378 1407.57,634.764 1408.13,623.438 1408.68,644.745 1409.24,646.294 1409.8,645.42 1410.36,629.677 1410.92,631.304 1411.48,601.686 1412.04,607.426 1412.6,608.089 1413.16,646.049 1413.72,618.274 1414.28,656.755 1414.84,643.752 1415.4,630.843 1415.95,617.941 1416.51,653.119 1417.07,656.992 1417.63,672.978 1418.19,722.948 1418.75,707.77 1419.31,672.196 1419.87,676.403 1420.43,676.94 1420.99,683.466 1421.55,682.195 1422.11,697.787 1422.67,617.318 1423.23,617.667 1423.78,654.292 1424.34,656.171 1424.9,658.419 1425.46,678.007 1426.02,710.482 1426.58,725.335 1427.14,739.681 1427.7,708.018 1428.26,739.571 1428.82,719.021 1429.38,700.083 1429.94,697.837 1430.5,714.034 1431.05,725.233 1431.61,754.769 1432.17,751.647 1432.73,731.947 1433.29,724.368 1433.85,737.643 1434.41,764.978 1434.97,774.636 1435.53,787.331 1436.09,797.755 1436.65,827.668 1437.21,768.241 1437.77,779.842 1438.33,760.349 1438.88,740.722 1439.44,721.992 1440,723.924 1440.56,704.892 1441.12,687.649 1441.68,702.235 1442.24,699.188 1442.8,685.501 1443.36,684.122 1443.92,716.332 1444.48,684.257 1445.04,683.43 1445.6,682.889 1446.15,679.71 1446.71,710.434 1447.27,693.002 1447.83,726.443 1448.39,725.799 1448.95,707.96 1449.51,722.79 1450.07,705.264 1450.63,704.96 1451.19,716.771 1451.75,714.738 1452.31,714.507 1452.87,728.83 1453.42,710.975 1453.98,709.592 1454.54,723.918 1455.1,722.169 1455.66,720.42 1456.22,687.214 1456.78,686.16 1457.34,681.077 1457.9,677.376 1458.46,645.646 1459.02,647.219 1459.58,649.82 1460.14,616.975 1460.7,637.072 1461.25,655.877 1461.81,659.23 1462.37,659.2 1462.93,626.303 1463.49,646.402 1464.05,696.421 1464.61,680.19 1465.17,679.179 1465.73,680.285 1466.29,679.986 1466.85,648.763 1467.41,633.114 1467.97,652.924 1468.52,636.813 1469.08,669.492 1469.64,651.605 1470.2,668.335 1470.76,667.792 1471.32,669.38 1471.88,622.295 1472.44,643.419 1473,643.625 1473.56,644.09 1474.12,664.175 1474.68,648.326 1475.24,653.309 1475.79,642.372 1476.35,659.904 1476.91,676.316 1477.47,692.343 1478.03,691.631 1478.59,690.699 1479.15,687.796 1479.71,708.1 1480.27,709.673 1480.83,690.786 1481.39,675.167 1481.95,691.621 1482.51,690.035 1483.07,672.706 1483.62,655.097 1484.18,659.751 1484.74,662.464 1485.3,647.181 1485.86,679.333 1486.42,694.495 1486.98,710.618 1487.54,707.061 1488.1,723.355 1488.66,705.912 1489.22,703.707 1489.78,699.749 1490.34,668.875 1490.89,717.495 1491.45,729.595 1492.01,729.739 1492.57,711.276 1493.13,694.361 1493.69,744.021 1494.25,711.628 1494.81,727.195 1495.37,711.164 1495.93,693.964 1496.49,695.218 1497.05,695.432 1497.61,712.759 1498.16,696.135 1498.72,711.246 1499.28,776.879 1499.84,753.48 1500.4,748.726 1500.96,730.025 1501.52,790.692 1502.08,766.691 1502.64,763.333 1503.2,759.337 1503.76,741.931 1504.32,769.939 1504.88,763.569 1505.44,809.714 1505.99,788.949 1506.55,799.016 1507.11,788.796 1507.67,769.639 1508.23,718.334 1508.79,701.599 1509.35,728.643 1509.91,788.784 1510.47,783.066 1511.03,778.084 1511.59,805.177 1512.15,866.959 1512.71,888.557 1513.26,893.64 1513.82,851.929 1514.38,839.899 1514.94,862.512 1515.5,851.668 1516.06,825.135 1516.62,784.474 1517.18,760.599 1517.74,760.666 1518.3,724.128 1518.86,719.291 1519.42,701.419 1519.98,696.572 1520.53,677.484 1521.09,660.497 1521.65,647.764 1522.21,665.203 1522.77,650.974 1523.33,683.591 1523.89,701.555 1524.45,670.865 1525.01,670.103 1525.57,655.648 1526.13,655.388 1526.69,672.751 1527.25,670.59 1527.81,686.198 1528.36,666.309 1528.92,649.154 1529.48,663.762 1530.04,611.038 1530.6,628.862 1531.16,615.713 1531.72,603.578 1532.28,588.874 1532.84,609.158 1533.4,612.197 1533.96,581.735 1534.52,590.621 1535.08,591.87 1535.63,594.903 1536.19,613.619 1536.75,616.976 1537.31,591.733 1537.87,597.404 1538.43,636.583 1538.99,638.657 1539.55,640.321 1540.11,625.879 1540.67,630.745 1541.23,616.046 1541.79,635.274 1542.35,621.323 1542.9,608.553 1543.46,661.619 1544.02,662.67 1544.58,667.226 1545.14,686.519 1545.7,671.117 1546.26,674.842 1546.82,626.367 1547.38,613.415 1547.94,635.057 1548.5,639.102 1549.06,659.451 1549.62,676.73 1550.18,676.703 1550.73,661.459 1551.29,645.75 1551.85,629.698 1552.41,583.749 1552.97,605.685 1553.53,593.154 1554.09,598.281 1554.65,619.538 1555.21,623.389 1555.77,640.698 1556.33,628.402 1556.89,648.997 1557.45,653.596 1558,623.086 1558.56,609.528 1559.12,643.318 1559.68,630.235 1560.24,635.792 1560.8,656.132 1561.36,639.894 1561.92,658.634 1562.48,658.2 1563.04,645.921 1563.6,651.251 1564.16,639.655 1564.72,626.585 1565.28,628.977 1565.83,630.462 1566.39,639.915 1566.95,643.428 1567.51,645.742 1568.07,664.914 1568.63,682.116 1569.19,667.216 1569.75,700.598 1570.31,715.284 1570.87,731.422 1571.43,715.361 1571.99,728.243 1572.55,742.318 1573.1,737.1 1573.66,667.46 1574.22,702.473 1574.78,721.31 1575.34,736.229 1575.9,733.495 1576.46,735.369 1577.02,764.462 1577.58,743.061 1578.14,776 1578.7,770.695 1579.26,762.742 1579.82,712.985 1580.37,679.619 1580.93,681.013 1581.49,663.126 1582.05,678.973 1582.61,678.259 1583.17,643.875 1583.73,661.178 1584.29,711.116 1584.85,711.869 1585.41,729.259 1585.97,712.039 1586.53,679.049 1587.09,679.406 1587.65,679.054 1588.2,680.329 1588.76,682.506 1589.32,668.22 1589.88,652.498 1590.44,700.893 1591,697.412 1591.56,711.932 1592.12,690.611 1592.68,688.549 1593.24,688.923 1593.8,689.052 1594.36,722.198 1594.92,720.41 1595.47,735.475 1596.03,731.863 1596.59,727.171 1597.15,727.774 1597.71,725.618 1598.27,723.239 1598.83,719.907 1599.39,716.752 1599.95,696.394 1600.51,700.085 1601.07,730.043 1601.63,711.722 1602.19,726.199 1602.74,722.008 1603.3,736.013 1603.86,695.697 1604.42,728.452 1604.98,743.633 1605.54,741.452 1606.1,695.189 1606.66,693.175 1607.22,693.528 1607.78,725.251 1608.34,705.787 1608.9,722.739 1609.46,750.921 1610.02,746.683 1610.57,714.765 1611.13,679.376 1611.69,680.931 1612.25,676.879 1612.81,673.776 1613.37,655.907 1613.93,639.004 1614.49,674.23 1615.05,727.344 1615.61,724.7 1616.17,718.354 1616.73,715.435 1617.29,684.6 1617.84,748.177 1618.4,744.762 1618.96,729.41 1619.52,742.302 1620.08,755.678 1620.64,735.726 1621.2,730.963 1621.76,730.967 1622.32,695.275 1622.88,690.35 1623.44,693.093 1624,724.543 1624.56,741.912 1625.11,724.166 1625.67,723.692 1626.23,723.383 1626.79,689.81 1627.35,673.969 1627.91,676.783 1628.47,671.295 1629.03,656.027 1629.59,607.581 1630.15,594.576 1630.71,600.177 1631.27,604.932 1631.83,627.991 1632.39,665.904 1632.94,647.598 1633.5,649.94 1634.06,636.212 1634.62,670.427 1635.18,689.004 1635.74,687.748 1636.3,687.4 1636.86,704.728 1637.42,688.623 1637.98,688.641 1638.54,674.66 1639.1,692.149 1639.66,692.278 1640.21,673.48 1640.77,675.089 1641.33,692.735 1641.89,673.349 1642.45,689.215 1643.01,724.037 1643.57,707.867 1644.13,657.265 1644.69,643.319 1645.25,676.31 1645.81,676.428 1646.37,658.616 1646.93,643.854 1647.48,662.408 1648.04,677.768 1648.6,678.344 1649.16,644.962 1649.72,632.176 1650.28,669.023 1650.84,637.995 1651.4,639.398 1651.96,641.983 1652.52,644.44 1653.08,663.254 1653.64,681.881 1654.2,650.027 1654.76,637.408 1655.31,609.943 1655.87,628.521 1656.43,614.496 1656.99,600.475 1657.55,606.188 1658.11,643.082 1658.67,626.958 1659.23,627.349 1659.79,645.741 1660.35,629.807 1660.91,635.896 1661.47,637.11 1662.03,654.033 1662.58,683.624 1663.14,665.933 1663.7,632.151 1664.26,637.046 1664.82,657.735 1665.38,675.617 1665.94,658.246 1666.5,674.925 1667.06,625.77 1667.62,627.272 1668.18,612.949 1668.74,665.943 1669.3,700.393 1669.85,733.813 1670.41,747.299 1670.97,745.013 1671.53,727.653 1672.09,709.446 1672.65,723.799 1673.21,702.304 1673.77,650.58 1674.33,637.344 1674.89,673.443 1675.45,675.398 1676.01,677.114 1676.57,692.688 1677.13,706.254 1677.68,737.909 1678.24,751.375 1678.8,750.155 1679.36,735.856 1679.92,735.911 1680.48,733.466 1681.04,715.679 1681.6,730.14 1682.16,742.949 1682.72,741.512 1683.28,706.367 1683.84,720.895 1684.4,720.515 1684.95,751.57 1685.51,746.508 1686.07,725.423 1686.63,723.203 1687.19,738.471 1687.75,751.049 1688.31,747.132 1688.87,708.77 1689.43,690.123 1689.99,705.614 1690.55,672.646 1691.11,639.01 1691.67,627.449 1692.23,644.953 1692.78,649.262 1693.34,649.891 1693.9,622.15 1694.46,590.296 1695.02,613.198 1695.58,632.628 1696.14,636.367 1696.7,640.514 1697.26,624.136 1697.82,627.375 1698.38,662.244 1698.94,664.133 1699.5,651.248 1700.05,650.771 1700.61,640.611 1701.17,688.194 1701.73,639.801 1702.29,673.242 1702.85,696.192 1703.41,649.446 1703.97,650.31 1704.53,668.734 1705.09,668.996 1705.65,686.984 1706.21,701.917 1706.77,686.222 1707.32,685.828 1707.88,685.498 1708.44,701.252 1709,669.463 1709.56,685.352 1710.12,655.612 1710.68,657.531 1711.24,660.03 1711.8,681.148 1712.36,654.007 1712.92,655.912 1713.48,658.722 1714.04,626.417 1714.6,634.552 1715.15,633.803 1715.71,618.803 1716.27,609.907 1716.83,596.805 1717.39,614.433 1717.95,602.817 1718.51,604.571 1719.07,606.669 1719.63,627.869 1720.19,664.262 1720.75,700.537 1721.31,733.151 1721.87,715.456 1722.42,714.562 1722.98,742.734 1723.54,691.309 1724.1,674.194 1724.66,644.182 1725.22,645.911 1725.78,660.886 1726.34,644.452 1726.9,647.361 1727.46,679.21 1728.02,677.476 1728.58,693.213 1729.14,676.377 1729.69,643.039 1730.25,662.638 1730.81,663.585 1731.37,633.022 1731.93,620.03 1732.49,656.738 1733.05,660.581 1733.61,676.547 1734.17,678.691 1734.73,697.302 1735.29,698.129 1735.85,695.858 1736.41,711.428 1736.97,724.656 1737.52,707.785 1738.08,675.361 1738.64,679.882 1739.2,668.328 1739.76,653.791 1740.32,654.782 1740.88,656.166 1741.44,642.23 1742,655.428 1742.56,655.296 1743.12,654.219 1743.68,684.924 1744.24,746.87 1744.79,761.085 1745.35,769.376 1745.91,765.889 1746.47,746.044 1747.03,726.629 1747.59,702.909 1748.15,717.666 1748.71,734.085 1749.27,728.817 1749.83,722.596 1750.39,738.188 1750.95,734.266 1751.51,734.384 1752.06,729.204 1752.62,743.789 1753.18,745.225 1753.74,773.404 1754.3,767.681 1754.86,749.244 1755.42,743.295 1755.98,791.079 1756.54,782.958 1757.1,764.398 1757.66,760.981 1758.22,757.571 1758.78,772.655 1759.34,754.493 1759.89,717.622 1760.45,747.956 1761.01,746.187 1761.57,727.254 1762.13,724.22 1762.69,738.17 1763.25,750.238 1763.81,746.862 1764.37,760.257 1764.93,759.12 1765.49,740.774 1766.05,736.497 1766.61,717.387 1767.16,712.189 1767.72,678.045 1768.28,730.629 1768.84,726.103 1769.4,706.269 1769.96,706.445 1770.52,720.052 1771.08,718.47 1771.64,746.041 1772.2,727.153 1772.76,739.105 1773.32,751.873 1773.88,750.436 1774.43,746.647 1774.99,762.142 1775.55,740.055 1776.11,719.971 1776.67,746.511 1777.23,743.615 1777.79,722.979 1778.35,700.106 1778.91,714.784 1779.47,714.464 1780.03,710.777 1780.59,707.735 1781.15,687.868 1781.71,689.388 1782.26,656.349 1782.82,643.719 1783.38,645.931 1783.94,615.278 1784.5,619.28 1785.06,621.334 1785.62,627.916 1786.18,630.528 1786.74,617.213 1787.3,606.698 1787.86,640.728 1788.42,626.515 1788.98,597.914 1789.53,617.53 1790.09,618.578 1790.65,669.854 1791.21,685.676 1791.77,703.961 1792.33,701.249 1792.89,698.217 1793.45,700.5 1794.01,680.286 1794.57,680.389 1795.13,681.857 1795.69,660.286 1796.25,643.787 1796.8,662.372 1797.36,662.679 1797.92,680.717 1798.48,679.239 1799.04,685.251 1799.6,653.565 1800.16,654.861 1800.72,708.632 1801.28,727.445 1801.84,759.385 1802.4,738.695 1802.96,737.333 1803.52,750.206 1804.08,762.822 1804.63,760.818 1805.19,738.839 1805.75,770.844 1806.31,714.807 1806.87,732.023 1807.43,731.215 1807.99,710.028 1808.55,705.726 1809.11,705.436 1809.67,705.447 1810.23,690.115 1810.79,672.173 1811.35,687.588 1811.9,672.858 1812.46,656 1813.02,653.961 1813.58,688.57 1814.14,656.398 1814.7,655.31 1815.26,672.511 1815.82,670.823 1816.38,671.827 1816.94,641.315 1817.5,645.544 1818.06,612.798 1818.62,619.024 1819.18,622.788 1819.73,655.079 1820.29,636.448 1820.85,655.344 1821.41,644.589 1821.97,661.193 1822.53,645.127 1823.09,629.822 1823.65,646.416 1824.21,668.186 1824.77,687.079 1825.33,670.899 1825.89,688.478 1826.45,704.65 1827,703.544 1827.56,723.793 1828.12,707.927 1828.68,706.92 1829.24,706.265 1829.8,705.393 1830.36,690.39 1830.92,721.506 1831.48,732.844 1832.04,745.796 1832.6,724.242 1833.16,724.231 1833.72,753.938 1834.27,749.578 1834.83,745.508 1835.39,725.093 1835.95,739.135 1836.51,750.529 1837.07,734.446 1837.63,701.18 1838.19,670.457 \"/>\n<path clip-path=\"url(#clip943)\" d=\"M720.247 691.201 L720.806 691.201 L721.365 691.201 L721.924 691.201 L722.484 691.201 L723.043 691.201 L723.602 691.201 L724.161 691.201 L724.721 691.201 L725.28 691.201 L725.839 691.201 L726.398 691.201 L726.958 691.201 L727.517 691.201 L728.076 691.201 L728.635 691.201 L729.195 691.201 L729.754 691.201 L730.313 691.201 L730.872 691.201 L731.432 691.201 L731.991 691.201 L732.55 691.201 L733.109 691.201 L733.669 691.201 L734.228 691.201 L734.787 691.201 L735.346 691.201 L735.906 691.201 L736.465 691.201 L737.024 691.201 L737.583 691.201 L738.143 691.201 L738.702 691.201 L739.261 691.201 L739.82 691.201 L740.38 691.201 L740.939 691.201 L741.498 691.201 L742.057 691.201 L742.617 691.201 L743.176 691.201 L743.735 691.201 L744.294 691.201 L744.854 691.201 L745.413 691.201 L745.972 691.201 L746.531 691.201 L747.091 691.201 L747.65 691.201 L748.209 691.201 L748.768 691.201 L749.328 691.201 L749.887 691.201 L750.446 691.201 L751.005 691.201 L751.565 691.201 L752.124 691.201 L752.683 691.201 L753.242 691.201 L753.802 691.201 L754.361 691.201 L754.92 691.201 L755.479 691.201 L756.039 691.201 L756.598 691.201 L757.157 691.201 L757.716 691.201 L758.276 691.201 L758.835 691.201 L759.394 691.201 L759.953 691.201 L760.513 691.201 L761.072 691.201 L761.631 691.201 L762.19 691.201 L762.75 691.201 L763.309 691.201 L763.868 691.201 L764.427 691.201 L764.987 691.201 L765.546 691.201 L766.105 691.201 L766.664 691.201 L767.224 691.201 L767.783 691.201 L768.342 691.201 L768.901 691.201 L769.461 691.201 L770.02 691.201 L770.579 691.201 L771.138 691.201 L771.698 691.201 L772.257 691.201 L772.816 691.201 L773.375 691.201 L773.935 691.201 L774.494 691.201 L775.053 691.201 L775.612 691.201 L776.172 691.201 L776.731 691.201 L777.29 691.201 L777.849 691.201 L778.409 691.201 L778.968 691.201 L779.527 691.201 L780.086 691.201 L780.646 691.201 L781.205 691.201 L781.764 691.201 L782.323 691.201 L782.883 691.201 L783.442 691.201 L784.001 691.201 L784.56 691.201 L785.12 691.201 L785.679 691.201 L786.238 691.201 L786.797 691.201 L787.357 691.201 L787.916 691.201 L788.475 691.201 L789.034 691.201 L789.594 691.201 L790.153 691.201 L790.712 691.201 L791.271 691.201 L791.831 691.201 L792.39 691.201 L792.949 691.201 L793.508 691.201 L794.068 691.201 L794.627 691.201 L795.186 691.201 L795.745 691.201 L796.305 691.201 L796.864 691.201 L797.423 691.201 L797.982 691.201 L798.542 691.201 L799.101 691.201 L799.66 691.201 L800.219 691.201 L800.779 691.201 L801.338 691.201 L801.897 691.201 L802.456 691.201 L803.016 691.201 L803.575 691.201 L804.134 691.201 L804.693 691.201 L805.253 691.201 L805.812 691.201 L806.371 691.201 L806.931 691.201 L807.49 691.201 L808.049 691.201 L808.608 691.201 L809.168 691.201 L809.727 691.201 L810.286 691.201 L810.845 691.201 L811.405 691.201 L811.964 691.201 L812.523 691.201 L813.082 691.201 L813.642 691.201 L814.201 691.201 L814.76 691.201 L815.319 691.201 L815.879 691.201 L816.438 691.201 L816.997 691.201 L817.556 691.201 L818.116 691.201 L818.675 691.201 L819.234 691.201 L819.793 691.201 L820.353 691.201 L820.912 691.201 L821.471 691.201 L822.03 691.201 L822.59 691.201 L823.149 691.201 L823.708 691.201 L824.267 691.201 L824.827 691.201 L825.386 691.201 L825.945 691.201 L826.504 691.201 L827.064 691.201 L827.623 691.201 L828.182 691.201 L828.741 691.201 L829.301 691.201 L829.86 691.201 L830.419 691.201 L830.978 691.201 L831.538 691.201 L832.097 691.201 L832.656 691.201 L833.215 691.201 L833.775 691.201 L834.334 691.201 L834.893 691.201 L835.452 691.201 L836.012 691.201 L836.571 691.201 L837.13 691.201 L837.689 691.201 L838.249 691.201 L838.808 691.201 L839.367 691.201 L839.926 691.201 L840.486 691.201 L841.045 691.201 L841.604 691.201 L842.163 691.201 L842.723 691.201 L843.282 691.201 L843.841 691.201 L844.4 691.201 L844.96 691.201 L845.519 691.201 L846.078 691.201 L846.637 691.201 L847.197 691.201 L847.756 691.201 L848.315 691.201 L848.874 691.201 L849.434 691.201 L849.993 691.201 L850.552 691.201 L851.111 691.201 L851.671 691.201 L852.23 691.201 L852.789 691.201 L853.348 691.201 L853.908 691.201 L854.467 691.201 L855.026 691.201 L855.585 691.201 L856.145 691.201 L856.704 691.201 L857.263 691.201 L857.822 691.201 L858.382 691.201 L858.941 691.201 L859.5 691.201 L860.059 691.201 L860.619 691.201 L861.178 691.201 L861.737 691.201 L862.296 691.201 L862.856 691.201 L863.415 691.201 L863.974 691.201 L864.533 691.201 L865.093 691.201 L865.652 691.201 L866.211 691.201 L866.77 691.201 L867.33 691.201 L867.889 691.201 L868.448 691.201 L869.007 691.201 L869.567 691.201 L870.126 691.201 L870.685 691.201 L871.244 691.201 L871.804 691.201 L872.363 691.201 L872.922 691.201 L873.481 691.201 L874.041 691.201 L874.6 691.201 L875.159 691.201 L875.718 691.201 L876.278 691.201 L876.837 691.201 L877.396 691.201 L877.955 691.201 L878.515 691.201 L879.074 691.201 L879.633 691.201 L880.192 691.201 L880.752 691.201 L881.311 691.201 L881.87 691.201 L882.429 691.201 L882.989 691.201 L883.548 691.201 L884.107 691.201 L884.666 691.201 L885.226 691.201 L885.785 691.201 L886.344 691.201 L886.903 691.201 L887.463 691.201 L888.022 691.201 L888.581 691.201 L889.14 691.201 L889.7 691.201 L890.259 691.201 L890.818 691.201 L891.377 691.201 L891.937 691.201 L892.496 691.201 L893.055 691.201 L893.614 691.201 L894.174 691.201 L894.733 691.201 L895.292 691.201 L895.851 691.201 L896.411 691.201 L896.97 691.201 L897.529 691.201 L898.088 691.201 L898.648 691.201 L899.207 691.201 L899.766 691.201 L900.325 691.201 L900.885 691.201 L901.444 691.201 L902.003 691.201 L902.562 691.201 L903.122 691.201 L903.681 691.201 L904.24 691.201 L904.799 691.201 L905.359 691.201 L905.918 691.201 L906.477 691.201 L907.036 691.201 L907.596 691.201 L908.155 691.201 L908.714 691.201 L909.273 691.201 L909.833 691.201 L910.392 691.201 L910.951 691.201 L911.51 691.201 L912.07 691.201 L912.629 691.201 L913.188 691.201 L913.747 691.201 L914.307 691.201 L914.866 691.201 L915.425 691.201 L915.984 691.201 L916.544 691.201 L917.103 691.201 L917.662 691.201 L918.221 691.201 L918.781 691.201 L919.34 691.201 L919.899 691.201 L920.458 691.201 L921.018 691.201 L921.577 691.201 L922.136 691.201 L922.695 691.201 L923.255 691.201 L923.814 691.201 L924.373 691.201 L924.932 691.201 L925.492 691.201 L926.051 691.201 L926.61 691.201 L927.169 691.201 L927.729 691.201 L928.288 691.201 L928.847 691.201 L929.406 691.201 L929.966 691.201 L930.525 691.201 L931.084 691.201 L931.644 691.201 L932.203 691.201 L932.762 691.201 L933.321 691.201 L933.881 691.201 L934.44 691.201 L934.999 691.201 L935.558 691.201 L936.118 691.201 L936.677 691.201 L937.236 691.201 L937.795 691.201 L938.355 691.201 L938.914 691.201 L939.473 691.201 L940.032 691.201 L940.592 691.201 L941.151 691.201 L941.71 691.201 L942.269 691.201 L942.829 691.201 L943.388 691.201 L943.947 691.201 L944.506 691.201 L945.066 691.201 L945.625 691.201 L946.184 691.201 L946.743 691.201 L947.303 691.201 L947.862 691.201 L948.421 691.201 L948.98 691.201 L949.54 691.201 L950.099 691.201 L950.658 691.201 L951.217 691.201 L951.777 691.201 L952.336 691.201 L952.895 691.201 L953.454 691.201 L954.014 691.201 L954.573 691.201 L955.132 691.201 L955.691 691.201 L956.251 691.201 L956.81 691.201 L957.369 691.201 L957.928 691.201 L958.488 691.201 L959.047 691.201 L959.606 691.201 L960.165 691.201 L960.725 691.201 L961.284 691.201 L961.843 691.201 L962.402 691.201 L962.962 691.201 L963.521 691.201 L964.08 691.201 L964.639 691.201 L965.199 691.201 L965.758 691.201 L966.317 691.201 L966.876 691.201 L967.436 691.201 L967.995 691.201 L968.554 691.201 L969.113 691.201 L969.673 691.201 L970.232 691.201 L970.791 691.201 L971.35 691.201 L971.91 691.201 L972.469 691.201 L973.028 691.201 L973.587 691.201 L974.147 691.201 L974.706 691.201 L975.265 691.201 L975.824 691.201 L976.384 691.201 L976.943 691.201 L977.502 691.201 L978.061 691.201 L978.621 691.201 L979.18 691.201 L979.739 691.201 L980.298 691.201 L980.858 691.201 L981.417 691.201 L981.976 691.201 L982.535 691.201 L983.095 691.201 L983.654 691.201 L984.213 691.201 L984.772 691.201 L985.332 691.201 L985.891 691.201 L986.45 691.201 L987.009 691.201 L987.569 691.201 L988.128 691.201 L988.687 691.201 L989.246 691.201 L989.806 691.201 L990.365 691.201 L990.924 691.201 L991.483 691.201 L992.043 691.201 L992.602 691.201 L993.161 691.201 L993.72 691.201 L994.28 691.201 L994.839 691.201 L995.398 691.201 L995.957 691.201 L996.517 691.201 L997.076 691.201 L997.635 691.201 L998.194 691.201 L998.754 691.201 L999.313 691.201 L999.872 691.201 L1000.43 691.201 L1000.99 691.201 L1001.55 691.201 L1002.11 691.201 L1002.67 691.201 L1003.23 691.201 L1003.79 691.201 L1004.35 691.201 L1004.91 691.201 L1005.46 691.201 L1006.02 691.201 L1006.58 691.201 L1007.14 691.201 L1007.7 691.201 L1008.26 691.201 L1008.82 691.201 L1009.38 691.201 L1009.94 691.201 L1010.5 691.201 L1011.06 691.201 L1011.62 691.201 L1012.18 691.201 L1012.73 691.201 L1013.29 691.201 L1013.85 691.201 L1014.41 691.201 L1014.97 691.201 L1015.53 691.201 L1016.09 691.201 L1016.65 691.201 L1017.21 691.201 L1017.77 691.201 L1018.33 691.201 L1018.89 691.201 L1019.45 691.201 L1020.01 691.201 L1020.56 691.201 L1021.12 691.201 L1021.68 691.201 L1022.24 691.201 L1022.8 691.201 L1023.36 691.201 L1023.92 691.201 L1024.48 691.201 L1025.04 691.201 L1025.6 691.201 L1026.16 691.201 L1026.72 691.201 L1027.28 691.201 L1027.83 691.201 L1028.39 691.201 L1028.95 691.201 L1029.51 691.201 L1030.07 691.201 L1030.63 691.201 L1031.19 691.201 L1031.75 691.201 L1032.31 691.201 L1032.87 691.201 L1033.43 691.201 L1033.99 691.201 L1034.55 691.201 L1035.1 691.201 L1035.66 691.201 L1036.22 691.201 L1036.78 691.201 L1037.34 691.201 L1037.9 691.201 L1038.46 691.201 L1039.02 691.201 L1039.58 691.201 L1040.14 691.201 L1040.7 691.201 L1041.26 691.201 L1041.82 691.201 L1042.38 691.201 L1042.93 691.201 L1043.49 691.201 L1044.05 691.201 L1044.61 691.201 L1045.17 691.201 L1045.73 691.201 L1046.29 691.201 L1046.85 691.201 L1047.41 691.201 L1047.97 691.201 L1048.53 691.201 L1049.09 691.201 L1049.65 691.201 L1050.2 691.201 L1050.76 691.201 L1051.32 691.201 L1051.88 691.201 L1052.44 691.201 L1053 691.201 L1053.56 691.201 L1054.12 691.201 L1054.68 691.201 L1055.24 691.201 L1055.8 691.201 L1056.36 691.201 L1056.92 691.201 L1057.48 691.201 L1058.03 691.201 L1058.59 691.201 L1059.15 691.201 L1059.71 691.201 L1060.27 691.201 L1060.83 691.201 L1061.39 691.201 L1061.95 691.201 L1062.51 691.201 L1063.07 691.201 L1063.63 691.201 L1064.19 691.201 L1064.75 691.201 L1065.3 691.201 L1065.86 691.201 L1066.42 691.201 L1066.98 691.201 L1067.54 691.201 L1068.1 691.201 L1068.66 691.201 L1069.22 691.201 L1069.78 691.201 L1070.34 691.201 L1070.9 691.201 L1071.46 691.201 L1072.02 691.201 L1072.57 691.201 L1073.13 691.201 L1073.69 691.201 L1074.25 691.201 L1074.81 691.201 L1075.37 691.201 L1075.93 691.201 L1076.49 691.201 L1077.05 691.201 L1077.61 691.201 L1078.17 691.201 L1078.73 691.201 L1079.29 691.201 L1079.85 691.201 L1080.4 691.201 L1080.96 691.201 L1081.52 691.201 L1082.08 691.201 L1082.64 691.201 L1083.2 691.201 L1083.76 691.201 L1084.32 691.201 L1084.88 691.201 L1085.44 691.201 L1086 691.201 L1086.56 691.201 L1087.12 691.201 L1087.67 691.201 L1088.23 691.201 L1088.79 691.201 L1089.35 691.201 L1089.91 691.201 L1090.47 691.201 L1091.03 691.201 L1091.59 691.201 L1092.15 691.201 L1092.71 691.201 L1093.27 691.201 L1093.83 691.201 L1094.39 691.201 L1094.94 691.201 L1095.5 691.201 L1096.06 691.201 L1096.62 691.201 L1097.18 691.201 L1097.74 691.201 L1098.3 691.201 L1098.86 691.201 L1099.42 691.201 L1099.98 691.201 L1100.54 691.201 L1101.1 691.201 L1101.66 691.201 L1102.22 691.201 L1102.77 691.201 L1103.33 691.201 L1103.89 691.201 L1104.45 691.201 L1105.01 691.201 L1105.57 691.201 L1106.13 691.201 L1106.69 691.201 L1107.25 691.201 L1107.81 691.201 L1108.37 691.201 L1108.93 691.201 L1109.49 691.201 L1110.04 691.201 L1110.6 691.201 L1111.16 691.201 L1111.72 691.201 L1112.28 691.201 L1112.84 691.201 L1113.4 691.201 L1113.96 691.201 L1114.52 691.201 L1115.08 691.201 L1115.64 691.201 L1116.2 691.201 L1116.76 691.201 L1117.31 691.201 L1117.87 691.201 L1118.43 691.201 L1118.99 691.201 L1119.55 691.201 L1120.11 691.201 L1120.67 691.201 L1121.23 691.201 L1121.79 691.201 L1122.35 691.201 L1122.91 691.201 L1123.47 691.201 L1124.03 691.201 L1124.59 691.201 L1125.14 691.201 L1125.7 691.201 L1126.26 691.201 L1126.82 691.201 L1127.38 691.201 L1127.94 691.201 L1128.5 691.201 L1129.06 691.201 L1129.62 691.201 L1130.18 691.201 L1130.74 691.201 L1131.3 691.201 L1131.86 691.201 L1132.41 691.201 L1132.97 691.201 L1133.53 691.201 L1134.09 691.201 L1134.65 691.201 L1135.21 691.201 L1135.77 691.201 L1136.33 691.201 L1136.89 691.201 L1137.45 691.201 L1138.01 691.201 L1138.57 691.201 L1139.13 691.201 L1139.68 691.201 L1140.24 691.201 L1140.8 691.201 L1141.36 691.201 L1141.92 691.201 L1142.48 691.201 L1143.04 691.201 L1143.6 691.201 L1144.16 691.201 L1144.72 691.201 L1145.28 691.201 L1145.84 691.201 L1146.4 691.201 L1146.96 691.201 L1147.51 691.201 L1148.07 691.201 L1148.63 691.201 L1149.19 691.201 L1149.75 691.201 L1150.31 691.201 L1150.87 691.201 L1151.43 691.201 L1151.99 691.201 L1152.55 691.201 L1153.11 691.201 L1153.67 691.201 L1154.23 691.201 L1154.78 691.201 L1155.34 691.201 L1155.9 691.201 L1156.46 691.201 L1157.02 691.201 L1157.58 691.201 L1158.14 691.201 L1158.7 691.201 L1159.26 691.201 L1159.82 691.201 L1160.38 691.201 L1160.94 691.201 L1161.5 691.201 L1162.05 691.201 L1162.61 691.201 L1163.17 691.201 L1163.73 691.201 L1164.29 691.201 L1164.85 691.201 L1165.41 691.201 L1165.97 691.201 L1166.53 691.201 L1167.09 691.201 L1167.65 691.201 L1168.21 691.201 L1168.77 691.201 L1169.33 691.201 L1169.88 691.201 L1170.44 691.201 L1171 691.201 L1171.56 691.201 L1172.12 691.201 L1172.68 691.201 L1173.24 691.201 L1173.8 691.201 L1174.36 691.201 L1174.92 691.201 L1175.48 691.201 L1176.04 691.201 L1176.6 691.201 L1177.15 691.201 L1177.71 691.201 L1178.27 691.201 L1178.83 691.201 L1179.39 691.201 L1179.95 691.201 L1180.51 691.201 L1181.07 691.201 L1181.63 691.201 L1182.19 691.201 L1182.75 691.201 L1183.31 691.201 L1183.87 691.201 L1184.43 691.201 L1184.98 691.201 L1185.54 691.201 L1186.1 691.201 L1186.66 691.201 L1187.22 691.201 L1187.78 691.201 L1188.34 691.201 L1188.9 691.201 L1189.46 691.201 L1190.02 691.201 L1190.58 691.201 L1191.14 691.201 L1191.7 691.201 L1192.25 691.201 L1192.81 691.201 L1193.37 691.201 L1193.93 691.201 L1194.49 691.201 L1195.05 691.201 L1195.61 691.201 L1196.17 691.201 L1196.73 691.201 L1197.29 691.201 L1197.85 691.201 L1198.41 691.201 L1198.97 691.201 L1199.52 691.201 L1200.08 691.201 L1200.64 691.201 L1201.2 691.201 L1201.76 691.201 L1202.32 691.201 L1202.88 691.201 L1203.44 691.201 L1204 691.201 L1204.56 691.201 L1205.12 691.201 L1205.68 691.201 L1206.24 691.201 L1206.8 691.201 L1207.35 691.201 L1207.91 691.201 L1208.47 691.201 L1209.03 691.201 L1209.59 691.201 L1210.15 691.201 L1210.71 691.201 L1211.27 691.201 L1211.83 691.201 L1212.39 691.201 L1212.95 691.201 L1213.51 691.201 L1214.07 691.201 L1214.62 691.201 L1215.18 691.201 L1215.74 691.201 L1216.3 691.201 L1216.86 691.201 L1217.42 691.201 L1217.98 691.201 L1218.54 691.201 L1219.1 691.201 L1219.66 691.201 L1220.22 691.201 L1220.78 691.201 L1221.34 691.201 L1221.89 691.201 L1222.45 691.201 L1223.01 691.201 L1223.57 691.201 L1224.13 691.201 L1224.69 691.201 L1225.25 691.201 L1225.81 691.201 L1226.37 691.201 L1226.93 691.201 L1227.49 691.201 L1228.05 691.201 L1228.61 691.201 L1229.17 691.201 L1229.72 691.201 L1230.28 691.201 L1230.84 691.201 L1231.4 691.201 L1231.96 691.201 L1232.52 691.201 L1233.08 691.201 L1233.64 691.201 L1234.2 691.201 L1234.76 691.201 L1235.32 691.201 L1235.88 691.201 L1236.44 691.201 L1236.99 691.201 L1237.55 691.201 L1238.11 691.201 L1238.67 691.201 L1239.23 691.201 L1239.79 691.201 L1240.35 691.201 L1240.91 691.201 L1241.47 691.201 L1242.03 691.201 L1242.59 691.201 L1243.15 691.201 L1243.71 691.201 L1244.26 691.201 L1244.82 691.201 L1245.38 691.201 L1245.94 691.201 L1246.5 691.201 L1247.06 691.201 L1247.62 691.201 L1248.18 691.201 L1248.74 691.201 L1249.3 691.201 L1249.86 691.201 L1250.42 691.201 L1250.98 691.201 L1251.54 691.201 L1252.09 691.201 L1252.65 691.201 L1253.21 691.201 L1253.77 691.201 L1254.33 691.201 L1254.89 691.201 L1255.45 691.201 L1256.01 691.201 L1256.57 691.201 L1257.13 691.201 L1257.69 691.201 L1258.25 691.201 L1258.81 691.201 L1259.36 691.201 L1259.92 691.201 L1260.48 691.201 L1261.04 691.201 L1261.6 691.201 L1262.16 691.201 L1262.72 691.201 L1263.28 691.201 L1263.84 691.201 L1264.4 691.201 L1264.96 691.201 L1265.52 691.201 L1266.08 691.201 L1266.63 691.201 L1267.19 691.201 L1267.75 691.201 L1268.31 691.201 L1268.87 691.201 L1269.43 691.201 L1269.99 691.201 L1270.55 691.201 L1271.11 691.201 L1271.67 691.201 L1272.23 691.201 L1272.79 691.201 L1273.35 691.201 L1273.91 691.201 L1274.46 691.201 L1275.02 691.201 L1275.58 691.201 L1276.14 691.201 L1276.7 691.201 L1277.26 691.201 L1277.82 691.201 L1278.38 691.201 L1278.94 691.201 L1279.5 691.201 L1280.06 691.201 L1280.62 691.201 L1281.18 691.201 L1281.73 691.201 L1282.29 691.201 L1282.85 691.201 L1283.41 691.201 L1283.97 691.201 L1284.53 691.201 L1285.09 691.201 L1285.65 691.201 L1286.21 691.201 L1286.77 691.201 L1287.33 691.201 L1287.89 691.201 L1288.45 691.201 L1289 691.201 L1289.56 691.201 L1290.12 691.201 L1290.68 691.201 L1291.24 691.201 L1291.8 691.201 L1292.36 691.201 L1292.92 691.201 L1293.48 691.201 L1294.04 691.201 L1294.6 691.201 L1295.16 691.201 L1295.72 691.201 L1296.28 691.201 L1296.83 691.201 L1297.39 691.201 L1297.95 691.201 L1298.51 691.201 L1299.07 691.201 L1299.63 691.201 L1300.19 691.201 L1300.75 691.201 L1301.31 691.201 L1301.87 691.201 L1302.43 691.201 L1302.99 691.201 L1303.55 691.201 L1304.1 691.201 L1304.66 691.201 L1305.22 691.201 L1305.78 691.201 L1306.34 691.201 L1306.9 691.201 L1307.46 691.201 L1308.02 691.201 L1308.58 691.201 L1309.14 691.201 L1309.7 691.201 L1310.26 691.201 L1310.82 691.201 L1311.38 691.201 L1311.93 691.201 L1312.49 691.201 L1313.05 691.201 L1313.61 691.201 L1314.17 691.201 L1314.73 691.201 L1315.29 691.201 L1315.85 691.201 L1316.41 691.201 L1316.97 691.201 L1317.53 691.201 L1318.09 691.201 L1318.65 691.201 L1319.2 691.201 L1319.76 691.201 L1320.32 691.201 L1320.88 691.201 L1321.44 691.201 L1322 691.201 L1322.56 691.201 L1323.12 691.201 L1323.68 691.201 L1324.24 691.201 L1324.8 691.201 L1325.36 691.201 L1325.92 691.201 L1326.47 691.201 L1327.03 691.201 L1327.59 691.201 L1328.15 691.201 L1328.71 691.201 L1329.27 691.201 L1329.83 691.201 L1330.39 691.201 L1330.95 691.201 L1331.51 691.201 L1332.07 691.201 L1332.63 691.201 L1333.19 691.201 L1333.75 691.201 L1334.3 691.201 L1334.86 691.201 L1335.42 691.201 L1335.98 691.201 L1336.54 691.201 L1337.1 691.201 L1337.66 691.201 L1338.22 691.201 L1338.78 691.201 L1339.34 691.201 L1339.9 691.201 L1340.46 691.201 L1341.02 691.201 L1341.57 691.201 L1342.13 691.201 L1342.69 691.201 L1343.25 691.201 L1343.81 691.201 L1344.37 691.201 L1344.93 691.201 L1345.49 691.201 L1346.05 691.201 L1346.61 691.201 L1347.17 691.201 L1347.73 691.201 L1348.29 691.201 L1348.84 691.201 L1349.4 691.201 L1349.96 691.201 L1350.52 691.201 L1351.08 691.201 L1351.64 691.201 L1352.2 691.201 L1352.76 691.201 L1353.32 691.201 L1353.88 691.201 L1354.44 691.201 L1355 691.201 L1355.56 691.201 L1356.12 691.201 L1356.67 691.201 L1357.23 691.201 L1357.79 691.201 L1358.35 691.201 L1358.91 691.201 L1359.47 691.201 L1360.03 691.201 L1360.59 691.201 L1361.15 691.201 L1361.71 691.201 L1362.27 691.201 L1362.83 691.201 L1363.39 691.201 L1363.94 691.201 L1364.5 691.201 L1365.06 691.201 L1365.62 691.201 L1366.18 691.201 L1366.74 691.201 L1367.3 691.201 L1367.86 691.201 L1368.42 691.201 L1368.98 691.201 L1369.54 691.201 L1370.1 691.201 L1370.66 691.201 L1371.21 691.201 L1371.77 691.201 L1372.33 691.201 L1372.89 691.201 L1373.45 691.201 L1374.01 691.201 L1374.57 691.201 L1375.13 691.201 L1375.69 691.201 L1376.25 691.201 L1376.81 691.201 L1377.37 691.201 L1377.93 691.201 L1378.49 691.201 L1379.04 691.201 L1379.6 691.201 L1380.16 691.201 L1380.72 691.201 L1381.28 691.201 L1381.84 691.201 L1382.4 691.201 L1382.96 691.201 L1383.52 691.201 L1384.08 691.201 L1384.64 691.201 L1385.2 691.201 L1385.76 691.201 L1386.31 691.201 L1386.87 691.201 L1387.43 691.201 L1387.99 691.201 L1388.55 691.201 L1389.11 691.201 L1389.67 691.201 L1390.23 691.201 L1390.79 691.201 L1391.35 691.201 L1391.91 691.201 L1392.47 691.201 L1393.03 691.201 L1393.58 691.201 L1394.14 691.201 L1394.7 691.201 L1395.26 691.201 L1395.82 691.201 L1396.38 691.201 L1396.94 691.201 L1397.5 691.201 L1398.06 691.201 L1398.62 691.201 L1399.18 691.201 L1399.74 691.201 L1400.3 691.201 L1400.86 691.201 L1401.41 691.201 L1401.97 691.201 L1402.53 691.201 L1403.09 691.201 L1403.65 691.201 L1404.21 691.201 L1404.77 691.201 L1405.33 691.201 L1405.89 691.201 L1406.45 691.201 L1407.01 691.201 L1407.57 691.201 L1408.13 691.201 L1408.68 691.201 L1409.24 691.201 L1409.8 691.201 L1410.36 691.201 L1410.92 691.201 L1411.48 691.201 L1412.04 691.201 L1412.6 691.201 L1413.16 691.201 L1413.72 691.201 L1414.28 691.201 L1414.84 691.201 L1415.4 691.201 L1415.95 691.201 L1416.51 691.201 L1417.07 691.201 L1417.63 691.201 L1418.19 691.201 L1418.75 691.201 L1419.31 691.201 L1419.87 691.201 L1420.43 691.201 L1420.99 691.201 L1421.55 691.201 L1422.11 691.201 L1422.67 691.201 L1423.23 691.201 L1423.78 691.201 L1424.34 691.201 L1424.9 691.201 L1425.46 691.201 L1426.02 691.201 L1426.58 691.201 L1427.14 691.201 L1427.7 691.201 L1428.26 691.201 L1428.82 691.201 L1429.38 691.201 L1429.94 691.201 L1430.5 691.201 L1431.05 691.201 L1431.61 691.201 L1432.17 691.201 L1432.73 691.201 L1433.29 691.201 L1433.85 691.201 L1434.41 691.201 L1434.97 691.201 L1435.53 691.201 L1436.09 691.201 L1436.65 691.201 L1437.21 691.201 L1437.77 691.201 L1438.33 691.201 L1438.88 691.201 L1439.44 691.201 L1440 691.201 L1440.56 691.201 L1441.12 691.201 L1441.68 691.201 L1442.24 691.201 L1442.8 691.201 L1443.36 691.201 L1443.92 691.201 L1444.48 691.201 L1445.04 691.201 L1445.6 691.201 L1446.15 691.201 L1446.71 691.201 L1447.27 691.201 L1447.83 691.201 L1448.39 691.201 L1448.95 691.201 L1449.51 691.201 L1450.07 691.201 L1450.63 691.201 L1451.19 691.201 L1451.75 691.201 L1452.31 691.201 L1452.87 691.201 L1453.42 691.201 L1453.98 691.201 L1454.54 691.201 L1455.1 691.201 L1455.66 691.201 L1456.22 691.201 L1456.78 691.201 L1457.34 691.201 L1457.9 691.201 L1458.46 691.201 L1459.02 691.201 L1459.58 691.201 L1460.14 691.201 L1460.7 691.201 L1461.25 691.201 L1461.81 691.201 L1462.37 691.201 L1462.93 691.201 L1463.49 691.201 L1464.05 691.201 L1464.61 691.201 L1465.17 691.201 L1465.73 691.201 L1466.29 691.201 L1466.85 691.201 L1467.41 691.201 L1467.97 691.201 L1468.52 691.201 L1469.08 691.201 L1469.64 691.201 L1470.2 691.201 L1470.76 691.201 L1471.32 691.201 L1471.88 691.201 L1472.44 691.201 L1473 691.201 L1473.56 691.201 L1474.12 691.201 L1474.68 691.201 L1475.24 691.201 L1475.79 691.201 L1476.35 691.201 L1476.91 691.201 L1477.47 691.201 L1478.03 691.201 L1478.59 691.201 L1479.15 691.201 L1479.71 691.201 L1480.27 691.201 L1480.83 691.201 L1481.39 691.201 L1481.95 691.201 L1482.51 691.201 L1483.07 691.201 L1483.62 691.201 L1484.18 691.201 L1484.74 691.201 L1485.3 691.201 L1485.86 691.201 L1486.42 691.201 L1486.98 691.201 L1487.54 691.201 L1488.1 691.201 L1488.66 691.201 L1489.22 691.201 L1489.78 691.201 L1490.34 691.201 L1490.89 691.201 L1491.45 691.201 L1492.01 691.201 L1492.57 691.201 L1493.13 691.201 L1493.69 691.201 L1494.25 691.201 L1494.81 691.201 L1495.37 691.201 L1495.93 691.201 L1496.49 691.201 L1497.05 691.201 L1497.61 691.201 L1498.16 691.201 L1498.72 691.201 L1499.28 691.201 L1499.84 691.201 L1500.4 691.201 L1500.96 691.201 L1501.52 691.201 L1502.08 691.201 L1502.64 691.201 L1503.2 691.201 L1503.76 691.201 L1504.32 691.201 L1504.88 691.201 L1505.44 691.201 L1505.99 691.201 L1506.55 691.201 L1507.11 691.201 L1507.67 691.201 L1508.23 691.201 L1508.79 691.201 L1509.35 691.201 L1509.91 691.201 L1510.47 691.201 L1511.03 691.201 L1511.59 691.201 L1512.15 691.201 L1512.71 691.201 L1513.26 691.201 L1513.82 691.201 L1514.38 691.201 L1514.94 691.201 L1515.5 691.201 L1516.06 691.201 L1516.62 691.201 L1517.18 691.201 L1517.74 691.201 L1518.3 691.201 L1518.86 691.201 L1519.42 691.201 L1519.98 691.201 L1520.53 691.201 L1521.09 691.201 L1521.65 691.201 L1522.21 691.201 L1522.77 691.201 L1523.33 691.201 L1523.89 691.201 L1524.45 691.201 L1525.01 691.201 L1525.57 691.201 L1526.13 691.201 L1526.69 691.201 L1527.25 691.201 L1527.81 691.201 L1528.36 691.201 L1528.92 691.201 L1529.48 691.201 L1530.04 691.201 L1530.6 691.201 L1531.16 691.201 L1531.72 691.201 L1532.28 691.201 L1532.84 691.201 L1533.4 691.201 L1533.96 691.201 L1534.52 691.201 L1535.08 691.201 L1535.63 691.201 L1536.19 691.201 L1536.75 691.201 L1537.31 691.201 L1537.87 691.201 L1538.43 691.201 L1538.99 691.201 L1539.55 691.201 L1540.11 691.201 L1540.67 691.201 L1541.23 691.201 L1541.79 691.201 L1542.35 691.201 L1542.9 691.201 L1543.46 691.201 L1544.02 691.201 L1544.58 691.201 L1545.14 691.201 L1545.7 691.201 L1546.26 691.201 L1546.82 691.201 L1547.38 691.201 L1547.94 691.201 L1548.5 691.201 L1549.06 691.201 L1549.62 691.201 L1550.18 691.201 L1550.73 691.201 L1551.29 691.201 L1551.85 691.201 L1552.41 691.201 L1552.97 691.201 L1553.53 691.201 L1554.09 691.201 L1554.65 691.201 L1555.21 691.201 L1555.77 691.201 L1556.33 691.201 L1556.89 691.201 L1557.45 691.201 L1558 691.201 L1558.56 691.201 L1559.12 691.201 L1559.68 691.201 L1560.24 691.201 L1560.8 691.201 L1561.36 691.201 L1561.92 691.201 L1562.48 691.201 L1563.04 691.201 L1563.6 691.201 L1564.16 691.201 L1564.72 691.201 L1565.28 691.201 L1565.83 691.201 L1566.39 691.201 L1566.95 691.201 L1567.51 691.201 L1568.07 691.201 L1568.63 691.201 L1569.19 691.201 L1569.75 691.201 L1570.31 691.201 L1570.87 691.201 L1571.43 691.201 L1571.99 691.201 L1572.55 691.201 L1573.1 691.201 L1573.66 691.201 L1574.22 691.201 L1574.78 691.201 L1575.34 691.201 L1575.9 691.201 L1576.46 691.201 L1577.02 691.201 L1577.58 691.201 L1578.14 691.201 L1578.7 691.201 L1579.26 691.201 L1579.82 691.201 L1580.37 691.201 L1580.93 691.201 L1581.49 691.201 L1582.05 691.201 L1582.61 691.201 L1583.17 691.201 L1583.73 691.201 L1584.29 691.201 L1584.85 691.201 L1585.41 691.201 L1585.97 691.201 L1586.53 691.201 L1587.09 691.201 L1587.65 691.201 L1588.2 691.201 L1588.76 691.201 L1589.32 691.201 L1589.88 691.201 L1590.44 691.201 L1591 691.201 L1591.56 691.201 L1592.12 691.201 L1592.68 691.201 L1593.24 691.201 L1593.8 691.201 L1594.36 691.201 L1594.92 691.201 L1595.47 691.201 L1596.03 691.201 L1596.59 691.201 L1597.15 691.201 L1597.71 691.201 L1598.27 691.201 L1598.83 691.201 L1599.39 691.201 L1599.95 691.201 L1600.51 691.201 L1601.07 691.201 L1601.63 691.201 L1602.19 691.201 L1602.74 691.201 L1603.3 691.201 L1603.86 691.201 L1604.42 691.201 L1604.98 691.201 L1605.54 691.201 L1606.1 691.201 L1606.66 691.201 L1607.22 691.201 L1607.78 691.201 L1608.34 691.201 L1608.9 691.201 L1609.46 691.201 L1610.02 691.201 L1610.57 691.201 L1611.13 691.201 L1611.69 691.201 L1612.25 691.201 L1612.81 691.201 L1613.37 691.201 L1613.93 691.201 L1614.49 691.201 L1615.05 691.201 L1615.61 691.201 L1616.17 691.201 L1616.73 691.201 L1617.29 691.201 L1617.84 691.201 L1618.4 691.201 L1618.96 691.201 L1619.52 691.201 L1620.08 691.201 L1620.64 691.201 L1621.2 691.201 L1621.76 691.201 L1622.32 691.201 L1622.88 691.201 L1623.44 691.201 L1624 691.201 L1624.56 691.201 L1625.11 691.201 L1625.67 691.201 L1626.23 691.201 L1626.79 691.201 L1627.35 691.201 L1627.91 691.201 L1628.47 691.201 L1629.03 691.201 L1629.59 691.201 L1630.15 691.201 L1630.71 691.201 L1631.27 691.201 L1631.83 691.201 L1632.39 691.201 L1632.94 691.201 L1633.5 691.201 L1634.06 691.201 L1634.62 691.201 L1635.18 691.201 L1635.74 691.201 L1636.3 691.201 L1636.86 691.201 L1637.42 691.201 L1637.98 691.201 L1638.54 691.201 L1639.1 691.201 L1639.66 691.201 L1640.21 691.201 L1640.77 691.201 L1641.33 691.201 L1641.89 691.201 L1642.45 691.201 L1643.01 691.201 L1643.57 691.201 L1644.13 691.201 L1644.69 691.201 L1645.25 691.201 L1645.81 691.201 L1646.37 691.201 L1646.93 691.201 L1647.48 691.201 L1648.04 691.201 L1648.6 691.201 L1649.16 691.201 L1649.72 691.201 L1650.28 691.201 L1650.84 691.201 L1651.4 691.201 L1651.96 691.201 L1652.52 691.201 L1653.08 691.201 L1653.64 691.201 L1654.2 691.201 L1654.76 691.201 L1655.31 691.201 L1655.87 691.201 L1656.43 691.201 L1656.99 691.201 L1657.55 691.201 L1658.11 691.201 L1658.67 691.201 L1659.23 691.201 L1659.79 691.201 L1660.35 691.201 L1660.91 691.201 L1661.47 691.201 L1662.03 691.201 L1662.58 691.201 L1663.14 691.201 L1663.7 691.201 L1664.26 691.201 L1664.82 691.201 L1665.38 691.201 L1665.94 691.201 L1666.5 691.201 L1667.06 691.201 L1667.62 691.201 L1668.18 691.201 L1668.74 691.201 L1669.3 691.201 L1669.85 691.201 L1670.41 691.201 L1670.97 691.201 L1671.53 691.201 L1672.09 691.201 L1672.65 691.201 L1673.21 691.201 L1673.77 691.201 L1674.33 691.201 L1674.89 691.201 L1675.45 691.201 L1676.01 691.201 L1676.57 691.201 L1677.13 691.201 L1677.68 691.201 L1678.24 691.201 L1678.8 691.201 L1679.36 691.201 L1679.92 691.201 L1680.48 691.201 L1681.04 691.201 L1681.6 691.201 L1682.16 691.201 L1682.72 691.201 L1683.28 691.201 L1683.84 691.201 L1684.4 691.201 L1684.95 691.201 L1685.51 691.201 L1686.07 691.201 L1686.63 691.201 L1687.19 691.201 L1687.75 691.201 L1688.31 691.201 L1688.87 691.201 L1689.43 691.201 L1689.99 691.201 L1690.55 691.201 L1691.11 691.201 L1691.67 691.201 L1692.23 691.201 L1692.78 691.201 L1693.34 691.201 L1693.9 691.201 L1694.46 691.201 L1695.02 691.201 L1695.58 691.201 L1696.14 691.201 L1696.7 691.201 L1697.26 691.201 L1697.82 691.201 L1698.38 691.201 L1698.94 691.201 L1699.5 691.201 L1700.05 691.201 L1700.61 691.201 L1701.17 691.201 L1701.73 691.201 L1702.29 691.201 L1702.85 691.201 L1703.41 691.201 L1703.97 691.201 L1704.53 691.201 L1705.09 691.201 L1705.65 691.201 L1706.21 691.201 L1706.77 691.201 L1707.32 691.201 L1707.88 691.201 L1708.44 691.201 L1709 691.201 L1709.56 691.201 L1710.12 691.201 L1710.68 691.201 L1711.24 691.201 L1711.8 691.201 L1712.36 691.201 L1712.92 691.201 L1713.48 691.201 L1714.04 691.201 L1714.6 691.201 L1715.15 691.201 L1715.71 691.201 L1716.27 691.201 L1716.83 691.201 L1717.39 691.201 L1717.95 691.201 L1718.51 691.201 L1719.07 691.201 L1719.63 691.201 L1720.19 691.201 L1720.75 691.201 L1721.31 691.201 L1721.87 691.201 L1722.42 691.201 L1722.98 691.201 L1723.54 691.201 L1724.1 691.201 L1724.66 691.201 L1725.22 691.201 L1725.78 691.201 L1726.34 691.201 L1726.9 691.201 L1727.46 691.201 L1728.02 691.201 L1728.58 691.201 L1729.14 691.201 L1729.69 691.201 L1730.25 691.201 L1730.81 691.201 L1731.37 691.201 L1731.93 691.201 L1732.49 691.201 L1733.05 691.201 L1733.61 691.201 L1734.17 691.201 L1734.73 691.201 L1735.29 691.201 L1735.85 691.201 L1736.41 691.201 L1736.97 691.201 L1737.52 691.201 L1738.08 691.201 L1738.64 691.201 L1739.2 691.201 L1739.76 691.201 L1740.32 691.201 L1740.88 691.201 L1741.44 691.201 L1742 691.201 L1742.56 691.201 L1743.12 691.201 L1743.68 691.201 L1744.24 691.201 L1744.79 691.201 L1745.35 691.201 L1745.91 691.201 L1746.47 691.201 L1747.03 691.201 L1747.59 691.201 L1748.15 691.201 L1748.71 691.201 L1749.27 691.201 L1749.83 691.201 L1750.39 691.201 L1750.95 691.201 L1751.51 691.201 L1752.06 691.201 L1752.62 691.201 L1753.18 691.201 L1753.74 691.201 L1754.3 691.201 L1754.86 691.201 L1755.42 691.201 L1755.98 691.201 L1756.54 691.201 L1757.1 691.201 L1757.66 691.201 L1758.22 691.201 L1758.78 691.201 L1759.34 691.201 L1759.89 691.201 L1760.45 691.201 L1761.01 691.201 L1761.57 691.201 L1762.13 691.201 L1762.69 691.201 L1763.25 691.201 L1763.81 691.201 L1764.37 691.201 L1764.93 691.201 L1765.49 691.201 L1766.05 691.201 L1766.61 691.201 L1767.16 691.201 L1767.72 691.201 L1768.28 691.201 L1768.84 691.201 L1769.4 691.201 L1769.96 691.201 L1770.52 691.201 L1771.08 691.201 L1771.64 691.201 L1772.2 691.201 L1772.76 691.201 L1773.32 691.201 L1773.88 691.201 L1774.43 691.201 L1774.99 691.201 L1775.55 691.201 L1776.11 691.201 L1776.67 691.201 L1777.23 691.201 L1777.79 691.201 L1778.35 691.201 L1778.91 691.201 L1779.47 691.201 L1780.03 691.201 L1780.59 691.201 L1781.15 691.201 L1781.71 691.201 L1782.26 691.201 L1782.82 691.201 L1783.38 691.201 L1783.94 691.201 L1784.5 691.201 L1785.06 691.201 L1785.62 691.201 L1786.18 691.201 L1786.74 691.201 L1787.3 691.201 L1787.86 691.201 L1788.42 691.201 L1788.98 691.201 L1789.53 691.201 L1790.09 691.201 L1790.65 691.201 L1791.21 691.201 L1791.77 691.201 L1792.33 691.201 L1792.89 691.201 L1793.45 691.201 L1794.01 691.201 L1794.57 691.201 L1795.13 691.201 L1795.69 691.201 L1796.25 691.201 L1796.8 691.201 L1797.36 691.201 L1797.92 691.201 L1798.48 691.201 L1799.04 691.201 L1799.6 691.201 L1800.16 691.201 L1800.72 691.201 L1801.28 691.201 L1801.84 691.201 L1802.4 691.201 L1802.96 691.201 L1803.52 691.201 L1804.08 691.201 L1804.63 691.201 L1805.19 691.201 L1805.75 691.201 L1806.31 691.201 L1806.87 691.201 L1807.43 691.201 L1807.99 691.201 L1808.55 691.201 L1809.11 691.201 L1809.67 691.201 L1810.23 691.201 L1810.79 691.201 L1811.35 691.201 L1811.9 691.201 L1812.46 691.201 L1813.02 691.201 L1813.58 691.201 L1814.14 691.201 L1814.7 691.201 L1815.26 691.201 L1815.82 691.201 L1816.38 691.201 L1816.94 691.201 L1817.5 691.201 L1818.06 691.201 L1818.62 691.201 L1819.18 691.201 L1819.73 691.201 L1820.29 691.201 L1820.85 691.201 L1821.41 691.201 L1821.97 691.201 L1822.53 691.201 L1823.09 691.201 L1823.65 691.201 L1824.21 691.201 L1824.77 691.201 L1825.33 691.201 L1825.89 691.201 L1826.45 691.201 L1827 691.201 L1827.56 691.201 L1828.12 691.201 L1828.68 691.201 L1829.24 691.201 L1829.8 691.201 L1830.36 691.201 L1830.92 691.201 L1831.48 691.201 L1832.04 691.201 L1832.6 691.201 L1833.16 691.201 L1833.72 691.201 L1834.27 691.201 L1834.83 691.201 L1835.39 691.201 L1835.95 691.201 L1836.51 691.201 L1837.07 691.201 L1837.63 691.201 L1838.19 691.201 L1838.19 682.626 L1837.63 682.626 L1837.07 682.626 L1836.51 682.626 L1835.95 682.626 L1835.39 682.626 L1834.83 682.626 L1834.27 682.626 L1833.72 682.626 L1833.16 682.626 L1832.6 682.626 L1832.04 682.626 L1831.48 682.626 L1830.92 682.626 L1830.36 682.626 L1829.8 682.626 L1829.24 682.626 L1828.68 682.626 L1828.12 682.626 L1827.56 682.626 L1827 682.626 L1826.45 682.626 L1825.89 682.626 L1825.33 682.626 L1824.77 682.626 L1824.21 682.626 L1823.65 682.626 L1823.09 682.626 L1822.53 682.626 L1821.97 682.626 L1821.41 682.626 L1820.85 682.626 L1820.29 682.626 L1819.73 682.626 L1819.18 682.626 L1818.62 682.626 L1818.06 682.626 L1817.5 682.626 L1816.94 682.626 L1816.38 682.626 L1815.82 682.626 L1815.26 682.626 L1814.7 682.626 L1814.14 682.626 L1813.58 682.626 L1813.02 682.626 L1812.46 682.626 L1811.9 682.626 L1811.35 682.626 L1810.79 682.626 L1810.23 682.626 L1809.67 682.626 L1809.11 682.626 L1808.55 682.626 L1807.99 682.626 L1807.43 682.626 L1806.87 682.626 L1806.31 682.626 L1805.75 682.626 L1805.19 682.626 L1804.63 682.626 L1804.08 682.626 L1803.52 682.626 L1802.96 682.626 L1802.4 682.626 L1801.84 682.626 L1801.28 682.626 L1800.72 682.626 L1800.16 682.626 L1799.6 682.626 L1799.04 682.626 L1798.48 682.626 L1797.92 682.626 L1797.36 682.626 L1796.8 682.626 L1796.25 682.626 L1795.69 682.626 L1795.13 682.626 L1794.57 682.626 L1794.01 682.626 L1793.45 682.626 L1792.89 682.626 L1792.33 682.626 L1791.77 682.626 L1791.21 682.626 L1790.65 682.626 L1790.09 682.626 L1789.53 682.626 L1788.98 682.626 L1788.42 682.626 L1787.86 682.626 L1787.3 682.626 L1786.74 682.626 L1786.18 682.626 L1785.62 682.626 L1785.06 682.626 L1784.5 682.626 L1783.94 682.626 L1783.38 682.626 L1782.82 682.626 L1782.26 682.626 L1781.71 682.626 L1781.15 682.626 L1780.59 682.626 L1780.03 682.626 L1779.47 682.626 L1778.91 682.626 L1778.35 682.626 L1777.79 682.626 L1777.23 682.626 L1776.67 682.626 L1776.11 682.626 L1775.55 682.626 L1774.99 682.626 L1774.43 682.626 L1773.88 682.626 L1773.32 682.626 L1772.76 682.626 L1772.2 682.626 L1771.64 682.626 L1771.08 682.626 L1770.52 682.626 L1769.96 682.626 L1769.4 682.626 L1768.84 682.626 L1768.28 682.626 L1767.72 682.626 L1767.16 682.626 L1766.61 682.626 L1766.05 682.626 L1765.49 682.626 L1764.93 682.626 L1764.37 682.626 L1763.81 682.626 L1763.25 682.626 L1762.69 682.626 L1762.13 682.626 L1761.57 682.626 L1761.01 682.626 L1760.45 682.626 L1759.89 682.626 L1759.34 682.626 L1758.78 682.626 L1758.22 682.626 L1757.66 682.626 L1757.1 682.626 L1756.54 682.626 L1755.98 682.626 L1755.42 682.626 L1754.86 682.626 L1754.3 682.626 L1753.74 682.626 L1753.18 682.626 L1752.62 682.626 L1752.06 682.626 L1751.51 682.626 L1750.95 682.626 L1750.39 682.626 L1749.83 682.626 L1749.27 682.626 L1748.71 682.626 L1748.15 682.626 L1747.59 682.626 L1747.03 682.626 L1746.47 682.626 L1745.91 682.626 L1745.35 682.626 L1744.79 682.626 L1744.24 682.626 L1743.68 682.626 L1743.12 682.626 L1742.56 682.626 L1742 682.626 L1741.44 682.626 L1740.88 682.626 L1740.32 682.626 L1739.76 682.626 L1739.2 682.626 L1738.64 682.626 L1738.08 682.626 L1737.52 682.626 L1736.97 682.626 L1736.41 682.626 L1735.85 682.626 L1735.29 682.626 L1734.73 682.626 L1734.17 682.626 L1733.61 682.626 L1733.05 682.626 L1732.49 682.626 L1731.93 682.626 L1731.37 682.626 L1730.81 682.626 L1730.25 682.626 L1729.69 682.626 L1729.14 682.626 L1728.58 682.626 L1728.02 682.626 L1727.46 682.626 L1726.9 682.626 L1726.34 682.626 L1725.78 682.626 L1725.22 682.626 L1724.66 682.626 L1724.1 682.626 L1723.54 682.626 L1722.98 682.626 L1722.42 682.626 L1721.87 682.626 L1721.31 682.626 L1720.75 682.626 L1720.19 682.626 L1719.63 682.626 L1719.07 682.626 L1718.51 682.626 L1717.95 682.626 L1717.39 682.626 L1716.83 682.626 L1716.27 682.626 L1715.71 682.626 L1715.15 682.626 L1714.6 682.626 L1714.04 682.626 L1713.48 682.626 L1712.92 682.626 L1712.36 682.626 L1711.8 682.626 L1711.24 682.626 L1710.68 682.626 L1710.12 682.626 L1709.56 682.626 L1709 682.626 L1708.44 682.626 L1707.88 682.626 L1707.32 682.626 L1706.77 682.626 L1706.21 682.626 L1705.65 682.626 L1705.09 682.626 L1704.53 682.626 L1703.97 682.626 L1703.41 682.626 L1702.85 682.626 L1702.29 682.626 L1701.73 682.626 L1701.17 682.626 L1700.61 682.626 L1700.05 682.626 L1699.5 682.626 L1698.94 682.626 L1698.38 682.626 L1697.82 682.626 L1697.26 682.626 L1696.7 682.626 L1696.14 682.626 L1695.58 682.626 L1695.02 682.626 L1694.46 682.626 L1693.9 682.626 L1693.34 682.626 L1692.78 682.626 L1692.23 682.626 L1691.67 682.626 L1691.11 682.626 L1690.55 682.626 L1689.99 682.626 L1689.43 682.626 L1688.87 682.626 L1688.31 682.626 L1687.75 682.626 L1687.19 682.626 L1686.63 682.626 L1686.07 682.626 L1685.51 682.626 L1684.95 682.626 L1684.4 682.626 L1683.84 682.626 L1683.28 682.626 L1682.72 682.626 L1682.16 682.626 L1681.6 682.626 L1681.04 682.626 L1680.48 682.626 L1679.92 682.626 L1679.36 682.626 L1678.8 682.626 L1678.24 682.626 L1677.68 682.626 L1677.13 682.626 L1676.57 682.626 L1676.01 682.626 L1675.45 682.626 L1674.89 682.626 L1674.33 682.626 L1673.77 682.626 L1673.21 682.626 L1672.65 682.626 L1672.09 682.626 L1671.53 682.626 L1670.97 682.626 L1670.41 682.626 L1669.85 682.626 L1669.3 682.626 L1668.74 682.626 L1668.18 682.626 L1667.62 682.626 L1667.06 682.626 L1666.5 682.626 L1665.94 682.626 L1665.38 682.626 L1664.82 682.626 L1664.26 682.626 L1663.7 682.626 L1663.14 682.626 L1662.58 682.626 L1662.03 682.626 L1661.47 682.626 L1660.91 682.626 L1660.35 682.626 L1659.79 682.626 L1659.23 682.626 L1658.67 682.626 L1658.11 682.626 L1657.55 682.626 L1656.99 682.626 L1656.43 682.626 L1655.87 682.626 L1655.31 682.626 L1654.76 682.626 L1654.2 682.626 L1653.64 682.626 L1653.08 682.626 L1652.52 682.626 L1651.96 682.626 L1651.4 682.626 L1650.84 682.626 L1650.28 682.626 L1649.72 682.626 L1649.16 682.626 L1648.6 682.626 L1648.04 682.626 L1647.48 682.626 L1646.93 682.626 L1646.37 682.626 L1645.81 682.626 L1645.25 682.626 L1644.69 682.626 L1644.13 682.626 L1643.57 682.626 L1643.01 682.626 L1642.45 682.626 L1641.89 682.626 L1641.33 682.626 L1640.77 682.626 L1640.21 682.626 L1639.66 682.626 L1639.1 682.626 L1638.54 682.626 L1637.98 682.626 L1637.42 682.626 L1636.86 682.626 L1636.3 682.626 L1635.74 682.626 L1635.18 682.626 L1634.62 682.626 L1634.06 682.626 L1633.5 682.626 L1632.94 682.626 L1632.39 682.626 L1631.83 682.626 L1631.27 682.626 L1630.71 682.626 L1630.15 682.626 L1629.59 682.626 L1629.03 682.626 L1628.47 682.626 L1627.91 682.626 L1627.35 682.626 L1626.79 682.626 L1626.23 682.626 L1625.67 682.626 L1625.11 682.626 L1624.56 682.626 L1624 682.626 L1623.44 682.626 L1622.88 682.626 L1622.32 682.626 L1621.76 682.626 L1621.2 682.626 L1620.64 682.626 L1620.08 682.626 L1619.52 682.626 L1618.96 682.626 L1618.4 682.626 L1617.84 682.626 L1617.29 682.626 L1616.73 682.626 L1616.17 682.626 L1615.61 682.626 L1615.05 682.626 L1614.49 682.626 L1613.93 682.626 L1613.37 682.626 L1612.81 682.626 L1612.25 682.626 L1611.69 682.626 L1611.13 682.626 L1610.57 682.626 L1610.02 682.626 L1609.46 682.626 L1608.9 682.626 L1608.34 682.626 L1607.78 682.626 L1607.22 682.626 L1606.66 682.626 L1606.1 682.626 L1605.54 682.626 L1604.98 682.626 L1604.42 682.626 L1603.86 682.626 L1603.3 682.626 L1602.74 682.626 L1602.19 682.626 L1601.63 682.626 L1601.07 682.626 L1600.51 682.626 L1599.95 682.626 L1599.39 682.626 L1598.83 682.626 L1598.27 682.626 L1597.71 682.626 L1597.15 682.626 L1596.59 682.626 L1596.03 682.626 L1595.47 682.626 L1594.92 682.626 L1594.36 682.626 L1593.8 682.626 L1593.24 682.626 L1592.68 682.626 L1592.12 682.626 L1591.56 682.626 L1591 682.626 L1590.44 682.626 L1589.88 682.626 L1589.32 682.626 L1588.76 682.626 L1588.2 682.626 L1587.65 682.626 L1587.09 682.626 L1586.53 682.626 L1585.97 682.626 L1585.41 682.626 L1584.85 682.626 L1584.29 682.626 L1583.73 682.626 L1583.17 682.626 L1582.61 682.626 L1582.05 682.626 L1581.49 682.626 L1580.93 682.626 L1580.37 682.626 L1579.82 682.626 L1579.26 682.626 L1578.7 682.626 L1578.14 682.626 L1577.58 682.626 L1577.02 682.626 L1576.46 682.626 L1575.9 682.626 L1575.34 682.626 L1574.78 682.626 L1574.22 682.626 L1573.66 682.626 L1573.1 682.626 L1572.55 682.626 L1571.99 682.626 L1571.43 682.626 L1570.87 682.626 L1570.31 682.626 L1569.75 682.626 L1569.19 682.626 L1568.63 682.626 L1568.07 682.626 L1567.51 682.626 L1566.95 682.626 L1566.39 682.626 L1565.83 682.626 L1565.28 682.626 L1564.72 682.626 L1564.16 682.626 L1563.6 682.626 L1563.04 682.626 L1562.48 682.626 L1561.92 682.626 L1561.36 682.626 L1560.8 682.626 L1560.24 682.626 L1559.68 682.626 L1559.12 682.626 L1558.56 682.626 L1558 682.626 L1557.45 682.626 L1556.89 682.626 L1556.33 682.626 L1555.77 682.626 L1555.21 682.626 L1554.65 682.626 L1554.09 682.626 L1553.53 682.626 L1552.97 682.626 L1552.41 682.626 L1551.85 682.626 L1551.29 682.626 L1550.73 682.626 L1550.18 682.626 L1549.62 682.626 L1549.06 682.626 L1548.5 682.626 L1547.94 682.626 L1547.38 682.626 L1546.82 682.626 L1546.26 682.626 L1545.7 682.626 L1545.14 682.626 L1544.58 682.626 L1544.02 682.626 L1543.46 682.626 L1542.9 682.626 L1542.35 682.626 L1541.79 682.626 L1541.23 682.626 L1540.67 682.626 L1540.11 682.626 L1539.55 682.626 L1538.99 682.626 L1538.43 682.626 L1537.87 682.626 L1537.31 682.626 L1536.75 682.626 L1536.19 682.626 L1535.63 682.626 L1535.08 682.626 L1534.52 682.626 L1533.96 682.626 L1533.4 682.626 L1532.84 682.626 L1532.28 682.626 L1531.72 682.626 L1531.16 682.626 L1530.6 682.626 L1530.04 682.626 L1529.48 682.626 L1528.92 682.626 L1528.36 682.626 L1527.81 682.626 L1527.25 682.626 L1526.69 682.626 L1526.13 682.626 L1525.57 682.626 L1525.01 682.626 L1524.45 682.626 L1523.89 682.626 L1523.33 682.626 L1522.77 682.626 L1522.21 682.626 L1521.65 682.626 L1521.09 682.626 L1520.53 682.626 L1519.98 682.626 L1519.42 682.626 L1518.86 682.626 L1518.3 682.626 L1517.74 682.626 L1517.18 682.626 L1516.62 682.626 L1516.06 682.626 L1515.5 682.626 L1514.94 682.626 L1514.38 682.626 L1513.82 682.626 L1513.26 682.626 L1512.71 682.626 L1512.15 682.626 L1511.59 682.626 L1511.03 682.626 L1510.47 682.626 L1509.91 682.626 L1509.35 682.626 L1508.79 682.626 L1508.23 682.626 L1507.67 682.626 L1507.11 682.626 L1506.55 682.626 L1505.99 682.626 L1505.44 682.626 L1504.88 682.626 L1504.32 682.626 L1503.76 682.626 L1503.2 682.626 L1502.64 682.626 L1502.08 682.626 L1501.52 682.626 L1500.96 682.626 L1500.4 682.626 L1499.84 682.626 L1499.28 682.626 L1498.72 682.626 L1498.16 682.626 L1497.61 682.626 L1497.05 682.626 L1496.49 682.626 L1495.93 682.626 L1495.37 682.626 L1494.81 682.626 L1494.25 682.626 L1493.69 682.626 L1493.13 682.626 L1492.57 682.626 L1492.01 682.626 L1491.45 682.626 L1490.89 682.626 L1490.34 682.626 L1489.78 682.626 L1489.22 682.626 L1488.66 682.626 L1488.1 682.626 L1487.54 682.626 L1486.98 682.626 L1486.42 682.626 L1485.86 682.626 L1485.3 682.626 L1484.74 682.626 L1484.18 682.626 L1483.62 682.626 L1483.07 682.626 L1482.51 682.626 L1481.95 682.626 L1481.39 682.626 L1480.83 682.626 L1480.27 682.626 L1479.71 682.626 L1479.15 682.626 L1478.59 682.626 L1478.03 682.626 L1477.47 682.626 L1476.91 682.626 L1476.35 682.626 L1475.79 682.626 L1475.24 682.626 L1474.68 682.626 L1474.12 682.626 L1473.56 682.626 L1473 682.626 L1472.44 682.626 L1471.88 682.626 L1471.32 682.626 L1470.76 682.626 L1470.2 682.626 L1469.64 682.626 L1469.08 682.626 L1468.52 682.626 L1467.97 682.626 L1467.41 682.626 L1466.85 682.626 L1466.29 682.626 L1465.73 682.626 L1465.17 682.626 L1464.61 682.626 L1464.05 682.626 L1463.49 682.626 L1462.93 682.626 L1462.37 682.626 L1461.81 682.626 L1461.25 682.626 L1460.7 682.626 L1460.14 682.626 L1459.58 682.626 L1459.02 682.626 L1458.46 682.626 L1457.9 682.626 L1457.34 682.626 L1456.78 682.626 L1456.22 682.626 L1455.66 682.626 L1455.1 682.626 L1454.54 682.626 L1453.98 682.626 L1453.42 682.626 L1452.87 682.626 L1452.31 682.626 L1451.75 682.626 L1451.19 682.626 L1450.63 682.626 L1450.07 682.626 L1449.51 682.626 L1448.95 682.626 L1448.39 682.626 L1447.83 682.626 L1447.27 682.626 L1446.71 682.626 L1446.15 682.626 L1445.6 682.626 L1445.04 682.626 L1444.48 682.626 L1443.92 682.626 L1443.36 682.626 L1442.8 682.626 L1442.24 682.626 L1441.68 682.626 L1441.12 682.626 L1440.56 682.626 L1440 682.626 L1439.44 682.626 L1438.88 682.626 L1438.33 682.626 L1437.77 682.626 L1437.21 682.626 L1436.65 682.626 L1436.09 682.626 L1435.53 682.626 L1434.97 682.626 L1434.41 682.626 L1433.85 682.626 L1433.29 682.626 L1432.73 682.626 L1432.17 682.626 L1431.61 682.626 L1431.05 682.626 L1430.5 682.626 L1429.94 682.626 L1429.38 682.626 L1428.82 682.626 L1428.26 682.626 L1427.7 682.626 L1427.14 682.626 L1426.58 682.626 L1426.02 682.626 L1425.46 682.626 L1424.9 682.626 L1424.34 682.626 L1423.78 682.626 L1423.23 682.626 L1422.67 682.626 L1422.11 682.626 L1421.55 682.626 L1420.99 682.626 L1420.43 682.626 L1419.87 682.626 L1419.31 682.626 L1418.75 682.626 L1418.19 682.626 L1417.63 682.626 L1417.07 682.626 L1416.51 682.626 L1415.95 682.626 L1415.4 682.626 L1414.84 682.626 L1414.28 682.626 L1413.72 682.626 L1413.16 682.626 L1412.6 682.626 L1412.04 682.626 L1411.48 682.626 L1410.92 682.626 L1410.36 682.626 L1409.8 682.626 L1409.24 682.626 L1408.68 682.626 L1408.13 682.626 L1407.57 682.626 L1407.01 682.626 L1406.45 682.626 L1405.89 682.626 L1405.33 682.626 L1404.77 682.626 L1404.21 682.626 L1403.65 682.626 L1403.09 682.626 L1402.53 682.626 L1401.97 682.626 L1401.41 682.626 L1400.86 682.626 L1400.3 682.626 L1399.74 682.626 L1399.18 682.626 L1398.62 682.626 L1398.06 682.626 L1397.5 682.626 L1396.94 682.626 L1396.38 682.626 L1395.82 682.626 L1395.26 682.626 L1394.7 682.626 L1394.14 682.626 L1393.58 682.626 L1393.03 682.626 L1392.47 682.626 L1391.91 682.626 L1391.35 682.626 L1390.79 682.626 L1390.23 682.626 L1389.67 682.626 L1389.11 682.626 L1388.55 682.626 L1387.99 682.626 L1387.43 682.626 L1386.87 682.626 L1386.31 682.626 L1385.76 682.626 L1385.2 682.626 L1384.64 682.626 L1384.08 682.626 L1383.52 682.626 L1382.96 682.626 L1382.4 682.626 L1381.84 682.626 L1381.28 682.626 L1380.72 682.626 L1380.16 682.626 L1379.6 682.626 L1379.04 682.626 L1378.49 682.626 L1377.93 682.626 L1377.37 682.626 L1376.81 682.626 L1376.25 682.626 L1375.69 682.626 L1375.13 682.626 L1374.57 682.626 L1374.01 682.626 L1373.45 682.626 L1372.89 682.626 L1372.33 682.626 L1371.77 682.626 L1371.21 682.626 L1370.66 682.626 L1370.1 682.626 L1369.54 682.626 L1368.98 682.626 L1368.42 682.626 L1367.86 682.626 L1367.3 682.626 L1366.74 682.626 L1366.18 682.626 L1365.62 682.626 L1365.06 682.626 L1364.5 682.626 L1363.94 682.626 L1363.39 682.626 L1362.83 682.626 L1362.27 682.626 L1361.71 682.626 L1361.15 682.626 L1360.59 682.626 L1360.03 682.626 L1359.47 682.626 L1358.91 682.626 L1358.35 682.626 L1357.79 682.626 L1357.23 682.626 L1356.67 682.626 L1356.12 682.626 L1355.56 682.626 L1355 682.626 L1354.44 682.626 L1353.88 682.626 L1353.32 682.626 L1352.76 682.626 L1352.2 682.626 L1351.64 682.626 L1351.08 682.626 L1350.52 682.626 L1349.96 682.626 L1349.4 682.626 L1348.84 682.626 L1348.29 682.626 L1347.73 682.626 L1347.17 682.626 L1346.61 682.626 L1346.05 682.626 L1345.49 682.626 L1344.93 682.626 L1344.37 682.626 L1343.81 682.626 L1343.25 682.626 L1342.69 682.626 L1342.13 682.626 L1341.57 682.626 L1341.02 682.626 L1340.46 682.626 L1339.9 682.626 L1339.34 682.626 L1338.78 682.626 L1338.22 682.626 L1337.66 682.626 L1337.1 682.626 L1336.54 682.626 L1335.98 682.626 L1335.42 682.626 L1334.86 682.626 L1334.3 682.626 L1333.75 682.626 L1333.19 682.626 L1332.63 682.626 L1332.07 682.626 L1331.51 682.626 L1330.95 682.626 L1330.39 682.626 L1329.83 682.626 L1329.27 682.626 L1328.71 682.626 L1328.15 682.626 L1327.59 682.626 L1327.03 682.626 L1326.47 682.626 L1325.92 682.626 L1325.36 682.626 L1324.8 682.626 L1324.24 682.626 L1323.68 682.626 L1323.12 682.626 L1322.56 682.626 L1322 682.626 L1321.44 682.626 L1320.88 682.626 L1320.32 682.626 L1319.76 682.626 L1319.2 682.626 L1318.65 682.626 L1318.09 682.626 L1317.53 682.626 L1316.97 682.626 L1316.41 682.626 L1315.85 682.626 L1315.29 682.626 L1314.73 682.626 L1314.17 682.626 L1313.61 682.626 L1313.05 682.626 L1312.49 682.626 L1311.93 682.626 L1311.38 682.626 L1310.82 682.626 L1310.26 682.626 L1309.7 682.626 L1309.14 682.626 L1308.58 682.626 L1308.02 682.626 L1307.46 682.626 L1306.9 682.626 L1306.34 682.626 L1305.78 682.626 L1305.22 682.626 L1304.66 682.626 L1304.1 682.626 L1303.55 682.626 L1302.99 682.626 L1302.43 682.626 L1301.87 682.626 L1301.31 682.626 L1300.75 682.626 L1300.19 682.626 L1299.63 682.626 L1299.07 682.626 L1298.51 682.626 L1297.95 682.626 L1297.39 682.626 L1296.83 682.626 L1296.28 682.626 L1295.72 682.626 L1295.16 682.626 L1294.6 682.626 L1294.04 682.626 L1293.48 682.626 L1292.92 682.626 L1292.36 682.626 L1291.8 682.626 L1291.24 682.626 L1290.68 682.626 L1290.12 682.626 L1289.56 682.626 L1289 682.626 L1288.45 682.626 L1287.89 682.626 L1287.33 682.626 L1286.77 682.626 L1286.21 682.626 L1285.65 682.626 L1285.09 682.626 L1284.53 682.626 L1283.97 682.626 L1283.41 682.626 L1282.85 682.626 L1282.29 682.626 L1281.73 682.626 L1281.18 682.626 L1280.62 682.626 L1280.06 682.626 L1279.5 682.626 L1278.94 682.626 L1278.38 682.626 L1277.82 682.626 L1277.26 682.626 L1276.7 682.626 L1276.14 682.626 L1275.58 682.626 L1275.02 682.626 L1274.46 682.626 L1273.91 682.626 L1273.35 682.626 L1272.79 682.626 L1272.23 682.626 L1271.67 682.626 L1271.11 682.626 L1270.55 682.626 L1269.99 682.626 L1269.43 682.626 L1268.87 682.626 L1268.31 682.626 L1267.75 682.626 L1267.19 682.626 L1266.63 682.626 L1266.08 682.626 L1265.52 682.626 L1264.96 682.626 L1264.4 682.626 L1263.84 682.626 L1263.28 682.626 L1262.72 682.626 L1262.16 682.626 L1261.6 682.626 L1261.04 682.626 L1260.48 682.626 L1259.92 682.626 L1259.36 682.626 L1258.81 682.626 L1258.25 682.626 L1257.69 682.626 L1257.13 682.626 L1256.57 682.626 L1256.01 682.626 L1255.45 682.626 L1254.89 682.626 L1254.33 682.626 L1253.77 682.626 L1253.21 682.626 L1252.65 682.626 L1252.09 682.626 L1251.54 682.626 L1250.98 682.626 L1250.42 682.626 L1249.86 682.626 L1249.3 682.626 L1248.74 682.626 L1248.18 682.626 L1247.62 682.626 L1247.06 682.626 L1246.5 682.626 L1245.94 682.626 L1245.38 682.626 L1244.82 682.626 L1244.26 682.626 L1243.71 682.626 L1243.15 682.626 L1242.59 682.626 L1242.03 682.626 L1241.47 682.626 L1240.91 682.626 L1240.35 682.626 L1239.79 682.626 L1239.23 682.626 L1238.67 682.626 L1238.11 682.626 L1237.55 682.626 L1236.99 682.626 L1236.44 682.626 L1235.88 682.626 L1235.32 682.626 L1234.76 682.626 L1234.2 682.626 L1233.64 682.626 L1233.08 682.626 L1232.52 682.626 L1231.96 682.626 L1231.4 682.626 L1230.84 682.626 L1230.28 682.626 L1229.72 682.626 L1229.17 682.626 L1228.61 682.626 L1228.05 682.626 L1227.49 682.626 L1226.93 682.626 L1226.37 682.626 L1225.81 682.626 L1225.25 682.626 L1224.69 682.626 L1224.13 682.626 L1223.57 682.626 L1223.01 682.626 L1222.45 682.626 L1221.89 682.626 L1221.34 682.626 L1220.78 682.626 L1220.22 682.626 L1219.66 682.626 L1219.1 682.626 L1218.54 682.626 L1217.98 682.626 L1217.42 682.626 L1216.86 682.626 L1216.3 682.626 L1215.74 682.626 L1215.18 682.626 L1214.62 682.626 L1214.07 682.626 L1213.51 682.626 L1212.95 682.626 L1212.39 682.626 L1211.83 682.626 L1211.27 682.626 L1210.71 682.626 L1210.15 682.626 L1209.59 682.626 L1209.03 682.626 L1208.47 682.626 L1207.91 682.626 L1207.35 682.626 L1206.8 682.626 L1206.24 682.626 L1205.68 682.626 L1205.12 682.626 L1204.56 682.626 L1204 682.626 L1203.44 682.626 L1202.88 682.626 L1202.32 682.626 L1201.76 682.626 L1201.2 682.626 L1200.64 682.626 L1200.08 682.626 L1199.52 682.626 L1198.97 682.626 L1198.41 682.626 L1197.85 682.626 L1197.29 682.626 L1196.73 682.626 L1196.17 682.626 L1195.61 682.626 L1195.05 682.626 L1194.49 682.626 L1193.93 682.626 L1193.37 682.626 L1192.81 682.626 L1192.25 682.626 L1191.7 682.626 L1191.14 682.626 L1190.58 682.626 L1190.02 682.626 L1189.46 682.626 L1188.9 682.626 L1188.34 682.626 L1187.78 682.626 L1187.22 682.626 L1186.66 682.626 L1186.1 682.626 L1185.54 682.626 L1184.98 682.626 L1184.43 682.626 L1183.87 682.626 L1183.31 682.626 L1182.75 682.626 L1182.19 682.626 L1181.63 682.626 L1181.07 682.626 L1180.51 682.626 L1179.95 682.626 L1179.39 682.626 L1178.83 682.626 L1178.27 682.626 L1177.71 682.626 L1177.15 682.626 L1176.6 682.626 L1176.04 682.626 L1175.48 682.626 L1174.92 682.626 L1174.36 682.626 L1173.8 682.626 L1173.24 682.626 L1172.68 682.626 L1172.12 682.626 L1171.56 682.626 L1171 682.626 L1170.44 682.626 L1169.88 682.626 L1169.33 682.626 L1168.77 682.626 L1168.21 682.626 L1167.65 682.626 L1167.09 682.626 L1166.53 682.626 L1165.97 682.626 L1165.41 682.626 L1164.85 682.626 L1164.29 682.626 L1163.73 682.626 L1163.17 682.626 L1162.61 682.626 L1162.05 682.626 L1161.5 682.626 L1160.94 682.626 L1160.38 682.626 L1159.82 682.626 L1159.26 682.626 L1158.7 682.626 L1158.14 682.626 L1157.58 682.626 L1157.02 682.626 L1156.46 682.626 L1155.9 682.626 L1155.34 682.626 L1154.78 682.626 L1154.23 682.626 L1153.67 682.626 L1153.11 682.626 L1152.55 682.626 L1151.99 682.626 L1151.43 682.626 L1150.87 682.626 L1150.31 682.626 L1149.75 682.626 L1149.19 682.626 L1148.63 682.626 L1148.07 682.626 L1147.51 682.626 L1146.96 682.626 L1146.4 682.626 L1145.84 682.626 L1145.28 682.626 L1144.72 682.626 L1144.16 682.626 L1143.6 682.626 L1143.04 682.626 L1142.48 682.626 L1141.92 682.626 L1141.36 682.626 L1140.8 682.626 L1140.24 682.626 L1139.68 682.626 L1139.13 682.626 L1138.57 682.626 L1138.01 682.626 L1137.45 682.626 L1136.89 682.626 L1136.33 682.626 L1135.77 682.626 L1135.21 682.626 L1134.65 682.626 L1134.09 682.626 L1133.53 682.626 L1132.97 682.626 L1132.41 682.626 L1131.86 682.626 L1131.3 682.626 L1130.74 682.626 L1130.18 682.626 L1129.62 682.626 L1129.06 682.626 L1128.5 682.626 L1127.94 682.626 L1127.38 682.626 L1126.82 682.626 L1126.26 682.626 L1125.7 682.626 L1125.14 682.626 L1124.59 682.626 L1124.03 682.626 L1123.47 682.626 L1122.91 682.626 L1122.35 682.626 L1121.79 682.626 L1121.23 682.626 L1120.67 682.626 L1120.11 682.626 L1119.55 682.626 L1118.99 682.626 L1118.43 682.626 L1117.87 682.626 L1117.31 682.626 L1116.76 682.626 L1116.2 682.626 L1115.64 682.626 L1115.08 682.626 L1114.52 682.626 L1113.96 682.626 L1113.4 682.626 L1112.84 682.626 L1112.28 682.626 L1111.72 682.626 L1111.16 682.626 L1110.6 682.626 L1110.04 682.626 L1109.49 682.626 L1108.93 682.626 L1108.37 682.626 L1107.81 682.626 L1107.25 682.626 L1106.69 682.626 L1106.13 682.626 L1105.57 682.626 L1105.01 682.626 L1104.45 682.626 L1103.89 682.626 L1103.33 682.626 L1102.77 682.626 L1102.22 682.626 L1101.66 682.626 L1101.1 682.626 L1100.54 682.626 L1099.98 682.626 L1099.42 682.626 L1098.86 682.626 L1098.3 682.626 L1097.74 682.626 L1097.18 682.626 L1096.62 682.626 L1096.06 682.626 L1095.5 682.626 L1094.94 682.626 L1094.39 682.626 L1093.83 682.626 L1093.27 682.626 L1092.71 682.626 L1092.15 682.626 L1091.59 682.626 L1091.03 682.626 L1090.47 682.626 L1089.91 682.626 L1089.35 682.626 L1088.79 682.626 L1088.23 682.626 L1087.67 682.626 L1087.12 682.626 L1086.56 682.626 L1086 682.626 L1085.44 682.626 L1084.88 682.626 L1084.32 682.626 L1083.76 682.626 L1083.2 682.626 L1082.64 682.626 L1082.08 682.626 L1081.52 682.626 L1080.96 682.626 L1080.4 682.626 L1079.85 682.626 L1079.29 682.626 L1078.73 682.626 L1078.17 682.626 L1077.61 682.626 L1077.05 682.626 L1076.49 682.626 L1075.93 682.626 L1075.37 682.626 L1074.81 682.626 L1074.25 682.626 L1073.69 682.626 L1073.13 682.626 L1072.57 682.626 L1072.02 682.626 L1071.46 682.626 L1070.9 682.626 L1070.34 682.626 L1069.78 682.626 L1069.22 682.626 L1068.66 682.626 L1068.1 682.626 L1067.54 682.626 L1066.98 682.626 L1066.42 682.626 L1065.86 682.626 L1065.3 682.626 L1064.75 682.626 L1064.19 682.626 L1063.63 682.626 L1063.07 682.626 L1062.51 682.626 L1061.95 682.626 L1061.39 682.626 L1060.83 682.626 L1060.27 682.626 L1059.71 682.626 L1059.15 682.626 L1058.59 682.626 L1058.03 682.626 L1057.48 682.626 L1056.92 682.626 L1056.36 682.626 L1055.8 682.626 L1055.24 682.626 L1054.68 682.626 L1054.12 682.626 L1053.56 682.626 L1053 682.626 L1052.44 682.626 L1051.88 682.626 L1051.32 682.626 L1050.76 682.626 L1050.2 682.626 L1049.65 682.626 L1049.09 682.626 L1048.53 682.626 L1047.97 682.626 L1047.41 682.626 L1046.85 682.626 L1046.29 682.626 L1045.73 682.626 L1045.17 682.626 L1044.61 682.626 L1044.05 682.626 L1043.49 682.626 L1042.93 682.626 L1042.38 682.626 L1041.82 682.626 L1041.26 682.626 L1040.7 682.626 L1040.14 682.626 L1039.58 682.626 L1039.02 682.626 L1038.46 682.626 L1037.9 682.626 L1037.34 682.626 L1036.78 682.626 L1036.22 682.626 L1035.66 682.626 L1035.1 682.626 L1034.55 682.626 L1033.99 682.626 L1033.43 682.626 L1032.87 682.626 L1032.31 682.626 L1031.75 682.626 L1031.19 682.626 L1030.63 682.626 L1030.07 682.626 L1029.51 682.626 L1028.95 682.626 L1028.39 682.626 L1027.83 682.626 L1027.28 682.626 L1026.72 682.626 L1026.16 682.626 L1025.6 682.626 L1025.04 682.626 L1024.48 682.626 L1023.92 682.626 L1023.36 682.626 L1022.8 682.626 L1022.24 682.626 L1021.68 682.626 L1021.12 682.626 L1020.56 682.626 L1020.01 682.626 L1019.45 682.626 L1018.89 682.626 L1018.33 682.626 L1017.77 682.626 L1017.21 682.626 L1016.65 682.626 L1016.09 682.626 L1015.53 682.626 L1014.97 682.626 L1014.41 682.626 L1013.85 682.626 L1013.29 682.626 L1012.73 682.626 L1012.18 682.626 L1011.62 682.626 L1011.06 682.626 L1010.5 682.626 L1009.94 682.626 L1009.38 682.626 L1008.82 682.626 L1008.26 682.626 L1007.7 682.626 L1007.14 682.626 L1006.58 682.626 L1006.02 682.626 L1005.46 682.626 L1004.91 682.626 L1004.35 682.626 L1003.79 682.626 L1003.23 682.626 L1002.67 682.626 L1002.11 682.626 L1001.55 682.626 L1000.99 682.626 L1000.43 682.626 L999.872 682.626 L999.313 682.626 L998.754 682.626 L998.194 682.626 L997.635 682.626 L997.076 682.626 L996.517 682.626 L995.957 682.626 L995.398 682.626 L994.839 682.626 L994.28 682.626 L993.72 682.626 L993.161 682.626 L992.602 682.626 L992.043 682.626 L991.483 682.626 L990.924 682.626 L990.365 682.626 L989.806 682.626 L989.246 682.626 L988.687 682.626 L988.128 682.626 L987.569 682.626 L987.009 682.626 L986.45 682.626 L985.891 682.626 L985.332 682.626 L984.772 682.626 L984.213 682.626 L983.654 682.626 L983.095 682.626 L982.535 682.626 L981.976 682.626 L981.417 682.626 L980.858 682.626 L980.298 682.626 L979.739 682.626 L979.18 682.626 L978.621 682.626 L978.061 682.626 L977.502 682.626 L976.943 682.626 L976.384 682.626 L975.824 682.626 L975.265 682.626 L974.706 682.626 L974.147 682.626 L973.587 682.626 L973.028 682.626 L972.469 682.626 L971.91 682.626 L971.35 682.626 L970.791 682.626 L970.232 682.626 L969.673 682.626 L969.113 682.626 L968.554 682.626 L967.995 682.626 L967.436 682.626 L966.876 682.626 L966.317 682.626 L965.758 682.626 L965.199 682.626 L964.639 682.626 L964.08 682.626 L963.521 682.626 L962.962 682.626 L962.402 682.626 L961.843 682.626 L961.284 682.626 L960.725 682.626 L960.165 682.626 L959.606 682.626 L959.047 682.626 L958.488 682.626 L957.928 682.626 L957.369 682.626 L956.81 682.626 L956.251 682.626 L955.691 682.626 L955.132 682.626 L954.573 682.626 L954.014 682.626 L953.454 682.626 L952.895 682.626 L952.336 682.626 L951.777 682.626 L951.217 682.626 L950.658 682.626 L950.099 682.626 L949.54 682.626 L948.98 682.626 L948.421 682.626 L947.862 682.626 L947.303 682.626 L946.743 682.626 L946.184 682.626 L945.625 682.626 L945.066 682.626 L944.506 682.626 L943.947 682.626 L943.388 682.626 L942.829 682.626 L942.269 682.626 L941.71 682.626 L941.151 682.626 L940.592 682.626 L940.032 682.626 L939.473 682.626 L938.914 682.626 L938.355 682.626 L937.795 682.626 L937.236 682.626 L936.677 682.626 L936.118 682.626 L935.558 682.626 L934.999 682.626 L934.44 682.626 L933.881 682.626 L933.321 682.626 L932.762 682.626 L932.203 682.626 L931.644 682.626 L931.084 682.626 L930.525 682.626 L929.966 682.626 L929.406 682.626 L928.847 682.626 L928.288 682.626 L927.729 682.626 L927.169 682.626 L926.61 682.626 L926.051 682.626 L925.492 682.626 L924.932 682.626 L924.373 682.626 L923.814 682.626 L923.255 682.626 L922.695 682.626 L922.136 682.626 L921.577 682.626 L921.018 682.626 L920.458 682.626 L919.899 682.626 L919.34 682.626 L918.781 682.626 L918.221 682.626 L917.662 682.626 L917.103 682.626 L916.544 682.626 L915.984 682.626 L915.425 682.626 L914.866 682.626 L914.307 682.626 L913.747 682.626 L913.188 682.626 L912.629 682.626 L912.07 682.626 L911.51 682.626 L910.951 682.626 L910.392 682.626 L909.833 682.626 L909.273 682.626 L908.714 682.626 L908.155 682.626 L907.596 682.626 L907.036 682.626 L906.477 682.626 L905.918 682.626 L905.359 682.626 L904.799 682.626 L904.24 682.626 L903.681 682.626 L903.122 682.626 L902.562 682.626 L902.003 682.626 L901.444 682.626 L900.885 682.626 L900.325 682.626 L899.766 682.626 L899.207 682.626 L898.648 682.626 L898.088 682.626 L897.529 682.626 L896.97 682.626 L896.411 682.626 L895.851 682.626 L895.292 682.626 L894.733 682.626 L894.174 682.626 L893.614 682.626 L893.055 682.626 L892.496 682.626 L891.937 682.626 L891.377 682.626 L890.818 682.626 L890.259 682.626 L889.7 682.626 L889.14 682.626 L888.581 682.626 L888.022 682.626 L887.463 682.626 L886.903 682.626 L886.344 682.626 L885.785 682.626 L885.226 682.626 L884.666 682.626 L884.107 682.626 L883.548 682.626 L882.989 682.626 L882.429 682.626 L881.87 682.626 L881.311 682.626 L880.752 682.626 L880.192 682.626 L879.633 682.626 L879.074 682.626 L878.515 682.626 L877.955 682.626 L877.396 682.626 L876.837 682.626 L876.278 682.626 L875.718 682.626 L875.159 682.626 L874.6 682.626 L874.041 682.626 L873.481 682.626 L872.922 682.626 L872.363 682.626 L871.804 682.626 L871.244 682.626 L870.685 682.626 L870.126 682.626 L869.567 682.626 L869.007 682.626 L868.448 682.626 L867.889 682.626 L867.33 682.626 L866.77 682.626 L866.211 682.626 L865.652 682.626 L865.093 682.626 L864.533 682.626 L863.974 682.626 L863.415 682.626 L862.856 682.626 L862.296 682.626 L861.737 682.626 L861.178 682.626 L860.619 682.626 L860.059 682.626 L859.5 682.626 L858.941 682.626 L858.382 682.626 L857.822 682.626 L857.263 682.626 L856.704 682.626 L856.145 682.626 L855.585 682.626 L855.026 682.626 L854.467 682.626 L853.908 682.626 L853.348 682.626 L852.789 682.626 L852.23 682.626 L851.671 682.626 L851.111 682.626 L850.552 682.626 L849.993 682.626 L849.434 682.626 L848.874 682.626 L848.315 682.626 L847.756 682.626 L847.197 682.626 L846.637 682.626 L846.078 682.626 L845.519 682.626 L844.96 682.626 L844.4 682.626 L843.841 682.626 L843.282 682.626 L842.723 682.626 L842.163 682.626 L841.604 682.626 L841.045 682.626 L840.486 682.626 L839.926 682.626 L839.367 682.626 L838.808 682.626 L838.249 682.626 L837.689 682.626 L837.13 682.626 L836.571 682.626 L836.012 682.626 L835.452 682.626 L834.893 682.626 L834.334 682.626 L833.775 682.626 L833.215 682.626 L832.656 682.626 L832.097 682.626 L831.538 682.626 L830.978 682.626 L830.419 682.626 L829.86 682.626 L829.301 682.626 L828.741 682.626 L828.182 682.626 L827.623 682.626 L827.064 682.626 L826.504 682.626 L825.945 682.626 L825.386 682.626 L824.827 682.626 L824.267 682.626 L823.708 682.626 L823.149 682.626 L822.59 682.626 L822.03 682.626 L821.471 682.626 L820.912 682.626 L820.353 682.626 L819.793 682.626 L819.234 682.626 L818.675 682.626 L818.116 682.626 L817.556 682.626 L816.997 682.626 L816.438 682.626 L815.879 682.626 L815.319 682.626 L814.76 682.626 L814.201 682.626 L813.642 682.626 L813.082 682.626 L812.523 682.626 L811.964 682.626 L811.405 682.626 L810.845 682.626 L810.286 682.626 L809.727 682.626 L809.168 682.626 L808.608 682.626 L808.049 682.626 L807.49 682.626 L806.931 682.626 L806.371 682.626 L805.812 682.626 L805.253 682.626 L804.693 682.626 L804.134 682.626 L803.575 682.626 L803.016 682.626 L802.456 682.626 L801.897 682.626 L801.338 682.626 L800.779 682.626 L800.219 682.626 L799.66 682.626 L799.101 682.626 L798.542 682.626 L797.982 682.626 L797.423 682.626 L796.864 682.626 L796.305 682.626 L795.745 682.626 L795.186 682.626 L794.627 682.626 L794.068 682.626 L793.508 682.626 L792.949 682.626 L792.39 682.626 L791.831 682.626 L791.271 682.626 L790.712 682.626 L790.153 682.626 L789.594 682.626 L789.034 682.626 L788.475 682.626 L787.916 682.626 L787.357 682.626 L786.797 682.626 L786.238 682.626 L785.679 682.626 L785.12 682.626 L784.56 682.626 L784.001 682.626 L783.442 682.626 L782.883 682.626 L782.323 682.626 L781.764 682.626 L781.205 682.626 L780.646 682.626 L780.086 682.626 L779.527 682.626 L778.968 682.626 L778.409 682.626 L777.849 682.626 L777.29 682.626 L776.731 682.626 L776.172 682.626 L775.612 682.626 L775.053 682.626 L774.494 682.626 L773.935 682.626 L773.375 682.626 L772.816 682.626 L772.257 682.626 L771.698 682.626 L771.138 682.626 L770.579 682.626 L770.02 682.626 L769.461 682.626 L768.901 682.626 L768.342 682.626 L767.783 682.626 L767.224 682.626 L766.664 682.626 L766.105 682.626 L765.546 682.626 L764.987 682.626 L764.427 682.626 L763.868 682.626 L763.309 682.626 L762.75 682.626 L762.19 682.626 L761.631 682.626 L761.072 682.626 L760.513 682.626 L759.953 682.626 L759.394 682.626 L758.835 682.626 L758.276 682.626 L757.716 682.626 L757.157 682.626 L756.598 682.626 L756.039 682.626 L755.479 682.626 L754.92 682.626 L754.361 682.626 L753.802 682.626 L753.242 682.626 L752.683 682.626 L752.124 682.626 L751.565 682.626 L751.005 682.626 L750.446 682.626 L749.887 682.626 L749.328 682.626 L748.768 682.626 L748.209 682.626 L747.65 682.626 L747.091 682.626 L746.531 682.626 L745.972 682.626 L745.413 682.626 L744.854 682.626 L744.294 682.626 L743.735 682.626 L743.176 682.626 L742.617 682.626 L742.057 682.626 L741.498 682.626 L740.939 682.626 L740.38 682.626 L739.82 682.626 L739.261 682.626 L738.702 682.626 L738.143 682.626 L737.583 682.626 L737.024 682.626 L736.465 682.626 L735.906 682.626 L735.346 682.626 L734.787 682.626 L734.228 682.626 L733.669 682.626 L733.109 682.626 L732.55 682.626 L731.991 682.626 L731.432 682.626 L730.872 682.626 L730.313 682.626 L729.754 682.626 L729.195 682.626 L728.635 682.626 L728.076 682.626 L727.517 682.626 L726.958 682.626 L726.398 682.626 L725.839 682.626 L725.28 682.626 L724.721 682.626 L724.161 682.626 L723.602 682.626 L723.043 682.626 L722.484 682.626 L721.924 682.626 L721.365 682.626 L720.806 682.626 L720.247 682.626  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.914 720.806,686.914 721.365,686.914 721.924,686.914 722.484,686.914 723.043,686.914 723.602,686.914 724.161,686.914 724.721,686.914 725.28,686.914 725.839,686.914 726.398,686.914 726.958,686.914 727.517,686.914 728.076,686.914 728.635,686.914 729.195,686.914 729.754,686.914 730.313,686.914 730.872,686.914 731.432,686.914 731.991,686.914 732.55,686.914 733.109,686.914 733.669,686.914 734.228,686.914 734.787,686.914 735.346,686.914 735.906,686.914 736.465,686.914 737.024,686.914 737.583,686.914 738.143,686.914 738.702,686.914 739.261,686.914 739.82,686.914 740.38,686.914 740.939,686.914 741.498,686.914 742.057,686.914 742.617,686.914 743.176,686.914 743.735,686.914 744.294,686.914 744.854,686.914 745.413,686.914 745.972,686.914 746.531,686.914 747.091,686.914 747.65,686.914 748.209,686.914 748.768,686.914 749.328,686.914 749.887,686.914 750.446,686.914 751.005,686.914 751.565,686.914 752.124,686.914 752.683,686.914 753.242,686.914 753.802,686.914 754.361,686.914 754.92,686.914 755.479,686.914 756.039,686.914 756.598,686.914 757.157,686.914 757.716,686.914 758.276,686.914 758.835,686.914 759.394,686.914 759.953,686.914 760.513,686.914 761.072,686.914 761.631,686.914 762.19,686.914 762.75,686.914 763.309,686.914 763.868,686.914 764.427,686.914 764.987,686.914 765.546,686.914 766.105,686.914 766.664,686.914 767.224,686.914 767.783,686.914 768.342,686.914 768.901,686.914 769.461,686.914 770.02,686.914 770.579,686.914 771.138,686.914 771.698,686.914 772.257,686.914 772.816,686.914 773.375,686.914 773.935,686.914 774.494,686.914 775.053,686.914 775.612,686.914 776.172,686.914 776.731,686.914 777.29,686.914 777.849,686.914 778.409,686.914 778.968,686.914 779.527,686.914 780.086,686.914 780.646,686.914 781.205,686.914 781.764,686.914 782.323,686.914 782.883,686.914 783.442,686.914 784.001,686.914 784.56,686.914 785.12,686.914 785.679,686.914 786.238,686.914 786.797,686.914 787.357,686.914 787.916,686.914 788.475,686.914 789.034,686.914 789.594,686.914 790.153,686.914 790.712,686.914 791.271,686.914 791.831,686.914 792.39,686.914 792.949,686.914 793.508,686.914 794.068,686.914 794.627,686.914 795.186,686.914 795.745,686.914 796.305,686.914 796.864,686.914 797.423,686.914 797.982,686.914 798.542,686.914 799.101,686.914 799.66,686.914 800.219,686.914 800.779,686.914 801.338,686.914 801.897,686.914 802.456,686.914 803.016,686.914 803.575,686.914 804.134,686.914 804.693,686.914 805.253,686.914 805.812,686.914 806.371,686.914 806.931,686.914 807.49,686.914 808.049,686.914 808.608,686.914 809.168,686.914 809.727,686.914 810.286,686.914 810.845,686.914 811.405,686.914 811.964,686.914 812.523,686.914 813.082,686.914 813.642,686.914 814.201,686.914 814.76,686.914 815.319,686.914 815.879,686.914 816.438,686.914 816.997,686.914 817.556,686.914 818.116,686.914 818.675,686.914 819.234,686.914 819.793,686.914 820.353,686.914 820.912,686.914 821.471,686.914 822.03,686.914 822.59,686.914 823.149,686.914 823.708,686.914 824.267,686.914 824.827,686.914 825.386,686.914 825.945,686.914 826.504,686.914 827.064,686.914 827.623,686.914 828.182,686.914 828.741,686.914 829.301,686.914 829.86,686.914 830.419,686.914 830.978,686.914 831.538,686.914 832.097,686.914 832.656,686.914 833.215,686.914 833.775,686.914 834.334,686.914 834.893,686.914 835.452,686.914 836.012,686.914 836.571,686.914 837.13,686.914 837.689,686.914 838.249,686.914 838.808,686.914 839.367,686.914 839.926,686.914 840.486,686.914 841.045,686.914 841.604,686.914 842.163,686.914 842.723,686.914 843.282,686.914 843.841,686.914 844.4,686.914 844.96,686.914 845.519,686.914 846.078,686.914 846.637,686.914 847.197,686.914 847.756,686.914 848.315,686.914 848.874,686.914 849.434,686.914 849.993,686.914 850.552,686.914 851.111,686.914 851.671,686.914 852.23,686.914 852.789,686.914 853.348,686.914 853.908,686.914 854.467,686.914 855.026,686.914 855.585,686.914 856.145,686.914 856.704,686.914 857.263,686.914 857.822,686.914 858.382,686.914 858.941,686.914 859.5,686.914 860.059,686.914 860.619,686.914 861.178,686.914 861.737,686.914 862.296,686.914 862.856,686.914 863.415,686.914 863.974,686.914 864.533,686.914 865.093,686.914 865.652,686.914 866.211,686.914 866.77,686.914 867.33,686.914 867.889,686.914 868.448,686.914 869.007,686.914 869.567,686.914 870.126,686.914 870.685,686.914 871.244,686.914 871.804,686.914 872.363,686.914 872.922,686.914 873.481,686.914 874.041,686.914 874.6,686.914 875.159,686.914 875.718,686.914 876.278,686.914 876.837,686.914 877.396,686.914 877.955,686.914 878.515,686.914 879.074,686.914 879.633,686.914 880.192,686.914 880.752,686.914 881.311,686.914 881.87,686.914 882.429,686.914 882.989,686.914 883.548,686.914 884.107,686.914 884.666,686.914 885.226,686.914 885.785,686.914 886.344,686.914 886.903,686.914 887.463,686.914 888.022,686.914 888.581,686.914 889.14,686.914 889.7,686.914 890.259,686.914 890.818,686.914 891.377,686.914 891.937,686.914 892.496,686.914 893.055,686.914 893.614,686.914 894.174,686.914 894.733,686.914 895.292,686.914 895.851,686.914 896.411,686.914 896.97,686.914 897.529,686.914 898.088,686.914 898.648,686.914 899.207,686.914 899.766,686.914 900.325,686.914 900.885,686.914 901.444,686.914 902.003,686.914 902.562,686.914 903.122,686.914 903.681,686.914 904.24,686.914 904.799,686.914 905.359,686.914 905.918,686.914 906.477,686.914 907.036,686.914 907.596,686.914 908.155,686.914 908.714,686.914 909.273,686.914 909.833,686.914 910.392,686.914 910.951,686.914 911.51,686.914 912.07,686.914 912.629,686.914 913.188,686.914 913.747,686.914 914.307,686.914 914.866,686.914 915.425,686.914 915.984,686.914 916.544,686.914 917.103,686.914 917.662,686.914 918.221,686.914 918.781,686.914 919.34,686.914 919.899,686.914 920.458,686.914 921.018,686.914 921.577,686.914 922.136,686.914 922.695,686.914 923.255,686.914 923.814,686.914 924.373,686.914 924.932,686.914 925.492,686.914 926.051,686.914 926.61,686.914 927.169,686.914 927.729,686.914 928.288,686.914 928.847,686.914 929.406,686.914 929.966,686.914 930.525,686.914 931.084,686.914 931.644,686.914 932.203,686.914 932.762,686.914 933.321,686.914 933.881,686.914 934.44,686.914 934.999,686.914 935.558,686.914 936.118,686.914 936.677,686.914 937.236,686.914 937.795,686.914 938.355,686.914 938.914,686.914 939.473,686.914 940.032,686.914 940.592,686.914 941.151,686.914 941.71,686.914 942.269,686.914 942.829,686.914 943.388,686.914 943.947,686.914 944.506,686.914 945.066,686.914 945.625,686.914 946.184,686.914 946.743,686.914 947.303,686.914 947.862,686.914 948.421,686.914 948.98,686.914 949.54,686.914 950.099,686.914 950.658,686.914 951.217,686.914 951.777,686.914 952.336,686.914 952.895,686.914 953.454,686.914 954.014,686.914 954.573,686.914 955.132,686.914 955.691,686.914 956.251,686.914 956.81,686.914 957.369,686.914 957.928,686.914 958.488,686.914 959.047,686.914 959.606,686.914 960.165,686.914 960.725,686.914 961.284,686.914 961.843,686.914 962.402,686.914 962.962,686.914 963.521,686.914 964.08,686.914 964.639,686.914 965.199,686.914 965.758,686.914 966.317,686.914 966.876,686.914 967.436,686.914 967.995,686.914 968.554,686.914 969.113,686.914 969.673,686.914 970.232,686.914 970.791,686.914 971.35,686.914 971.91,686.914 972.469,686.914 973.028,686.914 973.587,686.914 974.147,686.914 974.706,686.914 975.265,686.914 975.824,686.914 976.384,686.914 976.943,686.914 977.502,686.914 978.061,686.914 978.621,686.914 979.18,686.914 979.739,686.914 980.298,686.914 980.858,686.914 981.417,686.914 981.976,686.914 982.535,686.914 983.095,686.914 983.654,686.914 984.213,686.914 984.772,686.914 985.332,686.914 985.891,686.914 986.45,686.914 987.009,686.914 987.569,686.914 988.128,686.914 988.687,686.914 989.246,686.914 989.806,686.914 990.365,686.914 990.924,686.914 991.483,686.914 992.043,686.914 992.602,686.914 993.161,686.914 993.72,686.914 994.28,686.914 994.839,686.914 995.398,686.914 995.957,686.914 996.517,686.914 997.076,686.914 997.635,686.914 998.194,686.914 998.754,686.914 999.313,686.914 999.872,686.914 1000.43,686.914 1000.99,686.914 1001.55,686.914 1002.11,686.914 1002.67,686.914 1003.23,686.914 1003.79,686.914 1004.35,686.914 1004.91,686.914 1005.46,686.914 1006.02,686.914 1006.58,686.914 1007.14,686.914 1007.7,686.914 1008.26,686.914 1008.82,686.914 1009.38,686.914 1009.94,686.914 1010.5,686.914 1011.06,686.914 1011.62,686.914 1012.18,686.914 1012.73,686.914 1013.29,686.914 1013.85,686.914 1014.41,686.914 1014.97,686.914 1015.53,686.914 1016.09,686.914 1016.65,686.914 1017.21,686.914 1017.77,686.914 1018.33,686.914 1018.89,686.914 1019.45,686.914 1020.01,686.914 1020.56,686.914 1021.12,686.914 1021.68,686.914 1022.24,686.914 1022.8,686.914 1023.36,686.914 1023.92,686.914 1024.48,686.914 1025.04,686.914 1025.6,686.914 1026.16,686.914 1026.72,686.914 1027.28,686.914 1027.83,686.914 1028.39,686.914 1028.95,686.914 1029.51,686.914 1030.07,686.914 1030.63,686.914 1031.19,686.914 1031.75,686.914 1032.31,686.914 1032.87,686.914 1033.43,686.914 1033.99,686.914 1034.55,686.914 1035.1,686.914 1035.66,686.914 1036.22,686.914 1036.78,686.914 1037.34,686.914 1037.9,686.914 1038.46,686.914 1039.02,686.914 1039.58,686.914 1040.14,686.914 1040.7,686.914 1041.26,686.914 1041.82,686.914 1042.38,686.914 1042.93,686.914 1043.49,686.914 1044.05,686.914 1044.61,686.914 1045.17,686.914 1045.73,686.914 1046.29,686.914 1046.85,686.914 1047.41,686.914 1047.97,686.914 1048.53,686.914 1049.09,686.914 1049.65,686.914 1050.2,686.914 1050.76,686.914 1051.32,686.914 1051.88,686.914 1052.44,686.914 1053,686.914 1053.56,686.914 1054.12,686.914 1054.68,686.914 1055.24,686.914 1055.8,686.914 1056.36,686.914 1056.92,686.914 1057.48,686.914 1058.03,686.914 1058.59,686.914 1059.15,686.914 1059.71,686.914 1060.27,686.914 1060.83,686.914 1061.39,686.914 1061.95,686.914 1062.51,686.914 1063.07,686.914 1063.63,686.914 1064.19,686.914 1064.75,686.914 1065.3,686.914 1065.86,686.914 1066.42,686.914 1066.98,686.914 1067.54,686.914 1068.1,686.914 1068.66,686.914 1069.22,686.914 1069.78,686.914 1070.34,686.914 1070.9,686.914 1071.46,686.914 1072.02,686.914 1072.57,686.914 1073.13,686.914 1073.69,686.914 1074.25,686.914 1074.81,686.914 1075.37,686.914 1075.93,686.914 1076.49,686.914 1077.05,686.914 1077.61,686.914 1078.17,686.914 1078.73,686.914 1079.29,686.914 1079.85,686.914 1080.4,686.914 1080.96,686.914 1081.52,686.914 1082.08,686.914 1082.64,686.914 1083.2,686.914 1083.76,686.914 1084.32,686.914 1084.88,686.914 1085.44,686.914 1086,686.914 1086.56,686.914 1087.12,686.914 1087.67,686.914 1088.23,686.914 1088.79,686.914 1089.35,686.914 1089.91,686.914 1090.47,686.914 1091.03,686.914 1091.59,686.914 1092.15,686.914 1092.71,686.914 1093.27,686.914 1093.83,686.914 1094.39,686.914 1094.94,686.914 1095.5,686.914 1096.06,686.914 1096.62,686.914 1097.18,686.914 1097.74,686.914 1098.3,686.914 1098.86,686.914 1099.42,686.914 1099.98,686.914 1100.54,686.914 1101.1,686.914 1101.66,686.914 1102.22,686.914 1102.77,686.914 1103.33,686.914 1103.89,686.914 1104.45,686.914 1105.01,686.914 1105.57,686.914 1106.13,686.914 1106.69,686.914 1107.25,686.914 1107.81,686.914 1108.37,686.914 1108.93,686.914 1109.49,686.914 1110.04,686.914 1110.6,686.914 1111.16,686.914 1111.72,686.914 1112.28,686.914 1112.84,686.914 1113.4,686.914 1113.96,686.914 1114.52,686.914 1115.08,686.914 1115.64,686.914 1116.2,686.914 1116.76,686.914 1117.31,686.914 1117.87,686.914 1118.43,686.914 1118.99,686.914 1119.55,686.914 1120.11,686.914 1120.67,686.914 1121.23,686.914 1121.79,686.914 1122.35,686.914 1122.91,686.914 1123.47,686.914 1124.03,686.914 1124.59,686.914 1125.14,686.914 1125.7,686.914 1126.26,686.914 1126.82,686.914 1127.38,686.914 1127.94,686.914 1128.5,686.914 1129.06,686.914 1129.62,686.914 1130.18,686.914 1130.74,686.914 1131.3,686.914 1131.86,686.914 1132.41,686.914 1132.97,686.914 1133.53,686.914 1134.09,686.914 1134.65,686.914 1135.21,686.914 1135.77,686.914 1136.33,686.914 1136.89,686.914 1137.45,686.914 1138.01,686.914 1138.57,686.914 1139.13,686.914 1139.68,686.914 1140.24,686.914 1140.8,686.914 1141.36,686.914 1141.92,686.914 1142.48,686.914 1143.04,686.914 1143.6,686.914 1144.16,686.914 1144.72,686.914 1145.28,686.914 1145.84,686.914 1146.4,686.914 1146.96,686.914 1147.51,686.914 1148.07,686.914 1148.63,686.914 1149.19,686.914 1149.75,686.914 1150.31,686.914 1150.87,686.914 1151.43,686.914 1151.99,686.914 1152.55,686.914 1153.11,686.914 1153.67,686.914 1154.23,686.914 1154.78,686.914 1155.34,686.914 1155.9,686.914 1156.46,686.914 1157.02,686.914 1157.58,686.914 1158.14,686.914 1158.7,686.914 1159.26,686.914 1159.82,686.914 1160.38,686.914 1160.94,686.914 1161.5,686.914 1162.05,686.914 1162.61,686.914 1163.17,686.914 1163.73,686.914 1164.29,686.914 1164.85,686.914 1165.41,686.914 1165.97,686.914 1166.53,686.914 1167.09,686.914 1167.65,686.914 1168.21,686.914 1168.77,686.914 1169.33,686.914 1169.88,686.914 1170.44,686.914 1171,686.914 1171.56,686.914 1172.12,686.914 1172.68,686.914 1173.24,686.914 1173.8,686.914 1174.36,686.914 1174.92,686.914 1175.48,686.914 1176.04,686.914 1176.6,686.914 1177.15,686.914 1177.71,686.914 1178.27,686.914 1178.83,686.914 1179.39,686.914 1179.95,686.914 1180.51,686.914 1181.07,686.914 1181.63,686.914 1182.19,686.914 1182.75,686.914 1183.31,686.914 1183.87,686.914 1184.43,686.914 1184.98,686.914 1185.54,686.914 1186.1,686.914 1186.66,686.914 1187.22,686.914 1187.78,686.914 1188.34,686.914 1188.9,686.914 1189.46,686.914 1190.02,686.914 1190.58,686.914 1191.14,686.914 1191.7,686.914 1192.25,686.914 1192.81,686.914 1193.37,686.914 1193.93,686.914 1194.49,686.914 1195.05,686.914 1195.61,686.914 1196.17,686.914 1196.73,686.914 1197.29,686.914 1197.85,686.914 1198.41,686.914 1198.97,686.914 1199.52,686.914 1200.08,686.914 1200.64,686.914 1201.2,686.914 1201.76,686.914 1202.32,686.914 1202.88,686.914 1203.44,686.914 1204,686.914 1204.56,686.914 1205.12,686.914 1205.68,686.914 1206.24,686.914 1206.8,686.914 1207.35,686.914 1207.91,686.914 1208.47,686.914 1209.03,686.914 1209.59,686.914 1210.15,686.914 1210.71,686.914 1211.27,686.914 1211.83,686.914 1212.39,686.914 1212.95,686.914 1213.51,686.914 1214.07,686.914 1214.62,686.914 1215.18,686.914 1215.74,686.914 1216.3,686.914 1216.86,686.914 1217.42,686.914 1217.98,686.914 1218.54,686.914 1219.1,686.914 1219.66,686.914 1220.22,686.914 1220.78,686.914 1221.34,686.914 1221.89,686.914 1222.45,686.914 1223.01,686.914 1223.57,686.914 1224.13,686.914 1224.69,686.914 1225.25,686.914 1225.81,686.914 1226.37,686.914 1226.93,686.914 1227.49,686.914 1228.05,686.914 1228.61,686.914 1229.17,686.914 1229.72,686.914 1230.28,686.914 1230.84,686.914 1231.4,686.914 1231.96,686.914 1232.52,686.914 1233.08,686.914 1233.64,686.914 1234.2,686.914 1234.76,686.914 1235.32,686.914 1235.88,686.914 1236.44,686.914 1236.99,686.914 1237.55,686.914 1238.11,686.914 1238.67,686.914 1239.23,686.914 1239.79,686.914 1240.35,686.914 1240.91,686.914 1241.47,686.914 1242.03,686.914 1242.59,686.914 1243.15,686.914 1243.71,686.914 1244.26,686.914 1244.82,686.914 1245.38,686.914 1245.94,686.914 1246.5,686.914 1247.06,686.914 1247.62,686.914 1248.18,686.914 1248.74,686.914 1249.3,686.914 1249.86,686.914 1250.42,686.914 1250.98,686.914 1251.54,686.914 1252.09,686.914 1252.65,686.914 1253.21,686.914 1253.77,686.914 1254.33,686.914 1254.89,686.914 1255.45,686.914 1256.01,686.914 1256.57,686.914 1257.13,686.914 1257.69,686.914 1258.25,686.914 1258.81,686.914 1259.36,686.914 1259.92,686.914 1260.48,686.914 1261.04,686.914 1261.6,686.914 1262.16,686.914 1262.72,686.914 1263.28,686.914 1263.84,686.914 1264.4,686.914 1264.96,686.914 1265.52,686.914 1266.08,686.914 1266.63,686.914 1267.19,686.914 1267.75,686.914 1268.31,686.914 1268.87,686.914 1269.43,686.914 1269.99,686.914 1270.55,686.914 1271.11,686.914 1271.67,686.914 1272.23,686.914 1272.79,686.914 1273.35,686.914 1273.91,686.914 1274.46,686.914 1275.02,686.914 1275.58,686.914 1276.14,686.914 1276.7,686.914 1277.26,686.914 1277.82,686.914 1278.38,686.914 1278.94,686.914 1279.5,686.914 1280.06,686.914 1280.62,686.914 1281.18,686.914 1281.73,686.914 1282.29,686.914 1282.85,686.914 1283.41,686.914 1283.97,686.914 1284.53,686.914 1285.09,686.914 1285.65,686.914 1286.21,686.914 1286.77,686.914 1287.33,686.914 1287.89,686.914 1288.45,686.914 1289,686.914 1289.56,686.914 1290.12,686.914 1290.68,686.914 1291.24,686.914 1291.8,686.914 1292.36,686.914 1292.92,686.914 1293.48,686.914 1294.04,686.914 1294.6,686.914 1295.16,686.914 1295.72,686.914 1296.28,686.914 1296.83,686.914 1297.39,686.914 1297.95,686.914 1298.51,686.914 1299.07,686.914 1299.63,686.914 1300.19,686.914 1300.75,686.914 1301.31,686.914 1301.87,686.914 1302.43,686.914 1302.99,686.914 1303.55,686.914 1304.1,686.914 1304.66,686.914 1305.22,686.914 1305.78,686.914 1306.34,686.914 1306.9,686.914 1307.46,686.914 1308.02,686.914 1308.58,686.914 1309.14,686.914 1309.7,686.914 1310.26,686.914 1310.82,686.914 1311.38,686.914 1311.93,686.914 1312.49,686.914 1313.05,686.914 1313.61,686.914 1314.17,686.914 1314.73,686.914 1315.29,686.914 1315.85,686.914 1316.41,686.914 1316.97,686.914 1317.53,686.914 1318.09,686.914 1318.65,686.914 1319.2,686.914 1319.76,686.914 1320.32,686.914 1320.88,686.914 1321.44,686.914 1322,686.914 1322.56,686.914 1323.12,686.914 1323.68,686.914 1324.24,686.914 1324.8,686.914 1325.36,686.914 1325.92,686.914 1326.47,686.914 1327.03,686.914 1327.59,686.914 1328.15,686.914 1328.71,686.914 1329.27,686.914 1329.83,686.914 1330.39,686.914 1330.95,686.914 1331.51,686.914 1332.07,686.914 1332.63,686.914 1333.19,686.914 1333.75,686.914 1334.3,686.914 1334.86,686.914 1335.42,686.914 1335.98,686.914 1336.54,686.914 1337.1,686.914 1337.66,686.914 1338.22,686.914 1338.78,686.914 1339.34,686.914 1339.9,686.914 1340.46,686.914 1341.02,686.914 1341.57,686.914 1342.13,686.914 1342.69,686.914 1343.25,686.914 1343.81,686.914 1344.37,686.914 1344.93,686.914 1345.49,686.914 1346.05,686.914 1346.61,686.914 1347.17,686.914 1347.73,686.914 1348.29,686.914 1348.84,686.914 1349.4,686.914 1349.96,686.914 1350.52,686.914 1351.08,686.914 1351.64,686.914 1352.2,686.914 1352.76,686.914 1353.32,686.914 1353.88,686.914 1354.44,686.914 1355,686.914 1355.56,686.914 1356.12,686.914 1356.67,686.914 1357.23,686.914 1357.79,686.914 1358.35,686.914 1358.91,686.914 1359.47,686.914 1360.03,686.914 1360.59,686.914 1361.15,686.914 1361.71,686.914 1362.27,686.914 1362.83,686.914 1363.39,686.914 1363.94,686.914 1364.5,686.914 1365.06,686.914 1365.62,686.914 1366.18,686.914 1366.74,686.914 1367.3,686.914 1367.86,686.914 1368.42,686.914 1368.98,686.914 1369.54,686.914 1370.1,686.914 1370.66,686.914 1371.21,686.914 1371.77,686.914 1372.33,686.914 1372.89,686.914 1373.45,686.914 1374.01,686.914 1374.57,686.914 1375.13,686.914 1375.69,686.914 1376.25,686.914 1376.81,686.914 1377.37,686.914 1377.93,686.914 1378.49,686.914 1379.04,686.914 1379.6,686.914 1380.16,686.914 1380.72,686.914 1381.28,686.914 1381.84,686.914 1382.4,686.914 1382.96,686.914 1383.52,686.914 1384.08,686.914 1384.64,686.914 1385.2,686.914 1385.76,686.914 1386.31,686.914 1386.87,686.914 1387.43,686.914 1387.99,686.914 1388.55,686.914 1389.11,686.914 1389.67,686.914 1390.23,686.914 1390.79,686.914 1391.35,686.914 1391.91,686.914 1392.47,686.914 1393.03,686.914 1393.58,686.914 1394.14,686.914 1394.7,686.914 1395.26,686.914 1395.82,686.914 1396.38,686.914 1396.94,686.914 1397.5,686.914 1398.06,686.914 1398.62,686.914 1399.18,686.914 1399.74,686.914 1400.3,686.914 1400.86,686.914 1401.41,686.914 1401.97,686.914 1402.53,686.914 1403.09,686.914 1403.65,686.914 1404.21,686.914 1404.77,686.914 1405.33,686.914 1405.89,686.914 1406.45,686.914 1407.01,686.914 1407.57,686.914 1408.13,686.914 1408.68,686.914 1409.24,686.914 1409.8,686.914 1410.36,686.914 1410.92,686.914 1411.48,686.914 1412.04,686.914 1412.6,686.914 1413.16,686.914 1413.72,686.914 1414.28,686.914 1414.84,686.914 1415.4,686.914 1415.95,686.914 1416.51,686.914 1417.07,686.914 1417.63,686.914 1418.19,686.914 1418.75,686.914 1419.31,686.914 1419.87,686.914 1420.43,686.914 1420.99,686.914 1421.55,686.914 1422.11,686.914 1422.67,686.914 1423.23,686.914 1423.78,686.914 1424.34,686.914 1424.9,686.914 1425.46,686.914 1426.02,686.914 1426.58,686.914 1427.14,686.914 1427.7,686.914 1428.26,686.914 1428.82,686.914 1429.38,686.914 1429.94,686.914 1430.5,686.914 1431.05,686.914 1431.61,686.914 1432.17,686.914 1432.73,686.914 1433.29,686.914 1433.85,686.914 1434.41,686.914 1434.97,686.914 1435.53,686.914 1436.09,686.914 1436.65,686.914 1437.21,686.914 1437.77,686.914 1438.33,686.914 1438.88,686.914 1439.44,686.914 1440,686.914 1440.56,686.914 1441.12,686.914 1441.68,686.914 1442.24,686.914 1442.8,686.914 1443.36,686.914 1443.92,686.914 1444.48,686.914 1445.04,686.914 1445.6,686.914 1446.15,686.914 1446.71,686.914 1447.27,686.914 1447.83,686.914 1448.39,686.914 1448.95,686.914 1449.51,686.914 1450.07,686.914 1450.63,686.914 1451.19,686.914 1451.75,686.914 1452.31,686.914 1452.87,686.914 1453.42,686.914 1453.98,686.914 1454.54,686.914 1455.1,686.914 1455.66,686.914 1456.22,686.914 1456.78,686.914 1457.34,686.914 1457.9,686.914 1458.46,686.914 1459.02,686.914 1459.58,686.914 1460.14,686.914 1460.7,686.914 1461.25,686.914 1461.81,686.914 1462.37,686.914 1462.93,686.914 1463.49,686.914 1464.05,686.914 1464.61,686.914 1465.17,686.914 1465.73,686.914 1466.29,686.914 1466.85,686.914 1467.41,686.914 1467.97,686.914 1468.52,686.914 1469.08,686.914 1469.64,686.914 1470.2,686.914 1470.76,686.914 1471.32,686.914 1471.88,686.914 1472.44,686.914 1473,686.914 1473.56,686.914 1474.12,686.914 1474.68,686.914 1475.24,686.914 1475.79,686.914 1476.35,686.914 1476.91,686.914 1477.47,686.914 1478.03,686.914 1478.59,686.914 1479.15,686.914 1479.71,686.914 1480.27,686.914 1480.83,686.914 1481.39,686.914 1481.95,686.914 1482.51,686.914 1483.07,686.914 1483.62,686.914 1484.18,686.914 1484.74,686.914 1485.3,686.914 1485.86,686.914 1486.42,686.914 1486.98,686.914 1487.54,686.914 1488.1,686.914 1488.66,686.914 1489.22,686.914 1489.78,686.914 1490.34,686.914 1490.89,686.914 1491.45,686.914 1492.01,686.914 1492.57,686.914 1493.13,686.914 1493.69,686.914 1494.25,686.914 1494.81,686.914 1495.37,686.914 1495.93,686.914 1496.49,686.914 1497.05,686.914 1497.61,686.914 1498.16,686.914 1498.72,686.914 1499.28,686.914 1499.84,686.914 1500.4,686.914 1500.96,686.914 1501.52,686.914 1502.08,686.914 1502.64,686.914 1503.2,686.914 1503.76,686.914 1504.32,686.914 1504.88,686.914 1505.44,686.914 1505.99,686.914 1506.55,686.914 1507.11,686.914 1507.67,686.914 1508.23,686.914 1508.79,686.914 1509.35,686.914 1509.91,686.914 1510.47,686.914 1511.03,686.914 1511.59,686.914 1512.15,686.914 1512.71,686.914 1513.26,686.914 1513.82,686.914 1514.38,686.914 1514.94,686.914 1515.5,686.914 1516.06,686.914 1516.62,686.914 1517.18,686.914 1517.74,686.914 1518.3,686.914 1518.86,686.914 1519.42,686.914 1519.98,686.914 1520.53,686.914 1521.09,686.914 1521.65,686.914 1522.21,686.914 1522.77,686.914 1523.33,686.914 1523.89,686.914 1524.45,686.914 1525.01,686.914 1525.57,686.914 1526.13,686.914 1526.69,686.914 1527.25,686.914 1527.81,686.914 1528.36,686.914 1528.92,686.914 1529.48,686.914 1530.04,686.914 1530.6,686.914 1531.16,686.914 1531.72,686.914 1532.28,686.914 1532.84,686.914 1533.4,686.914 1533.96,686.914 1534.52,686.914 1535.08,686.914 1535.63,686.914 1536.19,686.914 1536.75,686.914 1537.31,686.914 1537.87,686.914 1538.43,686.914 1538.99,686.914 1539.55,686.914 1540.11,686.914 1540.67,686.914 1541.23,686.914 1541.79,686.914 1542.35,686.914 1542.9,686.914 1543.46,686.914 1544.02,686.914 1544.58,686.914 1545.14,686.914 1545.7,686.914 1546.26,686.914 1546.82,686.914 1547.38,686.914 1547.94,686.914 1548.5,686.914 1549.06,686.914 1549.62,686.914 1550.18,686.914 1550.73,686.914 1551.29,686.914 1551.85,686.914 1552.41,686.914 1552.97,686.914 1553.53,686.914 1554.09,686.914 1554.65,686.914 1555.21,686.914 1555.77,686.914 1556.33,686.914 1556.89,686.914 1557.45,686.914 1558,686.914 1558.56,686.914 1559.12,686.914 1559.68,686.914 1560.24,686.914 1560.8,686.914 1561.36,686.914 1561.92,686.914 1562.48,686.914 1563.04,686.914 1563.6,686.914 1564.16,686.914 1564.72,686.914 1565.28,686.914 1565.83,686.914 1566.39,686.914 1566.95,686.914 1567.51,686.914 1568.07,686.914 1568.63,686.914 1569.19,686.914 1569.75,686.914 1570.31,686.914 1570.87,686.914 1571.43,686.914 1571.99,686.914 1572.55,686.914 1573.1,686.914 1573.66,686.914 1574.22,686.914 1574.78,686.914 1575.34,686.914 1575.9,686.914 1576.46,686.914 1577.02,686.914 1577.58,686.914 1578.14,686.914 1578.7,686.914 1579.26,686.914 1579.82,686.914 1580.37,686.914 1580.93,686.914 1581.49,686.914 1582.05,686.914 1582.61,686.914 1583.17,686.914 1583.73,686.914 1584.29,686.914 1584.85,686.914 1585.41,686.914 1585.97,686.914 1586.53,686.914 1587.09,686.914 1587.65,686.914 1588.2,686.914 1588.76,686.914 1589.32,686.914 1589.88,686.914 1590.44,686.914 1591,686.914 1591.56,686.914 1592.12,686.914 1592.68,686.914 1593.24,686.914 1593.8,686.914 1594.36,686.914 1594.92,686.914 1595.47,686.914 1596.03,686.914 1596.59,686.914 1597.15,686.914 1597.71,686.914 1598.27,686.914 1598.83,686.914 1599.39,686.914 1599.95,686.914 1600.51,686.914 1601.07,686.914 1601.63,686.914 1602.19,686.914 1602.74,686.914 1603.3,686.914 1603.86,686.914 1604.42,686.914 1604.98,686.914 1605.54,686.914 1606.1,686.914 1606.66,686.914 1607.22,686.914 1607.78,686.914 1608.34,686.914 1608.9,686.914 1609.46,686.914 1610.02,686.914 1610.57,686.914 1611.13,686.914 1611.69,686.914 1612.25,686.914 1612.81,686.914 1613.37,686.914 1613.93,686.914 1614.49,686.914 1615.05,686.914 1615.61,686.914 1616.17,686.914 1616.73,686.914 1617.29,686.914 1617.84,686.914 1618.4,686.914 1618.96,686.914 1619.52,686.914 1620.08,686.914 1620.64,686.914 1621.2,686.914 1621.76,686.914 1622.32,686.914 1622.88,686.914 1623.44,686.914 1624,686.914 1624.56,686.914 1625.11,686.914 1625.67,686.914 1626.23,686.914 1626.79,686.914 1627.35,686.914 1627.91,686.914 1628.47,686.914 1629.03,686.914 1629.59,686.914 1630.15,686.914 1630.71,686.914 1631.27,686.914 1631.83,686.914 1632.39,686.914 1632.94,686.914 1633.5,686.914 1634.06,686.914 1634.62,686.914 1635.18,686.914 1635.74,686.914 1636.3,686.914 1636.86,686.914 1637.42,686.914 1637.98,686.914 1638.54,686.914 1639.1,686.914 1639.66,686.914 1640.21,686.914 1640.77,686.914 1641.33,686.914 1641.89,686.914 1642.45,686.914 1643.01,686.914 1643.57,686.914 1644.13,686.914 1644.69,686.914 1645.25,686.914 1645.81,686.914 1646.37,686.914 1646.93,686.914 1647.48,686.914 1648.04,686.914 1648.6,686.914 1649.16,686.914 1649.72,686.914 1650.28,686.914 1650.84,686.914 1651.4,686.914 1651.96,686.914 1652.52,686.914 1653.08,686.914 1653.64,686.914 1654.2,686.914 1654.76,686.914 1655.31,686.914 1655.87,686.914 1656.43,686.914 1656.99,686.914 1657.55,686.914 1658.11,686.914 1658.67,686.914 1659.23,686.914 1659.79,686.914 1660.35,686.914 1660.91,686.914 1661.47,686.914 1662.03,686.914 1662.58,686.914 1663.14,686.914 1663.7,686.914 1664.26,686.914 1664.82,686.914 1665.38,686.914 1665.94,686.914 1666.5,686.914 1667.06,686.914 1667.62,686.914 1668.18,686.914 1668.74,686.914 1669.3,686.914 1669.85,686.914 1670.41,686.914 1670.97,686.914 1671.53,686.914 1672.09,686.914 1672.65,686.914 1673.21,686.914 1673.77,686.914 1674.33,686.914 1674.89,686.914 1675.45,686.914 1676.01,686.914 1676.57,686.914 1677.13,686.914 1677.68,686.914 1678.24,686.914 1678.8,686.914 1679.36,686.914 1679.92,686.914 1680.48,686.914 1681.04,686.914 1681.6,686.914 1682.16,686.914 1682.72,686.914 1683.28,686.914 1683.84,686.914 1684.4,686.914 1684.95,686.914 1685.51,686.914 1686.07,686.914 1686.63,686.914 1687.19,686.914 1687.75,686.914 1688.31,686.914 1688.87,686.914 1689.43,686.914 1689.99,686.914 1690.55,686.914 1691.11,686.914 1691.67,686.914 1692.23,686.914 1692.78,686.914 1693.34,686.914 1693.9,686.914 1694.46,686.914 1695.02,686.914 1695.58,686.914 1696.14,686.914 1696.7,686.914 1697.26,686.914 1697.82,686.914 1698.38,686.914 1698.94,686.914 1699.5,686.914 1700.05,686.914 1700.61,686.914 1701.17,686.914 1701.73,686.914 1702.29,686.914 1702.85,686.914 1703.41,686.914 1703.97,686.914 1704.53,686.914 1705.09,686.914 1705.65,686.914 1706.21,686.914 1706.77,686.914 1707.32,686.914 1707.88,686.914 1708.44,686.914 1709,686.914 1709.56,686.914 1710.12,686.914 1710.68,686.914 1711.24,686.914 1711.8,686.914 1712.36,686.914 1712.92,686.914 1713.48,686.914 1714.04,686.914 1714.6,686.914 1715.15,686.914 1715.71,686.914 1716.27,686.914 1716.83,686.914 1717.39,686.914 1717.95,686.914 1718.51,686.914 1719.07,686.914 1719.63,686.914 1720.19,686.914 1720.75,686.914 1721.31,686.914 1721.87,686.914 1722.42,686.914 1722.98,686.914 1723.54,686.914 1724.1,686.914 1724.66,686.914 1725.22,686.914 1725.78,686.914 1726.34,686.914 1726.9,686.914 1727.46,686.914 1728.02,686.914 1728.58,686.914 1729.14,686.914 1729.69,686.914 1730.25,686.914 1730.81,686.914 1731.37,686.914 1731.93,686.914 1732.49,686.914 1733.05,686.914 1733.61,686.914 1734.17,686.914 1734.73,686.914 1735.29,686.914 1735.85,686.914 1736.41,686.914 1736.97,686.914 1737.52,686.914 1738.08,686.914 1738.64,686.914 1739.2,686.914 1739.76,686.914 1740.32,686.914 1740.88,686.914 1741.44,686.914 1742,686.914 1742.56,686.914 1743.12,686.914 1743.68,686.914 1744.24,686.914 1744.79,686.914 1745.35,686.914 1745.91,686.914 1746.47,686.914 1747.03,686.914 1747.59,686.914 1748.15,686.914 1748.71,686.914 1749.27,686.914 1749.83,686.914 1750.39,686.914 1750.95,686.914 1751.51,686.914 1752.06,686.914 1752.62,686.914 1753.18,686.914 1753.74,686.914 1754.3,686.914 1754.86,686.914 1755.42,686.914 1755.98,686.914 1756.54,686.914 1757.1,686.914 1757.66,686.914 1758.22,686.914 1758.78,686.914 1759.34,686.914 1759.89,686.914 1760.45,686.914 1761.01,686.914 1761.57,686.914 1762.13,686.914 1762.69,686.914 1763.25,686.914 1763.81,686.914 1764.37,686.914 1764.93,686.914 1765.49,686.914 1766.05,686.914 1766.61,686.914 1767.16,686.914 1767.72,686.914 1768.28,686.914 1768.84,686.914 1769.4,686.914 1769.96,686.914 1770.52,686.914 1771.08,686.914 1771.64,686.914 1772.2,686.914 1772.76,686.914 1773.32,686.914 1773.88,686.914 1774.43,686.914 1774.99,686.914 1775.55,686.914 1776.11,686.914 1776.67,686.914 1777.23,686.914 1777.79,686.914 1778.35,686.914 1778.91,686.914 1779.47,686.914 1780.03,686.914 1780.59,686.914 1781.15,686.914 1781.71,686.914 1782.26,686.914 1782.82,686.914 1783.38,686.914 1783.94,686.914 1784.5,686.914 1785.06,686.914 1785.62,686.914 1786.18,686.914 1786.74,686.914 1787.3,686.914 1787.86,686.914 1788.42,686.914 1788.98,686.914 1789.53,686.914 1790.09,686.914 1790.65,686.914 1791.21,686.914 1791.77,686.914 1792.33,686.914 1792.89,686.914 1793.45,686.914 1794.01,686.914 1794.57,686.914 1795.13,686.914 1795.69,686.914 1796.25,686.914 1796.8,686.914 1797.36,686.914 1797.92,686.914 1798.48,686.914 1799.04,686.914 1799.6,686.914 1800.16,686.914 1800.72,686.914 1801.28,686.914 1801.84,686.914 1802.4,686.914 1802.96,686.914 1803.52,686.914 1804.08,686.914 1804.63,686.914 1805.19,686.914 1805.75,686.914 1806.31,686.914 1806.87,686.914 1807.43,686.914 1807.99,686.914 1808.55,686.914 1809.11,686.914 1809.67,686.914 1810.23,686.914 1810.79,686.914 1811.35,686.914 1811.9,686.914 1812.46,686.914 1813.02,686.914 1813.58,686.914 1814.14,686.914 1814.7,686.914 1815.26,686.914 1815.82,686.914 1816.38,686.914 1816.94,686.914 1817.5,686.914 1818.06,686.914 1818.62,686.914 1819.18,686.914 1819.73,686.914 1820.29,686.914 1820.85,686.914 1821.41,686.914 1821.97,686.914 1822.53,686.914 1823.09,686.914 1823.65,686.914 1824.21,686.914 1824.77,686.914 1825.33,686.914 1825.89,686.914 1826.45,686.914 1827,686.914 1827.56,686.914 1828.12,686.914 1828.68,686.914 1829.24,686.914 1829.8,686.914 1830.36,686.914 1830.92,686.914 1831.48,686.914 1832.04,686.914 1832.6,686.914 1833.16,686.914 1833.72,686.914 1834.27,686.914 1834.83,686.914 1835.39,686.914 1835.95,686.914 1836.51,686.914 1837.07,686.914 1837.63,686.914 1838.19,686.914 \"/>\n<path clip-path=\"url(#clip943)\" d=\"M720.247 684.492 L720.806 684.492 L721.365 684.492 L721.924 684.492 L722.484 684.492 L723.043 684.492 L723.602 684.492 L724.161 684.492 L724.721 684.492 L725.28 684.492 L725.839 684.492 L726.398 684.492 L726.958 684.492 L727.517 684.492 L728.076 684.492 L728.635 684.492 L729.195 684.492 L729.754 684.492 L730.313 684.492 L730.872 684.492 L731.432 684.492 L731.991 684.492 L732.55 684.492 L733.109 684.492 L733.669 684.492 L734.228 684.492 L734.787 684.492 L735.346 684.492 L735.906 684.492 L736.465 684.492 L737.024 684.492 L737.583 684.492 L738.143 684.492 L738.702 684.492 L739.261 684.492 L739.82 684.492 L740.38 684.492 L740.939 684.492 L741.498 684.492 L742.057 684.492 L742.617 684.492 L743.176 684.492 L743.735 684.492 L744.294 684.492 L744.854 684.492 L745.413 684.492 L745.972 684.492 L746.531 684.492 L747.091 684.492 L747.65 684.492 L748.209 684.492 L748.768 684.492 L749.328 684.492 L749.887 684.492 L750.446 684.492 L751.005 684.492 L751.565 684.492 L752.124 684.492 L752.683 684.492 L753.242 684.492 L753.802 684.492 L754.361 684.492 L754.92 684.492 L755.479 684.492 L756.039 684.492 L756.598 684.492 L757.157 684.492 L757.716 684.492 L758.276 684.492 L758.835 684.492 L759.394 684.492 L759.953 684.492 L760.513 684.492 L761.072 684.492 L761.631 684.492 L762.19 684.492 L762.75 684.492 L763.309 684.492 L763.868 684.492 L764.427 684.492 L764.987 684.492 L765.546 684.492 L766.105 684.492 L766.664 684.492 L767.224 684.492 L767.783 684.492 L768.342 684.492 L768.901 684.492 L769.461 684.492 L770.02 684.492 L770.579 684.492 L771.138 684.492 L771.698 684.492 L772.257 684.492 L772.816 684.492 L773.375 684.492 L773.935 684.492 L774.494 684.492 L775.053 684.492 L775.612 684.492 L776.172 684.492 L776.731 684.492 L777.29 684.492 L777.849 684.492 L778.409 684.492 L778.968 684.492 L779.527 684.492 L780.086 684.492 L780.646 684.492 L781.205 684.492 L781.764 684.492 L782.323 684.492 L782.883 684.492 L783.442 684.492 L784.001 684.492 L784.56 684.492 L785.12 684.492 L785.679 684.492 L786.238 684.492 L786.797 684.492 L787.357 684.492 L787.916 684.492 L788.475 684.492 L789.034 684.492 L789.594 684.492 L790.153 684.492 L790.712 684.492 L791.271 684.492 L791.831 684.492 L792.39 684.492 L792.949 684.492 L793.508 684.492 L794.068 684.492 L794.627 684.492 L795.186 684.492 L795.745 684.492 L796.305 684.492 L796.864 684.492 L797.423 684.492 L797.982 684.492 L798.542 684.492 L799.101 684.492 L799.66 684.492 L800.219 684.492 L800.779 684.492 L801.338 684.492 L801.897 684.492 L802.456 684.492 L803.016 684.492 L803.575 684.492 L804.134 684.492 L804.693 684.492 L805.253 684.492 L805.812 684.492 L806.371 684.492 L806.931 684.492 L807.49 684.492 L808.049 684.492 L808.608 684.492 L809.168 684.492 L809.727 684.492 L810.286 684.492 L810.845 684.492 L811.405 684.492 L811.964 684.492 L812.523 684.492 L813.082 684.492 L813.642 684.492 L814.201 684.492 L814.76 684.492 L815.319 684.492 L815.879 684.492 L816.438 684.492 L816.997 684.492 L817.556 684.492 L818.116 684.492 L818.675 684.492 L819.234 684.492 L819.793 684.492 L820.353 684.492 L820.912 684.492 L821.471 684.492 L822.03 684.492 L822.59 684.492 L823.149 684.492 L823.708 684.492 L824.267 684.492 L824.827 684.492 L825.386 684.492 L825.945 684.492 L826.504 684.492 L827.064 684.492 L827.623 684.492 L828.182 684.492 L828.741 684.492 L829.301 684.492 L829.86 684.492 L830.419 684.492 L830.978 684.492 L831.538 684.492 L832.097 684.492 L832.656 684.492 L833.215 684.492 L833.775 684.492 L834.334 684.492 L834.893 684.492 L835.452 684.492 L836.012 684.492 L836.571 684.492 L837.13 684.492 L837.689 684.492 L838.249 684.492 L838.808 684.492 L839.367 684.492 L839.926 684.492 L840.486 684.492 L841.045 684.492 L841.604 684.492 L842.163 684.492 L842.723 684.492 L843.282 684.492 L843.841 684.492 L844.4 684.492 L844.96 684.492 L845.519 684.492 L846.078 684.492 L846.637 684.492 L847.197 684.492 L847.756 684.492 L848.315 684.492 L848.874 684.492 L849.434 684.492 L849.993 684.492 L850.552 684.492 L851.111 684.492 L851.671 684.492 L852.23 684.492 L852.789 684.492 L853.348 684.492 L853.908 684.492 L854.467 684.492 L855.026 684.492 L855.585 684.492 L856.145 684.492 L856.704 684.492 L857.263 684.492 L857.822 684.492 L858.382 684.492 L858.941 684.492 L859.5 684.492 L860.059 684.492 L860.619 684.492 L861.178 684.492 L861.737 684.492 L862.296 684.492 L862.856 684.492 L863.415 684.492 L863.974 684.492 L864.533 684.492 L865.093 684.492 L865.652 684.492 L866.211 684.492 L866.77 684.492 L867.33 684.492 L867.889 684.492 L868.448 684.492 L869.007 684.492 L869.567 684.492 L870.126 684.492 L870.685 684.492 L871.244 684.492 L871.804 684.492 L872.363 684.492 L872.922 684.492 L873.481 684.492 L874.041 684.492 L874.6 684.492 L875.159 684.492 L875.718 684.492 L876.278 684.492 L876.837 684.492 L877.396 684.492 L877.955 684.492 L878.515 684.492 L879.074 684.492 L879.633 684.492 L880.192 684.492 L880.752 684.492 L881.311 684.492 L881.87 684.492 L882.429 684.492 L882.989 684.492 L883.548 684.492 L884.107 684.492 L884.666 684.492 L885.226 684.492 L885.785 684.492 L886.344 684.492 L886.903 684.492 L887.463 684.492 L888.022 684.492 L888.581 684.492 L889.14 684.492 L889.7 684.492 L890.259 684.492 L890.818 684.492 L891.377 684.492 L891.937 684.492 L892.496 684.492 L893.055 684.492 L893.614 684.492 L894.174 684.492 L894.733 684.492 L895.292 684.492 L895.851 684.492 L896.411 684.492 L896.97 684.492 L897.529 684.492 L898.088 684.492 L898.648 684.492 L899.207 684.492 L899.766 684.492 L900.325 684.492 L900.885 684.492 L901.444 684.492 L902.003 684.492 L902.562 684.492 L903.122 684.492 L903.681 684.492 L904.24 684.492 L904.799 684.492 L905.359 684.492 L905.918 684.492 L906.477 684.492 L907.036 684.492 L907.596 684.492 L908.155 684.492 L908.714 684.492 L909.273 684.492 L909.833 684.492 L910.392 684.492 L910.951 684.492 L911.51 684.492 L912.07 684.492 L912.629 684.492 L913.188 684.492 L913.747 684.492 L914.307 684.492 L914.866 684.492 L915.425 684.492 L915.984 684.492 L916.544 684.492 L917.103 684.492 L917.662 684.492 L918.221 684.492 L918.781 684.492 L919.34 684.492 L919.899 684.492 L920.458 684.492 L921.018 684.492 L921.577 684.492 L922.136 684.492 L922.695 684.492 L923.255 684.492 L923.814 684.492 L924.373 684.492 L924.932 684.492 L925.492 684.492 L926.051 684.492 L926.61 684.492 L927.169 684.492 L927.729 684.492 L928.288 684.492 L928.847 684.492 L929.406 684.492 L929.966 684.492 L930.525 684.492 L931.084 684.492 L931.644 684.492 L932.203 684.492 L932.762 684.492 L933.321 684.492 L933.881 684.492 L934.44 684.492 L934.999 684.492 L935.558 684.492 L936.118 684.492 L936.677 684.492 L937.236 684.492 L937.795 684.492 L938.355 684.492 L938.914 684.492 L939.473 684.492 L940.032 684.492 L940.592 684.492 L941.151 684.492 L941.71 684.492 L942.269 684.492 L942.829 684.492 L943.388 684.492 L943.947 684.492 L944.506 684.492 L945.066 684.492 L945.625 684.492 L946.184 684.492 L946.743 684.492 L947.303 684.492 L947.862 684.492 L948.421 684.492 L948.98 684.492 L949.54 684.492 L950.099 684.492 L950.658 684.492 L951.217 684.492 L951.777 684.492 L952.336 684.492 L952.895 684.492 L953.454 684.492 L954.014 684.492 L954.573 684.492 L955.132 684.492 L955.691 684.492 L956.251 684.492 L956.81 684.492 L957.369 684.492 L957.928 684.492 L958.488 684.492 L959.047 684.492 L959.606 684.492 L960.165 684.492 L960.725 684.492 L961.284 684.492 L961.843 684.492 L962.402 684.492 L962.962 684.492 L963.521 684.492 L964.08 684.492 L964.639 684.492 L965.199 684.492 L965.758 684.492 L966.317 684.492 L966.876 684.492 L967.436 684.492 L967.995 684.492 L968.554 684.492 L969.113 684.492 L969.673 684.492 L970.232 684.492 L970.791 684.492 L971.35 684.492 L971.91 684.492 L972.469 684.492 L973.028 684.492 L973.587 684.492 L974.147 684.492 L974.706 684.492 L975.265 684.492 L975.824 684.492 L976.384 684.492 L976.943 684.492 L977.502 684.492 L978.061 684.492 L978.621 684.492 L979.18 684.492 L979.739 684.492 L980.298 684.492 L980.858 684.492 L981.417 684.492 L981.976 684.492 L982.535 684.492 L983.095 684.492 L983.654 684.492 L984.213 684.492 L984.772 684.492 L985.332 684.492 L985.891 684.492 L986.45 684.492 L987.009 684.492 L987.569 684.492 L988.128 684.492 L988.687 684.492 L989.246 684.492 L989.806 684.492 L990.365 684.492 L990.924 684.492 L991.483 684.492 L992.043 684.492 L992.602 684.492 L993.161 684.492 L993.72 684.492 L994.28 684.492 L994.839 684.492 L995.398 684.492 L995.957 684.492 L996.517 684.492 L997.076 684.492 L997.635 684.492 L998.194 684.492 L998.754 684.492 L999.313 684.492 L999.872 684.492 L1000.43 684.492 L1000.99 684.492 L1001.55 684.492 L1002.11 684.492 L1002.67 684.492 L1003.23 684.492 L1003.79 684.492 L1004.35 684.492 L1004.91 684.492 L1005.46 684.492 L1006.02 684.492 L1006.58 684.492 L1007.14 684.492 L1007.7 684.492 L1008.26 684.492 L1008.82 684.492 L1009.38 684.492 L1009.94 684.492 L1010.5 684.492 L1011.06 684.492 L1011.62 684.492 L1012.18 684.492 L1012.73 684.492 L1013.29 684.492 L1013.85 684.492 L1014.41 684.492 L1014.97 684.492 L1015.53 684.492 L1016.09 684.492 L1016.65 684.492 L1017.21 684.492 L1017.77 684.492 L1018.33 684.492 L1018.89 684.492 L1019.45 684.492 L1020.01 684.492 L1020.56 684.492 L1021.12 684.492 L1021.68 684.492 L1022.24 684.492 L1022.8 684.492 L1023.36 684.492 L1023.92 684.492 L1024.48 684.492 L1025.04 684.492 L1025.6 684.492 L1026.16 684.492 L1026.72 684.492 L1027.28 684.492 L1027.83 684.492 L1028.39 684.492 L1028.95 684.492 L1029.51 684.492 L1030.07 684.492 L1030.63 684.492 L1031.19 684.492 L1031.75 684.492 L1032.31 684.492 L1032.87 684.492 L1033.43 684.492 L1033.99 684.492 L1034.55 684.492 L1035.1 684.492 L1035.66 684.492 L1036.22 684.492 L1036.78 684.492 L1037.34 684.492 L1037.9 684.492 L1038.46 684.492 L1039.02 684.492 L1039.58 684.492 L1040.14 684.492 L1040.7 684.492 L1041.26 684.492 L1041.82 684.492 L1042.38 684.492 L1042.93 684.492 L1043.49 684.492 L1044.05 684.492 L1044.61 684.492 L1045.17 684.492 L1045.73 684.492 L1046.29 684.492 L1046.85 684.492 L1047.41 684.492 L1047.97 684.492 L1048.53 684.492 L1049.09 684.492 L1049.65 684.492 L1050.2 684.492 L1050.76 684.492 L1051.32 684.492 L1051.88 684.492 L1052.44 684.492 L1053 684.492 L1053.56 684.492 L1054.12 684.492 L1054.68 684.492 L1055.24 684.492 L1055.8 684.492 L1056.36 684.492 L1056.92 684.492 L1057.48 684.492 L1058.03 684.492 L1058.59 684.492 L1059.15 684.492 L1059.71 684.492 L1060.27 684.492 L1060.83 684.492 L1061.39 684.492 L1061.95 684.492 L1062.51 684.492 L1063.07 684.492 L1063.63 684.492 L1064.19 684.492 L1064.75 684.492 L1065.3 684.492 L1065.86 684.492 L1066.42 684.492 L1066.98 684.492 L1067.54 684.492 L1068.1 684.492 L1068.66 684.492 L1069.22 684.492 L1069.78 684.492 L1070.34 684.492 L1070.9 684.492 L1071.46 684.492 L1072.02 684.492 L1072.57 684.492 L1073.13 684.492 L1073.69 684.492 L1074.25 684.492 L1074.81 684.492 L1075.37 684.492 L1075.93 684.492 L1076.49 684.492 L1077.05 684.492 L1077.61 684.492 L1078.17 684.492 L1078.73 684.492 L1079.29 684.492 L1079.85 684.492 L1080.4 684.492 L1080.96 684.492 L1081.52 684.492 L1082.08 684.492 L1082.64 684.492 L1083.2 684.492 L1083.76 684.492 L1084.32 684.492 L1084.88 684.492 L1085.44 684.492 L1086 684.492 L1086.56 684.492 L1087.12 684.492 L1087.67 684.492 L1088.23 684.492 L1088.79 684.492 L1089.35 684.492 L1089.91 684.492 L1090.47 684.492 L1091.03 684.492 L1091.59 684.492 L1092.15 684.492 L1092.71 684.492 L1093.27 684.492 L1093.83 684.492 L1094.39 684.492 L1094.94 684.492 L1095.5 684.492 L1096.06 684.492 L1096.62 684.492 L1097.18 684.492 L1097.74 684.492 L1098.3 684.492 L1098.86 684.492 L1099.42 684.492 L1099.98 684.492 L1100.54 684.492 L1101.1 684.492 L1101.66 684.492 L1102.22 684.492 L1102.77 684.492 L1103.33 684.492 L1103.89 684.492 L1104.45 684.492 L1105.01 684.492 L1105.57 684.492 L1106.13 684.492 L1106.69 684.492 L1107.25 684.492 L1107.81 684.492 L1108.37 684.492 L1108.93 684.492 L1109.49 684.492 L1110.04 684.492 L1110.6 684.492 L1111.16 684.492 L1111.72 684.492 L1112.28 684.492 L1112.84 684.492 L1113.4 684.492 L1113.96 684.492 L1114.52 684.492 L1115.08 684.492 L1115.64 684.492 L1116.2 684.492 L1116.76 684.492 L1117.31 684.492 L1117.87 684.492 L1118.43 684.492 L1118.99 684.492 L1119.55 684.492 L1120.11 684.492 L1120.67 684.492 L1121.23 684.492 L1121.79 684.492 L1122.35 684.492 L1122.91 684.492 L1123.47 684.492 L1124.03 684.492 L1124.59 684.492 L1125.14 684.492 L1125.7 684.492 L1126.26 684.492 L1126.82 684.492 L1127.38 684.492 L1127.94 684.492 L1128.5 684.492 L1129.06 684.492 L1129.62 684.492 L1130.18 684.492 L1130.74 684.492 L1131.3 684.492 L1131.86 684.492 L1132.41 684.492 L1132.97 684.492 L1133.53 684.492 L1134.09 684.492 L1134.65 684.492 L1135.21 684.492 L1135.77 684.492 L1136.33 684.492 L1136.89 684.492 L1137.45 684.492 L1138.01 684.492 L1138.57 684.492 L1139.13 684.492 L1139.68 684.492 L1140.24 684.492 L1140.8 684.492 L1141.36 684.492 L1141.92 684.492 L1142.48 684.492 L1143.04 684.492 L1143.6 684.492 L1144.16 684.492 L1144.72 684.492 L1145.28 684.492 L1145.84 684.492 L1146.4 684.492 L1146.96 684.492 L1147.51 684.492 L1148.07 684.492 L1148.63 684.492 L1149.19 684.492 L1149.75 684.492 L1150.31 684.492 L1150.87 684.492 L1151.43 684.492 L1151.99 684.492 L1152.55 684.492 L1153.11 684.492 L1153.67 684.492 L1154.23 684.492 L1154.78 684.492 L1155.34 684.492 L1155.9 684.492 L1156.46 684.492 L1157.02 684.492 L1157.58 684.492 L1158.14 684.492 L1158.7 684.492 L1159.26 684.492 L1159.82 684.492 L1160.38 684.492 L1160.94 684.492 L1161.5 684.492 L1162.05 684.492 L1162.61 684.492 L1163.17 684.492 L1163.73 684.492 L1164.29 684.492 L1164.85 684.492 L1165.41 684.492 L1165.97 684.492 L1166.53 684.492 L1167.09 684.492 L1167.65 684.492 L1168.21 684.492 L1168.77 684.492 L1169.33 684.492 L1169.88 684.492 L1170.44 684.492 L1171 684.492 L1171.56 684.492 L1172.12 684.492 L1172.68 684.492 L1173.24 684.492 L1173.8 684.492 L1174.36 684.492 L1174.92 684.492 L1175.48 684.492 L1176.04 684.492 L1176.6 684.492 L1177.15 684.492 L1177.71 684.492 L1178.27 684.492 L1178.83 684.492 L1179.39 684.492 L1179.95 684.492 L1180.51 684.492 L1181.07 684.492 L1181.63 684.492 L1182.19 684.492 L1182.75 684.492 L1183.31 684.492 L1183.87 684.492 L1184.43 684.492 L1184.98 684.492 L1185.54 684.492 L1186.1 684.492 L1186.66 684.492 L1187.22 684.492 L1187.78 684.492 L1188.34 684.492 L1188.9 684.492 L1189.46 684.492 L1190.02 684.492 L1190.58 684.492 L1191.14 684.492 L1191.7 684.492 L1192.25 684.492 L1192.81 684.492 L1193.37 684.492 L1193.93 684.492 L1194.49 684.492 L1195.05 684.492 L1195.61 684.492 L1196.17 684.492 L1196.73 684.492 L1197.29 684.492 L1197.85 684.492 L1198.41 684.492 L1198.97 684.492 L1199.52 684.492 L1200.08 684.492 L1200.64 684.492 L1201.2 684.492 L1201.76 684.492 L1202.32 684.492 L1202.88 684.492 L1203.44 684.492 L1204 684.492 L1204.56 684.492 L1205.12 684.492 L1205.68 684.492 L1206.24 684.492 L1206.8 684.492 L1207.35 684.492 L1207.91 684.492 L1208.47 684.492 L1209.03 684.492 L1209.59 684.492 L1210.15 684.492 L1210.71 684.492 L1211.27 684.492 L1211.83 684.492 L1212.39 684.492 L1212.95 684.492 L1213.51 684.492 L1214.07 684.492 L1214.62 684.492 L1215.18 684.492 L1215.74 684.492 L1216.3 684.492 L1216.86 684.492 L1217.42 684.492 L1217.98 684.492 L1218.54 684.492 L1219.1 684.492 L1219.66 684.492 L1220.22 684.492 L1220.78 684.492 L1221.34 684.492 L1221.89 684.492 L1222.45 684.492 L1223.01 684.492 L1223.57 684.492 L1224.13 684.492 L1224.69 684.492 L1225.25 684.492 L1225.81 684.492 L1226.37 684.492 L1226.93 684.492 L1227.49 684.492 L1228.05 684.492 L1228.61 684.492 L1229.17 684.492 L1229.72 684.492 L1230.28 684.492 L1230.84 684.492 L1231.4 684.492 L1231.96 684.492 L1232.52 684.492 L1233.08 684.492 L1233.64 684.492 L1234.2 684.492 L1234.76 684.492 L1235.32 684.492 L1235.88 684.492 L1236.44 684.492 L1236.99 684.492 L1237.55 684.492 L1238.11 684.492 L1238.67 684.492 L1239.23 684.492 L1239.79 684.492 L1240.35 684.492 L1240.91 684.492 L1241.47 684.492 L1242.03 684.492 L1242.59 684.492 L1243.15 684.492 L1243.71 684.492 L1244.26 684.492 L1244.82 684.492 L1245.38 684.492 L1245.94 684.492 L1246.5 684.492 L1247.06 684.492 L1247.62 684.492 L1248.18 684.492 L1248.74 684.492 L1249.3 684.492 L1249.86 684.492 L1250.42 684.492 L1250.98 684.492 L1251.54 684.492 L1252.09 684.492 L1252.65 684.492 L1253.21 684.492 L1253.77 684.492 L1254.33 684.492 L1254.89 684.492 L1255.45 684.492 L1256.01 684.492 L1256.57 684.492 L1257.13 684.492 L1257.69 684.492 L1258.25 684.492 L1258.81 684.492 L1259.36 684.492 L1259.92 684.492 L1260.48 684.492 L1261.04 684.492 L1261.6 684.492 L1262.16 684.492 L1262.72 684.492 L1263.28 684.492 L1263.84 684.492 L1264.4 684.492 L1264.96 684.492 L1265.52 684.492 L1266.08 684.492 L1266.63 684.492 L1267.19 684.492 L1267.75 684.492 L1268.31 684.492 L1268.87 684.492 L1269.43 684.492 L1269.99 684.492 L1270.55 684.492 L1271.11 684.492 L1271.67 684.492 L1272.23 684.492 L1272.79 684.492 L1273.35 684.492 L1273.91 684.492 L1274.46 684.492 L1275.02 684.492 L1275.58 684.492 L1276.14 684.492 L1276.7 684.492 L1277.26 684.492 L1277.82 684.492 L1278.38 684.492 L1278.94 684.492 L1279.5 684.492 L1280.06 684.492 L1280.62 684.492 L1281.18 684.492 L1281.73 684.492 L1282.29 684.492 L1282.85 684.492 L1283.41 684.492 L1283.97 684.492 L1284.53 684.492 L1285.09 684.492 L1285.65 684.492 L1286.21 684.492 L1286.77 684.492 L1287.33 684.492 L1287.89 684.492 L1288.45 684.492 L1289 684.492 L1289.56 684.492 L1290.12 684.492 L1290.68 684.492 L1291.24 684.492 L1291.8 684.492 L1292.36 684.492 L1292.92 684.492 L1293.48 684.492 L1294.04 684.492 L1294.6 684.492 L1295.16 684.492 L1295.72 684.492 L1296.28 684.492 L1296.83 684.492 L1297.39 684.492 L1297.95 684.492 L1298.51 684.492 L1299.07 684.492 L1299.63 684.492 L1300.19 684.492 L1300.75 684.492 L1301.31 684.492 L1301.87 684.492 L1302.43 684.492 L1302.99 684.492 L1303.55 684.492 L1304.1 684.492 L1304.66 684.492 L1305.22 684.492 L1305.78 684.492 L1306.34 684.492 L1306.9 684.492 L1307.46 684.492 L1308.02 684.492 L1308.58 684.492 L1309.14 684.492 L1309.7 684.492 L1310.26 684.492 L1310.82 684.492 L1311.38 684.492 L1311.93 684.492 L1312.49 684.492 L1313.05 684.492 L1313.61 684.492 L1314.17 684.492 L1314.73 684.492 L1315.29 684.492 L1315.85 684.492 L1316.41 684.492 L1316.97 684.492 L1317.53 684.492 L1318.09 684.492 L1318.65 684.492 L1319.2 684.492 L1319.76 684.492 L1320.32 684.492 L1320.88 684.492 L1321.44 684.492 L1322 684.492 L1322.56 684.492 L1323.12 684.492 L1323.68 684.492 L1324.24 684.492 L1324.8 684.492 L1325.36 684.492 L1325.92 684.492 L1326.47 684.492 L1327.03 684.492 L1327.59 684.492 L1328.15 684.492 L1328.71 684.492 L1329.27 684.492 L1329.83 684.492 L1330.39 684.492 L1330.95 684.492 L1331.51 684.492 L1332.07 684.492 L1332.63 684.492 L1333.19 684.492 L1333.75 684.492 L1334.3 684.492 L1334.86 684.492 L1335.42 684.492 L1335.98 684.492 L1336.54 684.492 L1337.1 684.492 L1337.66 684.492 L1338.22 684.492 L1338.78 684.492 L1339.34 684.492 L1339.9 684.492 L1340.46 684.492 L1341.02 684.492 L1341.57 684.492 L1342.13 684.492 L1342.69 684.492 L1343.25 684.492 L1343.81 684.492 L1344.37 684.492 L1344.93 684.492 L1345.49 684.492 L1346.05 684.492 L1346.61 684.492 L1347.17 684.492 L1347.73 684.492 L1348.29 684.492 L1348.84 684.492 L1349.4 684.492 L1349.96 684.492 L1350.52 684.492 L1351.08 684.492 L1351.64 684.492 L1352.2 684.492 L1352.76 684.492 L1353.32 684.492 L1353.88 684.492 L1354.44 684.492 L1355 684.492 L1355.56 684.492 L1356.12 684.492 L1356.67 684.492 L1357.23 684.492 L1357.79 684.492 L1358.35 684.492 L1358.91 684.492 L1359.47 684.492 L1360.03 684.492 L1360.59 684.492 L1361.15 684.492 L1361.71 684.492 L1362.27 684.492 L1362.83 684.492 L1363.39 684.492 L1363.94 684.492 L1364.5 684.492 L1365.06 684.492 L1365.62 684.492 L1366.18 684.492 L1366.74 684.492 L1367.3 684.492 L1367.86 684.492 L1368.42 684.492 L1368.98 684.492 L1369.54 684.492 L1370.1 684.492 L1370.66 684.492 L1371.21 684.492 L1371.77 684.492 L1372.33 684.492 L1372.89 684.492 L1373.45 684.492 L1374.01 684.492 L1374.57 684.492 L1375.13 684.492 L1375.69 684.492 L1376.25 684.492 L1376.81 684.492 L1377.37 684.492 L1377.93 684.492 L1378.49 684.492 L1379.04 684.492 L1379.6 684.492 L1380.16 684.492 L1380.72 684.492 L1381.28 684.492 L1381.84 684.492 L1382.4 684.492 L1382.96 684.492 L1383.52 684.492 L1384.08 684.492 L1384.64 684.492 L1385.2 684.492 L1385.76 684.492 L1386.31 684.492 L1386.87 684.492 L1387.43 684.492 L1387.99 684.492 L1388.55 684.492 L1389.11 684.492 L1389.67 684.492 L1390.23 684.492 L1390.79 684.492 L1391.35 684.492 L1391.91 684.492 L1392.47 684.492 L1393.03 684.492 L1393.58 684.492 L1394.14 684.492 L1394.7 684.492 L1395.26 684.492 L1395.82 684.492 L1396.38 684.492 L1396.94 684.492 L1397.5 684.492 L1398.06 684.492 L1398.62 684.492 L1399.18 684.492 L1399.74 684.492 L1400.3 684.492 L1400.86 684.492 L1401.41 684.492 L1401.97 684.492 L1402.53 684.492 L1403.09 684.492 L1403.65 684.492 L1404.21 684.492 L1404.77 684.492 L1405.33 684.492 L1405.89 684.492 L1406.45 684.492 L1407.01 684.492 L1407.57 684.492 L1408.13 684.492 L1408.68 684.492 L1409.24 684.492 L1409.8 684.492 L1410.36 684.492 L1410.92 684.492 L1411.48 684.492 L1412.04 684.492 L1412.6 684.492 L1413.16 684.492 L1413.72 684.492 L1414.28 684.492 L1414.84 684.492 L1415.4 684.492 L1415.95 684.492 L1416.51 684.492 L1417.07 684.492 L1417.63 684.492 L1418.19 684.492 L1418.75 684.492 L1419.31 684.492 L1419.87 684.492 L1420.43 684.492 L1420.99 684.492 L1421.55 684.492 L1422.11 684.492 L1422.67 684.492 L1423.23 684.492 L1423.78 684.492 L1424.34 684.492 L1424.9 684.492 L1425.46 684.492 L1426.02 684.492 L1426.58 684.492 L1427.14 684.492 L1427.7 684.492 L1428.26 684.492 L1428.82 684.492 L1429.38 684.492 L1429.94 684.492 L1430.5 684.492 L1431.05 684.492 L1431.61 684.492 L1432.17 684.492 L1432.73 684.492 L1433.29 684.492 L1433.85 684.492 L1434.41 684.492 L1434.97 684.492 L1435.53 684.492 L1436.09 684.492 L1436.65 684.492 L1437.21 684.492 L1437.77 684.492 L1438.33 684.492 L1438.88 684.492 L1439.44 684.492 L1440 684.492 L1440.56 684.492 L1441.12 684.492 L1441.68 684.492 L1442.24 684.492 L1442.8 684.492 L1443.36 684.492 L1443.92 684.492 L1444.48 684.492 L1445.04 684.492 L1445.6 684.492 L1446.15 684.492 L1446.71 684.492 L1447.27 684.492 L1447.83 684.492 L1448.39 684.492 L1448.95 684.492 L1449.51 684.492 L1450.07 684.492 L1450.63 684.492 L1451.19 684.492 L1451.75 684.492 L1452.31 684.492 L1452.87 684.492 L1453.42 684.492 L1453.98 684.492 L1454.54 684.492 L1455.1 684.492 L1455.66 684.492 L1456.22 684.492 L1456.78 684.492 L1457.34 684.492 L1457.9 684.492 L1458.46 684.492 L1459.02 684.492 L1459.58 684.492 L1460.14 684.492 L1460.7 684.492 L1461.25 684.492 L1461.81 684.492 L1462.37 684.492 L1462.93 684.492 L1463.49 684.492 L1464.05 684.492 L1464.61 684.492 L1465.17 684.492 L1465.73 684.492 L1466.29 684.492 L1466.85 684.492 L1467.41 684.492 L1467.97 684.492 L1468.52 684.492 L1469.08 684.492 L1469.64 684.492 L1470.2 684.492 L1470.76 684.492 L1471.32 684.492 L1471.88 684.492 L1472.44 684.492 L1473 684.492 L1473.56 684.492 L1474.12 684.492 L1474.68 684.492 L1475.24 684.492 L1475.79 684.492 L1476.35 684.492 L1476.91 684.492 L1477.47 684.492 L1478.03 684.492 L1478.59 684.492 L1479.15 684.492 L1479.71 684.492 L1480.27 684.492 L1480.83 684.492 L1481.39 684.492 L1481.95 684.492 L1482.51 684.492 L1483.07 684.492 L1483.62 684.492 L1484.18 684.492 L1484.74 684.492 L1485.3 684.492 L1485.86 684.492 L1486.42 684.492 L1486.98 684.492 L1487.54 684.492 L1488.1 684.492 L1488.66 684.492 L1489.22 684.492 L1489.78 684.492 L1490.34 684.492 L1490.89 684.492 L1491.45 684.492 L1492.01 684.492 L1492.57 684.492 L1493.13 684.492 L1493.69 684.492 L1494.25 684.492 L1494.81 684.492 L1495.37 684.492 L1495.93 684.492 L1496.49 684.492 L1497.05 684.492 L1497.61 684.492 L1498.16 684.492 L1498.72 684.492 L1499.28 684.492 L1499.84 684.492 L1500.4 684.492 L1500.96 684.492 L1501.52 684.492 L1502.08 684.492 L1502.64 684.492 L1503.2 684.492 L1503.76 684.492 L1504.32 684.492 L1504.88 684.492 L1505.44 684.492 L1505.99 684.492 L1506.55 684.492 L1507.11 684.492 L1507.67 684.492 L1508.23 684.492 L1508.79 684.492 L1509.35 684.492 L1509.91 684.492 L1510.47 684.492 L1511.03 684.492 L1511.59 684.492 L1512.15 684.492 L1512.71 684.492 L1513.26 684.492 L1513.82 684.492 L1514.38 684.492 L1514.94 684.492 L1515.5 684.492 L1516.06 684.492 L1516.62 684.492 L1517.18 684.492 L1517.74 684.492 L1518.3 684.492 L1518.86 684.492 L1519.42 684.492 L1519.98 684.492 L1520.53 684.492 L1521.09 684.492 L1521.65 684.492 L1522.21 684.492 L1522.77 684.492 L1523.33 684.492 L1523.89 684.492 L1524.45 684.492 L1525.01 684.492 L1525.57 684.492 L1526.13 684.492 L1526.69 684.492 L1527.25 684.492 L1527.81 684.492 L1528.36 684.492 L1528.92 684.492 L1529.48 684.492 L1530.04 684.492 L1530.6 684.492 L1531.16 684.492 L1531.72 684.492 L1532.28 684.492 L1532.84 684.492 L1533.4 684.492 L1533.96 684.492 L1534.52 684.492 L1535.08 684.492 L1535.63 684.492 L1536.19 684.492 L1536.75 684.492 L1537.31 684.492 L1537.87 684.492 L1538.43 684.492 L1538.99 684.492 L1539.55 684.492 L1540.11 684.492 L1540.67 684.492 L1541.23 684.492 L1541.79 684.492 L1542.35 684.492 L1542.9 684.492 L1543.46 684.492 L1544.02 684.492 L1544.58 684.492 L1545.14 684.492 L1545.7 684.492 L1546.26 684.492 L1546.82 684.492 L1547.38 684.492 L1547.94 684.492 L1548.5 684.492 L1549.06 684.492 L1549.62 684.492 L1550.18 684.492 L1550.73 684.492 L1551.29 684.492 L1551.85 684.492 L1552.41 684.492 L1552.97 684.492 L1553.53 684.492 L1554.09 684.492 L1554.65 684.492 L1555.21 684.492 L1555.77 684.492 L1556.33 684.492 L1556.89 684.492 L1557.45 684.492 L1558 684.492 L1558.56 684.492 L1559.12 684.492 L1559.68 684.492 L1560.24 684.492 L1560.8 684.492 L1561.36 684.492 L1561.92 684.492 L1562.48 684.492 L1563.04 684.492 L1563.6 684.492 L1564.16 684.492 L1564.72 684.492 L1565.28 684.492 L1565.83 684.492 L1566.39 684.492 L1566.95 684.492 L1567.51 684.492 L1568.07 684.492 L1568.63 684.492 L1569.19 684.492 L1569.75 684.492 L1570.31 684.492 L1570.87 684.492 L1571.43 684.492 L1571.99 684.492 L1572.55 684.492 L1573.1 684.492 L1573.66 684.492 L1574.22 684.492 L1574.78 684.492 L1575.34 684.492 L1575.9 684.492 L1576.46 684.492 L1577.02 684.492 L1577.58 684.492 L1578.14 684.492 L1578.7 684.492 L1579.26 684.492 L1579.82 684.492 L1580.37 684.492 L1580.93 684.492 L1581.49 684.492 L1582.05 684.492 L1582.61 684.492 L1583.17 684.492 L1583.73 684.492 L1584.29 684.492 L1584.85 684.492 L1585.41 684.492 L1585.97 684.492 L1586.53 684.492 L1587.09 684.492 L1587.65 684.492 L1588.2 684.492 L1588.76 684.492 L1589.32 684.492 L1589.88 684.492 L1590.44 684.492 L1591 684.492 L1591.56 684.492 L1592.12 684.492 L1592.68 684.492 L1593.24 684.492 L1593.8 684.492 L1594.36 684.492 L1594.92 684.492 L1595.47 684.492 L1596.03 684.492 L1596.59 684.492 L1597.15 684.492 L1597.71 684.492 L1598.27 684.492 L1598.83 684.492 L1599.39 684.492 L1599.95 684.492 L1600.51 684.492 L1601.07 684.492 L1601.63 684.492 L1602.19 684.492 L1602.74 684.492 L1603.3 684.492 L1603.86 684.492 L1604.42 684.492 L1604.98 684.492 L1605.54 684.492 L1606.1 684.492 L1606.66 684.492 L1607.22 684.492 L1607.78 684.492 L1608.34 684.492 L1608.9 684.492 L1609.46 684.492 L1610.02 684.492 L1610.57 684.492 L1611.13 684.492 L1611.69 684.492 L1612.25 684.492 L1612.81 684.492 L1613.37 684.492 L1613.93 684.492 L1614.49 684.492 L1615.05 684.492 L1615.61 684.492 L1616.17 684.492 L1616.73 684.492 L1617.29 684.492 L1617.84 684.492 L1618.4 684.492 L1618.96 684.492 L1619.52 684.492 L1620.08 684.492 L1620.64 684.492 L1621.2 684.492 L1621.76 684.492 L1622.32 684.492 L1622.88 684.492 L1623.44 684.492 L1624 684.492 L1624.56 684.492 L1625.11 684.492 L1625.67 684.492 L1626.23 684.492 L1626.79 684.492 L1627.35 684.492 L1627.91 684.492 L1628.47 684.492 L1629.03 684.492 L1629.59 684.492 L1630.15 684.492 L1630.71 684.492 L1631.27 684.492 L1631.83 684.492 L1632.39 684.492 L1632.94 684.492 L1633.5 684.492 L1634.06 684.492 L1634.62 684.492 L1635.18 684.492 L1635.74 684.492 L1636.3 684.492 L1636.86 684.492 L1637.42 684.492 L1637.98 684.492 L1638.54 684.492 L1639.1 684.492 L1639.66 684.492 L1640.21 684.492 L1640.77 684.492 L1641.33 684.492 L1641.89 684.492 L1642.45 684.492 L1643.01 684.492 L1643.57 684.492 L1644.13 684.492 L1644.69 684.492 L1645.25 684.492 L1645.81 684.492 L1646.37 684.492 L1646.93 684.492 L1647.48 684.492 L1648.04 684.492 L1648.6 684.492 L1649.16 684.492 L1649.72 684.492 L1650.28 684.492 L1650.84 684.492 L1651.4 684.492 L1651.96 684.492 L1652.52 684.492 L1653.08 684.492 L1653.64 684.492 L1654.2 684.492 L1654.76 684.492 L1655.31 684.492 L1655.87 684.492 L1656.43 684.492 L1656.99 684.492 L1657.55 684.492 L1658.11 684.492 L1658.67 684.492 L1659.23 684.492 L1659.79 684.492 L1660.35 684.492 L1660.91 684.492 L1661.47 684.492 L1662.03 684.492 L1662.58 684.492 L1663.14 684.492 L1663.7 684.492 L1664.26 684.492 L1664.82 684.492 L1665.38 684.492 L1665.94 684.492 L1666.5 684.492 L1667.06 684.492 L1667.62 684.492 L1668.18 684.492 L1668.74 684.492 L1669.3 684.492 L1669.85 684.492 L1670.41 684.492 L1670.97 684.492 L1671.53 684.492 L1672.09 684.492 L1672.65 684.492 L1673.21 684.492 L1673.77 684.492 L1674.33 684.492 L1674.89 684.492 L1675.45 684.492 L1676.01 684.492 L1676.57 684.492 L1677.13 684.492 L1677.68 684.492 L1678.24 684.492 L1678.8 684.492 L1679.36 684.492 L1679.92 684.492 L1680.48 684.492 L1681.04 684.492 L1681.6 684.492 L1682.16 684.492 L1682.72 684.492 L1683.28 684.492 L1683.84 684.492 L1684.4 684.492 L1684.95 684.492 L1685.51 684.492 L1686.07 684.492 L1686.63 684.492 L1687.19 684.492 L1687.75 684.492 L1688.31 684.492 L1688.87 684.492 L1689.43 684.492 L1689.99 684.492 L1690.55 684.492 L1691.11 684.492 L1691.67 684.492 L1692.23 684.492 L1692.78 684.492 L1693.34 684.492 L1693.9 684.492 L1694.46 684.492 L1695.02 684.492 L1695.58 684.492 L1696.14 684.492 L1696.7 684.492 L1697.26 684.492 L1697.82 684.492 L1698.38 684.492 L1698.94 684.492 L1699.5 684.492 L1700.05 684.492 L1700.61 684.492 L1701.17 684.492 L1701.73 684.492 L1702.29 684.492 L1702.85 684.492 L1703.41 684.492 L1703.97 684.492 L1704.53 684.492 L1705.09 684.492 L1705.65 684.492 L1706.21 684.492 L1706.77 684.492 L1707.32 684.492 L1707.88 684.492 L1708.44 684.492 L1709 684.492 L1709.56 684.492 L1710.12 684.492 L1710.68 684.492 L1711.24 684.492 L1711.8 684.492 L1712.36 684.492 L1712.92 684.492 L1713.48 684.492 L1714.04 684.492 L1714.6 684.492 L1715.15 684.492 L1715.71 684.492 L1716.27 684.492 L1716.83 684.492 L1717.39 684.492 L1717.95 684.492 L1718.51 684.492 L1719.07 684.492 L1719.63 684.492 L1720.19 684.492 L1720.75 684.492 L1721.31 684.492 L1721.87 684.492 L1722.42 684.492 L1722.98 684.492 L1723.54 684.492 L1724.1 684.492 L1724.66 684.492 L1725.22 684.492 L1725.78 684.492 L1726.34 684.492 L1726.9 684.492 L1727.46 684.492 L1728.02 684.492 L1728.58 684.492 L1729.14 684.492 L1729.69 684.492 L1730.25 684.492 L1730.81 684.492 L1731.37 684.492 L1731.93 684.492 L1732.49 684.492 L1733.05 684.492 L1733.61 684.492 L1734.17 684.492 L1734.73 684.492 L1735.29 684.492 L1735.85 684.492 L1736.41 684.492 L1736.97 684.492 L1737.52 684.492 L1738.08 684.492 L1738.64 684.492 L1739.2 684.492 L1739.76 684.492 L1740.32 684.492 L1740.88 684.492 L1741.44 684.492 L1742 684.492 L1742.56 684.492 L1743.12 684.492 L1743.68 684.492 L1744.24 684.492 L1744.79 684.492 L1745.35 684.492 L1745.91 684.492 L1746.47 684.492 L1747.03 684.492 L1747.59 684.492 L1748.15 684.492 L1748.71 684.492 L1749.27 684.492 L1749.83 684.492 L1750.39 684.492 L1750.95 684.492 L1751.51 684.492 L1752.06 684.492 L1752.62 684.492 L1753.18 684.492 L1753.74 684.492 L1754.3 684.492 L1754.86 684.492 L1755.42 684.492 L1755.98 684.492 L1756.54 684.492 L1757.1 684.492 L1757.66 684.492 L1758.22 684.492 L1758.78 684.492 L1759.34 684.492 L1759.89 684.492 L1760.45 684.492 L1761.01 684.492 L1761.57 684.492 L1762.13 684.492 L1762.69 684.492 L1763.25 684.492 L1763.81 684.492 L1764.37 684.492 L1764.93 684.492 L1765.49 684.492 L1766.05 684.492 L1766.61 684.492 L1767.16 684.492 L1767.72 684.492 L1768.28 684.492 L1768.84 684.492 L1769.4 684.492 L1769.96 684.492 L1770.52 684.492 L1771.08 684.492 L1771.64 684.492 L1772.2 684.492 L1772.76 684.492 L1773.32 684.492 L1773.88 684.492 L1774.43 684.492 L1774.99 684.492 L1775.55 684.492 L1776.11 684.492 L1776.67 684.492 L1777.23 684.492 L1777.79 684.492 L1778.35 684.492 L1778.91 684.492 L1779.47 684.492 L1780.03 684.492 L1780.59 684.492 L1781.15 684.492 L1781.71 684.492 L1782.26 684.492 L1782.82 684.492 L1783.38 684.492 L1783.94 684.492 L1784.5 684.492 L1785.06 684.492 L1785.62 684.492 L1786.18 684.492 L1786.74 684.492 L1787.3 684.492 L1787.86 684.492 L1788.42 684.492 L1788.98 684.492 L1789.53 684.492 L1790.09 684.492 L1790.65 684.492 L1791.21 684.492 L1791.77 684.492 L1792.33 684.492 L1792.89 684.492 L1793.45 684.492 L1794.01 684.492 L1794.57 684.492 L1795.13 684.492 L1795.69 684.492 L1796.25 684.492 L1796.8 684.492 L1797.36 684.492 L1797.92 684.492 L1798.48 684.492 L1799.04 684.492 L1799.6 684.492 L1800.16 684.492 L1800.72 684.492 L1801.28 684.492 L1801.84 684.492 L1802.4 684.492 L1802.96 684.492 L1803.52 684.492 L1804.08 684.492 L1804.63 684.492 L1805.19 684.492 L1805.75 684.492 L1806.31 684.492 L1806.87 684.492 L1807.43 684.492 L1807.99 684.492 L1808.55 684.492 L1809.11 684.492 L1809.67 684.492 L1810.23 684.492 L1810.79 684.492 L1811.35 684.492 L1811.9 684.492 L1812.46 684.492 L1813.02 684.492 L1813.58 684.492 L1814.14 684.492 L1814.7 684.492 L1815.26 684.492 L1815.82 684.492 L1816.38 684.492 L1816.94 684.492 L1817.5 684.492 L1818.06 684.492 L1818.62 684.492 L1819.18 684.492 L1819.73 684.492 L1820.29 684.492 L1820.85 684.492 L1821.41 684.492 L1821.97 684.492 L1822.53 684.492 L1823.09 684.492 L1823.65 684.492 L1824.21 684.492 L1824.77 684.492 L1825.33 684.492 L1825.89 684.492 L1826.45 684.492 L1827 684.492 L1827.56 684.492 L1828.12 684.492 L1828.68 684.492 L1829.24 684.492 L1829.8 684.492 L1830.36 684.492 L1830.92 684.492 L1831.48 684.492 L1832.04 684.492 L1832.6 684.492 L1833.16 684.492 L1833.72 684.492 L1834.27 684.492 L1834.83 684.492 L1835.39 684.492 L1835.95 684.492 L1836.51 684.492 L1837.07 684.492 L1837.63 684.492 L1838.19 684.492 L1838.19 681.8 L1837.63 681.8 L1837.07 681.8 L1836.51 681.8 L1835.95 681.8 L1835.39 681.8 L1834.83 681.8 L1834.27 681.8 L1833.72 681.8 L1833.16 681.8 L1832.6 681.8 L1832.04 681.8 L1831.48 681.8 L1830.92 681.8 L1830.36 681.8 L1829.8 681.8 L1829.24 681.8 L1828.68 681.8 L1828.12 681.8 L1827.56 681.8 L1827 681.8 L1826.45 681.8 L1825.89 681.8 L1825.33 681.8 L1824.77 681.8 L1824.21 681.8 L1823.65 681.8 L1823.09 681.8 L1822.53 681.8 L1821.97 681.8 L1821.41 681.8 L1820.85 681.8 L1820.29 681.8 L1819.73 681.8 L1819.18 681.8 L1818.62 681.8 L1818.06 681.8 L1817.5 681.8 L1816.94 681.8 L1816.38 681.8 L1815.82 681.8 L1815.26 681.8 L1814.7 681.8 L1814.14 681.8 L1813.58 681.8 L1813.02 681.8 L1812.46 681.8 L1811.9 681.8 L1811.35 681.8 L1810.79 681.8 L1810.23 681.8 L1809.67 681.8 L1809.11 681.8 L1808.55 681.8 L1807.99 681.8 L1807.43 681.8 L1806.87 681.8 L1806.31 681.8 L1805.75 681.8 L1805.19 681.8 L1804.63 681.8 L1804.08 681.8 L1803.52 681.8 L1802.96 681.8 L1802.4 681.8 L1801.84 681.8 L1801.28 681.8 L1800.72 681.8 L1800.16 681.8 L1799.6 681.8 L1799.04 681.8 L1798.48 681.8 L1797.92 681.8 L1797.36 681.8 L1796.8 681.8 L1796.25 681.8 L1795.69 681.8 L1795.13 681.8 L1794.57 681.8 L1794.01 681.8 L1793.45 681.8 L1792.89 681.8 L1792.33 681.8 L1791.77 681.8 L1791.21 681.8 L1790.65 681.8 L1790.09 681.8 L1789.53 681.8 L1788.98 681.8 L1788.42 681.8 L1787.86 681.8 L1787.3 681.8 L1786.74 681.8 L1786.18 681.8 L1785.62 681.8 L1785.06 681.8 L1784.5 681.8 L1783.94 681.8 L1783.38 681.8 L1782.82 681.8 L1782.26 681.8 L1781.71 681.8 L1781.15 681.8 L1780.59 681.8 L1780.03 681.8 L1779.47 681.8 L1778.91 681.8 L1778.35 681.8 L1777.79 681.8 L1777.23 681.8 L1776.67 681.8 L1776.11 681.8 L1775.55 681.8 L1774.99 681.8 L1774.43 681.8 L1773.88 681.8 L1773.32 681.8 L1772.76 681.8 L1772.2 681.8 L1771.64 681.8 L1771.08 681.8 L1770.52 681.8 L1769.96 681.8 L1769.4 681.8 L1768.84 681.8 L1768.28 681.8 L1767.72 681.8 L1767.16 681.8 L1766.61 681.8 L1766.05 681.8 L1765.49 681.8 L1764.93 681.8 L1764.37 681.8 L1763.81 681.8 L1763.25 681.8 L1762.69 681.8 L1762.13 681.8 L1761.57 681.8 L1761.01 681.8 L1760.45 681.8 L1759.89 681.8 L1759.34 681.8 L1758.78 681.8 L1758.22 681.8 L1757.66 681.8 L1757.1 681.8 L1756.54 681.8 L1755.98 681.8 L1755.42 681.8 L1754.86 681.8 L1754.3 681.8 L1753.74 681.8 L1753.18 681.8 L1752.62 681.8 L1752.06 681.8 L1751.51 681.8 L1750.95 681.8 L1750.39 681.8 L1749.83 681.8 L1749.27 681.8 L1748.71 681.8 L1748.15 681.8 L1747.59 681.8 L1747.03 681.8 L1746.47 681.8 L1745.91 681.8 L1745.35 681.8 L1744.79 681.8 L1744.24 681.8 L1743.68 681.8 L1743.12 681.8 L1742.56 681.8 L1742 681.8 L1741.44 681.8 L1740.88 681.8 L1740.32 681.8 L1739.76 681.8 L1739.2 681.8 L1738.64 681.8 L1738.08 681.8 L1737.52 681.8 L1736.97 681.8 L1736.41 681.8 L1735.85 681.8 L1735.29 681.8 L1734.73 681.8 L1734.17 681.8 L1733.61 681.8 L1733.05 681.8 L1732.49 681.8 L1731.93 681.8 L1731.37 681.8 L1730.81 681.8 L1730.25 681.8 L1729.69 681.8 L1729.14 681.8 L1728.58 681.8 L1728.02 681.8 L1727.46 681.8 L1726.9 681.8 L1726.34 681.8 L1725.78 681.8 L1725.22 681.8 L1724.66 681.8 L1724.1 681.8 L1723.54 681.8 L1722.98 681.8 L1722.42 681.8 L1721.87 681.8 L1721.31 681.8 L1720.75 681.8 L1720.19 681.8 L1719.63 681.8 L1719.07 681.8 L1718.51 681.8 L1717.95 681.8 L1717.39 681.8 L1716.83 681.8 L1716.27 681.8 L1715.71 681.8 L1715.15 681.8 L1714.6 681.8 L1714.04 681.8 L1713.48 681.8 L1712.92 681.8 L1712.36 681.8 L1711.8 681.8 L1711.24 681.8 L1710.68 681.8 L1710.12 681.8 L1709.56 681.8 L1709 681.8 L1708.44 681.8 L1707.88 681.8 L1707.32 681.8 L1706.77 681.8 L1706.21 681.8 L1705.65 681.8 L1705.09 681.8 L1704.53 681.8 L1703.97 681.8 L1703.41 681.8 L1702.85 681.8 L1702.29 681.8 L1701.73 681.8 L1701.17 681.8 L1700.61 681.8 L1700.05 681.8 L1699.5 681.8 L1698.94 681.8 L1698.38 681.8 L1697.82 681.8 L1697.26 681.8 L1696.7 681.8 L1696.14 681.8 L1695.58 681.8 L1695.02 681.8 L1694.46 681.8 L1693.9 681.8 L1693.34 681.8 L1692.78 681.8 L1692.23 681.8 L1691.67 681.8 L1691.11 681.8 L1690.55 681.8 L1689.99 681.8 L1689.43 681.8 L1688.87 681.8 L1688.31 681.8 L1687.75 681.8 L1687.19 681.8 L1686.63 681.8 L1686.07 681.8 L1685.51 681.8 L1684.95 681.8 L1684.4 681.8 L1683.84 681.8 L1683.28 681.8 L1682.72 681.8 L1682.16 681.8 L1681.6 681.8 L1681.04 681.8 L1680.48 681.8 L1679.92 681.8 L1679.36 681.8 L1678.8 681.8 L1678.24 681.8 L1677.68 681.8 L1677.13 681.8 L1676.57 681.8 L1676.01 681.8 L1675.45 681.8 L1674.89 681.8 L1674.33 681.8 L1673.77 681.8 L1673.21 681.8 L1672.65 681.8 L1672.09 681.8 L1671.53 681.8 L1670.97 681.8 L1670.41 681.8 L1669.85 681.8 L1669.3 681.8 L1668.74 681.8 L1668.18 681.8 L1667.62 681.8 L1667.06 681.8 L1666.5 681.8 L1665.94 681.8 L1665.38 681.8 L1664.82 681.8 L1664.26 681.8 L1663.7 681.8 L1663.14 681.8 L1662.58 681.8 L1662.03 681.8 L1661.47 681.8 L1660.91 681.8 L1660.35 681.8 L1659.79 681.8 L1659.23 681.8 L1658.67 681.8 L1658.11 681.8 L1657.55 681.8 L1656.99 681.8 L1656.43 681.8 L1655.87 681.8 L1655.31 681.8 L1654.76 681.8 L1654.2 681.8 L1653.64 681.8 L1653.08 681.8 L1652.52 681.8 L1651.96 681.8 L1651.4 681.8 L1650.84 681.8 L1650.28 681.8 L1649.72 681.8 L1649.16 681.8 L1648.6 681.8 L1648.04 681.8 L1647.48 681.8 L1646.93 681.8 L1646.37 681.8 L1645.81 681.8 L1645.25 681.8 L1644.69 681.8 L1644.13 681.8 L1643.57 681.8 L1643.01 681.8 L1642.45 681.8 L1641.89 681.8 L1641.33 681.8 L1640.77 681.8 L1640.21 681.8 L1639.66 681.8 L1639.1 681.8 L1638.54 681.8 L1637.98 681.8 L1637.42 681.8 L1636.86 681.8 L1636.3 681.8 L1635.74 681.8 L1635.18 681.8 L1634.62 681.8 L1634.06 681.8 L1633.5 681.8 L1632.94 681.8 L1632.39 681.8 L1631.83 681.8 L1631.27 681.8 L1630.71 681.8 L1630.15 681.8 L1629.59 681.8 L1629.03 681.8 L1628.47 681.8 L1627.91 681.8 L1627.35 681.8 L1626.79 681.8 L1626.23 681.8 L1625.67 681.8 L1625.11 681.8 L1624.56 681.8 L1624 681.8 L1623.44 681.8 L1622.88 681.8 L1622.32 681.8 L1621.76 681.8 L1621.2 681.8 L1620.64 681.8 L1620.08 681.8 L1619.52 681.8 L1618.96 681.8 L1618.4 681.8 L1617.84 681.8 L1617.29 681.8 L1616.73 681.8 L1616.17 681.8 L1615.61 681.8 L1615.05 681.8 L1614.49 681.8 L1613.93 681.8 L1613.37 681.8 L1612.81 681.8 L1612.25 681.8 L1611.69 681.8 L1611.13 681.8 L1610.57 681.8 L1610.02 681.8 L1609.46 681.8 L1608.9 681.8 L1608.34 681.8 L1607.78 681.8 L1607.22 681.8 L1606.66 681.8 L1606.1 681.8 L1605.54 681.8 L1604.98 681.8 L1604.42 681.8 L1603.86 681.8 L1603.3 681.8 L1602.74 681.8 L1602.19 681.8 L1601.63 681.8 L1601.07 681.8 L1600.51 681.8 L1599.95 681.8 L1599.39 681.8 L1598.83 681.8 L1598.27 681.8 L1597.71 681.8 L1597.15 681.8 L1596.59 681.8 L1596.03 681.8 L1595.47 681.8 L1594.92 681.8 L1594.36 681.8 L1593.8 681.8 L1593.24 681.8 L1592.68 681.8 L1592.12 681.8 L1591.56 681.8 L1591 681.8 L1590.44 681.8 L1589.88 681.8 L1589.32 681.8 L1588.76 681.8 L1588.2 681.8 L1587.65 681.8 L1587.09 681.8 L1586.53 681.8 L1585.97 681.8 L1585.41 681.8 L1584.85 681.8 L1584.29 681.8 L1583.73 681.8 L1583.17 681.8 L1582.61 681.8 L1582.05 681.8 L1581.49 681.8 L1580.93 681.8 L1580.37 681.8 L1579.82 681.8 L1579.26 681.8 L1578.7 681.8 L1578.14 681.8 L1577.58 681.8 L1577.02 681.8 L1576.46 681.8 L1575.9 681.8 L1575.34 681.8 L1574.78 681.8 L1574.22 681.8 L1573.66 681.8 L1573.1 681.8 L1572.55 681.8 L1571.99 681.8 L1571.43 681.8 L1570.87 681.8 L1570.31 681.8 L1569.75 681.8 L1569.19 681.8 L1568.63 681.8 L1568.07 681.8 L1567.51 681.8 L1566.95 681.8 L1566.39 681.8 L1565.83 681.8 L1565.28 681.8 L1564.72 681.8 L1564.16 681.8 L1563.6 681.8 L1563.04 681.8 L1562.48 681.8 L1561.92 681.8 L1561.36 681.8 L1560.8 681.8 L1560.24 681.8 L1559.68 681.8 L1559.12 681.8 L1558.56 681.8 L1558 681.8 L1557.45 681.8 L1556.89 681.8 L1556.33 681.8 L1555.77 681.8 L1555.21 681.8 L1554.65 681.8 L1554.09 681.8 L1553.53 681.8 L1552.97 681.8 L1552.41 681.8 L1551.85 681.8 L1551.29 681.8 L1550.73 681.8 L1550.18 681.8 L1549.62 681.8 L1549.06 681.8 L1548.5 681.8 L1547.94 681.8 L1547.38 681.8 L1546.82 681.8 L1546.26 681.8 L1545.7 681.8 L1545.14 681.8 L1544.58 681.8 L1544.02 681.8 L1543.46 681.8 L1542.9 681.8 L1542.35 681.8 L1541.79 681.8 L1541.23 681.8 L1540.67 681.8 L1540.11 681.8 L1539.55 681.8 L1538.99 681.8 L1538.43 681.8 L1537.87 681.8 L1537.31 681.8 L1536.75 681.8 L1536.19 681.8 L1535.63 681.8 L1535.08 681.8 L1534.52 681.8 L1533.96 681.8 L1533.4 681.8 L1532.84 681.8 L1532.28 681.8 L1531.72 681.8 L1531.16 681.8 L1530.6 681.8 L1530.04 681.8 L1529.48 681.8 L1528.92 681.8 L1528.36 681.8 L1527.81 681.8 L1527.25 681.8 L1526.69 681.8 L1526.13 681.8 L1525.57 681.8 L1525.01 681.8 L1524.45 681.8 L1523.89 681.8 L1523.33 681.8 L1522.77 681.8 L1522.21 681.8 L1521.65 681.8 L1521.09 681.8 L1520.53 681.8 L1519.98 681.8 L1519.42 681.8 L1518.86 681.8 L1518.3 681.8 L1517.74 681.8 L1517.18 681.8 L1516.62 681.8 L1516.06 681.8 L1515.5 681.8 L1514.94 681.8 L1514.38 681.8 L1513.82 681.8 L1513.26 681.8 L1512.71 681.8 L1512.15 681.8 L1511.59 681.8 L1511.03 681.8 L1510.47 681.8 L1509.91 681.8 L1509.35 681.8 L1508.79 681.8 L1508.23 681.8 L1507.67 681.8 L1507.11 681.8 L1506.55 681.8 L1505.99 681.8 L1505.44 681.8 L1504.88 681.8 L1504.32 681.8 L1503.76 681.8 L1503.2 681.8 L1502.64 681.8 L1502.08 681.8 L1501.52 681.8 L1500.96 681.8 L1500.4 681.8 L1499.84 681.8 L1499.28 681.8 L1498.72 681.8 L1498.16 681.8 L1497.61 681.8 L1497.05 681.8 L1496.49 681.8 L1495.93 681.8 L1495.37 681.8 L1494.81 681.8 L1494.25 681.8 L1493.69 681.8 L1493.13 681.8 L1492.57 681.8 L1492.01 681.8 L1491.45 681.8 L1490.89 681.8 L1490.34 681.8 L1489.78 681.8 L1489.22 681.8 L1488.66 681.8 L1488.1 681.8 L1487.54 681.8 L1486.98 681.8 L1486.42 681.8 L1485.86 681.8 L1485.3 681.8 L1484.74 681.8 L1484.18 681.8 L1483.62 681.8 L1483.07 681.8 L1482.51 681.8 L1481.95 681.8 L1481.39 681.8 L1480.83 681.8 L1480.27 681.8 L1479.71 681.8 L1479.15 681.8 L1478.59 681.8 L1478.03 681.8 L1477.47 681.8 L1476.91 681.8 L1476.35 681.8 L1475.79 681.8 L1475.24 681.8 L1474.68 681.8 L1474.12 681.8 L1473.56 681.8 L1473 681.8 L1472.44 681.8 L1471.88 681.8 L1471.32 681.8 L1470.76 681.8 L1470.2 681.8 L1469.64 681.8 L1469.08 681.8 L1468.52 681.8 L1467.97 681.8 L1467.41 681.8 L1466.85 681.8 L1466.29 681.8 L1465.73 681.8 L1465.17 681.8 L1464.61 681.8 L1464.05 681.8 L1463.49 681.8 L1462.93 681.8 L1462.37 681.8 L1461.81 681.8 L1461.25 681.8 L1460.7 681.8 L1460.14 681.8 L1459.58 681.8 L1459.02 681.8 L1458.46 681.8 L1457.9 681.8 L1457.34 681.8 L1456.78 681.8 L1456.22 681.8 L1455.66 681.8 L1455.1 681.8 L1454.54 681.8 L1453.98 681.8 L1453.42 681.8 L1452.87 681.8 L1452.31 681.8 L1451.75 681.8 L1451.19 681.8 L1450.63 681.8 L1450.07 681.8 L1449.51 681.8 L1448.95 681.8 L1448.39 681.8 L1447.83 681.8 L1447.27 681.8 L1446.71 681.8 L1446.15 681.8 L1445.6 681.8 L1445.04 681.8 L1444.48 681.8 L1443.92 681.8 L1443.36 681.8 L1442.8 681.8 L1442.24 681.8 L1441.68 681.8 L1441.12 681.8 L1440.56 681.8 L1440 681.8 L1439.44 681.8 L1438.88 681.8 L1438.33 681.8 L1437.77 681.8 L1437.21 681.8 L1436.65 681.8 L1436.09 681.8 L1435.53 681.8 L1434.97 681.8 L1434.41 681.8 L1433.85 681.8 L1433.29 681.8 L1432.73 681.8 L1432.17 681.8 L1431.61 681.8 L1431.05 681.8 L1430.5 681.8 L1429.94 681.8 L1429.38 681.8 L1428.82 681.8 L1428.26 681.8 L1427.7 681.8 L1427.14 681.8 L1426.58 681.8 L1426.02 681.8 L1425.46 681.8 L1424.9 681.8 L1424.34 681.8 L1423.78 681.8 L1423.23 681.8 L1422.67 681.8 L1422.11 681.8 L1421.55 681.8 L1420.99 681.8 L1420.43 681.8 L1419.87 681.8 L1419.31 681.8 L1418.75 681.8 L1418.19 681.8 L1417.63 681.8 L1417.07 681.8 L1416.51 681.8 L1415.95 681.8 L1415.4 681.8 L1414.84 681.8 L1414.28 681.8 L1413.72 681.8 L1413.16 681.8 L1412.6 681.8 L1412.04 681.8 L1411.48 681.8 L1410.92 681.8 L1410.36 681.8 L1409.8 681.8 L1409.24 681.8 L1408.68 681.8 L1408.13 681.8 L1407.57 681.8 L1407.01 681.8 L1406.45 681.8 L1405.89 681.8 L1405.33 681.8 L1404.77 681.8 L1404.21 681.8 L1403.65 681.8 L1403.09 681.8 L1402.53 681.8 L1401.97 681.8 L1401.41 681.8 L1400.86 681.8 L1400.3 681.8 L1399.74 681.8 L1399.18 681.8 L1398.62 681.8 L1398.06 681.8 L1397.5 681.8 L1396.94 681.8 L1396.38 681.8 L1395.82 681.8 L1395.26 681.8 L1394.7 681.8 L1394.14 681.8 L1393.58 681.8 L1393.03 681.8 L1392.47 681.8 L1391.91 681.8 L1391.35 681.8 L1390.79 681.8 L1390.23 681.8 L1389.67 681.8 L1389.11 681.8 L1388.55 681.8 L1387.99 681.8 L1387.43 681.8 L1386.87 681.8 L1386.31 681.8 L1385.76 681.8 L1385.2 681.8 L1384.64 681.8 L1384.08 681.8 L1383.52 681.8 L1382.96 681.8 L1382.4 681.8 L1381.84 681.8 L1381.28 681.8 L1380.72 681.8 L1380.16 681.8 L1379.6 681.8 L1379.04 681.8 L1378.49 681.8 L1377.93 681.8 L1377.37 681.8 L1376.81 681.8 L1376.25 681.8 L1375.69 681.8 L1375.13 681.8 L1374.57 681.8 L1374.01 681.8 L1373.45 681.8 L1372.89 681.8 L1372.33 681.8 L1371.77 681.8 L1371.21 681.8 L1370.66 681.8 L1370.1 681.8 L1369.54 681.8 L1368.98 681.8 L1368.42 681.8 L1367.86 681.8 L1367.3 681.8 L1366.74 681.8 L1366.18 681.8 L1365.62 681.8 L1365.06 681.8 L1364.5 681.8 L1363.94 681.8 L1363.39 681.8 L1362.83 681.8 L1362.27 681.8 L1361.71 681.8 L1361.15 681.8 L1360.59 681.8 L1360.03 681.8 L1359.47 681.8 L1358.91 681.8 L1358.35 681.8 L1357.79 681.8 L1357.23 681.8 L1356.67 681.8 L1356.12 681.8 L1355.56 681.8 L1355 681.8 L1354.44 681.8 L1353.88 681.8 L1353.32 681.8 L1352.76 681.8 L1352.2 681.8 L1351.64 681.8 L1351.08 681.8 L1350.52 681.8 L1349.96 681.8 L1349.4 681.8 L1348.84 681.8 L1348.29 681.8 L1347.73 681.8 L1347.17 681.8 L1346.61 681.8 L1346.05 681.8 L1345.49 681.8 L1344.93 681.8 L1344.37 681.8 L1343.81 681.8 L1343.25 681.8 L1342.69 681.8 L1342.13 681.8 L1341.57 681.8 L1341.02 681.8 L1340.46 681.8 L1339.9 681.8 L1339.34 681.8 L1338.78 681.8 L1338.22 681.8 L1337.66 681.8 L1337.1 681.8 L1336.54 681.8 L1335.98 681.8 L1335.42 681.8 L1334.86 681.8 L1334.3 681.8 L1333.75 681.8 L1333.19 681.8 L1332.63 681.8 L1332.07 681.8 L1331.51 681.8 L1330.95 681.8 L1330.39 681.8 L1329.83 681.8 L1329.27 681.8 L1328.71 681.8 L1328.15 681.8 L1327.59 681.8 L1327.03 681.8 L1326.47 681.8 L1325.92 681.8 L1325.36 681.8 L1324.8 681.8 L1324.24 681.8 L1323.68 681.8 L1323.12 681.8 L1322.56 681.8 L1322 681.8 L1321.44 681.8 L1320.88 681.8 L1320.32 681.8 L1319.76 681.8 L1319.2 681.8 L1318.65 681.8 L1318.09 681.8 L1317.53 681.8 L1316.97 681.8 L1316.41 681.8 L1315.85 681.8 L1315.29 681.8 L1314.73 681.8 L1314.17 681.8 L1313.61 681.8 L1313.05 681.8 L1312.49 681.8 L1311.93 681.8 L1311.38 681.8 L1310.82 681.8 L1310.26 681.8 L1309.7 681.8 L1309.14 681.8 L1308.58 681.8 L1308.02 681.8 L1307.46 681.8 L1306.9 681.8 L1306.34 681.8 L1305.78 681.8 L1305.22 681.8 L1304.66 681.8 L1304.1 681.8 L1303.55 681.8 L1302.99 681.8 L1302.43 681.8 L1301.87 681.8 L1301.31 681.8 L1300.75 681.8 L1300.19 681.8 L1299.63 681.8 L1299.07 681.8 L1298.51 681.8 L1297.95 681.8 L1297.39 681.8 L1296.83 681.8 L1296.28 681.8 L1295.72 681.8 L1295.16 681.8 L1294.6 681.8 L1294.04 681.8 L1293.48 681.8 L1292.92 681.8 L1292.36 681.8 L1291.8 681.8 L1291.24 681.8 L1290.68 681.8 L1290.12 681.8 L1289.56 681.8 L1289 681.8 L1288.45 681.8 L1287.89 681.8 L1287.33 681.8 L1286.77 681.8 L1286.21 681.8 L1285.65 681.8 L1285.09 681.8 L1284.53 681.8 L1283.97 681.8 L1283.41 681.8 L1282.85 681.8 L1282.29 681.8 L1281.73 681.8 L1281.18 681.8 L1280.62 681.8 L1280.06 681.8 L1279.5 681.8 L1278.94 681.8 L1278.38 681.8 L1277.82 681.8 L1277.26 681.8 L1276.7 681.8 L1276.14 681.8 L1275.58 681.8 L1275.02 681.8 L1274.46 681.8 L1273.91 681.8 L1273.35 681.8 L1272.79 681.8 L1272.23 681.8 L1271.67 681.8 L1271.11 681.8 L1270.55 681.8 L1269.99 681.8 L1269.43 681.8 L1268.87 681.8 L1268.31 681.8 L1267.75 681.8 L1267.19 681.8 L1266.63 681.8 L1266.08 681.8 L1265.52 681.8 L1264.96 681.8 L1264.4 681.8 L1263.84 681.8 L1263.28 681.8 L1262.72 681.8 L1262.16 681.8 L1261.6 681.8 L1261.04 681.8 L1260.48 681.8 L1259.92 681.8 L1259.36 681.8 L1258.81 681.8 L1258.25 681.8 L1257.69 681.8 L1257.13 681.8 L1256.57 681.8 L1256.01 681.8 L1255.45 681.8 L1254.89 681.8 L1254.33 681.8 L1253.77 681.8 L1253.21 681.8 L1252.65 681.8 L1252.09 681.8 L1251.54 681.8 L1250.98 681.8 L1250.42 681.8 L1249.86 681.8 L1249.3 681.8 L1248.74 681.8 L1248.18 681.8 L1247.62 681.8 L1247.06 681.8 L1246.5 681.8 L1245.94 681.8 L1245.38 681.8 L1244.82 681.8 L1244.26 681.8 L1243.71 681.8 L1243.15 681.8 L1242.59 681.8 L1242.03 681.8 L1241.47 681.8 L1240.91 681.8 L1240.35 681.8 L1239.79 681.8 L1239.23 681.8 L1238.67 681.8 L1238.11 681.8 L1237.55 681.8 L1236.99 681.8 L1236.44 681.8 L1235.88 681.8 L1235.32 681.8 L1234.76 681.8 L1234.2 681.8 L1233.64 681.8 L1233.08 681.8 L1232.52 681.8 L1231.96 681.8 L1231.4 681.8 L1230.84 681.8 L1230.28 681.8 L1229.72 681.8 L1229.17 681.8 L1228.61 681.8 L1228.05 681.8 L1227.49 681.8 L1226.93 681.8 L1226.37 681.8 L1225.81 681.8 L1225.25 681.8 L1224.69 681.8 L1224.13 681.8 L1223.57 681.8 L1223.01 681.8 L1222.45 681.8 L1221.89 681.8 L1221.34 681.8 L1220.78 681.8 L1220.22 681.8 L1219.66 681.8 L1219.1 681.8 L1218.54 681.8 L1217.98 681.8 L1217.42 681.8 L1216.86 681.8 L1216.3 681.8 L1215.74 681.8 L1215.18 681.8 L1214.62 681.8 L1214.07 681.8 L1213.51 681.8 L1212.95 681.8 L1212.39 681.8 L1211.83 681.8 L1211.27 681.8 L1210.71 681.8 L1210.15 681.8 L1209.59 681.8 L1209.03 681.8 L1208.47 681.8 L1207.91 681.8 L1207.35 681.8 L1206.8 681.8 L1206.24 681.8 L1205.68 681.8 L1205.12 681.8 L1204.56 681.8 L1204 681.8 L1203.44 681.8 L1202.88 681.8 L1202.32 681.8 L1201.76 681.8 L1201.2 681.8 L1200.64 681.8 L1200.08 681.8 L1199.52 681.8 L1198.97 681.8 L1198.41 681.8 L1197.85 681.8 L1197.29 681.8 L1196.73 681.8 L1196.17 681.8 L1195.61 681.8 L1195.05 681.8 L1194.49 681.8 L1193.93 681.8 L1193.37 681.8 L1192.81 681.8 L1192.25 681.8 L1191.7 681.8 L1191.14 681.8 L1190.58 681.8 L1190.02 681.8 L1189.46 681.8 L1188.9 681.8 L1188.34 681.8 L1187.78 681.8 L1187.22 681.8 L1186.66 681.8 L1186.1 681.8 L1185.54 681.8 L1184.98 681.8 L1184.43 681.8 L1183.87 681.8 L1183.31 681.8 L1182.75 681.8 L1182.19 681.8 L1181.63 681.8 L1181.07 681.8 L1180.51 681.8 L1179.95 681.8 L1179.39 681.8 L1178.83 681.8 L1178.27 681.8 L1177.71 681.8 L1177.15 681.8 L1176.6 681.8 L1176.04 681.8 L1175.48 681.8 L1174.92 681.8 L1174.36 681.8 L1173.8 681.8 L1173.24 681.8 L1172.68 681.8 L1172.12 681.8 L1171.56 681.8 L1171 681.8 L1170.44 681.8 L1169.88 681.8 L1169.33 681.8 L1168.77 681.8 L1168.21 681.8 L1167.65 681.8 L1167.09 681.8 L1166.53 681.8 L1165.97 681.8 L1165.41 681.8 L1164.85 681.8 L1164.29 681.8 L1163.73 681.8 L1163.17 681.8 L1162.61 681.8 L1162.05 681.8 L1161.5 681.8 L1160.94 681.8 L1160.38 681.8 L1159.82 681.8 L1159.26 681.8 L1158.7 681.8 L1158.14 681.8 L1157.58 681.8 L1157.02 681.8 L1156.46 681.8 L1155.9 681.8 L1155.34 681.8 L1154.78 681.8 L1154.23 681.8 L1153.67 681.8 L1153.11 681.8 L1152.55 681.8 L1151.99 681.8 L1151.43 681.8 L1150.87 681.8 L1150.31 681.8 L1149.75 681.8 L1149.19 681.8 L1148.63 681.8 L1148.07 681.8 L1147.51 681.8 L1146.96 681.8 L1146.4 681.8 L1145.84 681.8 L1145.28 681.8 L1144.72 681.8 L1144.16 681.8 L1143.6 681.8 L1143.04 681.8 L1142.48 681.8 L1141.92 681.8 L1141.36 681.8 L1140.8 681.8 L1140.24 681.8 L1139.68 681.8 L1139.13 681.8 L1138.57 681.8 L1138.01 681.8 L1137.45 681.8 L1136.89 681.8 L1136.33 681.8 L1135.77 681.8 L1135.21 681.8 L1134.65 681.8 L1134.09 681.8 L1133.53 681.8 L1132.97 681.8 L1132.41 681.8 L1131.86 681.8 L1131.3 681.8 L1130.74 681.8 L1130.18 681.8 L1129.62 681.8 L1129.06 681.8 L1128.5 681.8 L1127.94 681.8 L1127.38 681.8 L1126.82 681.8 L1126.26 681.8 L1125.7 681.8 L1125.14 681.8 L1124.59 681.8 L1124.03 681.8 L1123.47 681.8 L1122.91 681.8 L1122.35 681.8 L1121.79 681.8 L1121.23 681.8 L1120.67 681.8 L1120.11 681.8 L1119.55 681.8 L1118.99 681.8 L1118.43 681.8 L1117.87 681.8 L1117.31 681.8 L1116.76 681.8 L1116.2 681.8 L1115.64 681.8 L1115.08 681.8 L1114.52 681.8 L1113.96 681.8 L1113.4 681.8 L1112.84 681.8 L1112.28 681.8 L1111.72 681.8 L1111.16 681.8 L1110.6 681.8 L1110.04 681.8 L1109.49 681.8 L1108.93 681.8 L1108.37 681.8 L1107.81 681.8 L1107.25 681.8 L1106.69 681.8 L1106.13 681.8 L1105.57 681.8 L1105.01 681.8 L1104.45 681.8 L1103.89 681.8 L1103.33 681.8 L1102.77 681.8 L1102.22 681.8 L1101.66 681.8 L1101.1 681.8 L1100.54 681.8 L1099.98 681.8 L1099.42 681.8 L1098.86 681.8 L1098.3 681.8 L1097.74 681.8 L1097.18 681.8 L1096.62 681.8 L1096.06 681.8 L1095.5 681.8 L1094.94 681.8 L1094.39 681.8 L1093.83 681.8 L1093.27 681.8 L1092.71 681.8 L1092.15 681.8 L1091.59 681.8 L1091.03 681.8 L1090.47 681.8 L1089.91 681.8 L1089.35 681.8 L1088.79 681.8 L1088.23 681.8 L1087.67 681.8 L1087.12 681.8 L1086.56 681.8 L1086 681.8 L1085.44 681.8 L1084.88 681.8 L1084.32 681.8 L1083.76 681.8 L1083.2 681.8 L1082.64 681.8 L1082.08 681.8 L1081.52 681.8 L1080.96 681.8 L1080.4 681.8 L1079.85 681.8 L1079.29 681.8 L1078.73 681.8 L1078.17 681.8 L1077.61 681.8 L1077.05 681.8 L1076.49 681.8 L1075.93 681.8 L1075.37 681.8 L1074.81 681.8 L1074.25 681.8 L1073.69 681.8 L1073.13 681.8 L1072.57 681.8 L1072.02 681.8 L1071.46 681.8 L1070.9 681.8 L1070.34 681.8 L1069.78 681.8 L1069.22 681.8 L1068.66 681.8 L1068.1 681.8 L1067.54 681.8 L1066.98 681.8 L1066.42 681.8 L1065.86 681.8 L1065.3 681.8 L1064.75 681.8 L1064.19 681.8 L1063.63 681.8 L1063.07 681.8 L1062.51 681.8 L1061.95 681.8 L1061.39 681.8 L1060.83 681.8 L1060.27 681.8 L1059.71 681.8 L1059.15 681.8 L1058.59 681.8 L1058.03 681.8 L1057.48 681.8 L1056.92 681.8 L1056.36 681.8 L1055.8 681.8 L1055.24 681.8 L1054.68 681.8 L1054.12 681.8 L1053.56 681.8 L1053 681.8 L1052.44 681.8 L1051.88 681.8 L1051.32 681.8 L1050.76 681.8 L1050.2 681.8 L1049.65 681.8 L1049.09 681.8 L1048.53 681.8 L1047.97 681.8 L1047.41 681.8 L1046.85 681.8 L1046.29 681.8 L1045.73 681.8 L1045.17 681.8 L1044.61 681.8 L1044.05 681.8 L1043.49 681.8 L1042.93 681.8 L1042.38 681.8 L1041.82 681.8 L1041.26 681.8 L1040.7 681.8 L1040.14 681.8 L1039.58 681.8 L1039.02 681.8 L1038.46 681.8 L1037.9 681.8 L1037.34 681.8 L1036.78 681.8 L1036.22 681.8 L1035.66 681.8 L1035.1 681.8 L1034.55 681.8 L1033.99 681.8 L1033.43 681.8 L1032.87 681.8 L1032.31 681.8 L1031.75 681.8 L1031.19 681.8 L1030.63 681.8 L1030.07 681.8 L1029.51 681.8 L1028.95 681.8 L1028.39 681.8 L1027.83 681.8 L1027.28 681.8 L1026.72 681.8 L1026.16 681.8 L1025.6 681.8 L1025.04 681.8 L1024.48 681.8 L1023.92 681.8 L1023.36 681.8 L1022.8 681.8 L1022.24 681.8 L1021.68 681.8 L1021.12 681.8 L1020.56 681.8 L1020.01 681.8 L1019.45 681.8 L1018.89 681.8 L1018.33 681.8 L1017.77 681.8 L1017.21 681.8 L1016.65 681.8 L1016.09 681.8 L1015.53 681.8 L1014.97 681.8 L1014.41 681.8 L1013.85 681.8 L1013.29 681.8 L1012.73 681.8 L1012.18 681.8 L1011.62 681.8 L1011.06 681.8 L1010.5 681.8 L1009.94 681.8 L1009.38 681.8 L1008.82 681.8 L1008.26 681.8 L1007.7 681.8 L1007.14 681.8 L1006.58 681.8 L1006.02 681.8 L1005.46 681.8 L1004.91 681.8 L1004.35 681.8 L1003.79 681.8 L1003.23 681.8 L1002.67 681.8 L1002.11 681.8 L1001.55 681.8 L1000.99 681.8 L1000.43 681.8 L999.872 681.8 L999.313 681.8 L998.754 681.8 L998.194 681.8 L997.635 681.8 L997.076 681.8 L996.517 681.8 L995.957 681.8 L995.398 681.8 L994.839 681.8 L994.28 681.8 L993.72 681.8 L993.161 681.8 L992.602 681.8 L992.043 681.8 L991.483 681.8 L990.924 681.8 L990.365 681.8 L989.806 681.8 L989.246 681.8 L988.687 681.8 L988.128 681.8 L987.569 681.8 L987.009 681.8 L986.45 681.8 L985.891 681.8 L985.332 681.8 L984.772 681.8 L984.213 681.8 L983.654 681.8 L983.095 681.8 L982.535 681.8 L981.976 681.8 L981.417 681.8 L980.858 681.8 L980.298 681.8 L979.739 681.8 L979.18 681.8 L978.621 681.8 L978.061 681.8 L977.502 681.8 L976.943 681.8 L976.384 681.8 L975.824 681.8 L975.265 681.8 L974.706 681.8 L974.147 681.8 L973.587 681.8 L973.028 681.8 L972.469 681.8 L971.91 681.8 L971.35 681.8 L970.791 681.8 L970.232 681.8 L969.673 681.8 L969.113 681.8 L968.554 681.8 L967.995 681.8 L967.436 681.8 L966.876 681.8 L966.317 681.8 L965.758 681.8 L965.199 681.8 L964.639 681.8 L964.08 681.8 L963.521 681.8 L962.962 681.8 L962.402 681.8 L961.843 681.8 L961.284 681.8 L960.725 681.8 L960.165 681.8 L959.606 681.8 L959.047 681.8 L958.488 681.8 L957.928 681.8 L957.369 681.8 L956.81 681.8 L956.251 681.8 L955.691 681.8 L955.132 681.8 L954.573 681.8 L954.014 681.8 L953.454 681.8 L952.895 681.8 L952.336 681.8 L951.777 681.8 L951.217 681.8 L950.658 681.8 L950.099 681.8 L949.54 681.8 L948.98 681.8 L948.421 681.8 L947.862 681.8 L947.303 681.8 L946.743 681.8 L946.184 681.8 L945.625 681.8 L945.066 681.8 L944.506 681.8 L943.947 681.8 L943.388 681.8 L942.829 681.8 L942.269 681.8 L941.71 681.8 L941.151 681.8 L940.592 681.8 L940.032 681.8 L939.473 681.8 L938.914 681.8 L938.355 681.8 L937.795 681.8 L937.236 681.8 L936.677 681.8 L936.118 681.8 L935.558 681.8 L934.999 681.8 L934.44 681.8 L933.881 681.8 L933.321 681.8 L932.762 681.8 L932.203 681.8 L931.644 681.8 L931.084 681.8 L930.525 681.8 L929.966 681.8 L929.406 681.8 L928.847 681.8 L928.288 681.8 L927.729 681.8 L927.169 681.8 L926.61 681.8 L926.051 681.8 L925.492 681.8 L924.932 681.8 L924.373 681.8 L923.814 681.8 L923.255 681.8 L922.695 681.8 L922.136 681.8 L921.577 681.8 L921.018 681.8 L920.458 681.8 L919.899 681.8 L919.34 681.8 L918.781 681.8 L918.221 681.8 L917.662 681.8 L917.103 681.8 L916.544 681.8 L915.984 681.8 L915.425 681.8 L914.866 681.8 L914.307 681.8 L913.747 681.8 L913.188 681.8 L912.629 681.8 L912.07 681.8 L911.51 681.8 L910.951 681.8 L910.392 681.8 L909.833 681.8 L909.273 681.8 L908.714 681.8 L908.155 681.8 L907.596 681.8 L907.036 681.8 L906.477 681.8 L905.918 681.8 L905.359 681.8 L904.799 681.8 L904.24 681.8 L903.681 681.8 L903.122 681.8 L902.562 681.8 L902.003 681.8 L901.444 681.8 L900.885 681.8 L900.325 681.8 L899.766 681.8 L899.207 681.8 L898.648 681.8 L898.088 681.8 L897.529 681.8 L896.97 681.8 L896.411 681.8 L895.851 681.8 L895.292 681.8 L894.733 681.8 L894.174 681.8 L893.614 681.8 L893.055 681.8 L892.496 681.8 L891.937 681.8 L891.377 681.8 L890.818 681.8 L890.259 681.8 L889.7 681.8 L889.14 681.8 L888.581 681.8 L888.022 681.8 L887.463 681.8 L886.903 681.8 L886.344 681.8 L885.785 681.8 L885.226 681.8 L884.666 681.8 L884.107 681.8 L883.548 681.8 L882.989 681.8 L882.429 681.8 L881.87 681.8 L881.311 681.8 L880.752 681.8 L880.192 681.8 L879.633 681.8 L879.074 681.8 L878.515 681.8 L877.955 681.8 L877.396 681.8 L876.837 681.8 L876.278 681.8 L875.718 681.8 L875.159 681.8 L874.6 681.8 L874.041 681.8 L873.481 681.8 L872.922 681.8 L872.363 681.8 L871.804 681.8 L871.244 681.8 L870.685 681.8 L870.126 681.8 L869.567 681.8 L869.007 681.8 L868.448 681.8 L867.889 681.8 L867.33 681.8 L866.77 681.8 L866.211 681.8 L865.652 681.8 L865.093 681.8 L864.533 681.8 L863.974 681.8 L863.415 681.8 L862.856 681.8 L862.296 681.8 L861.737 681.8 L861.178 681.8 L860.619 681.8 L860.059 681.8 L859.5 681.8 L858.941 681.8 L858.382 681.8 L857.822 681.8 L857.263 681.8 L856.704 681.8 L856.145 681.8 L855.585 681.8 L855.026 681.8 L854.467 681.8 L853.908 681.8 L853.348 681.8 L852.789 681.8 L852.23 681.8 L851.671 681.8 L851.111 681.8 L850.552 681.8 L849.993 681.8 L849.434 681.8 L848.874 681.8 L848.315 681.8 L847.756 681.8 L847.197 681.8 L846.637 681.8 L846.078 681.8 L845.519 681.8 L844.96 681.8 L844.4 681.8 L843.841 681.8 L843.282 681.8 L842.723 681.8 L842.163 681.8 L841.604 681.8 L841.045 681.8 L840.486 681.8 L839.926 681.8 L839.367 681.8 L838.808 681.8 L838.249 681.8 L837.689 681.8 L837.13 681.8 L836.571 681.8 L836.012 681.8 L835.452 681.8 L834.893 681.8 L834.334 681.8 L833.775 681.8 L833.215 681.8 L832.656 681.8 L832.097 681.8 L831.538 681.8 L830.978 681.8 L830.419 681.8 L829.86 681.8 L829.301 681.8 L828.741 681.8 L828.182 681.8 L827.623 681.8 L827.064 681.8 L826.504 681.8 L825.945 681.8 L825.386 681.8 L824.827 681.8 L824.267 681.8 L823.708 681.8 L823.149 681.8 L822.59 681.8 L822.03 681.8 L821.471 681.8 L820.912 681.8 L820.353 681.8 L819.793 681.8 L819.234 681.8 L818.675 681.8 L818.116 681.8 L817.556 681.8 L816.997 681.8 L816.438 681.8 L815.879 681.8 L815.319 681.8 L814.76 681.8 L814.201 681.8 L813.642 681.8 L813.082 681.8 L812.523 681.8 L811.964 681.8 L811.405 681.8 L810.845 681.8 L810.286 681.8 L809.727 681.8 L809.168 681.8 L808.608 681.8 L808.049 681.8 L807.49 681.8 L806.931 681.8 L806.371 681.8 L805.812 681.8 L805.253 681.8 L804.693 681.8 L804.134 681.8 L803.575 681.8 L803.016 681.8 L802.456 681.8 L801.897 681.8 L801.338 681.8 L800.779 681.8 L800.219 681.8 L799.66 681.8 L799.101 681.8 L798.542 681.8 L797.982 681.8 L797.423 681.8 L796.864 681.8 L796.305 681.8 L795.745 681.8 L795.186 681.8 L794.627 681.8 L794.068 681.8 L793.508 681.8 L792.949 681.8 L792.39 681.8 L791.831 681.8 L791.271 681.8 L790.712 681.8 L790.153 681.8 L789.594 681.8 L789.034 681.8 L788.475 681.8 L787.916 681.8 L787.357 681.8 L786.797 681.8 L786.238 681.8 L785.679 681.8 L785.12 681.8 L784.56 681.8 L784.001 681.8 L783.442 681.8 L782.883 681.8 L782.323 681.8 L781.764 681.8 L781.205 681.8 L780.646 681.8 L780.086 681.8 L779.527 681.8 L778.968 681.8 L778.409 681.8 L777.849 681.8 L777.29 681.8 L776.731 681.8 L776.172 681.8 L775.612 681.8 L775.053 681.8 L774.494 681.8 L773.935 681.8 L773.375 681.8 L772.816 681.8 L772.257 681.8 L771.698 681.8 L771.138 681.8 L770.579 681.8 L770.02 681.8 L769.461 681.8 L768.901 681.8 L768.342 681.8 L767.783 681.8 L767.224 681.8 L766.664 681.8 L766.105 681.8 L765.546 681.8 L764.987 681.8 L764.427 681.8 L763.868 681.8 L763.309 681.8 L762.75 681.8 L762.19 681.8 L761.631 681.8 L761.072 681.8 L760.513 681.8 L759.953 681.8 L759.394 681.8 L758.835 681.8 L758.276 681.8 L757.716 681.8 L757.157 681.8 L756.598 681.8 L756.039 681.8 L755.479 681.8 L754.92 681.8 L754.361 681.8 L753.802 681.8 L753.242 681.8 L752.683 681.8 L752.124 681.8 L751.565 681.8 L751.005 681.8 L750.446 681.8 L749.887 681.8 L749.328 681.8 L748.768 681.8 L748.209 681.8 L747.65 681.8 L747.091 681.8 L746.531 681.8 L745.972 681.8 L745.413 681.8 L744.854 681.8 L744.294 681.8 L743.735 681.8 L743.176 681.8 L742.617 681.8 L742.057 681.8 L741.498 681.8 L740.939 681.8 L740.38 681.8 L739.82 681.8 L739.261 681.8 L738.702 681.8 L738.143 681.8 L737.583 681.8 L737.024 681.8 L736.465 681.8 L735.906 681.8 L735.346 681.8 L734.787 681.8 L734.228 681.8 L733.669 681.8 L733.109 681.8 L732.55 681.8 L731.991 681.8 L731.432 681.8 L730.872 681.8 L730.313 681.8 L729.754 681.8 L729.195 681.8 L728.635 681.8 L728.076 681.8 L727.517 681.8 L726.958 681.8 L726.398 681.8 L725.839 681.8 L725.28 681.8 L724.721 681.8 L724.161 681.8 L723.602 681.8 L723.043 681.8 L722.484 681.8 L721.924 681.8 L721.365 681.8 L720.806 681.8 L720.247 681.8  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.131 720.806,683.131 721.365,683.131 721.924,683.131 722.484,683.131 723.043,683.131 723.602,683.131 724.161,683.131 724.721,683.131 725.28,683.131 725.839,683.131 726.398,683.131 726.958,683.131 727.517,683.131 728.076,683.131 728.635,683.131 729.195,683.131 729.754,683.131 730.313,683.131 730.872,683.131 731.432,683.131 731.991,683.131 732.55,683.131 733.109,683.131 733.669,683.131 734.228,683.131 734.787,683.131 735.346,683.131 735.906,683.131 736.465,683.131 737.024,683.131 737.583,683.131 738.143,683.131 738.702,683.131 739.261,683.131 739.82,683.131 740.38,683.131 740.939,683.131 741.498,683.131 742.057,683.131 742.617,683.131 743.176,683.131 743.735,683.131 744.294,683.131 744.854,683.131 745.413,683.131 745.972,683.131 746.531,683.131 747.091,683.131 747.65,683.131 748.209,683.131 748.768,683.131 749.328,683.131 749.887,683.131 750.446,683.131 751.005,683.131 751.565,683.131 752.124,683.131 752.683,683.131 753.242,683.131 753.802,683.131 754.361,683.131 754.92,683.131 755.479,683.131 756.039,683.131 756.598,683.131 757.157,683.131 757.716,683.131 758.276,683.131 758.835,683.131 759.394,683.131 759.953,683.131 760.513,683.131 761.072,683.131 761.631,683.131 762.19,683.131 762.75,683.131 763.309,683.131 763.868,683.131 764.427,683.131 764.987,683.131 765.546,683.131 766.105,683.131 766.664,683.131 767.224,683.131 767.783,683.131 768.342,683.131 768.901,683.131 769.461,683.131 770.02,683.131 770.579,683.131 771.138,683.131 771.698,683.131 772.257,683.131 772.816,683.131 773.375,683.131 773.935,683.131 774.494,683.131 775.053,683.131 775.612,683.131 776.172,683.131 776.731,683.131 777.29,683.131 777.849,683.131 778.409,683.131 778.968,683.131 779.527,683.131 780.086,683.131 780.646,683.131 781.205,683.131 781.764,683.131 782.323,683.131 782.883,683.131 783.442,683.131 784.001,683.131 784.56,683.131 785.12,683.131 785.679,683.131 786.238,683.131 786.797,683.131 787.357,683.131 787.916,683.131 788.475,683.131 789.034,683.131 789.594,683.131 790.153,683.131 790.712,683.131 791.271,683.131 791.831,683.131 792.39,683.131 792.949,683.131 793.508,683.131 794.068,683.131 794.627,683.131 795.186,683.131 795.745,683.131 796.305,683.131 796.864,683.131 797.423,683.131 797.982,683.131 798.542,683.131 799.101,683.131 799.66,683.131 800.219,683.131 800.779,683.131 801.338,683.131 801.897,683.131 802.456,683.131 803.016,683.131 803.575,683.131 804.134,683.131 804.693,683.131 805.253,683.131 805.812,683.131 806.371,683.131 806.931,683.131 807.49,683.131 808.049,683.131 808.608,683.131 809.168,683.131 809.727,683.131 810.286,683.131 810.845,683.131 811.405,683.131 811.964,683.131 812.523,683.131 813.082,683.131 813.642,683.131 814.201,683.131 814.76,683.131 815.319,683.131 815.879,683.131 816.438,683.131 816.997,683.131 817.556,683.131 818.116,683.131 818.675,683.131 819.234,683.131 819.793,683.131 820.353,683.131 820.912,683.131 821.471,683.131 822.03,683.131 822.59,683.131 823.149,683.131 823.708,683.131 824.267,683.131 824.827,683.131 825.386,683.131 825.945,683.131 826.504,683.131 827.064,683.131 827.623,683.131 828.182,683.131 828.741,683.131 829.301,683.131 829.86,683.131 830.419,683.131 830.978,683.131 831.538,683.131 832.097,683.131 832.656,683.131 833.215,683.131 833.775,683.131 834.334,683.131 834.893,683.131 835.452,683.131 836.012,683.131 836.571,683.131 837.13,683.131 837.689,683.131 838.249,683.131 838.808,683.131 839.367,683.131 839.926,683.131 840.486,683.131 841.045,683.131 841.604,683.131 842.163,683.131 842.723,683.131 843.282,683.131 843.841,683.131 844.4,683.131 844.96,683.131 845.519,683.131 846.078,683.131 846.637,683.131 847.197,683.131 847.756,683.131 848.315,683.131 848.874,683.131 849.434,683.131 849.993,683.131 850.552,683.131 851.111,683.131 851.671,683.131 852.23,683.131 852.789,683.131 853.348,683.131 853.908,683.131 854.467,683.131 855.026,683.131 855.585,683.131 856.145,683.131 856.704,683.131 857.263,683.131 857.822,683.131 858.382,683.131 858.941,683.131 859.5,683.131 860.059,683.131 860.619,683.131 861.178,683.131 861.737,683.131 862.296,683.131 862.856,683.131 863.415,683.131 863.974,683.131 864.533,683.131 865.093,683.131 865.652,683.131 866.211,683.131 866.77,683.131 867.33,683.131 867.889,683.131 868.448,683.131 869.007,683.131 869.567,683.131 870.126,683.131 870.685,683.131 871.244,683.131 871.804,683.131 872.363,683.131 872.922,683.131 873.481,683.131 874.041,683.131 874.6,683.131 875.159,683.131 875.718,683.131 876.278,683.131 876.837,683.131 877.396,683.131 877.955,683.131 878.515,683.131 879.074,683.131 879.633,683.131 880.192,683.131 880.752,683.131 881.311,683.131 881.87,683.131 882.429,683.131 882.989,683.131 883.548,683.131 884.107,683.131 884.666,683.131 885.226,683.131 885.785,683.131 886.344,683.131 886.903,683.131 887.463,683.131 888.022,683.131 888.581,683.131 889.14,683.131 889.7,683.131 890.259,683.131 890.818,683.131 891.377,683.131 891.937,683.131 892.496,683.131 893.055,683.131 893.614,683.131 894.174,683.131 894.733,683.131 895.292,683.131 895.851,683.131 896.411,683.131 896.97,683.131 897.529,683.131 898.088,683.131 898.648,683.131 899.207,683.131 899.766,683.131 900.325,683.131 900.885,683.131 901.444,683.131 902.003,683.131 902.562,683.131 903.122,683.131 903.681,683.131 904.24,683.131 904.799,683.131 905.359,683.131 905.918,683.131 906.477,683.131 907.036,683.131 907.596,683.131 908.155,683.131 908.714,683.131 909.273,683.131 909.833,683.131 910.392,683.131 910.951,683.131 911.51,683.131 912.07,683.131 912.629,683.131 913.188,683.131 913.747,683.131 914.307,683.131 914.866,683.131 915.425,683.131 915.984,683.131 916.544,683.131 917.103,683.131 917.662,683.131 918.221,683.131 918.781,683.131 919.34,683.131 919.899,683.131 920.458,683.131 921.018,683.131 921.577,683.131 922.136,683.131 922.695,683.131 923.255,683.131 923.814,683.131 924.373,683.131 924.932,683.131 925.492,683.131 926.051,683.131 926.61,683.131 927.169,683.131 927.729,683.131 928.288,683.131 928.847,683.131 929.406,683.131 929.966,683.131 930.525,683.131 931.084,683.131 931.644,683.131 932.203,683.131 932.762,683.131 933.321,683.131 933.881,683.131 934.44,683.131 934.999,683.131 935.558,683.131 936.118,683.131 936.677,683.131 937.236,683.131 937.795,683.131 938.355,683.131 938.914,683.131 939.473,683.131 940.032,683.131 940.592,683.131 941.151,683.131 941.71,683.131 942.269,683.131 942.829,683.131 943.388,683.131 943.947,683.131 944.506,683.131 945.066,683.131 945.625,683.131 946.184,683.131 946.743,683.131 947.303,683.131 947.862,683.131 948.421,683.131 948.98,683.131 949.54,683.131 950.099,683.131 950.658,683.131 951.217,683.131 951.777,683.131 952.336,683.131 952.895,683.131 953.454,683.131 954.014,683.131 954.573,683.131 955.132,683.131 955.691,683.131 956.251,683.131 956.81,683.131 957.369,683.131 957.928,683.131 958.488,683.131 959.047,683.131 959.606,683.131 960.165,683.131 960.725,683.131 961.284,683.131 961.843,683.131 962.402,683.131 962.962,683.131 963.521,683.131 964.08,683.131 964.639,683.131 965.199,683.131 965.758,683.131 966.317,683.131 966.876,683.131 967.436,683.131 967.995,683.131 968.554,683.131 969.113,683.131 969.673,683.131 970.232,683.131 970.791,683.131 971.35,683.131 971.91,683.131 972.469,683.131 973.028,683.131 973.587,683.131 974.147,683.131 974.706,683.131 975.265,683.131 975.824,683.131 976.384,683.131 976.943,683.131 977.502,683.131 978.061,683.131 978.621,683.131 979.18,683.131 979.739,683.131 980.298,683.131 980.858,683.131 981.417,683.131 981.976,683.131 982.535,683.131 983.095,683.131 983.654,683.131 984.213,683.131 984.772,683.131 985.332,683.131 985.891,683.131 986.45,683.131 987.009,683.131 987.569,683.131 988.128,683.131 988.687,683.131 989.246,683.131 989.806,683.131 990.365,683.131 990.924,683.131 991.483,683.131 992.043,683.131 992.602,683.131 993.161,683.131 993.72,683.131 994.28,683.131 994.839,683.131 995.398,683.131 995.957,683.131 996.517,683.131 997.076,683.131 997.635,683.131 998.194,683.131 998.754,683.131 999.313,683.131 999.872,683.131 1000.43,683.131 1000.99,683.131 1001.55,683.131 1002.11,683.131 1002.67,683.131 1003.23,683.131 1003.79,683.131 1004.35,683.131 1004.91,683.131 1005.46,683.131 1006.02,683.131 1006.58,683.131 1007.14,683.131 1007.7,683.131 1008.26,683.131 1008.82,683.131 1009.38,683.131 1009.94,683.131 1010.5,683.131 1011.06,683.131 1011.62,683.131 1012.18,683.131 1012.73,683.131 1013.29,683.131 1013.85,683.131 1014.41,683.131 1014.97,683.131 1015.53,683.131 1016.09,683.131 1016.65,683.131 1017.21,683.131 1017.77,683.131 1018.33,683.131 1018.89,683.131 1019.45,683.131 1020.01,683.131 1020.56,683.131 1021.12,683.131 1021.68,683.131 1022.24,683.131 1022.8,683.131 1023.36,683.131 1023.92,683.131 1024.48,683.131 1025.04,683.131 1025.6,683.131 1026.16,683.131 1026.72,683.131 1027.28,683.131 1027.83,683.131 1028.39,683.131 1028.95,683.131 1029.51,683.131 1030.07,683.131 1030.63,683.131 1031.19,683.131 1031.75,683.131 1032.31,683.131 1032.87,683.131 1033.43,683.131 1033.99,683.131 1034.55,683.131 1035.1,683.131 1035.66,683.131 1036.22,683.131 1036.78,683.131 1037.34,683.131 1037.9,683.131 1038.46,683.131 1039.02,683.131 1039.58,683.131 1040.14,683.131 1040.7,683.131 1041.26,683.131 1041.82,683.131 1042.38,683.131 1042.93,683.131 1043.49,683.131 1044.05,683.131 1044.61,683.131 1045.17,683.131 1045.73,683.131 1046.29,683.131 1046.85,683.131 1047.41,683.131 1047.97,683.131 1048.53,683.131 1049.09,683.131 1049.65,683.131 1050.2,683.131 1050.76,683.131 1051.32,683.131 1051.88,683.131 1052.44,683.131 1053,683.131 1053.56,683.131 1054.12,683.131 1054.68,683.131 1055.24,683.131 1055.8,683.131 1056.36,683.131 1056.92,683.131 1057.48,683.131 1058.03,683.131 1058.59,683.131 1059.15,683.131 1059.71,683.131 1060.27,683.131 1060.83,683.131 1061.39,683.131 1061.95,683.131 1062.51,683.131 1063.07,683.131 1063.63,683.131 1064.19,683.131 1064.75,683.131 1065.3,683.131 1065.86,683.131 1066.42,683.131 1066.98,683.131 1067.54,683.131 1068.1,683.131 1068.66,683.131 1069.22,683.131 1069.78,683.131 1070.34,683.131 1070.9,683.131 1071.46,683.131 1072.02,683.131 1072.57,683.131 1073.13,683.131 1073.69,683.131 1074.25,683.131 1074.81,683.131 1075.37,683.131 1075.93,683.131 1076.49,683.131 1077.05,683.131 1077.61,683.131 1078.17,683.131 1078.73,683.131 1079.29,683.131 1079.85,683.131 1080.4,683.131 1080.96,683.131 1081.52,683.131 1082.08,683.131 1082.64,683.131 1083.2,683.131 1083.76,683.131 1084.32,683.131 1084.88,683.131 1085.44,683.131 1086,683.131 1086.56,683.131 1087.12,683.131 1087.67,683.131 1088.23,683.131 1088.79,683.131 1089.35,683.131 1089.91,683.131 1090.47,683.131 1091.03,683.131 1091.59,683.131 1092.15,683.131 1092.71,683.131 1093.27,683.131 1093.83,683.131 1094.39,683.131 1094.94,683.131 1095.5,683.131 1096.06,683.131 1096.62,683.131 1097.18,683.131 1097.74,683.131 1098.3,683.131 1098.86,683.131 1099.42,683.131 1099.98,683.131 1100.54,683.131 1101.1,683.131 1101.66,683.131 1102.22,683.131 1102.77,683.131 1103.33,683.131 1103.89,683.131 1104.45,683.131 1105.01,683.131 1105.57,683.131 1106.13,683.131 1106.69,683.131 1107.25,683.131 1107.81,683.131 1108.37,683.131 1108.93,683.131 1109.49,683.131 1110.04,683.131 1110.6,683.131 1111.16,683.131 1111.72,683.131 1112.28,683.131 1112.84,683.131 1113.4,683.131 1113.96,683.131 1114.52,683.131 1115.08,683.131 1115.64,683.131 1116.2,683.131 1116.76,683.131 1117.31,683.131 1117.87,683.131 1118.43,683.131 1118.99,683.131 1119.55,683.131 1120.11,683.131 1120.67,683.131 1121.23,683.131 1121.79,683.131 1122.35,683.131 1122.91,683.131 1123.47,683.131 1124.03,683.131 1124.59,683.131 1125.14,683.131 1125.7,683.131 1126.26,683.131 1126.82,683.131 1127.38,683.131 1127.94,683.131 1128.5,683.131 1129.06,683.131 1129.62,683.131 1130.18,683.131 1130.74,683.131 1131.3,683.131 1131.86,683.131 1132.41,683.131 1132.97,683.131 1133.53,683.131 1134.09,683.131 1134.65,683.131 1135.21,683.131 1135.77,683.131 1136.33,683.131 1136.89,683.131 1137.45,683.131 1138.01,683.131 1138.57,683.131 1139.13,683.131 1139.68,683.131 1140.24,683.131 1140.8,683.131 1141.36,683.131 1141.92,683.131 1142.48,683.131 1143.04,683.131 1143.6,683.131 1144.16,683.131 1144.72,683.131 1145.28,683.131 1145.84,683.131 1146.4,683.131 1146.96,683.131 1147.51,683.131 1148.07,683.131 1148.63,683.131 1149.19,683.131 1149.75,683.131 1150.31,683.131 1150.87,683.131 1151.43,683.131 1151.99,683.131 1152.55,683.131 1153.11,683.131 1153.67,683.131 1154.23,683.131 1154.78,683.131 1155.34,683.131 1155.9,683.131 1156.46,683.131 1157.02,683.131 1157.58,683.131 1158.14,683.131 1158.7,683.131 1159.26,683.131 1159.82,683.131 1160.38,683.131 1160.94,683.131 1161.5,683.131 1162.05,683.131 1162.61,683.131 1163.17,683.131 1163.73,683.131 1164.29,683.131 1164.85,683.131 1165.41,683.131 1165.97,683.131 1166.53,683.131 1167.09,683.131 1167.65,683.131 1168.21,683.131 1168.77,683.131 1169.33,683.131 1169.88,683.131 1170.44,683.131 1171,683.131 1171.56,683.131 1172.12,683.131 1172.68,683.131 1173.24,683.131 1173.8,683.131 1174.36,683.131 1174.92,683.131 1175.48,683.131 1176.04,683.131 1176.6,683.131 1177.15,683.131 1177.71,683.131 1178.27,683.131 1178.83,683.131 1179.39,683.131 1179.95,683.131 1180.51,683.131 1181.07,683.131 1181.63,683.131 1182.19,683.131 1182.75,683.131 1183.31,683.131 1183.87,683.131 1184.43,683.131 1184.98,683.131 1185.54,683.131 1186.1,683.131 1186.66,683.131 1187.22,683.131 1187.78,683.131 1188.34,683.131 1188.9,683.131 1189.46,683.131 1190.02,683.131 1190.58,683.131 1191.14,683.131 1191.7,683.131 1192.25,683.131 1192.81,683.131 1193.37,683.131 1193.93,683.131 1194.49,683.131 1195.05,683.131 1195.61,683.131 1196.17,683.131 1196.73,683.131 1197.29,683.131 1197.85,683.131 1198.41,683.131 1198.97,683.131 1199.52,683.131 1200.08,683.131 1200.64,683.131 1201.2,683.131 1201.76,683.131 1202.32,683.131 1202.88,683.131 1203.44,683.131 1204,683.131 1204.56,683.131 1205.12,683.131 1205.68,683.131 1206.24,683.131 1206.8,683.131 1207.35,683.131 1207.91,683.131 1208.47,683.131 1209.03,683.131 1209.59,683.131 1210.15,683.131 1210.71,683.131 1211.27,683.131 1211.83,683.131 1212.39,683.131 1212.95,683.131 1213.51,683.131 1214.07,683.131 1214.62,683.131 1215.18,683.131 1215.74,683.131 1216.3,683.131 1216.86,683.131 1217.42,683.131 1217.98,683.131 1218.54,683.131 1219.1,683.131 1219.66,683.131 1220.22,683.131 1220.78,683.131 1221.34,683.131 1221.89,683.131 1222.45,683.131 1223.01,683.131 1223.57,683.131 1224.13,683.131 1224.69,683.131 1225.25,683.131 1225.81,683.131 1226.37,683.131 1226.93,683.131 1227.49,683.131 1228.05,683.131 1228.61,683.131 1229.17,683.131 1229.72,683.131 1230.28,683.131 1230.84,683.131 1231.4,683.131 1231.96,683.131 1232.52,683.131 1233.08,683.131 1233.64,683.131 1234.2,683.131 1234.76,683.131 1235.32,683.131 1235.88,683.131 1236.44,683.131 1236.99,683.131 1237.55,683.131 1238.11,683.131 1238.67,683.131 1239.23,683.131 1239.79,683.131 1240.35,683.131 1240.91,683.131 1241.47,683.131 1242.03,683.131 1242.59,683.131 1243.15,683.131 1243.71,683.131 1244.26,683.131 1244.82,683.131 1245.38,683.131 1245.94,683.131 1246.5,683.131 1247.06,683.131 1247.62,683.131 1248.18,683.131 1248.74,683.131 1249.3,683.131 1249.86,683.131 1250.42,683.131 1250.98,683.131 1251.54,683.131 1252.09,683.131 1252.65,683.131 1253.21,683.131 1253.77,683.131 1254.33,683.131 1254.89,683.131 1255.45,683.131 1256.01,683.131 1256.57,683.131 1257.13,683.131 1257.69,683.131 1258.25,683.131 1258.81,683.131 1259.36,683.131 1259.92,683.131 1260.48,683.131 1261.04,683.131 1261.6,683.131 1262.16,683.131 1262.72,683.131 1263.28,683.131 1263.84,683.131 1264.4,683.131 1264.96,683.131 1265.52,683.131 1266.08,683.131 1266.63,683.131 1267.19,683.131 1267.75,683.131 1268.31,683.131 1268.87,683.131 1269.43,683.131 1269.99,683.131 1270.55,683.131 1271.11,683.131 1271.67,683.131 1272.23,683.131 1272.79,683.131 1273.35,683.131 1273.91,683.131 1274.46,683.131 1275.02,683.131 1275.58,683.131 1276.14,683.131 1276.7,683.131 1277.26,683.131 1277.82,683.131 1278.38,683.131 1278.94,683.131 1279.5,683.131 1280.06,683.131 1280.62,683.131 1281.18,683.131 1281.73,683.131 1282.29,683.131 1282.85,683.131 1283.41,683.131 1283.97,683.131 1284.53,683.131 1285.09,683.131 1285.65,683.131 1286.21,683.131 1286.77,683.131 1287.33,683.131 1287.89,683.131 1288.45,683.131 1289,683.131 1289.56,683.131 1290.12,683.131 1290.68,683.131 1291.24,683.131 1291.8,683.131 1292.36,683.131 1292.92,683.131 1293.48,683.131 1294.04,683.131 1294.6,683.131 1295.16,683.131 1295.72,683.131 1296.28,683.131 1296.83,683.131 1297.39,683.131 1297.95,683.131 1298.51,683.131 1299.07,683.131 1299.63,683.131 1300.19,683.131 1300.75,683.131 1301.31,683.131 1301.87,683.131 1302.43,683.131 1302.99,683.131 1303.55,683.131 1304.1,683.131 1304.66,683.131 1305.22,683.131 1305.78,683.131 1306.34,683.131 1306.9,683.131 1307.46,683.131 1308.02,683.131 1308.58,683.131 1309.14,683.131 1309.7,683.131 1310.26,683.131 1310.82,683.131 1311.38,683.131 1311.93,683.131 1312.49,683.131 1313.05,683.131 1313.61,683.131 1314.17,683.131 1314.73,683.131 1315.29,683.131 1315.85,683.131 1316.41,683.131 1316.97,683.131 1317.53,683.131 1318.09,683.131 1318.65,683.131 1319.2,683.131 1319.76,683.131 1320.32,683.131 1320.88,683.131 1321.44,683.131 1322,683.131 1322.56,683.131 1323.12,683.131 1323.68,683.131 1324.24,683.131 1324.8,683.131 1325.36,683.131 1325.92,683.131 1326.47,683.131 1327.03,683.131 1327.59,683.131 1328.15,683.131 1328.71,683.131 1329.27,683.131 1329.83,683.131 1330.39,683.131 1330.95,683.131 1331.51,683.131 1332.07,683.131 1332.63,683.131 1333.19,683.131 1333.75,683.131 1334.3,683.131 1334.86,683.131 1335.42,683.131 1335.98,683.131 1336.54,683.131 1337.1,683.131 1337.66,683.131 1338.22,683.131 1338.78,683.131 1339.34,683.131 1339.9,683.131 1340.46,683.131 1341.02,683.131 1341.57,683.131 1342.13,683.131 1342.69,683.131 1343.25,683.131 1343.81,683.131 1344.37,683.131 1344.93,683.131 1345.49,683.131 1346.05,683.131 1346.61,683.131 1347.17,683.131 1347.73,683.131 1348.29,683.131 1348.84,683.131 1349.4,683.131 1349.96,683.131 1350.52,683.131 1351.08,683.131 1351.64,683.131 1352.2,683.131 1352.76,683.131 1353.32,683.131 1353.88,683.131 1354.44,683.131 1355,683.131 1355.56,683.131 1356.12,683.131 1356.67,683.131 1357.23,683.131 1357.79,683.131 1358.35,683.131 1358.91,683.131 1359.47,683.131 1360.03,683.131 1360.59,683.131 1361.15,683.131 1361.71,683.131 1362.27,683.131 1362.83,683.131 1363.39,683.131 1363.94,683.131 1364.5,683.131 1365.06,683.131 1365.62,683.131 1366.18,683.131 1366.74,683.131 1367.3,683.131 1367.86,683.131 1368.42,683.131 1368.98,683.131 1369.54,683.131 1370.1,683.131 1370.66,683.131 1371.21,683.131 1371.77,683.131 1372.33,683.131 1372.89,683.131 1373.45,683.131 1374.01,683.131 1374.57,683.131 1375.13,683.131 1375.69,683.131 1376.25,683.131 1376.81,683.131 1377.37,683.131 1377.93,683.131 1378.49,683.131 1379.04,683.131 1379.6,683.131 1380.16,683.131 1380.72,683.131 1381.28,683.131 1381.84,683.131 1382.4,683.131 1382.96,683.131 1383.52,683.131 1384.08,683.131 1384.64,683.131 1385.2,683.131 1385.76,683.131 1386.31,683.131 1386.87,683.131 1387.43,683.131 1387.99,683.131 1388.55,683.131 1389.11,683.131 1389.67,683.131 1390.23,683.131 1390.79,683.131 1391.35,683.131 1391.91,683.131 1392.47,683.131 1393.03,683.131 1393.58,683.131 1394.14,683.131 1394.7,683.131 1395.26,683.131 1395.82,683.131 1396.38,683.131 1396.94,683.131 1397.5,683.131 1398.06,683.131 1398.62,683.131 1399.18,683.131 1399.74,683.131 1400.3,683.131 1400.86,683.131 1401.41,683.131 1401.97,683.131 1402.53,683.131 1403.09,683.131 1403.65,683.131 1404.21,683.131 1404.77,683.131 1405.33,683.131 1405.89,683.131 1406.45,683.131 1407.01,683.131 1407.57,683.131 1408.13,683.131 1408.68,683.131 1409.24,683.131 1409.8,683.131 1410.36,683.131 1410.92,683.131 1411.48,683.131 1412.04,683.131 1412.6,683.131 1413.16,683.131 1413.72,683.131 1414.28,683.131 1414.84,683.131 1415.4,683.131 1415.95,683.131 1416.51,683.131 1417.07,683.131 1417.63,683.131 1418.19,683.131 1418.75,683.131 1419.31,683.131 1419.87,683.131 1420.43,683.131 1420.99,683.131 1421.55,683.131 1422.11,683.131 1422.67,683.131 1423.23,683.131 1423.78,683.131 1424.34,683.131 1424.9,683.131 1425.46,683.131 1426.02,683.131 1426.58,683.131 1427.14,683.131 1427.7,683.131 1428.26,683.131 1428.82,683.131 1429.38,683.131 1429.94,683.131 1430.5,683.131 1431.05,683.131 1431.61,683.131 1432.17,683.131 1432.73,683.131 1433.29,683.131 1433.85,683.131 1434.41,683.131 1434.97,683.131 1435.53,683.131 1436.09,683.131 1436.65,683.131 1437.21,683.131 1437.77,683.131 1438.33,683.131 1438.88,683.131 1439.44,683.131 1440,683.131 1440.56,683.131 1441.12,683.131 1441.68,683.131 1442.24,683.131 1442.8,683.131 1443.36,683.131 1443.92,683.131 1444.48,683.131 1445.04,683.131 1445.6,683.131 1446.15,683.131 1446.71,683.131 1447.27,683.131 1447.83,683.131 1448.39,683.131 1448.95,683.131 1449.51,683.131 1450.07,683.131 1450.63,683.131 1451.19,683.131 1451.75,683.131 1452.31,683.131 1452.87,683.131 1453.42,683.131 1453.98,683.131 1454.54,683.131 1455.1,683.131 1455.66,683.131 1456.22,683.131 1456.78,683.131 1457.34,683.131 1457.9,683.131 1458.46,683.131 1459.02,683.131 1459.58,683.131 1460.14,683.131 1460.7,683.131 1461.25,683.131 1461.81,683.131 1462.37,683.131 1462.93,683.131 1463.49,683.131 1464.05,683.131 1464.61,683.131 1465.17,683.131 1465.73,683.131 1466.29,683.131 1466.85,683.131 1467.41,683.131 1467.97,683.131 1468.52,683.131 1469.08,683.131 1469.64,683.131 1470.2,683.131 1470.76,683.131 1471.32,683.131 1471.88,683.131 1472.44,683.131 1473,683.131 1473.56,683.131 1474.12,683.131 1474.68,683.131 1475.24,683.131 1475.79,683.131 1476.35,683.131 1476.91,683.131 1477.47,683.131 1478.03,683.131 1478.59,683.131 1479.15,683.131 1479.71,683.131 1480.27,683.131 1480.83,683.131 1481.39,683.131 1481.95,683.131 1482.51,683.131 1483.07,683.131 1483.62,683.131 1484.18,683.131 1484.74,683.131 1485.3,683.131 1485.86,683.131 1486.42,683.131 1486.98,683.131 1487.54,683.131 1488.1,683.131 1488.66,683.131 1489.22,683.131 1489.78,683.131 1490.34,683.131 1490.89,683.131 1491.45,683.131 1492.01,683.131 1492.57,683.131 1493.13,683.131 1493.69,683.131 1494.25,683.131 1494.81,683.131 1495.37,683.131 1495.93,683.131 1496.49,683.131 1497.05,683.131 1497.61,683.131 1498.16,683.131 1498.72,683.131 1499.28,683.131 1499.84,683.131 1500.4,683.131 1500.96,683.131 1501.52,683.131 1502.08,683.131 1502.64,683.131 1503.2,683.131 1503.76,683.131 1504.32,683.131 1504.88,683.131 1505.44,683.131 1505.99,683.131 1506.55,683.131 1507.11,683.131 1507.67,683.131 1508.23,683.131 1508.79,683.131 1509.35,683.131 1509.91,683.131 1510.47,683.131 1511.03,683.131 1511.59,683.131 1512.15,683.131 1512.71,683.131 1513.26,683.131 1513.82,683.131 1514.38,683.131 1514.94,683.131 1515.5,683.131 1516.06,683.131 1516.62,683.131 1517.18,683.131 1517.74,683.131 1518.3,683.131 1518.86,683.131 1519.42,683.131 1519.98,683.131 1520.53,683.131 1521.09,683.131 1521.65,683.131 1522.21,683.131 1522.77,683.131 1523.33,683.131 1523.89,683.131 1524.45,683.131 1525.01,683.131 1525.57,683.131 1526.13,683.131 1526.69,683.131 1527.25,683.131 1527.81,683.131 1528.36,683.131 1528.92,683.131 1529.48,683.131 1530.04,683.131 1530.6,683.131 1531.16,683.131 1531.72,683.131 1532.28,683.131 1532.84,683.131 1533.4,683.131 1533.96,683.131 1534.52,683.131 1535.08,683.131 1535.63,683.131 1536.19,683.131 1536.75,683.131 1537.31,683.131 1537.87,683.131 1538.43,683.131 1538.99,683.131 1539.55,683.131 1540.11,683.131 1540.67,683.131 1541.23,683.131 1541.79,683.131 1542.35,683.131 1542.9,683.131 1543.46,683.131 1544.02,683.131 1544.58,683.131 1545.14,683.131 1545.7,683.131 1546.26,683.131 1546.82,683.131 1547.38,683.131 1547.94,683.131 1548.5,683.131 1549.06,683.131 1549.62,683.131 1550.18,683.131 1550.73,683.131 1551.29,683.131 1551.85,683.131 1552.41,683.131 1552.97,683.131 1553.53,683.131 1554.09,683.131 1554.65,683.131 1555.21,683.131 1555.77,683.131 1556.33,683.131 1556.89,683.131 1557.45,683.131 1558,683.131 1558.56,683.131 1559.12,683.131 1559.68,683.131 1560.24,683.131 1560.8,683.131 1561.36,683.131 1561.92,683.131 1562.48,683.131 1563.04,683.131 1563.6,683.131 1564.16,683.131 1564.72,683.131 1565.28,683.131 1565.83,683.131 1566.39,683.131 1566.95,683.131 1567.51,683.131 1568.07,683.131 1568.63,683.131 1569.19,683.131 1569.75,683.131 1570.31,683.131 1570.87,683.131 1571.43,683.131 1571.99,683.131 1572.55,683.131 1573.1,683.131 1573.66,683.131 1574.22,683.131 1574.78,683.131 1575.34,683.131 1575.9,683.131 1576.46,683.131 1577.02,683.131 1577.58,683.131 1578.14,683.131 1578.7,683.131 1579.26,683.131 1579.82,683.131 1580.37,683.131 1580.93,683.131 1581.49,683.131 1582.05,683.131 1582.61,683.131 1583.17,683.131 1583.73,683.131 1584.29,683.131 1584.85,683.131 1585.41,683.131 1585.97,683.131 1586.53,683.131 1587.09,683.131 1587.65,683.131 1588.2,683.131 1588.76,683.131 1589.32,683.131 1589.88,683.131 1590.44,683.131 1591,683.131 1591.56,683.131 1592.12,683.131 1592.68,683.131 1593.24,683.131 1593.8,683.131 1594.36,683.131 1594.92,683.131 1595.47,683.131 1596.03,683.131 1596.59,683.131 1597.15,683.131 1597.71,683.131 1598.27,683.131 1598.83,683.131 1599.39,683.131 1599.95,683.131 1600.51,683.131 1601.07,683.131 1601.63,683.131 1602.19,683.131 1602.74,683.131 1603.3,683.131 1603.86,683.131 1604.42,683.131 1604.98,683.131 1605.54,683.131 1606.1,683.131 1606.66,683.131 1607.22,683.131 1607.78,683.131 1608.34,683.131 1608.9,683.131 1609.46,683.131 1610.02,683.131 1610.57,683.131 1611.13,683.131 1611.69,683.131 1612.25,683.131 1612.81,683.131 1613.37,683.131 1613.93,683.131 1614.49,683.131 1615.05,683.131 1615.61,683.131 1616.17,683.131 1616.73,683.131 1617.29,683.131 1617.84,683.131 1618.4,683.131 1618.96,683.131 1619.52,683.131 1620.08,683.131 1620.64,683.131 1621.2,683.131 1621.76,683.131 1622.32,683.131 1622.88,683.131 1623.44,683.131 1624,683.131 1624.56,683.131 1625.11,683.131 1625.67,683.131 1626.23,683.131 1626.79,683.131 1627.35,683.131 1627.91,683.131 1628.47,683.131 1629.03,683.131 1629.59,683.131 1630.15,683.131 1630.71,683.131 1631.27,683.131 1631.83,683.131 1632.39,683.131 1632.94,683.131 1633.5,683.131 1634.06,683.131 1634.62,683.131 1635.18,683.131 1635.74,683.131 1636.3,683.131 1636.86,683.131 1637.42,683.131 1637.98,683.131 1638.54,683.131 1639.1,683.131 1639.66,683.131 1640.21,683.131 1640.77,683.131 1641.33,683.131 1641.89,683.131 1642.45,683.131 1643.01,683.131 1643.57,683.131 1644.13,683.131 1644.69,683.131 1645.25,683.131 1645.81,683.131 1646.37,683.131 1646.93,683.131 1647.48,683.131 1648.04,683.131 1648.6,683.131 1649.16,683.131 1649.72,683.131 1650.28,683.131 1650.84,683.131 1651.4,683.131 1651.96,683.131 1652.52,683.131 1653.08,683.131 1653.64,683.131 1654.2,683.131 1654.76,683.131 1655.31,683.131 1655.87,683.131 1656.43,683.131 1656.99,683.131 1657.55,683.131 1658.11,683.131 1658.67,683.131 1659.23,683.131 1659.79,683.131 1660.35,683.131 1660.91,683.131 1661.47,683.131 1662.03,683.131 1662.58,683.131 1663.14,683.131 1663.7,683.131 1664.26,683.131 1664.82,683.131 1665.38,683.131 1665.94,683.131 1666.5,683.131 1667.06,683.131 1667.62,683.131 1668.18,683.131 1668.74,683.131 1669.3,683.131 1669.85,683.131 1670.41,683.131 1670.97,683.131 1671.53,683.131 1672.09,683.131 1672.65,683.131 1673.21,683.131 1673.77,683.131 1674.33,683.131 1674.89,683.131 1675.45,683.131 1676.01,683.131 1676.57,683.131 1677.13,683.131 1677.68,683.131 1678.24,683.131 1678.8,683.131 1679.36,683.131 1679.92,683.131 1680.48,683.131 1681.04,683.131 1681.6,683.131 1682.16,683.131 1682.72,683.131 1683.28,683.131 1683.84,683.131 1684.4,683.131 1684.95,683.131 1685.51,683.131 1686.07,683.131 1686.63,683.131 1687.19,683.131 1687.75,683.131 1688.31,683.131 1688.87,683.131 1689.43,683.131 1689.99,683.131 1690.55,683.131 1691.11,683.131 1691.67,683.131 1692.23,683.131 1692.78,683.131 1693.34,683.131 1693.9,683.131 1694.46,683.131 1695.02,683.131 1695.58,683.131 1696.14,683.131 1696.7,683.131 1697.26,683.131 1697.82,683.131 1698.38,683.131 1698.94,683.131 1699.5,683.131 1700.05,683.131 1700.61,683.131 1701.17,683.131 1701.73,683.131 1702.29,683.131 1702.85,683.131 1703.41,683.131 1703.97,683.131 1704.53,683.131 1705.09,683.131 1705.65,683.131 1706.21,683.131 1706.77,683.131 1707.32,683.131 1707.88,683.131 1708.44,683.131 1709,683.131 1709.56,683.131 1710.12,683.131 1710.68,683.131 1711.24,683.131 1711.8,683.131 1712.36,683.131 1712.92,683.131 1713.48,683.131 1714.04,683.131 1714.6,683.131 1715.15,683.131 1715.71,683.131 1716.27,683.131 1716.83,683.131 1717.39,683.131 1717.95,683.131 1718.51,683.131 1719.07,683.131 1719.63,683.131 1720.19,683.131 1720.75,683.131 1721.31,683.131 1721.87,683.131 1722.42,683.131 1722.98,683.131 1723.54,683.131 1724.1,683.131 1724.66,683.131 1725.22,683.131 1725.78,683.131 1726.34,683.131 1726.9,683.131 1727.46,683.131 1728.02,683.131 1728.58,683.131 1729.14,683.131 1729.69,683.131 1730.25,683.131 1730.81,683.131 1731.37,683.131 1731.93,683.131 1732.49,683.131 1733.05,683.131 1733.61,683.131 1734.17,683.131 1734.73,683.131 1735.29,683.131 1735.85,683.131 1736.41,683.131 1736.97,683.131 1737.52,683.131 1738.08,683.131 1738.64,683.131 1739.2,683.131 1739.76,683.131 1740.32,683.131 1740.88,683.131 1741.44,683.131 1742,683.131 1742.56,683.131 1743.12,683.131 1743.68,683.131 1744.24,683.131 1744.79,683.131 1745.35,683.131 1745.91,683.131 1746.47,683.131 1747.03,683.131 1747.59,683.131 1748.15,683.131 1748.71,683.131 1749.27,683.131 1749.83,683.131 1750.39,683.131 1750.95,683.131 1751.51,683.131 1752.06,683.131 1752.62,683.131 1753.18,683.131 1753.74,683.131 1754.3,683.131 1754.86,683.131 1755.42,683.131 1755.98,683.131 1756.54,683.131 1757.1,683.131 1757.66,683.131 1758.22,683.131 1758.78,683.131 1759.34,683.131 1759.89,683.131 1760.45,683.131 1761.01,683.131 1761.57,683.131 1762.13,683.131 1762.69,683.131 1763.25,683.131 1763.81,683.131 1764.37,683.131 1764.93,683.131 1765.49,683.131 1766.05,683.131 1766.61,683.131 1767.16,683.131 1767.72,683.131 1768.28,683.131 1768.84,683.131 1769.4,683.131 1769.96,683.131 1770.52,683.131 1771.08,683.131 1771.64,683.131 1772.2,683.131 1772.76,683.131 1773.32,683.131 1773.88,683.131 1774.43,683.131 1774.99,683.131 1775.55,683.131 1776.11,683.131 1776.67,683.131 1777.23,683.131 1777.79,683.131 1778.35,683.131 1778.91,683.131 1779.47,683.131 1780.03,683.131 1780.59,683.131 1781.15,683.131 1781.71,683.131 1782.26,683.131 1782.82,683.131 1783.38,683.131 1783.94,683.131 1784.5,683.131 1785.06,683.131 1785.62,683.131 1786.18,683.131 1786.74,683.131 1787.3,683.131 1787.86,683.131 1788.42,683.131 1788.98,683.131 1789.53,683.131 1790.09,683.131 1790.65,683.131 1791.21,683.131 1791.77,683.131 1792.33,683.131 1792.89,683.131 1793.45,683.131 1794.01,683.131 1794.57,683.131 1795.13,683.131 1795.69,683.131 1796.25,683.131 1796.8,683.131 1797.36,683.131 1797.92,683.131 1798.48,683.131 1799.04,683.131 1799.6,683.131 1800.16,683.131 1800.72,683.131 1801.28,683.131 1801.84,683.131 1802.4,683.131 1802.96,683.131 1803.52,683.131 1804.08,683.131 1804.63,683.131 1805.19,683.131 1805.75,683.131 1806.31,683.131 1806.87,683.131 1807.43,683.131 1807.99,683.131 1808.55,683.131 1809.11,683.131 1809.67,683.131 1810.23,683.131 1810.79,683.131 1811.35,683.131 1811.9,683.131 1812.46,683.131 1813.02,683.131 1813.58,683.131 1814.14,683.131 1814.7,683.131 1815.26,683.131 1815.82,683.131 1816.38,683.131 1816.94,683.131 1817.5,683.131 1818.06,683.131 1818.62,683.131 1819.18,683.131 1819.73,683.131 1820.29,683.131 1820.85,683.131 1821.41,683.131 1821.97,683.131 1822.53,683.131 1823.09,683.131 1823.65,683.131 1824.21,683.131 1824.77,683.131 1825.33,683.131 1825.89,683.131 1826.45,683.131 1827,683.131 1827.56,683.131 1828.12,683.131 1828.68,683.131 1829.24,683.131 1829.8,683.131 1830.36,683.131 1830.92,683.131 1831.48,683.131 1832.04,683.131 1832.6,683.131 1833.16,683.131 1833.72,683.131 1834.27,683.131 1834.83,683.131 1835.39,683.131 1835.95,683.131 1836.51,683.131 1837.07,683.131 1837.63,683.131 1838.19,683.131 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.031843424655095 ± 0.021584327098976317\nProjected Energy: -4.012800951150911 ± (0.00685162507482584, 0.0067003810819210585)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.577738</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4226e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.2684e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">1.03e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.202e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.036e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">9.698e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321626\n -3.3631242916133584\n -0.7590191922770835\n  0.13584182219621965\n  0.15789998694608798\n  0.8767114411781414\n  1.5305929970973358\n  1.5835732611867366\n  3.0728703303258698\n  3.1256726539518462\n  4.862107221562164\n  6.260694850380588\n  6.40267121118311\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2Re(t) cos(k) + Im(t) sin(k)\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(\n    address; \n    u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0\n)\n\nImplements a one-dimensional extended Hubbard chain, also known as the t - V model,  in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Rimu.jl offers two other supertypes for operators that are less  restrictive than AbstractHamiltonian.  AbstractObservable and AbstractOperators both can represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by  passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps. Some observables are also AbstractHamiltonians. The full type hierarchy is","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractObservable\nAbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nReducedDensityMatrix\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractObservable","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractObservable","text":"AbstractObservable{T}\n\nMost permissive supertype for operators in the type hierarchy:\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nAbstractObservable provides an interface for operators that can appear in a three-way dot product dot(x, op, y) with two vectors of type AbstractDVec. The result is a value of type T, which is also returned by the eltype function. This may be a vector type associated with a scalar type returned by the scalartype function.\n\nThe AbstractObservable type is useful for defining observables that can be calculated in the context of a ProjectorMonteCarloProblem using AllOverlaps.\n\nInterface\n\nBasic interface methods to implement:\n\nInterfaces.dot_from_right(x, op, y)\nallows_address_type(op, type)\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\n\nSee also AbstractOperator, AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T} <: AbstractObservable{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value whereas AbstractHamiltonians requre a scalar eltype.\n\nAbstractHamiltonian{T} <: AbstractOperator{T} <: AbstractObservable{T}\n\nThe AbstractOperator type is part of the AbstractObservable hierarchy. It is more restrictive than AbstractObservable in that it requires the interface for the generation of diagonal and off-diagonal elements.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractOperator\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractOperator\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ReducedDensityMatrix","page":"Hamiltonians","title":"Rimu.Hamiltonians.ReducedDensityMatrix","text":"ReducedDensityMatrix(p; ELTYPE = Float64) <: AbstractObservable{Matrix{ELTYPE}}\n\nA matrix-valued operator that can be used to calculate the p-particle reduced density matrix. The matrix elements are defined as:\n\nhatρ^(p)_j_1j_1k_1k_p =  prod_i=1^p a^_j_i prod_l=p^1 a_k_l\n\nThe integer indices j_i and k_i represent single particle modes. For efficiency they are chosen to be distinct and ordered:\n\nj_1  j_2  ldots  j_p quad land quad k_1  k_2  ldots  k_p\n\nReducedDensityMatrix can be used to construct the single-particle reduced density matrix (with p == 1) for fermionic and bosonic Fock spaces with address types <: SingleComponentFockAddress. For higher order reduced density matrices with p > 1 only fermionic Fock addresses (FermiFS) are supported due to the ordering of indices.\n\nReducedDensityMatrix can be used with dot or AllOverlaps to calculate the whole matrix in one go.\n\nExamples\n\njulia> dvec_b = PDVec(BoseFS(1,1)=>0.5, BoseFS(2,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|2 0⟩\" => 0.5\n  fs\"|1 1⟩\" => 0.5\n\njulia> Op1 = ReducedDensityMatrix(1)\nReducedDensityMatrix(1)\n\njulia> dot(dvec_b,Op1,dvec_b)\n2×2 Hermitian{Float64, Matrix{Float64}}:\n 0.75      0.353553\n 0.353553  0.25\n\njulia> Op2 = ReducedDensityMatrix(2)\nReducedDensityMatrix(2)\n\njulia> dot(dvec_b,Op2,dvec_b)\nERROR: ArgumentError: ReducedDensityMatrix(p) with `p > 1` requires `FermiFS` addresses\n\njulia> dvec_f = PDVec(FermiFS(1,1,0,0)=>0.5, FermiFS(0,1,1,0)=>0.5)\n2-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|⋅↑↑⋅⟩\" => 0.5\n  fs\"|↑↑⋅⋅⟩\" => 0.5\n\njulia> dot(dvec_f,Op2,dvec_f)\n6×6 Hermitian{Float64, Matrix{Float64}}:\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.25  0.0  0.25  0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n 0.0   0.0  0.0   0.0  0.0  0.0\n\nSee also single_particle_density, SingleParticleDensity, SingleParticleExcitation, TwoParticleExcitation.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator, AbstractObservable.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractObservable)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractObservable)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractObservable interface.\n\nnote: Note\nNew types do not have to implement this method explicitly. An implementation is provided based on the AbstractObservable's type parameter.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractObservable, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, NTuple{var\"#s61\", Int64} where var\"#s61\", NTuple{var\"#s5\", Int64} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.2-dev. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, NTuple{N, AbstractDVec}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory\nmapreduce\nsum_mutating!","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Base.mapreduce","page":"Dict vectors","title":"Base.mapreduce","text":"mapreduce(f, op, keys(::PDVec); [init])\nmapreduce(f, op, values(::PDVec); [init])\nmapreduce(f, op, pairs(::PDVec); [init])\n\nPerform a parallel reduction operation on PDVecs. MPI-compatible. Is used in the definition of various functions from Base such as reduce, sum, prod, etc.\n\ninit, if provided, must be a neutral element for op.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sum_mutating!","page":"Dict vectors","title":"Rimu.Interfaces.sum_mutating!","text":"sum_mutating!(accumulator, [f! = add!], keys(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], values(::PDVec); [init])\nsum_mutating!(accumulator, [f! = add!], pairs(::PDVec); [init])\n\nPerform a parallel sum on PDVecs for vector-valued results while minimizing allocations. The result of the sum will be added to accumulator and stored in accumulator. MPI-compatible. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nIf provided, init must be a neutral element for + and of the same type as accumulator.\n\nSee also mapreduce.\n\n\n\n\n\nsum_mutating!(accumulator, [f! = add!], iterator)\n\nAdd the sum of elements in iterator to accumulator, storing the result in accumulator. If f! is provided, it must accept two arguments, the first being the accumulator and the second the element of the iterator. Otherwise, add! is used.\n\nSee also mapreduce.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractObservable, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
